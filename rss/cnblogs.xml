<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>用canal监控binlog并实现mysql定制同步数据的功能 - 何白白</title>
<link>http://www.cnblogs.com/hebaibai/p/10911899.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hebaibai/p/10911899.html</guid>
<description>&lt;h2&gt;业务背景&lt;/h2&gt;
&lt;p&gt;写任何工具都不能脱离实际业务的背景。开始这个项目的时候是因为现有的项目中数据分布太零碎，零零散散的分布在好几个数据库中，没有统一的数据库来收集这些数据。这种情况下想做一个大而全的会员中心系统比较困难。（这边是一个以互联网保险为中心的项目，保单，会员等数据很零散的储存在好几个项目之中，并且项目之间的数据基本上是隔离的）。&lt;/p&gt;
&lt;p&gt;现有的项目数据库是在腾讯云中储存，虽然腾讯提供了数据同步功能，但是这样必须要表结构相同才行，并不符合我们的需求。所以需要自行开发。&lt;/p&gt;

&lt;p&gt;项目在这里：&lt;a href=&quot;https://github.com/hjx601496320/miner&quot;&gt;https://github.com/hjx601496320/miner。&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;需求&lt;/h2&gt;
&lt;p&gt;1：需要能灵活配置。&lt;/p&gt;
&lt;p&gt;2：实时数据10分钟内希望可以完成同步。&lt;/p&gt;
&lt;p&gt;3：来源数据与目标数据可能结构，字段名称不同。&lt;/p&gt;
&lt;p&gt;4：增删改都可以同步。&lt;/p&gt;
&lt;h2&gt;技术选择&lt;/h2&gt;
&lt;p&gt;这个任务交给了我和另外一个同事来做。&lt;/p&gt;
&lt;h3&gt;同事的&lt;/h3&gt;
&lt;p&gt;同事希望可以通过ETL工具Kettle来做，这个东西我没有研究过，是同事自己在研究。具体过程不是很清楚，但是最后是通过在mysql中设置更新，修改，删除的触发器，然后在Kettle中做了一个定时任务，实现了数据同步的功能，初步测试符合需求。但是必须要在数据库中设置触发器，并且会有一个临时表，这一点我个人不是很喜欢。&lt;/p&gt;
&lt;h3&gt;我的&lt;/h3&gt;
&lt;p&gt;我是本着能自己写就自己写的原则&lt;img src=&quot;https://tse1-mm.cn.bing.net/th?id=OIP.Oe8tcCYGQ7FCW4AP7yQfKAHaHa&amp;amp;w=104&amp;amp;h=105&amp;amp;c=8&amp;amp;rs=1&amp;amp;qlt=90&amp;amp;dpr=1.25&amp;amp;pid=3.1&amp;amp;rm=2&quot; alt=&quot;emoji çå¾åç»æ&quot; width=&quot;26&quot; height=&quot;26&quot;/&gt;，准备自己写一个。刚开始使用的是定时任务比较两个库的数据差别，然后再同步数据。但是经过一定的数据测试后，发现在数据量大的时候，定时任务中的上一个任务没有执行完毕，下一个任务就又开始了。这样造成了两边数据不一致。最终这个方案废弃了。&lt;/p&gt;
&lt;p&gt;后来通过研究，发现mysql的数据操作会记录在binlog中，这时就有了新的方案。可以通过逐行获取binlog信息，经过解析数据后，同步在目标库中。&lt;/p&gt;
&lt;p&gt;既然有了方案，那么就开始做吧。&lt;/p&gt;
&lt;h2&gt;开始尝试：1&lt;/h2&gt;
&lt;p&gt;首先要打开数据库的binlog功能，这一步比较简单，修改mysql的配置文件：/etc/mysql/mysql.conf.d/mysqld.cnf，添加：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
server-id        = 1
log_bin            = /var/log/mysql/mysql-bin.log
expire_logs_days    = 10
max_binlog_size         = 100M
binlog_format           = ROW
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后重启mysql 就好了，具体每个参数的意思，搜索一下就好了。这时候随意的对某一个数据库中的表做一下增删改，对应的日志就会记录在/var/log/mysql/这个文件夹下了。我们看一下这个文件夹里的东西：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1590050/201905/1590050-20190523150233533-1904801211.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里的文件是没有办法正常查看的，需要使用mysql提供的命令来查看，命令是这个样子的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
1：查看
mysqlbinlog mysql-bin.000002
2：指定位置查看
mysqlbinlog --start-position=&quot;120&quot; --stop-position=&quot;332&quot; mysql-bin.000002
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因为我们现在的binlog_format指定的格式是ROW（就在上面写的，还记得吗？），所谓binlog文件的内容没有办法正常查看，因为他是这个样子的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1590050/201905/1590050-20190523150245782-877982967.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这时，我们需要：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
对输出进行解码
mysqlbinlog --base64-output=decode-rows -v mysql-bin.000001
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这时候，显示的结果就变成了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1590050/201905/1590050-20190523150304743-1693286621.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;虽然还不是正常的sql，但是好赖是有一定的格式了。&lt;/p&gt;
&lt;p&gt;but自己来做解析的话还是很麻烦，so～放弃这种操作。&lt;/p&gt;
&lt;h2&gt;继续尝试：2&lt;/h2&gt;
&lt;p&gt;经过再次研究后，发现数据库中执行sql也是可以查看binlog的。主要有如下几条命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
重置binlog
reset master;

查看binlog的配置
show variables like '%binlog%';

查看所有的binlog
show binary logs;

查看正在写入的binlog
show master status;

查看指定binlog文件
show binlog events in 'mysql-bin.000001';

查看指定binlog文件，并指定位置
show binlog events in 'mysql-bin.000001' from [pos] limit [显示多少条];
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;按照上面的命令执行结果为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1590050/201905/1590050-20190523150318954-2002549764.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;发现sql还是不能正常显示。这里的原因应该是binlog_format配置的原因。将其修改为 binlog_format=Mixed后，完美解决。经过数据库中一通增删改后，显示的sql类似这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
use `pay`; /* ApplicationName=DataGrip 2018.2.5 */ UPDATE `pay`.`p_pay_log` t SET t.`mark_0` = 'sdfsdf' WHERE t.`id` LIKE '342' ESCAPE '#'
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;现在似乎已经可以开始写数据同步了，只要在启动的时候获取当正在使用的是哪一个日志文件，记录binlog的位置，然后一点一点向下执行，解析sql就好了。但是在这个过程中，我发现阿里巴巴有一款开源的软件可以用。就是标题上说道的：canal。看了一下网站上的介绍，简直美滋滋。&lt;/p&gt;
&lt;p&gt;它的文档和代码地址在这里：&lt;a href=&quot;https://github.com/alibaba/canal&quot;&gt;https://github.com/alibaba/canal&lt;/a&gt;，大家可以看一下。现在就准备用这个来完成我所需要的功能。&lt;/p&gt;
&lt;h2&gt;正式开始写&lt;/h2&gt;
&lt;p&gt;首先看一下介绍，canal是需要单独运行一个服务的，这个服务具体的配置还是比较简单的。它的作用我自己理解就是监控binlog，然后根据自己的需要获取binlog中一定量的数据。这个数据是经过处理的，可以比较方便的知道里面的具体信息。比如那些数据发生了变动，每列数据的列名是什么，变动前和变动后的值是啥之类的。那么开始。&lt;/p&gt;
&lt;h3&gt;1：我的想法&lt;/h3&gt;
&lt;p&gt;1）：项目启动的时候，开启canal的链接，以及初始化一些配置。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
@Bean
public CanalConnector canalConnector() {
    CanalConnector connector = CanalConnectors.newSingleConnector(
            //对应canal服务的链接
            new InetSocketAddress(canalConf.getIp(), canalConf.getPort()),
            //链接的目标，这里对应canal服务中的配置，需要查阅文档
            canalConf.getDestination(), 
            //不知道是什么用户，使用“”
            canalConf.getUser(), 
            //不知道是什么密码，使用“”
            canalConf.getPassword()
    );
    return connector;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2）：先开启一个线程，里面写一个死循环，用于从canal的服务中获取binlog中的消息。这个消息类是：com.alibaba.otter.canal.protocol.Message。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
Message message = connector.getWithoutAck(100);

connector：canal链接的实例化对象。
connector.getWithoutAck(100)：从连接中获取100条binlog中的数据。
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3）：取出Message中的事件集合，就是binlog中的每一条数据。将类型为增删改的数据取出，之后每一条数据放在一个线程中，用线程池去执行它。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
List&amp;lt;Entry&amp;gt; entries = message.getEntries();

message.getEntries()：从链接中获取的数据集合，每一条代表1条binlog数据
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;4）：在每一个线程中，取出Entry中的数据，根据其类型拼接各种sql，并执行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
Header header = entry.getHeader();
获取发生变化的表名称，可能会没有
String tableName = header.getTableName();

获取发生变化的数据库名称，可能会没有
String schemaName = header.getSchemaName();

//获取事件类型
EventType eventType = rowChange.getEventType();
这里我们只是用其中的三种类型：
    EventType.DELETE 删除
    EventType.INSERT 插入
    EventType.UPDATE 更新

//获取发生变化的数据
RowChange rowChange = CanalEntry.RowChange.parseFrom(entry.getStoreValue());

//遍历其中的数据
int rowDatasCount = rowChange.getRowDatasCount();
for (int i = 0; i &amp;lt; rowDatasCount; i++) {
    //每一行中的数据
    RowData rowData = rowChange.getRowDatas(i);
}

//获取修改前的数据
List&amp;lt;Column&amp;gt; before = rowData.getBeforeColumnsList();

//获取修改后的数据
List&amp;lt;Column&amp;gt; after = rowData.getAfterColumnsList();

Column中有一系列方法，比如是否发生修改，时候为key，是否是null等，就不在细说了。
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2：万事具备，可以开始写了&lt;/h3&gt;
&lt;p&gt;1）：这里先写一个线程，用于不停的从canal服务中获取消息，然后创建新的线程并让其处理其中的数据。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
@Override
public void run() {
    while (true) {
        //主要用于在链接失败后用于再次尝试重新链接
        try {
            if (!run) {
                
                //打开链接，并设置 run=true
                startCanal();
            }
        } catch (Exception e) {

            System.err.println(&quot;连接失败，尝试重新链接。。。&quot;);
            threadSleep(3 * 1000);
        }
        System.err.println(&quot;链接成功。。。&quot;);
        //不停的从CanalConnector中获取消息
        try {
            while (run) {
                
                //获取一定数量的消息，这里为线程池数量×3
                Message message = connector.getWithoutAck(batchSize * 3);
                long id = message.getId();

                //处理获取到的消息
                process(message);
                connector.ack(id);
            }
        } catch (Exception e) {
            System.err.println(e.getMessage());
        } finally {
            //如果发生异常，最终关闭连接，并设置run=false
            stopCanal();
        }
    }

}
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
void process(Message message) {
    List&amp;lt;Entry&amp;gt; entries = message.getEntries();
    if (entries.size() &amp;lt;= 0) {
        return;
    }
    log.info(&quot;process message.entries.size:{}&quot;, entries.size());
    for (Entry entry : entries) {
        Header header = entry.getHeader();
        String tableName = header.getTableName();
        String schemaName = header.getSchemaName();

        //这里判断是否可以取出数据库名称和表名称，如果不行，跳过循环
        if (StringUtils.isAllBlank(tableName, schemaName)) {
            continue;
        }

        //创建新的线程，并执行
        jobList.stream()
                .filter(job -&amp;gt; job.isMatches(tableName, schemaName))
                .forEach(job -&amp;gt; executorService.execute(job.newTask(entry)));
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里的jobList是我自己定义List&amp;lt;Job&amp;gt;，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
package com.hebaibai.miner.job;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.otter.canal.protocol.CanalEntry;
import com.google.protobuf.InvalidProtocolBufferException;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.jdbc.core.JdbcTemplate;

import static com.alibaba.otter.canal.protocol.CanalEntry.Entry;

@Slf4j
@Data
public abstract class Job {


    /**
     * 数据库链接
     */
    protected JdbcTemplate jdbcTemplate;

    /**
     * 额外配置
     */
    protected JSONObject prop;

    /**
     * 校验目标是否为合适的数据库和表
     *
     * @param table
     * @param database
     * @return
     */
    abstract public boolean isMatches(String table, String database);

    /**
     * 实例化一个Runnable
     *
     * @param entry
     * @return
     */
    abstract public Runnable newTask(final Entry entry);


    /**
     * 获取RowChange
     *
     * @param entry
     * @return
     */
    protected CanalEntry.RowChange getRowChange(Entry entry) {
        try {
            return CanalEntry.RowChange.parseFrom(entry.getStoreValue());
        } catch (InvalidProtocolBufferException e) {
            e.printStackTrace();
        }
        return null;
    }

}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;jobList里面放的是Job的实现类。&lt;/p&gt;
&lt;h3&gt;3：写一个Job的实现类，并用于同步表，并转换字段名称。&lt;/h3&gt;
&lt;p&gt;因为需求中要求两个同步的数据中可能字段名称不一致，所以我写了一个josn用来配置两个表的字段对应关系：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
别的配置
。。。
&quot;prop&quot;: {
//来源数据库
  &quot;database&quot;: &quot;pay&quot;,
//来源表
  &quot;table&quot;: &quot;p_pay_msg&quot;,
//目标表（目标库在其他地方配置）
  &quot;target&quot;: &quot;member&quot;,
//字段对应关系
//key  ：来源表的字段名
//value：目标表的字段名
  &quot;mapping&quot;: {
    &quot;id&quot;: &quot;id&quot;,
    &quot;mch_code&quot;: &quot;mCode&quot;,
    &quot;send_type&quot;: &quot;mName&quot;,
    &quot;order_id&quot;: &quot;phone&quot;,
    &quot;created_time&quot;: &quot;create_time&quot;,
    &quot;creator&quot;: &quot;remark&quot;
  }
}
。。。
别的配置
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面是全部的代码，主要做的就是取出变动的数据，按照对应的字段名重新拼装sql，然后执行就好了，不多解释。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
package com.hebaibai.miner.job;

import com.alibaba.fastjson.JSONObject;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import static com.alibaba.otter.canal.protocol.CanalEntry.*;

/**
 * 单表同步，表的字段名称可以不同，类型需要一致
 * 表中需要有id字段
 */
@SuppressWarnings(&quot;ALL&quot;)
@Slf4j
public class TableSyncJob extends Job {


    /**
     * 用于校验是否适用于当前的配置
     *
     * @param table
     * @param database
     * @return
     */
    @Override
    public boolean isMatches(String table, String database) {
        return prop.getString(&quot;database&quot;).equals(database) &amp;amp;&amp;amp;
                prop.getString(&quot;table&quot;).equals(table);
    }

    /**
     * 返回一个新的Runnable
     *
     * @param entry
     * @return
     */
    @Override
    public Runnable newTask(final Entry entry) {
        return () -&amp;gt; {
            RowChange rowChange = super.getRowChange(entry);
            if (rowChange == null) {
                return;
            }
            EventType eventType = rowChange.getEventType();
            int rowDatasCount = rowChange.getRowDatasCount();
            for (int i = 0; i &amp;lt; rowDatasCount; i++) {
                RowData rowData = rowChange.getRowDatas(i);
                if (eventType == EventType.DELETE) {
                    delete(rowData.getBeforeColumnsList());
                }
                if (eventType == EventType.INSERT) {
                    insert(rowData.getAfterColumnsList());
                }
                if (eventType == EventType.UPDATE) {
                    update(rowData.getBeforeColumnsList(), rowData.getAfterColumnsList());
                }
            }
        };
    }

    /**
     * 修改后的数据
     *
     * @param after
     */
    private void insert(List&amp;lt;Column&amp;gt; after) {
        //找到改动的数据
        List&amp;lt;Column&amp;gt; collect = after.stream().filter(column -&amp;gt; column.getUpdated() || column.getIsKey()).collect(Collectors.toList());
        //根据表映射关系拼装更新sql
        JSONObject mapping = prop.getJSONObject(&quot;mapping&quot;);
        String target = prop.getString(&quot;target&quot;);
        List&amp;lt;String&amp;gt; columnNames = new ArrayList&amp;lt;&amp;gt;();
        List&amp;lt;String&amp;gt; columnValues = new ArrayList&amp;lt;&amp;gt;();
        for (int i = 0; i &amp;lt; collect.size(); i++) {
            Column column = collect.get(i);
            if (!mapping.containsKey(column.getName())) {
                continue;
            }
            String name = mapping.getString(column.getName());
            columnNames.add(name);
            if (column.getIsNull()) {
                columnValues.add(&quot;null&quot;);
            } else {
                columnValues.add(&quot;'&quot; + column.getValue() + &quot;'&quot;);
            }
        }
        StringBuilder sql = new StringBuilder();
        sql.append(&quot;REPLACE INTO &quot;).append(target).append(&quot;( &quot;)
                .append(StringUtils.join(columnNames, &quot;, &quot;))
                .append(&quot;) VALUES ( &quot;)
                .append(StringUtils.join(columnValues, &quot;, &quot;))
                .append(&quot;);&quot;);
        String sqlStr = sql.toString();
        log.debug(sqlStr);
        jdbcTemplate.execute(sqlStr);
    }

    /**
     * 更新数据
     *
     * @param before 原始数据
     * @param after  更新后的数据
     */
    private void update(List&amp;lt;Column&amp;gt; before, List&amp;lt;Column&amp;gt; after) {
        //找到改动的数据
        List&amp;lt;Column&amp;gt; updataCols = after.stream().filter(column -&amp;gt; column.getUpdated()).collect(Collectors.toList());
        //找到之前的数据中的keys
        List&amp;lt;Column&amp;gt; keyCols = before.stream().filter(column -&amp;gt; column.getIsKey()).collect(Collectors.toList());
        //没有key,执行更新替换
        if (keyCols.size() == 0) {
            return;
        }
        //根据表映射关系拼装更新sql
        JSONObject mapping = prop.getJSONObject(&quot;mapping&quot;);
        String target = prop.getString(&quot;target&quot;);
        //待更新数据
        List&amp;lt;String&amp;gt; updatas = new ArrayList&amp;lt;&amp;gt;();
        for (int i = 0; i &amp;lt; updataCols.size(); i++) {
            Column updataCol = updataCols.get(i);
            if (!mapping.containsKey(updataCol.getName())) {
                continue;
            }
            String name = mapping.getString(updataCol.getName());
            if (updataCol.getIsNull()) {
                updatas.add(&quot;`&quot; + name + &quot;` = null&quot;);
            } else {
                updatas.add(&quot;`&quot; + name + &quot;` = '&quot; + updataCol.getValue() + &quot;'&quot;);
            }
        }
        //如果没有要修改的数据，返回
        if (updatas.size() == 0) {
            return;
        }
        //keys
        List&amp;lt;String&amp;gt; keys = new ArrayList&amp;lt;&amp;gt;();
        for (Column keyCol : keyCols) {
            String name = mapping.getString(keyCol.getName());
            keys.add(&quot;`&quot; + name + &quot;` = '&quot; + keyCol.getValue() + &quot;'&quot;);
        }
        StringBuilder sql = new StringBuilder();
        sql.append(&quot;UPDATE &quot;).append(target).append(&quot; SET &quot;);
        sql.append(StringUtils.join(updatas, &quot;, &quot;));
        sql.append(&quot; WHERE &quot;);
        sql.append(StringUtils.join(keys, &quot;AND &quot;));
        String sqlStr = sql.toString();
        log.debug(sqlStr);
        jdbcTemplate.execute(sqlStr);
    }

    /**
     * 删除数据
     *
     * @param before
     */
    private void delete(List&amp;lt;Column&amp;gt; before) {
        //找到改动的数据
        List&amp;lt;Column&amp;gt; keyCols = before.stream().filter(column -&amp;gt; column.getIsKey()).collect(Collectors.toList());
        if (keyCols.size() == 0) {
            return;
        }
        //根据表映射关系拼装更新sql
        JSONObject mapping = prop.getJSONObject(&quot;mapping&quot;);
        String target = prop.getString(&quot;target&quot;);
        StringBuilder sql = new StringBuilder();
        sql.append(&quot;DELETE FROM `&quot;).append(target).append(&quot;` WHERE &quot;);
        List&amp;lt;String&amp;gt; where = new ArrayList&amp;lt;&amp;gt;();
        for (Column column : keyCols) {
            String name = mapping.getString(column.getName());
            where.add(name + &quot; = '&quot; + column.getValue() + &quot;' &quot;);
        }
        sql.append(StringUtils.join(where, &quot;and &quot;));
        String sqlStr = sql.toString();
        log.debug(sqlStr);
        jdbcTemplate.execute(sqlStr);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;项目在这里：&lt;a href=&quot;https://github.com/hjx601496320/miner&quot;&gt;https://github.com/hjx601496320/miner&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;原文链接：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 用canal监控binlog并实现mysql定制同步数据的功能&quot; href=&quot;https://www.cnblogs.com/hebaibai/p/10911899.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/hebaibai/p/10911899.html&lt;/a&gt; &lt;/p&gt;
</description>
<pubDate>Thu, 23 May 2019 07:04:00 +0000</pubDate>
<dc:creator>何白白</dc:creator>
<og:description>业务背景 写任何工具都不能脱离实际业务的背景。开始这个项目的时候是因为现有的项目中数据分布太零碎，零零散散的分布在好几个数据库中，没有统一的数据库来收集这些数据。这种情况下想做一个大而全的会员中心系统</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hebaibai/p/10911899.html</dc:identifier>
</item>
<item>
<title>RabbitMQ使用教程（一）RabbitMQ环境安装配置及Hello World示例 - 周伟伟的博客</title>
<link>http://www.cnblogs.com/zwwhnly/p/10911926.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zwwhnly/p/10911926.html</guid>
<description>&lt;p&gt;你是否听说过或者使用过&lt;strong&gt;队列&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;你是否听说过或者使用过&lt;strong&gt;消息队列&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;你是否听说过或者使用过&lt;strong&gt;RabbitMQ&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;提到这几个词，用过的人，也许觉得很简单，没用过的人，也许觉得很复杂，至少在我没使用消息队列之前，听别人提到消息队列，都感觉很复杂，很高深。&lt;/p&gt;
&lt;p&gt;好了，言归正传，本篇博客我们就讲解下什么是消息队列，RabbitMQ环境的安装配置，最后通过一个Hello World示例了解下RabbitMQ的使用方法。&lt;/p&gt;
&lt;h2 id=&quot;基本概念讲解&quot;&gt;1.基本概念讲解&lt;/h2&gt;
&lt;h3 id=&quot;队列queue&quot;&gt;1.1队列(Queue)&lt;/h3&gt;
&lt;p&gt;队列是常用的数据结构之一，是一种特殊的线性表，特殊之处在于它只允许在表的前端(front)进行删除操作，而在表的后端(rear)进行插入操作。&lt;/p&gt;
&lt;p&gt;进行插入操作的端称为队尾，进行删除操作的端称为对头。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523103314719-1638814388.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在Java中,java.util包下已经有队列的相关实现，我们可以直接使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523104056179-240185034.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;消息队列message-queue&quot;&gt;1.2消息队列(Message Queue)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;消息&lt;/strong&gt;是计算机/应用间传送的数据单位，可以非常简单，例如只包含文本字符串，也可以很复杂，可能包含嵌入对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;消息队列&lt;/strong&gt;是在消息的传输过程中保存消息的容器。&lt;/p&gt;
&lt;p&gt;消息传输时，先发送到队列，队列的主要目的是提供路由并保证消息的传递，如果发送消息时接收者不可用，消息队列会保留消息，直到可以成功的传递它。&lt;/p&gt;
&lt;p&gt;可以把消息队列理解成快递公司，你需要寄一个物件（消息）给你的朋友，快递公司收到物件会保证物件送到你的朋友手中，可能存在多次寄送才送达成功的情况，比如第一次送过去，你朋友不在家。&lt;/p&gt;
&lt;p&gt;也许有人好奇，为什么我们不直接使用JDK自带的队列，而是要使用消息队列呢？&lt;/p&gt;
&lt;p&gt;这是因为JDK自带的队列都存储在内存中，一但应用或者服务器挂了，消息就丢失了，使用消息队列可以避免消息丢失问题（注意不是100%不丢失），就像快递公司会保证你的物件寄到你的朋友手中，但肯定有丢件的几率。&lt;/p&gt;
&lt;h3 id=&quot;rabbitmq&quot;&gt;1.3RabbitMQ&lt;/h3&gt;
&lt;p&gt;RabbitMQ是用Erlang语言开发的基于高级消息队列协议(AMQP)的消息队列中间件。&lt;/p&gt;
&lt;p&gt;因为它开源，而且版本更新快，所以在国内互联网公司被广泛使用。&lt;/p&gt;
&lt;p&gt;其它使用的消息中间件还有ActiveMQ，RocketMQ，Kafka等，有兴趣的同学可以自行研究。&lt;/p&gt;
&lt;p&gt;还有2个专业术语要了解下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生产者&lt;/strong&gt;：发送消息的应用程序被称为生产者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;消费者&lt;/strong&gt;：接收消息的应用程序被称为消费者。&lt;/p&gt;
&lt;h2 id=&quot;rabbitmq安装及配置&quot;&gt;2.RabbitMQ安装及配置&lt;/h2&gt;
&lt;p&gt;了解完基本概念，让我们在本机上安装下RabbitMQ，因为它是基于Erlang语言开发的，所以我们要先安装Erlang。&lt;/p&gt;
&lt;h3 id=&quot;erlang安装及配置&quot;&gt;2.1Erlang安装及配置&lt;/h3&gt;
&lt;p&gt;Erlang下载地址：&lt;a href=&quot;http://www.erlang.org/downloads&quot; class=&quot;uri&quot;&gt;http://www.erlang.org/downloads&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为我的电脑是Windows 64位系统，所以我下载的是64位的，系统是32位的同学注意下版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523111514020-900558592.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装过程比较简单，以下为部分截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523111555492-1093676503.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523111601558-1686864295.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523111606649-141305527.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523111611998-534380743.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装完成后，需要新建个环境变量(打开方式：计算机--右键--属性--高级系统设置--高级--环境变量)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523112246994-115493740.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;ERLANG_HOME E:\Program Files\erl10.4(修改为你的安装路径)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;rabbitmq安装及配置-1&quot;&gt;2.2RabbitMQ安装及配置&lt;/h3&gt;
&lt;p&gt;RabbitMQ下载地址：&lt;a href=&quot;https://www.rabbitmq.com/install-windows.html&quot; class=&quot;uri&quot;&gt;https://www.rabbitmq.com/install-windows.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523112446226-1465641633.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装过程也比较简单，以下为部分截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523112534693-1666527648.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523112540371-684558061.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523112546370-580038327.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523112552164-1478518125.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装完成后，在cmd窗口中执行以下命令激活RabbitMQ Manage Plugin&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;pre class=&quot;powershell&quot;&gt;
&lt;code&gt;&quot;E:\Program Files\RabbitMQ Server\rabbitmq_server-3.7.15\sbin\rabbitmq-plugins.bat&quot; enable rabbitmq_management&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523113230292-1823074133.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后执行命令重启RabbitMQ服务：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;pre class=&quot;powershell&quot;&gt;
&lt;code&gt;net stop RabbitMQ &amp;amp;&amp;amp; net start RabbitMQ&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;如果你的cmd窗口不是以管理员身份打开的，会出现如下报错信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523113511904-294791328.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;解决方法也很简单，以管理员身份打开cmd窗口执行命令即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523113518503-1956304339.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于这一步，可以不使用命令重启RabbitMQ服务，而是打开Windows的服务列表，找到RabbitMQ服务，重启即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523134445307-497021748.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这一步，RabbitMQ的安装就算完成了，其中有几个默认值，我们要知晓下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;默认的端口号：5672&lt;/li&gt;
&lt;li&gt;默认的用户是guest guest&lt;/li&gt;
&lt;li&gt;管理后台的默认端口号：15672&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;浏览器输入http://localhost:15672/，我们可以看到RabbitMQ的管理后台，然后使用默认的guest账号登录，在这个后台，可以完成新建用户，配置用户角色，新建队列等操作，当然，如果有的同学比较喜欢命令行操作，也都有相对应的命令来完成操作，关于这些内容，后续单独再写博客讲解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523135914760-1488803608.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523135919488-505326802.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;hello-world示例&quot;&gt;3.Hello World示例&lt;/h2&gt;
&lt;p&gt;既然RabbitMQ环境安装好了，那么我们通过1个简单的示例来看下效果。&lt;/p&gt;
&lt;p&gt;首先在pom文件中，添加依赖：&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;com.rabbitmq&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;amqp-client&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;5.7.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后新建一个生产者类(Producer)，用来新建一个队列'hello'，然后往队列里发送消息‘Hello World’：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.zwwhnly.springbootaction.rabbitmq.helloworld;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

public class Producer {
    private final static String QUEUE_NAME = &quot;hello&quot;;

    public static void main(String[] args) throws IOException, TimeoutException {
        // 创建连接
        ConnectionFactory factory = new ConnectionFactory();
        // 设置 RabbitMQ 的主机名
        factory.setHost(&quot;localhost&quot;);
        // 创建一个连接
        Connection connection = factory.newConnection();
        // 创建一个通道
        Channel channel = connection.createChannel();
        // 指定一个队列,不存在的话自动创建
        channel.queueDeclare(QUEUE_NAME, false, false, false, null);
        // 发送消息
        String message = &quot;Hello World!&quot;;
        channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, message.getBytes());
        System.out.println(&quot; [x] Sent '&quot; + message + &quot;'&quot;);
        // 关闭频道和连接
        channel.close();
        connection.close();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行代码，在RabbitMQ管理后台，会看到队列新建成功，并且有1个消息待消费：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523143231102-1948546170.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后我们新建一个消费者类(Consumer)，用来消费这个消息：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.zwwhnly.springbootaction.rabbitmq.helloworld;

import com.rabbitmq.client.*;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

public class Consumer {
    private final static String QUEUE_NAME = &quot;hello&quot;;

    public static void main(String[] args) throws IOException, TimeoutException {
        // 创建连接
        ConnectionFactory factory = new ConnectionFactory();
        // 设置 RabbitMQ 的主机名
        factory.setHost(&quot;localhost&quot;);
        // 创建一个连接
        Connection connection = factory.newConnection();
        // 创建一个通道
        Channel channel = connection.createChannel();
        // 指定一个队列
        channel.queueDeclare(QUEUE_NAME, false, false, false, null);
        // 创建队列消费者
        com.rabbitmq.client.Consumer consumer = new DefaultConsumer(channel) {
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope,
                                       AMQP.BasicProperties properties, byte[] body) throws IOException {
                String message = new String(body, &quot;UTF-8&quot;);
                System.out.println(&quot;Received Message '&quot; + message + &quot;'&quot;);
            }
        };
        channel.basicConsume(QUEUE_NAME, true, consumer);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行代码，我们会发现控制台输出：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Received Message 'Hello World!'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时再看下RabbitMQ管理后台，会发现队列'hello'待消费的消息为0：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201905/424537-20190523143909955-4355372.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;是不是觉得挺简单的呢，赶紧在本机安装试试吧！&lt;/p&gt;
&lt;h2 id=&quot;源码&quot;&gt;4.源码&lt;/h2&gt;
&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/zwwhnly/springboot-action.git&quot; class=&quot;uri&quot;&gt;https://github.com/zwwhnly/springboot-action.git&lt;/a&gt;，欢迎下载。&lt;/p&gt;
&lt;h2 id=&quot;参考链接&quot;&gt;5.参考链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/ericli-ericli/p/5902270.html&quot;&gt;windows下 安装 rabbitMQ 及操作常用命令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.720ui.com/2017/rabbitmq_action_01_helloworld/&quot;&gt;【译】RabbitMQ 实战教程（一） Hello World!&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 23 May 2019 06:58:00 +0000</pubDate>
<dc:creator>周伟伟的博客</dc:creator>
<og:description>你是否听说过或者使用过 队列 ？ 你是否听说过或者使用过 消息队列 ？ 你是否听说过或者使用过 RabbitMQ ？ 提到这几个词，用过的人，也许觉得很简单，没用过的人，也许觉得很复杂，至少在我没使用</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zwwhnly/p/10911926.html</dc:identifier>
</item>
<item>
<title>详细讲解：零知识证明 之 ZCash 完整的匿名交易流程 - 指尖下的幽灵</title>
<link>http://www.cnblogs.com/linguanh/p/10911822.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linguanh/p/10911822.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;作者：林冠宏 / 指尖下的幽灵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;1.0975609756098&quot;&gt;
&lt;p&gt;博客：&lt;a href=&quot;http://www.cnblogs.com/linguanh/&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/linguanh/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;0.80357142857143&quot;&gt;
&lt;p&gt;掘金：&lt;a href=&quot;https://juejin.im/user/587f0dfe128fe100570ce2d8&quot; class=&quot;uri&quot;&gt;https://juejin.im/user/587f0dfe128fe100570ce2d8&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;1.3095238095238&quot;&gt;
&lt;p&gt;GitHub ： &lt;a href=&quot;https://github.com/af913337456/&quot; class=&quot;uri&quot;&gt;https://github.com/af913337456/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;前序&lt;/li&gt;
&lt;li&gt;交易体的结构 note&lt;/li&gt;
&lt;li&gt;commitment 和 nullifier&lt;/li&gt;
&lt;li&gt;ZCash 1.0 的公私钥机制&lt;/li&gt;
&lt;li&gt;转账人发出交易 note&lt;/li&gt;
&lt;li&gt;收款人如何获取 note 的使用权&lt;/li&gt;
&lt;li&gt;零知识自证&lt;/li&gt;
&lt;li&gt;后记&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;前序&quot;&gt;前序&lt;/h3&gt;
&lt;p&gt;在这篇文章中，我将承接上一篇文章 &lt;a href=&quot;https://juejin.im/post/5ce02116e51d4510744c23d6&quot;&gt;详细讲解：零知识证明 之 zk-SNARK 开篇&lt;/a&gt; (开篇中介绍了什么是零知识证明及其它术语) 来&lt;code&gt;从一个完整的交易流程&lt;/code&gt; 讲解 &lt;code&gt;ZCash&lt;/code&gt; 是如何利用&lt;code&gt;零知识证明&lt;/code&gt;的&lt;code&gt;zk-SNARK&lt;/code&gt; 实现匿名交易的。&lt;/p&gt;
&lt;p&gt;其中第&lt;code&gt;六&lt;/code&gt;部分 &lt;code&gt;收款人如何获取 note 的使用权&lt;/code&gt; 是目前国内网上所有的介绍 &lt;code&gt;ZCash&lt;/code&gt; 的文章都没有谈及的，&lt;code&gt;造成了读者只知道交易的发出&lt;/code&gt;，而&lt;code&gt;不知道交易是凭借什么机制让收款人有权限使用的&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;此外，&lt;code&gt;&quot;现在关于 ZCash 的文章和回答，很多都不准确，甚至是有误导性的！&quot;&lt;/code&gt;此话---引自 &lt;a href=&quot;https://www.zhihu.com/people/kunxian/pins&quot;&gt;woodstock&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文章不从源码分析的角度去展开，那样的写作和阅读成本太高。&lt;/p&gt;
&lt;h3 id=&quot;交易体的结构-note&quot;&gt;交易体的结构 note&lt;/h3&gt;
&lt;p&gt;首先 &lt;code&gt;ZCash&lt;/code&gt; 在交易的整体模式上，参考了 &lt;code&gt;BTC&lt;/code&gt; 的 &lt;code&gt;UTXO&lt;/code&gt; 模型，拥有交易输入和交易输出的概念，对于 &lt;code&gt;UTXO&lt;/code&gt; 的讲解，可以自行网上搜索文章进行阅读，目前介绍 &lt;code&gt;UTXO&lt;/code&gt; 的优秀文章还是很多的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UTXO&lt;/code&gt; 是一种模型，模型是可以被以不同的形式展现出的。在 &lt;code&gt;ZCash&lt;/code&gt; 中，交易原始的输入输出结构体被形象成了代码中的 &lt;code&gt;note&lt;/code&gt; 结构体。&lt;/p&gt;
&lt;p&gt;一个完整的 &lt;code&gt;note&lt;/code&gt; 包含有如下的变量：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;持有者的公钥: a_pk，又称收款人地址&lt;/li&gt;
&lt;li&gt;面额: value，又被简称为 v，代币这笔 note 的代币数值&lt;/li&gt;
&lt;li&gt;随机数: rho, 是每一条 note 的唯一标识，当一条 note 被消费了之后，这个值会被放置到 &lt;code&gt;nullifier&lt;/code&gt; 表中，代表这条 note 已经被消费了，再次进行消费同一条 note的时候，会触发&lt;code&gt;双花&lt;/code&gt; 错误，即交易双花防护机制。&lt;/li&gt;
&lt;li&gt;随机数: r&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;用向量组代表上面的 note，可以表示为：&lt;code&gt;note = &amp;lt;a_pk , v , r , rho&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;commitment-和-nullifier&quot;&gt;commitment 和 nullifier&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;ZCash&lt;/code&gt; 中，存在两种表格，分别是：&lt;code&gt;commitment&lt;/code&gt; 和 &lt;code&gt;nullifier&lt;/code&gt;，下图取自于 &lt;code&gt;ZCash&lt;/code&gt; 的官方文档 &lt;a href=&quot;https://z.cash/blog/zcash-private-transactions/&quot;&gt;How Transactions Between Shielded Addresses Work&lt;/a&gt; 中，&lt;code&gt;提示&lt;/code&gt;：该文章内部并没有指出 note 的收款人是如何对一笔 note 有使用权限的，看完也会有很多疑问。&lt;/p&gt;
&lt;p&gt;图中显示出了 &lt;code&gt;commitment&lt;/code&gt; 和 &lt;code&gt;nullifier&lt;/code&gt; 表格的大致结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/5/23/16ae2c20ac9746f0?w=441&amp;amp;h=163&amp;amp;f=png&amp;amp;s=18610&quot;/&gt;&lt;/p&gt;
&lt;p&gt;左边的 &lt;code&gt;hashed notes&lt;/code&gt; 就是 &lt;code&gt;commitment&lt;/code&gt; 列表，右边的 &lt;code&gt;nullifier set&lt;/code&gt; 就是 &lt;code&gt;nullifier&lt;/code&gt; 列表。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;commitment&lt;/code&gt; 列表存储的是所有的，注意！是所有。存储所有 note 经过不可逆 hash 函数后生成的 hash 值 &lt;code&gt;Hx&lt;/code&gt; x∈ (1,2,3,4,5,6...N）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nullifier&lt;/code&gt; 列表存储的是&lt;code&gt;已经被消费&lt;/code&gt;的 note 中的随机数 &lt;code&gt;r&lt;/code&gt; 生成的 hash 值 &lt;code&gt;nfx&lt;/code&gt;。r 就是 note 结构中的 r。&lt;code&gt;nullifier&lt;/code&gt; 中文意思：&lt;code&gt;作废&lt;/code&gt;，&lt;code&gt;nullifier set&lt;/code&gt; 作废集合。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;注意一点&lt;/code&gt;：对于两个不同的 note，他们的 commitment hash 值一定不相同，从 hash 值又无法推测出其背后的 note.。&lt;/p&gt;
&lt;p&gt;如上图所示，在右边我们可以看到 r2 对应的 note2 的 nf1 已经被记录到了 &lt;code&gt;nullifier&lt;/code&gt; 列表中，这个 nf1 就是结构体中的 rho。被记录到了这里，代表着 note2 不再是 &lt;code&gt;UTXO&lt;/code&gt;，不再是没被花费的输出，它已经被消费了。&lt;/p&gt;
&lt;p&gt;一条&lt;code&gt;被花费的输出 output&lt;/code&gt;会导致一条&lt;code&gt;新产生的交易输入 input&lt;/code&gt;。继续以上图为例子，note2 作为被消费了的输出，据表可以， note3 应该是它所产生的交易的输入，此时 note3 还没被消费，因为它的 nf3 还没被记录到 &lt;code&gt;nullifier&lt;/code&gt; 列表。note2 相对于 note3 来说，note2 是 note3 的输入。note3 作为一条新的交易输入，还没输出给其它的 note。&lt;/p&gt;
&lt;h3 id=&quot;zcash-1.0-的公私钥机制&quot;&gt;ZCash 1.0 的公私钥机制&lt;/h3&gt;
&lt;p&gt;在认识交易被发出前的操作，我们现来认识下 &lt;code&gt;ZCash 1.0&lt;/code&gt; 的公私钥机制，下图取自于官方文档：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/5/23/16ae2d2f78f555d3?w=1248&amp;amp;h=868&amp;amp;f=png&amp;amp;s=334121&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面我将讲解下这图的主要要表达的意思，上面我列举的 note ，是一个整体的讲解，在实际的 &lt;code&gt;ZCash&lt;/code&gt; 源码中，note 其实还分为两种，分别是：&lt;code&gt;SproutNote&lt;/code&gt; 和 &lt;code&gt;SaplingNote&lt;/code&gt;。目前 &lt;code&gt;ZCash&lt;/code&gt; 使用的是第一种，本文所谈的也是 &lt;code&gt;SproutNote&lt;/code&gt; 。&lt;code&gt;ZCash&lt;/code&gt;的发展将会慢慢向第二种 &lt;code&gt;SaplingNote&lt;/code&gt; 迁移。&lt;/p&gt;
&lt;p&gt;因为 note 结构中有一个 a_pk 字段，在&lt;code&gt;SproutNote&lt;/code&gt; 和 &lt;code&gt;SaplingNote&lt;/code&gt;中，内部的字段组成是不同的，源码的定义如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/5/23/16ae2d6361860d77?w=1282&amp;amp;h=710&amp;amp;f=png&amp;amp;s=206692&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SaplingNote&lt;/code&gt; 中，明显 a_pk 不见了，多了其它的。回到下图，我们主要看左边的 &lt;code&gt;Sprout&lt;/code&gt;，其中：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;双竖线表示相同&lt;/li&gt;
&lt;li&gt;箭头表示生成关系，如果 A 指向B, 那么表示A可以生成B。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下图的&lt;code&gt;Sprout&lt;/code&gt; 中 a_sk 代表的是私钥，由 a_sk 可以生成第&lt;code&gt;一个公钥 a_pk&lt;/code&gt; 和 &lt;code&gt;私钥 sk_enc&lt;/code&gt;，由 sk_enc 可以生成第二个公钥&lt;code&gt;pk_enc&lt;/code&gt;。意味着：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;在ZCash 1.0 中，一个钱包地址里面包含由两个公钥：a_pk , pk_enc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/5/23/16ae2d2f78f555d3?w=1248&amp;amp;h=868&amp;amp;f=png&amp;amp;s=334121&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;转账人发出交易-note&quot;&gt;转账人发出交易 note&lt;/h3&gt;
&lt;p&gt;现在进行到转账人发出交易 note，假设转账人是A，收款人是B，A 要转 5 个币个B。&lt;/p&gt;
&lt;p&gt;那么 A 组装 note 的过程如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先 A 找到自己的一条或多条没消费的 note，即是 &lt;code&gt;UTXO&lt;/code&gt; 输出，每条 note 中有对应的 value，我们假设一条就足够转出，多条的情况是如果一条 note 无法满足目标转出 value，才会凑多条 note 作为输出。&lt;/li&gt;
&lt;li&gt;A 找出了 note 1 ，使用自己的 &lt;code&gt;私钥 sk_enc&lt;/code&gt; 解密 note 1，获取 note 1 中的 value 和其它数据，假设 value 是8，此时&lt;code&gt;8 &amp;gt; 5&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;A 先新建两条 note，分别是 note4 和 note5，note4 内部的 value 设置为 5，代表是要给 B 的。note 5 的 value 是 (8-5=3)，代表给自己找零，不找零将会损失掉这3个币，相关的&lt;code&gt;找零&lt;/code&gt;解析见&lt;code&gt;UTXO&lt;/code&gt;模型介绍。&lt;/li&gt;
&lt;li&gt;A 为 note 4 和 note 5 分别生成随机数 r4 和 r5&lt;/li&gt;
&lt;li&gt;A 将 B 的 a_pk 公钥设置到 note 4 里面去， 代表收款人是 B。再将自己的 a_pk 公钥设置到 note 5 里面去，代表收款人是自己。&lt;/li&gt;
&lt;li&gt;使用 hash 函数生成 note 4 和 note 5 的 rho。&lt;code&gt;PS: ( rho = nf = HASH (r) )&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;此时 note 4 和 note 5 分别是：&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;note4 = &amp;lt;B的a_pk ，v=5，r4，rho4&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;note5 = &amp;lt;A的a_pk ，v=3，r5，rho5&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;与此同时，A 还要将 note 1 的 nf2 (&lt;code&gt;nf2=HASH (r1)&lt;/code&gt;) 发往公链的节点网络，即 note 1 的 rho，此时节点在收到 nf2 后会判断是否已经在 &lt;code&gt;nullifier&lt;/code&gt; 列表存在 nf2 了，是的话，那么判断 note 1 被双花了。否则，就将 note 1 的 nf2 记录下来了。&lt;/li&gt;
&lt;li&gt;A 此时使用 B 的 pk_enc 签名 note 4，和自己的 pk_nec 签名 note 5。这里 B 的 pk_enc 是公开的，注意！ZCash 1.0 中，一个地址的 a_pk 和 pk_enc 都是公开的。&lt;/li&gt;
&lt;li&gt;A 将 note 4 通过秘密通道发给 B，自己的 note 5 便自己保存，同时将 note 4 和 note 5 的 hash 值 h4、h5 发给所有链上的节点。&lt;/li&gt;
&lt;li&gt;以上便是一个&lt;code&gt;发起交易&lt;/code&gt;的流程。&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;对上述流程可以提出下面细节&quot;&gt;对上述流程可以提出下面细节。&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;节点能够知道的只有 note1 的 nf2 和 note4 的 h4 和 note5 的 h5。他们对收款人地址，金额是多少都一无所知。&lt;/li&gt;
&lt;li&gt;此时链上节点们维护的 &lt;code&gt;commitment&lt;/code&gt; 和 &lt;code&gt;nullifier&lt;/code&gt; 表变成了如下的样子。&lt;/li&gt;
&lt;/ul&gt;&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;h1=HASH (note1)&lt;/td&gt;
&lt;td&gt;nf1 = HASH (r2)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;h2=HASH (note2)&lt;/td&gt;
&lt;td&gt;nf2 = HASH (r1)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;h3=HASH (note3)&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;h4=HASH (note4)&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;h5=HASH (note5)&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;ul&gt;&lt;li&gt;A 发给 B note4 的秘密通道。这里我们不展开说，它的方式有很多，可以在用加密的电子邮件传送，或者可以面对面传递小纸条。具体见官方完整的文档：&lt;a href=&quot;https://github.com/zcash/zips/blob/master/protocol/protocol.pdf&quot;&gt;完整文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;B 手上有经过了自己的 sk_enc 签名了的 note4&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;收款人如何获取-note-的使用权&quot;&gt;收款人如何获取 note 的使用权&lt;/h3&gt;
&lt;p&gt;其实在上面小节中，读者应该能理会到 B 是可以使用自己的原始私钥 a_sk 对自己获取到的 note4 数据进行解密的，进而获取到里面的 &amp;lt;a_pk，v，r，rho&amp;gt;，到了这一步，B 保存好 note4 的 rho，那么他就能够向 &lt;code&gt;nullifier&lt;/code&gt; 表发送 note4 的 rho ，达到消费 note4 的目的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;至此，ZCash 的匿名交易流程形成了闭环&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那么为什么 &lt;code&gt;a_sk&lt;/code&gt; 能对 &lt;code&gt;sk_enc&lt;/code&gt; 签名的数据，进行解密呢？因为在 ZCash 1.0 中，由地址的公私钥生成规则，可知原始私钥 a_sk 可以导出 sk_enc。在&lt;code&gt;ZCash 1.0 的公私钥机制&lt;/code&gt; 小节中也做了说明。&lt;/p&gt;
&lt;h3 id=&quot;零知识自证&quot;&gt;零知识自证&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;节点在校验完了一个 note 的 rho 后，如何判断发送者是真正对 note 拥有使用权的？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;答：对于 note 的所有权拥有者A 来说，好像除了公布 note 里面的内容外，好像没其它手段来自我证明？这个时候&lt;code&gt;零知识证明&lt;/code&gt;就排上用场了，note 的拥有者在发布使用该 note 的时候还要向节点出示称为 &lt;code&gt;Π&lt;/code&gt; 的零知识证明凭据，根据 Π ，节点们作为验证者，能够验证 note 的使用权的确属于A。ZCash 在这里应用到了&lt;code&gt;零知识证明&lt;/code&gt;，它的代码是根据&lt;code&gt;zk-SNARK&lt;/code&gt; 理论完成的，同时也参考了 &lt;code&gt;Zerocash&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PS：如何统计一个地址的余额？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;答：不在本文的讨论范围内，详细可以见官方完整的文档：&lt;a href=&quot;https://github.com/zcash/zips/blob/master/protocol/protocol.pdf&quot;&gt;完整文档&lt;/a&gt; 的&lt;code&gt;第4章&lt;/code&gt;，关于 Balance 的描述。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/5/23/16ae3489db0e1643?w=970&amp;amp;h=480&amp;amp;f=png&amp;amp;s=194477&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/5/23/16ae348f90fcd728?w=962&amp;amp;h=575&amp;amp;f=png&amp;amp;s=203974&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;
&lt;p&gt;为了理清 ZCash 的匿名交易的最后一部分，也即是收款人是如何获得 note 的所有权的，使整个流程&lt;code&gt;形成闭环&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我查阅了很多文章都、文档和咨询了一位网友已经查看了部分源码。目前网上的其它文章都没有讲到 &lt;code&gt;收款人如何获取 note 的使用权&lt;/code&gt; 这一部分。稍微较好的是对官方文档 &lt;a href=&quot;https://z.cash/zh/blog/zcash-private-transactions/&quot;&gt;在隐藏地址之间如何进行交易&lt;/a&gt;的直接做了翻译，但是由于官方的这篇文章是个简版，也没有对 &lt;code&gt;收款人如何获取 note 的使用权&lt;/code&gt; 做出解析，所以，几乎所有的翻译文章都是没答案的，而且大部分文章，本身还有一些错误，可能作者自己也一知半解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/5/23/16ae36e0877a603b?w=968&amp;amp;h=590&amp;amp;f=png&amp;amp;s=78109&quot;/&gt;&lt;/p&gt;
&lt;p&gt;感谢下面的人和文给予了我有用的信息引导：&lt;/p&gt;
&lt;p&gt;人：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/58006716&quot;&gt;woodstock&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文：&lt;/p&gt;
</description>
<pubDate>Thu, 23 May 2019 06:46:00 +0000</pubDate>
<dc:creator>指尖下的幽灵</dc:creator>
<og:description>作者：林冠宏 / 指尖下的幽灵 博客：http://www.cnblogs.com/linguanh/ 掘金：https://juejin.im/user/587f0dfe128fe100570ce2</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/linguanh/p/10911822.html</dc:identifier>
</item>
<item>
<title>lua-resty-r3 高性能 OpenResty 路由实现 - 又拍云</title>
<link>http://www.cnblogs.com/upyun/p/10911644.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/upyun/p/10911644.html</guid>
<description>&lt;p&gt;大家下午好！首先做下自我介绍，我于 2014 年加入奇虎 360，后与温铭结识，当时他正在基于 OpenResty 做天擎服务端，用于提供 API 服务。2015 年我们一起写了《 OpenResty 最佳实践 》，原因是当时我们团队想扩充，但是身边的同事都不知道如何学习 OpenResty，OpenResty 相关的学习资料也少。我们完成这本书的写作后，就给身边的同事们使用，而不再需要每次都通过口传和培训的方式来影响。意外的是我们在公司内影响的人并不多，反而在公司外却通过这本书聚集了上万人的社区成员。《 OpenResty 最佳实践 》从无到有，完全是以开源的方式公开的。2015 年 12 月，老罗在锤子科技产品发布会上宣布将门票收入全部捐赠给开源项目 OpenResty，这次也让更多的人知道了 OpenResty。2017 年 3 月，春哥（章亦春，网名：agentzh）准备创业，我就跟他一起作为技术合伙加入了 OpenResty Inc.。&lt;/p&gt;
&lt;p&gt;今天跟大家分享我最近在做的基于 OpenResty 的高性能路由实现。我了解到很多人用 OpenResty 做网关，也有做 Web Server，由于 OpenResty 成立到现在周边的库和基础设施并没有很完善，所以我们一直想通过社区的方式来提供一个大家比较认同的开发框架来做 Web Server。对于 Web 框架里面比较经典的是 MVC 结构，其中包括 Model、View 和 Controller 三层，目前 Model 和 View 层已经有了比较好的实现，而路由一直没有特别强大、高效的解决方案。这次与大家介绍 lua-resty-r3 路由实现 ，和大家分享我在与春哥合作之后的一个感悟，作为一个开发什么事情是值得我们吹牛？&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-5826f711ffe961f2a7db4e1a6d1ece63_hd.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;977&quot; data-original=&quot;https://pic4.zhimg.com/v2-5826f711ffe961f2a7db4e1a6d1ece63_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-5826f711ffe961f2a7db4e1a6d1ece63_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先说一说程序员的“牛皮”，之所以说这些是因为其中大部分是我曾经跟别人吹过的牛皮，比如“一天写了几千行代码”、“收入也不错”、“做过超大项目，几亿 PV 小意思”等，这些都可能是程序员跟别人炫耀的话，但是我认为程序员真正的牛皮逃不出两个点：“都在用我的代码”和“运行在更多计算机上”。金山的口号概括地特别好“希望我们写的代码可以跑在每台计算机上”，我们作为程序员，如果创造的每行代码可以让所有人享受到这个代码的好处，这是一件非常荣耀的事情。&lt;/p&gt;
&lt;p&gt;今天我们聚集在一起讨论 OpenResty ，很大一部分原因是春哥创造了 OpenResty，而我们都在使用。春哥创造了我们每天都在用的东西，这就是他最“牛”的地方。&lt;/p&gt;
&lt;h2&gt;基础组件开发特点&lt;/h2&gt;
&lt;p&gt;如果我们要写代码让更多的人使用，那么代码就必须要下沉到基础组件，因为基础组件的开发所要求的严谨程度远大于业务应用，基础组件的开发通常需要满足以下的要求：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-e7e64229c69677ce6ad524ba23af4864_hd.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;852&quot; data-original=&quot;https://pic1.zhimg.com/v2-e7e64229c69677ce6ad524ba23af4864_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-e7e64229c69677ce6ad524ba23af4864_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;小而美，任何人都不希望基础组件是一个很庞大的东西；&lt;/li&gt;
&lt;li&gt;需求变化小；&lt;/li&gt;
&lt;li&gt;稳定性要求高；&lt;/li&gt;
&lt;li&gt;小需求，可能大改动；&lt;/li&gt;
&lt;li&gt;能够处理异常分支。这里的处理要大于正常的业务逻辑，需要把所有的异常都包括在内；&lt;/li&gt;
&lt;li&gt;技术难度大，甚至维护的难度也大。优秀的程序员能够把一个难事做的很简单；&lt;/li&gt;
&lt;li&gt;关系咬合比较紧密，偶尔重构。由于基础组件位于业务的底层，所以它需要支持的场景自己是不知道的；&lt;/li&gt;
&lt;li&gt;基础组件在迭代的时候，针对不兼容的情况，老鸟通常是改，新鸟喜欢新增 API。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-96ba20d1997fbda14de0fb48b7020c1d_hd.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;640&quot; data-original=&quot;https://pic2.zhimg.com/v2-96ba20d1997fbda14de0fb48b7020c1d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-96ba20d1997fbda14de0fb48b7020c1d_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图是一条比较完整的基础组件开发的流程，这里列举的并非包含了所有要素，而是我认为现在做基础组件时哪些是必备的。最中心的是书写代码，这个环节往往是重中之重，但如果要维持一个良好的基础组件，实际上从最开始的需求提出到最后发布版本全流程都需要注意。今天分享的议题是根据我对春哥以及 OpenResty 体系的研究，总结出最常见的基础组件的维护的完整流程。&lt;/p&gt;
&lt;p&gt;首先需求、调研和项目目标，甚至包括最简单的测试用例，这些信息主要是用来确定项目目标，我们首先要知道要做什么？技术目标是什么？以及要暴露哪些 API？当暴露了 API 之后，需要讨论最小的使用迷你 case 是什么样子，从而梳理出前期的基本需求，这个环节通常开发可以自己拍板，主要涉及一些文档的工作。&lt;/p&gt;
&lt;h2&gt;测试模式&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-fa3baad15d56311b9a75bef1df95fe19_hd.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;904&quot; data-original=&quot;https://pic2.zhimg.com/v2-fa3baad15d56311b9a75bef1df95fe19_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-fa3baad15d56311b9a75bef1df95fe19_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面介绍三种测试模式，大部分人会接触其中的 1-2 种。我认为其中可以适当轻松一下的是 Service Tests，而 Unit Tests（单元测试）是必须要有的，它能保证所有 API 的细节符合我们的输入输出。End-to-End Test （端到端测试），实际上是为了保证业务本身符合我们一开始的设计，它是直接面对用户的，手机 App 点击菜单，输出各种各样的效果，都是有自动化的工具来实现的。单元测试提供的是开发内部，而端到端测试是对于外部完整的联动起来，这二者是必须要有的。&lt;/p&gt;
&lt;h2&gt;单元测试&lt;/h2&gt;
&lt;p&gt;OpenResty 体系内使用了在其他领域很少见的测试框架 Test::Nginx，OpenResty&lt;/p&gt;
&lt;p&gt;里面用了大量的 Lua ，而 Lua 的测试用例几乎都是使用 busted 来书写的，这二者之间有很大的区别。&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-5e66c072e7e28f58086a94b78dbf7f82_hd.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;847&quot; data-original=&quot;https://pic3.zhimg.com/v2-5e66c072e7e28f58086a94b78dbf7f82_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-5e66c072e7e28f58086a94b78dbf7f82_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 能力很强的人，不一定能写 Test::Nginx 的测试用例，因为它的语言是 Perl，很多人不熟悉。此外 Test::Nginx 是一个通用的测试框架，并不仅仅只服务于 OpenResty，它可以扩充延伸，甚至有其他很多不同测试的用途。但是右边的 busted，明显是只能用于 Lua。&lt;/p&gt;
&lt;p&gt;为什么 OpenResty 要选 Test::Nginx 这个测试框架呢？原因是因为使用场景，OpenResty 的测试场景既要能够测 C 模块，也要有能力测 Lua 模块，甚至有时候还要有能力测试一个服务，我们不仅需要测试进行内部，还需要测试进程的外部输出，比如 HTTP 请求查看结果。OpenResty 有运行阶段的概念，同样一串 Lua 代码在不同的阶段行为是不一样的。比如在 init 和 content 阶段，所能够使用的 API 完全不一样，但是这种模式在 Lua 层面是完全做不到的。Test::Nginx 的功能点覆盖比较强，由于它是可以跨阶段，可以把 OpenResty 里面所有特殊的情况排列组合，达到测试目的。&lt;/p&gt;
&lt;p&gt;Test::Nginx 有这么多优点，自然也会存在一些问题。首先是抽象的层次比较高，这就导致只看测试用例看不出它是用什么语言支撑的，因为它都是抽象的配置项，比如要测试访问码，它是由单独的配置项来实现的，和语言无关，这就需要专门看文档学习；第二个缺点是学习的难度比较高，尤其是需要做自定义修改时，比如扩展选项，这都是需要做二次开发或集成的。此外，Test::Nginx 是没有代码覆盖率的，因为代码覆盖率必须要在源码内部才有，所以 busted 是有代码覆盖率的。&lt;/p&gt;
&lt;p&gt;选择 Test::Nginx 的测试框架，还有一个很重要的原因是它是一个通用的测试框架，这意味着可以用这个测试框架测试现有的大部分的测试平台软件，比如 Java、Go 等。&lt;/p&gt;
&lt;p&gt;以下是 Test::Nginx 测试框架的特点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基于 Test::Base；&lt;/li&gt;
&lt;li&gt;Perl 语⾔（上⼿难）；&lt;/li&gt;
&lt;li&gt;语⾔无关的测试框架；&lt;/li&gt;
&lt;li&gt;很强的扩展性（虽然难），既是优势，也是劣势；&lt;/li&gt;
&lt;li&gt;可搭配 valgrind；&lt;/li&gt;
&lt;li&gt;可搭配 ASAN；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;目前 Test::Nginx 测试框架已经很好地集成了 valgrind 和 ASAN 这两个内存整合工具，可以相互配合，他们都是用来做内存检测的，检查内存是否被正确释放、使用等情况。&lt;/p&gt;
&lt;p&gt;我最近两年在写服务的时候都是用的 Test::Nginx 测试框架，也给大家推荐一下，虽然有它的不足，但是带来的好处也很多，最大的好处就是不需要在不同的测试体系下来回地切换思维。&lt;/p&gt;
&lt;h2&gt;书写代码&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-9c482ddaf6575155adbc4e7176cea69f_hd.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;977&quot; data-original=&quot;https://pic4.zhimg.com/v2-9c482ddaf6575155adbc4e7176cea69f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-9c482ddaf6575155adbc4e7176cea69f_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来介绍一个技术细节，前面提到做基础组件的开发会分几步走，在书写完测试用例后会进行代码书写，我这次的路由书写代码用的框架是基于 r3 ，它是一个开源的项目。它可以把路由规则编译成一个前缀树，从而使匹配效率更高，可以直接用 Lua 调用 libr3.so 的库，这种代码结构会非常简单。但是缺点是如果通过 FFI 的方式来直接调用动态库，需要知道动态库调入时传入的参数的所有结构，如果它的入参只是一些字符串、数值，这样会很简单，直接包就可以。但是 libr3.so 的库比较复杂，它有非常强的内存结构，它的很多输入参数都是有结构体的，而且它也用了很多宏定义来实现数据结构，然后用这样的存储结构来做传参。当我们用 FFI 的方式来描述所有参数的结构体时，需要在 FFI 的文件描述里完整地写出所用到的所有的头、导出的函数，以及依赖的结构体。&lt;/p&gt;
&lt;p&gt;网上可以找到 Lua-resty-r3 的另一个开源实现，关于 C 头文件描述用了 170 行代码，但是那个版本和 r3 最近的变化是冲突的，于是我尝试修改了项目的代码，把现有的结构体的声明、函数导出的声明都改一遍，修改到一半就遇到了问题，因为 r3 的结构体的实现一层套一层，而且里面还有各种宏的替换，导致人工来改的成本很高。&lt;/p&gt;
&lt;p&gt;于是我对原本的 libr3 做一层封装，把他内部所有调用的结构体的传参全部藏起来，简单地说就是把所有是结构体的地方都换成了一个指针，如果里面的调用函数可以合并，就可以对外导出一个标准的函数。如上图右侧 ”Two steps“，Lua 调用我们封装的 libr3.so，libr3.so 底层调用的是原本的实现 libr3.a ，中间套了一层之后就看不到原来 r3 的结构体。&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-81f91602400a5c8953a9b97a8b1e5dc4_hd.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;910&quot; data-original=&quot;https://pic1.zhimg.com/v2-81f91602400a5c8953a9b97a8b1e5dc4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-81f91602400a5c8953a9b97a8b1e5dc4_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图是一段示例代码，可以看出大多数的封装只是把类型转了一下，并没有特别复杂的封装，只是把结构体都变成 void* 。这样做的缺点是，对于结构体，C/C++ 编译器编译阶段很容易找到参数类型传错的问题，而当我们换成 void* 的传参，由于 void* 可以被任意传参， 编译器只能帮我们检测错误的可能，这个问题是开发者需要注意的。&lt;/p&gt;
&lt;p&gt;但是优势也比较明显，FFI 只需要导出图中的函数：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot;&gt;void*
r3_create(int cap)
void
r3_free(void*tree)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它们导出是不依赖任何的结构体，会让库写起来非常方便，所以会让 170 行代码变成 20 行。&lt;/p&gt;
&lt;h2&gt;持续集成&lt;/h2&gt;
&lt;p&gt;前面已经有了测试框架，我们需要有一种方式能够做对当前所有的业务请求做一个完整的测试用例的回归。&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-bfc5532927deb43832d4b50af1bceb23_hd.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;977&quot; data-original=&quot;https://pic4.zhimg.com/v2-bfc5532927deb43832d4b50af1bceb23_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-bfc5532927deb43832d4b50af1bceb23_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;大家如果在用 Github 应该都会了解 Travis ，Travis 是对开源项目最友好的通用测试平台。服务一旦开启了 Travis ，每一次提交它都可以在平台上做自动的回归测试，当然我们需要书写一个 .yml 文件，告诉它你要干什么事情、需要什么环境、怎么编译、怎么检测等，它会给你一个结果的反馈，利用这个结果，就可以跟进软件持续的开发。&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-eb136d794a53afac0363377a447bd3a0_hd.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;755&quot; data-original=&quot;https://pic1.zhimg.com/v2-eb136d794a53afac0363377a447bd3a0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-eb136d794a53afac0363377a447bd3a0_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图是开启 Travis CI 的方法，登陆自己的用户，点击 Settings，在用户的分组里面，找到一个具体的项目，点击勾选就开启了。&lt;/p&gt;
&lt;p&gt;曾经很多人问过我，春哥的牛皮到底是什么？其实这个问题，我在不同的阶段也有不同的回答。现阶段我认为春哥的测试体系非常厉害。OpenResty 这个软件如果有哪个人能把春哥所有的东西以及这些子项目之间的关系全部搞清楚，我觉得已经很厉害了，而春哥却以一己之力把这些东西玩的很转，其中很大一部分原因是他把测试体系看的很重要，他在测试体系上的积累能够让他把 OpenResty 这个项目可持续地往前推进，所以大家以后要对测试体系要额外地重视，尤其是做一个比较复杂的组件。&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;h2&gt;测试工具&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-86e3b6234d5c0ef61e08a8afa7e68e9d_hd.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;786&quot; data-original=&quot;https://pic2.zhimg.com/v2-86e3b6234d5c0ef61e08a8afa7e68e9d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-86e3b6234d5c0ef61e08a8afa7e68e9d_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面详细介绍一下 C / C++ 的测试工具，我用这种方式发现了 r3 的两个 bug。其中两个测试都是与内存泄露相关，使用 ASAN mode 和 valgrind mode ，ASAN 是使用 clang 加编译参数完成；valgrind 运行之前需要通过 valgrind 命令行的方式，它会模拟 CPU 完成内存的管理，帮我们检查是否有内存泄露等情况。&lt;/p&gt;
&lt;p&gt;wrk 和火焰图是辅助工具，也是辅助我们发现问题。wrk 是一个压测的工具，它和 OpenResty 存在的方式几乎是一模一样的，都是通过 C + Lua 实现，不过这里的 Lua 和 OpenResty 里面的 Lua 是两回事，毕竟 Lua 是一门寄宿语言，是由它的宿主决定它具有什么扩展性。火焰图主要可以确定性能瓶颈，比如 CPU 占时、内存持续泄露等问题。如果是性能问题，可以根据火焰图横坐标的长度，确定问题大概在什么位置，是哪段代码占用过多 CPU 时间，如果时间消耗不是符合预期，就可以着手修他了。&lt;/p&gt;
&lt;p&gt;在我的开发的习惯中，除了使用 ASAN 和 valgrind 来检查内存问题，到最后一定会跑性能，跑完性能用后面的辅助工具来检验，观察性能的指标是否符合预期。指标是一部分，还有是观察火焰图中看它表现出来的行为和预期的是否一样，比如现在做的库是 r3 路由，我们期望它所有的 CPU 消耗都在路由的预算上。两个点可以关注：第一，是不是把大部分的时间都确实花在路由预算上，第二，路由预算的方法过程本身，是不是还有可优化的空间，这两个问题都可以在火焰图中找到非常好的答案。&lt;/p&gt;
&lt;h2&gt;创建里程碑&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-c166102b0fe32620aa6e1611b8231971_hd.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;853&quot; data-original=&quot;https://pic2.zhimg.com/v2-c166102b0fe32620aa6e1611b8231971_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-c166102b0fe32620aa6e1611b8231971_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后需要创建里程碑，完成了一个阶段如果没有里程碑，就没有办法跟领导申请立项，也拿不到项目的预算资金，所以里程碑非常重要，它可以关注每个阶段的东西。除此之外，当我们做一个开源项目的时候，它的作用就更加明显，它代表的是项目对外的稳定版本。&lt;/p&gt;
&lt;p&gt;上图是我对 lua-resty-r3 项目打的一个 tag ，这个版本是一个相对比较重要的稳定性阶段，这个项目相关的所有东西我都会放到 Issues 里面，目前这还是一个私有项目，不过过不了多久就会开源给大家。&lt;/p&gt;
&lt;p&gt;今天分享的内容主要侧重在开发流程上，纯粹的技术细节不是很多，谢谢大家！&lt;/p&gt;
&lt;p class=&quot;ztext-empty-paragraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;演讲视频及PPT：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;LinkCard LinkCard--hasImage&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.upyun.com/opentalk/428.html&quot; target=&quot;_blank&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic3.zhimg.com/v2-0a5a1b473b639ff738aceca08c87818a_180x120.jpg&quot; data-image-width=&quot;1024&quot; data-image-height=&quot;768&quot; data-za-detail-view-id=&quot;172&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;lua-resty-r3 高性能 OpenResty 路由实现&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 23 May 2019 06:23:00 +0000</pubDate>
<dc:creator>又拍云</dc:creator>
<og:description>大家下午好！首先做下自我介绍，我于 2014 年加入奇虎 360，后与温铭结识，当时他正在基于 OpenResty 做天擎服务端，用于提供 API 服务。2015 年我们一起写了《 OpenResty</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/upyun/p/10911644.html</dc:identifier>
</item>
<item>
<title>C#Socket服务器与客户端的开发(3) - ′Peter.Pan</title>
<link>http://www.cnblogs.com/pandefu/p/10911347.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pandefu/p/10911347.html</guid>
<description>&lt;p&gt;之前我们借助一个SuperSocket实现了一个&lt;a title=&quot;c#Socket服务器开发2&quot; href=&quot;https://www.cnblogs.com/pandefu/p/10774780.html&quot; target=&quot;_blank&quot;&gt;简易版的服务器&lt;/a&gt;, 但是不管是Server还是Session都是使用框架的,本篇博客我们要实现自己的Server和Session,来重写框架原生的Server或Session的方法,或添加自己所需的属性,来实现自己的业务逻辑,并且也不在使用事件来绑定接收,连接,或关闭事件,全部交给&lt;span&gt;Bootstrap&lt;span&gt;来执行,(&lt;span&gt;这个Bootstrap并不是指前端框架的Bootstrap ,而是指的SuperSocket框架的一个引导程序或说是辅助程序&lt;/span&gt;),就是这里我们会使用&lt;span&gt;Bootstrap&lt;/span&gt; 来配置启动SuperSocket;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;本篇文章皆为我阅读官方文档后总结实现,所以很多代码是直接搬的官方文档的,我的主要目的是为了能实现并运行SuperSocket服务器,&lt;span&gt;所以建议优先阅读官方文档&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;官方文档:&lt;span&gt;&lt;a title=&quot;SuperSocket官方文档&quot; href=&quot;http://docs.supersocket.net/v1-6/zh-CN&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://docs.supersocket.net/v1-6/zh-CN&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;SuperSocket官网&quot; href=&quot;http://www.supersocket.net/&quot; target=&quot;_blank&quot;&gt;SuperSocket&lt;/a&gt; 是一个轻量级, 跨平台而且可扩展的 .Net/Mono Socket 服务器程序框架。你无须了解如何使用 Socket, 如何维护 Socket 连接和 Socket 如何工作，但是你却可以使用 SuperSocket 很容易的开发出一款 Socket 服务器端软件，例如游戏服务器，GPS 服务器, 工业控制服务和数据采集服务器等等。&lt;/p&gt;
&lt;p&gt;怎么从NuGet安装SuperSocket就不再赘述了,我们直接看实现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1630815/201905/1630815-20190523114639048-1304812294.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先我们可以按自己需求定义自己APPSession(因为我也不知道我自己定义的Session中应该有什么方法,什么属性,所以照搬官方文档了~~~)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('009cb438-133c-4813-90ca-f48615fc0d82')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_009cb438-133c-4813-90ca-f48615fc0d82&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_009cb438-133c-4813-90ca-f48615fc0d82&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('009cb438-133c-4813-90ca-f48615fc0d82',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_009cb438-133c-4813-90ca-f48615fc0d82&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SuperSocket.SocketBase;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SuperSocket.SocketBase.Protocol;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SuperSocket2.Session
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MySession : AppSession&amp;lt;MySession&amp;gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnSessionStarted()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Welcome to SuperSocket Telnet Server&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; HandleUnknownRequest(StringRequestInfo requestInfo)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unknow request&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; HandleException(Exception e)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Application error: {0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, e.Message);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnSessionClosed(CloseReason reason)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;add you logics which will be executed after the session is closed&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnSessionClosed(reason);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;接着按自己需求定义自己APPServer,&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('467add9b-e14d-48ea-8252-f3a0b97233d2')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_467add9b-e14d-48ea-8252-f3a0b97233d2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_467add9b-e14d-48ea-8252-f3a0b97233d2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('467add9b-e14d-48ea-8252-f3a0b97233d2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_467add9b-e14d-48ea-8252-f3a0b97233d2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SuperSocket.SocketBase;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SuperSocket.SocketBase.Config;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SuperSocket.SocketBase.Protocol;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SuperSocket2.Session;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SuperSocket2.Server
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyServer : AppServer&amp;lt;MySession&amp;gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MyServer()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             : &lt;span&gt;base&lt;/span&gt;(&lt;span&gt;new&lt;/span&gt; CommandLineReceiveFilterFactory(Encoding.Default, &lt;span&gt;new&lt;/span&gt; BasicRequestInfoParser(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; Setup(IRootConfig rootConfig, IServerConfig config)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.Setup(rootConfig, config);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnStartup()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnStartup();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnStopped()
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnStopped();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;自定义的APPserver,上一篇文章我们也说道,它默认的请求的 key 和 body 通过字符 ' '  空格分隔, 因需求不同 我们可以将它改为 ':' 分隔 ,而且多个参数被字符 ',' 分隔,所以我们在修改了无参构造函数,来实现拓展命令行协议;&lt;/p&gt;
&lt;p&gt;接下来要做的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1630815/201905/1630815-20190523124623206-790270001.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以我们来自己写一个命令类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1b433347-96dc-4d12-84bb-46fd33c65f07')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_1b433347-96dc-4d12-84bb-46fd33c65f07&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1b433347-96dc-4d12-84bb-46fd33c65f07&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1b433347-96dc-4d12-84bb-46fd33c65f07',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1b433347-96dc-4d12-84bb-46fd33c65f07&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SuperSocket.SocketBase.Command;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SuperSocket.SocketBase.Protocol;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SuperSocket2.Session;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Windows.Forms;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SuperSocket2.Command
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;      &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;      &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 处理请求头为6003的命令
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;      &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CommandOne : CommandBase&amp;lt;MySession, StringRequestInfo&amp;gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Name
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;get&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6003&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ExecuteCommand(MySession session, StringRequestInfo requestInfo)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;向客户端返回信息,已接受到6003命令&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;             s.Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Order 6003 received&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;请求处理代码必须被放置于方法 &quot;ExecuteCommand(TAppSession session, TRequestInfo requestInfo)&quot; 之中，并且属性 &quot;Name&quot; 的值用于匹配接收到请求实例(requestInfo)的Key。当一个请求实例(requestInfo) 被收到时，SuperSocket 将会通过匹配请求实例(requestInfo)的Key和命令的Name的方法来查找用于处理该请求的命令&lt;/p&gt;
&lt;p&gt;但是由于类名的命名必须有字母数字下划线组成,且数字不能开头,如果要接收请求的Key为6003,我们就需要做一些修改&lt;/p&gt;
&lt;p&gt;所以这里我重写了Name方法,这样,请求的Key是6003 也能触发CommandOne命令&lt;/p&gt;

&lt;p&gt;好了,我们的自定义Server,Session,命令都写完了,接下来需要我们使用&lt;span&gt;Bootstrap&lt;/span&gt;来配置启动,我们这里只为了保证SuperSocket能正常启动,所以不做多余的配置(☞&lt;span&gt;&lt;a title=&quot;SuperSocket 基本配置&quot; href=&quot;http://docs.supersocket.net/v1-6/zh-CN/SuperSocket-Basic-Configuration&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;配置示例&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;修改App.config文件,添加&lt;span&gt;&amp;lt;&lt;span&gt;configuration&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;节点和&lt;span&gt;&amp;lt;&lt;span&gt;superSocket&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;节点&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configSections&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;section &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;superSocket&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;         type&lt;/span&gt;&lt;span&gt;=&quot;SuperSocket.SocketEngine.Configuration.SocketServiceConfig, SuperSocket.SocketEngine&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configSections&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;superSocket&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;serverType中,逗号左边的是你自定义的server在项目中的位置,逗号右边是项目名,ip就是服务器ip,port端口号&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;server &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;TelnetServer&quot;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;          serverType&lt;/span&gt;&lt;span&gt;=&quot;SuperSocket2.Server.MyServer,SuperSocket2&quot;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;          ip&lt;/span&gt;&lt;span&gt;=&quot;Any&quot;&lt;/span&gt;&lt;span&gt; port&lt;/span&gt;&lt;span&gt;=&quot;3666&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;superSocket&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;supportedRuntime &lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;=&quot;v4.0&quot;&lt;/span&gt;&lt;span&gt; sku&lt;/span&gt;&lt;span&gt;=&quot;.NETFramework,Version=v4.5&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置完毕,我们启动程序,在Form_load中实例化bootstrap,启动服务(原谅我懒,实在不愿意对这个Form美化了,就加了一个Richtextbox,显示一下是否初始化成功,启动成功)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4a2b2297-ffef-4619-8f2a-51e000051912')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_4a2b2297-ffef-4619-8f2a-51e000051912&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4a2b2297-ffef-4619-8f2a-51e000051912&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4a2b2297-ffef-4619-8f2a-51e000051912',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4a2b2297-ffef-4619-8f2a-51e000051912&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using SuperSocket.SocketBase;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using SuperSocket.SocketEngine;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using System;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using System.ComponentModel;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using System.Data;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using System.Drawing;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;using System.Linq;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;using System.Text;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;using System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;using System.Windows.Forms; 
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;namespace SuperSocket2
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    public partial class Form1 : Form
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        public Form1()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            InitializeComponent();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        private void Form1_Load(object sender, EventArgs e)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        {   
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            //声明bootStrap实例
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            var bootstrap = BootstrapFactory.CreateBootstrap();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            //初始化
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            if (!bootstrap.Initialize())
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                SetMessage(&quot;Failed to initialize!&quot;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                return;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            //开启服务
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            var result = bootstrap.Start();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            if (result == StartResult.Failed)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                SetMessage(&quot;Failed to start!&quot;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                return;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            else
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;                SetMessage(&quot;服务器启动成功&quot;);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;            //bootstrap.Stop();
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        public void SetMessage(string msg)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            this.richTextBox1.Invoke(new Action(() =&amp;gt; { this.richTextBox1.AppendText(msg + &quot;\r\n&quot;); }));
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;好,一个简单的,完整的自定义SuperSocket就完成了,我们运行,借助TCP/UDP Socket调试工具执行6003命令试一下&lt;/p&gt;
&lt;p&gt;这里说明一下,SuperSocket框架的命令行协议定义了每个请求必须以回车换行结尾 &quot;\r\n&quot;;&lt;/p&gt;
&lt;p&gt;所以我们输完6003:hello命令后,记得加回车;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1630815/201905/1630815-20190523132055582-816476915.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;测试完成,建议SuperSocket框架搭建成功&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以上为我自己学习总结并实现,有错误之处,希望大家不吝赐教,感谢(抱拳)!&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 23 May 2019 05:24:00 +0000</pubDate>
<dc:creator>′Peter.Pan</dc:creator>
<og:description>之前我们借助一个SuperSocket实现了一个简易版的服务器, 但是不管是Server还是Session都是使用框架的,本篇博客我们要实现自己的Server和Session,来重写框架原生的Serv</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pandefu/p/10911347.html</dc:identifier>
</item>
<item>
<title>大白话布隆过滤器 - CodeBear</title>
<link>http://www.cnblogs.com/CodeBear/p/10911177.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CodeBear/p/10911177.html</guid>
<description>&lt;p&gt;&lt;em&gt;本文是站在小白的角度去讨论布隆过滤器，如果你是科班出身，或者比较聪明，又或者真正想完全搞懂布隆过滤器的可以移步。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;不知道从什么时候开始，本来默默无闻的布隆过滤器一下子名声大燥，仿佛身在互联网，做着开发的，无人不知，无人不晓，哪怕对技术不是很关心的小伙伴也听过它的名号。我也花了不少时间去研究布隆过滤器，看了不少博客，无奈不是科班出身，又没有那么聪明的头脑，又比较懒...经过“放弃，拿起，放弃，拿起”的无限轮回，应该算是了解了布隆过滤器的核心思想，所以想给大家分享下。&lt;/p&gt;
&lt;h3 id=&quot;布隆过滤器的应用&quot;&gt;布隆过滤器的应用&lt;/h3&gt;
&lt;p&gt;我们先来看下布隆过滤器的应用场景，让大家知道神奇的布隆过滤器到底能做什么。&lt;/p&gt;
&lt;h4 id=&quot;缓存穿透&quot;&gt;缓存穿透&lt;/h4&gt;
&lt;p&gt;我们经常会把一部分数据放在Redis等缓存，比如产品详情。这样有查询请求进来，我们可以根据产品Id直接去缓存中取数据，而不用读取数据库，这是提升性能最简单，最普遍，也是最有效的做法。一般的查询请求流程是这样的：先查缓存，有缓存的话直接返回，如果缓存中没有，再去数据库查询，然后再把数据库取出来的数据放入缓存，一切看起来很美好。但是如果现在有大量请求进来，而且都在请求一个不存在的产品Id，会发生什么？既然产品Id都不存在，那么肯定没有缓存，没有缓存，那么大量的请求都怼到数据库，数据库的压力一下子就上来了，还有可能把数据库打死。&lt;br/&gt;虽然有很多办法都可以解决这问题，但是我们的主角是“布隆过滤器”，没错，“布隆过滤器”就可以解决（缓解）缓存穿透问题。至于为什么说是“缓解”，看下去你就明白了。&lt;/p&gt;
&lt;h4 id=&quot;大量数据判断给定的是否在其中&quot;&gt;大量数据，判断给定的是否在其中&lt;/h4&gt;
&lt;p&gt;现在有大量的数据，而这些数据的大小已经远远超出了服务器的内存，现在再给你一个数据，如何判断给你的数据在不在其中。如果服务器的内存足够大，那么用HashMap是一个不错的解决方案，理论上的时间复杂度可以达到O(1)，但是现在数据的大小已经远远超出了服务器的内存，所以无法使用HashMap，这个时候就可以使用“布隆过滤器”来解决这个问题。但是还是同样的，会有一定的“误判率”。&lt;/p&gt;
&lt;h3 id=&quot;什么是布隆过滤器&quot;&gt;什么是布隆过滤器&lt;/h3&gt;
&lt;p&gt;布隆过滤器是一个叫“布隆”的人提出的，它本身是一个很长的二进制向量，既然是二进制的向量，那么显而易见的，存放的不是0，就是1。&lt;/p&gt;
&lt;p&gt;现在我们新建一个长度为16的布隆过滤器，默认值都是0，就像下面这样：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15100432-f5ef96d79638bc55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在需要添加一个数据：&lt;/p&gt;
&lt;p&gt;我们通过某种计算方式，比如Hash1，计算出了Hash1(数据)=5，我们就把下标为5的格子改成1，就像下面这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15100432-0e9a0deac1c7e6f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们又通过某种计算方式，比如Hash2，计算出了Hash2(数据)=9，我们就把下标为9的格子改成1，就像下面这样：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15100432-2f5ba4726f822abf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;还是通过某种计算方式，比如Hash3，计算出了Hash3(数据)=2，我们就把下标为2的格子改成1，就像下面这样：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15100432-9a0333841eacd242.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样，刚才添加的数据就占据了布隆过滤器“5”，“9”，“2”三个格子。&lt;/p&gt;
&lt;p&gt;可以看出，仅仅从布隆过滤器本身而言，根本没有存放完整的数据，只是运用一系列随机映射函数计算出位置，然后填充二进制向量。&lt;/p&gt;
&lt;p&gt;这有什么用呢？比如现在再给你一个数据，你要判断这个数据是否重复，你怎么做？&lt;/p&gt;
&lt;p&gt;你只需利用上面的三种固定的计算方式，计算出这个数据占据哪些格子，然后看看这些格子里面放置的是否都是1，如果有一个格子不为1，那么就代表这个数字不在其中。这很好理解吧，比如现在又给你了刚才你添加进去的数据，你通过三种固定的计算方式，算出的结果肯定和上面的是一模一样的，也是占据了布隆过滤器“5”，“9”，“2”三个格子。&lt;/p&gt;
&lt;p&gt;但是有一个问题需要注意，如果这些格子里面放置的都是1，不一定代表给定的数据一定重复，也许其他数据经过三种固定的计算方式算出来的结果也是相同的。这也很好理解吧，比如我们需要判断对象是否相等，是不可以仅仅判断他们的哈希值是否相等的。&lt;/p&gt;
&lt;p&gt;也就是说布隆过滤器只能判断数据是否一定不存在，而无法判断数据是否一定存在。&lt;/p&gt;
&lt;p&gt;按理来说，介绍完了新增、查询的流程，就要介绍删除的流程了，但是很遗憾的是布隆过滤器是很难做到删除数据的，为什么？你想想，比如你要删除刚才给你的数据，你把“5”，“9”，“2”三个格子都改成了0，但是可能其他的数据也映射到了“5”，“9”，“2”三个格子啊，这不就乱套了吗？&lt;/p&gt;
&lt;p&gt;相信经过我这么一介绍，大家对布隆过滤器应该有一个浅显的认识了，至少你应该清楚布隆过滤器的优缺点了：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;优点：由于存放的不是完整的数据，所以占用的内存很少，而且新增，查询速度够快；&lt;/li&gt;
&lt;li&gt;缺点： 随着数据的增加，误判率随之增加；无法做到删除数据；只能判断数据是否一定不存在，而无法判断数据是否一定存在。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;可以看到，布隆过滤器的优点和缺点一样明显。&lt;/p&gt;
&lt;p&gt;在上文中，我举的例子二进制向量长度为16，由三个随机映射函数计算位置，在实际开发中，如果你要添加大量的数据，仅仅16位是远远不够的，为了让误判率降低，我们还可以用更多的随机映射函数、更长的二进制向量去计算位置。&lt;/p&gt;
&lt;h3 id=&quot;guava实现布隆过滤器&quot;&gt;guava实现布隆过滤器&lt;/h3&gt;
&lt;p&gt;现在相信你对布隆过滤器应该有一个比较感性的认识了，布隆过滤器核心思想其实并不难，难的在于如何设计随机映射函数，到底映射几次，二进制向量的长度设置为多少比较好，这可能就不是一般的开发可以驾驭的了，好在Google大佬给我们提供了开箱即用的组件，来帮助我们实现布隆过滤器，现在就让我们看看怎么Google大佬送给我们的“礼物”吧。&lt;/p&gt;
&lt;p&gt;首先在pom引入“礼物”：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;19.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后就可以测试啦：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    private static int size = 1000000;//预计要插入多少数据

    private static double fpp = 0.01;//期望的误判率

    private static BloomFilter&amp;lt;Integer&amp;gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), size, fpp);

    public static void main(String[] args) {
        //插入数据
        for (int i = 0; i &amp;lt; 1000000; i++) {
            bloomFilter.put(i);
        }
        int count = 0;
        for (int i = 1000000; i &amp;lt; 2000000; i++) {
            if (bloomFilter.mightContain(i)) {
                count++;
                System.out.println(i + &quot;误判了&quot;);
            }
        }
        System.out.println(&quot;总共的误判数:&quot; + count);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码简单分析：&lt;br/&gt;我们定义了一个布隆过滤器，有两个重要的参数，分别是 我们预计要插入多少数据，我们所期望的误判率，误判率不能为0。&lt;br/&gt;我向布隆过滤器插入了0-1000000，然后用1000000-2000000来测试误判率。&lt;/p&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1999501误判了
1999567误判了
1999640误判了
1999697误判了
1999827误判了
1999942误判了
总共的误判数:10314&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在总共有100万数据是不存在的，误判了10314次，我们计算下误判率&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15100432-af2046c541d2f931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;br/&gt;和我们定义的期望误判率0.01相差无几。&lt;/p&gt;
&lt;h3 id=&quot;redis实现布隆过滤器&quot;&gt;redis实现布隆过滤器&lt;/h3&gt;
&lt;p&gt;上面使用guava实现布隆过滤器是把数据放在本地内存中，无法实现布隆过滤器的共享，我们还可以把数据放在redis中，用 redis来实现布隆过滤器，我们要使用的数据结构是bitmap，你可能会有疑问，redis支持五种数据结构：String，List，Hash，Set，ZSet，没有bitmap呀。没错，实际上bitmap的本质还是String。&lt;/p&gt;
&lt;p&gt;可能有小伙伴会说，纳尼，布隆过滤器还没介绍完，怎么又出来一个bitmap，没事，你可以把bitmap就理解为一个二进制向量。&lt;/p&gt;
&lt;p&gt;要用redis来实现布隆过滤器，我们需要自己设计映射函数，自己度量二进制向量的长度，这对我来说，无疑是一个不可能完成的任务，只能借助搜索引擎，下面直接放出代码把。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class RedisMain {
    static final int expectedInsertions = 100;//要插入多少数据
    static final double fpp = 0.01;//期望的误判率

    //bit数组长度
    private static long numBits;

    //hash函数数量
    private static int numHashFunctions;

    static {
        numBits = optimalNumOfBits(expectedInsertions, fpp);
        numHashFunctions = optimalNumOfHashFunctions(expectedInsertions, numBits);
    }

    public static void main(String[] args) {
        Jedis jedis = new Jedis(&quot;192.168.0.109&quot;, 6379);
        for (int i = 0; i &amp;lt; 100; i++) {
            long[] indexs = getIndexs(String.valueOf(i));
            for (long index : indexs) {
                jedis.setbit(&quot;codebear:bloom&quot;, index, true);
            }
        }
        for (int i = 0; i &amp;lt; 100; i++) {
            long[] indexs = getIndexs(String.valueOf(i));
            for (long index : indexs) {
                Boolean isContain = jedis.getbit(&quot;codebear:bloom&quot;, index);
                if (!isContain) {
                    System.out.println(i + &quot;肯定没有重复&quot;);
                }
            }
            System.out.println(i + &quot;可能重复&quot;);
        }
    }

    /**
     * 根据key获取bitmap下标
     */
    private static long[] getIndexs(String key) {
        long hash1 = hash(key);
        long hash2 = hash1 &amp;gt;&amp;gt;&amp;gt; 16;
        long[] result = new long[numHashFunctions];
        for (int i = 0; i &amp;lt; numHashFunctions; i++) {
            long combinedHash = hash1 + i * hash2;
            if (combinedHash &amp;lt; 0) {
                combinedHash = ~combinedHash;
            }
            result[i] = combinedHash % numBits;
        }
        return result;
    }

    private static long hash(String key) {
        Charset charset = Charset.forName(&quot;UTF-8&quot;);
        return Hashing.murmur3_128().hashObject(key, Funnels.stringFunnel(charset)).asLong();
    }

    //计算hash函数个数
    private static int optimalNumOfHashFunctions(long n, long m) {
        return Math.max(1, (int) Math.round((double) m / n * Math.log(2)));
    }

    //计算bit数组长度
    private static long optimalNumOfBits(long n, double p) {
        if (p == 0) {
            p = Double.MIN_VALUE;
        }
        return (long) (-n * Math.log(p) / (Math.log(2) * Math.log(2)));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;88可能重复
89可能重复
90可能重复
91可能重复
92可能重复
93可能重复
94可能重复
95可能重复
96可能重复
97可能重复
98可能重复
99可能重复&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;本篇博客到这里就结束了，谢谢大家。&lt;/p&gt;
</description>
<pubDate>Thu, 23 May 2019 04:18:00 +0000</pubDate>
<dc:creator>CodeBear</dc:creator>
<og:description>本文是站在小白的角度去讨论布隆过滤器，如果你是科班出身，或者比较聪明，又或者真正想完全搞懂布隆过滤器的可以移步。 不知道从什么时候开始，本来默默无闻的布隆过滤器一下子名声大燥，仿佛身在互联网，做着开发</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CodeBear/p/10911177.html</dc:identifier>
</item>
<item>
<title>睡眠排序算法 - ri章不是yi章</title>
<link>http://www.cnblogs.com/huangrizhang/p/10911046.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangrizhang/p/10911046.html</guid>
<description>&lt;p align=&quot;justify&quot;&gt;　　睡眠排序算法是一种比较另类有趣的排序算法，其核心思想与CPU&lt;span&gt;调度机制相关，&lt;/span&gt;是通过多线程让每一个数据元素睡眠一定规律的时间，睡眠时间要和自身数据大小存在一定的规律，睡眠时间短的先进行输出，睡眠长的后输出，从而实现数据有序输出。&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;存在缺点：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;　　①若睡眠时间之间相差很小时，容易出现误差，为了减小误差，一般需要放大睡眠倍数；&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;　　②因为睡眠时间和数据大小有直接关系，因此数据不能太大 ，若数据很大时，睡眠时间要很久，程序运行时间很长；&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;　　③睡眠时间不能为负数，如果排序数据中存在负数，需要按照一定的规律把对应的睡眠时间转换成正数，比如说在设置睡眠时间时，把每一项都加上一个正数（该正数的绝对值要比最小负数的绝对值要打）。&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;代码实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SleepSort {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; sleepthread &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; num;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; sleepthread(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; num){
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.num=&lt;span&gt;num;
        }
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;放大睡眠时间：为了减小误差，如果数据大小比较相近，睡眠时间较短就容易出现误差&lt;/span&gt;
                sleep(num*10&lt;span&gt;);
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                e.printStackTrace();
            }
            System.out.print(num&lt;/span&gt;+&quot; &quot;&lt;span&gt;);
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; num[]= {5,22,10,7,59,3,16,4,11,8,14,24,27,25,26,28,23,99&lt;span&gt;};
        System.out.print(&lt;/span&gt;&quot;  原始数据排列：&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i:num) {
            System.out.print(i&lt;/span&gt;+&quot; &quot;&lt;span&gt;);
        }
        System.out.print(&lt;/span&gt;&quot;\n排序后数据排列：&quot;&lt;span&gt;);
        sleepthread array[]&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sleepthread[num.length];
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;array.length;i++&lt;span&gt;) {
            array[i]&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sleepthread(num[i]);
            array[i].start();
        }

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;原始数据排列：5 22 10 7 59 3 16 4 11 8 14 24 27 25 26 28 23 99&lt;br/&gt;排序后数据排列：3 4 5 7 8 10 11 14 16 22 23 24 25 26 27 28 59 99&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;①把睡眠时间设置为num，即sleep(num)，对数据项 num[]= {2,1,5,4,3,7,9,8,6}进行睡眠排序，结果如下所示：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;原始数据排列：2 1 5 4 3 7 9 8 6&lt;br/&gt;排序后数据排列：1 2 3 5 4 6 7 8 9&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;justify&quot;&gt;　　可以看出当睡眠时间差值很小时并不能保证排序结果正确。&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;②在睡眠时间为sleep(num*10)的基础上，对数据项num[]= {2,1,5,4,3,7,9,8,6,9999};进行睡眠排序，其结果如下所示&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;原始数据排列：2 1 5 4 3 7 9 8 6 9999 &lt;br/&gt;排序后数据排列：1 2 3 4 5 6 7 8 9&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;justify&quot;&gt;　　可以看到9999并没有马上出现，sleep(num*10)，即睡眠时间为99.99秒，如果再多几个这么大的数字，那么真的是等得花儿都谢了。&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;③在数据项中插入负数元素，如：num[]= {2,1,5,4,-3,7,9,8,6,10};，运行结果如下所示&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;原始数据排列：2 1 5 4 -3 7 9 8 6 10&lt;br/&gt;排序后数据排列：&lt;br/&gt;-3 &lt;span&gt;java.lang.IllegalArgumentException: timeout value is negative&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at java.lang.Thread.sleep(&lt;span&gt;&lt;span&gt;Native Method&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at SleepSort$sleepthread.run(&lt;span&gt;&lt;span&gt;SleepSort.java:12&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;1 2 4 5 6 7 8 9 10&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;justify&quot;&gt;　　可以看到报错结果提示为非法数据异常，睡眠时间不能为负数。那么是不是负数就没办法使用睡眠排序算法呢？不是，正如我上面所说的只需要通过一定的规律把睡眠时间转换成正数即可，比如加上一个足够大的数，这个数大于等于最小负数的绝对值，那么睡眠时间就能保证为正数，但是这样还要额外写一个方法找出最小负数值，麻烦。&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;　　总结：不保证稳定，是一种通过浪费时间来达到排序目的的算法。&lt;/p&gt;
</description>
<pubDate>Thu, 23 May 2019 03:50:00 +0000</pubDate>
<dc:creator>ri章不是yi章</dc:creator>
<og:description>睡眠排序算法是一种比较另类有趣的排序算法，其核心思想与CPU调度机制相关，是通过多线程让每一个数据元素睡眠一定规律的时间，睡眠时间要和自身数据大小存在一定的规律，睡眠时间短的先进行输出，睡眠长的后输出</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangrizhang/p/10911046.html</dc:identifier>
</item>
<item>
<title>【原创】JAVA中令人眼花撩乱的数字魔法 - 孤独烟</title>
<link>http://www.cnblogs.com/rjzheng/p/10910834.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rjzheng/p/10910834.html</guid>
<description>&lt;p&gt;五月的深圳空气中弥漫起初夏的味道，淡淡的，暖暖的。春日里不太张扬的阳光也掺入这股气息...(烟哥好文采！)&lt;br/&gt;这天，烟哥愉快的喝着霸气芝士莓莓莓。一边东张西望，寻找着可以装13的机会。一切正如下面这张图这样&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/725429/201905/725429-20190523112033041-2072851348.jpg&quot; width=&quot;40%&quot;/&gt;&lt;br/&gt;这时，小刘出现了！没错，就是那个大家期待的小刘出现了！她拿着一本《XXXjava笔试指南》来找烟哥。&lt;br/&gt;只见小刘娴熟的打开这本书，望着整本书满满的笔记，烟哥不禁猜测道:&quot;小刘如此热衷于学习，一定还是单身。&quot;想到这里，烟哥不禁更有回答的动力了(没错，我就是这种人！)。&lt;/p&gt;
&lt;h3 id=&quot;缓存问题&quot;&gt;缓存问题&lt;/h3&gt;
&lt;p&gt;小刘翻到某一页后，指出下面这样一道题&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static void main(String[] args){
 Integer a = 50;
 Integer b = 50;
 Integer c = 150;
 Integer d = 150;
 System.out.println(a==b);
 System.out.println(c==d);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果为&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;true
false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后询问烟哥具体缘由。&lt;br/&gt;烟哥看完以后，内心正(wei)直(suo)的笑了笑，心里想道:&quot;这不是几年前的老题目了么，怎么现在还在考！&quot;&lt;br/&gt;烟哥回答道:&quot;其实很简单，原理是下面这样滴！&quot;&lt;br/&gt;JAVA编译器编译Integer a = 50的时候,被翻译成-&amp;gt; Integer a = Integer.valueOf(50);&lt;br/&gt;而&lt;code&gt;valueOf&lt;/code&gt;的源码是下面这样的&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; public static Integer valueOf(int i) {
    if (i &amp;gt;= IntegerCache.low &amp;amp;&amp;amp; i &amp;lt;= IntegerCache.high)
        return IntegerCache.cache[i + (-IntegerCache.low)];
    return new Integer(i);
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看到了嘛，Integer内部有一个IntegerCache缓存。对于值范围在-128到127之间的数，会进行缓存。因此a和b范围在-128到127之间，所以指向的是同一个对象，所以判断结果是&lt;code&gt;true&lt;/code&gt;。而c和d在128之外，所以每次都是返回一个新对象，所以判断结果是&lt;code&gt;false&lt;/code&gt;。&lt;br/&gt;听到这里，小刘似乎很满意的准备打道回府。&lt;br/&gt;&quot;不行，怎么能这样让小刘离开。我得多和小刘说说话！&quot;&lt;br/&gt;于是，烟哥说道:&quot;小刘阿，其实java笔试里关于数值方面的陷阱，可以玩出很多花样，你了解多少？&quot;&lt;br/&gt;很自然的，小刘的表情是下面这样的&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/725429/201905/725429-20190523112050772-861588821.jpg&quot; width=&quot;40%&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;越界问题&quot;&gt;越界问题&lt;/h3&gt;
&lt;p&gt;烟哥说道:&quot;这样吧，先问你一个问题。&lt;code&gt;Math.abs(Integer.MIN_VALUE))&lt;/code&gt;的结果是正数还是负数?&quot;&lt;br/&gt;小刘:&quot;&lt;code&gt;Math.abs&lt;/code&gt;是绝对值运算，结果应该是正数吧。&quot;&lt;br/&gt;烟哥:&quot;不对，还是负数。Integer的范围为-2147483648~2147483647。不过我们先来看一眼&lt;code&gt;abs&lt;/code&gt;函数的源码，如下所示&quot;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static int abs(int a) {
    return (a &amp;lt; 0) ? -a : a;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;烟哥:&quot;看了源码，其实很明显，绝对值运算的原理是判断这个数是否大于零，如果小于零则取负值。OK，回到我们题目。&lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;，它的十六进制表示是 0x80000000。其符号位为1，其余所有的位都是0。取负数(反码+1)则为 0x7fffffff+1，也就是 0x80000000。你会发现对&lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;取负值还是本身。因此，结果还是负数。&quot;&lt;br/&gt;小刘:&quot;那你这套理论对&lt;code&gt;Long&lt;/code&gt;、&lt;code&gt;Short&lt;/code&gt;、&lt;code&gt;Byte&lt;/code&gt;都成立么?&quot;&lt;br/&gt;烟哥:&quot;是的，都是成立的，原理都一样。你可以回去测试一下如下代码&quot;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Short num =(short)Math.abs(Short.MIN_VALUE));
System.out.println(num);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;小刘望着这些代码，陷入了思考...&lt;br/&gt;突然，小刘回答道:&quot;好像，之前我有看到一个题目是这样的。是否存在一个数i，可以使得&lt;code&gt;i+1&amp;lt;i&lt;/code&gt;，这样看来，这个i就是&lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;，因为加完1就溢出了变为负值了。&quot;&lt;br/&gt;听小刘说道这里，烟哥换了一个角度问:&quot;是否存在一个数，满足&lt;code&gt;i != 0 &amp;amp;&amp;amp; i == -i&lt;/code&gt;&quot;&lt;br/&gt;小刘想了下，机智的回答道:&quot;其实还是&lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;，原因你刚才说过了！&quot;&lt;br/&gt;唉，没想到小刘领悟如此的快！&lt;/p&gt;
&lt;h3 id=&quot;浮点奥秘&quot;&gt;浮点奥秘&lt;/h3&gt;
&lt;p&gt;烟哥感慨小刘领悟速度的同时，加大难度问道:&quot;是否存在一个数，满足&lt;code&gt;i==i+1&lt;/code&gt;？&quot;&lt;br/&gt;小刘突然懵了，答道:&quot;好像..似乎..应该一个数永远不会等于自己加一。&quot;&lt;br/&gt;看见小刘懵圈的眼神，烟哥只见自己装13的目的已经达到，便不再卖关子...&lt;br/&gt;烟哥回答道:&quot;有没听过一句话，无穷大加一个常数还是无穷大！所以，下面的例子输出为&lt;code&gt;true&lt;/code&gt;&quot;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;double i = Double.POSITIVE_INFINITY;
System.out.println(i == i+1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;小刘反怼烟哥，说道:&quot;其实，无穷大减去一个常数也是无穷大。所以下面例子也是输出为&lt;code&gt;true&lt;/code&gt;，而且无穷小也有类似的特性。&quot;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;double i = Double.POSITIVE_INFINITY;
System.out.println(i == i-1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;烟哥满意的点了点头，感慨小刘成长真快！&lt;br/&gt;突然，灵光一闪，烟哥补充道:&quot;你知不知道有一个数可以满足&lt;code&gt;i!=i&lt;/code&gt;？&quot;&lt;br/&gt;小刘再次陷入了深思...嘴里嘟囔道:&quot;奇怪，还有一个数可以自己不等于自己么?&quot;&lt;br/&gt;望着小刘愁眉苦脸的眼神 ，烟哥答道:&quot;对，有一个不是数值的值，它就是&lt;code&gt;NaN&lt;/code&gt;，翻译过来就是(Not a Number)，因此下面的输出是为&lt;code&gt;true&lt;/code&gt;！&quot;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;double i = Double.NaN;
System.out.println(i != i);&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;结局&quot;&gt;结局&lt;/h3&gt;
&lt;p&gt;在烟哥一阵装13后，决定暴露自己的本性。问道:&quot;小刘，你有对象了么?&quot;&lt;br/&gt;小刘答道:&quot;烟哥，你是个好人，然而我已经有对象了！&quot;&lt;br/&gt;&quot;Boom！&quot;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/725429/201905/725429-20190523112114058-854211117.jpg&quot; width=&quot;40%&quot;/&gt;&lt;br/&gt;(本文完！)&lt;/p&gt;
</description>
<pubDate>Thu, 23 May 2019 03:37:00 +0000</pubDate>
<dc:creator>孤独烟</dc:creator>
<og:description>五月的深圳空气中弥漫起初夏的味道，淡淡的，暖暖的。春日里不太张扬的阳光也掺入这股气息...(烟哥好文采！) 这天，烟哥愉快的喝着霸气芝士莓莓莓。一边东张西望，寻找着可以装13的机会。一切正如下面这张图</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rjzheng/p/10910834.html</dc:identifier>
</item>
<item>
<title>标准WPS框架下的空间信息处理服务部署方法 - 落跃之城</title>
<link>http://www.cnblogs.com/MatthewHome/p/10910888.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MatthewHome/p/10910888.html</guid>
<description>&lt;p&gt;笔者第一篇博客里面曾介绍过将专题图制作功能发布为WPS，但随着后面的研究，才发现那时候发布的不是真正WPS框架下的服务，而只是通过&lt;span lang=&quot;EN-US&quot;&gt;Servlet将其发布为可调用的网络服务，所以今天再具体介绍一下真正的WPS服务到底如何发布。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;WPS（Web Processing Service）是OGC组织制定的空间信息处理服务的标准规范，旨在以标准化的方式在网络上共享空间信息处理功能。WPS主要用来处理空间数据，实现通过网络向客户端提供地理数据的处理服务，使客户无需安装桌面软件就能实现相关的处理功能。它定义一个标准的接口来帮助实现地理进程发布和绑定进程与客户端，“进程”包括任何能够操作空间数据的算法、计算或模型，“发布”意思是提供机器可读的绑定信息和人们可读的元数据信息以便服务的发现和使用。一个WPS可以被配置提供任何功能的GIS空间数据处理功能，将WPS进程链接在一起能够生成可以复用的工作流。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;在WPS中，客户端和服务器采用基于XML的通信方式，在WPS接口中定义了三个主要操作，用于向客户端提供服务详细信息、查询部署在服务器上的进程描述和执行进程，这三个主要操作分别是：GetCapabilities、DescribeProcess和Execute。GetCapabilities操作允许客户端从服务器中检索元数据，使客户端通过请求获得描述具体信息的元数据文档，该文档包括所有可执行的进程简要的元数据信息描述。DescribeProcess操作使客户通过请求获得进程的详细信息，包括输入、输出参数和格式等。Execute操作允许WPS客户端提供输入参数值，然后在服务器端运行指定的进程，并返回输出结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;下面介绍将算子模型部署到WPS框架的具体步骤：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一、获取WPS工程&lt;/p&gt;
&lt;p&gt;我使用的工程来自师门提供，不能外传，可以从网上找到开源的相关代码，其目录结构如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433106/201905/1433106-20190523110048123-142411020.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;二、部署需要调用的Java类&lt;/p&gt;
&lt;p&gt;将算法调用&lt;span lang=&quot;EN-US&quot;&gt;java文件放到&lt;span lang=&quot;EN-US&quot;&gt;cn.edu.whu.lmars.reflect.services路径下，将文件名和类名更改统一，比如此处改为&lt;span lang=&quot;EN-US&quot;&gt;DzLdksmnProcess.java，添加对接口&lt;span lang=&quot;EN-US&quot;&gt;IReflectService的实现，如下语句所示：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;public class DzLdksmnProcess extends Model implements IReflectService&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;添加接口方法的实现函数：&lt;/p&gt;
&lt;p&gt;public Object execute(HashMap&amp;lt;Object, Object&amp;gt; layers, HashMap&amp;lt;Object, Object&amp;gt; paramters)&lt;/p&gt;
&lt;p&gt;建议先完成四、五两个步骤之后再实现这个接口，最终实现后的函数内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; Object execute(HashMap&amp;lt;Object, Object&amp;gt; layers, HashMap&amp;lt;Object, Object&amp;gt;&lt;span&gt; paramters) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     String firstInput = &quot;QuHuaShp&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     String secondInput = &quot;LieDuShp&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     String input1_href = layers.get(firstInput +&lt;span&gt; IReflectService.DATAHREF).toString();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     String input2_href = layers.get(secondInput +&lt;span&gt; IReflectService.DATAHREF).toString();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     String output =&lt;span&gt; layers.get(IReflectService.OUTPUTNAME).toString();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         
&lt;span&gt;10&lt;/span&gt;     File file = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(output);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(file.exists()){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            file.delete();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }        
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        DzLdksmnProcess.mainprocess(input1_href, input2_href, output);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        e.printStackTrace();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }        
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三、在jni目录下添加编译文件&lt;/p&gt;
&lt;p&gt;如果有需要调用的其他文件，比如&lt;span lang=&quot;EN-US&quot;&gt;.exe、&lt;span lang=&quot;EN-US&quot;&gt;.dll、&lt;span lang=&quot;EN-US&quot;&gt;.py、&lt;span lang=&quot;EN-US&quot;&gt;.so等文件，要将其放到&lt;span lang=&quot;EN-US&quot;&gt;wps10/WebContent/jni目录下，并添加相应的引用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;此例子中需要将&lt;span lang=&quot;EN-US&quot;&gt;arcobjects.jar添加到&lt;span lang=&quot;EN-US&quot;&gt;Referenced Libraries，&lt;span lang=&quot;EN-US&quot;&gt;jar包文件放于&lt;span lang=&quot;EN-US&quot;&gt;wps10/WebContent/WEB-INF/lib目录下，并将其添加到&lt;span lang=&quot;EN-US&quot;&gt;Build Path。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;四、添加&lt;span lang=&quot;EN-US&quot;&gt;ProcessDescription的&lt;span lang=&quot;EN-US&quot;&gt;xml文档&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;创建&lt;span lang=&quot;EN-US&quot;&gt;DzLdksmnProcess类的&lt;span lang=&quot;EN-US&quot;&gt;ProcessDescription XML文档，注意其中的&lt;span lang=&quot;EN-US&quot;&gt;Identifier属性要和类名一样，内容编辑完成后将其放到&lt;span lang=&quot;EN-US&quot;&gt;wps10/ WebContent/config/processes路径下。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;DzLdksmnProcess.xml内容如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wps:ProcessDescriptions &lt;/span&gt;&lt;span&gt;xmlns:wps&lt;/span&gt;&lt;span&gt;=&quot;http://www.opengis.net/wps/1.0.0&quot;&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;    xmlns:ows&lt;/span&gt;&lt;span&gt;=&quot;http://www.opengis.net/ows/1.1&quot;&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsDescribeProcess_response.xsd&quot;&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;    xml:lang&lt;/span&gt;&lt;span&gt;=&quot;en-US&quot;&lt;/span&gt;&lt;span&gt; service&lt;/span&gt;&lt;span&gt;=&quot;WPS&quot;&lt;/span&gt;&lt;span&gt; version&lt;/span&gt;&lt;span&gt;=&quot;1.0.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ProcessDescription &lt;/span&gt;&lt;span&gt;statusSupported&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; storeSupported&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; wps:processVersion&lt;/span&gt;&lt;span&gt;=&quot;1.1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DzLdksmnProcess&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;地震烈度模型&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Abstract&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;利用地震震级、震中地理坐标和震源机制解等相关参数绘制地震烈度图&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Abstract&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataInputs&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Input &lt;/span&gt;&lt;span&gt;minOccurs&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; maxOccurs&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;QuHuaShp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;行政区划图&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ComplexData&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;application/x-zipped-shp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Supported&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;application/x-zipped-shp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/2.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/2.1.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/2.1.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/2.1.2.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.0.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.1.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.1.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.2.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Supported&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ComplexData&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Input&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Input &lt;/span&gt;&lt;span&gt;minOccurs&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; maxOccurs&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;LieDuShp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;断裂带分布图&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ComplexData&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;application/x-zipped-shp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Supported&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;application/x-zipped-shp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/2.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/2.1.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/2.1.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/2.1.2.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.0.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.1.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.1.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.2.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Supported&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ComplexData&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Input&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataInputs&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ProcessOutputs&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Output&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;OutputData&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;地震烈度图&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ComplexOutput&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;application/x-zipped-shp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Supported&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;application/x-zipped-shp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/2.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/2.1.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/2.1.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;130&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/2.1.2.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.0.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.1.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;143&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.1.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/xml; subtype=gml/3.2.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MimeType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Format&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Supported&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ComplexOutput&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Output&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ProcessOutputs&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;153&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ProcessDescription&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;154&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;wps:ProcessDescriptions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;五、添加&lt;span lang=&quot;EN-US&quot;&gt;Execute的&lt;span lang=&quot;EN-US&quot;&gt;xml文档&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;创建&lt;span lang=&quot;EN-US&quot;&gt;DzLdksmnProcess类的&lt;span lang=&quot;EN-US&quot;&gt;Execute XML文档，注意其中的&lt;span lang=&quot;EN-US&quot;&gt;Identifier属性要和类名一样，内容编辑完成后将其放到&lt;span lang=&quot;EN-US&quot;&gt;wps10/WebContent/requests2路径下。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;DzLdksmnProcess.xml内容如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wps:Execute &lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;span&gt;=&quot;WPS&quot;&lt;/span&gt;&lt;span&gt; version&lt;/span&gt;&lt;span&gt;=&quot;1.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:wps&lt;/span&gt;&lt;span&gt;=&quot;http://www.opengis.net/wps/1.0.0&quot;&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    xmlns:ows&lt;/span&gt;&lt;span&gt;=&quot;http://www.opengis.net/ows/1.1&quot;&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    xmlns:ogc&lt;/span&gt;&lt;span&gt;=&quot;http://www.opengis.net/ogc&quot;&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    xmlns:xlink&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/1999/xlink&quot;&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsExecute_request.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DzLdksmnProcess&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;地震烈度模型&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Abstract&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;利用地震震级、震中地理坐标和震源机制解等相关参数绘制地震烈度图&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Abstract&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wps:DataInputs&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wps:Input&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;QuHuaShp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;行政区划图&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wps:Reference &lt;/span&gt;&lt;span&gt;mimeType&lt;/span&gt;&lt;span&gt;=&quot;application/x-zipped-shp&quot;&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            xlink:href&lt;/span&gt;&lt;span&gt;=&quot;http://localhost:8080/wps10/datas/shapefile/china.zip&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;GET&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;wps:Input&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wps:Input&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;LieDuShp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;断裂带分布图&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wps:Reference &lt;/span&gt;&lt;span&gt;mimeType&lt;/span&gt;&lt;span&gt;=&quot;application/x-zipped-shp&quot;&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            xlink:href&lt;/span&gt;&lt;span&gt;=&quot;http://localhost:8080/wps10/datas/shapefile/Duanceng.zip&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;GET&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;wps:Input&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;wps:DataInputs&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wps:ResponseForm&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wps:ResponseDocument &lt;/span&gt;&lt;span&gt;storeExecuteResponse&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; lineage&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; status&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wps:Output &lt;/span&gt;&lt;span&gt;asReference&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; mimeType&lt;/span&gt;&lt;span&gt;=&quot;application/x-zipped-shp&quot;&lt;/span&gt;&lt;span&gt; encoding&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;OutputData&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Identifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;地震烈度图&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ows:Title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;wps:Output&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;wps:ResponseDocument&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;wps:ResponseForm&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;wps:Execute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;六、在&lt;span lang=&quot;EN-US&quot;&gt;common_algorithms.properties下添加键值对&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;打开&lt;span lang=&quot;EN-US&quot;&gt;wps10/WebContent/config路径下的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;common_algorithms.properties文件，在最后一行下面添加：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;DzLdksmnProcess=cn.edu.whu.lmars.reflect.ReflectAlgorithm&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（注意&lt;span lang=&quot;EN-US&quot;&gt;key要和类名一样）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;七、在&lt;span lang=&quot;EN-US&quot;&gt;index.html添加执行页面&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;打开&lt;span lang=&quot;EN-US&quot;&gt;wps10/WebContent路径下的&lt;span lang=&quot;EN-US&quot;&gt;index.html文件，找到&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;var requests = new Array();并在下面添加新的指定值：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;requests[159] = datafolder + &quot;DzLdksmnProcess.xml&quot;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（注意这里是添加第五步的&lt;span lang=&quot;EN-US&quot;&gt;Execute xml文档）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;八、测试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;至此，所有部署工作已经完成，将整个工程用tomcat发布，本地的访问页面如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433106/201905/1433106-20190523112537096-534421538.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以成功访问即可。&lt;/p&gt;
</description>
<pubDate>Thu, 23 May 2019 03:29:00 +0000</pubDate>
<dc:creator>落跃之城</dc:creator>
<og:description>笔者第一篇博客里面曾介绍过将专题图制作功能发布为WPS，但随着后面的研究，才发现那时候发布的不是真正WPS框架下的服务，而只是通过Servlet将其发布为可调用的网络服务，所以今天再具体介绍一下真正的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MatthewHome/p/10910888.html</dc:identifier>
</item>
<item>
<title>Go语言中的代码重用 - 继承还是组合？ - 欣欣念念</title>
<link>http://www.cnblogs.com/xxnn/p/10910843.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xxnn/p/10910843.html</guid>
<description>&lt;p&gt;故事要从我在一个项目中，想要假装的专业一点而遇到的一个陷阱说起。&lt;/p&gt;

&lt;p&gt;在这个项目中，我们已经有了类似如下的代码：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main
 
import (
    &quot;fmt&quot;
)
 
func main() {
    user := &amp;amp;User{name: &quot;Chris&quot;}
    user.sayHi()
}
 
type User struct {
    name string
}
 
func (u *User) sayHi() {
    u.sayName()
    u.sayType()
}
 
func (u *User) sayName() {
    fmt.Printf(&quot;I am %s.&quot;, u.name)
}
 
func (u *User) sayType() {
    fmt.Println(&quot;I am a user.&quot;)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;I am Chris.I am a user.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后我接到的新需求是这样的，我需要开发一种新的用户，它和当前这种用户有一些相同的行为。当然，最主要的是也有很多不同的行为。作为一名老司机，我当然知道，这些不同的地方才是我需要重点关注并且实现的。&lt;br/&gt;为了区分这两种用户，我们就叫他们普通用户和文艺用户吧。&lt;br/&gt;因为我们已经有了普通用户的实现代码了，作为一个资深（误）Java工程师，我想通过继承这个普通用户来实现代码的复用。然而悲伤辣么大，我发现在Go语言中是不支持继承的。&lt;/p&gt;

&lt;p&gt;好吧，只要思想不滑坡，办法总比困难多。我发现在Go中有一种叫做Embedding的东西。在网上的一些文章中，他们说这就是Go中实现继承的方式。可是看起来，这更像是Java中的组合，至少语法上像，是不？&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main
 
import (
    &quot;fmt&quot;
)
 
func main() {
    artisticUser := &amp;amp;ArtisticUser{User: &amp;amp;User{name: &quot;Chris&quot;}}
    artisticUser.sayName()
    artisticUser.sayType()
}
 
type User struct {
    name string
}
 
func (u *User) sayHi() {
    u.sayName()
    u.sayType()
}
 
func (u *User) sayName() {
    fmt.Printf(&quot;I am %s.&quot;, u.name)
}
 
func (u *User) sayType() {
    fmt.Println(&quot;I am a user.&quot;)
}
 
type ArtisticUser struct {
    *User
}
 
func (u *ArtisticUser) sayType() {
    fmt.Println(&quot;I am an artistic user.&quot;)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;I am Chris.I am an artistic user.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;干得漂亮！这样我就可以复用User的sayName方法，只要把sayType方法用我自己的逻辑实现就好了。这正是我想要的。&lt;/p&gt;

&lt;p&gt;但是，少侠请留步！我们试一下sayHi方法看看会发生什么？&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main
 
import (
    &quot;fmt&quot;
)
 
func main() {
    artisticUser := &amp;amp;ArtisticUser{User: &amp;amp;User{name: &quot;Chris&quot;}}
    artisticUser.sayHi()
}
 
type User struct {
    name string
}
 
func (u *User) sayHi() {
    u.sayName()
    u.sayType()
}
 
func (u *User) sayName() {
    fmt.Printf(&quot;I am %s.&quot;, u.name)
}
 
func (u *User) sayType() {
    fmt.Println(&quot;I am a user.&quot;)
}
 
type ArtisticUser struct {
    *User
}
 
func (a *ArtisticUser) sayType() {
    fmt.Println(&quot;I am an artistic user.&quot;)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;I am Chris.I am a user.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这不科学！在Java里，子类总是会调用自己的方法的（已经override了父类的方法）。除非子类没有覆盖父类的方法，才会使用从父类继承来的方法。&lt;br/&gt;在这个例子中，我override了（其实Go中没有这个概念）sayType方法，但是当我们在sayHi中调用它时，却没有调用这个override方法，而是用了父类的原始方法。&lt;/p&gt;
&lt;p&gt;实际上，类型嵌入不是继承。它只是某种形式上的语法糖而已。在面向对象编程中，子类应该是可以被当做父类来使用的。在里氏替换原则中，子类应该能在任何需要的地方替换掉父类。（注意一点，我们这里一开始尝试覆盖父类的非抽象方法已经违背了里氏替换原则）。&lt;br/&gt;但是在上边的例子中，ArtisticUser和User是两种不同的类型。且不能替换使用。&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main
 
import (
    &quot;fmt&quot;
)
 
func main() {
    user := &amp;amp;User{name: &quot;Chris&quot;}
    artisticUser := &amp;amp;ArtisticUser{User: user}
    fmt.Printf(&quot;user's type is: %T\n&quot;, user)
    fmt.Printf(&quot;artisticUser's type is: %T\n&quot;, artisticUser)
    acceptUser(user)
    //acceptUser(artisticUser)
}
 
type User struct {
    name string
}
 
func (u *User) sayHi() {
    u.sayName()
    u.sayType()
}
 
func (u *User) sayName() {
    fmt.Printf(&quot;I am %s.&quot;, u.name)
}
 
func (u *User) sayType() {
    fmt.Println(&quot;I am a user.&quot;)
}
 
type ArtisticUser struct {
    *User
}
 
func (a *ArtisticUser) sayType() {
    fmt.Println(&quot;I am an artistic user.&quot;)
}
 
func acceptUser(u *User) {
 
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;user's type is: *main.User
artisticUser's type is: *main.ArtisticUser&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你尝试去掉注释掉的那一行，你会得到一个build错误：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;cannot use artisticUser (type *ArtisticUser) as type *User in argument to acceptUser&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要我说，嵌入类型既不是继承，也不是组合，只是跟它们都有点像。&lt;/p&gt;

&lt;p&gt;那么回到我的问题。事实上我一开始就不该尝试继承。即使Go提供了继承机制，覆盖一个父类的非抽象方法也将破坏里氏替换原则。我一开始想要试试继承其实是一种偷懒的行为，因为我并不想重构已有的那么一大坨代码。&lt;/p&gt;
&lt;p&gt;但是我们不应该害怕重构。你看，就算我想试着逃避重构，还是掉进别的沟里了。&lt;/p&gt;
&lt;p&gt;如果能重来，我要选李白。。。呸，如果能让我重构已有代码的话，也许我可以试试接口。在Go语言中，接口非常灵活，是实现多态的手段。&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main
 
import (
    &quot;fmt&quot;
)
 
func main() {
    user := &amp;amp;User{name: &quot;Chris&quot;}
    user.ISubUser = &amp;amp;NormalUser{}
    user.sayHi()
    user.ISubUser = &amp;amp;ArtisticUser{}
    user.sayHi()
}
 
type ISubUser interface {
    sayType()
}
 
type User struct {
    name string
    ISubUser
}
 
func (u *User) sayHi() {
    u.sayName()
    u.sayType()
}
 
func (u *User) sayName() {
    fmt.Printf(&quot;I am %s.&quot;, u.name)
}
 
type NormalUser struct {
 
}
 
func (n *NormalUser) sayType() {
    fmt.Println(&quot;I am a normal user.&quot;)
}
 
type ArtisticUser struct {
 
}
 
func (a *ArtisticUser) sayType() {
    fmt.Println(&quot;I am an artistic user.&quot;)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;I am Chris.I am a normal user.
I am Chris.I am a artistic user.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样我就重用了sayName和sayHi方法，并且把sayType方法留给多态来实现。&lt;/p&gt;
&lt;p&gt;完美。&lt;/p&gt;
</description>
<pubDate>Thu, 23 May 2019 03:23:00 +0000</pubDate>
<dc:creator>欣欣念念</dc:creator>
<og:description>故事要从我在一个项目中，想要假装的专业一点而遇到的一个陷阱说起。 代码重用 在这个项目中，我们已经有了类似如下的代码： 然后我接到的新需求是这样的，我需要开发一种新的用户，它和当前这种用户有一些相同的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xxnn/p/10910843.html</dc:identifier>
</item>
</channel>
</rss>