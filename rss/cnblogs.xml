<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>js堆排序 - ming1025</title>
<link>http://www.cnblogs.com/ming1025/p/13862173.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ming1025/p/13862173.html</guid>
<description>&lt;h3 id=&quot;item-1&quot;&gt;　　堆的预备知识&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;堆是一个完全二叉树。&lt;/li&gt;
&lt;li&gt;完全二叉树： 二叉树除开最后一层，其他层结点数都达到最大，最后一层的所有结点都集中在左边（左边结点排列满的情况下，右边才能缺失结点）。&lt;/li&gt;
&lt;li&gt;大顶堆：根结点为最大值，每个结点的值大于或等于其孩子结点的值。&lt;/li&gt;
&lt;li&gt;小顶堆：根结点为最小值，每个结点的值小于或等于其孩子结点的值。&lt;/li&gt;
&lt;li&gt;堆的存储： 堆由数组来实现，相当于对二叉树做层序遍历。如下图：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;      &lt;img src=&quot;https://img2020.cnblogs.com/blog/979149/202010/979149-20201023084055436-2055722857.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/979149/202010/979149-20201023084156648-829129243.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;h3 id=&quot;item-2&quot;&gt;堆排序算法&lt;/h3&gt;

&lt;p&gt;现在需要对如上二叉树做升序排序，总共分为三步：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;将初始二叉树转化为大顶堆（heapify）（实质是从第一个非叶子结点开始，从下至上，从右至左，对每一个非叶子结点做shiftDown操作），此时根结点为最大值，将其与最后一个结点交换。&lt;/li&gt;
&lt;li&gt;除开最后一个结点，将其余节点组成的新堆转化为大顶堆（实质上是对根节点做shiftDown操作），此时根结点为次最大值，将其与最后一个结点交换。&lt;/li&gt;
&lt;li&gt;重复步骤2，直到堆中元素个数为1（或其对应数组的长度为1），排序完成。&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;代码实现&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; let array = randomArray(1,100&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;console.log(array);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; let sortArray =&lt;span&gt; heapSort(array);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;console.log(sortArray);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输入起始值和终点值，随机数组&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; randomArray(start,end){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; a=[],o={},random,step=end-&lt;span&gt;start;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(a.length&amp;lt;&lt;span&gt;step){
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         random=start+parseInt(Math.random()*&lt;span&gt;step);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!o[&quot;x&quot;+&lt;span&gt;random]){
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        a.push(random);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         o[&quot;x&quot;+random]=1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;交换值            &lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; swap(A, i, j) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     let temp =&lt;span&gt; A[i];
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     A[i] =&lt;span&gt; A[j];
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     A[j] =&lt;span&gt; temp; 
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将 i 结点以下的堆整理为大顶堆，注意这一步实现的基础实际上是：&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 假设 结点 i 以下的子堆已经是一个大顶堆，shiftDown函数实现的&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 功能是实际上是：找到 结点 i 在包括结点 i 的堆中的正确位置。后面&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将写一个 for 循环，从第一个非叶子结点开始，对每一个非叶子结点&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 都执行 shiftDown操作，所以就满足了结点 i 以下的子堆已经是一大&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;顶堆&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; shiftDown(A, i, length) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;      let temp = A[i]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前父节点&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; j&amp;lt;length 的目的是对结点 i 以下的结点全部做顺序调整&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(let j = 2*i+1; j&amp;lt;length; j = 2*j+1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;          temp = A[i];  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将 A[i] 取出，整个过程相当于找到 A[i] 应处于的位置&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(j+1 &amp;lt; length &amp;amp;&amp;amp; A[j] &amp;lt; A[j+1&lt;span&gt;]) { 
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         j++;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 找到两个孩子中较大的一个，再与父节点比较&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(temp &amp;lt;&lt;span&gt; A[j]) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         swap(A, i, j) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果父节点小于子节点:交换；否则跳出&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;          i = j;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 交换后，temp 的下标变为 j&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;          &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 堆排序&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; heapSort(A) {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化大顶堆，从第一个非叶子结点开始&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(let i = Math.floor(A.length/2-1); i&amp;gt;=0; i--) {
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;         shiftDown(A, i, A.length);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排序，每一次for循环找出一个当前最大值，数组长度减一&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(let i = Math.floor(A.length-1); i&amp;gt;0; i--&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         swap(A, 0, i); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根节点与最后一个节点交换&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;         shiftDown(A, 0, i); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从根节点开始调整，并且最后一个结点已经为当&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 前最大值，不需要再参与比较，所以第三个参数&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 为 i，即比较到最后一个结点前一个即可&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; A;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; }            
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt; &lt;/h4&gt;




&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/979149/202010/979149-20201023085539627-1654603219.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/979149/202010/979149-20201023085459008-1924673785.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/979149/202010/979149-20201023085416931-1157271090.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/979149/202010/979149-20201023085323714-1891491338.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 23 Oct 2020 00:56:00 +0000</pubDate>
<dc:creator>ming1025</dc:creator>
<og:description>js堆排序</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/ming1025/p/13862173.html</dc:identifier>
</item>
<item>
<title>手撸了一个HTTP框架：支持Sprng MVC、IOC、AOP，拦截器，配置文件读取... - JavaGuide</title>
<link>http://www.cnblogs.com/javaguide/p/13862064.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/javaguide/p/13862064.html</guid>
<description>&lt;blockquote readability=&quot;4.0695652173913&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Snailclimb/jsoncat&quot;&gt;https://github.com/Snailclimb/jsoncat&lt;/a&gt; ：仿 Spring Boot 但不同于 Spring Boot 的一个轻量级的 HTTP 框架&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;距离上一次给小伙伴们汇报简易版的“Spring Boot”的完成情况已经有半个月了。时间过得是真特么快啊！&lt;/p&gt;
&lt;h2 id=&quot;01&quot;&gt;01&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;这半个月里，我的 HTTP 框架已经支持 AOP、拦截器（也是 AOP 的一种）、属性文件读取等功能了。&lt;/strong&gt; 👏&lt;/p&gt;
&lt;p&gt;目前的话，整个 HTTP 框架基本已经具备我最初想要实现的全部功能了。也算是兑现了诺言，善始善终了。&lt;/p&gt;
&lt;p&gt;功能具体的实现情况如下：&lt;/p&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/20201021201230434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70#pic_center&quot;/&gt;&lt;p&gt;很多读者小伙伴可能感觉我写的比较容易。不过， 说实话，我中间写的过程中也遇到了很多问题。为了解决写这个框架遇到的一些问题，我熬了很多夜，也早起了很多次。&lt;/p&gt;
&lt;p&gt;我不算是奋青。一般情况下，我平时都是晚上 9 点半之后玩几把王者荣耀，到了 12 点左右就睡觉了。早晨的话，我一般都是 8 点左右起床。几乎日日如此。&lt;/p&gt;
&lt;p&gt;但是，写这个 HTTP 框架的时候，我记得有 3 次我熬夜到凌晨 2 点左右。有 2 个早晨，因为有“灵感”，我 5 点多久爬起来写代码了。&lt;/p&gt;
&lt;p&gt;说这些，不是为了博同情让大家觉得我写的多辛苦，也不是表现我有多努力。&lt;/p&gt;
&lt;p&gt;这些都是很平常的经历罢了！我觉得大部分程序员都经历过：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;夜深人静的时候，突然自己写的代码出了点问题，不解决就不想睡觉。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;某个早晨，突然惊醒，灵感爆棚，打开电脑开始写代码。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;不过，我是真的不推荐大家熬夜！那我自己来说，每次熬夜就会导致我第二天甚至是第三天精神不振，严重影响效率。这还只是熬夜的短期影响，长期作息不健康的话，肯定对身体的摧残特别大。&lt;/p&gt;
&lt;p&gt;道理都懂，不过，大部分都像我一样，还是会偶尔熬夜。&lt;/p&gt;
&lt;h2 id=&quot;02&quot;&gt;02&lt;/h2&gt;
&lt;p&gt;整个框架的目录结构如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;框架实现部分按照不同的功能模块进行组织，比较直观。&lt;/li&gt;
&lt;li&gt;提供了完整的框架使用示例，并且还为其编写了测试。&lt;/li&gt;
&lt;/ul&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201022084612423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70#pic_center&quot;/&gt;&lt;h2 id=&quot;03&quot;&gt;03&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;开源的魅力在于别人可以对你的项目进行反馈，并且，遇到对你的项目感兴趣的朋友，他们还会帮你一起完善和开发项目。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拿 jsoncat 来说。jsoncat 开源之后，一位叫做“hellohello-tom”的老哥便参与了进来帮忙开发。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1843652/202010/1843652-20201023083244322-1145979512.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;tom 哥代码写的很不错，帮助 jsoncat 实现了很多功能！真的非常非常非常感谢！爱你哦！老哥！&lt;/p&gt;
&lt;p&gt;我俩因为这个项目经常在微信上交流，或许这就是编程的魅力吧！哈哈哈！&lt;/p&gt;
&lt;p&gt;我平时少在微信聊天的，但是因为这个开源项目和老哥聊了挺多的。&lt;/p&gt;
&lt;p&gt;随便截了两张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1843652/202010/1843652-20201023083244919-938009035.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我觉得一个项目开发是比较忌讳只有自己一个人的。每个人都会有思维局限，你很难发现你的代码需要某些改进的地方以及存在的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这也解释了为什么 Code Review（代码审查）在软件开发过程中这么重要了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过 Code Review 可以非常有效提高代码的整体质量，因为它会帮助我们发现代码中的坏味道以及可能存在问题的地方。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;04&quot;&gt;04&lt;/h2&gt;
&lt;p&gt;其实，单纯实现功能的话费不了太多时间。&lt;strong&gt;大部分时间，我都花在了对现有代码的重构上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;毕竟我这个 HTTP 框架开源出来的主要目的之一是为了给需要的小伙伴学学习，我必须要保证我写的代码可读性。​&lt;/p&gt;
&lt;p&gt;为此，我在写代码的过程中给自己定了以下原则：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;一切从简&lt;/strong&gt; ：能用最少的代码&lt;strong&gt;写清楚&lt;/strong&gt;的功能就一定不多用一行代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不滥用设计模式&lt;/strong&gt; ：我最初写代码的时候，特别喜欢滥用设计模式。自己学到了什么设计模式，就像立马用到自己的项目上去，即使这个设计模式在当前业务场景并不适合。这真的是一个不好的习惯，不过，在写这个 HTTP 框架的时候我刻意避免了这个问题。 目前的话，整个框架只用到了单例模式、工厂模式、策略模式以及责任链模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保持代码结构清晰&lt;/strong&gt; : 开源出来的代码是写给人看的，代码结构清晰可以大大减少其他人理解代码的难度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;谨慎抽取工具类&lt;/strong&gt; ：最开始写这个框架的时候，我抽了很多工具类。到最后发现很多工具类中的方法，实际只在某一个地方用到，并且以后也只可能会在这一个地方用到。这个时候，我觉得最好的做法就是，将这些工具类方法放到唯一一个用到这个方法的类中。这样整体代码结构会更加清晰。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不秀技&lt;/strong&gt; ：最开始写代码的时候，特别喜欢秀技。比如说 Java8 那会还没流行的时候，我写代码总想着用 Java 8 的 Lambda 表达式、函数式接口等新特性。那时候，和老师一起做项目的时候，其他同学还会觉得我写的特别牛逼，因为他们觉得自己很久才能看懂。但是，我现在觉得当时的做法其实有别软件开发/编程的本质，编程的本质不是说减少代码量，而是说写出他人易于理解的代码，写出更容易维护的系统。你写的代码不单纯是给你自己看的，你还要让别人看懂，减少别人的阅读学习成本。这个和我第一点说的一切从简是不矛盾的。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;今天就简单聊聊这些吧！时间也不早了！&lt;/p&gt;
&lt;h2 id=&quot;我的开源项目推荐&quot;&gt;我的开源项目推荐&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/Snailclimb/JavaGuide&quot;&gt;JavaGuide&lt;/a&gt; ：「Java学习+面试指南」一份涵盖大部分Java程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide！&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Snailclimb/guide-rpc-framework&quot;&gt;guide-rpc-framework&lt;/a&gt; ：A custom RPC framework implemented by Netty+Kyro+Zookeeper.（一款基于 Netty+Kyro+Zookeeper 实现的自定义 RPC 框架-附详细实现过程和相关教程）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Snailclimb/jsoncat&quot;&gt;jsoncat&lt;/a&gt; ：仿 Spring Boot 但不同于 Spring Boot 的一个轻量级的 HTTP 框架&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Snailclimb/programmer-advancement&quot;&gt;programmer-advancement&lt;/a&gt; ：程序员应该有的一些好习惯+面试必知事项！&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Snailclimb/springboot-guide&quot;&gt;springboot-guide&lt;/a&gt; ：Not only Spring Boot but also important knowledge of Spring（不只是SpringBoot还有Spring重要知识点）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Snailclimb/awesome-java&quot;&gt;awesome-java&lt;/a&gt; ：Collection of awesome Java project on Github(Github 上非常棒的 Java 开源项目集合).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;https://www.yuque.com/docs/share/71251673-1fef-416e-93d7-489a25a9eda5?#%20%E3%80%8A%E8%B5%B0%E8%BF%91JavaGuide%E3%80%8B&quot;&gt;我是 Guide 哥，一 Java 后端开发，会一点前端，自由的少年。我们下期再见！微信搜“&lt;strong&gt;JavaGuide&lt;/strong&gt;”回复“&lt;strong&gt;面试突击&lt;/strong&gt;”领取我整理的 4 本原创PDF&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 23 Oct 2020 00:33:00 +0000</pubDate>
<dc:creator>JavaGuide</dc:creator>
<og:description>https://github.com/Snailclimb/jsoncat ：仿 Spring Boot 但不同于 Spring Boot 的一个轻量级的 HTTP 框架 距离上一次给小伙伴们汇报简易</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/javaguide/p/13862064.html</dc:identifier>
</item>
<item>
<title>入职微软三个月把老板炒了，七个月自己跑路是一种怎样的体验？ - 码农田小齐</title>
<link>http://www.cnblogs.com/nycsde/p/13862021.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nycsde/p/13862021.html</guid>
<description>&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;这里是《齐姐聊大厂》系列的第 11 篇&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;（前 10 篇见文末）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;每周五早上 8 点，与你唠唠大厂的那些事&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小齐说：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章来自去年一起刷题跳槽的小当家大佬，大佬手握 N 个 offer，先是被西雅图的悠闲生活所打动，可去了却没想到...&lt;/p&gt;
&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;被投行摧残了接近两年，去微软折腾了快一年，最近终于入职 Google 了。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;中间走了太多弯路，今天和大家分享下转行总结，希望可以帮助同在迷茫中的人。&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;转码之路&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本科是主修商科（Business Administration），自学了点数学，又辅修了数学精算。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后来决定转码其实是因为看了一些培训班的广告，说平均工资可以上 10 万，我这辈子就喜欢钱，开始了毅然决然的转码之路。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当初年少无知一心想做 data scientist，现在肠子都悔青了。DS 这行业是没有明确定义的，有的公司要求 SQL，有的用 spark，之前面了一堆公司没遇到几个实际是做 ML 的，就算是做 ML 的也多是用 SageMaker，etc. 加上各大厂的 autoML platform，不看非名校 master 以下学历的人。当然也有例外，在微软遇到过一个哥大刚毕业的小妹妹去了 ML 组做的还真是 ML 相关的，不过这种职位真的是少。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SDE 相对来说容易很多，首先不像 DS 的玄学面试，SDE 面试范围非常窄，不会超出算法，OOD，system design，threading，networking 的范围。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后多找大佬聊聊，基本市场的信息每个群都会聊到。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多加些 recruiter，我的 LinkedIn 首页经常会有 recruiter 发出各种 job posting，下面 reach out 和回复的 9 成是印度小哥。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于 project，个人试过 udacity，udemy，比较推荐 udemy，主要是便宜，10 刀一节课，我买了各种 big data，Java Spring，Hadopp，Tensorflow，ML，fullstack 等等。选两门课跟着做几个 projects 放到简历上基本只要 1 个月。100 刀之内基本搞定，我买了 700 刀的课程到今天也只看了 100 刀的。。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后就是面试准备。Entry level 基本就是算法，入门基本选择基本就是 Leetcode。&lt;/p&gt;
&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;那要怎么开始呢?&lt;/span&gt;&lt;/h4&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Stanford 的 106B/X 基本上 cover 了 data structure 的基础，尤其是 exhaustive search，Marty 讲的好的真是无语了，脑残粉。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看完 Stanford 的 106B/X 可以看 Stanford Algorithms：&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/0081Kckwly1gjyyatz3hpj311j0kv464.jpg&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者 Princeton 大爷爷的 algorithms 课，那个是 Java 的。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Tim 的课都是 Pseudo code，喜欢数学证明的人推荐。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的视频看完基本上 leetcode 的基础基本都有了, 可以开始刷题了。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;刷题可以推荐 2 个 channel：&lt;/p&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;Huifeng Guan&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;残酷群群主亲嘴授课，完全免费，每日一题，跟着刷坚持一年肯定有 offer。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;花花酱完美 ppt 讲算法，超过贾跃亭班的存在。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;System Design 的话这个好像都知道，DDIA，grokking，MIT distributed system，就不多说了。&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;微软&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;入职之前听说微软是养老公司，之前有个大表哥来了以后说每天没事干，干啥都没动力。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哎，这不就是我的梦想吗，拿钱不用干活，带薪刷题。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打进来以后发现原来是看组的。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微软社招流程和大部分公司一样，面试的时候的组基本上就是入职以后的组，笔者入职的是 Identity。&lt;/p&gt;
&lt;blockquote class=&quot;multiquote-1&quot; data-tool=&quot;mdnice编辑器&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Identity 是身份认证组，cloud 的第一层一般都是 identity&lt;/p&gt;
&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3 月末入的职，全副武装从纽约飞到了西雅图，然后入职的下一周就开始在家工作了。。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;入职以后老板会安排一个 onboarding buddy。第一周去了办公室 2-3 次把电脑设置好，然后就和老朋友们线上多人运动，刷题。 想着毕竟是养老公司，肯定没多少活啊；没想到，第 2 周开始就安排活了。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老板把 Micro management 发挥到了极致， 1on1 的时候会问每天做了什么，精确到小时。第三周已经接到 4 个任务，组里都是来了不到 1 年的，什么问题都要自己搞懂，加上文档不全，基本每天要干 12 小时才能不被老板说。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;做事满了老板会直接批评，像极了小学老师。不过好在全组人都这样，我不是孤单一人。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正在我纠结为啥工作强度这么大，做的东西如此无聊的，大伙还能坚持的时候，组里小哥传来消息，换组了。&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/0081Kckwly1gjyy7ocunqg308k06o49s.gif&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个组加我和老板一共 7 个人，我和一个印度小伙是新来的，小黑哥 8 个月，其他三个华人分别是 4，10，12 个月。老板 2 年。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小黑哥走了之前，我们聊了许久，说到底小哥受不了老板打压了，总的来看小哥一人之力建了组里所有 spark job，scala 贼溜，C#也能写，每天工作 12 小时，来了 8 个月业务娴熟， 结果 review 是一般。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;抱着升职梦想惨遭如此命运，小哥毅然决然的走了，伤自尊了。此时，新来的印度小哥也来问，怎么换组，虽然小哥自己和老板都是印度人，身为 abi 的小哥时而听不懂老板说话。&lt;/p&gt;
&lt;blockquote class=&quot;multiquote-1&quot; data-tool=&quot;mdnice编辑器&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;abi: american born indian&lt;br/&gt;在美国出生的印度人&lt;/p&gt;
&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;最终就在小黑哥走之前的一周，传来了惊天喜讯，老板被炒了！&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原来这个组一年前的 5 个员工不是现在这批，小黑哥一走 turnover rate 就是 100%。&lt;strong&gt;一年员工全跑了导致老板被炒。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但我当时已经开始面其他组了，面着面着发现好组那么多，我为啥要在一个 Ops 比写代码多的组耗着，2 周面了 40 多个组以后，从 6 个愿意要我的组里选了个忙但能学到东西的， 属于 Azure 核心组之一。&lt;/p&gt;
&lt;blockquote class=&quot;multiquote-1&quot; data-tool=&quot;mdnice编辑器&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Azure: 微软的云计算&lt;/p&gt;
&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;走了以后还是和小黑哥和小印哥保持联系，没跳出来的还在骚动，跳出来的有恃无恐。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;换组&lt;/span&gt;&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微软换组非常简单, 去公司内部的 career 网站发邮件就好了。第一次发了 30 多封邮件试水，结果 2 天之内接近 6-7 个组回复，有的新组人太少就没有进行第二轮。最后一共大概发了 60 封邮件。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上面试的组有 15 个左右。5 个左右的组我比较嫌弃就拒了。&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/0081Kckwly1gjyy7jwww6j305s06qt8m.jpg&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;10 个组有 1 个组一轮拒了我，国人阿姨觉得我经验不够，她们组用 rust 做 IoT。其实挺想去看看的。。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其他 9 个组都是先和 manager 聊，然后 3 轮算法面试，最后再和 skip manager 聊。&lt;/p&gt;
&lt;blockquote class=&quot;multiquote-1&quot; data-tool=&quot;mdnice编辑器&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;IoT: internet of things，物联网。&lt;br/&gt;属于比较先进的组，做一些无人车什么的。&lt;/p&gt;
&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;算法面试基本就是 medium 级别的算法，我能想起来的比如 combination, gcd 相关的，两个 linkedlist 找交点，tree 有两个 node，找到 k distance 的 node，LCS 变形，map reduce count word，bit mask，clone graph，etc。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结就是内部转面试相对容易太多, 多申请几个容易遇到真爱。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;7 月入职的新组，这个组负责分布式系统的底层，就是传说中 &lt;em&gt;DDIA&lt;/em&gt; 的第三章讲的东西，replication，cluster，parition，LSM/B Tree。&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/0081Kckwly1gjyyalanklj307a0adwey.jpg&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;组里华人印度人 2:8，每个人都是超级好。 第 3 天接到第一个任务，老板解释任务简洁明了，entry point，我们想干啥，啥啥不会找某某。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个人都有对应的项目，基本不会遇到给个任务全组没人懂的情况。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;组里用的是 C++，身为 python 也不会太吃力。不过刚入职还是每天工作十几个小时，但不会有找不到方向的焦虑，一个月学到的东西比前一个组 3 个月学得多，还有用，组员人还好，唉。&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;谷歌&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;谷歌的 offer 其实是和微软一起拿的，但是谷歌需要 team match，加上我的 HR 不给力，以及这半年受疫情影响 google hiring freeze，所以 match 了 7 个月，match 上我就跑了，可惜了我这微软最最最核心的组，惭愧惭愧。&lt;/p&gt;
&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你喜欢这篇文章，欢迎分享给你身边的朋友，也给齐姐点个「在看」，你们的支持是我最大的动力！&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;更多干货文章见我的 Github: https://github.com/xiaoqi6666/NYCSDE&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;我是小齐，纽约程序媛，终身学习者，每晚 9 点，自习室里我们不见不散 ❤️&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 23 Oct 2020 00:19:00 +0000</pubDate>
<dc:creator>码农田小齐</dc:creator>
<og:description>这里是《齐姐聊大厂》系列的第 11 篇 （前 10 篇见文末） 每周五早上 8 点，与你唠唠大厂的那些事 小齐说： 这篇文章来自去年一起刷题跳槽的小当家大佬，大佬手握 N 个 offer，先是被西雅图</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/nycsde/p/13862021.html</dc:identifier>
</item>
<item>
<title>很喜欢的一款开源类库，可以帮你简化每一行代码，推荐给大家 - 沉默王二</title>
<link>http://www.cnblogs.com/qing-gee/p/13862000.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qing-gee/p/13862000.html</guid>
<description>&lt;p&gt;“黑铁时代”读者群里有个小伙伴感慨说，“Hutool 这款开源类库太厉害了，基本上该有该的工具类，它里面都有。”讲真的，我平常工作中也经常用 Hutool，它确实可以帮助我们简化每一行代码，使 Java 拥有函数式语言般的优雅，让 Java 语言变得“甜甜的”。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/10/java-hutool-01.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;但是呢，群里还有一部分小伙伴表示还不知道这个开源类库，第一次听说。所以我决定写一篇文章普及下，毕竟好的轮子值得推荐啊。&lt;/p&gt;
&lt;p&gt;Hutool 的作者在官网上说，Hutool 是 Hu+tool 的自造词（好像不用说，我们也能猜得到），“Hu”用来致敬他的“前任”公司，“tool”就是工具的意思，谐音就有意思了，“糊涂”，寓意追求“万事都作糊涂观，无所谓失，无所谓得”（一个开源类库，上升到了哲学的高度，作者厉害了）。&lt;/p&gt;
&lt;p&gt;看了一下开发团队的一个成员介绍，一个 Java 后端工具的作者竟然爱前端、爱数码，爱美女，嗯嗯嗯，确实“难得糊涂”（手动狗头）。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/10/java-hutool-02.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;就连向这个开源类库提交的 PR（pull request）规范都非常“病态化”（哈哈哈）：&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/10/java-hutool-03.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;废话就说到这，来吧，实操走起！&lt;/p&gt;
&lt;h3 id=&quot;h01hutool&quot;&gt;&lt;span&gt;01、引入 Hutool&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Maven 项目只需要在 pom.xml 文件中添加以下依赖即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;cn.hutool&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;hutool-all&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;5.4.3&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Hutool 的设计思想是尽量减少重复的定义，让项目中的 util 包尽量少。一个好的轮子可以在很大程度上避免“复制粘贴”，从而节省我们开发人员对项目中公用类库和公用工具方法的封装时间。同时呢，成熟的开源库也可以最大限度的避免封装不完善带来的 bug。&lt;/p&gt;
&lt;p&gt;就像作者在官网上说的那样：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;以前，我们打开搜索引擎 -&amp;gt; 搜“Java MD5 加密” -&amp;gt; 打开某篇博客 -&amp;gt; 复制粘贴 -&amp;gt; 改改，变得好用些&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;有了 Hutool 以后呢，引入 Hutool -&amp;gt; 直接 &lt;code&gt;SecureUtil.md5()&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hutool 对不仅对 JDK 底层的文件、流、加密解密、转码、正则、线程、XML等做了封装，还提供了以下这些组件：&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/10/java-hutool-04.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;非常多，非常全面，鉴于此，我只挑选一些我喜欢的来介绍下（偷偷地告诉你，我就是想偷懒）。&lt;/p&gt;
&lt;h3 id=&quot;h02&quot;&gt;&lt;span&gt;02、类型转换&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;类型转换在 Java 开发中很常见，尤其是从 HttpRequest 中获取参数的时候，前端传递的是整形，但后端只能先获取到字符串，然后再调用 &lt;code&gt;parseXXX()&lt;/code&gt; 方法进行转换，还要加上判空，很繁琐。&lt;/p&gt;
&lt;p&gt;Hutool 的 Convert 类可以简化这个操作，可以将任意可能的类型转换为指定类型，同时第二个参数 defaultValue 可用于在转换失败时返回一个默认值。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;String param = &lt;span class=&quot;hljs-string&quot;&gt;&quot;10&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; paramInt = Convert.toInt(param);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; paramIntDefault = Convert.toInt(param, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;把字符串转换成日期：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;String dateStr = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2020年09月29日&quot;&lt;/span&gt;;&lt;br/&gt;Date date = Convert.toDate(dateStr);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;把字符串转成 Unicode：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;String unicodeStr = &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;&lt;/span&gt;;&lt;br/&gt;String unicode = Convert.strToUnicode(unicodeStr);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h03&quot;&gt;&lt;span&gt;03、日期时间&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;JDK 自带的 Date 和 Calendar 不太好用，Hutool 封装的 DateUtil 用起来就舒服多了！&lt;/p&gt;
&lt;p&gt;获取当前日期：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;Date date = DateUtil.date();&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;DateUtil.date()&lt;/code&gt; 返回的其实是 DateTime，它继承自 Date 对象，重写了 &lt;code&gt;toString()&lt;/code&gt; 方法，返回 &lt;code&gt;yyyy-MM-dd HH:mm:ss&lt;/code&gt; 格式的字符串。&lt;/p&gt;
&lt;p&gt;有些小伙伴是不是想看看我写这篇文章的时间，输出一下给大家看看：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(date);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;字符串转日期：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;String dateStr = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2020-09-29&quot;&lt;/span&gt;;&lt;br/&gt;Date date = DateUtil.parse(dateStr);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;DateUtil.parse()&lt;/code&gt; 会自动识别一些常用的格式，比如说：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;yyyy-MM-dd HH:mm:ss&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;yyyy-MM-dd&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;HH:mm:ss&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;yyyy-MM-dd HH:mm&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;yyyy-MM-dd HH:mm:ss.SSS&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;还可以识别带中文的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;年月日时分秒&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;格式化时间差：&lt;/p&gt;
&lt;pre readability=&quot;7.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;9&quot;&gt;String dateStr1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2020-09-29 22:33:23&quot;&lt;/span&gt;;&lt;br/&gt;Date date1 = DateUtil.parse(dateStr1);&lt;p&gt;String dateStr2 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2020-10-01 23:34:27&quot;&lt;/span&gt;;&lt;br/&gt;Date date2 = DateUtil.parse(dateStr2);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; betweenDay = DateUtil.between(date1, date2, DateUnit.MS);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String formatBetween = DateUtil.formatBetween(betweenDay, BetweenFormater.Level.SECOND);&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;星座和属相：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;br/&gt;String zodiac = DateUtil.getZodiac(Month.DECEMBER.getValue(), &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);&lt;br/&gt;String chineseZodiac = DateUtil.getChineseZodiac(&lt;span class=&quot;hljs-number&quot;&gt;1989&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h04io&quot;&gt;&lt;span&gt;04、IO 流相关&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;IO 操作包括读和写，应用的场景主要包括网络操作和文件操作，原生的 Java 类库区分字符流和字节流，字节流 InputStream 和 OutputStream 就有很多很多种，使用起来让人头皮发麻。&lt;/p&gt;
&lt;p&gt;Hutool 封装了流操作工具类 IoUtil、文件读写操作工具类 FileUtil、文件类型判断工具类 FileTypeUtil 等等。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;BufferedInputStream in = FileUtil.getInputStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hutool/origin.txt&quot;&lt;/span&gt;);&lt;br/&gt;BufferedOutputStream out = FileUtil.getOutputStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hutool/to.txt&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; copySize = IoUtil.copy(in, out, IoUtil.DEFAULT_BUFFER_SIZE);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在 IO 操作中，文件的操作相对来说是比较复杂的，但使用频率也很高，几乎所有的项目中都躺着一个叫 FileUtil 或者 FileUtils 的工具类。Hutool 的 FileUtil 类包含以下几类操作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;文件操作：包括文件目录的新建、删除、复制、移动、改名等&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;文件判断：判断文件或目录是否非空，是否为目录，是否为文件等等&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;绝对路径：针对 ClassPath 中的文件转换为绝对路径文件&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;文件名：主文件名，扩展名的获取&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;读操作：包括 getReader、readXXX 操作&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;写操作：包括 getWriter、writeXXX 操作&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;顺带说说 classpath。&lt;/p&gt;
&lt;p&gt;在实际编码当中，我们通常需要从某些文件里面读取一些数据，比如配置文件、文本文件、图片等等，那这些文件通常放在什么位置呢？&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/10/java-hutool-05.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;放在项目结构图中的 resources 目录下，当项目编译后，会出现在 classes 目录下。对应磁盘上的目录如下图所示：&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/10/java-hutool-06.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;当我们要读取文件的时候，我是不建议使用绝对路径的，因为操作系统不一样的话，文件的路径标识符也是不一样的。最好使用相对路径。&lt;/p&gt;
&lt;p&gt;假设在 &lt;code&gt;src/resources&lt;/code&gt; 下放了一个文件 origin.txt，文件的路径参数如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;FileUtil.getInputStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;origin.txt&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;假设文件放在 &lt;code&gt;src/resources/hutool&lt;/code&gt; 目录下，则路径参数改为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;FileUtil.getInputStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hutool/origin.txt&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h05&quot;&gt;&lt;span&gt;05、字符串工具&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Hutool 封装的字符串工具类 StrUtil 和 Apache Commons Lang 包中的 StringUtils 类似，作者认为优势在于 Str 比 String 短，尽管我不觉得。不过，我倒是挺喜欢其中的一个方法的：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;String template = &lt;span class=&quot;hljs-string&quot;&gt;&quot;{}，一枚沉默但有趣的程序员，喜欢他的文章的话，请微信搜索{}&quot;&lt;/span&gt;;&lt;br/&gt;String str = StrUtil.format(template, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h06&quot;&gt;&lt;span&gt;06、反射工具&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;反射机制可以让 Java 变得更加灵活，因此在某些情况下，反射可以做到事半功倍的效果。Hutool 封装的反射工具 ReflectUtil 包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;获取构造方法&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;获取字段&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;获取字段值&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;获取方法&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;执行方法（对象方法和静态方法）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre readability=&quot;19.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;33&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itwanger.hutool.reflect;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; cn.hutool.core.util.ReflectUtil;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Constructor;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Field;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Method;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ReflectDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; id;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ReflectDemo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;构造方法&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我是沉默王二&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IllegalAccessException &lt;/span&gt;{&lt;br/&gt;ReflectDemo reflectDemo = ReflectUtil.newInstance(ReflectDemo.class);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Constructor[] constructors = ReflectUtil.getConstructors(ReflectDemo.class);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Constructor constructor : constructors) {&lt;br/&gt;System.out.println(constructor.getName());&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Field field = ReflectUtil.getField(ReflectDemo.class, &lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;);&lt;br/&gt;field.setInt(reflectDemo, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);&lt;br/&gt;System.out.println(ReflectUtil.getFieldValue(reflectDemo, field));&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Method[] methods = ReflectUtil.getMethods(ReflectDemo.class);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Method m : methods) {&lt;br/&gt;System.out.println(m.getName());&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Method method = ReflectUtil.getMethod(ReflectDemo.class, &lt;span class=&quot;hljs-string&quot;&gt;&quot;print&quot;&lt;/span&gt;);&lt;br/&gt;System.out.println(method.getName());&lt;/p&gt;&lt;p&gt;&lt;br/&gt;ReflectUtil.invoke(reflectDemo, &lt;span class=&quot;hljs-string&quot;&gt;&quot;print&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h07&quot;&gt;&lt;span&gt;07、压缩工具&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在 Java 中，对文件、文件夹打包压缩是一件很繁琐的事情，Hutool 封装的 ZipUtil 针对 java.util.zip 包做了优化，可以使用一个方法搞定压缩和解压，并且自动处理文件和目录的问题，不再需要用户判断，大大简化的压缩解压的复杂度。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;ZipUtil.zip(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hutool&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hutool.zip&quot;&lt;/span&gt;);&lt;br/&gt;File unzip = ZipUtil.unzip(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hutool.zip&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hutoolzip&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h08&quot;&gt;&lt;span&gt;08、身份证工具&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Hutool 封装的 IdcardUtil 可以用来对身份证进行验证，支持大陆 15 位、18 位身份证，港澳台 10 位身份证。&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;2&quot;&gt;String ID_18 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;321083197812162119&quot;&lt;/span&gt;;&lt;br/&gt;String ID_15 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;150102880730303&quot;&lt;/span&gt;;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; valid = IdcardUtil.isValidCard(ID_18);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; valid15 = IdcardUtil.isValidCard(ID_15);&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h09hashmap&quot;&gt;&lt;span&gt;09、扩展 HashMap&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Java 中的 HashMap 是强类型的，而 Hutool 封装的 Dict 对键的类型要求没那么严格。&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;2&quot;&gt;Dict dict = Dict.create()&lt;br/&gt;.set(&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;)&lt;br/&gt;.set(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;&lt;/span&gt;)&lt;br/&gt;.set(&lt;span class=&quot;hljs-string&quot;&gt;&quot;birthday&quot;&lt;/span&gt;, DateTime.now());&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; age = dict.getInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&lt;/span&gt;);&lt;br/&gt;String name = dict.getStr(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h10&quot;&gt;&lt;span&gt;10、控制台打印&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;本地编码的过程中，经常需要使用 &lt;code&gt;System.out&lt;/code&gt; 打印结果，但是往往一些复杂的对象不支持直接打印，比如说数组，需要调用 &lt;code&gt;Arrays.toString&lt;/code&gt;。Hutool 封装的 Console 类借鉴了 JavaScript 中的 &lt;code&gt;console.log()&lt;/code&gt;，使得打印变成了一个非常便捷的方式。&lt;/p&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;8&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ConsoleDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;Console.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二，一枚有趣的程序员&quot;&lt;/span&gt;);&lt;p&gt;&lt;br/&gt;Console.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;洛阳是{}朝古都&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; [] ints = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;};&lt;br/&gt;Console.log(ints);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h11&quot;&gt;&lt;span&gt;11、字段验证器&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;做 Web 开发的时候，后端通常需要对表单提交过来的数据进行验证。Hutool 封装的 Validator 可以进行很多有效的条件验证：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;是不是邮箱&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;是不是 IP V4、V6&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;是不是电话号码&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;等等&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/10/java-hutool-07.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;Validator.isEmail(&lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;&lt;/span&gt;);&lt;br/&gt;Validator.isMobile(&lt;span class=&quot;hljs-string&quot;&gt;&quot;itwanger.com&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h12map&quot;&gt;&lt;span&gt;12、双向查找 Map&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Guava 中提供了一种特殊的 Map 结构，叫做 BiMap，实现了一种双向查找的功能，可以根据 key 查找 value，也可以根据 value 查找 key，Hutool 也提供这种 Map 结构。&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;4&quot;&gt;BiMap&amp;lt;String, String&amp;gt; biMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BiMap&amp;lt;&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;());&lt;br/&gt;biMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;wanger&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;&lt;/span&gt;);&lt;br/&gt;biMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;wangsan&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王三&quot;&lt;/span&gt;);&lt;p&gt;&lt;br/&gt;biMap.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;wanger&quot;&lt;/span&gt;);&lt;br/&gt;biMap.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;wangsan&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;biMap.getKey(&lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;&lt;/span&gt;);&lt;br/&gt;biMap.getKey(&lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王三&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在实际的开发工作中，其实我更倾向于使用 Guava 的 BiMap，而不是 Hutool 的。这里提一下，主要是我发现了 Hutool 在线文档上的一处错误，提了个 issue（从中可以看出我一颗一丝不苟的心和一双清澈明亮的大眼睛啊）。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/10/java-hutool-08.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;h3 id=&quot;h13&quot;&gt;&lt;span&gt;13、图片工具&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Hutool 封装的 ImgUtil 可以对图片进行缩放、裁剪、转为黑白、加水印等操作。&lt;/p&gt;
&lt;p&gt;缩放图片：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;ImgUtil.scale(&lt;br/&gt;FileUtil.file(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hutool/wangsan.jpg&quot;&lt;/span&gt;),&lt;br/&gt;FileUtil.file(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hutool/wangsan_small.jpg&quot;&lt;/span&gt;),&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.5f&lt;/span&gt;&lt;br/&gt;);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;裁剪图片：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;ImgUtil.cut(&lt;br/&gt;FileUtil.file(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hutool/wangsan.jpg&quot;&lt;/span&gt;),&lt;br/&gt;FileUtil.file(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hutool/wangsan_cut.jpg&quot;&lt;/span&gt;),&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Rectangle(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)&lt;br/&gt;);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加水印：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;ImgUtil.pressText(&lt;br/&gt;FileUtil.file(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hutool/wangsan.jpg&quot;&lt;/span&gt;),&lt;br/&gt;FileUtil.file(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hutool/wangsan_logo.jpg&quot;&lt;/span&gt;),&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;&lt;/span&gt;, Color.WHITE,&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Font(&lt;span class=&quot;hljs-string&quot;&gt;&quot;黑体&quot;&lt;/span&gt;, Font.BOLD, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;),&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.8f&lt;/span&gt;&lt;br/&gt;);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;趁机让大家欣赏一下二哥帅气的真容。&lt;/p&gt;
&lt;img src=&quot;http://www.itwanger.com/assets/images/2020/10/java-hutool-09.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;h3 id=&quot;h14&quot;&gt;&lt;span&gt;14、配置文件&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;众所周知，Java 中广泛应用的配置文件 Properties 存在一个特别大的诟病：不支持中文。每次使用时，如果想存放中文字符，就必须借助 IDE 相关插件才能转为 Unicode 符号，而这种反人类的符号在命令行下根本没法看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是，Hutool 的 Setting 运用而生。Setting 除了兼容 Properties 文件格式外，还提供了一些特有功能，这些功能包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;各种编码方式支持&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;变量支持&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;分组支持&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;先整个配置文件 example.setting，内容如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=沉默王二&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再来读取和更新配置文件：&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;6&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SettingDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String SETTING = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hutool/example.setting&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;Setting setting = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Setting(SETTING);&lt;p&gt;&lt;br/&gt;setting.getStr(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;setting.autoLoad(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;setting.set(&lt;span class=&quot;hljs-string&quot;&gt;&quot;birthday&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2020年09月29日&quot;&lt;/span&gt;);&lt;br/&gt;setting.store(SETTING);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h15&quot;&gt;&lt;span&gt;15、日志工厂&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Hutool 封装的日志工厂 LogFactory 兼容了各大日志框架，使用起来也非常简便。&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;2&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LogDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Log log = LogFactory.get();&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&quot;难得糊涂&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;先通过 &lt;code&gt;LogFactory.get()&lt;/code&gt; 自动识别引入的日志框架，从而创建对应日志框架的门面 Log 对象，然后调用 &lt;code&gt;debug()&lt;/code&gt;、&lt;code&gt;info()&lt;/code&gt; 等方法输出日志。&lt;/p&gt;
&lt;p&gt;如果不想创建 Log 对象的话，可以使用 StaticLog，顾名思义，一个提供了静态方法的日志类。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;StaticLog.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;爽啊 {}.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二的文章&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h16&quot;&gt;&lt;span&gt;16、缓存工具&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;CacheUtil 是 Hutool 封装的创建缓存的快捷工具类，可以创建不同的缓存对象：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;FIFOCache：先入先出，元素不停的加入缓存直到缓存满为止，当缓存满时，清理过期缓存对象，清理后依旧满则删除先入的缓存。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;2&quot;&gt;Cache&amp;lt;String, String&amp;gt; fifoCache = CacheUtil.newFIFOCache(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);&lt;br/&gt;fifoCache.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王一&quot;&lt;/span&gt;);&lt;br/&gt;fifoCache.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;&lt;/span&gt;);&lt;br/&gt;fifoCache.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王三&quot;&lt;/span&gt;);&lt;br/&gt;fifoCache.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王四&quot;&lt;/span&gt;);&lt;p&gt;&lt;br/&gt;String value1 = fifoCache.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key1&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;LFUCache，最少使用，根据使用次数来判定对象是否被持续缓存，当缓存满时清理过期对象，清理后依旧满的情况下清除最少访问的对象并将其他对象的访问数减去这个最少访问数，以便新对象进入后可以公平计数。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre readability=&quot;7.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;9&quot;&gt;Cache&amp;lt;String, String&amp;gt; lfuCache = CacheUtil.newLFUCache(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);&lt;p&gt;lfuCache.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王一&quot;&lt;/span&gt;);&lt;br/&gt;lfuCache.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key1&quot;&lt;/span&gt;);&lt;br/&gt;lfuCache.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;&lt;/span&gt;);&lt;br/&gt;lfuCache.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王三&quot;&lt;/span&gt;);&lt;br/&gt;lfuCache.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王四&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String value2 = lfuCache.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key2&quot;&lt;/span&gt;);&lt;br/&gt;String value3 = lfuCache.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key3&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;LRUCache，最近最久未使用，根据使用时间来判定对象是否被持续缓存，当对象被访问时放入缓存，当缓存满了，最久未被使用的对象将被移除。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre readability=&quot;7.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;9&quot;&gt;Cache&amp;lt;String, String&amp;gt; lruCache = CacheUtil.newLRUCache(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);&lt;p&gt;lruCache.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王一&quot;&lt;/span&gt;);&lt;br/&gt;lruCache.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;&lt;/span&gt;);&lt;br/&gt;lruCache.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王三&quot;&lt;/span&gt;);&lt;br/&gt;lruCache.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key1&quot;&lt;/span&gt;);&lt;br/&gt;lruCache.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王四&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String value2 = lruCache.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key2&quot;&lt;/span&gt;);&lt;br/&gt;System.out.println(value2);&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h17&quot;&gt;&lt;span&gt;17、加密解密&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;加密分为三种：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;对称加密（symmetric），例如：AES、DES 等&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;非对称加密（asymmetric），例如：RSA、DSA 等&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;摘要加密（digest），例如：MD5、SHA-1、SHA-256、HMAC 等&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Hutool 针对这三种情况都做了封装：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;对称加密 SymmetricCrypto&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;非对称加密 AsymmetricCrypto&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;摘要加密 Digester&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;快速加密工具类 SecureUtil 有以下这些方法：&lt;/p&gt;
&lt;p&gt;1）对称加密&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;SecureUtil.aes&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;SecureUtil.des&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2）非对称加密&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;SecureUtil.rsa&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;SecureUtil.dsa&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3）摘要加密&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;SecureUtil.md5&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;SecureUtil.sha1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;SecureUtil.hmac&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;SecureUtil.hmacMd5&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;SecureUtil.hmacSha1&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;只写一个简单的例子作为参考：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SecureUtilDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; AES aes = SecureUtil.aes();&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;String encry = aes.encryptHex(&lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;&lt;/span&gt;);&lt;br/&gt;System.out.println(encry);&lt;br/&gt;String oo = aes.decryptStr(encry);&lt;br/&gt;System.out.println(oo);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h18&quot;&gt;&lt;span&gt;18、其他类库&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Hutool 中的类库还有很多，尤其是一些对第三方类库的进一步封装，比如邮件工具 MailUtil，二维码工具 QrCodeUtil，Emoji 工具 EmojiUtil，小伙伴们可以参考 Hutool 的官方文档：https://www.hutool.cn/&lt;/p&gt;
&lt;p&gt;项目源码地址：&lt;a href=&quot;https://github.com/looly/hutool&quot;&gt;https://github.com/looly/hutool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS：需要 Java 书单的话，我在 &lt;a href=&quot;https://github.com/itwanger/JavaBooks&quot;&gt;GitHub&lt;/a&gt; 上发现了一个宝藏项目，里面的书单可谓应有尽有。需要的小伙伴可以按需自取，地址如下所示：&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/itwanger/JavaBooks&quot;&gt;https://github.com/itwanger/JavaBooks&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后，日常求个赞吧，满满的干货，我先干为敬，你随意😑&lt;/p&gt;
</description>
<pubDate>Fri, 23 Oct 2020 00:12:00 +0000</pubDate>
<dc:creator>沉默王二</dc:creator>
<og:description>“黑铁时代”读者群里有个小伙伴感慨说，“Hutool 这款开源类库太厉害了，基本上该有该的工具类，它里面都有。”讲真的，我平常工作中也经常用 Hutool，它确实可以帮助我们简化每一行代码，使 Jav</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qing-gee/p/13862000.html</dc:identifier>
</item>
<item>
<title>CDH+Kylin三部曲之二：部署和设置 - 程序员欣宸</title>
<link>http://www.cnblogs.com/bolingcavalry/p/13862001.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bolingcavalry/p/13862001.html</guid>
<description>&lt;h3 id=&quot;欢迎访问我的github&quot;&gt;欢迎访问我的GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zq2599/blog_demos&quot;&gt;https://github.com/zq2599/blog_demos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内容：所有原创文章分类汇总及配套源码，涉及Java、Docker、Kubernetes、DevOPS等；&lt;/p&gt;
&lt;h3 id=&quot;本篇概览&quot;&gt;本篇概览&lt;/h3&gt;
&lt;p&gt;本文是《CDH+Kylin三部曲》系列的第二篇，上一篇&lt;a href=&quot;https://blog.csdn.net/boling_cavalry/article/details/105449630&quot;&gt;《CDH+Kylin三部曲之一：准备工作》&lt;/a&gt;已将所需的机器和文件准备完毕，可以部署CDH和Kylin了；&lt;/p&gt;
&lt;h3 id=&quot;执行ansible脚本部署cdh和kylinansible电脑&quot;&gt;执行ansible脚本部署CDH和Kylin(ansible电脑)&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;进入ansible电脑的&lt;span&gt;~/playbooks&lt;/span&gt;目录，经过上一篇的准备工作，该目录下应该是下图这些内容：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081215059-1550196718.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;检查ansible远程操作CDH服务器是否正常，执行命令&lt;span&gt;ansible deskmini -a &quot;free -m&quot;&lt;/span&gt;，正常情况下显示CDH服务器的内存信息，如下图：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081215598-747449568.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;执行命令开始部署：&lt;span&gt;ansible-playbook cm6-cdh5-kylin264-single-install.yml&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;整个部署过程涉及在线安装、传输大文件等耗时的操作，请耐心等待（半小时左右），如果部署期间出错退出（例如网络问题），只需重复执行上述命令即可，ansible保证了操作的幂等性；&lt;/li&gt;
&lt;li&gt;部署成功如下图所示：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081216047-44423317.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;重启cdh服务器&quot;&gt;重启CDH服务器&lt;/h3&gt;
&lt;p&gt;由于修改了selinux和swap的设置，需要重启操作系统才能生效，因此请重启CDH服务器；&lt;/p&gt;
&lt;h3 id=&quot;执行ansible脚本启动cdh服务ansible电脑&quot;&gt;执行ansible脚本启动CDH服务(ansible电脑)&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;等待CDH服务器重启成功；&lt;/li&gt;
&lt;li&gt;登录ansible电脑，进入&lt;span&gt;~/playbooks&lt;/span&gt;目录；&lt;/li&gt;
&lt;li&gt;执行初始化数据库和启动CDH的脚本：&lt;span&gt;ansible-playbook cdh-single-start.yml&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;启动完成输出如下信息：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081216511-541775544.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;ssh登录CDH服务器，执行此命令观察CDH服务的启动情况：&lt;span&gt;tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log&lt;/span&gt;，看到下图红框中的内容时，表示启动完成，可以用浏览器登录了：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081218433-463804209.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;设置浏览器操作&quot;&gt;设置(浏览器操作)&lt;/h3&gt;
&lt;p&gt;现在CDH服务已经启动了，可以通过浏览器来操作：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;浏览器访问：&lt;a href=&quot;http://192.168.50.134:7180&quot;&gt;http://192.168.50.134:7180&lt;/a&gt; ，如下图，账号密码都是&lt;span&gt;admin&lt;/span&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081219333-1719231991.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;一路next，在选择版本页面选择60天体验版：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081219638-611939484.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;选择主机页面可见CDH服务器（deskmini）：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081219894-1144042191.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;在选择CDH版本的页面，请选择下图红框中的5.16.2-1：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081220252-68198339.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;进入安装Parcel的页面，由于提前上传了离线parcle包，因此下载进度瞬间变成百分之百，此时请等待分配、解压、激活的完成：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081220623-569863859.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;接下来有一些推荐操作，这里选择如下图红框，即可跳过：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081220949-1862949992.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;接下来是选择服务的页面，我选择了自定义服务，然后选择了&lt;span&gt;HBase、HDFS、Hive、Hue、Oozie、Spark、YARN、Zookeeper&lt;/span&gt;这八项，可以满足运行Kylin的需要：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081221619-89059754.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;在选择主机的页面，都选择CDH服务器：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081222247-552209982.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;接下来是数据库设置的页面，&lt;span&gt;您填写的内容必须与下图保持一致&lt;/span&gt;，即主机名&lt;span&gt;为localhost&lt;/span&gt;，Hive的数据库、用户、密码都是hive，Activity Monitor的数据库、用户、密码都是amon，Reports Manager的数据库、用户、密码都是rman，Oozie Server的数据库、用户、密码都是oozie，Hue的数据库、用户、密码都是hue，这些内容在ansible脚本中已经固定了，此处的填写必须保持一致：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081222580-1983134148.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;在设置参数的页面，请按照您的硬盘实际情况设置，我这里&lt;span&gt;/home&lt;/span&gt;目录下空间充足，因此存储位置都改为&lt;span&gt;/home&lt;/span&gt;目录下：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081223012-675487992.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;等待服务启动：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081223412-925503890.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;各服务启动完成：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081223732-1996307253.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;hdfs设置&quot;&gt;HDFS设置&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;如下图红框所示，HDFS服务存在问题：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081224085-1001374859.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;点击上图中红色感叹号可见问题详情，如下图，是常见的副本问题：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081224505-2015779800.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;操作如下图，在HDFS的参数设置页面，将&lt;span&gt;dfs.replication&lt;/span&gt;的值设置为1(只有一个数据节点)：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081224789-35869421.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;经过上述设置，副本数已经调整为1，但是已有文件的副本数还没有同步，需要重新做设置，SSH登录到CDH服务器上；&lt;/li&gt;
&lt;li&gt;执行命令&lt;span&gt;su - hdfs&lt;/span&gt;切换到hdfs账号，再执行以下命令即可完成副本数设置：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;hadoop fs -setrep -R 1 /
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;6&quot;&gt;&lt;li&gt;回到网页，重启HDFS服务，如下图：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081225042-1402501166.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;重启后HDFS服务正常：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081225343-2140536724.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;yarn设置&quot;&gt;YARN设置&lt;/h3&gt;
&lt;p&gt;默认的YARN参数是非常保守的，需要做一些设置才能顺利执行Spark任务：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;进入YARN管理页；&lt;/li&gt;
&lt;li&gt;如下图所示，检查参数&lt;span&gt;yarn.nodemanager.resource.cpu-vcores&lt;/span&gt;的值，该值必须大于1，否则提交Spark任务后YARN不分配资源执行任务，（如果您的CDH服务器是虚拟机，当CPU只有单核时，则此参数就会被设置为1，解决办法是先提升虚拟机CPU核数，再来修改此参数）：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081225599-147483258.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;yarn.scheduler.minimum-allocation-mb&lt;/span&gt;：单个容器可申请的最小内存，我这里设置为1G&lt;/li&gt;
&lt;li&gt;&lt;span&gt;yarn.scheduler.maximum-allocation-mb&lt;/span&gt;：单个容器可申请的最大内存，我这里设置为8G&lt;/li&gt;
&lt;li&gt;&lt;span&gt;yarn.nodemanager.resource.memory-mb&lt;/span&gt;：节点最大可用内存，我这里设置为8G&lt;/li&gt;
&lt;li&gt;上述三个参数的值，是基于我的CDH服务器有32G内存的背景，请您按照自己硬件资源自行调整；&lt;/li&gt;
&lt;li&gt;设置完毕后重启YARN服务，操作如下图所示：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081225975-577117617.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;spark设置cdh服务器&quot;&gt;Spark设置(CDH服务器)&lt;/h3&gt;
&lt;p&gt;需要在Spark环境准备一个目录以及相关的jar，否则Kylin启动会报错（提示&lt;span&gt;spark not found, set SPARK_HOME, or run bin/download-spark.sh&lt;/span&gt;），以&lt;span&gt;root&lt;/span&gt;身份SSH登录CDH服务器，执行以下命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;mkdir $SPARK_HOME/jars \
&amp;amp;&amp;amp; cp $SPARK_HOME/assembly/lib/*.jar $SPARK_HOME/jars/ \
&amp;amp;&amp;amp; chmod -R 777 $SPARK_HOME/jars
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;启动kylincdh服务器&quot;&gt;启动Kylin(CDH服务器)&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;SSH登录CDH服务器，执行&lt;span&gt;su - hdfs&lt;/span&gt;切换到hdfs账号；&lt;/li&gt;
&lt;li&gt;按照官方推荐，先执行检查环境的命令：&lt;span&gt;$KYLIN_HOME/bin/check-env.sh&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;检查通过的话控制台输出如下：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081226321-222806027.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;启动Kylin：&lt;span&gt;$KYLIN_HOME/bin/kylin.sh start&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;控制台输出以下内容说明启动Kylin成功：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081227653-2084511004.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;登录kylin&quot;&gt;登录Kylin&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;浏览器访问：&lt;a href=&quot;http://192.168.50.134:7070/kylin%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%8C%E8%B4%A6%E5%8F%B7&quot;&gt;http://192.168.50.134:7070/kylin，如下图，账号&lt;/a&gt;&lt;span&gt;ADMIN&lt;/span&gt;，密码&lt;span&gt;KYLIN&lt;/span&gt;（账号和密码都是大写）：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081228363-1443814474.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;登录成功，可以使用了：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201023081228613-322878806.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;至此，CDH和Kylin的部署、设置、启动都已完成，Kylin已经可用了，在下一篇文章中，我们就在此环境运行Kylin的官方demo，体验Kylin；&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;欢迎关注公众号：程序员欣宸&quot;&gt;欢迎关注公众号：程序员欣宸&lt;/h3&gt;
&lt;blockquote readability=&quot;4.258064516129&quot;&gt;
&lt;p&gt;微信搜索「程序员欣宸」，我是欣宸，期待与您一同畅游Java世界...&lt;br/&gt;&lt;a href=&quot;https://github.com/zq2599/blog_demos&quot;&gt;https://github.com/zq2599/blog_demos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 23 Oct 2020 00:12:00 +0000</pubDate>
<dc:creator>程序员欣宸</dc:creator>
<og:description>欢迎访问我的GitHub https://github.com/zq2599/blog_demos 内容：所有原创文章分类汇总及配套源码，涉及Java、Docker、Kubernetes、DevOPS</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/bolingcavalry/p/13862001.html</dc:identifier>
</item>
<item>
<title>壹佰文章最全总结| 《关于ASP.NETCore的分享之路》 - 老张的哲学</title>
<link>http://www.cnblogs.com/laozhang-is-phi/p/all-knowledge-for-netcore.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laozhang-is-phi/p/all-knowledge-for-netcore.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1468246/202009/1468246-20200920183534062-913517601.png&quot; alt=&quot;&quot; width=&quot;608&quot; height=&quot;1166&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;（关于学习ASP.NET Core需要了解和掌握的知识点图）&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;一言不合就来图，各位博客园小伙伴大家好，感觉好久没有写文章了，自从春节开始，中间经历种种，慢慢的就开始微信公众号发文了，原因有很多，不做说明，不好的地方就是不知道目录链接，所以还是发到博客园吧。&lt;/p&gt;

&lt;h4&gt;请注意：我不是做框架的，BCVP只是作为案例来配合文章视频，掌握了技术才是关键。&lt;/h4&gt;

&lt;p&gt;为什么要突然写这篇了呢，是因为这一年我又写了一些文章和几个视频，但是&lt;span&gt;因为比较杂乱无章，很多人都找不到自己想要看的资料，一直向我反馈很多次了&lt;/span&gt;，时不时的在QQ群里问相关的知识点，或者一直在百度，毕竟我已经总结过了，要是百度未免有些浪费时间，所以就打算总结出来，这样&lt;strong&gt;&lt;span&gt;方便大家查找，也方便我分享指导，更是自我的一个总结&lt;/span&gt;&lt;/strong&gt;吧。你可能会问，那你之前为啥不总结，因为我现在基本已经该讲的都讲完了，毕竟已经快到K8s，所以总体的总结一下，情有可原吧。&lt;/p&gt;

&lt;p&gt;上边这个路线图呢，我个人认为没必要都学会，一半足矣，当然会的越多肯定越好，只不过精力不足的情况下，还是&lt;span&gt;&lt;strong&gt;要打基础，然后看服务，最后写业务&lt;/strong&gt;&lt;/span&gt;，这是我的总结的。好啦，下边就开始总结吧，文章采用list列表的形式，会对每篇文章/视频简要描述，这样你一看就大概知道这是讲啥的了。&lt;/p&gt;

&lt;p&gt;这是我这两年讲解的知识点大纲导图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1468246/202010/1468246-20201022155158255-1369983870.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;（在线思维导图工具：mindmeister，内容持续更新中...）&lt;/span&gt;&lt;/p&gt;





&lt;p&gt;&lt;strong&gt;&lt;em&gt;PS：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;1、下文说的知识点基本都是&lt;strong&gt;netcore3.1&lt;/strong&gt;版本的，特别标注为&lt;strong&gt;（视频）&lt;/strong&gt;的，是视频教程，其他的皆是文章教程&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2、点击每一个小标题即可到达目的链接。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;3、官网永远是最好的老师： &lt;strong&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/core/?WT.mc_id=DOP-MVP-5003704&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/zh-cn/dotnet/core&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;4、一共73篇ASP.NetCore基础知识+19篇Ids4内容+23篇DDD = 115（篇/个 视频和文章）&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;《基础知识掌握部分》&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt; 一共73篇ASP.NetCore基础知识+19篇Ids4内容+23篇DDD = 115（篇/个 视频和文章）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 未完待续。。。&lt;/p&gt;



&lt;p&gt;Come On。&lt;/p&gt;
</description>
<pubDate>Thu, 22 Oct 2020 23:47:00 +0000</pubDate>
<dc:creator>老张的哲学</dc:creator>
<og:description>学习路线图 （关于学习ASP.NET Core需要了解和掌握的知识点图） 一言不合就来图，各位博客园小伙伴大家好，感觉好久没有写文章了，自从春节开始，中间经历种种，慢慢的就开始微信公众号发文了，原因有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/laozhang-is-phi/p/all-knowledge-for-netcore.html</dc:identifier>
</item>
<item>
<title>Docker知识总结 - x1aoda1</title>
<link>http://www.cnblogs.com/darope/p/13861840.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/darope/p/13861840.html</guid>
<description>&lt;p&gt;docker是cs架构，安装docker默认会安装服务端和客户端，通过docker version查看版本和安装信息。docker有很多平台的版本，云服务器最常用的是linux版本，个人学习也可以安装windows和macOS的桌面版。&lt;code&gt;docker version就是docker客户端发给服务端的一条命令&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; ~/ docker version
Client: Docker Engine - Community
 Cloud integration  0.1.18
 Version:           19.03.13
 API version:       1.40
 Go version:        go1.13.15
 Git commit:        4484c46d9d
 Built:             Wed Sep 16 16:58:31 2020
 OS/Arch:           darwin/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.13
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.13.15
  Git commit:       4484c46d9d
  Built:            Wed Sep 16 17:07:04 2020
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          v1.3.7
  GitCommit:        8fba4e9a7d01810a393d5d25a3621dc101981175
 runc:
  Version:          1.0.0-rc10
  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683

&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;21-docker是容器化平台&quot;&gt;2.1 Docker是容器化平台&lt;/h2&gt;
&lt;p&gt;Docker是提供应用打包,部署与运行应用的容器化平台。在docker上运行的应用程序，面向Docker-Engine(docker引擎)。docker引擎依赖于（面向）基础物理机的资源（物理机，虚拟机）。可以看出docker引擎和我们Java的JVM虚拟机非常像&lt;/p&gt;
&lt;h2 id=&quot;22-docker体系结构&quot;&gt;2.2 Docker体系结构&lt;/h2&gt;
&lt;p&gt;Docker引擎包含底层的docker服务器Server，也称为docker-daemon（Docker守护进程），中间是RestApi层（Http协议），Client(Docker-cli)通过API和Server进行通信。所以对于运维工程师来说，可以在本地安装docker-cli，操作多台安装了docker-daemon的服务器，进行通信&lt;/p&gt;
&lt;h2 id=&quot;23-容器与镜像&quot;&gt;2.3 容器与镜像&lt;/h2&gt;
&lt;p&gt;镜像: 镜像是文件,是只读的,提供了运行程序完整的软硬件资源,是应用程序的&quot;集装箱&quot;&lt;/p&gt;
&lt;p&gt;容器: 是镜像的实例,由Docker负责创建,容器之间彼此隔离。彼此拥有自己的文件系统，容器的底层镜像都是一个linux系统&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;可以类比为，我们安装系统，首先需要系统镜像文件来安装启动盘，镜像文件对安装的系统有一定的要求，安装到某台电脑之后，该电脑就有了该安装镜像文件的一个‘实例’。镜像文件是只读的，这里的镜像文件和‘实例’，就可以类比为docker的镜像个容器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/WEBf3132e0a3755d9382766e124745931aa?method=download&amp;amp;shareKey=cf02c57c5bef3e0c1b5eb54a383ca852&quot; alt=&quot;Docker命令执行流程&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;code&gt;docker pull 镜像名&amp;lt;:tags&amp;gt; - 从远程仓库抽取镜像&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;远程镜像仓库地址 hub.docker.com，可以查看远程仓库存在哪些镜像支持。不带版本号，默认下载latest版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果执行&lt;code&gt;docker run&lt;/code&gt;时，镜像在本地镜像仓库不存在，那么默认会先执行&lt;code&gt;docker pull&lt;/code&gt;从远程仓库拉去镜像到本地镜像仓库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;-f强制删除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;docker rmi &amp;lt;-f&amp;gt; 镜像名:&amp;lt;tags&amp;gt; - 删除镜像&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;p&gt;-f强制删除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;31-快速安装tomcat&quot;&gt;3.1 快速安装tomcat&lt;/h2&gt;
&lt;h3 id=&quot;311-寻找镜像&quot;&gt;3.1.1 寻找镜像&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;先到docker中央仓库寻找tomcat的官方镜像，点击镜像会有各种版本tag，用来描述该镜像的基本组件信息。例如‘9.0.39-jdk11-adoptopenjdk-hotspot’表示的就是该tomcat基础环境是基于hotspot虚拟机jdk11版本，tomcat版本为9.0.39。点击该版本tag，我们可以看到该镜像的详细构建信息。后续会详细解释各个命令，从而能够看懂这个文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;FROM adoptopenjdk:11-jdk-hotspot

ENV CATALINA_HOME /usr/local/tomcat
ENV PATH $CATALINA_HOME/bin:$PATH
RUN mkdir -p &quot;$CATALINA_HOME&quot;
WORKDIR $CATALINA_HOME

# let &quot;Tomcat Native&quot; live somewhere isolated
ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR

# see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
# see also &quot;update.sh&quot; (https://github.com/docker-library/tomcat/blob/master/update.sh)
ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23

ENV TOMCAT_MAJOR 9
ENV TOMCAT_VERSION 9.0.39
ENV TOMCAT_SHA512 307ca646bac267e529fb0862278f7133fe80813f0af64a44aed949f4c7a9a98aeb9bd7f08b087645b40c6fefdd3a7fe519e4858a3dbf0a19c38c53704f92b575

RUN set -eux; \
        \
        savedAptMark=&quot;$(apt-mark showmanual)&quot;; \
        apt-get update; \
        apt-get install -y --no-install-recommends \
                gnupg dirmngr \
                wget ca-certificates \
        ; \
        \
        ddist() { \
                local f=&quot;$1&quot;; shift; \
                local distFile=&quot;$1&quot;; shift; \
                local mvnFile=&quot;${1:-}&quot;; \
                local success=; \
                local distUrl=; \
                for distUrl in \
# https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
                        &quot;https://www.apache.org/dyn/closer.cgi?action=download&amp;amp;filename=$distFile&quot; \
# if the version is outdated (or we're grabbing the .asc file), we might have to pull from the dist/archive :/
                        &quot;https://www-us.apache.org/dist/$distFile&quot; \
                        &quot;https://www.apache.org/dist/$distFile&quot; \
                        &quot;https://archive.apache.org/dist/$distFile&quot; \
# if all else fails, let's try Maven (https://www.mail-archive.com/users@tomcat.apache.org/msg134940.html; https://mvnrepository.com/artifact/org.apache.tomcat/tomcat; https://repo1.maven.org/maven2/org/apache/tomcat/tomcat/)
                        ${mvnFile:+&quot;https://repo1.maven.org/maven2/org/apache/tomcat/tomcat/$mvnFile&quot;} \
                ; do \
                        if wget -O &quot;$f&quot; &quot;$distUrl&quot; &amp;amp;&amp;amp; [ -s &quot;$f&quot; ]; then \
                                success=1; \
                                break; \
                        fi; \
                done; \
                [ -n &quot;$success&quot; ]; \
        }; \
        \
        ddist 'tomcat.tar.gz' &quot;tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz&quot; &quot;$TOMCAT_VERSION/tomcat-$TOMCAT_VERSION.tar.gz&quot;; \
        echo &quot;$TOMCAT_SHA512 *tomcat.tar.gz&quot; | sha512sum --strict --check -; \
        ddist 'tomcat.tar.gz.asc' &quot;tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc&quot; &quot;$TOMCAT_VERSION/tomcat-$TOMCAT_VERSION.tar.gz.asc&quot;; \
        export GNUPGHOME=&quot;$(mktemp -d)&quot;; \
        for key in $GPG_KEYS; do \
                gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys &quot;$key&quot;; \
        done; \
        gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
        tar -xf tomcat.tar.gz --strip-components=1; \
        rm bin/*.bat; \
        rm tomcat.tar.gz*; \
        command -v gpgconf &amp;amp;&amp;amp; gpgconf --kill all || :; \
        rm -rf &quot;$GNUPGHOME&quot;; \
        \
# https://tomcat.apache.org/tomcat-9.0-doc/security-howto.html#Default_web_applications
        mv webapps webapps.dist; \
        mkdir webapps; \
# we don't delete them completely because they're frankly a pain to get back for users who do want them, and they're generally tiny (~7MB)
        \
        nativeBuildDir=&quot;$(mktemp -d)&quot;; \
        tar -xf bin/tomcat-native.tar.gz -C &quot;$nativeBuildDir&quot; --strip-components=1; \
        apt-get install -y --no-install-recommends \
                dpkg-dev \
                gcc \
                libapr1-dev \
                libssl-dev \
                make \
        ; \
        ( \
                export CATALINA_HOME=&quot;$PWD&quot;; \
                cd &quot;$nativeBuildDir/native&quot;; \
                gnuArch=&quot;$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)&quot;; \
                aprConfig=&quot;$(command -v apr-1-config)&quot;; \
                ./configure \
                        --build=&quot;$gnuArch&quot; \
                        --libdir=&quot;$TOMCAT_NATIVE_LIBDIR&quot; \
                        --prefix=&quot;$CATALINA_HOME&quot; \
                        --with-apr=&quot;$aprConfig&quot; \
                        --with-java-home=&quot;$JAVA_HOME&quot; \
                        --with-ssl=yes; \
                make -j &quot;$(nproc)&quot;; \
                make install; \
        ); \
        rm -rf &quot;$nativeBuildDir&quot;; \
        rm bin/tomcat-native.tar.gz; \
        \
# reset apt-mark's &quot;manual&quot; list so that &quot;purge --auto-remove&quot; will remove all build dependencies
        apt-mark auto '.*' &amp;gt; /dev/null; \
        [ -z &quot;$savedAptMark&quot; ] || apt-mark manual $savedAptMark &amp;gt; /dev/null; \
        find &quot;$TOMCAT_NATIVE_LIBDIR&quot; -type f -executable -exec ldd '{}' ';' \
                | awk '/=&amp;gt;/ { print $(NF-1) }' \
                | sort -u \
                | xargs -r dpkg-query --search \
                | cut -d: -f1 \
                | sort -u \
                | xargs -r apt-mark manual \
        ; \
        apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
        rm -rf /var/lib/apt/lists/*; \
        \
# sh removes env vars it doesn't support (ones with periods)
# https://github.com/docker-library/tomcat/issues/77
        find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
        \
# fix permissions (especially for running as non-root)
# https://github.com/docker-library/tomcat/issues/35
        chmod -R +rX .; \
        chmod 777 logs temp work

# verify Tomcat Native is working properly
RUN set -e \
        &amp;amp;&amp;amp; nativeLines=&quot;$(catalina.sh configtest 2&amp;gt;&amp;amp;1)&quot; \
        &amp;amp;&amp;amp; nativeLines=&quot;$(echo &quot;$nativeLines&quot; | grep 'Apache Tomcat Native')&quot; \
        &amp;amp;&amp;amp; nativeLines=&quot;$(echo &quot;$nativeLines&quot; | sort -u)&quot; \
        &amp;amp;&amp;amp; if ! echo &quot;$nativeLines&quot; | grep -E 'INFO: Loaded( APR based)? Apache Tomcat Native library' &amp;gt;&amp;amp;2; then \
                echo &amp;gt;&amp;amp;2 &quot;$nativeLines&quot;; \
                exit 1; \
        fi

EXPOSE 8080
CMD [&quot;catalina.sh&quot;, &quot;run&quot;]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;312-拉取镜像到本地&quot;&gt;3.1.2 拉取镜像到本地&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;docker pull tomcat # 不带版本号，默认下载latest版本

docker pull tomcat:9.0.39-jdk11-adoptopenjdk-hotspot # 下载指定版本tag的tomcat。版本号参见上文

docker images # 查看本地下载了哪些镜像
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;313-运行镜像，启动容器&quot;&gt;3.1.3 运行镜像，启动容器&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;docker run tomcat # 默认方式启动，端口号默认为8080，默认以交互方式启动
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时，tomcat虽然在8080端口运行起来了，但是此时只是docker容器暴露了8080，宿主机的端口并没有暴露出去，外部访问不了该tomcat。docker提供了端口映射，用来绑定宿主机和容器的端口，从而解决这个问题。这种方式隔离了底层的实现，比如我们把tomcat的web服务换成其他的，但是绑定的还是宿主机的原来端口，外部用户无感知&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker run -p 8000:8080 tomcat #表示宿主机的8000映射容器的8080

netstat -tulpn # 查看服务端口号占用情况，此时外部可以访问8000端口映射的tomcat服务
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时tomcat是以前台交互的方式启动的，后台挂起的方式启动如下,增加-d参数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker run -p 8000:8080 -d tomcat #tomcat后台方式启动
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;314-停止容器&quot;&gt;3.1.4 停止容器&lt;/h3&gt;
&lt;p&gt;方法1&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker stop xxx # xxx为容器id

docker rm xxx # xxx为容器id
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;方法2&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker rm -f xxx # xxx为容器id，线上环境还是建议使用方法1，不要强杀
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;315-移除镜像&quot;&gt;3.1.5 移除镜像&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;docker rmi xxx # xxx为镜像id
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果有基于该镜像运行的容器，需要先停止容器，再删除镜像。或者执行下面命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker rmi -f xxx # xxx为镜像id，生产环境不建议使用
&lt;/code&gt;
&lt;/pre&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;dockerhub上关于镜像的详细信息，对镜像的组成做了比较详细的解释。找到镜像的版本tag，点进去，看dockerfile详细描述文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过tomcat镜像来看，一个tomcat镜像的最底层都包含一个linux基础镜像（mini），一个jdk镜像，一个tomcat镜像。层数以来顺序为tomcat以来于jdk，jdk依赖于linux。&lt;/p&gt;
&lt;h2 id=&quot;41-进入容器&quot;&gt;4.1 进入容器&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;格式：docker exec [-it] 容器id 命令&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;exec 在对应容器中执行命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;-it 采用交互方式执行命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;docker exec -it xxx sh # xxx为容器id

cat /proc/version # 查看容器内置的底层mini操作系统

java -version # 查看在mini基础操作系统上安装的jdk版本信息。创建容器后，Java环境变量无需我们关心，已经配置好了

exit # 退回到宿主机
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;42-docker容器和镜像存放在宿主机的位置&quot;&gt;4.2 docker容器和镜像存放在宿主机的位置&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;docker容器和镜像默认存放在宿主机的/var/lib/docker目录下。容器存在在该目录下的containers下，镜像存在在该目录下的images目录下。除非特殊需要，不建议修改docker默认存放的地址/var/lib/docker&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;43-容器生命周期流程图&quot;&gt;4.3 容器生命周期流程图&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;椭圆表示容器所处在的状态，矩形表示容器变化产生的事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt;产生两个事件，创建容器，启动容器，至此容器处于运行状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker create&lt;/code&gt;只是创建容器，此时容器处在停止运行状态，需要&lt;code&gt;docker start&lt;/code&gt;来触发让容器处在运行状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker stop&lt;/code&gt;和&lt;code&gt;docker kill&lt;/code&gt;会对处在运行状态的容器执行&lt;code&gt;die&lt;/code&gt;事件，让其回到停止运行的状态。&lt;code&gt;kill&lt;/code&gt;会杀掉容器进程，而&lt;code&gt;stop&lt;/code&gt;只会停止容器，不会杀死进程。&lt;strong&gt;区别：重新&lt;code&gt;docker start&lt;/code&gt;该容器，被&lt;code&gt;kill&lt;/code&gt;掉的容器会令启进程，&lt;code&gt;stop&lt;/code&gt;掉的容器会恢复进程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker restart&lt;/code&gt;会把当前容器&lt;code&gt;die&lt;/code&gt;，再&lt;code&gt;start&lt;/code&gt;再&lt;code&gt;restart&lt;/code&gt;重新回到运行状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker pause&lt;/code&gt;会暂停容器，让其不再对位提供服务，容器处在不可用状态，可以用&lt;code&gt;docker unpause&lt;/code&gt;恢复到运行状态（不常用）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oom&lt;/code&gt;当容器遇到未知异常，比如&lt;code&gt;oom&lt;/code&gt;容器会&lt;code&gt;die&lt;/code&gt;，其会根据docker配置的重启策略，决定是否回到运行态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker rm&lt;/code&gt;当容器不需要了，我们可以通过该命令触发&lt;code&gt;destory&lt;/code&gt;移除容器&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/WEB69dab50f84c5d39ef948c52f119d1ecc?method=download&amp;amp;shareKey=4ce8287722fb015f630cbcc04986ff3e&quot; alt=&quot;容器生命周期流程图&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt;只会列出正在运行的容器，要想看到所有容器，使用&lt;code&gt;docker ps -a&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;create状态是stop状态的一种表现，实际也是stop状态。exited退出状态，是在&lt;code&gt;docker stop&lt;/code&gt;后的一种状态，也是stop的一种表现&lt;/p&gt;
&lt;p&gt;up状态是runing状态的一种表现，表示已上线，运行中&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Dockerfile是一个包含用于组合镜像的命令的文本文档（本身是一个脚本）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Docker通过读取Dockerfile中的指令，按步自动生成镜像&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;docker build命令用来解析执行dockerfile文件，生成镜像。docker build -tag 机构+镜像名称&amp;lt;:Tags&amp;gt; dockerfile文件所在目录(推荐用相对路径)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;51-dockerfile部署tomcat-web案例&quot;&gt;5.1 dockerfile部署tomcat web案例&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;通过dockerfile构建自定义镜像&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;FROM tomcat:latest #指定基准镜像
MAINTAINER darope.163.com # 指定维护人或者维护机构信息
WORKDIR /usr/local/tomcat/webapps # 指定工作目录，工作目录指的是进入容器后，默认进入的目录，不存在则自动创建
# dockerfile需要和docker-web放在同级文件夹中，拷贝到容器中的路径，基于工作目录，移动的目录不存在则自动创建
ADD docker-web ./docker-web # 拷贝文件docker-web，到该镜像的指定目录下。
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在我们项目根目录执行：docker build -tag myweb:1.0 .&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;dockerfile文件放在项目根目录下&lt;/li&gt;
&lt;li&gt;-t 参数后指定机构，应用名称。 . 表示dockerfile文件就在当前文件夹下，相对路径&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt; ~/test/ docker build --tag myweb:1.0 .
Sending build context to Docker daemon  3.584kB
Step 1/4 : FROM tomcat:latest
 ---&amp;gt; 891fcd9c5b3a
Step 2/4 : MAINTAINER darope.163.com
 ---&amp;gt; Running in fa753d5d868c
Removing intermediate container fa753d5d868c
 ---&amp;gt; fc43dedb3ad5
Step 3/4 : WORKDIR /usr/local/tomcat/webapps
 ---&amp;gt; Running in 98d448195ab1
Removing intermediate container 98d448195ab1
 ---&amp;gt; c876f3ed91ef
Step 4/4 : ADD docker-web ./docker-web
 ---&amp;gt; bf912fc6c119
Successfully built bf912fc6c119
Successfully tagged myweb:1.0
 ~/test/ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
myweb               1.0                 bf912fc6c119        57 seconds ago      647MB
tomcat              latest              891fcd9c5b3a        8 days ago          647MB
 ~/test/ ls
Dockerfile docker-web
 ~/test/ docker run -p 8000:8080 -d bf912fc6c119
26c97c083e429ab30aa25aec3ad2ebe92a3dfbf62b891820a60237625125b1eb
 ~/test/ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES
26c97c083e42        bf912fc6c119        &quot;catalina.sh run&quot;   5 seconds ago       Up 5 seconds        0.0.0.0:8000-&amp;gt;8080/tcp   loving_pasteur
 ~/test/ docker exec -it 26c97c083e42 sh
# pwd
/usr/local/tomcat/webapps
# ls
docker-web
# cd docker-web
# ls
index.html
#
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;访问127.0.0.1:8000/docker-web/index.html可以看到'hello',成功部署&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;52-镜像分层（layer）的概念&quot;&gt;5.2 镜像分层（layer）的概念&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;在我们dockerfile文件中，每一行指令build过程中都对应一个分层，所以，在能完成我们的构建要求的情况下，命令行数越简洁，越少行数越好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上文中，构建的dockerfile为四条命令，对应的构建镜像为4层&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;FROM tomcat:latest 
MAINTAINER darope.163.com 
WORKDIR /usr/local/tomcat/webapps 
ADD docker-web ./docker-web
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt; ~/test/ docker build --tag myweb:1.0 .
Sending build context to Docker daemon  3.584kB
Step 1/4 : FROM tomcat:latest
 ---&amp;gt; 891fcd9c5b3a
Step 2/4 : MAINTAINER darope.163.com
 ---&amp;gt; Running in fa753d5d868c
Removing intermediate container fa753d5d868c
 ---&amp;gt; fc43dedb3ad5
Step 3/4 : WORKDIR /usr/local/tomcat/webapps
 ---&amp;gt; Running in 98d448195ab1
Removing intermediate container 98d448195ab1
 ---&amp;gt; c876f3ed91ef
Step 4/4 : ADD docker-web ./docker-web
 ---&amp;gt; bf912fc6c119
Successfully built bf912fc6c119
Successfully tagged myweb:1.0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;构建过程中，每一层会产生一个临时只读容器id，临时容器只会用于镜像的构建。例如上面的每一层的 &lt;code&gt;---&amp;gt; 891fcd9c5b3a&lt;/code&gt;。临时容器相当于每一层，对当前系统做一份快照。整个过程类似于千层饼。&lt;/p&gt;
&lt;p&gt;在以后构建其他应用的时候，如果该应用有相同的快照，不会重新拉去，而是使用系统已经形成的快照。系统没有的快照再形成新的快照保存到系统中。从而达到快速构建，不重复构建，节省系统资源的效果。&lt;/p&gt;
&lt;h2 id=&quot;53-dockerfile命令&quot;&gt;5.3 dockerfile命令&lt;/h2&gt;
&lt;h3 id=&quot;531-基础指令&quot;&gt;5.3.1 基础指令&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;1、FROM - 基于基准镜像&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;FROM centos  #制作基准镜像(基于centos:lastest)

FROM scratch   #不依赖任何基准镜像base image

FROM tomcat: 9.0.22-jdk8-openjdk
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;尽量使用官方提供的Base Image,防止其他第三方镜像存在漏洞和后门。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;2、LABEL &amp;amp; MAINTAINER - 说明信息&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;MAINTAINER darope@163.com  # 常用来表示该docker镜像是哪个个人或者机构维护的

# 常用来描述构建过程中关键信息，只是描述，不会影响任何构建功能。为程序维护带来便利。类似于Java中的注释
LABEL version = &quot;1.0&quot;   

LABEL description = &quot;hahaha&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;3、WORKDIR - 设置工作目录&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;WORKDIR /usr/local
WORKDIR /usr/local/newdir #不存在该目录会自动创建
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;和linux中的cd命令非常相似，尽量使用绝对路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;4、ADD &amp;amp; COPY - 复制文件&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;ADD hello / #将hello文件复制到容器的根路径下
ADD test.tar.gz / #添加到根目录并解压
ADD 除了复制,还具备添加远程文件功能。实际项目中很少使用
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;ADD 复制并且解压，COPY单纯复制。大多数情况可以互相替换&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;5、ENV - 设置环境常量&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;ENV JAVA_HOME /usr/local/openjdk8 #用环境常量JAVA_HOME指代/usr/local/openjdk8
RUN ${JAVA_HOME}/bin/java -jar test.jar #用${JAVA_HOME}标识，获取环境常量JAVA_HOME
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;尽量使用环境常量,可提高程序维护性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;6、EXPOSE - 暴露容器端口&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;将容器内部端口暴露给物理机,从而可以使得物理机端口和暴露给物理机的容器端口做映射&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;EXPOSE 8080
docker run -p 8000:8080 tomcat
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;532-dockerfile中的执行指令&quot;&gt;5.3.2 dockerfile中的执行指令&lt;/h3&gt;
&lt;p&gt;RUN &amp;amp; CMD &amp;amp; ENTRYPOINT&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;三个执行命令本质是执行时机不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;RUN  : 在Build构建时执行命令
ENTRYPOINT : 容器启动时执行的命令
CMD : 容器启动后执行默认的命令或参数
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;RUN : 是在构建镜像过程中（&lt;code&gt;docker build&lt;/code&gt;），对&lt;strong&gt;镜像&lt;/strong&gt;内部的文件及资源做相应调整。一旦镜像被创建成功，镜像就是只读的，不允许再修改&lt;/p&gt;
&lt;p&gt;ENTRYPOINT和CMD是在&lt;strong&gt;容器&lt;/strong&gt;创建时（&lt;code&gt;docker run&lt;/code&gt;）对容器内执行的命令&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1、RUN-构建时运行&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;RUN命令有两种运行格式，一种是shell命令格式，一种是Exec命令格式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果不清楚该用哪种方式，推荐使用Exec方式执行命令，参考官方镜像的构建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;RUN yum install -y vim  #Shell 命令格式
RUN [&quot;yum&quot;,&quot;install&quot;,&quot;-y&quot;,&quot;vim&quot;] #Exec命令格式
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Shell运行方式&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;使用Shell执行时，当前shell是父进程，生成一个子shell进程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;在子shell中执行脚本。脚本执行完毕，退出子shell，回到当前shell。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Exec运行方式&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;使用Exec方式，会用Exec进程替换当前进程，并且保持PID不变&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;执行完毕，直接退出，并不会退回之前的进程环境&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;2、ENTRYPOINT启动命令&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Dockerfile中只有最后一个ENTRYPOINT会被执行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;ENTRYPOINT(入口点)用于在容器启动时执行命令
ENTRYPOINT [&quot;ps&quot;] #推荐使用Exec格式
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;3、CMD默认命令&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;CMD用于设置默认执行的命令,如Dockerfile中出现多个CMD,则只有最后一个被执行。如容器启动时附加指令,则CMD被忽略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;CMD [&quot;ps&quot; , &quot;-ef&quot;] #推荐使用Exec格式
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ENTRYPOINT和CMD的区别：两者非常相似，区别在于，ENTRYPOINT一定会被执行，且只会执行dockerfile中最后一个ENTRYPOINT。而CMD不一定会被执行，如果容器启动时附加了命令，则CMD命令会被覆盖，如果容器启动时没有附加命令，则CMD也是只会dockerfile中的最后一个CMD命令&lt;/p&gt;
&lt;p&gt;编写测试Dockerfile文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; ~/ cd opt/docker_run
 ~/opt/docker_run/ ls
Dockerfile
 ~/opt/docker_run/ cat Dockerfile
FROM centos
RUN [&quot;echo&quot;, &quot;image building...&quot;]
CMD [&quot;echo&quot;,&quot;container start...&quot;]
 ~/opt/docker_run/
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;构建镜像测试&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; ~/opt/docker_run/ docker build --tag docker_run .
Sending build context to Docker daemon  2.048kB
Step 1/3 : FROM centos
 ---&amp;gt; 0d120b6ccaa8
Step 2/3 : RUN [&quot;echo&quot;, &quot;image building...&quot;]
 ---&amp;gt; Running in 7490a32995d4
image building...
Removing intermediate container 7490a32995d4
 ---&amp;gt; 31c5d825a261
Step 3/3 : CMD [&quot;echo&quot;,&quot;container start...&quot;]
 ---&amp;gt; Running in c6d25a6895aa
Removing intermediate container c6d25a6895aa
 ---&amp;gt; ed5e36a3fcbd
Successfully built ed5e36a3fcbd
Successfully tagged docker_run:latest
 ~/opt/docker_run/
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以观察到，RUN命令在构建过程中已经执行打印了image building....。而CMD命令是在容器启动的时候才会运行，所在在构建过程中并没有执行打印。通过该镜像启动容器，可以看到CMD命令的打印内容。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; ~/opt/docker_run/ docker run docker_run
container start...
 ~/opt/docker_run/
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在我们运行容器的时候，如果增加了命令，那么默认的最后CMD命令，不会被执行。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; ~/opt/docker_run/ docker run docker_run ls
bin
dev
etc
home
lib
lib64
lost+found
media
mnt
opt
proc
root
run
sbin
srv
sys
tmp
usr
var
 ~/opt/docker_run/
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果我们把Dockerfile中的CMD换作ENTRYPOINT，无论运行容器加不加指令，ENTRYPOINT都会执行，这里不再演示。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;4、CMD和ENTRYPOINT组合使用&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如我们把Dockerfile更改如下，再构建运行容器&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;FROM centos
RUN [&quot;echo&quot;, &quot;image building...&quot;]
ENTRYPOINT [&quot;ps&quot;]
CMD [&quot;-ef&quot;]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; ~/opt/docker_run/ docker run docker_run
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 16:16 ?        00:00:00 ps -ef
 ~/opt/docker_run/
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;运行时传参，覆盖CMD命令后&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; ~/opt/docker_run/ docker run docker_run -aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.1  47508  3556 ?        Rs   16:19   0:00 ps -aux
 ~/opt/docker_run/
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;CMD命令可以通过外界传参，组合使用会有意想不到的结果&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 22 Oct 2020 16:27:00 +0000</pubDate>
<dc:creator>x1aoda1</dc:creator>
<og:description>1 安装docker docker是cs架构，安装docker默认会安装服务端和客户端，通过docker version查看版本和安装信息。docker有很多平台的版本，云服务器最常用的是linux版</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/darope/p/13861840.html</dc:identifier>
</item>
<item>
<title>Kubernetes K8S之存储Volume详解 - 踏歌行666</title>
<link>http://www.cnblogs.com/zhanglianghhh/p/13861817.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhanglianghhh/p/13861817.html</guid>
<description>
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;K8S之存储PV-PVC概述与说明，并详解常用PV-PVC示例&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;与管理计算实例相比，管理存储是一个明显的问题。PersistentVolume子系统为用户和管理员提供了一个API，该API从如何使用存储中抽象出如何提供存储的详细信息。为此，我们引入了两个新的API资源：&lt;span&gt;PersistentVolume和PersistentVolumeClaim&lt;/span&gt;。&lt;/p&gt;

&lt;h2 id=&quot;PV概述&quot;&gt;PV概述&lt;/h2&gt;
&lt;p&gt;PersistentVolume (PV)是集群中由管理员提供或使用存储类动态提供的一块存储。它是集群中的资源，就像节点是集群资源一样。&lt;/p&gt;
&lt;p&gt;PV是与Volumes类似的卷插件，但&lt;span&gt;其生命周期与使用PV的任何单个Pod无关&lt;/span&gt;。由此API对象捕获存储的实现细节，不管是NFS、iSCSI还是特定于云提供商的存储系统。&lt;/p&gt;

&lt;h2 id=&quot;PVC概述&quot;&gt;PVC概述&lt;/h2&gt;
&lt;p&gt;PersistentVolumeClaim (PVC) 是用户对存储的请求。它类似于Pod；Pods消耗节点资源，而PVC消耗PV资源。Pods可以请求特定级别的资源(CPU和内存)。Claim可以请求特定的存储大小和访问模式(例如，它们可以挂载一次读写或多次只读)。&lt;/p&gt;
&lt;p&gt;虽然PersistentVolumeClaims (PVC) 允许用户使用抽象的存储资源，但是用户通常需要具有不同属性(比如性能)的PersistentVolumes (PV) 来解决不同的问题。集群管理员需要能够提供各种不同的PersistentVolumes，这些卷在大小和访问模式之外还有很多不同之处，也不向用户公开这些卷是如何实现的细节。对于这些需求，有一个StorageClass资源。&lt;/p&gt;


&lt;p&gt;PV是集群中的资源。PVC是对这些资源的请求，并且还充当对资源的声明检查。PV和PVC之间的交互遵循以下生命周期：&lt;/p&gt;

&lt;h2 id=&quot;供应&quot;&gt;供应&lt;/h2&gt;
&lt;p&gt;有两种方式配置PV：静态的或动态的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;静态配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;集群管理员创建一些PV。它们带有可供集群用户使用的实际存储的详细信息。存在于Kubernetes API中，可供使用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;动态配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当管理员创建的静态PV没有一个与用户的PersistentVolumeClaim匹配时，集群可能会尝试动态地为PVC提供一个卷。此配置基于StorageClasses：PVC必须请求存储类，并且管理员必须已经创建并配置了该类，才能进行动态配置。声明该类为 &lt;code&gt;&quot;&quot;&lt;/code&gt;，可以有效地禁用其动态配置。&lt;/p&gt;
&lt;p&gt;要启用基于存储级别的动态存储配置，集群管理员需要启用API Server上的DefaultStorageClass[准入控制器]。例如，通过确保DefaultStorageClass位于API Server组件的 &lt;code&gt;--enable-admission-plugins&lt;/code&gt;标志，使用逗号分隔的有序值列表中，可以完成此操作。&lt;/p&gt;

&lt;h2 id=&quot;绑定&quot;&gt;绑定&lt;/h2&gt;
&lt;p&gt;用户创建(或者在动态配置的情况下，已经创建)具有特定存储请求量(大小)和特定访问模式的PersistentVolumeClaim。主控制器中的控制循环监视新的PV，找到匹配的PV(如果可能的话)，并将它们绑定在一起。如果PV为新的PVC动态配置，那么循环始终将该PV绑定到PVC。否则，用户始终至少得到他们所要求的，但是存储量可能会超过所要求的范围。&lt;/p&gt;
&lt;p&gt;一旦绑定，无论是如何绑定的，PersistentVolumeClaim绑定都是互斥的。PVC到PV的绑定是一对一的映射，使用ClaimRef，它是PersistentVolume和PersistentVolumeClaim之间的双向绑定。&lt;/p&gt;
&lt;p&gt;如果不存在匹配的卷，声明(Claims)将无限期保持未绑定。随着匹配量的增加，声明将受到约束。例如，配备有许多50Gi PV的群集将与请求100Gi的PVC不匹配。当将100Gi PV添加到群集时，可以绑定PVC。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：静态时PVC与PV绑定时会根据storageClassName（存储类名称）和accessModes（访问模式）判断哪些PV符合绑定需求。然后再根据存储量大小判断，首先存PV储量必须大于或等于PVC声明量；其次就是PV存储量越接近PVC声明量，那么优先级就越高（PV量越小优先级越高）。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;使用&quot;&gt;使用&lt;/h2&gt;
&lt;p&gt;Pods使用声明(claims)作为卷。集群检查声明以找到绑定卷并为Pod挂载该卷。对于支持多种访问模式的卷，用户在其声明中作为Pod中卷使用时指定所需的模式。&lt;/p&gt;
&lt;p&gt;一旦用户拥有一个声明并且该声明被绑定，则绑定的PV就属于该用户。用户通过在Pod的卷块中包含的persistentVolumeClaim部分来调度Pods并访问其声明的PV。&lt;/p&gt;

&lt;h2 id=&quot;持久化声明保护&quot;&gt;持久化声明保护&lt;/h2&gt;
&lt;p&gt;“使用中的存储对象保护” ：该功能的目的是确保在Pod活动时使用的PersistentVolumeClaims (PVC)和绑定到PVC的PersistentVolume (PV)不会从系统中删除，因为这可能会导致数据丢失。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果用户删除了Pod正在使用的PVC，则不会立即删除该PVC；PVC的清除被推迟，直到任何Pod不再主动使用PVC。另外，如果管理员删除绑定到PVC的PV，则不会立即删除该PV；PV的去除被推迟，直到PV不再与PVC结合。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;回收策略&quot;&gt;回收策略&lt;/h2&gt;
&lt;p&gt;当用户处理完他们的卷时，他们可以从允许回收资源的API中删除PVC对象。PersistentVolume的回收策略告诉集群在释放卷的声明后该如何处理它。目前，&lt;span&gt;卷可以被保留、回收或删除&lt;/span&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retain (保留)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;保留回收策略允许手动回收资源。当PersistentVolumeClaim被删除时，PersistentVolume仍然存在，并且该卷被认为是“释放”的。但是，由于之前声明的数据仍然存在，因此另一个声明尚无法得到。管理员可以手动回收卷。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delete (删除)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于支持Delete回收策略的卷插件，删除操作会同时从Kubernetes中删除PersistentVolume对象以及外部基础架构中的关联存储资产，例如AWS EBS，GCE PD，Azure Disk或Cinder卷。动态配置的卷将继承其StorageClass的回收策略，默认为Delete。管理员应根据用户的期望配置StorageClass。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recycle (回收)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果基础卷插件支持，Recycle回收策略将rm -rf /thevolume/*对该卷执行基本的擦除并使其可用于新的声明。&lt;/p&gt;

&lt;h2 id=&quot;Persistent-Volumes类型&quot;&gt;Persistent Volumes类型&lt;/h2&gt;
&lt;p&gt;PersistentVolume类型作为插件实现。Kubernetes当前支持以下插件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;GCEPersistentDisk
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;AWSElasticBlockStore
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;AzureFile
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;AzureDisk
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;CSI
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;FC (Fibre Channel)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;FlexVolume
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;Flocker
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;NFS
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;iSCSI
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;RBD (Ceph Block Device)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;CephFS
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;Cinder (OpenStack block storage)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;Glusterfs
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;VsphereVolume
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;Quobyte Volumes
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;HostPath (仅用于单节点测试——本地存储不受任何方式的支持，也不能在多节点集群中工作)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;Portworx Volumes
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;ScaleIO Volumes
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; StorageOS
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&quot;PV示例&quot;&gt;PV示例&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;kind: PersistentVolume
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;  name: pv0003
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;  capacity:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    storage: 5Gi
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;  volumeMode: Filesystem
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  accessModes:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     -&lt;span&gt; ReadWriteOnce
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  persistentVolumeReclaimPolicy: Recycle
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;  storageClassName: slow
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;  mountOptions:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     -&lt;span&gt; hard
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     - nfsvers=&lt;span&gt;4.1&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;  nfs:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     path: /&lt;span&gt;tmp
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     server: &lt;span&gt;172.17&lt;/span&gt;.&lt;span&gt;0.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Capacity：&lt;/strong&gt;通常，PV将具有特定的存储容量设置。当前，存储大小是可以设置或请求的唯一资源。将来的属性可能包括IOPS，吞吐量等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;volumeMode：&lt;/strong&gt;可选参数，为Filesystem或Block。Filesystem是volumeMode省略参数时使用的默认模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;accessModes：&lt;/strong&gt;PersistentVolume可以通过资源提供者支持的任何方式安装在主机上。如下文表中所示，提供商将具有不同的功能，并且每个PV的访问模式都将设置为该特定卷支持的特定模式。例如，NFS可以支持多个读/写客户端，但是特定的NFS PV可能以只读方式在服务器上导出。每个PV都有自己的一组访问模式，用于描述该特定PV的功能。&lt;/p&gt;
&lt;p&gt;访问方式为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ReadWriteOnce-&lt;span&gt;该卷可以被单个节点以读写方式挂载
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; ReadOnlyMany-&lt;span&gt;该卷可以被许多节点以只读方式挂载
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; ReadWriteMany-该卷可以被多个节点以读写方式挂载
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在CLI命令行中，访问模式缩写为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; RWO-&lt;span&gt;ReadWriteOnce
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; ROX-&lt;span&gt;ReadOnlyMany
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; RWX-ReadWriteMany
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;说明：一个卷一次只能使用一种访问模式挂载，即使它支持多种访问模式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;storageClassName：&lt;/strong&gt;PV可以有一个类，通过将storageClassName属性设置为一个StorageClass的名称来指定这个类。特定类的PV只能绑定到请求该类的PVC。没有storageClassName的PV没有类，只能绑定到不请求特定类的PVC。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;persistentVolumeReclaimPolicy：&lt;/strong&gt;当前的回收政策是：Retain (保留)-手动回收、Recycle (回收)-基本擦除（rm -rf /thevolume/*）、Delete (删除)-删除相关的存储资产 (例如AWS EBS，GCE PD，Azure Disk或OpenStack Cinder卷)。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;备注：当前，仅NFS和HostPath支持回收。AWS EBS，GCE PD，Azure Disk和Cinder卷支持删除。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;PV卷状态&quot;&gt;PV卷状态&lt;/h2&gt;
&lt;p&gt;卷将处于以下某种状态：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Available：尚未绑定到声明(claim)的空闲资源&lt;/li&gt;
&lt;li&gt;Bound：卷已被声明绑定&lt;/li&gt;
&lt;li&gt;Released：声明已被删除，但群集尚未回收该资源&lt;/li&gt;
&lt;li&gt;Failed：该卷自动回收失败&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;CLI将显示绑定到PV的PVC的名称。&lt;/p&gt;

&lt;h2 id=&quot;PV类型与支持的访问模式&quot;&gt;PV类型与支持的访问模式&lt;/h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Volume Plugin&lt;/th&gt;
&lt;th&gt;ReadWriteOnce&lt;/th&gt;
&lt;th&gt;ReadOnlyMany&lt;/th&gt;
&lt;th&gt;ReadWriteMany&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;AWSElasticBlockStore&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;AzureFile&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;AzureDisk&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CephFS&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Cinder&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CSI&lt;/td&gt;
&lt;td&gt;depends on the driver&lt;/td&gt;
&lt;td&gt;depends on the driver&lt;/td&gt;
&lt;td&gt;depends on the driver&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;FC&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;FlexVolume&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;depends on the driver&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Flocker&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GCEPersistentDisk&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Glusterfs&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;HostPath&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;iSCSI&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Quobyte&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;NFS&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;RBD&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;VsphereVolume&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;- (works when Pods are collocated)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PortworxVolume&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ScaleIO&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;StorageOS&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;主机信息&quot;&gt;主机信息&lt;/h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;服务器名称(hostname)&lt;/th&gt;
&lt;th&gt;系统版本&lt;/th&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;内网IP&lt;/th&gt;
&lt;th&gt;外网IP(模拟)&lt;/th&gt;
&lt;th&gt;部署模块&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;k8s-master&lt;/td&gt;
&lt;td&gt;CentOS7.7&lt;/td&gt;
&lt;td&gt;2C/4G/20G&lt;/td&gt;
&lt;td&gt;172.16.1.110&lt;/td&gt;
&lt;td&gt;10.0.0.110&lt;/td&gt;
&lt;td&gt;k8s-master&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node01&lt;/td&gt;
&lt;td&gt;CentOS7.7&lt;/td&gt;
&lt;td&gt;2C/4G/20G&lt;/td&gt;
&lt;td&gt;172.16.1.111&lt;/td&gt;
&lt;td&gt;10.0.0.111&lt;/td&gt;
&lt;td&gt;k8s-node&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node02&lt;/td&gt;
&lt;td&gt;CentOS7.7&lt;/td&gt;
&lt;td&gt;2C/4G/20G&lt;/td&gt;
&lt;td&gt;172.16.1.112&lt;/td&gt;
&lt;td&gt;10.0.0.112&lt;/td&gt;
&lt;td&gt;k8s-node&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node03&lt;/td&gt;
&lt;td&gt;CentOS7.7&lt;/td&gt;
&lt;td&gt;2C/2G/20G&lt;/td&gt;
&lt;td&gt;172.16.1.113&lt;/td&gt;
&lt;td&gt;10.0.0.113&lt;/td&gt;
&lt;td&gt;NFS&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;存储使用NFS，在k8s-node03机器仅部署NFS服务，没有部署K8S&lt;/p&gt;

&lt;h2 id=&quot;NFS服务部署&quot;&gt;NFS服务部署&lt;/h2&gt;
&lt;p&gt;文章参考：「&lt;a href=&quot;https://www.cnblogs.com/zhanglianghhh/p/9230045.html&quot; target=&quot;_blank&quot;&gt;NFS 服务搭建与配置&lt;/a&gt;」&lt;/p&gt;
&lt;p&gt;所有机器操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;# 所需安装包
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; nfs-utils rpcbind -y
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;NFS服务端k8s-node03机器操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-node03 ~]# &lt;span&gt;mkdir&lt;/span&gt; -p /data/nfs1 /data/nfs2 /data/nfs3 /data/nfs4 /data/nfs5 /data/&lt;span&gt;nfs6
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; [root@k8s-node03 ~]# &lt;span&gt;chown&lt;/span&gt; -R nfsnobody.nfsnobody /data/  
&lt;span&gt; 3&lt;/span&gt; [root@k8s-node03 ~&lt;span&gt;]# 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@k8s-node03 ~]# ll /data/
&lt;span&gt; 5&lt;/span&gt; total &lt;span&gt;0&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; drwxr-xr-x &lt;span&gt;2&lt;/span&gt; nfsnobody nfsnobody &lt;span&gt;6&lt;/span&gt; Jun &lt;span&gt;14&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;&lt;span&gt; nfs1
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; drwxr-xr-x &lt;span&gt;2&lt;/span&gt; nfsnobody nfsnobody &lt;span&gt;6&lt;/span&gt; Jun &lt;span&gt;14&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;&lt;span&gt; nfs2
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; drwxr-xr-x &lt;span&gt;2&lt;/span&gt; nfsnobody nfsnobody &lt;span&gt;6&lt;/span&gt; Jun &lt;span&gt;14&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;&lt;span&gt; nfs3
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; drwxr-xr-x &lt;span&gt;2&lt;/span&gt; nfsnobody nfsnobody &lt;span&gt;6&lt;/span&gt; Jun &lt;span&gt;14&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;&lt;span&gt; nfs4
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; drwxr-xr-x &lt;span&gt;2&lt;/span&gt; nfsnobody nfsnobody &lt;span&gt;6&lt;/span&gt; Jun &lt;span&gt;14&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;&lt;span&gt; nfs5
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; drwxr-xr-x &lt;span&gt;2&lt;/span&gt; nfsnobody nfsnobody &lt;span&gt;6&lt;/span&gt; Aug &lt;span&gt;22&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;&lt;span&gt; nfs6
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; [root@k8s-node03 ~]# vim /etc/&lt;span&gt;exports
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; /data/nfs1  &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;(rw,&lt;span&gt;sync&lt;/span&gt;&lt;span&gt;,root_squash,all_squash)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; /data/nfs2  &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;(rw,&lt;span&gt;sync&lt;/span&gt;&lt;span&gt;,root_squash,all_squash)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; /data/nfs3  &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;(rw,&lt;span&gt;sync&lt;/span&gt;&lt;span&gt;,root_squash,all_squash)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; /data/nfs4  &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;(rw,&lt;span&gt;sync&lt;/span&gt;&lt;span&gt;,root_squash,all_squash)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; /data/nfs5  &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;(rw,&lt;span&gt;sync&lt;/span&gt;&lt;span&gt;,root_squash,all_squash)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; /data/nfs6  &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;(rw,&lt;span&gt;sync&lt;/span&gt;&lt;span&gt;,root_squash,all_squash)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;### 启动NFS服务
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; [root@k8s-node03 ~&lt;span&gt;]# systemctl start rpcbind.service  
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; [root@k8s-node03 ~&lt;span&gt;]# systemctl start nfs.service 
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; ### 检查NFS服务 ， 其中 &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.113&lt;/span&gt;&lt;span&gt; 为服务端IP
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; [root@k8s-node03 ~]# showmount -e &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.113&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; Export list &lt;span&gt;for&lt;/span&gt; &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.113&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; /data/nfs6 &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; /data/nfs5 &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; /data/nfs4 &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; /data/nfs3 &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; /data/nfs2 &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; /data/nfs1 &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NFS客户端验证&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在k8s-node02机器验证&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;# 查看rpcbind服务，默认是启动的，如果没有启动则启动并加入开机自启动
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; [root@k8s-node02 ~&lt;span&gt;]# systemctl status rpcbind.service
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;# 查看NFS服务信息
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; [root@k8s-node02 ~]# showmount -e &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.113&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;………………
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;# 挂载，并进行读写验证
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; [root@k8s-node02 ~]# &lt;span&gt;mount&lt;/span&gt; -t nfs &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.113&lt;/span&gt;:/data/nfs1 /&lt;span&gt;mnt
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;# 验证完毕，去掉NFS挂载
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; [root@k8s-node02 ~]# &lt;span&gt;umount&lt;/span&gt; -lf &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.113&lt;/span&gt;:/data/nfs1
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;PV部署&quot;&gt;PV部署&lt;/h2&gt;
&lt;p&gt;yaml文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master pv-pvc]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/pv-&lt;span&gt;pvc
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master pv-pvc]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; pv.yaml 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;kind: PersistentVolume
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   name: pv-&lt;span&gt;nfs1
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  capacity:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    storage: 1Gi
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  accessModes:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     -&lt;span&gt; ReadWriteOnce
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;  persistentVolumeReclaimPolicy: Recycle
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;  storageClassName: nfs
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;  nfs:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     path: /data/&lt;span&gt;nfs1
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     server: &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.113&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; ---
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;kind: PersistentVolume
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;   name: pv-&lt;span&gt;nfs2
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;  capacity:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    storage: 3Gi
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;  accessModes:
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     -&lt;span&gt; ReadWriteOnce
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;  persistentVolumeReclaimPolicy: Recycle
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;  storageClassName: nfs
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;  nfs:
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     path: /data/&lt;span&gt;nfs2
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     server: &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.113&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; ---
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;kind: PersistentVolume
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;   name: pv-&lt;span&gt;nfs3
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;  capacity:
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    storage: 5Gi
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;  accessModes:
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     -&lt;span&gt; ReadWriteOnce
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;  persistentVolumeReclaimPolicy: Recycle
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;  storageClassName: slow
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;  nfs:
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     path: /data/&lt;span&gt;nfs3
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     server: &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.113&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; ---
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;kind: PersistentVolume
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;   name: pv-&lt;span&gt;nfs4
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;  capacity:
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    storage: 10Gi
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;  accessModes:
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     -&lt;span&gt; ReadWriteOnce
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;  persistentVolumeReclaimPolicy: Recycle
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;  storageClassName: nfs
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;  nfs:
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;     path: /data/&lt;span&gt;nfs4
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;     server: &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.113&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt; ---
&lt;span&gt;64&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;kind: PersistentVolume
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;   name: pv-&lt;span&gt;nfs5
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;  capacity:
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    storage: 5Gi
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;  accessModes:
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;     -&lt;span&gt; ReadWriteMany
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;  persistentVolumeReclaimPolicy: Recycle
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;  storageClassName: nfs
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;  nfs:
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;     path: /data/&lt;span&gt;nfs5
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;     server: &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.113&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt; ---
&lt;span&gt;79&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;kind: PersistentVolume
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;   name: pv-&lt;span&gt;nfs6
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; &lt;span&gt;  capacity:
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; &lt;span&gt;    storage: 5Gi
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; &lt;span&gt;  accessModes:
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt;     -&lt;span&gt; ReadWriteOnce
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; &lt;span&gt;  persistentVolumeReclaimPolicy: Recycle
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt; &lt;span&gt;  storageClassName: nfs
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt; &lt;span&gt;  nfs:
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt;     path: /data/&lt;span&gt;nfs6
&lt;/span&gt;&lt;span&gt;92&lt;/span&gt;     server: &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.113&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动PV，并查看状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl apply -&lt;span&gt;f pv.yaml 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; persistentvolume/pv-&lt;span&gt;nfs1 created
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; persistentvolume/pv-&lt;span&gt;nfs2 created
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; persistentvolume/pv-&lt;span&gt;nfs3 created
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; persistentvolume/pv-&lt;span&gt;nfs4 created
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; persistentvolume/pv-&lt;span&gt;nfs5 created
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; persistentvolume/pv-&lt;span&gt;nfs6 created
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; [root@k8s-master pv-&lt;span&gt;pvc]# 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get pv -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE   VOLUMEMODE
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; pv-&lt;span&gt;nfs1   1Gi        RWO            Recycle          Available           nfs                     11s   Filesystem
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; pv-&lt;span&gt;nfs2   3Gi        RWO            Recycle          Available           nfs                     11s   Filesystem
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; pv-&lt;span&gt;nfs3   5Gi        RWO            Recycle          Available           slow                    11s   Filesystem
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; pv-&lt;span&gt;nfs4   10Gi       RWO            Recycle          Available           nfs                     11s   Filesystem
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; pv-&lt;span&gt;nfs5   5Gi        RWX            Recycle          Available           nfs                     11s   Filesystem
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; pv-nfs6   5Gi        RWO            Recycle          Available           nfs                     11s   Filesystem
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;StatefulSet创建并使用PVC&quot;&gt;StatefulSet创建并使用PVC&lt;/h2&gt;
&lt;p&gt;StatefulSet 需要 headless 服务 来负责 Pod 的网络标识，因此需要负责创建此服务。&lt;/p&gt;
&lt;p&gt;yaml文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master pv-pvc]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/pv-&lt;span&gt;pvc
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master pv-pvc]# &lt;span&gt;cat&lt;/span&gt; sts-pod-&lt;span&gt;pvc.yaml 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;kind: Service
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  name: nginx
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;  labels:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    app: nginx
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  ports:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;   - port: &lt;span&gt;80&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    name: web
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;  clusterIP: None
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;  selector:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    app: nginx
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; ---
&lt;span&gt;18&lt;/span&gt; apiVersion: apps/&lt;span&gt;v1
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;kind: StatefulSet
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;  name: web
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;  selector:
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    matchLabels:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;      app: nginx # has to match .spec.template.metadata.labels
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;   serviceName: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;   replicas: &lt;span&gt;3&lt;/span&gt; # by default is &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;  template:
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    metadata:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;      labels:
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        app: nginx # has to match .spec.selector.matchLabels
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    spec:
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;       terminationGracePeriodSeconds: &lt;span&gt;100&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;      containers:
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;       -&lt;span&gt; name: nginx
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         image: registry.cn-beijing.aliyuncs.com/google_registry/nginx:&lt;span&gt;1.17&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        ports:
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         - containerPort: &lt;span&gt;80&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;          name: web
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        volumeMounts:
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         -&lt;span&gt; name: www
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;           mountPath: /usr/share/nginx/&lt;span&gt;html
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;  volumeClaimTemplates:
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;   -&lt;span&gt; metadata:
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;      name: www
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    spec:
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;       accessModes: [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReadWriteOnce&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;       storageClassName: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nfs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;      resources:
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        requests:
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;           storage: 3Gi
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动pod并查看状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl apply -f sts-pod-&lt;span&gt;pvc.yaml 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; service/&lt;span&gt;nginx created
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; statefulset.apps/&lt;span&gt;web created
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@k8s-master pv-&lt;span&gt;pvc]# 
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get svc -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; NAME         TYPE        CLUSTER-IP   EXTERNAL-&lt;span&gt;IP   PORT(S)   AGE   SELECTOR
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; kubernetes   ClusterIP   &lt;span&gt;10.96&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;    &amp;lt;none&amp;gt;        &lt;span&gt;443&lt;/span&gt;/TCP   24d   &amp;lt;none&amp;gt;
&lt;span&gt; 8&lt;/span&gt; nginx        ClusterIP   None         &amp;lt;none&amp;gt;        &lt;span&gt;80&lt;/span&gt;/TCP    17s   app=&lt;span&gt;nginx
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; [root@k8s-master pv-&lt;span&gt;pvc]# 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get sts -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;NAME   READY   AGE   CONTAINERS   IMAGES
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; web    &lt;span&gt;3&lt;/span&gt;/&lt;span&gt;3&lt;/span&gt;     82m   nginx        registry.cn-beijing.aliyuncs.com/google_registry/nginx:&lt;span&gt;1.17&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; [root@k8s-master pv-&lt;span&gt;pvc]# 
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get pod -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;NAME    READY   STATUS              RESTARTS   AGE   IP       NODE         NOMINATED NODE   READINESS GATES
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; web-&lt;span&gt;0&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     ContainerCreating   &lt;span&gt;0&lt;/span&gt;          3s    &amp;lt;none&amp;gt;   k8s-node01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;span&gt;17&lt;/span&gt; [root@k8s-master pv-&lt;span&gt;pvc]# 
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get pod -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;NAME    READY   STATUS              RESTARTS   AGE   IP             NODE         NOMINATED NODE   READINESS GATES
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; web-&lt;span&gt;0&lt;/span&gt;   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running             &lt;span&gt;0&lt;/span&gt;          11s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;4.135&lt;/span&gt;   k8s-node01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;span&gt;21&lt;/span&gt; web-&lt;span&gt;1&lt;/span&gt;   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running             &lt;span&gt;0&lt;/span&gt;          6s    &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.171&lt;/span&gt;   k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;span&gt;22&lt;/span&gt; web-&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     ContainerCreating   &lt;span&gt;0&lt;/span&gt;          3s    &amp;lt;none&amp;gt;         k8s-node01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;span&gt;23&lt;/span&gt; [root@k8s-master pv-&lt;span&gt;pvc]# 
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get pod -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;NAME    READY   STATUS    RESTARTS   AGE     IP             NODE         NOMINATED NODE   READINESS GATES
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; web-&lt;span&gt;0&lt;/span&gt;   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          8m23s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.174&lt;/span&gt;   k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;span&gt;27&lt;/span&gt; web-&lt;span&gt;1&lt;/span&gt;   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          8m20s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;4.139&lt;/span&gt;   k8s-node01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;span&gt;28&lt;/span&gt; web-&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          8m17s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.175&lt;/span&gt;   k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;PV和PVC状态信息查看&quot;&gt;PV和PVC状态信息查看&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;### 注意挂载顺序
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get pv -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM               STORAGECLASS   REASON   AGE    VOLUMEMODE
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; pv-&lt;span&gt;nfs1   1Gi        RWO            Recycle          Available                       nfs                     116s   Filesystem
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; pv-nfs2   3Gi        RWO            Recycle          Bound       default/www-web-&lt;span&gt;0&lt;/span&gt;&lt;span&gt;   nfs                     116s   Filesystem
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; pv-&lt;span&gt;nfs3   5Gi        RWO            Recycle          Available                       slow                    116s   Filesystem
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; pv-nfs4   10Gi       RWO            Recycle          Bound       default/www-web-&lt;span&gt;2&lt;/span&gt;&lt;span&gt;   nfs                     116s   Filesystem
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; pv-&lt;span&gt;nfs5   5Gi        RWX            Recycle          Available                       nfs                     116s   Filesystem
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; pv-nfs6   5Gi        RWO            Recycle          Bound       default/www-web-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;   nfs                     116s   Filesystem
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; [root@k8s-master pv-&lt;span&gt;pvc]# 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get pvc -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;NAME        STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE   VOLUMEMODE
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; www-web-&lt;span&gt;0&lt;/span&gt;   Bound    pv-&lt;span&gt;nfs2   3Gi        RWO            nfs            87s   Filesystem
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; www-web-&lt;span&gt;1&lt;/span&gt;   Bound    pv-&lt;span&gt;nfs6   5Gi        RWO            nfs            84s   Filesystem
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; www-web-&lt;span&gt;2&lt;/span&gt;   Bound    pv-nfs4   10Gi       RWO            nfs            82s   Filesystem
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;PVC与PV绑定时会根据storageClassName（存储类名称）和accessModes（访问模式）判断哪些PV符合绑定需求。然后再根据存储量大小判断，首先存PV储量必须大于或等于PVC声明量；其次就是PV存储量越接近PVC声明量，那么优先级就越高（PV量越小优先级越高）。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;curl访问验证&quot;&gt;curl访问验证&lt;/h2&gt;
&lt;p&gt;在NFS服务端k8s-node03（172.16.1.113）对应NFS共享目录创建文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pv-nfs2===&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt; /data/nfs2/&lt;span&gt;index.html
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pv-nfs4+++&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt; /data/nfs4/&lt;span&gt;index.html
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pv-nfs6---&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt; /data/nfs6/index.html
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;curl访问pod&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get pod -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;NAME    READY   STATUS    RESTARTS   AGE     IP             NODE         NOMINATED NODE   READINESS GATES
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; web-&lt;span&gt;0&lt;/span&gt;   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          8m23s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.174&lt;/span&gt;   k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;span&gt; 4&lt;/span&gt; web-&lt;span&gt;1&lt;/span&gt;   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          8m20s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;4.139&lt;/span&gt;   k8s-node01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;span&gt; 5&lt;/span&gt; web-&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          8m17s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.175&lt;/span&gt;   k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;span&gt; 6&lt;/span&gt; [root@k8s-master pv-&lt;span&gt;pvc]# 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; [root@k8s-master pv-pvc]# curl &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.174&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; pv-nfs2===
&lt;span&gt; 9&lt;/span&gt; [root@k8s-master pv-&lt;span&gt;pvc]# 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; [root@k8s-master pv-pvc]# curl &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;4.139&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; pv-nfs6---
&lt;span&gt;12&lt;/span&gt; [root@k8s-master pv-&lt;span&gt;pvc]# 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; [root@k8s-master pv-pvc]# curl &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.175&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; pv-nfs4+++
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即使删除其中一个pod，pod被拉起来后也能正常访问。&lt;/p&gt;

&lt;h2 id=&quot;删除sts并回收PV&quot;&gt;删除sts并回收PV&lt;/h2&gt;
&lt;p&gt;删除statefulset&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl delete -f sts-pod-&lt;span&gt;pvc.yaml 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; service &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; deleted
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; statefulset.apps &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;web&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; deleted
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; [root@k8s-master pv-&lt;span&gt;pvc]# 
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get pod -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; No resources found &lt;span&gt;in&lt;/span&gt; default namespace.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;查看PVC和PV，并删除PVC&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get pvc -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;NAME        STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE   VOLUMEMODE
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; www-web-&lt;span&gt;0&lt;/span&gt;   Bound    pv-&lt;span&gt;nfs2   3Gi        RWO            nfs            24m   Filesystem
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; www-web-&lt;span&gt;1&lt;/span&gt;   Bound    pv-&lt;span&gt;nfs6   5Gi        RWO            nfs            24m   Filesystem
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; www-web-&lt;span&gt;2&lt;/span&gt;   Bound    pv-&lt;span&gt;nfs4   10Gi       RWO            nfs            24m   Filesystem
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; [root@k8s-master pv-&lt;span&gt;pvc]# 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get pv -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM               STORAGECLASS   REASON   AGE   VOLUMEMODE
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; pv-&lt;span&gt;nfs1   1Gi        RWO            Recycle          Available                       nfs                     26m   Filesystem
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; pv-nfs2   3Gi        RWO            Recycle          Bound       default/www-web-&lt;span&gt;0&lt;/span&gt;&lt;span&gt;   nfs                     26m   Filesystem
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; pv-&lt;span&gt;nfs3   5Gi        RWO            Recycle          Available                       slow                    26m   Filesystem
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; pv-nfs4   10Gi       RWO            Recycle          Bound       default/www-web-&lt;span&gt;2&lt;/span&gt;&lt;span&gt;   nfs                     26m   Filesystem
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; pv-&lt;span&gt;nfs5   5Gi        RWX            Recycle          Available                       nfs                     26m   Filesystem
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; pv-nfs6   5Gi        RWO            Recycle          Bound       default/www-web-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;   nfs                     26m   Filesystem
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; [root@k8s-master pv-&lt;span&gt;pvc]# 
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl delete pvc www-web-&lt;span&gt;0&lt;/span&gt; www-web-&lt;span&gt;1&lt;/span&gt; www-web-&lt;span&gt;2&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; persistentvolumeclaim &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;www-web-0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; deleted
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; persistentvolumeclaim &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;www-web-1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; deleted
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; persistentvolumeclaim &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;www-web-2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; deleted
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;回收PV&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;### 由下可见，还有一个pv虽然声明被删除，但资源尚未回收；我们只需等一会儿即可
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get pv -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM               STORAGECLASS   REASON   AGE   VOLUMEMODE
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; pv-&lt;span&gt;nfs1   1Gi        RWO            Recycle          Available                       nfs                     90m   Filesystem
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; pv-&lt;span&gt;nfs2   3Gi        RWO            Recycle          Available                       nfs                     90m   Filesystem
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; pv-&lt;span&gt;nfs3   5Gi        RWO            Recycle          Available                       slow                    90m   Filesystem
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; pv-&lt;span&gt;nfs4   10Gi       RWO            Recycle          Available                       nfs                     90m   Filesystem
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; pv-&lt;span&gt;nfs5   5Gi        RWX            Recycle          Available                       nfs                     90m   Filesystem
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; pv-nfs6   5Gi        RWO            Recycle          Released    default/www-web-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;   nfs                     90m   Filesystem
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; [root@k8s-master pv-&lt;span&gt;pvc]# 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;### 可见该pv还有引用
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get pv pv-nfs6 -&lt;span&gt;o yaml
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;kind: PersistentVolume
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;………………
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;  accessModes:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;   -&lt;span&gt; ReadWriteOnce
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;  capacity:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    storage: 5Gi
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;  ################### 可见仍然在被使用
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;  claimRef:
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    apiVersion: v1
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    kind: PersistentVolumeClaim
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     name: www-web-&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    namespace: default
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     resourceVersion: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1179810&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     uid: d4d8943c-6b16-45a5-8ffc-&lt;span&gt;691fcefc4f88
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;  ###################
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;  nfs:
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     path: /data/&lt;span&gt;nfs6
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     server: &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.113&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;  persistentVolumeReclaimPolicy: Recycle
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;  storageClassName: nfs
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;  volumeMode: Filesystem
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;status:
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;   phase: Released
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在NFS服务端查看结果如下，可见/data/nfs6资源尚未回收，而/data/nfs2/、/data/nfs4/资源已经被回收。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-node03 ~]# tree /data/
&lt;span&gt; 2&lt;/span&gt; /data/
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;├── nfs1
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;├── nfs2
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;├── nfs3
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;├── nfs4
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;├── nfs5
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;└── nfs6
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    └── index.html
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;5&lt;/span&gt; directories, &lt;span&gt;2&lt;/span&gt; files
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;针对这种情况有两种处理方式：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1、我们什么也不用做，等一会儿集群就能回收该资源&lt;/p&gt;
&lt;p&gt;2、我们进行手动回收，操作如下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;手动回收资源&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl edit pv pv-&lt;span&gt;nfs6
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;### 去掉claimRef: 部分
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;### 再次查看pv信息
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@k8s-master pv-pvc]# kubectl get pv -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE    VOLUMEMODE
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; pv-&lt;span&gt;nfs1   1Gi        RWO            Recycle          Available           nfs                     108m   Filesystem
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; pv-&lt;span&gt;nfs2   3Gi        RWO            Recycle          Available           nfs                     108m   Filesystem
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; pv-&lt;span&gt;nfs3   5Gi        RWO            Recycle          Available           slow                    108m   Filesystem
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; pv-&lt;span&gt;nfs4   10Gi       RWO            Recycle          Available           nfs                     108m   Filesystem
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; pv-&lt;span&gt;nfs5   5Gi        RWX            Recycle          Available           nfs                     108m   Filesystem
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; pv-nfs6   5Gi        RWO            Recycle          Available           nfs                     108m   Filesystem
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202010/1395193-20201023001556996-721328438.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;之后到NFS服务端操作，清除该pv下的数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@k8s-node03 ~]# &lt;span&gt;rm&lt;/span&gt; -fr /data/nfs6&lt;span&gt;/*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到此，手动回收资源操作成功！&lt;/p&gt;


&lt;p&gt;1、匹配StatefulSet的Pod name(网络标识)的模式为：&lt;code&gt;$(statefulset名称)-$(序号)&lt;/code&gt;，比如StatefulSet名称为web，副本数为3。则为：web-0、web-1、web-2&lt;/p&gt;
&lt;p&gt;2、StatefulSet为每个Pod副本创建了一个DNS域名，这个域名的格式为：&lt;code&gt;$(podname).(headless service name)&lt;/code&gt;，也就意味着服务之间是通过Pod域名来通信而非Pod IP。当Pod所在Node发生故障时，Pod会被漂移到其他Node上，Pod IP会发生改变，但Pod域名不会变化&lt;/p&gt;
&lt;p&gt;3、StatefulSet使用Headless服务来控制Pod的域名，这个Headless服务域名的为：&lt;code&gt;$(service name).$(namespace).svc.cluster.local&lt;/code&gt;，其中 cluster.local 指定的集群的域名&lt;/p&gt;
&lt;p&gt;4、根据volumeClaimTemplates，为每个Pod创建一个PVC，PVC的命令规则为：&lt;code&gt;$(volumeClaimTemplates name)-$(pod name)&lt;/code&gt;，比如volumeClaimTemplates为www，pod name为web-0、web-1、web-2；那么创建出来的PVC为：www-web-0、www-web-1、www-web-2&lt;/p&gt;
&lt;p&gt;5、删除Pod不会删除对应的PVC，手动删除PVC将自动释放PV。&lt;/p&gt;


&lt;p&gt;1、&lt;a href=&quot;https://www.cnblogs.com/zhanglianghhh/p/9230045.html&quot; target=&quot;_blank&quot;&gt;NFS 服务搭建与配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;https://www.cnblogs.com/zhanglianghhh/p/13568866.html&quot; target=&quot;_blank&quot;&gt;Kubernetes K8S 资源控制器StatefulSets详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完毕！&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;———END———&lt;br/&gt;如果觉得不错就关注下呗 (-^O^-) ！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202010/1395193-20201023001654577-1876437144.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 22 Oct 2020 16:18:00 +0000</pubDate>
<dc:creator>踏歌行666</dc:creator>
<og:description>K8S之存储PV-PVC概述与说明，并详解常用PV-PVC示例</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zhanglianghhh/p/13861817.html</dc:identifier>
</item>
<item>
<title>如果只推荐一本 Python 书，我要 Pick 它！ - 豌豆花下猫</title>
<link>http://www.cnblogs.com/pythonista/p/13861522.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pythonista/p/13861522.html</guid>
<description>&lt;p&gt;今年二月初，我偶然看到了一条推特：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1gdz5p13qd6j20dv0i1wob.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《流畅的Python》一书的作者发布了一条激动人心的消息：他正在写作第二版！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果要票选最佳的 Python 进阶类书目，这本书肯定会是得票率最高的书籍之一。我在最早写“Python猫荐书系列”时，就想推荐它，但又觉得好东西应该留到最后，所以一直拖到了现在……&lt;/p&gt;
&lt;p&gt;如果你读过它，肯定也会认为它值得推荐；如果你没有，那请往下阅读，看我的介绍能否打动你把它列为必读书目吧~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1gdz5pe7e8wj20s10c7ju0.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这本书的英文名是《Fluent Python》，在 2015 年 8 月出版。两年后，国内的图灵教育出品了译本，出版时间是 2017 年 5 月，获得豆瓣 9.4 高分。（图书翻译/出版真是个漫长的过程啊）&lt;/p&gt;
&lt;p&gt;作者 Luciano Ramalho 是个巴西人、资深的 Python 程序员/演讲者、PSF（Python软件基金会）成员。书籍的技术审校与推荐人囊括了圈内的一众大咖。&lt;/p&gt;
&lt;p&gt;此书一出，大受圈内好评，各国出版社纷纷引进版权，目前至少已有 9 种语言版本（来数数你认识几种？）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1gjsbk0631vj20m80go0xc.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;PS：图片出自@fluentpython官推，简体中文版最薄，巧合占据C位。根据图灵教育统计，简体中文版销量超过4万册，预计在2020年能超越英文版的销量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么，这本书到底写了些什么呢？又有哪些特别之处呢？&lt;/p&gt;
&lt;p&gt;全书内容充实，除去前言、附录和术语表这些内容，共分为六个部分 21 章节。我将核心章节内容制作了一份思维导图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1gjtt78czv8j21cr0hk77f.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（在&lt;code&gt;Python猫&lt;/code&gt;公众号回复『&lt;strong&gt;流畅&lt;/strong&gt;』，有完整的高清原图）&lt;/p&gt;
&lt;p&gt;以上是主要章节的思维导图，图中的数字是折叠起来的分支数。&lt;/p&gt;
&lt;p&gt;下面给大家看看部分的细节图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1gjtt1n4kmnj20qg0p10us.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1gjtt2u2sg2j20pm0ke404.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1gjtt3363ivj20of0o040f.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1gjtt3biuiuj20og0p2wgs.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;原图太大，展示不下。在&lt;code&gt;Python猫&lt;/code&gt;公众号内回复『&lt;strong&gt;流畅&lt;/strong&gt;』，有完整的高清原图、PDF 版本和 MarkDown 版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从章节上可以看出，这本书主要面向中高级的开发者。它基本不涉及入门级内容，反而聚焦在数据模型、数据结构、函数对象、面向对象、控制流程与元编程等话题上。&lt;/p&gt;
&lt;p&gt;打开书本第一章，作者用寥寥十几行 Python 代码，就徒手实现了一副扑克牌：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;import collections

Card = collections.namedtuple('Card', ['rank', 'suit'])


class FrenchDeck:
    ranks = [str(n) for n in range(2, 11)] + list('JQKA')
    suits = 'spades diamonds clubs hearts'.split()

    def __init__(self):
        self._cards = [Card(rank, suit) for suit in self.suits for rank in self.ranks]

    def __len__(self):
        return len(self._cards)

    def __getitem__(self, position):
        return self._cards[position]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后，直接就点出了全书最关注的核心话题：&lt;strong&gt;由各种特殊方法构成的数据模型。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;特殊方法（special method）是__xxx__() 这种以前后双下划线命名的东西，通常又被称为魔术方法（magic method）和双下方法（dunder method），是 Python 独有的设计。&lt;/p&gt;
&lt;p&gt;数据模型（data model）无疑是 Python 语言的关键核心，是得以形成所谓 Python 风格（pythonic）的基石。Python 中一切皆对象，而数据模型则是这些对象的接口规范，正是因为它，Python 得以获得极强的行为一致性。&lt;/p&gt;
&lt;p&gt;《流畅的Python》以数据模型为始，定下了全文的风格基调，&lt;strong&gt;即关注 Python 对象的构造以及语言内部的特性细节，目的是让读者写出更地道、简洁高效、可读易用的代码。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1gjtrfa57k9j20k00dc3ze.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;《流畅的Python》作者与中文版合影&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接着，它介绍了 Python 中一些内置类型的特性（序列类型、映射类型、文本和字节类型），介绍作为特殊对象的函数以及一般性对象的用法，介绍控制流程（迭代器、生成器、上下文管理器、协程和并发编程），最后深入到素有黑魔法之称的元编程（描述符和元类）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1gjtt3kc99mj20t20n9gng.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全书 600 多页，洋洋洒洒，旁征博引，内容充实到让人应接不暇，让人时不时就产生一种“又学到了新知识”的感觉，以及一种“哦我想进一步学习 xxx”的求知欲望。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多读过书的同学会有一个同感：它的“延伸阅读/杂谈”并不是闲笔，反而有些内容比正文更精彩，作者在此展示了他丰富的知识面（官方文档、社区典故、语法演进、文章视频、开源项目、语言差异等等），每一章都值得挖掘阅读。目前没有任何一本 Python 书籍能在这方面与它匹敌。&lt;/p&gt;
&lt;p&gt;我推荐大家找到自己感兴趣的章节进行阅读，另外，有人做了非常不错的读书笔记（都挺长的），我放在这里：&lt;/p&gt;
&lt;blockquote readability=&quot;1.9416058394161&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hongweipeng.com/index.php/archives/1345/&quot;&gt;http://www.hongweipeng.com/index.php/archives/1345&lt;/a&gt; （by hongweipeng）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://frankorz.com/2017/07/01/fluent-python-note/&quot;&gt;http://frankorz.com/2017/07/01/fluent-python-note&lt;/a&gt; （by 猫冬）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《流畅的Python》第一版基于当时最新的 Python 3.4。这些年来，Python 不断丰富自己，既正式宣告了 Python 2 版本的终结，又快速地演进到了最新的 3.9 版本。&lt;/p&gt;
&lt;p&gt;但是，由于作者关注的是 Python 的核心概念，探讨的是基本不会变化的特性，因此倒不必太担忧内容过时，它仍是一本非常推荐购买和阅读参考的书籍。&lt;/p&gt;
&lt;p&gt;我非常关心它的第二版，但是也知道，写作需要时间，英文出版、中文翻译和中文出版也都需要时间，所以我们就一起静候佳音吧。&lt;/p&gt;
</description>
<pubDate>Thu, 22 Oct 2020 14:46:00 +0000</pubDate>
<dc:creator>豌豆花下猫</dc:creator>
<og:description>今年二月初，我偶然看到了一条推特： 《流畅的Python》一书的作者发布了一条激动人心的消息：他正在写作第二版！ 如果要票选最佳的 Python 进阶类书目，这本书肯定会是得票率最高的书籍之一。我在最</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/pythonista/p/13861522.html</dc:identifier>
</item>
<item>
<title>一文读懂线程池的工作原理（故事白话文） - Jay_huaxiao</title>
<link>http://www.cnblogs.com/jay-huaxiao/p/13861438.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jay-huaxiao/p/13861438.html</guid>
<description>&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;前言&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文以程序员做需求的例子，比喻线程池的工作过程。以故事白话的方式展开，跟大家阐述线程池工作原理，以方便大家更好理解线程池，谢谢阅读哈~&lt;/p&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;什么是线程池？&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;什么是核心线程？&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;什么是阻塞队列？&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;什么是非核心线程？&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;什么是空闲时间？&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;什么是饱和策略？&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;线程池工作原理流程图&amp;amp;源码概览&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;github地址，感谢每一颗Star&lt;/p&gt;
&lt;blockquote class=&quot;multiquote-1&quot; data-tool=&quot;mdnice编辑器&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;https://github.com/whx123/JavaHome&lt;/p&gt;
&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;公众号:&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;捡田螺的小男孩&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;什么是线程池？&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;小田螺&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt; 勤勤恳恳，任劳任怨，夜以继日地工作，终于有一天，他晋升为公司的主管，负责公司日常业务。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一天，老板找到了小田螺，“我们公司员工越来越多了，我想搞个&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;员工管理系统&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，你那边安排一下哈，要在一个月后完成。” 小田螺拍拍胸口没问题！&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为当前公司还没有程序员，所以小田螺快马加鞭打开&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;猪八戒网&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，提交员工管理系统需求，等待不久，&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;开发者（名字，线程A）&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt; 接单，谈好合同，开始开发，系统交付...一系列流程并且一个月过后，一个五脏俱全的员工管理系统终于完成了...老板对此大加赞赏~&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;过了不久，老板再次发话，“公司越来越多人迟到了，我们再搞个&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;考勤系统&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;吧!&quot;小田螺接到任务，马上又开始上猪八戒网，提需求找人开发，这次来了&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;线程B接单&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;......&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;逝者如斯，月底了，老板又提出开发个薪酬系统需求...小田螺听了头皮发麻，one day day的，重复去网上找人开发！“为了节省成本，不如我们雇佣几个程序员(线程a,b,c)，成立自己的IT技术部门吧！我们就管IT部门叫&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;线程池&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;吧!”老板听了，一拍即合!!!&lt;/p&gt;
&lt;blockquote class=&quot;multiquote-1&quot; data-tool=&quot;mdnice编辑器&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;线程池就是管理线程的池子，当有任务要处理时，不用频繁创建新线程，而是从池子拿个线程出来处理。当任务执行完，线程并不会被销毁，而是在等待下一个任务。&lt;/p&gt;
&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;什么是核心线程？&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;线程池&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;IT部门成立后，雇佣了几个与公司有正式合同关系的员工a，b，c，&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;小田螺&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;管他们几个正式员工做&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;核心线程&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;。当老板提一个需求过来，小田螺就把需求分配给&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;手上没活干&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;的线程处理...&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;什么是阻塞队列？&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一天早上，老板睡眼惺忪。来到公司后，一口气提了&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;四个需求&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，a，b,c 按顺领完任务后，发现还剩余一个需求任务。这个怎么安排呢？难道又去&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;猪八戒兼职网&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;找人嘛？成立了&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;线程池IT部门&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，还去找人（线程干活），会被人笑落大牙的！&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;聪明的小田螺想到一个好办法，我们可以搞个DPMS需求池，把还没分配的需求，放进待完成的DPMS需求池里面吧，等到a，b，c谁先干完活，再把这个任务领走。这个DPMS需求池，我们给它取名&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;阻塞队列&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，英文名叫&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;WorkQueue&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;吧！&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;什么是非核心线程？&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;又在一个晴空万里的午后，老板喝了一杯咖啡，闲来没事，就跑去&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;阻塞队列&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;（DPMS需求池）看看，一看就傻帽了！！需求池堆积了几十个需求，排期都是满满的了。老板马上叫&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;小田螺进来办公室&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，以商量如何处理这些需求任务。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“要不，我们雇佣多几个员工（搞多几个&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;核心线程&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;）？” “不行不行，公司财务&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;开销&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;有点大！”&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“要不然，我们要求业务提少点任务需求？（&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;请求少点&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;）” “你是不是傻，请求少点，不是自断财路嘛？你回家想想办法先吧！！”老板放大了他的嗓门~&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小田螺回家闭目让神，每天早早就睡觉，两耳不闻窗外事...终于有一天，在一个梦香里，他想到了一个好办法。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“老板，我们可以去别的公司（&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;外包公司&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;）雇佣几个员工（假设名字为d,e,f,g）一段时间，让它们来做&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;DPMS需求池（阻塞队列）&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt; 里面的需求。等到做完需求，再派他们回去就好啦。” 老板一听就乐了，这个方案好，心里美滋滋：&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;需求的活有人干了，公司财务又省钱，两全其美呀&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;~ 这几个派遣来的外包员工（d,e,f,g），我们就把它叫做&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;非核心线程&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;吧。&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;什么是空闲时间？&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自从来了d,e,f,g外包员工（&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;非核心线程&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;），老板长舒一口气，这么多活，终于有人干了。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是呢，又有一天，到了7点所谓的下班时间，老板走出办公室，发现&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;线程池&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;IT部门的员工，都走得七七八八了。心里一怒：&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;这帮粉肠，怎么一到下班时间就跑，工作这么不饱和了&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;？他随手点进DPMS需求池，才发现，原来需求都被做完了。。。还有一堆外包同事（非核心线程）要发工资呢，这波亏大了~&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二天，小田螺被&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;秘密&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;叫进了老板办公室，既然DPMS需求池都已经没需求了。我们准备派外包同事（非核心线程）回去吧？但是呢一般，需求一没有，就马上让他们回去（&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;线程回收&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;），如果需求一下子又来，就有点hold不住了...&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“要不酱紫，我们等需求池空的时候，隔个15天还是10天，再让外包同事（&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;非核心线程&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;）回去吧？” 这个定义的15天或者10天，就是&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;线程空闲存活时间&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;啦&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;什么是饱和策略？&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在临近双11的时候，不仅老板提了良多需求，新来的运营小姐姐们，也提了好多好多的需求。新需求如源头活水，滚滚的来~&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先呢，&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;线程池&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;IT部门a，b，c三个正式员工（核心线程）都忙于处理需求（&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;请求&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;），接着，DPMS需求池（&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;阻塞队列&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;）也被挤满了，最后呢，连d,e,f,g外包同事（&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;非核心线程&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;）也忙得不可开交。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候，需求还是做不完，怎么办呢？双11赶着上线呢？小田螺愁眉苦脸，从&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;潮起愁到潮落&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;...&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没办法了，只能动用&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;饱和策略&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;啦。比如&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;丢弃需求任务&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;？&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;抛异常，告诉老板别加需求了&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;？&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;丢弃需求池最老的需求任务&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;？还是&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;交给提需求的人自己处理&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;？&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后老板决定，&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;拒绝再提新的需求&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，于是&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;线程池&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;IT部门还是正常运行~&lt;/p&gt;
&lt;blockquote class=&quot;multiquote-1&quot; data-tool=&quot;mdnice编辑器&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;线城池的饱和策略事件，主要有四种类型&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;section&gt;AbortPolicy(抛出一个异常，默认的)&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;DiscardPolicy(新提交的任务直接被抛弃)&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;DiscardOldestPolicy（丢弃队列里最老的任务，将当前这个任务继续提交给线程池）&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;CallerRunsPolicy（交给线程池调用所在的线程进行处理，即将某些任务回退到调用者)&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;线程池工作原理流程图 &amp;amp; 源码概览&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;故事讲完啦，再复习下线程池工作流程图吧~ &lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/06a8e2ba-6dda-4092-bd99-85138ad52103.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=5CZV%252FfTuk0UOafxdj7Z5wyra8uw%253D&amp;amp;Expires=1603386567&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有兴趣的朋友，源码也看下吧~&lt;/p&gt;
&lt;pre class=&quot;custom&quot; data-tool=&quot;mdnice编辑器&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;command&lt;/span&gt; == null)&lt;br/&gt;throw new NullPointerException();&lt;br/&gt;int c = ctl.get();&lt;br/&gt;//判断当前活跃线程数是否小于corePoolSize&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (workerCountOf(c) &amp;lt; corePoolSize) {&lt;br/&gt;//如果小于，则调用addWorker创建线程执行任务&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (addWorker(&lt;span class=&quot;hljs-built_in&quot;&gt;command&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt;;&lt;br/&gt;c = ctl.get();&lt;br/&gt;}&lt;br/&gt;//如果大于等于corePoolSize，则将任务添加到workQueue队列。&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isRunning(c) &amp;amp;&amp;amp; workQueue.offer(&lt;span class=&quot;hljs-built_in&quot;&gt;command&lt;/span&gt;)) {&lt;br/&gt;int recheck = ctl.get();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (! isRunning(recheck) &amp;amp;&amp;amp; remove(&lt;span class=&quot;hljs-built_in&quot;&gt;command&lt;/span&gt;))&lt;br/&gt;reject(&lt;span class=&quot;hljs-built_in&quot;&gt;command&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (workerCountOf(recheck) == 0)&lt;br/&gt;addWorker(null, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;//如果放入workQueue队列失败，则创建非核心线程执行任务    &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!addWorker(&lt;span class=&quot;hljs-built_in&quot;&gt;command&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;))&lt;br/&gt;//（如果这时创建线程失败(当前线程数大于等于maximumPoolSize时))&lt;br/&gt;调用reject拒绝接受任务&lt;br/&gt;reject(&lt;span class=&quot;hljs-built_in&quot;&gt;command&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;公众号&lt;/span&gt;&lt;/h3&gt;
&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/6f59856a-3700-49d5-97ad-7a23740cb68a.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=8ri4m8OjqC8L%252BTDO%252B%252FvqjoOPgYM%253D&amp;amp;Expires=1603387341&quot; alt=&quot;&quot;/&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;欢迎大家关注，持续推出干货~&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;后台回复pdf，领取电子书&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Thu, 22 Oct 2020 14:31:00 +0000</pubDate>
<dc:creator>Jay_huaxiao</dc:creator>
<og:description>前言 本文以程序员做需求的例子，比喻线程池的工作过程。以故事白话的方式展开，跟大家阐述线程池工作原理，以方便大家更好理解线程池，谢谢阅读哈~ 什么是线程池？什么是核心线程？什么是阻塞队列？什么是非核心</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/jay-huaxiao/p/13861438.html</dc:identifier>
</item>
</channel>
</rss>