<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Pinpoint 设置微信或者钉钉预警 - 自由早晚乱余生</title>
<link>http://www.cnblogs.com/operationhome/p/14016502.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/operationhome/p/14016502.html</guid>
<description>&lt;blockquote readability=&quot;6.2864077669903&quot;&gt;
&lt;p&gt;本文基于 Pinpoint 2.1.0 版本 本文大部分内容来自：&lt;a href=&quot;https://mp.weixin.qq.com/s/c8NOhRxAaAi_LmnxM9Eysw&quot;&gt;侠梦的开发笔记&lt;/a&gt; ，但是原文的版本和我的不一致，放在2.1.0是跑不起来的，但是大概逻辑和思路基本一致。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一、接入预警大概思路&quot;&gt;一、接入预警大概思路&lt;/h2&gt;
&lt;blockquote readability=&quot;1.6666666666667&quot;&gt;
&lt;p&gt;官方预警相关文档： &lt;a href=&quot;https://pinpoint-apm.github.io/pinpoint/2.1.0/alarm.html&quot;&gt;https://pinpoint-apm.github.io/pinpoint/2.1.0/alarm.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在pinpoint 2.X中引入了默认的告警实现类&lt;code&gt;DefaultAlarmMessageSender&lt;/code&gt;。所以我们只需要实现短信发送的接口即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xicWYTSICzRtXKNOZAcu59nu2xAxD3D2WddvKQx9uanNwOTSsFAK15mRsiaJwh2c7pnpF7jE95dqOX6DWianNXY9A/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上述类封装了发送邮件和短信的方法，目前短信方法的实现仍是空，不过打印了一句话。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; logger.info(&quot;can not send sms message.&quot;);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然而，邮件发送是有一个实现类来帮我们做告警邮件发送的。他就是：SpringSmtpMailSender。&lt;/p&gt;
&lt;p&gt;我们接入预警的大概思路就是实现短信发送，然后当短信发送的时候，调用我们写的模块，然后实现微信/钉钉预警。 微信钉钉预警都是通过一个接口给到我们进行调用即可。下面我就说说微信预警(钉钉预警一致)。&lt;/p&gt;
&lt;p&gt;我们接入微信预警分为三大块：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;加入 微信预警模块&lt;/li&gt;
&lt;li&gt;将调用 短信发送改成调用 微信预警&lt;/li&gt;
&lt;li&gt;增加一个 bean 引入配置&lt;/li&gt;
&lt;li&gt;配置文件增加微信预警URL 配置&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;二、具体实现&quot;&gt;二、具体实现&lt;/h2&gt;
&lt;h3 id=&quot;21、加入预警模块&quot;&gt;2.1、加入预警模块&lt;/h3&gt;
&lt;p&gt;将这个&lt;code&gt;Pinpoint2DingTalkSmsSender.java&lt;/code&gt; 文件加入到&lt;code&gt;/web/src/main/java/com/navercorp/pinpoint/web/alarm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;文件内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package com.navercorp.pinpoint.web.alarm;

import com.navercorp.pinpoint.web.alarm.checker.AlarmChecker;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.StepExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;


public class Pinpoint2DingTalkSmsSender implements SmsSender  {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Override
    public void sendSms(AlarmChecker checker, int sequenceCount, StepExecution stepExecution) {
        if(StringUtils.isEmpty(dingTalkUrl)){
            logger.warn(&quot;web.ding.talk.url is not set！&quot;);
            return;
        }
        List smsMessage = checker.getSmsMessage();
        String textMsg = String.join(&quot;\r\n&quot;, smsMessage);
        send(textMsg);
    }

    @Autowired
    private RestTemplate restTemplate;
    private String dingTalkUrl;

    private static String DING_ALARM_PREFIX= &quot;【告警】&quot;;
    public Pinpoint2DingTalkSmsSender(){
        logger.info(&quot;init DingTalkSmsSender,{}&quot;,dingTalkUrl);
    }


    public void send(String textMsg){
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        Map map = dingMap(textMsg);

        HttpEntity&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; request = new HttpEntity&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt;(map, headers);
        ResponseEntity&amp;lt;DingResponse&amp;gt; responseEntity = restTemplate.postForEntity(dingTalkUrl, request, DingResponse.class);
        DingResponse dingResponse = Optional.ofNullable(responseEntity).map(ResponseEntity::getBody).orElse(null);
        logger.info(&quot;send alarm msg: {},dingtalk result: {} &quot;,map,dingResponse);
    }

    public static Map dingMap(String message){
        Map textMap = new HashMap();
        textMap.put(&quot;content&quot;,DING_ALARM_PREFIX + message);

        Map result = new HashMap();
        result.put(&quot;msgtype&quot;,&quot;text&quot;);
        result.put(&quot;text&quot;,textMap);
        return result;
    }

    public RestTemplate getRestTemplate() {
        return restTemplate;
    }

    public void setRestTemplate(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public String getDingTalkUrl() {
        return dingTalkUrl;
    }

    public void setDingTalkUrl(String dingTalkUrl) {
        this.dingTalkUrl = dingTalkUrl;
    }

    static class DingResponse{
        private int errcode;
        private String errmsg;

        public int getErrcode() {
            return errcode;
        }
        public void setErrcode(int errcode) {
            this.errcode = errcode;
        }

        public String getErrmsg() {
            return errmsg;
        }
        public void setErrmsg(String errmsg) {
            this.errmsg = errmsg;
        }

        @Override
        public String toString() {
            return &quot;DingResponse{&quot; +
                    &quot;errcode=&quot; + errcode +
                    &quot;, errmsg='&quot; + errmsg + '\'' +
                    '}';
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;22、开启微信预警调用&quot;&gt;2.2、开启微信预警调用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;web/src/main/java/com/navercorp/pinpoint/web/alarm/DefaultAlarmMessageSender.java&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将调用 &lt;code&gt;EmptySmsSender&lt;/code&gt; 注释。 增加调用 &lt;code&gt;Pinpoint2DingTalkSmsSender&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//this.smsSender = smsSender.orElseGet(EmptySmsSender::new);
this.smsSender = smsSender.orElseGet(Pinpoint2DingTalkSmsSender::new);
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;23、增加一个-bean-引入配置&quot;&gt;2.3、增加一个 bean 引入配置&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;applicationContext-web.xml&lt;/code&gt;中增加一个&lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    &amp;lt;bean id=&quot;dingTalkAndWechatMessageSender&quot; class=&quot;com.navercorp.pinpoint.web.alarm.Pinpoint2DingTalkSmsSender&quot; &amp;gt;
        &amp;lt;property name=&quot;dingTalkUrl&quot; value=&quot;${web.wechat.alarm.url:}&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;24、配置文件增加微信预警url-配置&quot;&gt;2.4、配置文件增加微信预警URL 配置&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;该步骤可以在web容器启动后，然后进入到容器中编辑配置文件，然后重启 web 容器即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;code&gt;pinpoint-web.properties&lt;/code&gt; 增加配置&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;web.wechat.alarm.url=https://oapi.dingtalk.com/robot/send?
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;三、实现预警&quot;&gt;三、实现预警&lt;/h2&gt;
&lt;h3 id=&quot;31、创建用户和创建用户组&quot;&gt;3.1、创建用户和创建用户组&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://djxblog.oss-cn-shenzhen.aliyuncs.com/picture/typora/image-20201121173811573.png&quot; alt=&quot;image-20201121173811573&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;32、创建预警规则&quot;&gt;3.2、创建预警规则&lt;/h3&gt;
&lt;p&gt;预警的是针对不同的应用(服务)来配置，可以设置对应的统计规则，和阈值，接收预警的只能是用户组，不能是用户， 预警的方式可以选择 sms 和 email.&lt;/p&gt;
&lt;blockquote readability=&quot;5.7821782178218&quot;&gt;
&lt;p&gt;补充下预警规则， 默认策略，是每3分钟统计一次，统计最近5分钟的数据，这个可以更改，具体更改方式见 ：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pinpoint-apm.github.io/pinpoint/2.1.0/alarm.html&quot;&gt;https://pinpoint-apm.github.io/pinpoint/2.1.0/alarm.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://djxblog.oss-cn-shenzhen.aliyuncs.com/picture/typora/image-20201121174005196.png&quot; alt=&quot;image-20201121174005196&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;四、邮件预警&quot;&gt;四、邮件预警&lt;/h2&gt;
&lt;p&gt;见官网 &lt;a href=&quot;https://pinpoint-apm.github.io/pinpoint/2.1.0/alarm.html&quot;&gt;https://pinpoint-apm.github.io/pinpoint/2.1.0/alarm.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;五、预警相关问题和注意事项&quot;&gt;五、预警相关问题和注意事项&lt;/h2&gt;
&lt;h4 id=&quot;51、告警发送异常，缺少参数&quot;&gt;5.1、告警发送异常，缺少参数&lt;/h4&gt;
&lt;p&gt;原因是：我们在配置预警的用户信息的时候，并没有全都配置，虽然有些配置不是必填的，但是我们还是需要都填入则预警信息发送不出来，并且出现下面的错误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://djxblog.oss-cn-shenzhen.aliyuncs.com/picture/typora/image-20201121173516668.png&quot; alt=&quot;image-20201121173516668&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;11-18 10:24:00.000 [    scheduler-3] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler    -- Unexpected error occurred in scheduled task
java.lang.IllegalStateException: org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException: A job instance already exists and is complete for parameters={schedule.date=1605666240000}.  If you want to run this job again, change the parameters.
        at com.navercorp.pinpoint.web.batch.JobLaunchSupport.run(JobLaunchSupport.java:52) ~[classes!/:2.1.0]
        at com.navercorp.pinpoint.web.batch.BatchJobLauncher.alarmJob(BatchJobLauncher.java:50) ~[classes!/:2.1.0]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
        at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:84) ~[spring-context-5.2.7.RELEASE.jar!/:5.2.7.RELEASE]
        at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54) [spring-context-5.2.7.RELEASE.jar!/:5.2.7.RELEASE]
        at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:93) [spring-context-5.2.7.RELEASE.jar!/:5.2.7.RELEASE]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_212]
        at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_212]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_212]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_212]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_212]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_212]
        at java.lang.Thread.run(Thread.java:748) [?:1.8.0_212]
Caused by: org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException: A job instance already exists and is complete for parameters={schedule.date=1605666240000}.  If you want to run this job again, change the parameters.
        at org.springframework.batch.core.repository.support.SimpleJobRepository.createJobExecution(SimpleJobRepository.java:131) ~[spring-batch-core-4.2.4.RELEASE.jar!/:4.2.4.RELEASE]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_212]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_212]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_212]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_212]
        at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.7.RELEASE.jar!/:5.2.7.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.7.RELEASE.jar!/:5.2.7.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.7.RELEASE.jar!/:5.2.7.RELEASE]
        at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367) ~[spring-tx-5.2.7.RELEASE.jar!/:5.2.7.RELEASE]
        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118) ~[spring-tx-5.2.7.RELEASE.jar!/:5.2.7.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.7.RELEASE.jar!/:5.2.7.RELEASE]
        at org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean$1.invoke(AbstractJobRepositoryFactoryBean.java:181) ~[spring-batch-core-4.2.4.RELEASE.jar!/:4.2.4.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.7.RELEASE.jar!/:5.2.7.RELEASE]
        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.7.RELEASE.jar!/:5.2.7.RELEASE]
        at com.sun.proxy.$Proxy96.createJobExecution(Unknown Source) ~[?:?]
        at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:137) ~[spring-batch-core-4.2.4.RELEASE.jar!/:4.2.4.RELEASE]
        at com.navercorp.pinpoint.web.batch.JobLaunchSupport.run(JobLaunchSupport.java:50) ~[classes!/:2.1.0]
        ... 15 more
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果出现上面的报错会一致出现，清除的方式，我是进行清除数据库(慎重)。&lt;/p&gt;
</description>
<pubDate>Wed, 25 Nov 2020 00:46:00 +0000</pubDate>
<dc:creator>自由早晚乱余生</dc:creator>
<og:description>本文基于 Pinpoint 2.1.0 版本 本文大部分内容来自：侠梦的开发笔记 ，但是原文的版本和我的不一致，放在2.1.0是跑不起来的，但是大概逻辑和思路基本一致。 一、接入预警大概思路 官方预警</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/operationhome/p/14016502.html</dc:identifier>
</item>
<item>
<title>[大雾雾雾雾] 告别该死的 EFCore Fluent API  (续)  - 玩双截棍的熊猫</title>
<link>http://www.cnblogs.com/staneee/p/14033819.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/staneee/p/14033819.html</guid>
<description>&lt;p&gt;朋友们好啊，&lt;/p&gt;
&lt;p&gt;我是 .NET 打工人 &lt;strong&gt;玩双截棍的熊猫&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;刚才有个朋友问我 猫猫发生什么事了&lt;/p&gt;
&lt;p&gt;我说 怎么回事?&lt;/p&gt;
&lt;p&gt;给我发了一张截图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1015637/202011/1015637-20201124170051822-2076259748.png&quot; alt=&quot;image-20201124155030919&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我一看！嗷！原来是zuo天有两个数据库，&lt;/p&gt;
&lt;p&gt;一个四十多岁，一个三十多岁&lt;/p&gt;
&lt;p&gt;它们说&lt;/p&gt;
&lt;p&gt;有一个说我列名全大写 (全小写)，EFCore生成列名区分大小写&lt;/p&gt;
&lt;p&gt;猫猫你能不能帮帮我 ？&lt;/p&gt;
&lt;p&gt;帮助治疗一下我全大写(全小写)&lt;/p&gt;
&lt;p&gt;我说可以&lt;/p&gt;
&lt;p&gt;我说你看 &lt;a href=&quot;https://www.cnblogs.com/staneee/p/www.cnblogs.com/staneee/p/10826022.html&quot;&gt;[大雾雾雾雾] 告别该死的 EFCore Fluent API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;他说 你这也没用&lt;/p&gt;
&lt;p&gt;我说 我这有用&lt;/p&gt;
&lt;p&gt;这个是反射，.NET 是讲反射的，反射动态调用&lt;/p&gt;
&lt;p&gt;2000 年发布的 .NET 都有反射特性的&lt;/p&gt;
&lt;p&gt;他说要试试&lt;/p&gt;
&lt;p&gt;我说可以&lt;/p&gt;
&lt;p&gt;我一说&lt;/p&gt;
&lt;p&gt;他 “啪！” 就站起来了，很快啊&lt;/p&gt;
&lt;p&gt;然后上来就是一个 低性能&lt;/p&gt;
&lt;p&gt;一个 不合理&lt;/p&gt;
&lt;p&gt;一个 真辣鸡！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1015637/202011/1015637-20201124170051560-2092677604.png&quot; alt=&quot;image-20201124155259700&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我全部防出去了&lt;/p&gt;
&lt;p&gt;防出去以后自然是传统艺能宜点到为止，代码放在了截图里，没复制出来。我笑了一下，准备撤回。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1015637/202011/1015637-20201124170051069-1897880371.png&quot; alt=&quot;image-20201124155334456&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为这个时候按照传统艺能他已经输了，如果这代码发力，一段就把电脑性能吃满了(雾雾雾)。&lt;/p&gt;
&lt;p&gt;他也承认我的类库有点意思，他不知道代码截图已经放到他脸上，他承认我先把代码截图发出来。&lt;/p&gt;
&lt;p&gt;我撤回代码截图不打了，他突然袭击大量反射性能低来打我脸。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mattwarren.org/images/2016/12/Reflection%20Benchmark%20Results.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我没有大E啊，也没有闪。&lt;/p&gt;
&lt;p&gt;“啪！”就使出一招 &lt;strong&gt;&lt;a href=&quot;https://github.com/rivenfx/EntityFrameworkCore&quot;&gt;Riven.EntityFrameworkCore&lt;/a&gt;&lt;/strong&gt; 打到他脸上&lt;/p&gt;
&lt;p&gt;直接重写 Entity Framework Core &lt;strong&gt;驱动默认实现&lt;/strong&gt;，从源头解决大小问题。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;目前扩展的-ef-core-数据库驱动&quot;&gt;目前扩展的 EF Core 数据库驱动&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;DevartOracle&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h2 id=&quot;基本用法&quot;&gt;基本用法&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;引入nuget包&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Postgresql&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oracle&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;dotnet cli&lt;br/&gt;&lt;code&gt;dotnet add package Riven.EntityFrameworkCore.Oracle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;nuget package manager&lt;br/&gt;&lt;code&gt;Install-Package Riven.EntityFrameworkCore.PostgreSQL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DevartOracle&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;dotnet cli&lt;br/&gt;&lt;code&gt;dotnet add package Riven.EntityFrameworkCore.DevartOracle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;nuget package manager&lt;br/&gt;&lt;code&gt;Install-Package Riven.EntityFrameworkCore.DevartOracle&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;使用驱动&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-csharp&quot;&gt;builder.UseRivenPostgreSQL(
  &quot;database connection string&quot;
);
// or
builder.UseRivenPostgreSQL(
  &quot;database connection string&quot;,
  (options)=&amp;gt;
  {

  }
);
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-csharp&quot;&gt;// Default SQLCompatibility V11
builder.UseRivenOracle(
  &quot;database connection string&quot;
);
// or
builder.UseRivenOracle(
  &quot;database connection string&quot;,
  (options)=&amp;gt;
  {
      //  SQLCompatibility V12
      //options.UseOracleSQLCompatibility(OracleSQLCompatibility.V12)
  }
);
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;Devart Oracle&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-csharp&quot;&gt;var license = &quot;&quot;; // Devart license
builder.UseRivenDevartOracle(
  &quot;database connection string&quot;，
  license
);
// or
builder.UseRivenDevartOracle(
  &quot;database connection string&quot;,
  license,
  (options)=&amp;gt;
  {

  }
);

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;与 &lt;strong&gt;E.EntityFrameworkCore.Extensions&lt;/strong&gt; 相比，&lt;strong&gt;更底层&lt;/strong&gt; / &lt;strong&gt;更原生&lt;/strong&gt; / &lt;strong&gt;性能更佳&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然暂时不支持 E.EntityFrameworkCore.Extensions 的一些功能，但我会往里加的&lt;/p&gt;
&lt;p&gt;如果觉得好用的话请 收藏 转发 star fork 一把梭 &lt;a href=&quot;https://github.com/rivenfx/EntityFrameworkCore&quot;&gt;源码仓库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1015637/201905/1015637-20190507170246470-291785693.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div readability=&quot;17&quot;&gt;RivenFx Riven 玩双截棍的熊猫 EFCore EF Core EntityFramework EntityFrameworkCore
&lt;p&gt;[EF Core Oracle 列名大小写问题]&lt;br/&gt;[EF Core Oracle column name case problem]&lt;br/&gt;[EF Core PostgreSql 列名大小写问题]&lt;br/&gt;[EF Core PostgreSql column name case problem]&lt;/p&gt;
&lt;p&gt;[EFCore Oracle 列名大小写问题]&lt;br/&gt;[EFCore Oracle column name case problem]&lt;br/&gt;[EFCore PostgreSql 列名大小写问题]&lt;br/&gt;[EFCore PostgreSql column name case problem]&lt;/p&gt;
&lt;p&gt;[entity framework core Oracle 列名大小写问题]&lt;br/&gt;[entity framework core Oracle column name case problem]&lt;br/&gt;[entity framework core PostgreSql 列名大小写问题]&lt;br/&gt;[entity framework core PostgreSql column name case problem]&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 24 Nov 2020 23:50:00 +0000</pubDate>
<dc:creator>玩双截棍的熊猫</dc:creator>
<og:description>朋友们好啊， 我是 .NET 打工人 玩双截棍的熊猫 刚才有个朋友问我 猫猫发生什么事了 我说 怎么回事? 给我发了一张截图 我一看！嗷！原来是zuo天有两个数据库， 一个四十多岁，一个三十多岁 它们</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/staneee/p/14033819.html</dc:identifier>
</item>
<item>
<title>Appium上下文和H5测试(一) - 清菡</title>
<link>http://www.cnblogs.com/qinghan123/p/14033778.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qinghan123/p/14033778.html</guid>
<description>&lt;h2 id=&quot;坚持原创输出，点击蓝字关注我吧&quot;&gt;坚持原创输出，点击蓝字关注我吧&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/qinghanstudy/qinghan/raw/master/img/20201124220644.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;作者：清菡&lt;br/&gt;博客：oschina、云+社区、知乎等各大平台都有。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;一、混合应用-H5
&lt;ul&gt;&lt;li&gt;1.混合应用是什么？&lt;/li&gt;
&lt;li&gt;2.怎么样分辨一个 App 页面究竟是原生的还是 Web 的？&lt;/li&gt;
&lt;li&gt;3.如果 App 是 Web 的界面，那界面不会有布局边界显示，如有则说明是原生的界面。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;二、想要操作这个 Html 页面
&lt;ul&gt;&lt;li&gt;1.想通过代码点击立即购买，那 Web 自动化中用到了什么环境啊？&lt;/li&gt;
&lt;li&gt;2.写代码点击全程班，进入全程班后该怎么办？&lt;/li&gt;
&lt;li&gt;3.要求&lt;/li&gt;
&lt;li&gt;4.Debug 模式怎么来呢？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;三、元素定位的 4 种方式及操作
&lt;ul&gt;&lt;li&gt;1.chrome://inspect，需要 fanqiang。&lt;/li&gt;
&lt;li&gt;2.使用 driver.page_source 获取 Html 页面。&lt;/li&gt;
&lt;li&gt;3.找开发人员要源代码文件。&lt;/li&gt;
&lt;li&gt;4.uc-devtools 不需要 FQ。&lt;/li&gt;
&lt;li&gt;5.想定位一个元素怎么操作？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;四、代码&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;一、混合应用-h5&quot;&gt;一、混合应用-H5&lt;/h2&gt;
&lt;p&gt;微信小程序的前提都是基于 H5，没有 H5 的情况下来操作微信小程序您可能不太明白。H5 是混合应用，有原生应用和混合应用。&lt;/p&gt;
&lt;h3 id=&quot;1混合应用是什么？&quot;&gt;1.混合应用是什么？&lt;/h3&gt;
&lt;p&gt;是在一个里面有 Html 页面，又有原生控件的标签等等。&lt;/p&gt;
&lt;h3 id=&quot;2怎么样分辨一个-app-页面究竟是原生的还是-web-的？&quot;&gt;2.怎么样分辨一个 App 页面究竟是原生的还是 Web 的？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1）在手机/模拟器中点击关于手机中的版本号 5 下，出来开发者选项。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）在开发者选项中勾选上显示布局边界，再返回到 App 界面。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;华为荣耀 p30:设置-系统和更新-开发人员选项-显示布局边界（开启）。&lt;/p&gt;
&lt;p&gt;开启显示布局边界，你看到的每一个元素，它都把它框起来了。一个框代表一个原生控件中的一个元素（原生控件中的一个控件或者一个布局）。&lt;/p&gt;
&lt;p&gt;整屏能操作的地方都被这样框起来了，证明所有的都是原生控件啊，也就是&lt;code&gt;UiAutomator Viewer&lt;/code&gt;可以识别的。&lt;/p&gt;
&lt;p&gt;但是，你看这一整块就是一整个框啊。包括立即购买、下载、打开这样的东西都没有。而是作为中间整屏放在一起的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从图片中可以看出，上面是原生控件，下面是 Html 页面。所以，这个就是混合应用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/qinghanstudy/qinghan/raw/master/img/20201124214841.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;3如果-app-是-web-的界面，那界面不会有布局边界显示，如有则说明是原生的界面。&quot;&gt;3.如果 App 是 Web 的界面，那界面不会有布局边界显示，如有则说明是原生的界面。&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;有时候，肉眼上的识别不是很信任，那么就打开截屏工具：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果看到这个地方是个 Web View，那么绝对是个 Html 页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/qinghanstudy/qinghan/raw/master/img/20201124173047.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UiAutomator Viewer&lt;/code&gt;不能识别 Html 页面的。到了这个 Web View 就卡住了。它里面的 Html 是跟它没有关系的。&lt;/p&gt;
&lt;h2 id=&quot;二、想要操作这个-html-页面&quot;&gt;二、想要操作这个 Html 页面&lt;/h2&gt;
&lt;p&gt;得像 Web 自动化一样，先在这个界面找到立即购买的链接（也就是整个 Html 页面）找到了之后才能去点击。&lt;/p&gt;
&lt;h3 id=&quot;1想通过代码点击立即购买，那-web-自动化中用到了什么环境啊？&quot;&gt;1.想通过代码点击立即购买，那 Web 自动化中用到了什么环境啊？&lt;/h3&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;我想驱动网页去做点事，就必须要把环境搭建好才可以。安卓手机的很多 Api 都是谷歌开发的，所以基本上只能用谷歌 Web View 了。也得安装 Chrome driver，得有驱动程序还得跟浏览器版本匹配。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;从外面点击进来的时候，外面是一个原生控件，从一个原生控件点击之后，切换到一个 Html 页面中操作，它们俩很显然是不一样的东西。一个是 Html，一个是安卓控件。所以要点击立即购买，还要必须进行切换操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;现在虽然识别了，但是不知道怎样操作它。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;2写代码点击全程班，进入全程班后该怎么办？&quot;&gt;2.写代码点击全程班，进入全程班后该怎么办？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/qinghanstudy/qinghan/raw/master/img/20201124181246.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;混合应用自动化方案&quot;&gt;混合应用自动化方案&lt;/h4&gt;
&lt;p&gt;基于 &lt;code&gt;UiAutomator+Chrome driver&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;原生控件部分则 &lt;code&gt;Uiautomator&lt;/code&gt;，&lt;code&gt;Web View&lt;/code&gt; 的部分走 &lt;code&gt;Chrome driver&lt;/code&gt;，二者结合。&lt;/p&gt;
&lt;h3 id=&quot;3要求：&quot;&gt;3.要求：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Android 4.4+&lt;/li&gt;
&lt;li&gt;Web View 必须为 Debug 版本。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;要从原生控件中切换到手机的 Html 页面中，切换操作的前提是得知道切换的是谁，得知道切换到哪去，所以这里也是一样的。首先必须能够识别到 Web View。&lt;/p&gt;
&lt;p&gt;识别到 Web View 的前提是：下载知乎或者豆瓣，去获取所有当前可以操作的上下文，会发现没有 web view。&lt;strong&gt;也就是关闭了 Web View 的显示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Windows 切换必须获取 Windows 的句柄，有才能切换。既然把 Web View 的识别给关闭了，就没办法切换到 Web View 这个元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以这里有个硬性条件，Web View 必须为 Debug 版本。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;浏览器除外，浏览器本身就是可以识别的，本质上就是网页性质的访问。手机上的浏览器也是一样的。&lt;/p&gt;
&lt;h3 id=&quot;4debug-模式怎么来呢？&quot;&gt;4.Debug 模式怎么来呢？&lt;/h3&gt;
&lt;h4 id=&quot;解决方法：&quot;&gt;解决方法：&lt;/h4&gt;
&lt;p&gt;1、App 打包的时候需要开启 Web View 的 Debug 属性&lt;code&gt;setWebContentDebuggingEnabled(true)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个直接让开发加上就好，再去打包就可以了；（测试阶段让他加上，一般上了应用商城中的，都是把它关闭的）。&lt;/p&gt;
&lt;p&gt;2、开启后，有些真机可能依然没有办法获取到 Web View（模拟器的 &lt;code&gt;contexts&lt;/code&gt; 中有 Web View，但有些手机没有。）&lt;/p&gt;
&lt;p&gt;官方给出的答案是：需要将手机 root，然后再去获取。&lt;/p&gt;
&lt;p&gt;目前很多厂商，它的权限设置是不太一样的。有的手机需要 root，有的手机不需要 root。&lt;/p&gt;
&lt;h4 id=&quot;开启-web-view-可见：&quot;&gt;开启 Web View 可见：&lt;/h4&gt;
&lt;p&gt;链接：&lt;code&gt;https://developers.google.com/web/tools/chrome-devtools/remote-debugging/webviews&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以识别 Web View 了，切换进来后就必须做到元素定位了。&lt;/p&gt;
&lt;h2 id=&quot;三、元素定位的-4-种方式及操作&quot;&gt;三、元素定位的 4 种方式及操作&lt;/h2&gt;
&lt;h3 id=&quot;1chromeinspect，需要-fanqiang。&quot;&gt;1.chrome://inspect，需要 fanqiang。&lt;/h3&gt;
&lt;p&gt;浏览器中输入网址：&lt;code&gt;chrome://inspect/#devices&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;打开网址后，点击界面中的 inspect，弹出一个界面可以看到完整的 Html 界面，但是大部分同学没有 fq 的权限。所以这种方式搁置。&lt;/p&gt;
&lt;h3 id=&quot;2使用-driverpage_source-获取-html-页面。&quot;&gt;2.使用 driver.page_source 获取 Html 页面。&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;driver 有个 page_source 选项，已经切换到 Html 页面，怎么切换的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;已经切换到 Html 页面了，那我们页面源码就是完整的 Html。通过 &lt;code&gt;driver.page_source&lt;/code&gt; 得到完整的 Html，然后将它保存在我本地的文件当中，再用浏览器去打开。这样照样可以做元素定位和元素识别。&lt;/p&gt;
&lt;p&gt;之前写文件操作了。知道如何获取页面源码，如何获取 Html，你只要将它保存文件即可。&lt;/p&gt;
&lt;p&gt;第二种方式有点累赘。&lt;/p&gt;
&lt;h3 id=&quot;3找开发人员要源代码文件。&quot;&gt;3.找开发人员要源代码文件。&lt;/h3&gt;
&lt;p&gt;这个呢就要借助开发的帮助，ta 要是不给你，你也没办法哦。&lt;/p&gt;
&lt;h3 id=&quot;4uc-devtools-不需要-fq。&quot;&gt;4.Uc-devtools 不需要 FQ。&lt;/h3&gt;
&lt;p&gt;Uc-devtools 这个工具非常好，它的效果和我们在&lt;code&gt;chrome://inspect/#devices&lt;/code&gt;看到的是非常像的。&lt;/p&gt;
&lt;p&gt;下载地址：&lt;code&gt;https://dev.ucweb.com/download/?spm=ucplus.11199946.0.0.53974692TtSluZ#DevTool&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下载下来安装的时候，直接下一步下一步就好了。&lt;/p&gt;
&lt;p&gt;安装完毕后，它是没有桌面标识的，可以在开始-你的应用程序中找到它。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：这个工具只识别 Web View，如果手机打开的页面中有 Web View 网页，能识别到的情况下这里才会显示。如果没有 Web View，那这里就什么都不显示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一次使用的时候，可能界面显示不全，可以设置成这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/qinghanstudy/qinghan/raw/master/img/20201124194905.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/qinghanstudy/qinghan/raw/master/img/20201124195101.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个是安卓手机内置的 Web View 版本，也就是安卓手机内置的浏览器版本。Web 自动化要下载浏览器驱动，那我们这个地方并没有操作的是浏览器，操作的是网页。&lt;/p&gt;
&lt;h4 id=&quot;怎么知道下载哪个驱动呢&quot;&gt;怎么知道下载哪个驱动呢?&lt;/h4&gt;
&lt;p&gt;78.0.3904.108 代表浏览器的版本，实际上是手机中内置的 Web View 版本。Web View 就代表了浏览器，不需要您真的安装它。下载个能支持 78.0.3904.108 的谷歌驱动。&lt;/p&gt;
&lt;p&gt;只截取了 Web View 的部分，没有截取原生控件的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/qinghanstudy/qinghan/raw/master/img/20201124200300.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;只取了 Html 这块：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/qinghanstudy/qinghan/raw/master/img/20201124200308.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里有个完整的 Html 页面在这里。&lt;/p&gt;
&lt;h3 id=&quot;5想定位一个元素怎么操作？&quot;&gt;5.想定位一个元素怎么操作？&lt;/h3&gt;
&lt;p&gt;跟我们之前使用谷歌 F12 的套路是一样的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/qinghanstudy/qinghan/raw/master/img/20201124201053.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一个手机中除了这个 Web View 网页，可能还有别的 Web View 网页。如果是连续的操作，不需要回退到原生控件中，可以在 Html 当中一直操作下去。Html 页面，以前写 Web 自动化的时候有写过有 iframe 就切换，没有 iframe 就不切换。都是一样的道理。&lt;/p&gt;
&lt;p&gt;这是 Web 自动化和 App 自动化混合使用版本。现在能够找到元素也能够识别到 Web View。怎么切换？&lt;/p&gt;
&lt;h2 id=&quot;四、代码&quot;&gt;四、代码&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;driver.find_element_by_android_uiautomator(loc).click()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个步骤之后进入到了&lt;strong&gt;全程班&lt;/strong&gt;的页面，进入全程班的页面也是需要时间的。Web View 这个元素当中放的才是 Html 页面，是不是等到 Html 页面加载出来之后再去获取所有的相关内容这样比较好。&lt;/p&gt;
&lt;p&gt;万一切过来的时候，Html 页面还没有去加载就马上获取当前所有可以操作的对象，这样很容易丢失，所以一样要有等待。&lt;/p&gt;
&lt;p&gt;首先等到 Web View 这个元素的 class 控件出现。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-PYTHON&quot;&gt;
from appium import webdriver
import time
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from appium.webdriver.common.mobileby import MobileBy


desired_caps={}
# 平台类型
desired_caps[&quot;platformName&quot;]=&quot;Android&quot;
# 平台版本号
desired_caps[&quot;platformVersion&quot;]=&quot;10&quot;
# 设备名称
desired_caps[&quot;deviceName&quot;]=&quot;2NSDU20410017297&quot;
# app 包名
desired_caps[&quot;appPackage&quot;]=&quot;填appPackage&quot;
# app 入口 acitivity
desired_caps[&quot;appActivity&quot;]=&quot;填appActivity&quot;


# 连接Appium server。前提：appium desktop要启动。有监听端口。
# 将desired_caps发送给appium server。打开app
driver = webdriver.Remote('http://127.0.0.1:4723/wd/hub',desired_caps)

loc='new UiSelector().text(&quot;全程班&quot;)'
WebDriverWait(driver,20).until(EC.visibility_of_element_located((MobileBy.ANDROID_UIAUTOMATOR,locals())))
driver.find_element_by_android_uiautomator(loc).click()

# 等待Web View元素出现  -Web View里面放的是Html
WebDriverWait(driver,20).until(EC.visibility_of_element_located(MobileBy.CLASS_NAME,'android.webkit.WebView'))
time.sleep(1)#稍微sleep 1秒，确保里面的Html，所有的都能加载完成。
&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;p&gt;公众号 &lt;strong&gt;「清菡软件测试」&lt;/strong&gt; 首发，更多原创文章：&lt;strong&gt;清菡软件测试 96+原创文章&lt;/strong&gt;，欢迎关注、交流，禁止第三方擅自转载。&lt;/p&gt;
</description>
<pubDate>Tue, 24 Nov 2020 20:22:00 +0000</pubDate>
<dc:creator>清菡</dc:creator>
<og:description>坚持原创输出，点击蓝字关注我吧 作者：清菡 博客：oschina、云+社区、知乎等各大平台都有。 目录 一、混合应用-H5 1.混合应用是什么？ 2.怎么样分辨一个 App 页面究竟是原生的还是 We</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qinghan123/p/14033778.html</dc:identifier>
</item>
<item>
<title>dsu on tree (树上启发式合并) 详解 - GsjzTle</title>
<link>http://www.cnblogs.com/StarRoadTang/p/14033777.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/StarRoadTang/p/14033777.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一直都没出过算法详解，昨天心血来潮想写一篇，于是 dsu on tree 它来了&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、前置技能&quot;&gt;1、前置技能&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;1.链式前向星（vector 建图）&lt;/p&gt;
&lt;p&gt;2.dfs 建树&lt;/p&gt;
&lt;p&gt;3.剖分轻重链，轻重儿子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;重儿子&lt;/th&gt;
&lt;th&gt;一个结点的所有儿子中拥有最多子树的儿子&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;轻儿子&lt;/td&gt;
&lt;td&gt;一个结点的所有儿子中不是重儿子的儿子&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;重边&lt;/td&gt;
&lt;td&gt;父亲与重儿子的连边&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;轻边&lt;/td&gt;
&lt;td&gt;父亲与轻儿子的连边&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;重链&lt;/td&gt;
&lt;td&gt;一堆重边连接而成的链&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;轻链&lt;/td&gt;
&lt;td&gt;一堆轻边连接而成的链&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;2、什么是-dsu-on-tree（树上启发式合并）-？&quot;&gt;2、什么是 dsu on tree（树上启发式合并） ？&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;dsu on tree 其实就是个优雅的暴力算法，和它一起共被称为优雅暴力的算法还有莫队&lt;br/&gt;所谓优雅的暴力大概是指：“优雅思想，暴力的操作”&lt;br/&gt;例如莫队我们知道它是将整个区间分块，再将询问的区间排序，最后暴力的维护所有询问的区间&lt;br/&gt;其中 &quot;整个区间分块，询问的区间排序&quot; 为优雅的思想，而 &quot;暴力的维护所有询问的区间&quot; 为暴力的操作&lt;br/&gt;因为需要将询问的区间排序，我们就需要先将询问的区间保存下来，也就是要离线&lt;br/&gt;dsu on tree 和莫队类似，也需要离线（它们同属于静态算法）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;dsu-on-tree-优雅的思想：&quot;&gt;dsu on tree 优雅的思想：&lt;/h2&gt;
&lt;blockquote readability=&quot;16&quot;&gt;
&lt;p&gt;对于以 u 为根的子树&lt;/p&gt;
&lt;p&gt;①. 先统计它轻子树(轻儿子为根的子树)的答案，统计完后删除信息&lt;/p&gt;
&lt;p&gt;②. 再统计它重子树(重儿子为根的子树)的答案 ，统计完后保留信息&lt;/p&gt;
&lt;p&gt;③. 然后再将重子树的信息合并到 u上&lt;/p&gt;
&lt;p&gt;④. 再去遍历 u 的轻子树，然后把轻子树的信息合并到 u 上&lt;/p&gt;
&lt;p&gt;⑤. 判断 u 的信息是否需要传递给它的父节点（u 是否是它父节点的重儿子）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;dsu-on-tree-暴力的操作&quot;&gt;dsu on tree 暴力的操作&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;dsu on tree 暴力的操作体现于统计答案上（不同的题目统计方式不一样）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;3、dsu-on-tree-的过程演示及代码&quot;&gt;3、dsu on tree 的过程演示及代码&lt;/h2&gt;
&lt;h3 id=&quot;1图示&quot;&gt;1.图示&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1673058/202011/1673058-20201123222034632-1209682233.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul readability=&quot;4&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;1 的重儿子为 2，轻儿子为 3&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;2 的重儿子为 4，轻儿子为 5&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;3 没有重儿子，没有轻儿子&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;4 的重儿子为 6，没有轻儿子&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;5 的重儿子为 7，没有轻儿子&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;6 没有重儿子，没有轻儿子&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;7 没有重儿子，没有轻儿子&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;为了更好观看，我们将节点与其重儿子的连线描红&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1673058/202011/1673058-20201123222005211-1447137579.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;我们从根节点1进入，先找1的轻儿子，发现3，进入3&lt;/p&gt;
&lt;p&gt;3没有别的儿子可以进入了，于是统计3的信息&lt;/p&gt;
&lt;p&gt;统计完后即将返回父节点 1&lt;/p&gt;
&lt;p&gt;因为1-3的边没有被描红边、3不是1的重儿子（不传递3的信息），所以删除3的信息再返回 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1673058/202011/1673058-20201123221946203-1372610519.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;16&quot;&gt;
&lt;p&gt;发现1没有别的轻儿子了，就找重儿子，发现2，进入2&lt;/p&gt;
&lt;p&gt;进入2后，再找2的轻儿子，发现5，进入5&lt;/p&gt;
&lt;p&gt;发现5没有轻儿子了，就找重儿子，发现7，进入 7&lt;/p&gt;
&lt;p&gt;7 没有别的儿子可以进入了，于是统计 7 的信息&lt;/p&gt;
&lt;p&gt;统计完后即将返回父节点 5&lt;/p&gt;
&lt;p&gt;因为边5-7 有被描红边、7是5的重儿子，所以保留7的信息直接返回 5（传递7的信息的给5）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1673058/202011/1673058-20201123221912884-763716834.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;5 所有儿子都进入过了，于是统计 5 的信息&lt;/p&gt;
&lt;p&gt;统计完后即将范围父节点 2&lt;/p&gt;
&lt;p&gt;因为边2-5 没有被描红边、5不是2的重儿子，所以删除5的信息再返回 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1673058/202011/1673058-20201123221846572-1324981499.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;发现2没有其它轻儿子了，就找重儿子，发现4，进入4&lt;/p&gt;
&lt;p&gt;发现4没有其它轻儿子了，就找重儿子，发现6，进入6&lt;/p&gt;
&lt;p&gt;6 没有别的儿子可以进入了，于是统计 6 的信息&lt;/p&gt;
&lt;p&gt;统计完后即将返回父节点 4&lt;/p&gt;
&lt;p&gt;因为边4-6 有被描红边，6是4的重儿子，所以保留6的信息直接返回 4（传递6的信息的给4）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1673058/202011/1673058-20201123221806454-836162466.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;4 所有儿子都进入过了，于是统计 4 的信息&lt;/p&gt;
&lt;p&gt;统计完后即将返回父节点 2&lt;/p&gt;
&lt;p&gt;因为边2-4 有被描红边，4是2的重儿子，所以保留4的信息直接返回2（传递4的信息的给2）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1673058/202011/1673058-20201123221737255-1541446189.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;2 所有儿子都进入过了，于是统计 2 的信息&lt;/p&gt;
&lt;p&gt;2 接受了4传递的信息，但是并没有接受5传递给它的信息（被删除了）&lt;/p&gt;
&lt;p&gt;于是 2 再进入5（轻儿子），统计一遍以 5 为根的子树的信息，再将该信息合并到 2上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1673058/202011/1673058-20201123221621729-520988741.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;统计完后 2 后即将返回父节点 1&lt;/p&gt;
&lt;p&gt;因为边1-2 有被描红边，2是1的重儿子，所以保留2的信息直接返回1（传递2的信息的给1）&lt;/p&gt;
&lt;p&gt;1 所有儿子都进入过了，于是统计 1 的信息&lt;/p&gt;
&lt;p&gt;1 接受了2传递的信息，但是并没有接受3传递给它的信息（被删除了）&lt;/p&gt;
&lt;p&gt;于是 1 再进入3（轻儿子），统计一遍以 3 为根的子树的信息，再将该信息合并到 1 上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1673058/202011/1673058-20201123221604511-1919733249.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;至此，整个 dsu on tree 的过程结束&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2代码&quot;&gt;2.代码&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cpp&quot;&gt;struct Edge{
        int nex , to;
}edge[N &amp;lt;&amp;lt; 1];
int head[N] , TOT;
void add_edge(int u , int v) // 链式前向星建图
{
        edge[++ TOT].nex = head[u] ;
        edge[TOT].to = v;
        head[u] = TOT;
}
int sz[N];   // sz[u] 表示以 u 为根的子树大小 
int hson[N]; // hson[u] 表示 u 的重儿子 
int HH;      // HH 表示当前根节点的重儿子 
void dfs(int u , int far)
{
        sz[u] = 1;
        for(int i = head[u] ; i ; i = edge[i].nex) // 链式前向星 
        {
                int v = edge[i].to;
                if(v == far) continue ;
                dfs(v , u); 
                sz[u] += sz[v];  
                if(sz[v] &amp;gt; sz[hson[u]]) hson[u] = v; // 选择 u 的重儿子 
        }
}
void calc(int u , int far , int val) // 统计答案 
{
        if(val == 1) ...; // val = 1，则添加信息 
        else ...;         // val = -1，则删除信息 
        ......  
    for(int i = head[u] ; i ; i = edge[i].nex)
    {
        int v = edge[i].to;
        if(v == far || v == HH) continue ; // 如果 v 是当前根节点的重儿子，则跳过
        calc(v , u , val);
    }
} 
void dsu(int u , int far , int op)  // op 等于0表示不保留信息，等于1表示保留信息 
{
        for(int i = head[u] ; i ; i = edge[i].nex)
        {
                int v = edge[i].to;
                if(v == far || v == hson[u]) continue ; // 如果 v 是重儿子或者父亲节点就跳过 
                dsu(v , u , 0);     // 先遍历轻儿子 ，op = 0 :轻儿子的答案不做保留 
        }
        if(hson[u]) dsu(hson[u] , u , 1) , HH = hson[u];
        // 轻儿子都遍历完了，如果存在重儿子，遍历重儿子（事实上除了叶子节点每个点都必然有重儿子）
        // op = 1 ， 保留重儿子的信息 
        // 当前是以 u 为根节点的子树，所以根节点的重儿子 HH = hson[u]
        calc(u , far , 1); // 再次遍历轻儿子统计答案
        HH = 0;                    // 遍历结束 ，即将返回父节点，所以取消标记 HH 
        if(!op) calc(u , far , -1); // 如果 op = -1，则 u 对于它的父亲来说是轻儿子，不需要将信息传递给它的父亲 
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;4经典例题讲解&quot;&gt;4.经典例题讲解&lt;/h2&gt;
&lt;h2 id=&quot;5难题进阶&quot;&gt;5.难题进阶&lt;/h2&gt;
&lt;p&gt;这是道较难的题，听说这也是 dsu on tree 的发明人专门为这个算法出的题&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-markdown&quot;&gt;    ┏┛ ┻━━━━━┛ ┻┓  
    ┃　　　　　　┃  
    ┃　　　━　　　      ┃  
    ┃　┳┛　  ┗┳　    ┃  
    ┃　　　　　　       ┃  
    ┃　　　┻　　　    ┃  
    ┃　　　　　　      ┃  
    ┗━┓　　　┏━━━┛  
      ┃　　　┃   神兽保佑  
      ┃　　　┃   代码无BUG！  
      ┃　　　┗━━━━━━━━━┓  
      ┃　　　　　　　    ┣┓  
      ┃　　　　         ┏┛  
      ┗━┓ ┓ ┏━━━┳ ┓ ┏━┛  
          ┃ ┫ ┫   ┃ ┫ ┫  
          ┗━┻━┛   ┗━┻━┛&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 24 Nov 2020 19:50:00 +0000</pubDate>
<dc:creator>GsjzTle</dc:creator>
<og:description>一直都没出过算法详解，昨天心血来潮想写一篇，于是 dsu on tree 它来了 1、前置技能 1.链式前向星（vector 建图） 2.dfs 建树 3.剖分轻重链，轻重儿子 重儿子 一个结点的所有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/StarRoadTang/p/14033777.html</dc:identifier>
</item>
<item>
<title>SpringIOC的高级特性 - 邓晓晖</title>
<link>http://www.cnblogs.com/isdxh/p/14033760.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/isdxh/p/14033760.html</guid>
<description>&lt;h2 id=&quot;1-lazy-init延迟加载&quot;&gt;1. lazy-Init延迟加载&lt;/h2&gt;
&lt;p&gt;Bean对象的延迟加载（延迟创建）&lt;/p&gt;
&lt;p&gt;ApplicationContext 容器的默认⾏为是在启动服务器时将所有 singleton bean 提前进⾏实例化。提前实例化意味着作为初始化过程的⼀部分，ApplicationContext实例会创建并配置所有的singleton bean。&lt;/p&gt;
&lt;h3 id=&quot;11-xml方式开启延迟加载：&quot;&gt;1.1 XML方式开启延迟加载：&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;lazy-init=&quot;&quot; 配置bean对象的延迟加载 ，true或者false false就是立即加载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;&amp;lt;bean id=&quot;lazyResult&quot; class=&quot;com.lagou.edu.pojo.Result&quot; lazy-init=&quot;false&quot;&amp;gt;&amp;lt;/bean&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们先来看一下当&lt;code&gt;lazy-init=&quot;false&quot;&lt;/code&gt; 也就是立即加载的时候：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://typora-files.oss-cn-beijing.aliyuncs.com/file/image-20201122235705717.png&quot; alt=&quot;image-20201122235705717&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以看到，在容器启动后，getBean之前，lazyResult这个bean已经存在了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;然后我们把&lt;code&gt;lazy-init=&quot;true&quot;&lt;/code&gt;，设置为true&lt;br/&gt;&lt;img src=&quot;https://typora-files.oss-cn-beijing.aliyuncs.com/file/image-20201123000001665.png&quot; alt=&quot;image-20201123000001665&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们F8往下走一步：&lt;br/&gt;&lt;img src=&quot;https://typora-files.oss-cn-beijing.aliyuncs.com/file/image-20201123000130234.png&quot; alt=&quot;image-20201123000130234&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现出现了lazyResult&lt;/p&gt;
&lt;h3 id=&quot;12-注解开启延迟加载：&quot;&gt;1.2 注解开启延迟加载：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;@Lazy&lt;/strong&gt;：&lt;br/&gt;&lt;img src=&quot;https://typora-files.oss-cn-beijing.aliyuncs.com/file/image-20201123000352548.png&quot; alt=&quot;image-20201123000352548&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;13全局配置default-lazy-init：&quot;&gt;1.3全局配置——default-lazy-init=&quot;&quot;：&lt;/h3&gt;
&lt;p&gt;在bean的根标签中：&lt;br/&gt;&lt;img src=&quot;https://typora-files.oss-cn-beijing.aliyuncs.com/file/image-20201123000603503.png&quot; alt=&quot;image-20201123000603503&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;应用场景：&quot;&gt;应用场景：&lt;/h3&gt;
&lt;p&gt;（1）开启延迟加载⼀定程度提⾼容器启动和运转性能&lt;br/&gt;（2）对于不常使⽤的 Bean 设置延迟加载，这样偶尔使⽤的时候再加载，不必要从⼀开始该 Bean 就占⽤资源&lt;/p&gt;
&lt;h2 id=&quot;2-factorybean和beanfactory&quot;&gt;2. FactoryBean和BeanFactory&lt;/h2&gt;
&lt;h3 id=&quot;21-beanfactory&quot;&gt;2.1 BeanFactory&lt;/h3&gt;
&lt;p&gt;容器的顶级接口，定义了容器的一些基础行为，负责生产和管理Bean的一个工厂，具体使用它下面的子接口类型，比如ApplicationContext&lt;/p&gt;
&lt;h3 id=&quot;22-factorybean&quot;&gt;2.2 FactoryBean&lt;/h3&gt;
&lt;p&gt;spring中的bean有两种&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;普通bean&lt;/li&gt;
&lt;li&gt;工厂bean（FactoryBean）&lt;br/&gt;可以生产某一个类型的bean实例（返回给我们），也就是说我们可以借助于它自定义bean的创建过程。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Bean创建的三种⽅式中的静态⽅法和实例化⽅法和FactoryBean作⽤类似，FactoryBean使⽤较多，尤其在Spring框架⼀些组件中会使⽤，还有其他框架和Spring框架整合时使⽤&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;//可以让我们自定义Bean的创建过程，完成复杂bean定义
public interface FactoryBean&amp;lt;T&amp;gt; {
        //返回FactoryBean创建的实例，如果isSingleton返回true，则该实例会放到Spring容器的单例缓存池中Map
        @Nullable
        T getObject() throws Exception;

    //返回FactoryBean创建的bean类型
        @Nullable
        Class&amp;lt;?&amp;gt; getObjectType();

        //返回作用域是否单例
        default boolean isSingleton() {
                return true;
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;221-新建类companyfactorybean，实现factorybean接口，并重写方法：&quot;&gt;2.2.1 新建类CompanyFactoryBean，实现FactoryBean接口，并重写方法：&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class CompanyFactoryBean implements FactoryBean&amp;lt;Company&amp;gt; {
    private String companyInfo;//注入公司名称,地址,规模  以逗号分隔

    public void setCompanyInfo(String companyInfo) {
        this.companyInfo = companyInfo;
    }

    @Override
    public Company getObject() throws Exception {
        //创建复杂对象Company
        Company company=new Company();
        String[] split = companyInfo.split(&quot;,&quot;);
        company.setName(split[0]);
        company.setAddress(split[1]);
        company.setScale(Integer.parseInt(split[2]));

        return company;
    }

    @Override
    public Class&amp;lt;?&amp;gt; getObjectType() {
        //返回bean的类型
        return Company.class;
    }

    @Override
    public boolean isSingleton() {
        //是否是单例
        return true;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class Company {
    private String name;
    private String address;
    private int scale;
        //省略getset 和toString
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;222-xml文件中配置bean&quot;&gt;2.2.2 xml文件中配置bean&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;bean id=&quot;companyBean&quot; class=&quot;com.lagou.edu.factory.CompanyFactoryBean&quot;&amp;gt;
   &amp;lt;property name=&quot;companyInfo&quot; value=&quot;拉钩,中关村,500&quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;223-测试&quot;&gt;2.2.3 测试&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;    @org.junit.Test
    public void test(){
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
        Object companyBean = applicationContext.getBean(&quot;companyBean&quot;);
        System.out.println(companyBean);
    }
//结果返回的是 Company{name='拉钩', address='中关村', scale=500}   
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;虽然在xml配置文件中配置的bean的&lt;code&gt;class=&quot;com.lagou.edu.factory.CompanyFactoryBean&quot;&lt;/code&gt; 但是返回的&lt;strong&gt;Company&lt;/strong&gt;类型。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;如何返回CompanyFactoryBean类型呢?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://typora-files.oss-cn-beijing.aliyuncs.com/file/image-20201123005410054.png&quot; alt=&quot;image-20201123005410054&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;打印结果为：com.lagou.edu.factory.CompanyFactoryBean@545b995e&lt;/p&gt;
&lt;h2 id=&quot;3-后置处理器&quot;&gt;3. 后置处理器&lt;/h2&gt;
&lt;p&gt;Spring提供了两种后处理bean的扩展接⼝，分别为 &lt;code&gt;BeanPostProcessor&lt;/code&gt; 和&lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt;，两者在使⽤上是有所区别的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;⼯⼚初始化（BeanFactory）—&amp;gt; Bean对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在BeanFactory初始化之后可以使⽤BeanFactoryPostProcessor进⾏后置处理做⼀些事情&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在Bean对象实例化（并不是Bean的整个⽣命周期完成）之后可以使⽤BeanPostProcessor进⾏后置处理做⼀些事情&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意：对象不⼀定是springbean，⽽springbean⼀定是个对象&lt;/p&gt;
&lt;h3 id=&quot;31-springbean生命周期图&quot;&gt;3.1 SpringBean生命周期图&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://typora-files.oss-cn-beijing.aliyuncs.com/file/image-20201123010056007.png&quot; alt=&quot;image-20201123010056007&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按照上述描述的打印一下。看看是否一致：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;//实现了BeanNameAware、BeanFactoryAware、ApplicationContextAware、InitializingBean，DisposableBean接口
public class Result implements BeanNameAware, BeanFactoryAware, ApplicationContextAware, InitializingBean, DisposableBean {
    private String status;
    private String message;
        //省略getset toString方法

    @Override
    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
        System.out.println(&quot;4.BeanFactoryAware：&quot;+beanFactory);
    }

    @Override
    public void setBeanName(String name) {
        System.out.println(&quot;3.BeanNameAware：&quot;+name);
    }

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        System.out.println(&quot;5.ApplicationContextAware：&quot;+applicationContext);
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        System.out.println(&quot;7.InitializingBean&quot;);
    }

    public void initMethodTest(){
        System.out.println(&quot;8.initMethod&quot;);
    }

    @PostConstruct
    public void postCoustrcut(){
        System.out.println(&quot;postCoustrcut&quot;);
    }

    //销毁之前执行
    @PreDestroy
    public void preDestroy(){
        System.out.println(&quot;销毁之前执行&quot;);
    }

    @Override
    public void destroy() throws Exception {
        System.out.println(&quot;DisposableBean&quot;);
    }
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
    拦截实例化之后的对象（实例化了 并且属性注入了）
    拦截所有的
 */
@Component
public class MyBeanPostProcessor implements BeanPostProcessor {
    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        if (&quot;lazyResult&quot;.equalsIgnoreCase(beanName)){
            System.out.println(&quot;MyBeanPostProcessor before&quot;);
        }
        return bean;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        if (&quot;lazyResult&quot;.equalsIgnoreCase(beanName)){
            System.out.println(&quot;MyBeanPostProcessor After&quot;);
        }
        return bean;
    }
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;//XML配置文件中：    
&amp;lt;bean id=&quot;lazyResult&quot; class=&quot;com.lagou.edu.pojo.Result&quot;  init-method=&quot;initMethodTest&quot;&amp;gt;&amp;lt;/bean&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;//测试：
    @org.junit.Test
    public void testBeanLazy(){
        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;classpath:applicationContext.xml&quot;);
        Object lazyResult =  applicationContext.getBean(&quot;lazyResult&quot;);
        System.out.println(lazyResult);
        applicationContext.close();
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;打印出：&lt;br/&gt;&lt;img src=&quot;https://typora-files.oss-cn-beijing.aliyuncs.com/file/image-20201123014752288.png&quot; alt=&quot;image-20201123014752288&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-其他：&quot;&gt;4. 其他：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://typora-files.oss-cn-beijing.aliyuncs.com/file/image-20201123204958756.png&quot; alt=&quot;image-20201123204958756&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 24 Nov 2020 18:10:00 +0000</pubDate>
<dc:creator>邓晓晖</dc:creator>
<og:description>1. lazy-Init延迟加载 Bean对象的延迟加载（延迟创建） ApplicationContext 容器的默认⾏为是在启动服务器时将所有 singleton bean 提前进⾏实例化。提前实例</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/isdxh/p/14033760.html</dc:identifier>
</item>
<item>
<title>.NET 5 ORM  八大实用技巧  干货  - SqlSugar ORM - 孙凯旋</title>
<link>http://www.cnblogs.com/sunkaixuan/p/14033683.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunkaixuan/p/14033683.html</guid>
<description>&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;sqlsugar已经在第一时间完美兼容.NET5并且已经有人在使用了， 很多人都担心用了开源框架遇到问题无法解决，导致前功尽弃，使用SqlSugar你大可放心，除了有详细文档和几年的大量用户积累，&lt;/p&gt;
&lt;p&gt;SqlSugar还提供了完整的服务，让您的项目没有后顾之忧&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt; 简单易用、功能齐全、高性能、轻量级、服务齐全&lt;/p&gt;
&lt;p&gt;支持数据库：MySql、SqlServer、Sqlite、Oracle 、 postgresql、达梦、人大金仓&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;免费服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、基本用法咨询&lt;/p&gt;
&lt;p&gt;2、BUG提交&lt;/p&gt;
&lt;p&gt;3、采纳建议和需求&lt;/p&gt;
&lt;p&gt;4、代码开源 可用于任何商用项目 不收取费用 下载&lt;/p&gt;
&lt;p&gt;5、qq交流群讨论 995692596(空闲) 654015377（1800/2000 拥挤） 726648662((已满) 225982985 (已满)&lt;/p&gt;

&lt;h3&gt;实践技巧1 ：性能监控&lt;/h3&gt;
&lt;p&gt;通过该功能我们能轻松的监控到执行超过1秒的sql，并且可以拿 到他的 C#代码文件和行数 和方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
  SqlSugarClient db = &lt;span&gt;new&lt;/span&gt; SqlSugarClient(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConnectionConfig()
   {
                DbType &lt;/span&gt;=&lt;span&gt; DbType.SqlServer,
                ConnectionString &lt;/span&gt;=&lt;span&gt; Config.ConnectionString,
                InitKeyType &lt;/span&gt;=&lt;span&gt; InitKeyType.Attribute,
                IsAutoCloseConnection &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
               
   });
    db.Aop.OnLogExecuted &lt;/span&gt;= (sql, p) =&amp;gt;&lt;span&gt;
    {
         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行时间超过1秒&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (db.Ado.SqlExecutionTime.TotalSeconds &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) 
        {&lt;br/&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;代码CS文件名&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; fileName=&lt;span&gt; db.Ado.SqlStackTrace.FirstFileName;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;代码行数&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; fileLine =&lt;span&gt; db.Ado.SqlStackTrace.FirstLine;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;方法名&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; FirstMethodName =&lt;span&gt; db.Ado.SqlStackTrace.FirstMethodName;&lt;br/&gt;//sql&lt;br/&gt;var exesql=sql;&lt;br/&gt;//参数&lt;br/&gt;var sqlpars=p;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;db.Ado.SqlStackTrace.MyStackTraceList[1].xxx 获取上层方法的信息&lt;/span&gt;
&lt;span&gt;         }
   };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;实践功能2：数据变化监控&lt;/h3&gt;
&lt;p&gt;当我们的代码删了哪具体的代码，添加了具体的代码，修改了哪个列如果没有强大的日志功能将你将无法找回，SqlSugar可以轻松实现高安全级别的数据日志&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
db.Aop.OnDiffLogEvent = it =&amp;gt;&lt;span&gt;
{
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; editBeforeData = it.BeforeData;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;操作前记录  包含： 字段描述 列名 值 表名 表描述&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; editAfterData = it.AfterData;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;操作后记录   包含： 字段描述 列名 值  表名 表描述&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; sql =&lt;span&gt; it.Sql;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; parameter =&lt;span&gt; it.Parameters;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; data = it.BusinessData;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这边会显示你传进来的对象&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; time =&lt;span&gt; it.Time;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;  diffType=it.DiffType;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;enum insert 、update and delete  
                  
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Write logic&lt;/span&gt;
&lt;span&gt;};
  
//添加
db.Insertable(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;beforeName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; })
.EnableDiffLogEvent(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; {  title=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我是插入&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}) //启用日志并添加业务对象
.ExecuteReturnIdentity();
  &lt;br/&gt;//修改
db.Updateable&lt;/span&gt;&amp;lt;Student&amp;gt;(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Student()
            {
                Id &lt;/span&gt;=&lt;span&gt; id,
                CreateTime &lt;/span&gt;=&lt;span&gt; DateTime.Now,
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;afterName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                SchoolId &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
            })
.EnableDiffLogEvent(&lt;/span&gt;&lt;span&gt;) //启动日志
.ExecuteCommand();
  &lt;br/&gt;//删除
db.Deleteable&lt;/span&gt;&amp;lt;Student&amp;gt;&lt;span&gt;(id)
.EnableDiffLogEvent(&lt;/span&gt;&lt;span&gt;)//启动日志
.ExecuteCommand();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;实践功能3：JSON类型完美支持&lt;/h3&gt;
&lt;p&gt;SqlSugar不但支持PgSql的Json array类型外，哪怕你的数据库没有JSON类型一样可以使用JSON对象进行存储&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
ublic &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UnitJsonTest
{
   [SqlSugar.SugarColumn(IsPrimaryKey &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;, IsIdentity = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    [SqlSugar.SugarColumn(ColumnDataType &lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;varchar(max)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, IsJson = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Order Order { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name{&lt;span&gt;get&lt;/span&gt;;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;;}
}
Db.Insertable(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; UnitJsonTest() { Name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;json1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,Order = &lt;span&gt;new&lt;/span&gt; Order { Id = &lt;span&gt;1&lt;/span&gt;, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;order1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; } }).ExecuteCommand();
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; list = Db.Queryable&amp;lt;UnitJsonTest&amp;gt;().ToList();
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;实践功能4：分库+分表+多库事务&lt;/h3&gt;
&lt;p&gt;1、动态创建数据库&lt;/p&gt;
&lt;p&gt;下面代码将会创建db1和db2数据库&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;string&lt;/span&gt; conn = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;server=.;uid=sa;pwd=haosql;database={0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; db = &lt;span&gt;new&lt;/span&gt; SqlSugarClient(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConnectionConfig()
{
DbType &lt;/span&gt;=&lt;span&gt; SqlSugar.DbType.SqlServer,
ConnectionString &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.Format(conn, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;db1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)，
InitKeyType&lt;/span&gt;=&lt;span&gt;InitKeyType.Attribute
});
db.DbMaintenance.CreateDatabase();
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; db2 = &lt;span&gt;new&lt;/span&gt; SqlSugarClient(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConnectionConfig()
{
DbType &lt;/span&gt;=&lt;span&gt; SqlSugar.DbType.SqlServer,
ConnectionString &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.Format(conn, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;db2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
});
db2.DbMaintenance.CreateDatabase();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、动态建表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;下面代码将生成生Order1和Order2 两张表

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意db必须是同一个上下文&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; db = &lt;span&gt;new&lt;/span&gt; SqlSugarClient(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConnectionConfig()
{
DbType &lt;/span&gt;=&lt;span&gt; SqlSugar.DbType.SqlServer,
ConnectionString &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.;xxx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
InitKeyType&lt;/span&gt;=InitKeyType.Attribute &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个属性必须这么设置&lt;/span&gt;
&lt;span&gt;
});

db.MappingTables.Add(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(Order).Name, &lt;span&gt;typeof&lt;/span&gt;(Order).Name + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
db.CodeFirst.InitTables(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(Order));
db.MappingTables.Add(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(Order).Name, &lt;span&gt;typeof&lt;/span&gt;(Order).Name + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
db.CodeFirst.InitTables(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(Order));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、实体增、删、查、改&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; list= db.Queryable&amp;lt;Order&amp;gt;().AS(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Order1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).ToList();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询Order1的表
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;增 删 改用法和查询一样 Inasertable().AS Deleteable().AS Updateable().As&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4、跨库联表查询&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; list = db.Queryable&amp;lt;Order, OrderItem, Custom&amp;gt;((o, i, c) =&amp;gt; o.Id == i.OrderId&amp;amp;&amp;amp;c.Id ==&lt;span&gt; o.CustomId)
.AS(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xx.order&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
.AS&lt;/span&gt;&amp;lt;OrderItem&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yy.OrderItem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
.AS&lt;/span&gt;&amp;lt;Custom&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zz.Custom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
.Select&lt;/span&gt;&amp;lt;ViewOrder&amp;gt;&lt;span&gt;()
.ToList();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5、多切换&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
SqlSugarClient db = &lt;span&gt;new&lt;/span&gt; SqlSugarClient(&lt;span&gt;new&lt;/span&gt; List&amp;lt;ConnectionConfig&amp;gt;&lt;span&gt;()
{
&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ConnectionConfig(){ ConfigId=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, DbType=&lt;span&gt;DbType.SqlServer, 
ConnectionString&lt;/span&gt;=Config.ConnectionString,InitKeyType=InitKeyType.Attribute,IsAutoCloseConnection=&lt;span&gt;true&lt;/span&gt;&lt;span&gt; },
&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ConnectionConfig(){ ConfigId=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, DbType=&lt;span&gt;DbType.MySql, 
ConnectionString&lt;/span&gt;=Config.ConnectionString4 ,InitKeyType=InitKeyType.Attribute ,IsAutoCloseConnection=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;}
});

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;库1&lt;/span&gt;
&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
{
db.BeginTran();
db.Deleteable&lt;/span&gt;&amp;lt;Order&amp;gt;&lt;span&gt;().ExecuteCommand();

db.ChangeDatabase(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用库2&lt;/span&gt;
db.Deleteable&amp;lt;Order&amp;gt;&lt;span&gt;().ExecuteCommand();


db.CommitTran();
}
&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;
{
db.RollbackTran();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;实践功能5：无限级别的级联插入&lt;/h3&gt;
&lt;p&gt;使用sqlsugar只需要配置主键，不需要实体配置任何外键关系就能实现级联插入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;有自动赋值的外键&lt;/span&gt;
db.Insertable(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Order()
{
    Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;订单 1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        CustomId &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
        Price &lt;/span&gt;= &lt;span&gt;100&lt;/span&gt;&lt;span&gt;,
        CreateTime &lt;/span&gt;=&lt;span&gt; DateTime.Now,
        Id &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自增列&lt;/span&gt;
        Items = &lt;span&gt;new&lt;/span&gt; List&amp;lt;OrderItem&amp;gt;&lt;span&gt;() {
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; OrderItem(){
                    CreateTime&lt;/span&gt;=&lt;span&gt;DateTime.Now,
                    OrderId&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要自动获取订单的自增列&lt;/span&gt;
                    Price=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                    ItemId&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
                }
            }
    })
    .AddSubList(it &lt;/span&gt;=&amp;gt; it.Items.First().OrderId  )&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置item表的OrderId等于订单自增列&lt;/span&gt;
&lt;span&gt;    .ExecuteReturnPrimaryKey();
 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;实践功能6：全自动二级缓存&lt;/h3&gt;
&lt;p&gt;当我们用到Redis等操作时，更新数据时需要及时去清理缓存会变的非常复杂，SqlSugar支持多表缓存，并且更新其中一张表并且能够清除缓存&lt;/p&gt;
&lt;p&gt;二缓缓存是将结果集进行缓存，当SQL和参数没发生变化的时候从缓存里面读取数据，减少数据库的读写操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
ICacheService myCache = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpRuntimeCache();

  SqlSugarClient db &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SqlSugarClient(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConnectionConfig()

  {

                ConnectionString &lt;/span&gt;=&lt;span&gt; Config.ConnectionString,

                DbType &lt;/span&gt;=&lt;span&gt; DbType.SqlServer,

                IsAutoCloseConnection &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,

                ConfigureExternalServices &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConfigureExternalServices()

                {

                    DataInfoCacheService &lt;/span&gt;= myCache &lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置我们创建的缓存类&lt;/span&gt;
&lt;span&gt;
                }

   });

db.Queryable&lt;/span&gt;&amp;lt;Student&amp;gt;().Where(it =&amp;gt; it.Id &amp;gt; &lt;span&gt;0&lt;/span&gt;).WithCache().ToList();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置缓存默认一天&lt;/span&gt;
&lt;span&gt;
db.Queryable&lt;/span&gt;&amp;lt;Student&amp;gt;().WithCache(&lt;span&gt;1000&lt;/span&gt;).ToList();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置具体过期时间&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;删除数据同时更新缓存，插入用和更新也一样的用法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
db.Deleteable&amp;lt;Student&amp;gt;().RemoveDataCache().Where(it =&amp;gt; it.Id == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;).ExecuteCommand();

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;remove所有引用Student表的缓存，包含多表查询&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;实践功能7：支持对数据库的多种操作&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;th&gt;返回类型&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;GetDataBaseList&lt;/td&gt;
&lt;td&gt;获取所有数据库名称&lt;/td&gt;
&lt;td&gt;List&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GetViewInfoList&lt;/td&gt;
&lt;td&gt;获取所有视图&lt;/td&gt;
&lt;td&gt;List&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GetTableInfoList&lt;/td&gt;
&lt;td&gt;获取所有表&lt;/td&gt;
&lt;td&gt;List&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;GetColumnInfosByTableName&lt;/td&gt;
&lt;td&gt;获取列根据表名&lt;/td&gt;
&lt;td&gt;List&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GetIsIdentities&lt;/td&gt;
&lt;td&gt;获取自增列&lt;/td&gt;
&lt;td&gt;List&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GetPrimaries&lt;/td&gt;
&lt;td&gt;获取主键&lt;/td&gt;
&lt;td&gt;List&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IsAnyTable&lt;/td&gt;
&lt;td&gt;表是否存在&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IsAnyColumn&lt;/td&gt;
&lt;td&gt;列是否存在&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IsPrimaryKey&lt;/td&gt;
&lt;td&gt;主键是否存在&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IsIdentity&lt;/td&gt;
&lt;td&gt;自增是否存在&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IsAnyConstraint&lt;/td&gt;
&lt;td&gt;约束是否存在&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DropTable&lt;/td&gt;
&lt;td&gt;删除表&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TruncateTable&lt;/td&gt;
&lt;td&gt;清空表&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;CreateTable&lt;/td&gt;
&lt;td&gt;创建列（不建议使用，用CodeFirst建表）&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;AddColumn&lt;/td&gt;
&lt;td&gt;添加列&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;UpdateColumn&lt;/td&gt;
&lt;td&gt;更新列&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;AddPrimaryKey&lt;/td&gt;
&lt;td&gt;添加主键&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DropConstraint&lt;/td&gt;
&lt;td&gt;删除约束&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BackupDataBase&lt;/td&gt;
&lt;td&gt;备份库&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DropColumn&lt;/td&gt;
&lt;td&gt;删除列&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;RenameColumn&lt;/td&gt;
&lt;td&gt;重命名列&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;AddTableRemark&lt;/td&gt;
&lt;td&gt;添加表描述&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;AddColumnRemark&lt;/td&gt;
&lt;td&gt;添加列描述&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DeleteColumnRemark&lt;/td&gt;
&lt;td&gt;删除列描述&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;RenameTable&lt;/td&gt;
&lt;td&gt;重命名表&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;实践功能8：动态SQL完美防注入方案&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
var orderField = &quot;order';drop table order&quot;;
var orderInfo= db.EntityMaintenance.GetEntityInfo&amp;lt;Order&amp;gt;();
 if (orderInfo.Columns.Any(it =&amp;gt; it.DbColumnName != orderField)) 
{
    throw new Exception(&quot;请不要非法注入&quot;);
}
 db.Queryable&amp;lt;Order&amp;gt;().OrderBy(orderField).ToList();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;SqlSugar一直在努力的变的更好，所有功能都是来自客户并且经受过长期的用户实践，为了能够给我更多动力&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;原码下载：&lt;/strong&gt;&lt;/span&gt; &lt;a href=&quot;https://github.com/sunkaixuan/SqlSugar&quot; target=&quot;_blank&quot;&gt;https://github.com/sunkaixuan/SqlSugar &lt;/a&gt;      只需你点赞，让我动力十足&lt;/p&gt;


</description>
<pubDate>Tue, 24 Nov 2020 17:03:00 +0000</pubDate>
<dc:creator>孙凯旋</dc:creator>
<og:description>介绍 sqlsugar已经在第一时间完美兼容.NET5并且已经有人在使用了， 很多人都担心用了开源框架遇到问题无法解决，导致前功尽弃，使用SqlSugar你大可放心，除了有详细文档和几年的大量用户积累</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/sunkaixuan/p/14033683.html</dc:identifier>
</item>
<item>
<title>Docker这么火爆。章节一：带你详尽了解Docker容器的介绍及使用 - Java极客思维</title>
<link>http://www.cnblogs.com/xgx120413/p/14033640.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xgx120413/p/14033640.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/1c7c34172fd04044896905248dd0c70d.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;        很多小伙伴可能在工作中都听说过Docker，但是实际工作中却没有使用过，听得多了，也对Docker内心有一种很深切的想了解，但是因为各种原因而不知道如何去了解而发愁，不要急，这篇文章带你认识Docker！&lt;/p&gt;

&lt;p&gt;一、 Docker简介&lt;/p&gt;
&lt;p&gt;        Docker是一个开源项目，诞生于2013年初，最初是dotCloud公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 &lt;a href=&quot;https://github.com/docker/docker&quot;&gt;GitHub&lt;/a&gt; 上进行维护。&lt;/p&gt;
&lt;p&gt;        Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。Docker 的基础是 Linux 容器（LXC）等技术。&lt;/p&gt;
&lt;p&gt;        背景：云计算兴起后，服务器硬件扩展非常便利，软件服务部署成为了瓶颈，docker趁势而兴。&lt;/p&gt;
&lt;p&gt;二、 为什么使用Docker？&lt;/p&gt;
&lt;p&gt;①、 容器的启动可以在秒级实现，比传统的虚拟机方式要快得多&lt;/p&gt;
&lt;p&gt;②、 对系统资源的利用率很高，一台主机上可以同时运行数千个 Docker 容器&lt;/p&gt;
&lt;p&gt;③、 docker的出现，让开发/测试/线上的环境部署，成为便利一条龙。&lt;/p&gt;
&lt;p&gt;1、 更快速的交付和部署&lt;/p&gt;
&lt;p&gt;        对开发和运维（devop）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。&lt;/p&gt;
&lt;p&gt;        开发者可以使用一个标准的镜像来构建一套开发容器，开发完成之后，运维人员可以直接使用这个容器来部署代码。Docker 可以快速创建容器，快速迭代应用程序，并让整个过程全程可见，使团队中的其他成员更容易理解应用程序是如何创建和工作的。Docker 容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间。&lt;/p&gt;
&lt;p&gt;2、 更高效的虚拟化&lt;/p&gt;
&lt;p&gt;        Docker 容器的运行不需要额外的 hypervisor 支持，它是内核级的虚拟化，因此可以实现更高的性能和效率。&lt;/p&gt;
&lt;p&gt;3、 更轻松的迁移和扩展&lt;/p&gt;
&lt;p&gt;        Docker 容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。这种兼容性可以让用户把一个应用程序从一个平台直接迁移到另外一个。&lt;/p&gt;
&lt;p&gt;4、更简单的管理&lt;/p&gt;
&lt;p&gt;        使用 Docker，只需要小小的修改，就可以替代以往大量的更新工作。所有的修改都以增量的方式被分发和更新，从而实现自动化并且高效的管理。&lt;/p&gt;
&lt;p&gt;5、 对比传统虚拟机&lt;/p&gt;
&lt;div class=&quot;table-box&quot;&gt;
&lt;table&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;特性&lt;/td&gt;
&lt;td&gt;容器&lt;/td&gt;
&lt;td&gt;虚拟机&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;启动&lt;/td&gt;
&lt;td&gt;秒级&lt;/td&gt;
&lt;td&gt;分钟级&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;硬盘使用&lt;/td&gt;
&lt;td&gt;一般为MB&lt;/td&gt;
&lt;td&gt;一般为GB&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;性能&lt;/td&gt;
&lt;td&gt;接近原生&lt;/td&gt;
&lt;td&gt;弱于Docker&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;系统支持量&lt;/td&gt;
&lt;td&gt;单机支持上千个容器&lt;/td&gt;
&lt;td&gt;一般几十个&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;三、 Docker基本概念&lt;/p&gt;
&lt;p&gt;1、 Docker架构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/d824b1ad180a2f6940d03d4cbf1ad6f2.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;host：主机载体，也就是Docker安装的地方&lt;/p&gt;
&lt;p&gt;继承类比方式：&lt;/p&gt;
&lt;p&gt;    Class2 extents Class1 相当于 Object o = new Class2&lt;/p&gt;
&lt;p&gt;    此时，o对象的结构中，有Class1的成员结构&lt;/p&gt;
&lt;p&gt;    image2 extents image1 相当于 Container c = new image2&lt;/p&gt;
&lt;p&gt;    此时，c容器中，有image1的文件&lt;/p&gt;

&lt;p&gt;2、Docker镜像&lt;/p&gt;
&lt;p&gt;①、 Docker 镜像就是一个只读的模板。&lt;/p&gt;
&lt;p&gt;（例如：一个镜像可以包含一个完整的 ubuntu 操作系统环境，里面仅安装了 Apache 或用户需要的其它应用程序。）&lt;/p&gt;
&lt;p&gt;②、 镜像可以用来创建 Docker 容器。&lt;/p&gt;
&lt;p&gt;③、 Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;3、 Docker容器&lt;/p&gt;
&lt;p&gt;①、 Docker 利用容器来运行应用。&lt;/p&gt;
&lt;p&gt;②、 容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。&lt;/p&gt;
&lt;p&gt;③、 可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;4、 Docker仓库&lt;/p&gt;
&lt;p&gt;①、 仓库是集中存放镜像文件的场所。有时候会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分。实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。&lt;/p&gt;
&lt;p&gt;②、 仓库分为公开仓库（Public）和私有仓库（Private）两种形式。&lt;/p&gt;
&lt;p&gt;③、 最大的公开仓库是 &lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;，存放了数量庞大的镜像供用户下载。&lt;/p&gt;
&lt;p&gt;④、 当然，用户也可以在本地网络内创建一个私有仓库。&lt;/p&gt;
&lt;p&gt;⑤、 当用户创建了自己的镜像之后就可以使用 push 命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上 pull 下来就可以了&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;5、 容器、镜像的运行关系&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/a7a495b946491680fb633b9e792bc0d3.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;​下一章节：《Docker安装部署及基本操作》&lt;/p&gt;
&lt;p&gt;编后语&lt;/p&gt;
&lt;p&gt;        公众号【Java极客思维】将​会针对Docker做一个Docker的系列章节来由浅入深的介绍Docker及深入的使用，有兴趣的小伙伴可以关注公众号并转发文章，让更多的小伙伴看到关于【Docker系列的介绍及使用】&lt;/p&gt;
&lt;p&gt;更多精彩敬请关注公众号&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/9b371f98aab211f53489c0bbd23fd8ba.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Java极客思维&lt;/p&gt;
&lt;p&gt;微信扫一扫，关注公众号​&lt;/p&gt;
</description>
<pubDate>Tue, 24 Nov 2020 16:09:00 +0000</pubDate>
<dc:creator>Java极客思维</dc:creator>
<og:description>前言 很多小伙伴可能在工作中都听说过Docker，但是实际工作中却没有使用过，听得多了，也对Docker内心有一种很深切的想了解，但是因为各种原因而不知道如何去了解而发愁，不要急，这篇文章带你认识Do</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xgx120413/p/14033640.html</dc:identifier>
</item>
<item>
<title>MySQL如何实现万亿级数据存储？ - 冰河团队</title>
<link>http://www.cnblogs.com/binghe001/p/14033618.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/binghe001/p/14033618.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;业界对系统的高可用有着基本的要求，简单的说，这些要求可以总结为如下所示。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;系统架构中不存在单点问题。&lt;/li&gt;
&lt;li&gt;可以最大限度的保障服务的可用性。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;一般情况下系统的高可用可以用几个9来评估。所谓的几个9就是系统可以保证对外提供的服务的时间达到总时间的百分比。例如如果需要达到99.99的高可用，则系统全年发生故障的总时间不能超过52分钟。&lt;/p&gt;
&lt;h2 id=&quot;系统高可用架构&quot;&gt;系统高可用架构&lt;/h2&gt;
&lt;p&gt;我们既然需要实现系统的高可用架构，那么，我们到底需要搭建一个什么样的系统架构呢？我们可以将需要搭建的系统架构简化成下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124232619889.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;服务器规划&quot;&gt;服务器规划&lt;/h2&gt;
&lt;p&gt;由于我电脑资源有限，我这里在4台服务器上搭建高可用环境，大家可以按照本文将环境扩展到更多的服务器，搭建步骤都是一样的。&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;主机名&lt;/th&gt;
&lt;th&gt;IP地址&lt;/th&gt;
&lt;th&gt;安装的服务&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;binghe151&lt;/td&gt;
&lt;td&gt;192.168.175.151&lt;/td&gt;
&lt;td&gt;Mycat、Zookeeper、MySQL、HAProxy、Keepalived、Xinetd&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;binghe152&lt;/td&gt;
&lt;td&gt;192.168.175.152&lt;/td&gt;
&lt;td&gt;Zookeeper、MySQL&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;binghe153&lt;/td&gt;
&lt;td&gt;192.168.175.153&lt;/td&gt;
&lt;td&gt;Zookeeper、MySQL&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;binghe154&lt;/td&gt;
&lt;td&gt;192.168.175.154&lt;/td&gt;
&lt;td&gt;Mycat、MySQL、HAProxy、Keepalived、Xinetd&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;binghe155&lt;/td&gt;
&lt;td&gt;192.168.175.155&lt;/td&gt;
&lt;td&gt;MySQL&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：HAProxy和Keepalived最好和Mycat部署在同一台服务器上。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装mysql&quot;&gt;安装MySQL&lt;/h2&gt;
&lt;p&gt;小伙伴们可以关注【冰河技术】微信公众号，参考《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3MzE1NTIzNA==&amp;amp;mid=2247483696&amp;amp;idx=1&amp;amp;sn=11b3a10e4a000a809b2e6ffa684968a3&amp;amp;chksm=cee51efdf99297eb496eef7789d8cf09633839d39d8240e0d7ca0a9920226894c68610bd7e35&amp;amp;token=252189671&amp;amp;lang=zh_CN#rd&quot;&gt;MySQL之——源码编译MySQL8.x+升级gcc+升级cmake（亲测完整版）&lt;/a&gt;》&lt;/p&gt;
&lt;h2 id=&quot;安装jdk&quot;&gt;安装JDK&lt;/h2&gt;
&lt;p&gt;由于Mycat和Zookeeper的运行需要JDK环境的支持，所有我们需要在每台服务器上安装JDK环境。&lt;/p&gt;
&lt;p&gt;这里，我以在binghe151服务器上安装JDK为例，其他服务器的安装方式与在binghe151服务器上的安装方式相同。安装步骤如下所示。&lt;/p&gt;
&lt;p&gt;（1）到JDK官网下载JDK 1.8版本，JDK1.8的下载地址为：&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注：我下载的JDK安装包版本为：jdk-8u212-linux-x64.tar.gz，如果JDK版本已更新，大家下载对应的版本即可。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（2）将下载的jdk-8u212-linux-x64.tar.gz安装包上传到binghe151服务器的/usr/local/src目录下。&lt;/p&gt;
&lt;p&gt;（3）解压jdk-8u212-linux-x64.tar.gz文件，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;tar -zxvf jdk-8u212-linux-x64.tar.gz
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）将解压的jdk1.8.0_212目录移动到binghe151服务器下的/usr/local目录下，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;mv jdk1.8.0_212/ /usr/local/src/
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）配置JDK系统环境变量，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;vim /etc/profile
JAVA_HOME=/usr/local/jdk1.8.0_212
CLASS_PATH=.:$JAVA_HOME/lib
PATH=$JAVA_HOME/bin:$PATH
export JAVA_HOME CLASS_PATH PATH
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使系统环境变量生效，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;source /etc/profile
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（6）查看JDK版本，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# java -version
java version &quot;1.8.0_212&quot;
Java(TM) SE Runtime Environment (build 1.8.0_212-b10)
Java HotSpot(TM) 64-Bit Server VM (build 25.212-b10, mixed mode)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果显示，正确输出了JDK的版本信息，说明JDK安装成功。&lt;/p&gt;
&lt;h2 id=&quot;安装mycat&quot;&gt;安装Mycat&lt;/h2&gt;
&lt;p&gt;下载Mycat 1.6.7.4 Release版本，解压到服务器的/usr/local/mycat目录下，并配置Mycat的系统环境变量，随后，配置Mycat的配置文件，Mycat的最终结果配置如下所示。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;schema.xml&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&amp;gt;
&amp;lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&amp;gt;

        &amp;lt;schema name=&quot;shop&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;1000&quot;&amp;gt;
                &amp;lt;!--&amp;lt;table name=&quot;order_master&quot; primaryKey=&quot;order_id&quot; dataNode = &quot;ordb&quot;/&amp;gt;--&amp;gt;
                &amp;lt;table name=&quot;order_master&quot; primaryKey=&quot;order_id&quot; dataNode = &quot;orderdb01,orderdb02,orderdb03,orderdb04&quot; rule=&quot;order_master&quot; autoIncrement=&quot;true&quot;&amp;gt;
                        &amp;lt;childTable name=&quot;order_detail&quot; primaryKey=&quot;order_detail_id&quot; joinKey=&quot;order_id&quot; parentKey=&quot;order_id&quot; autoIncrement=&quot;true&quot;/&amp;gt;
                &amp;lt;/table&amp;gt;
                &amp;lt;table name=&quot;order_cart&quot; primaryKey=&quot;cart_id&quot; dataNode = &quot;ordb&quot;/&amp;gt;
                &amp;lt;table name=&quot;order_customer_addr&quot; primaryKey=&quot;customer_addr_id&quot; dataNode = &quot;ordb&quot;/&amp;gt;
                &amp;lt;table name=&quot;region_info&quot; primaryKey=&quot;region_id&quot; dataNode = &quot;ordb,prodb,custdb&quot; type=&quot;global&quot;/&amp;gt;
                &amp;lt;table name=&quot;serial&quot; primaryKey=&quot;id&quot; dataNode = &quot;ordb&quot;/&amp;gt;
                &amp;lt;table name=&quot;shipping_info&quot; primaryKey=&quot;ship_id&quot; dataNode = &quot;ordb&quot;/&amp;gt;
                &amp;lt;table name=&quot;warehouse_info&quot; primaryKey=&quot;w_id&quot; dataNode = &quot;ordb&quot;/&amp;gt;
                &amp;lt;table name=&quot;warehouse_proudct&quot; primaryKey=&quot;wp_id&quot; dataNode = &quot;ordb&quot;/&amp;gt;
                
                &amp;lt;table name=&quot;product_brand_info&quot; primaryKey=&quot;brand_id&quot; dataNode = &quot;prodb&quot;/&amp;gt;
                &amp;lt;table name=&quot;product_category&quot; primaryKey=&quot;category_id&quot; dataNode = &quot;prodb&quot;/&amp;gt;
                &amp;lt;table name=&quot;product_comment&quot; primaryKey=&quot;comment_id&quot; dataNode = &quot;prodb&quot;/&amp;gt;
                &amp;lt;table name=&quot;product_info&quot; primaryKey=&quot;product_id&quot; dataNode = &quot;prodb&quot;/&amp;gt;
                &amp;lt;table name=&quot;product_pic_info&quot; primaryKey=&quot;product_pic_id&quot; dataNode = &quot;prodb&quot;/&amp;gt;
                &amp;lt;table name=&quot;product_supplier_info&quot; primaryKey=&quot;supplier_id&quot; dataNode = &quot;prodb&quot;/&amp;gt;
                
                &amp;lt;table name=&quot;customer_balance_log&quot; primaryKey=&quot;balance_id&quot; dataNode = &quot;custdb&quot;/&amp;gt;
                &amp;lt;table name=&quot;customer_inf&quot; primaryKey=&quot;customer_inf_id&quot; dataNode = &quot;custdb&quot;/&amp;gt;
                &amp;lt;table name=&quot;customer_level_inf&quot; primaryKey=&quot;customer_level&quot; dataNode = &quot;custdb&quot;/&amp;gt;
                &amp;lt;table name=&quot;customer_login&quot; primaryKey=&quot;customer_id&quot; dataNode = &quot;custdb&quot;/&amp;gt;
                &amp;lt;table name=&quot;customer_login_log&quot; primaryKey=&quot;login_id&quot; dataNode = &quot;custdb&quot;/&amp;gt;
                &amp;lt;table name=&quot;customer_point_log&quot; primaryKey=&quot;point_id&quot; dataNode = &quot;custdb&quot;/&amp;gt;
                
        &amp;lt;/schema&amp;gt;
        
        &amp;lt;dataNode name=&quot;mycat&quot; dataHost=&quot;binghe151&quot; database=&quot;mycat&quot; /&amp;gt;
         
        &amp;lt;dataNode name=&quot;ordb&quot; dataHost=&quot;binghe152&quot; database=&quot;order_db&quot; /&amp;gt;
        &amp;lt;dataNode name=&quot;prodb&quot; dataHost=&quot;binghe153&quot; database=&quot;product_db&quot; /&amp;gt;
        &amp;lt;dataNode name=&quot;custdb&quot; dataHost=&quot;binghe154&quot; database=&quot;customer_db&quot; /&amp;gt;
        
        &amp;lt;dataNode name=&quot;orderdb01&quot; dataHost=&quot;binghe152&quot; database=&quot;orderdb01&quot; /&amp;gt;
        &amp;lt;dataNode name=&quot;orderdb02&quot; dataHost=&quot;binghe152&quot; database=&quot;orderdb02&quot; /&amp;gt;
        &amp;lt;dataNode name=&quot;orderdb03&quot; dataHost=&quot;binghe153&quot; database=&quot;orderdb03&quot; /&amp;gt;
        &amp;lt;dataNode name=&quot;orderdb04&quot; dataHost=&quot;binghe153&quot; database=&quot;orderdb04&quot; /&amp;gt;
        
        &amp;lt;dataHost name=&quot;binghe151&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;
                          writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&amp;gt;
                &amp;lt;heartbeat&amp;gt;select user()&amp;lt;/heartbeat&amp;gt;
                &amp;lt;writeHost host=&quot;binghe51&quot; url=&quot;192.168.175.151:3306&quot; user=&quot;mycat&quot; password=&quot;mycat&quot;/&amp;gt;
        &amp;lt;/dataHost&amp;gt;
        
        &amp;lt;dataHost name=&quot;binghe152&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;
                          writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&amp;gt;
                &amp;lt;heartbeat&amp;gt;select user()&amp;lt;/heartbeat&amp;gt;
                &amp;lt;writeHost host=&quot;binghe52&quot; url=&quot;192.168.175.152:3306&quot; user=&quot;mycat&quot; password=&quot;mycat&quot;/&amp;gt;
        &amp;lt;/dataHost&amp;gt;
        
        &amp;lt;dataHost name=&quot;binghe153&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;
                          writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&amp;gt;
                &amp;lt;heartbeat&amp;gt;select user()&amp;lt;/heartbeat&amp;gt;
                &amp;lt;writeHost host=&quot;binghe53&quot; url=&quot;192.168.175.153:3306&quot; user=&quot;mycat&quot; password=&quot;mycat&quot;/&amp;gt;
        &amp;lt;/dataHost&amp;gt;
        
        &amp;lt;dataHost name=&quot;binghe154&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;
                          writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&amp;gt;
                &amp;lt;heartbeat&amp;gt;select user()&amp;lt;/heartbeat&amp;gt;
                &amp;lt;writeHost host=&quot;binghe54&quot; url=&quot;192.168.175.154:3306&quot; user=&quot;mycat&quot; password=&quot;mycat&quot;/&amp;gt;
        &amp;lt;/dataHost&amp;gt;
        
&amp;lt;/mycat:schema&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;server.xml&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE mycat:server SYSTEM &quot;server.dtd&quot;&amp;gt;
&amp;lt;mycat:server xmlns:mycat=&quot;http://io.mycat/&quot;&amp;gt;
        &amp;lt;system&amp;gt;
                &amp;lt;property name=&quot;useHandshakeV10&quot;&amp;gt;1&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;defaultSqlParser&quot;&amp;gt;druidparser&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;serverPort&quot;&amp;gt;3307&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;managerPort&quot;&amp;gt;3308&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;nonePasswordLogin&quot;&amp;gt;0&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;bindIp&quot;&amp;gt;0.0.0.0&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;charset&quot;&amp;gt;utf8mb4&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;frontWriteQueueSize&quot;&amp;gt;2048&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;txIsolation&quot;&amp;gt;2&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;processors&quot;&amp;gt;2&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;idleTimeout&quot;&amp;gt;1800000&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;sqlExecuteTimeout&quot;&amp;gt;300&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;useSqlStat&quot;&amp;gt;0&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;useGlobleTableCheck&quot;&amp;gt;0&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;sequenceHandlerType&quot;&amp;gt;1&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;defaultMaxLimit&quot;&amp;gt;1000&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;maxPacketSize&quot;&amp;gt;104857600&amp;lt;/property&amp;gt;
                
                &amp;lt;property name=&quot;sqlInterceptor&quot;&amp;gt;
                        io.mycat.server.interceptor.impl.StatisticsSqlInterceptor
                &amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;sqlInterceptorType&quot;&amp;gt;
                        UPDATE,DELETE,INSERT
                &amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;sqlInterceptorFile&quot;&amp;gt;/tmp/sql.txt&amp;lt;/property&amp;gt;
        &amp;lt;/system&amp;gt;
        
        &amp;lt;firewall&amp;gt;
                &amp;lt;whitehost&amp;gt;
                        &amp;lt;host user=&quot;mycat&quot; host=&quot;192.168.175.151&quot;&amp;gt;&amp;lt;/host&amp;gt;
                &amp;lt;/whitehost&amp;gt;
                &amp;lt;blacklist check=&quot;true&quot;&amp;gt;
                        &amp;lt;property name=&quot;noneBaseStatementAllow&quot;&amp;gt;true&amp;lt;/property&amp;gt;
                        &amp;lt;property name=&quot;deleteWhereNoneCheck&quot;&amp;gt;true&amp;lt;/property&amp;gt;
                &amp;lt;/blacklist&amp;gt;
        &amp;lt;/firewall&amp;gt;
        
        &amp;lt;user name=&quot;mycat&quot; defaultAccount=&quot;true&quot;&amp;gt;
                &amp;lt;property name=&quot;usingDecrypt&quot;&amp;gt;1&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;password&quot;&amp;gt;cTwf23RrpBCEmalp/nx0BAKenNhvNs2NSr9nYiMzHADeEDEfwVWlI6hBDccJjNBJqJxnunHFp5ae63PPnMfGYA==&amp;lt;/property&amp;gt;
                &amp;lt;property name=&quot;schemas&quot;&amp;gt;shop&amp;lt;/property&amp;gt;
        &amp;lt;/user&amp;gt;

&amp;lt;/mycat:server&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE mycat:rule SYSTEM &quot;rule.dtd&quot;&amp;gt;
&amp;lt;mycat:rule xmlns:mycat=&quot;http://io.mycat/&quot;&amp;gt;
        &amp;lt;tableRule name=&quot;order_master&quot;&amp;gt;
                &amp;lt;rule&amp;gt;
                        &amp;lt;columns&amp;gt;customer_id&amp;lt;/columns&amp;gt;
                        &amp;lt;algorithm&amp;gt;mod-long&amp;lt;/algorithm&amp;gt;
                &amp;lt;/rule&amp;gt;
        &amp;lt;/tableRule&amp;gt;
        
        &amp;lt;function name=&quot;mod-long&quot; class=&quot;io.mycat.route.function.PartitionByMod&quot;&amp;gt;
                &amp;lt;property name=&quot;count&quot;&amp;gt;4&amp;lt;/property&amp;gt;
        &amp;lt;/function&amp;gt;
&amp;lt;/mycat:rule&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;sequence_db_conf.properties&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-properties&quot;&gt;#sequence stored in datanode
GLOBAL=mycat
ORDER_MASTER=mycat
ORDER_DETAIL=mycat
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关于Mycat的配置，仅供大家参考，大家不一定非要按照我这里配置，根据自身业务需要配置即可。本文的重点是实现Mycat的高可用环境搭建。&lt;/p&gt;
&lt;p&gt;在MySQL中创建Mycat连接MySQL的账户，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;CREATE USER 'mycat'@'192.168.175.%' IDENTIFIED BY 'mycat';
ALTER USER 'mycat'@'192.168.175.%' IDENTIFIED WITH mysql_native_password BY 'mycat'; 
GRANT SELECT, INSERT, UPDATE, DELETE,EXECUTE  ON *.* TO 'mycat'@'192.168.175.%';
FLUSH PRIVILEGES;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;安装zookeeper集群&quot;&gt;安装Zookeeper集群&lt;/h2&gt;
&lt;p&gt;安装配置完JDK后，就需要搭建Zookeeper集群了，根据对服务器的规划，现将Zookeeper集群搭建在“binghe151”、“binghe152”、“binghe153”三台服务器上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.下载Zookeeper&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到Apache官网去下载Zookeeper的安装包，Zookeeper的安装包下载地址为：&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/&quot;&gt;https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/&lt;/a&gt;。具体如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124232546523.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;也可以在binghe151服务器上执行如下命令直接下载zookeeper-3.5.5。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.5.5/apache-zookeeper-3.5.5-bin.tar.gz
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行上述命令就可以直接把apache-zookeeper-3.5.5-bin.tar.gz安装包下载到binghe151服务器上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.安装并配置Zookeeper&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：（1）、（2）、（3）步都是在binghe152服务器上执行的。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（1）解压Zookeeper安装包&lt;/p&gt;
&lt;p&gt;在binghe151服务器上执行如下命令，将Zookeeper解压到“/usr/local/”目录下，并将Zookeeper目录修改为zookeeper-3.5.5。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;tar -zxvf apache-zookeeper-3.5.5-bin.tar.gz
mv apache-zookeeper-3.5.5-bin zookeeper-3.5.5
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）配置Zookeeper系统环境变量&lt;/p&gt;
&lt;p&gt;同样，需要在/etc/profile文件中配置Zookeeper系统环境变量，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;ZOOKEEPER_HOME=/usr/local/zookeeper-3.5.5
PATH=$ZOOKEEPER_HOME/bin:$PATH
export ZOOKEEPER_HOME PATH
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结合之前配置的JDK系统环境变量，/etc/profile，总体配置如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;MYSQL_HOME=/usr/local/mysql
JAVA_HOME=/usr/local/jdk1.8.0_212
MYCAT_HOME=/usr/local/mycat
ZOOKEEPER_HOME=/usr/local/zookeeper-3.5.5
MPC_HOME=/usr/local/mpc-1.1.0
GMP_HOME=/usr/local/gmp-6.1.2
MPFR_HOME=/usr/local/mpfr-4.0.2
CLASS_PATH=.:$JAVA_HOME/lib
LD_LIBRARY_PATH=$MPC_LIB_HOME/lib:$GMP_HOME/lib:$MPFR_HOME/lib:$LD_LIBRARY_PATH
PATH=$MYSQL_HOME/bin:$JAVA_HOME/bin:$ZOOKEEPER_HOME/bin:$MYCAT_HOME/bin:$PATH
export JAVA_HOME ZOOKEEPER_HOME MYCAT_HOME CLASS_PATH MYSQL_HOME MPC_LIB_HOME GMP_HOME MPFR_HOME LD_LIBRARY_PATH PATH
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）配置Zookeeper&lt;/p&gt;
&lt;p&gt;首先，需要将$ZOOKEEPER_HOME/conf（$ZOOKEEPER_HOME为Zookeeper的安装目录）目录下的zoo_sample.cfg文件修改为zoo.cfg文件。具体命令如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;cd /usr/local/zookeeper-3.5.5/conf/
mv zoo_sample.cfg zoo.cfg
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来修改zoo.cfg文件，修改后的具体内容如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;tickTime=2000
initLimit=10
syncLimit=5
dataDir=/usr/local/zookeeper-3.5.5/data
dataLogDir=/usr/local/zookeeper-3.5.5/dataLog
clientPort=2181
server.1=binghe151:2888:3888
server.2=binghe152:2888:3888
server.3=binghe153:2888:3888
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在Zookeeper的安装目录下创建data和dataLog两个文件夹。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;mkdir -p /usr/local/zookeeper-3.5.5/data
mkdir -p /usr/local/zookeeper-3.5.5/dataLog
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;切换到新建的data目录下，创建myid文件，具体内容为数字1，如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;cd /usr/local/zookeeper-3.5.5/data
vim myid
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将数字1写入到文件myid。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.将Zookeeper和系统环境变量文件复制到其他服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：（1）、（2）步是在binghe151服务器上执行的。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（1）复制Zookeeper到其他服务器&lt;/p&gt;
&lt;p&gt;根据对服务器的规划，现将Zookeeper复制到binghe152和binghe53服务器，具体执行操作如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;scp -r /usr/local/zookeeper-3.5.5/ binghe152:/usr/local/
scp -r /usr/local/zookeeper-3.5.5/ binghe153:/usr/local/
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）复制系统环境变量文件到其他服务器&lt;/p&gt;
&lt;p&gt;根据对服务器的规划，现将系统环境变量文件/etc/profile复制到binghe152、binghe153服务器，具体执行操作如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;scp /etc/profile binghe152:/etc/
scp /etc/profile binghe153:/etc/
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述操作可能会要求输入密码，根据提示输入密码即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.修改其他服务器上的myid文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;修改binghe152服务器上Zookeeper的myid文件内容为数字2，同时修改binghe153服务器上Zookeeper的myid文件内容为数字3。具体如下：&lt;/p&gt;
&lt;p&gt;在binghe152服务器上执行如下操作：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;echo &quot;2&quot; &amp;gt; /usr/local/zookeeper-3.5.5/data/myid
cat /usr/local/zookeeper-3.5.5/data/myid
2
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在binghe153服务器上执行如下操作：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;echo &quot;3&quot; &amp;gt; /usr/local/zookeeper-3.5.5/data/myid
cat /usr/local/zookeeper-3.5.5/data/myid
3
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;5.使环境变量生效&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分别在binghe151、binghe152、binghe153上执行如下操作，使系统环境变量生效。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;source /etc/profile
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;6.启动Zookeeper集群&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分别在binghe151、binghe152、binghe153上执行如下操作，启动Zookeeper集群。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;zkServer.sh start
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;7.查看Zookeeper集群的启动状态&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;binghe151服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# zkServer.sh status
ZooKeeper JMX enabled by default
Using config: /usr/local/zookeeper-3.5.5/bin/../conf/zoo.cfg
Client port found: 2181. Client address: localhost.
Mode: follower
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;binghe152服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe152 local]# zkServer.sh status
ZooKeeper JMX enabled by default
Using config: /usr/local/zookeeper-3.5.5/bin/../conf/zoo.cfg
Client port found: 2181. Client address: localhost.
Mode: leader
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;binghe153服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe153 ~]# zkServer.sh status
ZooKeeper JMX enabled by default
Using config: /usr/local/zookeeper-3.5.5/bin/../conf/zoo.cfg
Client port found: 2181. Client address: localhost.
Mode: follower
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，binghe151和binghe153服务器上的Zookeeper角色为follower，binghe152服务器上的Zookeeper角色为leader。&lt;/p&gt;
&lt;h2 id=&quot;初始化mycat配置到zookeeper集群&quot;&gt;初始化Mycat配置到Zookeeper集群&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：初始化Zookeeper中的数据，是在binghe151服务器上进行的，原因是之前我们已经在binghe151服务器上安装了Mycat。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.查看初始化脚本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Mycat安装目录下的bin目录中提供了一个init_zk_data.sh脚本文件，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# ll /usr/local/mycat/bin/
total 384
-rwxr-xr-x 1 root root   3658 Feb 26 17:10 dataMigrate.sh
-rwxr-xr-x 1 root root   1272 Feb 26 17:10 init_zk_data.sh
-rwxr-xr-x 1 root root  15701 Feb 28 20:51 mycat
-rwxr-xr-x 1 root root   2986 Feb 26 17:10 rehash.sh
-rwxr-xr-x 1 root root   2526 Feb 26 17:10 startup_nowrap.sh
-rwxr-xr-x 1 root root 140198 Feb 28 20:51 wrapper-linux-ppc-64
-rwxr-xr-x 1 root root  99401 Feb 28 20:51 wrapper-linux-x86-32
-rwxr-xr-x 1 root root 111027 Feb 28 20:51 wrapper-linux-x86-64
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;init_zk_data.sh脚本文件就是用来向Zookeeper中初始化Mycat的配置的，这个文件会通过读取Mycat安装目录下的conf目录下的配置文件，将其初始化到Zookeeper集群中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.复制Mycat配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，我们查看下Mycat安装目录下的conf目录下的文件信息，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# cd /usr/local/mycat/conf/
[root@binghe151 conf]# ll
total 108
-rwxrwxrwx 1 root root   92 Feb 26 17:10 autopartition-long.txt
-rwxrwxrwx 1 root root   51 Feb 26 17:10 auto-sharding-long.txt
-rwxrwxrwx 1 root root   67 Feb 26 17:10 auto-sharding-rang-mod.txt
-rwxrwxrwx 1 root root  340 Feb 26 17:10 cacheservice.properties
-rwxrwxrwx 1 root root 3338 Feb 26 17:10 dbseq.sql
-rwxrwxrwx 1 root root 3532 Feb 26 17:10 dbseq - utf8mb4.sql
-rw-r--r-- 1 root root   86 Mar  1 22:37 dnindex.properties
-rwxrwxrwx 1 root root  446 Feb 26 17:10 ehcache.xml
-rwxrwxrwx 1 root root 2454 Feb 26 17:10 index_to_charset.properties
-rwxrwxrwx 1 root root 1285 Feb 26 17:10 log4j2.xml
-rwxrwxrwx 1 root root  183 Feb 26 17:10 migrateTables.properties
-rwxrwxrwx 1 root root  271 Feb 26 17:10 myid.properties
-rwxrwxrwx 1 root root   16 Feb 26 17:10 partition-hash-int.txt
-rwxrwxrwx 1 root root  108 Feb 26 17:10 partition-range-mod.txt
-rwxrwxrwx 1 root root  988 Mar  1 16:59 rule.xml
-rwxrwxrwx 1 root root 3883 Mar  3 23:59 schema.xml
-rwxrwxrwx 1 root root  440 Feb 26 17:10 sequence_conf.properties
-rwxrwxrwx 1 root root   84 Mar  3 23:52 sequence_db_conf.properties
-rwxrwxrwx 1 root root   29 Feb 26 17:10 sequence_distributed_conf.properties
-rwxrwxrwx 1 root root   28 Feb 26 17:10 sequence_http_conf.properties
-rwxrwxrwx 1 root root   53 Feb 26 17:10 sequence_time_conf.properties
-rwxrwxrwx 1 root root 2420 Mar  4 15:14 server.xml
-rwxrwxrwx 1 root root   18 Feb 26 17:10 sharding-by-enum.txt
-rwxrwxrwx 1 root root 4251 Feb 28 20:51 wrapper.conf
drwxrwxrwx 2 root root 4096 Feb 28 21:17 zkconf
drwxrwxrwx 2 root root 4096 Feb 28 21:17 zkdownload
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，将Mycat安装目录下的conf目录下的schema.xml文件、server.xml文件、rule.xml文件和sequence_db_conf.properties文件复制到conf目录下的zkconf目录下，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;cp schema.xml server.xml rule.xml sequence_db_conf.properties zkconf/
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3.将Mycat配置信息写入Zookeeper集群&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行init_zk_data.sh脚本文件，向Zookeeper集群中初始化配置信息，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 bin]# /usr/local/mycat/bin/init_zk_data.sh  
o2020-03-08 20:03:13 INFO JAVA_CMD=/usr/local/jdk1.8.0_212/bin/java
o2020-03-08 20:03:13 INFO Start to initialize /mycat of ZooKeeper
o2020-03-08 20:03:14 INFO Done
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;根据以上信息得知，Mycat向Zookeeper写入初始化配置信息成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.验证Mycat配置信息是否成功写入Mycat&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们可以使用Zookeeper的客户端命令zkCli.sh 登录Zookeeper来验证Mycat的配置信息是否成功写入Mycat。&lt;/p&gt;
&lt;p&gt;首先，登录Zookeeper，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# zkCli.sh 
Connecting to localhost:2181
###################此处省略N行输出######################
Welcome to ZooKeeper!

WATCHER::

WatchedEvent state:SyncConnected type:None path:null
[zk: localhost:2181(CONNECTED) 0] 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，在Zookeeper命令行查看mycat的信息，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[zk: localhost:2181(CONNECTED) 0] ls /
[mycat, zookeeper]
[zk: localhost:2181(CONNECTED) 1] ls /mycat
[mycat-cluster-1]
[zk: localhost:2181(CONNECTED) 2] ls /mycat/mycat-cluster-1
[cache, line, rules, schema, sequences, server]
[zk: localhost:2181(CONNECTED) 3] 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，在/mycat/mycat-cluster-1下存在6个目录，接下来，查看下schema目录下的信息，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[zk: localhost:2181(CONNECTED) 3] ls /mycat/mycat-cluster-1/schema
[dataHost, dataNode, schema]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，我们查看下dataHost的配置，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[zk: localhost:2181(CONNECTED) 4] get /mycat/mycat-cluster-1/schema/dataHost
[{&quot;balance&quot;:1,&quot;maxCon&quot;:1000,&quot;minCon&quot;:10,&quot;name&quot;:&quot;binghe151&quot;,&quot;writeType&quot;:0,&quot;switchType&quot;:1,&quot;slaveThreshold&quot;:100,&quot;dbType&quot;:&quot;mysql&quot;,&quot;dbDriver&quot;:&quot;native&quot;,&quot;heartbeat&quot;:&quot;select user()&quot;,&quot;writeHost&quot;:[{&quot;host&quot;:&quot;binghe51&quot;,&quot;url&quot;:&quot;192.168.175.151:3306&quot;,&quot;password&quot;:&quot;root&quot;,&quot;user&quot;:&quot;root&quot;}]},{&quot;balance&quot;:1,&quot;maxCon&quot;:1000,&quot;minCon&quot;:10,&quot;name&quot;:&quot;binghe152&quot;,&quot;writeType&quot;:0,&quot;switchType&quot;:1,&quot;slaveThreshold&quot;:100,&quot;dbType&quot;:&quot;mysql&quot;,&quot;dbDriver&quot;:&quot;native&quot;,&quot;heartbeat&quot;:&quot;select user()&quot;,&quot;writeHost&quot;:[{&quot;host&quot;:&quot;binghe52&quot;,&quot;url&quot;:&quot;192.168.175.152:3306&quot;,&quot;password&quot;:&quot;root&quot;,&quot;user&quot;:&quot;root&quot;}]},{&quot;balance&quot;:1,&quot;maxCon&quot;:1000,&quot;minCon&quot;:10,&quot;name&quot;:&quot;binghe153&quot;,&quot;writeType&quot;:0,&quot;switchType&quot;:1,&quot;slaveThreshold&quot;:100,&quot;dbType&quot;:&quot;mysql&quot;,&quot;dbDriver&quot;:&quot;native&quot;,&quot;heartbeat&quot;:&quot;select user()&quot;,&quot;writeHost&quot;:[{&quot;host&quot;:&quot;binghe53&quot;,&quot;url&quot;:&quot;192.168.175.153:3306&quot;,&quot;password&quot;:&quot;root&quot;,&quot;user&quot;:&quot;root&quot;}]},{&quot;balance&quot;:1,&quot;maxCon&quot;:1000,&quot;minCon&quot;:10,&quot;name&quot;:&quot;binghe154&quot;,&quot;writeType&quot;:0,&quot;switchType&quot;:1,&quot;slaveThreshold&quot;:100,&quot;dbType&quot;:&quot;mysql&quot;,&quot;dbDriver&quot;:&quot;native&quot;,&quot;heartbeat&quot;:&quot;select user()&quot;,&quot;writeHost&quot;:[{&quot;host&quot;:&quot;binghe54&quot;,&quot;url&quot;:&quot;192.168.175.154:3306&quot;,&quot;password&quot;:&quot;root&quot;,&quot;user&quot;:&quot;root&quot;}]}]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的输出信息格式比较乱，但可以看出是Json格式的信息，我们可以将输出信息进行格式化，格式化后的结果如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-json&quot;&gt;[
    {
        &quot;balance&quot;: 1,
        &quot;maxCon&quot;: 1000,
        &quot;minCon&quot;: 10,
        &quot;name&quot;: &quot;binghe151&quot;,
        &quot;writeType&quot;: 0,
        &quot;switchType&quot;: 1,
        &quot;slaveThreshold&quot;: 100,
        &quot;dbType&quot;: &quot;mysql&quot;,
        &quot;dbDriver&quot;: &quot;native&quot;,
        &quot;heartbeat&quot;: &quot;select user()&quot;,
        &quot;writeHost&quot;: [
            {
                &quot;host&quot;: &quot;binghe51&quot;,
                &quot;url&quot;: &quot;192.168.175.151:3306&quot;,
                &quot;password&quot;: &quot;root&quot;,
                &quot;user&quot;: &quot;root&quot;
            }
        ]
    },
    {
        &quot;balance&quot;: 1,
        &quot;maxCon&quot;: 1000,
        &quot;minCon&quot;: 10,
        &quot;name&quot;: &quot;binghe152&quot;,
        &quot;writeType&quot;: 0,
        &quot;switchType&quot;: 1,
        &quot;slaveThreshold&quot;: 100,
        &quot;dbType&quot;: &quot;mysql&quot;,
        &quot;dbDriver&quot;: &quot;native&quot;,
        &quot;heartbeat&quot;: &quot;select user()&quot;,
        &quot;writeHost&quot;: [
            {
                &quot;host&quot;: &quot;binghe52&quot;,
                &quot;url&quot;: &quot;192.168.175.152:3306&quot;,
                &quot;password&quot;: &quot;root&quot;,
                &quot;user&quot;: &quot;root&quot;
            }
        ]
    },
    {
        &quot;balance&quot;: 1,
        &quot;maxCon&quot;: 1000,
        &quot;minCon&quot;: 10,
        &quot;name&quot;: &quot;binghe153&quot;,
        &quot;writeType&quot;: 0,
        &quot;switchType&quot;: 1,
        &quot;slaveThreshold&quot;: 100,
        &quot;dbType&quot;: &quot;mysql&quot;,
        &quot;dbDriver&quot;: &quot;native&quot;,
        &quot;heartbeat&quot;: &quot;select user()&quot;,
        &quot;writeHost&quot;: [
            {
                &quot;host&quot;: &quot;binghe53&quot;,
                &quot;url&quot;: &quot;192.168.175.153:3306&quot;,
                &quot;password&quot;: &quot;root&quot;,
                &quot;user&quot;: &quot;root&quot;
            }
        ]
    },
    {
        &quot;balance&quot;: 1,
        &quot;maxCon&quot;: 1000,
        &quot;minCon&quot;: 10,
        &quot;name&quot;: &quot;binghe154&quot;,
        &quot;writeType&quot;: 0,
        &quot;switchType&quot;: 1,
        &quot;slaveThreshold&quot;: 100,
        &quot;dbType&quot;: &quot;mysql&quot;,
        &quot;dbDriver&quot;: &quot;native&quot;,
        &quot;heartbeat&quot;: &quot;select user()&quot;,
        &quot;writeHost&quot;: [
            {
                &quot;host&quot;: &quot;binghe54&quot;,
                &quot;url&quot;: &quot;192.168.175.154:3306&quot;,
                &quot;password&quot;: &quot;root&quot;,
                &quot;user&quot;: &quot;root&quot;
            }
        ]
    }
]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，我们在Mycat的schema.xml文件中配置的dataHost节点的信息，成功写入到Zookeeper中了。&lt;/p&gt;
&lt;p&gt;为了验证Mycat的配置信息，是否已经同步到Zookeeper的其他节点上，我们也可以在binghe152和binghe153服务器上登录Zookeeper，查看Mycat配置信息是否写入成功。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;binghe152服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe152 ~]# zkCli.sh 
Connecting to localhost:2181
#################省略N行输出信息################
[zk: localhost:2181(CONNECTED) 0] get /mycat/mycat-cluster-1/schema/dataHost
[{&quot;balance&quot;:1,&quot;maxCon&quot;:1000,&quot;minCon&quot;:10,&quot;name&quot;:&quot;binghe151&quot;,&quot;writeType&quot;:0,&quot;switchType&quot;:1,&quot;slaveThreshold&quot;:100,&quot;dbType&quot;:&quot;mysql&quot;,&quot;dbDriver&quot;:&quot;native&quot;,&quot;heartbeat&quot;:&quot;select user()&quot;,&quot;writeHost&quot;:[{&quot;host&quot;:&quot;binghe51&quot;,&quot;url&quot;:&quot;192.168.175.151:3306&quot;,&quot;password&quot;:&quot;root&quot;,&quot;user&quot;:&quot;root&quot;}]},{&quot;balance&quot;:1,&quot;maxCon&quot;:1000,&quot;minCon&quot;:10,&quot;name&quot;:&quot;binghe152&quot;,&quot;writeType&quot;:0,&quot;switchType&quot;:1,&quot;slaveThreshold&quot;:100,&quot;dbType&quot;:&quot;mysql&quot;,&quot;dbDriver&quot;:&quot;native&quot;,&quot;heartbeat&quot;:&quot;select user()&quot;,&quot;writeHost&quot;:[{&quot;host&quot;:&quot;binghe52&quot;,&quot;url&quot;:&quot;192.168.175.152:3306&quot;,&quot;password&quot;:&quot;root&quot;,&quot;user&quot;:&quot;root&quot;}]},{&quot;balance&quot;:1,&quot;maxCon&quot;:1000,&quot;minCon&quot;:10,&quot;name&quot;:&quot;binghe153&quot;,&quot;writeType&quot;:0,&quot;switchType&quot;:1,&quot;slaveThreshold&quot;:100,&quot;dbType&quot;:&quot;mysql&quot;,&quot;dbDriver&quot;:&quot;native&quot;,&quot;heartbeat&quot;:&quot;select user()&quot;,&quot;writeHost&quot;:[{&quot;host&quot;:&quot;binghe53&quot;,&quot;url&quot;:&quot;192.168.175.153:3306&quot;,&quot;password&quot;:&quot;root&quot;,&quot;user&quot;:&quot;root&quot;}]},{&quot;balance&quot;:1,&quot;maxCon&quot;:1000,&quot;minCon&quot;:10,&quot;name&quot;:&quot;binghe154&quot;,&quot;writeType&quot;:0,&quot;switchType&quot;:1,&quot;slaveThreshold&quot;:100,&quot;dbType&quot;:&quot;mysql&quot;,&quot;dbDriver&quot;:&quot;native&quot;,&quot;heartbeat&quot;:&quot;select user()&quot;,&quot;writeHost&quot;:[{&quot;host&quot;:&quot;binghe54&quot;,&quot;url&quot;:&quot;192.168.175.154:3306&quot;,&quot;password&quot;:&quot;root&quot;,&quot;user&quot;:&quot;root&quot;}]}]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，Mycat的配置信息成功同步到了binghe152服务器上的Zookeeper中。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;binghe153服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe153 ~]# zkCli.sh 
Connecting to localhost:2181
#####################此处省略N行输出信息#####################
[zk: localhost:2181(CONNECTED) 0] get /mycat/mycat-cluster-1/schema/dataHost
[{&quot;balance&quot;:1,&quot;maxCon&quot;:1000,&quot;minCon&quot;:10,&quot;name&quot;:&quot;binghe151&quot;,&quot;writeType&quot;:0,&quot;switchType&quot;:1,&quot;slaveThreshold&quot;:100,&quot;dbType&quot;:&quot;mysql&quot;,&quot;dbDriver&quot;:&quot;native&quot;,&quot;heartbeat&quot;:&quot;select user()&quot;,&quot;writeHost&quot;:[{&quot;host&quot;:&quot;binghe51&quot;,&quot;url&quot;:&quot;192.168.175.151:3306&quot;,&quot;password&quot;:&quot;root&quot;,&quot;user&quot;:&quot;root&quot;}]},{&quot;balance&quot;:1,&quot;maxCon&quot;:1000,&quot;minCon&quot;:10,&quot;name&quot;:&quot;binghe152&quot;,&quot;writeType&quot;:0,&quot;switchType&quot;:1,&quot;slaveThreshold&quot;:100,&quot;dbType&quot;:&quot;mysql&quot;,&quot;dbDriver&quot;:&quot;native&quot;,&quot;heartbeat&quot;:&quot;select user()&quot;,&quot;writeHost&quot;:[{&quot;host&quot;:&quot;binghe52&quot;,&quot;url&quot;:&quot;192.168.175.152:3306&quot;,&quot;password&quot;:&quot;root&quot;,&quot;user&quot;:&quot;root&quot;}]},{&quot;balance&quot;:1,&quot;maxCon&quot;:1000,&quot;minCon&quot;:10,&quot;name&quot;:&quot;binghe153&quot;,&quot;writeType&quot;:0,&quot;switchType&quot;:1,&quot;slaveThreshold&quot;:100,&quot;dbType&quot;:&quot;mysql&quot;,&quot;dbDriver&quot;:&quot;native&quot;,&quot;heartbeat&quot;:&quot;select user()&quot;,&quot;writeHost&quot;:[{&quot;host&quot;:&quot;binghe53&quot;,&quot;url&quot;:&quot;192.168.175.153:3306&quot;,&quot;password&quot;:&quot;root&quot;,&quot;user&quot;:&quot;root&quot;}]},{&quot;balance&quot;:1,&quot;maxCon&quot;:1000,&quot;minCon&quot;:10,&quot;name&quot;:&quot;binghe154&quot;,&quot;writeType&quot;:0,&quot;switchType&quot;:1,&quot;slaveThreshold&quot;:100,&quot;dbType&quot;:&quot;mysql&quot;,&quot;dbDriver&quot;:&quot;native&quot;,&quot;heartbeat&quot;:&quot;select user()&quot;,&quot;writeHost&quot;:[{&quot;host&quot;:&quot;binghe54&quot;,&quot;url&quot;:&quot;192.168.175.154:3306&quot;,&quot;password&quot;:&quot;root&quot;,&quot;user&quot;:&quot;root&quot;}]}]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，Mycat的配置信息成功同步到了binghe153服务器上的Zookeeper中。&lt;/p&gt;
&lt;h2 id=&quot;配置mycat支持zookeeper启动&quot;&gt;配置Mycat支持Zookeeper启动&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.在binghe151服务器上配置Mycat&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在binghe151服务器上进入Mycat安装目录的conf目录下，查看文件信息，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# cd /usr/local/mycat/conf/
[root@binghe151 conf]# ll
total 108
-rwxrwxrwx 1 root root   92 Feb 26 17:10 autopartition-long.txt
-rwxrwxrwx 1 root root   51 Feb 26 17:10 auto-sharding-long.txt
-rwxrwxrwx 1 root root   67 Feb 26 17:10 auto-sharding-rang-mod.txt
-rwxrwxrwx 1 root root  340 Feb 26 17:10 cacheservice.properties
-rwxrwxrwx 1 root root 3338 Feb 26 17:10 dbseq.sql
-rwxrwxrwx 1 root root 3532 Feb 26 17:10 dbseq - utf8mb4.sql
-rw-r--r-- 1 root root   86 Mar  1 22:37 dnindex.properties
-rwxrwxrwx 1 root root  446 Feb 26 17:10 ehcache.xml
-rwxrwxrwx 1 root root 2454 Feb 26 17:10 index_to_charset.properties
-rwxrwxrwx 1 root root 1285 Feb 26 17:10 log4j2.xml
-rwxrwxrwx 1 root root  183 Feb 26 17:10 migrateTables.properties
-rwxrwxrwx 1 root root  271 Feb 26 17:10 myid.properties
-rwxrwxrwx 1 root root   16 Feb 26 17:10 partition-hash-int.txt
-rwxrwxrwx 1 root root  108 Feb 26 17:10 partition-range-mod.txt
-rwxrwxrwx 1 root root  988 Mar  1 16:59 rule.xml
-rwxrwxrwx 1 root root 3883 Mar  3 23:59 schema.xml
-rwxrwxrwx 1 root root  440 Feb 26 17:10 sequence_conf.properties
-rwxrwxrwx 1 root root   84 Mar  3 23:52 sequence_db_conf.properties
-rwxrwxrwx 1 root root   29 Feb 26 17:10 sequence_distributed_conf.properties
-rwxrwxrwx 1 root root   28 Feb 26 17:10 sequence_http_conf.properties
-rwxrwxrwx 1 root root   53 Feb 26 17:10 sequence_time_conf.properties
-rwxrwxrwx 1 root root 2420 Mar  4 15:14 server.xml
-rwxrwxrwx 1 root root   18 Feb 26 17:10 sharding-by-enum.txt
-rwxrwxrwx 1 root root 4251 Feb 28 20:51 wrapper.conf
drwxrwxrwx 2 root root 4096 Feb 28 21:17 zkconf
drwxrwxrwx 2 root root 4096 Feb 28 21:17 zkdownload
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，在Mycat的conf目录下，存在一个myid.properties文件，接下来，使用vim编辑器编辑这个文件，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;vim myid.properties 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编辑后的myid.properties文件的内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;loadZk=true
zkURL=192.168.175.151:2181,192.168.175.152:2181,192.168.175.153:2181
clusterId=mycat-cluster-1
myid=mycat_151
clusterSize=2
clusterNodes=mycat_151,mycat_154
#server  booster  ;   booster install on db same server,will reset all minCon to 2
type=server
boosterDataHosts=dataHost1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中几个重要的参数说明如下所示。&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;loadZk：表示是否加载Zookeeper配置。true：是； false：否；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;zkURL：Zookeeper的连接地址，多个Zookeeper连接地址以逗号隔开；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;clusterId：当前Mycat集群的Id标识，此标识需要与Zookeeper中/mycat目录下的目录名称相同，如下所示。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[zk: localhost:2181(CONNECTED) 1] ls /mycat
[mycat-cluster-1]
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;myid：当前Mycat节点的id，这里我的命名方式为mycat_前缀加上IP地址的最后三位；&lt;/li&gt;
&lt;li&gt;clusterSize：表示Mycat集群中的Mycat节点个数，这里，我们在binghe151和binghe154节点上部署Mycat，所以Mycat节点的个数为2。&lt;/li&gt;
&lt;li&gt;clusterNodes：Mycat集群中，所有的Mycat节点，此处的节点需要配置myid中配置的Mycat节点id，多个节点之前以逗号分隔。这里我配置的节点为：mycat_151,mycat_154。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;2.在binghe154服务器上安装全新的Mycat&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在binghe154服务器上下载并安装和binghe151服务器上相同版本的Mycat，并将其解压到binghe154服务器上的/usr/local/mycat目录下。&lt;/p&gt;
&lt;p&gt;也可以在binghe151服务器上直接输入如下命令将Mycat的安装目录复制到binghe154服务器上。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# scp -r /usr/local/mycat binghe154:/usr/local
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：别忘了在binghe154服务器上配置Mycat的系统环境变量。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.修改binghe154服务器上的Mycat配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在binghe154服务器上修改Mycat安装目录下的conf目录中的myid.properties文件，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;vim /usr/local/mycat/conf/myid.properties
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改后的myid.properties文件的内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;loadZk=true
zkURL=192.168.175.151:2181,192.168.175.152:2181,192.168.175.153:2181
clusterId=mycat-cluster-1
myid=mycat_154
clusterSize=2
clusterNodes=mycat_151,mycat_154
#server  booster  ;   booster install on db same server,will reset all minCon to 2
type=server
boosterDataHosts=dataHost1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4.重启Mycat&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分别重启binghe151服务器和binghe154服务器上的Mycat，如下所示。&lt;/p&gt;
&lt;p&gt;注意：先重启&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;binghe151服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# mycat restart
Stopping Mycat-server...
Stopped Mycat-server.
Starting Mycat-server...
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;binghe154服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe154 ~]# mycat restart
Stopping Mycat-server...
Stopped Mycat-server.
Starting Mycat-server...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在binghe151和binghe154服务器上分别查看Mycat的启动日志，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;STATUS | wrapper  | 2020/03/08 21:08:15 | &amp;lt;-- Wrapper Stopped
STATUS | wrapper  | 2020/03/08 21:08:15 | --&amp;gt; Wrapper Started as Daemon
STATUS | wrapper  | 2020/03/08 21:08:15 | Launching a JVM...
INFO   | jvm 1    | 2020/03/08 21:08:16 | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.org
INFO   | jvm 1    | 2020/03/08 21:08:16 |   Copyright 1999-2006 Tanuki Software, Inc.  All Rights Reserved.
INFO   | jvm 1    | 2020/03/08 21:08:16 | 
INFO   | jvm 1    | 2020/03/08 21:08:28 | MyCAT Server startup successfully. see logs in logs/mycat.log
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从日志的输出结果可以看出，Mycat重启成功。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;此时，先重启binghe151服务器上的Mycat，再重启binghe154服务器上的Mycat之后，我们会发现binghe154服务器上的Mycat的conf目录下的schema.xml、server.xml、rule.xml和sequence_db_conf.properties文件与binghe151服务器上Mycat的配置文件相同，这就是binghe154服务器上的Mycat从Zookeeper上读取配置文件的结果。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;以后，我们只需要修改Zookeeper中有关Mycat的配置，这些配置就会自动同步到Mycat中，这样可以保证多个Mycat节点的配置是一致的。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置虚拟ip&quot;&gt;配置虚拟IP&lt;/h2&gt;
&lt;p&gt;分别在binghe151和binghe154服务器上配置虚拟IP，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;ifconfig eth0:1 192.168.175.110 broadcast 192.168.175.255 netmask 255.255.255.0 up
route add -host 192.168.175.110 dev eth0:1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置完虚拟IP的效果如下所示，以binghe151服务器为例。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# ifconfig
eth0      Link encap:Ethernet  HWaddr 00:0C:29:10:A1:45  
          inet addr:192.168.175.151  Bcast:192.168.175.255  Mask:255.255.255.0
          inet6 addr: fe80::20c:29ff:fe10:a145/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:116766 errors:0 dropped:0 overruns:0 frame:0
          TX packets:85230 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:25559422 (24.3 MiB)  TX bytes:55997016 (53.4 MiB)

eth0:1    Link encap:Ethernet  HWaddr 00:0C:29:10:A1:45  
          inet addr:192.168.175.110  Bcast:192.168.175.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:51102 errors:0 dropped:0 overruns:0 frame:0
          TX packets:51102 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:2934009 (2.7 MiB)  TX bytes:2934009 (2.7 MiB)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/span&gt;在命令行添加VIP后，当服务器重启后，VIP信息会消失，所以，最好是将创建VIP的命令写到一个脚本文件中，例如，将命令写到/usr/local/script/vip.sh文件中，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;mkdir /usr/local/script
vim /usr/local/script/vip.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;文件的内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;ifconfig eth0:1 192.168.175.110 broadcast 192.168.175.255 netmask 255.255.255.0 up
route add -host 192.168.175.110 dev eth0:1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，将/usr/local/script/vip.sh文件添加到服务器开机启动项中，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;echo /usr/local/script/vip.sh &amp;gt;&amp;gt; /etc/rc.d/rc.local
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;配置ip转发&quot;&gt;配置IP转发&lt;/h2&gt;
&lt;p&gt;在binghe151和binghe154服务器上配置系统内核IP转发功能，编辑/etc/sysctl.conf文件，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;vim /etc/sysctl.conf
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;找到如下一行代码。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;net.ipv4.ip_forward = 0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将其修改成如下所示的代码。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;net.ipv4.ip_forward = 1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;保存并退出vim编辑器，并运行如下命令使配置生效。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;sysctl -p
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;安装并配置xinetd服务&quot;&gt;安装并配置xinetd服务&lt;/h2&gt;
&lt;p&gt;我们需要在安装HAProxy的服务器上，也就是在binghe151和binghe154服务器上安装xinetd服务来开启48700端口。&lt;/p&gt;
&lt;p&gt;（1）在服务器命令行执行如下命令安装xinetd服务，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;yum install xinetd -y
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）编辑/etc/xinetd.conf文件，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;vim /etc/xinetd.conf
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;检查文件中是否存在如下配置。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;includedir /etc/xinetd.d
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果/etc/xinetd.conf文件中没有以上配置，则在/etc/xinetd.conf文件中添加以上配置；如果存在以上配置，则不用修改。&lt;/p&gt;
&lt;p&gt;（3）创建/etc/xinetd.d目录，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;mkdir /etc/xinetd.d
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意：如果/etc/xinetd.d目录已经存在，创建目录时会报如下错误。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;mkdir: cannot create directory `/etc/xinetd.d': File exists
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;大家可不必理会此错误信息。&lt;/p&gt;
&lt;p&gt;（4）在/etc/xinetd.d目录下添加Mycat状态检测服务器的配置文件mycat_status，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;touch /etc/xinetd.d/mycat_status
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）编辑mycat_status文件，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;vim /etc/xinetd.d/mycat_status
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编辑后的mycat_status文件中的内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;service mycat_status
{
flags = REUSE
socket_type = stream
port = 48700
wait = no
user = root
server =/usr/local/bin/mycat_check.sh
log_on_failure += USERID
disable = no
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;部分xinetd配置参数说明如下所示。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;socket_type：表示封包处理方式，Stream为TCP数据包。&lt;/li&gt;
&lt;li&gt;port：表示xinetd服务监听的端口号。&lt;/li&gt;
&lt;li&gt;wait：表示不需等待，即服务将以多线程的方式运行。&lt;/li&gt;
&lt;li&gt;user：运行xinted服务的用户。&lt;/li&gt;
&lt;li&gt;server：需要启动的服务脚本。&lt;/li&gt;
&lt;li&gt;log_on_failure：记录失败的日志内容。&lt;/li&gt;
&lt;li&gt;disable：需要启动xinted服务时，需要将此配置项设置为no。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（6）在/usr/local/bin目录下添加mycat_check.sh服务脚本，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;touch /usr/local/bin/mycat_check.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（7）编辑/usr/local/bin/mycat_check.sh文件，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;vim /usr/local/bin/mycat_check.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编辑后的文件内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash
mycat=`/usr/local/mycat/bin/mycat status | grep 'not running' | wc -l`
if [ &quot;$mycat&quot; = &quot;0&quot; ]; then
/bin/echo -e &quot;HTTP/1.1 200 OK\r\n&quot;
else
/bin/echo -e &quot;HTTP/1.1 503 Service Unavailable\r\n&quot;
/usr/local/mycat/bin/mycat start
fi
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为mycat_check.sh文件赋予可执行权限，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;chmod a+x /usr/local/bin/mycat_check.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（8）编辑/etc/services文件，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;vim /etc/services
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在文件末尾添加如下所示的内容。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;mycat_status  48700/tcp        # mycat_status
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中，端口号需要与在/etc/xinetd.d/mycat_status文件中配置的端口号相同。&lt;/p&gt;
&lt;p&gt;（9）重启xinetd服务，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;service xinetd restart
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（10）查看mycat_status服务是否成功启动，如下所示。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;binghe151服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# netstat -antup|grep 48700
tcp    0   0 :::48700          :::*      LISTEN   2776/xinetd
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;binghe154服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe154 ~]# netstat -antup|grep 48700
tcp    0   0 :::48700          :::*      LISTEN   6654/xinetd
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果显示，两台服务器上的mycat_status服务器启动成功。&lt;/p&gt;
&lt;p&gt;至此，xinetd服务安装并配置成功，即Mycat状态检查服务安装成功。&lt;/p&gt;
&lt;h2 id=&quot;安装并配置haproxy&quot;&gt;安装并配置HAProxy&lt;/h2&gt;
&lt;p&gt;我们直接在binghe151和binghe154服务器上使用如下命令安装HAProxy。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;yum install haproxy -y
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装完成后，我们需要对HAProxy进行配置，HAProxy的配置文件目录为/etc/haproxy，我们查看这个目录下的文件信息，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# ll /etc/haproxy/
total 4
-rw-r--r-- 1 root root 3142 Oct 21  2016 haproxy.cfg
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;发现/etc/haproxy/目录下存在一个haproxy.cfg文件。接下来，我们就修改haproxy.cfg文件，修改后的haproxy.cfg文件的内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;global
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon
    stats socket /var/lib/haproxy/stats

defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

listen  admin_status
      bind 0.0.0.0:48800
      stats uri /admin-status
      stats auth  admin:admin
listen    allmycat_service
      bind 0.0.0.0:3366
      mode tcp
      option tcplog
          option httpchk OPTIONS * HTTP/1.1\r\nHost:\ www
      balance    roundrobin
      server    mycat_151 192.168.175.151:3307 check port 48700 inter 5s rise 2 fall 3
      server    mycat_154 192.168.175.154:3307 check port 48700 inter 5s rise 2 fall 3
listen    allmycat_admin
      bind 0.0.0.0:3377
      mode tcp
      option tcplog
          option httpchk OPTIONS * HTTP/1.1\r\nHost:\ www
      balance    roundrobin
      server    mycat_151 192.168.175.151:3308 check port 48700 inter 5s rise 2 fall 3
      server    mycat_154 192.168.175.154:3308 check port 48700 inter 5s rise 2 fall 3
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，在binghe151服务器和binghe154服务器上启动HAProxy，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;haproxy -f /etc/haproxy/haproxy.cfg 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，我们使用mysql命令连接HAProxy监听的虚拟IP和端口来连接Mycat，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# mysql -umycat -pmycat -h192.168.175.110 -P3366 --default-auth=mysql_native_password  
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 2
Server version: 5.6.29-mycat-1.6.7.4-release-20200228205020 MyCat Server (OpenCloudDB)

Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&amp;gt; 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，连接Mycat成功。&lt;/p&gt;
&lt;h2 id=&quot;安装keepalived&quot;&gt;安装Keepalived&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.安装并配置Keepalived&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接在binghe151和binghe154服务器上输入如下命令安装Keepalived。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;yum install keepalived -y
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装成功后，会在/etc目录下生成一个keepalived目录，接下来，我们在/etc/keepalived目录下配置keepalived.conf文件，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;vim /etc/keepalived/keepalived.conf
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;binghe151服务器配置&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;! Configuration Fileforkeepalived
vrrp_script chk_http_port {
  script &quot;/etc/keepalived/check_haproxy.sh&quot;
  interval 2
  weight 2
}
vrrp_instance VI_1 {
  state MASTER 
  interface eth0 
  virtual_router_id 51 
  priority 150 
  advert_int 1 
  authentication {
  auth_type PASS
  auth_pass 1111
}
track_script {
  chk_http_port
}
virtual_ipaddress { 
  192.168.175.110 dev eth0 scope global
}
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;binghe154服务器配置&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;! Configuration Fileforkeepalived
vrrp_script chk_http_port {
  script &quot;/etc/keepalived/check_haproxy.sh&quot;
  interval 2
  weight 2
}
vrrp_instance VI_1 {
  state SLAVE 
  interface eth0 
  virtual_router_id 51 
  priority 120
  advert_int 1 
  authentication {
  auth_type PASS
  auth_pass 1111
}
track_script {
  chk_http_port
}
virtual_ipaddress { 
  192.168.175.110 dev eth0 scope global
}
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.编写检测HAProxy的脚本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来，需要分别在binghe151和binghe154服务器上的/etc/keepalived目录下创建check_haproxy.sh脚本，脚本内容如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash
STARTHAPROXY=&quot;/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg&quot;
STOPKEEPALIVED=&quot;/etc/init.d/keepalived stop&quot;
#STOPKEEPALIVED=&quot;/usr/bin/systemctl stop keepalived&quot;
LOGFILE=&quot;/var/log/keepalived-haproxy-state.log&quot;
echo &quot;[check_haproxy status]&quot; &amp;gt;&amp;gt; $LOGFILE
A=`ps -C haproxy --no-header |wc -l`
echo &quot;[check_haproxy status]&quot; &amp;gt;&amp;gt; $LOGFILE
date &amp;gt;&amp;gt; $LOGFILE
if [ $A -eq 0 ];then
   echo $STARTHAPROXY &amp;gt;&amp;gt; $LOGFILE
   $STARTHAPROXY &amp;gt;&amp;gt; $LOGFILE 2&amp;gt;&amp;amp;1
   sleep 5
fi
if [ `ps -C haproxy --no-header |wc -l` -eq 0 ];then
   exit 0
else
   exit 1
fi
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用如下命令为check_haproxy.sh脚本授予可执行权限。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;chmod a+x /etc/keepalived/check_haproxy.sh 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3.启动Keepalived&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;配置完成后，我们就可以启动Keepalived了，分别在binghe151和binghe154服务器上启动Keepalived，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;/etc/init.d/keepalived start
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看Keepalived是否启动成功，如下所示。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;binghe151服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# ps -ef | grep keepalived
root       1221      1  0 20:06 ?        00:00:00 keepalived -D
root       1222   1221  0 20:06 ?        00:00:00 keepalived -D
root       1223   1221  0 20:06 ?        00:00:02 keepalived -D
root      93290   3787  0 21:42 pts/0    00:00:00 grep keepalived
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;binghe154服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe154 ~]# ps -ef | grep keepalived
root       1224      1  0 20:06 ?        00:00:00 keepalived -D
root       1225   1224  0 20:06 ?        00:00:00 keepalived -D
root       1226   1224  0 20:06 ?        00:00:02 keepalived -D
root      94636   3798  0 21:43 pts/0    00:00:00 grep keepalived
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，两台服务器上的Keepalived服务启动成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.验证Keepalived绑定的虚拟IP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们分别查看两台服务器上的Keepalived是否绑定了虚拟IP。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;binghe151服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# ip addr
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:0c:29:10:a1:45 brd ff:ff:ff:ff:ff:ff
    inet 192.168.175.151/24 brd 192.168.175.255 scope global eth0
    inet 192.168.175.110/32 scope global eth0
    inet 192.168.175.110/24 brd 192.168.175.255 scope global secondary eth0:1
    inet6 fe80::20c:29ff:fe10:a145/64 scope link 
       valid_lft forever preferred_lft forever
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到如下一行代码。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;inet 192.168.175.110/32 scope global eth0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明binghe151服务器上的Keepalived绑定了虚拟IP 192.168.175.110。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;binghe154服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe154 ~]# ip addr
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:50:56:22:2a:75 brd ff:ff:ff:ff:ff:ff
    inet 192.168.175.154/24 brd 192.168.175.255 scope global eth0
    inet 192.168.175.110/24 brd 192.168.175.255 scope global secondary eth0:1
    inet6 fe80::250:56ff:fe22:2a75/64 scope link 
       valid_lft forever preferred_lft forever
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到binghe154服务器上的Keepalived并没有绑定虚拟IP。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.测试虚拟IP的漂移&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如何测试虚拟IP的漂移呢？首先，我们停止binghe151服务器上的Keepalived，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;/etc/init.d/keepalived stop
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，查看binghe154服务器上Keepalived绑定虚拟IP的情况，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe154 ~]# ip addr
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:50:56:22:2a:75 brd ff:ff:ff:ff:ff:ff
    inet 192.168.175.154/24 brd 192.168.175.255 scope global eth0
    inet 192.168.175.110/32 scope global eth0
    inet 192.168.175.110/24 brd 192.168.175.255 scope global secondary eth0:1
    inet6 fe80::250:56ff:fe22:2a75/64 scope link 
       valid_lft forever preferred_lft forever
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，在输出的结果信息中，存在如下一行信息。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt; inet 192.168.175.110/32 scope global eth0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明binghe154服务器上的Keepalived绑定了虚拟IP 192.168.175.110，虚拟IP漂移到了binghe154服务器上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.binghe151服务器上的Keepalived抢占虚拟IP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们启动binghe151服务器上的Keepalived，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;/etc/init.d/keepalived start
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动成功后，我们再次查看虚拟IP的绑定情况，如下所示。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;binghe151服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe151 ~]# ip addr
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:0c:29:10:a1:45 brd ff:ff:ff:ff:ff:ff
    inet 192.168.175.151/24 brd 192.168.175.255 scope global eth0
    inet 192.168.175.110/32 scope global eth0
    inet 192.168.175.110/24 brd 192.168.175.255 scope global secondary eth0:1
    inet6 fe80::20c:29ff:fe10:a145/64 scope link 
       valid_lft forever preferred_lft forever
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;binghe154服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe154 ~]# ip addr
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:50:56:22:2a:75 brd ff:ff:ff:ff:ff:ff
    inet 192.168.175.154/24 brd 192.168.175.255 scope global eth0
    inet 192.168.175.110/24 brd 192.168.175.255 scope global secondary eth0:1
    inet6 fe80::250:56ff:fe22:2a75/64 scope link 
       valid_lft forever preferred_lft forever
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于binghe151服务器上配置的Keepalived优先级要高于binghe154服务器上的Keepalived，所以，再次启动binghe151服务器上的Keepalived后，binghe151服务器上的Keepalived会抢占虚拟IP。&lt;/p&gt;
&lt;h2 id=&quot;配置mysql主从复制&quot;&gt;配置MySQL主从复制&lt;/h2&gt;
&lt;p&gt;这里，为了简单，&lt;strong&gt;我将binghe154和binghe155服务器上的MySQL配置成主从复制&lt;/strong&gt;，大家也可以根据实际情况，自行配置其他服务器上MySQL的主从复制（注意：我这里配置的是一主一从模式）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.编辑my.cnf文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;binghe154服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;server_id = 154
log_bin = /data/mysql/log/bin_log/mysql-bin
binlog-ignore-db=mysql
binlog_format= mixed
sync_binlog=100
log_slave_updates = 1
binlog_cache_size=32m
max_binlog_cache_size=64m
max_binlog_size=512m
lower_case_table_names = 1
relay_log = /data/mysql/log/bin_log/relay-bin
relay_log_index = /data/mysql/log/bin_log/relay-bin.index
master_info_repository=TABLE
relay-log-info-repository=TABLE
relay-log-recovery
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;binghe155服务器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;server_id = 155
log_bin = /data/mysql/log/bin_log/mysql-bin
binlog-ignore-db=mysql
binlog_format= mixed
sync_binlog=100
log_slave_updates = 1
binlog_cache_size=32m
max_binlog_cache_size=64m
max_binlog_size=512m
lower_case_table_names = 1
relay_log = /data/mysql/log/bin_log/relay-bin
relay_log_index = /data/mysql/log/bin_log/relay-bin.index
master_info_repository=TABLE
relay-log-info-repository=TABLE
relay-log-recovery
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.同步两台服务器上MySQL的数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在binghe154服务器上只有一个customer_db数据库，我们使用mysqldump命令导出customer_db数据库，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;[root@binghe154 ~]# mysqldump --master-data=2 --single-transaction -uroot -p --databases customer_db &amp;gt; binghe154.sql
Enter password: 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，我们查看binghe154.sql文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;more binghe154.sql
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在文件中，我们可以找到如下信息。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000042', MASTER_LOG_POS=995;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明当前MySQL的二进制日志文件为mysql-bin.000042，二进制日志文件的位置为995。&lt;/p&gt;
&lt;p&gt;接下来，我们将binghe154.sql文件复制到binghe155服务器上，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;scp binghe154.sql 192.168.175.155:/usr/local/src
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在binghe155服务器上，将binghe154.sql脚本导入到MySQL中，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;mysql -uroot -p &amp;lt; /usr/local/src/binghe154.sql
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时，完成了数据的初始化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.创建主从复制账号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在binghe154服务器的MySQL中，创建用于主从复制的MySQL账号，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;mysql&amp;gt; CREATE USER 'repl'@'192.168.175.%' IDENTIFIED BY 'repl123456';
Query OK, 0 rows affected (0.01 sec)

mysql&amp;gt; ALTER USER 'repl'@'192.168.175.%' IDENTIFIED WITH mysql_native_password BY 'repl123456';                           
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; GRANT REPLICATION SLAVE ON *.* TO 'repl'@'192.168.175.%';
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.00 sec)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4.配置复制链路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;登录binghe155服务器上的MySQL，并使用如下命令配置复制链路。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;mysql&amp;gt; change master to 
     &amp;gt; master_host='192.168.175.154',
     &amp;gt; master_port=3306,
     &amp;gt; master_user='repl',
     &amp;gt; master_password='repl123456',
     &amp;gt; MASTER_LOG_FILE='mysql-bin.000042',
     &amp;gt; MASTER_LOG_POS=995;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中，MASTER_LOG_FILE='mysql-bin.000042', MASTER_LOG_POS=995 就是在binghe154.sql文件中找到的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.启动从库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在binghe155服务器的MySQL命令行启动从库，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;mysql&amp;gt; start slave;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看从库是否启动成功，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;mysql&amp;gt; SHOW slave STATUS \G
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.175.151
                  Master_User: binghe152
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000007
          Read_Master_Log_Pos: 1360
               Relay_Log_File: relay-bin.000003
                Relay_Log_Pos: 322
        Relay_Master_Log_File: mysql-bin.000007
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
#################省略部分输出结果信息##################
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果显示Slave_IO_Running选项和Slave_SQL_Running选项的值均为Yes，说明MySQL主从复制环境搭建成功。&lt;/p&gt;
&lt;p&gt;最后，别忘了在binghe155服务器的MySQL中创建Mycat连接MySQL的用户，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;CREATE USER 'mycat'@'192.168.175.%' IDENTIFIED BY 'mycat';
ALTER USER 'mycat'@'192.168.175.%' IDENTIFIED WITH mysql_native_password BY 'mycat'; 
GRANT SELECT, INSERT, UPDATE, DELETE,EXECUTE  ON *.* TO 'mycat'@'192.168.175.%';
FLUSH PRIVILEGES;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;配置mycat读写分离&quot;&gt;配置Mycat读写分离&lt;/h2&gt;
&lt;p&gt;修改Mycatd的schema.xml文件，实现binghe154和binghe155服务器上的MySQL读写分离。在Mycat安装目录的conf/zkconf目录下，修改schema.xml文件，修改后的schema.xml文件如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&amp;gt;
&amp;lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&amp;gt;
    &amp;lt;schema name=&quot;shop&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;1000&quot;&amp;gt;
        &amp;lt;table name=&quot;order_master&quot; dataNode=&quot;orderdb01,orderdb02,orderdb03,orderdb04&quot; rule=&quot;order_master&quot; primaryKey=&quot;order_id&quot; autoIncrement=&quot;true&quot;&amp;gt;
            &amp;lt;childTable name=&quot;order_detail&quot; joinKey=&quot;order_id&quot; parentKey=&quot;order_id&quot; primaryKey=&quot;order_detail_id&quot; autoIncrement=&quot;true&quot;/&amp;gt;
        &amp;lt;/table&amp;gt;
        &amp;lt;table name=&quot;order_cart&quot; dataNode=&quot;ordb&quot; primaryKey=&quot;cart_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;order_customer_addr&quot; dataNode=&quot;ordb&quot; primaryKey=&quot;customer_addr_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;region_info&quot; dataNode=&quot;ordb,prodb,custdb&quot; primaryKey=&quot;region_id&quot; type=&quot;global&quot;/&amp;gt;
        &amp;lt;table name=&quot;serial&quot; dataNode=&quot;ordb&quot; primaryKey=&quot;id&quot;/&amp;gt;
        &amp;lt;table name=&quot;shipping_info&quot; dataNode=&quot;ordb&quot; primaryKey=&quot;ship_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;warehouse_info&quot; dataNode=&quot;ordb&quot; primaryKey=&quot;w_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;warehouse_proudct&quot; dataNode=&quot;ordb&quot; primaryKey=&quot;wp_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;product_brand_info&quot; dataNode=&quot;prodb&quot; primaryKey=&quot;brand_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;product_category&quot; dataNode=&quot;prodb&quot; primaryKey=&quot;category_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;product_comment&quot; dataNode=&quot;prodb&quot; primaryKey=&quot;comment_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;product_info&quot; dataNode=&quot;prodb&quot; primaryKey=&quot;product_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;product_pic_info&quot; dataNode=&quot;prodb&quot; primaryKey=&quot;product_pic_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;product_supplier_info&quot; dataNode=&quot;prodb&quot; primaryKey=&quot;supplier_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;customer_balance_log&quot; dataNode=&quot;custdb&quot; primaryKey=&quot;balance_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;customer_inf&quot; dataNode=&quot;custdb&quot; primaryKey=&quot;customer_inf_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;customer_level_inf&quot; dataNode=&quot;custdb&quot; primaryKey=&quot;customer_level&quot;/&amp;gt;
        &amp;lt;table name=&quot;customer_login&quot; dataNode=&quot;custdb&quot; primaryKey=&quot;customer_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;customer_login_log&quot; dataNode=&quot;custdb&quot; primaryKey=&quot;login_id&quot;/&amp;gt;
        &amp;lt;table name=&quot;customer_point_log&quot; dataNode=&quot;custdb&quot; primaryKey=&quot;point_id&quot;/&amp;gt;
    &amp;lt;/schema&amp;gt;
        
    &amp;lt;dataNode name=&quot;mycat&quot; dataHost=&quot;binghe151&quot; database=&quot;mycat&quot;/&amp;gt;
    &amp;lt;dataNode name=&quot;ordb&quot; dataHost=&quot;binghe152&quot; database=&quot;order_db&quot;/&amp;gt;
    &amp;lt;dataNode name=&quot;prodb&quot; dataHost=&quot;binghe153&quot; database=&quot;product_db&quot;/&amp;gt;
    &amp;lt;dataNode name=&quot;custdb&quot; dataHost=&quot;binghe154&quot; database=&quot;customer_db&quot;/&amp;gt;
    &amp;lt;dataNode name=&quot;orderdb01&quot; dataHost=&quot;binghe152&quot; database=&quot;orderdb01&quot;/&amp;gt;
    &amp;lt;dataNode name=&quot;orderdb02&quot; dataHost=&quot;binghe152&quot; database=&quot;orderdb02&quot;/&amp;gt;
    &amp;lt;dataNode name=&quot;orderdb03&quot; dataHost=&quot;binghe153&quot; database=&quot;orderdb03&quot;/&amp;gt;
    &amp;lt;dataNode name=&quot;orderdb04&quot; dataHost=&quot;binghe153&quot; database=&quot;orderdb04&quot;/&amp;gt;
        
    &amp;lt;dataHost balance=&quot;1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; name=&quot;binghe151&quot; writeType=&quot;0&quot; switchType=&quot;1&quot; slaveThreshold=&quot;100&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&amp;gt;
        &amp;lt;heartbeat&amp;gt;select user()&amp;lt;/heartbeat&amp;gt;
        &amp;lt;writeHost host=&quot;binghe51&quot; url=&quot;192.168.175.151:3306&quot; password=&quot;mycat&quot; user=&quot;mycat&quot;/&amp;gt;
    &amp;lt;/dataHost&amp;gt;
    &amp;lt;dataHost balance=&quot;1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; name=&quot;binghe152&quot; writeType=&quot;0&quot; switchType=&quot;1&quot; slaveThreshold=&quot;100&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&amp;gt;
        &amp;lt;heartbeat&amp;gt;select user()&amp;lt;/heartbeat&amp;gt;
        &amp;lt;writeHost host=&quot;binghe52&quot; url=&quot;192.168.175.152:3306&quot; password=&quot;mycat&quot; user=&quot;mycat&quot;/&amp;gt;
    &amp;lt;/dataHost&amp;gt;
    &amp;lt;dataHost balance=&quot;1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; name=&quot;binghe153&quot; writeType=&quot;0&quot; switchType=&quot;1&quot; slaveThreshold=&quot;100&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&amp;gt;
        &amp;lt;heartbeat&amp;gt;select user()&amp;lt;/heartbeat&amp;gt;
        &amp;lt;writeHost host=&quot;binghe53&quot; url=&quot;192.168.175.153:3306&quot; password=&quot;mycat&quot; user=&quot;mycat&quot;/&amp;gt;
    &amp;lt;/dataHost&amp;gt;
    &amp;lt;dataHost balance=&quot;1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; name=&quot;binghe154&quot; writeType=&quot;0&quot; switchTymycate=&quot;1&quot; slaveThreshold=&quot;100&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&amp;gt;
        &amp;lt;heartbeat&amp;gt;select user()&amp;lt;/heartbeat&amp;gt;
        &amp;lt;writeHost host=&quot;binghe54&quot; url=&quot;192.168.175.154:3306&quot; password=&quot;mycat&quot; user=&quot;mycat&quot;&amp;gt;
                        &amp;lt;readHost host=&quot;binghe55&quot;, url=&quot;192.168.175.155:3306&quot; user=&quot;mycat&quot; password=&quot;mycat&quot;/&amp;gt;
                &amp;lt;/writeHost&amp;gt;
         &amp;lt;writeHost host=&quot;binghe55&quot; url=&quot;192.168.175.155:3306&quot; password=&quot;mycat&quot; user=&quot;mycat&quot;/&amp;gt;
    &amp;lt;/dataHost&amp;gt;
&amp;lt;/mycat:schema&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;保存并退出vim编辑器，接下来，初始化Zookeeper中的数据，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;/usr/local/mycat/bin/init_zk_data.sh 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述命令执行成功后，会自动将配置同步到binghe151和binghe154服务器上的Mycat的安装目录下的conf目录下的schema.xml中。&lt;/p&gt;
&lt;p&gt;接下来，分别启动binghe151和binghe154服务器上的Mycat服务。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;mycat restart
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;如何访问高可用环境&quot;&gt;如何访问高可用环境&lt;/h2&gt;
&lt;p&gt;此时，整个高可用环境配置完成，上层应用连接高可用环境时，需要连接HAProxy监听的IP和端口。比如使用mysql命令连接高可用环境如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;[root@binghe151 ~]# mysql -umycat -pmycat -h192.168.175.110 -P3366 --default-auth=mysql_native_password
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 2
Server version: 5.6.29-mycat-1.6.7.4-release-20200228205020 MyCat Server (OpenCloudDB)

Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&amp;gt; show databases;
+----------+
| DATABASE |
+----------+
| shop     |
+----------+
1 row in set (0.10 sec)

mysql&amp;gt; use shop;
Database changed
mysql&amp;gt; show tables;
+-----------------------+
| Tables in shop        |
+-----------------------+
| customer_balance_log  |
| customer_inf          |
| customer_level_inf    |
| customer_login        |
| customer_login_log    |
| customer_point_log    |
| order_cart            |
| order_customer_addr   |
| order_detail          |
| order_master          |
| product_brand_info    |
| product_category      |
| product_comment       |
| product_info          |
| product_pic_info      |
| product_supplier_info |
| region_info           |
| serial                |
| shipping_info         |
| warehouse_info        |
| warehouse_proudct     |
+-----------------------+
21 rows in set (0.00 sec)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里，我只是对binghe154服务器上的MySQL扩展了读写分离环境，大家也可以根据实际情况对其他服务器的MySQL实现主从复制和读写分离，这样，整个高可用环境就实现了HAProxy的高可用、Mycat的高可用、MySQL的高可用、Zookeeper的高可用和Keepalived的高可用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好了，今天就到这儿吧，我是冰河，我们下期见！！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;重磅福利&quot;&gt;重磅福利&lt;/h2&gt;
&lt;p&gt;微信搜一搜【冰河技术】微信公众号，关注这个有深度的程序员，每天阅读超硬核技术干货，公众号内回复【PDF】有我准备的一线大厂面试资料和我原创的超硬核PDF技术文档，以及我为大家精心准备的多套简历模板（不断更新中），希望大家都能找到心仪的工作，学习是一条时而郁郁寡欢，时而开怀大笑的路，加油。如果你通过努力成功进入到了心仪的公司，一定不要懈怠放松，职场成长和新技术学习一样，不进则退。如果有幸我们江湖再见！&lt;/p&gt;
&lt;p&gt;另外，我开源的各个PDF，后续我都会持续更新和维护，感谢大家长期以来对冰河的支持！！&lt;/p&gt;
</description>
<pubDate>Tue, 24 Nov 2020 16:03:00 +0000</pubDate>
<dc:creator>冰河团队</dc:creator>
<og:description>前言 业界对系统的高可用有着基本的要求，简单的说，这些要求可以总结为如下所示。 系统架构中不存在单点问题。 可以最大限度的保障服务的可用性。 一般情况下系统的高可用可以用几个9来评估。所谓的几个9就是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/binghe001/p/14033618.html</dc:identifier>
</item>
<item>
<title>分布式监控系统之Zabbix 使用SNMP、JMX信道采集数据 - Linux-1874</title>
<link>http://www.cnblogs.com/qiuhom-1874/p/14029864.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiuhom-1874/p/14029864.html</guid>
<description>&lt;p&gt;　　前文我们了解了zabbix的被动、主动以及web监控相关话题，回顾请参考&lt;a href=&quot;https://www.cnblogs.com/qiuhom-1874/p/14024212.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/qiuhom-1874/p/14024212.html&lt;/a&gt;；今天我们来了解下zabbix使用SNMP和JMX信道采集数据的相关话题；&lt;/p&gt;
&lt;p&gt;　　1、SNMP协议介绍&lt;/p&gt;
&lt;p&gt;　　 SNMP是英文“Simple Network Management Protocol”的缩写，中文意思是“简单网络管理协议，SNMP是一种简单网络管理协议，它属于TCP/IP五层协议中的应用层协议，用于网络管理的协议，SNMP主要用于网络设备的管理。SNMP的基本思想：为不同种类的设备、不同厂家生产的设备、不同型号的设备，定义为一个统一的接口和协议，使得管理员可以是使用统一的外观面对这些需要管理的网络设备进行管理。通过网络，管理员可以管理位于不同物理空间的设备，从而大大提高网络管理的效率，简化网络管理员的工作。SNMP协议是TCP/IP协议簇的一个应用层协议，在1988年被制定，并被Internet体系结构委员会（IAB）采纳作为一个短期的网络管理解决方案，由于SNMP的简单性，在Internet时代得到了蓬勃的发展，1992年发布了SNMPv2版本，以增强SNMPv1的安全性和功能，SNMP的协议版本目前有SNMP v1、SNMP v2c和SNMP v3三种版本，其具体差别如下：&lt;/p&gt;
&lt;p&gt;　　 SNMP v1采用社区名（Community Name）认证，社区名用来定义SNMP NMS和SNMP Agent的关系，如果SNMP报文携带的社区名没有得到设备的认可，该报文将被丢弃，社区名起到了类似于密码的作用，用来限制SNMP NMS对SNMP Agent的访问。&lt;/p&gt;
&lt;p&gt;　　 SNMP v2c也采用社区名认证，它在兼容SNMP v1的同时又扩充了SNMP v1的功能，它提供了更多的操作类型（GetBulk和InformRequest）、支持更多的数据类型（Counter64等）、提供了更丰富的错误代码且能够更细致地区分错误。&lt;/p&gt;
&lt;p&gt;　　 SNMP v3提供了基于用户的安全模型（USM，User-Based Security Model）的认证机制，用户可以设置认证和加密功能，认证用于验证报文发送方的合法性，避免非法用户的访问，加密则是对NMS和Agent之间的传输报文进行加密，以免被窃听。通过有无认证和有无加密等功能组合，可以为SNMP NMS和SNMP Agent之间的通信提供更高的安全性。&lt;/p&gt;
&lt;p&gt;　　2、SNMP工作机制&lt;/p&gt;
&lt;p&gt;　　SNMP的工作机制SNMP网络元素分为NMS和Agent两种： NMS（Network Management Station，网络管理站）是运行SNMP客户端程序的工作站，能够提供非常友好的人机交互界面，方便网络管理员完成绝大多数的网络管理工作。 Agent是驻留在设备上的一个进程，负责接收、处理来自NMS的请求报文。在一些紧急情况下，如接口状态发生改变等，Agent也会主动通知NMS。 NMS是SNMP网络的管理者，Agent是SNMP网络的被管理者。NMS和Agent之间通过SNMP协议来交互管理信息。&lt;/p&gt;
&lt;p&gt;　　3、SNMP数据交互&lt;/p&gt;
&lt;p&gt;　　 SNMP管理进程与代理进程之前为了交互信息，定义了5种报文：&lt;/p&gt;
&lt;p&gt;　　　　get-request操作：从代理进程处提取一个或多个参数值。&lt;/p&gt;
&lt;p&gt;　　　　get-next-request操作：从代理进程处提取一个或多个参数的下一个参数值。&lt;/p&gt;
&lt;p&gt;　　　　set-request操作：设置代理进程的一个或多个参数值。&lt;/p&gt;
&lt;p&gt;　　　　get-response操作：返回的一个或多个参数值。这个操作是由代理进程发出的。&lt;/p&gt;
&lt;p&gt;　　　　trap 操作：代理进程主动发出的报文，通知管理进程有某些事情发生。&lt;/p&gt;
&lt;p&gt;　　SNMP数据交互示意图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124133503126-57030184.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　4、SNMP组织结构&lt;/p&gt;
&lt;p&gt;　　一套完整的SNMP系统主要包括以下几个方面：SNMP报文协议。管理信息结构（SMI， Structure ofManagement Information），一套公用的结构和表示符号。管理信息库（MIB，Management Information Base），管理信息库包含所有代理进程的所有可被查询和修改的参数。 OID（Object Identifiers），一个OID是一个唯一的键值对，用于标识具体某一个设备的某个具体信息(对象标识)，如端口信息、设备名称等。&lt;/p&gt;
&lt;p&gt;　　5、SNMP MIB&lt;/p&gt;
&lt;p&gt;　　所谓(MIB)管理信息库，就是所有代理进程包含的、并且能够被管理进程进行查询和设置的信息的集合。MIB是基于对象标识树的，对象标识是一个整数序列，中间以&quot;.&quot;分割，这些整数构成一个树型结构，类似于 DNS或Unix的文件系统,MIB被划分为若干个组，如system、 interfaces、 at（地址转换）和ip组等。iso.org.dod.internet.private.enterprises（ 1.3.6.1.4.1）这个标识，是给厂家自定义而预留的，比如华为的为1.3.6.1.4.1.2011，华三的为1.3.6.1.4.1.25506。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124134141045-1654669266.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Centos 部分常用的OID&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124134322434-598600578.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　6、在Linux上启用SNMP&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node05 ~]# yum install -y net-snmp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：以上安装是安装snmp agent，运行在被监控端；&lt;/p&gt;
&lt;p&gt;　　安装snmp客户端工具&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node05 ~]# yum install -y net-snmp-utils
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　配置snmp允许那些社区的客户端获取数据，以及对snmp有哪些权限，允许获取那些数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124203727910-735940217.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：以上配置表示，首先将社区名public映射为一个安全的名称 notConfigUser；其次映射安全名 notConfigUser映射为组名notConfigGroup，并将安全模式v1和v2c加入到组内，这表示只要在这个组内的成员都兼容v1 和v2c两个版本的安全模式；第三是创建一个视图，名为systemview，并配置允许那些叶子节点的oid加入到此视图；最后授权notConfigGroup组里的任何用户，用任何安全模式都对systemview拥有只读权限，不拥有写权限，也没有例外；简单点讲以上配置表示只要是public社区的用户，都将识别为notConfigGroup里的用户，而对应组里的用户拥有systemview授权的子树只读权限；这里需要注意，子树就是我们要获取的数据对象的标识（oid）;我们授权只需要修改对应systemview拥有那些子树即可；&lt;/p&gt;
&lt;p&gt;　　示例：授权systemview视图拥有对操作系统cpu负载1分钟的数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124205350881-807891142.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：只需要将对应cpu1分钟负载对应oid加入到systemview视图即可；&lt;/p&gt;
&lt;p&gt;　　启动snmpd&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node05 ~]# systemctl start snmpd.service 
[root@node05 ~]# ss -unl
State      Recv-Q Send-Q           Local Address:Port                          Peer Address:Port              
UNCONN     0      0                            *:161                                      *:*                  
UNCONN     0      0                    127.0.0.1:323                                      *:*                  
UNCONN     0      0                          ::1:323                                     :::*                  
[root@node05 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：请确保udp的161端口正常监听；&lt;/p&gt;
&lt;p&gt;　　验证：使用snmpget工具来获取node05上的cpu1分钟负载数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node05 ~]# snmpget -c public -v 2c node05 .1.3.6.1.4.1.2021.10.1.3.1
UCD-SNMP-MIB::laLoad.1 = STRING: 0.00
[root@node05 ~]# uptime
 20:57:49 up 35 min,  1 user,  load average: 0.00, 0.02, 0.05
[root@node05 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到用snmpget工具获取的数据和我们使用uptime命令获取的数据一样；指定获取数据可以使用oid来指定，也可以使用mib来获取；&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node05 ~]# snmpget -c public -v 2c node05 UCD-SNMP-MIB::laLoad.1
UCD-SNMP-MIB::laLoad.1 = STRING: 0.00
[root@node05 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　使用snmpwalk工具获取非叶子节点下所有数据&lt;/p&gt;
&lt;p&gt;　　首先授权snmp能够看到对应子树&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124210749998-777657696.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：以上红框中内容表示systemview包含.1.3.6.1.2.1.25这个子树，这意味着其下的所有子树可以看到；&lt;/p&gt;
&lt;p&gt;　　重启snmpd&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node05 ~]# systemctl restart snmpd.service 
[root@node05 ~]# ss -unl
State      Recv-Q Send-Q           Local Address:Port                          Peer Address:Port              
UNCONN     0      0                            *:161                                      *:*                  
UNCONN     0      0                    127.0.0.1:323                                      *:*                  
UNCONN     0      0                          ::1:323                                     :::*                  
[root@node05 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　获取系统进程列表&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node05 ~]# snmpwalk -c public -v 2c node05 .1.3.6.1.2.1.25.4.2.1.2
HOST-RESOURCES-MIB::hrSWRunName.1 = STRING: &quot;systemd&quot;
HOST-RESOURCES-MIB::hrSWRunName.2 = STRING: &quot;kthreadd&quot;
HOST-RESOURCES-MIB::hrSWRunName.3 = STRING: &quot;ksoftirqd/0&quot;
HOST-RESOURCES-MIB::hrSWRunName.5 = STRING: &quot;kworker/0:0H&quot;
HOST-RESOURCES-MIB::hrSWRunName.7 = STRING: &quot;migration/0&quot;
HOST-RESOURCES-MIB::hrSWRunName.8 = STRING: &quot;rcu_bh&quot;
HOST-RESOURCES-MIB::hrSWRunName.9 = STRING: &quot;rcu_sched&quot;
HOST-RESOURCES-MIB::hrSWRunName.10 = STRING: &quot;watchdog/0&quot;
HOST-RESOURCES-MIB::hrSWRunName.11 = STRING: &quot;watchdog/1&quot;
HOST-RESOURCES-MIB::hrSWRunName.12 = STRING: &quot;migration/1&quot;
HOST-RESOURCES-MIB::hrSWRunName.13 = STRING: &quot;ksoftirqd/1&quot;
HOST-RESOURCES-MIB::hrSWRunName.14 = STRING: &quot;kworker/1:0&quot;
HOST-RESOURCES-MIB::hrSWRunName.15 = STRING: &quot;kworker/1:0H&quot;
HOST-RESOURCES-MIB::hrSWRunName.17 = STRING: &quot;kdevtmpfs&quot;
HOST-RESOURCES-MIB::hrSWRunName.18 = STRING: &quot;netns&quot;
HOST-RESOURCES-MIB::hrSWRunName.19 = STRING: &quot;khungtaskd&quot;
HOST-RESOURCES-MIB::hrSWRunName.20 = STRING: &quot;writeback&quot;
HOST-RESOURCES-MIB::hrSWRunName.21 = STRING: &quot;kintegrityd&quot;
HOST-RESOURCES-MIB::hrSWRunName.22 = STRING: &quot;bioset&quot;
HOST-RESOURCES-MIB::hrSWRunName.23 = STRING: &quot;kblockd&quot;
HOST-RESOURCES-MIB::hrSWRunName.24 = STRING: &quot;md&quot;
HOST-RESOURCES-MIB::hrSWRunName.25 = STRING: &quot;kworker/0:1&quot;
HOST-RESOURCES-MIB::hrSWRunName.30 = STRING: &quot;kswapd0&quot;
HOST-RESOURCES-MIB::hrSWRunName.31 = STRING: &quot;ksmd&quot;
HOST-RESOURCES-MIB::hrSWRunName.32 = STRING: &quot;khugepaged&quot;
HOST-RESOURCES-MIB::hrSWRunName.33 = STRING: &quot;crypto&quot;
HOST-RESOURCES-MIB::hrSWRunName.41 = STRING: &quot;kthrotld&quot;
HOST-RESOURCES-MIB::hrSWRunName.42 = STRING: &quot;kworker/u256:1&quot;
HOST-RESOURCES-MIB::hrSWRunName.43 = STRING: &quot;kmpath_rdacd&quot;
HOST-RESOURCES-MIB::hrSWRunName.44 = STRING: &quot;kworker/1:1&quot;
HOST-RESOURCES-MIB::hrSWRunName.45 = STRING: &quot;kpsmoused&quot;
HOST-RESOURCES-MIB::hrSWRunName.47 = STRING: &quot;ipv6_addrconf&quot;
HOST-RESOURCES-MIB::hrSWRunName.66 = STRING: &quot;deferwq&quot;
HOST-RESOURCES-MIB::hrSWRunName.98 = STRING: &quot;kauditd&quot;
HOST-RESOURCES-MIB::hrSWRunName.265 = STRING: &quot;kworker/1:2&quot;
HOST-RESOURCES-MIB::hrSWRunName.282 = STRING: &quot;ata_sff&quot;
HOST-RESOURCES-MIB::hrSWRunName.283 = STRING: &quot;scsi_eh_0&quot;
HOST-RESOURCES-MIB::hrSWRunName.284 = STRING: &quot;scsi_tmf_0&quot;
HOST-RESOURCES-MIB::hrSWRunName.285 = STRING: &quot;scsi_eh_1&quot;
HOST-RESOURCES-MIB::hrSWRunName.286 = STRING: &quot;scsi_tmf_1&quot;
HOST-RESOURCES-MIB::hrSWRunName.289 = STRING: &quot;mpt_poll_0&quot;
HOST-RESOURCES-MIB::hrSWRunName.290 = STRING: &quot;mpt/0&quot;
HOST-RESOURCES-MIB::hrSWRunName.298 = STRING: &quot;scsi_eh_2&quot;
HOST-RESOURCES-MIB::hrSWRunName.299 = STRING: &quot;scsi_tmf_2&quot;
HOST-RESOURCES-MIB::hrSWRunName.300 = STRING: &quot;ttm_swap&quot;
HOST-RESOURCES-MIB::hrSWRunName.375 = STRING: &quot;kdmflush&quot;
HOST-RESOURCES-MIB::hrSWRunName.376 = STRING: &quot;bioset&quot;
HOST-RESOURCES-MIB::hrSWRunName.387 = STRING: &quot;kdmflush&quot;
HOST-RESOURCES-MIB::hrSWRunName.388 = STRING: &quot;bioset&quot;
HOST-RESOURCES-MIB::hrSWRunName.401 = STRING: &quot;bioset&quot;
HOST-RESOURCES-MIB::hrSWRunName.402 = STRING: &quot;xfsalloc&quot;
HOST-RESOURCES-MIB::hrSWRunName.403 = STRING: &quot;xfs_mru_cache&quot;
HOST-RESOURCES-MIB::hrSWRunName.404 = STRING: &quot;xfs-buf/dm-0&quot;
HOST-RESOURCES-MIB::hrSWRunName.405 = STRING: &quot;xfs-data/dm-0&quot;
HOST-RESOURCES-MIB::hrSWRunName.406 = STRING: &quot;xfs-conv/dm-0&quot;
HOST-RESOURCES-MIB::hrSWRunName.407 = STRING: &quot;xfs-cil/dm-0&quot;
HOST-RESOURCES-MIB::hrSWRunName.408 = STRING: &quot;xfs-reclaim/dm-&quot;
HOST-RESOURCES-MIB::hrSWRunName.409 = STRING: &quot;xfs-log/dm-0&quot;
HOST-RESOURCES-MIB::hrSWRunName.410 = STRING: &quot;xfs-eofblocks/d&quot;
HOST-RESOURCES-MIB::hrSWRunName.411 = STRING: &quot;xfsaild/dm-0&quot;
HOST-RESOURCES-MIB::hrSWRunName.467 = STRING: &quot;kworker/1:1H&quot;
HOST-RESOURCES-MIB::hrSWRunName.468 = STRING: &quot;kworker/0:1H&quot;
HOST-RESOURCES-MIB::hrSWRunName.482 = STRING: &quot;systemd-journal&quot;
HOST-RESOURCES-MIB::hrSWRunName.506 = STRING: &quot;lvmetad&quot;
HOST-RESOURCES-MIB::hrSWRunName.511 = STRING: &quot;systemd-udevd&quot;
HOST-RESOURCES-MIB::hrSWRunName.544 = STRING: &quot;xfs-buf/sda1&quot;
HOST-RESOURCES-MIB::hrSWRunName.545 = STRING: &quot;xfs-data/sda1&quot;
HOST-RESOURCES-MIB::hrSWRunName.546 = STRING: &quot;xfs-conv/sda1&quot;
HOST-RESOURCES-MIB::hrSWRunName.547 = STRING: &quot;xfs-cil/sda1&quot;
HOST-RESOURCES-MIB::hrSWRunName.548 = STRING: &quot;xfs-reclaim/sda&quot;
HOST-RESOURCES-MIB::hrSWRunName.549 = STRING: &quot;xfs-log/sda1&quot;
HOST-RESOURCES-MIB::hrSWRunName.550 = STRING: &quot;xfs-eofblocks/s&quot;
HOST-RESOURCES-MIB::hrSWRunName.551 = STRING: &quot;xfsaild/sda1&quot;
HOST-RESOURCES-MIB::hrSWRunName.554 = STRING: &quot;nfit&quot;
HOST-RESOURCES-MIB::hrSWRunName.598 = STRING: &quot;kworker/u257:0&quot;
HOST-RESOURCES-MIB::hrSWRunName.599 = STRING: &quot;hci0&quot;
HOST-RESOURCES-MIB::hrSWRunName.600 = STRING: &quot;hci0&quot;
HOST-RESOURCES-MIB::hrSWRunName.602 = STRING: &quot;kworker/u257:2&quot;
HOST-RESOURCES-MIB::hrSWRunName.624 = STRING: &quot;auditd&quot;
HOST-RESOURCES-MIB::hrSWRunName.648 = STRING: &quot;rsyslogd&quot;
HOST-RESOURCES-MIB::hrSWRunName.649 = STRING: &quot;systemd-logind&quot;
HOST-RESOURCES-MIB::hrSWRunName.650 = STRING: &quot;polkitd&quot;
HOST-RESOURCES-MIB::hrSWRunName.651 = STRING: &quot;dbus-daemon&quot;
HOST-RESOURCES-MIB::hrSWRunName.653 = STRING: &quot;chronyd&quot;
HOST-RESOURCES-MIB::hrSWRunName.660 = STRING: &quot;NetworkManager&quot;
HOST-RESOURCES-MIB::hrSWRunName.662 = STRING: &quot;irqbalance&quot;
HOST-RESOURCES-MIB::hrSWRunName.669 = STRING: &quot;crond&quot;
HOST-RESOURCES-MIB::hrSWRunName.674 = STRING: &quot;agetty&quot;
HOST-RESOURCES-MIB::hrSWRunName.877 = STRING: &quot;tuned&quot;
HOST-RESOURCES-MIB::hrSWRunName.976 = STRING: &quot;sshd&quot;
HOST-RESOURCES-MIB::hrSWRunName.1029 = STRING: &quot;zabbix_agentd&quot;
HOST-RESOURCES-MIB::hrSWRunName.1030 = STRING: &quot;zabbix_agentd&quot;
HOST-RESOURCES-MIB::hrSWRunName.1031 = STRING: &quot;zabbix_agentd&quot;
HOST-RESOURCES-MIB::hrSWRunName.1032 = STRING: &quot;zabbix_agentd&quot;
HOST-RESOURCES-MIB::hrSWRunName.1033 = STRING: &quot;zabbix_agentd&quot;
HOST-RESOURCES-MIB::hrSWRunName.1034 = STRING: &quot;zabbix_agentd&quot;
HOST-RESOURCES-MIB::hrSWRunName.1074 = STRING: &quot;master&quot;
HOST-RESOURCES-MIB::hrSWRunName.1075 = STRING: &quot;pickup&quot;
HOST-RESOURCES-MIB::hrSWRunName.1076 = STRING: &quot;qmgr&quot;
HOST-RESOURCES-MIB::hrSWRunName.1240 = STRING: &quot;sshd&quot;
HOST-RESOURCES-MIB::hrSWRunName.1242 = STRING: &quot;bash&quot;
HOST-RESOURCES-MIB::hrSWRunName.1333 = STRING: &quot;kworker/u256:2&quot;
HOST-RESOURCES-MIB::hrSWRunName.1666 = STRING: &quot;kworker/0:0&quot;
HOST-RESOURCES-MIB::hrSWRunName.1732 = STRING: &quot;anacron&quot;
HOST-RESOURCES-MIB::hrSWRunName.1883 = STRING: &quot;kworker/0:2&quot;
HOST-RESOURCES-MIB::hrSWRunName.1960 = STRING: &quot;snmpd&quot;
HOST-RESOURCES-MIB::hrSWRunName.1970 = STRING: &quot;snmpwalk&quot;
[root@node05 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　配置zabbix web使用snmp信道采集node05上的数据，并链接Template OS Linux SNMPv2模板&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124215315829-1863945457.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　链接模板&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124215359789-833641321.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　查看主机列表，看看node05对应的SNMP信道是否变绿了？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124215557351-1938148858.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　添加snmp item&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124220815163-1162842471.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：在主机列表中找到对应主机上的item，然后点击create item ，填写好item名称，选择SNMP v2 agent；这里的key就只是起一个标识作用，尽量不要和已有的内建key和自定义key重复即可；最重要的是要填写好对应主机的snmp监听的ip地址和端口，以及要采集数据对应的oid或mib和社区名称；社区名称可以写宏，默认就有一个{$SNMP_COMMUNITY}其值就是public；调用对应的宏也是可以的；&lt;/p&gt;
&lt;p&gt;　　查看我们定义的item是否采集到数据呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124221403252-1078339983.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　以上就是zabbix使用snmp信道采集数据配置和演示；接下我们再来说说zabbix 使用jmx信道监控java程序&lt;/p&gt;
&lt;p&gt;　　jmx是Java Management Extensions的缩写，即Java管理扩展，它可以跨平台实现灵活的开发无缝集成的系统、网络和服务管理应用。在zabbix 上使用jmx信道采集对应java程序的相关指标数据，首先zabbix原生是不支持jmx，它依赖zabbix-java-gateway；其次对应被监控主机上运行的java程序要打开jmx功能；zabbix-java-gateway我们可以理解为zabbix jmx的代理服务，它负责zabbix server 委派给它使用jmx信道采集数据，将采集到数据发送给zabbix server ；所以要想使用jmx信道来采集数据，首先我们得安装并启动zabbix java gateway服务，然后配置zabbix server ,告诉zabbix server java gateway服务地址和端口；最后在对应的被监控端开启jmx；&lt;/p&gt;
&lt;p&gt;　　安装zabbix java gateway&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node04 ~]# yum install -y zabbix-java-gateway
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：这个服务可以安装在zabbix server 上，也可以独立一台服务器，也可安装在被监控端；总之zabbix server 能够正常和它通信即可；&lt;/p&gt;
&lt;p&gt;　　配置zabbix java gateway&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node04 ~]# grep -Ei &quot;^[a-z]&quot; /etc/zabbix/zabbix_java_gateway.conf
LISTEN_IP=&quot;0.0.0.0&quot;
LISTEN_PORT=10052
PID_FILE=&quot;/var/run/zabbix/zabbix_java.pid&quot;
START_POLLERS=5
TIMEOUT=3
[root@node04 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：以上是java gateway的默认配置，保持默认配置即可；如果后续觉得java gateway的poller少了，可以更改；&lt;/p&gt;
&lt;p&gt;　　启动zabbix java gateway&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node04 ~]# systemctl start zabbix-java-gateway.service 
[root@node04 ~]# ss -tnl
State      Recv-Q Send-Q           Local Address:Port                          Peer Address:Port              
LISTEN     0      128                          *:6379                                     *:*                  
LISTEN     0      128                          *:80                                       *:*                  
LISTEN     0      128                          *:22                                       *:*                  
LISTEN     0      100                  127.0.0.1:25                                       *:*                  
LISTEN     0      128                          *:10050                                    *:*                  
LISTEN     0      128                         :::80                                      :::*                  
LISTEN     0      128                         :::22                                      :::*                  
LISTEN     0      100                        ::1:25                                      :::*                  
LISTEN     0      50                          :::10052                                   :::*                  
[root@node04 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：默认java gateway监听在10052端口，启动后请确保该端口处于监听即可；&lt;/p&gt;
&lt;p&gt;　　配置zabbix server&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124224808025-1029558061.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：在zabbix server配置文件中找到java gateway的配置，配置Java gateway的ip地址，端口，以及启动的poller数量和超时时间即可；&lt;/p&gt;
&lt;p&gt;　　重启zabbix server&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node03 ~]# systemctl restart zabbix-server.service 
[root@node03 ~]# ss -tnl
State      Recv-Q Send-Q           Local Address:Port                          Peer Address:Port              
LISTEN     0      128                          *:22                                       *:*                  
LISTEN     0      100                  127.0.0.1:25                                       *:*                  
LISTEN     0      128                          *:10050                                    *:*                  
LISTEN     0      128                          *:10051                                    *:*                  
LISTEN     0      128                         :::22                                      :::*                  
LISTEN     0      100                        ::1:25                                      :::*                  
LISTEN     0      128                         :::10051                                   :::*                  
[root@node03 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：请确保zabbix server能够正常启动起来；对应端口能够正常处于监听状态；&lt;/p&gt;
&lt;p&gt;　　在node05上安装tomcat服务&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node05 ~]# yum install -y tomcat-admin-webapps tomcat-webapps tomcat-docs-webapp tomcat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　开启tomcat的jmx功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124230210344-1745783638.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　完整配置文件内容&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node05 ~]# grep -Ei &quot;^[a-z]&quot; /etc/tomcat/tomcat.conf
TOMCAT_CFG_LOADED=&quot;1&quot;
TOMCATS_BASE=&quot;/var/lib/tomcats/&quot;
JAVA_HOME=&quot;/usr/lib/jvm/jre&quot;
CATALINA_HOME=&quot;/usr/share/tomcat&quot;
CATALINA_TMPDIR=&quot;/var/cache/tomcat/temp&quot;
CATALINA_OPTS=&quot;-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=12345 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=192.168.0.45&quot;
JAVA_OPTS=&quot;-Djavax.sql.DataSource.Factory=org.apache.commons.dbcp.BasicDataSourceFactory&quot;
SECURITY_MANAGER=&quot;false&quot;
[root@node05 ~]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　启动tomcat&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node05 ~]# systemctl start tomcat
[root@node05 ~]# ss -tnl
State      Recv-Q Send-Q           Local Address:Port                          Peer Address:Port              
LISTEN     0      128                          *:80                                       *:*                  
LISTEN     0      128                          *:22                                       *:*                  
LISTEN     0      100                  127.0.0.1:25                                       *:*                  
LISTEN     0      128                          *:10050                                    *:*                  
LISTEN     0      128                  127.0.0.1:199                                      *:*                  
LISTEN     0      100                         :::8080                                    :::*                  
LISTEN     0      128                         :::80                                      :::*                  
LISTEN     0      128                         :::22                                      :::*                  
LISTEN     0      50                          :::12345                                   :::*                  
LISTEN     0      100                        ::1:25                                      :::*                  
LISTEN     0      128                         :::10050                                   :::*                  
LISTEN     0      1             ::ffff:127.0.0.1:8005                                    :::*                  
LISTEN     0      50                          :::44229                                   :::*                  
LISTEN     0      50                          :::35589                                   :::*                  
LISTEN     0      100                         :::8009                                    :::*                  
[root@node05 ~]#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：请确保对应的端口都处于监听状态，jmx我们刚才指定的是12345端口，默认在zabbix使用的端口也是12345,所以这两个端口保持一致即可；&lt;/p&gt;
&lt;p&gt;　　在zabbix web上配置node05上使用jmx接口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124232633697-1488959000.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　链接模板&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124232712244-1925767056.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　查看node05上的jmx信道是否变绿？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124233113401-1637264159.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　查看是否采集到对应模板上的监控项数据呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202011/1503305-20201124233143448-1634776750.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：可以看到我们链接的模板，对应很多监控项都采集到数据了；说明我们配置使用jmx采集数据没有什么问题；&lt;/p&gt;
</description>
<pubDate>Tue, 24 Nov 2020 15:48:00 +0000</pubDate>
<dc:creator>Linux-1874</dc:creator>
<og:description>前文我们了解了zabbix的被动、主动以及web监控相关话题，回顾请参考https://www.cnblogs.com/qiuhom-1874/p/14024212.html；今天我们来了解下zabb</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qiuhom-1874/p/14029864.html</dc:identifier>
</item>
<item>
<title>python 中 try...finally... 的优雅实现 - kingron</title>
<link>http://www.cnblogs.com/hifinancial/p/14033525.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hifinancial/p/14033525.html</guid>
<description>&lt;h3 id=&quot;1-关于-try-finally&quot;&gt;1. 关于 try.. finally..&lt;/h3&gt;
&lt;p&gt;假如上帝用 python 为每一个来到世界的生物编写程序，那么除去中间过程的种种复杂实现，最不可避免的就是要保证每个实例最后都要挂掉。代码可简写如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;try:
    born()  # 出生

    # 正常降临世界
    # do something..

except ValueError:
    # 安排错误
    # do something...

except AttributeError:
    # 特征错误
    # do something...

except TypeError:
    # 种类错误
    # do something...

...  # 等等杂七杂八的错误

finally:
    go_die()  # 挂掉
    come_to_see_me()  # 然后来见我
    reincarnate()  # 下一轮，安排！
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这就是 &lt;code&gt;finally&lt;/code&gt; 的作用和实例。就算捕获异常后再次出现异常，最终也能保证 &lt;code&gt;go_die&lt;/code&gt; 方法会执行，但是，如果 &lt;code&gt;go_die&lt;/code&gt; 方法出现错误，那么就不能正常去见上帝了。为了保证每个生物（不管有没有挂掉）都能见到上帝他老人家，并开始下一个轮回（不管有没有见到），需要做如下处理：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;...

finally:
    try:
        go_die()
    finally:
        try:
            come_to_see_me()
        finally:
            reincarnate()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;OK，功能虽然实现了，但按照 &lt;code&gt;The Zen of Python&lt;/code&gt; 所说：&lt;code&gt;Flat is better than nested.&lt;/code&gt;（扁平优于嵌套），那么这段代码就略显丑陋了。为了遵循 python 美学，我们可以对这段进行优化，使它看起来更为美观。&lt;/p&gt;
&lt;h3 id=&quot;2-错误的上下文：__context__&quot;&gt;2. 错误的上下文：&lt;code&gt;__context__&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;在此之前，需要引入一个新的概念： &lt;code&gt;__context__&lt;/code&gt;，&lt;code&gt;__context__&lt;/code&gt; 的字面意思就是上下文，它属于错误的一个属性。在错误捕获中，它意味着当你处理一个错误时，另一个错误发生了。也就是说，你所捕获的错误虽然被成功捕获了，但当捕获完成时，你的一些操作导致另一个错误发生，而这个错误并没有被捕获。通常情况下，如果处理的好，那么&lt;strong&gt;当前错误&lt;/strong&gt;的 &lt;code&gt;__context__&lt;/code&gt; 的值为 &lt;code&gt;None&lt;/code&gt;，如果处理不好那就是你所捕获的错误。比如下面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;def type_err():
    raise TypeError('this is a type error.')

def after_type_err():
    raise ValueError('this is a value error.')

try:
    type_err()
except TypeError:
    after_type_err()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;Traceback (most recent call last):
  File &quot;&amp;lt;ipython-input-4-189a22d65266&amp;gt;&quot;, line 8, in &amp;lt;module&amp;gt;
    type_err()
  File &quot;&amp;lt;ipython-input-4-189a22d65266&amp;gt;&quot;, line 2, in type_err
    raise TypeError('this is a type error.')
TypeError: this is a type error.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;C:\Users\lineu\AppData\Local\Programs\Python\Python37\lib\site-packages\IPython\core\interactiveshell.py&quot;, line 3326, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File &quot;&amp;lt;ipython-input-4-189a22d65266&amp;gt;&quot;, line 10, in &amp;lt;module&amp;gt;
    after_type_err()
  File &quot;&amp;lt;ipython-input-4-189a22d65266&amp;gt;&quot;, line 5, in after_type_err
    raise ValueError('this is a value error.')
ValueError: this is a value error.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面的错误信息中，当前错误类型为 &lt;code&gt;ValueError&lt;/code&gt;，它的 &lt;code&gt;__context__&lt;/code&gt; 属性值为 &lt;code&gt;TypeError&lt;/code&gt; 实例，而 &lt;code&gt;TypeError&lt;/code&gt; 实例的 &lt;code&gt;__context__&lt;/code&gt; 为 &lt;code&gt;None&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;3-finalexecutor：优雅的-finally&quot;&gt;3. FinalExecutor：优雅的 finally&lt;/h3&gt;
&lt;p&gt;有了 &lt;code&gt;__context__&lt;/code&gt; 的概念，我们就可以基于此实现一个优雅的“轮回”了。基本思路为：依次执行方法，如果方法报错，那么就将该错误的 &lt;code&gt;__context__&lt;/code&gt; 值设置为上一个错误（如果有）。最后等到所有方法执行完毕，再抛出最后一个错误，那么此时的错误将包含所有可能被引发的错误信息。具体代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;class FinalExecutor(object):
    &quot;&quot;&quot;终极执行器
    用于确保你所有的方法都会被执行（不管中途有没有方法报错）
    同时能看到正确的错误信息
    &quot;&quot;&quot;

    def __init__(self):
        self.last_err = None  # 保存最近发生的错误

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        # 如果有发生错误，则抛出
        if self.last_err:
            raise self.last_err

    def call(self, func, *args, **kwargs):
        &quot;&quot;&quot;调用执行方法&quot;&quot;&quot;
        try:
            func(*args, **kwargs)
        except Exception as e:
            # Exception 捕获所有继承自它或它子类的错误类型
            # 捕获它等于捕获几乎所有错误

            if self.last_err:
                # 将本次错误的上下文定义为上一次错误
                e.__context__ = self.last_err

            # 更新为当前错误
            self.last_err = e
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们的终极执行器使用示例为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;# 定义 3 个方法用于测试
def type_err():
    print('type error')
    raise TypeError('x')


def value_err():
    print('value error')
    raise ValueError('x')


def attr_err():
    print('attr error')
    raise AttributeError('x')


# 使用 with 语句来启动终极执行器
with FinalExecutor() as e:
    e.call(type_err)
    e.call(value_err)
    e.call(attr_err)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行可以看到方法最终都被执行了，且错误信息一个不漏：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;type error
value error
attr error
Traceback (most recent call last):
  File &quot;&amp;lt;ipython-input-5-1b07c576630b&amp;gt;&quot;, line 19, in call
    func(*args, **kwargs)
  File &quot;&amp;lt;ipython-input-6-d602d89ed0e7&amp;gt;&quot;, line 3, in type_err
    raise TypeError('x')
TypeError: x

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;&amp;lt;ipython-input-5-1b07c576630b&amp;gt;&quot;, line 19, in call
    func(*args, **kwargs)
  File &quot;&amp;lt;ipython-input-6-d602d89ed0e7&amp;gt;&quot;, line 8, in value_err
    raise ValueError('x')
ValueError: x

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;C:\Users\lineu\AppData\Local\Programs\Python\Python37\lib\site-packages\IPython\core\interactiveshell.py&quot;, line 3326, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File &quot;&amp;lt;ipython-input-6-d602d89ed0e7&amp;gt;&quot;, line 19, in &amp;lt;module&amp;gt;
    e.call(attr_err)
  File &quot;&amp;lt;ipython-input-5-1b07c576630b&amp;gt;&quot;, line 15, in __exit__
    raise self.last_err
  File &quot;&amp;lt;ipython-input-5-1b07c576630b&amp;gt;&quot;, line 19, in call
    func(*args, **kwargs)
  File &quot;&amp;lt;ipython-input-6-d602d89ed0e7&amp;gt;&quot;, line 13, in attr_err
    raise AttributeError('x')
AttributeError: x
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;4-使用-exitstack&quot;&gt;4. 使用 ExitStack&lt;/h3&gt;
&lt;p&gt;有了我们的终极执行器，上帝就可以优雅的写代码了。为了让每个人都能这样优雅的写 python 代码，python 为我们提供了一个封装好的功能，当然它的实现要比我们的终极执行器复杂一些（考虑的也更周到一些~）。我们可以通过 &lt;code&gt;contextlib&lt;/code&gt; 模块导入该方法并使用：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-py&quot;&gt;from contextlib import ExitStack


with ExitStack() as stack:
    stack.callback(type_err)
    stack.callback(value_err)
    stack.callback(attr_err)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意该 &lt;code&gt;ExitStack&lt;/code&gt; 与 &lt;code&gt;FinalExecutor&lt;/code&gt; 不同的是，它是倒序执行的。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;Over.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 24 Nov 2020 15:37:00 +0000</pubDate>
<dc:creator>kingron</dc:creator>
<og:description>动手实现一个终极函数执行器。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/hifinancial/p/14033525.html</dc:identifier>
</item>
</channel>
</rss>