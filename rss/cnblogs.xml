<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【爬虫】听故事的故事人 - 正版乔</title>
<link>http://www.cnblogs.com/qiaohaoforever/p/10258271.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiaohaoforever/p/10258271.html</guid>
<description>&lt;p&gt;&lt;strong&gt;　　“&lt;/strong&gt; 我每天上班都会经过一个地铁出站口，这个出口平常人不多，有一台长长的扶梯，扶梯下面经常站着一个地铁站务员，她的任务就是看着这列扶梯。每天经过的时候，我都看到她满脸的无聊和困惑，可能她自己也搞不清楚到底为什么要站在这里。&lt;strong&gt;”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;——故事FM&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　昨天看支付宝年度账单，全年出行次数至少335次。来北京两年半，已经不知道多少次走过同一个地铁站，同一个人挤人的地下通道，经过同一个忙碌的人潮。&lt;/p&gt;
&lt;p&gt;　　有时候，疲劳的抬起头可以看到电梯扶手旁的站务员也在满脸疲惫的看着你，眼神中透露出不可言喻的感情，迷惘的人要么埋头前行，要么默念希望，在拥挤的地铁站里，每个人都有自己的故事，每个人也都在为别人的故事增添了些许精彩。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;01&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;—&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;地铁里消失的年轻人&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　“&lt;/strong&gt; 我每天上班都会经过一个地铁出站口，这个出口平常人不多，有一台长长的扶梯，扶梯下面经常站着一个地铁站务员，她的任务就是看着这列扶梯。每天经过的时候，我都看到她满脸的无聊和困惑，可能她自己也搞不清楚到底为什么要站在这里。&lt;strong&gt;”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　一直对熟悉又陌生的地铁站务员的故事充满兴趣，一直也在故事FM聆听别人分享的好故事，《地铁里消失的年轻人》带我认识了这群有故事的人。感兴趣的话，你也可以听听他们的故事，故事里可能也藏着你我。。。&lt;/p&gt;

&lt;p&gt;&lt;span id=&quot;qqmusic_main_219113665_0&quot; class=&quot;db qqmusic_area&quot;&gt;&lt;span class=&quot;db qqmusic_wrp appmsg_card_context appmsg_card_active&quot;&gt;&lt;span class=&quot;db qqmusic_bd&quot;&gt;&lt;span id=&quot;qqmusic_play_219113665_0&quot; class=&quot;play_area&quot;&gt;&lt;img class=&quot;qqmusic_thumb&quot; src=&quot;https://y.gtimg.cn/music/photo_new/T002R90x90M0000019gC8M1TU7ME.jpg&quot; alt=&quot;&quot; data-autourl=&quot;http://isure.stream.qqmusic.qq.com/C200004efMF30jmMhO.m4a?guid=2000001731&amp;amp;vkey=B1BE3D94207C32D28B54B10C28CAB769502CE054601BD7D9D56E40C5A0C546B341D783AE343ED770D6F9D8C01598E0B3A58289632CD86E1C&amp;amp;uin=&amp;amp;fromtag=50&quot; data-musicid=&quot;219113665&quot;/&gt;&lt;span class=&quot;qqmusic_songname&quot;&gt;地铁里消失的年轻人：一个站务员的自述&lt;span class=&quot;qqmusic_singername&quot;&gt;故事FM - 故事FM&lt;span class=&quot;qqmusic_source&quot;&gt;&lt;img src=&quot;https://res.wx.qq.com/mmbizwap/zh_CN/htmledition/images/icon/appmsg/qqmusic/icon_qqmusic_source42f400.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;02&lt;/p&gt;
&lt;p&gt;—&lt;/p&gt;
&lt;p&gt;听故事的故事人&lt;/p&gt;

&lt;p&gt;　　作为《故事FM》的网易云听众，在故事听到“过于真实”的时候，我常常会看看网易云音乐评论，看看有没有人和我一样感同身受，和我一样为故事而感动、喝彩或同情。&lt;/p&gt;
&lt;p&gt;最近将以前的学习的代码整理了一下，增加了网易云音乐电台的评论爬取，看看那些听故事的故事评论人是怎样的人！&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;网易云音乐评论截图&quot; src=&quot;https://img2018.cnblogs.com/blog/1548394/201901/1548394-20190111234816774-1231612078.png&quot; alt=&quot;网易云音乐评论截图&quot; width=&quot;342&quot; height=&quot;352&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　在网易云音乐评论爬取中，值得注意的一点是动态页面加载。&lt;/p&gt;
&lt;p&gt;　　网易云音乐评论采用动态加载的方式翻页更新，打开Chrome的“&lt;span&gt;&lt;code&gt;检查&lt;/code&gt;&lt;/span&gt;”功能切换到“&lt;span&gt;&lt;code&gt;Network&lt;/code&gt;&lt;/span&gt;”,点击“&lt;span&gt;下一页&lt;/span&gt;”会发现地址栏的网址没有变化，但是出现了一条貌似评论API的&lt;code&gt;post&lt;/code&gt;请求，多次点击“下一页”，你会发现&lt;span&gt;&lt;code&gt;Request URL&lt;/code&gt;&lt;/span&gt;没有变化，变化的是&lt;span&gt;&lt;code&gt;Form Data&lt;/code&gt;&lt;/span&gt;，这里就是网易云音乐评论爬虫的精髓了，通过加密页面参数生成新的Form Data，post获取下一页的评论数据，关于网易云音乐评论&lt;code&gt;&lt;span&gt;加密&lt;/span&gt;算法&lt;/code&gt;，网络上有大量文章有进行相关介绍研究，我整理的是来自会讲故事的知乎大佬的加密讲解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1548394/201901/1548394-20190111235324548-585280405.png&quot; alt=&quot;&quot; width=&quot;1037&quot; height=&quot;620&quot;/&gt;&lt;/p&gt;
&lt;p&gt;网易云音乐评论翻页，Chrome检查页面&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;网易云音乐评论爬虫截图&quot; src=&quot;https://img2018.cnblogs.com/blog/1548394/201901/1548394-20190111235121242-175054547.png&quot; alt=&quot;网易云音乐评论爬虫截图&quot; width=&quot;1548&quot; height=&quot;849&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　通过爬取评论用户ID，用户名，用户头像，评论时间，点赞数和评论详情为下一步数据分析部分做准备。&lt;/p&gt;
&lt;p&gt;　　爬虫部分今天就先说这么多，关注微信公众号：&lt;span&gt;正版乔&lt;/span&gt;，持续了解听故事的故事人，一步一步了解python爬虫，数据库存储，数据分析，数据可视化的全过程。回复「故事评论」查看你想看的细节～&lt;/p&gt;

&lt;p&gt;    同时，大家也可以关注《故事FM》，听听这个世界其他人相同或不同，有趣或无趣的人生故事。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推荐阅读：&lt;/strong&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;一个学统计的程序员&lt;/p&gt;
&lt;p&gt;喜欢Coding&lt;/p&gt;
&lt;p&gt;喜欢硬件&lt;/p&gt;
&lt;p&gt;喜欢树莓派&lt;/p&gt;
&lt;p&gt;喜欢深度学习&lt;/p&gt;
&lt;p&gt;喜欢你&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UlzWLGVsMeaOBBZWR9Nz0bjf504YSm7qbKTRiclhTV2Baf0v6icIUXH15IHZ2CNDGDgo6ycBtTpM3wNlia4PYenwA/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; alt=&quot;&quot; data-backh=&quot;536&quot; data-backw=&quot;536&quot; data-before-oversubscription-url=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UlzWLGVsMeaOBBZWR9Nz0bjf504YSm7qbKTRiclhTV2Baf0v6icIUXH15IHZ2CNDGDgo6ycBtTpM3wNlia4PYenwA/0?wx_fmt=jpeg&quot; data-copyright=&quot;0&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;536&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;209&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UlzWLGVsMeaOBBZWR9Nz0bjf504YSm7qbKTRiclhTV2Baf0v6icIUXH15IHZ2CNDGDgo6ycBtTpM3wNlia4PYenwA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot; data-fail=&quot;0&quot;/&gt; &lt;/p&gt;
</description>
<pubDate>Fri, 11 Jan 2019 15:57:00 +0000</pubDate>
<dc:creator>正版乔</dc:creator>
<og:description>“ 我每天上班都会经过一个地铁出站口，这个出口平常人不多，有一台长长的扶梯，扶梯下面经常站着一个地铁站务员，她的任务就是看着这列扶梯。每天经过的时候，我都看到她满脸的无聊和困惑，可能她自己也</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qiaohaoforever/p/10258271.html</dc:identifier>
</item>
<item>
<title>asp.net core microservices 架构之 分布式自动计算（一） - 无为有道</title>
<link>http://www.cnblogs.com/ck0074451665/p/10258224.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ck0074451665/p/10258224.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Logging;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Options;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; org.apache.zookeeper;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.data;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.ZooKeeper;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq.Expressions;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher.Event;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Newtonsoft.Json;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Concurrent;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;  Walt.Framework.Service.Zookeeper
{

    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;  WaitLockWatch:Watcher
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; AutoResetEvent _autoResetEvent;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ILogger _logger;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _path;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ZookeeperService _zookeeperService;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _tempNode;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; WaitLockWatch(AutoResetEvent autoResetEvent
        ,ZookeeperService zookeeperService
        ,ILogger logger,&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; path
        ,&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; tempNode)
        {
            _autoResetEvent&lt;/span&gt;=&lt;span&gt;autoResetEvent;
            _zookeeperService&lt;/span&gt;=&lt;span&gt;zookeeperService;
            _logger&lt;/span&gt;=&lt;span&gt;logger;
            _path&lt;/span&gt;=&lt;span&gt;path;
            _tempNode&lt;/span&gt;=&lt;span&gt;tempNode;
        }

       &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; Task process(WatchedEvent @event)
       {
           _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0}节点下子节点发生改变，激发监视方法。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,_path);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; childList=_zookeeperService.GetChildrenAsync(_path,&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;).Result;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(childList==&lt;span&gt;null&lt;/span&gt;||childList.Children==&lt;span&gt;null&lt;/span&gt;||childList.Children.Count&amp;lt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                   {
                        _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;获取子序列失败，计数为零.path:{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,_path);
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Task.FromResult(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
                   }
                   &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; top=childList.Children.OrderBy(or=&amp;gt;&lt;span&gt;or).First();
                   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(_path+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+top==&lt;span&gt;_tempNode)
                   {
                        _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;释放阻塞&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        _autoResetEvent.Set();
                   }
           
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Task.FromResult(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
       }
    }


    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WaitConnWatch : Watcher
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; AutoResetEvent _autoResetEvent;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ILogger _logger;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; WaitConnWatch(AutoResetEvent autoResetEvent
        ,ILogger logger)
        {
            _autoResetEvent&lt;/span&gt;=&lt;span&gt;autoResetEvent;
            _logger&lt;/span&gt;=&lt;span&gt;logger;
        }

       &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; Task process(WatchedEvent @event)
       {
           _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;watch激发,回掉状态：{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,@event.getState().ToString());
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(@event.getState()==&lt;span&gt; KeeperState.SyncConnected
            &lt;/span&gt;||@event.getState()==&lt;span&gt; KeeperState.ConnectedReadOnly)
            {
                _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;释放阻塞&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                _autoResetEvent.Set();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Task.FromResult(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
       }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ZookeeperService : IZookeeperService
    {

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; requestLockSequence=&lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; _lock=&lt;span&gt;new&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ZookeeperOptions _zookeeperOptions;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ZooKeeper _zookeeper;

         &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] NO_PASSWORD = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];

         &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Watcher Wathcer {&lt;span&gt;get&lt;/span&gt;;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;;}

         &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ILoggerFactory LoggerFac { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

         &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ILogger _logger;

         AutoResetEvent[] autoResetEvent&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; AutoResetEvent[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]
         {&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; AutoResetEvent(&lt;span&gt;false&lt;/span&gt;),&lt;span&gt;new&lt;/span&gt; AutoResetEvent(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;)};

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ZookeeperService(IOptionsMonitor&amp;lt;ZookeeperOptions&amp;gt;&lt;span&gt;  zookeeperOptions
        ,ILoggerFactory loggerFac)
        {
            LoggerFac&lt;/span&gt;=&lt;span&gt;loggerFac;
            _logger&lt;/span&gt;=LoggerFac.CreateLogger&amp;lt;ZookeeperService&amp;gt;&lt;span&gt;();
            _zookeeperOptions&lt;/span&gt;=&lt;span&gt;zookeeperOptions.CurrentValue; 
            _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;配置参数：{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,JsonConvert.SerializeObject(_zookeeperOptions));
             zookeeperOptions.OnChange((zookopt,s)&lt;/span&gt;=&amp;gt;&lt;span&gt;{
                _zookeeperOptions&lt;/span&gt;=&lt;span&gt;zookopt; 
            });
            _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;开始连接&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Conn(_zookeeperOptions); 
        }

       

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Conn(ZookeeperOptions zookeeperOptions)
        {
            &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; isReadOnly=&lt;span&gt;default&lt;/span&gt;&lt;span&gt;(Boolean);
            Wathcer&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; WaitConnWatch(autoResetEvent[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;],_logger);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(isReadOnly!=&lt;span&gt;zookeeperOptions.IsReadOnly)
            {
                isReadOnly&lt;/span&gt;=&lt;span&gt;zookeeperOptions.IsReadOnly;
            }

            
            &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] pwd=&lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有密码和sessionId&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(zookeeperOptions.SessionPwd)
            &lt;/span&gt;&amp;amp;&amp;amp;_zookeeperOptions.SessionId==&lt;span&gt;default&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;))
            {
             _zookeeper&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ZooKeeper(zookeeperOptions.Connectstring,zookeeperOptions.SessionTimeout,Wathcer,isReadOnly);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(zookeeperOptions.SessionPwd))
            {
                pwd&lt;/span&gt;=&lt;span&gt;System.Text.Encoding.Default.GetBytes(zookeeperOptions.SessionPwd);
                 _zookeeper&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; ZooKeeper(zookeeperOptions.Connectstring,zookeeperOptions.SessionTimeout,Wathcer,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,pwd,isReadOnly);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                 _zookeeper&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ZooKeeper(zookeeperOptions.Connectstring
                 ,zookeeperOptions.SessionTimeout,Wathcer,zookeeperOptions.SessionId,pwd,isReadOnly);
            }
             &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(_zookeeper.getState()==&lt;span&gt;States.CONNECTING)
            {
                _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;当前状态：CONNECTING。阻塞等待&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                autoResetEvent[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].WaitOne();
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Task&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; CreateZNode(&lt;span&gt;string&lt;/span&gt; path,&lt;span&gt;string&lt;/span&gt; data,CreateMode createMode,List&amp;lt;ACL&amp;gt;&lt;span&gt; aclList)
        {
            ReConn();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(path)||!path.StartsWith(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
            {
                _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path路径非法，参数：path：{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,path);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] dat=&lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(data))
            { 
                dat&lt;/span&gt;=&lt;span&gt;System.Text.Encoding.Default.GetBytes(data);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(createMode==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                 _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;createMode为null,默认使用CreateMode.PERSISTENT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                createMode&lt;/span&gt;=&lt;span&gt;CreateMode.PERSISTENT;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _zookeeper.createAsync(path,dat,aclList,createMode);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Task&amp;lt;DataResult&amp;gt; GetDataAsync(&lt;span&gt;string&lt;/span&gt; path,Watcher watcher,&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; isSync)
        {
            ReConn();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(_zookeeper.existsAsync(path).Result==&lt;span&gt;null&lt;/span&gt;&lt;span&gt; )
            {
                _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path不存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(isSync)
            {
                 _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;即将进行同步。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); 
                 &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; task=Task.Run(&lt;span&gt;async&lt;/span&gt; ()=&amp;gt;&lt;span&gt;{
                    &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _zookeeper.sync(path);  
                 }); 
                task.Wait();
            }
           

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _zookeeper.getDataAsync(path,watcher);
        }

         &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Task&amp;lt;Stat&amp;gt; SetDataAsync(&lt;span&gt;string&lt;/span&gt; path,&lt;span&gt;string&lt;/span&gt; data,&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; isSync)
        {
            ReConn();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(_zookeeper.existsAsync(path).Result==&lt;span&gt;null&lt;/span&gt;&lt;span&gt; )
            {
                 _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path不存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] dat=&lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(data))
            { 
                dat&lt;/span&gt;=&lt;span&gt;System.Text.Encoding.Default.GetBytes(data);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _zookeeper.setDataAsync(path,dat);
        }

         &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;ChildrenResult&amp;gt; GetChildrenAsync(&lt;span&gt;string&lt;/span&gt; path,Watcher watcher,&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; isSync) 
         {
             ReConn();
              &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(_zookeeper.existsAsync(path).Result==&lt;span&gt;null&lt;/span&gt;&lt;span&gt; )
            {
                 _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path不存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            }
             &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(isSync)
            {
                 _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;即将进行同步。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                 &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; task=Task.Run(&lt;span&gt;async&lt;/span&gt;  ()=&amp;gt;&lt;span&gt;{
                      _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;开始同步&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                      &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _zookeeper.sync(path);  
                 });
                task.Wait();
            }
             &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _zookeeper.getChildrenAsync(path,watcher);
         }

         &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; DeleteNode(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; path,String tempNode)
         {
             &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(tempNode))
             {
                requestLockSequence.Remove(tempNode); 
             }
             ReConn();
              &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(_zookeeper.existsAsync(path).Result==&lt;span&gt;null&lt;/span&gt;&lt;span&gt; )
            {
                 _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path不存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;  task=Task.Run(&lt;span&gt;async&lt;/span&gt; ()=&amp;gt;&lt;span&gt;{
                 _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;删除node：{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,path);
                  &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _zookeeper.deleteAsync(path);
            });
            task.Wait();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sequencePath=requestLockSequence.Where(w=&amp;gt;path==&lt;span&gt;w).FirstOrDefault();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sequencePath!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                requestLockSequence.Remove(sequencePath);
            }
         }

         &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;  &lt;span&gt;string&lt;/span&gt; GetDataByLockNode(&lt;span&gt;string&lt;/span&gt; path,&lt;span&gt;string&lt;/span&gt; sequenceName,List&amp;lt;ACL&amp;gt; aclList,&lt;span&gt;out&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; tempNodeOut)
         {
             _logger.LogInformation(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;获取分布式锁开始。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
             ReConn();
             &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; tempNode=&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
             tempNodeOut&lt;/span&gt;=&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;

              &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(_zookeeper.existsAsync(path).Result==&lt;span&gt;null&lt;/span&gt;&lt;span&gt; )
            {
                 _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path不存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            }

            
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;开始锁定语句块&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;(_lock)
                {
                     _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;锁定，访问requestLockSequence的代码应该同步。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    tempNode&lt;/span&gt;=&lt;span&gt;requestLockSequence
                    .Where(w&lt;/span&gt;=&amp;gt;w.StartsWith(path+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;sequenceName)).FirstOrDefault();
                   
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tempNode==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    {
                        tempNode&lt;/span&gt;=CreateZNode(path+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+sequenceName,&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,CreateMode.EPHEMERAL_SEQUENTIAL,aclList).Result;
                        _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;创建节点：{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,tempNode);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tempNode==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        {
                            _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;创建临时序列节点失败。详细参数:path:{0},data:{1},CreateMode:{2}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                            ,path&lt;/span&gt;+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/squence&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,CreateMode.EPHEMERAL_SEQUENTIAL);
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                        }
                         _logger.LogInformation(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;创建成功，加入requestLockSequence列表。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        requestLockSequence.Add(tempNode);
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                    {
                        _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;已经存在的锁节点，返回null&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                    }
                }

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; childList= GetChildrenAsync(path,&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;).Result;
                   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(childList==&lt;span&gt;null&lt;/span&gt;||childList.Children==&lt;span&gt;null&lt;/span&gt;||childList.Children.Count&amp;lt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                   {
                        _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;获取子序列失败，计数为零.path:{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,path);
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                   }
                   _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;获取path:{0}的子节点：{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,path,Newtonsoft.Json.JsonConvert.SerializeObject(childList.Children));
                   &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; top=childList.Children.OrderBy(or=&amp;gt;&lt;span&gt;or).First();
                   &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] da=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(path+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+top==&lt;span&gt;tempNode)
                   {
                       tempNodeOut &lt;/span&gt;=&lt;span&gt;tempNode;
                       da&lt;/span&gt;= GetDataAsync(path,&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;).Result.Data;
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(da==&lt;span&gt;null&lt;/span&gt;||da.Length&amp;lt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                        {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
                        } 
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; System.Text.Encoding.Default.GetString(da);
                   }
                   &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                   {
                    childList&lt;/span&gt;= GetChildrenAsync(path,&lt;span&gt;new&lt;/span&gt; WaitLockWatch(autoResetEvent[&lt;span&gt;1&lt;/span&gt;],&lt;span&gt;this&lt;/span&gt;,_logger,path,tempNode),&lt;span&gt;true&lt;/span&gt;&lt;span&gt;).Result;
                    autoResetEvent[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;].WaitOne();
                   }
                    _logger.LogDebug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;继续执行。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    tempNodeOut &lt;/span&gt;=&lt;span&gt;tempNode;
                    da&lt;/span&gt;= GetDataAsync(path,&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;).Result.Data;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(da==&lt;span&gt;null&lt;/span&gt;||da.Length&amp;lt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                    {
                         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
                    }
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; System.Text.Encoding.Default.GetString(da);
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception ep)
            {
                 _logger.LogError(ep,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;获取同步锁出现错误。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(tempNode))
                {
                    DeleteNode(tempNode,tempNode);  
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
         }

         &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ReConn()
         {
             _logger.LogInformation(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;检查连接状态&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
             &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(_zookeeper.getState()==&lt;span&gt;States.CLOSED
             &lt;/span&gt;||_zookeeper.getState()==&lt;span&gt; States.NOT_CONNECTED)
             {
                 _logger.LogInformation(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接为关闭，开始重新连接。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                Conn(_zookeeperOptions);
             }
         }

         &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Close(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; tempNode)
         {
             &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; task=Task.Run(&lt;span&gt;async&lt;/span&gt; ()=&amp;gt;&lt;span&gt;{ 
             requestLockSequence.Remove(tempNode); 
              &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _zookeeper.closeAsync();
             });
             task.Wait(); 
         }
 
    }
}&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 11 Jan 2019 15:29:00 +0000</pubDate>
<dc:creator>无为有道</dc:creator>
<og:description>一：简介 自动计算都是常驻内存的，没有人机交互。我们经常用到的就是console job和sql job了。sqljob有自己的宿主，与数据库产品有很关联，暂时不提。console job使用quar</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ck0074451665/p/10258224.html</dc:identifier>
</item>
<item>
<title>全景图转局部平面视图原理详解 - 一度逍遥</title>
<link>http://www.cnblogs.com/riddick/p/10258216.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/riddick/p/10258216.html</guid>
<description>&lt;p&gt;前面两篇博客主要讲了如何从全景图转到小行星、水晶球视图。今天来说下如何从全景图中取一块儿平面视图出来。&lt;/p&gt;
&lt;p&gt;当然最简单的是直接从全景图里画一个ROI，然后扣一块儿区域出来。但是很多时候这样的操作并不方便，如果要是截取的区域跨越了拼接缝的话就麻烦了。&lt;/p&gt;
&lt;p&gt;一劳永逸的方法当然还是将全景图贴到球面去做，假设观察者（比如我）在球内部贴着球面观看，只能看到球的一部分区域。那我不断转动这个球，我就能看到这个球不同位置的局部区域图，因为我贴的很近，我真是闲得慌。&lt;/p&gt;
&lt;p&gt;依然使用下面这张风景秀丽的全景图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1138496/201901/1138496-20190111225735617-449894968.jpg&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;p&gt;1.  还是将全景图贴到球面，经纬展开法应该是老方法了。建立球面坐标系，x轴向右，y轴垂直向内，z轴向上，符合右手坐标系。&lt;/p&gt;
&lt;p&gt;2. 仍然采用反向映射的方法，首先在球的南极点放置一张与南极点相切的平面（也就是我们要获取的局部平面图）。&lt;/p&gt;
&lt;p&gt;3.设定视场角FOV，设定要获取的局部平面图的大小（W,H）。我们可以粗略计算出一个归一化的焦距f = (0.5*W)/tan(fov *0.5)。&lt;/p&gt;
&lt;p&gt;4.局部视图上的坐标（u,v），转换到球面坐标系坐标为(x,y,z)：&lt;/p&gt;
&lt;p&gt;　　其中x = u - W*0.5,    y = H*0.5 - v,     z =f&lt;/p&gt;
&lt;p&gt;5. 得到(x, y, z)后就好办了，转换到球坐标（theta, fi）：&lt;/p&gt;
&lt;p&gt;   theta = acos( z/sqrt(x*x+y*y+z*z) ) &lt;/p&gt;
&lt;p&gt;   fi = acos( x/sqrt(x*x+y*y) )   if (y&amp;lt;0)    fi=2*pi - fi&lt;/p&gt;
&lt;p&gt;6.  得到球坐标后就可以获取全景图的坐标（U, V），如果全景图的尺寸是（panoW, panoH）：&lt;/p&gt;
&lt;p&gt; U = fi * panoW/ (2 * pi);&lt;/p&gt;
&lt;p&gt; V = theta * panoH / pi;&lt;/p&gt;
&lt;p&gt;7. 老样子，双线性插值，从(U,V)周围四个点插值得到（u,v）。&lt;/p&gt;
&lt;p&gt;这样就获取了南极点一小片区域的平面图。那如果我需要观看其他位置，我又懒地跑过去贴上去，我只用转动球就行。也就是在第5步中，对x, y, z施加一个旋转矩阵R，得到新的X, Y, Z 后再投影即可。&lt;/p&gt;

&lt;p&gt;利用上述方法再也不担心跨越拼接缝的问题了，想看哪里看哪里。生成一段环视赤道的局部平面图，fov为75度，如下图所示，头好晕：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1138496/201901/1138496-20190111232530736-847435360.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 11 Jan 2019 15:28:00 +0000</pubDate>
<dc:creator>一度逍遥</dc:creator>
<og:description>前面两篇博客主要讲了如何从全景图转到小行星、水晶球视图。今天来说下如何从全景图中取一块儿平面视图出来。 当然最简单的是直接从全景图里画一个ROI，然后扣一块儿区域出来。但是很多时候这样的操作并不方便，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/riddick/p/10258216.html</dc:identifier>
</item>
<item>
<title>mysql 和 sqlserver中备份一张表的区别 - 夏天里的Jasmine</title>
<link>http://www.cnblogs.com/qianjinyan/p/10258196.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qianjinyan/p/10258196.html</guid>
<description>&lt;p&gt;&lt;span&gt;sqlserver中备份一张表&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SELECT * into qa_buglist_bak FROM qa_buglist &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不管表的数据有多大，速度很快；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mysql中上述语句就无效了，须得新建一张表，然后让此长表中新增数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;create table qa_buglist_bak like qa_buglist;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;insert qa_buglist_bak select * from qa_buglist;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果原表中数据量大，就特别慢，很吃硬盘和CPU&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1064427/201901/1064427-20190111231804470-1978696633.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;刚刚看了下，也就800万行的数据。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1064427/201901/1064427-20190111233001861-757517177.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 我应该先导出到sql文件中，再新增到备份表中的。。。(┬＿┬)&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 11 Jan 2019 15:19:00 +0000</pubDate>
<dc:creator>夏天里的Jasmine</dc:creator>
<og:description>sqlserver中备份一张表 SELECT * into qa_buglist_bak FROM qa_buglist 不管表的数据有多大，速度很快； mysql中上述语句就无效了，须得新建一张表，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qianjinyan/p/10258196.html</dc:identifier>
</item>
<item>
<title>2018年终总结--修身篇 - 虚生</title>
<link>http://www.cnblogs.com/dylancao/p/10258145.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dylancao/p/10258145.html</guid>
<description>&lt;p&gt;　　其实，每个人在不同的人生阶段都有不同的想法和梦想。曾经的我，就想一直念到博士，在高校当一个老师，享受自由自在的生活。曾经的我，是多么的喜欢国学和历史，有很长一段时间，我就只是想当一个国学老师。命运往往会让人遇到很多无法规划的意外和改变。等毕业的时候，发现自己的家境，拿着大学里那么一点点薪水，生存都是问题。还谈什么研究历史呢。在再三权衡后，还是选择了江湖，选择了以写代码为生的码农。读了那么多年的书，虽然是浪迹江湖，仍然把自己当成一个知识分子，一个深受儒家思想影响的中国人。&lt;br/&gt;　　在过去的几年中，陆陆续续读了一些儒家经典，特别是对儒学中的慎独的知行合一深信不已，并把这些奉为人生的信条，在生活中，也越来越体味到儒家文化的厉害之处。所以在过去的2018年中，针对自己遇事慌乱，学习容易急躁的问题。定了一些修身方面的目标的，希望在日常的修为中改变一些自己的毛病。其中最重要的一项就是静，古人云，静以修身，意思就是修身的第一步就是静。　　&lt;br/&gt;　　针对自己遇到的问题，我定制了时刻检讨自己是否达到静的境界。经过一年的自我检讨，容易激动的情况是少了很多，面对很多事情，也不再喜怒无常，焦虑万分，很多时候，学会了保持一份平静和淡然。&lt;br/&gt;　　当遇到家庭变故时，不再像以前那样感觉天塌地陷一样。而是冷静的安顿现场，有条不紊的打理家中的大大小小事情，承担起来一个长子应该承担的责任和义务。不再为一些家庭琐事而争吵。&lt;br/&gt;　　当工作遇到重大危机，我不再像以前那样寝食难安。而是平静的面对现实，接受失败，找出自身的不足，改成并迎接下一次的挑战。&lt;br/&gt;修身的终极目标是慎独，这两个字的分量，可以称得上是儒家修身的终极目标。能达到这样修为的人的确是少数，从去年接触到这个信条之后，我也一直揣摩这个词的含义，拿生活中的一切起丈量，发现这方面还是一时半会很难做到的。自己承认在这方面做的不够好，很多时候，以为别人不知道，就可以自欺欺人，这算是什么慎独啊。在过去的2018中，针对这方面我还是做的不够好，特别是没人监督的时候，不能够把握好度。在接下来的2019中，要时刻不忘修身的慎独。每周都要写一下这方面的自身那些地方做的不好。&lt;br/&gt;所谓修身，我的理解不仅仅是精神，身体的素质同样重要，其实，在2018年，自己在身体锻炼方面做的要比2017好，很长一段时间，都坚持练太极拳，打篮球，长跑，身体素质明显好转，可是随着冬季的到来还下雨，以及后面的生活不规律，就容易把身体锻炼丢掉。这点在未来的2019年中要想一想办法，看看怎么达到一个身体锻炼要保持的频度。就像写日记一样，都不能丢。要把它当成每日的功课来做。以后要分两个时间锻炼，早上和晚上，早上没锻炼就还要把事情放到晚上，这点坚决不能丢。&lt;br/&gt;　　慎独则心安、主敬则身强、求仁则人悦、习劳则神钦。修身是一辈子要做的事情。2018就这样在懵懂中过去了，接下来的2019，要用更严厉的方法来要求自己，在追求慎独的境界上一路前行。&lt;br/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 11 Jan 2019 14:55:00 +0000</pubDate>
<dc:creator>虚生</dc:creator>
<og:description>其实，每个人在不同的人生阶段都有不同的想法和梦想。曾经的我，就想一直念到博士，在高校当一个老师，享受自由自在的生活。曾经的我，是多么的喜欢国学和历史，有很长一段时间，我就只是想当一个国学老师。命运往往</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dylancao/p/10258145.html</dc:identifier>
</item>
<item>
<title>iOS 微信支付SDK与微信友盟分享两者同时集成时，出现的问题与解决之路。 - 滴水微澜</title>
<link>http://www.cnblogs.com/zhou--fei/p/10257730.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhou--fei/p/10257730.html</guid>
<description>&lt;p&gt;这两天改版一个旧的APP，要旧貌换新颜，拿到app后进行编译，一直报下面的错误。&lt;/p&gt;
&lt;p&gt;报不认识的符号名PayReq错误。奇怪，啥也没动就这样，真不知道给的包是不是本来就是个报错的工程。&lt;/p&gt;
&lt;p&gt;不管怎样，要对它修改就先要跑起来啊。&lt;/p&gt;

&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;根据错误提示，判断是libwechatsdk.a里面没有这个方法。顺藤摸瓜按照下面的步骤开始了解决旅途。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;阶段一&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;18&quot;&gt;
&lt;p&gt;1. 手动添加了微信支付SDK源码到工程 &lt;/p&gt;
&lt;p&gt;2. pod 'UMengUShare/Social/WeChat’添加了微信分享，&lt;/p&gt;
&lt;p&gt;编译时报错如下：&lt;/p&gt;
&lt;div readability=&quot;28.5&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201901/826860-20190111223740034-934149889.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;说明导入的微信支付SDK中并没有微信支付调用接口的实现。这可能是复制的微信支付SDK有问题（老项目中带的，不知道来源是哪里）。那用pod方式就换成最新的吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;阶段二&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. pod ‘WechatOpenSDK' 添加最新的微信支付sdk&lt;/p&gt;
&lt;p&gt;2. pod 'UMengUShare/Social/WeChat’添加了微信分享&lt;/p&gt;
&lt;p&gt;Pod时报错如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201901/826860-20190111223900995-447833341.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;提示libwechatsdk.a已经存储。&lt;/p&gt;
&lt;p&gt;于是在工程搜一下：&lt;/p&gt;
&lt;div readability=&quot;14&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201901/826860-20190111223919575-1096350579.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;果然libwechatsdk.a已经被友盟分享下载过了，可不是要报这个错吗。&lt;/p&gt;
&lt;p&gt;步骤走到这里，看上去基本无解了，两者都包含，肯定无法都下载啊，这可咋办呢，喝杯水冷静下。&lt;/p&gt;

&lt;div readability=&quot;13&quot;&gt;
&lt;p&gt;我可以搜一下“如何用pod集成微信支付与友盟分享”啊.&lt;/p&gt;
&lt;p&gt;在网上搜了一下，果然发现了有相似问题的文章。&lt;/p&gt;
&lt;p&gt;发现友盟微信分享是分完整版和精简版的，感情我现在下的是完整版啊，所以才产生了冲突，那要找不包含libwechatsdk.a的版本，其实就是找精简版的了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;那就在网上找找友盟微信分享精简版的pod地址，贴上去就好了。&lt;/p&gt;
&lt;p&gt;赶紧google一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201901/826860-20190111224052991-273997483.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;果然，看到了胜利的曙光。&lt;/p&gt;
&lt;p&gt;于是迫不及待的替换掉pod 'UMengUShare/Social/WeChat’试一下。&lt;/p&gt;

&lt;div readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;strong&gt;阶段三&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. pod ‘WechatOpenSDK' 添加最新的微信支付sdk&lt;/p&gt;
&lt;p&gt;2. pod 'UMengUShare/Social/ReducedWeChat' 添加友盟精简版微信分享&lt;/p&gt;

&lt;p&gt;Pod install 结果如下：&lt;/p&gt;
&lt;div readability=&quot;16.5&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201901/826860-20190111224407966-914321404.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;OK了&lt;/p&gt;

&lt;p&gt;builde一下，success通过。&lt;/p&gt;

&lt;div readability=&quot;24&quot;&gt;
&lt;p&gt;通过查看WXApiObject.h文件声明发现&lt;/p&gt;
&lt;p&gt;'WechatOpenSDK' 库其实 和‘UMengUShare/Social/WeChat’这个库很类似，里面暴露的接口几乎一样。&lt;/p&gt;
&lt;p&gt;说明两种重复定义实现了大部分内容。&lt;/p&gt;

&lt;p&gt;两者的区别是'WechatOpenSDK'库中的WXApiObject类多了一个第三方向微信终端发起支付的消息结构体，&lt;/p&gt;
&lt;p&gt;在这个类中声明了个 @interface PayReq : BaseReq&lt;/p&gt;
&lt;p&gt;来唤起微信的支付功能。&lt;/p&gt;

&lt;p&gt;所以要同时实现微信支付和友盟微信分享&lt;/p&gt;
&lt;p&gt;需要用友盟微信分享的精简版pod 'UMengUShare/Social/ReducedWeChat’与微信支付SDK pod ‘WechatOpenSDK’。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 11 Jan 2019 14:47:00 +0000</pubDate>
<dc:creator>滴水微澜</dc:creator>
<og:description>这两天改版一个旧的APP，要旧貌换新颜，拿到app后进行编译，一直报下面的错误。 报不认识的符号名PayReq错误。奇怪，啥也没动就这样，真不知道给的包是不是本来就是个报错的工程。 不管怎样，要对它修</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhou--fei/p/10257730.html</dc:identifier>
</item>
<item>
<title>GDB调试指南-启动调试 - 守望先生</title>
<link>http://www.cnblogs.com/bianchengzhuji/p/10257347.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bianchengzhuji/p/10257347.html</guid>
<description>&lt;h2 id=&quot;h&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;GDB（GNU Debugger）是UNIX及UNIX-like下的强大调试工具，可以调试ada, c, c++, asm, minimal, d, fortran, objective-c, go, java,pascal等语言。本文以C程序为例，介绍GDB启动调试的多种方式。&lt;/p&gt;
&lt;h2 id=&quot;h-1&quot;&gt;哪类程序可被调试&lt;/h2&gt;
&lt;p&gt;对于C程序来说，需要在编译时加上-g参数，保留调试信息，否则不能使用GDB进行调试。&lt;br/&gt;但如果不是自己编译的程序，并不知道是否带有-g参数，如何判断一个文件是否带有调试信息呢？&lt;/p&gt;
&lt;h4 id=&quot;hgdb&quot;&gt;gdb 文件&lt;/h4&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;$ gdb helloworld&lt;br/&gt;Reading symbols &lt;span class=&quot;hljs-keyword&quot;&gt;from helloWorld...(&lt;span class=&quot;hljs-literal&quot;&gt;no debugging symbols found)...done.&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果没有调试信息，会提示no debugging symbols found。&lt;br/&gt;如果是下面的提示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;Reading symbols &lt;span class=&quot;hljs-keyword&quot;&gt;from helloWorld...done.&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;则可以进行调试。&lt;/p&gt;
&lt;h4 id=&quot;hreadelf&quot;&gt;readelf查看段信息&lt;/h4&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;$ readelf -S helloWorld|grep debug&lt;br/&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;28] .debug_aranges    PROGBITS         &lt;span class=&quot;hljs-number&quot;&gt;0000000000000000  &lt;span class=&quot;hljs-number&quot;&gt;0000106d&lt;br/&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;29] .debug_info       PROGBITS         &lt;span class=&quot;hljs-number&quot;&gt;0000000000000000  &lt;span class=&quot;hljs-number&quot;&gt;0000109d&lt;br/&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;30] .debug_abbrev     PROGBITS         &lt;span class=&quot;hljs-number&quot;&gt;0000000000000000  &lt;span class=&quot;hljs-number&quot;&gt;0000115b&lt;br/&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;31] .debug_line       PROGBITS         &lt;span class=&quot;hljs-number&quot;&gt;0000000000000000  &lt;span class=&quot;hljs-number&quot;&gt;000011b9&lt;br/&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;32] .debug_str        PROGBITS         &lt;span class=&quot;hljs-number&quot;&gt;0000000000000000  &lt;span class=&quot;hljs-number&quot;&gt;000011fc&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;helloWorld为文件名，如果没有任何debug信息，则不能被调试。&lt;/p&gt;
&lt;h4 id=&quot;hfilestrip&quot;&gt;file查看strip状况&lt;/h4&gt;
&lt;p&gt;下面的情况也是不可调试的：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs makefile&quot;&gt;file helloWorld&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;helloWorld: (省略前面内容) stripped&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果最后是stripped，则说明该文件的符号表信息和调试信息已被去除，不能使用gdb调试。但是not stripped的情况并不能说明能够被调试。&lt;/p&gt;
&lt;h2 id=&quot;h-2&quot;&gt;调试方式运行程序&lt;/h2&gt;
&lt;p&gt;程序还未启动时，可有多种方式启动调试。&lt;/p&gt;
&lt;h4 id=&quot;h-3&quot;&gt;调试启动无参程序&lt;/h4&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs php&quot;&gt;$ gdb helloWorld&lt;br/&gt;(gdb)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入run命令，即可运行程序&lt;/p&gt;
&lt;h4 id=&quot;h-4&quot;&gt;调试启动带参程序&lt;/h4&gt;
&lt;p&gt;假设有以下程序，启动时需要带参数：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c language-c hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;include&lt;span class=&quot;hljs-meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;main&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int argc,&lt;span class=&quot;hljs-keyword&quot;&gt;char *argv[])&lt;br/&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if(&lt;span class=&quot;hljs-number&quot;&gt;1 &amp;gt;= argc)&lt;br/&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;usage:hello name\n&quot;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-number&quot;&gt;0;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World %s!\n&quot;,argv[&lt;span class=&quot;hljs-number&quot;&gt;1]);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-number&quot;&gt;0 ;&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编译：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;gcc &lt;span class=&quot;hljs-selector-tag&quot;&gt;-g &lt;span class=&quot;hljs-selector-tag&quot;&gt;-o &lt;span class=&quot;hljs-selector-tag&quot;&gt;hello &lt;span class=&quot;hljs-selector-tag&quot;&gt;hello&lt;span class=&quot;hljs-selector-class&quot;&gt;.c&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这种情况如何启动调试呢？需要设置参数：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs javascript&quot;&gt;$ gdb hello&lt;br/&gt;(gdb)run 编程珠玑&lt;br/&gt;Starting program: &lt;span class=&quot;hljs-regexp&quot;&gt;/home/shouwang/workspaces/c/hello 编程珠玑&lt;br/&gt;Hello World 编程珠玑!&lt;br/&gt;[Inferior &lt;span class=&quot;hljs-number&quot;&gt;1 (process &lt;span class=&quot;hljs-number&quot;&gt;20084) exited normally]&lt;br/&gt;(gdb)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;只需要run的时候带上参数即可。&lt;br/&gt;或者使用set args，然后在用run启动：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs sql&quot;&gt;gdb hello&lt;br/&gt;(gdb) &lt;span class=&quot;hljs-keyword&quot;&gt;set args 编程珠玑&lt;br/&gt;(gdb) run&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Starting program: /home/hyb/workspaces/c/hello 编程珠玑&lt;br/&gt;Hello World 编程珠玑!&lt;br/&gt;[Inferior &lt;span class=&quot;hljs-number&quot;&gt;1 (process &lt;span class=&quot;hljs-number&quot;&gt;20201) exited normally]&lt;br/&gt;(gdb) &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;hcore&quot;&gt;调试core文件&lt;/h4&gt;
&lt;p&gt;当程序core dump时，可能会产生core文件，它能够很大程序帮助我们定位问题。但前提是系统没有限制core文件的产生。可以使用命令limit -c查看：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ulimit -c&lt;br/&gt;0&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果结果是0，那么恭喜你，即便程序core dump了也不会有core文件留下。我们需要让core文件能够产生：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;ulimit -c unlimied  &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面两种方式可选其一。第一种无限制，第二种指定最大产生的大小。&lt;br/&gt;调试core文件也很简单：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;gdb 程序文件名 core文件名&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;具体可参看《&lt;a href=&quot;https://www.huyanbing.me/2018/09/26/61877.html&quot;&gt;linux常用命令-开发调试篇&lt;/a&gt;》gdb部分。&lt;/p&gt;
&lt;h2 id=&quot;h-5&quot;&gt;调试已运行程序&lt;/h2&gt;
&lt;p&gt;如果程序已经运行了怎么办呢？&lt;br/&gt;首先使用ps命令找到进程id：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;ps -ef|grep 进程名&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;hattach&quot;&gt;attach方式&lt;/h4&gt;
&lt;p&gt;假设获取到进程id为20829，则可用下面的方式调试进程：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs php&quot;&gt;$ gdb&lt;br/&gt;(gdb) attach &lt;span class=&quot;hljs-number&quot;&gt;20829&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来就可以继续你的调试啦。&lt;/p&gt;
&lt;p&gt;可能会有下面的错误提示：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs delphi&quot;&gt;Could &lt;span class=&quot;hljs-keyword&quot;&gt;not attach &lt;span class=&quot;hljs-keyword&quot;&gt;to process.  &lt;span class=&quot;hljs-keyword&quot;&gt;If your uid matches the uid &lt;span class=&quot;hljs-keyword&quot;&gt;of the target&lt;br/&gt;process, check the setting &lt;span class=&quot;hljs-keyword&quot;&gt;of /proc/sys/kernel/yama/ptrace_scope, &lt;span class=&quot;hljs-keyword&quot;&gt;or &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;br/&gt;again &lt;span class=&quot;hljs-keyword&quot;&gt;as the root user.  &lt;span class=&quot;hljs-keyword&quot;&gt;For more details, see /etc/sysctl.d/&lt;span class=&quot;hljs-number&quot;&gt;10-ptrace.conf&lt;br/&gt;ptrace: Operation &lt;span class=&quot;hljs-keyword&quot;&gt;not permitted.&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解决方法，切换到root用户：&lt;br/&gt;将/etc/sysctl.d/10-ptrace.conf中的&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs&quot;&gt;kernel.yama.ptrace_scope = 1&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改为&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs&quot;&gt;kernel.yama.ptrace_scope = 0&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;hid&quot;&gt;直接调试相关id进程&lt;/h4&gt;
&lt;p&gt;还可以是用这样的方式gdb program pid，例如:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;gdb hello &lt;span class=&quot;hljs-number&quot;&gt;20829  &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或者：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;gdb hello --pid &lt;span class=&quot;hljs-number&quot;&gt;20829&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h-6&quot;&gt;已运行程序没有调试信息&lt;/h4&gt;
&lt;p&gt;为了节省磁盘空间，已经运行的程序通常没有调试信息。但如果又不能停止当前程序重新启动调试，那怎么办呢？还有办法，那就是同样的代码，再编译出一个带调试信息的版本。然后使用和前面提到的方式操作。对于attach方式，在attach之前，使用file命令即可：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;$ gdb&lt;br/&gt;(gdb) file hello&lt;br/&gt;Reading symbols &lt;span class=&quot;hljs-keyword&quot;&gt;from hello...done.&lt;br/&gt;(gdb)attach &lt;span class=&quot;hljs-number&quot;&gt;20829&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h-7&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文主要介绍了两种类型的GDB启动调试方式，分别是调试未运行的程序和已经运行的程序。对于什么样的程序能够进行调试也进行了简单说明。&lt;/p&gt;
&lt;p&gt;欢迎留言补充。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;微信公众号【编程珠玑】：专注但不限于分享计算机编程基础，Linux，C语言，C++，算法，数据库等编程相关[原创]技术文章，号内包含大量经典电子书和视频学习资源。欢迎一起交流学习，一起修炼计算机“内功”，知其然，更知其所以然。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 11 Jan 2019 13:01:00 +0000</pubDate>
<dc:creator>守望先生</dc:creator>
<og:description>前言 GDB（GNU Debugger）是UNIX及UNIX-like下的强大调试工具，可以调试ada, c, c++, asm, minimal, d, fortran, objective-c,</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bianchengzhuji/p/10257347.html</dc:identifier>
</item>
<item>
<title>一个新手程序员 2019 的九大尴尬瞬间 - Martin666</title>
<link>http://www.cnblogs.com/51bc/p/10257327.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/51bc/p/10257327.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1574024/201901/1574024-20190111204958216-526477057.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一个新手程序员 2019 的九大尴尬瞬间&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;p&gt;1. 第 一 次 做 项 目 ，还 没 碰 到 代 码 就&lt;strong&gt; 开 挂 了 ！&lt;/strong&gt;&lt;strong&gt;&lt;img src=&quot;https://res.wx.qq.com/mpres/htmledition/images/icon/common/emotion_panel/smiley/smiley_9.png&quot; alt=&quot;&quot; width=&quot;15&quot; height=&quot;15&quot; data-ratio=&quot;1&quot; data-w=&quot;20&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1574024/201901/1574024-20190111204306243-1180202768.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;2. 天 啦，我 只 修 改 了 一 下 Bug.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1574024/201901/1574024-20190111204408445-414546153.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;“&lt;strong&gt;老大，救我 ! 如果上天能给我一次机会重来一次，我一定会先找好女朋友！&lt;/strong&gt;”&lt;/p&gt;


&lt;p&gt;3. 我 只 是 删 了 一 行 代 码 而 已 !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1574024/201901/1574024-20190111204455457-593945611.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;“&lt;strong&gt;老板，这一定是隔壁老王干的！&lt;/strong&gt;”&lt;/p&gt;


&lt;p&gt;4. Bug 多 了，总 有 一 个 会 把 你 坑 了.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1574024/201901/1574024-20190111204548330-1080855310.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;“&lt;strong&gt;经理&lt;/strong&gt;&lt;strong&gt;，我还没挂，能再给我一次机会吗？下次我只要一百块！&lt;/strong&gt;”&lt;/p&gt;


&lt;p&gt;5.正 在 调 试，突 然 内 存 溢 出 了......&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1574024/201901/1574024-20190111204610431-180018487.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;“&lt;strong&gt;经理，肿么办，我湿身了!&lt;/strong&gt;”&lt;/p&gt;


&lt;p&gt;6. 第 一 次 调 用 别 人 的 函 数 ……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1574024/201901/1574024-20190111204636244-1840123639.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;“&lt;strong&gt;坑爹呀&lt;/strong&gt;&lt;strong&gt;，我以后再也不跟你玩了！&lt;/strong&gt;”&lt;/p&gt;


&lt;p&gt;7. 有 位 同 事 离 职 了，他 留 下 的 代 码 没 人 敢 接 ……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1574024/201901/1574024-20190111204657578-478829443.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;“&lt;strong&gt;坑货，我们都死定了！！！麻麻，我想回家！&lt;/strong&gt;”&lt;/p&gt;


&lt;p&gt;8.两 个 新 手 程 序 员 第 一 次 合 作……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1574024/201901/1574024-20190111204731553-1729365181.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;“&lt;strong&gt;哥，这一次，我真的蛋疼了！！&lt;/strong&gt;&lt;strong&gt;！&lt;/strong&gt;”&lt;/p&gt;


&lt;p&gt;9. 程 序 第 一 次 投 入 使 用 ……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1574024/201901/1574024-20190111204811077-1340663617.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;“&lt;strong&gt;这是真的吗？这不是真的吧&lt;/strong&gt;&lt;strong&gt;！&lt;img src=&quot;https://res.wx.qq.com/mpres/htmledition/images/icon/common/emotion_panel/smiley/smiley_26.png&quot; alt=&quot;&quot; width=&quot;16&quot; height=&quot;16&quot; data-ratio=&quot;1&quot; data-w=&quot;20&quot;/&gt;&lt;/strong&gt;”&lt;/p&gt;
</description>
<pubDate>Fri, 11 Jan 2019 12:54:00 +0000</pubDate>
<dc:creator>Martin666</dc:creator>
<og:description>一个新手程序员 2019 的九大尴尬瞬间 1. 第 一 次 做 项 目 ，还 没 碰 到 代 码 就 开 挂 了 ！ 2. 天 啦，我 只 修 改 了 一 下 Bug.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/51bc/p/10257327.html</dc:identifier>
</item>
<item>
<title>Django与多个数据库交互 - Crazy丶土豆</title>
<link>http://www.cnblogs.com/crazy-zjl/p/10251484.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/crazy-zjl/p/10251484.html</guid>
<description>&lt;h2&gt;定义数据库&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在Django中使用多个数据库的第一步是告诉Django您将要使用的数据库服务器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据库可以有您选择的任何别名。但是，别名 &lt;code&gt;default &lt;/code&gt;有着特殊的意义。Django使用别名为 &lt;code&gt;default &lt;/code&gt;为默认数据库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如 &lt;code&gt;settings.py &lt;/code&gt;定义两个数据库,默认 PostgreSQL 数据库和名为 users 的 MySQL 数据库:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7df3ffa4-41bf-4df6-b630-1d979640b0af')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_7df3ffa4-41bf-4df6-b630-1d979640b0af&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7df3ffa4-41bf-4df6-b630-1d979640b0af&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7df3ffa4-41bf-4df6-b630-1d979640b0af',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7df3ffa4-41bf-4df6-b630-1d979640b0af&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
DATABASES =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;app_data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ENGINE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.db.backends.postgresql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;USER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;postgres_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PASSWORD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s3krit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ENGINE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.db.backends.mysql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;USER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PASSWORD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;priv4te&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;下面示例 &lt;code&gt;settings.py &lt;/code&gt;定义两个非默认数据库，并将 &lt;code&gt;default &lt;span&gt;数据库&lt;/span&gt;&lt;/code&gt;故意空着：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('06e0585d-520f-4fce-b4b5-fae31d6780fd')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_06e0585d-520f-4fce-b4b5-fae31d6780fd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_06e0585d-520f-4fce-b4b5-fae31d6780fd&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('06e0585d-520f-4fce-b4b5-fae31d6780fd',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_06e0585d-520f-4fce-b4b5-fae31d6780fd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
DATABASES =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {},
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ENGINE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.db.backends.mysql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;USER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PASSWORD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;superS3cret&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;customer_data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ENGINE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.db.backends.mysql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;USER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql_cust&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PASSWORD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;veryPriv@ate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;同步数据库&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1452051a-8236-4ecf-8656-ba7b0cc5eea7')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_1452051a-8236-4ecf-8656-ba7b0cc5eea7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1452051a-8236-4ecf-8656-ba7b0cc5eea7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1452051a-8236-4ecf-8656-ba7b0cc5eea7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1452051a-8236-4ecf-8656-ba7b0cc5eea7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;默认情况下使用 default 数据库, 在 default 数据库为空时不指定数据库会报错&lt;/span&gt;
&lt;span&gt;python manage.py migrate


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;要使用特定的数据库, 就需要指定数据库&lt;/span&gt;
python manage.py migrate --database=users
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;手动选择数据库&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在查询时可以调用 using() 手动选择数据库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;using() 接受一个参数要在其上运行查询的数据库的别名。例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b85944f5-726f-4d42-852c-7f52af058b87')&quot; readability=&quot;32&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_b85944f5-726f-4d42-852c-7f52af058b87&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b85944f5-726f-4d42-852c-7f52af058b87&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b85944f5-726f-4d42-852c-7f52af058b87',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_b85944f5-726f-4d42-852c-7f52af058b87&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 这将运行 'default'  数据库.&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; Author.objects.all()

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 这个和上面也是一样的效果.&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; Author.objects.using(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).all()

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 这个就会运行指定的 'other' 数据库.&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; Author.objects.using(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;other&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).all()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;若要将数据保存到指定的数据库；例如，若要将对象保存到 &lt;code&gt;legacy_users &lt;/code&gt;数据库，您可以使用这个：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;my_object.save(using=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;legacy_users&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果不指定&lt;code&gt;using&lt;/code&gt;，&lt;code&gt;save()&lt;/code&gt;方法将保存到由路由器分配的默认数据库中。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;将对象从一个数据库移到另一个数据库&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;如果您已将实例保存到一个数据库，再使用 &lt;code&gt;save(using=...)&lt;/code&gt;作为将实例迁移到新数据库。如果您不采取适当的步骤，这可能会产生一些意想不到的后果。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;p = Person(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Fred&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
p.save(using&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)  
p.save(using&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;Person&lt;/code&gt;对象保存到&lt;code&gt;first&lt;/code&gt;数据库时，&lt;code&gt;p&lt;/code&gt;没有主键，因此Django发出SQL&lt;code&gt;INSERT&lt;/code&gt;声明。这将创建一个主键，Django将主键分配给&lt;code&gt;p；&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当保存到 'second' 数据库上时，&lt;code&gt;p&lt;/code&gt;已经有一个主键值，Django将尝试在新数据库中使用该主键。如果&lt;code&gt;second&lt;/code&gt;数据库没有该主键值，那么就不会有任何问题，对象将被复制到新的数据库。但是，如果&lt;code&gt;p的主键&lt;/code&gt;在&lt;code&gt;second&lt;/code&gt;数据库中有对应的数据时，对应数据将被重写。&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以通过两种方式避免这种情况。首先，可以清除实例的主键：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;p = Person(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Fred&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
p.save(using&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
p.pk &lt;/span&gt;= None &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 清除p的主键值&lt;/span&gt;
p.save(using=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 写入一个没有主键的p实例&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;或者使用force_insert来&lt;code&gt;save()，&lt;/code&gt;以确保Django执行SQL&lt;code&gt;INSERT&lt;/code&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;p = Person(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Fred&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
p.save(using&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
p.save(using&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, force_insert=True)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;选择要删除的数据库&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;默认删除实例对象作用的数据库&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;u = User.objects.using(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;legacy_users&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).get(username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fred&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
u.delete() &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;从 'legacy_users' 数据库中删除 'fred'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;若要删除指定数据库的数据，传递 using 关键字，和 save() 类似。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如，如果要把一个 user 从 &lt;code&gt;legacy_users &lt;/code&gt;数据库迁移到 &lt;code&gt;new_users &lt;/code&gt;数据库中，可以使用以下命令：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;user_obj.save(using=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;new_users&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
user_obj.delete(using&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;legacy_users&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;删除指定数据库的数据&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;学习自用，欢迎大神评论、指正&lt;br/&gt;详情见Django文档：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.1/topics/db/multi-db/&quot;&gt;https://docs.djangoproject.com/en/2.1/topics/db/multi-db/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 11 Jan 2019 11:59:00 +0000</pubDate>
<dc:creator>Crazy丶土豆</dc:creator>
<og:description>定义数据库 在Django中使用多个数据库的第一步是告诉Django您将要使用的数据库服务器。 数据库可以有您选择的任何别名。但是，别名 default 有着特殊的意义。Djang</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/crazy-zjl/p/10251484.html</dc:identifier>
</item>
<item>
<title>Vue(day1) - 风之之</title>
<link>http://www.cnblogs.com/fzz9/p/10256913.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fzz9/p/10256913.html</guid>
<description>&lt;h2 id=&quot;一起步&quot;&gt;一、起步&lt;/h2&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!-- 生产环境版本，优化了尺寸和速度 --&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;开始从下面的几个Vue的使用场景中熟悉Vue：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;声明式渲染&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Vue&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&quot;app&quot;&amp;gt;
        {{ message }}
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    var app = new Vue({
        el: '#app',
        data: {
            message: 'Hello Vue!'
        }
    });
&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看起来就像是简单的模板渲染，但其实Vue已经做了大量工作，这个时候的数据和DOM已经是“响应式”&lt;/p&gt;
&lt;p&gt;的了。可以打开浏览器控制台修改app实例，如&lt;code&gt;app.message = 'Hello World!'&lt;/code&gt;，然后你可以发现html页面也会随之变化。&lt;/p&gt;
&lt;ul readability=&quot;14.657794676806&quot;&gt;&lt;li readability=&quot;14&quot;&gt;
&lt;p&gt;条件与循环&lt;/p&gt;
&lt;p&gt;使用Vue的指令&lt;code&gt;v-if&lt;/code&gt;来决定是否创建该元素。&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;
  &amp;lt;p v-if=&quot;seen&quot;&amp;gt;现在你能看到我&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var app = new Vue({
  el: '#app',
  data: {
      seen: true
  }
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用&lt;code&gt;v-for&lt;/code&gt;指令来实现循环：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;
  &amp;lt;ul&amp;gt;
      &amp;lt;li v-for=&quot;list in lists&quot;&amp;gt;
          {{ list.text }}
      &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var app = new Vue({
  el: '#app',
  data: {
      lists:[
          {text: '学习js'},
          {text: '学习vue'},
          {text: '学习...'}
      ]
  }
});&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;14&quot;&gt;
&lt;p&gt;处理用户输入&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;v-on&lt;/code&gt;指令为元素绑定指定事件：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;
  &amp;lt;p&amp;gt; {{message}} &amp;lt;/p&amp;gt;
  &amp;lt;button v-on:click=&quot;reverseMessage&quot;&amp;gt;翻转字符串&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var app = new Vue({
  el: '#app',
  data: {
      message: '双向绑定'
  },
  methods: {
      reverseMessage: function(){
          this.message = this.message.split('').reverse().join('');
      }
  }
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用&lt;code&gt;v-model&lt;/code&gt;表单输入和应用状态之间的双向绑定：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;
  &amp;lt;p&amp;gt; {{message}} &amp;lt;/p&amp;gt;
  &amp;lt;input type=&quot;text&quot; v-model=&quot;message&quot;&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var app = new Vue({
  el: '#app',
  data: {
      message: '双向绑定'
  }
});&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-0.64179104477612&quot;&gt;
&lt;p&gt;组件化应用的构建&lt;/p&gt;
&lt;p&gt;具体请参考：&lt;a href=&quot;https://cn.vuejs.org/v2/guide/#%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BA%94%E7%94%A8%E6%9E%84%E5%BB%BA&quot;&gt;组件化应用的构建&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;二指令大全&quot;&gt;二、指令大全&lt;/h2&gt;
&lt;p&gt;Vue.js提供了一些指令来方便我们操作页面，而不用我们再去操作Dom，具体详情可移步官网：&lt;a href=&quot;https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4&quot;&gt;指令&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;v-text&quot;&gt;v-text&lt;/h5&gt;
&lt;p&gt;更新元素的&lt;code&gt;textContent&lt;/code&gt;。如果要更新&lt;strong&gt;部分&lt;/strong&gt;的&lt;code&gt;textContent&lt;/code&gt;，需要使用 {{ Mustache }} 插值。&lt;/p&gt;
&lt;h5 id=&quot;v-html&quot;&gt;v-html&lt;/h5&gt;
&lt;p&gt;更新元素的&lt;code&gt;innerHtml&lt;/code&gt;。注意内容按普通 HTML 插入 - &lt;strong&gt;不会作为 Vue 模板进行编译&lt;/strong&gt; 。&lt;/p&gt;
&lt;h5 id=&quot;v-show&quot;&gt;v-show&lt;/h5&gt;
&lt;p&gt;根据表达式的真假切换元素的&lt;code&gt;display:none&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&quot;v-if&quot;&gt;v-if&lt;/h5&gt;
&lt;p&gt;根据表达式的真假决定是否创建（渲染）元素。&lt;/p&gt;
&lt;p&gt;注意：当和 &lt;code&gt;v-for&lt;/code&gt; 一起使用时，&lt;code&gt;v-for&lt;/code&gt; 的优先级比 &lt;code&gt;v-if&lt;/code&gt; 更高。&lt;/p&gt;
&lt;h5 id=&quot;v-else-v-else-if&quot;&gt;v-else &amp;amp; v-else-if&lt;/h5&gt;
&lt;p&gt;结合&lt;code&gt;v-if&lt;/code&gt;使用。&lt;/p&gt;
&lt;h5 id=&quot;v-for&quot;&gt;v-for&lt;/h5&gt;
&lt;p&gt;使用特定语法&lt;code&gt;alias in expression&lt;/code&gt;，多次渲染元素或模块。&lt;/p&gt;
&lt;p&gt;可使用的表达式：&lt;code&gt;Array | Object | number | string&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;v-model&quot;&gt;v-model&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;限制
&lt;ul&gt;&lt;li&gt;表单控件：&lt;code&gt;input&lt;/code&gt; | &lt;code&gt;texteara&lt;/code&gt; | &lt;code&gt;selecte&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;组件&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;修饰符
&lt;ul&gt;&lt;li&gt;&lt;code&gt;.lazy&lt;/code&gt;：取代&lt;code&gt;input&lt;/code&gt;监听&lt;code&gt;change&lt;/code&gt;事件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.number&lt;/code&gt;：将输入的字符串转化为数字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.trim&lt;/code&gt;：将输入的字符串过滤掉首位空格。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;作用&lt;br/&gt;在表单控件或组件上创建双向绑定。&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;v-cloak&quot;&gt;v-cloak&lt;/h5&gt;
&lt;p&gt;无表达式，&lt;code&gt;v-cloak&lt;/code&gt;指令保持到元素结束编译，与css规则如：&lt;code&gt;[cloak]:{display: none;}&lt;/code&gt;一起使用，使元素在编译完成前保持“影藏”状态。这样做的目的是，元素编译结束后再显示出来，可以解决页面编译渲染时出现的闪烁情况。&lt;/p&gt;
&lt;h5 id=&quot;v-pre&quot;&gt;v-pre&lt;/h5&gt;
&lt;p&gt;无表达式，使用&lt;code&gt;v-pre&lt;/code&gt;可跳过元素及其子元素的编译过程，加快渲染速度。&lt;/p&gt;
&lt;h5 id=&quot;v-once&quot;&gt;v-once&lt;/h5&gt;
&lt;p&gt;无表达式，使用&lt;code&gt;v-once&lt;/code&gt;指令后元素只会编译渲染一次。这样可以在某些场景下提升性能。&lt;/p&gt;
&lt;h5 id=&quot;v-bind&quot;&gt;v-bind&lt;/h5&gt;
&lt;ul readability=&quot;-0.47077922077922&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;作用&lt;/p&gt;
&lt;p&gt;为元素动态地绑定一个或多个特性（attributes + properties）；或绑定一个组件的prop到表达式中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缩写：&lt;code&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修饰符&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;.prop&lt;/code&gt;：被用来绑定DOM的property。（&lt;a href=&quot;https://stackoverflow.com/questions/6003819/what-is-the-difference-between-properties-and-attributes-in-html#answer-6004028&quot;&gt;与attribute是有区别的&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.camel&lt;/code&gt;：(2.1.0+) 将 kebab-case 特性名转换为 camelCase。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.sync&lt;/code&gt;： (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 &lt;code&gt;v-on&lt;/code&gt; 侦听器。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;特殊&lt;/p&gt;
&lt;p&gt;在绑定&lt;code&gt;class&lt;/code&gt;或&lt;code&gt;style&lt;/code&gt;属性时支持数组或对象等特殊类型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;v-on&quot;&gt;v-on&lt;/h5&gt;
&lt;h2 id=&quot;三练习&quot;&gt;三、练习&lt;/h2&gt;
&lt;p&gt;我们可以通过一些实际的例子来熟悉一下Vue指令的相关用法。&lt;/p&gt;
&lt;h5 id=&quot;文字跑马灯&quot;&gt;文字跑马灯&lt;/h5&gt;
&lt;ul readability=&quot;15&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;需求：让文字滚动起来。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;分析：要让文字达到滚动效果，就是随时间变化将字符串的末尾字符移动到头部，或是反过来。总结起来就是每隔一段时间操作一次字符串。另外需要一个按钮来控制文字的滚动效果。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;11&quot;&gt;
&lt;p&gt;实现：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;
  &amp;lt;p&amp;gt;{{ message }} &amp;lt;/p&amp;gt;
  &amp;lt;button @click=&quot;changeMessage&quot;&amp;gt; {{ btn }} &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var app = new Vue({
  el: '#app',
  data: {
      message: '0123456789',
      btn: '开始',
      status: true,
      intervalId: undefined
  },
  methods: {
      changeMessage: function(){
          var THIS = this;
          THIS.status = !THIS.status;
          if(!THIS.intervalId){
              THIS.intervalId = window.setInterval(function(){
                  THIS.message = THIS.message.toString();//防止纯数字报错
                  var len = THIS.message.length;
                  THIS.message =  THIS.message.charAt(len-1) + THIS.message.slice(0, len - 1);
              }, 1000);
          }

          if(THIS.status){
              THIS.intervalId = clearInterval(THIS.intervalId);
              THIS.btn = '开始';
          }else{
              THIS.btn = '暂停';
          }
      }
  }
})&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;13&quot;&gt;
&lt;p&gt;利用表单双向绑定实现简单的计算器&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;
  &amp;lt;input type=&quot;text&quot; v-model=&quot;x&quot; @input=&quot;calculate&quot;&amp;gt;
  &amp;lt;select v-model=&quot;smybol&quot; @change=&quot;calculate&quot;&amp;gt;
      &amp;lt;option value=&quot;+&quot; selected=&quot;true&quot;&amp;gt;+&amp;lt;/option&amp;gt;
      &amp;lt;option value=&quot;-&quot;&amp;gt;-&amp;lt;/option&amp;gt;
      &amp;lt;option value=&quot;*&quot;&amp;gt;*&amp;lt;/option&amp;gt;
      &amp;lt;option value=&quot;/&quot;&amp;gt;/&amp;lt;/option&amp;gt;
  &amp;lt;/select&amp;gt;
  &amp;lt;input type=&quot;text&quot; v-model=&quot;y&quot; @input=&quot;calculate&quot;&amp;gt;
  &amp;lt;input type=&quot;button&quot; value=&quot;=&quot; @click=&quot;calculate&quot;&amp;gt;
  &amp;lt;input type=&quot;text&quot; v-model=&quot;value&quot;&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var app = new Vue({
  el: '#app',
  data: {
      x: 0,
      y: 0,
      value: 0,
      smybol: &quot;+&quot;
  },
  methods: {
      calculate: function(){
          var THIS = this;
          var x = window.parseFloat(THIS.x);
          var y = window.parseFloat(THIS.y);
          var S = x + THIS.smybol + y;
          THIS.value = window.parseFloat(eval(S));
      }
  }
})&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;v-bind&lt;/code&gt;动态修改元素&lt;code&gt;class&lt;/code&gt;或&lt;code&gt;style&lt;/code&gt;
&lt;ul readability=&quot;12.5&quot;&gt;&lt;li readability=&quot;14&quot;&gt;
&lt;p&gt;class&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Vue1&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
        .red{
            color: #abc;
        }
        .italic{
            font-style: italic;
        }
        .larg{
            font-size: 30px;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&quot;app&quot;&amp;gt;
        &amp;lt;p&amp;gt;规则，就是用来打破的&amp;lt;/p&amp;gt;
        &amp;lt;!--原生class写法--&amp;gt;
        &amp;lt;p class=&quot;red italic larg&quot;&amp;gt;规则，就是用来打破的&amp;lt;/p&amp;gt;
        &amp;lt;!--v-bind场景一:使用数组--&amp;gt;
        &amp;lt;p :class=&quot;['red','italic','larg']&quot;&amp;gt;规则，就是用来打破的&amp;lt;/p&amp;gt;
        &amp;lt;!--场景二：使用三元表达式--&amp;gt;
        &amp;lt;p :class=&quot;['red','italic',flag?'larg':'']&quot;&amp;gt;规则，就是用来打破的&amp;lt;/p&amp;gt;
        &amp;lt;!--场景三：使用数组对象--&amp;gt;
        &amp;lt;p :class=&quot;['red','italic',{larg:flag}]&quot;&amp;gt;规则，就是用来打破的&amp;lt;/p&amp;gt;
        &amp;lt;!--场景四：直接使用对象--&amp;gt;
        &amp;lt;p :class=&quot;{red:false, italic:true, larg:true}&quot;&amp;gt;规则，就是用来打破的&amp;lt;/p&amp;gt;
        &amp;lt;!--动态绑定--&amp;gt;
        &amp;lt;p :class=&quot;app_class&quot;&amp;gt;规则，就是用来打破的&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    var app = new Vue({
        el: &quot;#app&quot;,
        data: {
            flag: false,
            app_class: {red:true, italic:true, larg:true}
        }
    });
&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;11&quot;&gt;
&lt;p&gt;style&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&quot;app&quot;&amp;gt;
        &amp;lt;!--原生写法--&amp;gt;
        &amp;lt;h1 style=&quot;color: #abc;font-size: 30px;font-style: italic;&quot;&amp;gt;Jinx的含义就是Jinx.&amp;lt;/h1&amp;gt;
        &amp;lt;!--使用对象--&amp;gt;
        &amp;lt;h1 :style=&quot;{color:'#217352','font-style':'30px','font-style':'italic'}&quot;&amp;gt;Jinx的含义就是Jinx.&amp;lt;/h1&amp;gt;
        &amp;lt;!--使用数组--&amp;gt;
        &amp;lt;h1 :style=&quot;[{color:'#FF9800','font-style':'30px'},{'font-style':'italic'}]&quot;&amp;gt;Jinx的含义就是Jinx.&amp;lt;/h1&amp;gt;
        &amp;lt;!--动态绑定--&amp;gt;
        &amp;lt;h1 :style=&quot;[sty1, sty2]&quot;&amp;gt;Jinx的含义就是Jinx.&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
        var vm = new Vue({
            el: &quot;#app&quot;,
            data: {
                flag: false,
                sty1: {color:'#aa9800','font-style':'30px'},
                sty2: {'font-style':'italic'}

            }
        });
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 11 Jan 2019 11:42:00 +0000</pubDate>
<dc:creator>风之之</dc:creator>
<og:description>一、起步 开始从下面的几个Vue的使用场景中熟悉Vue： + 声明式渲染 看起来就像是简单的模板渲染，但其实Vue已经做了大量工作，这个时候的数据和DOM已经是“响应式” 的了。可以打开浏览器控制台修</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fzz9/p/10256913.html</dc:identifier>
</item>
</channel>
</rss>