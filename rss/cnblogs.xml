<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Linux stress 命令 - sparkdev</title>
<link>http://www.cnblogs.com/sparkdev/p/10354947.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sparkdev/p/10354947.html</guid>
<description>&lt;p&gt;&lt;span&gt;stress 命令主要用来模拟系统负载较高时的场景，本文介绍其基本用法。文中 demo 的演示环境为 ubuntu 18.04。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;语法格式：&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;stress &amp;lt;options&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;常用选项：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;-c, --cpu N&lt;/strong&gt;              产生 N 个进程，每个进程都反复不停的计算随机数的平方根&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;-i, --io N&lt;/strong&gt;                  产生 N 个进程，每个进程反复调用 sync() 将内存上的内容写到硬盘上&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;-m, --vm N&lt;/strong&gt;             产生 N 个进程，每个进程不断分配和释放内存&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;strong&gt;--vm-bytes B&lt;/strong&gt;      指定分配内存的大小&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;strong&gt;--vm-stride B&lt;/strong&gt;     不断的给部分内存赋值，让 COW(Copy On Write)发生&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;strong&gt;--vm-hang N&lt;/strong&gt;      指示每个消耗内存的进程在分配到内存后转入睡眠状态 N 秒，然后释放内存，一直重复执行这个过程&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;strong&gt;--vm-keep&lt;/strong&gt;          一直占用内存，区别于不断的释放和重新分配(默认是不断释放并重新分配内存)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;-d, --hadd N&lt;/strong&gt;           产生 N 个不断执行 write 和 unlink 函数的进程(创建文件，写入内容，删除文件)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;strong&gt;--hadd-bytes B&lt;/strong&gt;  指定文件大小&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;-t, --timeout N&lt;/strong&gt;       在 N 秒后结束程序        &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;--backoff N&lt;/strong&gt;            等待N微妙后开始运行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;-q, --quiet&lt;/strong&gt;              程序在运行的过程中不输出信息&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;-n, --dry-run&lt;/strong&gt;          输出程序会做什么而并不实际执行相关的操作&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;--version&lt;/strong&gt;                显示版本号&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;-v, --verbose&lt;/strong&gt;          显示详细的信息&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Ubuntu 系统默认没有安装 stress，需要通过下面的命令安装：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ &lt;span&gt;sudo&lt;/span&gt; apt &lt;span&gt;install&lt;/span&gt;&lt;span&gt; stress
$ stress &lt;/span&gt;--version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207163328225-1364382170.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;stress 消耗 CPU 资源的方式是通过调用 sqrt 函数计算由 rand 函数产生的随机数的平方根实现的。下面的命令会产生 4 个这样的进程不断的进行计算：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
$ stress -c &lt;span&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207163405530-1733588232.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用 top 命令查看 CPU 的状态如下(CPU 在用户态满负荷运转)：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207163435117-1208713621.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;下面的命令产生两个子进程，每个进程分配 300M 内存：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ stress --vm &lt;span&gt;2&lt;/span&gt; --vm-bytes 300M --vm-keep
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207163510541-1900225729.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;父进程处于睡眠状态，两个子进程负责资源消耗。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;--vm-keep&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;一直占用内存，区别于不断的释放和重新分配(默认是不断释放并重新分配内存)。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;--vm-hang N&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;指示每个消耗内存的进程在分配到内存后转入睡眠状态 N 秒，然后释放内存，一直重复执行这个过程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;--vm-keep 和 --vm-hang 都可以用来模拟只有少量内存的机器，但是指定它们时 CPU 的使用情况是不一样的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ stress --vm &lt;span&gt;2&lt;/span&gt; --vm-bytes 500M --vm-keep
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207163634625-717451377.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一直在进行默认的 stride 操作，user 非常高(cpu 在用户态忙碌)。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ stress --vm &lt;span&gt;2&lt;/span&gt; --vm-bytes 500M --vm-hang &lt;span&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207163750049-1477877668.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面这两种状态不断切换，但整体上看 CPU 的负载并不高。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;--vm-stride B&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;不断的给部分内存赋值，让 COW(Copy On Write)发生。只要指定了内存相关的选项，这个操作就会执行，只是大小为默认的 4096。赋值内存的比例由参数决定：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; bytes; i +=&lt;span&gt; stride)
    ptr[i] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;           &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Ensure that COW happens.  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;bytes 为消耗的总内存大小，stride 为间隔。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;该参数会影响 CPU 状态 us 和 sy：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ stress --vm &lt;span&gt;2&lt;/span&gt; --vm-bytes 500M &lt;strong&gt;&lt;span&gt;--vm-stride 64&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207163842711-1501694015.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ stress --vm &lt;span&gt;2&lt;/span&gt; --vm-bytes 500M &lt;strong&gt;&lt;span&gt;--vm-stride 1M&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207163916139-1294817016.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为什么会产生这样的结果？原因是单独的赋值和对比操作可以让 CPU 在用户态的负载占到 99% 以上。--vm-stride 值增大就意味着减少赋值和对比操作，这样就增加了内存的释放和分配次数(cpu在内核空间的负载)。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;不指定 --vm-stride 选项就使用默认值是 4096，CPU 负载情况居于前两者之间：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ stress --vm &lt;span&gt;2&lt;/span&gt; --vm-bytes 500M
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207163947332-1713300143.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;下面的命令产生 4 个进程，每个进程都反复调用 sync 函数将内存上的内容写到硬盘上：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
$ stress -i &lt;span&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207164021524-1967895880.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用 top 命令查看 CPU 的状态如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207164051191-1565762410.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;sy 升高，wa(iowait) 非常高。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;下面的命令创建一个进程不断的在磁盘上创建 10M 大小的文件并写入内容：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ stress -d &lt;span&gt;1&lt;/span&gt; --hdd-bytes 10M
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207164142692-1159559455.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用 top 命令查看 CPU 的状态如下(此时的 CPU 主要消耗在内核态)：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207164214430-2048102160.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面是 iostat 2 的输出(同样是高 iowait，瓶颈是写磁盘)：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207164245843-215129552.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;--verbose&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;显示 stress 程序运行过程中的详细信息：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207164321875-1959140209.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;--timeout N&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;在 N 秒后结束程序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;--quiet&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;stress 程序运行的过程中不输出信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-n, --dry-run&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;输出程序会做什么而并不实际执行相关的操作：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/952033/201902/952033-20190207164407811-1008940579.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;--backoff N&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;让新 fork 出来的进程 sleep N 微秒再开始运行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除了单独指定某一类的选项，还可以同时执行多个类型的任务，比如产生 3 个 CPU 进程、3 个 IO 进程、2 个10M 的 vm 进程，并且每个 vm 进程中不循环分配释放内存：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ stress --cpu &lt;span&gt;3&lt;/span&gt; --io &lt;span&gt;3&lt;/span&gt; --vm &lt;span&gt;2&lt;/span&gt; --vm-bytes 10M --vm-keep
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;对于学习 Linux 性能检测相关的命令来说，stress 命令是个得力的助手。通过模拟各种高负载情况，可以帮助我们更好的理解系统瓶颈并掌握性能检测工具的用法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://linux.die.net/man/1/stress&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;stress man page&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/jreybert/power/blob/master/tests/stress.c&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;stress 1.0.4 code&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 08 Feb 2019 06:50:00 +0000</pubDate>
<dc:creator>sparkdev</dc:creator>
<og:description>stress 命令主要用来模拟系统负载较高时的场景，本文介绍其基本用法。文中 demo 的演示环境为 ubuntu 18.04。 基本语法 语法格式：stress &lt;options&gt; 常用</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sparkdev/p/10354947.html</dc:identifier>
</item>
<item>
<title>（原创）BFS广度优先算法，看完这篇就够了 - compassion‘s</title>
<link>http://www.cnblogs.com/yx1999/p/10355964.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yx1999/p/10355964.html</guid>
<description>&lt;p&gt;&lt;span&gt;上一篇文章讲解了DFS深度优先遍历的算法，我们说 DFS 顾名思义DEEPTH FIRET，以深度为第一标准来查找，以不撞南墙不回头的态度来发掘每一个点，这个算法思想get到了其实蛮简单。那么 BFS 和DFS有什么相同点和不同点呢？ &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我觉得有一种比喻对于 DFS 和 BFS 从方法论的角度解释很到位，DFS 就像是小明要在家里找到钥匙，因为对位置的不确定，所以一间一间的来找，深度遍历能确保小明走过所有的屋子。而 BFS 像是近视的小明的眼镜掉在了地上，小明肯定是先摸索离手比较近的位置，然后手慢慢向远方延伸，直至摸到眼镜，像是以小明为中心搜索圈不断扩大的过程。所以如果说 DFS 从遍历的层次结构上类似树的先序遍历，那么BFS算法按照里外顺序逐渐增加深度的做法，就像极了朴素的层次遍历，例如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1598426/201902/1598426-20190208105710407-1299326992.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;把左图拉平，按照层序把结点排列下来，各节点的连接关系并没有变，图结构没有发生变化，但是这时，我们从A出发，按层序遍历可以得到顺序是 A B F C I G E D H&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;结合上一篇文章的 DFS ，我们可以发现这两种算法的区别在每一个点上都能得以体现，比如 A 点，DFS 鼓励结点向着一个方向冲，BFS 则会在一个点上按照顶点下标次序遍历完所有没有访问过的结点，比如A点遍历完，马上开始扫描，如果 B F这两个点没有被宠幸过，那么一定要翻完 B、F 这两个点的牌子之后，才会继续访问第二层，即把A点相连的结点全部遍历完成才行，当然到了第二层 发现 B、F 早就被A安排过了，就不再进入这两个点的循环，后面的一样，这里就不再赘述。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们回忆一下DFS算法，DFS沿着一个方向走最后是要走回头路的，因为它迟早会遍历到一个所有分支都被访问过的结点，那么要走回头路意味着我们实现 DFS 时应该选择后进先出的栈结构，而现在的 BFS 算法是每经过一个点就会遍历所有没访问过的点，同时，一个点如果已经访问完，那么它就没有利用价值了，所以应该使用队列先进先出的特点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;这里是图形演示：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1598426/201902/1598426-20190208142920891-1577723422.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;下面我们来看代码实现：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;这是邻接矩阵实现 BFS 算法，结构定义见上一篇文章&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; BFS(MGraph *&lt;span&gt;G)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i,j;
    Queue Q;
    InitQueue(&lt;/span&gt;&amp;amp;&lt;span&gt;Q);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G.numVertexes;i++&lt;span&gt;)
    {
        visited[i] &lt;/span&gt;=&lt;span&gt; FALSE;
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;;i &amp;lt; G.numVertexes;i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;visited[i])
        {
            visited[i] &lt;/span&gt;=&lt;span&gt; TRUE;
            printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;G.vexs[i]);
            EnQueue(&lt;/span&gt;&amp;amp;&lt;span&gt;Q,i);
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;QueueEmpty(Q))
            {
                DeQueue(&lt;/span&gt;&amp;amp;Q,&amp;amp;&lt;span&gt;i);
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(j = &lt;span&gt;0&lt;/span&gt;;j &amp;lt; G.numVertexes;j++&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(G.arc[i][j] == &lt;span&gt;1&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span&gt;visited[j])
                    {
                        visited[j] &lt;/span&gt;=&lt;span&gt; TRUE;
                        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;G.vexs[j]);
                        EnQueue(&lt;/span&gt;&amp;amp;&lt;span&gt;Q,j);
                    }
                }
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;这是邻接表实现的代码：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; BFS(GraphAdjList GL)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i;
    Queue Q;
    EdgeNode &lt;/span&gt;*&lt;span&gt;p;
    InitQueue (&lt;/span&gt;&amp;amp;&lt;span&gt;Q);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;;i &amp;lt; GL-&amp;gt;shuliang;i++&lt;span&gt;)
    {
        visited[i] &lt;/span&gt;=&lt;span&gt; FALSE;
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;;i &amp;lt; GL-&amp;gt;shuliang;i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;visited[i])
        {
            visited[i] &lt;/span&gt;=&lt;span&gt; TURE;
            printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,GL-&amp;gt;&lt;span&gt;adjlist[i].data);
            EnQueue(&lt;/span&gt;&amp;amp;&lt;span&gt;Q,i);
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;QueueEmpty(Q))
            {
                DeQueue(&lt;/span&gt;&amp;amp;Q,&amp;amp;&lt;span&gt;i);
                p &lt;/span&gt;= GL-&amp;gt;&lt;span&gt;adjlist[i].firstedge;
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(p)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!visited[p -&amp;gt;&lt;span&gt; adjvex])
                    {
                        visited[p &lt;/span&gt;-&amp;gt; adjvex] =&lt;span&gt; TRUE;
                        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,GL-&amp;gt;adjlist[p -&amp;gt;&lt;span&gt; adjvex].data);
                        EnQueue(&lt;/span&gt;&amp;amp;Q,p-&amp;gt;&lt;span&gt;adjvex);
                    }
                    p &lt;/span&gt;= p -&amp;gt;&lt;span&gt; next;
                }
            }
        }
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt; 个人感觉代码蛮好懂，这一块感觉需要多多思考，广度优先和深度优先小到日常生活，大到数据模型，有着广泛的作用，而这篇文章中的两种方法，因为都要遍历整张图，所以其算法时间复杂度相同，所以对于全图遍历并没有什么明确选择的优势，而如果目的在于尽快地找到目的点，那么深度优先更占优势；而如果是不断扩大遍历范围，寻找相对最优解则是广度优先看起来更划算。算法就到这里，经验和思路只能靠大家自己在实践中多多总结，得到自己使用的一套方法。&lt;/h2&gt;
</description>
<pubDate>Fri, 08 Feb 2019 06:43:00 +0000</pubDate>
<dc:creator>compassion‘s</dc:creator>
<og:description>数据结构 BFS算法 广度优先</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yx1999/p/10355964.html</dc:identifier>
</item>
<item>
<title>ASP.NET Core 打造一个简单的图书馆管理系统（八）学生借阅/预约/查询书籍事务 - NanaseRuri</title>
<link>http://www.cnblogs.com/gokoururi/p/10344333.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gokoururi/p/10344333.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本系列文章主要为我之前所学知识的一次微小的实践，以我学校图书馆管理系统为雏形所作。&lt;/p&gt;
&lt;p&gt;本系列文章主要参考资料：&lt;/p&gt;
&lt;p&gt;微软文档：https://docs.microsoft.com/zh-cn/aspnet/core/getting-started/?view=aspnetcore-2.1&amp;amp;tabs=windows&lt;/p&gt;
&lt;p&gt;《Pro ASP.NET MVC 5》、《锋利的 jQuery》&lt;/p&gt;

&lt;p&gt;当此系列文章写完后会在一周内推出修正版。&lt;/p&gt;

&lt;p&gt;此系列皆使用 VS2017+C# 作为开发环境。如果有什么问题或者意见欢迎在留言区进行留言。 &lt;/p&gt;
&lt;p&gt;项目 github 地址：&lt;a href=&quot;https://github.com/NanaseRuri/LibraryDemo&quot; target=&quot;_blank&quot;&gt;https://github.com/NanaseRuri/LibraryDemo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;修改前地址：&lt;a href=&quot;https://github.com/NanaseRuri/LibraryDemo/tree/SomeError&quot; target=&quot;_blank&quot;&gt;https://github.com/NanaseRuri/LibraryDemo/tree/SomeError&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;本章内容&lt;/strong&gt;：自定义布局页、自定义 EditorFor 模板、EF 多对多数据的更新&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、更新模型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;折腾许久找不到同时更新具有依赖关系的两个数据库的方法，遂对原 Student 模型进行精简，并添加一个 StudentInfo 模型用来保存相应的借书信息。同时原程序中原来非登录界面对 Student 类型的引用改为对 StudentInfo 的引用。&lt;/p&gt;
&lt;p&gt;同时由于书籍和学生存在多对多的关系——一本书可被多人预约，而一个人可以借阅多本书，因此在此更新模型使书籍与学生有多对多的关系。&lt;/p&gt;
&lt;p&gt;此处仅展示模型的修改，控制器方面的修改请在查看源码：&lt;/p&gt;

&lt;p&gt;引入中间导航类：&lt;/p&gt;
&lt;p&gt;这里新增的 AppointingDateTime 用于将借阅的书籍以及预约的书籍进行区分。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AppointmentOrLending
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Book Book { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; BookId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; StudentInfo Student { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; StudentId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DateTime? AppointingDateTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Student 模型改动&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2f0195fa-9b9a-4d77-b35d-db958b5948b0')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_2f0195fa-9b9a-4d77-b35d-db958b5948b0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2f0195fa-9b9a-4d77-b35d-db958b5948b0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2f0195fa-9b9a-4d77-b35d-db958b5948b0',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2f0195fa-9b9a-4d77-b35d-db958b5948b0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student : IdentityUser
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 学号
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        [ProtectedPersonalData]
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         [RegularExpression(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[UIA]\\d{9}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; UserName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;         [StringLength(&lt;span&gt;14&lt;/span&gt;, MinimumLength = &lt;span&gt;11&lt;/span&gt;)] &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; PhoneNumber { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Degrees Degree { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxBooksNumber { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;添加新模型 StudentInfo:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StudentInfo
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        [Key]
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; UserName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 学位，用来限制借书数目
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Degrees Degree { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 最大借书数目
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxBooksNumber { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 已借图书
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; ICollection&amp;lt;AppointmentOrLending&amp;gt; KeepingBooks { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; AppointingBookBarCode { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         [StringLength(&lt;span&gt;14&lt;/span&gt;, MinimumLength = &lt;span&gt;11&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; PhoneNumber { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 罚款
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;decimal&lt;/span&gt; Fine { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }               
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在借书信息处添加学生信息和中间类的表，同时在此指定中间类的外键——指定其外键由学生学号和书籍条形码共同组成，需要重写 DbContext 父类的 OnModelCreating 方法使其覆盖对应表格在 EF 的默认生成方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LendingInfoDbContext:DbContext
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; LendingInfoDbContext(DbContextOptions&amp;lt;LendingInfoDbContext&amp;gt; options) : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;Book&amp;gt; Books { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;BookDetails&amp;gt; BooksDetail { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;Bookshelf&amp;gt; Bookshelves { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;RecommendedBook&amp;gt; RecommendedBooks { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;StudentInfo&amp;gt; Students { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;AppointmentOrLending&amp;gt; AppointmentOrLendings { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnModelCreating(ModelBuilder modelBuilder)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnModelCreating(modelBuilder);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             modelBuilder.Entity&amp;lt;AppointmentOrLending&amp;gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 .HasKey(c =&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; { c.BookId, c.StudentId });
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后例行的更新数据库：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd librarydemo
add&lt;/span&gt;-migration AddStudents -&lt;span&gt;c LibraryDemo.Data.LendingInfoDbContext
update&lt;/span&gt;-database -c LibraryDemo.Data.LendingInfoDbContext
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在原 BookInitiator 中对 Students 表进行初始化：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;context.Students.Any())
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                 IEnumerable&amp;lt;StudentInfo&amp;gt; initialStudents = &lt;span&gt;new&lt;/span&gt;&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                     &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StudentInfo()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                         UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;U201600001&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                         Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Nanase&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                         PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;12345678910&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                         Degree =&lt;span&gt; Degrees.CollegeStudent,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                         MaxBooksNumber = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                    },
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                     &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StudentInfo()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                         UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;U201600002&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                         Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ruri&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                         PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;12345678911&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                         Degree =&lt;span&gt; Degrees.DoctorateDegree,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                         MaxBooksNumber = &lt;span&gt;15&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                };
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;                 IEnumerable&amp;lt;StudentInfo&amp;gt; initialAdmins = &lt;span&gt;new&lt;/span&gt;&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StudentInfo()
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                         UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A000000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                         Name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Admin0000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                         PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;12345678912&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                         Degree =&lt;span&gt; Degrees.CollegeStudent,
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                         MaxBooksNumber = &lt;span&gt;20&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                    },
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                     &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StudentInfo()
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                         UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A000000001&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                         Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Admin0001&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                         PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;15827411963&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                         Degree =&lt;span&gt; Degrees.CollegeStudent,
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                         MaxBooksNumber = &lt;span&gt;20&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                    },
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                };
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                 &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; student &lt;span&gt;in&lt;/span&gt;&lt;span&gt; initialStudents)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;                    context.Students.Add(student);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                     &lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.SaveChangesAsync();
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                 &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; admin &lt;span&gt;in&lt;/span&gt;&lt;span&gt; initialAdmins)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;                    context.Students.Add(admin);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                     &lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.SaveChangesAsync();
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             }
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、自定义布局页 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 ASP.NET 中，默认将 HTML 页面的 body 元素一部分抽出来，该部分称作 RenderBody ；然后将这部分放到一个布局即大体页面框架中即可完成对同一系列的页面进行精简的布局实现。&lt;/p&gt;
&lt;p&gt;默认布局页为 _Layout.cshtml，可在视图文件夹中根目录或各个控制器视图目录的 _ViewStart.cshtml 修改默认布局页，或者在每个 Razor 页面的开头中指定布局页：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;@{
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     ViewData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EditLendingInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     Layout = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_LendingLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;之前一直使用的是 VS 的默认布局页，现在以该默认布局页为基础，添加自己所需要的信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ffff6e38-68bd-47e8-bf95-917838417242')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_ffff6e38-68bd-47e8-bf95-917838417242&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ffff6e38-68bd-47e8-bf95-917838417242&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ffff6e38-68bd-47e8-bf95-917838417242',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ffff6e38-68bd-47e8-bf95-917838417242&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@using Microsoft.AspNetCore.Http.Extensions
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;@using Microsoft.AspNetCore.Authorization
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;@inject IAuthorizationService AuthorizationService
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;html&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;viewport&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width=device-width, initial-scale=1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;title&amp;gt;@ViewData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] - LibraryDemo&amp;lt;/title&amp;gt;
&lt;span&gt;10&lt;/span&gt;     &amp;lt;environment include=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Development&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;11&lt;/span&gt;         &amp;lt;link rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/lib/bootstrap/dist/css/bootstrap.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;12&lt;/span&gt;         &amp;lt;link rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/css/site.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;13&lt;/span&gt;     &amp;lt;/environment&amp;gt;
&lt;span&gt;14&lt;/span&gt;     &amp;lt;environment exclude=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Development&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;15&lt;/span&gt;         &amp;lt;link rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.7/css/bootstrap.min.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;               asp-fallback-href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/lib/bootstrap/dist/css/bootstrap.min.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;               asp-fallback-test-&lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sr-only&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-fallback-test-property=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-fallback-test-value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;absolute&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;18&lt;/span&gt;         &amp;lt;link rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/css/site.min.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-append-version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;19&lt;/span&gt;     &amp;lt;/environment&amp;gt;
&lt;span&gt;20&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;21&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;22&lt;/span&gt;     &amp;lt;nav &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;navbar navbar-inverse navbar-fixed-top&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;23&lt;/span&gt;         &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;24&lt;/span&gt;             &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;navbar-header&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;25&lt;/span&gt;                 &amp;lt;button type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;navbar-toggle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-toggle=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-target=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.navbar-collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;26&lt;/span&gt;                     &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sr-only&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Toggle navigation&amp;lt;/span&amp;gt;
&lt;span&gt;27&lt;/span&gt;                     &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;icon-bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;28&lt;/span&gt;                     &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;icon-bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;29&lt;/span&gt;                     &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;icon-bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;30&lt;/span&gt;                 &amp;lt;/button&amp;gt;
&lt;span&gt;31&lt;/span&gt;                 &amp;lt;a asp-area=&lt;span&gt;&quot;&quot;&lt;/span&gt; asp-controller=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BookInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;navbar-brand&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;LibraryDemo&amp;lt;/a&amp;gt;
&lt;span&gt;32&lt;/span&gt;             &amp;lt;/div&amp;gt;
&lt;span&gt;33&lt;/span&gt;             &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;navbar-collapse collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;34&lt;/span&gt;                 &amp;lt;ul &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nav navbar-nav&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;35&lt;/span&gt;                     &amp;lt;li&amp;gt;&amp;lt;a asp-area=&lt;span&gt;&quot;&quot;&lt;/span&gt; asp-controller=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BookInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;首页&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;36&lt;/span&gt;                     &amp;lt;li&amp;gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                        @if (User.Identity.IsAuthenticated)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                             &amp;lt;a asp-controller=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BookInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PersonalInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@User.Identity.Name&amp;lt;/a&amp;gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                             &amp;lt;a asp-area=&lt;span&gt;&quot;&quot;&lt;/span&gt; asp-controller=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StudentAccount&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;                                asp-route-returnUrl=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@(Context.Request.GetDisplayUrl())&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;登录&amp;lt;/a&amp;gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                 &amp;lt;/li&amp;gt;
&lt;span&gt;47&lt;/span&gt;                 &amp;lt;li&amp;gt;&amp;lt;a asp-area=&lt;span&gt;&quot;&quot;&lt;/span&gt; asp-controller=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BookInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Recommend&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;推荐图书&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;48&lt;/span&gt;                     &amp;lt;li&amp;gt;&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mailto:Nanase@cnblogs.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;联系我们&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;                    @if (User.Identity.IsAuthenticated)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                         &amp;lt;li&amp;gt;
&lt;span&gt;52&lt;/span&gt;                             &amp;lt;a asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Logout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-controller=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StudentAccount&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-route-returnUrl=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@(Context.Request.GetDisplayUrl())&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;注销&amp;lt;/a&amp;gt;                            
&lt;span&gt;53&lt;/span&gt;                         &amp;lt;/li&amp;gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;             &amp;lt;/ul&amp;gt;
&lt;span&gt;56&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;57&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;58&lt;/span&gt; &amp;lt;/nav&amp;gt;
&lt;span&gt;59&lt;/span&gt; &amp;lt;&lt;span&gt;partial&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_CookieConsentPartial&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;60&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container body-content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;61&lt;/span&gt;     @if (TempData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         &amp;lt;br/&amp;gt;
&lt;span&gt;64&lt;/span&gt;         &amp;lt;p &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text-success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@TempData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]&amp;lt;/p&amp;gt;
&lt;span&gt;65&lt;/span&gt; &lt;span&gt;    }   
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;    @RenderBody()
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;     &amp;lt;hr/&amp;gt;
&lt;span&gt;68&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;69&lt;/span&gt; 
&lt;span&gt;70&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;margin-top: 20px;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;71&lt;/span&gt;     &amp;lt;footer&amp;gt;
&lt;span&gt;72&lt;/span&gt;         &amp;lt;p&amp;gt;&amp;amp;copy; &lt;span&gt;2018&lt;/span&gt; - LibraryDemo&amp;lt;/p&amp;gt;
&lt;span&gt;73&lt;/span&gt;     &amp;lt;/footer&amp;gt;
&lt;span&gt;74&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;75&lt;/span&gt; &amp;lt;environment include=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Development&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;76&lt;/span&gt;     &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/lib/jquery/dist/jquery.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;77&lt;/span&gt;     &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/lib/bootstrap/dist/js/bootstrap.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;78&lt;/span&gt;     &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/js/site.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-append-version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;79&lt;/span&gt; &amp;lt;/environment&amp;gt;
&lt;span&gt;80&lt;/span&gt; &amp;lt;environment exclude=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Development&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;81&lt;/span&gt;     &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.3.1.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;82&lt;/span&gt;             asp-fallback-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/lib/jquery/dist/jquery.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;83&lt;/span&gt;             asp-fallback-test=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;window.jQuery&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;84&lt;/span&gt;             crossorigin=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;anonymous&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;85&lt;/span&gt;             integrity=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sha384-tsQFqpEReu7ZLhBV2VZlAu7zcOV+rXbYlF2cqB8txI/8aZajjp4Bqd+V6D5IgvKT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;86&lt;/span&gt;     &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.7/bootstrap.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;87&lt;/span&gt;             asp-fallback-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/lib/bootstrap/dist/js/bootstrap.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;88&lt;/span&gt;             asp-fallback-test=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;window.jQuery &amp;amp;&amp;amp; window.jQuery.fn &amp;amp;&amp;amp; window.jQuery.fn.modal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;89&lt;/span&gt;             crossorigin=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;anonymous&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;90&lt;/span&gt;             integrity=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;91&lt;/span&gt;     &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/js/site.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-append-version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;92&lt;/span&gt; &amp;lt;/environment&amp;gt;
&lt;span&gt;93&lt;/span&gt; @RenderSection(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Scripts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, required: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;94&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;95&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;现在大体框架：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190205165048870-991252641.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190205165054859-264731418.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;除了默认的 RenderBody 外，可以指定特定的部分放在页面的不同地方，在布局页中使用@RenderSection(&quot;SectionName&quot;)：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; @RenderSection(&lt;span&gt;&quot;SectionName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;且在视图页中使用指定特定的节@section SectionName{　　};&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;@section SectionName{　
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; 　};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;则该视图页中的 SectionName 部分会被提取出来放到布局页对应的位置。&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、管理员编辑借阅信息&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;动作方法：&lt;/p&gt;
&lt;p&gt;在此对数据库的表格使用 Include 方法使 EF 应用其导航属性以获得 KeepingBooks 列表，否则使用 Student 对象 KeepingBooks 属性只会返回空。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         [Authorize(Roles = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; IActionResult EditLendingInfo(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; barcode)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (barcode == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; RedirectToAction(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BookDetails&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             Book book = _lendingInfoDbContext.Books.FirstOrDefault(b =&amp;gt; b.BarCode ==&lt;span&gt; barcode);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(book);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        [HttpPost]
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         [Authorize(Roles = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        [ValidateAntiForgeryToken]
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; EditLendingInfo([Bind(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BarCode,ISBN,BorrowTime,KeeperId,AppointedLatestTime,State&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]Book book)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ModelState.IsValid)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (book.BorrowTime &amp;gt;&lt;span&gt; DateTime.Now)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     ModelState.AddModelError(&lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请检查外借时间&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(book);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (book.AppointedLatestTime.HasValue)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (book.AppointedLatestTime &amp;lt;&lt;span&gt; DateTime.Now)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                         ModelState.AddModelError(&lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请检查预约时间&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(book);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (book.KeeperId == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                         ModelState.AddModelError(&lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;不存在该学生&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(book);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;                 StudentInfo student = &lt;span&gt;await&lt;/span&gt; _lendingInfoDbContext.Students.Include(s =&amp;gt; s.KeepingBooks).FirstOrDefaultAsync(s =&amp;gt; s.UserName ==&lt;span&gt; book.KeeperId);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;                 Book addedBook =&lt;span&gt; _lendingInfoDbContext.Books
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                     .Include(b =&amp;gt; b.Keeper).ThenInclude(k =&amp;gt;&lt;span&gt; k.KeepingBooks)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                     .FirstOrDefault(b =&amp;gt; b.BarCode ==&lt;span&gt; book.BarCode);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (addedBook == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; RedirectToAction(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Books&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; { isbn =&lt;span&gt; book.ISBN });
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt;                 StudentInfo preStudent =&lt;span&gt; addedBook.Keeper;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                 AppointmentOrLending targetLending =
&lt;span&gt;51&lt;/span&gt;                     preStudent?.KeepingBooks.FirstOrDefault(b =&amp;gt; b.BookId ==&lt;span&gt; addedBook.BarCode);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt;                 addedBook.AppointedLatestTime =&lt;span&gt; book.AppointedLatestTime;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                 addedBook.State =&lt;span&gt; book.State;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;                 addedBook.BorrowTime =&lt;span&gt; book.BorrowTime;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                 addedBook.MatureTime = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt;                 preStudent?&lt;span&gt;.KeepingBooks.Remove(targetLending);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (addedBook.BorrowTime.HasValue)
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (book.KeeperId == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;                         ModelState.AddModelError(&lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请检查借阅者&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(book);
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; 
&lt;span&gt;68&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (student == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;                         ModelState.AddModelError(&lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;不存在该学生&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(book);
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (student != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (student.KeepingBooks.Count &amp;gt;=&lt;span&gt; student.MaxBooksNumber)
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;                             TempData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;该学生借书已超过上限&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; 
&lt;span&gt;80&lt;/span&gt;                         addedBook.State =&lt;span&gt; BookState.Borrowed;
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;                         student.KeepingBooks.Add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; AppointmentOrLending()
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt;                             BookId =&lt;span&gt; addedBook.BarCode,
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;                             StudentId =&lt;span&gt; student.UserName
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; &lt;span&gt;                        });
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt;                         addedBook.Keeper =&lt;span&gt; student;
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; 
&lt;span&gt;88&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt;                     addedBook.MatureTime = addedBook.BorrowTime + TimeSpan.FromDays(&lt;span&gt;28&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt; 
&lt;span&gt;92&lt;/span&gt; 
&lt;span&gt;93&lt;/span&gt;                 TempData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;保存成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;94&lt;/span&gt;                 &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _lendingInfoDbContext.SaveChangesAsync();
&lt;/span&gt;&lt;span&gt;95&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; RedirectToAction(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Books&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; { isbn =&lt;span&gt; book.ISBN });
&lt;/span&gt;&lt;span&gt;96&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;97&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(book);
&lt;/span&gt;&lt;span&gt;98&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;将 BookState 枚举提取成分部视图 _BookStatePartial：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@using LibraryDemo.Models.DomainModels
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;@model Book
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 4&lt;/span&gt;     @Html.LabelFor(b =&amp;gt;&lt;span&gt; b.State)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         @Html.DropDownListFor(b =&amp;gt; b.State, Enum.GetValues(&lt;span&gt;typeof&lt;/span&gt;(BookState)).Cast&amp;lt;Enum&amp;gt;().Select(state =&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; enumVal = Enum.GetName(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(BookState), state);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt;&lt;span&gt; displayVal;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (enumVal)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Normal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     displayVal = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;可借阅&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Readonly&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                     displayVal = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;馆内阅览&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Borrowed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     displayVal = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;已借出&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReBorrowed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     displayVal = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;被续借&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Appointed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     displayVal = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;被预约&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                     displayVal = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SelectListItem()
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 Text =&lt;span&gt; displayVal,
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 Value =&lt;span&gt; enumVal,
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 Selected = Model.State.ToString() ==&lt;span&gt; enumVal
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        }))
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Html.DisplayFor 方法是 ASP.NET 内置对各种属性进行展示的方法，可以在项目的 Views 文件夹中的 Shared 文件夹创建对应类型的 Editor 模板供其使用：&lt;/p&gt;
&lt;p&gt;在此创建一个 DateTime.cshtml，于是我们使用 Html.DisplayFor 用于展示 DateTime 数据时只会显示年份/月份/天数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; @model DateTime?
&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; @Model?.ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyy/M/dd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;视图中使用 partial TagHelper 指定其 name 为 _BookStatePartial 以应用分部视图：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@using LibraryDemo.Models.DomainModels
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;@model LibraryDemo.Models.DomainModels.Book
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;@{
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     ViewData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EditLendingInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     Layout=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_LendingLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &amp;lt;h2&amp;gt;@Model.BarCode&amp;lt;/h2&amp;gt;
&lt;span&gt; 9&lt;/span&gt; &amp;lt;h3&amp;gt;@Model.Name&amp;lt;/h3&amp;gt;
&lt;span&gt;10&lt;/span&gt; &amp;lt;br/&amp;gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &amp;lt;script&amp;gt;
&lt;span&gt;13&lt;/span&gt;     window.onload =&lt;span&gt; function() {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).addClass(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     window.onbeforeunload = function (&lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您的数据未保存，确定退出？&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    function removeOnbeforeunload() {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         window.onbeforeunload = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; @Html.ValidationSummary(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;span&gt;new&lt;/span&gt;{@class=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text-danger&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &amp;lt;form asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EditLendingInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; method=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;27&lt;/span&gt;     @Html.HiddenFor(b =&amp;gt;&lt;span&gt; b.BarCode)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     @Html.HiddenFor(b =&amp;gt;&lt;span&gt; b.ISBN)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;30&lt;/span&gt;         @Html.LabelFor(b =&amp;gt;&lt;span&gt; b.KeeperId)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         @Html.EditorFor(b =&amp;gt;&lt;span&gt; b.KeeperId)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;33&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;34&lt;/span&gt;         @Html.LabelFor(b =&amp;gt;&lt;span&gt; b.BorrowTime)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         @Html.EditorFor(b =&amp;gt;&lt;span&gt; b.BorrowTime)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;37&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;38&lt;/span&gt;         @Html.LabelFor(b =&amp;gt;&lt;span&gt; b.AppointedLatestTime)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         @Html.EditorFor(b =&amp;gt;&lt;span&gt; b.AppointedLatestTime)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;41&lt;/span&gt;     &amp;lt;&lt;span&gt;partial&lt;/span&gt; model=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Model&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_BookStatePartial&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;42&lt;/span&gt;     &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; onclick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;return removeOnbeforeunload()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn-primary&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;43&lt;/span&gt; &amp;lt;/form&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190205161920264-1879611488.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190205161929869-1521304685.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190205162002355-1114344654.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190205162018960-55182160.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190205162033635-430361630.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190205162056883-2058904222.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190205162220840-1955090335.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190205162239939-1224663576.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190205162313495-1316367871.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、查看个人信息&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里通过 User.Identity.Name 获取当前登录人的信息以选定特定的学生：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;        [Authorize]
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt;&lt;span&gt; PersonalInfo()
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             StudentInfo student = &lt;span&gt;await&lt;/span&gt; _lendingInfoDbContext.Students.Include(s =&amp;gt; s.KeepingBooks).ThenInclude(k =&amp;gt;&lt;span&gt; k.Book)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 .FirstOrDefaultAsync(s =&amp;gt; s.UserName ==&lt;span&gt; User.Identity.Name);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;decimal&lt;/span&gt; fine = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;            
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; book &lt;span&gt;in&lt;/span&gt; student.KeepingBooks.Where(b =&amp;gt; b.Book.MatureTime &amp;lt; DateTime.Now &amp;amp;&amp;amp; !&lt;span&gt;b.AppointingDateTime.HasValue))
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 fine += (DateTime.Now - book.Book.MatureTime.Value).Days * (&lt;span&gt;decimal&lt;/span&gt;)&lt;span&gt;0.2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 book.Book.State = book.Book.State == BookState.Appointed ?&lt;span&gt; BookState.Appointed : BookState.Expired;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;             student.Fine =&lt;span&gt; fine;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             PersonalInfoViewModel model = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PersonalInfoViewModel()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 Student =&lt;span&gt; student,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 BookingBook = _lendingInfoDbContext.Books.FirstOrDefault(b =&amp;gt; b.BarCode ==&lt;span&gt; student.AppointingBookBarCode)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(model);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;视图：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@model LibraryDemo.Models.PersonalInfoViewModel
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;@{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     ViewData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PersonalInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     Layout = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_LendingLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt; fine = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &amp;lt;link rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/css/BookInfo.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &amp;lt;h2&amp;gt;@Model.Student.Name&amp;lt;/h2&amp;gt;
&lt;span&gt;10&lt;/span&gt; &amp;lt;br /&amp;gt;
&lt;span&gt;11&lt;/span&gt; @if (Model.Student.KeepingBooks.Any(b =&amp;gt; b.Book.MatureTime &amp;lt;&lt;span&gt; DateTime.Now))
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &amp;lt;p&amp;gt;
&lt;span&gt;14&lt;/span&gt;         罚款:@foreach (&lt;span&gt;var&lt;/span&gt; matureBook &lt;span&gt;in&lt;/span&gt; Model.Student.KeepingBooks.Where(b =&amp;gt; !b.AppointingDateTime.HasValue&amp;amp;&amp;amp;b.Book.MatureTime &amp;lt;&lt;span&gt; DateTime.Now))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             fine += (DateTime.Now - matureBook.Book.MatureTime).Value.TotalDays * &lt;span&gt;0.2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        @fine
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &amp;lt;/p&amp;gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &amp;lt;form asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReBorrow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; method=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;22&lt;/span&gt;     &amp;lt;table&amp;gt;
&lt;span&gt;23&lt;/span&gt;         &amp;lt;tr&amp;gt;
&lt;span&gt;24&lt;/span&gt;             &amp;lt;th&amp;gt;续借&amp;lt;/th&amp;gt;
&lt;span&gt;25&lt;/span&gt;             &amp;lt;th&amp;gt;书名&amp;lt;/th&amp;gt;
&lt;span&gt;26&lt;/span&gt;             &amp;lt;th&amp;gt;条形码&amp;lt;/th&amp;gt;
&lt;span&gt;27&lt;/span&gt;             &amp;lt;th&amp;gt;状态&amp;lt;/th&amp;gt;
&lt;span&gt;28&lt;/span&gt;             &amp;lt;th&amp;gt;到期时间&amp;lt;/th&amp;gt;
&lt;span&gt;29&lt;/span&gt;             &amp;lt;th&amp;gt;索书号&amp;lt;/th&amp;gt;
&lt;span&gt;30&lt;/span&gt;         &amp;lt;/tr&amp;gt;
&lt;span&gt;31&lt;/span&gt;         @if (!&lt;span&gt;Model.Student.KeepingBooks.Any())
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             &amp;lt;tr&amp;gt;
&lt;span&gt;34&lt;/span&gt;                 &amp;lt;td colspan=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text-align: center&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;未借阅书本&amp;lt;/td&amp;gt;
&lt;span&gt;35&lt;/span&gt;             &amp;lt;/tr&amp;gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; keepingBook &lt;span&gt;in&lt;/span&gt; Model.Student.KeepingBooks.Where(b=&amp;gt;!&lt;span&gt;b.AppointingDateTime.HasValue))
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            {                
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                 &amp;lt;tr&amp;gt;
&lt;span&gt;42&lt;/span&gt;                     &amp;lt;td&amp;gt;&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkbox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@keepingBook.Book.BarCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;barcodes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;&amp;lt;/td&amp;gt;
&lt;span&gt;43&lt;/span&gt;                     &amp;lt;td&amp;gt;@keepingBook.Book.Name&amp;lt;/td&amp;gt;
&lt;span&gt;44&lt;/span&gt;                     &amp;lt;td&amp;gt;@keepingBook.Book.BarCode&amp;lt;/td&amp;gt;
&lt;span&gt;45&lt;/span&gt;                     &amp;lt;td&amp;gt;@Html.DisplayFor(b=&amp;gt;keepingBook.Book.State)&amp;lt;/td&amp;gt;
&lt;span&gt;46&lt;/span&gt;                     &amp;lt;td&amp;gt;@keepingBook.Book.MatureTime?.ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyy/MM/dd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/td&amp;gt;
&lt;span&gt;47&lt;/span&gt;                     &amp;lt;td&amp;gt;@keepingBook.Book.FetchBookNumber&amp;lt;/td&amp;gt;
&lt;span&gt;48&lt;/span&gt;                 &amp;lt;/tr&amp;gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     &amp;lt;/table&amp;gt;    
&lt;span&gt;52&lt;/span&gt;     &amp;lt;br/&amp;gt;
&lt;span&gt;53&lt;/span&gt;     &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn-primary btn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;续借&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;54&lt;/span&gt; &amp;lt;/form&amp;gt;
&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt; &amp;lt;br /&amp;gt;
&lt;span&gt;57&lt;/span&gt; @if (Model.BookingBook != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;     &amp;lt;form asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CancelAppointing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;        
&lt;span&gt;60&lt;/span&gt;         &amp;lt;table&amp;gt;
&lt;span&gt;61&lt;/span&gt;             &amp;lt;tr&amp;gt;
&lt;span&gt;62&lt;/span&gt;                 &amp;lt;th&amp;gt;书名&amp;lt;/th&amp;gt;
&lt;span&gt;63&lt;/span&gt;                 &amp;lt;th&amp;gt;条形码&amp;lt;/th&amp;gt;
&lt;span&gt;64&lt;/span&gt;                 &amp;lt;th&amp;gt;状态&amp;lt;/th&amp;gt;
&lt;span&gt;65&lt;/span&gt;                 &amp;lt;th&amp;gt;预约时间&amp;lt;/th&amp;gt;
&lt;span&gt;66&lt;/span&gt;                 &amp;lt;th&amp;gt;索书号&amp;lt;/th&amp;gt;
&lt;span&gt;67&lt;/span&gt;             &amp;lt;/tr&amp;gt;
&lt;span&gt;68&lt;/span&gt;             &amp;lt;book-info book=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Model.BookingBook&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;is&lt;/span&gt;-booking-book=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/book-info&amp;gt;
&lt;span&gt;69&lt;/span&gt;         &amp;lt;/table&amp;gt;
&lt;span&gt;70&lt;/span&gt;         &amp;lt;br /&amp;gt;
&lt;span&gt;71&lt;/span&gt;         &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;barcode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Model.BookingBook.BarCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;72&lt;/span&gt;         &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;取消预约&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn btn-danger&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;73&lt;/span&gt;     &amp;lt;/form&amp;gt;
&lt;span&gt;74&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190205172652690-1035117808.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;strong&gt;五、借阅书籍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;由于暂时未有获取二维码的接口，仅通过直接访问 Lending 模拟借阅：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
 1 &lt;span&gt;        [Authorize]
 2         public async Task&amp;lt;IActionResult&amp;gt; Lending(string&lt;span&gt; barcode)
 3 &lt;span&gt;        {
 4             Book targetBook=await _lendingInfoDbContext.Books.Include(b=&amp;gt;b.Appointments).FirstOrDefaultAsync(b =&amp;gt; b.BarCode ==&lt;span&gt; barcode);
 5             if (targetBook==null&lt;span&gt;)
 6 &lt;span&gt;            {
 7                 TempData[&quot;message&quot;] = &quot;请重新扫描书籍&quot;&lt;span&gt;;
 8                 return RedirectToAction(&quot;PersonalInfo&quot;&lt;span&gt;);
 9 &lt;span&gt;            }
10 
11             if (targetBook.Appointments.Any(a=&amp;gt;&lt;span&gt;a.AppointingDateTime.HasValue))
12 &lt;span&gt;            {
13                 TempData[&quot;message&quot;] = &quot;此书已被预约&quot;&lt;span&gt;;
14                 return RedirectToAction(&quot;PersonalInfo&quot;&lt;span&gt;);
15 &lt;span&gt;            }
16 
17             if (targetBook.State==&lt;span&gt;BookState.Readonly)
18 &lt;span&gt;            {
19                 TempData[&quot;message&quot;] = &quot;此书不供外借&quot;&lt;span&gt;;
20                 return RedirectToAction(&quot;PersonalInfo&quot;&lt;span&gt;);
21 &lt;span&gt;            }
22 
23             targetBook.State =&lt;span&gt; BookState.Borrowed;
24             targetBook.BorrowTime =&lt;span&gt; DateTime.Now.Date;
25             targetBook.MatureTime = DateTime.Now.Date+TimeSpan.FromDays(28&lt;span&gt;);
26             StudentInfo student =
27                 await _lendingInfoDbContext.Students.Include(s=&amp;gt;s.KeepingBooks).FirstOrDefaultAsync(s =&amp;gt; s.UserName ==&lt;span&gt; User.Identity.Name);
28             student.KeepingBooks.Add(new&lt;span&gt; AppointmentOrLending()
29 &lt;span&gt;            {
30                 BookId =&lt;span&gt; targetBook.BarCode,
31                 StudentId =&lt;span&gt; student.UserName
32 &lt;span&gt;            });
33             await&lt;span&gt; _lendingInfoDbContext.SaveChangesAsync();
34             TempData[&quot;message&quot;] = &quot;借书成功&quot;&lt;span&gt;;
35             return RedirectToAction(&quot;PersonalInfo&quot;&lt;span&gt;);
36         }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190207233728759-1803481536.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190207233742764-103013841.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190207234015069-1513882585.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190207234021684-1548633825.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;span&gt; 六、续借书籍&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;动作方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;        [Authorize]
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        [HttpPost]
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; ReBorrow(IEnumerable&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; barcodes)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             StringBuilder borrowSuccess = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             StringBuilder borrowFail = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             borrowSuccess.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;成功续借书籍:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             borrowFail.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;续借失败书籍：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; barcode &lt;span&gt;in&lt;/span&gt;&lt;span&gt; barcodes)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            {   
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 Book reBorrowBook = _lendingInfoDbContext.Books.FirstOrDefault(b =&amp;gt; b.BarCode ==&lt;span&gt; barcode);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (reBorrowBook != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (reBorrowBook.State == BookState.Borrowed &amp;amp;&amp;amp; DateTime.Now-reBorrowBook.MatureTime?.Date&amp;lt;=TimeSpan.FromDays(&lt;span&gt;3&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                         reBorrowBook.State =&lt;span&gt; BookState.ReBorrowed;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                         reBorrowBook.BorrowTime =&lt;span&gt; DateTime.Now.Date;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                         reBorrowBook.MatureTime = DateTime.Now.Date+TimeSpan.FromDays(&lt;span&gt;28&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                         borrowSuccess.Append($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;《{reBorrowBook.Name}》、&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                         borrowFail.Append($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;《{reBorrowBook.Name}》、&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            borrowSuccess.AppendLine(borrowFail.ToString());
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _lendingInfoDbContext.SaveChangesAsync();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             TempData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; borrowSuccess.ToString();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; RedirectToAction(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PersonalInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190208131813701-533753929.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190208131856126-1935306765.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt;五、查询书籍&lt;/p&gt;
&lt;p&gt;修改之前的 Search 方法使其通过当前用户的身份返回不同页面，以及在 _LendingInfoLayout 中添加搜索框部分：&lt;/p&gt;
&lt;p&gt;19 行通过短路使未授权用户不用登录。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; Search(&lt;span&gt;string&lt;/span&gt; keyWord, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; value)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             BookDetails bookDetails = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BookDetails();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (keyWord)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                     bookDetails = &lt;span&gt;await&lt;/span&gt; _lendingInfoDbContext.BooksDetail.AsNoTracking().FirstOrDefaultAsync(b =&amp;gt; b.Name ==&lt;span&gt; value);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ISBN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                     bookDetails = &lt;span&gt;await&lt;/span&gt; _lendingInfoDbContext.BooksDetail.AsNoTracking().FirstOrDefaultAsync(b =&amp;gt; b.ISBN ==&lt;span&gt; value);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FetchBookNumber&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                     bookDetails = &lt;span&gt;await&lt;/span&gt; _lendingInfoDbContext.BooksDetail.AsNoTracking().FirstOrDefaultAsync(b =&amp;gt; b.FetchBookNumber ==&lt;span&gt; value);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (bookDetails != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (User.Identity.IsAuthenticated&amp;amp;&amp;amp; User.IsInRole(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; RedirectToAction(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EditBookDetails&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; { isbn =&lt;span&gt; bookDetails.ISBN });
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; RedirectToAction(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Detail&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; {isbn =&lt;span&gt; bookDetails.ISBN});
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                }                
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;             TempData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;找不到该书籍&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; RedirectToAction(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BookDetails&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;视图页：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;@using Microsoft.AspNetCore.Http.Extensions
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;@using Microsoft.AspNetCore.Authorization
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;@inject IAuthorizationService AuthorizationService
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt;  5&lt;/span&gt; &amp;lt;html&amp;gt;
&lt;span&gt;  6&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt;  7&lt;/span&gt;     &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;  8&lt;/span&gt;     &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;viewport&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width=device-width, initial-scale=1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;  9&lt;/span&gt;     &amp;lt;title&amp;gt;@ViewData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] - LibraryDemo&amp;lt;/title&amp;gt;
&lt;span&gt; 10&lt;/span&gt;     &amp;lt;environment include=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Development&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 11&lt;/span&gt;         &amp;lt;link rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/lib/bootstrap/dist/css/bootstrap.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 12&lt;/span&gt;         &amp;lt;link rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/css/site.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 13&lt;/span&gt;     &amp;lt;/environment&amp;gt;
&lt;span&gt; 14&lt;/span&gt;     &amp;lt;environment exclude=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Development&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 15&lt;/span&gt;         &amp;lt;link rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.7/css/bootstrap.min.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;               asp-fallback-href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/lib/bootstrap/dist/css/bootstrap.min.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;               asp-fallback-test-&lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sr-only&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-fallback-test-property=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-fallback-test-value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;absolute&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 18&lt;/span&gt;         &amp;lt;link rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/css/site.min.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-append-version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 19&lt;/span&gt;     &amp;lt;/environment&amp;gt;
&lt;span&gt; 20&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt; 21&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt; 22&lt;/span&gt;     &amp;lt;nav &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;navbar navbar-inverse navbar-fixed-top&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 23&lt;/span&gt;         &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 24&lt;/span&gt;             &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;navbar-header&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 25&lt;/span&gt;                 &amp;lt;button type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;navbar-toggle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-toggle=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-target=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.navbar-collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 26&lt;/span&gt;                     &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sr-only&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Toggle navigation&amp;lt;/span&amp;gt;
&lt;span&gt; 27&lt;/span&gt;                     &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;icon-bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt; 28&lt;/span&gt;                     &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;icon-bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt; 29&lt;/span&gt;                     &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;icon-bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt; 30&lt;/span&gt;                 &amp;lt;/button&amp;gt;
&lt;span&gt; 31&lt;/span&gt;                 &amp;lt;a asp-area=&lt;span&gt;&quot;&quot;&lt;/span&gt; asp-controller=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BookInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;navbar-brand&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;LibraryDemo&amp;lt;/a&amp;gt;
&lt;span&gt; 32&lt;/span&gt;             &amp;lt;/div&amp;gt;
&lt;span&gt; 33&lt;/span&gt;             &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;navbar-collapse collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 34&lt;/span&gt;                 &amp;lt;ul &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nav navbar-nav&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 35&lt;/span&gt;                     &amp;lt;li&amp;gt;&amp;lt;a asp-area=&lt;span&gt;&quot;&quot;&lt;/span&gt; asp-controller=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BookInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;首页&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt; 36&lt;/span&gt;                     &amp;lt;li&amp;gt;
&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;                        @if (User.Identity.IsAuthenticated)
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;                             &amp;lt;a asp-controller=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BookInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PersonalInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@User.Identity.Name&amp;lt;/a&amp;gt;
&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;                         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;                             &amp;lt;a asp-area=&lt;span&gt;&quot;&quot;&lt;/span&gt; asp-controller=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StudentAccount&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;                                asp-route-returnUrl=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@(Context.Request.GetDisplayUrl())&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;登录&amp;lt;/a&amp;gt;
&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;                     &amp;lt;/li&amp;gt;
&lt;span&gt; 47&lt;/span&gt;                     &amp;lt;li&amp;gt;&amp;lt;a asp-area=&lt;span&gt;&quot;&quot;&lt;/span&gt; asp-controller=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BookInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Recommend&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;推荐图书&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt; 48&lt;/span&gt;                     &amp;lt;li&amp;gt;&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mailto:Nanase@cnblogs.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;联系我们&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;                    @if (User.Identity.IsAuthenticated)
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;                         &amp;lt;li&amp;gt;
&lt;span&gt; 52&lt;/span&gt;                             &amp;lt;a asp-action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Logout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-controller=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StudentAccount&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-route-returnUrl=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@(Context.Request.GetDisplayUrl())&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;注销&amp;lt;/a&amp;gt;
&lt;span&gt; 53&lt;/span&gt;                         &amp;lt;/li&amp;gt;
&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;                 &amp;lt;/ul&amp;gt;
&lt;span&gt; 56&lt;/span&gt;             &amp;lt;/div&amp;gt;
&lt;span&gt; 57&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt; 58&lt;/span&gt;     &amp;lt;/nav&amp;gt;
&lt;span&gt; 59&lt;/span&gt;     @if (TempData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;         &amp;lt;br /&amp;gt;
&lt;span&gt; 62&lt;/span&gt;         &amp;lt;p &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text-success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@TempData[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]&amp;lt;/p&amp;gt;
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;     &amp;lt;br /&amp;gt;
&lt;span&gt; 65&lt;/span&gt;     &amp;lt;div align=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 66&lt;/span&gt;         &amp;lt;form action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Url.Action(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Search&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;BookInfo&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 67&lt;/span&gt;             @Html.DropDownList(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keyword&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;new&lt;/span&gt; List&amp;lt;SelectListItem&amp;gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;                 &lt;span&gt;new&lt;/span&gt; SelectListItem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;书名&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;                 &lt;span&gt;new&lt;/span&gt; SelectListItem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ISBN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ISBN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                 &lt;span&gt;new&lt;/span&gt; SelectListItem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;索书号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FetchBookNumber&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;             &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 74&lt;/span&gt;             &amp;lt;button type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;glyphicon glyphicon-search&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;
&lt;span&gt; 75&lt;/span&gt;         &amp;lt;/form&amp;gt;
&lt;span&gt; 76&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt; 77&lt;/span&gt;     &amp;lt;&lt;span&gt;partial&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_CookieConsentPartial&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 78&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container body-content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;        @RenderBody()
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;         &amp;lt;hr /&amp;gt;
&lt;span&gt; 82&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt; 83&lt;/span&gt; 
&lt;span&gt; 84&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;margin-top: 20px;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 85&lt;/span&gt;         &amp;lt;footer&amp;gt;
&lt;span&gt; 86&lt;/span&gt;             &amp;lt;p&amp;gt;&amp;amp;copy; &lt;span&gt;2018&lt;/span&gt; - LibraryDemo&amp;lt;/p&amp;gt;
&lt;span&gt; 87&lt;/span&gt;         &amp;lt;/footer&amp;gt;
&lt;span&gt; 88&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt; 89&lt;/span&gt;     &amp;lt;environment include=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Development&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 90&lt;/span&gt;         &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/lib/jquery/dist/jquery.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 91&lt;/span&gt;         &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/lib/bootstrap/dist/js/bootstrap.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 92&lt;/span&gt;         &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/js/site.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-append-version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 93&lt;/span&gt;     &amp;lt;/environment&amp;gt;
&lt;span&gt; 94&lt;/span&gt;     &amp;lt;environment exclude=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Development&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 95&lt;/span&gt;         &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.3.1.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;                 asp-fallback-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/lib/jquery/dist/jquery.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;                 asp-fallback-test=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;window.jQuery&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;                 crossorigin=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;anonymous&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;                 integrity=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sha384-tsQFqpEReu7ZLhBV2VZlAu7zcOV+rXbYlF2cqB8txI/8aZajjp4Bqd+V6D5IgvKT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;100&lt;/span&gt;         &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.7/bootstrap.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;                 asp-fallback-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/lib/bootstrap/dist/js/bootstrap.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;                 asp-fallback-test=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;window.jQuery &amp;amp;&amp;amp; window.jQuery.fn &amp;amp;&amp;amp; window.jQuery.fn.modal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;                 crossorigin=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;anonymous&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;                 integrity=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;105&lt;/span&gt;         &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/js/site.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; asp-append-version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;106&lt;/span&gt;     &amp;lt;/environment&amp;gt;
&lt;span&gt;107&lt;/span&gt;     @RenderSection(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Scripts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, required: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;109&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190208134645841-848539905.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408470/201902/1408470-20190208134639366-358486287.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 08 Feb 2019 05:51:00 +0000</pubDate>
<dc:creator>NanaseRuri</dc:creator>
<og:description>ASP.NET Core 打造一个简单的图书馆管理系统（八）学生借阅/预约/查询书籍事务</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gokoururi/p/10344333.html</dc:identifier>
</item>
<item>
<title>HashMap 源码分析 - Draymonder</title>
<link>http://www.cnblogs.com/Draymonder/p/10356043.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Draymonder/p/10356043.html</guid>
<description>&lt;h2 id=&quot;hashmap-介绍&quot;&gt;HashMap 介绍&lt;/h2&gt;
&lt;p&gt;HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。&lt;/p&gt;
&lt;p&gt;HashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。&lt;/p&gt;
&lt;p&gt;HashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。&lt;/p&gt;
&lt;p&gt;HashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。容量 是哈希表中桶的数量，初始容量 只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。&lt;/p&gt;
&lt;p&gt;通常，默认加载因子是 0.75, 这是在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 HashMap 类的操作中，包括 get 和 put 操作，都反映了这一点）。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。&lt;/p&gt;
&lt;p&gt;HashMap是通过&quot;拉链法&quot;实现的哈希表。它包括几个重要的成员变量：table, size, threshold, loadFactor, modCount。&lt;/p&gt;
&lt;p&gt;　　&lt;code&gt;table&lt;/code&gt;是一个Entry[]数组类型，而Entry实际上就是一个单向链表。哈希表的&quot;key-value键值对&quot;都是存储在Entry数组中的。&lt;/p&gt;
&lt;p&gt;　　&lt;code&gt;size&lt;/code&gt;是HashMap的大小，它是HashMap保存的键值对的数量。&lt;/p&gt;
&lt;p&gt;　　&lt;code&gt;threshold&lt;/code&gt;是HashMap的阈值，用于判断是否需要调整HashMap的容量。threshold的值=&quot;容量*加载因子&quot;，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。&lt;/p&gt;
&lt;p&gt;　　&lt;code&gt;loadFactor&lt;/code&gt;就是加载因子。&lt;/p&gt;
&lt;p&gt;　　&lt;code&gt;modCount&lt;/code&gt;是用来实现fail-fast机制的。&lt;/p&gt;
&lt;h2 id=&quot;源码分析&quot;&gt;源码分析&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;static class Node&amp;lt;K,V&amp;gt; implements Map.Entry&amp;lt;K,V&amp;gt; {
    final int hash;
    final K key;
    V value;
    Node&amp;lt;K,V&amp;gt; next;

    Node(int hash, K key, V value, Node&amp;lt;K,V&amp;gt; next) {
        this.hash = hash;
        this.key = key;
        this.value = value;
        this.next = next;
    }

    public final K getKey()        { return key; }
    public final V getValue()      { return value; }
    public final String toString() { return key + &quot;=&quot; + value; }

    public final int hashCode() {
        return Objects.hashCode(key) ^ Objects.hashCode(value);
    }

    public final V setValue(V newValue) {
        V oldValue = value;
        value = newValue;
        return oldValue;
    }

    public final boolean equals(Object o) {
        if (o == this)
            return true;
        if (o instanceof Map.Entry) {
            Map.Entry&amp;lt;?,?&amp;gt; e = (Map.Entry&amp;lt;?,?&amp;gt;)o;
            if (Objects.equals(key, e.getKey()) &amp;amp;&amp;amp;
                Objects.equals(value, e.getValue()))
                return true;
        }
        return false;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;put源码解析&quot;&gt;put源码解析&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/80/58e67eae921e4b431782c07444af824e_hd.png&quot; data-rawwidth=&quot;1716&quot; data-rawheight=&quot;1360&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1716&quot; data-original=&quot;https://pic3.zhimg.com/58e67eae921e4b431782c07444af824e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/58e67eae921e4b431782c07444af824e_b.png&quot;/&gt;&lt;/p&gt;

&lt;ol readability=&quot;6&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，转向③；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;resize-扩容&quot;&gt;Resize 扩容&lt;/h2&gt;
&lt;p&gt;扩容(resize)就是重新计算容量，向HashMap对象里不停的添加元素，而HashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。当然Java里的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组，就像我们用一个小桶装水，如果想装更多的水，就得换大水桶。&lt;/p&gt;
&lt;p&gt;我们分析下resize的源码，鉴于JDK1.8融入了红黑树，较复杂，为了便于理解我们仍然使用JDK1.7的代码，好理解一些，本质上区别不大，具体区别后文再说。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; 1 void resize(int newCapacity) {   //传入新的容量
 2     Entry[] oldTable = table;    //引用扩容前的Entry数组
 3     int oldCapacity = oldTable.length;         
 4     if (oldCapacity == MAXIMUM_CAPACITY) {  //扩容前的数组大小如果已经达到最大(2^30)了
 5         threshold = Integer.MAX_VALUE; //修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了
 6         return;
 7     }
 8  
 9     Entry[] newTable = new Entry[newCapacity];  //初始化一个新的Entry数组
10     transfer(newTable);                         //！！将数据转移到新的Entry数组里
11     table = newTable;                           //HashMap的table属性引用新的Entry数组
12     threshold = (int)(newCapacity * loadFactor);//修改阈值
13 }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里就是使用一个容量更大的数组来代替已有的容量小的数组，transfer()方法将原有Entry数组的元素拷贝到新的Entry数组里。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; 1 void transfer(Entry[] newTable) {
 2     Entry[] src = table;                   //src引用了旧的Entry数组
 3     int newCapacity = newTable.length;
 4     for (int j = 0; j &amp;lt; src.length; j++) { //遍历旧的Entry数组
 5         Entry&amp;lt;K,V&amp;gt; e = src[j];             //取得旧Entry数组的每个元素
 6         if (e != null) {
 7             src[j] = null;//释放旧Entry数组的对象引用（for循环后，旧的Entry数组不再引用任何对象）
 8             do {
 9                 Entry&amp;lt;K,V&amp;gt; next = e.next;
10                 int i = indexFor(e.hash, newCapacity); //！！重新计算每个元素在数组中的位置
11                 e.next = newTable[i]; //标记[1]
12                 newTable[i] = e;      //将元素放在数组上
13                 e = next;             //访问下一个Entry链上的元素
14             } while (e != null);
15         }
16     }
17 }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;newTable[i]的引用赋给了e.next，也就是使用了单链表的头插入方式，同一位置上新元素总会被放在链表的头部位置；这样先放在一个索引上的元素终会被放到Entry链的尾部(如果发生了hash冲突的话），这一点和Jdk1.8有区别，下文详解。在旧数组中同一条Entry链上的元素，通过重新计算索引位置后，有可能被放到了新数组的不同位置上。&lt;/p&gt;
&lt;p&gt;下面举个例子说明下扩容过程。假设了我们的hash算法就是简单的用key mod 一下表的大小（也就是数组的长度）。其中的哈希桶数组table的size=2， 所以key = 3、7、5，put顺序依次为 5、7、3。在mod 2以后都冲突在table[1]这里了。这里假设负载因子 loadFactor=1，即当键值对的实际大小size 大于 table的实际大小时进行扩容。接下来的三个步骤是哈希桶数组 resize成4，然后所有的Node重新rehash的过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/e5aa99e811d1814e010afa7779b759d4_hd.png&quot; data-rawwidth=&quot;1334&quot; data-rawheight=&quot;926&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1334&quot; data-original=&quot;https://pic1.zhimg.com/e5aa99e811d1814e010afa7779b759d4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/e5aa99e811d1814e010afa7779b759d4_b.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;jdk1.8-做的优化&quot;&gt;jdk1.8 做的优化&lt;/h3&gt;
&lt;p&gt;下面我们讲解下JDK1.8做了哪些优化。经过观测可以发现，我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。看下图可以明白这句话的意思，n为table的长度，图（a）表示扩容前的key1和key2两种key确定索引位置的示例，图（b）表示扩容后key1和key2两种key确定索引位置的示例，其中hash1是key1对应的哈希与高位运算结果。&lt;br/&gt;&lt;img src=&quot;https://pic2.zhimg.com/80/a285d9b2da279a18b052fe5eed69afe9_hd.png&quot; data-rawwidth=&quot;1632&quot; data-rawheight=&quot;446&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1632&quot; data-original=&quot;https://pic2.zhimg.com/a285d9b2da279a18b052fe5eed69afe9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/a285d9b2da279a18b052fe5eed69afe9_b.png&quot;/&gt;&lt;br/&gt;元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：&lt;br/&gt;&lt;img src=&quot;https://pic2.zhimg.com/80/b2cb057773e3d67976c535d6ef547d51_hd.png&quot; data-rawwidth=&quot;1064&quot; data-rawheight=&quot;202&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1064&quot; data-original=&quot;https://pic2.zhimg.com/b2cb057773e3d67976c535d6ef547d51_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/b2cb057773e3d67976c535d6ef547d51_b.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;length-设计成2倍的好处&quot;&gt;length 设计成2倍的好处&lt;/h2&gt;
&lt;p&gt;这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;一方面 indexFor 寻找的时候，&lt;code&gt;h &amp;amp; (length-1)&lt;/code&gt; 比 取余运算&lt;code&gt;%&lt;/code&gt;快很多&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;static int indexFor(int h, int length) {  //jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的
     return h &amp;amp; (length-1);  //第三步 取模运算
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;另一方面， 设计成2的幂次，有利于resize时候，链表移动时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;hashmap-多线程操作导致死循环问题&quot;&gt;HashMap 多线程操作导致死循环问题&lt;/h2&gt;
&lt;p&gt;在多线程下，进行 put 操作会导致 HashMap 死循环，原因在于 HashMap 的扩容 resize()方法。由于扩容是新建一个数组，复制原数据到数组。由于数组下标挂有链表，所以需要复制链表，但是多线程操作有可能导致环形链表。复制链表过程如下:&lt;br/&gt;以下模拟2个线程同时扩容。假设，当前 HashMap 的空间为2（临界值为1），hashcode 分别为 0 和 1，在散列地址 0 处有元素 A 和 B，这时候要添加元素 C，C 经过 hash 运算，得到散列地址为 1，这时候由于超过了临界值，空间不够，需要调用 resize 方法进行扩容，那么在多线程条件下，会出现条件竞争，模拟过程如下：&lt;/p&gt;
&lt;p&gt;线程一：读取到当前的 HashMap 情况，在准备扩容时，线程二介入&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/e4cec65883d9fdc24effba57dcfa5241/xmlnote/41aed567e3419e1314bfbf689e3255a2/192&quot;/&gt;&lt;/p&gt;
&lt;p&gt;线程二：读取 HashMap，进行扩容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/e4cec65883d9fdc24effba57dcfa5241/xmlnote/f44624419c0a49686fb12aa37527ee65/191&quot;/&gt;&lt;/p&gt;
&lt;p&gt;线程一：继续执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/e4cec65883d9fdc24effba57dcfa5241/xmlnote/79424b2bf4a89902a9e85c64600268e4/193&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个过程为，先将 A 复制到新的 hash 表中，然后接着复制 B 到链头（A 的前边：B.next=A），本来 B.next=null，到此也就结束了（跟线程二一样的过程），但是，由于线程二扩容的原因，将 B.next=A，所以，这里继续复制A，让 A.next=B，由此，环形链表出现：B.next=A; A.next=B&lt;/p&gt;
&lt;h2 id=&quot;hashmap常用方法测试&quot;&gt;HashMap常用方法测试&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package map;

import java.util.Collection;
import java.util.HashMap;
import java.util.Set;

public class HashMapDemo {

    public static void main(String[] args) {
        HashMap&amp;lt;String, String&amp;gt; map = new HashMap&amp;lt;String, String&amp;gt;();
        // 键不能重复，值可以重复
        map.put(&quot;san&quot;, &quot;张三&quot;);
        map.put(&quot;si&quot;, &quot;李四&quot;);
        map.put(&quot;wu&quot;, &quot;王五&quot;);
        map.put(&quot;wang&quot;, &quot;老王&quot;);
        map.put(&quot;wang&quot;, &quot;老王2&quot;);// 老王被覆盖
        map.put(&quot;lao&quot;, &quot;老王&quot;);
        System.out.println(&quot;-------直接输出hashmap:-------&quot;);
        System.out.println(map);
        /**
         * 遍历HashMap
         */
        // 1.获取Map中的所有键
        System.out.println(&quot;-------foreach获取Map中所有的键:------&quot;);
        Set&amp;lt;String&amp;gt; keys = map.keySet();
        for (String key : keys) {
            System.out.print(key+&quot;  &quot;);
        }
        System.out.println();//换行
        // 2.获取Map中所有值
        System.out.println(&quot;-------foreach获取Map中所有的值:------&quot;);
        Collection&amp;lt;String&amp;gt; values = map.values();
        for (String value : values) {
            System.out.print(value+&quot;  &quot;);
        }
        System.out.println();//换行
        // 3.得到key的值的同时得到key所对应的值
        System.out.println(&quot;-------得到key的值的同时得到key所对应的值:-------&quot;);
        Set&amp;lt;String&amp;gt; keys2 = map.keySet();
        for (String key : keys2) {
            System.out.print(key + &quot;：&quot; + map.get(key)+&quot;   &quot;);

        }
        /**
         * 另外一种不常用的遍历方式
         */
        // 当我调用put(key,value)方法的时候，首先会把key和value封装到
        // Entry这个静态内部类对象中，把Entry对象再添加到数组中，所以我们想获取
        // map中的所有键值对，我们只要获取数组中的所有Entry对象，接下来
        // 调用Entry对象中的getKey()和getValue()方法就能获取键值对了
        Set&amp;lt;java.util.Map.Entry&amp;lt;String, String&amp;gt;&amp;gt; entrys = map.entrySet();
        for (java.util.Map.Entry&amp;lt;String, String&amp;gt; entry : entrys) {
            System.out.println(entry.getKey() + &quot;--&quot; + entry.getValue());
        }
        
        /**
         * HashMap其他常用方法
         */
        System.out.println(&quot;after map.size()：&quot;+map.size());
        System.out.println(&quot;after map.isEmpty()：&quot;+map.isEmpty());
        System.out.println(map.remove(&quot;san&quot;));
        System.out.println(&quot;after map.remove()：&quot;+map);
        System.out.println(&quot;after map.get(si)：&quot;+map.get(&quot;si&quot;));
        System.out.println(&quot;after map.containsKey(si)：&quot;+map.containsKey(&quot;si&quot;));
        System.out.println(&quot;after containsValue(李四)：&quot;+map.containsValue(&quot;李四&quot;));
        System.out.println(map.replace(&quot;si&quot;, &quot;李四2&quot;));
        System.out.println(&quot;after map.replace(si, 李四2):&quot;+map);
    }

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;参考文章&quot;&gt;参考文章&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21673805&quot;&gt;Java 8系列之重新认识HashMap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/v123411739/article/details/78996181&quot;&gt;Java集合：HashMap详解（JDK 1.8）&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 08 Feb 2019 04:16:00 +0000</pubDate>
<dc:creator>Draymonder</dc:creator>
<og:description>HashMap 介绍 HashMap 是一个散列表，它存储的内容是键值对(key value)映射。 HashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.S</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Draymonder/p/10356043.html</dc:identifier>
</item>
<item>
<title>死锁概念以及预防解决方法简介 多线程上篇（八） - noteless</title>
<link>http://www.cnblogs.com/noteless/p/10354664.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/noteless/p/10354664.html</guid>
<description>&lt;p&gt;&lt;span&gt;在前面不止一次的提到过死锁。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;所谓死锁(Deadlock)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;是指多个进程在运行过程中因争夺资源而造成的一种僵局(DeadlyEmbrace)，当进程处于这种僵持状态时，若无外力作用，它们都将无法再向前推进。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;死锁的定义：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;集合中的每一个进程都在等待只能由本集合中的其他进程才能引发的事件，那么该组进程是死锁的。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;也就是说集合中的人需要等待本集合中的其他人来帮忙， 但是，可怕的是所有的人都是这状态。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;引起死锁的主要原因是：&lt;/span&gt;“&lt;span&gt;&lt;strong&gt;需要采用互斥方法访问的、不可以被抢占的资源&lt;/strong&gt;&lt;/span&gt;“。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为需要互斥，所以就产生了竞争，出现了竞争就会出现等待，但是资源又不可被抢占，所以可能会被别人一直占有，那么就可能无限的等待，这就形成了死锁。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;资源角度&lt;/span&gt;&lt;/h3&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122936156-868017946.png&quot;&gt;&lt;img title=&quot;image_5c5bb432_2778&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122936435-734688794.png&quot; alt=&quot;image_5c5bb432_2778&quot; width=&quot;696&quot; height=&quot;486&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;计算机资源可以从两个维度进行划分，重用性以及抢占性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不管是可重用资源还是消耗性资源，他们都不是可以任意请求的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;系统中可重用资源的个数相对来说比较固定，消耗性资源尽管是个数不固定，动态的，但是某瞬间也都是有个数的，所以也不是可以任意请求的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以不管是否可重用，只要有竞争访问，就可能出现死锁。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于不可抢占资源，一旦被请求了，如果不能够释放，那么别人就必须要等待。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可抢占资源即使被分配，仍旧可以被抢占，所以这类资源不会引起死锁。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;所以，从资源的角度看，只需要关注是否是可抢占资源，如果不可抢占，那么就有可能出现死锁。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;资源分配图&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;为了直观的分析死锁的情况，可以使用资源分配图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;是一种描述资源申请与分配关系的图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用圆圈表示进程，矩形表示资源；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;箭头表示资源的申请与释放，资源-&amp;gt;进程表示分配，进程-&amp;gt;资源表示资源申请。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图所示，表示P1获得了R1在等待R2，P2获得了R2 在等待R1&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122936668-971769228.png&quot;&gt;&lt;img title=&quot;image_5c5bb432_93c&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122936836-695945732.png&quot; alt=&quot;image_5c5bb432_93c&quot; width=&quot;311&quot; height=&quot;240&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;死锁产生情况&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;竞争不可抢占资源&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;P1                  P2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;wait(R1)         wait(R2)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;wait(R2)         wait(R1)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如上所示，进程P1和P2，一个先申请资源R1，一个先申请资源R2，一旦资源R1和R2同时被两个不同的进程获得，将会进入死锁状态。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果一个结束之后，另一个开始，那么就不会出现死锁。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122937004-617323160.png&quot;&gt;&lt;img title=&quot;image_5c5bb432_93c[1]&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122937166-89763054.png&quot; alt=&quot;image_5c5bb432_93c[1]&quot; width=&quot;311&quot; height=&quot;240&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;竞争可消耗资源&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;设有进程P1、P2、P3，有可消耗资源R1、R2、R3&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果如下顺序推进&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;28&quot;&gt;
&lt;p&gt;&lt;span&gt;P1:  send(p2, R1);    receive(p3, R3); &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;P2:  send(p3, R2);    receive(p1, R1); &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;P3:  send(p1, R3);    receive(p2, R2); &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图所示，每个进程都先生产资源给别人，然后才会等待别人的资源，每个人最终都能够获得资源&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122937320-104841706.png&quot;&gt;&lt;img title=&quot;image_5c5bb432_57dc&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122937471-703774564.png&quot; alt=&quot;image_5c5bb432_57dc&quot; width=&quot;255&quot; height=&quot;236&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果是&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;17&quot;&gt;
&lt;p&gt;&lt;span&gt;P1:  receive(p3, R3);     send(p2, R1);     &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;P2:  receive(p1, R1);     send(p3, R2);     &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;P3:  receive(p2, R2);     send(p1, R3);     &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;所有的人都在等待别人的资源，才会生产消息，形成了死锁。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122937667-1536615191.png&quot;&gt;&lt;img title=&quot;image_5c5bb432_6ca6&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122937998-879752477.png&quot; alt=&quot;image_5c5bb432_6ca6&quot; width=&quot;293&quot; height=&quot;301&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;进程推进顺序不当&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;下图中，横坐标为进程1，纵坐标为进程2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程1的活动过程有Request(R1)  Request(R2)   Release(R1)   Release(R2)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程2的活动过程有Request(R2)  Request(R1)   Release(R2)   Release(R1)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;显然，图中的阴影区域D，阴影区域的左下角表示进程1申请了资源R1，进程2申请了资源R2，如果此时进程1申请R2或者进程2申请R1或者两者都有，必然会发生死锁&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果避开这个区域，比如一个进程结束后另一个开始，1号曲线或者2号曲线，或者进程1释放了R1后，进程2才开始申请R2就不会进入死锁&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过这种活动顺序图，可以推测出来可能会出现死锁的时空区域。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122938561-1895736606.png&quot;&gt;&lt;img title=&quot;image_5c5bb432_56f8&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122938999-1741098281.png&quot; alt=&quot;image_5c5bb432_56f8&quot; width=&quot;589&quot; height=&quot;340&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;《计算机操作系统 第四版》 图3-14&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;死锁必要条件&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;前面从资源以及场景的角度分析了死锁，其根本也还是“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;需要采用互斥方法访问的、不可以被抢占的资源&lt;/strong&gt;&lt;/span&gt;”。 &lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122939246-1220947353.png&quot;&gt;&lt;img title=&quot;image_5c5bb432_5de3&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122939449-1297743919.png&quot; alt=&quot;image_5c5bb432_5de3&quot; width=&quot;648&quot; height=&quot;476&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;死锁形成有四大必要条件，也就是说如果死锁了必然存在这些。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果不互斥，大家都可以访问，就没可能死锁；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果没有请求和保持，比如一次性分配，如果分配不到等待别人使用后释放即可，保持和请求必然会导致“拿走了比人需要的，还等待别人”的场景；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果可以抢占，即使已经死锁，肯定会被打破；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果没有循环等待，终究会有一个进程会自己完成，完成后便会释放自己持有的资源，整个系统就会被激活。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以说，想要处理死锁，或者说避免死锁，关键点就是这几个条件，只要条件被打破，就不会存在继续死锁下去的可能。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;死锁解决方法&lt;/span&gt;&lt;/h3&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122939653-1062769075.png&quot;&gt;&lt;img title=&quot;image_5c5bb432_77ac&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207122939871-1767351371.png&quot; alt=&quot;image_5c5bb432_77ac&quot; width=&quot;816&quot; height=&quot;568&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;从预防-避免-检测-解除，对死锁的防范程度依次减弱，但是对应的资源的利用率依次提高，也就是并发程度依次变高。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;预防就像接种疫苗，可能你这辈子都不会接触到病毒。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;避免就是在可能出事情的地方，做一些保障处理，比如发现有些场合人员混乱，全是二手烟，那就不进房间了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;检测就好像是定期的体检，没问题继续生活，有什么小问题就去治疗一下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解除就是真的去看病了。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;预防死锁&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;预防就是事先前的准备，如同疫苗，死锁的预防通常就是增加限制，破坏必要条件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;破坏“请求和保持”&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所有的资源必须一次性分配，或者不分配，这样能够保障一个进程要么就等待，要么就可以获得全部的资源，而不会出现保持了资源，然后再去请求的可能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是很显然，资源利用率低，并发程度低&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如说有一个任务三个阶段，每个阶段一种资源，每个阶段十分钟，如果一次性分配的话，每个资源都会有二十分钟的闲置，极大地浪费。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这种方案可以进一步优化，分阶段处理，而不是一次性，还是刚才的示例，每个阶段仅仅申请该阶段的资源，使用完毕后，将资源释放，然后再去获取下一阶段的资源&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;也就是说需要合理的划分阶段，一个完整任务中的一个子任务（也就是一个阶段）一次性分配资源，使用完毕后释放，再去请求，就不存在保持请求了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;破坏“不可抢占”&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果资源是可抢占的，自然就不会死锁，终究会自动解锁，如果能够合理的将不可抢占资源转换为“可抢占”那么就可以预防死锁&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当一个进程持有了某些资源后，如果又提出了新的请求，如果该请求并不能满足，那么他必须释放已有的资源，也就可以说是被抢占了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不过这个思路实现复杂，可能会付出很大的代价，比如打印机开始处理了，你现在要切换，肯定不会很容易。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;破坏“循环等待”&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将资源按照一定的顺序进行申请，可以保证资源的有序性，也就可以破坏循环等待，正是因为资源的顺序很随意，所以才导致很容易死锁&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如所有的进程全部都是R1然后R2，就永运不会死锁&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以可以采取对系统内资源编号的形式，所有的资源申请必须是从小到大的顺序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如此，就肯定不会循环成环。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是，号码如何编？到底谁大谁小？要统计下平时资源的申请顺序进行编号&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后如果新增加设备？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另外如果有些进程就是跟系统的排序不同怎么办？&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;避免死锁&lt;/span&gt;&lt;/h4&gt;
&lt;div readability=&quot;18&quot;&gt;
&lt;p&gt;&lt;span&gt;在死锁避免方法中，把系统的状态分为安全状态和不安全状态。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;安全状态就是可以找到资源分配的有序序列， 各进程可以顺利推进完成。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不安全状态如果找不到一个合理的资源分配的有序序列，不能保障各进程可以顺利完成，那么就是不安全。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当系统处于安全状态时，可避免发生死锁。反之，当系统处于不安全状态时，则可能进入到死锁状态。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;简言之，避免死锁就是在资源分配时，借助于算法对资源分配进行计算评估，相当于风险评估机构。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;经典的算法有Dijkstra提出的银行家算法&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;死锁检测&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;死锁的检测也是借助于算法进行处理，想要检测死锁&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先，系统中必须能够记录资源的请求和分配记录，其次需要提供一种算法，通过对请求和分配记录进行分析，计算出当前的状态。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;死锁解除&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;如果检测出死锁，那么必须进行解除，常用的解除方式有两种，抢占资源和终止进程，本质都是强行将资源夺回到系统中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;终止进程的话最简单的就是全部终止，将涉及的死锁进程全部都终止掉，显然全部终止就好像将一台工作中的电脑强行重启一样，代价很大&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以还可以逐个终止，直到死锁解除。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;本文对操作系统中死锁的概念进行了简单的介绍，不仅仅进程有死锁，线程的运行仍旧也会有死锁。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;多线程编程中也会出现死锁，在这些场景中，死锁的概念是相同的---都是同一个集合中的线程都在等待本集合中的线程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于操作系统对死锁的处理与解决，对于编程中不无借鉴之处，我们应该深刻理解死锁形成的条件，才能够在编程中尽可能的避免死锁。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 08 Feb 2019 02:12:00 +0000</pubDate>
<dc:creator>noteless</dc:creator>
<og:description>死锁是并发（多线程、多进程）必然出现的一个问题，也是必须要面对的一个问题，可以认为是并发（并行）的一个副作用，如果没有并发则不会出现死锁，但是并发是必然，所以也必须要解决死锁问题，本文对死锁进行了介绍</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/noteless/p/10354664.html</dc:identifier>
</item>
<item>
<title>.NET和Java之争 - 叶伟民</title>
<link>http://www.cnblogs.com/adalovelacer/p/dotnet-vs-java.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/adalovelacer/p/dotnet-vs-java.html</guid>
<description>&lt;p&gt;这几天连续有多篇文章诋毁.NET，这类文章我十几年前就看得多了，只不过十几年前是C和C++之争，C++和Java之争。我从来不理这类文章，因为这类口水战并没有什么实际意义。&lt;/p&gt;

&lt;p&gt;然而接连收到多位粉丝私聊说，主席，你应该写点什么反击了。我才醒悟过来，为了自己，我可以不用理会这些文章，但是为了社区，我必须写点东西。&lt;/p&gt;

&lt;div readability=&quot;8.8590604026846&quot;&gt;首先，必须声明一点，我在《&lt;a href=&quot;https://www.cnblogs.com/adalovelacer/p/what-difference-between-guang-zhou-dot-net-club-and-other-technolgoy-group.html&quot; target=&quot;_blank&quot;&gt;广州.NET微软技术俱乐部与其他技术群的区别&lt;/a&gt;》说得很清楚，“本群坚决禁止讨论“JAVA和.NET哪个好”、“NET有没有前途”等问题，请把讨论这些问题的时间用来研究如何提高自身.NET技术水平上。”&lt;/div&gt;
&lt;p&gt;所以，这篇文章将会是唯一一次也是最后一次讨论.NET和Java之争。&lt;/p&gt;

&lt;p&gt;然后，这篇文章的阅读对象是有上进心、好学但是又在迷茫中的.NET粉丝。&lt;/p&gt;
&lt;p&gt;这些粉丝的心态我懂，我读书的时候，身边很多人跟我讲，读书没有用，读书并不能赚大钱，很多赚大钱的人都是小学毕业。&lt;/p&gt;
&lt;p&gt;那时候我的心态就和这些粉丝心态是一样的。&lt;/p&gt;
&lt;p&gt;幸亏后来家族里的长辈点醒我，他只说了四点：&lt;/p&gt;
&lt;ol readability=&quot;5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;福布斯500富豪榜里面，绝大部分都是大学毕业，所以读书无用论这种论点根本经不起推敲。纯粹是这些人为自己辩护找的借口。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;即使是小学未毕业的爱迪生，和因为贫穷只读了三年书的林肯，大家尊敬他们并不是因为他们读书少，而是因为他们的成就和贡献，并且他们都很尊敬文化人，所以读书无用论是本末倒置。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;建立了党和国家财政体系（包括长征和解放军后勤、建立商务部和广交会）的叶季壮将军，就是个文化人，新中国暂时还没有哪个小学文化的富豪创造的财富比他创造的财富多，所以读书无用论和读书不能致富就是扯淡。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;读书无用论是使用小学课文《田忌赛马》里的手法，用小学毕业里的上等马去和大学毕业里的下等马去比，那当然是小学毕业里的上等马胜出啦，正确的比法应该是用小学毕业里的上等马去和大学毕业里的上等马去比。我当时已经是高中文化了，怎么还会中这种这么低级的招数呢？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;因此我走出了迷茫，最终考上了大学。十年之后，当我在硅谷上空开飞机的时候，我才发现当年相信读书无用论的同学们不但没开过飞机，甚至连汽车都没有开过（当然现在又过了十年，中国经济发展起来了，绝大部分同学都开上汽车了）。&lt;/p&gt;

&lt;p&gt;所以这些迷茫中的.NET粉丝的心态我很懂，不就是当年读书无用论的翻版嘛。&lt;/p&gt;
&lt;p&gt;所以诋毁.NET的文章我不关心，我只关心我们这些会被这些文章坑害的粉丝们。我也说几点吧：&lt;/p&gt;
&lt;ol readability=&quot;10.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;我2003年就开始用Java里的J2ME做出一个西门子M55手机程序。目前我同时使用Java、.NET(C#)、Python、Typescript四种语言和技术。所以我并没有说Java不好，我只是认为.NET也不差。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;这些诋毁.NET文章的作者，并没有做过什么实际上的贡献（比如参与开源项目或者写技术文章），和鼓吹读书无用论的是同一类人，纯粹是这些人为自己辩护找的借口。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;这些诋毁.NET文章的手法，是使用小学课文《田忌赛马》里的手法，用Java里的上等马去和.NET里的下等马去比，那当然是Java胜出啦，嗯，这些人好像并不知道.NET Core这匹.NET体系里的上等马吧。绝大部分粉丝的文化程度都比小学文化高多了，怎么还会中这种这么低级的招数呢？&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;目前流行的网游，比如王者荣耀，是使用.NET平台，这说明了.NET并不差。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;最近我在整理叶季壮将军的史料过程中，发现在OCR这一块，Java就比不上.NET。在github搜OCR，按照Most Stars排序，你会发现第一页有两个C#的OCR库，而没有Java的OCR库。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;当然在某些领域，Java是比.NET强，比如工作流这一块，我自己目前就是用Java的Activiti, 但是Java是可以和.NET共存的啊，特别是在微服务的年代，早就已经是语言无关了。多种语言和框架都可以共存。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;这些诋毁.NET文章没有举出任何一个.NET不好的实例，而我在前面就举了三个实例，真的是造谣张张嘴，辟谣跑断腿啊。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后单独说一下大家最关心的问题，就是Java程序员工资比.NET程序员高。&lt;/p&gt;
&lt;p&gt;这种手法比小学课文《田忌赛马》里的手法高明点，然而很容易识破啊。&lt;/p&gt;
&lt;p&gt;这种手法的另一个例子是：我和中国前五个富人的财富一平均，我也是亿万富翁。&lt;/p&gt;
&lt;p&gt;See！ 这种手法很清晰了吧，“Java程序员工资比.NET程序员高”没有任何意义，重点是“你做Java程序员工资会不会比做.NET程序员工资高”，这才有讨论的意义。&lt;/p&gt;
&lt;p&gt;我的经验告诉我：&lt;/p&gt;
&lt;ol readability=&quot;3&quot;&gt;&lt;li&gt;.NET转Java是需要付出成本的，如果你不会.NET里的IOC、设计模式、DDD、TDD、BDD，那么你转Java，你一样还是需要付出海量的时间去学会这些东西。&lt;/li&gt;
&lt;li&gt;只学会一种语言而不学它的框架和库是什么都干不了的。光学Java是没有生产力的，你至少要学习SSM三大框架，做点有规模的项目还要学Spring Security， Activiti, Drools等等。这都是要花不少时间的，同样的时间用来学好.NET Core提高生产力岂非更好？&lt;/li&gt;
&lt;li&gt;你付出成本转成Java之后，收益不一定比原来.NET的高。因为除了公司内部转Java保证了你的工资待遇外，换一个公司求职你就变成了一个0年工作经验的Java新手，这在一些非算法取胜的公司里是很吃亏的，最终工资未必比你原来.NET的薪水高，毕竟你在.NET是按有经验的工资去付的。目前能够成功从.NET转JAVA的成功案例大部分都是公司内部转，保证了你的工资待遇。&lt;/li&gt;
&lt;li&gt;.NET Core正在崛起，微软重回市值第一，你花了时间转Java之后会不会错过这个时机呢？&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;不管你是用Java还是用.NET，只要能把事情做好了，就能拿高工资，如果老板不肯给你高工资，那你就换一家公司。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;要通过把事情做好来拿到高工资，你很可能需要同时使用.NET和Java, 比如现在的我，工作流用Java，前端用TypeScript，数据采集和分析用Python，其他用C#/.NET Core.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;如果抱着.NET垃圾的想法，那么当项目需要使用OCR、网游或者其他.NET擅长领域的时候，你因为不喜欢.NET而不去用.NET，从而没有把事情做好，那你可能会被降工资。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt; 这个世界上，大概率是做实事的人会等到尊重，比如王安电脑的王安，当年排名全球第5富（目前还没有其他亚洲人能做到这点），美国人并没有因为他是华人而鄙视和打压他，反而很尊重他，被选为全美最杰出的12位移民之一，接受了里根总统颁发的“总统自由奖章”。王安卖电脑就没有打什么民族牌、爱国牌。所以还是少点空谈，多干点实事吧。&lt;/p&gt;

&lt;div readability=&quot;8.14696485623&quot;&gt;写这篇文章总计花费58分钟，这个时间比我做&quot;&lt;a href=&quot;https://github.com/weiminye/ChinaDotNetClubPortal&quot; target=&quot;_blank&quot;&gt;.NET俱乐部联盟官网&lt;/a&gt;&quot;里一个PBI和写“&lt;a href=&quot;https://www.cnblogs.com/adalovelacer/p/abp-big-project-1.html&quot; target=&quot;_blank&quot;&gt;ABP大型项目实战(1) - 目录&lt;/a&gt;”这篇技术文章耗时还多。所以这篇文章将会是唯一一次也是最后一次讨论.NET和Java之争，有多余的空闲时间还是用来做点实事吧。&lt;/div&gt;

&lt;p&gt;我依旧坚持群规：“本群坚决禁止讨论“JAVA和.NET哪个好”、“NET有没有前途”等问题，请把讨论这些问题的时间用来研究如何提高自身.NET技术水平上。谁先挑起这个话题被警告三次后就请出群，目前已经有多位人士被请出群了，请合作，谢谢。”&lt;/p&gt;
</description>
<pubDate>Thu, 07 Feb 2019 17:44:00 +0000</pubDate>
<dc:creator>叶伟民</dc:creator>
<og:description>这几天连续有多篇文章诋毁.NET。此文举出多个实例来证明.NET并不差。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/adalovelacer/p/dotnet-vs-java.html</dc:identifier>
</item>
<item>
<title>前端开发掌握nginx常用功能之rewrite - wonyun</title>
<link>http://www.cnblogs.com/wonyun/p/10355574.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wonyun/p/10355574.html</guid>
<description>&lt;p&gt;上一篇博文对nginx最常用功能的server及location的匹配规则进行了讲解，这也是nginx实现控制访问和反向代理的基础。掌握请求的匹配规则算是对nginx有了入门，但是这些往往还是不能满足实际的需求场景，例如请求url重写、重定向等等，这都需要对请求的&lt;code&gt;path&lt;/code&gt;进行修改操作的，匹配规则是不能独自完成实际需求的，这就需要掌握nginx的另一个常用功能rewrite，下面就来说说这个常用功能。&lt;/p&gt;
&lt;h2 id=&quot;rewrite规则&quot;&gt;Rewrite规则&lt;/h2&gt;
&lt;p&gt;rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。&lt;br/&gt;rewrite只能放在&lt;code&gt;server{}&lt;/code&gt;, &lt;code&gt;location{}&lt;/code&gt;, &lt;code&gt;if{}&lt;/code&gt; 中，并且只能对域名后边传递的参数外的字符串起作用，例如 &lt;a href=&quot;http://baidu.com/a/we/index.php?id=1&amp;amp;u=str&quot; class=&quot;uri&quot;&gt;http://baidu.com/a/we/index.php?id=1&amp;amp;u=str&lt;/a&gt; 只对/a/we/index.php重写。语法：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;rewrite regex replacement [flag];&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。&lt;/p&gt;
&lt;p&gt;表面上看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;执行server块的rewrite指令&lt;/li&gt;
&lt;li&gt;执行location匹配&lt;/li&gt;
&lt;li&gt;执行选定的location中的rewrite指令&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；&lt;strong&gt;循环超过10次，则返回500 Internal Server Error错误。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;flag标志位&quot;&gt;2.1 flag标志位&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;last&lt;/code&gt; : 停止执行当前&lt;code&gt;ngx_http_rewrite_module&lt;/code&gt;的指令集，但是会继续走一遍请求匹配对应server或者location；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt; : 停止执行当前&lt;code&gt;ngx_http_rewrite_module&lt;/code&gt;的指令集，请求就此完成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redirect&lt;/code&gt; : 返回302临时重定向，地址栏会显示跳转后的地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;permanent&lt;/code&gt; : 返回301永久重定向，地址栏会显示跳转后的地址&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。&lt;/p&gt;
&lt;p&gt;对于上面的flag，有几点需要强调一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;last&lt;/code&gt;与&lt;code&gt;break&lt;/code&gt;对url的重写不会改变地址栏的地址&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;也就是说，nginx虽然对请求url进行了重写，但是地址栏不会有任何明显的改变，仍然显示nginx重写前的地址；这与&lt;code&gt;redirect&lt;/code&gt;和&lt;code&gt;permanent&lt;/code&gt;不同。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;last&lt;/code&gt;与&lt;code&gt;break&lt;/code&gt;的处理策略不同&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;二者都会终止当前&lt;code&gt;ngx_http_rewrite_module&lt;/code&gt;的指令集的执行，但是 &lt;code&gt;last&lt;/code&gt; 立即发起新一轮的 请求匹配 而 &lt;code&gt;break&lt;/code&gt; 则不会。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;redirect&lt;/code&gt;和&lt;code&gt;permanent&lt;/code&gt;会终止后续nginx指令的执行&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;nginx在rewrite遇到flag是二者时，后续的指令是不会执行的。&lt;/p&gt;
&lt;pre class=&quot;nginx&quot;&gt;
&lt;code&gt;server {
    listen 8080;
    location = /test {
        break;
        return 200 $request_uri;
        proxy_pass http://127.0.0.1:8080/other;
    }
    location / {
        return 200 $request_uri;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面例子中，我们访问 &lt;strong&gt;curl 127.0.0.1:8080/test&lt;/strong&gt;，会发现，&lt;strong&gt;return 200 $request_uri&lt;/strong&gt;语句没有执行，而&lt;code&gt;proxy_pass&lt;/code&gt;指令被执行了。这是因为：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;code&gt;return&lt;/code&gt;指令属于ngx_http_proxy_module模块，它会被break终止掉；而rewrite模块它是ngx_http_proxy_module的指令，不会被&lt;code&gt;break&lt;/code&gt;给中断掉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;if指令与全局变量&quot;&gt;2.2 if指令与全局变量&lt;/h3&gt;
&lt;p&gt;if判断指令&lt;br/&gt;语法为&lt;code&gt;if(condition){...}&lt;/code&gt; ，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false&lt;/li&gt;
&lt;li&gt;直接比较变量和内容时，使用&lt;code&gt;=&lt;/code&gt;或&lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt;正则表达式匹配，&lt;code&gt;~*&lt;/code&gt;不区分大小写的匹配，&lt;code&gt;!~&lt;/code&gt;区分大小写的不匹配&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;-f&lt;/code&gt;和&lt;code&gt;!-f&lt;/code&gt;用来判断是否存在文件&lt;br/&gt;&lt;code&gt;-d&lt;/code&gt;和&lt;code&gt;!-d&lt;/code&gt;用来判断是否存在目录&lt;br/&gt;&lt;code&gt;-e&lt;/code&gt;和&lt;code&gt;!-e&lt;/code&gt;用来判断是否存在文件或目录&lt;br/&gt;&lt;code&gt;-x&lt;/code&gt;和&lt;code&gt;!-x&lt;/code&gt;用来判断文件是否可执行&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre class=&quot;ngnix&quot;&gt;
&lt;code&gt;if ($http_user_agent ~ MSIE) {
    rewrite ^(.*)$ /msie/$1 break;
} //如果UA包含&quot;MSIE&quot;，rewrite请求到/msid/目录下

if ($http_cookie ~* &quot;id=([^;]+)(?:;|$)&quot;) {
    set $id $1;
 } //如果cookie匹配正则，设置变量$id等于正则引用部分

if ($request_method = POST) {
    return 405;
} //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302

if ($slow) {
    limit_rate 10k;
} //限速，$slow可以通过 set 指令设置

if (!-f $request_filename){
    break;
    proxy_pass  http://127.0.0.1;
} //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查

if ($args ~ post=140){
    rewrite ^ http://example.com/ permanent;
} //如果query string中包含&quot;post=140&quot;，永久重定向到example.com

location ~* \.(gif|jpg|png|swf|flv)$ {
    valid_referers none blocked www.jefflei.com www.leizhenfang.com;
    if ($invalid_referer) {
        return 404;
    } //防盗链
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;全局变量&quot;&gt;全局变量&lt;/h4&gt;
&lt;p&gt;下面是可以用作if判断的全局变量:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;$args&lt;/code&gt; ： #这个变量等于请求行中的参数，同$query_string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$content_length&lt;/code&gt; ： 请求头中的Content-length字段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$content_type&lt;/code&gt; ： 请求头中的Content-Type字段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$document_root&lt;/code&gt; ： 当前请求在root指令中指定的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$host&lt;/code&gt; ： 请求主机头字段，否则为服务器名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$http_user_agent&lt;/code&gt; ： 客户端agent信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$http_cookie&lt;/code&gt; ： 客户端cookie信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$limit_rate&lt;/code&gt; ： 这个变量可以限制连接速率。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$request_method&lt;/code&gt; ： 客户端请求的动作，通常为GET或POST。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$remote_addr&lt;/code&gt; ： 客户端的IP地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$remote_port&lt;/code&gt; ： 客户端的端口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$remote_user&lt;/code&gt; ： 已经经过Auth Basic Module验证的用户名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$request_filename&lt;/code&gt; ： 当前请求的文件路径，由root或alias指令与URI请求生成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$scheme&lt;/code&gt; ： HTTP方法（如http，https）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$server_protocol&lt;/code&gt; ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$server_addr&lt;/code&gt; ： 服务器地址，在完成一次系统调用后可以确定这个值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$server_name&lt;/code&gt; ： 服务器名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$server_port&lt;/code&gt; ： 请求到达服务器的端口号。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$request_uri&lt;/code&gt; ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$uri&lt;/code&gt; ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$document_uri&lt;/code&gt; ： 与$uri相同。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;例：http://localhost:88/test1/test2/test.php
$host：localhost
$server_port：88
$request_uri：http://localhost:88/test1/test2/test.php
$document_uri：/test1/test2/test.php
$document_root：/var/www/html
$request_filename：/var/www/html/test1/test2/test.php
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;常用正则&quot;&gt;2.3 常用正则&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;.&lt;/code&gt; ： 匹配除换行符以外的任意字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; ： 重复0次或1次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; ： 重复1次或更多次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; ： 重复0次或更多次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\d&lt;/code&gt; ：匹配数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; ： 匹配字符串的开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; ： 匹配字符串的结束&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n}&lt;/code&gt; ： 重复n次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n,}&lt;/code&gt; ： 重复n次或更多次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[c]&lt;/code&gt; ： 匹配单个字符c&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-z]&lt;/code&gt; ： 匹配a-z小写字母的任意一个&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;小括号&lt;code&gt;()&lt;/code&gt;之间匹配的内容，可以在后面通过&lt;code&gt;$1&lt;/code&gt;来引用，&lt;code&gt;$2&lt;/code&gt;表示的是前面第二个()里的内容。正则里面容易让人困惑的是&lt;code&gt;\&lt;/code&gt;转义特殊字符。&lt;/p&gt;
&lt;h3 id=&quot;rewrite实例&quot;&gt;2.4 rewrite实例&lt;/h3&gt;
&lt;p&gt;例1：&lt;/p&gt;
&lt;pre class=&quot;nginx&quot;&gt;
&lt;code&gt;http {
    # 定义image日志格式
    log_format imagelog '[$time_local] ' $image_file ' ' $image_type ' ' $body_bytes_sent ' ' $status;
    # 开启重写日志
    rewrite_log on;

    server {
        root /home/www;

        location / {
                # 重写规则信息
                error_log logs/rewrite.log notice;
                # 注意这里要用‘’单引号引起来，避免{}
                rewrite '^/images/([a-z]{2})/([a-z0-9]{5})/(.*)\.(png|jpg|gif)$' /data?file=$3.$4;
                # 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行
                set $image_file $3;
                set $image_type $4;
        }

        location /data {
                # 指定针对图片的日志格式，来分析图片类型和大小
                access_log logs/images.log mian;
                root /data/images;
                # 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里
                try_files /$arg_file /image404.html;
        }
        location = /image404.html {
                # 图片不存在返回特定的信息
                return 404 &quot;image not found\n&quot;;
        }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对形如&lt;code&gt;/images/ef/uh7b3/test.png&lt;/code&gt;的请求，重写到&lt;code&gt;/data?file=test.png&lt;/code&gt;，于是匹配到&lt;code&gt;location /data&lt;/code&gt;，先看&lt;code&gt;/data/images/test.png&lt;/code&gt;文件存不存在，如果存在则正常响应，如果不存在则重写tryfiles到新的image404 location，直接返回404状态码。&lt;/p&gt;
&lt;p&gt;例2：&lt;/p&gt;
&lt;pre class=&quot;nginx&quot;&gt;
&lt;code&gt;rewrite ^/images/(.*)_(\d+)x(\d+)\.(png|jpg|gif)$ /resizer/$1.$4?width=$2&amp;amp;height=$3? last;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对形如&lt;code&gt;/images/bla_500x400.jpg&lt;/code&gt;的文件请求，重写到&lt;code&gt;/resizer/bla.jpg?width=500&amp;amp;height=400&lt;/code&gt;地址，并会继续尝试匹配location。&lt;/p&gt;
&lt;p&gt;例3：&lt;br/&gt;见 &lt;a href=&quot;http://seanlook.com/2015/05/28/nginx-ssl/&quot;&gt;ssl部分页面加密&lt;/a&gt; 。&lt;/p&gt;
&lt;h3 id=&quot;rewrite需要注意的问题&quot;&gt;2.5 rewrite需要注意的问题&lt;/h3&gt;
&lt;p&gt;上面说过，rewrite的指令规则为：&lt;code&gt;rewrite regex replacement [flag];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;rewrite指令用指定的regex来匹配请求的uri，若匹配成功则用replacement来重写请求uri。这里需要注意的replacement字符串的内容：&lt;/p&gt;
&lt;p&gt;1、 &lt;strong&gt;若replacement以&lt;code&gt;http://&lt;/code&gt;、&lt;code&gt;https://&lt;/code&gt;或者&lt;code&gt;$scheme&lt;/code&gt;开头，则告诉nginx这是重定向操作(flag默认为redirect)，nginx则停止处理后续内容，并直接重定向返回给客户端。&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;nginx&quot;&gt;
&lt;code&gt;location / {
    # 当匹配 正则表达式 /test/(.*)时 请求将被临时重定向到 http://www.baidu.com/$1
    # flag默认为redirect
    rewrite /test/(.*) https://www.baidu.com/$1;
    return 200 ’ok'; # 此处没有机会执行
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、&lt;strong&gt;replacement非以上三种情况开头，则就是简单的url重写&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;nginx&quot;&gt;
&lt;code&gt;location / {
    # 当匹配 正则表达式 /test/(.*)时 请求将被临时重定向到 www.baidu.com/$1
    # flag无值则rewrite会顺序执行
    rewrite /test/(.*) www.baidu.com/$1;
    return 200 ’ok'; # 此处因为rewrite顺序执行而得到执行机会
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于上面两种情况，还需要特别留意一个redirect端口的问题，先上一个例子：&lt;/p&gt;
&lt;pre class=&quot;nginx&quot;&gt;
&lt;code&gt;## server.com机器上nginx的配置如下：
server {
    listen 8000;
    location /test1/ {
    rewrite /test1/index.html http://server1.com/demo/test1 redirect;
    }
    location /test2/ {
    rewrite /test2/index.html /demo/test2 redirect;
        proxy_pass http://192.168.1.3:8000;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当访问&lt;strong&gt;&lt;a href=&quot;http://server.com/test1/index.html&quot; class=&quot;uri&quot;&gt;http://server.com/test1/index.html&lt;/a&gt;&lt;/strong&gt;时，会命中/test1的location规则，访问server1.com对应内容一直失败，发现重定向后响应头的&lt;code&gt;Location&lt;/code&gt;字段值为&lt;strong&gt;&lt;a href=&quot;http://server1.com:8000/demo/test1&quot; class=&quot;uri&quot;&gt;http://server1.com:8000/demo/test1&lt;/a&gt;&lt;/strong&gt;，带有8000端口，我们并没有配置，表现的比较诡异？&lt;/p&gt;
&lt;p&gt;访问&lt;strong&gt;&lt;a href=&quot;http://server.com/test2/index.html&quot; class=&quot;uri&quot;&gt;http://server.com/test2/index.html&lt;/a&gt;&lt;/strong&gt;时，命中/test2的location规则，同样访问失败，但是访问的重定向后响应头&lt;code&gt;Location&lt;/code&gt;字段值为&lt;strong&gt;&lt;a href=&quot;http://server.com:8000/demo/test2&quot; class=&quot;uri&quot;&gt;http://server.com:8000/demo/test2&lt;/a&gt;&lt;/strong&gt;，其带有server.com的server_name和8000的端口，更加诡异？&lt;/p&gt;
&lt;p&gt;看到上面的现象，疑惑重重；其实这跟nginx的&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#server_name_in_redirect&quot;&gt;&lt;code&gt;server_name_in_redirect&lt;/code&gt;&lt;/a&gt;和&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#port_in_redirect&quot;&gt;&lt;code&gt;port_in_redirect&lt;/code&gt;&lt;/a&gt;指令有关:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;在绝对路径中，&lt;code&gt;server_name_in_redirect&lt;/code&gt; 和&lt;code&gt;port_in_redirect&lt;/code&gt; 指令表示是否将server块中的 server_name 和 listen 的端口作为redirect用, 重定向的完整url地址根据&lt;code&gt;$scheme&lt;/code&gt;跟&lt;code&gt;server_name_in_redirect&lt;/code&gt;和&lt;code&gt;port_in_redirect&lt;/code&gt;来确定的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在绝对路径中，&lt;code&gt;server_name_in_redirect&lt;/code&gt;默认是禁用的，而&lt;code&gt;port_in_redirect&lt;/code&gt;是默认启用的。对于带有&lt;code&gt;$scheme&lt;/code&gt;重定向的绝对路径，nginx会从replacement中获取指定的server_name和port来进行重定向：&lt;/p&gt;
&lt;p&gt;第一种，若replacement带请求协议http(s)，而其中没有指定port的话，nginx会默认取当前server的listen端口作为重定向的端口。这是上面访问&lt;strong&gt;&lt;a href=&quot;http://server.com/test1/index.html&quot; class=&quot;uri&quot;&gt;http://server.com/test1/index.html&lt;/a&gt;&lt;/strong&gt;时重定向到&lt;strong&gt;&lt;a href=&quot;http://server.com:8000/demo/test2&quot; class=&quot;uri&quot;&gt;http://server.com:8000/demo/test2&lt;/a&gt;&lt;/strong&gt;时会携带8000的原因。&lt;/p&gt;
&lt;p&gt;第二种，若replacement不带请求协议http(s)，而是相对本地服务器的绝对地址的话，如上面访问&lt;strong&gt;&lt;a href=&quot;http://server.com/test2/index.html&quot; class=&quot;uri&quot;&gt;http://server.com/test2/index.html&lt;/a&gt;&lt;/strong&gt;的情况，此时&lt;code&gt;server_name_in_redirect&lt;/code&gt;由于禁用它会去请求的host来作为server_name，取当前server的listen端口作为重定向的端口，最终重定向到&lt;strong&gt;&lt;a href=&quot;http://server.com:8000/demo/test2&quot; class=&quot;uri&quot;&gt;http://server.com:8000/demo/test2&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;或许你会问，访问&lt;strong&gt;&lt;a href=&quot;http://server.com/test2/index.html&quot; class=&quot;uri&quot;&gt;http://server.com/test2/index.html&lt;/a&gt;&lt;/strong&gt;为什么不会重定向到&lt;strong&gt;&lt;a href=&quot;http://192.168.1.3:8000/demo/test2&quot; class=&quot;uri&quot;&gt;http://192.168.1.3:8000/demo/test2&lt;/a&gt;&lt;/strong&gt;上？这是因为rewrite的redirect flag会终止后续指令的执行，所以其后的&lt;code&gt;proxy_pass&lt;/code&gt;指令不会执行。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
</description>
<pubDate>Thu, 07 Feb 2019 16:28:00 +0000</pubDate>
<dc:creator>wonyun</dc:creator>
<og:description>上一篇博文对nginx最常用功能的server及location的匹配规则进行了讲解，这也是nginx实现控制访问和反向代理的基础。掌握请求的匹配规则算是对nginx有了入门，但是这些往往还是不能满足</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wonyun/p/10355574.html</dc:identifier>
</item>
<item>
<title>win10安装ubuntu16.04双系统 - Apple_Coco</title>
<link>http://www.cnblogs.com/SystemCall/p/10353426.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/SystemCall/p/10353426.html</guid>
<description>&lt;p&gt;前话：因为感兴趣吧也是专业需要，所以自学了U盘重装系统以及在win10的情况下安装Ubuntu16.04双系统。借此博客，记录下我安装Ubuntu的过程，方便日后回忆。&lt;/p&gt;
&lt;p&gt;正因如此，本篇博客会写的十分简略，如有不便请见谅。&lt;/p&gt;

&lt;p&gt;如果你是一位新手，推荐一位大神的博客。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.cnblogs.com/Duane/p/5424218.html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;补充知识点：关于磁盘使用GUID格式分区和MBR格式分区&lt;/h2&gt;
&lt;p&gt;当你使用DiskGenius分区工具快速分区时，会让你选择要哪一种分区格式，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1531199/201902/1531199-20190207211934422-793952938.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这两种分区类型有一个很重要的区别就是GUID对应电脑的UEFI启动模式，MBR对应的是Legacy启动模式。&lt;/p&gt;
&lt;p&gt;举一个栗子，如果你的系统盘（C盘）所在磁盘是GUID分区类型的，但是电脑的启动方式却又是Legacy，这样的话，当你启动电脑时，会出现Invalid Partition Table（无效分区表）。&lt;/p&gt;
&lt;p&gt;如果想要进入系统，必须将Legacy改为UEFI。&lt;/p&gt;

&lt;p&gt;在多次安装双系统失败后，我自己感觉出来一个规律：&lt;/p&gt;
&lt;p&gt;磁盘使用GUID分区类型，在安装双系统的时候会更加方便。而且安装成功后，会默认使用Ubuntu引导Windows，这样子就不需要使用easyBCD或者refind工具。&lt;/p&gt;

&lt;h2&gt;下面是我的安装Ubuntu的过程，在此之前我说一下我BIOS里的配置：&lt;/h2&gt;
&lt;p&gt;安全模式和快速启动要设置为disable，启动方式设置为 仅UEFI。U盘启动方式设置为enable&lt;/p&gt;

&lt;h2&gt;第一步：压缩出一块空闲的区域用于Ubuntu系统，原则上越大越好，推荐100GB以上&lt;/h2&gt;
&lt;p&gt;注意：该块区域所在磁盘的类型需为GUID类型&lt;/p&gt;
&lt;h2&gt;第二步：制作Ubuntu16.04的启动盘&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
链接：https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;pan.baidu.com/s/1WIepLY_os8m1puZBwDfyrA &lt;/span&gt;
提取码：1lnq 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;网盘里面是rufusU盘制作工具和Ubuntu镜像，制作启动盘的设置如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1531199/201902/1531199-20190207224118463-1805548407.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;开始确定确定即可（如果U盘里有重要资料，记着提前做好备份）&lt;/p&gt;
&lt;h2&gt; 第三步：安装Ubuntu&lt;/h2&gt;
&lt;p&gt;插上U盘，重启电脑，进入U盘启动盘。正常情况下便能看到install ubuntu的选项，选择该选项。&lt;/p&gt;
&lt;p&gt;在下图界面，“安装Ubuntu时下载更新”无需勾选，因为会增加安装时间，安装完成后也可以进行软件更新。&lt;/p&gt;
&lt;p&gt;第二个选项可勾可不勾。可能是我安装时的网络不好，勾选第二个选项选择 继续 需要等待很长时间，看个人情况吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1531199/201902/1531199-20190207225207541-1032858258.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择安装类型选择其它选项，然后继续。&lt;/p&gt;
&lt;p&gt;在接下来的界面里，先选中第一步分配出来的空闲区域，点击下面的加号，进行Ubuntu分区&lt;/p&gt;
&lt;p&gt;以100G的空闲空间为例，具体分区情况如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/boot&lt;/strong&gt; 分区:  ------ 300MB。逻辑分区，空间起始位置，Ext4日志文件系统&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/&lt;/strong&gt; 分区　------ 35GB。逻辑分区，空间起始位置，Ext4日志文件系统&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;swap(&lt;/strong&gt;&lt;strong&gt;交换空间&lt;/strong&gt;&lt;strong&gt;)&lt;/strong&gt; :　------ 4GB。逻辑分区，空间起始位置，用于：交换空间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/home &lt;/strong&gt;分区　------ 剩下的空间都给它好了。逻辑分区，空间起始位置，Ext4日志文件系统&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&quot;安装启动引导器的设备&quot;选择/boot对应的分区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;检查无误后点击现在安装，点击继续...&lt;/p&gt;
&lt;p&gt;后面默认即可。安装过程看网速如何，慢的话估计要安装很久，推荐深夜安装，睡一觉就安装好了。&lt;/p&gt;
&lt;h2&gt;最后一步：如果你是按照我的步骤走的（都是UEFI启动方式），那么在重启电脑后你会惊喜的发现是通过Ubuntu去引导启动的，你可以选择是进入Windows系统或是Ubuntu系统，双系统安装大功告成。&lt;/h2&gt;

&lt;p&gt;后话：如果重启之后会发现，没有Ubuntu的选择项，依旧直接进入Windows。你可能需要EasyBCD或是refind软件了。&lt;/p&gt;
&lt;p&gt;EasyBCD在我最前面推荐的博客中有使用方法。refind推荐下面的博客，亲测可用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tshare365.com/archives/1774.html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;-------------End--------------&lt;/p&gt;

</description>
<pubDate>Thu, 07 Feb 2019 15:22:00 +0000</pubDate>
<dc:creator>Apple_Coco</dc:creator>
<og:description>前话：因为感兴趣吧也是专业需要，所以自学了U盘重装系统以及在win10的情况下安装Ubuntu16.04双系统。借此博客，记录下我安装Ubuntu的过程，方便日后回忆。 正因如此，本篇博客会写的十分简</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/SystemCall/p/10353426.html</dc:identifier>
</item>
<item>
<title>【杂谈】一个简易的静态网页服务器 - 猫毛·波拿巴</title>
<link>http://www.cnblogs.com/longfurcat/p/10355514.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/longfurcat/p/10355514.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;　　上一篇随笔&lt;span&gt;&lt;strong&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/longfurcat/p/10353786.html&quot;&gt;【杂谈】一个回车下去，浏览器做了什么？&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;讲了浏览器的处理，这里再用一个例子讲解一下，也不算讲解，算是梳理一下服务端处理浏览器请求的过程。当然实际过程要比这复杂多了。下文的例子，其实就是《How Tomcat Works》这本书的第一个例子，感兴趣的可以去看这本书。不过书上的例子有问题，我下文中会提到。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：此项目不需要用tomcat，纯Java底层代码写就可以了。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;概述&lt;/h2&gt;
&lt;p&gt;程序有三个类HttpServer，Request，Response。&lt;/p&gt;
&lt;p&gt;HttpServer  =&amp;gt; 负责监听socket连接，创建Request、Response对象&lt;/p&gt;
&lt;p&gt;Request =&amp;gt; 用于获取请求信息的URI（利用Socket的InputStream），这里URI就是静态网页文件的相对路径&lt;/p&gt;
&lt;p&gt;Response =&amp;gt; 用于发送响应数据报（利用Request获取请求信息，利用OutputStream写出数据）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序包图&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1313132/201902/1313132-20190207210449576-257703372.png&quot; alt=&quot;&quot; width=&quot;267&quot; height=&quot;301&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;完整代码&lt;/h2&gt;
&lt;p&gt;由于贴完整代码都会使篇幅略显过长，所以下面都折叠起来了，看客可以逐个展开查看。&lt;/p&gt;
&lt;p&gt;HttpServer.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_53fd51d6-b6ba-4555-a260-c7ecec23615f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_53fd51d6-b6ba-4555-a260-c7ecec23615f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_53fd51d6-b6ba-4555-a260-c7ecec23615f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.wze.ex01.pyrmont;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.OutputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.InetAddress;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.ServerSocket;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.Socket;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HttpServer {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String WEB_ROOT = System.getProperty(&quot;user.dir&quot;) + File.separator + &quot;webroot&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String SHUTDOWN_COMMAND = &quot;/SHUTDOWN&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; shutdown = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        System.out.println(WEB_ROOT);
        HttpServer server &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpServer();
        server.await();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; await() {
        ServerSocket serverSocket &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; port = 8080&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;之所以要绑定监听的IP地址，是因为一个电脑可能有多个网卡&lt;/span&gt;
            serverSocket = &lt;span&gt;new&lt;/span&gt; ServerSocket(port, 1, InetAddress.getByName(&quot;127.0.0.1&quot;&lt;span&gt;));
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
            e.printStackTrace();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果绑定失败，那么这个程序也就没有运行下去的必要了。&lt;/span&gt;
            System.exit(1&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;shutdown) {
            Socket socket &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            InputStream input  &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            OutputStream output &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;接收一个请求，处理完毕后关闭连接&lt;/span&gt;
                socket =&lt;span&gt; serverSocket.accept();
                input &lt;/span&gt;=&lt;span&gt; socket.getInputStream();
                output &lt;/span&gt;=&lt;span&gt; socket.getOutputStream();
                Request request &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Request(input);
                request.parse();
                Response response &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Response(output);
                response.setRequest(request);
                response.sendStaticResource();
                socket.close();
                shutdown &lt;/span&gt;=&lt;span&gt; request.getUri().equals(SHUTDOWN_COMMAND);
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                e.printStackTrace();
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            }
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Request.java&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_1810850c-b40b-4c8c-bf50-49f5ced25928&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1810850c-b40b-4c8c-bf50-49f5ced25928&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1810850c-b40b-4c8c-bf50-49f5ced25928&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.wze.ex01.pyrmont;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Request {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; InputStream input;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String uri;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Request(InputStream input) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.input =&lt;span&gt; input;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; parse() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;之所以是大小是2048，是因为请求行的大小一般就是2048&lt;/span&gt;
        StringBuffer request = &lt;span&gt;new&lt;/span&gt; StringBuffer(2048&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i;
        &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] buffer = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[2048&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            i &lt;/span&gt;= input.read(buffer); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读入数据到buffer，并返回请求行的实际长度&lt;/span&gt;
        } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
            e.printStackTrace();
            i &lt;/span&gt;= -1&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; i; j++&lt;span&gt;) {
            request.append((&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;)buffer[j]);
        }
        System.out.println(request.toString());
        uri &lt;/span&gt;= parseUri(request.toString()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从请求行中把uri取出来&lt;/span&gt;
&lt;span&gt;        System.out.println(uri);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获取请求行中的uri
     *
     * 请求行格式：Method URI Version
     * 用空格做分隔符
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; requestString
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String parseUri(String requestString) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index1, index2;
        index1 &lt;/span&gt;= requestString.indexOf(' '&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(index1 != -1&lt;span&gt;) {
            index2 &lt;/span&gt;= requestString.indexOf(' ', index1+1&lt;span&gt;);
            System.out.println(index1 &lt;/span&gt;+ &quot; &quot; +&lt;span&gt; index2);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(index2 &amp;gt;&lt;span&gt; index1)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; requestString.substring(index1 + 1&lt;span&gt;, index2);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUri() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; uri;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;Response.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_17927976-7773-4595-ad93-69136f7c0e60&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_17927976-7773-4595-ad93-69136f7c0e60&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_17927976-7773-4595-ad93-69136f7c0e60&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.wze.ex01.pyrmont;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileInputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.OutputStream;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Response {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; BUFFER_SIZE = 1024&lt;span&gt;;
    Request request;
    OutputStream output;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Response(OutputStream output) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.output =&lt;span&gt; output;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setRequest(Request request) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.request =&lt;span&gt; request;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; sendStaticResource() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] bytes = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[BUFFER_SIZE];
        FileInputStream fis &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取用户请求文件的实际路径&lt;/span&gt;
            File file = &lt;span&gt;new&lt;/span&gt; File(HttpServer.WEB_ROOT +&lt;span&gt; request.getUri());
            System.out.println(file);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(file.exists()) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果文件存在，则读取到缓冲数组，再利用socket的outputstream写出数据&lt;/span&gt;
                &lt;span&gt;long&lt;/span&gt; contentLength =&lt;span&gt; file.length();
                String successMessage &lt;/span&gt;= &quot;HTTP/1.1 200 success\r\n&quot; +
                        &quot;Content-Type:text/html\r\n&quot; +
                        &quot;Content-Length:&quot;+contentLength +&quot;\r\n&quot; +
                        &quot;\r\n&quot;&lt;span&gt;;
                output.write(successMessage.getBytes());
                fis &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInputStream(file);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次最多读写1024字节，直到全部读完&lt;/span&gt;
                &lt;span&gt;int&lt;/span&gt; ch = fis.read(bytes, 0&lt;span&gt;, BUFFER_SIZE);
                System.out.println(ch);
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(ch != -1&lt;span&gt;) {
                    output.write(bytes, &lt;/span&gt;0&lt;span&gt;, ch);
                    ch &lt;/span&gt;= fis.read(bytes, 0&lt;span&gt;, BUFFER_SIZE);
                }
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                String errorMessage &lt;/span&gt;= &quot;HTTP/1.1 404 File Not Found\r\n&quot; +
                        &quot;Content-Type:text/html\r\n&quot; +
                        &quot;Content-Length:23\r\n&quot; +
                        &quot;\r\n&quot; +
                        &quot;&amp;lt;h1&amp;gt;File Not Found&amp;lt;/h1&amp;gt;&quot;&lt;span&gt;;
                output.write(errorMessage.getBytes());
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            System.out.println(e.toString());
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(fis != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                fis.close();
        }

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;运行效果&lt;/h2&gt;
&lt;p&gt;运行HttpServer的主方法，然后在浏览器地址栏键入localhost:8080/index.html，你就可以在浏览器看见网页内容了。到这一步就相当于实现了一个apache服务器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1313132/201902/1313132-20190207212520677-1901716819.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：index.html是你自己创建的，你随便写点内容。我是只在body里面写了hello。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;代码解析&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Request对象中缓冲大小为什么是2048？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为大多数浏览器请求行最大长度就是2048字节，所以读取2048字节，里面必然完全包含了请求行的数据。这也是parameter传参长度限制的原因，因为parameter在URI中，而URI又是组成请求行的元素之一。&lt;/p&gt;
&lt;p&gt;注：HTTP请求报文的请求行由三部分组成，请求方法，URI，协议版本，且这三个参数用空格隔开。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前面说的例子有问题在哪里？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面的例子是正常的，不过书本里面少了一部分，那就是响应头的编写，如果没有发送响应头给浏览器，它无法识别发送给它的数据是什么。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content-Length在上文中起什么作用？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;细心的朋友会发现，我在响应头中添加了Content-Length的头信息，指明了文件的长度，也就是字节数。有了这个头信息，浏览器就可以知道什么时候数据接收完成。这跟浏览器的加载提示有关。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;怎么让别人也能访问到这个网页？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你的电脑有公网IP的话，那你要做的只是把程序跑起来挂着，然后开放端口。开放端口是什么意思？默认情况下，防火墙会为了安全，其他电脑是不能随便访问本机的端口（例外，80端口是默认开启的）。开启的方法就是进入防火墙设置进站规则，开放8080端口。&lt;/p&gt;
&lt;h2&gt;感悟&lt;/h2&gt;
&lt;p&gt;　　其实涉及到网络通信，底层传递的就是一堆字节，而&quot;&lt;strong&gt;协议&lt;/strong&gt;&quot;从一个角度来说，其实就是双方共同遵守的数据格式，它指明从哪里到哪里的字节数据表示的是什么，应用程序根据这些进行处理。想来，其实这些东西在上《计算机网络》的时候都讲到了，只是当时没有现在这种感觉吧。&lt;/p&gt;
</description>
<pubDate>Thu, 07 Feb 2019 13:55:00 +0000</pubDate>
<dc:creator>猫毛&amp;#183;波拿巴</dc:creator>
<og:description>前言 上一篇随笔【杂谈】一个回车下去，浏览器做了什么？讲了浏览器的处理，这里再用一个例子讲解一下，也不算讲解，算是梳理一下服务端处理浏览器请求的过程。当然实际过程要比这复杂多了。下文的例子，其实就是《</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/longfurcat/p/10355514.html</dc:identifier>
</item>
<item>
<title>线程概念简介 什么是线程 多线程上篇（七） - noteless</title>
<link>http://www.cnblogs.com/noteless/p/10354612.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/noteless/p/10354612.html</guid>
<description>&lt;p&gt;&lt;span&gt;试图用它来提高系统内程序并发执行的程度，从而可进一步提高系统的吞吐量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;简言之，进程的概念，使之能够并发执行多道程序，线程的概念让你更好地并发执行程序，一个是能不能的问题，一个是更好的问题。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;线程与进程对比&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;线程概念的发展&lt;/span&gt;&lt;/h4&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207115055122-1624122855.png&quot;&gt;&lt;img title=&quot;image_5c5bab07_4fdf&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207115055589-964903690.png&quot; alt=&quot;image_5c5bab07_4fdf&quot; width=&quot;599&quot; height=&quot;234&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;进程概念提出的目的就是为了多道程序并发执行，并发过程中必然意味着不断地进程调度任务切换，但是他又是资源分配的独立单位，也就是说他要背着资源来回跑。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;举个例子：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;办公室内，每个人都有一台电脑，电脑就是资源&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后大家经常需要不断地变换座位位置（比如大家都是哪里需要去哪里，客服缺人了，销售就顶一个过去）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每个人都抱着自己的电脑来回的换位置方便？还是大家只是人员走动，电脑就使用那个位置的电脑方便？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;进程也是有些类似的道理&lt;/span&gt;，&lt;span&gt;&lt;strong&gt;你带着这么多资源来回切换调度，必然会带来更多的时&amp;amp;&amp;amp;空开销&lt;/strong&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;所以创建了线程的概念&lt;/span&gt;，&lt;span&gt;&lt;strong&gt;程序运行时所需的资源和程序的调度进行解耦&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程仍旧负责资源的独立分配，但是线程作为调度运行的独立单位，仅仅携带自身运行的必备的一丁点资源。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;对比&lt;/span&gt;&lt;/h4&gt;
&lt;div readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;span&gt;线程具有许多传统进程所具有的特征，所以又称为轻型进程(Light-Weight Process)或进程元&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;相应地把传统进程称为重型进程(Heavy-Weight Process)，传统进程相当于只有一个线程的任务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在引入了线程的操作系统中，通常一个进程都拥有若干个线程，至少也有一个线程。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207115055836-1381517068.png&quot;&gt;&lt;img title=&quot;image_5c5bab07_3789&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207115056083-1643554322.png&quot; alt=&quot;image_5c5bab07_3789&quot; width=&quot;392&quot; height=&quot;169&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;并发性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;传统的OS系统，进程之间可以并发执行，引入线程概念的OS，不仅仅进程间可以并发执行，一个进程中的线程也可以并发执行，不同进程中的线程也可以并发执行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;独立性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同一进程中的多个线程独立性比不同进程间的独立性差很多。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每个进程都是独立的地址空间和资源，同一进程下多线程他们共享进程下的资源，而且通常他们往往是用来相互合作的，每个线程都可以访问所在进程的所有地址空间，比如一个线程打开的文件，可以被其他线程读写。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;调度性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;传统OS，进程作为资源分配和调度分派的基本单位，进程是可以独立运行的基本单位，不过进程调度切换时空开销大&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;引入线程的OS，线程是运行调度和分派的基本单位，线程才是独立运行的基本单位，线程切换时，仅仅需要保存和设置少量寄存器内容，代价远远小于进程切换，不过需要注意是同一个进程内线程切换不会进程切换，但是不同进程中的线程进程切换，仍旧会导致进程切换。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;拥有资源&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程拥有资源，并且作为系统中拥有资源的独立基本单位。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;线程自身不拥有系统资源，仅仅拥有一点必不可少的，独立运行需要的资源，比如线程中的TCB。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除了自身的丁点儿资源外，共享所属进程的资源，同一个进程下所有线程，拥有相同的地址空间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;多处理器支持&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;传统进程（或者说单线程进程）只能运行于一个处理机上，不管有多少个处理机；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是对于多线程进程，就可以将一个进程中的多个线程分配到多个处理机上，并行运行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;简言之，多线程可以让多核CPU充分发挥性能并行运行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;系统开销&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程和线程的创建撤销，系统都要为止分配和回收资源，比如内存空间、IO设备等，进程和线程的上下文切换，系统也都需要付出一定的时空开销。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是，线程相关的开销明显小于进程。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;线程简介&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;各线程之间也是存在资源共享和相互合作的，线程在运行时也是间断的，轮转切换的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;线程也是有运行状态的，这一点与进程并没有本质区别，最主要的状态也是就绪、执行、阻塞&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程的控制核心信息保存在PCB中，线程也有对应的组成---TCB，所有用于控制和管理线程的信息都保存在TCB中&lt;/span&gt;&lt;/p&gt;

&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207115056412-884835669.png&quot;&gt;&lt;img title=&quot;image_5c5bab07_4ef4&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207115056813-1467503596.png&quot; alt=&quot;image_5c5bab07_4ef4&quot; width=&quot;613&quot; height=&quot;328&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;线程尽管是另外一种完全不同的事物，但是毕竟是从进程的概念演化而来，也是操作系统对程序运行抽象的一部分，所以，线程必然与进程有着很多的相似点&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;线程实现&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;线程的实现主要有三种形式&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;内核支持&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;用户级线程&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;另外就是二者的组合&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190207203231676-260615211.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;从上面的分析中可以看得出来，内核支持和用户级都有各自明显的缺点和优点。&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;20&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;有些操作系统把用户级线程和内核支持线程两种方式进行组合，提供了组合方式ULT/KST 线程。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在组合方式线程系统中， 内核支持多KST线程的建立、调度和管理，同时，也允许用户应用程序建立、调度和管理用户级线程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一些内核支持线程对应多个用户级线程，程序员可按应用需要和机器配置对内核支持线程数目进行调整，以达到较好的效果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;组合方式线程中，同一个进程内的多个线程可以同时在多处理器上并行执行，而且在阻塞一个线程时，并不需要将整个进程阻塞。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以，组合方式多线程机制能够结合 KST和 ULT两者的优点，并克服了其各自的不足。 &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;线程的同步与通信&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;关于进程的同步与通信的相关逻辑原理，对于进程的同步与通信绝大多数都是适用的。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;针对于这些原理，多线程OS也提供了多种同步机制，如互斥锁、条件变量、计数信号量以及多读、单写锁等。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;信号量机制&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;进程中的信号量机制完全适合多线程同步&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据用法分为两种&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;私用信号量(private samephore)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;公用信号量(public semaphort)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;系统运行中，有多个进程，进程中又有多个线程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果是为了同一进程中多个线程同步设置的信号量，&lt;span&gt;量属于特&lt;/span&gt;&lt;span&gt;定的进程所有，这就叫做私用，OS并不知道私用信号量的存在。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;如果是为了不同进程或者不同进程中的线程之间而设置的，就叫做公用。&lt;/span&gt;&lt;span&gt;其数据结构是存放在受&lt;/span&gt;&lt;span&gt;保护的系统存储区中，由OS为它分配空间并进行管理，故也称为系统信号量。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;互斥锁(mutex)&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;互斥锁是一种比较简单的、用于实现线程间对资源互斥访问的机制&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;互斥锁可以有两种状态&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;开锁(unlock)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;关锁(lock)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;p&gt;&lt;span&gt;当一个线程需要读/写一个共享数据段时，需要对mutex进行上锁，离开时需要解锁。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上锁时，首先校验 mutex 的状态，如果它已处于关锁状态，则试图访问该数据段的线程将被阻塞；如果 mutex处于开锁状态，则将 mutex 上锁后便去读/写该数据段。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;线程完成操作后，必须将 mutex 解锁，同时还需要将阻塞在该互斥锁上的一个线程唤醒，其它的线程仍被阻塞在等待mutex打开的队列上。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;另外，为了减少线程被阻塞的机会，在有的系统中还提供了一种用于 mutex 上的操作命令 Trylock。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;顾名思义，并不会因为无法进入而阻塞，&lt;span&gt;若 mutex 处于上锁状态，则 Trylock 并不会&lt;/span&gt;&lt;span&gt;阻塞该线程，而只是返回一个指示操作失败的状态码。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;条件变量&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;在许多情况下，只利用 mutex 来实现互斥访问可能会引起死锁，比如A线程请求资源顺序为R1，R2，B线程请求资源顺序为R2，R1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果A对mutex 1上锁成功进入临界区后，需要获取R2的锁mutex 2，可是此时B获得了资源R2，对mutex 2已经上锁，此时，A等待mutex 2 B等待mutex 1，形成了死锁&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以说，锁，应该是仅仅用于在条件成立时进行操作时的一个同步保障，而不能在整个过程中都依靠锁&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以借助于条件变量，就是条件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每一个条件变量通常都与一个互斥锁一起使用，&lt;span&gt;单纯的互斥锁用于短期锁定，主要是用来保证对临界区的互斥进入。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;而条&lt;/span&gt;&lt;span&gt;件变量则用于线程的长期等待，直至所等待的资源成为可用的资源。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;申请&lt;/span&gt;&lt;/h4&gt;
&lt;div readability=&quot;9.5&quot;&gt;
&lt;div readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;span&gt;Lock mutex                  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;while (条件状态不满足) {&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        wait(condition variable)；//释放锁，线程挂起等待，直到条件满足通知；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;临界区其他操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;unlock mutex; &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;释放&lt;/span&gt;&lt;/h4&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;Lock mutex&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一些操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;unlock mutex；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;wakeup(condition variable)；&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;简言之，借助于条件变量用于控制长时间的等待，锁用于控制对资源的同步。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;本文对线程进行了非常简单的介绍，线程之于进程在很多的方面有着极其类似的逻辑，尤其是从调度的视角看。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;毕竟线程就是对进程中关于调度部分的独立抽象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;只要能够理解进程和线程的目的就能够很好地理解他们相似的原因，因为都是操作系统对于程序运行的抽象描述，线程是进程的更加细粒度的掌控。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在换句话说就是操作系统的角度对程序的执行抽象为：“资源的分配”“调度”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最初这两个概念都是加诸于进程这个概念上，后续为了更加高效将两个概念进行了拆分，就是这样&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以说，对于原先介绍的进程的相关概念中关于调度部分的绝大多数理论，都是适用于线程概念的&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 07 Feb 2019 12:35:00 +0000</pubDate>
<dc:creator>noteless</dc:creator>
<og:description>线程的概念是操作系统对于程序运行的进一步划分，将资源分配与任务调度进一步细化，进而提升系统的性能，所以多线程本质的核心仍旧是并发（并行）</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/noteless/p/10354612.html</dc:identifier>
</item>
</channel>
</rss>