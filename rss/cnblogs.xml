<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Python爬虫入门教程 58-100 python爬虫高级技术之验证码篇4-极验证识别技术之一 - 梦想橡皮擦</title>
<link>http://www.cnblogs.com/happymeng/p/10696274.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/happymeng/p/10696274.html</guid>
<description>&lt;p&gt;@&lt;/p&gt;
&lt;h2 id=&quot;验证码类型&quot;&gt;验证码类型&lt;/h2&gt;
&lt;p&gt;今天要搞定的验证码属于现在使用非常多的验证码的一种类型---极验证滑动验证码，关于这个验证码的详细说明查阅他的官网，https://www.geetest.com/ 把验证码做到这个地步，必须点赞了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a105f9c649e9b2?w=1108&amp;amp;h=839&amp;amp;f=png&amp;amp;s=166096&quot; alt=&quot;海量验证码&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;官网最新效果&quot;&gt;官网最新效果&lt;/h3&gt;
&lt;p&gt;官方DEMO最新的效果如下，按照验证码的更新频率，基本博客看完，验证码也更新了，不过套路依旧是相同的，反爬只能增加爬虫编写的成本，并不能完全杜绝爬虫。&lt;br/&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a105f9c7842bda?w=460&amp;amp;h=357&amp;amp;f=gif&amp;amp;s=151815&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;这类验证码，常规解决办法，模拟人为操作，图像比对，查找缺口，移动覆盖缺口。&lt;/p&gt;
&lt;h3 id=&quot;找个用极验证的网站&quot;&gt;找个用极验证的网站&lt;/h3&gt;
&lt;p&gt;今天看新闻，随意找了一下，虎嗅使用的是直接拖拽，没有用最新的点击+拖拽方式，可以直接看一下如何操作。&lt;br/&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a105f9c5ca8d10?w=447&amp;amp;h=320&amp;amp;f=gif&amp;amp;s=308489&quot; alt=&quot;虎嗅验证码&quot;/&gt;&lt;br/&gt;这种验证码除了打码平台以外，直接selenium搞起&lt;/p&gt;
&lt;h3 id=&quot;拼接验证码图片&quot;&gt;拼接验证码图片&lt;/h3&gt;
&lt;p&gt;当你在谷歌浏览器使用F12进行查找元素的时候，随意的去缺口图片上面点击一下，在控制台DOM结构中出现如下代码，有前端经验的童鞋知道，这个使用的是背景局部显示技术，是可以通过这个拼接成一个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a1066ab3d1a9d8?w=1232&amp;amp;h=353&amp;amp;f=png&amp;amp;s=242441&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;注意两个地方：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;https://static.geetest.com/pictures/gt/8bc4cb7fa/8bc4cb7fa.webp 图片地址&lt;/li&gt;
&lt;li&gt;background-position:后面的坐标&lt;br/&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a105f9c86ebb11?w=297&amp;amp;h=195&amp;amp;f=png&amp;amp;s=14194&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;查阅图片之后，发现是一张碎掉的图片，你要做的第一步是将这个图片进行还原，我们通过selenium进行实现。这个地方需要先备注一下图片的尺寸，后面用size = &lt;code&gt;312x116&lt;/code&gt;&lt;br/&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a105f9c8502e71?w=372&amp;amp;h=77&amp;amp;f=png&amp;amp;s=7978&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a105fa0c4afd5b?w=349&amp;amp;h=147&amp;amp;f=png&amp;amp;s=50969&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;编写自动化代码&quot;&gt;编写自动化代码&lt;/h2&gt;
&lt;p&gt;使用selenium执行的操作，模拟人的点击行为即可&lt;/p&gt;
&lt;p&gt;最初，我们导入一些selenium的基本模块与方法&lt;/p&gt;
&lt;pre class=&quot;py&quot;&gt;
&lt;code&gt;import time
import re

from selenium import webdriver
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;基本模块的作用如下&lt;br/&gt;webdriver 核心驱动&lt;br/&gt;selenium.common.exceptions 异常类 TimeoutException 超时异常&lt;br/&gt;selenium.webdriver.common.by 按照什么方式进行元素的查找 例如 By.ID,By.ClassName,By.XPATH&lt;br/&gt;selenium.webdriver.support.wait 等待页面加载某些元素&lt;br/&gt;from selenium.webdriver.support import expected_conditions 场景判断用的，一般和上面的等待加载元素一起使用&lt;br/&gt;selenium.webdriver.common.action_chains 鼠标执行的动作链&lt;/p&gt;
&lt;p&gt;主方法测试入口&lt;/p&gt;
&lt;pre class=&quot;py&quot;&gt;
&lt;code&gt;if __name__ == '__main__':
    h = Geek_Huxiu()
    h.run()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;构造方法，实现对部分参数的初始化操作&lt;/p&gt;
&lt;pre class=&quot;py&quot;&gt;
&lt;code&gt;    def __init__(self):
        self.driver = webdriver.Chrome()  
        self.driver.set_window_size(1366,768)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;webdriver.Chrome() 启动谷歌浏览器，这个地方需要你提前配置好chromedriver.exe&lt;br/&gt;set_window_size(1366,768) 初始化浏览器大小&lt;/p&gt;
&lt;h3 id=&quot;核心run方法&quot;&gt;核心run方法&lt;/h3&gt;
&lt;pre class=&quot;py&quot;&gt;
&lt;code&gt;    def run(self):
        self.driver.get(&quot;https://www.huxiu.com/&quot;)  # 打开浏览器
    
        WebDriverWait(self.driver,10).until(EC.element_to_be_clickable((By.XPATH,'//*[@class=&quot;js-register&quot;]')))

        reg_element = self.driver.find_element_by_xpath('//*[@class=&quot;js-register&quot;]')
        reg_element.click()

        WebDriverWait(self.driver,10).until(EC.element_to_be_clickable((By.XPATH,'//div[@class=&quot;gt_slider_knob gt_show&quot;]')))

        # 模拟拖动
        self.analog_drag()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;WebDriverWait 方法&lt;/p&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;driver: 传入WebDriver实例，即我们上例中的driver
timeout: 超时时间，等待的最长时间（同时要考虑隐性等待时间）
poll_frequency: 调用until或until_not中的方法的间隔时间，默认是0.5秒
ignored_exceptions: 忽略的异常，如果在调用until或until_not的过程中抛出这个元组中的异常, 则不中断代码，继续等待；
如果抛出的是这个元组外的异常，则中断代码，抛出异常。默认只有NoSuchElementException。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;基本使用方法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;WebDriverWait(driver, 超时时长, 调用频率, 忽略异常).until(可执行方法, 超时时返回的信息)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;模拟拖动方法&quot;&gt;模拟拖动方法&lt;/h3&gt;
&lt;pre class=&quot;py&quot;&gt;
&lt;code&gt;    def analog_drag(self):
        # 鼠标移动到拖动按钮，显示出拖动图片
        element = self.driver.find_element_by_xpath('//div[@class=&quot;gt_slider_knob gt_show&quot;]')
        ActionChains(self.driver).move_to_element(element).perform()
        time.sleep(3)


        # 刷新一下极验证图片
        element = self.driver.find_element_by_xpath('//a[@class=&quot;gt_refresh_button&quot;]')
        element.click()
        time.sleep(1)

        # 获取图片地址和位置坐标列表
        cut_image_url,cut_location = self.get_image_url('//div[@class=&quot;gt_cut_bg_slice&quot;]')

        print(cut_image_url)
        print(cut_location)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;行为链&lt;/p&gt;
&lt;p&gt;ActionChains(self.driver).move_to_element(element).perform()&lt;/p&gt;
&lt;p&gt;模拟人移动鼠标到指定DOM元素&lt;/p&gt;
&lt;h3 id=&quot;图片处理方法&quot;&gt;图片处理方法&lt;/h3&gt;
&lt;pre class=&quot;py&quot;&gt;
&lt;code&gt;    def get_image_url(self,xpath):
        link = re.compile('background-image: url\(&quot;(.*?)&quot;\); background-position: (.*?)px (.*?)px;')
        elements = self.driver.find_elements_by_xpath(xpath)
        image_url = None

        location = list()

        for element in elements:
            style = element.get_attribute('style')
            groups = link.search(style)

            url = groups[1]
            x_pos = groups[2]
            y_pos = groups[3]
            location.append((int(x_pos), int(y_pos)))
            if not image_url:
                image_url = url
        return image_url, location
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用正则表达式进行匹配的时候，需要将所有的DIV匹配出来 ，采用&lt;code&gt;find_elements_by_xpath&lt;/code&gt; 方法，尤其注意&lt;code&gt;elements&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;WebElement 具备一些常用的方法和属性&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;size：返回元素尺寸&lt;/li&gt;
&lt;li&gt;text ：返回元素文本&lt;/li&gt;
&lt;li&gt;get_attribute(name)：获得属性值&lt;/li&gt;
&lt;li&gt;is_dispalyed() ：该元素是否用户可见&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;初步运行结果&quot;&gt;初步运行结果&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a105fa164a8604?w=787&amp;amp;h=74&amp;amp;f=png&amp;amp;s=7836&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;拼接图&quot;&gt;拼接图&lt;/h2&gt;
&lt;p&gt;看下图，注意一些基本元素，拼接的图片由N个小矩形构成，分为上下两个部分，小矩形的宽度和高度为10x58&lt;/p&gt;
&lt;p&gt;核心由上下两部分构成，每部分都是26个小矩形&lt;br/&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a105fa22101e05?w=857&amp;amp;h=224&amp;amp;f=png&amp;amp;s=123614&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;因为，整体宽度为26&lt;em&gt;10 = 260px ，整体高度为58&lt;/em&gt;2=116px&lt;/p&gt;
&lt;p&gt;但是，还记得博客开始的时候，你记录的那个宽度和高度么？ &lt;code&gt;312x116&lt;/code&gt; 高度一致，但是宽度出现偏差&lt;/p&gt;
&lt;p&gt;312-260 = 52px&lt;br/&gt;52个像素去除以26个矩形，发现每个矩形差2px，这两个像素也就是下面我们拼接图片的重点了&lt;/p&gt;
&lt;pre class=&quot;py&quot;&gt;
&lt;code&gt;    def splicing_image(self,image_url,location):
        res = requests.get(image_url)
        file = BytesIO(res.content)
        img = Image.open(file)
        image_upper = []
        image_down = []
        for pos in location:
            if pos[1] == 0:
                # y值为0的坐标  属于图片上半部分，高度58
                image_upper.append(img.crop((abs(pos[0]), 0, abs(pos[0]) + 10, 58)))
            else:
                # y值为58的坐标 属于图片上半部分，高度58
                image_down.append(img.crop((abs(pos[0]), 58, abs(pos[0]) + 10, img.height)))
        # 画布的x轴偏移量
        x_offset = 0 
        # 创建一张画布
        new_img = Image.new(&quot;RGB&quot;, (260, img.height))
        for img in image_upper:
            new_img.paste(img, (x_offset, 58))
            x_offset += img.width

        x_offset = 0
        for img in image_down:
            new_img.paste(img, (x_offset, 0))
            x_offset += img.width

        return new_img&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;requests.get(image_url) 下载图片到本地&lt;/li&gt;
&lt;li&gt;BytesIO(res.content) 将字节转换成二进制文件流&lt;/li&gt;
&lt;li&gt;Image.open(file) 获取图片&lt;/li&gt;
&lt;li&gt;img.crop 裁切图片 left, upper, right, lower&lt;/li&gt;
&lt;li&gt;Image.new(&quot;RGB&quot;, (260, img.height)) 创建一个空白的图片，将图片序列中的元素，依次的拼接到里面&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最终实现效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a1066ab47a526b?w=312&amp;amp;h=148&amp;amp;f=png&amp;amp;s=44686&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;图片存储到本地&quot;&gt;图片存储到本地&lt;/h2&gt;
&lt;pre class=&quot;py&quot;&gt;
&lt;code&gt;        # 将图片存储到本地
        cut_image.save(&quot;cut.jpg&quot;)
        full_image.save(&quot;full.jpg&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;好了，今天博客就先把图片处理到位，明天着手拼接部分。&lt;/p&gt;
&lt;p&gt;欢迎关注「非本科程序员」 回复 【0412】获取本篇博客源码&lt;/p&gt;
</description>
<pubDate>Fri, 12 Apr 2019 07:20:00 +0000</pubDate>
<dc:creator>梦想橡皮擦</dc:creator>
<og:description>@[toc] 验证码类型 今天要搞定的验证码属于现在使用非常多的验证码的一种类型 极验证滑动验证码，关于这个验证码的详细说明查阅他的官网，https://www.geetest.com/ 把验证码做到</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/happymeng/p/10696274.html</dc:identifier>
</item>
<item>
<title>如何正确使用Java泛型 - JJian</title>
<link>http://www.cnblogs.com/jian0110/p/10690483.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jian0110/p/10690483.html</guid>
<description>&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;　　&lt;strong&gt;Java 1.5之前是没有泛型的，以前从集合中读取每个对象都必须先进行转换，如果不小心存入集合中对象类型是错的，运行过程中转换处理会报错。有了泛型之后编译器会自动帮助转换，使程序更加安全，但是要正确使用泛型才能取得事半功倍的效果。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　本文主要从不要使用原生类型，泛型方法，限制通配符，类型安全的异构容器四个部分来说明如何正确使用Java泛型。&lt;strong&gt;主要参考资料《Effective Java》（PDF电子版，有需要的朋友可以私信评论）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr/&gt;

&lt;h2&gt;1. 什么是原生态类型？&lt;/h2&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;原生态类型（Raw type），即不带任何实际类型参数的泛型名称。如与List&amp;lt;E&amp;gt;对应的原生态类型List。不推荐List list = new ArrayList()这样的方式，主要就会丢掉安全性&lt;/strong&gt;&lt;/span&gt;（为什么不安全呢？具体请往下看），应使用List&amp;lt;MyClass&amp;gt; list = new ArrayList()明确类型。或者使用List&amp;lt;Object&amp;gt;（那么List与List&amp;lt;Object&amp;gt;有啥区别呢？具体可以看泛型的子类型规则部分）&lt;/p&gt;
&lt;h2&gt;2. 为什么不推荐使用原生态类型？&lt;/h2&gt;
&lt;p&gt;当我们使用原生态类型List创建一个集合，并往其中放入Stamp类与Coin类，并迭代循环获取List集合中的元素。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RawType_Class {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List list &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stamp());
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Coin());
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Iterator i =&lt;span&gt; list.iterator(); i.hasNext();) {
            Stamp stamp &lt;/span&gt;=&lt;span&gt; i.next();
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时必须使用Cast强转，否则编译会报错，在编译期报错对于开发者来说是我们最希望看到的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1352849/201904/1352849-20190411161632076-1580785323.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是我们根据提示，增加Cast，好了编译是不会报错了，但是运行时期会报错！ &lt;span class=&quot;cnblogs_code&quot;&gt;Exception in thread &quot;main&quot; java.lang.ClassCastException:&lt;/span&gt; ，这就对我们开发者来说大大增加了难度。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RawType_Class {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List list &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stamp());
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Coin());
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Iterator i =&lt;span&gt; list.iterator(); i.hasNext();) {
            Stamp stamp &lt;/span&gt;=&lt;span&gt; (Stamp) i.next();
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由此可见，原生类型是不推荐使用，是不安全的！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问1：那为什么Java还要允许使用原生态类型呢？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;是为了提升兼容性，Java1.5之前已经存在很多的原生态类型的代码，那么为了让代码保持合法，并且能够兼容新代码，因此Java才对原生态类型支持！&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;问2：那我们使用List&amp;lt;Object&amp;gt;是不是就可以了呢，两个有啥区别呢？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;两者都可以插入任意类型的对象。不严格来说，前者原生态类型List逃避了泛型检查，后者参数化类型List&amp;lt;Object&amp;gt;明确告诉编译器能够持有任意类型的对象。但是两个的区别主要是泛型存在子类型规则，具体请往下看&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;3. 泛型的子类型规则&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;子类型规则，即任何参数化的类型是原生态类型的一个子类型，比如List&amp;lt;String&amp;gt;是原生态类型List的一个子类型，而不是参数化List&amp;lt;Object&amp;gt;的子类型。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;由于子类型规则的存在，我们可以将List&amp;lt;String&amp;gt;传递给List类型的参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
　　List&lt;/span&gt;&amp;lt;String&amp;gt; strings = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
   unsafeAdd(strings, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Integer(1&lt;span&gt;));
   String s &lt;/span&gt;= strings.get(0&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; unsafeAdd(List list, Object o){
　　list.add(o);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然编译器是没有报错的，但是编译过程会出现以下提示，表明编写了某种不安全的未受检的操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1352849/201904/1352849-20190411164327824-1718200028.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是我们不能将List&amp;lt;String&amp;gt;传递给List&amp;lt;Object&amp;gt;类型参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
　　List&lt;/span&gt;&amp;lt;String&amp;gt; strings = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
   unsafeAdd(strings, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Integer(1&lt;span&gt;));
   String s &lt;/span&gt;= strings.get(0&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; unsafeAdd(List&amp;lt;Object&amp;gt;&lt;span&gt; list, Object o){
　　list.add(o);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后就直接报错，事实上编译器就会自动提示有错误&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1352849/201904/1352849-20190411164906785-234282258.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4. 无限制的通配符类型&lt;/h2&gt;
&lt;p&gt;　　使用原生态类型是很危险的，但是如果不确定或不关心实际的类型参数，&lt;span&gt;&lt;strong&gt;那么在Java 1.5之后Java有一种安全的替换方法，称之为无限制的通配符类型（unbounded wildcard type），可以用一个“?”代替，比如Set&amp;lt;?&amp;gt;表示某个类型的集合，可以持有任何集合。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;span&gt;那么无限制通配类型与原生态类型有啥区别呢？原生态类型是可以插入任何类型的元素，但是无限制通配类型的话，不能添加任何元素（null除外）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1352849/201904/1352849-20190411173552784-418864754.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　问：那么这样的通配符类型有意义吗？因为你并不知道它到底能加入啥样的元素，但是又美其名曰“无限制”。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;不能说没有意义，因为它的出现归根结底是为了防止破坏集合类型约束条件，并且可以根据需要使用泛型方法或者有限制的通配符类型（bound wildcard type）接口某些限制，提高安全性。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;5. 泛型的可擦除性&lt;/h2&gt;
&lt;p&gt;我们先看一下代码，看看结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
    List&lt;/span&gt;&amp;lt;String&amp;gt; l1 = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;&lt;span&gt;();
    List&lt;/span&gt;&amp;lt;Integer&amp;gt; l2 = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  输出为true，擦除后的类型为List&lt;/span&gt;
    System.out.println(l1.getClass() ==&lt;span&gt; l2.getClass());

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果为true，这是因为：&lt;span&gt;&lt;strong&gt;泛型信息可以在运行时被擦除，泛型在编译期有效，在运行期被删除，也就是说所有泛型参数类型在编译后都会被清除掉。归根结底不管泛型被参数具体化成什么类型，其class都是RawType.class，比如List.class，而不是List&amp;lt;String&amp;gt;.class或List&amp;lt;Integer&amp;gt;.class&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;事实上，在类文字中必须使用原生态类型，不准使用参数化类型（虽然允许使用数组类型和基本类型），也就是List.class、String[].class和int.class都是合法的，而List&amp;lt;String&amp;gt;.class和List&amp;lt;?&amp;gt;.class不合法&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;1、基本概念&lt;/h2&gt;
&lt;p&gt; 　　之前说过，如果直接使用原生态类型编译过程会有警告，运行过程可能会报异常，是非常不安全的一种方式。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Set union(Set s1, Set s2){
        Set result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HashSet();
        result.add(s2);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果是在方法中使用，为了修正这些警告，使方法变成类型安全的，可以为方法声明一个类型参数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;E&amp;gt; Set&amp;lt;E&amp;gt; union(Set&amp;lt;E&amp;gt; s1, Set&amp;lt;E&amp;gt;&lt;span&gt; s2){
        Set result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HashSet();
        result.add(s2);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　static后面的&amp;lt;E&amp;gt;就是方法的类型参数，这样的话三个集合的类型（两个输入参数与一个返回值）必须全部相同。&lt;strong&gt;这样的泛型方法不需要明确指定类型参数的值，而是通过判断参数的类型计算类型参数的值，对于参数Set&amp;lt;String&amp;gt;而言，编译器自然知道返回的类型参数E也是String，这就是所谓的类型推导（type inference）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1352849/201904/1352849-20190411192359551-896558018.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2、泛型单例工厂&lt;/h2&gt;
&lt;p&gt;　　有时候我们需要创建不可变但又适合许多不同类型的对象。之前的单例模式满足不可变，但不适合不同类型对象，这次我们可以利用泛型做到这点。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * apply方法接收与返回某个类型T的值
 * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; &amp;lt;T&amp;gt;
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; UnaryFunction&amp;lt;T&amp;gt;&lt;span&gt; {
    T apply(T arg);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　现在我们需要一个&lt;strong&gt;恒等函数（Identity function，f(x)=x，简单理解输入等于返回的函数，会返回未被修改的参数）&lt;/strong&gt;，如果每次需要的时候都要重新创建一个，这样就会很浪费，&lt;span&gt;&lt;strong&gt;如果泛型被具体化了，每个类型都需要一个恒等函数，但是它们被擦除后，就只需要一个泛型单例。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 　　&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 返回未被修改的参数arg
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; UnaryFunction&amp;lt;Object&amp;gt; IDENTITY_FUNCTION = (Object arg) -&amp;gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; arg;
    };

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 泛型方法identityFunction：
     *      返回类型：UnaryFunction&amp;lt;T&amp;gt;
     *      类型参数列表；&amp;lt;T&amp;gt;
     * 忽略强制转换未受检查的警告：
     * 因为返回未被修改的参数arg，所以我们知道无论T的值是什么，都是类型安全的
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; &amp;lt;T&amp;gt;
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @SuppressWarnings(&lt;/span&gt;&quot;unchacked&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; UnaryFunction&amp;lt;T&amp;gt;&lt;span&gt; identityFunction(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (UnaryFunction&amp;lt;T&amp;gt;&lt;span&gt;) IDENTITY_FUNCTION;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用泛型单例编写测试，下面代码不会报任何的警告或错误。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        String[] strings &lt;/span&gt;= {&quot;hello&quot;,&quot;world&quot;&lt;span&gt;};
        UnaryFunction&lt;/span&gt;&amp;lt;String&amp;gt; sameString =&lt;span&gt; identityFunction();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String s: strings) {
            System.out.println(sameString.apply(s));
        }
        Number[] numbers &lt;/span&gt;= {1,2.0&lt;span&gt;};
        UnaryFunction&lt;/span&gt;&amp;lt;Number&amp;gt; sameNumber =&lt;span&gt; identityFunction();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Number n: numbers) {
            System.out.println(sameNumber.apply(n));
        }
        UnaryFunction&lt;/span&gt;&amp;lt;Stamp&amp;gt; sameAnotherString =&lt;span&gt; identityFunction();
        System.out.println(sameAnotherString.apply(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stamp()));
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 返回的都是未被修改的参数&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1352849/201904/1352849-20190412094607975-955356199.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3. 递归类型限制&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;递归类型限制（&lt;/span&gt;&lt;span&gt;recursive type bound&lt;/span&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;）：通过某个包含该类型本身的表达式来限制类型参数，最普遍的就是与&lt;/span&gt;&lt;span&gt;Comparable一起使用&lt;/span&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;。比如&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;lt;T &lt;/span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Comparable&amp;lt;&lt;/span&gt;&lt;span&gt;T&amp;gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; Comparable&amp;lt;T&amp;gt;&lt;span&gt; {    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareTo(T o);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;类型参数&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;定义的类型，可以与实现&lt;/span&gt;&lt;span&gt;Comparable&amp;lt;T&amp;gt;&lt;/span&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;的类型进行比较，实际上，几乎所有类型都只能与它们自身类型的元素相比较，比如&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;实现&lt;/span&gt;&lt;span&gt;Comparable&amp;lt;String&amp;gt;&lt;/span&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;，&lt;/span&gt;&lt;span&gt;Integer&lt;/span&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;实现&lt;/span&gt;&lt;span&gt;Comparable&amp;lt;Integer&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1352849/201904/1352849-20190412100253975-1200638303.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;实现compareTo方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1352849/201904/1352849-20190412100722131-1561767522.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;String之间可以相互使用compareTo比较：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
String s1 = &quot;a&quot;&lt;span&gt;;
String s2 &lt;/span&gt;= &quot;b&quot;&lt;span&gt;;
s1.compareTo(s2);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;通常为了对列表进行排序，并在其中进行搜索，计算出它的最小值或最大值等，就要求列表中的每个元素都能够与列表中每个其它元素能进行比较，换句话说，列表的元素可以互相比较。往往就需要实现Comparable接口的元素列表。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; jian
 * @date 2019/4/1
 * @description 递归类型限制
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Recursive_Type_Bound {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 递归类型限制（recursive type bound）
     * &amp;lt;T extends Comparable&amp;lt;T&amp;gt;&amp;gt;表示可以与自身进行比较的每个类型T，即实现Comparable&amp;lt;T&amp;gt;接口的类型都可以与自身进行比较，可以查看String、Integer源码
     * &amp;lt;T extends Comparable&amp;lt;T&amp;gt;&amp;gt;类型参数，表示传入max方法的参数必须实现Comparable&amp;lt;T&amp;gt;接口，才能使用compareTo方法
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; list
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; &amp;lt;T&amp;gt;
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T &lt;span&gt;extends&lt;/span&gt; Comparable&amp;lt;T&amp;gt;&amp;gt; T max(List&amp;lt;T&amp;gt;&lt;span&gt; list) {
        Iterator&lt;/span&gt;&amp;lt;T&amp;gt; iterator =&lt;span&gt; list.iterator();
        T result &lt;/span&gt;=&lt;span&gt; iterator.next();
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (iterator.hasNext()) {
            T t &lt;/span&gt;=&lt;span&gt; iterator.next();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (t.compareTo(result) &amp;gt; 0&lt;span&gt;) {
                result &lt;/span&gt;=&lt;span&gt; t;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;String&amp;gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;&lt;span&gt;);
        System.out.println(max(list));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之前提到过的无限制的通配符类型就提到过，无限制的通配符单纯只使用&quot;?&quot;（如Set&amp;lt;?&amp;gt;），而有限制的通配符往往有如下形式，通过有限制的通配符类型可以大大提升API的灵活性。&lt;/p&gt;
&lt;p&gt;　　（1）E的某种超类集合(接口)：Collection&amp;lt;? super E&amp;gt;、Interface&amp;lt;? super E&amp;gt;、&lt;/p&gt;
&lt;p&gt;　　（2）E的某个子类集合(接口)：Collection&amp;lt;? extends E&amp;gt;、Interface&amp;lt;? extends E&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问1：那么什么时候使用extends关键字，什么什么使用super关键字呢？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;有这样一个PECS(producer-extends, consumer-super)原则：如果参数化类型表示一个T生产者，就使用&amp;lt;? extends T&amp;gt;，如果表示消费者就是&amp;lt;? super T&amp;gt;。可以这样助记&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;问2：什么是生产者，什么是消费者&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1）生产者：产生T不能消费T，针对collection，对每一项元素操作时，此时这个集合时生产者（生产元素），使用Collection&amp;lt;? extends T&amp;gt;。只能读取，不能写入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2）消费者：不能生产T，只消费使用T，针对collection，添加元素collection中，此时集合消费元素，使用Collection&amp;lt;? super T&amp;gt;，只能添加T的子类及自身，用Object接收读取到的元素&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;举例说明：生产者&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）你不能在List&amp;lt;? extends Number&amp;gt;中add操作，&lt;span&gt;&lt;strong&gt;因为你增加Integer可能会指向List&amp;lt;Double&amp;gt;，你增加Double可能会指向Integer。根本不能确保列表中最终保存的是什么类型。换句话说Number的所有子类从类关系上来说都是平级的，毫无联系的。并不能依赖类型推导（类型转换），编译器是无法确实的实际类型的！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1352849/201904/1352849-20190412115746800-1844584962.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;2）&lt;strong&gt;&lt;span&gt;但是你可以读取其中的元素，并保证读取出来的一定是Number的子类（包括Number），编译并不会报错，换句话说编译器知道里面的元素都是Number的子类，不管是Integer还是Double，编译器都可以向下转型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1352849/201904/1352849-20190412115615326-182146503.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举例说明：消费者&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 1）编译器不知道存入列表中的Number的超类具体是哪一个，&lt;span&gt;&lt;strong&gt;只能使用Object去接收&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1352849/201904/1352849-20190412135134653-1190854738.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1352849/201904/1352849-20190412135021936-1356891617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2）但是&lt;span&gt;&lt;strong&gt;只可以添加Interger及其子类（因为Integer子类也是Integer，向上转型）&lt;/strong&gt;&lt;/span&gt;，不能添加Object、Number。因为插入Number对象可以指向List&amp;lt;Integer&amp;gt;对象，你插入Object，因为可能会指向List&amp;lt;Ineger&amp;gt;对象&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1352849/201904/1352849-20190412135931083-1109475758.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;注意：Comparable/Comparator都是消费者，通常使用Comparator&amp;lt;? Super T&amp;gt;），可以将上述的max方法进行改造：&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T &lt;span&gt;extends&lt;/span&gt; Comparable&amp;lt;? &lt;span&gt;super&lt;/span&gt; T&amp;gt;&amp;gt; T max(List&amp;lt;? &lt;span&gt;extends&lt;/span&gt; T&amp;gt;&lt;span&gt; list) {
        Iterator&lt;/span&gt;&amp;lt;? &lt;span&gt;extends&lt;/span&gt; T&amp;gt; iterator =&lt;span&gt; list.iterator();
        T result &lt;/span&gt;=&lt;span&gt; iterator.next();
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (iterator.hasNext()) {
            T t &lt;/span&gt;=&lt;span&gt; iterator.next();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (t.compareTo(result) &amp;gt; 0&lt;span&gt;) {
                result &lt;/span&gt;=&lt;span&gt; t;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;　　泛型一般用于集合，如Set和Map等，&lt;span&gt;&lt;strong&gt;这些容器都是被参数化了（类型已经被具体化了，参数个数已被固定）的容器，只能限制每个容器只能固定数目的类型参数&lt;/strong&gt;&lt;/span&gt;，比如Set只能一个类型参数，表示它的元素类型，Map有两个参数，表示它的键与值。&lt;/p&gt;
&lt;p&gt;　　但是有时候你会需要更多的灵活性，比如关系数据库中可以有任意多的列，如果以类型的方式所有列就好了。有一种方法可以实现，&lt;span&gt;&lt;strong&gt;那就是使用将键进行参数化而不是容器参数化，然后将参数化的键提交给容器，来插入或获取值，用泛型来确保值的类型与它的键相符。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　我们实现一个Favorite类，可以通过Class类型来获取相应的value值，键可以是不同的Class类型（键Class&amp;lt;?&amp;gt;参数化，而不是Map&amp;lt;?&amp;gt;容器参数化）。利用Class.cast方法将键与键值的类型对应起来，不会出现  &lt;span class=&quot;cnblogs_code&quot;&gt;favorites.putFavorite(Integer.&lt;span&gt;class&lt;/span&gt;, &quot;Java&quot;)&lt;/span&gt; 这样的情况。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; jian
 * @date 2019/4/1
 * @description 类型安全的异构容器
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Favorites {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt; favorites = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;void&lt;/span&gt; putFavorite(Class&amp;lt;T&amp;gt;&lt;span&gt; type, T instance){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (type == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NullPointerException(&quot;Type is null&quot;&lt;span&gt;);
        }
        favorites.put(type, type.cast(instance));
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; T getFavorite(Class&amp;lt;T&amp;gt;&lt;span&gt; type){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; type.cast(favorites.get(type));
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　Favorites实例是类型安全（typesafe）的，你请求String时，不会返回给你Integer，同时也是异构（heterogeneous）的，不像普通map，它的键都可以是不同类型的。因此，我们将Favorites称之为类型安全的异构容器（typesafe heterogeneous container）。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Favorites favorites &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Favorites();
        favorites.putFavorite(String.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;, &quot;Java&quot;&lt;span&gt;);
        favorites.putFavorite(Integer.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;, 64&lt;span&gt;);
        favorites.putFavorite(Class.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;, Favorites.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        String favoriteString &lt;/span&gt;= favorites.getFavorite(String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        Integer favoriteInteger &lt;/span&gt;= favorites.getFavorite(Integer.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        Class&lt;/span&gt;&amp;lt;?&amp;gt; favoriteClass = favorites.getFavorite(Class.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);&lt;br/&gt;　　　　　// 输出 Java 40 Favorites
        System.out.printf(&lt;/span&gt;&quot;%s %x %s%n&quot;&lt;span&gt;, favoriteString, favoriteInteger, favoriteClass.getSimpleName());
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;Favorites类局限性在于它不能用于在不可具体化的类型中，换句话说你可以保存String，String[]，但是你不能保存List&amp;lt;String&amp;gt;，因为你无法为List&amp;lt;String&amp;gt;获取一个Class对象：List&amp;lt;String&amp;gt;.class是错误的，不管是List&amp;lt;String&amp;gt;还是List&amp;lt;Integer&amp;gt;都会公用一个List.class对象。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
　　List&amp;lt;String&amp;gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;&lt;span&gt;);
　　List&lt;/span&gt;&amp;lt;Integer&amp;gt; list2 = Arrays.asList(3,4&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;　　//&lt;/span&gt;&lt;span&gt; 只能选一种，不能有List&amp;lt;String&amp;gt;.class或者List&amp;lt;Integer&amp;gt;.class&lt;/span&gt;
　　favorites.putFavorite(List.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, list2);
&lt;/span&gt;&lt;span&gt;　　//&lt;/span&gt;&lt;span&gt; favorites.putFavorite(List.class, list)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr/&gt;
&lt;h2&gt;附1：相关泛型术语&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;1）参数化的类型：List&amp;lt;String&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　2）实际类型参数：String&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　3）泛型：List&amp;lt;E&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　4）形式类型参数：E&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　5）无限制通配符类型：List&amp;lt;?&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　6）原生态类型：List&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　7）递归类型限制：&amp;lt;T extends Comparable&amp;lt;T&amp;gt;&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　8）有限制的通配符类型：List&amp;lt;? extends Number&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　9）泛型方法：static &amp;lt;E&amp;gt; List&amp;lt;E&amp;gt; union()&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　10）类型令牌：String.class&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;br/&gt;附2：常用的形式类型参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;&lt;strong&gt;　1）T 代表一般的任何类。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　2）E 代表 Element 的意思，或者 Exception 异常的意思。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　3）K 代表 Key 的意思。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　4）V 代表 Value 的意思，通常与 K 一起配合使用。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　5）S 代表 Subtype 的意思&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 12 Apr 2019 06:53:00 +0000</pubDate>
<dc:creator>JJian</dc:creator>
<og:description>前言 Java 1.5之前是没有泛型的，以前从集合中读取每个对象都必须先进行转换，如果不小心存入集合中对象类型是错的，运行过程中转换处理会报错。有了泛型之后编译器会自动帮助转换，使程序更加安全，但是要</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jian0110/p/10690483.html</dc:identifier>
</item>
<item>
<title>es 修改拼音分词器源码实现同音字不匹配 - Liu_d_w</title>
<link>http://www.cnblogs.com/danvid/p/10691547.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/danvid/p/10691547.html</guid>
<description>&lt;p&gt;[版权声明]：本文章由danvid发布于&lt;a href=&quot;http://danvid.cnblogs.com/&quot;&gt;http://danvid.cnblogs.com/&lt;/a&gt;，如需转载或部分使用请注明出处　　&lt;/p&gt;

&lt;p&gt;　　在业务中经常会用到拼音匹配查询，大家都会用到拼音分词器，但是拼音分词器匹配的时候有个问题，就是会出现同音字匹配，有时候这种情况是业务不希望出现的。&lt;/p&gt;
&lt;p&gt;　　业务场景：我输入&quot;纯生pi酒&quot;进行搜索，文档中有以下数据:&lt;/p&gt;
&lt;p&gt;doc[1]:{&quot;name&quot;:&quot;纯生啤酒&quot;}&lt;/p&gt;
&lt;p&gt;doc[2]:{&quot;name&quot;:&quot;春生啤酒&quot;}&lt;/p&gt;
&lt;p&gt;doc[3]:{&quot;name&quot;:&quot;纯生劈酒&quot;}&lt;/p&gt;
&lt;p&gt;以上业务点是我输入&quot;纯生pi酒&quot;理论上业务希望只返回doc[1]:{&quot;name&quot;:&quot;纯生啤酒&quot;}和doc[3]:{&quot;name&quot;:&quot;纯生劈酒&quot;}其他的不是我要的数据，因为从业务角度来看，我已经输入&quot;纯生&quot;了，理论上只需要返回有&quot;纯生&quot;的数据(当然也有很多情况，会希望把&quot;春生&quot;也返回来)，正常使用拼音分词器，会把doc[2]也会返回，原因是拼音分词器会把doc[2]变成:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tokens&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chun&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sheng&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pi&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jiu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
    }
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于&quot;纯生&quot;和&quot;春生&quot;是同音字，分词结果doc[1]和doc[2]是一样的，所以把doc[2]匹配上就是理所当然了，那么如何解决?&lt;/p&gt;
&lt;p&gt;　　其实我们的需求是就当输入搜索文本时(搜索文本中可能同时存在中文/拼音),搜索文本中有[中文] 则按[中文]匹配，有[拼音]则按[拼音]匹配即可，这样就屏蔽掉了输入中文时匹配到同音字的问题。那么我们可以这样思考，我们索引的时候同时存在 全拼/简拼/中文 三种分词，搜索的时候 输入中有中文则按中文一个个分开，有英文则按拼音进行分词即可 例如：&lt;/p&gt;
&lt;p&gt;索引时&quot;纯生啤酒&quot;分词为:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;94&quot;&gt;
&lt;pre&gt;
&lt;span&gt;索引分词:&lt;br/&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tokens&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chun&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;纯&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sheng&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;生&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pi&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;啤&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jiu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;酒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
    }
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;搜索&quot;纯生pi酒&quot;,分词为:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;搜索分词:&lt;br/&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tokens&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;纯&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;生&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pi&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;酒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end_offset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
    }
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就可以只匹配出有&quot;纯&quot;|&quot;生&quot;|&quot;酒&quot;这几个字的数据了,而不是把&quot;春&quot;字的doc也匹配出来，既然解决思路有了，就找方案了。&lt;/p&gt;
&lt;p&gt;　　由于目前的es的拼音分词器是没有分离中文并保留中文的功能，所以就需要修改其源码增加这个功能(使用的拼音分词器: &lt;a href=&quot;https://github.com/medcl/elasticsearch-analysis-pinyin&quot;&gt;https://github.com/medcl/elasticsearch-analysis-pinyin&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;　　源码的话在上面地址上可以下在，源码的原理大概讲一下，就是他调用一个nlp工具包( &lt;a href=&quot;https://github.com/NLPchina&quot;&gt;https://github.com/NLPchina&lt;/a&gt;)先对输入文本解析成拼音 即&quot;纯生pi酒&quot;会解析成[&quot;chun&quot;,&quot;sheng&quot;,null,null,&quot;酒&quot;]数组(这里再提一句这个nlp工具包会对词组进行解析，而不是单个字进行解析例如&quot;厦/门&quot;会解析成&quot;xia/men&quot;而不是&quot;sha/men&quot;这个确实有用很多，当然他还有很多工具，例如简繁体转化等等，大家可以学习使用一哈)，然后再单独对英文数字放到buff里面进行二次匹配，采用&quot;&lt;span&gt;正向&lt;/span&gt;最大&lt;span&gt;匹配&quot;&lt;/span&gt;和&quot;逆向最大匹配&quot;取出最优解(这些都是常用的分词手法)匹配出拼音字符，源代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分别正向、逆向最大匹配，选出最短的作为最优结果&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
List&amp;lt;String&amp;gt; forward = positiveMaxMatch(pinyinText, PINYIN_MAX_LENGTH);&lt;br/&gt;if (forward.size() == 1) { // 前向只切出1个的话，没有必要再做逆向分词&lt;br/&gt;pinyinList.addAll(forward);&lt;br/&gt;} else {&lt;br/&gt;// 分别正向、逆向最大匹配，选出最短的作为最优结果&lt;br/&gt;List&amp;lt;String&amp;gt; backward = reverseMaxMatch(pinyinText, PINYIN_MAX_LENGTH);&lt;br/&gt;if (forward.size() &amp;lt;= backward.size()) {&lt;br/&gt;pinyinList.addAll(forward);&lt;br/&gt;} else {&lt;br/&gt;pinyinList.addAll(backward);&lt;br/&gt;}&lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至于拼音字典匹配结构由于拼音的数量不多，拼音源码采用了HashSet的结构而不是我们ik里面的字典树。(&quot;正向最大匹配&quot;和&quot;逆向最大匹配&quot;百度一大把就不在这说了)&lt;/p&gt;
&lt;p&gt;　　原理大概讲完了根据需求我们是不需要管英文数字这一块的匹配逻辑的，只需要修改中文转拼音这附近的逻辑即可。&lt;/p&gt;
&lt;p&gt;　　首先我们先写一个中文分割的工具类或者方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ChineseUtil {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 汉字始
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; CJK_UNIFIED_IDEOGRAPHS_START = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\u4E00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 汉字止
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; CJK_UNIFIED_IDEOGRAPHS_END = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\u9FA5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt;&lt;span&gt; segmentChinese(String str){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtil.isBlank(str)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Collections.emptyList();
        }
        
        List&lt;/span&gt;&amp;lt;String&amp;gt; lists = str.length()&amp;lt;=&lt;span&gt;32767&lt;/span&gt;?&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;(str.length()):&lt;span&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;str.length();i++&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; c =&lt;span&gt; str.charAt(i);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(c&amp;gt;=CJK_UNIFIED_IDEOGRAPHS_START&amp;amp;&amp;amp;c&amp;lt;=&lt;span&gt;CJK_UNIFIED_IDEOGRAPHS_END){
                lists.add(String.valueOf(c));
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                lists.add(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
            }

        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lists;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;汉字始或者汉字止这个查一下nlp工具的源码(PinyinUtil)就可以找到，或者百度。然后在拼音源码中的PinyinConfig类中添加一项中文分割的配置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1567872/201904/1567872-20190412124650651-1125614649.png&quot; alt=&quot;&quot; width=&quot;644&quot; height=&quot;283&quot;/&gt;&lt;/p&gt;
&lt;p&gt;默认false就可以了，然后我们需要修改两个类(PinyinTokenFilter/PinyinTokenizer)，这两个类是最要的分词类，对应es的analysis的filter和tokenizer&lt;/p&gt;
&lt;p&gt;　　由于这两个类修改地方是一样的我就随便讲一个，首先需要修改构造器的校验，添加刚刚增加的配置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1567872/201904/1567872-20190412125309438-1887194078.png&quot; alt=&quot;&quot; width=&quot;851&quot; height=&quot;81&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后修改该类的readTerm()方法，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1567872/201904/1567872-20190412125719211-1591546592.png&quot; alt=&quot;&quot; width=&quot;756&quot; height=&quot;304&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1567872/201904/1567872-20190412150957346-419582848.png&quot; alt=&quot;&quot; width=&quot;754&quot; height=&quot;388&quot;/&gt;&lt;/p&gt;
&lt;p&gt;两个类都修改完就完成源码修改了，现在需要对源码重新进行打包，mvn install以下就可以了，你就会拿到elasticsearch-analysis-pinyin-5.6.4.jar(你下载源码的时候要下载release的版本进行修改，版本也要对应你的es哦)，同时在源码的lib拿到nlp-lang-1.7.jar包 ，再加上resource中的plugin-descriptor.properties(这个需要定义插件版本，启动类等东西，这个去拼音release版本中找个可用的插件解压一下跟着配置就可以了)，最后变成下面这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1567872/201904/1567872-20190412150701920-891388676.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;放在一个文件夹里面，这个就是打包好的插件了，名字自己命名即可，然后放到es的plugin目录里面就完成修改了。&lt;/p&gt;
&lt;p&gt;　　剩下就是修改index的setting和mapping，修改思想就是按照开头说的那样search_analyzer和analyzer分开即可，如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
PUT /&lt;span&gt;test_index
{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;analysis&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;analyzer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pinyin_chinese_analyzer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tokenizer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pinyin_tokenizer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pinyin_analyzer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tokenizer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pinyin_chinese_tokenizer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        }
      }, 
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tokenizer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pinyin_chinese_tokenizer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pinyin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keep_first_letter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keep_separate_first_letter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keep_full_pinyin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keep_original&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;limit_first_letter_length&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;50&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keep_separate_chinese&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lowercase&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
          
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pinyin_tokenizer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pinyin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keep_first_letter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keep_separate_first_letter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keep_full_pinyin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keep_original&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;limit_first_letter_length&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;50&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keep_separate_chinese&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lowercase&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
        }
      }
    }
  }
  , &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mappings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;indexType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;search_analyzer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pinyin_chinese_analyzer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;analyzer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pinyin_analyzer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        }
      }
    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查询使用match_pharse即可(使用原理可以参考我的文章&lt;a href=&quot;https://www.cnblogs.com/danvid/p/10570334.html&quot;&gt;https://www.cnblogs.com/danvid/p/10570334.html&lt;/a&gt;)，当然也可以用其他，根据业务来把。&lt;/p&gt;
&lt;p&gt;　　总结：修改原理比较简单，主要就是多思考找到解决思路，再实现方案，多看源码～好好学习，天天向上，有问题或者困难欢迎留言沟通&lt;/p&gt;


&lt;p&gt;[说明]：elasticsearch版本5.6.4&lt;/p&gt;
</description>
<pubDate>Fri, 12 Apr 2019 06:52:00 +0000</pubDate>
<dc:creator>Liu_d_w</dc:creator>
<og:description>[版权声明]：本文章由danvid发布于http://danvid.cnblogs.com/，如需转载或部分使用请注明出处 在业务中经常会用到拼音匹配查询，大家都会用到拼音分词器，但是拼音分词器匹配的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/danvid/p/10691547.html</dc:identifier>
</item>
<item>
<title>C#/.NET基于Topshelf创建Windows服务程序及服务的安装和卸载 - Rector</title>
<link>http://www.cnblogs.com/bobositlife/p/create-windows-service-with-topshelf-in-csharp-console-application.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bobositlife/p/create-windows-service-with-topshelf-in-csharp-console-application.html</guid>
<description>&lt;p&gt;&lt;strong&gt;本文首发于：&lt;a href=&quot;https://codedefault.com/p/create-windows-service-with-topshelf-in-csharp-console-application&quot;&gt;码友网&lt;/a&gt;&lt;/strong&gt;--一个专注.NET/.NET Core开发的编程爱好者社区。&lt;/p&gt;
&lt;h2 id=&quot;文章目录&quot;&gt;文章目录&lt;/h2&gt;
&lt;p&gt;C#/.NET基于Topshelf创建Windows服务的系列文章目录：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://codedefault.com/p/create-windows-service-with-topshelf-in-csharp-console-application&quot;&gt;C#/.NET基于Topshelf创建Windows服务程序及服务的安装和卸载&lt;/a&gt; (1)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codedefault.com/p/create-daemon-service-with-topshelf-in-csharp-application&quot;&gt;在C#/.NET应用程序开发中创建一个基于Topshelf的应用程序守护进程(服务)&lt;/a&gt; (2)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codedefault.com/p/launch-a-gui-application-from-a-windows-service-on-windows&quot;&gt;C#/.NET基于Topshelf创建Windows服务的守护程序作为服务启动的客户端桌面程序不显示UI界面的问题分析和解决方案&lt;/a&gt; (3)&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;对于使用Windows操作系统的人来说，Windows Service(Windows服务)应该不会陌生。在Windows操作系统中，我们可以在&quot;运行&quot;窗口中运行&lt;code&gt;service.msc&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://statics.codedefault.com/uploads/u/2019/04/7lg088gi12.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;即可打开一个查看Windows服务的窗口，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://statics.codedefault.com/uploads/u/2019/04/0fi74l394l.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Windows服务基本都是一些后台运行的服务进程，没有UI界面，每个服务处理着各自独立的任务并且有专门的启动或者停止策略。所以，Windows服务在很多情况下会被用来者处理一些定时任务或者调度。&lt;/p&gt;
&lt;p&gt;那么，对于.NET的开发者来说，可不可以自己创建Windows服务呢，如何使用C#创建Windows服务呢？&lt;/p&gt;
&lt;p&gt;本文就为大家分享一种基于Topshelf创建的Windows服务的方法。&lt;/p&gt;
&lt;h2 id=&quot;创建topshelf服务项目&quot;&gt;创建Topshelf服务项目&lt;/h2&gt;
&lt;p&gt;首先打开Visual Studio(本文使用的是Visual Studio 2019)，打开新建项目的对话框，选择.NET Framework的控制台应用程序(Console App(.NET Framework))，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://statics.codedefault.com/uploads/u/2019/04/x4xv89b79l.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注：只可选择控制台应用程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;点击&quot;下一步&quot;，在项目名称中输入&lt;code&gt;TopshelfDemoService&lt;/code&gt;，.NET Framework 选择4.6.2，其中选项根据自己情况填写即可，最后点击&quot;创建&quot;按钮。&lt;/p&gt;
&lt;h2 id=&quot;安装topshelf组件&quot;&gt;安装Topshelf组件&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;TopshelfDemoService&lt;/code&gt;项目中，打开Nuget包管理工具，搜索&lt;code&gt;Topshelf&lt;/code&gt;，在搜索结果中选中&lt;code&gt;Topshelf&lt;/code&gt;，点击&quot;安装&quot;，如图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://statics.codedefault.com/uploads/u/2019/04/tder7y717a.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;编写topshelf服务的示例程序代码&quot;&gt;编写Topshelf服务的示例程序代码&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Topshelf&lt;/code&gt;组件安装完成后，我们就可以开始编写服务的示例代码了。&lt;/p&gt;
&lt;p&gt;首先，创建一个名为&lt;code&gt;HealthMonitorService.cs&lt;/code&gt;的类(其作用假设为定时监控某个系统的运行健康状况)，在其中分别创建方法：&lt;code&gt;Start()&lt;/code&gt;和&lt;code&gt;Stop()&lt;/code&gt;以及一个定时器，让定时器定时执行检查系统健康状况的任务(这里模拟的每秒向控制台输出一条文本信息)，完整的代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;using System;
using System.Timers;

namespace TopshelfDemoService
{
    internal class HealthMonitorService
    {
        private readonly Timer _timer;
        public HealthMonitorService()
        {
            _timer = new Timer(1000) { AutoReset = true };
            _timer.Elapsed += (sender, eventArgs) =&amp;gt; Console.WriteLine(&quot;执行系统健康检查任务，所有指标均正常。执行时间：{0}&quot;, DateTime.Now);
        }

        public void Start()
        {
            _timer.Start();
        }
        public void Stop()
        {
            _timer.Stop();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再创建一个名为&lt;code&gt;MyServiceConfigure.cs&lt;/code&gt;的服务配置类，这个类主要用来配置Topshelf服务的各种运行参数，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;using System;
using Topshelf;

namespace TopshelfDemoService
{
    internal class MyServiceConfigure
    {
        internal static void Configure()
        {
            var rc = HostFactory.Run(host =&amp;gt;                                    // 1
            {
                host.Service&amp;lt;HealthMonitorService&amp;gt;(service =&amp;gt;                   // 2
                {
                    service.ConstructUsing(() =&amp;gt; new HealthMonitorService());   // 3
                    service.WhenStarted(s =&amp;gt; s.Start());                        // 4
                    service.WhenStopped(s =&amp;gt; s.Stop());                         // 5
                });

                host.RunAsLocalSystem();                                        // 6

                host.EnableServiceRecovery(service =&amp;gt;                           // 7
                {
                    service.RestartService(3);                                  // 8
                });
                host.SetDescription(&quot;Windows service based on topshelf&quot;);       // 9
                host.SetDisplayName(&quot;Topshelf demo service&quot;);                   // 10
                host.SetServiceName(&quot;TopshelfDemoService&quot;);                     // 11
                host.StartAutomaticallyDelayed();                               // 12
            });

            var exitCode = (int)Convert.ChangeType(rc, rc.GetTypeCode());       // 13
            Environment.ExitCode = exitCode;
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注：其中数字的含义请见本文末尾的解释。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后，打开&lt;code&gt;Program.cs&lt;/code&gt;文件，开启&lt;code&gt;Topshelf&lt;/code&gt;服务，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;namespace TopshelfDemoService
{
    class Program
    {
        static void Main(string[] args)
        {
            MyServiceConfigure.Configure();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;好了，完成到这里，整个示例程序就写好了，按F5运行示例程序，你将看到如下类似的控制台信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://statics.codedefault.com/uploads/u/2019/04/acde39c83r.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，我们创建的&lt;code&gt;TopshelfDemoService&lt;/code&gt;服务每秒向控制台打印了一条文本信息，这和我们的预期是吻合的。&lt;/p&gt;
&lt;p&gt;这样，我们就成功创建了一个基于&lt;code&gt;Topshelf&lt;/code&gt;的Windows服务，当然，这也只是一个简单和示例服务程序，其中没有复杂的业务逻辑和配置等等。这些都等待你去发掘。&lt;/p&gt;
&lt;h2 id=&quot;作为windows服务安装和卸载&quot;&gt;作为Windows服务安装和卸载&lt;/h2&gt;
&lt;p&gt;我们刚才运行的只是一个控制台应用程序，如果将这个控制台应用程序关掉，定时任务也会被停止了。如果我们希望定时任务可以一直运行，那需要将这个控制台应用程序作为服务安装到Windows服务进程中，如何操作呢？&lt;/p&gt;
&lt;p&gt;非常简单的安装和卸载命令。&lt;/p&gt;
&lt;p&gt;首先，以&lt;strong&gt;管理员身份&lt;/strong&gt;打开一个命令行工具，进入到控制台应用程序所在目录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装服务运行如下命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;TopshelfDemoService.exe install&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://statics.codedefault.com/uploads/u/2019/04/db1fa7ej2y.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;打开Windows服务查看窗口(刷新)，可以看到&lt;code&gt;Topshelf demo service&lt;/code&gt;已经在服务列表中了，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://statics.codedefault.com/uploads/u/2019/04/239291s3p9.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这时，我们只需要按照Windows服务来操作这个服务即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;卸载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果需要卸载服务，则运行如下命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;TopshelfDemoService.exe uninstall&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;topshelf配置参数说明&quot;&gt;Topshelf配置参数说明&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;1.设置服务主机使用&lt;code&gt;HostFactory.Run()&lt;/code&gt;来创建并运行一个Topshelft服务。&lt;br/&gt;2.设置&lt;code&gt;Topshelf&lt;/code&gt;使用类型&lt;code&gt;HealthMonitorService&lt;/code&gt;作为服务类。&lt;br/&gt;3.配置如何创建一个服务的实例，这里采用的是使用关键字&lt;code&gt;new&lt;/code&gt;来实例化一个&lt;code&gt;HealthMonitorService&lt;/code&gt;对象，你也可以使用IoCp容器来实例化服务对象。&lt;br/&gt;4.设置当服务启动时执行的操作。&lt;br/&gt;5.设置当服务停止时执行的操作。&lt;br/&gt;6.设置将服务以本地系统身份运行。&lt;br/&gt;7.启动恢复服务模式(当服务意外停止后自动恢复)。&lt;br/&gt;8.设置第一次自动恢复服务的延迟时间为3分钟。&lt;br/&gt;9.设置Topshelf服务在Windows服务中的描述信息。&lt;br/&gt;10.设置Topshelf服务在Windows服务中的显示名称。&lt;br/&gt;11.设置Topshelf服务在Windows服务中的服务名称。&lt;br/&gt;12.设置Topshelf服务随Windows启动时自动运行(延迟)。&lt;br/&gt;13.设置服务的退出代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;示例代码托管和下载&quot;&gt;示例代码托管和下载&lt;/h2&gt;
&lt;p&gt;本示例代码托管地址可以在原出处找到：&lt;a href=&quot;https://codedefault.com/p/create-windows-service-with-topshelf-in-csharp-console-application&quot;&gt;示例代码下载地址&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 12 Apr 2019 06:41:00 +0000</pubDate>
<dc:creator>Rector</dc:creator>
<og:description>对于使用Windows操作系统的人来说，Windows Service(Windows服务)应该不会陌生。在Windows操作系统中，我们可以在”运行”窗口中运行service.msc，即可打开一个查</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bobositlife/p/create-windows-service-with-topshelf-in-csharp-console-application.html</dc:identifier>
</item>
<item>
<title>GPU体系架构(一)：数据的并行处理 - DeepDream</title>
<link>http://www.cnblogs.com/hellobb/p/10695915.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hellobb/p/10695915.html</guid>
<description>&lt;p&gt;&lt;span&gt;最近在了解GPU架构这方面的内容，由于资料零零散散，所以准备写两篇博客整理一下。GPU的架构复杂无比，这两篇文章也是从宏观的层面去一窥GPU的工作原理罢了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;GPU根据厂商的不同，显卡型号的不同，GPU的架构也有差别，但是大体的设计基本相同，原理的部分也是相通的。下面我们就以NVIDIA的Fermi架构为蓝本，从降低延迟的角度，来讲解一下GPU到底是如何利用数据的并行处理来提升性能的。有关GPU的架构细节和逻辑管线的实现细节，我们将在下一篇里再讲。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;无论是CPU还是GPU，都在使用各种各样的策略来避免停滞（stall）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CPU的优化路线有很多，包括使用pipeline，提高主频，在芯片上集成访问速度更快的缓存，减少内存访问的延迟等等。在减少stalls的路上，CPU还采用了很多聪明的技术，比如分支预测，指令重排，寄存器重命名等等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;GPU则采用了另一种不同的策略：&lt;strong&gt;&lt;em&gt;throughput&lt;/em&gt;&lt;/strong&gt;。它提供了大量的专用处理器，由于GPU端数据的天然并行性，所以通过数据的大规模并行化处理，来降低延迟。这种设计优点是通过提高吞吐量，数据的整体处理时间减少，隐藏了处理的延迟。但是由于芯片上集成的核越多，留给其他设备的空间就越小，所以像memory cache和logical control这样的设备就会变少，导致每一路shader program的执行变得延迟很高。了解这个特性，我们来看一个例子，以此来说明如何利用GPU的架构，写出更高效的代码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假如我们有一个mesh要被渲染，光栅化后生成了2000个fragment，那么我们需要调用一个pixel shader program 2000次，假如我们的GPU只有一个shader core（世界最弱鸡GPU），它开始执行第一个像素的shader program，执行一些算数指令，操作一下寄存器上的值，由于寄存器是本地的，所以此时并不会发生阻塞，但是当程序执行到某个纹理采样的操作时，由于纹理数据并不在程序的本地寄存器中，所以需要进行内存的读取操作，该操作可能要耗费几百甚至几千个时钟周期，所以会阻塞住当前处理器，等待读取的结果。如果真的只是这样设计这个GPU，那它真的就是太弱鸡了，所以为了让它稍微好点，我们需要提升它的性能，那如何降低它的延迟呢？我们给每个fragment提供一些本地存储和寄存器，用来保存该fragment的一些执行状态，这样我们就可以在当前fragment等待纹理数据时，切换到另一个fragment，开始执行它的shader program，当它遇到内存读取操作阻塞时，会再次切换，以此类推，直到2000个shader program都执行到这里。这时第一个fragment的颜色已经返回，可以继续往下执行了。使用这种方式，可以最大化的提高GPU的效率，虽然在单个像素来看，执行的延迟变高了，但是从2000个像素整体来说，执行的延迟减少了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现代GPU当然不会弱鸡到只有一个shader core，但是它们也同样采用了这种方式来减低延迟。现代GPU为了提高数据的并行化，使用了SIMT（Single Instruction Multi Thread，SIMD的更高级版本），执行shader program的最小单位是thread，执行相同program的threads打包成组，NVIDIA称之为warp，AMD称之为wavefront。一个warp/wavefront在特定数量的GPU shader core上调度执行，warps调度器调度的基本单元就是warp/wavefront。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假如我们有2000个fragment需要执行shader program，以NVIDIA为例，它的GPU包含32个thread，所以要执行这些任务需要2000/32 = 62.5个warps，也就是说要分配63个warps，有一个只使用一半。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个warp的执行过程跟单个GPU shader core的执行过程是类似的，32个像素的shader program对应的thread，会在32个GPU shader core上同时以lock-step的方式执行，当着色器程序遇到内存读取操作时，比如访问纹理（非常耗时），因为32个threads执行的是相同的程序，所以它们会同时遇到该操作，内存读取意味着该线程组将会阻塞（stall），全部等待内存读取的结果。为了降低延迟，GPU的warp调度器会将当前阻塞的warp换出，用另一组包含32个线程的warp来代替执行。换出操作跟单核的任务调度一样的快，因为在换入换出时，每个线程的数据都没有被触碰，每个线程都有它自己的寄存器，每个warp都负责记录它执行到了哪条指令。换入一个新的warp，不过是将GPU 的shader cores切换到另一组线程上继续执行，除此之外没有其他额外的开销。该过程如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/511884/201904/511884-20190412143110814-12815990.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在我们这个简单的例子中，内存读取的延迟（latency）会导致warp被换出，在实际的应用中，可能更小的延迟就会导致warp的换出操作，因为换入换出的操作开销非常低。warp-swapping的策略是GPU隐藏延迟（latency）的主要方式。但是有几个关键因素，会影响到该策略的性能，比如说，如果我们只有很少的threads，也就是只能创建很少的warp，会使隐藏延迟出现问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;shader program的结构是影响性能的主要角色，其中最大的一个影响因素就是每个thread需要的寄存器的数量。在上面例子的讲解过程中，我们一直假设例子中的2000个thread都是同时驻留在GPU中的。但是实际上，每个thread绑定的shader program中需要的寄存器越多，产生的threads就越少（因为寄存器的数量是固定的），能够驻留在GPU中的warp就越少。warps的短缺也就意味着无法使用warp-swapping的策略减缓延迟。warps在GPU中存在的数量称之为占用率，高占用率意味着有更多的warps可以用来执行，低占用率则会严重影响GPU的并行效率。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另一个影响GPU性能的因素就是动态分支（dynamic branching），主要是由if和循环引进的。因为一个warp中的所有线程在执行到if语句时，就会出现分裂，如果大家都是执行的相同的分支，那也没什么，但但凡有一个线程执行另一个分支，那么整个warp会把两个分支都执行一遍，然后每个线程扔掉它们各自不需要的结果，这种现象称为&lt;strong&gt;&lt;em&gt;thread divergence&lt;/em&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;了解了上面的基本原理，我们可以看出，整个GPU的设计其实也是一种trade-off，用单路数据的高延迟，来换整体数据的吞吐量，以此来最大化GPU的性能，降低stall。在实际的编码过程中，尤其是shader的编写过程中，也要严肃影响GPU优化策略的几个因素，只有这样，才能写出更加高效的代码，真正发挥出GPU的潜力。&lt;/p&gt;

&lt;p&gt;下一篇会更加详细的介绍GPU的结构和逻辑管线，如果错误，欢迎指正。&lt;/p&gt;
</description>
<pubDate>Fri, 12 Apr 2019 06:34:00 +0000</pubDate>
<dc:creator>DeepDream</dc:creator>
<og:description>最近在了解GPU架构这方面的内容，由于资料零零散散，所以准备写两篇博客整理一下。GPU的架构复杂无比，这两篇文章也是从宏观的层面去一窥GPU的工作原理罢了 GPU根据厂商的不同，显卡型号的不同，GPU</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hellobb/p/10695915.html</dc:identifier>
</item>
<item>
<title>Software Architecture Pattern(Mark Richards)笔记 - zhangkangkang</title>
<link>http://www.cnblogs.com/zhangkangkang/p/10695752.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangkangkang/p/10695752.html</guid>
<description>&lt;p&gt;缺少规范架构的程序通常会变得紧耦合、脆弱、难以更改，缺少清晰的发展方向和愿景。这本小书用50多页介绍了常用的5种常见架构模式，相信不管是大牛还是萌新都会有所收获，特别是对我这种偏爱系统设计、架构、模式的人。当然，此书也只是高层的讨论，能够起到归纳总结、理顺思路的作用。如果想实际应用，还是需要从代码入手，站在架构模式的角度分析优秀的项目源码。&lt;/p&gt;
&lt;h2 id=&quot;分层架构layeredn-tier-architecture&quot;&gt;分层架构(Layered/N-tier Architecture)&lt;/h2&gt;
&lt;p&gt;分层架构的组件按垂直模式组织成多层，每一层表现为程序的一种角色。分层架构大概是最普遍的架构了，写过java web的人大概都规规范范地写过那什么dao、service、controller之类的包，每一层都是围绕一种功能的抽象，各负其责，有利于系统开发、测试、管理和维护。分层架构图如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1591148/201904/1591148-20190412140840916-1164880164.png&quot;/&gt;&lt;br/&gt;一般来说，请求从上到下，下一层为上一层提供服务。这样做得好处是起到了解耦和封装的好处。然而有时候我们确实需要跨层访问，于是乎可以做一些退步，让某些层open。当然，这也是对结构的一种破坏。这种架构的一种典型反模式是，在某一层中只用少量的逻辑就到了下一层。解决办法是使用二八定律，如果大约20%的请求很简单的穿过该层，80%还是有些必要的逻辑，那么还是可以接受的，如果差距得大的话就得考虑将该层改为open。分层架构虽然简单但很实用，很多优秀的程序都多多少少用到这种模式。&lt;/p&gt;
&lt;h2 id=&quot;事件驱动架构event-driven-architecture&quot;&gt;事件驱动架构（Event-Driven Architecture）&lt;/h2&gt;
&lt;p&gt;事件驱动架构是使用高解耦、单一用途的事件处理组件来异步接收和处理事件的架构。事件驱动也是十分流行的架构，特别是在分布式、异步系统中。这种架构模式有两种拓扑结构，mediator和broker。mediator结构通常用在需要对一个事件组合多个步骤处理的情况，通过一个中心mediator来实现。broker结构通常用在需要将事件串在一起，并不通过中心化的mediator的情况。&lt;/p&gt;
&lt;h3 id=&quot;mediator结构&quot;&gt;Mediator结构&lt;/h3&gt;
&lt;p&gt;如下为mediator结构：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1591148/201904/1591148-20190412140855394-459113798.png&quot;/&gt;&lt;br/&gt;mediator结构包括4类组件：event queues， event mediator，event channels和event processors。事件首先到达event queue，通过event mediator接收的事件称为init event，然后经过编排组合，生成process event并异步地发送到event channels中。event processors将从event channels中取出事件并进行响应。event queue组件可以是消息队列、web服务端点等。需要注意的是，event mediator并不执行业务逻辑来编排process event，它只是知道处理init event的步骤，然后将每一步的执行事件异步发送到event channels。event mediator通常使用开源工具来实现（Spring Integration、Apache Camel或Mule ESB等）。event processor通常只处理单一的业务逻辑，并相互独立。&lt;/p&gt;
&lt;h3 id=&quot;broker结构&quot;&gt;Broker结构&lt;/h3&gt;
&lt;p&gt;如下为broker结构：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1591148/201904/1591148-20190412140908411-1134926159.png&quot;/&gt;&lt;br/&gt;broker结构与mediator结构的不同之处是没有event mediator组件。消息像一条链一样通过轻量级的message broker被分发。当你需要简单的事件处理流程，而不想使用事件编排中心的话，这是一个很好的选择。该结构包含两类主要组件：broker和event processors。broker包含了所有的event channels。与mediator结构不同，事件被一个event processor处理后会重新发布一个新的事件给broker，然后其他感兴趣的processor就会进行处理。&lt;br/&gt;事件驱动模型由于其天然的异步性，是一种相对复杂的模式。由于其异步性，很难保证事务的原子性。如果你的业务逻辑中很少有原子性的事务则可以选择它。除此之外，事件驱动架构的代码编写、维护、管理都相对困难。尽管事件驱动有如此多麻烦问题（编程要求高），但是其异步特性和事件处理的机制是很多程序的首选。&lt;/p&gt;
&lt;h2 id=&quot;微内核架构microkernel-architecture&quot;&gt;微内核架构(Microkernel Architecture)&lt;/h2&gt;
&lt;p&gt;微内核架构又称为插件架构，它能够像添加插件一样添加系统特性。想想众多IDE可以安装插件就知道它的好用了。图示如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1591148/201904/1591148-20190412140919809-790353982.png&quot;/&gt;&lt;br/&gt;它包含两类组件：core system和plug-in components。core system包含程序的最小化、最基本的系统功能。plug-in component是独立的插件，用来扩充系统功能的。core system需要知道如何获取到plug-in，并知道如何使用它们，一类通用的方式是一种plug-in注册表的方式，其中包含plug-in的基本信息，如何控制，数据格式等等。core system和plug-in component之间要有某种contract，这样core system就不要编写特定的代码来适配。&lt;br/&gt;微内核架构可以作为一种嵌入式的或者说作为其他架构模式一部分的架构模式，如果你不能一次性实现整个系统架构，那么微内核架构模式可以作为你的设计的一部分。&lt;/p&gt;
&lt;h2 id=&quot;微服务架构microservices-architecture&quot;&gt;微服务架构(Microservices Architecture)&lt;/h2&gt;
&lt;p&gt;微服务体系结构的每个组件都可以作为一个单独的单元进行部署，允许通过有效且精简的交付管道更容易地进行部署。微服务架构由于其实用性，成为代替单体架构、面向服务架构的选择，并获得了广泛的关注。图示如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1591148/201904/1591148-20190412140936561-685577370.png&quot;/&gt;&lt;br/&gt;service component包含了一到多个模块来实现单一的功能，设计service component的粒度是设计微服务架构的挑战之一。微服务将应用分离成多个部署单元，使每一个单元都可以单独开发、部署、测试等，极大提高了开发效率、可测试性、可维护性等，可能这也是众厂商追捧的原因。微服务是由面向服务(SOA)发展而来的，但是相比之下微服务通过简化服务概念、减少服务编排需求、简化服务接入等方法让其更轻量。作者根据3种不同的使用场景又将微服务划分为API REST-based topology、application REST-based topology、centralized messaging topology三种结构。但是总体架构还是上图的样子。&lt;/p&gt;
&lt;h2 id=&quot;基于空间的架构space-based-architecture&quot;&gt;基于空间的架构(Space-Based Architecture)&lt;/h2&gt;
&lt;p&gt;基于空间的架构模式也叫云架构模式(cloud architecture pattern)，是设计用来解决扩展性和并发性问题的。在互联网应用中，可以简单分为web server、application server和database server三类，请求从前到后经过三类服务器，当流量剧增时，三类服务器都可能遇到瓶颈，特别是database，最难扩展，且决定了并发量。此模式性通过去掉中心化database server，使用可复制的内存数据网格来实现高扩展性。程序数据都存储在内存中，在活动的process units中相互复制。process units可以在流量激增时动态启动来应对高负荷。架构图如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1591148/201904/1591148-20190412140945403-932235966.png&quot;/&gt;&lt;br/&gt;这种模式有两类主要组件：process unit和virtula Middleware。process unit中包含了应用程序的组件，小的web应用可能将所有内容塞到一个unit中，大的web应用可能将功能分开部署到不同的unit中。通常来说，process unit中包含了应用组件、内存数据网格和用于失效备援的异步的持久化存储组件。同时也包括一个复制引擎（replication engine）被virtual middleware使用来与其他unit交换数据。virtual middleware用于管理和通讯，包括了数据同步和请求处理的相关组件，有messaging grid、data grid、process grid和deploy manager。这些组件可以自己编码实现，也可以购买三方产品。&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li&gt;messaging grid：管理输入请求和会话（session）信息。该组件决定请求分发到那个unit中。&lt;/li&gt;
&lt;li&gt;data grid：此模式中最重要且起决定性作用的组件。当数据更新时，该组件与unit中的replication engine交互。由于messaging grid可能将请求分发到任意一个unit中，所以unit中的数据必须时一致的，在实际中，数据的交互是并行的异步的，并且速度非常快（当然，即便很快，也需要解决一致性问题）。&lt;/li&gt;
&lt;li&gt;processing grid：如果unit是中存放了程序的一部分内容，那么由该组件来选择转发到不同类型的unit。&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;deployment manager：管理unit的动态启动和关闭，该组件监视流量情况，动态执行操作。该组件是实现可变扩展性的决定性组件。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;最后，是一个架构模型的总结表，在程序设计中可以根据实际需求来选择不同的软件架构模式。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1591148/201904/1591148-20190412140951508-1665184461.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 12 Apr 2019 06:21:00 +0000</pubDate>
<dc:creator>zhangkangkang</dc:creator>
<og:description>软件架构模式 缺少规范架构的程序通常会变得紧耦合、脆弱、难以更改，缺少清晰的发展方向和愿景。这本小书用50多页介绍了常用的5种常见架构模式，相信不管是大牛还是萌新都会有所收获，特别是对我这种偏爱系统设</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangkangkang/p/10695752.html</dc:identifier>
</item>
<item>
<title>什么是消息队列？ - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/10695609.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/10695609.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;只有光头才能变强。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;2.9545454545455&quot;&gt;
&lt;p&gt;文本已收录至我的GitHub仓库，欢迎Star：&lt;a href=&quot;https://github.com/ZhongFuCheng3y/3y&quot; class=&quot;uri&quot;&gt;https://github.com/ZhongFuCheng3y/3y&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;公司用到的很多技术，自己之前都没学过(&lt;strong&gt;尬&lt;/strong&gt;)，于是只能慢慢补了。这次给大家写写我学习&lt;strong&gt;消息队列&lt;/strong&gt;的笔记，希望对大家有帮助。&lt;/p&gt;
&lt;h2 id=&quot;一什么是消息队列&quot;&gt;一、什么是消息队列？&lt;/h2&gt;
&lt;p&gt;消息队列不知道大家看到这个词的时候，会不会觉得它是一个比较&lt;strong&gt;高端&lt;/strong&gt;的技术，反正我是觉得它好像是挺牛逼的。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;消息队列，一般我们会简称它为MQ(Message Queue)，嗯，就是很直白的简写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们先不管消息(Message)这个词，来看看队列(Queue)。这一看，队列大家应该都熟悉吧。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;队列是一种&lt;strong&gt;先进先出&lt;/strong&gt;的数据结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a101441e804299?w=1080&amp;amp;h=226&amp;amp;f=jpeg&amp;amp;s=19678&quot; alt=&quot;先进先出&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在Java里边，已经实现了不少的队列了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a101441dd2c60e?w=632&amp;amp;h=1462&amp;amp;f=jpeg&amp;amp;s=225358&quot; alt=&quot;Java的队列实现类&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那为什么还需要消息队列(MQ)这种&lt;strong&gt;中间件&lt;/strong&gt;呢？？？其实这个问题，跟之前我学Redis的时候很像。Redis是一个以&lt;code&gt;key-value&lt;/code&gt;形式存储的内存数据库，明明我们可以使用类似HashMap这种实现类就可以达到类似的效果了，那还为什么要Redis？《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;amp;mid=2247484609&amp;amp;idx=1&amp;amp;sn=4c053236699fde3c2db1241ab497487b&amp;amp;chksm=ebd745c0dca0ccd682e91938fc30fa947df1385b06d6ae9bb52514967b0736c66684db2f1ac9&amp;amp;token=177635168&amp;amp;lang=zh_CN#rd&quot;&gt;Redis合集&lt;/a&gt;》&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;到这里，大家可以先猜猜为什么要用消息队列(MQ)这种&lt;strong&gt;中间件&lt;/strong&gt;，下面会继续补充。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;消息队列可以简单理解为：&lt;strong&gt;把要传输的数据放在队列中&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a10162acc71cfc?w=820&amp;amp;h=640&amp;amp;f=png&amp;amp;s=44686&quot; alt=&quot;图片来源：https://www.cloudamqp.com/blog/2014-12-03-what-is-message-queuing.html&quot;/&gt;)&lt;/p&gt;
&lt;p&gt;科普：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;把数据放到消息队列叫做&lt;strong&gt;生产者&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;从消息队列里边取数据叫做&lt;strong&gt;消费者&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;二为什么要用消息队列&quot;&gt;二、为什么要用消息队列？&lt;/h2&gt;
&lt;p&gt;为什么要用消息队列，也就是在问：用了消息队列有什么好处。我们看看以下的场景&lt;/p&gt;
&lt;h3 id=&quot;解耦&quot;&gt;2.1 解耦&lt;/h3&gt;
&lt;p&gt;现在我有一个系统A，系统A可以产生一个&lt;code&gt;userId&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a101441f4fd2a2?w=820&amp;amp;h=280&amp;amp;f=jpeg&amp;amp;s=22014&quot; alt=&quot;系统A可以产生一个UserId&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后，现在有系统B和系统C都需要这个&lt;code&gt;userId&lt;/code&gt;去做相关的操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a10144234598bf?w=1282&amp;amp;h=630&amp;amp;f=jpeg&amp;amp;s=66620&quot; alt=&quot;系统A给系统B和系统C传入userId这个值&quot;/&gt;&lt;/p&gt;
&lt;p&gt;写成伪代码可能是这样的：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class SystemA {

    // 系统B和系统C的依赖
    SystemB systemB = new SystemB();
    SystemC systemC = new SystemC();

    // 系统A独有的数据userId
    private String userId = &quot;Java3y&quot;;

    public void doSomething() {

        // 系统B和系统C都需要拿着系统A的userId去操作其他的事
        systemB.SystemBNeed2do(userId);
        systemC.SystemCNeed2do(userId);
        
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结构图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a101442401e9e1?w=1962&amp;amp;h=910&amp;amp;f=jpeg&amp;amp;s=189884&quot; alt=&quot;结构图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ok，一切平安无事度过了几个天。&lt;/p&gt;
&lt;p&gt;某一天，系统B的负责人告诉系统A的负责人，现在系统B的&lt;code&gt;SystemBNeed2do(String userId)&lt;/code&gt;这个接口不再使用了，&lt;strong&gt;让系统A别去调它了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;于是，系统A的负责人说&quot;好的，那我就不调用你了。&quot;，于是就&lt;strong&gt;把调用系统B接口的代码给删掉了&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public void doSomething() {

  // 系统A不再调用系统B的接口了
  //systemB.SystemBNeed2do(userId);
  systemC.SystemCNeed2do(userId);

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;又过了几天，系统D的负责人接了个需求，也需要用到系统A的userId，于是就跑去跟系统A的负责人说：&quot;老哥，我要用到你的userId，你调一下我的接口吧&quot;&lt;/p&gt;
&lt;p&gt;于是系统A说：&quot;没问题的，这就搞&quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a101443edf12d4?w=1308&amp;amp;h=860&amp;amp;f=jpeg&amp;amp;s=91039&quot; alt=&quot;系统A需要调用系统D的接口&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后，系统A的代码如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class SystemA {

    // 已经不再需要系统B的依赖了
    // SystemB systemB = new SystemB();
    
    // 系统C和系统D的依赖
    SystemC systemC = new SystemC();
    SystemD systemD = new SystemD();

    // 系统A独有的数据
    private String userId = &quot;Java3y&quot;;

    public void doSomething() {

       
        // 已经不再需要系统B的依赖了
        //systemB.SystemBNeed2do(userId);

        // 系统C和系统D都需要拿着系统A的userId去操作其他的事
        systemC.SystemCNeed2do(userId);
        systemD.SystemDNeed2do(userId);

    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;时间飞逝：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;又过了几天，系统E的负责人过来了，告诉系统A，需要userId。&lt;/li&gt;
&lt;li&gt;又过了几天，系统B的负责人过来了，告诉系统A，还是重新掉那个接口吧。&lt;/li&gt;
&lt;li&gt;又过了几天，系统F的负责人过来了，告诉系统A，需要userId。&lt;/li&gt;
&lt;li&gt;…...&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;于是系统A的负责人，每天都被这给骚扰着，改来改去，改来改去.......&lt;/p&gt;
&lt;p&gt;还有另外一个问题，调用系统C的时候，如果系统C挂了，系统A还得想办法处理。如果调用系统D时，由于网络延迟，请求超时了，那系统A是反馈&lt;code&gt;fail&lt;/code&gt;还是重试？？&lt;/p&gt;
&lt;p&gt;最后，系统A的负责人，觉得隔一段时间就改来改去，没意思，于是就跑路了。&lt;/p&gt;
&lt;p&gt;然后，公司招来一个大佬，大佬经过几天熟悉，上来就说：&lt;strong&gt;将系统A的userId写到消息队列中，这样系统A就不用经常改动了&lt;/strong&gt;。为什么呢？下面我们来一起看看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a10144caf1ea7e?w=1552&amp;amp;h=868&amp;amp;f=jpeg&amp;amp;s=109305&quot; alt=&quot;系统A将userId写到消息队列中，系统C和系统D从消息队列中拿数据&quot;/&gt;&lt;/p&gt;
&lt;p&gt;系统A将userId写到消息队列中，系统C和系统D从消息队列中拿数据。&lt;strong&gt;这样有什么好处&lt;/strong&gt;？&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;系统A&lt;strong&gt;只负责&lt;/strong&gt;把数据写到队列中，谁想要或不想要这个数据(消息)，&lt;strong&gt;系统A一点都不关心&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;即便现在系统D不想要userId这个数据了，系统B又突然想要userId这个数据了，都跟系统A无关，系统A一点代码都不用改。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;系统D拿userId不再经过系统A，而是从消息队列里边拿。&lt;strong&gt;系统D即便挂了或者请求超时，都跟系统A无关，只跟消息队列有关&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这样一来，系统A与系统B、C、D都&lt;strong&gt;解耦&lt;/strong&gt;了。&lt;/p&gt;
&lt;h3 id=&quot;异步&quot;&gt;2.2 异步&lt;/h3&gt;
&lt;p&gt;我们再来看看下面这种情况：系统A还是&lt;strong&gt;直接调用&lt;/strong&gt;系统B、C、D&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a10144cd4b67e4?w=1822&amp;amp;h=834&amp;amp;f=jpeg&amp;amp;s=112016&quot; alt=&quot;直接调接口&quot;/&gt;&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class SystemA {

    SystemB systemB = new SystemB();
    SystemC systemC = new SystemC();
    SystemD systemD = new SystemD();

    // 系统A独有的数据
    private String userId ;

    public void doOrder() {
     
        // 下订单
        userId = this.order();
        // 如果下单成功，则安排其他系统做一些事  
        systemB.SystemBNeed2do(userId);
        systemC.SystemCNeed2do(userId);
        systemD.SystemDNeed2do(userId);

    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;假设&lt;/strong&gt;系统A运算出userId具体的值需要50ms，调用系统B的接口需要300ms，调用系统C的接口需要300ms，调用系统D的接口需要300ms。那么这次请求就需要&lt;code&gt;50+300+300+300=950ms&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;并且我们得知，系统A做的是&lt;strong&gt;主要的业务&lt;/strong&gt;，而系统B、C、D是&lt;strong&gt;非主要&lt;/strong&gt;的业务。比如系统A处理的是&lt;strong&gt;订单下单&lt;/strong&gt;，而系统B是订单下单成功了，那发送一条短信告诉具体的用户此订单已成功，而系统C和系统D也是处理一些小事而已。&lt;/p&gt;
&lt;p&gt;那么此时，为了&lt;strong&gt;提高用户体验和吞吐量&lt;/strong&gt;，其实可以&lt;strong&gt;异步地&lt;/strong&gt;调用系统B、C、D的接口。所以，我们可以弄成是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a10144f412acee?w=1464&amp;amp;h=782&amp;amp;f=jpeg&amp;amp;s=113027&quot; alt=&quot;此时才用了100ms&quot;/&gt;&lt;/p&gt;
&lt;p&gt;系统A执行完了以后，将userId写到消息队列中，然后就直接返回了(至于其他的操作，则异步处理)。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;本来整个请求需要用950ms(同步)&lt;/li&gt;
&lt;li&gt;现在将调用其他系统接口异步化，只需要100ms(异步)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;(例子可能举得不太好，但我觉得说明到点子上就行了，见谅。)&lt;/p&gt;
&lt;h3 id=&quot;削峰限流&quot;&gt;2.3削峰/限流&lt;/h3&gt;
&lt;p&gt;我们再来一个场景，现在我们每个月要搞一次大促，大促期间的并发可能会很高的，比如每秒3000个请求。假设我们现在有两台机器处理请求，并且每台机器只能每次处理1000个请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a10144d09da912?w=1314&amp;amp;h=780&amp;amp;f=jpeg&amp;amp;s=85903&quot; alt=&quot;削峰的场景&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那多出来的1000个请求，可能就把我们&lt;strong&gt;整个系统给搞崩了&lt;/strong&gt;...所以，有一种办法，我们可以写到消息队列中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a1014549eb3b32?w=1380&amp;amp;h=766&amp;amp;f=jpeg&amp;amp;s=130809&quot; alt=&quot;写到消息队列中，系统从消息队列中拿到请求&quot;/&gt;&lt;/p&gt;
&lt;p&gt;系统B和系统C&lt;strong&gt;根据自己的能够处理的请求数去消息队列中拿数据&lt;/strong&gt;，这样即便有每秒有8000个请求，那只是把请求放在消息队列中，去拿消息队列的消息&lt;strong&gt;由系统自己去控制&lt;/strong&gt;，这样就不会把整个系统给搞崩。&lt;/p&gt;
&lt;h2 id=&quot;三使用消息队列有什么问题&quot;&gt;三、使用消息队列有什么问题？&lt;/h2&gt;
&lt;p&gt;经过我们上面的场景，我们已经可以发现，消息队列能做的事其实还是蛮多的。&lt;/p&gt;
&lt;p&gt;说到这里，我们先回到文章的开头，&quot;明明JDK已经有不少的队列实现了，我们还需要消息队列中间件呢？&quot;其实很简单，JDK实现的队列种类虽然有很多种，但是都是&lt;strong&gt;简单的内存队列&lt;/strong&gt;。为什么我说JDK是简单的内存队列呢？下面我们来看看要实现消息队列(中间件)&lt;strong&gt;可能要考虑什么问题&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;高可用&quot;&gt;3.1高可用&lt;/h2&gt;
&lt;p&gt;无论是我们使用消息队列来做解耦、异步还是削峰，消息队列&lt;strong&gt;肯定不能是单机&lt;/strong&gt;的。试着想一下，如果是单机的消息队列，万一这台机器挂了，那我们整个系统几乎就是不可用了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a101456d7902c5?w=1588&amp;amp;h=868&amp;amp;f=jpeg&amp;amp;s=150360&quot; alt=&quot;万一单机的队列挂掉了&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以，当我们项目中使用消息队列，都是得&lt;code&gt;集群/分布式&lt;/code&gt;的。要做&lt;code&gt;集群/分布式&lt;/code&gt;就必然希望该消息队列能够提供&lt;strong&gt;现成&lt;/strong&gt;的支持，而不是自己写代码手动去实现。&lt;/p&gt;
&lt;h3 id=&quot;数据丢失问题&quot;&gt;3.2 数据丢失问题&lt;/h3&gt;
&lt;p&gt;我们将数据写到消息队列上，系统B和C还没来得及取消息队列的数据，就挂掉了。&lt;strong&gt;如果没有做任何的措施，我们的数据就丢了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/12/16a10145718d46c0?w=1316&amp;amp;h=884&amp;amp;f=jpeg&amp;amp;s=158201&quot; alt=&quot;数据丢失问题&quot;/&gt;&lt;/p&gt;
&lt;p&gt;学过Redis的都知道，Redis可以将数据持久化磁盘上，万一Redis挂了，还能从磁盘从将数据恢复过来。同样地，消息队列中的数据也需要存在别的地方，这样才尽可能减少数据的丢失。&lt;/p&gt;
&lt;p&gt;那存在哪呢？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;磁盘？&lt;/li&gt;
&lt;li&gt;数据库？&lt;/li&gt;
&lt;li&gt;Redis？&lt;/li&gt;
&lt;li&gt;分布式文件系统？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;同步存储还是异步存储？&lt;/p&gt;
&lt;h3 id=&quot;消费者怎么得到消息队列的数据&quot;&gt;3.3消费者怎么得到消息队列的数据？&lt;/h3&gt;
&lt;p&gt;消费者怎么从消息队列里边得到数据？有两种办法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;生产者将数据放到消息队列中，消息队列有数据了，&lt;strong&gt;主动叫&lt;/strong&gt;消费者去拿(俗称push)&lt;/li&gt;
&lt;li&gt;消费者不断去&lt;strong&gt;轮训&lt;/strong&gt;消息队列，看看有没有新的数据，如果有就消费(俗称pull)&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;其他&quot;&gt;3.4其他&lt;/h3&gt;
&lt;p&gt;除了这些，我们在&lt;strong&gt;使用的时候&lt;/strong&gt;还得考虑各种的问题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;消息重复消费了怎么办啊？&lt;/li&gt;
&lt;li&gt;我想保证消息是&lt;strong&gt;绝对&lt;/strong&gt;有顺序的怎么做？&lt;/li&gt;
&lt;li&gt;……..&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;虽然消息队列给我们带来了那么多的好处，但同时我们发现引入消息队列也会&lt;strong&gt;提高系统的复杂性&lt;/strong&gt;。市面上现在已经有不少消息队列轮子了，每种消息队列都有自己的特点，&lt;strong&gt;选取哪种MQ还得好好斟酌&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;本文主要讲解了什么是消息队列，消息队列可以为我们带来什么好处，以及一个消息队列可能会涉及到哪些问题。希望给大家带来一定的帮助。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Kafka简明教程
&lt;/li&gt;
&lt;li&gt;消息队列使用的四种场景介绍，有图有解析，一看就懂
&lt;/li&gt;
&lt;li&gt;消息队列设计精要
&lt;/li&gt;
&lt;li&gt;消息队列的使用场景是怎样的
&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;乐于输出&lt;strong&gt;干货&lt;/strong&gt;的Java技术公众号：Java3y。公众号内有200多篇&lt;strong&gt;原创&lt;/strong&gt;技术文章、海量视频资源、精美脑图，不妨来&lt;strong&gt;关注&lt;/strong&gt;一下！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/3/12/169722e395ce2d12?w=258&amp;amp;h=258&amp;amp;f=jpeg&amp;amp;s=21338&quot; alt=&quot;帅的人都关注了&quot;/&gt;&lt;/p&gt;
&lt;p&gt;觉得我的文章写得不错，不妨点一下&lt;strong&gt;赞&lt;/strong&gt;！&lt;/p&gt;
</description>
<pubDate>Fri, 12 Apr 2019 05:50:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<og:description>前言 只有光头才能变强。 文本已收录至我的GitHub仓库，欢迎Star： 'https://github.com/ZhongFuCheng3y/3y' 公司用到的很多技术，自己之前都没学过( 尬 )</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/10695609.html</dc:identifier>
</item>
<item>
<title>程序员如何巧用Excel提高工作效率 - 周伟伟的博客</title>
<link>http://www.cnblogs.com/zwwhnly/p/10695533.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zwwhnly/p/10695533.html</guid>
<description>&lt;p&gt;作为一名程序员，我们可能很少使用Excel，但是公司的一些职能部门，比如HR，财务等，使用Excel真的是太熟练了，以至于一些系统开发出来，导入和导出功能是使用最频繁的，哈哈。&lt;/p&gt;
&lt;p&gt;其实在程序开发的过程中，有些场景，我们也可以借助于Excel来大大的提升工作效率，比如以下场景：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;业务给一批数据，需要你批量更新下数据库&lt;/li&gt;
&lt;li&gt;排查问题时，我们需要找出数据中的重复项&lt;/li&gt;
&lt;li&gt;我们需要将一些内容按某个分隔符拆分成多列内容，以匹配不同的列&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;接下来，我们详细讲解下具体的操作细节。&lt;/p&gt;
&lt;h2 id=&quot;拼接sql字符串&quot;&gt;1.拼接Sql字符串&lt;/h2&gt;
&lt;p&gt;在做开发的过程中，经常需要根据Excel中的数据去数据库查询，少量数据还可以去复制粘贴，大量数据时就需要将Excel中的数据拼接成自己需要的Sql，以提升工作效率。&lt;/p&gt;
&lt;h3 id=&quot;将某一列拼接成sql中的in条件&quot;&gt;1.1：将某一列拼接成Sql中的In条件&lt;/h3&gt;
&lt;p&gt;假设现在有如下的Excel数据，我需要从数据库中查询出这些门店的数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201806/424537-20180629170114050-505251168.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;操作方法如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201806/424537-20180629174937895-1799936790.gif&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将生成的一列数据复制到Visual Studito Code中，进行替换即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201807/424537-20180704094646748-700680582.gif&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;将某一列拼接成c中的list&quot;&gt;1.2：将某一列拼接成C#中的List&lt;/h3&gt;
&lt;p&gt;假设现在有如下的Excel数据，我需要将这些值写在C#中的List中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201806/424537-20180629170114050-505251168.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;操作方法如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201807/424537-20180710124515648-1653913225.gif&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将生成的一列数据复制到Visual Studito Code中，进行替换即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201807/424537-20180710124855349-1312128345.gif&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;拼接sql语句&quot;&gt;1.3：拼接Sql语句&lt;/h3&gt;
&lt;p&gt;你想想，哪天你正在工作呢，业务扔过来一个Excel，你一脸懵逼，以下是你们的对话：&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;业务：帮我把系统里的某个字段改成Excel里的可以吗？我当时维护错了&lt;/p&gt;
&lt;p&gt;你：你可以在系统里修改啊&lt;/p&gt;
&lt;p&gt;业务：这么多数据，你让我一个一个改啊？而且很急，而且你还要考虑系统好用性，嘚吧嘚一大堆理由&lt;/p&gt;
&lt;p&gt;你：内心深处，你是拒绝的，这明明是业务工作中的失误，现在却要你这个程序员来善后，事实上，你说：好的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;既然答应了，就得想着咋处理，数据如果只有几条，你复制粘贴还可以，如果是成千上万条呢，复制粘贴肯定不现实，累死你不说，还容易出错。&lt;/p&gt;
&lt;p&gt;这时我们就可以借助于Excel来快速的拼接Sql。&lt;/p&gt;
&lt;p&gt;假如有如下的Sql语句，现需要将Where条件中的StoreCode的值替换为Excel中的值。&lt;/p&gt;
&lt;pre class=&quot;mssql&quot;&gt;
&lt;code&gt;SELECT  st.StoreCode ,
        st.StoreName ,
        s.SellerName ,
        so.SellerOrgName
FROM    dbo.Fct_Store AS st
        INNER JOIN dbo.Fct_Seller AS s ON s.Disabled = 0
                                          AND st.SellerCode = s.SellerCode
        INNER JOIN dbo.Config_SellerOrg AS so ON so.Disabled = 0
                                                 AND s.SellerOrgCode = so.SellerOrgCode
WHERE   st.Disabled = 0
        AND st.StoreCode = '10000196';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;按照1.1和1.2中的方式，将Sql语句复制到Excel中，提示如下信息(&lt;strong&gt;如果语句长度少的话，不会出现&lt;/strong&gt;)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201807/424537-20180710130632163-999419523.gif&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201807/424537-20180710130615314-1619849783.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时，就需要用到Excel中的&lt;strong&gt;CONCATENATE()&lt;/strong&gt;函数,如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201807/424537-20180710132207999-1586782664.gif&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;查找重复项&quot;&gt;2.查找重复项&lt;/h2&gt;
&lt;p&gt;在平时的开发工作中，我们有时会需要从Excel中查找出重复的数据，以便清理业务数据。&lt;/p&gt;
&lt;p&gt;假如现在有如下图所示的文档，现需要找出&lt;strong&gt;“店铺编码”&lt;/strong&gt;列的重复数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201806/424537-20180627202238194-1522797725.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;新建规则&quot;&gt;2.1新建规则&lt;/h3&gt;
&lt;p&gt;选中列“店铺编码”,然后依次点击菜单：&lt;strong&gt;开始--&amp;gt;条件格式--&amp;gt;突出显示单元格规则--&amp;gt;重复值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201806/424537-20180627202643071-1471606481.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;设置重复值格式&quot;&gt;2.2设置重复值格式&lt;/h3&gt;
&lt;p&gt;在“重复值”弹出框中，按照默认的样式点击确定，会发现重复项被标记出来&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201806/424537-20180627202824338-1106750359.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201806/424537-20180627202954547-1629622100.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;筛选重复数据&quot;&gt;2.3筛选重复数据&lt;/h3&gt;
&lt;p&gt;点击菜单：&lt;strong&gt;数据--&amp;gt;筛选&lt;/strong&gt;，然后按照单元格颜色筛选，就可以只查看重复的数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201806/424537-20180627203248823-158958000.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;筛选后的结果如下所示（只显示了重复的数据，达到了我们的目的）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201806/424537-20180627203305740-1407608833.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;清除规则&quot;&gt;2.4清除规则&lt;/h3&gt;
&lt;p&gt;如果想恢复原来的数据，可以点击&lt;strong&gt;开始--&amp;gt;条件格式--&amp;gt;清除规则--&amp;gt;清除整个工作表的规则&lt;/strong&gt;,清除掉该规则。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201806/424537-20180627203533960-410884744.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;单元格内容拆分&quot;&gt;3.单元格内容拆分&lt;/h2&gt;
&lt;p&gt;一般情况下，开发在记录一些日志时，都会比较简单，如：1274206,商品1274206已淘汰，但是发给到运营时，运营一般都关注的比较细，需要明确的表头。&lt;/p&gt;
&lt;p&gt;以下为程序中开发记录的日志：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201810/424537-20181029155508835-1431090830.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是发给运营时，运营需要明确的表头，如：商品编码，失败原因&lt;/p&gt;
&lt;p&gt;此时就需要将单元格的内容根据,拆分成多个单元格，操作步骤如下：&lt;/p&gt;
&lt;h3 id=&quot;选中需要拆分的数据点击数据--分列&quot;&gt;3.1.选中需要拆分的数据，点击数据--分列&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201810/424537-20181029155842520-1771577075.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;选中单元框分隔符号点击下一步&quot;&gt;3.2选中单元框：分隔符号，点击下一步&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201810/424537-20181029160542811-474712352.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;分隔符号选中逗号点击下一步然后点击完成&quot;&gt;3.3分隔符号选中逗号，点击下一步，然后点击完成&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201810/424537-20181029160825584-897774735.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201810/424537-20181029160901781-1470457504.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时会看到单元格的内容自动拆分成两列，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/424537/201810/424537-20181029161017260-1391003.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;永久取消超链接&quot;&gt;4.永久取消超链接&lt;/h2&gt;
&lt;p&gt;在使用Excel的过程中，Excel会自动将网址转换为超链接，&lt;strong&gt;操作不当，容易误点&lt;/strong&gt;，引起不必要的错误。&lt;/p&gt;
&lt;p&gt;那么如何在Excel 2013里永久取消超链接呢？&lt;/p&gt;
&lt;p&gt;1.依次打开菜单文件--选项，弹出Excel 选项弹出框&lt;/p&gt;
&lt;p&gt;2.选中左侧菜单&quot;校对&quot;，点击&quot;自动更正选项&quot;&lt;/p&gt;
&lt;p&gt;3.取消勾选&quot;Internet 及网络路径替换为超链接&quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201808/424537-20180806145638106-711353035.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/424537/201808/424537-20180806145701421-731355650.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 12 Apr 2019 05:36:00 +0000</pubDate>
<dc:creator>周伟伟的博客</dc:creator>
<og:description>作为一名程序员，我们可能很少使用Excel，但是公司的一些职能部门，比如HR，财务等，使用Excel真的是太熟练了，以至于一些系统开发出来，导入和导出功能是使用最频繁的，哈哈。 其实在程序开发的过程中</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zwwhnly/p/10695533.html</dc:identifier>
</item>
<item>
<title>集合源码分析[3]-ArrayList 源码分析 - lonecloud</title>
<link>http://www.cnblogs.com/lonecloud/p/10695485.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lonecloud/p/10695485.html</guid>
<description>&lt;blockquote readability=&quot;1.1904761904762&quot;&gt;
&lt;p&gt;历史文章：&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/lonecloud/p/10585347.html&quot;&gt;Collection 源码分析&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/lonecloud/p/10692230.html&quot;&gt;AbstractList 源码分析&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;
&lt;code&gt;ArrayList是一个数组队列，相当于动态数组，与Java的数组对比，他的容量可以动态改变。&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/917948/201904/917948-20190412132601666-530424457.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ArrayList继承AbstractList&lt;/li&gt;
&lt;li&gt;实现了&lt;code&gt;List&lt;/code&gt;,&lt;code&gt;RandomAccess&lt;/code&gt;,&lt;code&gt;Cloneable&lt;/code&gt;,&lt;code&gt;Serializable&lt;/code&gt;接口&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;基于数组实现速度快&lt;/li&gt;
&lt;li&gt;实现了&lt;code&gt;RandomAccess&lt;/code&gt;接口，提供了随机访问功能&lt;/li&gt;
&lt;li&gt;实现了&lt;code&gt;Cloneable&lt;/code&gt;接口，能被克隆&lt;/li&gt;
&lt;li&gt;实现了&lt;code&gt;Serializable&lt;/code&gt;接口，支持序列化传输&lt;/li&gt;
&lt;li&gt;非线程安全(ps:线程安全类：CopyOnWriteArrayList)&lt;/li&gt;
&lt;li&gt;适用于频繁查询和获取数据&lt;/li&gt;
&lt;li&gt;查询效率在众多List中效率还是非常不错&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;构造函数&quot;&gt;构造函数&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public ArrayList();//无元素默认为0，有元素初始化默认容量为10
public ArrayList(Collection&amp;lt;? extends E&amp;gt; c);//默认为c这个集合的list(浅拷贝)
public ArrayList(int initialCapacity);//设置一个初始化为initialCapacity集合&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    public ArrayList(Collection&amp;lt;? extends E&amp;gt; c) {
        elementData = c.toArray();
        if ((size = elementData.length) != 0) {
            // c.toArray might (incorrectly) not return Object[] (see 6260652)
            //解决bug问题，由于其c.toArray()可能出现返回值不为Object[]的错误，所以采用如下方法
            if (elementData.getClass() != Object[].class)
                //使用数组拷贝来进行
                elementData = Arrays.copyOf(elementData, size, Object[].class);
        } else {
            // replace with empty array.
            this.elementData = EMPTY_ELEMENTDATA;
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在这个方法中出现&lt;code&gt;if (elementData.getClass() != Object[].class)&lt;/code&gt;这样一组判断，查阅资料发现，这是一个bug才这么判断的&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6260652&quot;&gt;地址&lt;/a&gt;,改问题已经在JDK9已经进行了修复了。&lt;/p&gt;
&lt;h2 id=&quot;成员变量&quot;&gt;成员变量&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    private static final long serialVersionUID = 8683452581122892189L;

    /**
     * 默认初始化容量10
     */
    private static final int DEFAULT_CAPACITY = 10;

    /**
     * 共享的空数据容器
     */
    private static final Object[] EMPTY_ELEMENTDATA = {};

    /**
     * 共享空数据容器
     */
    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};

    /**
     * 缓存数据集合
     */
    transient Object[] elementData; // non-private to simplify nested class access

    /**
     * 容器数据集大小
     *
     * @serial
     */
    private int size;
    /**
     * 该容器能够承受的最大容量
     * 为什么是Integer.MAX_VALUE - 8;
     *  因为有些VM虚拟机会在一个数组中存储一些头部信息，所以采用这个值
     * The maximum size of array to allocate.
     * Some VMs reserve some header words in an array.
     * Attempts to allocate larger arrays may result in
     * OutOfMemoryError: Requested array size exceeds VM limit
     */
    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;值得注意的点：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;MAX_ARRAY_SIZE&lt;/code&gt;设置为&lt;code&gt;Integer.MAX_VALUE - 8&lt;/code&gt;是因为有些VM虚拟机会在数组中存储一些头部信息，从而占用一些空间，所以-8&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;常用方法&quot;&gt;常用方法&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/917948/201904/917948-20190412132614419-1642285406.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;值得注意的方法&quot;&gt;值得注意的方法&lt;/h2&gt;
&lt;h3 id=&quot;trimtosize&quot;&gt;trimToSize()：&lt;/h3&gt;
&lt;p&gt;缩小容器大小让容器释放多余的空间,会触发一次数组的变化&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    /**
     * 缩小容器大小
     * 例如当你一开始创建了一个100个的List但是你只使用了10个，想将这个容器缩减为10个
     */
    public void trimToSize() {
        //这个参数和我们并发控制的时候version一个味道，用于判断是否并发修改的标志1
        modCount++;
        if (size &amp;lt; elementData.length) {
            elementData = (size == 0)
              ? EMPTY_ELEMENTDATA
              : Arrays.copyOf(elementData, size);
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;clone&quot;&gt;clone():&lt;/h3&gt;
&lt;p&gt;返回数据的浅克隆的实例&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    /**
     * 返回数据的浅克隆的实例
     *
     * @return a clone of this &amp;lt;tt&amp;gt;ArrayList&amp;lt;/tt&amp;gt; instance
     */
    public Object clone() {
        try {
            //调用父类的克隆方法-&amp;gt;Object的克隆方法
            ArrayList&amp;lt;?&amp;gt; v = (ArrayList&amp;lt;?&amp;gt;) super.clone();
            //拷贝数组，注意是直接通过Arrays的copyOf所以为浅克隆
            v.elementData = Arrays.copyOf(elementData, size);
            //设置并发version
            v.modCount = 0;
            return v;
        } catch (CloneNotSupportedException e) {
            //克隆异常则抛出error
            // this shouldn't happen, since we are Cloneable
            throw new InternalError(e);
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;toarray&quot;&gt;toArray():&lt;/h3&gt;
&lt;p&gt;同样为浅拷贝，拷贝出来的数组还是会被改变的，该方法返回的为Object[]数组&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;  /**
     * 同样为浅拷贝，拷贝出来的数组还是会被改变的
     * 将List转换成数组
     * Demo[] cloneArr = (Demo[]) demos.toArray(); //ERROR
     *
     * @return an array containing all of the elements in this list in
     *         proper sequence
     */
    public Object[] toArray() {
        return Arrays.copyOf(elementData, size);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;add方法&quot;&gt;add方法&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    /**
     * 追加一个元素在列表的最后面
     *
     * @param e element to be appended to this list
     * @return &amp;lt;tt&amp;gt;true&amp;lt;/tt&amp;gt; (as specified by {@link Collection#add})
     */
    public boolean add(E e) {
        //这里会导致其并发版本+1，
        // 因为需要先确认容器大小操作，并确定是否需要扩容。
        //对数据有修改，因而其并发版本也就会+1
        ensureCapacityInternal(size + 1);  // Increments modCount!!
        //设置值
        elementData[size++] = e;
        return true;
    }   
    /**
     * 在index位置后插入元素，并移动后面元素的位置
     * 1. 需要对index后面的所有的元素index+1，需要拷贝工作产生
     * 2. 如果你的List中有大量的这样的插入工作建议采用
     * @see LinkedList
     *
     * @param index index at which the specified element is to be inserted
     * @param element element to be inserted
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public void add(int index, E element) {
        //校验index
        rangeCheckForAdd(index);
        //确定扩容权限
        ensureCapacityInternal(size + 1);  // Increments modCount!!
        //数组拷贝，耗时工作
        System.arraycopy(elementData, index, elementData, index + 1,
                         size - index);
        //赋值
        elementData[index] = element;
        //长度
        size++;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;该方法每次都要确定容器大小，会导致并发版本的count+1&lt;/li&gt;
&lt;li&gt;add 方法有两个
&lt;ol&gt;&lt;li&gt;add(E e)：直接将数据插入到List的尾部&lt;/li&gt;
&lt;li&gt;add(int index,E e)：将数据插入到index后面&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;如果是插入，则会导致数组进行复制操作，由于ArrayList基于数组，所以会导致数组复制，而数组复制必定是一个耗时的操作&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;remove&quot;&gt;remove()&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    public E remove(int index) {
        //校验
        rangeCheck(index);
        //并发参数+1
        modCount++;
        //获取旧值
        E oldValue = elementData(index);
        //移动的长度为=数组长度-需要删除元素下标-1
        int numMoved = size - index - 1;
        if (numMoved &amp;gt; 0)
            System.arraycopy(elementData, index+1, elementData, index,
                             numMoved);
        //让gc回收这个数据的内存
        elementData[--size] = null; // clear to let GC do its work
        //返回旧值
        return oldValue;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;同样删除会导致数组复制&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;sublist&quot;&gt;subList&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;该方法主要用于将数组进行分割，对于数组分割后，其实该数组为浅拷贝操作，如果在该SubList中操作相关数据，将会导致ArrayList中的数据改变！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;public List&amp;lt;E&amp;gt; subList(int fromIndex, int toIndex) {
    subListRangeCheck(fromIndex, toIndex, size);
    return new SubList(this, 0, fromIndex, toIndex);
}&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;规则&quot;&gt;规则&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;如果其数组需要进行扩容，则会扩容为原数组的1.5倍&lt;/li&gt;
&lt;li&gt;如果用户指定了容器的大小，且用于指定的数值大于容器的最小容量，则将用于容量作为该容器容量&lt;/li&gt;
&lt;li&gt;如果容器容量扩容后大于&lt;code&gt;Integer.MAX_VALUE - 8&lt;/code&gt;,则会尝试扩容为&lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;大小&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;解析&quot;&gt;解析&lt;/h2&gt;
&lt;ol readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;确定minCapacity值是否比容器中的数据容量大&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;如果大则扩容，否则什么也不做&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩容&lt;/p&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;如果minCapacity比newCapacity小则直接使用minCapacity作为扩容容量&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果其数组个数大于最大的数组的长度，则尝试使用Integer.MAX_VALUE作为数组的容器大小&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;源码解析&quot;&gt;源码解析&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    /**
     * 1.确定minCapacity值是否比容器中的数据容量大
     * 2.如果大则扩容，否则什么也不做
     * @param minCapacity
     */
    private void ensureExplicitCapacity(int minCapacity) {
        modCount++;

        // overflow-conscious code
        if (minCapacity - elementData.length &amp;gt; 0)
            grow(minCapacity);
    }
    /**
     * Increases the capacity to ensure that it can hold at least the
     * number of elements specified by the minimum capacity argument.
     * 扩容
     * 1. 如果minCapacity比newCapacity小则直接使用minCapacity作为扩容容量
     * 2. 如果其数组个数大于最大的数组的长度，则尝试使用Integer.MAX_VALUE作为数组的容器大小
     * @param minCapacity the desired minimum capacity
     */
    private void grow(int minCapacity) {
        // overflow-conscious code
        int oldCapacity = elementData.length;
        //新容器容量扩容为现在容器的容量的1.5倍
        //eg 旧10个-&amp;gt;新15个
        int newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1);
        //看看谁大
        if (newCapacity - minCapacity &amp;lt; 0)
            //如果min比new小则直接复制min
            newCapacity = minCapacity;
        //如果新的容器比最大的数组大小还要打
        if (newCapacity - MAX_ARRAY_SIZE &amp;gt; 0)
            //只能复制为最大容器大小，但是可能会抛出oom
            newCapacity = hugeCapacity(minCapacity);
        // minCapacity is usually close to size, so this is a win:
        elementData = Arrays.copyOf(elementData, newCapacity);
    }
    /**
     * 大数组容器扩容
     * @param minCapacity
     * @return
     */
    private static int hugeCapacity(int minCapacity) {
        //校验参数合法性
        if (minCapacity &amp;lt; 0) // overflow
            throw new OutOfMemoryError();
        return (minCapacity &amp;gt; MAX_ARRAY_SIZE) ?
            Integer.MAX_VALUE :
            MAX_ARRAY_SIZE;
    }&lt;/code&gt;
&lt;/pre&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;由于Java默认序列化以及反序列化的时候回分别调用对应的writeObject方法以及readObject()方法，所以以下将对这两个方法进行分析。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为什么需要自定义序列化规则&quot;&gt;6.1 为什么需要自定义序列化规则&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;由于在ArrayList中的elementData数组中可能存在一些空的元素(由于ArrayList扩容机制)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;源码分析&quot;&gt;6.2 源码分析&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;序列化操作：
&lt;ol&gt;&lt;li&gt;ArrayList内部存储数据元素为&lt;code&gt;transient&lt;/code&gt;不会被序列化&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    /**
     * 缓存数据集合
     */
    transient Object[] elementData; // non-private to simplify nested class access&lt;/code&gt;
&lt;/pre&gt;
&lt;ol readability=&quot;10.5&quot;&gt;&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;如何支持序列化操作&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   1. 序列化数量
   2. 获取数据数组，然后使用for循环一个一个序列化该对象到数据中。&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    /**
     * Save the state of the &amp;lt;tt&amp;gt;ArrayList&amp;lt;/tt&amp;gt; instance to a stream (that
     * is, serialize it).
     * 保证其可以被序列化到对象中
     *
     * @serialData The length of the array backing the &amp;lt;tt&amp;gt;ArrayList&amp;lt;/tt&amp;gt;
     *             instance is emitted (int), followed by all of its elements
     *             (each an &amp;lt;tt&amp;gt;Object&amp;lt;/tt&amp;gt;) in the proper order.
     */
    private void writeObject(java.io.ObjectOutputStream s)
        throws java.io.IOException{
        // Write out element count, and any hidden stuff
        //数据被序列化的数量
        int expectedModCount = modCount;
        //使用默认的模式进行序列化，只序列化非静态化变量以及非transient修饰的数据
        s.defaultWriteObject();

        // Write out size as capacity for behavioural compatibility with clone()
        //写入长度
        s.writeInt(size);

        // Write out all elements in the proper order.
        for (int i=0; i&amp;lt;size; i++) {
            //写入每一个object数据
            s.writeObject(elementData[i]);
        }
        //如果发现序列化的modCount与expectedModCount可能是并发导致
        if (modCount != expectedModCount) {
            throw new ConcurrentModificationException();
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;11&quot;&gt;
&lt;p&gt;如何进行的反序列化&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;重新创建List，然后读取长度以及多个对象对对象进行相关赋值操作&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    /**
     * Reconstitute the &amp;lt;tt&amp;gt;ArrayList&amp;lt;/tt&amp;gt; instance from a stream (that is,
     * deserialize it).
     * 反序列化数据
     */
    private void readObject(java.io.ObjectInputStream s)
        throws java.io.IOException, ClassNotFoundException {
        //设置默认的数组长度为空数组长度
        elementData = EMPTY_ELEMENTDATA;

        // Read in size, and any hidden stuff
        //使用默认的模式进行序列化，只序列化非静态化变量以及非transient修饰的数据
        s.defaultReadObject();

        // Read in capacity
        //读取list长度
        s.readInt(); // ignored

        if (size &amp;gt; 0) {
            // be like clone(), allocate array based upon size not capacity
            //开始计算并克隆
            int capacity = calculateCapacity(elementData, size);
            SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, capacity);
            //确定数组长度是否够
            ensureCapacityInternal(size);
            //进行数据读取
            Object[] a = elementData;
            // Read in all elements in the proper order.
            for (int i=0; i&amp;lt;size; i++) {
                a[i] = s.readObject();
            }
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;foreach&quot;&gt;forEach()&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;lambda循环方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    /**
     * JDK新增方法 ForEach方法
     * @param action
     */
    @Override
    public void forEach(Consumer&amp;lt;? super E&amp;gt; action) {
        //校验lambda不为空
        Objects.requireNonNull(action);
        //并发version版本统计
        final int expectedModCount = modCount;
        @SuppressWarnings(&quot;unchecked&quot;)
        final E[] elementData = (E[]) this.elementData;
        final int size = this.size;
        //循环每次判断一下并发参数是否进行了修改，如果进行了修改则直接退出for循环
        for (int i=0; modCount == expectedModCount &amp;amp;&amp;amp; i &amp;lt; size; i++) {
            action.accept(elementData[i]);
        }
        //并抛出并发异常
        if (modCount != expectedModCount) {
            throw new ConcurrentModificationException();
        }
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;spliterator&quot;&gt;spliterator&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;该方法用于返回进行并发计算时候的分割器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * Creates a &amp;lt;em&amp;gt;&amp;lt;a href=&quot;Spliterator.html#binding&quot;&amp;gt;late-binding&amp;lt;/a&amp;gt;&amp;lt;/em&amp;gt;
 * and &amp;lt;em&amp;gt;fail-fast&amp;lt;/em&amp;gt; {@link Spliterator} over the elements in this
 * list.
 *
 * &amp;lt;p&amp;gt;The {@code Spliterator} reports {@link Spliterator#SIZED},
 * {@link Spliterator#SUBSIZED}, and {@link Spliterator#ORDERED}.
 * Overriding implementations should document the reporting of additional
 * characteristic values.
 * 并发分割方法
 * 懒加载加入，只有当数据
 * @return a {@code Spliterator} over the elements in this list
 * @since 1.8
 */
@Override
public Spliterator&amp;lt;E&amp;gt; spliterator() {
    /**
     *  1. 参数1 this
     *  2. origin
     *  3. fence 当使用的时候才进行初始化
     *  4. 并发参数
     */


    return new ArrayListSpliterator&amp;lt;&amp;gt;(this, 0, -1, 0);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;removeif方法&quot;&gt;removeIf方法&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;lambda 移除符合某个规则的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;/**
     * liambad方法移除元素
     * @param filter
     * @return
     */
    @Override
    public boolean removeIf(Predicate&amp;lt;? super E&amp;gt; filter) {
        Objects.requireNonNull(filter);
        // figure out which elements are to be removed
        // any exception thrown from the filter predicate at this stage
        // will leave the collection unmodified
        int removeCount = 0;
        //使用这玩意来统计存在的位置
        final BitSet removeSet = new BitSet(size);
        final int expectedModCount = modCount;
        final int size = this.size;
        for (int i=0; modCount == expectedModCount &amp;amp;&amp;amp; i &amp;lt; size; i++) {
            @SuppressWarnings(&quot;unchecked&quot;)
            final E element = (E) elementData[i];
            if (filter.test(element)) {
                removeSet.set(i);
                removeCount++;
            }
        }
        if (modCount != expectedModCount) {
            throw new ConcurrentModificationException();
        }

        // shift surviving elements left over the spaces left by removed elements
        final boolean anyToRemove = removeCount &amp;gt; 0;
        if (anyToRemove) {
            //新数组的大小为之前的数组长度-需要移除元素的个数
            final int newSize = size - removeCount;
            //执行清除工作
            for (int i=0, j=0; (i &amp;lt; size) &amp;amp;&amp;amp; (j &amp;lt; newSize); i++, j++) {
                i = removeSet.nextClearBit(i);
                elementData[j] = elementData[i];
            }
            //释放gc
            for (int k=newSize; k &amp;lt; size; k++) {
                elementData[k] = null;  // Let gc do its work
            }
            this.size = newSize;
            //并发version检查
            if (modCount != expectedModCount) {
                throw new ConcurrentModificationException();
            }
            //并发值+1
            modCount++;
        }

        return anyToRemove;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;arraylistspliterator&quot;&gt;ArrayListSpliterator&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;其为并发分割器，用于我们使用并发调用&lt;strong&gt;parallelStream&lt;/strong&gt;方法时候调用该方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;static final class ArrayListSpliterator&amp;lt;E&amp;gt; implements Spliterator&amp;lt;E&amp;gt; {

    private final ArrayList&amp;lt;E&amp;gt; list;
    private int index; // current index, modified on advance/split
    private int fence; // -1 until used; then one past last index
    private int expectedModCount; // initialized when fence set

    /** Create new spliterator covering the given  range */
    ArrayListSpliterator(ArrayList&amp;lt;E&amp;gt; list, int origin, int fence,
                         int expectedModCount) {
        this.list = list; // OK if null unless traversed
        this.index = origin;
        this.fence = fence;
        this.expectedModCount = expectedModCount;
    }

    /**
     * 当获取的时候才进行fence的初始化操作
     * @return
     */
    private int getFence() { // initialize fence to size on first use
        int hi; // (a specialized variant appears in method forEach)
        ArrayList&amp;lt;E&amp;gt; lst;
        if ((hi = fence) &amp;lt; 0) {
            //之前的数组为空则说明没有进行分割，则从0开始
            if ((lst = list) == null)
                hi = fence = 0;
            else {
                //否则则
                expectedModCount = lst.modCount;
                //则将该值赋值为lst的长度
                hi = fence = lst.size;
            }
        }
        return hi;
    }

    /**
     * 尝试分割
     * 1、总长度为数组长度
     * 2、分割成两份
     * 3、二分法分割
     * 3、中间值为数组长度+分割后的数组长度，就是二分法啦
     * @return
     */
    public ArrayListSpliterator&amp;lt;E&amp;gt; trySplit() {
        int hi = getFence(), lo = index, mid = (lo + hi) &amp;gt;&amp;gt;&amp;gt; 1;
        return (lo &amp;gt;= mid) ? null : // divide range in half unless too small
            new ArrayListSpliterator&amp;lt;E&amp;gt;(list, lo, index = mid,
                                        expectedModCount);
    }

    /**
     * 并发执行操作
     * @param action
     * @return
     */
    public boolean tryAdvance(Consumer&amp;lt;? super E&amp;gt; action) {
        if (action == null)
            throw new NullPointerException();
        int hi = getFence(), i = index;
        //如果没有超过这个分割的长度则继续操作否则返回false
        if (i &amp;lt; hi) {
            index = i + 1;
            @SuppressWarnings(&quot;unchecked&quot;) E e = (E)list.elementData[i];
            action.accept(e);
            //如果出现了并发改变，则抛出异常
            if (list.modCount != expectedModCount)
                throw new ConcurrentModificationException();
            return true;
        }
        return false;
    }

    /**
     * 并发ForEach输出
     * @param action
     */
    public void forEachRemaining(Consumer&amp;lt;? super E&amp;gt; action) {
        int i, hi, mc; // hoist accesses and checks from loop
        ArrayList&amp;lt;E&amp;gt; lst; Object[] a;
        if (action == null)
            throw new NullPointerException();
        if ((lst = list) != null &amp;amp;&amp;amp; (a = lst.elementData) != null) {
            if ((hi = fence) &amp;lt; 0) {
                mc = lst.modCount;
                hi = lst.size;
            }
            else
                mc = expectedModCount;
            if ((i = index) &amp;gt;= 0 &amp;amp;&amp;amp; (index = hi) &amp;lt;= a.length) {
                for (; i &amp;lt; hi; ++i) {
                    @SuppressWarnings(&quot;unchecked&quot;) E e = (E) a[i];
                    action.accept(e);
                }
                if (lst.modCount == mc)
                    return;
            }
        }
        throw new ConcurrentModificationException();
    }

    public long estimateSize() {
        return (long) (getFence() - index);
    }

    public int characteristics() {
        return Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;
    }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;使用迭代器进行遍历&quot;&gt;8.1 使用迭代器进行遍历&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Iterator&amp;lt;Double&amp;gt; iterator = list.iterator();
while (iterator.hasNext()){
   Double next = iterator.next();
   System.out.println(next);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;使用fori进行遍历&quot;&gt;使用fori进行遍历&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;for (int i = 0; i &amp;lt; list.size(); i++) {
    System.out.println(list.get(i));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;使用for进行遍历&quot;&gt;8.3 使用for进行遍历&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;for (Double next : list) {
  System.out.println(next);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;使用流进行访问jdk1.8&quot;&gt;8.4 使用流进行访问(JDK1.8)&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;list.forEach(System.out::println);&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;以上几种模式的效率比较&quot;&gt;8.5 以上几种模式的效率比较&lt;/h2&gt;
&lt;p&gt;测试代码如下&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package cn.lonecloud;

import java.time.Duration;
import java.time.Instant;
import java.util.*;

/**
 * @author lonecloud
 * @version v1.0
 * @date 2019/4/3 19:56
 */
public class ListTest {
    public static void main(String[] args) {
        int len=20000000;
        List&amp;lt;Integer&amp;gt; list=new ArrayList&amp;lt;&amp;gt;(len);
        for (int i = 0; i &amp;lt; len; i++) {
            list.add(i);
        }
        test(list);
    }
    public static void test(List&amp;lt;Integer&amp;gt; list){

        long itrBegin = System.currentTimeMillis();
        //1. 使用迭代器
        Iterator&amp;lt;Integer&amp;gt; iterator = list.iterator();
        Integer a=0;
        while (iterator.hasNext()){
            Integer next = iterator.next();
            a=next;
        }
        long itrEnd=System.currentTimeMillis();
        long foriStart=System.currentTimeMillis();
        //2. fori
        for (int i = 0; i &amp;lt; list.size(); i++) {
            a=list.get(i);
        }
        long foriEnd=System.currentTimeMillis();

        long forStart=System.currentTimeMillis();
        //3. for
        for (Integer next : list) {
            a=next;
        }
        long forEnd=System.currentTimeMillis();

        long streamstart=System.currentTimeMillis();

        //4. stream
        list.forEach((value)-&amp;gt;{
            Integer b=value;
        });

        long streamEnd=System.currentTimeMillis();
        System.out.println(&quot;迭代器时间：&quot;+(itrEnd-itrBegin));
        System.out.println(&quot;fori时间：&quot;+(foriEnd-foriStart));
        System.out.println(&quot;for时间：&quot;+(forEnd-forStart));
        System.out.println(&quot;stream时间：&quot;+(streamEnd-streamstart));
    }
}




&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;迭代器时间：31
fori时间：32
for时间：32
stream时间：74&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;效率：&lt;/p&gt;
&lt;ol readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;fori和for和迭代器大致相同，由于事先了RandomAccess&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;stream时间高一些，原因是需要进行更多的方法调用产生的时间&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;&lt;li&gt;迭代器设计模式&lt;/li&gt;
&lt;li&gt;模板设计模式&lt;/li&gt;
&lt;/ul&gt;
&lt;ol readability=&quot;12&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;ArrayList是基于数组的集合，适合循环迭代多的场景，不适合修改多的场景&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;在使用ArrayList时候需要注意在创建的时候(预估一下你需要的容器大小)&lt;/p&gt;
&lt;p&gt;由于如果你在使用的时候超过了初始化容量(10)，这将会导致容器进行一次(容器扩容)，而数组复制是一件非常耗时的操作&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;ArrayList中的clone()方法以及copy方法，都是浅克隆的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;在一般情况下，如果集合容器出现容量不足需要扩容的时候，其集合会扩容为原集合的1.5倍大小&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果需要将List转换成数组，推荐使用泛型方法&lt;code&gt;T[] toArray(T[] a)&lt;/code&gt;而不是&lt;code&gt;Object[] toArray()&lt;/code&gt;方法&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;如果涉及在指定位置上插入指定元素的操作，如果这种操作比较多，推荐使用LinkedList而不是使用ArrayList,因为你每次在指定的位置上插入元素会导致数组拷贝操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果List涉及到频繁修改的时候，建议使用LinkedList,而不是使用ArrayList。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;ArrayList是一个非线程安全类，如果需要设计到线程安全，请使用并发包相关的类&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;subList(int fromIndex, int toIndex)&lt;/code&gt;方法返回的&lt;code&gt;SubList&lt;/code&gt;类，其中如果你对该List操作时候，原集合也会改变&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Fri, 12 Apr 2019 05:25:00 +0000</pubDate>
<dc:creator>lonecloud</dc:creator>
<og:description>历史文章： 'Collection 源码分析' 'AbstractList 源码分析' 介绍 ArrayList是一个数组队列，相当于动态数组，与Java的数组对比，他的容量可以动态改变。 继承关系</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lonecloud/p/10695485.html</dc:identifier>
</item>
<item>
<title>大数据技术之_16_Scala学习_13_Scala语言的数据结构和算法_Scala学习之旅收官之作 - 黑泽君</title>
<link>http://www.cnblogs.com/chenmingjun/p/10695481.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenmingjun/p/10695481.html</guid>
<description>&lt;p id=&quot;tocid_0&quot; class=&quot;toc&quot;&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#hscala&quot;&gt;第十九章 Scala语言的数据结构和算法&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h191&quot;&gt;19.1 数据结构(算法)的介绍&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h192&quot;&gt;19.2 看几个实际编程中遇到的问题&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1921&quot;&gt;19.2.1 一个五子棋程序&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1922&quot;&gt;19.2.2 约瑟夫问题(丢手帕问题)&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1923&quot;&gt;19.2.3 其它常见算法问题&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h193sparsearray&quot;&gt;19.3 稀疏数组 sparsearray&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1931&quot;&gt;19.3.1 基本介绍&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1932&quot;&gt;19.3.2 应用实例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1933&quot;&gt;19.3.3 课后练习&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h194queue&quot;&gt;19.4 队列 queue&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1941&quot;&gt;19.4.1 队列的一个使用场景&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1942&quot;&gt;19.4.2 队列介绍&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1943&quot;&gt;19.4.3 数组模拟单向队列&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1944&quot;&gt;19.4.4 数组模拟环形队列&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h195linkedlist&quot;&gt;19.5 链表 linked list&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1951&quot;&gt;19.5.1 链表介绍&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1952&quot;&gt;19.5.2 单向链表的介绍&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1953&quot;&gt;19.5.3 单向链表的应用实例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1954&quot;&gt;19.5.4 双向链表的应用实例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1955&quot;&gt;19.5.5 单向环形链表的应用场景&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h196stack&quot;&gt;19.6 栈 stack&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1961&quot;&gt;19.6.1 看一个实际需求&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1962&quot;&gt;19.6.2 栈的介绍&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1963&quot;&gt;19.6.3 栈的几个经典的应用场景&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1964&quot;&gt;19.6.4 栈的快速入门&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1965&quot;&gt;19.6.5 栈实现综合计算器&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h197recursive&quot;&gt;19.7 递归 recursive&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1971&quot;&gt;19.7.1 看个实际应用场景&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1972&quot;&gt;19.7.2 递归的概念&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1973&quot;&gt;19.7.3 递归快速入门&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1974&quot;&gt;19.7.4 递归用于解决什么样的问题&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1975&quot;&gt;19.7.5 递归需要遵守的重要原则&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1976&quot;&gt;19.7.6 举一个比较综合的案例-迷宫问题&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h198sort&quot;&gt;19.8 排序 Sort&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1881&quot;&gt;19.8.1 排序的介绍&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1982&quot;&gt;19.8.2 冒泡排序&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1983&quot;&gt;19.8.3 选择排序&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1984&quot;&gt;19.8.4 插入排序&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1985&quot;&gt;19.8.5 快速排序&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1986&quot;&gt;19.8.6 归并排序&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h199&quot;&gt;19.9 查找&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1891&quot;&gt;18.9.1 介绍&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1992&quot;&gt;19.9.2 线性查找&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1993&quot;&gt;19.9.3 二分查找&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1910&quot;&gt;19.10 哈希表(散列表)&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19101&quot;&gt;19.10.1 看一个实际需求&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19102&quot;&gt;19.10.2 哈希表的基本介绍&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19103&quot;&gt;19.10.3 应用实例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1911&quot;&gt;19.11 二叉树&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19111&quot;&gt;19.11.1 为什么需要树这种数据结构&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19112&quot;&gt;19.11.2 二叉树的示意图&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19113&quot;&gt;19.11.3 二叉树的概念&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19114&quot;&gt;19.11.4 二叉树遍历的说明&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19115&quot;&gt;19.11.5 二叉树遍历应用实例(前序、中序、后序)&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19116&quot;&gt;19.11.6 二叉树-查找指定节点&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19117&quot;&gt;19.11.7 二叉树-删除节点&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1912&quot;&gt;19.12 顺序存储的二叉树&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19121&quot;&gt;19.12.1 顺序存储二叉树的概念&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19122&quot;&gt;19.12.2 顺序存储二叉树的遍历&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1913&quot;&gt;19.13 二叉树排序树&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19131&quot;&gt;19.13.1 先看一个需求&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19132&quot;&gt;19.13.2 二叉排序树的介绍&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19133&quot;&gt;19.13.3 二叉排序树的创建和遍历&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h19134&quot;&gt;19.13.4 二叉排序树的删除&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10695481.html#h1914&quot;&gt;19.14 其它二叉树&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;hscala&quot;&gt;&lt;span&gt;&lt;strong&gt;第十九章 Scala语言的数据结构和算法&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h191&quot;&gt;&lt;span&gt;&lt;strong&gt;19.1 数据结构(算法)的介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;数据结构的介绍&lt;/strong&gt;&lt;br/&gt;  1、数据结构是一门研究算法的学科，只从有了编程语言也就有了数据结构。学好数据结构可以编写出更加漂亮、更加有效率的代码。&lt;br/&gt;  2、要学习好数据结构就要多多考虑如何将生活中遇到的问题，用程序去实现解决。&lt;br/&gt;  3、程序 = 数据结构 + 算法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据结构和算法的关系&lt;/strong&gt;&lt;br/&gt;  1、算法是程序的灵魂，为什么有些网站能够在高并发，和海量吞吐情况下依然坚如磐石，大家可能会说: 网站使用了服务器群集技术、数据库读写分离和缓存技术(比如 Redis 等)，那如果我再深入的问一句，这些优化技术又是怎样被那些天才的技术高手设计出来的呢？&lt;br/&gt;  2、大家请思考一个问题，是什么让不同的人写出的代码从功能看是一样的，但从效率上却有天壤之别, 拿在公司工作的实际经历来说, 我是做服务器的，环境是 UNIX，功能是要支持上千万人同时在线，并保证数据传输的稳定。在服务器上线前，做内测，一切 OK，可上线后，服务器就支撑不住了。公司的 CTO 对我的代码进行优化，再次上线，坚如磐石。&lt;code&gt;那一瞬间，我认识到程序是有灵魂的，就是算法。如果你不想永远都是代码工人，那就花时间来研究下算法吧！&lt;/code&gt;&lt;br/&gt;  3、本章着重讲解算法的基石-数据结构。&lt;/p&gt;
&lt;h3 id=&quot;h192&quot;&gt;&lt;span&gt;&lt;strong&gt;19.2 看几个实际编程中遇到的问题&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  试写出用单链表表示的字符串类及字符串结点类的定义，并依次实现它的构造函数、以及计算串长度、串赋值、判断两串相等、求子串、两串连接、求子串在串中位置等7个成员函数。&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;  &lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;scala,scala,hello,world!&quot;&lt;/span&gt;&lt;br/&gt;val newStr = str.replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;scala&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;尚硅谷&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;newStr=&quot;&lt;/span&gt; + newStr)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;即：自定义 replaceAll 函数。&lt;/p&gt;
&lt;h4 id=&quot;h1921&quot;&gt;&lt;span&gt;&lt;strong&gt;19.2.1 一个五子棋程序&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/Ab0IA0.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;如何判断游戏的输赢，并可以完成存盘退出和继续上局的功能。
&lt;h4 id=&quot;h1922&quot;&gt;&lt;span&gt;&lt;strong&gt;19.2.2 约瑟夫问题(丢手帕问题)&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;  Josephu 问题为：设编号为 1，2，…， n 的 n 个人围坐一圈，约定编号为 k（1&amp;lt;=k&amp;lt;=n）的人从1开始报数，数到 m 的那个人出列，它的下一位又从1开始报数，数到 m 的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。&lt;br/&gt;  提示：用一个不带头结点的循环链表来处理 Josephu&lt;br/&gt;  问题：先构成一个有 n 个结点的单循环链表，然后由 k 结点起从 1 开始计数，计到 m 时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从 1 开始计数，直到最后一个结点从链表中删除算法结束。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;h1923&quot;&gt;&lt;span&gt;&lt;strong&gt;19.2.3 其它常见算法问题&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/Ab0oNV.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;邮差问题、最短路径问题、汉诺塔、八皇后问题
&lt;h3 id=&quot;h193sparsearray&quot;&gt;&lt;span&gt;&lt;strong&gt;19.3 稀疏数组 sparsearray&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;先看一个实际的需求&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/Ab0ThT.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h1931&quot;&gt;&lt;span&gt;&lt;strong&gt;19.3.1 基本介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  当一个数组中大部分元素为 0，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。&lt;br/&gt;稀疏数组的处理方法是：&lt;br/&gt;  1、记录数组一共有几行几列，有多少个不同的值。&lt;br/&gt;  2、把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模。&lt;br/&gt;稀疏数组举例说明&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/Ab0H9U.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h1932&quot;&gt;&lt;span&gt;&lt;strong&gt;19.3.2 应用实例&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  1、使用稀疏数组，来保留类似前面的二维数组(棋盘、地图等等)。&lt;br/&gt;  2、把稀疏数组存盘，并且可以重新恢复原来的二维数组数。&lt;br/&gt;  3、整体思路分析如下。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/Ab047q.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;示例代码如下：
&lt;pre readability=&quot;21.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;37&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.sparsearray&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.collection.mutable.ArrayBuffer&lt;/p&gt;&lt;p&gt;object SparseArrayDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val rowSize = &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;val colSize = &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;val chessMap = Array.ofDim[Int](rowSize, colSize)&lt;br/&gt;chessMap(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;chessMap(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------原始的棋盘地图-------------------&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (item1 &amp;lt;- chessMap) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (item2 &amp;lt;- item1) { &lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\t&quot;&lt;/span&gt;, item2)&lt;br/&gt;}&lt;br/&gt;println()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;val sparseArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayBuffer[Node]()&lt;br/&gt;val node = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Node(rowSize, colSize, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;sparseArray.append(node)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until chessMap.length) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (j &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;until &lt;span class=&quot;hljs-title&quot;&gt;chessMap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(i)&lt;/span&gt;.length) &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (chessMap(i)(j) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;val node = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Node(i, j, chessMap(i)(j))&lt;br/&gt;sparseArray.append(node) &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------输出稀疏数组---------------------&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (node &amp;lt;- sparseArray) {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\t%d\t%d\n&quot;&lt;/span&gt;, node.row, node.col, node.value)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;val newNode = sparseArray(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;val newRowSize = newNode.row&lt;br/&gt;val newColSize = newNode.col&lt;br/&gt;val chessMap2 = Array.ofDim[Int](newRowSize, newColSize)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; until sparseArray.length) {&lt;br/&gt;val node = sparseArray(i)&lt;br/&gt;chessMap2(node.row)(node.col) = node.value&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------从稀疏数组恢复的棋盘地图----------&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (item1 &amp;lt;- chessMap2) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (item2 &amp;lt;- item1) { &lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\t&quot;&lt;/span&gt;, item2)&lt;br/&gt;}&lt;br/&gt;println()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;row&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;col&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;)&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;----------原始的棋盘地图-------------------&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;----------输出稀疏数组---------------------&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;----------从稀疏数组恢复的棋盘地图----------&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h1933&quot;&gt;&lt;span&gt;&lt;strong&gt;19.3.3 课后练习&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;要求：&lt;br/&gt;  1、在前面的基础上，将稀疏数组保存到磁盘上，比如 map.data。&lt;br/&gt;  2、恢复原来的数组时，读取 map.data 进行恢复。&lt;/p&gt;
&lt;h3 id=&quot;h194queue&quot;&gt;&lt;span&gt;&lt;strong&gt;19.4 队列 queue&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h1941&quot;&gt;&lt;span&gt;&lt;strong&gt;19.4.1 队列的一个使用场景&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;银行排队的案例：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/Ab0b3F.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h1942&quot;&gt;&lt;span&gt;&lt;strong&gt;19.4.2 队列介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  1、队列是一个有序列表，可以用数组或是链表来实现。&lt;br/&gt;  2、遵循先入先出的原则。即：先存入队列的数据，要先取出。后存入的要后取出。&lt;/p&gt;
&lt;h4 id=&quot;h1943&quot;&gt;&lt;span&gt;&lt;strong&gt;19.4.3 数组模拟单向队列&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  1、队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下：其中 maxSize 是该队列的最大容量。&lt;br/&gt;  2、因为队列的输出、输入是分别从前后端来处理，因此需要两个变量 front(或head) 及 rear(或tail) 分别记录队列前后端的下标，front 会随着数据输出而改变，而 rear 则是随着数据输入而改变，如图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/Ab0qc4.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;图解说明：&lt;br/&gt;当我们将数据存入队列时称为“addqueue”，addqueue 的处理需要有两个步骤：&lt;br/&gt;  1、将尾指针往后移：rear + 1，如果 front == rear [表示队列为空]&lt;br/&gt;  2、若尾指引 rear 小于等于队列的最大下标 maxSize - 1，则将数据存入 rear 所指的数组元素中，否则无法存入数据。 rear == maxSize - 1 [表示队列已满]&lt;br/&gt;代码实现：
&lt;pre readability=&quot;20&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;34&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.queue&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.io.StdIn&lt;/p&gt;&lt;p&gt;&lt;br/&gt;object ArrayQueueDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val queue = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayQueue(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;var key = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;show：表示显示队列&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;exit：表示退出队列&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;add：表示添加数据到队列&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;get：表示取出队列的数据&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;head: 查看队列头的数据(不改变队列)&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;key = StdIn.readLine()&lt;br/&gt;key match {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;show&quot;&lt;/span&gt; =&amp;gt; queue.showQueue()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;exit&quot;&lt;/span&gt; =&amp;gt; System.exit(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;add&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;请输入一个数据(Int类型)：&quot;&lt;/span&gt;)&lt;br/&gt;val n = StdIn.readInt()&lt;br/&gt;queue.addQueue(n)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;get&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;val res = queue.getQueue()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (res.isInstanceOf[Exception]) {&lt;br/&gt;println(res.asInstanceOf[Exception].getMessage)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;取出对列的数据是 $res&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;head&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;val res = queue.headQueue()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(res.isInstanceOf[Exception]) {&lt;br/&gt;println(res.asInstanceOf[Exception].getMessage)&lt;br/&gt;}&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;队列头元素的值为=&quot;&lt;/span&gt; + res)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ArrayQueue&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;arrMaxSize&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;val maxSize = arrMaxSize&lt;br/&gt;val arr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Array[Int](maxSize)&lt;br/&gt;var front = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;var rear = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Boolean &lt;/span&gt;= {&lt;br/&gt;rear == maxSize - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Boolean &lt;/span&gt;= {&lt;br/&gt;rear == front&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;addQueue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(n: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isFull()) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;队列已满，无法添加数据...&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;rear += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;arr(rear) = n&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;getQueue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Any &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isEmpty()) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;hljs-string&quot;&gt;&quot;对列为空，无法获取对列数据&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;front += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr(front)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;showQueue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isEmpty()) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;队列为空，没有数据可显示...&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- front + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; to rear) {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arr[%d]=%d\n&quot;&lt;/span&gt;, i, arr(i))&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;headQueue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Any &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isEmpty()) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;hljs-string&quot;&gt;&quot;队列为空，没有头元素可查看&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr(front + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;对上面代码的说明：&lt;/strong&gt;虽然实现了队列，但是数据空间不能复用，因此我们需要对其进行优化，使用取模的方式实现环形队列。&lt;/p&gt;
&lt;h4 id=&quot;h1944&quot;&gt;&lt;span&gt;&lt;strong&gt;19.4.4 数组模拟环形队列&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;说明：&lt;br/&gt;  对前面的数组模拟队列的优化，充分利用数组，因此将数组看做是一个环形的。(通过取模的方式来实现即可)&lt;br/&gt;分析说明：&lt;br/&gt;  1、尾索引的下一个为头索引时表示队列满，即将队列容量空出一个作为约定，这个在做判断队列满的时候需要注意 (rear + 1) % maxSize == front [表示队列已满]&lt;br/&gt;  2、rear == front [表示队列为空]&lt;br/&gt;代码实现:&lt;/p&gt;
&lt;pre readability=&quot;21&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;36&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.queue&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.io.StdIn&lt;/p&gt;&lt;p&gt;&lt;br/&gt;object ArrayQueueDemo02 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val queue = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayQueue(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;var key = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;show：表示显示队列&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;exit：表示退出队列&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;add：表示添加数据到队列&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;get：表示取出队列的数据&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;head: 查看队列头的数据(不改变队列)&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;key = StdIn.readLine()&lt;br/&gt;key match {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;show&quot;&lt;/span&gt; =&amp;gt; queue.showQueue()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;exit&quot;&lt;/span&gt; =&amp;gt; System.exit(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;add&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;请输入一个数据(Int类型)：&quot;&lt;/span&gt;)&lt;br/&gt;val n = StdIn.readInt()&lt;br/&gt;queue.addQueue(n)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;get&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;val res = queue.getQueue()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (res.isInstanceOf[Exception]) {&lt;br/&gt;println(res.asInstanceOf[Exception].getMessage)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;取出对列的数据是 $res&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;head&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;val res = queue.headQueue()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(res.isInstanceOf[Exception]) {&lt;br/&gt;println(res.asInstanceOf[Exception].getMessage)&lt;br/&gt;}&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;队列头元素的值为=&quot;&lt;/span&gt; + res)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ArrayQueue&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;arrMaxSize&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;val maxSize = arrMaxSize&lt;br/&gt;val arr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Array[Int](maxSize)&lt;br/&gt;var front = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;br/&gt;var rear = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Boolean &lt;/span&gt;= {&lt;br/&gt;(rear + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) % maxSize == front&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Boolean &lt;/span&gt;= {&lt;br/&gt;rear == front&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;addQueue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(n: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isFull()) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;队列已满，无法添加数据...&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;arr(rear) = n&lt;br/&gt;rear = (rear + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) % maxSize &lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;getQueue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Any &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isEmpty()) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;hljs-string&quot;&gt;&quot;对列为空，无法获取对列数据&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;val value = arr(front)&lt;br/&gt;front = (front + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) % maxSize &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;showQueue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isEmpty()) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;队列为空，没有数据可显示...&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- front until front + size()) {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arr[%d]=%d\n&quot;&lt;/span&gt;, i % maxSize, arr(i % maxSize))&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Int &lt;/span&gt;= {&lt;br/&gt;(rear + maxSize - front) % maxSize&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;headQueue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Any &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isEmpty()) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;hljs-string&quot;&gt;&quot;队列为空，没有头元素可查看&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr(front)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h195linkedlist&quot;&gt;&lt;span&gt;&lt;strong&gt;19.5 链表 linked list&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h1951&quot;&gt;&lt;span&gt;&lt;strong&gt;19.5.1 链表介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;链表是有序的列表，但是它在内存中是存储如下：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/Ab0LjJ.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;小结：&lt;br/&gt;  1、链表是一个有序列表。&lt;br/&gt;  2、链表的数据，在内存空间不一定是连续分布的。
&lt;h4 id=&quot;h1952&quot;&gt;&lt;span&gt;&lt;strong&gt;19.5.2 单向链表的介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;单向链表(带头结点) 逻辑结构示意图如下：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/Ab0jBR.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;所谓带头节点，就是链表的头有一个 head 节点，该节点不存放具体的数据，只是为了操作方便而设计的这个节点。
&lt;h4 id=&quot;h1953&quot;&gt;&lt;span&gt;&lt;strong&gt;19.5.3 单向链表的应用实例&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  使用带 head 头的&lt;code&gt;单向链表&lt;/code&gt;实现：水浒英雄排行榜管理。完成对英雄人物的增删改查操作。注：删除、修改和查找可以考虑学员独立完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一种方式&lt;/strong&gt;：在添加英雄时，直接添加到链表的尾部。&lt;br/&gt;思路分析：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/Ab0Xu9.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;代码实现：&lt;br/&gt;示例代码如下：
&lt;pre readability=&quot;20.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;35&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.linkedlist&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; util.control.Breaks._&lt;/p&gt;&lt;p&gt;&lt;br/&gt;object SingleLinkedListDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val heroNode1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;宋江&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;及时雨&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode3 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;吴用&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;智多星&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode4 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;公孙胜&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;入云龙&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;卢俊义&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;玉麒麟&quot;&lt;/span&gt;)&lt;br/&gt;val singleLinkedList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SingleLinkedList&lt;br/&gt;singleLinkedList.add(heroNode1)&lt;br/&gt;singleLinkedList.add(heroNode3)&lt;br/&gt;singleLinkedList.add(heroNode4)&lt;br/&gt;singleLinkedList.add(heroNode2)&lt;br/&gt;singleLinkedList.list()&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SingleLinkedList&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;val head = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(heroNode: HeroNode)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;var temp = head&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;temp = temp.next&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;temp.next = heroNode &lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (head.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;链表为空！&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;var temp = head.next&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;节点信息：no=%d name=%s nickname=%s\n&quot;&lt;/span&gt;, temp.no, temp.name, temp.nickname)&lt;br/&gt;temp = temp.next&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HeroNode&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;hNo&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;hName&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;hNickname&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;var no: Int = hNo&lt;br/&gt;var name: String = hName&lt;br/&gt;var nickname: String = hNickname&lt;br/&gt;var next: HeroNode = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋江 nickname=及时雨&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 nickname=智多星&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; name=公孙胜 nickname=入云龙&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; name=卢俊义 nickname=玉麒麟&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;第二种方式&lt;/strong&gt;：在添加英雄时，根据排名将英雄插入到指定位置。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/Ab0zAx.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;示例代码如下：
&lt;pre readability=&quot;22&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;38&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.linkedlist&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; util.control.Breaks._&lt;/p&gt;&lt;p&gt;&lt;br/&gt;object SingleLinkedListDemo02 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val heroNode1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode2(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;宋江&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;及时雨&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode3 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode2(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;吴用&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;智多星&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode4 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode2(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;公孙胜&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;入云龙&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode2(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;卢俊义&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;玉麒麟&quot;&lt;/span&gt;)&lt;br/&gt;val singleLinkedList2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SingleLinkedList2&lt;br/&gt;singleLinkedList2.add(heroNode1)&lt;br/&gt;singleLinkedList2.add(heroNode3)&lt;br/&gt;singleLinkedList2.add(heroNode4)&lt;br/&gt;singleLinkedList2.add(heroNode2)&lt;br/&gt;singleLinkedList2.list()&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SingleLinkedList2&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;val head = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode2(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(heroNode: HeroNode2)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;var temp = head&lt;br/&gt;var flag = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt; &lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (heroNode.no &amp;lt; temp.next.no) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (heroNode.no == temp.next.no) { &lt;br/&gt;flag = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;temp &lt;/span&gt;= temp.next&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (flag) { &lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;待添加的英雄编号 %d 已经存在，不能加入\n&quot;&lt;/span&gt;, heroNode.no)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;heroNode.next = temp.next&lt;br/&gt;temp.next = heroNode&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (head.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;链表为空！&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;var temp = head.next&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;节点信息：no=%d name=%s nickname=%s\n&quot;&lt;/span&gt;, temp.no, temp.name, temp.nickname)&lt;br/&gt;temp = temp.next&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HeroNode2&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;hNo&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;hName&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;hNickname&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;var no: Int = hNo&lt;br/&gt;var name: String = hName&lt;br/&gt;var nickname: String = hNickname&lt;br/&gt;var next: HeroNode2 = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋江 nickname=及时雨&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; name=卢俊义 nickname=玉麒麟&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 nickname=智多星&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; name=公孙胜 nickname=入云龙&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;练习：&lt;/strong&gt;&lt;br/&gt;  1、修改节点的值，根据编号的值进行修改（即编号不能变）&lt;br/&gt;  2、将整个节点替换（即重新指向）&lt;br/&gt;  3、删除节点（根据编号删除）&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/Ab0vH1.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;示例代码如下：
&lt;pre readability=&quot;34.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;63&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.linkedlist&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; util.control.Breaks._&lt;/p&gt;&lt;p&gt;&lt;br/&gt;object SingleLinkedListDemo02 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val heroNode1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode2(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;宋江&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;及时雨&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode3 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode2(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;吴用&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;智多星&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode4 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode2(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;公孙胜&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;入云龙&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode2(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;卢俊义&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;玉麒麟&quot;&lt;/span&gt;)&lt;br/&gt;val singleLinkedList2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;SingleLinkedList2&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------添加节点（有序添加）----------------&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;singleLinkedList2.&lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(heroNode1)&lt;/span&gt;&lt;br/&gt;singleLinkedList2.&lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(heroNode3)&lt;/span&gt;&lt;br/&gt;singleLinkedList2.&lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(heroNode4)&lt;/span&gt;&lt;br/&gt;singleLinkedList2.&lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(heroNode2)&lt;/span&gt;&lt;br/&gt;singleLinkedList2.&lt;span class=&quot;hljs-title&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------修改节点的值-----------------------&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;val heroNode5 &lt;/span&gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode2(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;宋公明&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;山东及时雨&quot;&lt;/span&gt;)&lt;br/&gt;singleLinkedList2.update(heroNode5)&lt;br/&gt;singleLinkedList2.list()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------修改节点的值（全部替换）------------&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode6 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode2(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;卢员外&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;河北玉麒麟&quot;&lt;/span&gt;)&lt;br/&gt;singleLinkedList2.update2(heroNode6)&lt;br/&gt;singleLinkedList2.list()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------删除节点--------------------------&quot;&lt;/span&gt;)&lt;br/&gt;singleLinkedList2.del(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)&lt;br/&gt;singleLinkedList2.list()&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SingleLinkedList2&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;val head = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode2(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(no: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;var temp = head&lt;br/&gt;var flag = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.next.no == no) { &lt;br/&gt;flag = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;temp &lt;/span&gt;= temp.next&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (flag) {&lt;br/&gt;temp.next = temp.next.next&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;要删除的 no=%d 节点不存在\n&quot;&lt;/span&gt;, no)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;update2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(heroNode: HeroNode2)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (head.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;链表为空，不能修改！&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;var temp = head.next&lt;br/&gt;var flag = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.no == heroNode.no) { &lt;br/&gt;flag = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;temp &lt;/span&gt;= temp.next&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (flag) {&lt;br/&gt;del(temp.no)&lt;br/&gt;add(heroNode)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;没有找到编号为 %d 的节点，不能修改！\n&quot;&lt;/span&gt;, heroNode.no)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(heroNode: HeroNode2)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (head.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;链表为空，不能修改！&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;var temp = head.next&lt;br/&gt;var flag = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.no == heroNode.no) { &lt;br/&gt;flag = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;temp &lt;/span&gt;= temp.next&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (flag) {&lt;br/&gt;temp.name = heroNode.name&lt;br/&gt;temp.nickname = heroNode.nickname&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;没有找到编号为 %d 的节点，不能修改！\n&quot;&lt;/span&gt;, heroNode.no)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(heroNode: HeroNode2)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;var temp = head&lt;br/&gt;var flag = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt; &lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (heroNode.no &amp;lt; temp.next.no) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (heroNode.no == temp.next.no) { &lt;br/&gt;flag = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;temp &lt;/span&gt;= temp.next&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (flag) { &lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;待添加的英雄编号 %d 已经存在，不能加入\n&quot;&lt;/span&gt;, heroNode.no)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;heroNode.next = temp.next&lt;br/&gt;temp.next = heroNode&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (head.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;链表为空！&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;var temp = head.next&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;节点信息：no=%d name=%s nickname=%s\n&quot;&lt;/span&gt;, temp.no, temp.name, temp.nickname)&lt;br/&gt;temp = temp.next&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HeroNode2&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;hNo&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;hName&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;hNickname&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;var no: Int = hNo&lt;br/&gt;var name: String = hName&lt;br/&gt;var nickname: String = hNickname&lt;br/&gt;var next: HeroNode2 = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;----------添加节点（有序添加）----------------&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋江 nickname=及时雨&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; name=卢俊义 nickname=玉麒麟&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 nickname=智多星&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; name=公孙胜 nickname=入云龙&lt;br/&gt;----------修改节点的值-----------------------&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋公明 nickname=山东及时雨&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; name=卢俊义 nickname=玉麒麟&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 nickname=智多星&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; name=公孙胜 nickname=入云龙&lt;br/&gt;----------修改节点的值（全部替换）------------&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋公明 nickname=山东及时雨&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; name=卢员外 nickname=河北玉麒麟&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 nickname=智多星&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; name=公孙胜 nickname=入云龙&lt;br/&gt;----------删除节点--------------------------&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋公明 nickname=山东及时雨&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; name=卢员外 nickname=河北玉麒麟&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 nickname=智多星&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h1954&quot;&gt;&lt;span&gt;&lt;strong&gt;19.5.4 双向链表的应用实例&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  使用带 head 头的&lt;code&gt;双向链表&lt;/code&gt;实现：水浒英雄排行榜管理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单向链表的缺点分析:&lt;/strong&gt;&lt;br/&gt;  1、单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找。&lt;br/&gt;  2、单向链表不能自我删除，需要靠辅助节点，而双向链表，则可以&lt;code&gt;自我删除&lt;/code&gt;，所以前面我们单链表删除时节点，总是找到 temp 的下一个节点来删除的(&lt;code&gt;认真体会&lt;/code&gt;)。&lt;br/&gt;  3、示意图帮助理解删除。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBC9O.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;将前面的单向链表改成双向链表&lt;/strong&gt;&lt;br/&gt;双向链表删除图解&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBSN6.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;示例代码如下：
&lt;pre readability=&quot;29&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;52&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.linkedlist&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; util.control.Breaks.{&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;, breakable}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;object DoubleLinkedListDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------添加节点（无序添加）----------------&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode3(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;宋江&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;及时雨&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode3 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode3(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;吴用&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;智多星&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode4 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode3(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;公孙胜&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;入云龙&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode3(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;卢俊义&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;玉麒麟&quot;&lt;/span&gt;)&lt;br/&gt;val doubleLinkedList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DoubleLinkedList&lt;br/&gt;doubleLinkedList.add(heroNode1)&lt;br/&gt;doubleLinkedList.add(heroNode3)&lt;br/&gt;doubleLinkedList.add(heroNode4)&lt;br/&gt;doubleLinkedList.add(heroNode2)&lt;br/&gt;doubleLinkedList.list()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------修改节点的值-----------------------&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode5 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode3(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;宋公明&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;山东及时雨&quot;&lt;/span&gt;)&lt;br/&gt;doubleLinkedList.update(heroNode5)&lt;br/&gt;doubleLinkedList.list()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------删除节点--------------------------&quot;&lt;/span&gt;)&lt;br/&gt;doubleLinkedList.del(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;br/&gt;doubleLinkedList.del(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)&lt;br/&gt;doubleLinkedList.del(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)&lt;br/&gt;doubleLinkedList.list()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------再次添加节点----------------------&quot;&lt;/span&gt;)&lt;br/&gt;doubleLinkedList.add(heroNode3)&lt;br/&gt;doubleLinkedList.list()&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DoubleLinkedList&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;val head = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode3(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(heroNode: HeroNode3)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;var temp = head&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;temp = temp.next&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;temp.next = heroNode &lt;br/&gt;heroNode.pre = temp&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (head.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;链表为空！&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;var temp = head.next&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;节点信息：no=%d name=%s nickname=%s\n&quot;&lt;/span&gt;, temp.no, temp.name, temp.nickname)&lt;br/&gt;temp = temp.next&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(heroNode: HeroNode3)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (head.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;链表为空，不能修改！&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;var temp = head.next&lt;br/&gt;var flag = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.no == heroNode.no) { &lt;br/&gt;flag = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;temp &lt;/span&gt;= temp.next&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (flag) {&lt;br/&gt;temp.name = heroNode.name&lt;br/&gt;temp.nickname = heroNode.nickname&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;没有找到编号为 %d 的节点，不能修改！\n&quot;&lt;/span&gt;, heroNode.no)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(no: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (head.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;链表为空，不能删除！&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;var temp = head.next&lt;br/&gt;var flag = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.no == no) { &lt;br/&gt;flag = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;temp &lt;/span&gt;= temp.next&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (flag) {&lt;br/&gt;temp.pre.next = temp.&lt;span class=&quot;hljs-function&quot;&gt;next&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(temp.next != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;temp.next.pre = temp.pre&lt;br/&gt;temp.pre = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;temp.next = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;temp.pre = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;要删除的 no=%d 节点不存在\n&quot;&lt;/span&gt;, no)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HeroNode3&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;hNo&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;hName&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;hNickname&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;var no: Int = hNo&lt;br/&gt;var name: String = hName&lt;br/&gt;var nickname: String = hNickname&lt;br/&gt;var pre: HeroNode3 = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;br/&gt;var next: HeroNode3 = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;----------添加节点（无序添加）----------------&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋江 nickname=及时雨&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 nickname=智多星&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; name=公孙胜 nickname=入云龙&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; name=卢俊义 nickname=玉麒麟&lt;br/&gt;----------修改节点的值-----------------------&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋公明 nickname=山东及时雨&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 nickname=智多星&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; name=公孙胜 nickname=入云龙&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; name=卢俊义 nickname=玉麒麟&lt;br/&gt;----------删除节点--------------------------&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋公明 nickname=山东及时雨&lt;br/&gt;----------再次添加节点----------------------&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋公明 nickname=山东及时雨&lt;br/&gt;节点信息：no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 nickname=智多星&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h1955&quot;&gt;&lt;span&gt;&lt;strong&gt;19.5.5 单向环形链表的应用场景&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  &lt;strong&gt;Josephu 问题(丢手帕问题)&lt;/strong&gt;：设编号为1，2，…，n 的 n 个人围坐一圈，约定编号为 k（1&amp;lt;=k&amp;lt;=n）的人从 1 开始报数，数到 m 的那个人出列，它的下一位又从 1 开始报数，数到 m 的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。&lt;br/&gt;  &lt;strong&gt;提示&lt;/strong&gt;：用一个不带头结点的循环链表来处理 Josephu 问题。&lt;br/&gt;  &lt;strong&gt;问题&lt;/strong&gt;：先构成一个有 n 个结点的单循环链表，然后由 k 结点起从 1 开始计数，计到 m 时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从 1 开始计数，直到最后一个结点从链表中删除算法结束。&lt;br/&gt;  &lt;strong&gt;示意图说明&lt;/strong&gt;：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBp4K.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;思路分析：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBige.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;示例代码如下：
&lt;pre readability=&quot;21&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;36&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.linkedlist&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; util.control.Breaks._&lt;/p&gt;&lt;p&gt;object JosephuDemo {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val boyGame = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BoyGame&lt;br/&gt;boyGame.addBoy(&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)&lt;br/&gt;boyGame.showBoy()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;--------------------&quot;&lt;/span&gt;)&lt;br/&gt;boyGame.countBoy(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BoyGame&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;var first: Boy = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;addBoy&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(nums: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (nums &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Boy的个数不正确&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;var temp: Boy = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(no &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; to nums)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;val boy = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Boy(no)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (no == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;first = boy&lt;br/&gt;boy.next = first&lt;/p&gt;&lt;p&gt;temp = first &lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;temp.next = boy &lt;br/&gt;boy.next = first &lt;/p&gt;&lt;p&gt;temp = boy &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;showBoy&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (first.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;没有Boy&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;var temp = first&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Boy 的编号是 %d\n&quot;&lt;/span&gt;, temp.no)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.next == first) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;temp = temp.next &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;countBoy&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(startNo: Int, countNum: Int, nums: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (first.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; || startNo &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; || startNo &amp;gt; nums) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;参数有误，请重新输入！&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;var temp = first &lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.next == first) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;temp = temp.next &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; until startNo) {&lt;br/&gt;first = first.next&lt;br/&gt;temp = temp.next&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp == first) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; until countNum) {&lt;br/&gt;first = first.next&lt;br/&gt;temp = temp.next&lt;br/&gt;}&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Boy %d 号出圈\n&quot;&lt;/span&gt;, first.no)&lt;br/&gt;temp.next = first.next&lt;br/&gt;first = first.next&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;最后一个人是Boy %d 号&quot;&lt;/span&gt;, first.no)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Boy&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;bNo&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;var no: Int = bNo&lt;br/&gt;var next: Boy = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;Boy 的编号是 &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;Boy 的编号是 &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;Boy 的编号是 &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;Boy 的编号是 &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;Boy 的编号是 &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;Boy 的编号是 &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;Boy 的编号是 &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;--------------------&lt;br/&gt;Boy &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; 号出圈&lt;br/&gt;Boy &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 号出圈&lt;br/&gt;Boy &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; 号出圈&lt;br/&gt;Boy &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; 号出圈&lt;br/&gt;Boy &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 号出圈&lt;br/&gt;Boy &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; 号出圈&lt;br/&gt;最后一个人是Boy &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; 号&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h196stack&quot;&gt;&lt;span&gt;&lt;strong&gt;19.6 栈 stack&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h1961&quot;&gt;&lt;span&gt;&lt;strong&gt;19.6.1 看一个实际需求&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;请输入一个表达式&lt;br/&gt;计算式：[7&lt;em&gt;2&lt;/em&gt;2-5+1-5+3-3] 点击计算，[如下图]&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBP3D.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;请问：计算机底层是如何运算得到结果的？&lt;br/&gt;注意：不是简单的把算式列出运算，因为我们看这个算式 7 * 2 * 2 - 5， 但是计算机怎么理解这个算式的（对计算机而言，它接收到的就是一个字符串），我们讨论的是这个问题。
&lt;h4 id=&quot;h1962&quot;&gt;&lt;span&gt;&lt;strong&gt;19.6.2 栈的介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  1、栈的英文为(&lt;code&gt;stack&lt;/code&gt;)。&lt;br/&gt;  2、栈是一个&lt;code&gt;先入后出(FILO:First In Last Out)&lt;/code&gt;的有序列表。&lt;br/&gt;  3、栈(stack)是限制线性表中元素的插入和删除&lt;code&gt;只能在线性表的同一端&lt;/code&gt;进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为&lt;code&gt;栈顶(Top)&lt;/code&gt;，另一端为固定的一端，称为&lt;code&gt;栈底(Bottom)&lt;/code&gt;。&lt;br/&gt;  4、根据堆栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;出栈和入栈的概念(如图所示)&lt;/strong&gt;&lt;br/&gt;入栈&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBEDA.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;出栈&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBFjH.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h1963&quot;&gt;&lt;span&gt;&lt;strong&gt;19.6.3 栈的几个经典的应用场景&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  1、子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。&lt;br/&gt;  2、处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。&lt;br/&gt;  3、表达式的转换与求值(实际解决)。&lt;br/&gt;  4、二叉树的遍历。&lt;br/&gt;  5、图形的深度优先(depth-first)搜索法。&lt;/p&gt;
&lt;h4 id=&quot;h1964&quot;&gt;&lt;span&gt;&lt;strong&gt;19.6.4 栈的快速入门&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;用数组模拟栈的使用&lt;/strong&gt;&lt;br/&gt;由于栈是一种有序列表，当然可以使用数组的结构来储存栈的数据内容，下面我们就用数组模拟栈的出栈、入栈等操作。实现思路分析，并画出示意图，如下：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBAud.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;示例代码如下：
&lt;pre readability=&quot;16&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;26&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.stack&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.io.StdIn&lt;/p&gt;&lt;p&gt;&lt;br/&gt;object ArrayStackDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val arrayStack = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayStack(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;var key = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;list：表示显示栈的数据&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;exit：表示退出程序&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;push：表示将数据压栈&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pop：表示将数据弹栈&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;key = StdIn.readLine()&lt;br/&gt;key match {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;list&quot;&lt;/span&gt; =&amp;gt; arrayStack.list()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;exit&quot;&lt;/span&gt; =&amp;gt; System.exit(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;push&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;请输入一个数据(Int类型)：&quot;&lt;/span&gt;)&lt;br/&gt;val n = StdIn.readInt()&lt;br/&gt;arrayStack.push(n)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;pop&quot;&lt;/span&gt; =&amp;gt; arrayStack.pop()&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ArrayStack&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;val maxSize = size&lt;br/&gt;var stack = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Array[Int](maxSize)&lt;br/&gt;var top = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Boolean &lt;/span&gt;= {&lt;br/&gt;top == maxSize - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Boolean &lt;/span&gt;= {&lt;br/&gt;top == -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(value: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isFull()) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;栈满，不能再存放数据&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;top += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;stack(top) = value&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Any &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isEmpty()) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;栈空，不能再取出数据&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;val value = stack(top)&lt;br/&gt;top -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isEmpty()) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;栈空，没有数据可显示&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; to top reverse) {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;stack[%d]=%d\n&quot;&lt;/span&gt;, i, stack(i))&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用链表来模拟栈的使用&lt;/strong&gt;&lt;br/&gt;有空做做&lt;/p&gt;
&lt;h4 id=&quot;h1965&quot;&gt;&lt;span&gt;&lt;strong&gt;19.6.5 栈实现综合计算器&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;代码实现的思路分析&lt;/strong&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBeEt.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;示例代码如下：
&lt;pre readability=&quot;29&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;52&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.stack&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; util.control.Breaks._&lt;/p&gt;&lt;p&gt;&lt;br/&gt;object CalculatorDemo02 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val numStack = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayStack3(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)&lt;br/&gt;val operStack = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayStack3(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;val expression = &lt;span class=&quot;hljs-string&quot;&gt;&quot;7*2*2-5+1-5+3-4&quot;&lt;/span&gt;&lt;br/&gt;var index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;var num1 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;var num2 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;var oper = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;var res = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;var &lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;' '&lt;/span&gt;&lt;br/&gt;var keepNum = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt; = (expression.substring(index, index + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (operStack.isOper(&lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt;)) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!operStack.isEmpty()) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (operStack.priority(&lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt;) &amp;lt;= operStack.priority(operStack.stack(operStack.top))) {&lt;br/&gt;num1 = numStack.pop().toString.toInt&lt;br/&gt;num2 = numStack.pop().toString.toInt&lt;br/&gt;oper = operStack.pop().toString.toInt&lt;br/&gt;res = numStack.cal(num1, num2, oper)&lt;br/&gt;numStack.push(res)&lt;br/&gt;operStack.push(&lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt;)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;operStack.push(&lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;operStack.push(&lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;keepNum += &lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index == expression.length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;numStack.push(keepNum.toInt)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (operStack.isOper(expression.substring(index + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, index + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))) { &lt;br/&gt;numStack.push(keepNum.toInt)&lt;br/&gt;keepNum = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;index += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index &amp;gt;= expression.length) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (operStack.isEmpty()) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;num1 = numStack.pop().toString.toInt&lt;br/&gt;num2 = numStack.pop().toString.toInt&lt;br/&gt;oper = operStack.pop().toString.toInt&lt;br/&gt;res = numStack.cal(num1, num2, oper)&lt;br/&gt;numStack.push(res)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;表达式： %s = %d&quot;&lt;/span&gt;, expression, numStack.pop().toString.toInt)&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ArrayStack3&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;val maxSize = size&lt;br/&gt;var stack = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Array[Int](maxSize)&lt;br/&gt;var top = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Boolean &lt;/span&gt;= {&lt;br/&gt;top == maxSize - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Boolean &lt;/span&gt;= {&lt;br/&gt;top == -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(value: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isFull()) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;栈满，不能再存放数据&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;top += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;stack(top) = value&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Any &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isEmpty()) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;栈空，不能再取出数据&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;val value = stack(top)&lt;br/&gt;top -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isEmpty()) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;栈空，没有数据可显示&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; to top reverse) {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;stack[%d]=%d\n&quot;&lt;/span&gt;, i, stack(i))&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(oper: Int)&lt;/span&gt;: Int &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (oper == &lt;span class=&quot;hljs-string&quot;&gt;'*'&lt;/span&gt; || oper == &lt;span class=&quot;hljs-string&quot;&gt;'/'&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (oper == &lt;span class=&quot;hljs-string&quot;&gt;'+'&lt;/span&gt; || oper == &lt;span class=&quot;hljs-string&quot;&gt;'-'&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;isOper&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(value: Int)&lt;/span&gt;: Boolean &lt;/span&gt;= {&lt;br/&gt;value == &lt;span class=&quot;hljs-string&quot;&gt;'+'&lt;/span&gt; || value == &lt;span class=&quot;hljs-string&quot;&gt;'-'&lt;/span&gt; || value == &lt;span class=&quot;hljs-string&quot;&gt;'*'&lt;/span&gt; || value == &lt;span class=&quot;hljs-string&quot;&gt;'/'&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;cal&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(num1: Int, num2: Int, oper: Int)&lt;/span&gt;: Int &lt;/span&gt;= {&lt;br/&gt;var res = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;oper match {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'+'&lt;/span&gt; =&amp;gt; res = num2 + num1&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'-'&lt;/span&gt; =&amp;gt; res = num2 - num1&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'*'&lt;/span&gt; =&amp;gt; res = num2 * num1&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'/'&lt;/span&gt; =&amp;gt; res = num2 / num1&lt;br/&gt;}&lt;br/&gt;res&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;表达式： &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h197recursive&quot;&gt;&lt;span&gt;&lt;strong&gt;19.7 递归 recursive&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h1971&quot;&gt;&lt;span&gt;&lt;strong&gt;19.7.1 看个实际应用场景&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;迷宫问题(回溯)&lt;/p&gt;
&lt;h4 id=&quot;h1972&quot;&gt;&lt;span&gt;&lt;strong&gt;19.7.2 递归的概念&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;简单的说：递归就是函数/方法自己调用自己，每次调用时传入不同的变量，递归有助于编程者解决复杂的问题，同时可以让代码变得简洁。&lt;/p&gt;
&lt;h4 id=&quot;h1973&quot;&gt;&lt;span&gt;&lt;strong&gt;19.7.3 递归快速入门&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;我列举两个小案例,来帮助大家理解递归，递归在讲函数时已经讲过(当时讲的相对比较简单)，这里在给大家回顾一下递归调用机制&lt;br/&gt;  1、打印问题&lt;br/&gt;  2、阶乘问题&lt;br/&gt;思路分析&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs go&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;n=&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;n=&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;n=&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;n=&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;打印代码如下：&lt;/p&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;11&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.recursive&lt;p&gt;object Demo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;test1(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------&quot;&lt;/span&gt;)&lt;br/&gt;test2(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------&quot;&lt;/span&gt;)&lt;br/&gt;test3(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(n: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {&lt;br/&gt;test1(n - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;n=&quot;&lt;/span&gt; + n)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(n: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;n=&quot;&lt;/span&gt; + n)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {&lt;br/&gt;test2(n - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;test3&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(n: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {&lt;br/&gt;test3(n - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;n=&quot;&lt;/span&gt; + n)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;n=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;n=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;n=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;n=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;----------&lt;br/&gt;n=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;n=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;n=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;n=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;----------&lt;br/&gt;n=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;n=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;n=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;求阶乘代码如下：&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;4&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.recursive&lt;p&gt;object Demo02 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;println(factorial(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;))&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(n: Int)&lt;/span&gt;: Int &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;factorial(n - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) * n&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h1974&quot;&gt;&lt;span&gt;&lt;strong&gt;19.7.4 递归用于解决什么样的问题&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  1、各种数学问题如: 8 皇后问题、汉诺塔、阶乘问题、迷宫问题、球和篮子的问题(google 编程大赛，有空看看)&lt;br/&gt;  2、将用栈解决的问题 -&amp;gt; 递归代码比较简洁&lt;/p&gt;
&lt;h4 id=&quot;h1975&quot;&gt;&lt;span&gt;&lt;strong&gt;19.7.5 递归需要遵守的重要原则&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  1、执行一个函数时，就创建一个新的受保护的独立空间(新函数栈)。&lt;br/&gt;  2、函数的局部变量是独立的，不会相互影响。&lt;br/&gt;  3、递归必须向退出递归的条件逼近，否则就是无限递归，死龟了:)。&lt;br/&gt;  4、当一个函数执行完毕，或者遇到 return，就会返回，&lt;code&gt;遵守谁调用，就将结果返回给谁&lt;/code&gt;，同时当函数执行完毕或者返回时，该函数本身也会被系统销毁。&lt;/p&gt;
&lt;h4 id=&quot;h1976&quot;&gt;&lt;span&gt;&lt;strong&gt;19.7.6 举一个比较综合的案例-迷宫问题&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;解释说明&lt;/strong&gt;&lt;br/&gt;  1、小球得到的路径，和程序员设置的找路策略有关，即：找路的上下左右的顺序相关。&lt;br/&gt;  2、再得到小球路径时，可以先使用(下右上左)，再改成(上右下左)，看看路径是不是有变化。&lt;br/&gt;  3、测试回溯现象。&lt;br/&gt;  4、思考: 如何求出最短路径？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路分析&lt;/strong&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBVHI.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;
&lt;pre readability=&quot;24&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;42&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.recursive&lt;p&gt;&lt;br/&gt;object MiGongDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val map = Array.ofDim[Int](&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;) {&lt;br/&gt;map(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)(i) = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;map(&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)(i) = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;) {&lt;br/&gt;map(i)(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;map(i)(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;map(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;map(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (j &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;) {&lt;br/&gt;print(map(i)(j) + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;println()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------策略为：上-&amp;gt;右-&amp;gt;下-&amp;gt;左----------&quot;&lt;/span&gt;)&lt;br/&gt;findWay2(map, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (j &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;) {&lt;br/&gt;print(map(i)(j) + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;println()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;findWay1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(map: Array[Array[Int]], i: Int, j: Int)&lt;/span&gt;: Boolean &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (map(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (map(i)(j) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) { &lt;br/&gt;map(i)(j) = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (findWay1(map, i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, j)) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (findWay1(map, i, j + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (findWay1(map, i - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, j)) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (findWay1(map, i, j - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;map(i)(j) = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;findWay2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(map: Array[Array[Int]], i: Int, j: Int)&lt;/span&gt;: Boolean &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (map(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (map(i)(j) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) { &lt;br/&gt;map(i)(j) = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (findWay2(map, i - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, j)) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (findWay2(map, i, j + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (findWay2(map, i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, j)) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (findWay2(map, i, j - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;map(i)(j) = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;----------策略为：上-&amp;gt;右-&amp;gt;下-&amp;gt;左----------&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h198sort&quot;&gt;&lt;span&gt;&lt;strong&gt;19.8 排序 Sort&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h1881&quot;&gt;&lt;span&gt;&lt;strong&gt;19.8.1 排序的介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;排序是将一组数据，依指定的顺序进行排列的过程，常见的排序：&lt;br/&gt;  1) 冒泡排序&lt;br/&gt;  2) 选择排序&lt;br/&gt;  3) 插入排序&lt;br/&gt;  4) 快速排序&lt;br/&gt;  5) 归并排序&lt;/p&gt;
&lt;h4 id=&quot;h1982&quot;&gt;&lt;span&gt;&lt;strong&gt;19.8.2 冒泡排序&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;冒泡排序思想&lt;/strong&gt;&lt;br/&gt;  冒泡排序（Bubble Sorting）的基本思想是：通过对待排序序列从后向前（从下标较大的元素开始），依次比较相邻元素的排序码，若发现逆序则交换，使排序码较小的元素逐渐从后部移向前部（从下标较大的单元移向下标较小的单元），就象水底下的气泡一样逐渐向上冒。&lt;br/&gt;  因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下来没有进行过交换，就说明序列有序，因此要在排序过程中设置一个标志 flag 判断元素是否进行过交换。从而减少不必要的比较。&lt;/p&gt;
&lt;p&gt;冒泡排序的代码：&lt;/p&gt;
&lt;pre readability=&quot;12.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;19&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.sort&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Date&lt;/p&gt;&lt;p&gt;object BubbleSortDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; util.Random()&lt;br/&gt;val arr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Array[Int](&lt;span class=&quot;hljs-number&quot;&gt;80000&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until &lt;span class=&quot;hljs-number&quot;&gt;80000&lt;/span&gt;) {&lt;br/&gt;arr(i) = random.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;8000000&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;val dateFormat: SimpleDateFormat = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;)&lt;br/&gt;val now: Date = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date()&lt;br/&gt;val date = dateFormat.format(now)&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;冒泡排序前&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;冒泡排序前时间 = &quot;&lt;/span&gt; + date) &lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;冒泡排序后&quot;&lt;/span&gt;)&lt;br/&gt;bubbleSort(arr)&lt;br/&gt;&lt;/p&gt;&lt;p&gt;val now2: Date = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date()&lt;br/&gt;val date2 = dateFormat.format(now2)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;冒泡排序后时间 = &quot;&lt;/span&gt; + date2) &lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;bubbleSort&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(arr: Array[Int])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until arr.length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (j &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until arr.length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; - i) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arr(j) &amp;gt; arr(j + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) {&lt;br/&gt;val temp = arr(j)&lt;br/&gt;arr(j) = arr(j + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;arr(j + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = temp&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;冒泡排序前&lt;br/&gt;冒泡排序前时间 = &lt;span class=&quot;hljs-number&quot;&gt;2019&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;09&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;&lt;br/&gt;冒泡排序后&lt;br/&gt;冒泡排序后时间 = &lt;span class=&quot;hljs-number&quot;&gt;2019&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;09&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h1983&quot;&gt;&lt;span&gt;&lt;strong&gt;19.8.3 选择排序&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;基本介绍&lt;/strong&gt;&lt;br/&gt;  选择式排序也属于&lt;code&gt;内部排序法(内存排序)&lt;/code&gt;，是从排序的数据中，按指定的规则选出某一元素，经过和其他元素重整，再依规定交换位置后达到排序的目的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择排序思想&lt;/strong&gt;&lt;br/&gt;  选择排序（select sorting）也是一种简单的排序方法。它的基本思想是：第一次从 R[0]~R[n-1] 中选取最小值，与 R[0] 交换，第二次从 R[1]~R[n-1] 中选取最小值，与 R[1] 交换，第三次从 R[2]~R[n-1] 中选取最小值，与 R[2] 交换，…，第 i 次从 R[i-1]~R[n-1] 中选取最小值，与 R[i-1] 交换，…, 第 n-1 次从 R[n-2]~R[n-1] 中选取最小值，与 R[n-2] 交换，总共通过 n-1 次，得到一个按排序码从小到大排列的有序序列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择排序思路分析图&lt;/strong&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBM8S.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;选择排序的代码：&lt;/p&gt;
&lt;pre readability=&quot;23.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;41&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.sort&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Date&lt;/p&gt;&lt;p&gt;object SelectSortDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; util.Random()&lt;br/&gt;val arr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Array[Int](&lt;span class=&quot;hljs-number&quot;&gt;80000&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until &lt;span class=&quot;hljs-number&quot;&gt;80000&lt;/span&gt;) {&lt;br/&gt;arr(i) = random.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;8000000&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;val dateFormat: SimpleDateFormat = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;)&lt;br/&gt;val now: Date = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date()&lt;br/&gt;val date = dateFormat.format(now)&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;选择排序前&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;选择排序前时间 = &quot;&lt;/span&gt; + date) &lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;选择排序后&quot;&lt;/span&gt;)&lt;br/&gt;selectSort(arr)&lt;br/&gt;&lt;/p&gt;&lt;p&gt;val now2: Date = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date()&lt;br/&gt;val date2 = dateFormat.format(now2)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;选择排序后时间 = &quot;&lt;/span&gt; + date2) &lt;/p&gt;&lt;p&gt;// 第2轮选择排序 (1, 34, 119, 101) =&amp;gt; (1, 34, 119, 101)&lt;br/&gt;min = arr(1)&lt;br/&gt;minIndex = 1&lt;br/&gt;// 遍历&lt;br/&gt;for (j &amp;lt;- 1 + 1 until arr.length) {&lt;br/&gt;if (min &amp;gt; arr(j)) { // 说明 min 不是真的最小值&lt;br/&gt;min = arr(j) // 重置 min&lt;br/&gt;minIndex = j // 重置 minIndex&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;// 判断一下是否需要交换位置（注意：这里没有交换位置操作，实际是赋值操作，因为新的最小值已经被我们记录下了，效率更高）&lt;br/&gt;if (minIndex != 1) {&lt;br/&gt;arr(minIndex) = arr(1)&lt;br/&gt;arr(1) = min // 这是赋值操作&lt;br/&gt;}&lt;br/&gt;println(&quot;第2轮选择排序结束，结果是&quot;)&lt;br/&gt;println(arr.mkString(&quot; &quot;))&lt;/p&gt;&lt;p&gt;// 第3轮选择排序 (1, 34, 119, 101) =&amp;gt; (1, 34, 101, 119)&lt;br/&gt;min = arr(2)&lt;br/&gt;minIndex = 2&lt;br/&gt;// 遍历&lt;br/&gt;for (j &amp;lt;- 2 + 1 until arr.length) {&lt;br/&gt;if (min &amp;gt; arr(j)) { // 说明 min 不是真的最小值&lt;br/&gt;min = arr(j) // 重置 min&lt;br/&gt;minIndex = j // 重置 minIndex&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;// 判断一下是否需要交换位置（注意：这里没有交换位置操作，实际是赋值操作，因为新的最小值已经被我们记录下了，效率更高）&lt;br/&gt;if (minIndex != 2) {&lt;br/&gt;arr(minIndex) = arr(2)&lt;br/&gt;arr(2) = min // 这是赋值操作&lt;br/&gt;}&lt;br/&gt;println(&quot;第3轮选择排序结束，结果是&quot;)&lt;br/&gt;println(arr.mkString(&quot; &quot;))&lt;br/&gt;*/&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;selectSort&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(arr: Array[Int])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until arr.length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;var min = arr(i) &lt;br/&gt;var minIndex = i&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (j &amp;lt;- i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; until arr.length) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (min &amp;gt; arr(j)) { &lt;br/&gt;min = arr(j) &lt;br/&gt;minIndex = j &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (minIndex != i) {&lt;br/&gt;arr(minIndex) = arr(i)&lt;br/&gt;arr(i) = min &lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;选择排序前&lt;br/&gt;选择排序前时间 = &lt;span class=&quot;hljs-number&quot;&gt;2019&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;&lt;br/&gt;选择排序后&lt;br/&gt;选择排序后时间 = &lt;span class=&quot;hljs-number&quot;&gt;2019&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;09&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h1984&quot;&gt;&lt;span&gt;&lt;strong&gt;19.8.4 插入排序&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;基本介绍&lt;/strong&gt;&lt;br/&gt;  插入式排序属于&lt;code&gt;内部排序法&lt;/code&gt;，对于欲排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插入排序法思想&lt;/strong&gt;&lt;br/&gt;  插入排序（Insertion Sorting）的基本思想是：&lt;code&gt;把 n 个待排序的元素看成为一个有序表和一个无序表&lt;/code&gt;，开始时有序表中只包含一个元素，无序表中包含有 n-1 个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插入排序思路分析图&lt;/strong&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBmUP.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;插入排序的代码：&lt;/p&gt;
&lt;pre readability=&quot;28.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;51&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.sort&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Date&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.atguigu.chapter19.sort.SelectSortDemo01.selectSort&lt;/p&gt;&lt;p&gt;object InsertSortDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; util.Random()&lt;br/&gt;val arr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Array[Int](&lt;span class=&quot;hljs-number&quot;&gt;80000&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until &lt;span class=&quot;hljs-number&quot;&gt;80000&lt;/span&gt;) {&lt;br/&gt;arr(i) = random.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;8000000&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;val dateFormat: SimpleDateFormat = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;)&lt;br/&gt;val now: Date = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date()&lt;br/&gt;val date = dateFormat.format(now)&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;插入排序前&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;选择排序前时间 = &quot;&lt;/span&gt; + date) &lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;插入排序后&quot;&lt;/span&gt;)&lt;br/&gt;selectSort(arr)&lt;br/&gt;&lt;/p&gt;&lt;p&gt;val now2: Date = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date()&lt;br/&gt;val date2 = dateFormat.format(now2)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;插入排序后时间 = &quot;&lt;/span&gt; + date2) &lt;/p&gt;&lt;p&gt;// 第2轮插入排序 ((34, 101), 119, 1) =&amp;gt; ((34, 101, 119), 1)&lt;br/&gt;insertValue = arr(2) // 将要插入的元素的值&lt;br/&gt;insertIndex = 2 - 1 // 表示(34, 101)有序表的最后这个元素的索引，即有序表的最大值的索引&lt;br/&gt;while (insertIndex &amp;gt;= 0 &amp;amp;&amp;amp; arr(insertIndex) &amp;gt; insertValue) {&lt;br/&gt;arr(insertIndex + 1) = arr(insertIndex) // 插入的位置的意思是：插入有序表中最后一个元素的下一个位置，插入的是自己&lt;br/&gt;insertIndex -= 1 // insertIndex = -1&lt;br/&gt;}&lt;br/&gt;// 退出 while 循环或者不进入 while 循环，表示要插入的位置找到了&lt;br/&gt;arr(insertIndex + 1) = insertValue  // 插入的位置的意思是：插入有序表中最后一个元素的下一个位置，插入的是要插入的值&lt;br/&gt;println(&quot;第2轮插入排序结束，结果是&quot;)&lt;br/&gt;println(arr.mkString(&quot; &quot;))&lt;/p&gt;&lt;p&gt;// 第3轮插入排序 ((34, 101, 119), 1) =&amp;gt; (1, 34, 101, 119)&lt;br/&gt;insertValue = arr(3) // 将要插入的元素的值&lt;br/&gt;insertIndex = 3 - 1 // 表示(34, 101, 119)有序表的最后这个元素的索引，即有序表的最大值的索引&lt;br/&gt;while (insertIndex &amp;gt;= 0 &amp;amp;&amp;amp; arr(insertIndex) &amp;gt; insertValue) {&lt;br/&gt;arr(insertIndex + 1) = arr(insertIndex) // 插入的位置的意思是：插入有序表中最后一个元素的下一个位置，插入的是自己&lt;br/&gt;insertIndex -= 1 // insertIndex = -1&lt;br/&gt;}&lt;br/&gt;// 退出 while 循环或者不进入 while 循环，表示要插入的位置找到了&lt;br/&gt;arr(insertIndex + 1) = insertValue  // 插入的位置的意思是：插入有序表中最后一个元素的下一个位置，插入的是要插入的值&lt;br/&gt;println(&quot;第3轮插入排序结束，结果是&quot;)&lt;br/&gt;println(arr.mkString(&quot; &quot;))&lt;/p&gt;&lt;p&gt;// 总结规律&lt;br/&gt;for (i &amp;lt;- 1 until arr.length) {&lt;br/&gt;val insertValue = arr(i) // 将要插入的元素的值&lt;br/&gt;var insertIndex = i - 1 // 表示有序表的最后这个元素的索引，即有序表的最大值的索引&lt;br/&gt;while (insertIndex &amp;gt;= 0 &amp;amp;&amp;amp; arr(insertIndex) &amp;gt; insertValue) {&lt;br/&gt;arr(insertIndex + 1) = arr(insertIndex) // 插入的位置的意思是：插入有序表中最后一个元素的下一个位置，插入的是自己&lt;br/&gt;insertIndex -= 1 // insertIndex = -1&lt;br/&gt;}&lt;br/&gt;// 退出 while 循环或者不进入 while 循环，表示要插入的位置找到了&lt;br/&gt;arr(insertIndex + 1) = insertValue  // 插入的位置的意思是：插入有序表中最后一个元素的下一个位置，插入的是要插入的值&lt;br/&gt;println(s&quot;第${i}轮插入排序结束，结果是&quot;)&lt;br/&gt;println(arr.mkString(&quot; &quot;))&lt;br/&gt;}&lt;br/&gt;*/&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;insertSort&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(arr: Array[Int])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; until arr.length) {&lt;br/&gt;val insertValue = arr(i) &lt;br/&gt;var insertIndex = i - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (insertIndex &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; arr(insertIndex) &amp;gt; insertValue) {&lt;br/&gt;arr(insertIndex + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = arr(insertIndex) &lt;br/&gt;insertIndex -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;arr(insertIndex + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = insertValue  &lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;插入排序前&lt;br/&gt;选择排序前时间 = &lt;span class=&quot;hljs-number&quot;&gt;2019&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;&lt;br/&gt;插入排序后&lt;br/&gt;插入排序后时间 = &lt;span class=&quot;hljs-number&quot;&gt;2019&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h1985&quot;&gt;&lt;span&gt;&lt;strong&gt;19.8.5 快速排序&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;基本介绍&lt;/strong&gt;&lt;br/&gt;  快速排序（Quicksort）是对冒泡排序的一种改进。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插入排序法思想&lt;/strong&gt;&lt;br/&gt;  基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快速排序示意图&lt;/strong&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBn4f.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;快速排序的代码：&lt;/p&gt;
&lt;pre readability=&quot;23.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;41&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.sort&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Date&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; util.control.Breaks._&lt;/p&gt;&lt;p&gt;object QuickSortDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;val random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; util.Random()&lt;br/&gt;val arr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Array[Int](&lt;span class=&quot;hljs-number&quot;&gt;80000000&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until &lt;span class=&quot;hljs-number&quot;&gt;80000000&lt;/span&gt;) {&lt;br/&gt;arr(i) = random.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;800000000&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;val dateFormat: SimpleDateFormat = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;)&lt;br/&gt;val now: Date = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date()&lt;br/&gt;val date = dateFormat.format(now)&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;快速排序前&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;快速排序前时间 = &quot;&lt;/span&gt; + date) &lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;快速排序后&quot;&lt;/span&gt;)&lt;br/&gt;quickSort(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, arr.length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, arr)&lt;br/&gt;&lt;/p&gt;&lt;p&gt;val now2: Date = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date()&lt;br/&gt;val date2 = dateFormat.format(now2)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;快速排序后时间 = &quot;&lt;/span&gt; + date2) &lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(left: Int, right: Int, arr: Array[Int])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;var l = left&lt;br/&gt;var r = right&lt;br/&gt;val pivot = arr((left + right) / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (l &amp;lt; r) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (arr(l) &amp;lt; pivot) { &lt;br/&gt;l += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (arr(r) &amp;gt; pivot) { &lt;br/&gt;r -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (l &amp;gt;= r) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;val temp = arr(l)&lt;br/&gt;arr(l) = arr(r)&lt;br/&gt;arr(r) = temp&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arr(l) == pivot) { &lt;br/&gt;r -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arr(r) == pivot) { &lt;br/&gt;l += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (l == r) {&lt;br/&gt;l += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;r -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (left &amp;lt; r) { &lt;br/&gt;quickSort(left, r, arr)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (right &amp;gt; l) { &lt;br/&gt;quickSort(l, right, arr)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;快速排序前&lt;br/&gt;快速排序前时间 = &lt;span class=&quot;hljs-number&quot;&gt;2019&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;&lt;br/&gt;快速排序后&lt;br/&gt;快速排序后时间 = &lt;span class=&quot;hljs-number&quot;&gt;2019&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;快速排序代码详细图解&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBKC8.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h1986&quot;&gt;&lt;span&gt;&lt;strong&gt;19.8.6 归并排序&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;基本介绍&lt;/strong&gt;&lt;br/&gt;  归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的&lt;code&gt;分治(divide-and-conquer)策略&lt;/code&gt;（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案&quot;修补&quot;在一起，即分而治之）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;归并排序思想示意图1-基本思想&lt;/strong&gt;&lt;br/&gt;  可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用递归去实现（也可采用迭代的方式去实现）。分的阶段可以理解为就是递归拆分子序列的过程。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBQgg.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;归并排序思想示意图2-合并相邻有序子序列&lt;/strong&gt;&lt;br/&gt;  再来看看治的阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将 [4,5,7,8] 和 [1,2,3,6] 两个已经有序的子序列，合并为最终序列 [1,2,3,4,5,6,7,8]，来看下实现步骤：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBlvQ.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;归并排序的代码：
&lt;pre readability=&quot;28.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;51&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.sort&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Date&lt;/p&gt;&lt;p&gt;object MergeSortDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;val random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; util.Random()&lt;br/&gt;val arr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Array[Int](&lt;span class=&quot;hljs-number&quot;&gt;80000000&lt;/span&gt;)&lt;br/&gt;val temp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Array[Int](arr.length)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until &lt;span class=&quot;hljs-number&quot;&gt;80000000&lt;/span&gt;) {&lt;br/&gt;arr(i) = random.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;800000000&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;val dateFormat: SimpleDateFormat = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;)&lt;br/&gt;val now: Date = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date()&lt;br/&gt;val date = dateFormat.format(now)&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;归并排序前&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;归并排序前时间 = &quot;&lt;/span&gt; + date) &lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;归并排序后&quot;&lt;/span&gt;)&lt;br/&gt;mergeSort(arr, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, arr.length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, temp)&lt;br/&gt;&lt;/p&gt;&lt;p&gt;val now2: Date = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date()&lt;br/&gt;val date2 = dateFormat.format(now2)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;归并排序后时间 = &quot;&lt;/span&gt; + date2) &lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(arr: Array[Int], left: Int, right: Int, temp: Array[Int])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (left &amp;lt; right) {&lt;br/&gt;val mid = (left + right) / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;mergeSort(arr, left, mid, temp) &lt;br/&gt;mergeSort(arr, mid + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, right, temp) &lt;br/&gt;merge(arr, left, mid, right, temp) &lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(arr: Array[Int], left: Int, mid: Int, right: Int, temp: Array[Int])&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;var i = left &lt;br/&gt;var j = mid + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;var t = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt;= mid &amp;amp;&amp;amp; j &amp;lt;= right) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arr(i) &amp;lt;= arr(j)) { &lt;br/&gt;temp(t) = arr(i) &lt;br/&gt;t += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;temp(t) = arr(j) &lt;br/&gt;t += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;j += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt;= mid) { &lt;br/&gt;temp(t) = arr(i)&lt;br/&gt;t += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (j &amp;lt;= right) { &lt;br/&gt;temp(t) = arr(j)&lt;br/&gt;t += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;j += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;t = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;br/&gt;var tempLeft = left &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (tempLeft &amp;lt;= right) { &lt;br/&gt;arr(tempLeft) = temp(t)&lt;br/&gt;t += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;tempLeft += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;归并排序前&lt;br/&gt;归并排序前时间 = &lt;span class=&quot;hljs-number&quot;&gt;2019&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;&lt;br/&gt;归并排序后&lt;br/&gt;归并排序后时间 = &lt;span class=&quot;hljs-number&quot;&gt;2019&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;58&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h199&quot;&gt;&lt;span&gt;&lt;strong&gt;19.9 查找&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h1891&quot;&gt;&lt;span&gt;&lt;strong&gt;18.9.1 介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;在 java 中，我们常用的查找有两种:&lt;br/&gt;  1、顺序(线性)查找&lt;br/&gt;  2、二分查找&lt;/p&gt;
&lt;h4 id=&quot;h1992&quot;&gt;&lt;span&gt;&lt;strong&gt;19.9.2 线性查找&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  有一个数列：{1, 8, 10, 89, 1000, 1234} ，判断数列中是否包含此名称。&lt;br/&gt;  要求: 如果找到了，就提示找到，并给出下标值。&lt;/p&gt;
&lt;h4 id=&quot;h1993&quot;&gt;&lt;span&gt;&lt;strong&gt;19.9.3 二分查找&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  请对一个有序数组进行二分查找 {1, 8, 10, 89, 1000, 1234}，输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示&quot;没有这个数&quot;。&lt;br/&gt;  课后思考题：{1, 8, 10, 89, 1000, 1000, 1234} 当一个有序数组中，有多个相同的数值时，如何将所有的数值都查找到，比如：这里的 1000&lt;/p&gt;
&lt;p&gt;二分查找 + 二分查找所有相同的值 的代码实现&lt;/p&gt;
&lt;pre readability=&quot;37.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;69&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.search&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.collection.mutable.ArrayBuffer&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; util.control.Breaks._&lt;/p&gt;&lt;p&gt;object BinarySearchDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val arr = Array(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;89&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1234&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;val index = binarySearch(arr, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, arr.length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;找到，索引为 = &quot;&lt;/span&gt; + index)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;没有找到&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;--------------------&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;val resArr = binarySearch2(arr, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, arr.length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (resArr.length != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (index &amp;lt;- resArr) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;找到，索引分别 = &quot;&lt;/span&gt; + index)&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;没有找到&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(arr: Array[Int], left: Int, right: Int, findValue: Int)&lt;/span&gt;: Int &lt;/span&gt;= {&lt;br/&gt;val midIndex = (left + right) / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;val midValue = arr(midIndex)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (left &amp;gt; right) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (findValue &amp;lt; midValue) {&lt;br/&gt;binarySearch(arr, left, midIndex - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, findValue)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (findValue &amp;gt; midValue) {&lt;br/&gt;binarySearch(arr, midIndex + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, right, findValue)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; midIndex&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;binarySearch2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(arr: Array[Int], left: Int, right: Int, findValue: Int)&lt;/span&gt;: ArrayBuffer[Int] &lt;/span&gt;= {&lt;br/&gt;val midIndex = (left + right) / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;val midValue = arr(midIndex)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (left &amp;gt; right) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ArrayBuffer() &lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (findValue &amp;lt; midValue) {&lt;br/&gt;binarySearch2(arr, left, midIndex - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, findValue)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (findValue &amp;gt; midValue) {&lt;br/&gt;binarySearch2(arr, midIndex + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, right, findValue)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;val resArr = ArrayBuffer[Int]()&lt;/p&gt;&lt;p&gt;&lt;br/&gt;var temp = midIndex - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || arr(temp) != findValue) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arr(temp) == findValue) {&lt;br/&gt;resArr.append(temp)&lt;br/&gt;}&lt;br/&gt;temp -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;resArr.append(midIndex) &lt;/p&gt;&lt;p&gt;&lt;br/&gt;temp = midIndex + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp &amp;gt; right || arr(temp) != findValue) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arr(temp) == findValue) {&lt;br/&gt;resArr.append(temp)&lt;br/&gt;}&lt;br/&gt;temp += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; resArr&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;找到，索引为 = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;--------------------&lt;br/&gt;找到，索引分别 = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;找到，索引分别 = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;找到，索引分别 = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h1910&quot;&gt;&lt;span&gt;&lt;strong&gt;19.10 哈希表(散列表)&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h19101&quot;&gt;&lt;span&gt;&lt;strong&gt;19.10.1 看一个实际需求&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  google 公司的一个上机题：&lt;br/&gt;  有一个公司，当有新的员工来报道时,要求将该员工的信息加入(id,性别,年龄,住址…)，当输入该员工的 id 时，要求查找到该员工的所有信息。&lt;br/&gt;  要求：不使用数据库，尽量节省内存，速度越快越好 =&amp;gt; 哈希表(散列)&lt;/p&gt;
&lt;h4 id=&quot;h19102&quot;&gt;&lt;span&gt;&lt;strong&gt;19.10.2 哈希表的基本介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  散列表（Hash table，也叫哈希表），是根据&lt;code&gt;关键码值(key value)&lt;/code&gt;而直接进行访问的数据结构。也就是说，它通过把&lt;code&gt;关键码值&lt;/code&gt;&lt;strong&gt;映射到表中一个位置来访问记录&lt;/strong&gt;，以加快查找的速度。这个映射函数叫做&lt;code&gt;散列函数&lt;/code&gt;，存放记录的数组叫做&lt;code&gt;散列表&lt;/code&gt;。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbB3uj.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;自定义缓存&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBGbn.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h19103&quot;&gt;&lt;span&gt;&lt;strong&gt;19.10.3 应用实例&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  google 公司的一个上机题：&lt;br/&gt;  有一个公司，当有新的员工来报道时,要求将该员工的信息加入(id,性别,年龄,住址…)，当输入该员工的 id 时，要求查找到该员工的所有信息。&lt;br/&gt;  要求：&lt;br/&gt;  1、不使用数据库，尽量节省内存，速度越快越好 =&amp;gt; 哈希表(散列)&lt;br/&gt;  2、使用链表来实现哈希表，该链表不带表头。[即: 链表的第一个结点就存放雇员信息]&lt;br/&gt;  3、添加时，保证按照 id 从低到高插入。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路分析示意图&lt;/strong&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBYEq.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;[思考：如果 id 不是从低到高插入，但要求各条链表仍是从低到高，怎么解决？以及插入链表中的数据不能重复，如何解决？] 代码如下&lt;br/&gt;代码实现[增删改查(显示所有员工,按 id 查询)]&lt;/p&gt;
&lt;pre readability=&quot;34.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;63&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.hashtab&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.io.StdIn&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; util.control.Breaks._&lt;/p&gt;&lt;p&gt;object HashTabDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val hashTab = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HashTab(&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;var key = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;add：添加雇员 &quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;list：显示雇员&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;find：查找雇员&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;exit：退出系统&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;key = StdIn.readLine()&lt;br/&gt;key match {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;add&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;请输入id：&quot;&lt;/span&gt;)&lt;br/&gt;val id = StdIn.readInt()&lt;br/&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;请输入名字：&quot;&lt;/span&gt;)&lt;br/&gt;val name = StdIn.readLine()&lt;br/&gt;val emp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Emp(id, name)&lt;br/&gt;hashTab.add2(emp)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;list&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;hashTab.list()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;find&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;请输入id：&quot;&lt;/span&gt;)&lt;br/&gt;val id = StdIn.readInt()&lt;br/&gt;hashTab.findEmpById(id)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;exit&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;System.exit(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HashTab&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;) &lt;/span&gt;{ &lt;/p&gt;&lt;p&gt;val empLinkedListArr: Array[EmpLinkedList] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Array[EmpLinkedList](size)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until size) {&lt;br/&gt;empLinkedListArr(i) = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; EmpLinkedList&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;hashFun&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id: Int)&lt;/span&gt;: Int &lt;/span&gt;= {&lt;br/&gt;id % size&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;add2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(emp: Emp)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val empLinkedListNo = hashFun(emp.id) &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.empLinkedListArr(empLinkedListNo).findEmpById(emp.id) != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;要添加的雇员 id=%d 已存在，请重新添加\n&quot;&lt;/span&gt;, emp.id)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.empLinkedListArr(empLinkedListNo).add2(emp)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until size) {&lt;br/&gt;empLinkedListArr(i).list(i)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;findEmpById&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val empLinkedListNo = hashFun(id) &lt;br/&gt;val emp = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.empLinkedListArr(empLinkedListNo).findEmpById(id)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (emp != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;printf(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;在第 ${empLinkedListNo} 条雇员链表上找到 id=%d name=%s 的雇员\n&quot;&lt;/span&gt;, id, emp.name)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;没有找到id为 %d 的雇员\n&quot;&lt;/span&gt;, id)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;EmpLinkedList&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;var head: Emp = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(emp: Emp)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (head == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;head = emp &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;var temp = head&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;temp = temp.next &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;temp.next = emp&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;add2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(emp: Emp)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (head == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;head = emp &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;var temp = head&lt;br/&gt;var flag = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (emp.id &amp;lt; temp.id) { &lt;br/&gt;flag = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(emp.id &amp;lt; temp.next.id)&lt;/span&gt; &lt;/span&gt;{ &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;temp = temp.next &lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (flag) { &lt;br/&gt;head = emp&lt;br/&gt;emp.next = temp&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (emp.id &amp;lt; temp.id) { &lt;br/&gt;head = emp&lt;br/&gt;emp.next = temp&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;emp.next = temp.next&lt;br/&gt;temp.next = emp&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(i: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (head == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;println(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;第 ${i} 条雇员链表的数据为空&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;print(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;第 ${i} 条雇员链表的数据为：&quot;&lt;/span&gt;)&lt;br/&gt;var temp = head&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;=&amp;gt; id=%d name=%s\t&quot;&lt;/span&gt;, temp.id, temp.name)&lt;br/&gt;temp = temp.next &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;println()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;findEmpById&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id: Int)&lt;/span&gt;: Emp &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (head == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;var temp = head&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp.id == id) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;temp = temp.next&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Emp&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;eId&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;eName&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;val id = eId&lt;br/&gt;var name = eName&lt;br/&gt;var next: Emp = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;核心代码截图如下：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbB8Ds.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h1911&quot;&gt;&lt;span&gt;&lt;strong&gt;19.11 二叉树&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h19111&quot;&gt;&lt;span&gt;&lt;strong&gt;19.11.1 为什么需要树这种数据结构&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1、数组存储方式的分析&lt;/strong&gt;&lt;br/&gt;  优点：通过索引的方式访问元素，速度快。&lt;code&gt;对于有序数组&lt;/code&gt;，还可使用&lt;code&gt;二分查找&lt;/code&gt;提高检索速度。&lt;br/&gt;  缺点：如果要检索具体某个值，或者插入值(按一定顺序)会整体移动，效率较低。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、链式存储方式的分析&lt;/strong&gt;&lt;br/&gt;  优点：在一定程度上对数组存储方式有优化(比如：插入一个数值节点，只需要将插入的节点，链接到链表中即可)。&lt;br/&gt;  缺点：在进行检索时，效率仍然较低，比如(检索某个值，需要从头节点开始遍历)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、树存储方式的分析&lt;/strong&gt;&lt;br/&gt;  能提高数据存储、读取的效率，比如：利用&lt;code&gt;二叉排序树(Binary Sort Tree)&lt;/code&gt;，既可以保证数据的检索速度，同时也可以保证数据的插入、删除、修改的速度。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBtU0.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h19112&quot;&gt;&lt;span&gt;&lt;strong&gt;19.11.2 二叉树的示意图&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBN5V.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h19113&quot;&gt;&lt;span&gt;&lt;strong&gt;19.11.3 二叉树的概念&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1、树有很多种，&lt;code&gt;每个节点最多只能有两个子节点&lt;/code&gt;的一种形式称为二叉树。&lt;br/&gt;2、二叉树的子节点分为左节点和右节点。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBaCT.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;3、如果该二叉树的&lt;code&gt;所有叶子节点都在最后一层&lt;/code&gt;，并且&lt;code&gt;结点总数 = 2^n - 1&lt;/code&gt;，n 为层数，则我们称为&lt;code&gt;满二叉树&lt;/code&gt;。&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBd8U.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;4、如果该二叉树的所有叶子节点都在最后一层或者倒数第二层，而且最后一层的叶子节点在左边连续，倒数第二层的叶子节点在右边连续，我们称为&lt;code&gt;完全二叉树&lt;/code&gt;。&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBw2F.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h19114&quot;&gt;&lt;span&gt;&lt;strong&gt;19.11.4 二叉树遍历的说明&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  使用前序、中序和后序对下面的二叉树进行遍历，对各种遍历方式的说明:&lt;br/&gt;  前序遍历：先输出父节点，再遍历左子树和右子树。&lt;br/&gt;  中序遍历：先遍历左子树，再输出父节点，再遍历右子树。&lt;br/&gt;  后序遍历：先遍历左子树，再遍历右子树，最后输出父节点。&lt;br/&gt;  小结：看输出父节点的顺序，就确定是前序、中序还是后序。&lt;/p&gt;
&lt;h4 id=&quot;h19115&quot;&gt;&lt;span&gt;&lt;strong&gt;19.11.5 二叉树遍历应用实例(前序、中序、后序)&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbB0v4.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;示例代码如下：
&lt;pre readability=&quot;31.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;57&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.binarytree&lt;p&gt;object BinaryTreeDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val heroNode1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;宋江&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;卢俊义&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode3 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;吴用&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode4 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;入云龙&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode5 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;关胜&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;heroNode1.left = heroNode2&lt;br/&gt;heroNode1.right = heroNode3&lt;br/&gt;heroNode3.left = heroNode5&lt;br/&gt;heroNode3.right = heroNode4&lt;/p&gt;&lt;p&gt;val binaryTree = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BinaryTree&lt;br/&gt;binaryTree.root = &lt;span class=&quot;hljs-function&quot;&gt;heroNode1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-title&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----前序遍历的结果-----&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;binaryTree.&lt;span class=&quot;hljs-title&quot;&gt;preOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-title&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----中序遍历的结果-----&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;binaryTree.&lt;span class=&quot;hljs-title&quot;&gt;infixOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-title&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----后序遍历的结果-----&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;binaryTree.&lt;span class=&quot;hljs-title&quot;&gt;postOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;class BinaryTree {&lt;br/&gt;var root: HeroNode = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;preOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;root.preOrder()&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;当前二叉树为空，不能遍历&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;infixOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;root.infixOrder()&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;当前二叉树为空，不能遍历&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;postOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;root.postOrder()&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;当前二叉树为空，不能遍历&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HeroNode&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;hNo&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;hName&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;val no = hNo&lt;br/&gt;var name = hName&lt;br/&gt;var left: HeroNode = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;var right: HeroNode = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;preOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;节点信息 no=%d name=%s \n&quot;&lt;/span&gt;, no, name)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.preOrder()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.preOrder()&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;infixOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.infixOrder()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;节点信息 no=%d name=%s \n&quot;&lt;/span&gt;, no, name)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.infixOrder()&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;postOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.postOrder()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.postOrder()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;节点信息 no=%d name=%s \n&quot;&lt;/span&gt;, no, name)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;-----前序遍历的结果-----&lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋江 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; name=卢俊义 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; name=关胜 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; name=入云龙 &lt;br/&gt;-----中序遍历的结果-----&lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; name=卢俊义 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋江 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; name=关胜 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; name=入云龙 &lt;br/&gt;-----后序遍历的结果-----&lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; name=卢俊义 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; name=关胜 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; name=入云龙 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋江 &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h19116&quot;&gt;&lt;span&gt;&lt;strong&gt;19.11.6 二叉树-查找指定节点&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;br/&gt;  1、请编写前序查找、中序查找和后序查找的方法。&lt;br/&gt;  2、并分别使用三种查找方式，查找 hNo = 5 的节点&lt;br/&gt;  3、并分析各种查找方式，分别比较了多少&lt;br/&gt;  4、代码实现和思路分析&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBDKJ.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;示例代码如下：
&lt;pre readability=&quot;60.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;115&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.binarytree&lt;p&gt;object BinaryTreeDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val heroNode1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;宋江&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;卢俊义&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode3 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;吴用&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode4 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;入云龙&quot;&lt;/span&gt;)&lt;br/&gt;val heroNode5 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HeroNode(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;关胜&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;heroNode1.left = heroNode2&lt;br/&gt;heroNode1.right = heroNode3&lt;br/&gt;heroNode3.left = heroNode5&lt;br/&gt;heroNode3.right = heroNode4&lt;/p&gt;&lt;p&gt;val binaryTree = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BinaryTree&lt;br/&gt;binaryTree.root = &lt;span class=&quot;hljs-function&quot;&gt;heroNode1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-title&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----前序遍历的结果-----&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;binaryTree.&lt;span class=&quot;hljs-title&quot;&gt;preOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-title&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----中序遍历的结果-----&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;binaryTree.&lt;span class=&quot;hljs-title&quot;&gt;infixOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-title&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----后序遍历的结果-----&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;binaryTree.&lt;span class=&quot;hljs-title&quot;&gt;postOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-title&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-title&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----前序查找的结果-----&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;val temp = binaryTree.preOrderSearch(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;找到，该节点的信息是 no=%d name=%s\n&quot;&lt;/span&gt;, temp.no, temp.name)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;没有找到该节点&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;println()&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----中序查找的结果-----&quot;&lt;/span&gt;)&lt;br/&gt;val temp2 = binaryTree.infixOrderSearch(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp2 != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;找到，该节点的信息是 no=%d name=%s\n&quot;&lt;/span&gt;, temp2.no, temp2.name)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;没有找到该节点&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;println()&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----后序查找的结果-----&quot;&lt;/span&gt;)&lt;br/&gt;val temp3 = binaryTree.postOrderSearch(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp3 != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;找到，该节点的信息是 no=%d name=%s\n&quot;&lt;/span&gt;, temp3.no, temp3.name)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;没有找到该节点&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BinaryTree&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;var root: HeroNode = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;preOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;root.preOrder()&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;当前二叉树为空，不能遍历&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;infixOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;root.infixOrder()&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;当前二叉树为空，不能遍历&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;postOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;root.postOrder()&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;当前二叉树为空，不能遍历&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;preOrderSearch&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(no: Int)&lt;/span&gt;: HeroNode &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; root.preOrderSearch(no)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;infixOrderSearch&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(no: Int)&lt;/span&gt;: HeroNode &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; root.infixOrderSearch(no)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;postOrderSearch&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(no: Int)&lt;/span&gt;: HeroNode &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; root.postOrderSearch(no)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HeroNode&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;hNo&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;hName&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;val no = hNo&lt;br/&gt;var name = hName&lt;br/&gt;var left: HeroNode = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;var right: HeroNode = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;preOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;节点信息 no=%d name=%s \n&quot;&lt;/span&gt;, no, name)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.preOrder()&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.preOrder()&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;infixOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.infixOrder()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;节点信息 no=%d name=%s \n&quot;&lt;/span&gt;, no, name)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.infixOrder()&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;postOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.postOrder()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.postOrder()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;节点信息 no=%d name=%s \n&quot;&lt;/span&gt;, no, name)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;preOrderSearch&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(no: Int)&lt;/span&gt;: HeroNode &lt;/span&gt;= {&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----前序查找次数标记-----&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (no == &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.no) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;var temp: HeroNode = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;temp = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.preOrderSearch(no)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;temp = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.preOrderSearch(no)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;infixOrderSearch&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(no: Int)&lt;/span&gt;: HeroNode &lt;/span&gt;= {&lt;br/&gt;var temp: HeroNode = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;temp = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.infixOrderSearch(no)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----中序查找次数标记-----&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (no == &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.no) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;temp = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.infixOrderSearch(no)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;postOrderSearch&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(no: Int)&lt;/span&gt;: HeroNode &lt;/span&gt;= {&lt;/p&gt;&lt;p&gt;&lt;br/&gt;var temp: HeroNode = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;temp = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.postOrderSearch(no)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;temp = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.postOrderSearch(no)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----后序查找次数标记-----&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (no == &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.no) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre readability=&quot;8&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;10&quot;&gt;-----前序遍历的结果-----&lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋江 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; name=卢俊义 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; name=关胜 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; name=入云龙 &lt;br/&gt;-----中序遍历的结果-----&lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; name=卢俊义 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋江 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; name=关胜 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; name=入云龙 &lt;br/&gt;-----后序遍历的结果-----&lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; name=卢俊义 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; name=关胜 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; name=入云龙 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; name=吴用 &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; name=宋江 &lt;p&gt;-----前序查找的结果-----&lt;br/&gt;-----前序查找次数标记-----&lt;br/&gt;-----前序查找次数标记-----&lt;br/&gt;-----前序查找次数标记-----&lt;br/&gt;-----前序查找次数标记-----&lt;br/&gt;找到，该节点的信息是 no=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; name=关胜&lt;/p&gt;&lt;p&gt;-----中序查找的结果-----&lt;br/&gt;-----中序查找次数标记-----&lt;br/&gt;-----中序查找次数标记-----&lt;br/&gt;-----中序查找次数标记-----&lt;br/&gt;找到，该节点的信息是 no=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; name=关胜&lt;/p&gt;&lt;p&gt;-----后序查找的结果-----&lt;br/&gt;-----后序查找次数标记-----&lt;br/&gt;-----后序查找次数标记-----&lt;br/&gt;找到，该节点的信息是 no=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; name=关胜&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h19117&quot;&gt;&lt;span&gt;&lt;strong&gt;19.11.7 二叉树-删除节点&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;br/&gt;  1、如果删除的节点是叶子节点，则删除该节点&lt;br/&gt;  2、如果删除的节点是非叶子节点，则删除该子树&lt;br/&gt;  3、测试，删除掉 5 号叶子节点 和 3 号子树。&lt;br/&gt;  4、代码，思路在代码中。&lt;/p&gt;
&lt;p&gt;核心代码示例如下：&lt;/p&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;11&quot;&gt;    println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----测试删除节点-------&quot;&lt;/span&gt;)&lt;br/&gt;binaryTree.delNode(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----删除后前序遍历---------&quot;&lt;/span&gt;)&lt;br/&gt;binaryTree.preOrder()&lt;br/&gt;-----------------------------------------------------&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BinaryTree&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;var root: HeroNode = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;delNode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(no: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root.no == no) {&lt;br/&gt;root = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;root.delNode(no)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;-----------------------------------------------------&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HeroNode&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;hNo&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;hName&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;val no = hNo&lt;br/&gt;var name = hName&lt;br/&gt;var left: HeroNode = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;var right: HeroNode = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;delNode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(no: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.no == no) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.no == no) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.delNode(no)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.delNode(no)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;思考&lt;/strong&gt;&lt;br/&gt;如果要删除的节点是非叶子节点，现在我们不希望将该非叶子节点为根节点的子树删除，需要指定规则, 假如规定如下:&lt;br/&gt;删除A节点&lt;br/&gt;（1）如果该非叶子节点A只有一个子节点B，则子节点B替代节点A&lt;br/&gt;（2）如果该非叶子节点A有左子节点B和右子节点C，则让左子节点B替代节点A。&lt;/p&gt;
&lt;h3 id=&quot;h1912&quot;&gt;&lt;span&gt;&lt;strong&gt;19.12 顺序存储的二叉树&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h19121&quot;&gt;&lt;span&gt;&lt;strong&gt;19.12.1 顺序存储二叉树的概念&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;基本说明&lt;/strong&gt;&lt;br/&gt;  从数据存储来看，数组存储方式和树的存储方式可以相互转换，即数组可以转换成树，树也可以转换成数组，看下面的示意图。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBsbR.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h19122&quot;&gt;&lt;span&gt;&lt;strong&gt;19.12.2 顺序存储二叉树的遍历&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;需求：给你一个数组 Array(1,2,3,4,5,6,7)，要求以二叉树前序遍历的方式进行遍历。&lt;br/&gt;前序遍历的结果应当为 1,2,4,5,3,6,7&lt;br/&gt;代码实现：&lt;/p&gt;
&lt;pre readability=&quot;24.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;43&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.binarytree&lt;p&gt;object ArrayTreeDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val arr = Array(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)&lt;br/&gt;val arrayTree = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayTree(arr)&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----前序遍历(数组)的结果-----&quot;&lt;/span&gt;)&lt;br/&gt;arrayTree.preOrder()&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----中序遍历(数组)的结果-----&quot;&lt;/span&gt;)&lt;br/&gt;arrayTree.infixOrder()&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----后序遍历(数组)的结果-----&quot;&lt;/span&gt;)&lt;br/&gt;arrayTree.postOrder()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ArrayTree&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;arr&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;]) &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;preOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;:Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.preOrder(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;infixOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;:Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.infixOrder(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;postOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;:Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.postOrder(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;preOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(index: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arr == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; || arr.length == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;数组为空，不能按照二叉树遍历的方式进行遍历&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;println(arr(index)) &lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((index * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;lt; arr.length) {&lt;br/&gt;preOrder(index * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((index * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &amp;lt; arr.length) {&lt;br/&gt;preOrder(index * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;infixOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(index: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arr == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; || arr.length == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;数组为空，不能按照二叉树遍历的方式进行遍历&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((index * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;lt; arr.length) {&lt;br/&gt;infixOrder(index * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;println(arr(index)) &lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((index * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &amp;lt; arr.length) {&lt;br/&gt;infixOrder(index * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;postOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(index: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arr == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; || arr.length == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;数组为空，不能按照二叉树遍历的方式进行遍历&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((index * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;lt; arr.length) {&lt;br/&gt;postOrder(index * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((index * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &amp;lt; arr.length) {&lt;br/&gt;postOrder(index * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;println(arr(index)) &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;-----前序遍历(数组)的结果-----&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;-----中序遍历(数组)的结果-----&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;-----后序遍历(数组)的结果-----&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h1913&quot;&gt;&lt;span&gt;&lt;strong&gt;19.13 二叉树排序树&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h19131&quot;&gt;&lt;span&gt;&lt;strong&gt;19.13.1 先看一个需求&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;&lt;br/&gt;  给你一个数组 (7, 3, 10, 12, 5, 1, 9)，要求能够高效的完成对数组的查询和添加。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案分析&lt;/strong&gt;&lt;br/&gt;1、使用数组&lt;br/&gt;  数组未排序，优点：直接在数组尾添加，速度快。缺点：查找速度慢。&lt;br/&gt;  数组排序，优点：可以使用二分查找，查找速度快。缺点：为了保证数组有序，在添加新数据时，找到插入位置后，后面的数据需整体移动，速度慢。&lt;/p&gt;
&lt;p&gt;2、使用链式存储-链表&lt;br/&gt;  不管链表是否有序，查找速度都慢，添加数据速度比数组快，不需要数据整体移动。&lt;/p&gt;
&lt;p&gt;3、使用二叉排序树&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbB6V1.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h19132&quot;&gt;&lt;span&gt;&lt;strong&gt;19.13.2 二叉排序树的介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  二叉排序树：BST: (Binary Sort(Search) Tree)，对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点的值比当前节点的值大。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;特别说明&lt;/code&gt;：如果有相同的值，可以将该节点放在左子节点或右子节点，比如针对前面的数组 (7, 3, 10, 12, 5, 1, 9)，插入2，则对应的二叉排序树为：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBrr9.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h19133&quot;&gt;&lt;span&gt;&lt;strong&gt;19.13.3 二叉排序树的创建和遍历&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;一个数组创建成对应的二叉排序树，并使用&lt;code&gt;中序遍历二叉排序树&lt;/code&gt;，比如 数组为 Array(7, 3, 10, 12, 5, 1, 9)。&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;18.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;31&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.binarytree&lt;p&gt;object BinarySortTreeDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val arr = Array(&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)&lt;br/&gt;val binarySortTree = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BinarySortTree&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (item &amp;lt;- arr) {&lt;br/&gt;binarySortTree.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Node(item))&lt;br/&gt;}&lt;br/&gt;binarySortTree.infixOrder()&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BinarySortTree&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;var root: Node = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(node: Node)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;root = node&lt;br/&gt;}&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;root.add(node)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;infixOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;root.infixOrder()&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;当前二叉树为空，不能遍历&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;var left: Node = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;var right: Node = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(node: Node)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (node == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (node.value &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left = node&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.add(node)&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right = node&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.add(node)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;infixOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.infixOrder()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;节点信息 no=%d \n&quot;&lt;/span&gt;, value)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.infixOrder()&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h19134&quot;&gt;&lt;span&gt;&lt;strong&gt;19.13.4 二叉排序树的删除&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;二叉排序树的删除情况比较复杂，有下面三种情况需要考虑&lt;br/&gt;  1) 删除叶子节点 (比如：2, 5, 9, 12)，即该节点下没有左右子节点&lt;br/&gt;  2) 删除只有一颗子树的节点 (比如：1)，即该节点有左子节点或者右子节点&lt;br/&gt;  3) 删除有两颗子树的节点. (比如：7, 3, 10)，该节点有左子节点和右子节点&lt;br/&gt;  &lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBg56.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;思路分析&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/12/AbBcUx.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;完整代码如下：
&lt;pre readability=&quot;37.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;69&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter19.binarytree&lt;p&gt;object BinarySortTreeDemo01 {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val arr = Array(&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;br/&gt;val binarySortTree = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BinarySortTree&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (item &amp;lt;- arr) {&lt;br/&gt;binarySortTree.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Node(item))&lt;br/&gt;}&lt;br/&gt;binarySortTree.infixOrder()&lt;/p&gt;&lt;p&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------删除节点----------&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;binarySortTree.delNode(&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)&lt;br/&gt;binarySortTree.infixOrder()&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BinarySortTree&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;var root: Node = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(node: Node)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;root = node&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;root.add(node)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;infixOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;root.infixOrder()&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;当前二叉树为空，不能遍历&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(value: Int)&lt;/span&gt;: Node &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; root.search(value)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;searchParent&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(value: Int)&lt;/span&gt;: Node &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; root.searchParent(value)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;delNode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(value: Int)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (root == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;val tagetNode = search(value)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (tagetNode == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;val parentNode = searchParent(value)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (tagetNode.left == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; tagetNode.right == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (parentNode.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; parentNode.left.value == value) { &lt;br/&gt;parentNode.left = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;parentNode.right = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (tagetNode.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; tagetNode.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;val value = delRightTreeMin(tagetNode)&lt;br/&gt;tagetNode.value = value&lt;/p&gt;&lt;p&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (tagetNode.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (parentNode.left.value == value) { &lt;br/&gt;parentNode.left = tagetNode.left&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;parentNode.right = tagetNode.left&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (parentNode.left.value == value) { &lt;br/&gt;parentNode.left = tagetNode.right&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;parentNode.right = tagetNode.right&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;delRightTreeMin&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(node: Node)&lt;/span&gt;: Int &lt;/span&gt;= {&lt;br/&gt;var tagetRight = node&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (tagetRight.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;tagetRight = tagetRight.left&lt;br/&gt;}&lt;br/&gt;val minValue = tagetRight.&lt;span class=&quot;hljs-function&quot;&gt;value&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;delNode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(minValue)&lt;/span&gt;&lt;br/&gt;return minValue&lt;br/&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(var value: Int)&lt;/span&gt; {&lt;br/&gt;var left: Node = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;var right: Node = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(node: Node)&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (node == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (node.value &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left = node&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.add(node)&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right = node&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.add(node)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;infixOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.infixOrder()&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;节点信息 no=%d \n&quot;&lt;/span&gt;, value)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.infixOrder()&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(value: Int)&lt;/span&gt;: Node &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (value == &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (value &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.search(value)&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.search(value)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;searchParent&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(value: Int)&lt;/span&gt;: Node &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.value == value) || (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.value == value)) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; value &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.left.searchParent(value)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; value &amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.right.searchParent(value)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; &lt;br/&gt;----------删除节点----------&lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;br/&gt;节点信息 no=&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h1914&quot;&gt;&lt;span&gt;&lt;strong&gt;19.14 其它二叉树&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  1、线索二叉树：利用没有用到的节点反向指向其父节点。&lt;br/&gt;  2、赫夫曼二叉树(哈夫曼树/最优二叉树) [数据编码、解码 和 数据压缩、解压]&lt;br/&gt;  3、平衡二叉树(平衡二叉搜索树/AVL树) &lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/旋转&quot;&gt;常用的实现方法有：红黑树、替罪羊树、伸展树等&lt;/a&gt;&lt;br/&gt;  4、B树&lt;br/&gt;  5、B+树&lt;br/&gt;  6、2-3树&lt;br/&gt;  7、图&lt;/p&gt;
</description>
<pubDate>Fri, 12 Apr 2019 05:24:00 +0000</pubDate>
<dc:creator>黑泽君</dc:creator>
<og:description>第十九章 Scala语言的数据结构和算法19.1 数据结构(算法)的介绍19.2 看几个实际编程中遇到的问题19.2.1 一个五子棋程序19.2.2 约瑟夫问题(丢手帕问题)19.2.3 其它常见算法</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenmingjun/p/10695481.html</dc:identifier>
</item>
</channel>
</rss>