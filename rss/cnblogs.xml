<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>大数据项目之_15_电信客服分析平台_01&amp;02_项目背景+项目架构+项目实现+数据生产+数据采集/消费(存储) - 黑泽君</title>
<link>http://www.cnblogs.com/chenmingjun/p/10552330.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenmingjun/p/10552330.html</guid>
<description>&lt;p id=&quot;tocid_0&quot; class=&quot;toc&quot;&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h&quot;&gt;一、项目背景&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h-1&quot;&gt;二、项目架构&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h-2&quot;&gt;三、项目实现&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h31&quot;&gt;3.1、数据生产&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h311&quot;&gt;3.1.1、数据结构&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h312&quot;&gt;3.1.2、编写代码&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h313&quot;&gt;3.1.3、打包测试&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h32&quot;&gt;3.2、数据采集/消费(存储)&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h321kafka&quot;&gt;3.2.1、数据采集：采集实时产生的数据到 kafka 集群&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h322hbase&quot;&gt;3.2.2、编写代码：数据消费（HBase）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h323&quot;&gt;3.2.3、编写测试单元：范围查找数据（本方案已弃用，但需掌握）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h324hbase&quot;&gt;3.2.4、运行测试：HBase 消费数据&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h325&quot;&gt;3.2.5、编写代码：优化数据存储方案&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h326&quot;&gt;3.2.6、运行测试：协处理器&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10552330.html#h327&quot;&gt;3.2.7、编写测试单元：范围查找数据&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;h&quot;&gt;&lt;span&gt;&lt;strong&gt;一、项目背景&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;  通信运营商每时每刻会产生大量的通信数据，例如：通话记录，短信记录，彩信记录，第三方服务资费等等繁多信息。数据量如此巨大，除了要满足用户的实时查询和展示之外，还需要定时定期的对已有数据进行离线的分析处理。例如：当日话单，月度话单，季度话单，年度话单，通话详情，通话记录等等。我们以此为背景，寻找一个切入点，&lt;code&gt;学习其中的方法论&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;h-1&quot;&gt;&lt;span&gt;&lt;strong&gt;二、项目架构&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/18/Am04tf.png&quot; alt=&quot;&quot;/&gt;&lt;h2 id=&quot;h-2&quot;&gt;&lt;span&gt;&lt;strong&gt;三、项目实现&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;系统环境：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;系统&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;windows 10&lt;/td&gt;
&lt;td&gt;专业版(建议)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;linux&lt;/td&gt;
&lt;td&gt;CentOS 6.8 or CentOS 7.2(1611 内核)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;开发工具：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;工具&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;idea&lt;/td&gt;
&lt;td&gt;2017.2.5 旗舰版&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;maven&lt;/td&gt;
&lt;td&gt;3.3.9&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;JDK&lt;/td&gt;
&lt;td&gt;1.8+&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;code&gt;尖叫提示&lt;/code&gt;：idea2017.2.5 必须使用 maven3.3.9，不要使用 maven3.5，有部分兼容性问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;集群环境（CDH版）：&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;尖叫提示&lt;/code&gt;：学习的时候使用的普通版本的，企业开发中使用的是 CDH 版本的。&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;框架&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;td&gt;hadoop&lt;/td&gt;
&lt;td&gt;cdh5.3.6-2.5.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;zookeeper&lt;/td&gt;
&lt;td&gt;cdh5.3.6-3.4.5&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;hbase&lt;/td&gt;
&lt;td&gt;cdh5.3.6-0.98&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;hive&lt;/td&gt;
&lt;td&gt;cdh5.3.6-0.13.1&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;flume&lt;/td&gt;
&lt;td&gt;cdh5.3.6-1.5.0（学习使用版本 1.7.0）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;kafka&lt;/td&gt;
&lt;td&gt;kafka_2.10-0.8.2.1（学习使用版本 2.11-0.11.0.2）&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;硬件环境：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;硬件&lt;/th&gt;
&lt;th&gt;hadoop102&lt;/th&gt;
&lt;th&gt;hadoop103&lt;/th&gt;
&lt;th&gt;hadoop104&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;内存&lt;/td&gt;
&lt;td&gt;4G&lt;/td&gt;
&lt;td&gt;2G&lt;/td&gt;
&lt;td&gt;2G&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;2核&lt;/td&gt;
&lt;td&gt;1核&lt;/td&gt;
&lt;td&gt;1核&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;硬盘&lt;/td&gt;
&lt;td&gt;50G&lt;/td&gt;
&lt;td&gt;50G&lt;/td&gt;
&lt;td&gt;50G&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;h31&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1、数据生产&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;  此情此景，对于该模块的业务，即数据生产过程，一般并不会让你来进行操作，数据生产是一套完整且严密的体系，这样可以保证&lt;code&gt;数据的鲁棒性&lt;/code&gt;。但是如果涉及到项目的一体化方案的设计（数据的产生、存储、分析、展示），则必须清楚每一个环节是如何处理的，包括其中每个环境可能隐藏的问题；数据结构，数据内容可能出现的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;h311&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1.1、数据结构&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  我们将在 HBase 中存储两个电话号码，以及通话建立的时间和通话持续时间，最后再加上一个 flag 作为判断第一个电话号码是否为主叫。姓名字段的存储我们可以放置于另外一张表做关联查询，当然也可以插入到当前表中。如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/18/Am0hAP.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;数据结构如下：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;列名&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;th&gt;举例&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr&gt;&lt;td&gt;call1&lt;/td&gt;
&lt;td&gt;第一个手机号码&lt;/td&gt;
&lt;td&gt;15369468720&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;call1_name&lt;/td&gt;
&lt;td&gt;第一个手机号码人姓名(&lt;code&gt;非必须&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;李雁&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;call2&lt;/td&gt;
&lt;td&gt;第二个手机号码&lt;/td&gt;
&lt;td&gt;19920860202&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;call2_name&lt;/td&gt;
&lt;td&gt;第二个手机号码人姓名(&lt;code&gt;非必须&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;卫艺&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;build_time&lt;/td&gt;
&lt;td&gt;建立通话的时间&lt;/td&gt;
&lt;td&gt;20171017081520&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;build_time_ts&lt;/td&gt;
&lt;td&gt;建立通话的时间（时间戳形式）&lt;/td&gt;
&lt;td&gt;毫秒数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;duration&lt;/td&gt;
&lt;td&gt;通话持续时间（秒）&lt;/td&gt;
&lt;td&gt;0600&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;flag&lt;/td&gt;
&lt;td&gt;用于标记本次通话第一个字段(call1)是主叫还是被叫&lt;/td&gt;
&lt;td&gt;1为主叫，0为被叫&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;h312&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1.2、编写代码&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;思路：&lt;br/&gt;  a) 创建 Java 集合类存放模拟的电话号码和联系人；&lt;br/&gt;  b) 随机选取两个手机号码当做“主叫”与“被叫”（注意判断两个手机号不能重复），产出 call1 与 call2 字段数据；&lt;br/&gt;  c) 创建随机生成通话建立时间的方法，可指定随机范围，最后生成通话建立时间，产出 date_time 字段数据；&lt;br/&gt;  d) 随机一个通话时长，单位：秒，产出 duration 字段数据；&lt;br/&gt;  e) 将产出的一条数据拼接封装到一个字符串中；&lt;br/&gt;  f) 使用 IO 操作将产出的一条通话数据写入到本地文件中。（一定要手动 flush，这样能确保每条数据写入到文件一次）&lt;/p&gt;
&lt;p&gt;新建 module 项目：ct_producer&lt;br/&gt;pom.xml 文件配置：&lt;/p&gt;
&lt;pre readability=&quot;6.5&quot;&gt;
&lt;code class=&quot;xml language-xml hljs&quot; readability=&quot;7&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;project.build.sourceEncoding&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;project.build.sourceEncoding&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.12&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;maven-surefire-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.12.4&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;skipTests&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;skipTests&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;1) 随机输入一些手机号码以及联系人，保存于 Java 的集合中。&lt;br/&gt;  新建类：ProductLog&lt;/p&gt;
&lt;pre readability=&quot;21.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;37&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ProductLog&lt;/span&gt; &lt;/span&gt;{&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String startTime = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-01-01&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String endTime = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-12-31&quot;&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; phoneList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, String&amp;gt; phoneNameMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;initPhone&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13242820024&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;14036178412&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;16386074226&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13943139492&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;18714767399&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;14733819877&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13351126401&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13017498589&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;16058589347&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;18949811796&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13558773808&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;14343683320&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13870632301&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13465110157&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;15382018060&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13231085347&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13938679959&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13779982232&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;18144784030&quot;&lt;/span&gt;);&lt;br/&gt;phoneList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;18637946280&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13242820024&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;李雁&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;14036178412&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;卫艺&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;16386074226&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;仰莉&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13943139492&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;陶欣悦&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;18714767399&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;施梅梅&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;14733819877&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;金虹霖&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13351126401&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;魏明艳&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13017498589&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;华贞&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;16058589347&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;华啟倩&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;18949811796&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;仲采绿&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13558773808&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;卫丹&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;14343683320&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;戚丽红&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13870632301&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;何翠柔&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13465110157&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;钱溶艳&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;15382018060&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;钱琳&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13231085347&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;缪静欣&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13938679959&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;焦秋菊&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13779982232&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;吕访琴&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;18144784030&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;沈丹&quot;&lt;/span&gt;);&lt;br/&gt;phoneNameMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;18637946280&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;褚美丽&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2) 创建随机生成通话时间的方法：randomBuildTime()&lt;br/&gt;  该时间生成后的格式为：yyyy-MM-dd HH:mm:ss，并使之可以根据传入的起始时间和结束时间来随机生成。&lt;/p&gt;
&lt;pre readability=&quot;8&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;10&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;randomBuildTime&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String startTime, String endTime)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;SimpleDateFormat sdf1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);&lt;br/&gt;Date startDate = sdf1.parse(startTime);&lt;br/&gt;Date endDate = sdf1.parse(endTime);&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (endDate.getTime() &amp;lt;= startDate.getTime()) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; randomTS = startDate.getTime() + (&lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt;) ((endDate.getTime() - startDate.getTime()) * Math.random());&lt;/p&gt;&lt;p&gt;Date resultDate = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date(randomTS);&lt;br/&gt;SimpleDateFormat sdf2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;);&lt;br/&gt;String resultTimeString = sdf2.format(resultDate);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; resultTimeString;&lt;/p&gt;&lt;p&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (ParseException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3) 创建生产日志一条日志的方法：productLog()&lt;br/&gt;  随机抽取两个电话号码，随机产生通话建立时间，随机通话时长，将这几个字段拼接成一个字符串，然后return，便可以产生一条通话的记录。需要注意的是，如果随机出的两个电话号码一样，需要重新随机（随机过程可优化，但并非此次重点）。通话时长的随机为30分钟以内，即：60秒 * 30，并格式化为4位数字，例如：0600(10分钟)。&lt;/p&gt;
&lt;pre readability=&quot;15&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;24&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;productLog&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;p&gt;String caller = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;String callee = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;String callerName = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;String calleeName = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; callerIndex = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;) (Math.random() * phoneList.size()); &lt;br/&gt;caller = phoneList.get(callerIndex);&lt;br/&gt;callerName = phoneNameMap.get(caller);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; calleeIndex = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;) (Math.random() * phoneList.size()); &lt;br/&gt;callee = phoneList.get(calleeIndex);&lt;br/&gt;calleeName = phoneNameMap.get(callee);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!caller.equals(callee)) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String buildTime = randomBuildTime(startTime, endTime);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;DecimalFormat df = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DecimalFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0000&quot;&lt;/span&gt;);&lt;br/&gt;String duration = df.format((&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;) (&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * Math.random()));&lt;/p&gt;&lt;p&gt;StringBuilder sb = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;br/&gt;sb.append(caller + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;).append(callee + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;).append(buildTime + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;).append(duration);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sb.toString();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4) 创建写入日志方法：writeLog()&lt;br/&gt;  productLog() 方法每产生一条日志，便将日志写入到本地文件中，所以建立一个专门用于日志写入的方法，需要涉及到 IO 操作，需要注意的是，输出流每次写一条日之后需要 flush，不然可能导致积攒多条数据才输出一次。最后需要将 productLog() 方法放置于 while 死循环中执行。&lt;/p&gt;
&lt;pre readability=&quot;7.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;9&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;writeLog&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String filePath)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;OutputStreamWriter osw = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; OutputStreamWriter(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; FileOutputStream(filePath), &lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;Thread.sleep(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;String log = productLog();&lt;br/&gt;System.out.println(log);&lt;/p&gt;&lt;p&gt;osw.write(log + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;br/&gt;osw.flush(); &lt;br/&gt;}&lt;/p&gt;&lt;p&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5) 在主函数中初始化以上逻辑，并测试：&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;4&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (args == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; || args.length &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;No arguments&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;ProductLog productLog = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ProductLog();&lt;br/&gt;productLog.initPhone();&lt;br/&gt;productLog.writeLog(args[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h313&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1.3、打包测试&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1) 打包方式&lt;br/&gt;如果在 eclipse 中，则需要如下 maven 参数进行打包：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs perl&quot;&gt;-P &lt;span class=&quot;hljs-keyword&quot;&gt;local&lt;/span&gt; clean &lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt;：不打包第三方依赖&lt;br/&gt;-P dev clean &lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; install：打包第三方依赖&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果在 idea 中，则需要在 maven project 视图中一次选择如下按钮进行打包：详细操作请参看课堂演示&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;LifeCycle --&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt;(双击)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;分别在 Windows 上和 Linux 中进行测试：&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;hljs&quot; readability=&quot;2&quot;&gt;Windows：&lt;p&gt;java -cp ct_producer-1.0-SNAPSHOT.jar producer.ProductLog /本地目录/callLog.csv&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2) 为日志生成任务编写 bash 脚本：productLog.sh，文件内容如下，该文件放在 /opt/module/flume/job/ct/ 目录下，并授予执行权限。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;shell language-shell hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;!/bin/bash&lt;/span&gt;&lt;br/&gt;java -cp /opt/module/flume/job/ct/ct_producer-1.0-SNAPSHOT.jar com.china.producer.ProductLog /opt/module/flume/job/ct/calllog.csv&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h32&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2、数据采集/消费(存储)&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  欢迎来到数据采集模块（消费），在企业中你要清楚流式数据采集框架 flume 和 kafka 的定位是什么。我们在此需要将实时数据通过 flume 采集到 kafka 然后供给给 hbase 消费。&lt;/p&gt;
&lt;p&gt;flume：Cloudera 公司研发&lt;br/&gt;  适合采集文件中的数据；&lt;br/&gt;  适合下游数据消费者不多的情况；&lt;br/&gt;  适合数据安全性要求不高的操作；&lt;br/&gt;  适合与 Hadoop 生态圈对接的操作。&lt;/p&gt;
&lt;p&gt;kafka：Linkedin 公司研发&lt;br/&gt;  适合数据下游消费众多的情况；&lt;br/&gt;  适合数据安全性要求较高的操作（支持 replication(副本)）。&lt;/p&gt;
&lt;p&gt;HBase：实时保存一条一条流入的数据（万金油）&lt;br/&gt;情景：&lt;br/&gt;  适用于在线业务&lt;br/&gt;  适用于离线业务&lt;br/&gt;  适用于非结构化数据&lt;br/&gt;  适用于结构化数据&lt;/p&gt;
&lt;p&gt;因此我们常用的一种模型是：&lt;br/&gt;  线上数据 --&amp;gt; flume --&amp;gt; kafka --&amp;gt; flume(根据情景增删该流程) --&amp;gt; HDFS （最常用）&lt;br/&gt;  线上数据 --&amp;gt; flume --&amp;gt; kafka --&amp;gt; 根据kafka的API自己写 --&amp;gt; HDFS&lt;br/&gt;  线上数据 --&amp;gt; kafka --&amp;gt; HDFS&lt;br/&gt;  线上数据 --&amp;gt; kafka --&amp;gt; Spark/Storm&lt;/p&gt;
&lt;p&gt;消费存储模块流程图：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/18/Am0W7t.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;公司中的业务情景：&lt;/strong&gt;&lt;br/&gt;  1、公司已经设计好架构了，耐心了解每一个框架应对的是哪一个业务的功能，之后按照框架进行分层。&lt;br/&gt;  2、公司没有架构，需要自己搭建，需要按照客户的需求，先对需求进行分层，根据需求用对应的框架实现，之后对框架进行分层。（架构师的思想：宏观格局，5万的月薪，这样才刺激！）&lt;/p&gt;
&lt;h4 id=&quot;h321kafka&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2.1、数据采集：采集实时产生的数据到 kafka 集群&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;思路：&lt;br/&gt;  a) 配置 kafka，启动 zookeeper 和 kafka 集群；&lt;br/&gt;  b) 创建 kafka 主题；&lt;br/&gt;  c) 启动 kafka 控制台消费者（&lt;code&gt;此消费者只用于测试使用&lt;/code&gt;）；&lt;br/&gt;  d) 配置 flume，监控日志文件；&lt;br/&gt;  e) 启动 flume 监控任务；&lt;br/&gt;  f) 运行日志生产脚本；&lt;br/&gt;  g) 观察测试。&lt;/p&gt;
&lt;p&gt;1) 配置 kafka&lt;br/&gt;使用新版本 &lt;code&gt;kafka_2.11-0.11.0.2&lt;/code&gt;，不使用老版本 &lt;code&gt;kafka_2.10-0.8.2.1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新旧版本的区别：&lt;/strong&gt;&lt;br/&gt;新：能配置 delete.topic.enable=true 删除topic功能使能，老版本没有，不过配置了也生效。&lt;br/&gt;旧：需要配置 port=9092，host.name=hadoop102，新版本的不需要。&lt;br/&gt;新：设置读取偏移地址的位置 auto.offset.reset 默认值是 latest，还可以填写 earliest。&lt;br/&gt;旧：设置读取偏移地址的位置 auto.offset.reset 默认值是 largest，还可以填写 smallest。&lt;br/&gt;server.properties&lt;/p&gt;
&lt;pre readability=&quot;15.5&quot;&gt;
&lt;code class=&quot;hljs coffeescript&quot; readability=&quot;25&quot;&gt;&lt;p&gt;&lt;br/&gt;broker.id=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;.topic.enable=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;num.network.threads=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;num.io.threads=&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;socket.send.buffer.bytes=&lt;span class=&quot;hljs-number&quot;&gt;102400&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;socket.receive.buffer.bytes=&lt;span class=&quot;hljs-number&quot;&gt;102400&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;socket.request.max.bytes=&lt;span class=&quot;hljs-number&quot;&gt;104857600&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;log.dirs=/opt/&lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;/kafka/logs&lt;/p&gt;&lt;p&gt;&lt;br/&gt;num.partitions=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;num.recovery.threads.per.data.dir=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;offsets.topic.replication.factor=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;transaction.state.log.replication.factor=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;transaction.state.log.min.isr=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;log.retention.hours=&lt;span class=&quot;hljs-number&quot;&gt;168&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;log.segment.bytes=&lt;span class=&quot;hljs-number&quot;&gt;1073741824&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;log.retention.check.interval.ms=&lt;span class=&quot;hljs-number&quot;&gt;300000&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;zookeeper.connect=hadoop102:&lt;span class=&quot;hljs-number&quot;&gt;2181&lt;/span&gt;,hadoop103:&lt;span class=&quot;hljs-number&quot;&gt;2181&lt;/span&gt;,hadoop104:&lt;span class=&quot;hljs-number&quot;&gt;2181&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;zookeeper.connection.timeout.ms=&lt;span class=&quot;hljs-number&quot;&gt;60000&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;group.initial.rebalance.delay.ms=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置环境变量，并使得配置后的环境变量生效&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;hljs coffeescript&quot; readability=&quot;4&quot;&gt;[atguigu@hadoop102 &lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;]$ sudo vim /etc/profile&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; KAFKA_HOME=/opt/&lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;/kafka&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; PATH=$PATH:$KAFKA_HOME/bin&lt;/p&gt;&lt;p&gt;[atguigu@hadoop102 &lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;]$ source /etc/profile&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;分发安装包或者同步复制到 hadoop103 和 hadoop104&lt;/p&gt;
&lt;pre readability=&quot;4.5&quot;&gt;
&lt;code class=&quot;hljs coffeescript&quot; readability=&quot;3&quot;&gt;[atguigu@hadoop102 &lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;]$ xsync &lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/kafka/&lt;/span&gt;&lt;p&gt;或者&lt;/p&gt;&lt;p&gt;[atguigu@hadoop102 &lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;]$ scp -r &lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/kafka/&lt;/span&gt; hadoop103:&lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop102 &lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;]$ scp -r &lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/kafka/&lt;/span&gt; hadoop104:&lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;：分发之后记得配置其他机器的环境变量。&lt;br/&gt;分别在 hadoop103 和 hadoop104 上修改配置文件 /opt/module/kafka/config/server.properties 中的 broker.id=1、broker.id=2&lt;br/&gt;&lt;code&gt;注意&lt;/code&gt;：broker.id 不得重复。&lt;/p&gt;
&lt;p&gt;2) 先启动 zookeeper 集群 (kafka 集群 依赖于 zookeeper 集群)，再启动 kafka 集群（即启动 3 台 kafka 的 broker 服务）&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 kafka]$ /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;bin&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;-&lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;-&lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;sh&lt;/span&gt; /&lt;span class=&quot;hljs-title&quot;&gt;opt&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;config&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;properties&lt;/span&gt; &amp;amp;&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop103 kafka]$ /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;bin&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;-&lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;-&lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;sh&lt;/span&gt; /&lt;span class=&quot;hljs-title&quot;&gt;opt&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;config&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;properties&lt;/span&gt; &amp;amp;&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop104 kafka]$ /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;bin&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;-&lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;-&lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;sh&lt;/span&gt; /&lt;span class=&quot;hljs-title&quot;&gt;opt&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;config&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;properties&lt;/span&gt; &amp;amp;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3) 创建 kafka 主题&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;$ /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;bin&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;-&lt;span class=&quot;hljs-title&quot;&gt;topics&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;sh&lt;/span&gt; --&lt;span class=&quot;hljs-title&quot;&gt;zookeeper&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;hadoop102&lt;/span&gt;:2181 \&lt;/span&gt;&lt;br/&gt;--create --replication-factor &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; --partitions &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; --topic calllog&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;检查一下是否创建主题成功：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;$ /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;bin&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;-&lt;span class=&quot;hljs-title&quot;&gt;topics&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;sh&lt;/span&gt; --&lt;span class=&quot;hljs-title&quot;&gt;zookeeper&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;hadoop102&lt;/span&gt;:2181 --&lt;span class=&quot;hljs-title&quot;&gt;list&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;删除topic&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;$ /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;bin&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;kafka&lt;/span&gt;-&lt;span class=&quot;hljs-title&quot;&gt;topics&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;sh&lt;/span&gt; --&lt;span class=&quot;hljs-title&quot;&gt;zookeeper&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;hadoop102&lt;/span&gt;:2181 \&lt;/span&gt;&lt;br/&gt;--delete --topic calllog&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;：需要 server.properties 中设置 delete.topic.enable=true 否则只是标记删除或者直接重启。&lt;/p&gt;
&lt;p&gt;4) 启动 kafka 控制台消费者，等待 flume 信息的输入&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;$ /opt/&lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;/kafka/bin/kafka-&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;-consumer.sh --zookeeper hadoop102:&lt;span class=&quot;hljs-number&quot;&gt;2181&lt;/span&gt; \&lt;br/&gt;--topic calllog --&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;-beginning&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5) 配置 flume(flume-kafka.conf)&lt;br/&gt;在 hadoop102 的 /opt/module/flume/job 目录下创建一个 ct 文件夹，进入该文件夹，创建一个文件 flume-kafka.conf，文件内容如下：&lt;/p&gt;
&lt;pre readability=&quot;10&quot;&gt;
&lt;code class=&quot;xml language-xml hljs&quot; readability=&quot;14&quot;&gt;# define&lt;br/&gt;a1.sources = r1&lt;br/&gt;a1.sinks = k1&lt;br/&gt;a1.channels = c1&lt;p&gt;# source&lt;br/&gt;a1.sources.r1.type = exec&lt;br/&gt;a1.sources.r1.command = tail -F -c +0 /opt/module/flume/job/ct/calllog.csv&lt;br/&gt;a1.sources.r1.shell = /bin/bash -c&lt;/p&gt;&lt;p&gt;# sink&lt;br/&gt;a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink&lt;br/&gt;a1.sinks.k1.kafka.bootstrap.servers = hadoop102:9092,hadoop103:9092,hadoop104:9092&lt;br/&gt;a1.sinks.k1.kafka.topic = calllog&lt;br/&gt;a1.sinks.k1.kafka.flumeBatchSize = 20&lt;br/&gt;a1.sinks.k1.kafka.producer.acks = 1&lt;br/&gt;a1.sinks.k1.kafka.producer.linger.ms = 1&lt;/p&gt;&lt;p&gt;# channel&lt;br/&gt;a1.channels.c1.type = memory&lt;br/&gt;a1.channels.c1.capacity = 1000&lt;br/&gt;a1.channels.c1.transactionCapacity = 100&lt;/p&gt;&lt;p&gt;# bind&lt;br/&gt;a1.sources.r1.channels = c1&lt;br/&gt;a1.sinks.k1.channel = c1&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;：需要使用新版本的 flume 的配置文件参考案列。（版本：apache-flume-1.7.0）&lt;/p&gt;
&lt;p&gt;6) 进入 flume 根目录下，启动 flume&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs delphi&quot;&gt;$ bin/flume-ng agent --conf conf/ --&lt;span class=&quot;hljs-keyword&quot;&gt;name&lt;/span&gt; a1 --conf-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; ./job/ct/flume-kafka.conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7) 运行生产日志的任务脚本，观察 kafka 控制台消费者是否成功显示产生的数据&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs php&quot;&gt;$ sh productlog.sh&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h322hbase&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2.2、编写代码：数据消费（HBase）&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  如果以上操作均成功，则开始编写操作 HBase 的代码，用于消费数据，将产生的数据实时存储在 HBase 中。&lt;br/&gt;思路：&lt;br/&gt;  a) 编写 kafka 消费者(使用新API)，读取 kafka 集群中缓存的消息，并打印到控制台以观察是否成功；&lt;br/&gt;  b) 既然能够读取到 kafka 中的数据了，就可以将读取出来的数据写入到 HBase 中，所以编写调用 HBase API 相关方法，将从 Kafka 中读取出来的数据写入到 HBase；&lt;br/&gt;  c) 以上两步已经足够完成消费数据，存储数据的任务，但是涉及到&lt;code&gt;解耦&lt;/code&gt;，所以过程中需要将一些属性文件外部化，HBase 通用性方法封装到某一个类中。&lt;/p&gt;
&lt;p&gt;创建新的 module 项目：ct_consumer&lt;br/&gt;pom.xml 文件配置：&lt;/p&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;xml language-xml hljs&quot; readability=&quot;11&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.china&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;ct_consumer&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.12&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.kafka&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;kafka-clients&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.11.0.2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.hbase&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;hbase-client&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.hbase&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;hbase-server&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;maven-surefire-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.12.4&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;skipTests&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;skipTests&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;project&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;1) 新建类：HBaseConsumer&lt;br/&gt;该类主要用于读取 kafka 中缓存的数据，然后调用 HBase API，持久化数据。&lt;/p&gt;
&lt;pre readability=&quot;14&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;22&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.china.kafka;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.china.hbase.HBaseDao;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.china.utils.PropertiesUtil;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.kafka.clients.consumer.ConsumerRecord;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.kafka.clients.consumer.ConsumerRecords;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.kafka.clients.consumer.KafkaConsumer;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Arrays;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HBaseConsumer&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;KafkaConsumer&amp;lt;String, String&amp;gt; kafkaConsumer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; KafkaConsumer&amp;lt;&amp;gt;(PropertiesUtil.properties);&lt;br/&gt;kafkaConsumer.subscribe(Arrays.asList(PropertiesUtil.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kafka.topics&quot;&lt;/span&gt;)));&lt;/p&gt;&lt;p&gt;HBaseDao hBaseDao = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HBaseDao();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;ConsumerRecords&amp;lt;String, String&amp;gt; records = kafkaConsumer.poll(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (ConsumerRecord&amp;lt;String, String&amp;gt; record : records) {&lt;br/&gt;System.out.println(record.value());&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String oriValue = record.value();&lt;br/&gt;hBaseDao.put(oriValue);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2) 新建类：PropertiesUtil&lt;br/&gt;该类主要用于将常用的项目所需的参数外部化，解耦，方便配置。&lt;/p&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;11&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.china.utils;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.InputStream;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Properties;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PropertiesUtil&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Properties properties = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; {&lt;br/&gt;InputStream is = ClassLoader.getSystemResourceAsStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kafka.properties&quot;&lt;/span&gt;);&lt;br/&gt;properties = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Properties();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;properties.load(is);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String key)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; properties.getProperty(key);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3) 创建 kafka.properties 文件，并放置于 resources 目录下&lt;/p&gt;
&lt;pre readability=&quot;11&quot;&gt;
&lt;code class=&quot;xml language-xml hljs&quot; readability=&quot;16&quot;&gt;# 设置 kafka 服务的地址，不需要将所有 broker 指定上&lt;br/&gt;bootstrap.servers=hadoop102:9092,hadoop103:9092,hadoop104:9092&lt;p&gt;# 设置消费者所属的消费者组&lt;br/&gt;group.id=hbase_consumer_group&lt;/p&gt;&lt;p&gt;# 设置是否自动确认 offset&lt;br/&gt;enable.auto.commit=true&lt;/p&gt;&lt;p&gt;# 设置自动确认 offset 的时间间隔&lt;br/&gt;auto.commit.interval.ms=30000&lt;/p&gt;&lt;p&gt;# 设置 key 和 value 的反序列化类的全类名&lt;br/&gt;key.deserializer=org.apache.kafka.common.serialization.StringDeserializer&lt;br/&gt;value.deserializer=org.apache.kafka.common.serialization.StringDeserializer&lt;/p&gt;&lt;p&gt;########## 以下为自定义的属性设置##########&lt;br/&gt;# 设置本次消费的主题&lt;br/&gt;kafka.topics=calllog&lt;/p&gt;&lt;p&gt;# 设置 HBase 的一些变量&lt;br/&gt;hbase.calllog.namespace=ns_ct&lt;br/&gt;hbase.calllog.tableName=ns_ct:calllog&lt;br/&gt;hbase.calllog.regions.count=6&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4) 将 hdfs-site.xml、core-site.xml、hbase-site.xml、log4j.properties 放置于 resources 目录&lt;/p&gt;
&lt;p&gt;5) 新建类：HBaseUtil&lt;br/&gt;该类主要用于封装一些 HBase 的常用操作，比如：创建命名空间、创建表等等。&lt;/p&gt;
&lt;pre readability=&quot;52.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;99&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.china.utils;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.conf.Configuration;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.HColumnDescriptor;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.HTableDescriptor;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.NamespaceDescriptor;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.TableName;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.client.Admin;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.client.Connection;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.client.ConnectionFactory;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.util.Bytes;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.DecimalFormat;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Iterator;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.TreeSet;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HBaseUtil&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;isExistTable&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Configuration conf, String tableName)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;Connection conn = ConnectionFactory.createConnection(conf);&lt;br/&gt;Admin admin = conn.getAdmin();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; result = admin.tableExists(TableName.valueOf(tableName));&lt;/p&gt;&lt;p&gt;admin.close();&lt;br/&gt;conn.close();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;initNamespace&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Configuration conf, String namespace)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;Connection conn = ConnectionFactory.createConnection(conf);&lt;br/&gt;Admin admin = conn.getAdmin();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;NamespaceDescriptor nd = NamespaceDescriptor&lt;br/&gt;.create(namespace)&lt;br/&gt;.addConfiguration(&lt;span class=&quot;hljs-string&quot;&gt;&quot;CREATE_TIME&quot;&lt;/span&gt;, String.valueOf(System.currentTimeMillis()))&lt;br/&gt;.addConfiguration(&lt;span class=&quot;hljs-string&quot;&gt;&quot;AUTHOR&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;chenmingjun&quot;&lt;/span&gt;)&lt;br/&gt;.build();&lt;/p&gt;&lt;p&gt;admin.createNamespace(nd);&lt;/p&gt;&lt;p&gt;admin.close();&lt;br/&gt;conn.close();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;creatTable&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Configuration conf, String tableName, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; regions, String... columnFamily)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;Connection conn = ConnectionFactory.createConnection(conf);&lt;br/&gt;Admin admin = conn.getAdmin();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isExistTable(conf, tableName)) {&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;表 &quot;&lt;/span&gt; + tableName + &lt;span class=&quot;hljs-string&quot;&gt;&quot; 已存在！&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;HTableDescriptor htd = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HTableDescriptor(TableName.valueOf(tableName));&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String cf : columnFamily) {&lt;br/&gt;HColumnDescriptor hcd = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HColumnDescriptor(cf);&lt;br/&gt;htd.addFamily(hcd);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;admin.createTable(htd, genSplitKeys(regions));&lt;/p&gt;&lt;p&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;表&quot;&lt;/span&gt; + tableName + &lt;span class=&quot;hljs-string&quot;&gt;&quot;创建成功！&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;admin.close();&lt;br/&gt;conn.close();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[][] genSplitKeys(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; regions) {&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String[] keys = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String[regions];&lt;/p&gt;&lt;p&gt;&lt;br/&gt;DecimalFormat df = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DecimalFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;00&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; regions; i++) {&lt;br/&gt;keys[i] = df.format(i) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;|&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[][] splitKeys = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[regions][];&lt;/p&gt;&lt;p&gt;&lt;br/&gt;TreeSet&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[]&amp;gt; treeSet = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TreeSet&amp;lt;&amp;gt;(Bytes.BYTES_COMPARATOR);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; regions; i++) {&lt;br/&gt;treeSet.add(Bytes.toBytes(keys[i]));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Iterator&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[]&amp;gt; splitKeysIterator = treeSet.iterator();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (splitKeysIterator.hasNext()) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[] b = splitKeysIterator.next();&lt;br/&gt;splitKeys[index++] = b;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; splitKeys;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;genRowKey&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String regionCode, String call1, String buildTime, String call2, String flag, String duration)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;StringBuilder sb = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;br/&gt;sb.append(regionCode + &lt;span class=&quot;hljs-string&quot;&gt;&quot;_&quot;&lt;/span&gt;)&lt;br/&gt;.append(call1 + &lt;span class=&quot;hljs-string&quot;&gt;&quot;_&quot;&lt;/span&gt;)&lt;br/&gt;.append(buildTime + &lt;span class=&quot;hljs-string&quot;&gt;&quot;_&quot;&lt;/span&gt;)&lt;br/&gt;.append(call2 + &lt;span class=&quot;hljs-string&quot;&gt;&quot;_&quot;&lt;/span&gt;)&lt;br/&gt;.append(flag + &lt;span class=&quot;hljs-string&quot;&gt;&quot;_&quot;&lt;/span&gt;)&lt;br/&gt;.append(duration);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sb.toString();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;genRegionCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String call1, String buildTime, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; regions)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; len = call1.length();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String lastPhone = call1.substring(len - &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String ym = buildTime.replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;).substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Integer x = Integer.valueOf(lastPhone) ^ Integer.valueOf(ym);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; y = x.hashCode();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; regionCode = y % regions;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;DecimalFormat df = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DecimalFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;00&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df.format(regionCode);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;工作经验小结：针对于一张表，一台服务器(regionServer)维护2到3个region。&lt;/p&gt;
&lt;p&gt;1百万条数据大小50M到100M。假设我们取平均值75M。&lt;br/&gt;1个region维护的数据量是1G到10G。假设我们取1G。1024/75=14百万条数据=1千4百万条数据。&lt;br/&gt;假设数据量有10亿条，那么需要region的数量是：10/0.14=72个。数据量大小大约是72G。&lt;br/&gt;一般而言，我们的region不超过2位数，即一共能有100个region。则能处理的数据量是：100G到1000G。&lt;/p&gt;
&lt;p&gt;对于 flume 而言，数据处理速度要小于 50M/s，flume 就会非常稳定，大于 70M/s flume 就会开始丢包，大于 100M/s 的时候 flume 就没法用了，此时需要修改 flume 源码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6) 新建类：HBaseDAO（&lt;code&gt;完成以下内容后，考虑数据 put 的效率如何优化&lt;/code&gt;）&lt;br/&gt;该类主要用于执行具体的保存数据的操作，rowkey 的生成规则等等。&lt;/p&gt;
&lt;pre readability=&quot;43&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;80&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.china.hbase;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.china.utils.HBaseUtil;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.china.utils.PropertiesUtil;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.conf.Configuration;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.HBaseConfiguration;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.TableName;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.client.Connection;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.client.ConnectionFactory;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.client.Put;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.client.Table;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.util.Bytes;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.ParseException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HBaseDao&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Configuration conf;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Connection conn;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Table table;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String namespace;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String tableName;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; regions;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; SimpleDateFormat sdf1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; SimpleDateFormat sdf2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyyMMddHHmmss&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; {&lt;br/&gt;conf = HBaseConfiguration.create();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HBaseDao&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;/p&gt;&lt;p&gt;&lt;br/&gt;namespace = PropertiesUtil.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hbase.calllog.namespace&quot;&lt;/span&gt;);&lt;br/&gt;tableName = PropertiesUtil.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hbase.calllog.tableName&quot;&lt;/span&gt;);&lt;br/&gt;regions = Integer.valueOf(PropertiesUtil.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hbase.calllog.regions.count&quot;&lt;/span&gt;));&lt;/p&gt;&lt;p&gt;&lt;br/&gt;conn = ConnectionFactory.createConnection(conf);&lt;br/&gt;table = conn.getTable(TableName.valueOf(tableName));&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!HBaseUtil.isExistTable(conf, tableName)) {&lt;/p&gt;&lt;p&gt;HBaseUtil.initNamespace(conf, namespace);&lt;br/&gt;HBaseUtil.creatTable(conf, tableName, regions, &lt;span class=&quot;hljs-string&quot;&gt;&quot;f1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;f2&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String oriValue)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String[] splitOri = oriValue.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String call1 = splitOri[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];&lt;br/&gt;String call2 = splitOri[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;br/&gt;String buildTime = splitOri[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]; &lt;br/&gt;String duration = splitOri[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String buildTimeRep = sdf2.format(sdf1.parse(buildTime));&lt;/p&gt;&lt;p&gt;String flag = &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String buildTime_ts = String.valueOf(sdf1.parse(buildTime).getTime());&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String regionCode = HBaseUtil.genRegionCode(call1, buildTime, regions);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String rowKey = HBaseUtil.genRowKey(regionCode, call1, buildTimeRep, call2, flag, duration);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Put callerPut = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Put(Bytes.toBytes(rowKey));&lt;br/&gt;callerPut.addColumn(Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f1&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;call1&quot;&lt;/span&gt;), Bytes.toBytes(call1));&lt;br/&gt;callerPut.addColumn(Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f1&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;call2&quot;&lt;/span&gt;), Bytes.toBytes(call2));&lt;br/&gt;callerPut.addColumn(Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f1&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;build_time&quot;&lt;/span&gt;), Bytes.toBytes(buildTime));&lt;br/&gt;callerPut.addColumn(Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f1&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;build_time_ts&quot;&lt;/span&gt;), Bytes.toBytes(buildTime_ts));&lt;br/&gt;callerPut.addColumn(Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f1&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;flag&quot;&lt;/span&gt;), Bytes.toBytes(flag));&lt;br/&gt;callerPut.addColumn(Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f1&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;duration&quot;&lt;/span&gt;), Bytes.toBytes(duration));&lt;/p&gt;&lt;p&gt;table.put(callerPut);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (ParseException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;：生成的时间戳要是 string 类型的。不能是 long 类型的。&lt;br/&gt;&lt;code&gt;注意&lt;/code&gt;：&quot;xxx&quot;.getBytes(); 与 Bytes.toBytes(&quot;xxx&quot;); 有区别，&lt;br/&gt;Bytes.toBytes(&quot;xxx&quot;); 的底层默认是 &lt;code&gt;&quot;xxx&quot;.getBytes(UTF8_CHARSET);&lt;/code&gt;，&lt;br/&gt;而 &quot;xxx&quot;.getBytes(); 底层默认是 &lt;code&gt;&quot;xxx&quot;.getBytes(ISO-8859-1_CHARSET);&lt;/code&gt;&lt;br/&gt;&lt;strong&gt;二者编码不一样，混着用，就会出现中文乱码！！！&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;h323&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2.3、编写测试单元：范围查找数据（本方案已弃用，但需掌握）&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  使用 scan 查看 HBase 中是否正确存储了数据，同时尝试使用过滤器查询扫描指定通话时间点的数据。进行该单元测试前，需要先运行数据采集任务，确保 HBase 中已有数据存在。&lt;br/&gt;新建工具过滤器工具类：HBaseFilterUtil&lt;/p&gt;
&lt;pre readability=&quot;59&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;112&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.china.utils;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.filter.*;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.util.Bytes;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Collection;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HBaseFilterUtil&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Filter &lt;span class=&quot;hljs-title&quot;&gt;eqFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String cf, String col, &lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[] val)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;SingleColumnValueFilter f = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SingleColumnValueFilter(Bytes.toBytes(cf), Bytes.toBytes(col), CompareFilter.CompareOp.EQUAL, val);&lt;br/&gt;f.setLatestVersionOnly(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;f.setFilterIfMissing(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Filter &lt;span class=&quot;hljs-title&quot;&gt;gtFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String cf, String col, &lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[] val)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;SingleColumnValueFilter f = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SingleColumnValueFilter(Bytes.toBytes(cf), Bytes.toBytes(col), CompareFilter.CompareOp.GREATER, val);&lt;br/&gt;f.setLatestVersionOnly(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;f.setFilterIfMissing(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Filter &lt;span class=&quot;hljs-title&quot;&gt;gteqFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String cf, String col, &lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[] val)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;SingleColumnValueFilter f = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SingleColumnValueFilter(Bytes.toBytes(cf), Bytes.toBytes(col), CompareFilter.CompareOp.GREATER_OR_EQUAL, val);&lt;br/&gt;f.setLatestVersionOnly(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;f.setFilterIfMissing(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Filter &lt;span class=&quot;hljs-title&quot;&gt;ltFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String cf, String col, &lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[] val)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;SingleColumnValueFilter f = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SingleColumnValueFilter(Bytes.toBytes(cf), Bytes.toBytes(col), CompareFilter.CompareOp.LESS, val);&lt;br/&gt;f.setLatestVersionOnly(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;f.setFilterIfMissing(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Filter &lt;span class=&quot;hljs-title&quot;&gt;lteqFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String cf, String col, &lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[] val)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;SingleColumnValueFilter f = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SingleColumnValueFilter(Bytes.toBytes(cf), Bytes.toBytes(col), CompareFilter.CompareOp.LESS_OR_EQUAL, val);&lt;br/&gt;f.setLatestVersionOnly(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;f.setFilterIfMissing(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Filter &lt;span class=&quot;hljs-title&quot;&gt;neqFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String cf, String col, &lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[] val)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;SingleColumnValueFilter f = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SingleColumnValueFilter(Bytes.toBytes(cf), Bytes.toBytes(col), CompareFilter.CompareOp.NOT_EQUAL, val);&lt;br/&gt;f.setLatestVersionOnly(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;f.setFilterIfMissing(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Filter &lt;span class=&quot;hljs-title&quot;&gt;andFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Filter... filters)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;FilterList filterList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; FilterList(FilterList.Operator.MUST_PASS_ALL);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (filters != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; filters.length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (filters.length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Filter f : filters) {&lt;br/&gt;filterList.addFilter(f);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (filters.length == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; filters[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; filterList;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Filter &lt;span class=&quot;hljs-title&quot;&gt;andFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Collection&amp;lt;Filter&amp;gt; filters)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; andFilter(filters.toArray(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Filter[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Filter &lt;span class=&quot;hljs-title&quot;&gt;orFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Filter... filters)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;FilterList filterList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; FilterList(FilterList.Operator.MUST_PASS_ONE);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (filters != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; filters.length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Filter f : filters) {&lt;br/&gt;filterList.addFilter(f);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; filterList;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Filter &lt;span class=&quot;hljs-title&quot;&gt;orFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Collection&amp;lt;Filter&amp;gt; filters)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; orFilter(filters.toArray(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Filter[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Filter &lt;span class=&quot;hljs-title&quot;&gt;notNullFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String cf, String col)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;SingleColumnValueFilter filter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SingleColumnValueFilter(Bytes.toBytes(cf), Bytes.toBytes(col), CompareFilter.CompareOp.NOT_EQUAL, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; NullComparator());&lt;br/&gt;filter.setFilterIfMissing(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;filter.setLatestVersionOnly(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; filter;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Filter &lt;span class=&quot;hljs-title&quot;&gt;nullFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String cf, String col)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;SingleColumnValueFilter filter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SingleColumnValueFilter(Bytes.toBytes(cf), Bytes.toBytes(col), CompareFilter.CompareOp.EQUAL, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; NullComparator());&lt;br/&gt;filter.setFilterIfMissing(&lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;);&lt;br/&gt;filter.setLatestVersionOnly(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; filter;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Filter &lt;span class=&quot;hljs-title&quot;&gt;subStringFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String cf, String col, String sub)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;SingleColumnValueFilter filter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SingleColumnValueFilter(Bytes.toBytes(cf), Bytes.toBytes(col), CompareFilter.CompareOp.EQUAL, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SubstringComparator(sub));&lt;br/&gt;filter.setFilterIfMissing(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;filter.setLatestVersionOnly(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; filter;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Filter &lt;span class=&quot;hljs-title&quot;&gt;regexFilter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String cf, String col, String regex)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;SingleColumnValueFilter filter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SingleColumnValueFilter(Bytes.toBytes(cf), Bytes.toBytes(col), CompareFilter.CompareOp.EQUAL, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RegexStringComparator(regex));&lt;br/&gt;filter.setFilterIfMissing(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;filter.setLatestVersionOnly(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; filter;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;新建单元测试类：HBaseScanTest1（这是个&lt;code&gt;当前情景被废弃的方案&lt;/code&gt;，现用方案：&lt;code&gt;HBaseScanTest2 后续讲解&lt;/code&gt;）&lt;/p&gt;
&lt;pre readability=&quot;22.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;39&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.china;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.china.utils.ConnectionInstance;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.china.utils.HBaseFilterUtil;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.china.utils.PropertiesUtil;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.conf.Configuration;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.Cell;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.CellUtil;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.HBaseConfiguration;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.TableName;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.client.*;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.filter.Filter;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.util.Bytes;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.ParseException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HBaseScanTest1&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Configuration conf = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Connection conn;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; HTable hTable;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; {&lt;br/&gt;conf = HBaseConfiguration.create();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;scanTest&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;br/&gt;conn = ConnectionInstance.getConnection(conf);&lt;br/&gt;hTable = (HTable) conn.getTable(TableName.valueOf(PropertiesUtil.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hbase.calllog.tableName&quot;&lt;/span&gt;)));&lt;/p&gt;&lt;p&gt;Scan scan = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Scan();&lt;/p&gt;&lt;p&gt;SimpleDateFormat simpleDateFormat = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);&lt;br/&gt;String startTimePoint = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;String endTimePoint = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;startTimePoint = String.valueOf(simpleDateFormat.parse(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-01-1&quot;&lt;/span&gt;).getTime());&lt;br/&gt;endTimePoint = String.valueOf(simpleDateFormat.parse(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-03-01&quot;&lt;/span&gt;).getTime());&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (ParseException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;Filter filter1 = HBaseFilterUtil.gteqFilter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;date_time_ts&quot;&lt;/span&gt;, Bytes.toBytes(startTimePoint));&lt;br/&gt;Filter filter2 = HBaseFilterUtil.ltFilter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;date_time_ts&quot;&lt;/span&gt;, Bytes.toBytes(endTimePoint));&lt;br/&gt;Filter filterList = HBaseFilterUtil.andFilter(filter1, filter2);&lt;br/&gt;scan.setFilter(filterList);&lt;/p&gt;&lt;p&gt;ResultScanner resultScanner = hTable.getScanner(scan);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Result result : resultScanner) {&lt;br/&gt;Cell[] cells = result.rawCells();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Cell c : cells) {&lt;br/&gt;System.out.println(Bytes.toString(CellUtil.cloneRow(c))&lt;br/&gt;+ &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;br/&gt;+ Bytes.toString(CellUtil.cloneFamily(c))&lt;br/&gt;+ &lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;br/&gt;+ Bytes.toString(CellUtil.cloneQualifier(c))&lt;br/&gt;+ &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;br/&gt;+ Bytes.toString(CellUtil.cloneValue(c)));&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h324hbase&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2.4、运行测试：HBase 消费数据&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;尖叫提示&lt;/code&gt;：请将 Linux 允许打开的文件个数和进程数进行优化，优化 RegionServer 与 Zookeeper 会话的超时时间。（参考 HBase 文档中优化章节）&lt;br/&gt;项目成功后，则将项目打包后在 linux 中运行测试。&lt;/p&gt;
&lt;p&gt;1) 打包 HBase 消费者代码&lt;br/&gt;a) 在 windows 中，进入工程的 pom.xml 所在目录下（建议将该工程的 pom.xml 文件拷贝到其他临时目录中，例如我把 pom.xml 文件拷贝到了 C:\Users\bruce\Desktop\maven-lib 目录下），然后使用 mvn 命令下载工程所有依赖的 jar 包&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;&gt;mvn -DoutputDirectory=C:\Users\bruce\Desktop\maven-lib\lib -DgroupId=com.china -DartifactId=ct_consumer -Dversion=1.0-SNAPSHOT dependency:copy-dependencies&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;b) idea 中使用 maven 打包工程&lt;/p&gt;
&lt;p&gt;c) 测试执行该 jar 包（在两种环境下测试）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案一：&lt;code&gt;推荐使用 * 通配符，将所有依赖加入到 classpath 中，不可使用 *.jar的方式&lt;/code&gt;。&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;尖叫提示&lt;/code&gt;：如果是在 Linux 中测试运行，注意文件夹之间的分隔符。自己的工程要单独在 cp 中指定，不要直接放在依赖的 /lib 目录下（即在 Linux 环境下，工程 ct_consumer-1.0-SNAPSHOT.jar 与所依赖的 jar 不能放在同一的目录中）。&lt;/p&gt;
&lt;pre readability=&quot;4.5&quot;&gt;
&lt;code class=&quot;hljs css&quot; readability=&quot;3&quot;&gt;当工程 &lt;span class=&quot;hljs-selector-tag&quot;&gt;ct_consumer-1&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0-SNAPSHOT&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.jar&lt;/span&gt; 与所依赖的 &lt;span class=&quot;hljs-selector-tag&quot;&gt;jar&lt;/span&gt; 分别放在不同的目录中&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-cp&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;C&lt;/span&gt;:\&lt;span class=&quot;hljs-selector-tag&quot;&gt;Users&lt;/span&gt;\&lt;span class=&quot;hljs-selector-tag&quot;&gt;bruce&lt;/span&gt;\&lt;span class=&quot;hljs-selector-tag&quot;&gt;Desktop&lt;/span&gt;\&lt;span class=&quot;hljs-selector-tag&quot;&gt;maven-lib&lt;/span&gt;\&lt;span class=&quot;hljs-selector-tag&quot;&gt;ct_consumer-1&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0-SNAPSHOT&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.jar&lt;/span&gt;;&lt;span class=&quot;hljs-selector-tag&quot;&gt;C&lt;/span&gt;:\&lt;span class=&quot;hljs-selector-tag&quot;&gt;Users&lt;/span&gt;\&lt;span class=&quot;hljs-selector-tag&quot;&gt;bruce&lt;/span&gt;\&lt;span class=&quot;hljs-selector-tag&quot;&gt;Desktop&lt;/span&gt;\&lt;span class=&quot;hljs-selector-tag&quot;&gt;maven-lib&lt;/span&gt;\&lt;span class=&quot;hljs-selector-tag&quot;&gt;lib&lt;/span&gt;\* &lt;span class=&quot;hljs-selector-tag&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.china&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.kafka&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.HBaseConsumer&lt;/span&gt;&lt;p&gt;当工程 &lt;span class=&quot;hljs-selector-tag&quot;&gt;ct_consumer-1&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0-SNAPSHOT&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.jar&lt;/span&gt; 与所依赖的 &lt;span class=&quot;hljs-selector-tag&quot;&gt;jar&lt;/span&gt; 放在同一的目录中&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-cp&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;C&lt;/span&gt;:\&lt;span class=&quot;hljs-selector-tag&quot;&gt;Users&lt;/span&gt;\&lt;span class=&quot;hljs-selector-tag&quot;&gt;bruce&lt;/span&gt;\&lt;span class=&quot;hljs-selector-tag&quot;&gt;Desktop&lt;/span&gt;\&lt;span class=&quot;hljs-selector-tag&quot;&gt;maven-lib&lt;/span&gt;\&lt;span class=&quot;hljs-selector-tag&quot;&gt;lib&lt;/span&gt;\* &lt;span class=&quot;hljs-selector-tag&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.china&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.kafka&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.HBaseConsumer&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;方案二：最最推荐，使用 java.ext.dirs 参数将所有依赖的目录添加进 classpath 中。&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;注意&lt;/code&gt;：&lt;code&gt;在 Linux 环境下：-Djava.ext.dirs=属性后边的路径必须使用绝对路径&lt;/code&gt;。&lt;/p&gt;
&lt;pre readability=&quot;4.5&quot;&gt;
&lt;code class=&quot;hljs vbnet&quot; readability=&quot;3&quot;&gt;在 windows 环境下：&lt;br/&gt;java -Djava.ext.dirs=C:\Users\bruce\Desktop\maven-&lt;span class=&quot;hljs-keyword&quot;&gt;lib&lt;/span&gt;\&lt;span class=&quot;hljs-keyword&quot;&gt;lib&lt;/span&gt;\ -cp C:\Users\bruce\Desktop\maven-&lt;span class=&quot;hljs-keyword&quot;&gt;lib&lt;/span&gt;\ct_consumer&lt;span class=&quot;hljs-number&quot;&gt;-1.0&lt;/span&gt;-SNAPSHOT.jar com.china.kafka.HBaseConsumer&lt;p&gt;在 Linux 环境下：&lt;br/&gt;java -Djava.ext.dirs=/opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/flume/job/ct/&lt;span class=&quot;hljs-keyword&quot;&gt;lib&lt;/span&gt;/ -cp /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/flume/job/ct/ct_consumer&lt;span class=&quot;hljs-number&quot;&gt;-1.0&lt;/span&gt;-SNAPSHOT.jar com.china.kafka.HBaseConsumer&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;方案三：不推荐，将所有依赖的 jar 包直接以绝对路径的方式添加进 classpath 中，以下 为 windows 中的示例，linux 中需要把分号替换为冒号。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs&quot;&gt;示例部分使用的 CDH 版本的，内容过多，这里不作粘贴了。&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h325&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2.5、编写代码：优化数据存储方案&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  现在我们要使用 HBase 查找数据时，尽可能的使用 rowKey 去精准的定位数据位置，而非使用 ColumnValueFilter 或者 SingleColumnValueFilter，按照单元格 Cell 中的 Value 过滤数据，这样做在数据量巨大的情况下，效率是极低的！&lt;code&gt;如果要涉及到全表扫描。所以尽量不要做这样可怕的事情&lt;/code&gt;。注意，这并非 ColumnValueFilter 就无用武之地。现在，我们将使用协处理器，将数据一分为二。&lt;br/&gt;思路：&lt;br/&gt;  a) 编写协处理器类，用于协助处理 HBase 的相关操作（增删改查）。&lt;br/&gt;  b) 在协处理器中，一条主叫日志成功插入后，将该日志切换为被叫视角再次插入一次，放入到与主叫日志不同的列族中。&lt;br/&gt;  c) 重新创建 hbase 表，并为该表注册协处理器。&lt;br/&gt;  d) 编译项目，发布协处理器的 jar 包到 hbase 的 lib 目录下，并群发该 jar 包。&lt;br/&gt;  e) 修改 hbase-site.xml 文件，设置协处理器，并群发该 hbase-site.xml 文件。&lt;br/&gt;编码：&lt;br/&gt;1) 新建协处理器类：CalleeWriteObserver，并覆写 postPut() 方法，该方法会在数据成功插入之后被回调&lt;br/&gt;协处理器的使用步骤：&lt;br/&gt;  1、编写代码 extends BaseRegionObserver&lt;br/&gt;  2、打包jar&lt;br/&gt;  3、重新创建表，将表在创建的时候，挂载(注册)该处理器。（如何挂载：即把协处理器的全类名添加到配置）&lt;br/&gt;  4、表在挂载协处理器的时候，会去HBase的根目录下的lib目录下的jar包里，找到相应的协处理器类的路径&lt;/p&gt;
&lt;pre readability=&quot;38&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;70&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.china.hbase;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.china.utils.HBaseUtil;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.china.utils.PropertiesUtil;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.TableName;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.client.Durability;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.client.Put;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.client.Table;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.coprocessor.ObserverContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.regionserver.wal.WALEdit;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.util.Bytes;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.ParseException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CalleeWriteObserver&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BaseRegionObserver&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;postPut&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; e, Put put, WALEdit edit, Durability durability)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.postPut(e, put, edit, durability);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String targetTableName = PropertiesUtil.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hbase.calllog.tableName&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String currentTableName = e.getEnvironment().getRegion().getRegionInfo().getTable().getNameAsString();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!targetTableName.equals(currentTableName)) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String oriRowkey = Bytes.toString(put.getRow());&lt;/p&gt;&lt;p&gt;String[] splits = oriRowkey.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;_&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String oldFlag = splits[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (oldFlag.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;)) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; regions = Integer.valueOf(PropertiesUtil.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hbase.calllog.regions.count&quot;&lt;/span&gt;));&lt;/p&gt;&lt;p&gt;String call1 = splits[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;br/&gt;String call2 = splits[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];&lt;br/&gt;String buildTime = splits[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];&lt;br/&gt;String duration = splits[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];&lt;/p&gt;&lt;p&gt;String newFlag = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String buildTime_ts = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;buildTime_ts = String.valueOf(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyyMMddHHmmss&quot;&lt;/span&gt;).parse(buildTime).getTime());&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (ParseException e1) {&lt;br/&gt;e1.printStackTrace();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String regionCode = HBaseUtil.genRegionCode(call2, buildTime, regions);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String rowKey = HBaseUtil.genRowKey(regionCode, call2, buildTime, call1, newFlag, duration);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Put calleePut = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Put(Bytes.toBytes(rowKey));&lt;br/&gt;calleePut.addColumn(Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f2&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;call1&quot;&lt;/span&gt;), Bytes.toBytes(call2));&lt;br/&gt;calleePut.addColumn(Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f2&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;call2&quot;&lt;/span&gt;), Bytes.toBytes(call1));&lt;br/&gt;calleePut.addColumn(Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f2&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;build_time&quot;&lt;/span&gt;), Bytes.toBytes(buildTime));&lt;br/&gt;calleePut.addColumn(Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f2&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;build_time_ts&quot;&lt;/span&gt;), Bytes.toBytes(buildTime_ts));&lt;br/&gt;calleePut.addColumn(Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f2&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;flag&quot;&lt;/span&gt;), Bytes.toBytes(newFlag));&lt;br/&gt;calleePut.addColumn(Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f2&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;duration&quot;&lt;/span&gt;), Bytes.toBytes(duration));&lt;/p&gt;&lt;p&gt;Table table = e.getEnvironment().getTable(TableName.valueOf(targetTableName));&lt;br/&gt;table.put(calleePut);&lt;/p&gt;&lt;p&gt;table.close();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;在执行代码之前，我们先手动删除 hbase 上的表 和 命名空间，命令如下：&lt;/strong&gt;&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;hljs ruby&quot; readability=&quot;2&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hbase(main):002:0&amp;gt;&lt;/span&gt; disable &lt;span class=&quot;hljs-string&quot;&gt;'ns_ct:calllog'&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hbase(main):003:0&amp;gt;&lt;/span&gt; drop &lt;span class=&quot;hljs-string&quot;&gt;'ns_ct:calllog'&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hbase(main):005:0&amp;gt;&lt;/span&gt; drop_namespace &lt;span class=&quot;hljs-string&quot;&gt;'ns_ct'&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2) 执行代码：重新创建 hbase 表，并为该表注册协处理器。在“表描述器”中调用 addCoprocessor() 方法进行协处理器的设置，大概是这样的：（你需要找到你的建表的那部分代码，添加如下逻辑）&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;    &lt;br/&gt;htd.addCoprocessor(&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.china.hbase.CalleeWriteObserver&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h326&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2.6、运行测试：协处理器&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;重新编译项目，发布 jar 包到 hbase 的 lib 目录下（&lt;code&gt;注意需群发&lt;/code&gt;）：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs vbnet&quot;&gt;$ scp /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hbase/&lt;span class=&quot;hljs-keyword&quot;&gt;lib&lt;/span&gt;/ct_consumer&lt;span class=&quot;hljs-number&quot;&gt;-1.0&lt;/span&gt;-SNAPSHOT.jar hadoop103:/opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hbase/&lt;span class=&quot;hljs-keyword&quot;&gt;lib&lt;/span&gt;/&lt;br/&gt;$ scp /opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hbase/&lt;span class=&quot;hljs-keyword&quot;&gt;lib&lt;/span&gt;/ct_consumer&lt;span class=&quot;hljs-number&quot;&gt;-1.0&lt;/span&gt;-SNAPSHOT.jar hadoop104:/opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hbase/&lt;span class=&quot;hljs-keyword&quot;&gt;lib&lt;/span&gt;/&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重新修改hbase-site.xml：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;hbase.coprocessor.region.classes&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;com.china.hbase.CalleeWriteObserver&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;修改后群发&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;$ scp -r /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hbase&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;conf&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;hadoop103&lt;/span&gt;:/&lt;span class=&quot;hljs-title&quot;&gt;opt&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hbase&lt;/span&gt;/&lt;/span&gt;&lt;br/&gt;$ scp -r /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hbase&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;conf&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;hadoop104&lt;/span&gt;:/&lt;span class=&quot;hljs-title&quot;&gt;opt&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hbase&lt;/span&gt;/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;完成以上步骤后，重新消费数据进行测试。&lt;/p&gt;
&lt;h4 id=&quot;h327&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2.7、编写测试单元：范围查找数据&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;思路：&lt;br/&gt;  a) 已知要查询的手机号码以及起始时间节点和结束时间节点，查询该节点范围内的该手机号码的通话记录。&lt;br/&gt;  b) 拼装 startRowKey 和 stopRowKey，即扫描范围，要想拼接出扫描范围，首先需要了解 rowkey 组成结构，我们再来复习一下，举个大栗子：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs&quot;&gt;rowkey：&lt;br/&gt;分区号_手机号码1_通话建立时间_手机号码2_主(被)叫标记_通话持续时间&lt;br/&gt;01_15837312345_20170527081033__1_0180&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  c) 比如按月查询通话记录，则startRowKey举例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;regionCode_158373123456_201705010&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;stopRowKey举例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;regionCode_158373123456_201706010&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/03/18/Am0o9S.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;：startRowKey 和 stopRowKey 设计时，后面的部分已经被去掉。&lt;br/&gt;&lt;code&gt;尖叫提示&lt;/code&gt;：rowKey 的扫描范围为前闭后开。&lt;br/&gt;&lt;code&gt;尖叫提示&lt;/code&gt;：rowKey 默认是有序的，排序规则为字符的按位比较。&lt;/p&gt;
&lt;p&gt;d) 如果查找所有的，需要多次 scan 表，每次 scan 设置为下一个时间窗口即可，该操作可放置于 for 循环中。&lt;br/&gt;编码：&lt;br/&gt;1) 新建工具类：ScanRowkeyUtil&lt;br/&gt;该类主要用于根据传入指定的查询时间，生成若干组 startRowKey 和 stopRowKey&lt;/p&gt;
&lt;pre readability=&quot;27.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;49&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.china.utils;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.ParseException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Calendar;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Date;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ScanRowkeyUtil&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String telephone;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String startDateString;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String stopDateString;&lt;br/&gt;List&amp;lt;String[]&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; SimpleDateFormat sdf1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; SimpleDateFormat sdf2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyyMMddHHmmss&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ScanRowkeyUtil&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String telephone, String startDateString, String stopDateString)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.telephone = telephone;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.startDateString = startDateString;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.stopDateString = stopDateString;&lt;/p&gt;&lt;p&gt;list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;genRowKeys();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;genRowKeys&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; regions = Integer.valueOf(PropertiesUtil.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hbase.calllog.regions.count&quot;&lt;/span&gt;));&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;Date startDate = sdf1.parse(startDateString);&lt;br/&gt;Date stopDate = sdf1.parse(stopDateString);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Calendar currentStartCalendar = Calendar.getInstance();&lt;br/&gt;currentStartCalendar.setTimeInMillis(startDate.getTime());&lt;br/&gt;Calendar currentStopCalendar = Calendar.getInstance();&lt;br/&gt;currentStopCalendar.setTimeInMillis(startDate.getTime());&lt;br/&gt;currentStopCalendar.add(Calendar.MONTH, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (currentStopCalendar.getTimeInMillis() &amp;lt;= stopDate.getTime()) {&lt;/p&gt;&lt;p&gt;String regionCode = HBaseUtil.genRegionCode(telephone, sdf2.format(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date(currentStartCalendar.getTimeInMillis())), regions);&lt;br/&gt;String startRowKey = regionCode + &lt;span class=&quot;hljs-string&quot;&gt;&quot;_&quot;&lt;/span&gt; + telephone + &lt;span class=&quot;hljs-string&quot;&gt;&quot;_&quot;&lt;/span&gt; + sdf2.format(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date(currentStartCalendar.getTimeInMillis()));&lt;br/&gt;String stopRowKey = regionCode + &lt;span class=&quot;hljs-string&quot;&gt;&quot;_&quot;&lt;/span&gt; + telephone + &lt;span class=&quot;hljs-string&quot;&gt;&quot;_&quot;&lt;/span&gt; + sdf2.format(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date(currentStopCalendar.getTimeInMillis()));&lt;/p&gt;&lt;p&gt;String[] rowkeys = {startRowKey, stopRowKey};&lt;br/&gt;list.add(rowkeys);&lt;br/&gt;currentStartCalendar.add(Calendar.MONTH, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;currentStopCalendar.add(Calendar.MONTH, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (ParseException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index &amp;lt; list.size()) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String[] next() {&lt;/p&gt;&lt;p&gt;String[] rowkeys = list.get(index);&lt;br/&gt;index++;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; rowkeys;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2) 新建测试单元类 ：HBaseScanTest2&lt;/p&gt;
&lt;pre readability=&quot;24.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;43&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.china;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.china.utils.ConnectionInstance;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.china.utils.PropertiesUtil;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.china.utils.ScanRowkeyUtil;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.conf.Configuration;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.Cell;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.CellUtil;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.HBaseConfiguration;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.TableName;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.client.*;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.hbase.util.Bytes;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.ParseException;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HBaseScanTest2&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Configuration conf = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Connection conn;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; HTable hTable;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; {&lt;br/&gt;conf = HBaseConfiguration.create();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;scanTest&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException, ParseException &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;String call = &lt;span class=&quot;hljs-string&quot;&gt;&quot;14473548449&quot;&lt;/span&gt;;&lt;br/&gt;String startPoint = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-01-01&quot;&lt;/span&gt;;&lt;br/&gt;String stopPoint = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-09-01&quot;&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;conn = ConnectionInstance.getConnection(conf);&lt;br/&gt;hTable = (HTable) conn.getTable(TableName.valueOf(PropertiesUtil.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hbase.calllog.tableName&quot;&lt;/span&gt;)));&lt;/p&gt;&lt;p&gt;Scan scan = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Scan();&lt;br/&gt;ScanRowkeyUtil scanRowkeyUtil = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ScanRowkeyUtil(call, startPoint, stopPoint);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (scanRowkeyUtil.hasNext()) {&lt;/p&gt;&lt;p&gt;String[] rowKeys = scanRowkeyUtil.next();&lt;br/&gt;scan.setStartRow(Bytes.toBytes(rowKeys[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]));&lt;br/&gt;scan.setStopRow(Bytes.toBytes(rowKeys[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]));&lt;/p&gt;&lt;p&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;时间范围&quot;&lt;/span&gt; + rowKeys[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].substring(&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;---&quot;&lt;/span&gt; + rowKeys[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].substring(&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;));&lt;/p&gt;&lt;p&gt;ResultScanner resultScanner = hTable.getScanner(scan);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Result result : resultScanner) {&lt;br/&gt;Cell[] cells = result.rawCells();&lt;br/&gt;StringBuilder sb = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;br/&gt;sb.append(Bytes.toString(result.getRow())).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Cell c : cells) {&lt;br/&gt;sb.append(Bytes.toString(CellUtil.cloneValue(c))).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;System.out.println(sb.toString());&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3) 运行测试&lt;br/&gt;观察是否已经按照时间范围查询出对应的数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开启集群顺序：&lt;/strong&gt;&lt;br/&gt;  1、开启 HDFS、Zookeeper 集群&lt;br/&gt;  2、开启 Kafka 集群&lt;br/&gt;  3、开启 Flume&lt;br/&gt;  4、开启 HBase 集群&lt;br/&gt;  5、开启数据生产&lt;br/&gt;  6、开启 HBase 数据消费&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在开启数据生产，执行 HBase 数据消费代码之前，我们先手动删除 hbase 上的表 和 命名空间，命令如下：&lt;/strong&gt;&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;hljs ruby&quot; readability=&quot;2&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hbase(main):002:0&amp;gt;&lt;/span&gt; disable &lt;span class=&quot;hljs-string&quot;&gt;'ns_ct:calllog'&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hbase(main):003:0&amp;gt;&lt;/span&gt; drop &lt;span class=&quot;hljs-string&quot;&gt;'ns_ct:calllog'&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hbase(main):005:0&amp;gt;&lt;/span&gt; drop_namespace &lt;span class=&quot;hljs-string&quot;&gt;'ns_ct'&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 18 Mar 2019 07:14:00 +0000</pubDate>
<dc:creator>黑泽君</dc:creator>
<og:description>一、项目背景二、项目架构三、项目实现3.1、数据生产3.1.1、数据结构3.1.2、编写代码3.1.3、打包测试3.2、数据采集/消费(存储)3.2.1、数据采集：采集实时产生的数据到 kafka 集</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenmingjun/p/10552330.html</dc:identifier>
</item>
<item>
<title>[小技巧]ASP.NET Core中如何预压缩静态文件 - LamondLu</title>
<link>http://www.cnblogs.com/lwqlun/p/10552131.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lwqlun/p/10552131.html</guid>
<description>&lt;blockquote readability=&quot;3.943231441048&quot;&gt;
&lt;p&gt;原文地址：Pre-compressed static files with ASP.NET Core&lt;br/&gt;作者：Gunnar Peipman&lt;br/&gt;译者：Lamond Lu&lt;br/&gt;译文：&lt;a href=&quot;https://www.cnblogs.com/lwqlun/p/10552131.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/lwqlun/p/10552131.html&lt;/a&gt;&lt;br/&gt;示例代码：&lt;a href=&quot;https://github.com/lamondlu/CompressedStaticFileSample&quot; class=&quot;uri&quot;&gt;https://github.com/lamondlu/CompressedStaticFileSample&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201903/65831-20190318144910274-125766962.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Web应用程序的优化是非常重要，因为使用更少的CPU,占用更少的带宽可以减少项目的费用。 在ASP.NET Core中我们可以很容易的启用响应压缩，但是针对预压缩文件，就需要做一些额外的功能了。 这篇博客文章展示了如何在ASP.NET Core中预压缩静态文件。&lt;/p&gt;

&lt;p&gt;虽然在从服务器请求文件时， 我们可以动态压缩文件，但这意味这Web服务器需要做更多的额外工作。 其实只有在新的应用程序部署时才会更改要压缩的文件。 越好的压缩效果需要CPU做的工作就越多。&lt;/p&gt;
&lt;p&gt;这个事实让我们产生一个疑问：是否有可能在不对其进行反复压缩的情况下提供这些文件？ 幸运的是，这个问题答案是肯定的 - 是的，我们可以在ASP.NET Core中通过扩展静态文件中间件来做到这一点。&lt;/p&gt;

&lt;p&gt;为了让整个演示尽量简单，我们可以使用7-Zip来压缩磁盘上的静态文件。 以下是压缩默认ASP.NET Core MVC应用程序的site.css文件时7-Zip的对话框窗口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201903/65831-20190318144922350-1093552379.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里你可能注意到我启用了&lt;code&gt;Ultra&lt;/code&gt;压缩。这显然不是我们希望在Web服务器上动态压缩的方法，因为它太消耗CPU了。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;正常情况下，这里可以使用Gulp来完成文件捆绑和收缩的功能，本文中暂时不会介绍这个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;提供压缩文件&quot;&gt;提供压缩文件&lt;/h2&gt;
&lt;p&gt;这里我参考了Stack Overflow上的一个简单解决方案（&lt;a href=&quot;https://stackoverflow.com/questions/29156701/how-to-gzip-static-content-in-asp-net-core-in-a-self-host-environment&quot;&gt;How to gzip static content in ASP.NET Core in a self host environment&lt;/a&gt;. ）。它处理了Javascript和CSS文件。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;app.UseStaticFiles(new StaticFileOptions
{
    OnPrepareResponse = context =&amp;gt;
    {
        IHeaderDictionary headers = context.Context.Response.Headers;
        string contentType = headers[&quot;Content-Type&quot;];
        if (contentType == &quot;application/x-gzip&quot;)
        {
            if (context.File.Name.EndsWith(&quot;js.gz&quot;))
            {
                contentType = &quot;application/javascript&quot;;
            }
            else if (context.File.Name.EndsWith(&quot;css.gz&quot;))
            {
                contentType = &quot;text/css&quot;;
            }
            headers.Add(&quot;Content-Encoding&quot;, &quot;gzip&quot;);
            headers[&quot;Content-Type&quot;] = contentType;
        }
    }
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当然Javascript和CSS文件并不是唯一需要压缩的文件类型。所以这里我们不能把contentType写死。这里我采用了.NET Core Tutorials站点中提供的一个解决方案（ &lt;a href=&quot;https://dotnetcoretutorials.com/2018/08/14/getting-a-mime-type-from-a-file-name-in-net-core/&quot;&gt;Getting A Mime Type From A File Name In .NET Core&lt;/a&gt;）。对我来说这个方案已经足够简单。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;var provider = new FileExtensionContentTypeProvider();
string contentType;
if (!provider.TryGetContentType(fileName, out contentType))
{
    contentType = &quot;application/octet-stream&quot;;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里我把2个方案合并在里一起，产生了最终解决方案。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;var mimeTypeProvider = new FileExtensionContentTypeProvider();
 
app.UseStaticFiles(new StaticFileOptions
{
    OnPrepareResponse = context =&amp;gt;
    {
        var headers = context.Context.Response.Headers;
        var contentType = headers[&quot;Content-Type&quot;];
 
        if (contentType != &quot;application/x-gzip&quot; &amp;amp;&amp;amp; !context.File.Name.EndsWith(&quot;.gz&quot;))
        {
            return;
        }
 
        var fileNameToTry = context.File.Name.Substring(0, context.File.Name.Length - 3);
 
        if (mimeTypeProvider.TryGetContentType(fileNameToTry, out var mimeType))
        {
            headers.Add(&quot;Content-Encoding&quot;, &quot;gzip&quot;);
            headers[&quot;Content-Type&quot;] = mimeType;
        }
    }
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，使用以上的代码，本文的主题就被解决了。&lt;/p&gt;
&lt;p&gt;针对那些想直接使用现成库的开发人员，可以使用Nuget直接下载Peter Andersson做好的中间件。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Install-Package CompressedStaticFiles -Version 1.0.4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然使用预压缩文件不是Web开发的主流，但它仍然可以节省CPU和带宽。 压缩静态文件可以作为ASP.NET Core应用程序构建的一个步骤。 尽管ASP.NET Core开箱即不支持预压缩文件，但我们依然可以通过扩展静态文件中间件，使其支持预压缩文件。&lt;/p&gt;
</description>
<pubDate>Mon, 18 Mar 2019 06:56:00 +0000</pubDate>
<dc:creator>LamondLu</dc:creator>
<og:description>原文地址：Pre compressed static files with ASP.NET Core 作者：Gunnar Peipman 译者：Lamond Lu 译文：https://www.cnb</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lwqlun/p/10552131.html</dc:identifier>
</item>
<item>
<title>Apache web服务器(LAMP架构)（week3_day4）--技术流ken - 技术流ken</title>
<link>http://www.cnblogs.com/kenken2018/p/10455945.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenken2018/p/10455945.html</guid>
<description>
&lt;h2&gt;apache介绍&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;1).世界上使用率最高的网站服务器，最高时可达70%；官方网站：apache.org&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2).http 超文本协议 HTML 超文本标记语言&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3).URL 统一资源定位符&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;http://www.sina.com.cn:80/admin/index.php&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;http:// -- ssl 安全套接字&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;www.sina.com.cn -- 域名&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;:80 -- 端口 http对应80端口，https对应443端口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;/admin/index.php -- 网址目录和文件名&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4).LAMP安装说明&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;①源码包安装  自定义 开发版本选择方便 效率高&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;生产环境 安全 稳定&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;开发环境 局域网(内网)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;②二进制包安装 yum命令安装 官方版本比较低&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;Apache的三种工作模式&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Apache 一共有3种稳定的 MPM 模式(多进程处理模块)，它们分别是 prefork、worker、event。http-2.2版本的httpd默认的mpm工作模式为prefork，2.4版本的httpd默认是event工作模式。可以通过 httpd -V 来查看。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~]# httpd -V | grep -i &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;server mpm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
Server MPM:     Prefork&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;编译的时候，可以通过 configure 的参数来指定：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
--with-mpm=prefork|worker|&lt;span&gt;event&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;h3&gt;&lt;span&gt;1、prefork 工作模式&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;(作用：用一个进程处理一个用户请求)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Apache在启动之初，就预先fork一些子进程，然后等待请求进来。之所以这样做，是为了减少频繁创建和销毁进程的开销。每个子进程只有一个线程，在一个时间点内，只能处理一个请求。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;优点：成熟稳定，兼容所有新老模块。同时，不需要担心线程安全的问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;缺点：一个进程相对占用更多的系统资源，消耗更多的内存。而且，它并不擅长处理高并发请求。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2、worker 工作模式&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;(作用：一个进程生成多个线程，一个线程处理一个用户请求)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用了多进程和多线程的混合模式。它也预先fork了几个子进程(数量比较少)，然后每个子进程创建一些线程，同时包括一个监听线程。每个请求过来，会被分配到1个线程来服务。线程比起进程会更轻量，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;因为线程通常会共享父进程的内存空间，因此，内存的占用会减少一些。在高并发的场景下，因为比起prefork有更多的可用线程，表现会更优秀一些。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;优点：占据更少的内存，高并发下表现更优秀。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;缺点：必须考虑线程安全的问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;3、event 工作模式&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;(用一个线程处理一个用户请求)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;它和worker模式很像，最大的区别在于，它解决了keep-alive场景下，长期被占用的线程的资源浪费问题。event MPM中，会有一个专门的线程来管理这些keep-alive类型的线程，当有真实请求过来的时候，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将请求传递给服务线程，执行完毕后，又允许它释放。这样增强了高并发场景下的请求处理能力。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;HTTP采用keepalive方式减少TCP连接数量，但是由于需要与服务器线程或进程进行绑定，导致一个繁忙的服务器会消耗完所有的线程。Event MPM是解决这个问题的一种新模型，它把服务进程从连接中分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;离出来。在服务器处理速度很快，同时具有非常高的点击率时，可用的线程数量就是关键的资源限 制，此时Event MPM方式是最有效的，但不能在HTTPS访问下工作。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;apache基本信息&lt;/h2&gt;

&lt;p&gt;apache为企业中常用的web服务，用来提供http://(超文本传输协议)&lt;/p&gt;
&lt;p&gt;主配置目录：/etc/httpd/conf&lt;/p&gt;
&lt;p&gt;主配置文件：/etc/httpd/conf/http.conf&lt;/p&gt;
&lt;p&gt;子配置目录：/etc/httpd/conf.d&lt;/p&gt;
&lt;p&gt;子配置文件：/etc/httpd/conf.d/*.conf&lt;/p&gt;
&lt;p&gt;默认发布目录：/var/www/html/&lt;/p&gt;
&lt;p&gt;默认发布文件：index.html&lt;/p&gt;
&lt;p&gt;默认端口：80&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;服务器的返回状态值&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;（表示请求的是否成功等信息）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1xx：一般不用，就是一些描述信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2xx：表示请求成功&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;200：ok，请求下载成功&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;201：create ok，上传成功&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3xx：表示请求的资源被重定向&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;301：moved permanently，永久重定向&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;302：Found，临时重定向&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;304：not modified，标识一个缓存的资源是否发生过更改&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4xx：请求失败，因为客户端原因导致失败&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;403：forbidden，表示客户端没有权限访问所请求的资源&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;404：Not Found，表示客户端所请求的资源不存在&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;405：Method Not Allowd：表示客户端所用的方法不被允许&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5xx：请求失败，因为服务器端原因导致失败&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;500：Internal Server Error，服务器内部错误&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;502：Bad Gateway，代理服务器从上游服务器获取到的是伪响应&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;503：service unavailable，服务器暂时不可用&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;为什么要编译安装&lt;/h2&gt;

&lt;p align=&quot;left&quot;&gt;一般来说，我们软件的安装方式有yum（rpm），和源码编译两种方式，那么为什么我们需要源码编译安装一部分软件？选择源码编译安装软件有以下几个原因：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;          1：满足不同的运行平台，我们Linux发型版本众多，但是每个版本采用的软件或者内核版本都不一样，而我们的二进制包所依赖的环境不一定能够正常运行，所以大部分软件直接提供源码！&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;          2：方便定制，满足不同的需求，很多时候我们所需要的软件都是可以定制的，我需要什么就安装什么，大多数二进制代码都是一键装全，所以自由度并不高！&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;          3：方便运维、开发人员维护，我们的源码是可以打包二进制的，但是对于这个软件的打包都会有一份代价不小的额外工作，包括维护，所以如果是源码的话，软件产商会直接维护，但是如果是二进制的话，一般都是Linux发行商提供！&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;什么是LAMP&lt;/h2&gt;

&lt;p align=&quot;left&quot;&gt;LAMP=Linux Apache Mysql/MariaDB PHP/Perl/Python 这些软件都是开源免费的软件，几个程序各自是独立的，经常为了达到我们需要的效果而协同工作，组成了我们&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;常见的LAMP架构平台!LAMP是世界上最流行的组合，当然同时也有Nginx，也就是LNMP: LAMP 相对于 NGINX 来说较为安全，但是Nginx处理高并发比Apache要强，&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;NGINX 相对于 LAMP 来说安全较为差一点，同样的配制环境负载远远高于 LAMP 向国内的一些大公司，淘宝、新浪都在用这一些 NGINX，向那么大的公司网站需要用到服务器群用LAMP搭建环境成本远远大于NGINX。打个比方本来1000000W访问量需要 10台LAMP环境服务器才能完成，但是使用NGINX也许只需要5、6台这样一来对于这样的公司来说就大大的节约了成本。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;从网站的流量上来说，70%以上的访问流量是LAMP来提供的，LAMP是最强大的网站解决方案，在以前这句话没有错，但是在现在，这句话有待证实！！！因为在以后的过程中，会发现我们会使用的架构是Nginx和Apache结合使用：使用Nginx可以做集群等相关配置，可以和apache一起使用，有的会用apache去跑php，然后用nginx做反向代理，比如apache运行在8080端口，nginx在80端口，访问php文件时，反向代理到apache，静态页通过nginx处理。nginx支持高并发，apache对php的运行比较稳定。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;         常见的网页类型：htm,html,shtml,stm.php,asp,aspx,shtm,jsp等等Apache本事只处理静态页面，处理动态页面需要使用libphp5.so这个模块去工作，编译php也其实&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;是将一个至关重要的模块打入到apache内部，然后apache收到php请求，将请求交给这个模块来处理！&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;Apache工作原理&lt;/h2&gt;

&lt;p&gt;Apache本身只处理html静态语言页面，当客户端需要访问php页面的时候，Apache会调用libphp5.so这个模块去工作，这个模块会把php页面转换成html静态页面，让Apache处理，Apache处理过，会返回给客户端&lt;/p&gt;

&lt;h2&gt;LAMP相关网站&lt;/h2&gt;

&lt;p align=&quot;left&quot;&gt;Apache=http://httpd.apache.org/                                                      httpd主程序包&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;MySQL=http://dev.mysql.com/downloads/mysql/                          mysql主程序包&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;PHP=http://php.net/downloads.php                                                 php主程序包&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;apr=http://apr.apache.org/                                               apr是httpd的依赖包&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;apr-util=http://apr.apache.org/                               apr-util是httpd的第二个依赖包&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;apr和apr-util这个两个软件是对后端服务软件进行优化的，&lt;/p&gt;
&lt;p&gt;apr-util只是在apr的基础上提供了更多的数据结构和操作系统封装接口而已。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; pcre 是httpd的第三个依赖包 http://pcre.org/    &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;PCRE(Perl Compatible Regular Expressions中文含义：perl语言兼容正则表达式)是一个用C语言编写的正则表达式函数库，PCRE被广泛使用在许多开源软件之中，最著名的莫过于Apache HTTP服务器和PHP脚本语言、R脚本语言，此外，正如从其名字所能看到的，PCRE也是perl语言的缺省正则库。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt; 编译安装Apache&lt;/h2&gt;

&lt;p&gt;第一步：安装依赖包&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@ken ~]#  yum install gcc gcc-c++ ncurses-devel ncurses pcre pcre-devel openssl-devel zlib-devel -y
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第二步：上传安装包&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~&lt;span&gt;]# ls
apr&lt;/span&gt;-&lt;span&gt;1.5&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;.tar.gz  apr-util-&lt;span&gt;1.5&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;.tar.gz  httpd-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;20&lt;/span&gt;.tar.gz
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第三步：解压apr,apr-util安装包&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~]# tar -xf apr-util-&lt;span&gt;1.5&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.tar.gz 
[root@ken &lt;/span&gt;~]# tar -xf apr-&lt;span&gt;1.5&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;.tar.gz 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第四步：编译安装apr&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@ken ~]# cd apr-&lt;span&gt;1.5&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
[root@ken apr&lt;/span&gt;-&lt;span&gt;1.5&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;]# ./configure --prefix=/usr/local/&lt;span&gt;apr
[root@ken apr&lt;/span&gt;-&lt;span&gt;1.5&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;]# make &amp;amp;&amp;amp; make install
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第五步：编译安装apr-util&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@ken apr-&lt;span&gt;1.5&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]# cd ..
[root@ken &lt;/span&gt;~]# cd  apr-util-&lt;span&gt;1.5&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;
[root@ken apr&lt;/span&gt;-util-&lt;span&gt;1.5&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;]# ./configure --with-apr=/usr/local/apr/ --prefix=/usr/local/apr-&lt;span&gt;util 
[root@ken apr&lt;/span&gt;-util-&lt;span&gt;1.5&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;]# make &amp;amp;&amp;amp; make install
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第六步：安装apache&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@ken apr-util-&lt;span&gt;1.5&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;]# cd ..
[root@ken &lt;/span&gt;~]# tar xf httpd-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;20&lt;/span&gt;&lt;span&gt;.tar.gz 
[root@ken &lt;/span&gt;~]# cd httpd-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;20&lt;/span&gt;&lt;span&gt;
[root@ken httpd&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;20&lt;/span&gt;]# ./&lt;span&gt;configure \
&lt;/span&gt;&amp;gt; --prefix=/usr/local/httpd2.&lt;span&gt;4&lt;/span&gt;/&lt;span&gt; \
&lt;/span&gt;&amp;gt; --sysconfdir=/etc/httpd2.&lt;span&gt;4&lt;/span&gt;/conf/&lt;span&gt; \
&lt;/span&gt;&amp;gt; --enable-&lt;span&gt;so \
&lt;/span&gt;&amp;gt; --enable-&lt;span&gt;ssl \
&lt;/span&gt;&amp;gt; --enable-&lt;span&gt;cgi \
&lt;/span&gt;&amp;gt; --enable-&lt;span&gt;rewrite \
&lt;/span&gt;&amp;gt; --enable-&lt;span&gt;zlib \
&lt;/span&gt;&amp;gt; --enable-&lt;span&gt;pcre \
&lt;/span&gt;&amp;gt; --with-apr=/usr/local/&lt;span&gt;apr \
&lt;/span&gt;&amp;gt; --with-apr-util=/usr/local/apr-&lt;span&gt;util \
&lt;/span&gt;&amp;gt; --with-mpm=&lt;span&gt;event&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&amp;gt; --enable-&lt;span&gt;deflate \
&lt;/span&gt;&amp;gt; --enable-mpms-shared=&lt;span&gt;all \
&lt;/span&gt;&amp;gt; --enable-modules=all &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第七步：启动apache&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[root@ken httpd-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;20&lt;/span&gt;]# cd /usr/local/httpd2.&lt;span&gt;4&lt;/span&gt;/bin/&lt;span&gt;
[root@ken bin]# ls
ab         checkgid   envvars&lt;/span&gt;-&lt;span&gt;std   htdbm     httpd       rotatelogs
apachectl  dbmmanage  fcgistarter   htdigest  httxt2dbm
apxs       envvars    htcacheclean  htpasswd  logresolve
[root@ken bin]# .&lt;/span&gt;/&lt;span&gt;apachectl start
AH00558: httpd: Could not reliably determine the server&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s fully qualified domain name, using fe80::20c:29ff:fe13:a149. Set the &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;ServerName&lt;span&gt;'&lt;/span&gt;&lt;span&gt; directive globally to suppress this message     &lt;/span&gt;
[root@ken bin]# ss -tnl | grep &lt;span&gt;80&lt;/span&gt;&lt;span&gt;
LISTEN     &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;128&lt;/span&gt;         :::&lt;span&gt;80&lt;/span&gt;                      :::*               
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第八步：浏览器访问&lt;/p&gt;
&lt;p&gt;输入Linux主机IP地址即可访问&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1499615/201903/1499615-20190301140254460-612894191.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;使用apache部署京东网站（静态网站）&lt;/h2&gt;

&lt;p&gt;第一步：关闭防火墙&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~]# setenforce &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
[root@ken &lt;/span&gt;~]# systemctl stop firewalld
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第二步：下载httpd&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~]# yum install httpd -y
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第三步：上传京东安装包至网站根目录之下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@ken ~]# cd /&lt;span&gt;var&lt;/span&gt;/www/html/&lt;span&gt;
[root@ken html]# ls
[root@ken html]# rz

[root@ken html]# ls
jd.zip
[root@ken html]# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第四步：下载unzip并解压&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@ken html]# yum install unzip -&lt;span&gt;y
[root@ken html]# unzip jd.zip&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt; [root@ken html]# ls&lt;br/&gt; jd jd.zip&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;第五步：启动httpd&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken html]# systemctl restart httpd
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第六步：浏览器访问&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1499615/201903/1499615-20190303125826154-912403695.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;h2 align=&quot;left&quot;&gt; yum一键安装LAMP架构&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~]# yum install httpd mariadb-server php php-mysql -y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;php-mysql用于php与数据库的通信&lt;/p&gt;

&lt;h2&gt; 基于LAMP架构上线博客系统（动态网站）&lt;/h2&gt;

&lt;p&gt;第一步：安装LAMP&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~]# yum install httpd mariadb-server php php-mysql -y
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第二步：启动数据库并创建数据库&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
[root@ken ~&lt;span&gt;]# mysql
...
mysql&lt;/span&gt;&amp;gt;&lt;span&gt; create database ken;                      #创建数据库ken
Query OK, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt; grant all on ken.* to ken&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; identified by &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;  #创建用户ken,密码为123
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt;&lt;span&gt; flush privileges;                     #刷新授权表
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第三步：准备wordpress安装包&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@ken ~]# cd /&lt;span&gt;var&lt;/span&gt;/www/&lt;span&gt;html
[root@ken html]# rz
z waiting to receive.&lt;/span&gt;**&lt;span&gt;B0100000023be50
[root@ken html]# ls
wordpress&lt;/span&gt;-&lt;span&gt;3.3&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;zh_CN.zip
[root@ken html]# yum install unzip &lt;/span&gt;-&lt;span&gt;y
[root@ken html]# unzip wordpress&lt;/span&gt;-&lt;span&gt;3.3&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;zh_CN.zip
[root@ken html]# ls
wordpress  wordpress&lt;/span&gt;-&lt;span&gt;3.3&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;-zh_CN.zip
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第四步：配置wordpress&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@ken html]# cd wordpress
[root@ken wordpress]# cp wp&lt;/span&gt;-config-sample.php wp-&lt;span&gt;config.php 
[root@ken wordpress]# vim wp&lt;/span&gt;-&lt;span&gt;config.php
...
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ** MySQL 设置 - 具体信息来自您正在使用的主机 ** &lt;/span&gt;&lt;span&gt;//
/*&lt;/span&gt;&lt;span&gt;* WordPress 数据库的名称 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
define(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DB_NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ken&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);           #填写数据库名

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* MySQL 数据库用户名 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
define(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DB_USER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ken&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);           #填写数据库用户名

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* MySQL 数据库密码 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
define(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DB_PASSWORD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);       #数据库密码

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* MySQL 主机 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
define(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DB_HOST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);     #主机名
...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第五步：重启httpd服务&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~]# systemctl restart httpd
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第六步：浏览器测试&lt;/p&gt;
&lt;p&gt;电脑浏览器输入IP/wordpress/index.php&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1499615/201903/1499615-20190301141328267-777108340.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;输入用户名和密码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1499615/201903/1499615-20190301141349921-1872908805.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;登录成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1499615/201903/1499615-20190301141407413-1947279588.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 18 Mar 2019 06:38:00 +0000</pubDate>
<dc:creator>技术流ken</dc:creator>
<og:description>apache介绍 1).世界上使用率最高的网站服务器，最高时可达70%；官方网站：apache.org 2).http 超文本协议 HTML 超文本标记语言 3).URL 统一资源定位符 http:/</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenken2018/p/10455945.html</dc:identifier>
</item>
<item>
<title>自定义PlantUML和C4 Model样式 - 假正经哥哥</title>
<link>http://www.cnblogs.com/xuanye/p/new-style-4-plantuml-and-c4model.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuanye/p/new-style-4-plantuml-and-c4model.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://www.plantuml.com/plantuml/img/RLF1Rjim3BthAxXJaqFioqxEW3K8qdROi1P9Xs6dG9FfMAWiUHBLp7y_oevTUAaEjapoFJu-oRU1fAVO692AzAkcRcNnl0goQGsA3zeg4qkCta1Dr8OYpxqyPoTDTVmT0thbBA6bJBac_nkbxJ1lZRI9SHMeCxXI7_D61aAVA-SnQpaZRY1QHZIC1AeHAcUCEsjx0gCjWhGbpDBQ1zuvu8vWd9B6TE9c50TllE9-lzjzFsxs-yUVujlcr-EFv-FcS3nytJrl7uJePnN5rcZrSa3_Qf2ocfiPtEEVY84MoxKeU7vevGdNGbUmUE9Tvkm1LVJiphP6zR9CgYmio4TS2k1LNCg-MDsJf5X2wt3d_5dwylE8iMv032Zl58O0oKNlJ5XFgGHEKMqZGZkKiJ_lqgGLoBLJ06sfgncL3aykq8JkCCpXe_vKnVe_lL4PjlogsrX-ZzEqrtt7eZs7qOzrGyr0Mqb-BSKGIZ9B1nvBxL6zexKOKwCVwvvcyfh1rNzcp-OiBaV1BVh3lkYv6h0O1FTt00ZvHv24C_7zK_IMt_87txn_&quot; alt=&quot;草稿流程图&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是plantuml&quot;&gt;什么是PlantUml&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://plantuml.com/&quot;&gt;PlantUml&lt;/a&gt;是一个支持快速绘制的开源项目.其定义了一套完整的语言用于实现UML关系图的描述.并基于强大的graphviz图形渲染库进行UML图的生成.绘制的UML图还可以导出为图片,以及通用的矢量SVG格式文件.&lt;/p&gt;
&lt;p&gt;如以下代码，可实现时序图&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@startuml
Alice -&amp;gt; Bob: Authentication Request
Bob --&amp;gt; Alice: Authentication Response

Alice -&amp;gt; Bob: Another authentication Request
Alice &amp;lt;-- Bob: another authentication Response
@enduml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.plantuml.com/plantuml/img/TSx13O0W38NXErDqWIvWZ057S0F49f9WKIZxIyIJmVFxykVfB3P9EO8omJi2d62Ewm2co4uitbdnaM6Xgr0MLJV0QXxSKVcCd4bzOnohIs3xqOP7nARjdtxZcdYhXsy0&quot; alt=&quot;时序图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以使用常用的编辑器vscode 或者sublime 或者其他IDE工具继承PlantUml&lt;/p&gt;
&lt;p&gt;也可以使用在线的版本&lt;br/&gt;&lt;a href=&quot;https://www.planttext.com/&quot; class=&quot;uri&quot;&gt;https://www.planttext.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;想了解更多PlantUml或者使用方法，可参考官网&lt;a href=&quot;http://plantuml.com/zh/&quot; class=&quot;uri&quot;&gt;http://plantuml.com/zh/&lt;/a&gt;，上面详细的中英文说明&lt;/p&gt;
&lt;h2 id=&quot;什么是c4-model&quot;&gt;什么是C4 Model&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://c4model.com/&quot;&gt;C4 Model&lt;/a&gt; 在我眼里更像是一个标准，一个方法论。让架构师、程序员、业务人员在讨论IT系统架构时候统一维度，统一标准，更方便的理解和沟通IT系统中的真实问题。&lt;strong&gt;强烈推荐&lt;/strong&gt;！！！&lt;/p&gt;
&lt;p&gt;C4 模型由一系列分层的软件架构图组成，这些架构图用于描述上下文（Context）、容器(Container)、组件(Component)和代码(Code)。C4 图的层次结构提供了不同的抽象级别，每种抽象级别都与不同的受众有关&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c4model.com/img/bigbankplc-Containers.png&quot; alt=&quot;C4 Model&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这篇Infoq的文章是有一个比较详细的介绍&lt;a href=&quot;https://infoq.cn/article/C4-architecture-model&quot; class=&quot;uri&quot;&gt;https://infoq.cn/article/C4-architecture-model&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;本库只是一个样式库&quot;&gt;本库只是一个样式库&lt;/h2&gt;
&lt;p&gt;本库的目的是美化PlantUml和C4 Model所绘制系统架构图的样式，统一审美而产生。&lt;/p&gt;
&lt;p&gt;详细的使用方法，可参考sample文件夹中的示例代码&lt;br/&gt;&lt;a href=&quot;https://github.com/xuanye/plantuml-style-c4/blob/master/samples/&quot; class=&quot;uri&quot;&gt;https://github.com/xuanye/plantuml-style-c4/blob/master/samples/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;时序图&quot;&gt;1.时序图&lt;/h3&gt;
&lt;p&gt;在PlantUml代码中引用&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@startuml sequence-sample
!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/core.puml
' 如果使用本地，则需要注释上一行，取消注释下一行
'!include core.puml

' 使用红色箭头，默认为灰色
RED_ARROW


@enduml
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://www.plantuml.com/plantuml/png/9OrB2i9040Ntda8FCDCRLwvobNRoC86UpjWVDBVNa5L1GL6J1rjabyjjrIOv8qskIyJm1v7nfxxMMFAP3ckR1ZHgspfzatK73M4zwkAn2qgxKsSF63dt8N1ol1FQK4vHnx6QeFEVFm00&quot; alt=&quot;时序图&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;类图&quot;&gt;2. 类图&lt;/h3&gt;
&lt;p&gt;以下为示例&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@startuml class-sample

!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/core.puml
' uncomment the following line and comment the first to use locally
'!include core.puml

GREY_ARROW

abstract class BaseClass {
    +  AbstractMethod() : void
    #  VirtualMethod(s:string) : int
}
class SubClass {
    + AbstractMethod() : void
    # VirtualMethod(s:string) : int
}

interface IInterfaceA {
}

interface &quot;IInterfaceA`1&quot;&amp;lt;T&amp;gt; {
    Value : T &amp;lt;&amp;lt;get&amp;gt;&amp;gt;
}
class ImplementClass {
    + Value : int &amp;lt;&amp;lt;get&amp;gt;&amp;gt;
}
BaseClass &amp;lt;|-- SubClass
IInterfaceA &amp;lt;|-- &quot;IInterfaceA`1&quot;
&quot;IInterfaceA`1&quot; &quot;&amp;lt;int&amp;gt;&quot; &amp;lt;|-- ImplementClass

@enduml
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://www.plantuml.com/plantuml/png/9Osn3S9G30Lxfe01yjrGKMKLurWaah_pPJyBiZr4LAShJZSdE53TBhVDnMhH2hkkmCW7KV2xlJQizQpKaDsXZYPxfq-n7qh3sCzwIXocazofSqA3alimJHBZpEblRPoVMNtvyGi0&quot; alt=&quot;类图&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;状态图&quot;&gt;3. 状态图&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@startuml state-sample
!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/core.puml
' uncomment the following line and comment the first to use locally
'!include core.puml

GREEN_ARROW

title HTTP Request Parsing States

[*] --&amp;gt; RequestLine

RequestLine : Parse HTTP
RequestLine : request line
RequestLine --&amp;gt; Headers : Ok
RequestLine --&amp;gt; Error : Failure

Headers : Parse HTTP
Headers : headers
Headers --&amp;gt; Host : Ok
Headers --&amp;gt; Error : Failure

Host : Check host
Host : header is present
Host --&amp;gt; Length : Not chunked
Host --&amp;gt; Chunked : Chunked
Host --&amp;gt; Error : Failure

Length : Check if required,
Length : valid &amp;amp; size
Length --&amp;gt; Error : Failure
Length --&amp;gt; Error : Entity Too Large
Length --&amp;gt; [*] : Ok

Chunked : Parse HTTP
Chunked : chunk header
Chunked --&amp;gt; Error : Failure
Chunked --&amp;gt; [*] : Ok

@enduml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://www.plantuml.com/plantuml/png/9Oqn3i8m34LtJW47IBmmCVKg9hLe9SUDx6z1RmyHqzCRdjuIO4TslTnsQvghfEjr0qOyY9pVzRLZosU6U3iCOgZjwFH9jbDeADkiI-1KAUrEdGFY5Do7Ib208ULlTSpF8hR--0K0&quot; alt=&quot;状态图&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;用例图&quot;&gt;4. 用例图&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@startuml usecase-sample
!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/core.puml
' uncomment the following line and comment the first to use locally
'!include core.puml

' 设置方向
LAYOUT_LEFT_RIGHT
'LAYOUT_TOP_DOWN
'LAYOUT_AS_SKETCH


actor customer
actor clerk

UserCasePackage(&quot;checkout&quot;,&quot;买单&quot;) {
    customer -- (checkout)
    (checkout) .&amp;gt; (payment) : include
    (help) .&amp;gt; (checkout) : extends
    (checkout) -- clerk
}

@enduml
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://www.plantuml.com/plantuml/img/9Oqx3i9030LxJW47oBgXeifLZFD48dcTbJ-2t1uYgj4KevaZsREwNcwRYTQ2ShskcICUHCxlzjfohMS5N7PBM3RPEtsAxG0DPJlhAV9GJ7Adpf5m2kv34LG1uS3qzpREqmnRVlm2&quot; alt=&quot;用例图&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;活动图&quot;&gt;5. 活动图&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@startuml activity-new-sample
!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/core.puml
' uncomment the following line and comment the first to use locally
'!include core.puml

GREEN_ARROW


start
:ClickServlet.handleRequest();
:new page;
if (Page.onSecurityCheck) then (true)
    :Page.onInit();
    if (isForward?) then (no)
        :Process controls;
        if (continue processing?) then (no)
            stop
        endif
        if (isPost?) then (yes)
            :Page.onPost();&amp;lt;
        else (no)
            :Page.onGet();
        endif
        :Page.onRender();
    endif
else (false)
endif
if (do redirect?) then (yes)
    :redirect process;
else
    if (do forward?) then (yes)
        :Forward request;
    else (no)
        :Render page template;
    endif
endif

stop
@enduml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.plantuml.com/plantuml/img/9Or13i8m30JlVGKy8F654wT-nQGMZUIuKRoczFTGk8r66itiu85eEatNQaLZaHXwMO7kTwB1UtvMhF48br4sWnXosHgzW-qGwifsvibngAHoeyOE6UJSkeeJ5zHNnP5CzlINkVz-izZoXGy0&quot; alt=&quot;活动图&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;其他组件&quot;&gt;6. 其他组件&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@startuml element
!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/core.puml
' uncomment the following line and comment the first to use locally
'!include core.puml


actor actor
agent agent
artifact artifact
boundary boundary
card card
cloud cloud
component component
control control
database database
entity entity
file file
folder folder
frame frame
interface  interface
node node
package package
queue queue
stack stack
rectangle rectangle
storage storage
usecase usecase
@enduml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.plantuml.com/plantuml/img/7Sqx3eD034NHdbKa2m0tgLAn5MTu2aYs6VcZXDqdqDtcwCwHx5agmt3Vh4ajA9VRcjdZIUJycTvRhlMgWBVT4fPJsvM-nNQ0kh2TV8my16Dxa78ad8Ar2u8WqDFqwp73bd_y0000&quot; alt=&quot;其他组件&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;c4-模型&quot;&gt;C4 模型&lt;/h2&gt;
&lt;h3 id=&quot;system-context&quot;&gt;1.System Context&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@startuml system-context-diagram

!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/c4_context.puml
' uncomment the following line and comment the first to use locally
'!include c4_context.puml

LAYOUT_WITH_LEGEND

title System Context diagram for Internet Banking System

Actor(customer, &quot;Personal Banking Customer&quot;, &quot;A customer of the bank, with personal bank accounts.&quot;)
System(banking_system, &quot;Internet Banking System&quot;, &quot;Allows customers to view information about their bank accounts, and make payments.&quot;)

System_Ext(mail_system, &quot;E-mail system&quot;, &quot;The internal Microsoft Exchange e-mail system.&quot;)
System_Ext(mainframe, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;)

Rel(customer, banking_system, &quot;Uses&quot;)
Rel_Back(customer, mail_system, &quot;Sends e-mails to&quot;)
Rel_Neighbor(banking_system, mail_system, &quot;Sends e-mails&quot;, &quot;SMTP&quot;)
Rel(banking_system, mainframe, &quot;Uses&quot;)

@enduml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.plantuml.com/plantuml/img/9Oqv3eD0301xNa4UiEk6AXLVSOmLaBncvKF0xvEGRZJIQ6OFjCWcm_3Ob2GNJfDnZUZ-130ywdkBDL_fRBHhi4QblS6Pg1T35zHVNZmkuK8JDFHW0yVMXHreAdTsHlchsk_RpBfyuGC0&quot; alt=&quot;System Context&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;container&quot;&gt;2. Container&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@startuml container-diagram
!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/c4_container.puml
' uncomment the following line and comment the first to use locally
'!include c4_container.puml

LAYOUT_TOP_DOWN
'LAYOUT_AS_SKETCH
LAYOUT_WITH_LEGEND_CN

LAYOUT_TOP_DOWN
'LAYOUT_AS_SKETCH
LAYOUT_WITH_LEGEND

title Container diagram for Internet Banking System

Actor(customer, Customer, &quot;A customer of the bank, with personal bank accounts&quot;)

System_Boundary(c1, &quot;Internet Banking&quot;) {
    Container(web_app, &quot;Web Application&quot;, &quot;Java, Spring MVC&quot;, &quot;Delivers the static content and the Internet banking SPA&quot;)
    Container(spa, &quot;Single-Page App&quot;, &quot;JavaScript, Angular&quot;, &quot;Provides all the Internet banking functionality to cutomers via their web browser&quot;)
    Container(mobile_app, &quot;Mobile App&quot;, &quot;C#, Xamarin&quot;, &quot;Provides a limited subset of the Internet banking functionality to customers via their mobile device&quot;)
    ContainerDb(database, &quot;Database&quot;, &quot;SQL Database&quot;, &quot;Stores user registraion information, hased auth credentials, access logs, etc.&quot;)
    Container(backend_api, &quot;API Application&quot;, &quot;Java, Docker Container&quot;, &quot;Provides Internet banking functionality via API&quot;)
}

System_Ext(email_system, &quot;E-Mail System&quot;, &quot;The internal Microsoft Exchange system&quot;)
System_Ext(banking_system, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;)

Rel(customer, web_app, &quot;Uses&quot;, &quot;HTTPS&quot;)
Rel(customer, spa, &quot;Uses&quot;, &quot;HTTPS&quot;)
Rel(customer, mobile_app, &quot;Uses&quot;)

Rel_Neighbor(web_app, spa, &quot;Delivers&quot;)
Rel(spa, backend_api, &quot;Uses&quot;, &quot;async, JSON/HTTPS&quot;)
Rel(mobile_app, backend_api, &quot;Uses&quot;, &quot;async, JSON/HTTPS&quot;)
Rel_Back_Neighbor(database, backend_api, &quot;Reads from and writes to&quot;, &quot;sync, JDBC&quot;)

Rel_Back(customer, email_system, &quot;Sends e-mails to&quot;)
Rel_Back(email_system, backend_api, &quot;Sends e-mails using&quot;, &quot;sync, SMTP&quot;)
Rel_Neighbor(backend_api, banking_system, &quot;Uses&quot;, &quot;sync/async, XML/HTTPS&quot;)
@enduml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://www.plantuml.com/plantuml/png/9Sqz2iCm3CNnlQTe3s1hoTGfLr4LqHXanUY3DhTlJQO73txyLm-qo2wtHrEIt3XDxdl4y2U0uQU-M-pvIcUZGuCrAXqTlebwCWn1dRfudCA55kZemGQEVGWxq58cmwPivJhhcBcLTVll3m00&quot; alt=&quot;容器图&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;component&quot;&gt;3.Component&lt;/h3&gt;
&lt;p&gt;组件图&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@startuml component-diagram
!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/c4_component.puml
' uncomment the following line and comment the first to use locally
'!include c4_component.puml

LAYOUT_WITH_LEGEND

title Component diagram for Internet Banking System - API Application

Container(spa, &quot;Single Page Application&quot;, &quot;javascript and angular&quot;, &quot;Provides all the internet banking functionality to customers via their web browser.&quot;)
Container(ma, &quot;Mobile App&quot;, &quot;Xamarin&quot;, &quot;Provides a limited subset ot the internet banking functionality to customers via their mobile mobile device.&quot;)
ContainerDb(db, &quot;Database&quot;, &quot;Relational Database Schema&quot;, &quot;Stores user registration information, hashed authentication credentials, access logs, etc.&quot;)
System_Ext(mbs, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;)

Container_Boundary(api, &quot;API Application&quot;) {
    Component(sign, &quot;Sign In Controller&quot;, &quot;MVC Rest Controlle&quot;, &quot;Allows users to sign in to the internet banking system&quot;)
    Component(accounts, &quot;Accounts Summary Controller&quot;, &quot;MVC Rest Controlle&quot;, &quot;Provides customers with a summory of their bank accounts&quot;)
    Component(security, &quot;Security Component&quot;, &quot;Spring Bean&quot;, &quot;Provides functionality related to singing in, changing passwords, etc.&quot;)
    Component(mbsfacade, &quot;Mainframe Banking System Facade&quot;, &quot;Spring Bean&quot;, &quot;A facade onto the mainframe banking system.&quot;)

    Rel(sign, security, &quot;Uses&quot;)
    Rel(accounts, mbsfacade, &quot;Uses&quot;)
    Rel(security, db, &quot;Read &amp;amp; write to&quot;, &quot;JDBC&quot;)
    Rel(mbsfacade, mbs, &quot;Uses&quot;, &quot;XML/HTTPS&quot;)
}

Rel(spa, sign, &quot;Uses&quot;, &quot;JSON/HTTPS&quot;)
Rel(spa, accounts, &quot;Uses&quot;, &quot;JSON/HTTPS&quot;)

Rel(ma, sign, &quot;Uses&quot;, &quot;JSON/HTTPS&quot;)
Rel(ma, accounts, &quot;Uses&quot;, &quot;JSON/HTTPS&quot;)

@enduml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.plantuml.com/plantuml/img/9Or13eCm30Jll88-8F65KqzynGIh83cE5Tjg-NrJUbkDPhIhENQFojFqEALmx1ITvyDTxGdGyPrVfn-nXL4lJPp4SsaLFe5o4IYZ_F9aVZ6bia15S-fWM9N9e2nfwDfaXEaFizv_Aya-nXS0&quot; alt=&quot;组件图&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;code&quot;&gt;4 Code&lt;/h3&gt;
&lt;p&gt;类图上面已经演示过了&lt;/p&gt;
&lt;h3 id=&quot;扩展图&quot;&gt;5. 扩展图&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@startuml system-context-extend-diagram
!includeurl https://raw.githubusercontent.com/xuanye/plantuml-style-c4/master/c4_context.puml
' uncomment the following line and comment the first to use locally
'!include c4_context.puml

'LAYOUT_TOP_DOWN
'LAYOUT_AS_SKETCH
LAYOUT_WITH_LEGEND

title System Landscape diagram for Big Bank plc

Actor(customer, &quot;Personal Banking Customer&quot;, &quot;A customer of the bank, with personal bank accounts.&quot;)

Enterprise_Boundary(c0, &quot;Big Bank plc&quot;) {
    System(banking_system, &quot;Internet Banking System&quot;, &quot;Allows customers to view information about their bank accounts, and make payments.&quot;)

    System_Ext(atm, &quot;ATM&quot;, &quot;Allows customers to withdraw cash.&quot;)
    System_Ext(mail_system, &quot;E-mail system&quot;, &quot;The internal Microsoft Exchange e-mail system.&quot;)

    System_Ext(mainframe, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;)

    Person_Ext(customer_service, &quot;Customer Service Staff&quot;, &quot;Customer service staff within the bank.&quot;)
    Person_Ext(back_office, &quot;Back Office Staff&quot;, &quot;Administration and support staff within the bank.&quot;)
}

Rel_Neighbor(customer, banking_system, &quot;Uses&quot;)
Rel_R(customer, atm, &quot;Withdraws cash using&quot;)
Rel_Back(customer, mail_system, &quot;Sends e-mails to&quot;)

Rel_R(customer, customer_service, &quot;Asks questions to&quot;, &quot;Telephone&quot;)

Rel_D(banking_system, mail_system, &quot;Sends e-mail using&quot;)
Rel_R(atm, mainframe, &quot;Uses&quot;)
Rel_R(banking_system, mainframe, &quot;Uses&quot;)
Rel_D(customer_service, mainframe, &quot;Uses&quot;)
Rel_U(back_office, mainframe, &quot;Uses&quot;)

Lay_D(atm, banking_system)

Lay_D(atm, customer)
Lay_U(mail_system, customer)

@enduml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.plantuml.com/plantuml/img/9Oqv3i90303xl08UiEic5LM-OXoBHF8wAnyY-JqBTAEHHhDue4KscQRxhYIvSfhSjeZk3m33TttjiUKpdOqE3TQeT3Gu4_LYw8BwpOl79LneXeOURE3Okh03pONFKQtbRsh_pPPX1dm0&quot; alt=&quot;扩展图&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;C4 Model的配色和实现大部分都是直接使用&lt;br/&gt;&lt;a href=&quot;https://github.com/RicardoNiepel/C4-PlantUML&quot; class=&quot;uri&quot;&gt;https://github.com/RicardoNiepel/C4-PlantUML&lt;/a&gt;的,只有几个配色略有调整，并抽取出颜色的文件，可单独替换c4_theme 以实现其他配色&lt;/p&gt;
</description>
<pubDate>Mon, 18 Mar 2019 06:35:00 +0000</pubDate>
<dc:creator>假正经哥哥</dc:creator>
<og:description>什么是PlantUml 'PlantUml' 是一个支持快速绘制的开源项目.其定义了一套完整的语言用于实现UML关系图的描述.并基于强大的graphviz图形渲染库进行UML图的生成.绘制的UML图还</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuanye/p/new-style-4-plantuml-and-c4model.html</dc:identifier>
</item>
<item>
<title>两篇文章带你走入.NET Core 世界：CentOS+Kestrel+Ngnix 虚拟机先走一遍（一） - 路过秋天</title>
<link>http://www.cnblogs.com/cyq1162/p/10540174.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cyq1162/p/10540174.html</guid>
<description>&lt;p&gt;上一篇：&lt;a class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/cyq1162/p/10542832.html&quot;&gt;ASP.Net Core on Linux (CentOS7) &lt;/a&gt;&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/cyq1162/p/10542832.html&quot;&gt;共享第三方依赖库部署&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;已经交待了背景，这篇就省下背景了。&lt;/p&gt;
&lt;p&gt;折腾的过程分两步：&lt;/p&gt;
&lt;p&gt;第一步是：本机跑虚拟机部署试一下；&lt;/p&gt;
&lt;p&gt;第二步是：买了个云服务器部署了上去。&lt;/p&gt;
&lt;p&gt;折腾完，感觉DotNetCore，虽然普及率不高，但整体还算是比较成熟了。&lt;/p&gt;
&lt;p&gt;下面，就和大伙分享一下这两步的过程及遇到的坑吧，让大伙也方便进入NetCore的世界。&lt;/p&gt;

&lt;p&gt;测试环境跑：ASPNETCore on Linux（CentOS7）步骤：&lt;/p&gt;

&lt;p&gt;VMware 下载地址：&lt;a href=&quot;https://www.cr173.com/soft/81088.html&quot; target=&quot;_blank&quot;&gt;https://www.cr173.com/soft/81088.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CentOS7 下载地址：&lt;a href=&quot;https://www.centos.org/download/&quot; target=&quot;_blank&quot;&gt;https://www.centos.org/download/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么选CentOS7？&lt;/p&gt;
&lt;p&gt;主要是上各大云平台，看他们提供最多的Linux版本就是这个了，比较大众化。&lt;/p&gt;
&lt;p&gt;地址里有两个版本：DVD ISO （全家桶版本）和 Min ISO（最小版本）&lt;/p&gt;
&lt;p&gt;为了避免麻烦，下载了DVD版本。&lt;/p&gt;

&lt;p&gt;如果是第一次安装：应该没啥情况好说。&lt;/p&gt;
&lt;p&gt;如果是二次安装，如我的情况比较坑：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;span readability=&quot;2&quot;&gt;以前装了好多年的，重新运行时，发现要重新输入注册码。

于是网上找了几个注册码重新输入，结果不管用哪个码，都无效，甚至下载了注册机，都过不去了。

最后，想到重新安装，却连重新安装都提示无法安装。

解决方法：把注册表里和WMware相关的项都删除了，再重新安装，安装过程输入注册码就可以了。

在“运行”输入：regedit 打开 HKEY_LOCAL_MACHINE 选择 SOFTWARE找到VMware的键。删除即可。&lt;p&gt;之后就可以重新安装了，再输入注册码就正常了。&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;按着别人的教程，以为安装的没界面的版本，没想到装完也是带KDE界面的。&lt;/p&gt;
&lt;p&gt;找了两篇：&lt;/p&gt;
&lt;p&gt;https://www.cnblogs.com/wcwen1990/p/7630545.html&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://baijiahao.baidu.com/s?id=1599601257937774752&amp;amp;wfr=spider&amp;amp;for=pc&quot; target=&quot;_blank&quot;&gt;http://baijiahao.baidu.com/s?id=1599601257937774752&amp;amp;wfr=spider&amp;amp;for=pc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我遇到的坑是：安装完后，界面就黑屏了，一直进不去。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;20.524390243902&quot;&gt;
&lt;pre&gt;
&lt;span&gt;解决方法：是BIOS的设置虚拟化没开（笔记本开机时的BIOS曾经重置到默认过）

&lt;a href=&quot;https://blog.csdn.net/weixin_41196185/article/details/79574494&quot; target=&quot;_blank&quot;&gt;https:&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_41196185/article/details/79574494&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;blog.csdn.net/weixin_41196185/article/details/79574494&lt;/span&gt;&lt;/a&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，你需要熟悉一下Linux系统，先了解一下 &lt;a href=&quot;http://baijiahao.baidu.com/s?id=1580835752353077411&amp;amp;wfr=spider&amp;amp;for=pc&quot; target=&quot;_blank&quot;&gt;Linux目录结构&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;为了少点折腾，直接先用root账号玩吧，新创建的普通账号根本玩不来。&lt;/p&gt;

&lt;p&gt;跟着微软的教程走：&lt;a href=&quot;https://www.microsoft.com/net/learn/get-started/linuxcentos&quot; target=&quot;_blank&quot;&gt;https://www.microsoft.com/net/learn/get-started/linuxcentos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中一条：sudo yum update 这条更新系统组件（可选，200M左右，看网络是否方便）&lt;/p&gt;
&lt;p&gt;哥当时网络差，结果这一步卡了1个多小时，结果还失败了，后来直接跳过它了。&lt;/p&gt;

&lt;p&gt;你可以在GitHub上下载 &lt;a href=&quot;https://github.com/cyq1162/taurus.mvc&quot; target=&quot;_blank&quot;&gt;Taurus.MVC&lt;/a&gt; 的源码项目，运行：Taurus.MVC_NetCore.sln 然后右键发布。&lt;/p&gt;
&lt;p&gt;由于当年VS2017装的比较早，发布的选项里是木有：&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/core/deploying/index&quot; target=&quot;_blank&quot;&gt;部署模式&lt;/a&gt; 的。&lt;/p&gt;
&lt;p&gt;现在在VS 2017 的 视图-通知 菜单里，升级了一下，才有这东西。&lt;/p&gt;
&lt;p&gt;如果是运行自己的项目，注意发布前，需要提前设置好要监听的端口：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            BuildWebHost(args).Run();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IWebHost BuildWebHost(&lt;span&gt;string&lt;/span&gt;[] args) =&amp;gt;&lt;span&gt;
            WebHost.CreateDefaultBuilder(args)
                .UseStartup&lt;/span&gt;&amp;lt;Startup&amp;gt;&lt;span&gt;()
                &lt;span&gt;.UseUrls(GetUrl())&lt;/span&gt;
                .Build();
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetUrl()
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; url = AppConfig.GetApp(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[http|https]://*:8888&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);//这里弄成了可以配置的形式，不配置默认就是8888端口
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; url;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我在/home/目录下创建了web目录，如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/17408/201903/17408-20190316204118850-1941455652.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;/home/web/taurus/&lt;/p&gt;
&lt;p&gt;/home/web/aries/&lt;/p&gt;
&lt;p&gt;将发布后的目录下的所有东西，包括100多个Microsoft.XXXX.dll，都复制粘贴到taurus目录或aries目录下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/17408/201903/17408-20190316204221635-1634469054.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，你也可以参考上一篇文章，将第三方的dll移到单独的目录去。&lt;/p&gt;
&lt;p&gt;在虚拟机中有界面可以直接复制粘贴，所以暂时也不用搞ssh的工具和ftp了。&lt;/p&gt;
&lt;p&gt;这里你得会基本的linux命令，cd  切换目录总得会：&lt;/p&gt;
&lt;p&gt;切到项目目录，如 cd /home/web/taurus/&lt;/p&gt;
&lt;p&gt;然后运行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
dotnet Taurus.View.dll (program.cs所在的dll名称）

PS：按Ctrl+C 可退出程序
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在可以用：http://ip:8888 访问了。&lt;/p&gt;
&lt;p&gt;我这里遇到的坑：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;span&gt;提示找不到：libuv库

百度半年无所得，后来看到runtime目录，里面发现linux&lt;/span&gt;-64目录下有libuv.so，把它给copy到根目录，才运行起来。&lt;p&gt;PS：VS 2017 升级后，再发布时会自动把libuv.so给弄到根目录。
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;默认 dotnet xxx.dll 运行的是 kestrel 服务器，不支持域名绑定，所以得弄一个支持域名绑定的来配合一下。&lt;/p&gt;
&lt;p&gt;而这个支持负载均衡的反向代理服务器，简单又实用，大伙都爱用它。&lt;/p&gt;
&lt;p&gt;网上有些很复杂的教程坑死人：&lt;/p&gt;
&lt;p&gt;就是下载源码，然后运行编绎的那些教程，结果我照着运行编绎，结果报错了，然后一脸朦B。&lt;/p&gt;
&lt;p&gt;在坑里转了半天，最后找到一个最简单的，就两行命令：&lt;/p&gt;
&lt;p&gt;1、添加Nginx到YUM源，添加CentOS 7 Nginx yum资源库,打开终端,使用以下命令:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
sudo rpm -Uvh http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、安装Nginx，在你的CentOS 7 服务器中使用yum命令从Nginx源服务器中获取来安装Nginx：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
sudo yum install -y nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nginx将完成安装在你的CentOS 7 服务器中。&lt;/p&gt;
&lt;p&gt;3、启动Nginx，刚安装的Nginx不会自行启动。运行Nginx:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
sudo systemctl start nginx.service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直接输入本机IP，默认80端口，即可访问，看到Welcome...。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/17408/201903/17408-20190316005832583-1767177351.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/u012486840/article/details/52610320&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/u012486840/article/details/52610320&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;关闭本地IP自循环的这个限制，Ngnix才能指向Kestrel服务器，不然会报以下错：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;502&lt;/span&gt; Bad gateway错误
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打开文件：/etc/selinux/config，把SELINUX=enforcing 改成如下的disabled&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# This file controls the state of SELinux on the system.
# SELINUX&lt;/span&gt;=&lt;span&gt; can take one of these three values:
#     enforcing &lt;/span&gt;- SELinux security policy &lt;span&gt;is&lt;/span&gt;&lt;span&gt; enforced.
#     permissive &lt;/span&gt;-&lt;span&gt; SELinux prints warnings instead of enforcing.
#     disabled &lt;/span&gt;- No SELinux policy &lt;span&gt;is&lt;/span&gt;&lt;span&gt; loaded.
SELINUX&lt;/span&gt;=&lt;span&gt;disabled
# SELINUXTYPE&lt;/span&gt;=&lt;span&gt; can take one of three two values:
#     targeted &lt;/span&gt;- Targeted processes are &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;,
#     minimum &lt;/span&gt;- Modification of targeted policy. Only selected processes are &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;. 
#     mls &lt;/span&gt;-&lt;span&gt; Multi Level Security protection.
SELINUXTYPE&lt;/span&gt;=targeted
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改完保存，要重启才能生效，可是哥不想重启，找了半年也没找到可以有即时生效的命令，坑啊。&lt;/p&gt;
&lt;p&gt;后来找到另一个方法，把Ngnix加入Selinux的白名单，就不用关它了。&lt;/p&gt;
&lt;p&gt;运行以下三条命令就好了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
yum install policycoreutils-&lt;span&gt;python
cat &lt;/span&gt;/&lt;span&gt;var&lt;/span&gt;/log/audit/audit.log | grep nginx | grep denied | audit2allow -&lt;span&gt;M mynginx
semodule &lt;/span&gt;-i mynginx.pp
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;nginx的配置文件在：/etc/nginx/nginx.conf，打开的话内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;user  nginx;
worker_processes  &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;

error_log  &lt;/span&gt;/&lt;span&gt;var&lt;/span&gt;/log/nginx/&lt;span&gt;error.log warn;
pid        &lt;/span&gt;/&lt;span&gt;var&lt;/span&gt;/run/&lt;span&gt;nginx.pid;


events {
    worker_connections  &lt;/span&gt;&lt;span&gt;1024&lt;/span&gt;&lt;span&gt;;
}


http {
    include       &lt;/span&gt;/etc/nginx/&lt;span&gt;mime.types;
    default_type  application&lt;/span&gt;/octet-&lt;span&gt;stream;

    log_format  main  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
                      &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$status $body_bytes_sent &quot;$http_referer&quot; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
                      &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;

    access_log  &lt;/span&gt;/&lt;span&gt;var&lt;/span&gt;/log/nginx/&lt;span&gt;access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  &lt;/span&gt;&lt;span&gt;65&lt;/span&gt;&lt;span&gt;;

    #gzip  on;

    include &lt;/span&gt;/etc/nginx/conf.d&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;.conf;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过这个文件可以不用动，&lt;em id=&quot;__mceDel&quot;&gt;因为它的服务配置include 指向了/etc/nginx/conf.d/*.conf。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;所以，只要在conf.d目录下创建自己的网站配置文件即可，可以把default.conf 移除或改个后缀先：&lt;/p&gt;
&lt;p&gt;然后新建：taurus.conf 的配置（这里少了三个基本的配置：Domain替换、负载均衡、动静分离，在下一篇介绍）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server {
    listen       &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
    server_name  mvc.taurus.cyqdata.com;//绑定域名&lt;br/&gt;&lt;/span&gt;&lt;span&gt;
    location &lt;/span&gt;/&lt;span&gt; {
          proxy_pass http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:8888/;//跳转地址&lt;/span&gt;
&lt;span&gt;          proxy_set_header Host $host;
          proxy_set_header X&lt;/span&gt;-Real-&lt;span&gt;IP $remote_addr;
          proxy_set_header X&lt;/span&gt;-Forwarded-&lt;span&gt;For $proxy_add_x_forwarded_for;
     　　  proxy_set_header Cookie $http_cookie;
    }

    #error_page  &lt;/span&gt;&lt;span&gt;404&lt;/span&gt;              /&lt;span&gt;404&lt;/span&gt;&lt;span&gt;.html;

    # redirect server error pages to the &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; page /&lt;span&gt;50x.html
    #
    error_page   &lt;/span&gt;&lt;span&gt;500&lt;/span&gt; &lt;span&gt;502&lt;/span&gt; &lt;span&gt;503&lt;/span&gt; &lt;span&gt;504&lt;/span&gt;  /&lt;span&gt;50x.html;
    location &lt;/span&gt;= /&lt;span&gt;50x.html {
        root   &lt;/span&gt;/usr/share/nginx/&lt;span&gt;html;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着，刷新配置即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
nginx -s reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;访问效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/17408/201903/17408-20190316011810202-414176144.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;进入NetCore的世界：&lt;/p&gt;
&lt;p&gt;1、NetCore的技术学习成本还算是比较低的：&lt;/p&gt;
&lt;p&gt;因为Taurus和Aries在window和linux的开发方式和代码都是同一套，&lt;/p&gt;
&lt;p&gt;根本不需要学习NetCore下的MVC、EF以及一大堆有的没的消费时间。&lt;/p&gt;
&lt;p&gt;2、整体的学习成本，更多的还是熟悉Linux系统及命令行花的时间多。&lt;/p&gt;
&lt;p&gt;Aries on CentOS7：&lt;a href=&quot;http://mvc.aries.cyqdata.com&quot; target=&quot;_blank&quot;&gt;mvc.aries.cyqdata.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Taurus on CentOS7：&lt;a href=&quot;http://mvc.taurus.cyqdata.com/&quot; target=&quot;_blank&quot;&gt;mvc.taurus.cyqdata.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一篇，介绍正式往服务器上部署的过程。&lt;/p&gt;

</description>
<pubDate>Mon, 18 Mar 2019 06:35:00 +0000</pubDate>
<dc:creator>路过秋天</dc:creator>
<og:description>折腾的过程分两步：第一步是：本机跑虚拟机部署试一下；第二步是：买了个云服务器部署了上去。折腾完，感觉DotNetCore，虽然普及率不高，但整体还算是比较成熟了。下面，就和大伙分享一下这两步的过程及遇</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cyq1162/p/10540174.html</dc:identifier>
</item>
<item>
<title>从哪些方面扩展你的系统 - 系统性能扩展立方体 - 土豆的奥特之父</title>
<link>http://www.cnblogs.com/xguo/p/10551950.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xguo/p/10551950.html</guid>
<description>&lt;p&gt;在上一篇文章《&lt;a href=&quot;https://www.cnblogs.com/xguo/p/10549030.html&quot; target=&quot;_blank&quot;&gt;分布式系统的构建原则&lt;/a&gt;》中总结了分布式系统的几个原则，扩展性是其中非常重要的一个原则，而对于扩展性则是我们工程团队多年以来不懈的追求，所以，我们单独展开，写一写有关扩展性的内容。&lt;/p&gt;
&lt;p&gt;在各种不同的领域中，深耕的组织和团队都不约而同的尝试、发现和总结软件架构模式，最后都相似的得出共同的软件架构特征，大家都希望系统更健壮、具有适应能力、更好的满足现代化的需求。&lt;br/&gt;而这些特征其实背后无疑都指向一个共同的非常重要的实现原则，扩展性！&lt;/p&gt;
&lt;p&gt;扩展性从不同的角度大致可以分为 功能扩展性 和 性能扩展性 ，&lt;/p&gt;
&lt;h3&gt;功能扩展，&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;系统是否能方便灵活的增加新功能，或者新的实现，能让你的系统更快的响应需求的变化，大神们在实践中总结出来的各种设计模式基本上都是为了解决这个问题，响应变化；&lt;/li&gt;
&lt;li&gt;功能之间松耦合，非强依赖，有一定的容错和降级能力，组件相互隔离，失败的扩散控制的组件内部，能够独立恢复，保证部分失败，不会阻断系统的可用性。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;其实回头想想，计算机，操作系统在这方面设计和抽象的非常有远见，冯诺依曼对计算机抽象的5个部分，相对都能做到独立工作、独立扩展、独立恢复，例如现代化的Internet、USB、Type-C等都是被兼容的设备，大家都属于input/output，而在大部分情况下，一些扩展的设备发生故障，整个计算机还是可以继续工作。&lt;/p&gt;
&lt;p&gt;冯诺依曼1945年的论文《First Draft of a Report on the EDVAC》提出的计算机架构，能够适应上百年甚至更久，不得不说这是一种伟大的设计！&lt;/p&gt;
&lt;p&gt;假如你可能要问，如果CPU坏了呢，计算机还能工作吗？&lt;br/&gt;你可以试想一下，想象一台更大的计算机，某个CPU组成的计算机可能是整个大型计算机的一个input或者output呢？&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;1834&quot; data-height=&quot;1282&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/57355/201903/57355-20190318141629546-1527885097.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;性能扩展，&lt;/h3&gt;
&lt;p&gt;当今，流量红利爆发，特别是To C的系统，上线后，性能往往会成为公司和开发团队关注的焦点。&lt;br/&gt;功能方面能不能方便扩展，追的上需求的发展，是工程团队首要考虑的，而上线以后能不能扛得住流量的考验则是老板和投资人比较关注的，&lt;br/&gt;那我们来讨论一下如何提升系统的吞吐量，保证SLA。&lt;/p&gt;
&lt;p&gt;在负载均衡下部署多个系统实例，运行多个程序副本，是扩展性能最直接的办法，《The Art of Scalability》中文名《架构即未来》一书中谈到扩展模型，包括X-axis、Y-axis、Z-axis三个纬度进行扩展，提升系统的吞吐量，而多实例这个方法被称为是横向扩展，即：X-axis。&lt;br/&gt;这个模型叫做扩展立方体（Scale Cube），比较符合微服务盛行的当下，让扩展更具有针对性。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;720&quot; data-height=&quot;540&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/57355/201903/57355-20190318141705934-1498085340.png&quot; alt=&quot;&quot;/&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;X-axis scaling&lt;/h4&gt;
&lt;p&gt;由多个程序副本同时运行，组成一个集群，由负载均衡统一调度分配流量，例如，一个系统由N个副本同时工作，那每个副本处理的流量为 1/N，在扩展性方面，这是一个简单，有效的方案，我们通常称为横向扩展，或者水平扩展。&lt;/p&gt;
&lt;p&gt;简单的办法，往往会损失一些细节和灵活性，总结下来有三个缺点，&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;无法局部扩展，每个系统副本有相同的要求，这就需要我们投入更多的资源，每个系统需要配比相同的配置，包括服务器和数据库等；&lt;/li&gt;
&lt;li&gt;无法局部恢复、问题修复代价比较大，需要更新所有系统副本，会造成一定几率的服务不可用；&lt;/li&gt;
&lt;li&gt;系统的复杂性没有解决，其实就是康威定律，随着系统不断的开发，系统的复杂性也会不断的升高，增加CICD的难度，和部署周期。&lt;/li&gt;
&lt;/ol&gt;&lt;h4&gt;Y-axis scaling&lt;/h4&gt;
&lt;p&gt;水平扩展是整个系统多副本运行，平分流量从而提升整体性能，而Y-axis扩展是对这个服务进行拆分，让一个大的系统裂变为多个小服务，独立部署，让扩展更具针对性。&lt;br/&gt;拆分的指导思想是把职责相关的功能拆分为一个服务，类似单一职责原则，一般有基于动词和基于名词俩种拆分方法，例如上传文件服务是基于动词拆分出来的服务，用户管理则是基于名词的拆分。&lt;br/&gt;这样一来，水平扩展的几个问题都被解决了，结合X-axis，可以局部扩展，局部更新。&lt;/p&gt;
&lt;p&gt;其实，这就是微服务。&lt;/p&gt;
&lt;h4&gt;Z-axis scaling&lt;/h4&gt;
&lt;p&gt;上面俩个都是基于服务级别的扩展，它们可能面临同一个问题，却无法通过以上俩种扩展方案去解决，是服务所依赖的数据库的性能问题。&lt;br/&gt;所以，Z-axis就派上用场了，数据分区。&lt;br/&gt;如果说Y-axis是对服务的职责单一化，那Z-axis是对数据库的职责单一化，部署多个数据库服务，在业务层，也就是服务层，对这些数据库进行逻辑分类使用，例如，VIP用户和普通用户使用不同的数据库，不同地区的用户数据存储在不同的数据库等等，分散存储，以减轻数据库的压力。&lt;br/&gt;如果需要查询或者排序的话，就需要访问所有数据库，得到聚合结果，然后在服务层做合并处理。&lt;br/&gt;注意，数据拆分会增加系统的复杂度，事务和数据迁移或从新分配都是比较棘手的问题，当然，我们可以借助一些成熟的方案甚至数据库系统来化解，但要求我们深谙数据拆分之道。&lt;/p&gt;
&lt;p&gt;其实，这就是分库分表，或者分布式数据库的应用场景。&lt;/p&gt;
&lt;h3&gt;小结&lt;/h3&gt;
&lt;p&gt;扩展立方体，给我们扩展系统提供了思路，需要我们根据自己系统的实际架构和压力情况来衡量并制定合适的扩展方案，并不是X、Y、Z都要用上。&lt;br/&gt;再者，这个模型也是宏观指导，影响一个系统的性能包括CPU、内存、IO（网络、磁盘）等诸多因素，需要我们像个老中医一样，通过望闻问切等多种手段，定位系统性能瓶颈，然后采取有效的扩展措施，例如，如果一个系统是网络IO密集型，瓶颈在于基础设施网络，这种情况下，你如何扩展也起不到效果，可能需要&lt;br/&gt;的是升级硬件、提高网络利用率、压缩input、output、采用异步流传输、缩短调用链、改变交互方式（响应式、异步、非阻塞）等措施，才能真正解决痛点。&lt;/p&gt;
&lt;p&gt;但如果是一个大型系统，面临性能问题，按照Scale Cube模型，整体扩展思路总结一下大概是，先垂直拆分、后水平扩展，包括服务拆分，数据库拆分，拆分原则是职责单一，用动词或名词拆分法，然后对服务和数据库根据压力情况，适当的水平扩展。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://microservices.io/articles/scalecube.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://microservices.io/articles/scalecube.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Mon, 18 Mar 2019 06:24:00 +0000</pubDate>
<dc:creator>土豆的奥特之父</dc:creator>
<og:description>在上一篇文章《分布式系统的构建原则》中总结了分布式系统的几个原则，扩展性是其中非常重要的一个原则，而对于扩展性则是我们工程团队多年以来不懈的追求，所以，我们单独展开，写一写有关扩展性的内容。 在各种不</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xguo/p/10551950.html</dc:identifier>
</item>
<item>
<title>Go语言反射reflect - itbsl</title>
<link>http://www.cnblogs.com/itbsl/p/10551880.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itbsl/p/10551880.html</guid>
<description>&lt;p&gt;&lt;strong&gt;反射是指在程序运行期对程序本身进行访问和修改的能力&lt;/strong&gt;。程序在编译时，变量被转换为内存地址，变量名不会被编译器写入到可执行部分。在运行程序时，程序无法获取自身的信息。&lt;/p&gt;
&lt;p&gt;支持反射的语言可以在程序编译期将变量的反射信息，如字段名称、类型信息、结构体信息等整合到可执行文件中，并给程序提供接口访问反射信息，这样就可以在程序运行期获取类型的反射信息，并且有能力修改它们。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go程序在运行期使用reflect包访问程序的反射信息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;reflect包实现了运行时反射，允许程序操作任意类型的对象。典型用法是用静态类型interface{}保存一个值，通过调用TypeOf获取其动态类型信息，该函数返回一个Type类型值。调用ValueOf函数返回一个Value类型值，该值代表运行时的数据。Zero接受一个Type类型参数并返回一个代表该类型零值的Value类型值。&lt;/p&gt;
&lt;p&gt;Go 程序的反射系统无法获取到一个可执行文件空间中或者是一个包中的所有类型信息，需要配合使用标准库中对应的词法、语法解析器和抽象语法树（AST）对源码进行扫描后获得这些信息。&lt;/p&gt;
&lt;h2 id=&quot;通过反射获取类型信息&quot;&gt;通过反射获取类型信息&lt;/h2&gt;
&lt;p&gt;通过反射获取类型信息：(reflect.TypeOf()和reflect.Type)&lt;/p&gt;
&lt;p&gt;使用 reflect.TypeOf() 函数可以获得任意值的类型对象（reflect.Type），程序通过类型对象可以访问任意值的类型信息。下面通过例子来理解获取类型对象的过程：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;reflect&quot;
)

type Student struct {

    Name string
    Age  int
}

func main() {

    var stu Student

    typeOfStu := reflect.TypeOf(stu)

    fmt.Println(typeOfStu.Name(), typeOfStu.Kind())
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码输出如下:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;Student struct&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码说明如下:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第16行，定义一个int类型的变量&lt;/li&gt;
&lt;li&gt;第18行，通过reflect.TypeOf()取得变量stu的类型对象typeOfStu,类型为reflect.Type&lt;/li&gt;
&lt;li&gt;第20行中，通过typeOfStu类型对象的成员函数，可以分别获取到 typeOfStu 变量的类型名为 Student，种类（Kind）为 struct。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;理解反射的类型type与种类kind&quot;&gt;理解反射的类型(Type)与种类(Kind)&lt;/h3&gt;
&lt;p&gt;在使用反射时，需要首先理解类型（Type）和种类（Kind）的区别。编程中，使用最多的是类型，但在反射中，当需要区分一个大品种的类型时，就会用到种类（Kind）。例如，需要统一判断类型中的指针时，使用种类（Kind）信息就较为方便。&lt;/p&gt;
&lt;h4 id=&quot;反射种类kind的定义&quot;&gt;反射种类(Kind)的定义&lt;/h4&gt;
&lt;p&gt;Go 程序中的类型（Type）指的是系统原生数据类型，如 int、string、bool、float32 等类型，以及使用 type 关键字定义的类型，这些类型的名称就是其类型本身的名称。例如使用 type A struct{} 定义结构体时，A 就是 struct{} 的类型。&lt;/p&gt;
&lt;p&gt;种类（Kind）指的是对象归属的品种，在 reflect 包中有如下定义：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;type Kind uint

const (
    Invalid Kind = iota  // 非法类型
    Bool                                 // 布尔型
    Int                                // 有符号整型
    Int8                                 // 有符号8位整型
    Int16                                // 有符号16位整型
    Int32                                // 有符号32位整型
    Int64                                // 有符号64位整型
    Uint                                 // 无符号整型
    Uint8                                // 无符号8位整型
    Uint16                           // 无符号16位整型
    Uint32                           // 无符号32位整型
    Uint64                           // 无符号64位整型
    Uintptr                          // 指针
    Float32                          // 单精度浮点数
    Float64                          // 双精度浮点数
    Complex64                        // 32位复数类型
    Complex128                   // 64位复数类型
    Array                                // 数组
    Chan                                 // 通道
    Func                                 // 函数
    Interface                        // 接口
    Map                                // 映射
    Ptr                                // 指针
    Slice                                // 切片
    String                           // 字符串
    Struct                           // 结构体
    UnsafePointer                // 底层指针
)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Map、Slice、Chan 属于引用类型，使用起来类似于指针，但是在种类常量定义中仍然属于独立的种类，不属于 Ptr。&lt;/p&gt;
&lt;p&gt;type A struct{} 定义的结构体属于 Struct 种类，*A 属于 Ptr。&lt;/p&gt;
&lt;h4 id=&quot;从类型对象中获取类型名称和种类的例子&quot;&gt;从类型对象中获取类型名称和种类的例子&lt;/h4&gt;
&lt;p&gt;Go 语言中的类型名称对应的反射获取方法是 reflect.Type 中的 Name() 方法，返回表示类型名称的字符串。&lt;/p&gt;
&lt;p&gt;类型归属的种类（Kind）使用的是 reflect.Type 中的 Kind() 方法，返回 reflect.Kind 类型的常量。&lt;/p&gt;
&lt;p&gt;下面的代码中会对常量和结构体进行类型信息获取。&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;reflect&quot;
)
//定义一个Enum类型
type Enum int
const (
    Zero Enum = 0
)
type Student struct {

    Name string
    Age  int
}

func main() {

    //定义一个Student类型的变量
    var stu Student

    //获取结构体实例的反射类型对象
    typeOfStu := reflect.TypeOf(stu)

    //显示反射类型对象的名称和种类
    fmt.Println(typeOfStu.Name(), typeOfStu.Kind())

    //获取Zero常量的反射类型对象
    typeOfZero := reflect.TypeOf(Zero)

    //显示反射类型对象的名称和种类
    fmt.Println(typeOfZero.Name(), typeOfZero.Kind())
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码输出如下:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;Student struct
Enum int&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码说明如下:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第21行，将 Student 实例化，并且使用 reflect.TypeOf() 获取被实例化后的 Student 的反射类型对象。&lt;/li&gt;
&lt;li&gt;第27行，输出Student的类型名称和种类，类型名称就是 Student，而 Student 属于一种结构体种类，因此种类为 struct。&lt;/li&gt;
&lt;li&gt;第30行，Zero 是一个 Enum 类型的常量。这个 Enum 类型在第 9 行声明，第 12 行声明了常量。如没有常量也不能创建实例，通过 reflect.TypeOf() 直接获取反射类型对象。&lt;/li&gt;
&lt;li&gt;第33行，输出 Zero 对应的类型对象的类型名和种类。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;reflect.elem---通过反射获取指针指向的元素类型&quot;&gt;reflect.Elem() - 通过反射获取指针指向的元素类型&lt;/h3&gt;
&lt;p&gt;通过反射获取指针指向的元素类型：reflect.Elem()&lt;/p&gt;
&lt;p&gt;Go 程序中对指针获取反射对象时，可以通过 reflect.Elem() 方法获取这个指针指向的元素类型。这个获取过程被称为取元素，等效于对指针类型变量做了一个&lt;code&gt;*&lt;/code&gt;操作，代码如下：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;reflect&quot;
)

type Student struct {

    Name string
    Age  int
}

func main() {

    //定义一个Student类型的指针变量
    var stu = &amp;amp;Student{Name:&quot;kitty&quot;, Age: 20}

    //获取结构体实例的反射类型对象
    typeOfStu := reflect.TypeOf(stu)

    //显示反射类型对象的名称和种类
    fmt.Printf(&quot;name: '%v', kind: '%v'\n&quot;, typeOfStu.Name(), typeOfStu.Kind())

    //取类型的元素
    typeOfStu = typeOfStu.Elem()

    //显示反射类型对象的名称和种类
    fmt.Printf(&quot;element name: '%v', element kind: '%v'\n&quot;, typeOfStu.Name(), typeOfStu.Kind())
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码输出如下:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;name: '', kind: 'ptr'
element name: 'Student', element kind: 'struct'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码说明如下:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第17行，创建了一个Student结构体的实例，stu是一个*Student的指针变量&lt;/li&gt;
&lt;li&gt;第20行，对指针变量获取反射类型信息。&lt;/li&gt;
&lt;li&gt;第23行，输出指针变量的类型名称和种类。Go语言的反射中对所有指针变量的种类都是 Ptr，但注意，指针变量的类型名称是空，不是 *Student。&lt;/li&gt;
&lt;li&gt;第26行，取指针类型的元素类型，也就是 Student 类型。这个操作不可逆，不可以通过一个非指针类型获取它的指针类型。&lt;/li&gt;
&lt;li&gt;第29行，输出指针变量指向元素的类型名称和种类，得到了 Student 的类型名称（Student）和种类（struct）。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;通过反射获取结构体的成员类型&quot;&gt;通过反射获取结构体的成员类型&lt;/h3&gt;
&lt;p&gt;任意值通过 reflect.TypeOf() 获得反射对象信息后，如果它的类型是结构体，可以通过反射值对象（reflect.Type）的 NumField() 和 Field() 方法获得结构体成员的详细信息。与成员获取相关的 reflect.Type 的方法如下表所示。&lt;/p&gt;
&lt;center&gt;结构体成员访问的方法列表&lt;/center&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;10.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Field(i int) StructField&lt;/td&gt;
&lt;td&gt;根据索引，返回索引对应的结构体字段的信息。当值不是结构体或索引超界时发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;NumField() int&lt;/td&gt;
&lt;td&gt;返回结构体成员字段数量。当类型不是结构体或索引超界时发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt;FieldByName(name string) (StructField, bool)&lt;/td&gt;
&lt;td&gt;根据给定字符串返回字符串对应的结构体字段的信息。没有找到时 bool 返回 false，当类型不是结构体或索引超界时发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;FieldByIndex(index []int) StructField&lt;/td&gt;
&lt;td&gt;多层成员访问时，根据 []int 提供的每个结构体的字段索引，返回字段的信息。没有找到时返回零值。当类型不是结构体或索引超界时 发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;5&quot;&gt;&lt;td&gt;FieldByNameFunc( match func(string) bool) (StructField,bool)&lt;/td&gt;
&lt;td&gt;根据匹配函数匹配需要的字段。当值不是结构体或索引超界时发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;结构体字段类型&quot;&gt;结构体字段类型&lt;/h4&gt;
&lt;p&gt;Type 的 Field() 方法返回 StructField 结构，这个结构描述结构体的成员信息，通过这个信息可以获取成员与结构体的关系，如偏移、索引、是否为匿名字段、结构体标签（Struct Tag）等，而且还可以通过 StructField 的 Type 字段进一步获取结构体成员的类型信息。StructField 的结构如下：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;type StructField struct {
    Name string          // 字段名
    PkgPath string       // 字段路径
    Type      Type       // 字段反射类型对象
    Tag       StructTag  // 字段的结构体标签
    Offset    uintptr    // 字段在结构体中的相对偏移
    Index     []int      // Type.FieldByIndex中的返回的索引值
    Anonymous bool       // 是否为匿名字段
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;字段说明如下。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Name：为字段名称。&lt;/li&gt;
&lt;li&gt;PkgPath：字段在结构体中的路径。&lt;/li&gt;
&lt;li&gt;Type：字段本身的反射类型对象，类型为 reflect.Type，可以进一步获取字段的类型信息。&lt;/li&gt;
&lt;li&gt;Tag：结构体标签，为结构体字段标签的额外信息，可以单独提取。&lt;/li&gt;
&lt;li&gt;Index：FieldByIndex 中的索引顺序。&lt;/li&gt;
&lt;li&gt;Anonymous：表示该字段是否为匿名字段。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;获取成员反射信息&quot;&gt;获取成员反射信息&lt;/h4&gt;
&lt;p&gt;下面代码中，实例化一个结构体并遍历其结构体成员，再通过 reflect.Type 的 FieldByName() 方法查找结构体中指定名称的字段，直接获取其类型信息。&lt;/p&gt;
&lt;p&gt;反射访问结构体成员类型及信息:&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;reflect&quot;
)

func main() {
  
    // 声明一个空结构体
    type cat struct {
        Name string
      
        // 带有结构体tag的字段
        Type int `json:&quot;type&quot; id:&quot;100&quot;`
    }
  
    // 创建cat的实例
    ins := cat{Name: &quot;mimi&quot;, Type: 1}
  
    // 获取结构体实例的反射类型对象
    typeOfCat := reflect.TypeOf(ins)
  
    // 遍历结构体所有成员
    for i := 0; i &amp;lt; typeOfCat.NumField(); i++ {
      
        // 获取每个成员的结构体字段类型
        fieldType := typeOfCat.Field(i)
      
        // 输出成员名和tag
        fmt.Printf(&quot;name: %v  tag: '%v'\n&quot;, fieldType.Name, fieldType.Tag)
    }
  
    // 通过字段名, 找到字段类型信息
    if catType, ok := typeOfCat.FieldByName(&quot;Type&quot;); ok {
      
        // 从tag中取出需要的tag
        fmt.Println(catType.Tag.Get(&quot;json&quot;), catType.Tag.Get(&quot;id&quot;))
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码输出如下：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;name: Name  tag: ''
name: Type  tag: 'json:&quot;type&quot; id:&quot;100&quot;'
type 100&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码说明如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第 11 行，声明了带有两个成员的 cat 结构体。&lt;/li&gt;
&lt;li&gt;第 15 行，Type 是 cat 的一个成员，这个成员类型后面带有一个以```开始和结尾的字符串。这个字符串在 Go语言中被称为 Tag（标签）。一般用于给字段添加自定义信息，方便其他模块根据信息进行不同功能的处理。&lt;/li&gt;
&lt;li&gt;第 19 行，创建 cat 实例，并对两个字段赋值。结构体标签属于类型信息，无须且不能赋值。&lt;/li&gt;
&lt;li&gt;第 22 行，获取实例的反射类型对象。&lt;/li&gt;
&lt;li&gt;第 25 行，使用 reflect.Type 类型的 NumField() 方法获得一个结构体类型共有多少个字段。如果类型不是结构体，将会触发宕机错误。&lt;/li&gt;
&lt;li&gt;第 28 行，reflect.Type 中的 Field() 方法和 NumField 一般都是配对使用，用来实现结构体成员的遍历操作。&lt;/li&gt;
&lt;li&gt;第 31 行，使用 reflect.Type 的 Field() 方法返回的结构不再是 reflect.Type 而是StructField 结构体。&lt;/li&gt;
&lt;li&gt;第 35 行，使用 reflect.Type 的 FieldByName() 根据字段名查找结构体字段信息，cat Type 表示返回的结构体字段信息，类型为 StructField，ok 表示是否找到结构体字段的信息。&lt;/li&gt;
&lt;li&gt;第 38 行中，使用 StructField 中 Tag 的 Get() 方法，根据 Tag 中的名字进行信息获取。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;通过反射获取值信息&quot;&gt;通过反射获取值信息&lt;/h2&gt;
&lt;p&gt;反射不仅可以获取值的类型信息，还可以动态地获取或者设置变量的值。Go语言中使用 reflect.Value 获取和设置变量的值。&lt;/p&gt;
&lt;p&gt;变量、interface{}和reflect.Value是可以相互转换的。这点在实际开发中，会经常碰到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720430/201903/720430-20190318141014788-581422387.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用反射值对象包装任意值&quot;&gt;使用反射值对象包装任意值&lt;/h3&gt;
&lt;p&gt;Go 语言中，使用 reflect.ValueOf() 函数获得值的反射值对象（reflect.Value）。书写格式如下：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;rValue := reflect.ValueOf(rawValue)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;reflect.ValueOf 返回 reflect.Value 类型，包含有 rawValue 的值信息。reflect.Value 与原值间可以通过值包装和值获取互相转化。reflect.Value 是一些反射操作的重要类型，如反射调用函数。&lt;/p&gt;
&lt;h3 id=&quot;从反射值对象获取被包装的值&quot;&gt;从反射值对象获取被包装的值&lt;/h3&gt;
&lt;p&gt;Go 语言中可以通过 reflect.Value 重新获得原始值。&lt;/p&gt;
&lt;h4 id=&quot;从反射值对象reflect.value中获取值得方法&quot;&gt;从反射值对象(reflect.Value)中获取值得方法&lt;/h4&gt;
&lt;p&gt;可以通过下面几种方法从反射值对象 reflect.Value 中获取原值，如下表所示。&lt;/p&gt;
&lt;center&gt;反射值获取原始值的方法&lt;/center&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Interface() interface{}&lt;/td&gt;
&lt;td&gt;将值以 interface{} 类型返回，可以通过类型断言转换为指定类型&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Int() int64&lt;/td&gt;
&lt;td&gt;将值以 int 类型返回，所有有符号整型均可以此方式返回&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Uint() uint64&lt;/td&gt;
&lt;td&gt;将值以 uint 类型返回，所有无符号整型均可以此方式返回&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Float() float64&lt;/td&gt;
&lt;td&gt;将值以双精度（float64）类型返回，所有浮点数（float32、float64）均可以此方式返回&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Bool() bool&lt;/td&gt;
&lt;td&gt;将值以 bool 类型返回&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Bytes() []bytes&lt;/td&gt;
&lt;td&gt;将值以字节数组 []bytes 类型返回&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;String() string&lt;/td&gt;
&lt;td&gt;将值以字符串类型返回&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;从反射值对象reflect.value中获取值得例子&quot;&gt;从反射值对象(reflect.Value)中获取值得例子&lt;/h4&gt;
&lt;p&gt;下面代码中，将整型变量中的值使用 reflect.Value 获取反射值对象（reflect.Value）。再通过 reflect.Value 的 Interface() 方法获得 interface{} 类型的原值，通过 int 类型对应的 reflect.Value 的 Int() 方法获得整型值。&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;reflect&quot;
)

func main() {

    //声明整型变量a并赋初值
    var a int = 1024

    //获取变量a的反射值对象
    valueOfA := reflect.ValueOf(a)

    //获取interface{}类型的值，通过类型断言转换
    var getA int = valueOfA.Interface().(int)

    //获取64位的值，强制类型转换为int类型
    var getB int = int(valueOfA.Int())

    fmt.Println(getA, getB)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码输出如下：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;1024 1024&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码说明如下:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第 11 行，声明一个变量，类型为 int，设置初值为 1024。&lt;/li&gt;
&lt;li&gt;第 14 行，获取变量 a 的反射值对象，类型为 reflect.Value，这个过程和 reflect.TypeOf() 类似。&lt;/li&gt;
&lt;li&gt;第 17 行，将 valueOfA 反射值对象以 interface{} 类型取出，通过类型断言转换为 int 类型并赋值给 getA。&lt;/li&gt;
&lt;li&gt;第 20 行，将 valueOfA 反射值对象通过 Int 方法，以 int64 类型取出，通过强制类型转换，转换为原本的 int 类型。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;通过反射访问结构体成员的值&quot;&gt;通过反射访问结构体成员的值&lt;/h3&gt;
&lt;p&gt;反射值对象（reflect.Value）提供对结构体访问的方法，通过这些方法可以完成对结构体任意值的访问，如下表所示。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;10&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Field(i int) Value&lt;/td&gt;
&lt;td&gt;根据索引，返回索引对应的结构体成员字段的反射值对象。当值不是结构体或索引超界时发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;NumField() int&lt;/td&gt;
&lt;td&gt;返回结构体成员字段数量。当值不是结构体或索引超界时发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;5&quot;&gt;&lt;td&gt;FieldByName(name string) Value&lt;/td&gt;
&lt;td&gt;根据给定字符串返回字符串对应的结构体字段。没有找到时返回零值，当值不是结构体或索引超界时发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;FieldByIndex(index []int) Value&lt;/td&gt;
&lt;td&gt;多层成员访问时，根据 []int 提供的每个结构体的字段索引，返回字段的值。 没有找到时返回零值，当值不是结构体或索引超界时发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;5&quot;&gt;&lt;td&gt;FieldByNameFunc(match func(string) bool) Value&lt;/td&gt;
&lt;td&gt;根据匹配函数匹配需要的字段。找到时返回零值，当值不是结构体或索引超界时发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;下面代码构造一个结构体包含不同类型的成员。通过 reflect.Value 提供的成员访问函数，可以获得结构体值的各种数据。&lt;/p&gt;
&lt;p&gt;反射访问结构体成员的值:&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;reflect&quot;
)

//定义结构体
type Student struct {
    Name string
    Age  int

    //嵌入字段
    float32
    bool


    next *Student
}

func main() {

    //值包装结构体
    rValue := reflect.ValueOf(Student{
        next: &amp;amp;Student{},
    })

    //获取字段数量
    fmt.Println(&quot;NumField:&quot;, rValue.NumField())

    //获取索引为2的字段(float32字段)
    //注:经过测试发现Field(i)的参数索引是从0开始的，
    //并且是按照定义的结构体的顺序来的，而不是按照字段名字的ASCii码值来的
    floatField := rValue.Field(2)

    //输出字段类型
    fmt.Println(&quot;Field:&quot;, floatField.Type())

    //根据名字查找字段
    fmt.Println(&quot;FieldByName(\&quot;Age\&quot;).Type:&quot;, rValue.FieldByName(&quot;Age&quot;).Type())

    //根据索引查找值中next字段的int字段的值
    fmt.Println(&quot;FieldByIndex([]int{4, 0}).Type()&quot;, rValue.FieldByIndex([]int{4, 0}).Type())

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果为:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;NumField: 5
Field: float32
FieldByName(&quot;Age&quot;).Type: int
FieldByIndex([]int{4, 0}).Type() string&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码说明如下:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第 9 行，定义结构体，结构体的每个字段的类型都不一样。&lt;/li&gt;
&lt;li&gt;第 24 行，实例化结构体并包装为 reflect.Value 类型，成员中包含一个 *Student 的实例。&lt;/li&gt;
&lt;li&gt;第 29 行，获取结构体的字段数量。&lt;/li&gt;
&lt;li&gt;第 34 和 37 行，获取索引为2的字段值（float32 字段），并且打印类型。&lt;/li&gt;
&lt;li&gt;第 39 行，根据&lt;code&gt;Age&lt;/code&gt;字符串，查找到 Age 字段的类型。&lt;/li&gt;
&lt;li&gt;第 41 行，[]int{4,0} 中的 4 表示，在 Student 结构中索引值为 4 的成员，也就是 next。next 的类型为 Student，也是一个结构体，因此使用 []int{4,0} 中的 0 继续在 next 值的基础上索引，结构为 Student 中索引值为 0 的 Name 字段，类型为 string。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;判断反射值得空和有效性&quot;&gt;判断反射值得空和有效性&lt;/h3&gt;
&lt;p&gt;IsNil()和IsValid() -- 判断反射值的空和有效性&lt;/p&gt;
&lt;p&gt;反射值对象（reflect.Value）提供一系列方法进行零值和空判定，如下表所示。&lt;/p&gt;
&lt;center&gt;反射值对象的零值和有效性判断方法&lt;/center&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;IsNil() bool&lt;/td&gt;
&lt;td&gt;返回值是否为 nil。如果值类型不是通道（channel）、函数、接口、map、指针或 切片时发生 panic，类似于语言层的&lt;code&gt;v== nil&lt;/code&gt;操作&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;IsValid() bool&lt;/td&gt;
&lt;td&gt;判断值是否有效。 当值本身非法时，返回 false，例如 reflect Value不包含任何值，值为 nil 等。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;下面的例子将会对各种方式的空指针进行 IsNil() 和 IsValid() 的返回值判定检测。同时对结构体成员及方法查找 map 键值对的返回值进行 IsValid() 判定，参考下面的代码。&lt;/p&gt;
&lt;p&gt;反射值对象的零值和有效性判断：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;reflect&quot;
)

func main() {

    //*int的空指针
    var a *int
    fmt.Println(&quot;var a *int:&quot;, reflect.ValueOf(a).IsNil())

    //nil值
    fmt.Println(&quot;nil:&quot;, reflect.ValueOf(nil).IsValid())

    //*int类型的空指针
    fmt.Println(&quot;(*int)(nil):&quot;, reflect.ValueOf((*int)(nil)).Elem().IsValid())

    //实例化一个结构体
    s := struct {}{}

    //尝试从结构体中查找一个不存在的字段
    fmt.Println(&quot;不存在的结构体成员:&quot;, reflect.ValueOf(s).FieldByName(&quot;&quot;).IsValid())

    //尝试从结构体中查找一个不存在的方法
    fmt.Println(&quot;不存在的方法:&quot;, reflect.ValueOf(s).MethodByName(&quot;&quot;).IsValid())

    //实例化一个map
    m := map[int]int{}

    //尝试从map中查找一个不存在的键
    fmt.Println(&quot;不存在的键:&quot;, reflect.ValueOf(m).MapIndex(reflect.ValueOf(3)).IsValid())
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;var a *int: true
nil: false
(*int)(nil): false
不存在的结构体成员: false
不存在的方法: false
不存在的键: false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码说明如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第 11 行，声明一个 *int 类型的指针，初始值为 nil。&lt;/li&gt;
&lt;li&gt;第 12 行，将变量 a 包装为 reflect.Value 并且判断是否为空，此时变量 a 为空指针，因此返回 true。&lt;/li&gt;
&lt;li&gt;第 15 行，对 nil 进行 IsValid() 判定（有效性判定），返回 false。&lt;/li&gt;
&lt;li&gt;第 18 行，(&lt;em&gt;int)(nil) 的含义是将 nil 转换为&lt;/em&gt; int，也就是&lt;em&gt;int 类型的空指针。此行将 nil 转换为&lt;/em&gt; int 类型，并取指针指向元素。由于 nil 不指向任何元素，*int 类型的 nil 也不能指向任何元素，值不是有效的。因此这个反射值使用 Isvalid() 判断时返回 false。&lt;/li&gt;
&lt;li&gt;第 21 行，实例化一个结构体。&lt;/li&gt;
&lt;li&gt;第 24 行，通过 FieldByName 查找 s 结构体中一个空字符串的成员，如成员不存在，IsValid() 返回 false。&lt;/li&gt;
&lt;li&gt;第 27 行，通过 MethodByName 查找 s 结构体中一个空字符串的方法，如方法不存在，IsValid() 返回 false。&lt;/li&gt;
&lt;li&gt;第 30 行，实例化一个 map，这种写法与 make 方式创建的 map 等效。&lt;/li&gt;
&lt;li&gt;第 33 行，MapIndex() 方法能根据给定的 reflect.Value 类型的值查找 map，并且返回查找到的结果。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;IsNil() 常被用于判断指针是否为空；IsValid() 常被用于判定返回值是否有效。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;通过反射修改变量的值&quot;&gt;通过反射修改变量的值&lt;/h3&gt;
&lt;p&gt;使用 reflect.Value 对包装的值进行修改时，需要遵循一些规则。如果没有按照规则进行代码设计和编写，轻则无法修改对象值，重则程序在运行时会发生宕机。&lt;/p&gt;
&lt;h4 id=&quot;判断及获取元素的相关方法&quot;&gt;判断及获取元素的相关方法&lt;/h4&gt;
&lt;p&gt;使用 reflect.Value 取元素、取地址及修改值的属性方法请参考下表。&lt;/p&gt;
&lt;center&gt;反射值对象的判定及获取元素的方法&lt;/center&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Elem() Value&lt;/td&gt;
&lt;td&gt;取值指向的元素值，类似于语言层&lt;code&gt;*&lt;/code&gt;操作。当值类型不是指针或接口时发生宕 机，空指针时返回 nil 的 Value&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Addr() Value&lt;/td&gt;
&lt;td&gt;对可寻址的值返回其地址，类似于语言层&lt;code&gt;&amp;amp;&lt;/code&gt;操作。当值不可寻址时发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;CanAddr() bool&lt;/td&gt;
&lt;td&gt;表示值是否可寻址&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;CanSet() bool&lt;/td&gt;
&lt;td&gt;返回值能否被修改。要求值可寻址且是导出的字段&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;值修改相关方法&quot;&gt;值修改相关方法&lt;/h4&gt;
&lt;p&gt;使用 reflect.Value 修改值的相关方法如下表所示。&lt;/p&gt;
&lt;center&gt;反射值对象修改值的方法&lt;/center&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Setlnt(x int64)&lt;/td&gt;
&lt;td&gt;使用 int64 设置值。当值的类型不是 int、int8、int16、 int32、int64 时会发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;SetUint(x uint64)&lt;/td&gt;
&lt;td&gt;使用 uint64 设置值。当值的类型不是 uint、uint8、uint16、uint32、uint64 时会发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SetFloat(x float64)&lt;/td&gt;
&lt;td&gt;使用 float64 设置值。当值的类型不是 float32、float64 时会发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SetBool(x bool)&lt;/td&gt;
&lt;td&gt;使用 bool 设置值。当值的类型不是 bod 时会发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SetBytes(x []byte)&lt;/td&gt;
&lt;td&gt;设置字节数组 []bytes值。当值的类型不是 []byte 时会发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SetString(x string)&lt;/td&gt;
&lt;td&gt;设置字符串值。当值的类型不是 string 时会发生宕机&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;以上方法，在 reflect.Value 的 CanSet 返回 false 仍然修改值时会发生宕机。&lt;/p&gt;
&lt;p&gt;在已知值的类型时，应尽量使用值对应类型的反射设置值。&lt;/p&gt;
&lt;h4 id=&quot;值可修改条件之一可被寻址&quot;&gt;值可修改条件之一：可被寻址&lt;/h4&gt;
&lt;p&gt;通过反射修改变量值的前提条件之一：这个值必须可以被寻址。简单地说就是这个变量必须能被修改。示例代码如下：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import &quot;reflect&quot;

func main() {

    //声明整形变量a并赋初值
    var a int = 1024

    //获取变量a的反射值对象
    rValue := reflect.ValueOf(a)

    //尝试将a修改为1(此处会崩溃)
    rValue.SetInt(1)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;程序运行崩溃，打印错误&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;panic: reflect: reflect.Value.SetInt using unaddressable value&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;报错意思是:SetInt正在使用一个不能被寻址的值。从 reflect.ValueOf 传入的是 a 的值，而不是 a 的地址，这个 reflect.Value 当然是不能被寻址的。将代码修改一下，重新运行：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;reflect&quot;
)

func main() {

    //声明整形变量a并赋初值
    var a int = 1024

    //获取变量a的反射值对象
    rValue := reflect.ValueOf(&amp;amp;a)

    //取出a地址的元素(a的值)
    rValue = rValue.Elem()

    //尝试将a修改为1
    rValue.SetInt(1)

    //打印a的值
    fmt.Println(rValue.Int())
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码输出&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面是对代码的分析：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第 14 行中，将变量 a 取值后传给 reflect.ValueOf()。此时 reflect.ValueOf() 返回的 valueOfA 持有变量 a 的地址。&lt;/li&gt;
&lt;li&gt;第 17 行中，使用 reflect.Value 类型的 Elem() 方法获取 a 地址的元素，也就是 a 的值。reflect.Value 的 Elem() 方法返回的值类型也是 reflect.Value。&lt;/li&gt;
&lt;li&gt;第 20 行，此时 rValue 表示的是 a 的值且可以寻址。使用 SetInt() 方法设置值时不再发生崩溃。&lt;/li&gt;
&lt;li&gt;第 23 行，正确打印修改的值。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;提示&lt;/p&gt;
&lt;p&gt;当 reflect.Value 不可寻址时，使用 &lt;code&gt;Addr()&lt;/code&gt; 方法也是无法取到值的地址的，同时会发生宕机。虽然说 reflect.Value 的 Addr() 方法类似于语言层的&lt;code&gt;&amp;amp;&lt;/code&gt;操作；&lt;code&gt;Elem()&lt;/code&gt; 方法类似于语言层的&lt;code&gt;*&lt;/code&gt;操作，但并不代表这些方法与语言层操作等效。&lt;/p&gt;
&lt;h4 id=&quot;值可修改条件之一被导出&quot;&gt;值可修改条件之一:被导出&lt;/h4&gt;
&lt;p&gt;结构体成员中，如果字段没有被导出，即便不使用反射也可以被访问，但不能通过反射修改，代码如下：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import &quot;reflect&quot;

func main() {

    type dog struct {
        legCount int
    }

    //获取dog实例的反射值对象
    valueOfDog := reflect.ValueOf(&amp;amp;dog{})

    valueOfDog = valueOfDog.Elem()

    //获取legCount字段的值
    vLegCount := valueOfDog.FieldByName(&quot;legCount&quot;)

    //尝试设置legCount的值(这里会发生崩溃)
    vLegCount.SetInt(4)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;程序发生崩溃，报错:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;panic: reflect: reflect.Value.SetInt using value obtained using unexported field&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;报错的意思是：SetInt() 使用的值来自于一个未导出的字段。&lt;/p&gt;
&lt;p&gt;为了能修改这个值，需要将该字段导出。将 dog 中的 legCount 的成员首字母大写，导出 LegCount 让反射可以访问，修改后的代码如下：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;reflect&quot;
)

func main() {

    type dog struct {
        LegCount int
    }

    //获取dog实例的反射值对象
    valueOfDog := reflect.ValueOf(&amp;amp;dog{})

  //// 取出dog实例地址的元素
    valueOfDog = valueOfDog.Elem()

    //获取legCount字段的值
    vLegCount := valueOfDog.FieldByName(&quot;LegCount&quot;)

    //尝试设置legCount的值
    vLegCount.SetInt(4)

    fmt.Println(vLegCount.Int())
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码输出如下:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;4&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码说明如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第 10 行，将 LegCount 首字母大写导出该字段。&lt;/li&gt;
&lt;li&gt;第 15 行，获取 dog 实例指针的反射值对象。&lt;/li&gt;
&lt;li&gt;第 19 行，取 dog 实例的指针元素，也就是 dog 的实例。&lt;/li&gt;
&lt;li&gt;第 21 行，取 dog 结构体中 LegCount 字段的成员值。&lt;/li&gt;
&lt;li&gt;第 24 行，修改该成员值。&lt;/li&gt;
&lt;li&gt;第 26 行，打印该成员值。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;值的修改从表面意义上叫可寻址，换一种说法就是值必须“可被设置”。那么，想修改变量值，一般的步骤是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;取这个变量的地址或者这个变量所在的结构体已经是指针类型。&lt;/li&gt;
&lt;li&gt;使用 reflect.ValueOf 进行值包装。&lt;/li&gt;
&lt;li&gt;通过 Value.Elem() 获得指针值指向的元素值对象（Value），因为值对象（Value）内部对象为指针时，使用 set 设置时会报出宕机错误。&lt;/li&gt;
&lt;li&gt;使用 Value.SetXXX 设置值。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;通过类型信息创建实例&quot;&gt;通过类型信息创建实例&lt;/h3&gt;
&lt;p&gt;当已知 reflect.Type 时，可以动态地创建这个类型的实例，实例的类型为指针。例如 reflect.Type 的类型为 int 时，创建 int 的指针，即&lt;code&gt;*int&lt;/code&gt;，代码如下：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;reflect&quot;
)

func main() {

    var a int

    //取变量a的反射类型对象
    typeOfA := reflect.TypeOf(a)

    //根据反射类型对象创建类型实例
    aIns := reflect.New(typeOfA)

    //输出Value的类型和种类
    fmt.Println(aIns.Type(), aIns.Kind())
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码输出结果如下&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;*int ptr&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码说明如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第 13 行，获取变量 a 的反射类型对象。&lt;/li&gt;
&lt;li&gt;第 16 行，使用 reflect.New() 函数传入变量 a 的反射类型对象，创建这个类型的实例值，值以 reflect.Value 类型返回。这步操作等效于：new(int)，因此返回的是 *int 类型的实例。&lt;/li&gt;
&lt;li&gt;第 19 行，打印 aIns 的类型为 *int，种类为指针。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;通过反射调用函数&quot;&gt;通过反射调用函数&lt;/h3&gt;
&lt;p&gt;如果反射值对象（reflect.Value）中值的类型为函数时，可以通过 reflect.Value 调用该函数。使用反射调用函数时，需要将参数使用反射值对象的切片 []reflect.Value 构造后传入 Call() 方法中，调用完成时，函数的返回值通过 []reflect.Value 返回。&lt;/p&gt;
&lt;p&gt;下面的代码声明一个加法函数，传入两个整型值，返回两个整型值的和。将函数保存到反射值对象（reflect.Value）中，然后将两个整型值构造为反射值对象的切片（[]reflect.Value），使用 Call() 方法进行调用。&lt;/p&gt;
&lt;p&gt;反射调用函数:&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;reflect&quot;
)

//普通函数
func add(a, b int) int {
    return a + b
}

func main() {

    //将函数包装为反射值对象
    funcValue := reflect.ValueOf(add)

    //构造函数参数，传入两个整形值
    paramList := []reflect.Value{reflect.ValueOf(2), reflect.ValueOf(3)}

    //反射调用函数
    retList := funcValue.Call(paramList)

    fmt.Println(retList[0].Int())
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码说明如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第 9～12 行，定义一个普通的加法函数。&lt;/li&gt;
&lt;li&gt;第 17 行，将 add 函数包装为反射值对象。&lt;/li&gt;
&lt;li&gt;第 20 行，将 10 和 20 两个整型值使用 reflect.ValueOf 包装为 reflect.Value，再将反射值对象的切片 []reflect.Value 作为函数的参数。&lt;/li&gt;
&lt;li&gt;第 23 行，使用 funcValue 函数值对象的 Call() 方法，传入参数列表 paramList 调用 add() 函数。&lt;/li&gt;
&lt;li&gt;第 26 行，调用成功后，通过 retList[0] 取返回值的第一个参数，使用 Int 取返回值的整数值。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;提示&lt;/p&gt;
&lt;p&gt;反射调用函数的过程需要构造大量的 reflect.Value 和中间变量，对函数参数值进行逐一检查，还需要将调用参数复制到调用函数的参数内存中。调用完毕后，还需要将返回值转换为 reflect.Value，用户还需要从中取出调用值。因此，反射调用函数的性能问题尤为突出，不建议大量使用反射函数调用。&lt;/p&gt;
&lt;h3 id=&quot;通过反射调用方法&quot;&gt;通过反射调用方法&lt;/h3&gt;
&lt;p&gt;调用方法和调用函数是一样的，只不过结构体需要先通过rValue.Method()先获取方法再调用，请看如下示例:&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;reflect&quot;
)

type MyMath struct {
    Pi float64
}

//普通函数
func (myMath MyMath) Sum(a, b int) int {
    return a + b
}

func (myMath MyMath) Dec(a, b int) int {
    return a - b
}

func main() {

    var myMath = MyMath{Pi:3.14159}

    //获取myMath的值对象
    rValue := reflect.ValueOf(myMath)

    //获取到该结构体有多少个方法
    //numOfMethod := rValue.NumMethod()

    //构造函数参数，传入两个整形值
    paramList := []reflect.Value{reflect.ValueOf(30), reflect.ValueOf(20)}


    //调用结构体的第一个方法Method(0)
    //注意:在反射值对象中方法索引的顺序并不是结构体方法定义的先后顺序
    //而是根据方法的ASCII码值来从小到大排序，所以Dec排在第一个，也就是Method(0)
    result := rValue.Method(0).Call(paramList)

    fmt.Println(result[0].Int())
    
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码输出结果为:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;10&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 18 Mar 2019 06:11:00 +0000</pubDate>
<dc:creator>itbsl</dc:creator>
<og:description>[TOC] 反射是指在程序运行期对程序本身进行访问和修改的能力 。程序在编译时，变量被转换为内存地址，变量名不会被编译器写入到可执行部分。在运行程序时，程序无法获取自身的信息。 支持反射的语言可以在程</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/itbsl/p/10551880.html</dc:identifier>
</item>
<item>
<title>002.RHCS-配置Ceph存储集群 - 木二</title>
<link>http://www.cnblogs.com/itzgr/p/10551766.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itzgr/p/10551766.html</guid>
<description>&lt;h2 align=&quot;left&quot;&gt;一 前期准备&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [kiosk@foundation0 ~]$ ssh ceph@serverc                         #登录Ceph集群节点
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph health                                 #确保集群状态正常
&lt;span&gt;  3&lt;/span&gt; HEALTH_OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 align=&quot;left&quot;&gt;二 存储池概述&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;2.1 存储池&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Red Hat Ceph存储池池是Red Hat Ceph存储集群用于存储对象的逻辑分区。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;池有特定的属性:池类型，它确定池用于确保数据持久性的保护机制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;replication类型在集群中分布每个对象的多个副本。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;erasure coding类型将每个对象分割成块，并将它们与其他擦除编码块一起分发，以使用自动纠错机制保护对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;池中存在一定的数量的PG，它们将它们的对象存储在一组由CRUSH算法确定的osd中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Ceph使用CRUSH规则集来标识哪个放置组应该包含它存储的每个对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;访问级别用于确定不同用户的访问权限的访问权限。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当Ceph在池中存储对象时，它使用CRUSH算法将对象分配给池中的一个PG。根据池的配置和CRUSH算法，PG自动映射到一组OSDs。这决定了Ceph用来存储对象的OSDs。池类型决定该对象如何在该集合的OSDS中复制或存储。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;存储管理员可以配置CRUSH，以便Ceph存储使用特定类型存储设备(如ssd)或位于不同物理位置的设备上的osd来存储对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：池中放置组的数量对性能有重要影响。如果在池中配置太少的放置组，那么需要在每个PG中存储太多的数据，如果您在一个池中配置了太多的放置组，OSDs将需要大量的RAM和CPU资源。通常，一个池应该配置为每个OSD包含100-200个放置组。默认情况下，当您创建一个池时，Ceph会检查每个OSD的pg数量是否已经超过200，如果是，Ceph将不会创建池。如果一个池已经达到了这个限制，ceph health命令还会显示一个警告。这个限制由/etc/ceph/ceph conf配置文件中的mon_max_pg_per_osd参数控制。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;三 存储池常见操作&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;3.1 启用存储池&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;创建池之后，管理员必须显式地配置能够使用它的Ceph应用程序的类型:Ceph块设备(也称为RADOS块设备或RBD)、Ceph对象网关(也称为RADOS网关或RGW)、Ceph文件系统(CephFS)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;命令：ceph osd pool application enable pool-name app&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解析：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;app通常指：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cephfs：用于Ceph文件系统；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;rbd：用于Ceph块设备；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;rgw：用于Ceph对象网关。&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;3.2 池相关命令&lt;/h3&gt;
&lt;div yne-bulb-block=&quot;table&quot;&gt;
&lt;table&gt;&lt;colgroup/&gt;&lt;colgroup&gt;&lt;col width=&quot;206&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;206&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;206&quot;/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-0-0&quot;&gt;
&lt;p&gt;&lt;span&gt;命令&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-0-1&quot;&gt;
&lt;p&gt;&lt;span&gt;含义&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-0-2&quot;&gt;
&lt;p&gt;&lt;span&gt;备注&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-1-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph osd lspools&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-1-1&quot;&gt;
&lt;p&gt;&lt;span&gt;列出集群中的池&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-1-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-2-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph osd pool ls detail&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-2-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;获取更多池相关信息&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-2-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-3-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph df&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-3-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;获取池使用统计数据&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-3-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-4-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph osd pool stats&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-4-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;获取池性能统计数据&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-4-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-5-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph osd df&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-5-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;显示OSDs上的磁盘使用统计信息&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7483-1552808322411-cell-5-2&quot;/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;3.3 池配额&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;管理员可以设置配额来限制可以存储在池中的最大字节数或最大对象数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;命令：ceph osd pool set-quota pool-name max_objects obj-count max_bytes bytes&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：当Ceph达到池配额时，操作将被无限期阻塞。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;3.4 池快照操作&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;重命名池：ceph osd pool rename current-name new-name&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：重命名不会影响存储在池中的数据。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;管理快照：ceph osd pool mksnap pool-name snap-name #创建快照&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;管理快照：ceph osd pool rmsnap pool-name snap-name #删除快照&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;检索快照：rados -p pool-name -s snap-name get object-name file&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;回滚快照：rados -p pool-name rollback object-name snap-name&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：Ceph不支持对erasure类型池进行快照。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;3.5 池的修改操作&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;设置池参数：ceph osd pool set pool-name parameter value&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;查看池参数：ceph osd pool get pool-name parameter&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;查看池所有参数：ceph osd pool get pool-name all&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;常见参数：size参数控制池的副本数量，并映射到osd_pool default_size配置文件参数(默认为3)。pg_num参数控制池的放置组的数量，并映射到osd_pool_default_pg_num配置文件参数(默认为8)。&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;3.6 删除池&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;命令：ceph osd pool delete pool-name pool-name --yes-i-really-really-mean-it&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：在Red Hat Ceph Storage 3中，为了提供更高的保护，Ceph将mon allow pool delete confiquration参数设置为false。当配置此参数后，使用--yes-i-really-really-mean-it选项，ceph osd池删除命令不会导致池的删除。您可以将mon允许池删除参数设置为true，并重新启动mon服务以允许池删除。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;在配置mon_alow_pool_delete为true后，仍然可以通过在池级别将no delete选项设置为ture来保护池不被删除，命令：ceph osd pool set pool-name nodelete true。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：删除池之后，应该删除与该池相关的所有配置，包括专用于池的用户和CRUSH map规则。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;3.7 池的命名空间&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在池中配置的命名空间是池中对象的逻辑组。限制用户用户对池的访问，使用户只能在该名称空间中存储或检索对象。名称空间的优点是可以使用它们来限制用户对池的一部分的访问，它们允许对池进行逻辑分区，并将应用程序限制在池中特定的名称空间内。因此，几个应用程序可以安全地共享一个池，并且不至于池的数量过多。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;提示：名称空间目前只支持直接使用librados的应用程序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;要将对象存储在命名空间中，客户机应用程序必须提供池和名称空间名称。默认情况下，每个池包含一个名称空间，名称为空，称为defaul名称空间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如，从池中存储和检索对象的rados命令接受-N name或--namespace=name选项来指定要使用的名称空间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;命令：rados -p mytestpool -N system put srv /etc/services&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解析：将/etc/services文件作为srv对象存储在mytestpool池中的system命名空间中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;命令：rados -p mytestpool -N system ls&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解析：在所有名称空间中列出池中的所有对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：若需要以JSON格式返回结果，可添加--format=ison选项。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;四 复制存储池&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;4.1 创建复制存储池&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;命令：ceph osd pool create pool-name pg-num [pgp-num] [replicated] [crush-ruleset-name] \ [expected-num-objects]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解析：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;pool-name：池名称；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;pg-num：池中的pg总数；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;pgp-num：池的有效放置组数。通常，这应该等于pg的总数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;duplicate：指定这是一个复制池，如果不包含在命令中，则通常是默认值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;crush-ruleset-name是：用于此池的CRUSH名称。默认值为：osd_pool_default_crush_replicated_ruleset。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：一个OSD需要管理的PGs越多，它需要的资源就越多。同时配置红帽Ceph存储重要的创建池之后，不能减少池中放置组的数量。但是，可以增加放置组的数量。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;五 纠删码池&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;5.1 纠删码池概述&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;纠删码池使用擦除纠删码而不是复制来保护对象数据。当将一个对象存储在纠删码池中时，该对象被划分为许多数据块，这些数据块存储在单独的OSDs中。此外，还根据数据块计算了大量的纠删码块，并将其存储在不同的osd中。如果包含块的OSD失败，可以使用纠删码块来重构对象的数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;纠删码池与复制池不同，它不依赖于存储每个对象的多个完整副本。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每个对象的数据被分成k个数据块。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;计算了m个编码块大小与数据块大小相同的纠删码块。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对象存储在总共k + m 个OSDS上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：纠删码池比复制池需要更少的存储空间来获得类似级别的数据保护。可以降低存储集群的成本和大小。然而，计算纠删码块会增加CPU和内存开销，从而降低纠删码池的性能。此外，在Red Hat Ceph Storage 3中，需要部分对象写的操作不支持擦除编码池。目前纠删码池的使用限制在执行完整对象写入和追加的应用程序中，比如Ceph对象网关。即Red Hat Ceph存储目前只支持通过Ceph对象网关访问的纠删码池。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;5.2 创建纠删存储池&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;命令：ceph osd pool create pool-name pg-num [pgp-num] erasure [erasure-code-profile] \[crush-ruleset-name] [expected-num-objects]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解析：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;pool-name：池名称；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;pg-num：池中的pg总数；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;pgp-num：池的有效放置组数。通常，这应该等于pg的总数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;erasure：指定这是一个纠删码池，如果不包含在命令中，则默认是复制池。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;erasure-code-profile：指定是要使用的配置文件。可以使用ceph osd erasure-code-profile创建新的配置文件，配置文件定义要使用的k和m值以及erasure插件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;crush-ruleset-name是：用于此池的CRUSH名称。如果没有设置，Ceph将使用erasure-code-profile文件中定义。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：一个OSD需要管理的PGs越多，它需要的资源就越多。同时配置红帽Ceph存储重要的创建池之后，不能减少池中放置组的数量。但是，可以增加放置组的数量。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;5.3 纠删池配置文件&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;纠删池配置文件配置纠删池用于存储对象的数据块和纠删块的数量，以及要使用的擦除codinq插件和算法。可以创建新的配置文件来定义一组新的纠删参数。Ceph在安装期间创建名为default的配置文件。这个配置文件被配置为将对象分成两个数据块和一个编码块。Ceph有一个基于插件的系统来控制擦除编码是如何实现的，并且已经创建了许多不同的插件，它们以不同的方式管理擦除编码。默认配置文件使用Jerasure插件，这是最灵活和通用的选项。Red Hat Ceph Storage 3还支持本地可修复擦除代码(LRC)插件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：红帽Ceph存储只支持Jerasure和本地可修复擦除代码(LRC)插件。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;查看参数：ceph osd erasure-code-profile get default&lt;/span&gt;&lt;/p&gt;
&lt;div align=&quot;left&quot; yne-bulb-block=&quot;paragraph&quot;&gt;&lt;span&gt;设置参数：ceph osd erasure-code-profile set profile-name arguments&lt;br/&gt;&lt;/span&gt;
&lt;div yne-bulb-block=&quot;table&quot;&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col width=&quot;186&quot;/&gt;&lt;col width=&quot;380&quot;/&gt;&lt;col width=&quot;52&quot;/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;12&quot;&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-0-0&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;参数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-0-1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;含义&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-0-2&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;备注&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-1-0&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;3158-1552808310812-cell-1-1&quot; readability=&quot;5&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;跨osd分割的数据块的数量，默认值是2。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-1-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-2-0&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;3158-1552808310812-cell-2-1&quot; readability=&quot;5&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;数据变得不可用之前可能失败的osd的数量，默认为1。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-2-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-3-0&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;3158-1552808310812-cell-3-1&quot; readability=&quot;5&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;默认值是/usr/1ib64/ceph/erasure-code，算法插件库的路径。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-3-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-4-0&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;3158-1552808310812-cell-4-1&quot; readability=&quot;5&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;默认值是jerasure，通常有本地可修复擦除代码(LRC)和ISA(仅限Intel)。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-4-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-5-0&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;crush-failure-domain&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;3158-1552808310812-cell-5-1&quot; readability=&quot;8&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;定义CRUSH故障域，该域控制块的位置。默认情况下，设置为host，这确保对象的块被放置在不同的主机上。如果设置为osd，则对象的块可以放在同一主机上的osd上。将故障域设置为osd的弹性较小，因为如果主机失败，主机上的所有osd都将失败。还可以定义其他故障域，并使用它们来确保将块放在数据中心不同机架上的主机上的OSDs上，或者进行其他类型的定制。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-5-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-6-0&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;crush-device-class&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;3158-1552808310812-cell-6-1&quot; readability=&quot;6&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;此可选参数仅为池选择由该类设备支持的OSDs。典型的类可能包括hdd、ssd或nvme。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-6-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-7-0&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;crush-root&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;3158-1552808310812-cell-7-1&quot; readability=&quot;5&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;这个可选参数设置压碎规则集的根节点。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-7-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-8-0&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;key=value&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;3158-1552808310812-cell-8-1&quot; readability=&quot;5&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;插件可能具有该插件特有的键值参数。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-8-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-9-0&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;technique&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;3158-1552808310812-cell-9-1&quot; readability=&quot;7&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;technique为每个插件都提供了一组实现不同算法的不同技术。对于Jerasure插件，默认的技术是reed_sol_van。其他包括:reed_sol_r6_op、cauchy_orig、cauchy_good、liberation、blaum_roth和liber8tion。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;3158-1552808310812-cell-9-2&quot;/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;span&gt;&lt;span&gt;命令：ceph osd erasure-code-profile set myprofile k=3 m=2 crush-failure-domain=rack&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;解析：创建一个概要文件，该概要文件将对象划分为三个数据块(k=3)，并用两个编码块(m=2)保护它们，crush-failure-domain=rack参数确保Ceph不会在同一个机架中存储两个块。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;命令：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ceph osd erasure-code-profile ls #列出现有的配置文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ceph osd erasure-code-profile rm profile-name #删除现有配置文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ceph osd erasure-code-profile get profile-name #查看现有配置文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：不能修改或更改现有池的擦除代码纠删配置文件。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;六 Ceph配置文件&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;6.1 Ceph配置文件介绍&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;默认情况下，Ceph守护进程和客户机/etc/ceph/ceph.conf文件读取配置。修改配置参数时，必须确保所有集群节点和客户端/etc/ceph/ceph.conf文件一致。若使用Ansible来管理您的Red Hat Ceph存储集群配置，它将使您的Ceph配置文件在其所有节点上保持同步。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ceph.conf文件使用基于ini的文件格式，包含几个部分，其中包括与Ceph守护进程和客户机相关的配置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：参数名称可以使用空格、下划线或破折号作为分隔符，例如osd journal size、osd_journal_size和osd-journal-size都是有效的等效参数名称。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用特定守护进程的设置进行分组:&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul yne-block-type=&quot;list&quot;&gt;&lt;li&gt;&lt;span&gt;[global]：存储所有守护进程共有的一般配置和设置。任何进程都会读取该配置，包括客户机。在其他更具体的配置中会重写global设置的参数。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[mon]：存储与monitors(mon)相关的配置。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[osd]：存储与osd守护进程相关的配置。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[mgr]：存储与managers(MGR)相关的配置。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[mds]：存储与元数据服务器(mds)相关的配置。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[client]：存储应用于所有Ceph客户机的配置。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：RHCS在/usr/share/doc/ceph/sample.ceph.conf中提供了一个配置示例文件。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：若需要针对某节点特定配置，可使用[daemon-type.instance-id]进行复写，参考如下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;[mon]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;#所有mon节点的配置；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;[mon.serverc]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;#serverc区别于mon的独特配置。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;对于客户端instance-id为用户名。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;6.2 常见配置&lt;/h3&gt;
&lt;div yne-bulb-block=&quot;table&quot;&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col width=&quot;79&quot;/&gt;&lt;col width=&quot;160&quot;/&gt;&lt;col width=&quot;356&quot;/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;5371-1552809382362-cell-0-0&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;模块&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;5371-1552809382362-cell-0-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;参数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;5371-1552809382362-cell-0-2&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;含义&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; rowspan=&quot;5&quot; colspan=&quot;1&quot; data-cell-id=&quot;5371-1552809382362-cell-1-0&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;元数据模块&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;5371-1552809382362-cell-1-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;$cluster&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;5371-1552809382362-cell-1-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;定义RHCS集群的名称。默认设置为ceph，并在/etc/sysconfig/ceph文件中定义。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;5371-1552809382362-cell-2-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;$type&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;5371-1552809382362-cell-2-2&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;定义守护进程类型。对于监视器，将其设置为mon, OSDs使用osd，元数据服务器使用mds，管理器使用mgr，客户机应用程序使用client。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;5371-1552809382362-cell-3-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;$id&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;5371-1552809382362-cell-3-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;定义守护进程实例ID。对于客户机应用程序，它是用户名。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;5371-1552809382362-cell-4-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;$name&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;5371-1552809382362-cell-4-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;定义守护进程名和实例ID。相当于$type.$ID的简写。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;5371-1552809382362-cell-5-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;$host&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;5371-1552809382362-cell-5-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;定义守护进程所运行的主机名。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;global模块定义全局参数，即定义集群范围的参数。它通常包括以下配置设置:&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul yne-block-type=&quot;list&quot;&gt;&lt;li&gt;&lt;span&gt;带有所有监视器列表的mon主机。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;mon初始成员设置为必须在集群启动时启动的监视器列表，以建立仲裁。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;启用或禁用Ceph组件之间使用cephx身份验证的设置(默认启用)。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Ceph环境中使用的网络，通常一个用于OSDs(集群网络)，一个用于客户机(公共网络)。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h3 align=&quot;justify&quot;&gt;6.3 查看配置&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;命令：ceph daemon type.id config show #查看所有参数和值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;示例：ceph daemon osd.0 config show&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;命令：ceph daemon type.id config get parameter #查看指定参数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;示例：ceph daemon type.id config get mds_data&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;6.4 Ansible Ceph配置文件&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在部署节点上使用Ansible部署，调用/usr/share/ceph-ansible中的Ansible Playbook部署或更新Red Hat Ceph存储集群时，它都会在每个节点上重新创建/etc/ceph/ceph.conf文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在/usr/share/ceph-ansible_group_vars/，编辑ceph_conf_overrides变量，以添加新的节或配置参数。Ansible将该变量转换为INI格式，并将其添加到生成的ceph.conf文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：部署新的配置到节点时候，需要在/usr/share/ceph-ansible目录使用ansibe-playbook site.yml命令。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;七 启动和停止Ceph&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;7.1 概述&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;使用systemct1命令管理Ceph服务。systemctl命令可用于管理Ceph服务。有一个systemd命令控制所有Ceph守护进程，也存在独立的命令只控制特定类型的守护进程。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul yne-block-type=&quot;list&quot;&gt;&lt;li&gt;&lt;span&gt;ceph.target：启动或停止当前节点上的所有守护进程&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;ceph-type.target：启动或停止特定类型的所有守护进程&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;7.2 常见命令&lt;/h3&gt;
&lt;div yne-bulb-block=&quot;table&quot;&gt;
&lt;table&gt;&lt;colgroup/&gt;&lt;colgroup&gt;&lt;col width=&quot;272&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;215&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;131&quot;/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;18&quot;&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-0-0&quot;&gt;
&lt;p&gt;&lt;span&gt;命令&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-0-1&quot;&gt;
&lt;p&gt;&lt;span&gt;含义&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-0-2&quot;&gt;
&lt;p&gt;&lt;span&gt;备注&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-1-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;systemctl stop ceph-$type@$id&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-1-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;停止特定守护进程。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-1-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-2-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;systemctl stop ceph-osd.target&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-2-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;停止所有OSD守护进程。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-2-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-3-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;systemctl stop ceph.target&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-3-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;停止所有ceph守护进程。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-3-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-4-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;systemctl start ceph-$type@$id&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-4-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;启动特定守护进程。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-4-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-5-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;systemctl start ceph-osd.target&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-5-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;启动所有OSD守护进程。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-5-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-6-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;systemctl start ceph.target&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-6-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;启动所有ceph守护进程。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-6-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-7-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;systemctl restart ceph-$type@$id&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-7-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;重启特定守护进程。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-7-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-8-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;systemctl restart ceph-osd.target&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-8-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;重启所有OSD守护进程。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-8-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-9-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;systemctl restart ceph.target&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-9-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;重启所有ceph守护进程。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6659-1552810865089-cell-9-2&quot;/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h2 align=&quot;left&quot;&gt;八 管理Ceph认证&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;8.1 CephX认证&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在RHCS集群中，用户使用授权机制在客户端、应用程序和守护进程之间通信。为了安全地对这些用户进行身份验证，Ceph使用基于共享密钥的cephx身份验证协议。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：默认情况下，安装过程已启用cephx，因此RHCS集群需要所有客户机应用程序的身份验证和适当授权。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Ceph守护进程使用的帐户具有与关联守护进程相匹配的名称，如osd.1或mgr.serverc。Ansible Playbook在安装期间已创建它们。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用librados的客户端应用程序使用的帐户的名称以client..开头。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如，当将OpenStack与Ceph集成时，通常创建一个名为client.openstack专用帐户。此外，当Ansible部署Ceph对象网关时，它会创建一个名为client.rgw.hostname的专用帐户。最后，如果您正在librados之上开发自定义软件，还应该为它创建一个具有适当功能的特定帐户。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;管理员使用的帐户也以client开头的名称。，当运行ceph和rados等命令时使用。通常创建一个名为client.admin超级账户，具有允许它访问所有内容和修改集群配置的功能。默认情况下，在运行管理命令时，不使用--name或--id选项显式指定用户名。&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;8.2 key-ring密钥环&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;密钥环文件对于身份验证，必须使用Ceph用户名和包含用户密钥的密匙环文件配置客户机。Ceph用户需要这个key-ring文件来访问Red Hat Ceph存储集群。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Ceph会自动创建的每个用户帐户生成密匙环文件。若相应的客户端需要访问Ceph，需要将该文件复制到需要它的客户机系统或应用程序服务器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在这些客户机系统上，librados使用/etc/ceph/ceph.conf配置文件中的keyring参数来定位key-ring文件。它的默认值是/etc/ceph/$cluster.$name。keyring。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：当使用ceph，rados，rbd等命令的时候，可通过--id和--keyring指定相应的用户和密钥环，默认使用client.admin用户。若keyring保存在默认路径，可省略--keyring选项。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：指定用户的时候，不需要带client，只需要带name即可。ceph会自动加上client。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;8.3 权限管理&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;当创建一个新的用户帐户时，需要授予它权限来控制该用户在RHCS集群中被授权做什么。cephx中的权限称为功能，可以根据守护程序类型(mon、osd、mgr或mds)授予它们。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能的作用：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul yne-block-type=&quot;list&quot;&gt;&lt;li&gt;&lt;span&gt;限制对池、池的名称空间或一组基于应用程序标记的池中的数据的访问。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;授权RHCS集群中的守护进程彼此交互。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;常见权限：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul yne-block-type=&quot;list&quot;&gt;&lt;li&gt;&lt;span&gt;r：授予读权限。每个用户帐户应该至少具有对监视器的读访问权，以便能够检索粉碎地图。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;w：授予写权限。客户端需要写访问来存储和修改OSDs上的对象。对于manager(MGRs)，w授予启用或禁用模块的权利。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;x：授予执行扩展对象类的授权。这允许客户端对对象执行额外的操作，例如使用rados lock get设置锁或使用RBD list列出RBD映像。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;*：授予完全访问。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;class-read和class-write：是x的子集，主要在用于RBD的池中使用它们。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;8.4 常见授权操作&lt;/h3&gt;
&lt;div&gt;
&lt;ul yne-block-type=&quot;list&quot;&gt;&lt;li&gt;&lt;span&gt;授予权限&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;命令示例：ceph auth get-or-create client.formyapp1 \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mon 'allow r' \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;osd 'allow w'&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解释：创建formyapp1用户，并授予mon的读权限，osd的写权限。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cephx支持使用功能配置文件定义相关用户权限。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul yne-block-type=&quot;list&quot;&gt;&lt;li&gt;&lt;span&gt;限定权限&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;命令示例：ceph auth get-or-create client.forrbd \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mon 'profile rbd' \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;osd 'profile rbd'&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解释：使用rbd配置文件定义新的forrbd用户帐户的访问权限。客户机应用程序可以使用这个帐户使用RADOS块设备基于块访问Ceph存储。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul yne-block-type=&quot;list&quot;&gt;&lt;li&gt;&lt;span&gt;特定池权限限定&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;限制访问您应该限制用户OSD权限，以便用户只能访问他们需要的池。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;命令示例：ceph auth get-or-create client.formyapp2 \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mon 'allow r' \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;osd 'allow rw pool=myapp'&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解释：创建formyapp2用户，并限制仅对myapp池的读写访问，如果在配置功能时没有指定池，Ceph将在所有现有池上设置它们。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul yne-block-type=&quot;list&quot;&gt;&lt;li&gt;&lt;span&gt;特定对象限定&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;cephx还可以通过对象名称前缀来限制对obiects的访问。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;命令示例：ceph auth get-or-create client.formyapp3 \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mon 'allow r' \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;osd 'allow rw object_prefix pref'&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解释：限制只能访问名称以pref开头的对象。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul yne-block-type=&quot;list&quot;&gt;&lt;li&gt;&lt;span&gt;特定命名空间限定&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;通过名称空间。应用程序可以使用名称空间对池中的对象进行逻辑分组，然后可以将用户帐户限制为属于特定名称空间的对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;命令示例：ceph auth get-or-create client.designer \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mon 'allow r' \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;osd 'allow rw namespace=photos'&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul yne-block-type=&quot;list&quot;&gt;&lt;li&gt;&lt;span&gt;特定路径限定&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在Ceph文件系统(CephFS)中使用此方法限制对特定目录的访问。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;命令示例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ceph fs authorize cephfs client.wegdesigner /webcontent rw&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ceph auth get client.wegdesigner&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul yne-block-type=&quot;list&quot;&gt;&lt;li&gt;&lt;span&gt;特定命令限定&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;通过监控命令，将管理员限制为特定的命令列表。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;命令示例：ceph auth qet-or-create client.operator1 \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mon 'allow r,allow command &quot;auth get-or-create&quot;,allow command &quot;auth list&quot;'&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解释：创建operator1用户帐户，并将其访问权限限制为两个命令。&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;8.5 常见用户管理&lt;/h3&gt;
&lt;div yne-bulb-block=&quot;table&quot;&gt;
&lt;table&gt;&lt;colgroup/&gt;&lt;colgroup&gt;&lt;col width=&quot;206&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;206&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;206&quot;/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;18&quot;&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-0-0&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;命令&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-0-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;含义&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-0-2&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-1-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph auth list&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-1-1&quot;&gt;
&lt;p&gt;&lt;span&gt;列出用户及其功能&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-1-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-2-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph auth get client.admin&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-2-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;列出特定帐户的详细信息。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-2-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-3-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph auth print-key client.admin&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-3-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;列出特定用户的密钥环信息。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-3-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-4-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph auth export client.operator1 &amp;gt; ~/operator1.export&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; rowspan=&quot;2&quot; colspan=&quot;1&quot; data-cell-id=&quot;4231-1552816262001-cell-4-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;导出和导入用户帐户。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-4-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-5-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph auth import -i ~/operator1.export&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-5-2&quot;/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12.5&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-6-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph auth get-or-create client.application1 \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mon 'allow r' \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;osd 'allow rw' \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;- o /etc/ceph/ceph.client.application1.keyring&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-6-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;创建一个新用户帐户并生成其密钥。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-6-2&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;创建用户默认情况下将此键输出到stdout，因此建议加-o输入到具体文件，以便保存。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8.5&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-7-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph auth caps client.application1 \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mon 'allow r' \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;osd 'allow rw pool=mypool'&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-7-1&quot;&gt;
&lt;p&gt;&lt;span&gt;修改用户功能。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-7-2&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph auth caps命令覆盖所有现有功能，因此在使用此命令时，必须为所有守护进程指定完整的功能集，而不仅仅是要修改的守护进程。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-8-0&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph auth caps client,application1 osd ''&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-8-1&quot;&gt;
&lt;p&gt;&lt;span&gt;删除所有功能。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-8-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;使用一个空字符串删除所有功能。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-9-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph auth del client.application1&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-9-1&quot;&gt;
&lt;p&gt;&lt;span&gt;删除用户。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;4231-1552816262001-cell-9-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;建议同时手动删除key密钥环。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h2 align=&quot;left&quot;&gt;九 创建replicated类型池&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;9.1 创建复制存储池&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool create mytestpool 64    #CRUSH默认使用replicated_rule
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;9.2 开启rbd&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool application enable mytestpool rbd
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;9.3 确认验证&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool ls
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph df
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot; yne-bulb-block=&quot;image&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135344027-513213510.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;535&quot; height=&quot;147&quot; title=&quot;001&quot; alt=&quot;001&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135344411-643049622.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;9.4 改名并查看&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool rename mytestpool mypool
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool ls detail
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;9.5 其他参数调整&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool set mypool size 3               #修改size为3
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool ls detail
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot; yne-bulb-block=&quot;image&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135344762-1269095013.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;935&quot; height=&quot;86&quot; title=&quot;002&quot; alt=&quot;002&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135345103-745776087.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;9.6 上传文件测试&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ rados -p mypool -N system put testconf /etc/ceph/ceph.conf    #上传至mypool池的system命名空间
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ rados -p mypool put testkey /etc/ceph/ceph.client.admin.keyring
&lt;span&gt;  3&lt;/span&gt; [ceph@serverc ~]$ rados -p mypool -N system ls
&lt;span&gt;  4&lt;/span&gt; [ceph@serverc ~]$ rados -p mypool ls
&lt;span&gt;  5&lt;/span&gt; [ceph@serverc ~]$ rados -p mypool --all ls
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot; yne-bulb-block=&quot;image&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135345357-981487470.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;649&quot; height=&quot;146&quot; title=&quot;003&quot; alt=&quot;003&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135345627-778799952.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;9.7 删除池&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool delete mypool
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool delete mypool --yes-i-really-really-mean-it
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：见2.8。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;十 创建纠删码池&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;10.1 创建纠删存储池配置文件&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph osd erasure-code-profile ls                      #查看现有配置文件
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph osd erasure-code-profile get default           #查看默认配置文件相关参数
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot; yne-bulb-block=&quot;image&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135345862-234636211.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;474&quot; height=&quot;114&quot; title=&quot;004&quot; alt=&quot;004&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135346192-2090182240.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph osd erasure-code-profile set ceph125 k=3 m=2 crush-failure-domain=osd            #创建新的配置文件ceph125
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph osd erasure-code-profile get ceph125
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot; yne-bulb-block=&quot;image&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135346381-1011615904.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;741&quot; height=&quot;176&quot; title=&quot;005&quot; alt=&quot;005&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135346579-383309847.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;10.2 创建纠删存储池&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool create myecpool 64 64 erasure ceph125   #指定配置文件创建纠删码存储池
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;10.3 开启rgw&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool application enable myecpool rgw
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;10.4 确认验证&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool ls
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph df
&lt;span&gt;  3&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool ls detail
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot; yne-bulb-block=&quot;image&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135346814-1425391576.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;937&quot; height=&quot;211&quot; title=&quot;006&quot; alt=&quot;006&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135347950-1695699604.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;10.5 上传文件测试&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ rados -p myecpool put mytest /usr/share/dict/words    #作为mytest对象上传
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph df
&lt;span&gt;  3&lt;/span&gt; [ceph@serverc ~]$ rados -p myecpool get mytest /tmp/words                     #下载上传的mytest
&lt;span&gt;  4&lt;/span&gt; [ceph@serverc ~]$ diff /tmp/words /usr/share/dict/words                       #对比
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot; yne-bulb-block=&quot;image&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135348192-521474675.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;547&quot; height=&quot;179&quot; title=&quot;007&quot; alt=&quot;007&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135348438-1188627735.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h2 align=&quot;left&quot;&gt;十一 修改Ceph配置&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;11.1 查看当前特定参数&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph daemon mon.serverc config get mon_allow_pool_delete
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph daemon osd.0 config get debug_osd              #查看osd debug输出
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot; yne-bulb-block=&quot;image&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135348804-1842205975.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;598&quot; height=&quot;135&quot; title=&quot;008&quot; alt=&quot;008&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135349103-536366985.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;解释：第一个值1是/var/log/cephin中的日志文件的日志级别。第二个值5是内存日志的日志级别。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;11.2 部署节点修改相关配置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@servera ~]$ sudo cp /usr/share/ceph-ansible/group_vars/all.yml /usr/share/ceph-ansible/group_vars/all.yml.bak                                             #建议备份一次
&lt;span&gt;  2&lt;/span&gt; [ceph@servera ~]$ sudo vi /usr/share/ceph-ansible/group_vars/all.yml
&lt;span&gt;  3&lt;/span&gt; ceph_conf_overrides:
&lt;span&gt;  4&lt;/span&gt;   global:
&lt;span&gt;  5&lt;/span&gt;     mon_osd_allow_primary_affinity: 1
&lt;span&gt;  6&lt;/span&gt;     mon_clock_drift_allowed: 0.5
&lt;span&gt;  7&lt;/span&gt;     osd_pool_default_size: 2
&lt;span&gt;  8&lt;/span&gt;     osd_pool_default_min_size: 1
&lt;span&gt;  9&lt;/span&gt;     mon_pg_warn_min_per_osd: 0
&lt;span&gt; 10&lt;/span&gt;     mon_pg_warn_max_per_osd: 0
&lt;span&gt; 11&lt;/span&gt;     mon_pg_warn_max_object_skew: 0
&lt;span&gt; 12&lt;/span&gt;     mon_allow_pool_delete: true                                       #追加
&lt;span&gt; 13&lt;/span&gt;   osd:
&lt;span&gt; 14&lt;/span&gt;     debug_osd: 10                                                     #追加
&lt;span&gt; 15&lt;/span&gt;   client:
&lt;span&gt; 16&lt;/span&gt;     rbd_default_features: 1
&lt;span&gt; 17&lt;/span&gt;     debug_ms: 1                                                       #追加
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;解析：mon_allow_pool_delete: true允许删除pool，debug_osd: 10表示将OSD输入日志级别都设置为10，debug_ms: 1表示增加client操作日志的输出。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;11.3 重新刷新配置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ cd /usr/share/ceph-ansible/
&lt;span&gt;  2&lt;/span&gt; [student@servera ceph-ansible]$ ansible-playbook site.yml
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：若部署成功，则对于每个节点，前面的命令输出应该显示failed=0。在playbook执行过程中，可能会有许多非致命的警告，它们不会被当做“失败”任务，可以忽略。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;11.4 查看修改后的参数&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ sudo systemctl restart ceph-mon.target
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph daemon mon.serverc config get mon_allow_pool_delete
&lt;span&gt;  3&lt;/span&gt; [ceph@serverc ~]$ ceph daemon osd.0 config get debug_osd              #查看osd debug输出
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot; yne-bulb-block=&quot;image&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135349500-469944170.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;593&quot; height=&quot;128&quot; title=&quot;009&quot; alt=&quot;009&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135349742-1092082930.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;11.5 删除池测试&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool delete myecpool
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph osd pool delete myecpool myecpool --yes-i-really-really-mean-it
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot; yne-bulb-block=&quot;image&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135350000-1074363924.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;603&quot; height=&quot;78&quot; title=&quot;010&quot; alt=&quot;010&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135350213-1204868746.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：测试完毕后建议删除debug_osd: 10和debug_ms: 1配置（即还原），避免冗长不必要的日志输出。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;十二 Ceph用户及授权&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;12.1 创建用户&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph auth get-or-create client.docedit \
&lt;span&gt;  2&lt;/span&gt; mon 'allow r' \
&lt;span&gt;  3&lt;/span&gt; osd 'allow rw pool=mypool namespace=docs' \
&lt;span&gt;  4&lt;/span&gt; -o /etc/ceph/ceph.client.docedit.keyring
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：定义池和命名空间的时候，必须将pool写在前面。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph auth get-or-create client.docget \
&lt;span&gt;  2&lt;/span&gt; mon 'allow r' \
&lt;span&gt;  3&lt;/span&gt; osd 'allow r pool=mypool namespace=docs' \
&lt;span&gt;  4&lt;/span&gt; -o /etc/ceph/ceph.client.docget.keyring
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;12.2 确认验证&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph auth list
&lt;/pre&gt;&lt;/div&gt;
&lt;div align=&quot;center&quot; yne-bulb-block=&quot;image&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135350565-1516827035.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;441&quot; height=&quot;128&quot; title=&quot;011&quot; alt=&quot;011&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135350849-2001607281.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;12.3 复制相关key密钥环&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ scp /etc/ceph/ceph.client.docedit.keyring servera:/etc/ceph/
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ scp /etc/ceph/ceph.client.docget.keyring servera:/etc/ceph/
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;12.4 servera节点上传文件进行验证&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@servera ~]$ rados --id docedit -p mypool -N docs put testdoc /etc/services
&lt;span&gt;  2&lt;/span&gt; [ceph@servera ~]$ rados --id docget -p mypool -N docs get testdoc /tmp/test
&lt;span&gt;  3&lt;/span&gt; [ceph@servera ~]$ diff /etc/services /tmp/test
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;12.5 验证权限&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@servera ~]$ rados --id docget -p mypool -N docs put mywritest /etc/services    #验证docget用户对docs命名空间权限
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot; yne-bulb-block=&quot;image&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135351091-1882095349.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;652&quot; height=&quot;35&quot; title=&quot;012&quot; alt=&quot;012&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135351260-380985319.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;12.6 修改授权&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph auth caps client.docget \
&lt;span&gt;  2&lt;/span&gt; mon 'allow r' \
&lt;span&gt;  3&lt;/span&gt; osd 'allow rw pool=mypool namespace=docs,allow rw pool=docarchive'   #修改docget用户对mypool池中的docs名称空间和docarchive池进行写访问。
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：ceph auth caps命令覆盖所有现有功能，因此在使用此命令时，必须为所有守护进程指定完整的功能集，而不仅仅是要修改的守护进程。同时该命令可以授权当前还未创建的池的权限。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;12.7 再次测试&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@servera ~]$ rados --id docget -p mypool -N docs put mywritest /etc/services
&lt;span&gt;  2&lt;/span&gt; [ceph@servera ~]$ rados -p mypool -N docs ls
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot; yne-bulb-block=&quot;image&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135351583-1664208224.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;649&quot; height=&quot;67&quot; title=&quot;013&quot; alt=&quot;013&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190318135351979-880985723.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;12.8 删除用户及密钥环&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ rm /etc/ceph/ceph.client.docedit.keyring
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph auth del client.docedit
&lt;span&gt;  3&lt;/span&gt; [ceph@serverc ~]$ rm /etc/ceph/ceph.client.docget.keyring
&lt;span&gt;  4&lt;/span&gt; [ceph@serverc ~]$ ceph auth del client.docget
&lt;span&gt;  5&lt;/span&gt; [ceph@servera ~]$ rm /etc/ceph/ceph.client.docedit.keyring
&lt;span&gt;  6&lt;/span&gt; [ceph@servera ~]$ rm /etc/ceph/ceph.client.docget.keyring
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 18 Mar 2019 05:54:00 +0000</pubDate>
<dc:creator>木二</dc:creator>
<og:description>一 前期准备 1 [kiosk@foundation0 ~]$ ssh ceph@serverc #登录Ceph集群节点 2 [ceph@serverc ~]$ ceph health #确保集群状态</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/itzgr/p/10551766.html</dc:identifier>
</item>
<item>
<title>ASP.NET Core 基于JWT的认证(二) - WarrenRyan</title>
<link>http://www.cnblogs.com/WarrenRyan/p/10551630.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/WarrenRyan/p/10551630.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;上一节我们对 &lt;em&gt;Jwt&lt;/em&gt; 的一些基础知识进行了一个简单的介绍，这一节我们将详细的讲解,本次我们将详细的介绍一下 &lt;em&gt;Jwt&lt;/em&gt;在 &lt;em&gt;.Net Core&lt;/em&gt; 上的实际运用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;环境&quot;&gt;环境&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;.Net Core 2.2&lt;/li&gt;
&lt;li&gt;Visual Studio 2017&lt;/li&gt;
&lt;li&gt;ASP.NET Core WebAPI2&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在上一篇文章中，我们详细的介绍了&lt;em&gt;JWT&lt;/em&gt;的知识，这一次，我们将进行一次实战的训练，这一块将会有三个部分组成。分别是：&lt;br/&gt;1.如何使用微软官方提供的库实现&lt;em&gt;jwt&lt;/em&gt;&lt;br/&gt;2.如何自定义一个Jwt认证类&lt;br/&gt;3.使用非关系型数据库&lt;em&gt;Redis&lt;/em&gt;对&lt;em&gt;jwt&lt;/em&gt;信息的更新和替换&lt;br/&gt;当然，我在后期的文章中也会讲解如何使用&lt;em&gt;IdentityServer4&lt;/em&gt;去进行我们的权限控制。&lt;br/&gt;在本文中，你将会学到如何使用微软官方提供的库进行Jwt的签发、验证以及权限控制。我们使用的WebApi作为演示程序。&lt;/p&gt;
&lt;h3 id=&quot;配置信息的存储&quot;&gt;配置信息的存储&lt;/h3&gt;
&lt;p&gt;通常来说，我们会把数据库等等一系列的配置放在我们的appsettings.json中，我们也尝试着将我们的jwt私钥等存在其中。&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;  &quot;JwtSettings&quot;: {
    &quot;Issuer&quot;: &quot;admin&quot;,
    &quot;Audience&quot;: &quot;user&quot;,
    &quot;SecretKey&quot;: &quot;ahfuawivb754huab21n5n1&quot;
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当然你也可以把更多的配置放进去。&lt;br/&gt;然后我们用依赖注入的方法，将配置文件注入到我们的类对象中。我们创建一个JwtSetting类，并且在服务中进行注入。&lt;br/&gt;类对象&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;    public class JwtSettings
    {
        /// &amp;lt;summary&amp;gt;
        /// 证书颁发者
        /// &amp;lt;/summary&amp;gt;
        public string Issuer { get; set; }

        /// &amp;lt;summary&amp;gt;
        /// 允许使用的角色
        /// &amp;lt;/summary&amp;gt;
        public string Audience { get; set; }

        /// &amp;lt;summary&amp;gt;
        /// 加密字符串
        /// &amp;lt;/summary&amp;gt;
        public string SecretKey { get; set; }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注入&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;services.Configure&amp;lt;JwtSettings&amp;gt;(Configuration.GetSection(&quot;JwtSettings&quot;));
            JwtSettings setting = new JwtSettings();
            Configuration.Bind(&quot;JwtSettings&quot;, setting);
            JwtHelper.Settings = setting;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;想必这里的代码大家肯定是看的轻车熟路了，非常的简单。&lt;br/&gt;接下来我们对Jwt的签发制作一个&lt;em&gt;JwtHelper&lt;/em&gt;类。&lt;/p&gt;
&lt;h3 id=&quot;jwt的签发&quot;&gt;Jwt的签发&lt;/h3&gt;
&lt;p&gt;这一块，你可以上网去查看&lt;a href=&quot;%22http://www.cnblogs.com/savorboard/p/aspnetcore-identity.html%22&quot;&gt;权限模型&lt;/a&gt;的一些介绍。&lt;/p&gt;
&lt;p&gt;这里我简要的做一个介绍：&lt;br/&gt;&lt;em&gt;Claim&lt;/em&gt;是什么呢，他就是一个用于描述一个具体的实体对象的一些描述性的字段。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ClaimsIdentity&lt;/em&gt;就是用于指明Claim中所存储的内容的合集，比如我们的身份证，年龄、性别、身份证号码等就组成了我们的身份证。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ClaimsPrincipal&lt;/em&gt;我们称为“证件当事人”，也就是我们之前声明的东西的一个合计，类似，比如说你可能有驾照、身份证、医保卡等等，而所持有这些的人就叫做&lt;em&gt;ClaimsPrincipal&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;一些代码是一个普通的结构，大家可以按照这种模板进行修改模型，从而创建自己的jwt结构&lt;/p&gt;
&lt;p&gt;代码:&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;    public class JwtHelper
    {
        private static JwtSettings settings;
        public static JwtSettings Settings { set { settings = value; } }
        public static string create_Token(TokenPayload user)
        {
            //这里就是声明我们的claim
            var claims = new Claim[] {
                        new Claim(ClaimTypes.Name, user.Name),
                        new Claim(ClaimTypes.Role, user.Role),
                        new Claim(ClaimTypes.Sid,user.Sid.ToString())
                    };
            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(settings.SecretKey));
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                issuer: settings.Issuer,
                audience: settings.Audience,
                claims: claims,
                expires: DateTime.Now.AddDays(1),
                signingCredentials: creds);
            var Token = new JwtSecurityTokenHandler().WriteToken(token);
            return Token;
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;jwt认证&quot;&gt;JWT认证&lt;/h3&gt;
&lt;p&gt;在这里，你可以使用我们下一节所遇到的自定义认证，不过我们还是先学着使用我们最为普通的官方方法。具体的操作非常简单，只需要在我们的容器service中注入一下就可以了。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
            .AddJwtBearer(config =&amp;gt;
            {
                config.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,//是否验证Issuer
                    ValidateAudience = true,//是否验证Audience
                    ValidateLifetime = true,//是否验证失效时间
                    ValidateIssuerSigningKey = true,//是否验证SecurityKey
                    ValidAudience = setting.Audience,//Audience
                    ValidIssuer = setting.Issuer,//Issuer，这两项和前面签发jwt的设置一致
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(setting.SecretKey))//拿到SecurityKey
                };
            });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样，就完成了我们的jwt认证过程。&lt;br/&gt;如果我们需要从token中取出我们的信息也非常的简单，利用依赖注入，使用&lt;br/&gt;&lt;code&gt;C# services.AddTransient&amp;lt;IGetInfoFromToken, GetInfoFromToken&amp;gt;();&lt;/code&gt;&lt;br/&gt;自己创建号这两个接口和类，对httpcontext进行截断，从httpcontext.user中就可以直接取出我们需要的payload。当然也可以使用中间件的方式，这里我们就不再用篇幅进行叙述了。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;如果我的文章帮到了你，请帮忙点个赞，点个关注。谢谢！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;4.4210526315789&quot;&gt;
&lt;p&gt;我的掘金:&lt;a href=&quot;https://juejin.im/user/58ba1512570c3500621152cc&quot;&gt;WarrenRyan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我的简书:&lt;a href=&quot;https://www.jianshu.com/u/00635b033ab4&quot;&gt;WarrenRyan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎关注我的博客获得第一时间更新 &lt;a href=&quot;https://blog.tity.online&quot; class=&quot;uri&quot;&gt;https://blog.tity.online&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我的Github:&lt;a href=&quot;https://github.com/StevenEco&quot;&gt;StevenEco&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我的博客园:&lt;a href=&quot;https://www.cnblogs.com/WarrenRyan/&quot;&gt;WarrenRyan&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 18 Mar 2019 05:24:00 +0000</pubDate>
<dc:creator>WarrenRyan</dc:creator>
<og:description>ASP.NET Core 基于 JWT 的认证(二) 上一节我们对 Jwt 的一些基础知识进行了一个简单的介绍，这一节我们将详细的讲解,本次我们将详细的介绍一下 Jwt 在 .Net Core 上的实</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/WarrenRyan/p/10551630.html</dc:identifier>
</item>
<item>
<title>从一张图开始，谈一谈.NET Core和前后端技术的演进之路 - 溪源More</title>
<link>http://www.cnblogs.com/xiyuanMore/p/10551518.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiyuanMore/p/10551518.html</guid>
<description>&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　邹溪源，李文强，来自长沙.NET技术社区&lt;/p&gt;
&lt;h3 id=&quot;一张图&quot;&gt;一张图&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;2019年3月10日，在长沙.NET 技术社区组织的技术沙龙《.NET Core和前后端分离那些事儿》上，我们曾经试图通过一系列抽丝剥茧的过程来引导大家在这条基于.NET Core的前后端分离有关的技术路线上持续发散，由于各种原因未能成功，因此，技术社区执行主席，李文强同学整理了一张图，并由溪源以专刊的形式来描述他所认为的技术演进之路。&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201903/191302-20190317223620211-436552126.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;file:///C:/Users/Merry/Documents/My%20Knowledge/temp/049eca8d-e059-4711-886e-09236a52362d/128/index_files/e298cdfe-d638-4f22-8c0f-6f4327106bd8.png&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;em&gt;这张图涉及到的知识点，涵盖了目前前后端技术近五年来发展的方方面面，作者期望通过这一张图，对当前技术发展方向进行一些简单的分析，并希望能通过与读者们进一步交流，梳理出一些能够让更多人快速参与到.NET Core的学习过程来的技术资料，期待通过大家的共同努力，能够为促进.NET 社区的发展做成一些贡献。&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;em&gt;本文的吐槽专用地址为，溪源的博客园&lt;a href=&quot;https://www.cnblogs.com/xiyuanMore/&quot;&gt;https://www.cnblogs.com/xiyuanMore/&lt;/a&gt;，欢迎大家来拍砖。&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;二，背景，前后端分离，好聚好散，你好我也好&quot;&gt;二，背景，前后端分离，好聚好散，你好我也好&lt;/h3&gt;
&lt;p&gt;HTTP协议是互联网技术得以飞速发展的基础，在这个起源于上世纪六十年代的古老传输协议，到今天已经走过了六十个年头，并深深的影响了时代。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;到目前为止的新时代，对HTTP协议的应用可以说无处不在了，而面向bs的应用作为后起之秀，经历了30年的发展，终于主宰了世界。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;在过去的若干年间类似于php，ASP.NET ，这种技术一度成为时代的主旋律。这些脚本化的技术，希望通过降低开发者的学习成本，实现开发效率的提高，实际上它看上去也做到了。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;但是由于这种技术存在许多问题，例如，在 ASP.NET Web 窗体页面上 C# 代码和 HTML 的混合方式使其难以构建单元测试。如果无法测试，久而久之，大型网站的维护和修改工作会变得更加困难。如果您确实创建了测试，这些测试大部分是运行 UI 的功能测试 — 即使是在今天，这也是一种脆弱的测试构建法。对网页的任何更改都很可能会中断该页面的所有测试。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;随着技术的演进，发展出了服务端渲染的方式，例如ASP.NET MVC。用户请求网页后，后端先调用数据库，获得数据之后，将数据和页面元素进行拼装，组合成完整的 html 页面，再直接返回给浏览器，以便用户浏览。 &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;然而，由于随着开发者职责分工的进一步细化，最终于是，开发者们将资源的粒度进一步拆分，后端的归后端，前端的归前端，你走阳光道，我走独木桥，前端通过ajax调用，后端则通过restful api来提供数据。优秀的开发者们互相配合，终于打造了互联网时代的高效的开发效率。&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201903/191302-20190317223817157-1447332073.jpg&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;从选择前后端分离技术开始，前端与后端看似走上了不同的发展道路，但优秀的开发者从来都不甘寂寞，他们能服从这种古老的秩序么？ &lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;三，大前端的前身今世&quot;&gt;三，大前端的前身今世&lt;/h3&gt;
&lt;p&gt;前几天看到的消息（参考资料1），著名的开源组织Node.js基金会和JS基金会宣布合并，成立OpenJS基金会，通过提供一个中立的组织来托管项目并协作资助有益于整个生态系统的活动，从而促进 JavaScript 和 Web 生态系统的健康发展，为推广技术而努力。目标是让项目轻松、直接地加入 OpenJS 基金会并利用其技术和社区治理经验。托管项目将是基金会的主要关注点，但 OpenJS 基金会也会将其能力扩展到非托管项目。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;JavaScript、Node.js和前端技术，成为移动互联网时代的最闪亮的一颗星，是偶然或是必然？。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201903/191302-20190317223844567-1861461894.png&quot; alt=&quot;&quot; width=&quot;795&quot; height=&quot;345&quot;/&gt;&lt;br/&gt;曾几何时，随着前后端技术的逐渐分野，Javascript作为网页开发过程中的重要补充，为数据数据交互过程提供支持，似乎形成了一种定则或者说是一种秩序。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;然而，极客们不是这样想的。Ryan Dahl是Node.js的创始人，他认为，JavaScript是一种优秀的技术，但是却只能用于前后端数据交互过程中的中间媒介，运行在网页前端，这显然是大材小用。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;大家都是语言，凭什么还要分高低贵贱之分？&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;他一直想寻找一种打破旧秩序的机会，而谷歌开源组件v8引擎给了他机会。利用v8引擎，他开发了Node.js，并很快被一大批优秀企业奉为圭臬，众人拾柴火焰高，有了大企业的参与，搞起事情来果然与众不同，一时间成为了炙手可热的新兴技术。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;与此同时，伴随着前后端分离而来的，还有一大波各种风格的前端UI架构，那些内心对美充满了渴望的优秀的前端工程师们利用有限的资源，开发出类似于bootstrap，layui等在内的各种前端框架，让前端成为了美的代名词。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Node.js与那么多前端的UI框架们碰到一起，就是肉体和灵魂的完美融合，打造出来的，已经不在是昔年那个空有外表、必须依赖别人提供力量的体弱多病的林妹妹，而是一个骨骼健硕，充满战力的女汉子。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;而昔日仅仅只能开发界面，对于数据的话语权，可以说完全没有，只能听从后端工程师的调排的前端工程师们终于可以获得一次翻身的机会，谁愿意让机会从指尖滑过，他们用自己的双手，硬生生的拉开了这场大前端时代的帷幕。&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;一时间，正可谓百花齐放，百家争鸣，前端能够干的事情也越来越多，甚至于多少年以来前端工程师鲜有涉及的领域，也可以成为前端工程师们挥毫泼墨的精彩画卷。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;无论是后端的专属领域，数据和数据库，大前端开发者都可以独立完成，而是还不仅仅局限于关系型数据库，或者非关系型数据库，限制前端工程师们操作数据的一个个壁垒，早就成为纸糊的墙纸。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;还是持续集成技术的实践。前端工程化，让前端从单个网站中分离出来，成为一个更加灵活和安全性更高的应用体系，高性能，稳定性，高可用性，高可维护性，这些以往用来形容后端技术的词语，也可以应用在大前端工程师开发的杰作之中。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;或者是设计模式和架构思想，我还记得两年前有人评论说，前后端工程师，以后最大的区别，大概是架构思想吧。然而，到了今天，设计模式和架构思想，也成为了前端工程师们政治正确的一个标杆，例如MVVM和AOP等，都被前端开发者们玩得滚瓜烂熟。前端三大框架，angularjs，react，vue.js格外引人注目，靠着独特的设计，一时间成功的占领了与一切前端有关的技术领域，不管是网页、跨平台的app、甚至桌面程序，这些对大前端开发者来说都不是难事。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;为什么前端会迎来如此绚烂的新时代呢？因为没有爹，没有爹就意味着没有历史的包袱，如同一个黑洞一般，包容和吸取一切可以吸收的精华。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;四，大后端的是是非非&quot;&gt;四，大后端的是是非非&lt;/h3&gt;
&lt;p&gt;相对于前端而言，曾经一度，后端语言的发展可谓是波澜不惊，不悲不喜来形容。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;这边的Java，自从被甲骨文收入囊中之后，开始了漫长的挤牙膏的过程，虽然保持着一年最少一更最多两更的节奏，但是却后期的版本似乎并没有太多值得称赞的新特性。然而，由于其精良的设计理念和开源的优越性，却意外的赶上了互联网时代和移动互联网时代两波大风口，造就了前所未有的辉煌。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;而墙内的巨头微软，沉迷于软件公司不可自拔，刚收了诺基亚才没多久就创下大几十亿美元的资产减记。唯一值得称赞的或许是游戏市场，大概一度，微软或许想甚至把游戏当做了翻身的唯一机会，然而，颓势一旦开始就难以逆转，在战线拉得太开，让微软腹背受敌，这也直接影响了.NET 技术的发展。.NET 是微软于2000年推出来的技术，曾经试图通过.NET 称霸互联网市场，曾经一度大杀四方，让对手毫无招架之力。但是封闭和对于操作系统的过于依赖，最终成为一个美丽的遗憾。这么优秀的技术框架，逐渐衰弱，成为了强者们的垫脚石。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201903/191302-20190317223856375-288869173.jpg&quot; alt=&quot;&quot; width=&quot;535&quot; height=&quot;477&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在后端语言市场，GO语言的兴起是一个变数。他来自于谷歌，当时2009年Sun经营不善，选择打包出售时谷歌错过了下手的时机，让Sun落入甲骨文之手。而错失Sun的代价对谷歌来说很惨烈，一连串的知识产权官司让谷歌深受打击，于是谷歌痛定思痛，开发出服务端新兴语言体系GO语言。谷歌不愧为软件巨头，GO语言这个专门为互联网而设计的优越语言，性能优越，功能强大，成为了后端市场的搅局者。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;前有Java拦路虎，后有谷歌大灰狼，微软以前足以跟Java分庭抗礼的半壁江山，眼看即将十不足一，微软就这么甘心把自己的奶酪献给别人么？&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;微软需要一场秩序的变革，究竟谁能来拯救他？谁来当这个白衣骑士？&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;一位根正苗红的微软人，善于hit refresh的印度裔移民萨提亚·纳德拉被推举了出来。过去若干年，他一直在微软核心部门，负责了许多拳头产品的研发，这一次，他要负责的项目，既不toC，也不toB，而是负责将微软从泥坑中拉出来。他没有让投资者和微软、用户失望，他做到了。从战略的宏观层面，提出了云为先的战略，获得了投资者的支持，又从战术层面，推出了全新的.NET Core，成为了后端开发市场的巨大变数。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;br/&gt;&lt;img src=&quot;file:///C:/Users/Merry/Documents/My%20Knowledge/temp/049eca8d-e059-4711-886e-09236a52362d/128/index_files/0.7439181957369634.png&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/191302/201903/191302-20190317223906850-262049109.png&quot; alt=&quot;&quot; width=&quot;616&quot; height=&quot;411&quot;/&gt;&lt;br/&gt;.NET Core这种优秀的技术，首先继承了来自他的父辈.NET Framework一般优秀的设计理念，又兼具他的对手们那些开源，开放灵活的个性，同时又天生具备高性能和跨平台的技能，成为后端市场一种新的选择。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;时至今日，.NET Core的应用前景已经十分可观，无论是微服务，还是容器化，弹性架构等新兴的分布式场景，还是大数据，人工智能，自然语言等时髦领域，它同样可以驾驭。而对于企业而言，同样可以使用.NET Core来开展DevOPS实践，为企业的进一步腾飞插上无穷的想象力。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;到目前为止，.NET Core即将发布3.0版，有哪些新特性值得期待？我们来看一下吧。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;0，NET Core 3实现了.NET 标准2.1。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;1、生成可执行文件。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;2、生成依赖项的副本&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;3、本地工具&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;4、支持WPF与Windows Froms&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;5、内建快速的JSON解析器&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;6、索引和范围&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;7、异步流&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;8、类型：SequenceReader 序列读取9、类型：MetadataLoadContext 元素据负载描述表&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;10、支持Linux 上的 TLS 1.3 和 OpenSSL 1.1.1&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;11、AES-GCM 和 AES-CCM加密算法支持&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;12、加密密钥的导入导出&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;13、Linux上支持串口&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;14、优化了很多现有功能&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;15、分层编译&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;16、Linux的ARM64&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;限于篇幅，不便全文转载，具体请查看参考资料2。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;有史以来，微软迎来了最开放的时期。不仅仅造就了市值的历史最高，更是执着于技术的发展和投入，对于.NET 开发者而言，同样迎来了新的机会。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;五，结语，谁能独步武林？&quot;&gt;五，结语，谁能独步武林？ &lt;/h3&gt;
&lt;p&gt;随着互联网时代冬天的到来，未来或许将迎来几年平静的沉淀期，然而哪怕就算是看似平静的格局，同样也会出现革命者。尤其是开发语言，从来就没有什么稳定不变的江湖地位可言。在今天看来，似乎Java一家独大的局面已经成为定势，难道这种局面就这样了吗？&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;从前后端一体化，到前后端分离，从Node.js的崛起于极客圈，到GO，NET Core孕育于巨头之中，新时代，从来没有谁能独步武林。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;未来，谁都有机会。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;是时候刷新自己，与新技术共同进步了！！ &lt;/p&gt;
&lt;h3 id=&quot;六，附件，一些可用的学习路线图或资料&quot;&gt;六，附件，一些可用的学习路线图或资料 &lt;/h3&gt;
&lt;p&gt;1，ASP.NET Core学习路线图。&lt;a href=&quot;HTTPs://github.com/MoienTajik/AspNetCore-Developer-Roadmap%20&quot; target=&quot;_blank&quot;&gt;HTTPs://github.com/MoienTajik/AspNetCore-Developer-Roadmap &lt;/a&gt;&lt;br/&gt;2，来自广西的.NET Core爱好者陈蛇和他的小伙伴们参与收集和翻译的资料&lt;a href=&quot;HTTP://www.iotxfd.cn/&quot; target=&quot;_blank&quot;&gt;HTTP://www.iotxfd.cn/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3，张善友老师整理的Ocelot学习资料&lt;a href=&quot;https://www.cnblogs.com/shanyou/p/10363360.html%20&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/shanyou/p/10363360.html &lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;七，参考资料&quot;&gt;七，参考资料&lt;/h3&gt;
&lt;p&gt;1、&lt;a href=&quot;https://www.cnbeta.com/articles/tech/826737.htm&quot;&gt;https://www.cnbeta.com/articles/tech/826737.htm&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; 开源中国新闻《Node.js 基金会与 JS 基金会合并为 OpenJS 基金会》&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;2、https://www.ithome.com/0/398/577.htm &lt;span class=&quot;Apple-converted-space&quot;&gt; IT之家新闻 &lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;br/&gt;3、&lt;a href=&quot;https://mp.weixin.qq.com/s/rHiMpNregBNCbpCqm3ykdA&quot;&gt;https://mp.weixin.qq.com/s/rHiMpNregBNCbpCqm3ykdA&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; DotNET跨平台公众号，《微软开源故事 | 开启 .NET 开源革命》 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;【版权声明】 &lt;/p&gt;
&lt;p&gt;作品来自于长沙.NET技术社区成员【邹溪源】，有兴趣了解长沙.NET技术社区详情，请关注公众号【DotNET技术圈】,作品采用知识共享署名-非商业性使用-相同方式共享4.0 国际许可协议进行许可。&lt;em id=&quot;__mceDel&quot;&gt; &lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 18 Mar 2019 04:56:00 +0000</pubDate>
<dc:creator>溪源More</dc:creator>
<og:description>从一张图开始，谈一谈.NET Core和前后端技术的演进之路 邹溪源，李文强，来自长沙.NET技术社区 一张图 2019年3月10日，在长沙.NET 技术社区组织的技术沙龙《.NET Core和前后端</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiyuanMore/p/10551518.html</dc:identifier>
</item>
</channel>
</rss>