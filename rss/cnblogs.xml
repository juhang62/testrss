<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>常见函数之分组函数案例 - 自律即自由-</title>
<link>http://www.cnblogs.com/deyo/p/13237594.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/deyo/p/13237594.html</guid>
<description>&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#二、分组函数
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
功能：用作统计使用，又称为聚合函数或统计函数或组函数

分类：
sum求和、avg平均值、max最大值、min最小值、count计算个数

特点:
1.sum、avg一般用于处理数值型
max、min、count可以处理任何类型
2.以上分组函数都忽略null值
3.可以和distinct搭配去重的运算
4、COUNT函数的单独介绍
一般使用count(*) 统计函数
5、和分组函数一同查询的字段 要求是group BY 后的字段
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

#&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、简单的使用
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;SUM&lt;/span&gt;&lt;span&gt;(salary)
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;AVG&lt;/span&gt;&lt;span&gt;(salary)
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;MIN&lt;/span&gt;&lt;span&gt;(salary)
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;MAX&lt;/span&gt;&lt;span&gt;(salary)
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;COUNT&lt;/span&gt;&lt;span&gt;(salary)
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;SUM&lt;/span&gt;(salary) 和,&lt;span&gt;avg&lt;/span&gt;(salary) 平均,&lt;span&gt;MAX&lt;/span&gt;(salary) 最高,&lt;span&gt;MIN&lt;/span&gt;(salary) 最低,&lt;span&gt;COUNT&lt;/span&gt;&lt;span&gt;(salary) 个数
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

#&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.参数支持哪些类型
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;SUM&lt;/span&gt;(last_name),&lt;span&gt;avg&lt;/span&gt;(last_name) &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;COUNT&lt;/span&gt;(last_name) &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;MAX&lt;/span&gt;(last_name) &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;MAX&lt;/span&gt;(hiredate),&lt;span&gt;MIN&lt;/span&gt;(hiredate) &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

#&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;、忽略null

&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;SUM&lt;/span&gt;(commission_pct),&lt;span&gt;avg&lt;/span&gt;(commission_pct),&lt;span&gt;SUM&lt;/span&gt;(commission_pct)&lt;span&gt;/&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;min&lt;/span&gt;(commission_pct),&lt;span&gt;max&lt;/span&gt;(commission_pct) &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

#&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;、和distinct搭配
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;SUM&lt;/span&gt;(&lt;span&gt;DISTINCT&lt;/span&gt; salary),&lt;span&gt;SUM&lt;/span&gt;(salary) &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;COUNT&lt;/span&gt;(&lt;span&gt;DISTINCT&lt;/span&gt; salary),&lt;span&gt;COUNT&lt;/span&gt;(salary) &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

#&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;、count函数的详细介绍
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;COUNT&lt;/span&gt;(salary) &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

#统计函数
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;COUNT&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;) &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;COUNT&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

#效率：
MYISAM 存储引擎下， &lt;/span&gt;&lt;span&gt;count&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;&lt;span&gt;)的效率高
INNODB 存储引擎下，&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;)和count(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)的效率差不多

#&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;、和分组函数一同查询的字段有限制
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;avg&lt;/span&gt;(salary),employee_id &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;

#&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.查询公司员工工资的最大值，最小值，平均值，总和
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;MAX&lt;/span&gt;(salary) mx,&lt;span&gt;MIN&lt;/span&gt;(salary) mi,&lt;span&gt;round&lt;/span&gt;(&lt;span&gt;avg&lt;/span&gt;(salary),&lt;span&gt;2&lt;/span&gt;) av,&lt;span&gt;SUM&lt;/span&gt;&lt;span&gt;(salary) sm
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;
#&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.查询员工表中的最大入职时间和最小入职时间的相差天数（DIFFRENCE）
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;datediff&lt;/span&gt;(&lt;span&gt;max&lt;/span&gt;(hiredate),&lt;span&gt;MIN&lt;/span&gt;&lt;span&gt;(hiredate)) diffrence
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees;
#&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.查询部门编号为90的员工个数
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;Count&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; employees
&lt;/span&gt;&lt;span&gt;WHERE&lt;/span&gt; department_id&lt;span&gt;=&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 05 Jul 2020 00:49:00 +0000</pubDate>
<dc:creator>自律即自由-</dc:creator>
<og:description>#二、分组函数 /* 功能：用作统计使用，又称为聚合函数或统计函数或组函数 分类： sum求和、avg平均值、max最大值、min最小值、count计算个数 特点: 1.sum、avg一般用于处理数值</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/deyo/p/13237594.html</dc:identifier>
</item>
<item>
<title># Python设计模式 单例模式 - 早睡虫莽</title>
<link>http://www.cnblogs.com/zaoshuimang/p/13237520.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zaoshuimang/p/13237520.html</guid>
<description>&lt;h3 id=&quot;什么是单例模式&quot;&gt;什么是单例模式?&lt;/h3&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;单例模式是一种写程序的方式,用单例模式设计的类,无论你去实例化多少次,得到的都是同一个实例,一般我们设计的类每次实例化都会生成不同的实例,但是单例模式就是反其道而行之,就像下面这样:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cisco-test-images.oss-cn-shenzhen.aliyuncs.com/WindowsTerminal_20_06_28_09_251_531.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;上图中的ClassA和ClassB 都是采用的 单例设计模式,而ClassC没有采用单例设计模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;我们可以清晰的看到 ClassA的两个不同的实例在内存中的地址是相同的,也就是说两次实例化得到的对象是同一个对象,ClassB和ClassA也是一样的,因为都采用了单例设计模式, 而ClassC因为没有采用单例设计模式所以他的两个实例对象指向不同的内存地址,也就是说两次实例化得到的是两个不同的对象.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;为什么需要单例模式&quot;&gt;为什么需要单例模式?&lt;/h3&gt;
&lt;blockquote readability=&quot;32.5&quot;&gt;
&lt;p&gt;要弄清楚为什么需要单例模式, 首先需要知道单例模式提供了哪些优秀的特性?&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;单例模式提供的最为优秀的特性就是:单例模式可以允许你在程序的任何地方访问某个特定的对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过单例设计模式, 你可以在不定义全局变量的情况下,在程序的任何地方访问你所指定的对象,单例模式所提供的功能和全局变量是一样的, 但是通过单例模式设计, 你就可以在无需牺牲代码可读性和安全性的前提下完成和全局变量完全一样的功能. 单例模式吸收了全局变量的优点摒弃了全局变量的缺点,是替代可恶全局变量不二的选择.&lt;/p&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;在上面的例子中我们可以看到无论实例化多少次ClassA得到的都是同一个对象, 如果这个类处于一个比较大的工程中,在这个工程中的任何位置实例化ClassA得到的都是同一个对象,这不就是全局变量吗, 但是和全局变量不同的是通过单例模式产生对象的代码更加的易读,而且这种面向对象的编程方式可以确保ClassA所产生的对象只能被对象自身的方法所操作, 这样就更加的安全, 而且你可以通过获取实例的方法对返回对象的行为进行更多的限制.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么需要单例模式? 本质上是因为人们需要全局变量,需要一个更加好用更加安全的全局变量, 单例模式的出现解决了全局变量的现有问题, 所以人们才需要单例模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;单例模式和全局变量的区别&quot;&gt;单例模式和全局变量的区别?&lt;/h4&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;单例模式像极了全局变量, 但是单例模式毕竟不是实现全局变量, 除了上述所说的异同点之外, 通过单例模式产生的对象和全局变量还有一个明显的区别就是全局变量一旦定义就绝对不会再发生改变, 但是单例模式虽然说每次返回的都是一个固定的对象, 但这个固定的对象还是可以通过单例类自身的一些方法去更改的,所以单例模式产生的对象和全局变量比起来只能说是相对固定的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;单例模式如何实现&quot;&gt;单例模式如何实现?&lt;/h3&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;任何一门语言要想实现单例模式,可能都有很多的实现方法,但是实现思路大同小异,肯定都是在第一次生成实例的时候就直接把实例给存储到某个地方,然后在下一次实例化的时候直接返回这个事先被存储起来的实例,而不是重新去实例化返回一个新的实例.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;基于装饰器的实现&quot;&gt;基于装饰器的实现&lt;/h4&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Python实现单例模式一个比较优雅的实现方式就是通过装饰器去实现,如下所示:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Python&quot;&gt;def singleton(cls):
    instances = {}
    def getinstance(*args,**kwargs):
        if cls not in instances:
            instances[cls] = cls(*args,**kwargs)
        return instances[cls]
    return getinstance

@singleton
class ClassA:
    pass

@singleton
class ClassB:
    pass

class ClassC:
    pass

aa=ClassA()
aaa=ClassA()

bb=ClassB()
bbb=ClassB()

cc=ClassC()
ccc=ClassC()

&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;上面的例子我们可以看到singleton是一个装饰器函数, 通过闭包的原理让其内部的 instances 变量的生命周期和全局变量等同,然后把被装饰的类第一次实例化生成的对象直接存储在instances中,在取对象的时候直接从在instances字典中找到事先存储好的对象返回,就是通过这样的方式实现单例的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;单例模式的实现方式还有很多种: 比如通过类属性实现, 通过元类实现等多种方式, 甚至每一种实现可能都有自己特定的应用场景, 但是我觉得通过装饰器实现最为优雅, 本着少就是多的原则, 其他的实现方式我就不再赘述, 如果对其他的实现方式感兴趣可以在&lt;code&gt;早睡蟒&lt;/code&gt;公众号后台回复&lt;code&gt;跬蟒&lt;/code&gt;加我微信(备注好公司岗位)交流沟通.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果感觉本篇内容还不错,微信的朋友请点个在看和赞,其他平台的朋友可以(近距离)扫描下方的二维码关注我的公众号 &lt;code&gt;早睡蟒&lt;/code&gt;更多优质原创无广告内容等你来看.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cisco-test-images.oss-cn-shenzhen.aliyuncs.com/test.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 04 Jul 2020 22:17:00 +0000</pubDate>
<dc:creator>早睡虫莽</dc:creator>
<og:description>什么是单例模式? 单例模式是一种写程序的方式,用单例模式设计的类,无论你去实例化多少次,得到的都是同一个实例,一般我们设计的类每次实例化都会生成不同的实例,但是单例模式就是反其道而行之,就像下面这样:</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zaoshuimang/p/13237520.html</dc:identifier>
</item>
<item>
<title>GAN网络从入门教程（一）之GAN网络介绍 - 段小辉</title>
<link>http://www.cnblogs.com/xiaohuiduan/p/13237486.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuiduan/p/13237486.html</guid>
<description>&lt;h2 id=&quot;gan网络从入门教程（一）之gan网络介绍&quot;&gt;GAN网络从入门教程（一）之GAN网络介绍&lt;/h2&gt;
&lt;p&gt;稍微的开一个新坑，同样也是入门教程（因此教程的内容不会是从入门到精通，而是从入门到入土）。主要是为了完成数据挖掘的课程设计，然后就把挖掘榔头挖到了GAN网络这里来了。当然，我也是新手上路，如有任何问题，欢迎在评论区留言。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;生成式对抗网络是20年来机器学习领域最酷的想法。 ——Yann LeCun&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;gan网络概要&quot;&gt;GAN网络概要&lt;/h2&gt;
&lt;p&gt;GAN网络全称&lt;strong&gt;generative adversarial network&lt;/strong&gt;，翻译为生成式对抗网络，是一种机器学习方法。由&lt;code&gt;Ian J. Goodfello&lt;/code&gt; 等人于2014年在&lt;a href=&quot;https://arxiv.org/pdf/1406.2661.pdf&quot;&gt;Generative Adversarial Nets&lt;/a&gt; 论文中提出。其中在GAN网络中，有两个模型——生成模型（ generative model G），判别模型（discriminative model D）。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;a generative model G that captures the data distribution, and a discriminative model D that estimates the probability that a sample came from the training data rather than G&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们以生成图片为例子，本教程的最终的目标是实现使用GAN网络生成动漫头像。&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;G就是一个生成图片的网络，它接受一个随机的噪声&lt;span class=&quot;math inline&quot;&gt;\(z\)&lt;/span&gt;，然后通过这个噪声生成图片，生成的数据记做&lt;span class=&quot;math inline&quot;&gt;\(G(z)\)&lt;/span&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;D是一个判别网络，判别一张图片是不是“真实的”（是否是捏造的）。它的输入参数是&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;代表一张图片，输出&lt;span class=&quot;math inline&quot;&gt;\(D(x)\)&lt;/span&gt;代表&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;为真实图片的概率，如果为1，就代表绝逼是真实的图片，而输出为0，就代表不可能是真实的图片。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在训练的过程中，&lt;strong&gt;生成网络G&lt;/strong&gt;的目标就是生成假的图片去骗过&lt;strong&gt;判别网络D&lt;/strong&gt;，而&lt;strong&gt;判别网络D&lt;/strong&gt;的目标就是能够分辨出某一张图片是不是由&lt;span class=&quot;math inline&quot;&gt;\(G\)&lt;/span&gt;生成的。这就变成了一个博弈的过程。同时G和D的能力也在训练的过程中逐渐提高。在最理想的情况下， 则就是&lt;span class=&quot;math inline&quot;&gt;\(D(G(z)) = 0.5\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;看到一个比较形象的说法：一个&lt;em&gt;生成器&lt;/em&gt;（“艺术家”）学习创造看起来真实的图像，而&lt;em&gt;判别器&lt;/em&gt;（“艺术评论家”）学习区分真假图像。训练过程中，&lt;em&gt;生成器&lt;/em&gt;在生成逼真图像方面逐渐变强，而&lt;em&gt;判别器&lt;/em&gt;在辨别这些图像的能力上逐渐变强。当&lt;em&gt;判别器&lt;/em&gt;不再能够区分真实图片和伪造图片时，训练过程达到平衡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1439869/202007/1439869-20200705030512591-745551270.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因此，在训练的过程中，我们会对判别器和生成器进行学习。&lt;/p&gt;
&lt;h2 id=&quot;判别器的学习&quot;&gt;判别器的学习&lt;/h2&gt;
&lt;p&gt;首先我们初始化生成器 G，然后输入一组随机向量(Randomly sample a vactor)，生成器会根据输入的向量产生一些图片，我们把这些图片标注成 0（假图片）。同时把已有训练集中真实的图片标注成 1（真图片）。两者同时丢进判别器 D 中，以此来训练判别器 D。使得当输入是真图片的时候，判别器给高分（分数接近于1），而输入假图片的时候，判别器给低分（接近于 0 ）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1439869/202007/1439869-20200705030513165-712159052.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;了解深度学习的同学应该就知道了，我们有标记为1的真实图片和标注为0的假的图片，这个时候，我们就可以很轻易的对&lt;span class=&quot;math inline&quot;&gt;\(D\)&lt;/span&gt;进行训练（有了&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(y\)&lt;/span&gt;）。&lt;/p&gt;
&lt;h2 id=&quot;生成器的学习&quot;&gt;生成器的学习&lt;/h2&gt;
&lt;p&gt;针对于&lt;span class=&quot;math inline&quot;&gt;\(D\)&lt;/span&gt;我们有标记为1和0的数据，因此我们可以对其进行训练。那么对于生成器，有&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;（也就是随机噪声&lt;span class=&quot;math inline&quot;&gt;\(z\)&lt;/span&gt;），那么&lt;span class=&quot;math inline&quot;&gt;\(y\)&lt;/span&gt;在哪里呢？&lt;/p&gt;
&lt;p&gt;对于生成器，我们的目的是使得其能够生成真实的图片，换句话说，我们是希望生成的图片能够骗过&lt;span class=&quot;math inline&quot;&gt;\(D\)&lt;/span&gt;。那么如何通过判别器来产生所谓的&lt;span class=&quot;math inline&quot;&gt;\(y\)&lt;/span&gt;？？我们可以这样做：&lt;/p&gt;
&lt;p&gt;我们通过随机向量（噪声数据）经由生成网络产生一组假图片，我们将这些假图片都标记为 1（也就是说，人为的把假的图片当作真实的），然后将这些假图片输入到判别器中，判别器在对这些图片进行判别的时候，会发现这些图片是假的图片，然后给出低分，这样就产生了误差（因为标记的为1，但是判别器给了低分）。&lt;/p&gt;
&lt;p&gt;因此，在训练生成器的时候，这个网络是串接的。而在训练生成器的时候，一个很重要的操作就是保持判别器网络的参数不发生改变，只是把误差一直方向传播，传到生成网络那块后更新生成网络的参数，这样就完成了生成网络的训练了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1439869/202007/1439869-20200705030513511-464445112.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在完成生成器的训练之后，我们又可以产生新的假的图片去对判别器进行训练。我们把这个过程称作为&lt;strong&gt;单独交替训练&lt;/strong&gt;。同时要定义一个迭代次数，交替迭代到一定次数后停止即可。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;GAN网络的入门介绍就到这里，下一篇博客将会对GAN网络的原理进行介绍。数据挖掘杀我！！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1439869/202007/1439869-20200705030513767-176640570.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;
</description>
<pubDate>Sat, 04 Jul 2020 19:05:00 +0000</pubDate>
<dc:creator>段小辉</dc:creator>
<og:description>GAN网络从入门教程（一）之GAN网络介绍 稍微的开一个新坑，同样也是入门教程（因此教程的内容不会是从入门到精通，而是从入门到入土）。主要是为了完成数据挖掘的课程设计，然后就把挖掘榔头挖到了GAN网络</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xiaohuiduan/p/13237486.html</dc:identifier>
</item>
<item>
<title>SpringCloud Alibaba (四)：Dubbo RPC框架 - 小高飞</title>
<link>http://www.cnblogs.com/gaofei200/p/13237342.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gaofei200/p/13237342.html</guid>
<description>&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Dubbo简介&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。致力于提高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded md-expand&quot; data-src=&quot;http://dubbo.apache.org/docs/zh-cn/user/sources/images/dubbo-architecture.jpg&quot;&gt;&lt;img src=&quot;http://dubbo.apache.org/docs/zh-cn/user/sources/images/dubbo-architecture.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;table class=&quot;md-table&quot;&gt;&lt;thead&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;th&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;节点&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;角色说明&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;暴露服务的服务提供方&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;Consumer&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;调用远程服务的服务消费方&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;Registry&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;服务注册与发现的注册中心&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;Monitor&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;统计服务的调用次数和调用时间的监控中心&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;Container&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;服务运行容器&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;功能特点&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;8.5&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;2&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;面向接口代理的高性能RPC调用&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;提供高性能的基于代理的远程调用能力，服务以接口为粒度，为开发者屏蔽远程调用底层细节。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;智能负载均衡&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;内置多种负载均衡策略，智能感知下游节点健康状况，显著减少调用延迟，提高系统吞吐量。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;1&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;服务自动注册与发现&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;支持多种注册中心服务，服务实例上下线实时感知。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;高度可扩展能力&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;遵循微内核+插件的设计原则，所有核心能力如Protocol、Transport、Serialization被设计为扩展点，平等对待内置实现和第三方实现。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;运行期流量调度&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;内置条件、脚本等路由策略，通过配置不同的路由规则，轻松实现灰度发布，同机房优先等功能。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;2&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;可视化的服务治理与运维&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;提供丰富服务治理、运维工具：随时查询服务元数据、服务健康状态及调用统计，实时下发路由策略、调整配置参数。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Spring Cloud 为什么需要RPC&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在Spring Cloud构建的微服务系统中，大多数的开发者使用都是官方提供的Feign组件来进行内部服务通信，这种声明式的HTTP客户端使用起来非常的简洁、方便、优雅，但是有一点，在使用Feign消费服务的时候，相比较Dubbo这种RPC框架而言，性能堪忧。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;虽说在微服务架构中，会讲按照业务划分的微服务独立部署，并且运行在各自的进程中。微服务之间的通信更加倾向于使用HTTP这种简答的通信机制，大多数情况都会使用REST API。这种通信方式非常的简洁高效，并且和开发平台、语言无关，但是通常情况下，HTTP并不会开启KeepAlive功能，即当前连接为短连接，短连接的缺点是每次请求都需要建立TCP连接，这使得其效率变的相当低下。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;对外部提供REST API服务是一件非常好的事情，但是如果内部调用也是使用HTTP调用方式，就会显得显得性能低下，Spring Cloud默认使用的Feign组件进行内部服务调用就是使用的HTTP协议进行调用，这时，我们如果内部服务使用RPC调用，对外使用REST API，将会是一个非常不错的选择，恰巧，Dubbo Spring Cloud给了我们这种选择的实现方式。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;SpringCloud Alibaba 整合 Dubbo&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;创建ApacheDubbo总工程, 在pom.xml添加统一依赖&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt;
         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
​
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.gofy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ApacheDubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
​
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.1.8.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
​
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modules&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-provider&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-consumer&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modules&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
​
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Environment Settings &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Greenwich.SR3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-cloud-alibaba.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.2.1.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-cloud-alibaba.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.7.6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dubbo.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo-spring.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.7.6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dubbo-spring.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo-actuator.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.7.6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dubbo-actuator.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo-kryo.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.7.6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dubbo-kryo.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo-nacos.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.7.6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dubbo-nacos.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo-nacos-config.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.1.0.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dubbo-nacos-config.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-context-support.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0.6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-context-support.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
​
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-alibaba-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-cloud-alibaba.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
​
            &lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Apache Dubbo  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${dubbo.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;servlet-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-spring-boot-actuator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${dubbo-actuator.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${dubbo-spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 使用kryo序列化/反序列化工具, 提高项目性能 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-serialization-kryo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${dubbo-kryo.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
​
            &lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring Cloud Alibaba &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-registry-nacos&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${dubbo-nacos.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba.nacos&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nacos-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-nacos-config&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${dubbo-nacos-config.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba.spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context-support&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-context-support.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
​
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Compiler 插件, 设定 JDK 版本 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;showWarnings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;showWarnings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
​
        &lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 资源文件配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;src/main/java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;excludes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclude&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;**/*.java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclude&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;excludes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;src/main/resources&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;服务提供者&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在Dubbo RPC框架中, 服务提供者的接口类和实现类应该分开为俩个模块, 所以我们应该在服务提供者下创建两个子模块, 分别为 &lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;接口模块dubbo-provider-api&lt;/span&gt;&lt;/strong&gt; &lt;span class=&quot;md-plain&quot;&gt;和 &lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;实现模块dubbo-provider-service&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p md-focus&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在总工程 &lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;ApacheDubbo&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;下创建&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;dubbo-provider&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;模块, 添加服务提供者的统一依赖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt;
         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ApacheDubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.gofy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.gofy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-provider&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modules&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-provider-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-provider-service&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modules&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt;
         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-provider&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.gofy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
​
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.gofy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-provider-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
​
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;创建接口类 &lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;EchoService&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.gofy.dubbo.api;
​
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; EchoService {
    String echo(String s);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p md-focus&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;导入接口模块失败原因: 一般是总工程的统一依赖出了问题, 可以查看本地maven仓库的中总工程导入的依赖的包有没有缺失文件. 我之前失败原因就是 spring-cloud-dependencies 包出了问题, Greenwich.SR5版本下载一直缺失文件, 改为Greenwich.SR3就好了.&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt;
         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-provider&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.gofy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.gofy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-provider-service&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-serialization-kryo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-registry-nacos&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba.nacos&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nacos-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba.spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context-support&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 导入接口模块 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.gofy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-provider-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mainClass&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.gofy.dubbo.ProviderApplication&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mainClass&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p md-focus&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在&lt;span class=&quot;md-expand&quot;&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;dubbo-provider-service&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;的application.yml里添加配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;注：如果要在 SpringClou Alibaba+Dubbo 中使用nacos动态配置，操作与之前naocs动态配置的操作一样&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring:
  application:
    name: dubbo-provider
  main:
    allow-bean-definition-overriding: true # 解决bean重复定义，设置为true时，后定义的bean会覆盖之前定义的相同名称的bean

dubbo:
  scan:
    base-packages: com.gofy.dubbo.service # 实现类所在的包
  protocol:
    name: dubbo
    port: -1 # 端口为-1时，即是让dubbo自动分配端口
    serialization: kryo # 使用kryo序列化/反序列化工具
  registry:
    address: nacos://192.168.11.132:8848 #注册中心地址，格式为 注册中心组件名://注册中心访问地址&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain md-expand&quot;&gt;创建实现类 &lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;EchoServiceImpl&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.gofy.dubbo.service;
​
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.gofy.dubbo.api.EchoService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.dubbo.config.annotation.Service;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Value;
​
@Service(version &lt;/span&gt;= &quot;1.0.0&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务版本号&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; EchoServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; EchoService {
​
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String echo(String s) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello Dubbo &quot;+&lt;span&gt;s;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;创建启动类 ProviderApplication&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@SpringBootApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProviderApplication {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(ProviderApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;服务消费者&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p md-focus&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在总工程 &lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;ApacheDubbo&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;下创建服务消费者 &lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;dubbo-consumer&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;, 并添加依赖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;CodeMirror cm-s-inner CodeMirror-wrap&quot; lang=&quot;xml&quot; readability=&quot;55.110166358595&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt;
         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ApacheDubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.gofy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.gofy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-consumer&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; SpringBoot &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-actuator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Dubbo &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-spring-boot-actuator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-serialization-kryo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring Cloud Alibaba &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-registry-nacos&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba.nacos&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nacos-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba.spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context-support&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 导入接口模块 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.gofy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-provider-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mainClass&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.gofy.dubbo.ConsumerApplication&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mainClass&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;dubbo-consumer&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;的application.yml里添加配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: 8080
​
spring:
  application:
    name: dubbo-consumer
  main:
    allow-bean-definition-overriding: true
​
dubbo:
  scan:
    base-packages: com.gofy.dubbo.controller #controller类所在包
  protocol:
    name: dubbo
    port: -1
    serialization: kryo
  registry:
    address: nacos://192.168.11.132:8848
​
endpoints:
  dubbo:
    enabled: true #允许暴露dubbo分配的端点
​
management:
  health: #健康检查
    dubbo:
      status:
        defaults: memory
        extras: threadpool
  endpoints: #暴露所有web端点
    web:
      exposure:
        include: &quot;*&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;创建controller类 &lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;EchoController&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.gofy.dubbo.controller;
​
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.gofy.dubbo.api.EchoService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.dubbo.config.annotation.Reference;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.PathVariable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;
​
@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EchoController {
​
    @Reference(version &lt;/span&gt;= &quot;1.0.0&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过服务的版本号注入&lt;/span&gt;
&lt;span&gt;    EchoService echoService;
    
    @GetMapping(&lt;/span&gt;&quot;/echo/{s}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String echo(@PathVariable(&quot;s&quot;&lt;span&gt;)String s){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; echoService.echo(s);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;创建启动类 &lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;ConsumerApplication&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@SpringBootApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConsumerApplication {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(ConsumerApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;访问测试&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;访问nacos注册中心，查看已注册服务&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;https://s1.ax1x.com/2020/05/30/tM15G9.png&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/05/30/tM15G9.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;访问 localhost:8080/echo/hi , 成功获取到服务提供者返回的信息&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;https://s1.ax1x.com/2020/05/30/tM30eK.png&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/05/30/tM30eK.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt; &lt;/h3&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Dubbo负载均衡&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;当我们对内使用Dubbo的RPC通信，不再使用RestTemplate或feign的 HTTP通信时，我们要怎么使用负载均衡呢？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在 Dubbo 中，也有负载均衡的概念和相应的实现。Dubbo 需要对服务消费者的调用请求进行分配，避免少数服务提供者负载过大。服务提供者负载过大，会导致部分请求超时。因此将负载均衡到每个服务提供者上，是非常必要的。Dubbo 提供了4种负载均衡实现，分别是基于权重随机算法的 RandomLoadBalance、基于最少活跃调用数算法的 LeastActiveLoadBalance、基于 hash 一致性的 ConsistentHashLoadBalance，以及基于加权轮询算法的 RoundRobinLoadBalance。&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;源码分析&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Dubbo负载均衡的源码在 &lt;span&gt;&lt;code&gt;org.apache.dubbo:dubbo下的org.apache.dubbo.rpc.cluster.loadbalance&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;通过源码可以发现4个负载均衡策略的实现类都继承了AbstractLoadBalance抽象类，而AbstractLoadBalance实现了LoadBalance接口。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;再来看看LoadBalance接口，可以知道duboo是通过 loadbalance属性来适配负载均衡接口的实现类，且默认值为 &lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;random&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;权重随机。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
@SPI(&quot;random&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; LoadBalance {
    @Adaptive({&lt;/span&gt;&quot;loadbalance&quot;&lt;span&gt;})
    &lt;/span&gt;&amp;lt;T&amp;gt; Invoker&amp;lt;T&amp;gt; select(List&amp;lt;Invoker&amp;lt;T&amp;gt;&amp;gt; invokers, URL url, Invocation invocation) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; RpcException;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;所以，我们只要在&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;@Reference注解里添加 loadbalance属性&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;，就可以选择dubbo的负载均衡策略了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;loadbalance属性值为负载均衡实现类的 &lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;NAME&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;属性，分别是：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;random 、roundrobin 、leastactive 、consistenthash&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
@Reference(version = &quot;1.0.0&quot;, loadbalance = &quot;roundrobin&quot;&lt;span&gt;)
EchoService echoService;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;负载均衡策略实现类的详细源码分析，&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/source_code_guide/loadbalance.html&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;dubbo官方文档&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;md-plain&quot;&gt;里讲解得非常好，就不多转述了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.gofy.top&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;我的个人博客站&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;textarea/&gt;翻译 朗读 复制 正在查询，请稍候…… 重试 朗读 复制 复制 朗读 复制 via &lt;a target=&quot;_blank&quot;&gt;谷歌翻译（国内）&lt;/a&gt;译&lt;/p&gt;

&lt;p&gt;翻译 朗读 复制 正在查询，请稍候…… 重试 朗读 复制 复制 朗读 复制 via &lt;a target=&quot;_blank&quot;&gt;谷歌翻译（国内）&lt;/a&gt; 译&lt;/p&gt;
</description>
<pubDate>Sat, 04 Jul 2020 16:18:00 +0000</pubDate>
<dc:creator>小高飞</dc:creator>
<og:description>Dubbo简介 Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。致</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/gaofei200/p/13237342.html</dc:identifier>
</item>
<item>
<title>JS数据类型判断的几种方法 - 老甄Home</title>
<link>http://www.cnblogs.com/laozhenHome/p/13237301.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laozhenHome/p/13237301.html</guid>
<description>&lt;h3 id=&quot;js数据类型判断&quot;&gt;JS数据类型判断&lt;/h3&gt;
&lt;p&gt;JavaScript 中常见数据类型有Number、String、Boolean、Object、Array、Json、Function、Date、RegExp、Error、undefined、Null等十几种。ES6还有新增的数据类型有Symbol、Set、Map等。在实际应用中，我们经常需要判断数据类型，现在我归纳几种方法，希望对大家有所帮助。&lt;/p&gt;
&lt;h4 id=&quot;typeof-判断（最常用）&quot;&gt;typeof 判断（最常用）&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;typeof&lt;/code&gt; 是 JS 提供的一个运算符，专门用来检测一个变量的类型 。 &lt;code&gt;typeof&lt;/code&gt; 有2种使用方式：typeof(表达式)和typeof 变量名，第一种是对表达式做运算，第二种是对变量做运算。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-JavaScript&quot;&gt;function doSomething() {
    console.log('Hello World!');
}
console.log(typeof 1); // number
console.log(typeof 'Hello'); // string
console.log(typeof []); // object
console.log(typeof {}); // object
console.log(typeof doSomething); // function
console.log(typeof true); // boolean
console.log(typeof new Date()); // object
console.log(typeof new RegExp()); // object
console.log(typeof JSON.stringify({
    name: 'zhencanhua'
})); // string
console.log(typeof null); // object
console.log(typeof undefined); // undefined
console.log(typeof (new Error('error!'))); // object

console.log(typeof a); // undefined
console.log(typeof Symbol()); // symbol
console.log(typeof new Set()); // object
console.log(typeof new Map()); // object
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上面打印结果可以看出，&lt;code&gt;typeof&lt;/code&gt; 不能区分引用型数据的类型和 null。另我们可以使用 Array.isArray(arr) 将数组类型的数据从中筛选出来。&lt;/p&gt;
&lt;h4 id=&quot;instanceof-判断（了解）&quot;&gt;instanceof 判断（了解）&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;instanceof&lt;/code&gt; 用来检测构造函数的 &lt;code&gt;prototype&lt;/code&gt; 属性是否出现在某个实例对象的原型链上。 语法：object（实例对象） instanceof constructor（构造函数）。是的话返回 true，否则返回 false。所以， &lt;code&gt;instanceof&lt;/code&gt; 运算符只能用作对象的判断。 针对 &lt;code&gt;typeof&lt;/code&gt; 不能判断的引用型数据，我们可以使用 &lt;code&gt;instanceof&lt;/code&gt; 运算符。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;let arr1 = [1, 2, 3];
let obj1 = {
    name: '小明'
};
function Persion() { }
let persion1 = new Persion();
console.log(arr1 instanceof Array); // true
console.log(arr1 instanceof Object); // true，Array 是Object的子类
console.log(obj1 instanceof Object); // true
console.log(obj1 instanceof Array); // false
console.log(Persion instanceof Function, Persion instanceof Object); // true true
console.log(null instanceof Object); // false
console.log(persion1 instanceof Persion, persion1 instanceof Function, persion1 instanceof Object); // true false true
// String对象和Date对象都属于Object类型
let str1 = 'Hello';
let str2 = new String();
let str3 = new String('你好');
let myDate = new Date();
console.log(str1 instanceof String, str1 instanceof Object); // false, false
console.log(str2 instanceof String, str2 instanceof Object); // true, true
console.log(str3 instanceof String, str3 instanceof Object); // true, true
console.log(myDate instanceof Date, myDate instanceof Object); // true, true

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上面的判断可以看出，&lt;code&gt;instanceof&lt;/code&gt; 的使用限制很多，而且还不能很清晰方便的判断出一个实例是数组还是对象或方法。&lt;/p&gt;
&lt;p&gt;针对上面方法的弊端，我们可以使用 Object.prototype上的原生toString()方法来检测数据的类型。&lt;/p&gt;
&lt;h4 id=&quot;objectprototypetostringcall-判断（最靠谱）&quot;&gt;Object.prototype.toString.call() 判断（最靠谱）&lt;/h4&gt;
&lt;p&gt;Object 是 JS 提供的原生对象， Object.prototype.toString对任何变量都会返回这样一个字符串&quot;[object class]&quot;，class 就是 JS 内置对象的构造函数的名字。 call是用来改变调用函数作用域的。&lt;/p&gt;
&lt;p&gt;Object.prototype.toString() 在toString方法被调用时执行下面的操作步骤：&lt;/p&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;获取this对象的[[Class]]属性的值。（所以使用call来改变this的指向）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;将字符串&quot;[object &quot;，第一步获取的值, 以及 &quot;]&quot;拼接成新的字符串并返回。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;[[Class]]是一个内部属性,所有的对象(原生对象和宿主对象)都拥有该属性。在规范中，[[Class]]是这么定义的: 内部属性的描述， [[Class]] 是一个字符串值，表明了该对象的类型。&lt;/p&gt;
&lt;p&gt;读了上面的说明，用 call 的关键地方就在第1步，获取的是 this 对象，不加 call 改变作用域时 this 指向的是Object.prototype。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;function doSomething() {
    console.log('Hello World!');
}
// 使用Object.prototype.toString.call来判断
console.log(Object.prototype.toString.call(1)); // [object Number]
console.log(Object.prototype.toString.call('Hello')); // [object String]
console.log(Object.prototype.toString.call(false)); // [object Boolean]
console.log(Object.prototype.toString.call({})); // [object Object]
console.log(Object.prototype.toString.call([1, 2, 3])); // [object Array]
console.log(Object.prototype.toString.call(new Error('error!'))); // [object Error]
console.log(Object.prototype.toString.call(new Date())); // [object Date]
console.log(Object.prototype.toString.call(new RegExp())); // [object RegExp]
console.log(Object.prototype.toString.call(doSomething)); // [object Function]
console.log(Object.prototype.toString.call(null)); // [object Null]
console.log(Object.prototype.toString.call(undefined)); // [object Undefined]
console.log(Object.prototype.toString.call(JSON.stringify({
    name: 'zhencanhau'
}))); // [object String]
console.log(Object.prototype.toString.call(Math)); // [object Math]
console.log(Object.prototype.toString.call(Symbol('abc'))); // [object Symbol]
console.log(Object.prototype.toString.call(new Set())); // [object Set]
console.log(Object.prototype.toString.call(new Map())); // [object Map]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但在实际应用时我们只想获取返回的结果中数组的第二项，比如&quot;[object Number]&quot;，我们只想要Number这段字符，那么我们可以写个函数进行过滤：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 通过定义一个公共函数获取数据类型
function getTypeName(val) {
    let str = Object.prototype.toString.call(val);
    return /^\[object (.*)\]$/.exec(str)[1];
}
console.log(getTypeName(false)); // Boolean
console.log(getTypeName()); // Undefined
console.log(getTypeName(null)); // Null
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的问题完美解决。&lt;/p&gt;
&lt;h5 id=&quot;constructor-判断（比较常用）&quot;&gt;constructor 判断（比较常用）&lt;/h5&gt;
&lt;p&gt;每一个对象实例都可以通过 &lt;code&gt;constrcutor&lt;/code&gt; 对象来访问它的构造函数 。JS 中内置了一些构造函数：Object、Array、Function、Date、RegExp、String等。我们可以通过数据的 &lt;code&gt;constrcutor&lt;/code&gt; 是否与其构造函数相等来判断数据的类型。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var arr = [];
var obj = {};
var date = new Date();
var num = 110;
var str = 'Hello';
var getName = function(){};
var sym = Symbol();
var set = new Set();
var map = new Map();

arr.constructor === Array; // true
obj.constructor === Object; // true
date.constructor === Date; // true
str.constructor === String; // true
getName.constructor === Function; // true
sym.constructor === Symbol; // true
set.constructor === Set; // true
map.constructor === Map // true
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是这种方式仍然有个弊端，就是 &lt;code&gt;constructor&lt;/code&gt; 所指向的的构造函数是可以被修改的。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;function Name(name) {
    this.name = name;
}

function Stuent(age) {
    this.age = age;
}
// 将构造函数Name的实例赋给Student的原型，Student的原型的构造函数会发生改变，将不再指向自身。
Stuent.prototype = new Name('张三');
Stuent.prototype.constructor === Name; // true
Stuent.prototype.constructor === Stuent; // false
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上就是我在项目中用到过的数据类型的判断方法，具体使用哪一种，还需要根据自己的实际需求来判断选择。&lt;/p&gt;
</description>
<pubDate>Sat, 04 Jul 2020 15:59:00 +0000</pubDate>
<dc:creator>老甄Home</dc:creator>
<og:description>JS数据类型判断 JavaScript 中常见数据类型有Number、String、Boolean、Object、Array、Json、Function、Date、RegExp、Error、undef</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/laozhenHome/p/13237301.html</dc:identifier>
</item>
<item>
<title>基于git的博客(含站点与小程序) - MakerGYT</title>
<link>http://www.cnblogs.com/makergyt/p/13237171.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/makergyt/p/13237171.html</guid>
<description>&lt;p&gt;云开发提供的支持最大意义在于弱化后端和运维在开发中所占的时间成本和角色，按需提供可靠服务，但并不能理解为某些项目所谓的“不依赖任何后端服务”、“无需服务器、域名”。结合git自身commit附带的变更信息，可以实现对资源的增删改查。这样，博客更新构建无感进行，也无需实现管理后台和编辑器功能，借助WebHook同步多端，可以专注于内容沉淀。而git天生支持协同编辑，从而可以拓展至团队博客。&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;378.64512268103&quot;&gt;
&lt;h2 id=&quot;1-效果&quot;&gt;1 效果&lt;/h2&gt;
&lt;h2 id=&quot;2-需求分析&quot;&gt;2 需求分析&lt;/h2&gt;
&lt;h3 id=&quot;21-做&quot;&gt;2.1 做&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;专注于写markdown文档，或者说专注于内容。&lt;/li&gt;
&lt;li&gt;一端书写，多端同步：小程序、静态站点&lt;/li&gt;
&lt;li&gt;快速的静态托管、持续集成、页面资源加载&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;22-不做&quot;&gt;2.2 不做&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;不需要满足随时随地写文章,因为随时随地写的大部分是随笔、记录一类的帖子，若要呈现出来，必然要经过整理。&lt;/li&gt;
&lt;li&gt;不需要自定义主题风格,博客就主体业务类型(除了评论、点赞、收藏)而言受众个性色彩不强&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;3-系统设计&quot;&gt;3 系统设计&lt;/h2&gt;
&lt;h3 id=&quot;31-概要设计&quot;&gt;3.1 概要设计&lt;/h3&gt;
&lt;h4 id=&quot;311-架构设计&quot;&gt;3.1.1 架构设计&lt;/h4&gt;
&lt;p&gt;主要思路是通过git管理文章(markdown类型)，发布到小程序和静态站点(适用于构建md文档的框架如hexo、jeklly等)。&lt;br/&gt;&lt;strong&gt;技术路线&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;更新 =&amp;gt; 通过git进行源端CURD操作&lt;/li&gt;
&lt;li&gt;解析 =&amp;gt; 通过serverless完成md解析至html&lt;/li&gt;
&lt;li&gt;同步 =&amp;gt; 通过CI完成构建和部署到对象存储(静态托管));通过webhook拉取git仓库更新到云存储(小程序)&lt;/li&gt;
&lt;li&gt;浏览 =&amp;gt; 通过对象存储触发云函数刷新CDN(静态托管);通过rich-text组件解析html(小程序)&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;312-技术选型与开发框架&quot;&gt;3.1.2 技术选型与开发框架&lt;/h4&gt;
&lt;p&gt;在开发框架上，由于初期面向微信小程序开发且可能存在未知问题，故使用原生开发，不使用多端或其他预编译框架。在小程序UI上，参考但不依赖WeUI组件库，因由于封装不必要的特性可能造成代码包的冗余。&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;方案&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;6.9721627408994&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;代码托管&lt;/td&gt;
&lt;td&gt;Coding&lt;/td&gt;
&lt;td&gt;github api访问较大概率慢且不稳定&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.52&quot;&gt;&lt;td&gt;云开发&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://url.cn/HqLHX3x6&quot;&gt;腾讯云TCB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;含小程序云开发服务&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;持续集成&lt;/td&gt;
&lt;td&gt;Coding CI&lt;/td&gt;
&lt;td&gt;使用Jenkinsfile定义pipeline&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3.5810810810811&quot;&gt;&lt;td&gt;静态托管&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://url.cn/lhzrIgeX&quot;&gt;腾讯云COS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;也可使用&lt;a href=&quot;https://www.aliyun.com/product/oss?source=5176.11533457&amp;amp;userCode=89lfnf3q&amp;amp;type=copy&quot;&gt;阿里云OSS&lt;/a&gt;,或直接使用云开发提供的&lt;a href=&quot;https://cloud.tencent.com/product/wh&quot;&gt;静态网站托管&lt;/a&gt;,使用对象存储配合内容分发加速。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Markdown解析&lt;/td&gt;
&lt;td&gt;markdown-it&lt;/td&gt;
&lt;td&gt;也可使用markdjs,但markdown-it支持拓展插件&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.8235294117647&quot;&gt;&lt;td&gt;富文本渲染&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://jin-yufeng.github.io/Parser/#/&quot;&gt;parser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;比原生rich-text功能丰富且效果稳定&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;313-界面设计&quot;&gt;3.1.3 界面设计&lt;/h4&gt;
&lt;p&gt;由于是内容类应用，需要格外注意视觉规范，以使用户获取较好的阅读体验。以下规范参考了&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/design/&quot;&gt;WEDESIGN&lt;/a&gt;和&lt;a href=&quot;https://ant.design/docs/spec/introduce-cn&quot;&gt;Ant Design&lt;/a&gt;,根据实际需要进行了修改和补充。&lt;br/&gt;字体:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;字号pt&lt;/th&gt;
&lt;th&gt;像素px&lt;/th&gt;
&lt;th&gt;颜色&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;5.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;#000000&lt;/td&gt;
&lt;td&gt;页面内首要层级信息,列表标题&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;#B2B2B2&lt;/td&gt;
&lt;td&gt;时间戳与表单缺省值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;#888888&lt;/td&gt;
&lt;td&gt;页面内次要描述信息，搭配列表标题&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;#353535&lt;/td&gt;
&lt;td&gt;大段文本&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;#576b95&lt;/td&gt;
&lt;td&gt;页面辅助信息，需弱化的内容如链接&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;#09bb07&lt;/td&gt;
&lt;td&gt;完成字样&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;#e64340&lt;/td&gt;
&lt;td&gt;出错字样&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;rgba(0, 0, 0, 0.3)&lt;/td&gt;
&lt;td&gt;说明文本，如版权信息等不需要用户关注的信息&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;图标:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;颜色&lt;/th&gt;
&lt;th&gt;大小&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;导航类&lt;/td&gt;
&lt;td&gt;可多色，但不多于三色,主色一致&lt;/td&gt;
&lt;td&gt;28px&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;菜单操作类&lt;/td&gt;
&lt;td&gt;单色,颜色统一&lt;/td&gt;
&lt;td&gt;22px&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;操作提示类&lt;/td&gt;
&lt;td&gt;与提示类型相关&lt;/td&gt;
&lt;td&gt;30px&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;展示区分类&lt;/td&gt;
&lt;td&gt;图标固有色彩&lt;/td&gt;
&lt;td&gt;与跟随字体大小一致&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;响应式设计:&lt;br/&gt;主要通过改变px为rpx实现，由于基本不涉及列表项目，不考虑自适应布局变换，仅做不同屏幕下元素呈现比例保持一致，以iphone-6作为标准，对于iphone-x类异形屏，重点考虑操作菜单(如贴顶、贴底、悬浮)的安全区域问题，主要通过CSS中&lt;code&gt;calc(env(safe-area-inset-bottom))&lt;/code&gt;方式实现。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;图片横向铺满屏幕&lt;/li&gt;
&lt;li&gt;主体文字不需要&lt;/li&gt;
&lt;li&gt;由于已经有静态站点，暂不考虑PC端适配&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;314-开发规范&quot;&gt;3.1.4 开发规范&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;渐进式，先实现基本功能，再考虑抽离和组件化。&lt;/li&gt;
&lt;li&gt;能用简单的逻辑实现就不抽离组件，能使用成熟库就不自行创建组件，能通过配置或迁就性使用就不修改外部库以保证平滑更新。&lt;/li&gt;
&lt;li&gt;对于功能实现的方式，要考虑服务角色,权衡计算复杂度、网络延时和用户感知程度:&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;小程序端做简单计算&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;canvas绘制海报&lt;/li&gt;
&lt;li&gt;基本格式转换&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;服务端(云开发)做复杂处理,非实时性计算，或可预生成内容&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;markdown转html&lt;/li&gt;
&lt;li&gt;TOC目录&lt;/li&gt;
&lt;li&gt;AI识别、处理&lt;/li&gt;
&lt;li&gt;对于读写数据库，尽量将写操作放在云函数中。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;32-详细设计&quot;&gt;3.2 详细设计&lt;/h3&gt;
&lt;h4 id=&quot;321-数据源&quot;&gt;3.2.1 数据源&lt;/h4&gt;
&lt;p&gt;安全校验，保证云函数触发来源及方式可信:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// 查看请求头
if (!req.headers['user-agent'].includes('Coding.net Hook') || 
    !('x-coding-signature' in req.headers) || req.headers['x-coding-signature'].indexOf('sha1=')
    !('x-coding-event' in req.headers) || 'POST' !== req.httpMethod ) {
  return false;
}
// 计算和比对签名
const theirSignature = req.headers['x-coding-signature'];
const payload = req.body;
const secret = process.env.HOOKTOKEN;
const ourSignature = `sha1=${crypto.createHmac('sha1', secret).update(payload).digest('hex')}`;
return crypto.timingSafeEqual(Buffer.from(theirSignature), Buffer.from(ourSignature));
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在每次commit推送新的代码时，WebHook会push以下信息(限于篇幅，略去非必要信息)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-json&quot;&gt;{
  &quot;ref&quot;: &quot;refs/heads/master&quot;,
  &quot;commits&quot;: [
    {
    &quot;id&quot;: &quot;8a175afab1cf117f2e1318f9b7f0bc5d4dd54d45&quot;,
    &quot;timestamp&quot;: 1592488968000,
    &quot;author&quot;: {
      &quot;name&quot;: &quot;memakergytcom&quot;,
      &quot;email&quot;: &quot;me@makergyt.com&quot;,
      &quot;username&quot;: &quot;memakergytcom&quot;
    },
    &quot;committer&quot;: {
      &quot;name&quot;: &quot;memakergytcom&quot;,
      &quot;email&quot;: &quot;me@makergyt.com&quot;,
      &quot;username&quot;: &quot;memakergytcom&quot;
    },
    &quot;added&quot;: [
      &quot;source/_drafts/site.md&quot;
    ],
    &quot;removed&quot;: [],
    &quot;modified&quot;: [
      &quot;package.json&quot;,
      &quot;scripts/fix.js&quot;,
      &quot;source/_posts/next.yml&quot;,
      &quot;source/_posts/typesetting.md&quot;
    ]}
  ],
  &quot;head_commit&quot;:{...},
  &quot;pusher&quot;,
  &quot;sender&quot;,
  &quot;repository&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;保持最新状态故关注&lt;code&gt;head_commit&lt;/code&gt;.这些信息包含了本次提交产生的变更，可以基于遍历这些变更状态，同步云数据库。但由于可能包含了非文章文件的变更，也可能非目标分支，故需要筛选:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;if ('refs/heads/' + branch === ref) {
  if (filePath.indexOf(dirPrefix) || filePath.slice(-3) !== '.md') {　// 路径前缀和文章后缀
    continue;
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要建立数据库文件与git仓库文件的关联，由于每次commit的文件没有唯一id信息,可以通过文件名来建立联系，将文件名作为slug字段(主键)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;let slug = filePath.match(new RegExp(dirPrefix + &quot;([\\s\\S]+)\\.md&quot;))[1];
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于Push 事件不包含文件内容，需要通过api发起请求&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;await axios({
  url: `${baseUrl}/${branch}/${filePath}`,
  method: 'get',
  headers: {
    'Authorization': `token ${process.env.CODINGTOKEN}` // 个人令牌
  }
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;322-数据处理&quot;&gt;3.2.2 数据处理&lt;/h4&gt;
&lt;p&gt;提取文章信息:&lt;br/&gt;由于要求在markdown开头通过yaml格式写明基本信息，故在获取到文件内容(String)后需要转json。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;const matter = require('hexo-front-matter');
let { title, date, tags, description, categories, _content, cover } = matter.parse(data);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中cover字段(封面图)也可不声明，而通过文章首图来获取&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;let cover = _content.match(/!\[.*\]\((.+?)\)/);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;markdown解析html:&lt;br/&gt;小程序端环境与传统网页有区别，让markdown渲染在本地进行，其中还需要先转为html，为了减少渲染时间，这一步在云端提前进行:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;const md = require('markdown-it')({
  html: true,// 允许渲染html
}).use(require('markdown-it-footnote'))　// 脚注引用
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;生成目录&lt;br/&gt;为了保持一致，章节自行标号。目录放在侧边栏不解析到html中，需另行处理。而&lt;code&gt;markdown-it-anchor&lt;/code&gt;插件会使用header的值作为id(markdown-it-anchor),但id不能以数字开头，不能含中文及&lt;code&gt;encodeURIComponent(中文)&lt;/code&gt;，但可以含&lt;code&gt;-&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// 为&amp;lt;h&amp;gt;标签插入id
id = 'makergyt-' + crypto.createHash('md5').update(title).digest('hex');
// 获取所有h2-h4生成目录列表
const { tocObj } = require('hexo-util');
const data = tocObj(str, { min_depth:2, max_depth: 4 });
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;323-数据同步&quot;&gt;3.2.3 数据同步&lt;/h4&gt;
&lt;p&gt;在小程序的文档中，触发云函数可以通过http api（invokeCloudFunction）的方式。但是invokeCloudFunction需要关键的access_token，需要两小时内刷新获取，webhook无法提前获知。考虑设置中控服务器统一获取和刷新 access_token，webhook首先向中控服务器发起请求，再向云函数请求，但这样显然是不可能的，因其只能push一个地址一次，没有上下文。其间再加一个中间函数，那么这个中间函数又放在哪里，如何请求...(同样需要access_token)&lt;/p&gt;
&lt;p&gt;这时，在&lt;a href=&quot;https://url.cn/ZHExHUCa&quot;&gt;腾讯云－云开发控制台&lt;/a&gt;，发现可以直接通过&quot;云接入HTTP触发方式&quot;触发云函数，这样就可以直接该地址作为WebHook的Url。但需要关注业务和资源安全,上文在处理webhook push事件时已经做了安全检验，可以再将Coding的request domain加入到WEB安全域名列表中。&lt;/p&gt;
&lt;p&gt;获取到文章信息和内容后就可以同步到云数据库的相应集合中,这里循环中使用&lt;code&gt;async/await&lt;/code&gt;遍历,为了在每个调用解析之前保持循环,只使用&lt;code&gt;for...of&lt;/code&gt;进行异步。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;for (const file of added) {
  await db.collection('sync_posts').add({
    data
  })
}
for (const file of modified) {
  await db.collection('sync_posts').where({
    slug
  }).update({
    data
  })
}
for (const file of removed) {
  await syncPosts.where({
    slug
  }).remove();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;324-文本渲染&quot;&gt;3.2.4 文本渲染&lt;/h4&gt;
&lt;p&gt;几乎不太可能将原内容原封不动显示出来, 经过markdown-it渲染后的html字符串没有插入任何样式,直接测试(根据标签默认提供样式)效果如下:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;方案&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;rich-text&lt;/td&gt;
&lt;td&gt;代码块缺失，长内容被截断&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;wxparser&lt;/td&gt;
&lt;td&gt;间距过大，表格、代码块被截断&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;towxml&lt;/td&gt;
&lt;td&gt;代码块被截断&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;wemark&lt;/td&gt;
&lt;td&gt;代码块与引用部分不换行拉宽&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Parser&lt;/td&gt;
&lt;td&gt;表格溢出&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;em&gt;Tips&lt;/em&gt;: 注意到腾讯Omi团队开发的小程序代码高亮和markdown渲染组件&lt;a href=&quot;https://github.com/Tencent/omi/tree/master/packages/comi/mp/comi&quot;&gt;Comi&lt;/a&gt;，实际上采用模板引入的方式使用。考虑随后实测效果和对比渲染速度。&lt;/p&gt;
&lt;p&gt;相比之下，都会出现溢出组件边界，产生横向滚动条问题。在使用上，存在不支持解析style标签缺陷&lt;br/&gt;&lt;img src=&quot;https://imgkr.cn-bj.ufileos.com/9781bc4f-de66-4338-a993-21cfc987b405.png&quot; alt=&quot;图3-1 表格溢出&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而Parser可以通过控制源html样式的方法解决这种问题&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;var document = that.selectComponent(&quot;#article&quot;).document;
document.getElementsByTagName('table').forEach(tableNode =&amp;gt; {
  var div=document.createElement(&quot;div&quot;);
  div.setStyle(&quot;overflow&quot;, &quot;scroll&quot;);
  div.appendChild(tableNode);
  div._path = tableNode._path;
  tableNode = div;
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Parser也提供了通过控制源html中标签样式来影响渲染效果，这样就可以改变字体大小、行高、行间距等，以适应手机屏幕。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;//post.wxml
&amp;lt;parser id=&quot;article&quot; tag-style=&quot;{{tagStyle}}&quot;/&amp;gt;
// post.js
tagStyle: {
  p: 'font-size: 14px;color: #353535;line-height: 2;font-family: &quot;Times New Roman&quot;;',
  h2: 'font-size: 18.67px;color: #000;text-align:center;margin: 1em auto;font-weight: 500;font-family: SimHei;',
  h3: 'font-size:16.33px;color: #000;line-height: 2em;font-family: SimHei;',
  h4: 'font-size:14px;color: #000;font-family: SimHei;',
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于代码高亮，使用&lt;a href=&quot;https://prismjs.com/&quot;&gt;prism&lt;/a&gt; ,引入到该组件中。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;const Prism = require('./prism.js');
...
highlight(content, attrs) {
  content = content.replace(/&amp;amp;lt;/g, '&amp;lt;').replace(/&amp;amp;gt;/g, '&amp;gt;').replace(/quot;/g, '&quot;').replace(/&amp;amp;amp;/g, '&amp;amp;'); // 替换实体编码
  attrs[&quot;data-content&quot;] = content; // 记录原始文本，可用于长按复制等操作
  switch (attrs[lan]) {
    case &quot;javascript&quot;:
    case &quot;js&quot;:
      return Prism.highlight(content, Prism.languages.javascript, &quot;javascript&quot;);
  }
}  
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;数学公式Latex&lt;/strong&gt;&lt;br/&gt;对于latex渲染引擎，主要有两种&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;引擎&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;mathjax&lt;/td&gt;
&lt;td&gt;语法丰富，渲染较慢&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;katex&lt;/td&gt;
&lt;td&gt;支持语法较少，迅速,只能输出mathml或html,需要搭配其CSS and font files使用&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;当然，这两种都是网页客户端渲染，在小程序端天生不可用，考虑采用服务端渲染。问题有:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;服务端渲染如果使用外部接口，需encodeUrl(公式)，但内部&lt;code&gt;\&lt;/code&gt;被转义消失，需要&lt;code&gt;\\&lt;/code&gt;，replace(/\/g,'\')无效&lt;/li&gt;
&lt;li&gt;服务端渲染如果使用mathjax-node,其依赖项mathjax版本^2.7.2，需将所有&lt;code&gt;\&lt;/code&gt;替换为&lt;code&gt;\\&lt;/code&gt;,会经常性出现&lt;code&gt;SVG - Unknown character: U+C in MathJax_Main,MathJax_Size1,MathJax_AMS&lt;/code&gt;, 矩阵解析错误&lt;code&gt;TeX parse error: Misplaced &amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如何比较精准的识别markdown中特定标记的Latex，不造成误操作。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;考虑在markdown解析html阶段将其转化为&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;，也是很多内容平台采取的方式，较为可靠可控。这里使用&lt;a href=&quot;https://github.com/MakerGYT/markdown-it-latex2img&quot;&gt;markdown-it-latex2img&lt;/a&gt;插件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;const md = require('markdown-it')({
  html: true,// Enable HTML tags in source
}).use(require('markdown-it-latex2img'),{
    style: &quot;filter: opacity(90%);transform:scale(0.85);text-align:center;&quot; //　优化显示样式
  })
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://imgkr.cn-bj.ufileos.com/5be6b53b-c3dc-4119-9683-09d650858558.jpeg&quot; alt=&quot;图3-2 markdown-it-latex2img效果&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;33-静态托管&quot;&gt;3.3 静态托管&lt;/h3&gt;
&lt;p&gt;为git库设置构建计划，以使每次提交后同步到对象存储。这里使用&lt;a href=&quot;https://hexo.io&quot;&gt;hexo&lt;/a&gt;作为构建框架。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sh&quot;&gt;pipeline {
  agent any
  stages {
    stage('检出') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: env.GIT_BUILD_REF]],
          userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]
        ])
      }
    }
    stage('构建') {
      steps {
        echo '构建中...'
        sh 'npm install -g cnpm --registry=https://registry.npm.taobao.org'
        sh 'cnpm install'
        sh 'npm run build'
        echo '构建完成.'
      }
    }
    stage('并行阶段') {
      parallel {
        stage('部署到腾讯云存储') {
          steps {
            echo '部署中...'
            sh &quot;coscmd config -a $TENCENT_SECRET_ID -s $TENCENT_SECRET_KEY -b $TENCENT_BUCKET -r $TENCENT_REGION&quot;
            sh 'coscmd upload -r public/ /'
            echo '部署完成'
          }
        }
        stage('打包') {
          steps {
            sh 'tar -zcf blog.tar.gz public'
            archiveArtifacts(artifacts: 'blog.tar.gz', defaultExcludes: true, fingerprint: true, onlyIfSuccessful: true)
          }
        }
      }
    }
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;构建后自动刷新CDN,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// refresh_cdn
const Key = decodeURIComponent(event.Records[0].cos.cosObject.key.replace(/^\/[^/]+\/[^/]+\//,&quot;&quot;));
const cdnUrl = `${process.env.CDN_HOST}/${Key}`;
CDN.request('RefreshCdnUrl', {
    'urls.0': cdnUrl
}, (res) =&amp;gt; {
  ...
})
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;4-系统实现&quot;&gt;4 系统实现&lt;/h2&gt;
&lt;h3 id=&quot;41-数据库&quot;&gt;4.1 数据库&lt;/h3&gt;
&lt;p&gt;文章:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;sync_posts = [
  {
    _id: String,
    createTime: String,
    slug: String,
    title: String,
    tags: Array,
    description: String,
    cover: String, // url
    content: String, // html
  }
]
// 安全规则
{
  &quot;read&quot;: true, // 公有读
  &quot;write&quot;: &quot;get('database.user_info.${auth.openid}').isManager&quot;, // 仅管理员可以写
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用户收藏&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;user_favorite = [
  {
    _id:String,
    userId:String,// openid
    postId: String,// 在表中加入冗余数据直接查询
    createTime: Date
  }
]
// 安全规则
{
  &quot;read&quot;: &quot;doc._openid == auth.openid&quot;,// 私有读
  &quot;write&quot;: &quot;doc._openid == auth.openid&quot;// 私有写
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用户信息&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;user_info = [
  {
    _id: String,
    _openid: String,
    ...userInfo,
    isManager: Boolean,
  }
]
// 安全规则
{
  &quot;read&quot;: &quot;doc._openid == auth.openid&quot;, // 私有读
  &quot;write&quot;: &quot;doc._openid == auth.openid&quot;// 私有写
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;42-登录&quot;&gt;4.2 登录&lt;/h3&gt;
&lt;h4 id=&quot;421-普通登录&quot;&gt;4.2.1 普通登录&lt;/h4&gt;
&lt;p&gt;使用云开发后，无需通过wx.login获取登录凭证（code）进而换取用户登录态信息，因每次调用云函数时会附带调用者openid。同时由于可以直接通过open-data展示用户信息(不论是否授权),一些小程序因此绕过用户登录。有些小程序通过授权用户信息后保存到数据库，后续操作均使用数据库信息，无法在用户变更信息后更新。如果用户主动通过设置页取消授权，但返回后却还在展示使用用户的信息(显示已登录)。这是因为用户态信息是通过onLoad获取的，返回操作时是onShow,故此时会产生矛盾。用户在重新授权登录时选择使用其他昵称和头像，这时一些小程序会认为是新用户登录。还有一部分小程序不论业务中是否需要用户信息，均要求授权才可使用。实际上微信小程序最大的特点就是可以方便地获取微信提供的用户身份标识，快速建立小程序内的用户体系，但上述情形均没有妥善处理用户登录这一基本策略。&lt;/p&gt;
&lt;p&gt;基于&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/design/#%E5%AF%BC%E8%88%AA%E6%98%8E%E7%A1%AE%EF%BC%8C%E6%9D%A5%E5%8E%BB%E8%87%AA%E5%A6%82&quot;&gt;&quot;来去自如&quot;&lt;/a&gt;的原则,可以游客浏览，也可登录和登出。在涉及一些需要采集和输入用户信息、或保存用户记录的功能时才要求用户跳至登录页授权获取信息，会通过云函数将其与上下文中的openid保存到数据库，同时在回调中将用户标识生成自定义登录态缓存到本地，如果用户点击退出会将其置空。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// cloudfunction/login
const openid = wxContext.OPENID
db.collection('user_info').where({
  _openid: openid
}).get().then(async (res)=&amp;gt; {
  if (res.data.length === 0) {
    db.collection('user_info').add({
      data: {
        _openid: openid,
        ...event.userInfo,
        createTime: db.serverDate(),
      }
    })
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在下次打开小程序时，会通过检查缓存中的自定义登录态来判断用户是否登录，同样调用云函数来更新用户信息和使用信息(如打开时间、打开次数用于后续用户分析)。在下次登录时将不会弹出授权提示，当用户自行取消授权(或者wx.openSetting时误操作)，这种情况概率很小，但一旦出现就是Bug。如果在onShow中检测用户，会与正常onLaunch产生重复的逻辑，但又需要检测这种行为。实际上，打开设置页必然会进入onHide，可以:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// app.js
onHide:function() {
  wx.onAppShow(()=&amp;gt; {
    if(this.globalData.hasLogin) {
      wx.getSetting({
        success: res =&amp;gt; {
          if (!res.authSetting['scope.userInfo']) { // 取消了授权
            this.logout() // 返回后直接登出
          }
        }
      })
    }
    wx.offAppShow();
  })
},
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;422-管理员鉴权&quot;&gt;4.2.2 管理员鉴权&lt;/h4&gt;
&lt;p&gt;管理员即文章作者，对于管理员标识，考虑到&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;手机号: 目前该接口针对非个人开发者，且完成了认证的小程序开放&lt;/li&gt;
&lt;li&gt;openid: 不使用前是未知的，无法提前绑定&lt;/li&gt;
&lt;li&gt;其他用户信息、密码等会暴露管理入口&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;于是采取了最简单直接的数据字段标记&lt;code&gt;isMaganer:true&lt;/code&gt;,这一字段也用于数据库的安全规则设定。&lt;/p&gt;
&lt;h3 id=&quot;43-分享&quot;&gt;4.3 分享&lt;/h3&gt;
&lt;p&gt;分享无非两种，直接分享到聊天和生成海报后引导分享到朋友圈，对于前者，需要考虑图片大小为5:4,其他比例会产生空白或者裁切。这里主要分析后者。在小程序端通过canvas绘制到倒出图片比较慢，由于每篇文章分享内容基本固定，可以考虑预生成。但如果分享二维码和分享者关联，就仍然需要本地生成。这里使用组件&lt;a href=&quot;https://github.com/MakerGYT/share&quot;&gt;mini-share&lt;/a&gt;。对于小程序码，目前采用云调用方式，这种方式只能由小程序端触发。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// 处理参数
const path = page +'?' + Object.keys(param).map(function (key) {
    return encodeURIComponent(key) + &quot;=&quot; + encodeURIComponent(param[key]);
}).join(&quot;&amp;amp;&quot;);
// 组织文件名
const fileName = 'wxacode/limitA-' + crypto.createHash('md5').update(path).digest('hex');
// 查找文件,如果找到直接返回路径
let getFileRes = await cloud.getTempFileURL({
  fileList: [fileID]
});
// 若未找到重新生成
const wxacodeRes = await cloud.openapi.wxacode.get({
  path,
  isHyaline:true
})
// 上传到云存储
const uploadRes = await cloud.uploadFile({
  cloudPath: fileName + fileSuffix,
  fileContent: wxacodeRes.buffer,
});
// 获取返回临时路径
getFileRes = await cloud.getTempFileURL({
  fileList: [uploadRes.fileID]
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;生成二维码方式有三种，分析特性&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;适用场景&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;A+ C&lt;/td&gt;
&lt;td&gt;个数有限、参数较长&lt;/td&gt;
&lt;td&gt;生成后储存　用于长期有效业务，可用于邀请码一类用户可长期关注使用的操作。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;个数无限、参数较短&lt;/td&gt;
&lt;td&gt;生成后可不保存，其scene与用户短期行为关联（如活动）。活码，与数据库关联后可以转换含义再次使用。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;这里由于文章的数据库&lt;code&gt;_id&lt;/code&gt;默认是32位，达到了B类的限制，并且还需要关联其他信息，故使用了A类(wxacode.get)&lt;/p&gt;
&lt;h3 id=&quot;44-订阅消息&quot;&gt;4.4 订阅消息&lt;/h3&gt;
&lt;p&gt;对于个人主体，只能用户经小程序发起订阅(获取下发权限)后下发一次消息，这里当用户留言时，会订阅一次回复通知,但无法发给作者(除非作者长期订阅)。由于同时需要保存到数据库，这里使用云调用实现。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;// post.js
wx.requestSubscribeMessage({
  tmplIds: [TEMPLATE.REPLY]
})
// cloudfunction/sengMsg
let sendRes = await db.collection('user_msg').add({
  data: {
    _openid: wxContext.OPENID,
    msg:inputMsg,
    createTime:Date.parse(new Date())
  }
});
await cloud.openapi.subscribeMessage.send({
  data: format(data), // 由于各种类型信息有长度格式限制，需要处理
  touser: wxContext.OPENID,
  templateId: TEMPLATE.REPLY
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;5-拓展总结&quot;&gt;5 拓展总结&lt;/h2&gt;
&lt;h3 id=&quot;51-结合语雀&quot;&gt;5.1 结合语雀&lt;/h3&gt;
&lt;h4 id=&quot;511-同步到语雀&quot;&gt;5.1.1 同步到语雀&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;会在标题前插入&lt;code&gt;&amp;lt;a name=&quot;tqO5w&quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;标签&lt;/li&gt;
&lt;li&gt;编辑界面直接复制会图片外链转化，但是直接导入的不会转化&lt;/li&gt;
&lt;li&gt;只可本地引入文件(图片)，均不支持外部链接引入，除了加入的第三方服务&lt;/li&gt;
&lt;li&gt;可以input任意类型，但output都是特有lake格式,且在&lt;a href=&quot;https://www.yuque.com/yuque/developer/doc#c2e9ee2a&quot;&gt;更新文档&lt;/a&gt;接口调用时，会返回&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-json&quot;&gt;{
  &quot;status&quot;: 400,
  &quot;message&quot;: &quot;抱歉，语雀不允许通过 API 修改 Lake 格式文档，请到语雀进行操作。&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;512-从语雀同步&quot;&gt;5.1.2 从语雀同步&lt;/h4&gt;
&lt;p&gt;可以借助语雀良好的编辑体验来写文章，同步到其他平台。yuque的webhook会发送webhook.doc_detail可以直接获取到内容。但是，在丰富文档内容类型方面，语雀做了很多卓有成效的努力，使用这些特性，也就无法保证其他平台的兼容性。删除操作返回的slug会变为&lt;code&gt;trash-EJA8tL7W&lt;/code&gt;，与原slug无关，无法通过slug建立其他平台的关联，即仅增改操作可以同步。因此，在语雀写作，自动部署到其他平台的方案是不切实际和不必要的。&lt;/p&gt;
&lt;h4 id=&quot;513-workflow&quot;&gt;5.1.3 workflow&lt;/h4&gt;
&lt;p&gt;同步至语雀后，可以利用其丰富的支持类型完善文档内容，比如将文本内容转化为更直观的流程图、思维导图，将demo和代码合并到codepen直观演示，将可能涉及的资料直接以附件上传方便获取。&lt;br/&gt;但要注意：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;很多内容平台往往会在拥有一定用户基数后做图片防盗链。&lt;/li&gt;
&lt;li&gt;目前的webhook设计不安全，没有签名验证，可能由于Webhooks URL泄露被伪造请求&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;52-小程序开发已知问题&quot;&gt;5.2 小程序开发已知问题&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;真机初始动画卡顿500ms&lt;/li&gt;
&lt;li&gt;原生TabBar隐藏会跳动，加动画会黑屏，自定义TabBar切换时所有图标会闪动，自动隐藏会显示白条.&lt;/li&gt;
&lt;li&gt;简单几次来回navigate后,listeners of event onBeforeUnloadPage_17 have been added, possibly causing memory leak.&lt;/li&gt;
&lt;li&gt;在调用CameraFrameListener.start开始监听帧数据后，必然有对像素data的获取和处理，但这会导致界面所有的点击(bindtap)事件失效，也就不能通过点击触发CameraFrameListener.stop停止函数&lt;/li&gt;
&lt;li&gt;云控制台数据库管理页中数组更新操作符addToSet无效,对象元素传入后&lt;a href=&quot;https://developers.weixin.qq.com/community/develop/doc/0006e2966e886042445a5e6c456c00&quot;&gt;不稳定&lt;/a&gt;，或生效或不生效&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description>
<pubDate>Sat, 04 Jul 2020 15:16:00 +0000</pubDate>
<dc:creator>MakerGYT</dc:creator>
<og:description>云开发提供的支持最大意义在于弱化后端和运维在开发中所占的时间成本和角色，按需提供可靠服务，但并不能理解为某些项目所谓的“不依赖任何后端服务”、“无需服务器、域名”。结合git自身commit附带的变更</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/makergyt/p/13237171.html</dc:identifier>
</item>
<item>
<title>前端备战秋招之计算机网络，这一篇足矣 - 粥里有勺糖</title>
<link>http://www.cnblogs.com/roseAT/p/13237135.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/roseAT/p/13237135.html</guid>
<description>&lt;p&gt;文章内容较长，希望阅读的同学能够细品，如内容有差错，还请评论区斧正&lt;/p&gt;
&lt;p&gt;个人博客上查看&lt;a href=&quot;https://sugarat.top/offer/autumn21/Internet.html&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.cdn.sugarat.top/mdImg/MTU4NTIzMzA2NDMwNw==585233064307&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;常见协议的端口&quot;&gt;常见协议的端口&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.cdn.sugarat.top/mdImg/MTU5MzYyMTk2NTM4NQ==593621965385&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;osi体系结构&quot;&gt;OSI体系结构&lt;/h2&gt;
&lt;p&gt;自低向上(7层结构)&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;物理层&lt;/li&gt;
&lt;li&gt;数据链路层&lt;/li&gt;
&lt;li&gt;网络层&lt;/li&gt;
&lt;li&gt;传输层&lt;/li&gt;
&lt;li&gt;会话层&lt;/li&gt;
&lt;li&gt;表现层&lt;/li&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;TODO：贴生动形象图&lt;/p&gt;
&lt;h2 id=&quot;tcpip&quot;&gt;TCP/IP&lt;/h2&gt;
&lt;p&gt;自底向上（4层）&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;网络接口层&lt;/li&gt;
&lt;li&gt;网络IP层&lt;/li&gt;
&lt;li&gt;运输层&lt;/li&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;TODO：贴生动形象图&lt;/p&gt;
&lt;h2 id=&quot;五层体协结构&quot;&gt;五层体协结构&lt;/h2&gt;
&lt;p&gt;自底向上&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;物理层&lt;/li&gt;
&lt;li&gt;数据链路层&lt;/li&gt;
&lt;li&gt;网络层&lt;/li&gt;
&lt;li&gt;运输层&lt;/li&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;TODO：贴生动形象图&lt;/p&gt;
&lt;h2 id=&quot;网际层ip协议&quot;&gt;网际层IP协议&lt;/h2&gt;
&lt;img src=&quot;http://img.cdn.sugarat.top/mdImg/MTU5MzYxNzg5MDI1Ng==593617890256&quot;/&gt;&lt;ul&gt;&lt;li&gt;ARP:地址解析协议--从网络层使用的 IP 地址，解析出在数据链路层使用的硬件地址&lt;/li&gt;
&lt;li&gt;ICMP：网际控制报文协议--用于在IP主机、路由器之间传递控制消息
&lt;ul&gt;&lt;li&gt;ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告&lt;/li&gt;
&lt;li&gt;ICMP 属于IP 层的协议&lt;/li&gt;
&lt;li&gt;PING 使用了 ICMP 回送请求与回送回答报文&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;IGMP：网际组管理协议--&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;ip地址分类&quot;&gt;IP地址分类&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;构成(x+网络号+主机号)&lt;/th&gt;
&lt;th&gt;范围&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;+7+24&lt;/td&gt;
&lt;td&gt;1.0.0.1---126.255.255.254&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;&lt;code&gt;10&lt;/code&gt;+14+16&lt;/td&gt;
&lt;td&gt;128.0.0.0---191.255.0.0&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;&lt;code&gt;110&lt;/code&gt;+21+8&lt;/td&gt;
&lt;td&gt;192.0.0.0--- 223.255.255.0&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1110&lt;/code&gt;+ 28(多播)&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;多播地址&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;&lt;code&gt;11110&lt;/code&gt;+留用&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;保留今后使用&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;通信类型&quot;&gt;通信类型&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;单播：从一台主机向另一台主机发送数据包的过程&lt;/li&gt;
&lt;li&gt;组播：从一台主机向选定的一组主机发送数据包的过程&lt;/li&gt;
&lt;li&gt;广播：从一台主机向该网络中的所有主机发送数据包的过程
&lt;ul&gt;&lt;li&gt;A类、B类与C类IP地址中主机号全1的地址为直接广播地址&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;ip数据报&quot;&gt;IP数据报&lt;/h3&gt;
&lt;h4 id=&quot;构成&quot;&gt;构成&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;首部
&lt;ul&gt;&lt;li&gt;前：固定长度20&lt;/li&gt;
&lt;li&gt;后：有可选字段，长度可变&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;数据&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;图解构成&quot;&gt;图解构成&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://img.cdn.sugarat.top/mdImg/MTU5MzYxOTgwNzUyNw==593619807527&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;TODO：想办法巧妙记住&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;版本：4位--IP协议版本，等于4代表IPV4&lt;/li&gt;
&lt;li&gt;首部长度：4位--可表示的最大数值15*4=60字节，因此 IP 的首部长度的最大值是 60 字节&lt;/li&gt;
&lt;li&gt;区分服务：8位--用来获得更好的服务，在一般的情况下都不使用这个字段&lt;/li&gt;
&lt;li&gt;总长度：16位--首部和数据之和长度，单位字节，于是数据报的最大长度为65535字节 2^16-1
&lt;ul&gt;&lt;li&gt;总长度必须不超过最大传送单元 &lt;code&gt;MTU&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;标识：16位--计数器，用来产生IP数据报的标识&lt;/li&gt;
&lt;li&gt;标志：3位--目前只有前两位有意义
&lt;ul&gt;&lt;li&gt;最低位MF（More Fragment）：1--后面还有分片，0--为最后一个分片&lt;/li&gt;
&lt;li&gt;中间位DF（Don't Fragment）：0--才允许分片&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;片偏移：13位--指出：较长的分组在分片后，某片在原分组中的相对位置
&lt;ul&gt;&lt;li&gt;片偏移以 8 个字节为偏移单位&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;生存时间：8位--记为TTL（Time To Live），数据报在网络中可通过的路由器数的最大值&lt;/li&gt;
&lt;li&gt;协议：8位--指出此数据报携带的数据使用何种协议
&lt;ul&gt;&lt;li&gt;以便目的主机的 IP 层将数据部分上交给那个处理过程&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;首部检验和：16位--只检验数据报的首部，不检验数据部分
&lt;ul&gt;&lt;li&gt;这里不采用 CRC 检验码而采用简单的计算方法&lt;/li&gt;
&lt;li&gt;IP 数据报首部检验和的计算采用 16 位二进制反码求和算法&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;源地址：32位--4字节&lt;/li&gt;
&lt;li&gt;目的地之：32位--4字节&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.cdn.sugarat.top/mdImg/MTU5MzYyMDk2ODE1MQ==593620968151&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;ping&quot;&gt;PING&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;PING 用来测试两个主机之间的连通性&lt;/li&gt;
&lt;li&gt;PING 使用了 ICMP 回送请求与回送回答报文&lt;/li&gt;
&lt;li&gt;PING 是应用层直接使用网络层 ICMP 的例子，它没有通过运输层的 TCP 或UDP&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;运输层&quot;&gt;运输层&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.cdn.sugarat.top/mdImg/MTU5MzYyMTYyOTYyMA==593621629620&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;udp&quot;&gt;UDP&lt;/h2&gt;
&lt;p&gt;用户数据报协议（User Datagram Protocol）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据单位协议：TCP报文段&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;特点&quot;&gt;特点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;无连接服务协议
&lt;ul&gt;&lt;li&gt;传送数据之前不需要建立连接&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;尽最大努力交付，不提供可靠交付
&lt;ul&gt;&lt;li&gt;数据报文的搬运工，不保证有序且不丢失的传递到对端&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;面向报文的&lt;/li&gt;
&lt;li&gt;没有拥塞控制，没有流量控制算法&lt;/li&gt;
&lt;li&gt;支持一对一、一对多、多对一和多对多的交互通信&lt;/li&gt;
&lt;li&gt;UDP 的首部开销小，只有 8 个字节，比 TCP 的 20 个字节的首部要短&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;面向无连接&quot;&gt;面向无连接&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;UDP 是不需要和 TCP 一样在发送数据前进行三次握手建立连接，想发数据就可以开始发送了&lt;/li&gt;
&lt;li&gt;只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作
&lt;ul&gt;&lt;li&gt;发送端：应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头,表示用的是 UDP 协议，然后就传递给网络层了&lt;/li&gt;
&lt;li&gt;接收端：网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;不可靠性&quot;&gt;不可靠性&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;不可靠性体现在无连接上
&lt;ul&gt;&lt;li&gt;通信不需要建立连接,想发就发&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;收到什么数据就发生什么数据,不对数据进行校验与备份&lt;/li&gt;
&lt;li&gt;不关心发送端是否收到了数据&lt;/li&gt;
&lt;li&gt;没有拥堵控制会以恒定的速度发送数据
&lt;ul&gt;&lt;li&gt;在网络条件不好的情况下会导致丢包&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;高效&quot;&gt;高效&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;UDP 的首部开销小，只有 8 个字节，比 TCP 的 20 个字节的首部要少得多&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.cdn.sugarat.top/mdImg/MTU4MzIyMDM3OTg1MA==583220379850&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;传输方式&quot;&gt;传输方式&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;一对多：单播&lt;/li&gt;
&lt;li&gt;多对多：多播&lt;/li&gt;
&lt;li&gt;多对一：广播&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;适合场景&quot;&gt;适合场景&lt;/h3&gt;
&lt;p&gt;对当前网络通讯质量要求不高的时候,实时性要求高的地方都可以看到 UDP 的身影，要求网络通讯速度尽量的快，这时就使用UDP&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;网游&lt;/li&gt;
&lt;li&gt;直播&lt;/li&gt;
&lt;li&gt;语音&lt;/li&gt;
&lt;li&gt;视屏等等&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;数据报格式&quot;&gt;数据报格式&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.cdn.sugarat.top/mdImg/MTU5MzYyMjM0OTY4OA==593622349688&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;源端口--16位&lt;/li&gt;
&lt;li&gt;目的端口--16位&lt;/li&gt;
&lt;li&gt;整个数据报文的长度--16位&lt;/li&gt;
&lt;li&gt;检验和--16位该字段用于发现头部信息和数据中的错误&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;UDP 相比 TCP 简单的多，不需要建立连接，不需要验证数据报文，不需要流量控制，只会把想发的数据报文直接发送给对端&lt;/li&gt;
&lt;li&gt;虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;tcp&quot;&gt;TCP&lt;/h2&gt;
&lt;p&gt;传输控制协议（Transmission Control Protocol）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据单位协议：UDP报文、用户数据报&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;特点-2&quot;&gt;特点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;面向连接的运输层协议&lt;/li&gt;
&lt;li&gt;每一条 TCP 连接只能有两个端点 (endpoint)，每一条 TCP 连接&lt;code&gt;只能是点对点&lt;/code&gt;的（一对一）&lt;/li&gt;
&lt;li&gt;提供可靠交付的服务&lt;/li&gt;
&lt;li&gt;提供全双工通信&lt;/li&gt;
&lt;li&gt;面向字节流
&lt;ul&gt;&lt;li&gt;但 TCP 传送的数据单元却是报文段&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TCP 不提供广播或多播服务&lt;/li&gt;
&lt;li&gt;首部的前 20 个字节是固定的，后面有 4n 字节是根据需要而增加的选项 (n 是整数)
&lt;ul&gt;&lt;li&gt;因此 TCP 首部的最小长度是 20 字节&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;建立连接三次握手&quot;&gt;建立连接三次握手&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;三报文握手主要是为了防止已失效的连接请求报文段突然又传送到了，因而产生错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://img.cdn.sugarat.top/mdImg/MTU5Mzg0MzU4NzI2NQ==593843587265&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建完 TCB 后便进入 LISTEN 状态，此时开始等待客户端发送数据&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;第一次握手
&lt;ul&gt;&lt;li&gt;客户端发送的SYN=1（同步序列号seq=x）的包到服务端并变为SYN-SENT（请求连接）状态，等待服务端响应&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第二次握手
&lt;ul&gt;&lt;li&gt;服务端收到客户端请求后，发送一个包（SYN=1，ACK=1，seq=y,ack=x+1）给客户发端，服务端进入SYN_RECEVIED状态&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第三次握手
&lt;ul&gt;&lt;li&gt;客户端收到服务端响应的包（SYN=1，ACK=1）后，再向服务端发送确认包（ACK=1，seq=x+1，ack=y+1），发送完毕，客户端和服务端都进入ESTABLISHED状态，完成握手&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;连接释放四次挥手&quot;&gt;连接释放四次挥手&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;数据传输结束后，通信的双方都可释放连接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://img.cdn.sugarat.top/mdImg/MTU5Mzg0NTQwODY4Nw==593845408687&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;第一次挥手
&lt;ul&gt;&lt;li&gt;客户端认为数据发送完成，向服务端发送链接释放请求(FIN=1,序号seq=u)，等待服务端确认&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第二次挥手
&lt;ul&gt;&lt;li&gt;服务端收到请求后,通知应用层要释放 TCP 链接。然后会发出确认包（ACK =1，seq=V,ACK=u+1），并进入 CLOSE_WAIT 状态
&lt;ul&gt;&lt;li&gt;此时表明 客户端 到 服务端 的连接已经释放，不再接收 客户端 发的数据了&lt;/li&gt;
&lt;li&gt;但是因为 TCP 连接是双向的，此时处于半关闭状态服务端 仍旧可以发送数据给 客户端&lt;/li&gt;
&lt;li&gt;服务端如果此时还有没发完的数据会继续发送&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第三次挥手
&lt;ul&gt;&lt;li&gt;服务端发送完毕后向 客户端 发送连接释放请求(FIN=1,ACK=1,seq=w,ack=u+1),然后 服务端 便进入 LAST-ACK 状态&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第四次挥手
&lt;ul&gt;&lt;li&gt;客户端收到连接释放报文段后，向服务端发送确认应答&lt;/li&gt;
&lt;li&gt;然后 客户端 进入 TIME-WAIT 状态
&lt;ul&gt;&lt;li&gt;该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 服务端 收到确认应答后，也便进入 CLOSED 状态。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;首部格式&quot;&gt;首部格式&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.cdn.sugarat.top/mdImg/MTU5MzY1NDYwMDI2OQ==593654600269&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;源端口：2字节&lt;/li&gt;
&lt;li&gt;目的端口：2字节
&lt;ul&gt;&lt;li&gt;端口是运输层与应用层的服务接口。运输层的复用和分用功能都要通过端口才能实现&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;序号：4 字节
&lt;ul&gt;&lt;li&gt;TCP 连接中传送的数据流中的每一个字节都编上一个序号&lt;/li&gt;
&lt;li&gt;序号字段的值则指的是本报文段所发送的数据的第一个字节的序号&lt;/li&gt;
&lt;li&gt;报文段的序号字段值=301，而携带的数据共有100字节，则本报文段的数据第一个字节序号是301，最后一个字节的序号是400.那么下一个报文段的数据序号应当是401&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;确认号：4 字节，是期望收到对方的下一个报文段的数据的第一个字节的序号
&lt;ul&gt;&lt;li&gt;若确认号=N 则表示：到序号N-1为止的所有数据都已正确收到&lt;/li&gt;
&lt;li&gt;如果接收方B收到A发送过来的报文段，序号=501，数据长度是200字节，表明B收到了A发送的到序号700为止的数据。则B发送给A的确认报文段中把确认号设置为701&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;数据偏移：4位，指出 TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远
&lt;ul&gt;&lt;li&gt;单位是4字节&lt;/li&gt;
&lt;li&gt;实际上是TCP报文段的首部长度&lt;/li&gt;
&lt;li&gt;最大TCP报文段首部=60字节=(2^4-1)*4&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;保留字段：6 位，保留为今后使用
&lt;ul&gt;&lt;li&gt;目前应置为 0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;URG：1位，紧急（urgent）
&lt;ul&gt;&lt;li&gt;当 URG为1 时，表明紧急指针字段有效，它告诉系统此报文段中有紧急数据，应尽快传送(相当于高优先级的数据)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ACK：1位，确认（acknowledge）
&lt;ul&gt;&lt;li&gt;ACK=1时确认号才有效&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PSH：1位，推送（push）
&lt;ul&gt;&lt;li&gt;PSH = 1 的报文段，就尽快地交付接收应用进程，而不再等到整个缓存都填满了后再向上交付&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RST：1位，复位（reset）
&lt;ul&gt;&lt;li&gt;RST=1，TCP 连接中出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立运输连接&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SYN：1位，同步（synchronous）
&lt;ul&gt;&lt;li&gt;SYN = 1 表示这是一个连接请求或连接接受报文
&lt;ul&gt;&lt;li&gt;SYN=1 ACK=0: 连接请求报文段&lt;/li&gt;
&lt;li&gt;SYN=1 ACK=1：连接接收报文段&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;FIN：1位，终止（finish）
&lt;ul&gt;&lt;li&gt;FIN = 1 表明此报文段的发送端的数据已发送完毕，并要求释放运输连接&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;窗口字段：2 字节-窗口是发送本报文段的一方的接收窗口，是用来让对方设置发送窗口的依据
&lt;ul&gt;&lt;li&gt;如确认号=701，窗口字段=1000，则表示告诉对方：从701号开始，我的接收缓存还可以接收1000字节&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;检验和：2 字节，检验和字段检验的范围包括首部和数据这两部分
&lt;ul&gt;&lt;li&gt;在计算检验和时，要在 TCP 报文段的前面加上 12 字节的伪首部&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;紧急指针字段：2字节，指出在本报文段中紧急数据共有多少个字节（紧急数据放在本报文段数据的最前面）&lt;/li&gt;
&lt;li&gt;选项字段：长度可变
&lt;ul&gt;&lt;li&gt;TCP 最初只规定了一种选项，即最大报文段长度 MSS
&lt;ul&gt;&lt;li&gt;MSS 告诉对方TCP：“我的缓存所能接收的报文段的数据字段的最大长度是 MSS 个字节。”&lt;/li&gt;
&lt;li&gt;数据字段加上 TCP 首部才等于整个的 TCP 报文段&lt;/li&gt;
&lt;li&gt;所以，MSS是“TCP 报文段长度减去 TCP 首部长度”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;填充字段：这是为了使整个首部长度是 4 字节的整数倍&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;可靠传输工作原理&quot;&gt;可靠传输工作原理&lt;/h3&gt;
&lt;h4 id=&quot;停止等待arq&quot;&gt;停止等待ARQ&lt;/h4&gt;
&lt;p&gt;每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组。&lt;/p&gt;
&lt;h4 id=&quot;连续arq&quot;&gt;连续ARQ&lt;/h4&gt;
&lt;p&gt;发送方维持的发送窗口，它的意义是：位于发送窗口内的分组都可连续发送出去，而不需要等待对方的确认。这样，信道利用率就提高了&lt;/p&gt;
&lt;p&gt;连续 ARQ 协议规定，发送方每收到一个确认，就把发送窗口向前滑动一个分组的位置。&lt;/p&gt;
&lt;h4 id=&quot;流量控制&quot;&gt;流量控制&lt;/h4&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用滑动窗口实现流量控制&lt;/p&gt;
&lt;h4 id=&quot;拥塞控制&quot;&gt;拥塞控制&lt;/h4&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;拥塞控制就是防止过多的数据注入到网络中，使网络中的路由器或链路不致过载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;TCP 采用基于窗口的方法进行拥塞控制。该方法属于闭环控制方法。&lt;/li&gt;
&lt;li&gt;TCP发送方维持一个拥塞窗口 CWND
&lt;ul&gt;&lt;li&gt;拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。&lt;/li&gt;
&lt;li&gt;发送端利用拥塞窗口根据网络的拥塞情况调整发送的数据量。&lt;/li&gt;
&lt;li&gt;所以，发送窗口大小不仅取决于接收方公告的接收窗口，还取决于网络的拥塞状况，所以真正的发送窗口值为：min（公告窗口值，拥塞窗口值）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;拥塞的判断&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;重传定时器超时&lt;/li&gt;
&lt;li&gt;收到三个相同重复的ACK&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;四种控制算法&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;慢开始：由小到大逐渐增大拥塞窗口数值&lt;/li&gt;
&lt;li&gt;拥塞避免：让拥塞窗口 cwnd 缓慢地增大，即每经过一个往返时间 RTT 就把发送方的拥塞窗口 cwnd 加 1，而不是加倍，使拥塞窗口 cwnd 按线性规律缓慢增长&lt;/li&gt;
&lt;li&gt;快重传：让发送方尽早知道发生了个别报文段的丢失
&lt;ul&gt;&lt;li&gt;发送方只要一连收到三个重复确认，就知道接收方确实没有收到报文段，因而应当立即进行重传&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;快恢复：当发送端收到连续三个重复的确认时，由于发送方现在认为网络很可能没有发生拥塞，因此现在不执行慢开始算法，而是执行快恢复算法&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;适合场景-2&quot;&gt;适合场景&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;HTTP&lt;/li&gt;
&lt;li&gt;FTP&lt;/li&gt;
&lt;li&gt;SMTP&lt;/li&gt;
&lt;li&gt;文件传输&lt;/li&gt;
&lt;li&gt;游戏。。。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;tcp与udp相关问题&quot;&gt;TCP与UDP相关问题&lt;/h2&gt;
&lt;h3 id=&quot;1为什么-tcp-建立连接需要三次握手，明明两次就可以建立起连接？&quot;&gt;1.为什么 TCP 建立连接需要三次握手，明明两次就可以建立起连接？&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误&lt;/li&gt;
&lt;li&gt;如果只有1次：客户端收到请求后，没收到应答，无法判断链接是否连接成功&lt;/li&gt;
&lt;li&gt;如果只有2次：
&lt;ul&gt;&lt;li&gt;客户端发送连接请求后，等待服务器端的应答。&lt;/li&gt;
&lt;li&gt;如过客户端的SYN过了一段时间没有到达服务器端，客户端链接超时，会重新发送一次连接请求&lt;/li&gt;
&lt;li&gt;如果重发的这次服务器端收到了，且应答了客户端，连接就建立了&lt;/li&gt;
&lt;li&gt;但是建立后，第一个SYN也到达服务端了，这时服务端会认为这是一个新连接，会再给客户端发送一个ACK，这个ACK当然会被客户端丢弃&lt;/li&gt;
&lt;li&gt;但是此时服务器端已经为这个连接分配资源了，而且服务器端会一直维持着这个资源，会造成浪费&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;2三次握手过程中可以携带数据么？&quot;&gt;2.三次握手过程中可以携带数据么？&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;第三次可以携带
&lt;ul&gt;&lt;li&gt;客户端已经处于ESTABLIEISH状态，已经能够确认服务端的接收，发送能力正常，这个时候可以携带&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;前两次不可以
&lt;ul&gt;&lt;li&gt;一旦有人想攻击服务器，只需要在第一次握手中的 SYN 报文中放大量数据，那么服务器会消耗更多的时间和内存空间去处理这些数据，增大了服务器被攻击的风险&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;3为什么-a-要进入-time-wait-状态，等待-2msl-时间后才进入-closed-状态&quot;&gt;3.为什么 A 要进入 TIME-WAIT 状态，等待 2MSL 时间后才进入 CLOSED 状态&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;MSL -- Maximum Segment Lifetime -- 报文最大生存时间,最长报文寿命&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;为了保证 客户端 发送的最后一个 ACK 报文段能够到达 服务端&lt;/li&gt;
&lt;li&gt;防止 “已失效的连接请求报文段”出现在本连接中
&lt;ul&gt;&lt;li&gt;若 客户端 发完确认应答后直接进入 CLOSED 状态，如果确认应答因为网络问题一直没有到达，那么会造成 服务端 不能正常关闭。&lt;/li&gt;
&lt;li&gt;如果不等待客户端直接关闭，当服务端还有数据包要发送给客户端时，且还在传输的路上，若客户端的端口此时刚好被新的应用占用，那么就接收到了无用数据包，造成数据包混乱&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2MSL意义:
&lt;ul&gt;&lt;li&gt;1 个 MSL 确保四次挥手中主动关闭方最后的 ACK 报文最终能达到对端&lt;/li&gt;
&lt;li&gt;1 个 MSL 确保对端没有收到 ACK 重传的 FIN 报文可以到达&lt;/li&gt;
&lt;li&gt;经过2MSL,可以使本链接持续时间内所产生的所有报文段,都从网络中消失&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;4tcp与udp的区别&quot;&gt;4.TCP与UDP的区别&lt;/h3&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;UDP 协议是面向无连接的:不需要在正式传递数据之前先连接起双方&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;UDP 协议只是数据报文的搬运工:不保证有序且不丢失的传递到对端&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;UDP 协议也没有任何控制流量的算法&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;UDP 相较于 TCP 更加的轻便&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;UDP 的首部开销小，只有 8 个字节，比 TCP 的 20 个字节的首部要少得多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP面向连接的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本与UDP反着来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立连接3次握手&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;断开连接4次挥手&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;通过各种算法保持保证传输的可靠性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;http&quot;&gt;HTTP&lt;/h2&gt;
&lt;p&gt;超文本传输协议(HyperText Transfer Protocol）),基于TCP实现的应用层协议&lt;/p&gt;
&lt;h3 id=&quot;特点-3&quot;&gt;特点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;请求响应模型:客户端发送请求,服务端响应请求&lt;/li&gt;
&lt;li&gt;无状态协议:不需要建立持久链接&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;工作过程&quot;&gt;工作过程&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;地址解析&lt;/li&gt;
&lt;li&gt;封装HTTP请求数据包&lt;/li&gt;
&lt;li&gt;封装成TCP包，建立TCP链接&lt;/li&gt;
&lt;li&gt;客户端发送请求&lt;/li&gt;
&lt;li&gt;服务端响应&lt;/li&gt;
&lt;li&gt;关闭TCP链接
&lt;ul&gt;&lt;li&gt;保持链接的方案:在请求/响应头中加入 &lt;code&gt;Connection:keep-alive&lt;/code&gt;就可以保持链接打开状态&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;请求构成&quot;&gt;请求构成&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;请求行&lt;/li&gt;
&lt;li&gt;首部&lt;/li&gt;
&lt;li&gt;实体&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;响应构成&quot;&gt;响应构成&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;协议/版本号 状态码&lt;/li&gt;
&lt;li&gt;首部&lt;/li&gt;
&lt;li&gt;实体&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;请求行&quot;&gt;请求行&lt;/h3&gt;
&lt;p&gt;GET /images/logo.gif HTTP/1.1&lt;/p&gt;
&lt;p&gt;由请求方法、URL、协议版本组成&lt;/p&gt;
&lt;h3 id=&quot;请求方法&quot;&gt;请求方法&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;请求方法分为很多种，最常用的也就是 Get 和 Post 了。虽然请求方法有很多，但是更多的是传达一个语义，而不是说 Post 能做的事情 Get 就不能做了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;Get:应该只被用于获取数据&lt;/li&gt;
&lt;li&gt;Post:用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用.&lt;/li&gt;
&lt;li&gt;Put:求有效载荷替换目标资源的所有当前表示,即更新操作.&lt;/li&gt;
&lt;li&gt;Delete:删除指定的资源&lt;/li&gt;
&lt;li&gt;Patch:用于对资源应用部分修改&lt;/li&gt;
&lt;li&gt;Head:请求一个与GET请求的响应相同的响应，但没有响应体.&lt;/li&gt;
&lt;li&gt;Connect:建立一个到由目标资源标识的服务器的隧道&lt;/li&gt;
&lt;li&gt;Options:描述目标资源的通信选项&lt;/li&gt;
&lt;li&gt;Trace:沿着到目标资源的路径执行一个消息环回测试。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;uri&quot;&gt;URI&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Uniform Resource Identifier&lt;/code&gt;--统一资源标识符,用于区分互联网上不同资源&lt;/p&gt;
&lt;p&gt;&lt;code&gt;URI&lt;/code&gt; 包含 &lt;code&gt;URL&lt;/code&gt; 与 &lt;code&gt;URN&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.cdn.sugarat.top/mdImg/MTU5Mzg1NDQzMjQ4NQ==593854432485&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;URI只能使用ASCII, ASCII 之外的字符不支持显示,因此，URI 引入了编码机制，将所有非 ASCII 码字符和界定符转为十六进制字节值，然后在前面加个%&lt;/p&gt;
&lt;h3 id=&quot;url&quot;&gt;URL&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;scheme://host:port/path?query&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;scheme:协议,HTTP,HTTPS,FTP&lt;/li&gt;
&lt;li&gt;host:主机名,sugarat.top&lt;/li&gt;
&lt;li&gt;port:端口号,默认80,https默认443&lt;/li&gt;
&lt;li&gt;path:资源路径&lt;/li&gt;
&lt;li&gt;query:用于查询的参数&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;urn&quot;&gt;URN&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;path?query&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;副作用和幂等&quot;&gt;副作用和幂等&lt;/h3&gt;
&lt;h3 id=&quot;常见首部&quot;&gt;常见首部&lt;/h3&gt;
&lt;h4 id=&quot;通用首部&quot;&gt;通用首部&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;td&gt;Cache-Control&lt;/td&gt;
&lt;td&gt;控制缓存的行为&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Connection&lt;/td&gt;
&lt;td&gt;浏览器想要优先使用的连接类型，比如 keep-alive&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;创建报文时间&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Pragma&lt;/td&gt;
&lt;td&gt;报文指令&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Via&lt;/td&gt;
&lt;td&gt;代理服务器相关信息&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Transfer-Encoding&lt;/td&gt;
&lt;td&gt;传输编码方式&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Upgrade&lt;/td&gt;
&lt;td&gt;要求客户端升级协议&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Warning&lt;/td&gt;
&lt;td&gt;在内容中可能存在错误&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;请求首部&quot;&gt;请求首部&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;10&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Host&lt;/td&gt;
&lt;td&gt;访问资源所在的主机名&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Accept&lt;/td&gt;
&lt;td&gt;能正确接收的媒体类型(application/json)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Accept-Charset&lt;/td&gt;
&lt;td&gt;能正确接收的字符集&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Accept-Encoding&lt;/td&gt;
&lt;td&gt;能正确接收的编码格式列表(gzip)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;User-Agent&lt;/td&gt;
&lt;td&gt;发送请求的客户端信息&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Referer&lt;/td&gt;
&lt;td&gt;浏览器所访问的前一个页面&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;Accept-Language&lt;/td&gt;
&lt;td&gt;能正确接收的语言列表(zh-CN, zh, en)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;If-Match&lt;/td&gt;
&lt;td&gt;值与请求资源ETag相同才会处理请求&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;If-None-Match&lt;/td&gt;
&lt;td&gt;值与请求资源ETag不相同才会处理请求&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;响应首部&quot;&gt;响应首部&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Age&lt;/td&gt;
&lt;td&gt;资源在代理缓存中存在的时间&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;服务器名字&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Content-Length&lt;/td&gt;
&lt;td&gt;告知客户端资源长度&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Expires&lt;/td&gt;
&lt;td&gt;告知客户端资源失效日期&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Last-Modified&lt;/td&gt;
&lt;td&gt;告知客户端资源最后一次修改的时间&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;E-tag&lt;/td&gt;
&lt;td&gt;文件指纹，资源唯一标识符&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Location&lt;/td&gt;
&lt;td&gt;客户端重定向到某个 URL&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Proxy-Authenticate&lt;/td&gt;
&lt;td&gt;向代理服务器发送验证信息&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;cookie&quot;&gt;cookie&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;Cookie&lt;/td&gt;
&lt;td&gt;请求时携带的cookie&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Set-Cookie&lt;/td&gt;
&lt;td&gt;响应时服务端传回的cookie&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;压缩相关&quot;&gt;压缩相关&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Content-Encoding&lt;/td&gt;
&lt;td&gt;发送端使用的编码方式&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Accept-Encoding&lt;/td&gt;
&lt;td&gt;接收端支持的编码格式&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;状态码&quot;&gt;状态码&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1xx协议处理的中间状态&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;101&lt;/code&gt; 在HTTP升级为WebSocket的时候，如果服务器同意变更，就会发送状态码 101&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;2xx成功&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;200&lt;/code&gt; 客户端的请求被服务端正确处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;204&lt;/code&gt; 请求成功但响应报文不包含实体的主体部分&lt;/li&gt;
&lt;li&gt;206 范围请求,客户端进行了部分请求,服务端返回指定部分的内容&lt;/li&gt;
&lt;li&gt;205 与204作用一致但要求请求方重置内容&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;3xx重定向&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;301&lt;/code&gt; 永久性重定向,表示资源已被分配了新的url&lt;/li&gt;
&lt;li&gt;&lt;code&gt;302&lt;/code&gt; 临时性重定向,表示资源临时被分配了新的url&lt;/li&gt;
&lt;li&gt;&lt;code&gt;304&lt;/code&gt; 当客户端拥有可能过期的缓存时，会携带缓存的标识 etag、时间等信息询问服务器缓存是否仍可复用，而304是告诉客户端可以复用缓存&lt;/li&gt;
&lt;li&gt;303 资源存在另一个url,服务端要求客户端使用get请求&lt;/li&gt;
&lt;li&gt;307 临时重定向,向新的url发送同样的请求&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;4XX客户端错误&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;400&lt;/code&gt; 请求报文存在语法错误&lt;/li&gt;
&lt;li&gt;&lt;code&gt;401&lt;/code&gt; 发送的请求需要有通过 HTTP 认证的认证信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;403&lt;/code&gt; 对请求资源的访问被服务器拒绝,资源允许访问,但请求不满足条件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;404&lt;/code&gt; 在服务器上没有找到请求的资源&lt;/li&gt;
&lt;li&gt;&lt;code&gt;405&lt;/code&gt; 当前的请求方法不被允许&lt;/li&gt;
&lt;li&gt;&lt;code&gt;415&lt;/code&gt; 不支持的媒体类型,检查Content-Type&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;5XX 服务器错误&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;500&lt;/code&gt; 服务器端在收到请求后后，执行相关动作时发生了错误&lt;/li&gt;
&lt;li&gt;&lt;code&gt;502&lt;/code&gt; bad gate无效网关&lt;/li&gt;
&lt;li&gt;501 表示服务器不支持当前请求所需要的某个功能&lt;/li&gt;
&lt;li&gt;503 表明服务器暂时处于超负载或正在停机维护，无法处理请求&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;缺点&quot;&gt;缺点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;通信使用明文，可能被窃听&lt;/li&gt;
&lt;li&gt;不验证通信方的身份，可能遭遇伪装&lt;/li&gt;
&lt;li&gt;无法证明报文的完整性，有可能遭遇篡改&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;https&quot;&gt;HTTPS&lt;/h2&gt;
&lt;p&gt;HTTP + 加密 + 认证 + 完整性保护 = HTTPS&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基于HTTP协议，通过SSL或TLS协议提供加密处理数据、验证对方身份以及数据完整性保护&lt;/li&gt;
&lt;li&gt;在HTTP上建立SSL加密层，并对传输数据进行加密，是HTTP协议的安全版&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;特点-4&quot;&gt;特点&lt;/h3&gt;
&lt;p&gt;通过抓包获取到的数据不是明文传输的&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;内容加密：采用混合加密技术，中间者无法直接查看明文内容&lt;/li&gt;
&lt;li&gt;验证身份：通过证书认证客户端访问的是自己的服务器&lt;/li&gt;
&lt;li&gt;保护数据完整性：防止传输的内容被中间人冒充或者篡改&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;缺点-2&quot;&gt;缺点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;性能损耗&lt;/li&gt;
&lt;li&gt;增加延时&lt;/li&gt;
&lt;li&gt;消耗较多的CPU资源&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;优化方案&quot;&gt;优化方案&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;CDN&lt;/li&gt;
&lt;li&gt;会话缓存&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;tlsssl&quot;&gt;TLS/SSL&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;TLS是传输层加密协议，前身是SSL协议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TLS 协议位于传输层之上，应用层之下&lt;/p&gt;
&lt;p&gt;HTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密&lt;/p&gt;
&lt;h3 id=&quot;功能实现&quot;&gt;功能实现&lt;/h3&gt;
&lt;p&gt;利用非对称加密实现身份认证和密钥协商，采用对称加密算法协商的密钥对数据加密，基于散列函数验证信息的完整性&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;散列函数 Hash:MD5,SHA,SHA256---完成校验&lt;/li&gt;
&lt;li&gt;对称加密 1-1:AES,DES,RC4---信息加密&lt;/li&gt;
&lt;li&gt;非对称加密 1-N:RSA,ECC,DH---身份验证秘钥协商&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;对称加密&quot;&gt;对称加密&lt;/h4&gt;
&lt;p&gt;对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。&lt;/p&gt;
&lt;p&gt;这种加密方式固然很好，但是问题就在于如何让双方知道秘钥。因为传输数据都是走的网络，如果将秘钥通过网络的方式传递的话，一旦秘钥被截获就没有加密的意义的。&lt;/p&gt;
&lt;h4 id=&quot;非对称加密&quot;&gt;非对称加密&lt;/h4&gt;
&lt;p&gt;有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。&lt;/p&gt;
&lt;p&gt;这种加密方式就可以完美解决对称加密存在的问题。假设现在两端需要使用对称加密，那么在这之前，可以先使用非对称加密交换秘钥。&lt;/p&gt;
&lt;p&gt;简单流程如下：首先服务端将公钥公布出去，那么客户端也就知道公钥了。接下来客户端创建一个秘钥，然后通过公钥加密并发送给服务端，服务端接收到密文以后通过私钥解密出正确的秘钥，这时候两端就都知道秘钥是什么了。&lt;/p&gt;
&lt;h3 id=&quot;tls12握手过程&quot;&gt;TLS1.2握手过程&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;客户端发出请求:
&lt;ul&gt;&lt;li&gt;一个随机值(用于生成对话秘钥)&lt;/li&gt;
&lt;li&gt;支持的协议&lt;/li&gt;
&lt;li&gt;支持加密方式&lt;/li&gt;
&lt;li&gt;支持压缩的方法&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;服务端收到客户端的请求，向客户端发出回应:
&lt;ul&gt;&lt;li&gt;一个随机值(用于生成对话秘钥)&lt;/li&gt;
&lt;li&gt;确定使用的协议&lt;/li&gt;
&lt;li&gt;确定使用的加密方式&lt;/li&gt;
&lt;li&gt;发送自己的证书（如果需要验证客户端证书需要说明）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;客户端收到服务端的证书并验证是否有效，如果证书没问题,向服务端发送一个请求:
&lt;ul&gt;&lt;li&gt;生成一个随机值(用证书公钥加密)&lt;/li&gt;
&lt;li&gt;编码改变通知(随后的信息将使用双方商定的加密方法和秘钥发送)&lt;/li&gt;
&lt;li&gt;客户端握手结束通知(前面发送的所有内容的hash值，用来提供给服务端校验)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;服务端最后响应
&lt;ul&gt;&lt;li&gt;服务器收到客户端的第三个随机数之后(用私钥解密)结合之前的两个明文随机数，计算生成本次会话所用的&quot;会话密钥&quot;&lt;/li&gt;
&lt;li&gt;编码改变通知(随后的信息都将用双方商定的加密方法和密钥发送)&lt;/li&gt;
&lt;li&gt;服务器握手结束通知(前面发送的所有内容的hash值，用来提供给客户端校验)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，实现身份验证并协商对称加密使用的密钥,但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。不同的节点之间采用的对称密钥不同，从而可以保证信息只能通信双方获取&lt;/p&gt;
&lt;h3 id=&quot;tls13&quot;&gt;TLS1.3&lt;/h3&gt;
&lt;p&gt;TLS1.3 中废除了非常多的加密算法,如果私钥泄露,那么中间人可以破解所有密文&lt;/p&gt;
&lt;p&gt;TLS1.3 在 TLS1.2 的基础上废除了大量的算法，提升了安全性。同时利用会话复用节省了重新生成密钥的时间，利用 &lt;strong&gt;PSK&lt;/strong&gt; 做到了0-RTT连接&lt;/p&gt;
&lt;h2 id=&quot;http2&quot;&gt;HTTP2&lt;/h2&gt;
&lt;p&gt;HTTP/2 相比于 HTTP/1，大幅度提高了网页的性能&lt;/p&gt;
&lt;p&gt;在 HTTP/1 中,浏览器限制了同一个域名下的请求数量（Chrome 下一般是限制六个连接）&lt;/p&gt;
&lt;p&gt;当页面中需要请求很多资源的时候，队头阻塞（Head of line blocking）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求&lt;/p&gt;
&lt;h3 id=&quot;特点-5&quot;&gt;特点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;HTTP/2 中引入了多路复用的技术，这个技术可以只通过一个 TCP 连接就可以传输所有的请求数据。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也间接更容易实现全速传输&lt;/li&gt;
&lt;li&gt;在之前的 HTTP 版本中，我们是通过文本的方式传输数据。在 HTTP/2 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;多路复用&quot;&gt;多路复用&lt;/h3&gt;
&lt;p&gt;在 HTTP/2 中，有两个非常重要的概念，分别是:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;帧（frame）&lt;/strong&gt; 代表最小的数据单位，每个帧会标识出该帧属于哪个流&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流（stream）&lt;/strong&gt; 是多个帧组成的数据流&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。&lt;/p&gt;
&lt;p&gt;通过这个技术，多个请求共享一个TCP连接，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能&lt;/p&gt;

&lt;p&gt;在 HTTP/1 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。&lt;/p&gt;
&lt;p&gt;在 HTTP /2 中，使用了 HPACK 压缩格式对传输的 header 进行编码，减少了 header 的大小。并在两端维护了索引表，用于记录出现过的 header ，后面在传输过程中就可以传输已经记录过的 header 的键名，对端收到数据后就可以通过键名找到对应的值&lt;/p&gt;
&lt;h3 id=&quot;服务端-push&quot;&gt;服务端 Push&lt;/h3&gt;
&lt;p&gt;在 HTTP/2 中，服务端可以在客户端某个请求后，主动推送其他资源。&lt;/p&gt;
&lt;p&gt;可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样在使用的时候就可以相对减少一点延迟时间。&lt;/p&gt;
&lt;h3 id=&quot;设置请求优先级&quot;&gt;设置请求优先级&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;可在新建的流所传递HEADERS帧中包含优先级priority属性&lt;/li&gt;
&lt;li&gt;可单独通过PRIORITY帧专门设置流的优先级属性&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;使用前置条件&quot;&gt;使用前置条件&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;支持HTTP2的客户端与服务端&lt;/li&gt;
&lt;li&gt;域名必须支持HTPPS协议（基于TLS/1.2或以上版本的加密连接）&lt;/li&gt;
&lt;li&gt;服务器的openssl版本必须大于1.0.2&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;可通过Nginx搭建HTTP2服务器&lt;/p&gt;
&lt;h2 id=&quot;http3&quot;&gt;HTTP3&lt;/h2&gt;
&lt;p&gt;HTTP/2 使用了多路复用&lt;/p&gt;
&lt;p&gt;一般来说同一域名下只需要使用一个 TCP 连接。当这个连接中出现了丢包的情况，那就会导致 HTTP/2 的表现情况反倒不如 HTTP/1 了&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了&lt;/li&gt;
&lt;li&gt;对于 HTTP/1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;基于这个原因，Google 就更起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP/3 上&lt;/p&gt;
&lt;h3 id=&quot;quic&quot;&gt;QUIC&lt;/h3&gt;
&lt;p&gt;QUIC 基于 UDP，在原本的基础上新增了很多功能&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;多路复用&lt;/li&gt;
&lt;li&gt;0-RTT&lt;/li&gt;
&lt;li&gt;使用TLS1.3加密&lt;/li&gt;
&lt;li&gt;流量控制&lt;/li&gt;
&lt;li&gt;有序交付&lt;/li&gt;
&lt;li&gt;重传&lt;/li&gt;
&lt;li&gt;。。。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;一种全新的基于UDP的web开发协议。可以用一个公式大致概括：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP + TLS + HTTP2 = UDP + QUIC + HTTP2’s API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;QUIC协议虽然是基于UDP，但它不但具有TCP的可靠性、拥塞控制、流量控制等，且在TCP协议的基础上做了一些改进，比如避免了队首阻塞；&lt;/p&gt;
&lt;p&gt;另外，QUIC协议具有TLS的安全传输特性，实现了TLS的保密功能，同时又使用更少的RTT建立安全的会话。&lt;/p&gt;
&lt;h3 id=&quot;多路复用-2&quot;&gt;多路复用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;无队头阻塞的多路复用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;QUIC 原生实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题&lt;/p&gt;
&lt;p&gt;QUIC 在移动端的表现也会比 TCP 好:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的&lt;/li&gt;
&lt;li&gt;QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;0-rtt&quot;&gt;0-RTT&lt;/h3&gt;
&lt;h4 id=&quot;与其他协议比较&quot;&gt;与其他协议比较&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;TCP建立链接需要三次握手，每次连接需要额外的RTT&lt;/li&gt;
&lt;li&gt;HTTPS加入了TLS还需要额外的RTT&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;0-rtt情况&quot;&gt;0-RTT情况&lt;/h4&gt;
&lt;p&gt;通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了&lt;/p&gt;
&lt;h4 id=&quot;1-rtt情况&quot;&gt;1-RTT情况&lt;/h4&gt;
&lt;p&gt;新的QUIC连接至少需要1 RTT才能完成握手&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.cdn.sugarat.top/mdImg/MTU4NDMyMzc2NTY2MA==584323765660&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;纠错机制&quot;&gt;纠错机制&lt;/h3&gt;
&lt;p&gt;假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包&lt;/p&gt;
&lt;p&gt;当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。&lt;/p&gt;
&lt;p&gt;当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了&lt;/p&gt;
&lt;h2 id=&quot;结构对比图&quot;&gt;结构对比图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.cdn.sugarat.top/mdImg/MTU4NTcxMzIwNDc0Nw==585713204747&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结http23&quot;&gt;总结HTTP/2|3&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;HTTP/2 通过多路复用、二进制流、Header 压缩等等技术，极大地提高了性能，但是还是存在着一定的问题的&lt;/li&gt;
&lt;li&gt;QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议，但目前兼容性并不好&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;http相关问题&quot;&gt;HTTP相关问题&lt;/h2&gt;
&lt;h3 id=&quot;1post和get区别&quot;&gt;1.POST和GET区别&lt;/h3&gt;
&lt;h4 id=&quot;使用场景上区分&quot;&gt;使用场景上区分&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;GET多用于无副作用，幂等&lt;/li&gt;
&lt;li&gt;POST多用于有副作用，不冪等&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;技术上&quot;&gt;技术上&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;GET会缓存，POST不会缓存&lt;/li&gt;
&lt;li&gt;GET请求参数会出现在url中，post相对安全一点&lt;/li&gt;
&lt;li&gt;URL有长度限制，会影响GET请求（浏览器规定）&lt;/li&gt;
&lt;li&gt;POST支持更多的编码类型，且不对数据做限制&lt;/li&gt;
&lt;li&gt;GET只能进行URL编码，只能接受ASCII字符&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;2http与https区别&quot;&gt;2.HTTP与HTTPS区别&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;安全：HTTP明文传输数据，HTTPS是在HTTP上建立SSL/TLS加密层，并对传输数据进行加密，更加安全&lt;/li&gt;
&lt;li&gt;端口：http使用80端口，https使用443&lt;/li&gt;
&lt;li&gt;速度：HTTP页面响应速度更快
&lt;ul&gt;&lt;li&gt;HTTP只需建立TCP连接，发送3个包&lt;/li&gt;
&lt;li&gt;HTTPS还需要经历TLS握手9个包需要，一共12个&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;3http11-如何解决-http-的队头阻塞问题？&quot;&gt;3.HTTP1.1 如何解决 HTTP 的队头阻塞问题？&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;域名分片：使用多个指向同一服务器的二级域名&lt;/li&gt;
&lt;li&gt;并发连接：也就是同时对一个域名发起多个长连接，用数量来解决质量的问题
&lt;ol&gt;&lt;li&gt;浏览器一般会有限制&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;4如果响应头content-length0那么是发出来被截取了还是没发出来&quot;&gt;4.如果响应头Content-Length=0那么是发出来被截取了还是没发出来&lt;/h3&gt;
&lt;p&gt;结论：发出来被截取了&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Content-Length比实际的长度大, 服务端/客户端读取到消息结尾后, 会等待下一个字节,无响应直到超时&lt;/li&gt;
&lt;li&gt;Content-Length &amp;lt; 实际长度:首次请求的消息会被截取&lt;/li&gt;
&lt;li&gt;Content-Length如果存在且生效, 必须是正确的, 否则会发生异常&lt;/li&gt;
&lt;li&gt;如果报文中包含Transfer-Encoding: chunked首部, 那么Content-Length将被忽略.&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 04 Jul 2020 15:07:00 +0000</pubDate>
<dc:creator>粥里有勺糖</dc:creator>
<og:description>前端备战秋招之计算机网络 文章内容较长，希望阅读的同学能够细品，如内容有差错，还请评论区斧正 个人博客上查看原文 常见协议的端口 OSI体系结构 自低向上(7层结构) 物理层 数据链路层 网络层 传输</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/roseAT/p/13237135.html</dc:identifier>
</item>
<item>
<title>生产全链路压测实践之道 - 老_张</title>
<link>http://www.cnblogs.com/imyalost/p/13236978.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imyalost/p/13236978.html</guid>
<description>&lt;p data-lake-id=&quot;e02d97da5627e76d5d85c6b5f669dc6e&quot;&gt;&lt;span&gt;每年的618&amp;amp;双11，对于电商公司来说都是一次大考。为了应对活动当天的瞬时峰值流量，进行全链路压测是很有必要的一项技术工程。&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;e02d97da5627e76d5d85c6b5f669dc6e&quot;&gt;&lt;span&gt;而且全链路压测除了对核心链路进行性能问题排查优化之外，还能发现很多日常迭代中累积的小问题，对团队协同作战能力，也是一个很好的提升。&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;81389b691a8361baf76f7264cbf40e06&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p data-lake-id=&quot;74e6415cd085a673faeb14e3d9d65258&quot;&gt;&lt;span&gt;从去年双11到今年618，我司的全链路压测体系建设，总体来说经历了如下三次演进：&lt;/span&gt;&lt;/p&gt;
&lt;table class=&quot;lake-table&quot;&gt;&lt;colgroup&gt;&lt;col span=&quot;1&quot; width=&quot;73&quot;/&gt;&lt;col span=&quot;1&quot; width=&quot;90&quot;/&gt;&lt;col span=&quot;1&quot; width=&quot;147&quot;/&gt;&lt;col span=&quot;1&quot; width=&quot;215&quot;/&gt;&lt;col span=&quot;1&quot; width=&quot;198&quot;/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;10.5&quot;&gt;&lt;tr&gt;&lt;td&gt;
&lt;p data-lake-id=&quot;e9b6af9fa66c454db7ae73f31d7714a6_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;&lt;strong&gt;时间节点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p data-lake-id=&quot;a20d224c568e48b9d67847a2c66a8c01_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;1&quot;&gt;
&lt;p data-lake-id=&quot;f26e6814bfc24c56b8af9c03e67230d5_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;&lt;strong&gt;压测方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;1&quot;&gt;
&lt;p data-lake-id=&quot;2150ac97fbb23fb729d99e15e549bcf2_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;1&quot;&gt;
&lt;p data-lake-id=&quot;d79f1fcb736eabc817a18c00a561849f_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td&gt;
&lt;p data-lake-id=&quot;f5288918051daac58a0cdf74b1d666a8_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;19年双11&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p data-lake-id=&quot;f5288918051daac58a0cdf74b1d666a8_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;1:1等比环境&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;1&quot;&gt;
&lt;p data-lake-id=&quot;a20d224c568e48b9d67847a2c66a8c01_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;Jmeter分布式压测&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;1&quot; readability=&quot;9&quot;&gt;
&lt;p data-lake-id=&quot;a20d224c568e48b9d67847a2c66a8c01_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;1）完全生产等比环境&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;ca424989c9fa659e6b72e0b10199ed03&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;2）不用担心造成生产脏写&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;80c4388eb2e0619f3cd2e9612c45b17b&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;3）不用担心影响正常生产业务&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;1&quot; readability=&quot;7&quot;&gt;
&lt;p data-lake-id=&quot;a20d224c568e48b9d67847a2c66a8c01_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;1）环境成本高昂&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;9f498c3780dfe671a1a8969128e3381d&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;2）联调部署麻烦耗时&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;5cd5fd66931b2fe2c660648c07ef6252&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;2）无法真实模拟生产环境&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td&gt;
&lt;p data-lake-id=&quot;9fbd94c13672aea07dc385cfa9dc0f14_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;核心系统重构&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p data-lake-id=&quot;a20d224c568e48b9d67847a2c66a8c01_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;混部环境&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;1&quot;&gt;
&lt;p data-lake-id=&quot;5fc8af489bb96ce8c4a61cf0699fba19&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;Jmeter分布式压测&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;5c49f544829bade15b69afdc011986b8_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;流量标+影子库+Mock&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;1&quot; readability=&quot;9&quot;&gt;
&lt;p data-lake-id=&quot;a20d224c568e48b9d67847a2c66a8c01_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;1）重构服务可以视为生产服务&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;94d3f6c43ed22b8a2e64cd4f6dbcbd46&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;2）部分业务走生产环境(灰度验证)&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;3d998dde1010030e5ba28bdc2ca84d6f&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;3）压测团队精力更加专注&amp;amp;谨慎&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;1&quot; readability=&quot;9&quot;&gt;
&lt;p data-lake-id=&quot;a20d224c568e48b9d67847a2c66a8c01_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;1）环境复杂，问题排查困难&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;1c6103caf7995d75aad6cc1366961c2e&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;2）可能会对生产造成脏写&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;d05094f66106e0199a20cefb1fac85f5&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;3）时间紧张，需要做更多取舍&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td&gt;
&lt;p data-lake-id=&quot;2437cac6ad8f03448ae403be9a3af9ed_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;20年618&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p data-lake-id=&quot;252e6fc957ef99acc66513a430d6e043_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;生产环境&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;1&quot;&gt;
&lt;p data-lake-id=&quot;5fc8af489bb96ce8c4a61cf0699fba19&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;Jmeter分布式压测&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;5c49f544829bade15b69afdc011986b8_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;流量标+影子库+Mock&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;1&quot; readability=&quot;9&quot;&gt;
&lt;p data-lake-id=&quot;a20d224c568e48b9d67847a2c66a8c01_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;1）环境成本几乎为0&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;dbf02e3f49f206bf3ffffab282b107c9&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;2）完全真实环境，请求流转更真实&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;60d8b4bf20a72d670ad0743f80fd3eb3&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;3）团队协同能力快速提升&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;1&quot; readability=&quot;9&quot;&gt;
&lt;p data-lake-id=&quot;f5288918051daac58a0cdf74b1d666a8_p_0&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;1）需要更精细的前期梳理&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;a3f30096de019c8ebeb259deea753f8a&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;2）只能流量低峰压测（通宵）&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;00a5eeec7fe43b16b2b6405ed3c69fdb&quot;&gt;&lt;span class=&quot;lake-fontsize-9&quot;&gt;3）无法做到流量&amp;amp;机器隔离&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p data-lake-id=&quot;c6717556c0e11c5a71afc1062054a9bc&quot;&gt;&lt;span&gt;从上可看出，生产环境全链路压测的优点还是很多的，总结下来重点是下面几点：&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;c32cc6ac7f727d5225166e53305736d2&quot;&gt;&lt;span&gt;1）大幅度节省环境成本；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;7c94fc7780bfc41de2e38062a6afb653&quot;&gt;&lt;span&gt;2）完全真实请求场景；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;3351faa8a6836a15ec6f371d597aa8a9&quot;&gt;&lt;span&gt;3）快速发现存在问题；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;8a39f2efce4534bfb27c4f5ca386abf8&quot;&gt;&lt;span&gt;4）推动技术建设落地；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;fae75c429815a6b5e3fac0dc959d6aca&quot;&gt;&lt;span&gt;5）团队协同能力提升；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;13fe60d1a848501fcc5abd663b48c827&quot;&gt;&lt;span&gt;6）故障响应处理提效；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;b3b3ac07b85d6f9027ae0e22e43cb818&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p id=&quot;sABdv&quot; data-lake-id=&quot;ea3fcc8041fc473185a8ac7942b4be53&quot;&gt;&lt;strong&gt;&lt;span&gt;1、链路梳理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;e58aea6b80f71c4dd21fb751bb889342&quot;&gt;&lt;span&gt;&lt;strong&gt;1-业务场景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;cf824837f24f28450e9c99abdb256afc&quot;&gt;&lt;span&gt;业务场景的梳理，主要目的是识别核心链路+场景模型；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;61ca4d99fbe7b5388a8d1a182174d09c&quot;&gt;&lt;span&gt;&lt;strong&gt;2-上下依赖&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;0295825cd0db7f038f80a471895f66d2&quot;&gt;&lt;span&gt;根据核心链路+场景模型的梳理，分析出它们的上下游依赖（强弱依赖、MQ、job）；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;6523059348ea94f14627d27bb1d321e0&quot;&gt;&lt;span&gt;&lt;strong&gt;3-接口文档&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;27d248e81698cccbf46765df2296be99&quot;&gt;&lt;span&gt;随着业务版本迭代，涉及到接口逻辑变更，信息无法做到及时更新。如果无法提前进行梳理，在服务联调过程中容易出现各种莫名其妙的问题。&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;48f22d6ab99ac179389f70823fea134e&quot;&gt;&lt;span&gt;&lt;strong&gt;4-流量配比&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;238efadaf07187e8968e3e5093e1f072&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;流量配比是个很玄学的问题！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;2250fe6d0ee1f0230a815daa4727cb29&quot;&gt;&lt;span&gt;真实的用户请求走哪些链路，各自占比多少？不同的业务场景，日常和周末、大促相比，占比又是多少？&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;7cff89471a87d2fe8e2630bc6edd5f1b&quot;&gt;&lt;span&gt;这些数据都是实时变化的，我们能做的，只有针对性的评估计算出一个大体范围，并留有一定冗余空间。&lt;/span&gt;&lt;/p&gt;
&lt;p id=&quot;OvLrt&quot; data-lake-id=&quot;37cf774c2d2f893956e16c645017d72c&quot;&gt;&lt;strong&gt;&lt;span&gt;2、模型梳理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;680c503b33d4d4cb43c322a76e5e78a9&quot;&gt;&lt;span&gt;&lt;strong&gt;1-压测范围&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;acd3de870cb93a542f68587219cd5719&quot;&gt;&lt;span&gt;其实压测范围和核心链路梳理很类似，不过范围界定更多的是从业务角度来划分。对电商公司来说，核心的业务永远是商品、库存、订单、支付！&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;0117c912dd5f8fff91f5288a69de6ef6&quot;&gt;&lt;span&gt;&lt;strong&gt;2-压测模型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;111a6e75145a3b4abe2edbac2d9fe540&quot;&gt;&lt;span&gt;压测模型，以我个人经验，主要可以从如下几个维度去划分：&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;075276c1ba98467bb5d83ff531d8eaa5&quot;&gt;&lt;span&gt;&lt;strong&gt;1）单机单接口基准（接口级别）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;6a22e8bd561c85459e7b946a0d7b704c&quot;&gt;&lt;span&gt;单机单接口的压测，可以通过梯度增加请求的方式，观察接口随着请求的增加，其性能表现&amp;amp;资源损耗的变化。&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;34be684e8d4a134bb9bda516aee62518&quot;&gt;&lt;span&gt;&lt;strong&gt;2）单机混合链路场景（服务级别）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;94ca19d3d6af471d3ec93940119d325a&quot;&gt;&lt;span&gt;单机混合场景，大多还是通过梯度增加请求的方式，观察服务级别的性能表现，重点关注3个指标：&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;1b59960ef6a0ec46145ae4f33eda4ba3&quot;&gt;&lt;span&gt;①.安全水位（CPU50%）&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;a5c3c2cd4eb35c9d3b2c779026068c02&quot;&gt;&lt;span&gt;②.告警水位（CPU70%）&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;5c9d5eaff89520a393e852643d291de5&quot;&gt;&lt;span&gt;③.最大水位（CPU≥90%&amp;amp;Load5≥150%）&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;a7fe37c69671455a2003a3bec3587675&quot;&gt;&lt;span&gt;&lt;strong&gt;3）全链路压测场景（生产集群）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;0e36b53c33e17132be69ef96aa82facf&quot;&gt;&lt;span&gt;针对生产集群的全链路压测，需要涉及的压测模型较多，一般有如下几种：&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;69ab64bb2b3760cb19b7b3e16e40f5c0&quot;&gt;&lt;span&gt;①.梯度增加模型：主要为了探测集群模式下系统的最大吞吐量（也避免压垮服务，造成事故）&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;2d1d8f58578fda6ec6505f1d8dcad07a&quot;&gt;&lt;span&gt;②.固定并发模型：验证系统长期处于负载下的稳定性；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;8eecbd40386783fc93fbbbf8f9877638&quot;&gt;&lt;span&gt;③.脉冲并发模型：探测系统的健壮性、验证限流熔断等服务保护措施的正确性&amp;amp;可用性；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;58960b99d467434cfe37626d0cb26efe&quot;&gt;&lt;span&gt;④.超卖验证模型：对电商业务来说，主要针对一些限时抢购&amp;amp;秒杀的场景；一般这种场景，会涉及到分布式锁、&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;88c0dffed90174676874643d06134d6a&quot;&gt;&lt;span&gt;缓存、数据一致性等技术点；玩不好的话，容易造成客诉、资损、甚至服务异常宕机！&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;5114fed2c4430bbbc77a343ba94cbc47&quot;&gt;&lt;span&gt;&lt;strong&gt;3-流量模型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;5114fed2c4430bbbc77a343ba94cbc47&quot;&gt;&lt;span&gt;出于保密原则，流量模型请参考我之前的博客：&lt;a href=&quot;https://www.cnblogs.com/imyalost/p/11811142.html&quot; target=&quot;_blank&quot;&gt;全链路压测第一次实践&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;b0714638d037ef54a53346918878ecf3&quot;&gt;&lt;span&gt;&lt;strong&gt;4-压测方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;dc7fd33a2a3811514442337b6d899713&quot;&gt;&lt;span&gt;做完前期的准备工作，建议输出一份压测方案，核心就一句话：&lt;strong&gt;&lt;span&gt;任务拆解，设定里程碑！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;bc8e16259886b5ec86648cc072c0aaaa&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom lake-selected&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F403166%2F1592064911281-c3794044-9cd3-411f-98e2-dbb85e06a3f5.png%22%2C%22originWidth%22%3A1405%2C%22originHeight%22%3A675%2C%22name%22%3A%22image.png%22%2C%22size%22%3A144082%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A500.64893%2C%22y%22%3A9.165699%2C%22width%22%3A63.340269999999975%2C%22height%22%3A17.285038%2C%22text%22%3A%22%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E%22%7D%2C%7B%22x%22%3A19.38852%2C%22y%22%3A10.017478%2C%22width%22%3A33.729617%2C%22height%22%3A16.999045%2C%22text%22%3A%22%E5%BA%A7%E5%8F%B7%22%7D%2C%7B%22x%22%3A99.4176%2C%22y%22%3A10.056603%2C%22width%22%3A33.98711%2C%22height%22%3A17.182291999999997%2C%22text%22%3A%22%E9%98%B6%E6%AE%B5%22%7D%2C%7B%22x%22%3A1028.6486%2C%22y%22%3A10.605479%2C%22width%22%3A64.02999999999997%2C%22height%22%3A16.890237%2C%22text%22%3A%22%E5%89%8D%E5%9B%BA%E4%BE%9D%E7%BA%BF%22%7D%2C%7B%22x%22%3A224.68993%2C%22y%22%3A10.820678%2C%22width%22%3A62.58713999999998%2C%22height%22%3A15.670392000000001%2C%22text%22%3A%22%E8%8D%B7%E5%8A%9E%E5%8D%8A%E9%A1%B9%22%7D%2C%7B%22x%22%3A1151.7703%2C%22y%22%3A10.908017%2C%22width%22%3A33.59760000000006%2C%22height%22%3A15.693378000000001%2C%22text%22%3A%22%E7%8A%B6%E6%80%81%22%7D%2C%7B%22x%22%3A834.91156%2C%22y%22%3A10.939609%2C%22width%22%3A60.46843999999999%2C%22height%22%3A15.546875999999997%2C%22text%22%3A%22%E5%BC%80%E5%A7%8B%E6%97%B6%E5%90%91%22%7D%2C%7B%22x%22%3A1290.7107%2C%22y%22%3A11.018368%2C%22width%22%3A32.219299999999976%2C%22height%22%3A15.716492999999998%2C%22text%22%3A%22%E8%A1%A1%E6%B3%A8%22%7D%2C%7B%22x%22%3A923.20886%2C%22y%22%3A11.539959%2C%22width%22%3A60.540770000000066%2C%22height%22%3A15.830976%2C%22text%22%3A%22%E7%BB%93%E4%B9%98%E6%97%B6%E9%97%A8%22%7D%2C%7B%22x%22%3A389.6789%2C%22y%22%3A41.54803%2C%22width%22%3A284.0688%2C%22height%22%3A18.864663%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%E7%89%B9%E4%B8%B4%E8%AE%A4%2C%E5%A6%82%3A%E9%A1%B5%2B%E4%B8%8B%E5%8D%95%2B%E6%94%AF%E4%BB%98%2B%E6%B4%BB%E5%8A%A8%22%7D%2C%7B%22x%22%3A1152.1929%2C%22y%22%3A44.33189%2C%22width%22%3A32.878799999999956%2C%22height%22%3A15.075175999999999%2C%22text%22%3A%22%E5%BE%97%E5%8A%9E%22%7D%2C%7B%22x%22%3A445.6771%2C%22y%22%3A75.91444%2C%22width%22%3A172.87454000000002%2C%22height%22%3A17.933440000000004%2C%22text%22%3A%22%E4%B8%89%E5%87%BA%E6%A1%A3%E6%9E%B6%3Afusion%2Bfeign%22%7D%2C%7B%22x%22%3A175.88858%2C%22y%22%3A87.49555%2C%22width%22%3A160.83228000000003%2C%22height%22%3A18.966000000000008%2C%22text%22%3A%22%E6%8A%80%E6%9C%AF%E6%9E%A2%E6%9E%B6%26%E5%8E%8B%E6%B5%8B%E6%96%B9%E5%BC%8F%26%E5%8E%8B%22%7D%2C%7B%22x%22%3A938.1138%2C%22y%22%3A99.002846%2C%22width%22%3A25.61480000000006%2C%22height%22%3A17.852723999999995%2C%22text%22%3A%225.6%22%7D%2C%7B%22x%22%3A852.5448%2C%22y%22%3A99.30944%2C%22width%22%3A25.32560000000001%2C%22height%22%3A18.97206%2C%22text%22%3A%225.6%22%7D%2C%7B%22x%22%3A1147.0559%2C%22y%22%3A99.4673%2C%22width%22%3A45.70349999999985%2C%22height%22%3A18.858220000000003%2C%22text%22%3A%22%E5%B7%B2%E5%AE%8C%E6%88%90%22%7D%2C%7B%22x%22%3A428.06738%2C%22y%22%3A99.62604%2C%22width%22%3A212.09625999999997%2C%22height%22%3A18.904290000000003%2C%22text%22%3A%22%E5%8E%8B%E8%B4%A7%3Atcpdumotgoreplay%22%7D%2C%7B%22x%22%3A215.15999%2C%22y%22%3A112.58396%2C%22width%22%3A78.74301000000003%2C%22height%22%3A16.531930000000003%2C%22text%22%3A%22%E6%B5%8B%E7%8E%AF%E5%AE%89%E8%82%B2%E8%AE%A4%22%7D%2C%7B%22x%22%3A457.99243%2C%22y%22%3A124.94162%2C%22width%22%3A150.18543%2C%22height%22%3A17.10991999999999%2C%22text%22%3A%22%E5%8E%8B%E5%B7%9D%E7%8E%AF%E5%A0%A4%3A%E7%94%9F%E4%BA%A7%E7%8E%AF%E7%AB%99%22%7D%2C%7B%22x%22%3A1145.3235%2C%22y%22%3A155.61731%2C%22width%22%3A44.94139999999993%2C%22height%22%3A17.00068999999999%2C%22text%22%3A%22%E8%BF%9B%E8%A1%8C%E4%B8%AD%22%7D%2C%7B%22x%22%3A443.15366%2C%22y%22%3A156.5581%2C%22width%22%3A180.88984%2C%22height%22%3A20.449759999999998%2C%22text%22%3A%22%E6%8C%89%E7%85%A7%E4%B8%9A%E5%8A%A1%E9%92%B1%2B%E6%9C%8D%E5%8A%A1%E6%96%B9%E5%BC%8F%E6%9D%AD%E7%90%86%22%7D%2C%7B%22x%22%3A180.15425%2C%22y%22%3A157.68253%2C%22width%22%3A151.64905%2C%22height%22%3A18.298059999999992%2C%22text%22%3A%22%E6%8E%A5%E5%85%A5%E6%B5%81%E8%BD%A6%E6%A0%87%E7%9A%84%E7%A8%8B%E5%8A%A1%E5%8C%BB%E7%90%86%22%7D%2C%7B%22x%22%3A937.3743%2C%22y%22%3A157.7886%2C%22width%22%3A30.177340000000072%2C%22height%22%3A16.604250000000008%2C%22text%22%3A%22515%22%7D%2C%7B%22x%22%3A1146.7291%2C%22y%22%3A190.8615%2C%22width%22%3A46.68180000000007%2C%22height%22%3A15.121530000000007%2C%22text%22%3A%22%E4%B8%89%E8%A1%8C%E4%B8%AD%22%7D%2C%7B%22x%22%3A462.4307%2C%22y%22%3A191.1006%2C%22width%22%3A137.32510000000002%2C%22height%22%3A16.613760000000013%2C%22text%22%3A%22%E7%AC%AC%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%26%E7%89%A9%E6%B5%81%E7%AD%89%22%7D%2C%7B%22x%22%3A937.1017%2C%22y%22%3A191.5784%2C%22width%22%3A31.583999999999946%2C%22height%22%3A14.873730000000023%2C%22text%22%3A%225.15%22%7D%2C%7B%22x%22%3A177.96321%2C%22y%22%3A191.64749%2C%22width%22%3A156.53005000000002%2C%22height%22%3A16.219869999999986%2C%22text%22%3A%22%E5%A4%96%E5%8A%A8%E4%BE%9D%E7%88%B1%26mock%E9%A1%B9%E8%B4%A8%E7%A8%8B%22%7D%2C%7B%22x%22%3A174.64035%2C%22y%22%3A220.52335%2C%22width%22%3A162.74181999999996%2C%22height%22%3A21.760340000000014%2C%22text%22%3A%22%E6%B5%81%E7%A9%BA%E8%AF%84%E4%BC%B0%26%E6%98%8E%E7%A8%B3%E7%9B%B8%E5%85%B3%E6%8C%87%E6%A0%87%22%7D%2C%7B%22x%22%3A1234.7781%2C%22y%22%3A222.67778%2C%22width%22%3A141.4396999999999%2C%22height%22%3A16.518839999999983%2C%22text%22%3A%22%E4%BB%A519%E5%B9%B4%E5%8F%8C%E5%8D%81%E4%BA%8C%E4%B8%BAbasic%22%7D%2C%7B%22x%22%3A414.05334%2C%22y%22%3A222.47717%2C%22width%22%3A236.05372000000006%2C%22height%22%3A18.352249999999998%2C%22text%22%3A%22%E7%97%9B%E5%AE%9A%E9%A2%84%E4%BC%B0%E7%9A%84%E4%BC%AF%E6%B5%81%E5%9E%8B%2C%E4%BD%8E%E4%BA%8E%E8%AE%AF%E4%B9%8F%E9%85%8D%E7%BD%AE%22%7D%2C%7B%22x%22%3A940.5602%2C%22y%22%3A223.65228%2C%22width%22%3A24.193599999999947%2C%22height%22%3A16.28752%2C%22text%22%3A%225.6%22%7D%2C%7B%22x%22%3A853.2119%2C%22y%22%3A223.97319%2C%22width%22%3A24.40265999999997%2C%22height%22%3A15.802350000000018%2C%22text%22%3A%225.6%22%7D%2C%7B%22x%22%3A85.61491%2C%22y%22%3A244.30983%2C%22width%22%3A63.71909000000001%2C%22height%22%3A16.787889999999976%2C%22text%22%3A%22%E6%B1%9F%E5%A4%87%E4%BB%B7%E6%AE%B5%22%7D%2C%7B%22x%22%3A221.99432%2C%22y%22%3A254.7607%2C%22width%22%3A64.37833000000003%2C%22height%22%3A17.077249999999964%2C%22text%22%3A%22%E8%93%9D%E6%8E%A7%E7%9B%B8%E5%85%B3%22%7D%2C%7B%22x%22%3A432.49316%2C%22y%22%3A255.0123%2C%22width%22%3A195.53164000000004%2C%22height%22%3A16.108199999999982%2C%22text%22%3A%22%E5%90%84%E5%8E%85%E5%90%AF%E6%8E%A7%E5%A4%A7%E7%9B%98%2C%E7%9F%A5%E4%BB%B6%E6%8E%A5%E5%85%A5%E6%9E%AA%E6%9F%A5%22%7D%2C%7B%22x%22%3A1225.8447%2C%22y%22%3A256.08365%2C%22width%22%3A167.4351999999999%2C%22height%22%3A17.764890000000037%2C%22text%22%3A%22%E5%8E%8B%E6%BB%A9%E8%93%9D%E6%8E%A7%E5%A4%A7%E4%BA%94%E6%96%B0%E7%BB%98%E5%88%B6%22%7D%2C%7B%22x%22%3A435.29538%2C%22y%22%3A287.9962%2C%22width%22%3A190.13558999999998%2C%22height%22%3A18.630480000000034%2C%22text%22%3A%22sentine%E6%B1%BD%E5%92%8C%E5%85%B3%E7%A5%96%E4%BB%B6%E6%8A%80%E5%85%A5%E6%A3%80%22%7D%2C%7B%22x%22%3A223.23102%2C%22y%22%3A288.2595%2C%22width%22%3A64.15487999999999%2C%22height%22%3A19.083460000000002%2C%22text%22%3A%22%E8%81%94%E5%8A%A1%E6%B2%BB%E7%90%86%22%7D%2C%7B%22x%22%3A1150.9663%2C%22y%22%3A288.27826%2C%22width%22%3A35.20479999999998%2C%22height%22%3A17.929810000000032%2C%22text%22%3A%22%E8%A1%8C%E5%8A%9E%22%7D%2C%7B%22x%22%3A1224.5116%2C%22y%22%3A320.8652%2C%22width%22%3A171.48689999999988%2C%22height%22%3A17.876440000000002%2C%22text%22%3A%22%E6%9C%891%E5%80%8D%E7%88%B8%E7%94%A8%E5%92%A8%E6%BA%90%2C%E9%A2%84%E8%AE%A1%E6%96%B0%E5%A1%94%22%7D%2C%7B%22x%22%3A186.50203%2C%22y%22%3A332.20007%2C%22width%22%3A133.98257%2C%22height%22%3A21.549080000000004%2C%22text%22%3A%22%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E8%B5%84%E6%BA%90%E9%A2%84%E5%90%8D%22%7D%2C%7B%22x%22%3A1146.1945%2C%22y%22%3A332.42282%2C%22width%22%3A46.79340000000002%2C%22height%22%3A16.827909999999974%2C%22text%22%3A%22%E8%BF%9B%E8%A1%8C%E4%B8%AD%22%7D%2C%7B%22x%22%3A481.9965%2C%22y%22%3A333.0376%2C%22width%22%3A98.67479999999995%2C%22height%22%3A16.24092999999999%2C%22text%22%3A%22ECS%2FDB%2FMO%22%7D%2C%7B%22x%22%3A1250.6815%2C%22y%22%3A347.3433%2C%22width%22%3A113.95940000000019%2C%22height%22%3A15.384569999999997%2C%22text%22%3A%221%E5%80%8D%E8%B4%B9%E6%97%A0%2C%E8%BF%8E%E8%A1%8C%E4%B8%AD%22%7D%2C%7B%22x%22%3A200.4328%2C%22y%22%3A374.961%2C%22width%22%3A110.31819999999999%2C%22height%22%3A20.72969999999998%2C%22text%22%3A%22%E8%84%9A%E6%9C%AC%E8%B0%83%E8%AF%95%2C%E9%A2%84%22%7D%2C%7B%22x%22%3A1145.6205%2C%22y%22%3A376.99182%2C%22width%22%3A45.74790000000007%2C%22height%22%3A17.95247999999998%2C%22text%22%3A%22%E8%BF%9B%E8%A1%8C%E4%B8%AD%22%7D%2C%7B%22x%22%3A1253.1787%2C%22y%22%3A379.55368%2C%22width%22%3A107.86260000000016%2C%22height%22%3A16.550960000000032%2C%22text%22%3A%22%E8%AE%A2%E5%AE%9D%E7%8E%AF%E6%8B%8D%E5%8F%A3%E8%AF%95%E4%B8%AD%22%7D%2C%7B%22x%22%3A936.55676%2C%22y%22%3A380.07468%2C%22width%22%3A32.08233999999993%2C%22height%22%3A15.096979999999974%2C%22text%22%3A%225.20%22%7D%2C%7B%22x%22%3A848.3193%2C%22y%22%3A380.5208%2C%22width%22%3A31.269199999999955%2C%22height%22%3A14.635449999999992%2C%22text%22%3A%225.11%22%7D%2C%7B%22x%22%3A410.76166%2C%22y%22%3A378.97226%2C%22width%22%3A243.40584%2C%22height%22%3A18.08184%2C%22text%22%3A%22goreplay%E7%99%BD%E9%9C%80%E8%B7%91%E8%AF%81%E6%B5%81%E7%A8%8B%2C%E6%B5%A6%E8%AE%A4%E6%AD%A3%E8%BD%B4%E6%80%A7%22%7D%2C%7B%22x%22%3A376.03583%2C%22y%22%3A411.4202%2C%22width%22%3A312.36151%2C%22height%22%3A18.163849999999968%2C%22text%22%3A%22%E5%8C%85%E5%8F%B0%E7%A1%80%E6%95%99%E6%8D%AE%2C%E6%B2%B3%E8%AF%95%E6%95%99%E5%8F%B7%2C%E9%A2%84%E7%83%AD%E6%95%99%E5%8F%B7%2C%E7%89%B9%E5%BE%81%E6%95%B0%E5%89%82%22%7D%2C%7B%22x%22%3A224.29259%2C%22y%22%3A411.48013%2C%22width%22%3A60.44487000000001%2C%22height%22%3A15.992470000000026%2C%22text%22%3A%22%E6%95%99%E8%8A%B8%E5%87%86%E5%A4%87%22%7D%2C%7B%22x%22%3A1147.752%2C%22y%22%3A412.53693%2C%22width%22%3A42.240099999999984%2C%22height%22%3A15.990510000000029%2C%22text%22%3A%22%E8%BF%9B%E8%A1%8C%E4%B8%AD%22%7D%2C%7B%22x%22%3A1240.512%2C%22y%22%3A412.25537%2C%22width%22%3A134.72310000000016%2C%22height%22%3A16.283749999999998%2C%22text%22%3A%22%E5%92%8C%E5%8E%8B%E5%B7%9D%E6%9C%AC%E4%BD%90%E5%87%86%E5%90%84%22%7D%2C%7B%22x%22%3A937.6052%2C%22y%22%3A412.8849%2C%22width%22%3A31.05490000000009%2C%22height%22%3A15.319299999999998%2C%22text%22%3A%225.20%22%7D%2C%7B%22x%22%3A365.5603%2C%22y%22%3A444.2913%2C%22width%22%3A332.43590000000006%2C%22height%22%3A18.131860000000017%2C%22text%22%3A%22%E5%A4%96%E6%B5%81%E6%99%95%E5%90%91%E4%B8%8B%E4%BC%A0%E9%80%92%2C%E5%88%B0%E6%AF%8F%E4%B8%AA%E6%8E%A5%E5%8F%A3%E7%9A%84%E8%BD%AC%E5%8C%96%E5%92%8C%E8%B0%83%E7%94%A8%E6%AC%A1%E6%95%B0%22%7D%2C%7B%22x%22%3A202.69101%2C%22y%22%3A444.60764%2C%22width%22%3A105.35766999999998%2C%22height%22%3A16.51699000000002%2C%22text%22%3A%22%E7%9B%97%E5%93%81%E6%96%97%E8%A3%85%E5%8C%96%E9%9B%B6%22%7D%2C%7B%22x%22%3A1151.9832%2C%22y%22%3A445.58694%2C%22width%22%3A31.197700000000168%2C%22height%22%3A15.44808999999998%2C%22text%22%3A%22%E7%89%B9%E5%8A%9E%22%7D%2C%7B%22x%22%3A1146.6877%2C%22y%22%3A477.4257%2C%22width%22%3A45.015100000000075%2C%22height%22%3A17.02636000000001%2C%22text%22%3A%22%E5%85%B1%E8%A1%8C%E4%B8%AD%22%7D%2C%7B%22x%22%3A354.31436%2C%22y%22%3A477.53857%2C%22width%22%3A356.7742%2C%22height%22%3A19.37200999999999%2C%22text%22%3A%22%E5%BF%AB%E9%80%9F%E5%8E%8B%E7%BE%8E%E6%8E%92%E6%9F%A5%E5%AD%98%E5%9C%A8%E6%98%8E%E4%BA%8C%E4%BD%8F%E4%B9%9D%E5%90%8C%E7%9A%84%E6%BE%B3%E5%8F%A3%2C%E6%98%8E%E6%80%A7%E6%9D%BF%22%7D%2C%7B%22x%22%3A1266.0458%2C%22y%22%3A477.53906%2C%22width%22%3A82.8177999999998%2C%22height%22%3A17.788839999999993%2C%22text%22%3A%221)%E5%A4%A7%E4%BF%83%E8%91%9B%E5%8A%A8%22%7D%2C%7B%22x%22%3A203.14693%2C%22y%22%3A478.44864%2C%22width%22%3A105.13261%2C%22height%22%3A17.24975999999998%2C%22text%22%3A%22%E5%8D%95%E6%9C%BA%E5%8D%95%E6%8E%A5%E5%8F%A3%E4%B8%89%E5%87%86%22%7D%2C%7B%22x%22%3A935.44525%2C%22y%22%3A478.4842%2C%22width%22%3A32.69475%2C%22height%22%3A15.802400000000034%2C%22text%22%3A%225.29%22%7D%2C%7B%22x%22%3A850.0498%2C%22y%22%3A479.86755%2C%22width%22%3A30.076400000000035%2C%22height%22%3A13.683899999999994%2C%22text%22%3A%225.18%22%7D%2C%7B%22x%22%3A1013.0069%2C%22y%22%3A494.79614%2C%22width%22%3A93.01280000000008%2C%22height%22%3A16.917560000000037%2C%22text%22%3A%22%E5%8E%8B%E6%B5%8F%E7%8E%AF%E6%8A%A4%E8%BF%9B%E8%A1%8C%22%7D%2C%7B%22x%22%3A1260.2054%2C%22y%22%3A503.26343%2C%22width%22%3A90.56780000000003%2C%22height%22%3A14.279569999999978%2C%22text%22%3A%225.13-5.20%E5%87%86%E5%90%8D%22%7D%2C%7B%22x%22%3A208.47058%2C%22y%22%3A508.9383%2C%22width%22%3A91.93276999999998%2C%22height%22%3A17.82916%2C%22text%22%3A%22%E5%B1%85%E5%8F%B0%E5%AE%B9%E9%87%8F%E5%9C%BA%E5%BD%95%22%7D%2C%7B%22x%22%3A381.50516%2C%22y%22%3A509.67847%2C%22width%22%3A315.51944%2C%22height%22%3A18.061279999999954%2C%22text%22%3A%22%E5%AE%9A%E4%BD%8D%E6%8E%92%E6%88%B7%E5%AE%B6%E8%B7%AF%E5%BA%97%E8%B7%AF%2C%E7%91%9C%E5%AE%81%E6%9C%8D%E5%8A%A1%E7%BA%A7%E7%9A%84%E5%93%81%E5%A4%A7%E6%80%A7%E8%83%BD%E8%A1%A3%E7%8E%B0%22%7D%2C%7B%22x%22%3A1146.9357%2C%22y%22%3A511.41266%2C%22width%22%3A44.74039999999991%2C%22height%22%3A16.531440000000032%2C%22text%22%3A%22%E8%BF%9B%E8%A1%8C%E4%B8%AD%22%7D%2C%7B%22x%22%3A936.8188%2C%22y%22%3A512.5303%2C%22width%22%3A30.58019999999999%2C%22height%22%3A14.595739999999978%2C%22text%22%3A%225.29%22%7D%2C%7B%22x%22%3A849.37366%2C%22y%22%3A512.95154%2C%22width%22%3A32.101800000000026%2C%22height%22%3A13.960159999999973%2C%22text%22%3A%225.18%22%7D%2C%7B%22x%22%3A1258.4242%2C%22y%22%3A525.50226%2C%22width%22%3A95.9552000000001%2C%22height%22%3A17.523239999999987%2C%22text%22%3A%225.21-5.26%E5%8E%8B%E8%AE%AD%22%7D%2C%7B%22x%22%3A197.12329%2C%22y%22%3A544.44006%2C%22width%22%3A117.99241%2C%22height%22%3A16.16664000000003%2C%22text%22%3A%22%E9%A2%84%E4%B8%9D%26%E5%85%A8%E8%BD%A6%E5%9C%BA%E5%93%81%22%7D%2C%7B%22x%22%3A418.42953%2C%22y%22%3A544.7814%2C%22width%22%3A241.17397000000005%2C%22height%22%3A18.732759999999985%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%E4%B8%9A%E5%8A%A1%E5%85%A8%E8%B7%AF%E5%8E%8B%E8%B4%9D%2C%E6%8E%92%E8%B7%AF%E4%BE%9D%E8%B5%96%22%7D%2C%7B%22x%22%3A847.8453%2C%22y%22%3A545.04315%2C%22width%22%3A32.512500000000045%2C%22height%22%3A16.664800000000014%2C%22text%22%3A%225.31%22%7D%2C%7B%22x%22%3A936.5374%2C%22y%22%3A545.0538%2C%22width%22%3A31.954999999999927%2C%22height%22%3A16.456699999999955%2C%22text%22%3A%226.12%22%7D%2C%7B%22x%22%3A1151.8259%2C%22y%22%3A545.4357%2C%22width%22%3A32.14189999999985%2C%22height%22%3A16.82230000000004%2C%22text%22%3A%22%E5%AD%98%E5%8A%9E%22%7D%2C%7B%22x%22%3A86.79967%2C%22y%22%3A562.21716%2C%22width%22%3A62.14125%2C%22height%22%3A16.569639999999936%2C%22text%22%3A%22%E5%AE%9E%E7%A4%BE%E4%BB%B7%E6%9C%8D%22%7D%2C%7B%22x%22%3A1013.03503%2C%22y%22%3A564.22833%2C%22width%22%3A91.92947000000004%2C%22height%22%3A17.600270000000023%2C%22text%22%3A%22%E7%94%9F%E4%BA%A7%E7%8E%AF%E6%99%9A%E8%BF%9B%E8%A1%8C%22%7D%2C%7B%22x%22%3A1264.669%2C%22y%22%3A573.4272%2C%22width%22%3A85.38019999999983%2C%22height%22%3A18.23545999999999%2C%22text%22%3A%222)%E6%A0%B8%E5%BF%83%E9%A5%BC%E8%B7%A8%22%7D%2C%7B%22x%22%3A433.05972%2C%22y%22%3A576.97284%2C%22width%22%3A213.47717999999992%2C%22height%22%3A20.11121000000003%2C%22text%22%3A%22%E9%99%90%E6%B5%81%2C%E7%84%B0%E6%96%AD%2C%E5%B3%B0%E7%BA%A7%2C%E6%89%A9%E5%AE%B9%2C%E5%AE%B9%E7%81%BE%22%7D%2C%7B%22x%22%3A1151.7466%2C%22y%22%3A578.06006%2C%22width%22%3A31.71810000000005%2C%22height%22%3A16.225540000000024%2C%22text%22%3A%22%E5%BE%85%E5%8A%9E%22%7D%2C%7B%22x%22%3A848.9666%2C%22y%22%3A578.149%2C%22width%22%3A31.910840000000007%2C%22height%22%3A17.118100000000027%2C%22text%22%3A%225.31%22%7D%2C%7B%22x%22%3A227.8513%2C%22y%22%3A578.867%2C%22width%22%3A56.08016000000001%2C%22height%22%3A14.378060000000005%2C%22text%22%3A%22%E4%B8%93%E9%A1%B9%E6%B6%A6%E7%BB%9F%22%7D%2C%7B%22x%22%3A938.5674%2C%22y%22%3A580.4453%2C%22width%22%3A28.97745999999995%2C%22height%22%3A13.76344000000006%2C%22text%22%3A%226.12%22%7D%2C%7B%22x%22%3A1007.974%2C%22y%22%3A588.6167%2C%22width%22%3A102.71339999999998%2C%22height%22%3A17.529969999999935%2C%22text%22%3A%22%E5%87%89%E6%B0%911%3A00.7%3A00%22%7D%2C%7B%22x%22%3A738.8686%2C%22y%22%3A595.9083%2C%22width%22%3A62.58770000000004%2C%22height%22%3A15.790859999999952%2C%22text%22%3A%22%E5%9B%A2%E9%98%9F%E5%8D%8F%E5%90%8C%22%7D%2C%7B%22x%22%3A1262.045%2C%22y%22%3A598.30414%2C%22width%22%3A89.96259999999984%2C%22height%22%3A16.779960000000074%2C%22text%22%3A%225.6-5.20%E5%87%86%22%7D%2C%7B%22x%22%3A1150.9913%2C%22y%22%3A611.02673%2C%22width%22%3A31.907900000000154%2C%22height%22%3A16.861029999999914%2C%22text%22%3A%22%E7%89%B9%E5%8A%9B%22%7D%2C%7B%22x%22%3A848.3779%2C%22y%22%3A611.9205%2C%22width%22%3A32.41183000000001%2C%22height%22%3A17.09120000000007%2C%22text%22%3A%225.31%22%7D%2C%7B%22x%22%3A458.7245%2C%22y%22%3A612.38983%2C%22width%22%3A155.6252%2C%22height%22%3A18.364930000000072%2C%22text%22%3A%22%E6%88%91%E5%86%B2%E5%9C%BA%E5%BD%95%2C%E9%AB%98%E5%8F%AF%E7%94%A8%E9%AA%8C%E8%AF%81%22%7D%2C%7B%22x%22%3A195.51329%2C%22y%22%3A613.2299%2C%22width%22%3A119.13593999999998%2C%22height%22%3A14.787199999999984%2C%22text%22%3A%22%E5%85%BC%E5%86%B2%E5%8F%8C%E9%AB%98%E5%8F%AF%E7%94%A8%E5%9C%BA%E5%BD%95%22%7D%2C%7B%22x%22%3A937.6634%2C%22y%22%3A614.045%2C%22width%22%3A31.079899999999952%2C%22height%22%3A14.57603000000006%2C%22text%22%3A%226.12%22%7D%2C%7B%22x%22%3A1245.8888%2C%22y%22%3A620.82086%2C%22width%22%3A125.18870000000015%2C%22height%22%3A17.95867999999996%2C%22text%22%3A%225.18-5.29%E5%BD%93%E6%9C%BA%E5%8E%8B%E6%B1%89%22%7D%2C%7B%22x%22%3A371.29034%2C%22y%22%3A643.52716%2C%22width%22%3A265.44426%2C%22height%22%3A18.39774%2C%22text%22%3A%22%E9%92%88%E5%AF%B9%E4%B8%8A%E7%BA%BF%E5%91%BD%E4%BA%8C%E5%AE%89%E8%BF%9E%E8%A1%8C%E7%9A%84%E6%89%8B%E9%A1%B9%E8%BF%9E%E8%A1%8Ccheck%2C%22%7D%2C%7B%22x%22%3A1220.3624%2C%22y%22%3A644.62476%2C%22width%22%3A171.14210000000003%2C%22height%22%3A18.159639999999968%2C%22text%22%3A%225.31-6.12%E5%85%A8%E9%99%B7%E5%8E%8B%E6%B3%A8%E9%99%85%22%7D%2C%7B%22x%22%3A1150.2427%2C%22y%22%3A644.3394%2C%22width%22%3A34.26729999999998%2C%22height%22%3A17.168700000000058%2C%22text%22%3A%22%E5%BE%97%E5%8A%9E%22%7D%2C%7B%22x%22%3A611.7539%2C%22y%22%3A645.2963%2C%22width%22%3A81.90009999999995%2C%22height%22%3A16.301400000000058%2C%22text%22%3A%22%2C%E5%85%8D%E9%81%A5%E7%97%85%22%7D%2C%7B%22x%22%3A937.07324%2C%22y%22%3A645.88385%2C%22width%22%3A32.59740999999997%2C%22height%22%3A15.06714999999997%2C%22text%22%3A%226.13%22%7D%2C%7B%22x%22%3A848.06067%2C%22y%22%3A646.0759%2C%22width%22%3A32.52093000000002%2C%22height%22%3A14.804499999999962%2C%22text%22%3A%226.13%22%7D%2C%7B%22x%22%3A216.04741%2C%22y%22%3A646.28314%2C%22width%22%3A82.53789%2C%22height%22%3A16.546960000000013%2C%22text%22%3A%22%E4%B8%8A%E5%9F%8E%E5%89%8Dcheck%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E%20%E5%BA%A7%E5%8F%B7%20%E9%98%B6%E6%AE%B5%20%E5%89%8D%E5%9B%BA%E4%BE%9D%E7%BA%BF%20%E8%8D%B7%E5%8A%9E%E5%8D%8A%E9%A1%B9%20%E7%8A%B6%E6%80%81%20%E5%BC%80%E5%A7%8B%E6%97%B6%E5%90%91%20%E8%A1%A1%E6%B3%A8%20%E7%BB%93%E4%B9%98%E6%97%B6%E9%97%A8%20%E6%A0%B8%E5%BF%83%E7%89%B9%E4%B8%B4%E8%AE%A4%2C%E5%A6%82%3A%E9%A1%B5%2B%E4%B8%8B%E5%8D%95%2B%E6%94%AF%E4%BB%98%2B%E6%B4%BB%E5%8A%A8%20%E5%BE%97%E5%8A%9E%20%E4%B8%89%E5%87%BA%E6%A1%A3%E6%9E%B6%3Afusion%2Bfeign%20%E6%8A%80%E6%9C%AF%E6%9E%A2%E6%9E%B6%26%E5%8E%8B%E6%B5%8B%E6%96%B9%E5%BC%8F%26%E5%8E%8B%205.6%205.6%20%E5%B7%B2%E5%AE%8C%E6%88%90%20%E5%8E%8B%E8%B4%A7%3Atcpdumotgoreplay%20%E6%B5%8B%E7%8E%AF%E5%AE%89%E8%82%B2%E8%AE%A4%20%E5%8E%8B%E5%B7%9D%E7%8E%AF%E5%A0%A4%3A%E7%94%9F%E4%BA%A7%E7%8E%AF%E7%AB%99%20%E8%BF%9B%E8%A1%8C%E4%B8%AD%20%E6%8C%89%E7%85%A7%E4%B8%9A%E5%8A%A1%E9%92%B1%2B%E6%9C%8D%E5%8A%A1%E6%96%B9%E5%BC%8F%E6%9D%AD%E7%90%86%20%E6%8E%A5%E5%85%A5%E6%B5%81%E8%BD%A6%E6%A0%87%E7%9A%84%E7%A8%8B%E5%8A%A1%E5%8C%BB%E7%90%86%20515%20%E4%B8%89%E8%A1%8C%E4%B8%AD%20%E7%AC%AC%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%26%E7%89%A9%E6%B5%81%E7%AD%89%205.15%20%E5%A4%96%E5%8A%A8%E4%BE%9D%E7%88%B1%26mock%E9%A1%B9%E8%B4%A8%E7%A8%8B%20%E6%B5%81%E7%A9%BA%E8%AF%84%E4%BC%B0%26%E6%98%8E%E7%A8%B3%E7%9B%B8%E5%85%B3%E6%8C%87%E6%A0%87%20%E4%BB%A519%E5%B9%B4%E5%8F%8C%E5%8D%81%E4%BA%8C%E4%B8%BAbasic%20%E7%97%9B%E5%AE%9A%E9%A2%84%E4%BC%B0%E7%9A%84%E4%BC%AF%E6%B5%81%E5%9E%8B%2C%E4%BD%8E%E4%BA%8E%E8%AE%AF%E4%B9%8F%E9%85%8D%E7%BD%AE%205.6%205.6%20%E6%B1%9F%E5%A4%87%E4%BB%B7%E6%AE%B5%20%E8%93%9D%E6%8E%A7%E7%9B%B8%E5%85%B3%20%E5%90%84%E5%8E%85%E5%90%AF%E6%8E%A7%E5%A4%A7%E7%9B%98%2C%E7%9F%A5%E4%BB%B6%E6%8E%A5%E5%85%A5%E6%9E%AA%E6%9F%A5%20%E5%8E%8B%E6%BB%A9%E8%93%9D%E6%8E%A7%E5%A4%A7%E4%BA%94%E6%96%B0%E7%BB%98%E5%88%B6%20sentine%E6%B1%BD%E5%92%8C%E5%85%B3%E7%A5%96%E4%BB%B6%E6%8A%80%E5%85%A5%E6%A3%80%20%E8%81%94%E5%8A%A1%E6%B2%BB%E7%90%86%20%E8%A1%8C%E5%8A%9E%20%E6%9C%891%E5%80%8D%E7%88%B8%E7%94%A8%E5%92%A8%E6%BA%90%2C%E9%A2%84%E8%AE%A1%E6%96%B0%E5%A1%94%20%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E8%B5%84%E6%BA%90%E9%A2%84%E5%90%8D%20%E8%BF%9B%E8%A1%8C%E4%B8%AD%20ECS%2FDB%2FMO%201%E5%80%8D%E8%B4%B9%E6%97%A0%2C%E8%BF%8E%E8%A1%8C%E4%B8%AD%20%E8%84%9A%E6%9C%AC%E8%B0%83%E8%AF%95%2C%E9%A2%84%20%E8%BF%9B%E8%A1%8C%E4%B8%AD%20%E8%AE%A2%E5%AE%9D%E7%8E%AF%E6%8B%8D%E5%8F%A3%E8%AF%95%E4%B8%AD%205.20%205.11%20goreplay%E7%99%BD%E9%9C%80%E8%B7%91%E8%AF%81%E6%B5%81%E7%A8%8B%2C%E6%B5%A6%E8%AE%A4%E6%AD%A3%E8%BD%B4%E6%80%A7%20%E5%8C%85%E5%8F%B0%E7%A1%80%E6%95%99%E6%8D%AE%2C%E6%B2%B3%E8%AF%95%E6%95%99%E5%8F%B7%2C%E9%A2%84%E7%83%AD%E6%95%99%E5%8F%B7%2C%E7%89%B9%E5%BE%81%E6%95%B0%E5%89%82%20%E6%95%99%E8%8A%B8%E5%87%86%E5%A4%87%20%E8%BF%9B%E8%A1%8C%E4%B8%AD%20%E5%92%8C%E5%8E%8B%E5%B7%9D%E6%9C%AC%E4%BD%90%E5%87%86%E5%90%84%205.20%20%E5%A4%96%E6%B5%81%E6%99%95%E5%90%91%E4%B8%8B%E4%BC%A0%E9%80%92%2C%E5%88%B0%E6%AF%8F%E4%B8%AA%E6%8E%A5%E5%8F%A3%E7%9A%84%E8%BD%AC%E5%8C%96%E5%92%8C%E8%B0%83%E7%94%A8%E6%AC%A1%E6%95%B0%20%E7%9B%97%E5%93%81%E6%96%97%E8%A3%85%E5%8C%96%E9%9B%B6%20%E7%89%B9%E5%8A%9E%20%E5%85%B1%E8%A1%8C%E4%B8%AD%20%E5%BF%AB%E9%80%9F%E5%8E%8B%E7%BE%8E%E6%8E%92%E6%9F%A5%E5%AD%98%E5%9C%A8%E6%98%8E%E4%BA%8C%E4%BD%8F%E4%B9%9D%E5%90%8C%E7%9A%84%E6%BE%B3%E5%8F%A3%2C%E6%98%8E%E6%80%A7%E6%9D%BF%201)%E5%A4%A7%E4%BF%83%E8%91%9B%E5%8A%A8%20%E5%8D%95%E6%9C%BA%E5%8D%95%E6%8E%A5%E5%8F%A3%E4%B8%89%E5%87%86%205.29%205.18%20%E5%8E%8B%E6%B5%8F%E7%8E%AF%E6%8A%A4%E8%BF%9B%E8%A1%8C%205.13-5.20%E5%87%86%E5%90%8D%20%E5%B1%85%E5%8F%B0%E5%AE%B9%E9%87%8F%E5%9C%BA%E5%BD%95%20%E5%AE%9A%E4%BD%8D%E6%8E%92%E6%88%B7%E5%AE%B6%E8%B7%AF%E5%BA%97%E8%B7%AF%2C%E7%91%9C%E5%AE%81%E6%9C%8D%E5%8A%A1%E7%BA%A7%E7%9A%84%E5%93%81%E5%A4%A7%E6%80%A7%E8%83%BD%E8%A1%A3%E7%8E%B0%20%E8%BF%9B%E8%A1%8C%E4%B8%AD%205.29%205.18%205.21-5.26%E5%8E%8B%E8%AE%AD%20%E9%A2%84%E4%B8%9D%26%E5%85%A8%E8%BD%A6%E5%9C%BA%E5%93%81%20%E6%A0%B8%E5%BF%83%E4%B8%9A%E5%8A%A1%E5%85%A8%E8%B7%AF%E5%8E%8B%E8%B4%9D%2C%E6%8E%92%E8%B7%AF%E4%BE%9D%E8%B5%96%205.31%206.12%20%E5%AD%98%E5%8A%9E%20%E5%AE%9E%E7%A4%BE%E4%BB%B7%E6%9C%8D%20%E7%94%9F%E4%BA%A7%E7%8E%AF%E6%99%9A%E8%BF%9B%E8%A1%8C%202)%E6%A0%B8%E5%BF%83%E9%A5%BC%E8%B7%A8%20%E9%99%90%E6%B5%81%2C%E7%84%B0%E6%96%AD%2C%E5%B3%B0%E7%BA%A7%2C%E6%89%A9%E5%AE%B9%2C%E5%AE%B9%E7%81%BE%20%E5%BE%85%E5%8A%9E%205.31%20%E4%B8%93%E9%A1%B9%E6%B6%A6%E7%BB%9F%206.12%20%E5%87%89%E6%B0%911%3A00.7%3A00%20%E5%9B%A2%E9%98%9F%E5%8D%8F%E5%90%8C%205.6-5.20%E5%87%86%20%E7%89%B9%E5%8A%9B%205.31%20%E6%88%91%E5%86%B2%E5%9C%BA%E5%BD%95%2C%E9%AB%98%E5%8F%AF%E7%94%A8%E9%AA%8C%E8%AF%81%20%E5%85%BC%E5%86%B2%E5%8F%8C%E9%AB%98%E5%8F%AF%E7%94%A8%E5%9C%BA%E5%BD%95%206.12%205.18-5.29%E5%BD%93%E6%9C%BA%E5%8E%8B%E6%B1%89%20%E9%92%88%E5%AF%B9%E4%B8%8A%E7%BA%BF%E5%91%BD%E4%BA%8C%E5%AE%89%E8%BF%9E%E8%A1%8C%E7%9A%84%E6%89%8B%E9%A1%B9%E8%BF%9E%E8%A1%8Ccheck%2C%205.31-6.12%E5%85%A8%E9%99%B7%E5%8E%8B%E6%B3%A8%E9%99%85%20%E5%BE%97%E5%8A%9E%20%2C%E5%85%8D%E9%81%A5%E7%97%85%206.13%206.13%20%E4%B8%8A%E5%9F%8E%E5%89%8Dcheck%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1405%2C%22height%22%3A675%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/403166/1592064911281-c3794044-9cd3-411f-98e2-dbb85e06a3f5.png&quot; alt=&quot;image.png&quot; width=&quot;1014&quot; height=&quot;487&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;https://cdn.nlark.com/yuque/0/2020/png/403166/1592064911281-c3794044-9cd3-411f-98e2-dbb85e06a3f5.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p id=&quot;l69U1&quot; data-lake-id=&quot;6b1654629d9e8af8584c26a83d4405d8&quot;&gt;&lt;strong&gt;&lt;span&gt;3、资源准备&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;a8706c5fed42812945ebae4413d8c310&quot;&gt;&lt;span&gt;&lt;strong&gt;1-ECS预购&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;6fc924f36bc2aa99e31244d2f280c09b&quot;&gt;&lt;span&gt;一般大促前夕，云服务资源都会比较紧张，因此需要进行预购。资源预购需要注意如下几点：&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;6f2553b8e65e0dd3b139ee424469107b&quot;&gt;&lt;span&gt;1）保持和生产服务同规格配置，尽可能在同一可用区；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;3f7b55d24c73f3198bdc6be0e31931d5&quot;&gt;&lt;span&gt;2）预购数量可以根据生产现有服务数量&amp;amp;一轮压测结果&amp;amp;预期指标进行评估，留有一定备用机器；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;dd1c08a111906dda09c3153677c31da2&quot;&gt;&lt;span&gt;&lt;strong&gt;2-DB升配&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;94feda5845b4ddc303f17ee0e0286399&quot;&gt;&lt;span&gt;大促期间流量会比较高，因此可以提前对核心业务DB进行一定规格的升配，后续根据压测优化结果调整。&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;6cf72bf823c00436bf9d16b60dcd3769&quot;&gt;&lt;span&gt;&lt;strong&gt;3-SLB扩容&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;179ffb44a96a9562e8620eebbd3c2017&quot;&gt;&lt;span&gt;目前阿里云SLB，单个最大支持5W的QPS。为了满足峰值流量冲击及预期指标，需要提前对其进行扩容。&lt;/span&gt;&lt;/p&gt;
&lt;p id=&quot;lGRc9&quot; data-lake-id=&quot;cb092cf55573f156c4f2348589ca9162&quot;&gt;&lt;strong&gt;&lt;span&gt;4、专项梳理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;8c9a94a2680e47f31a44fa0bbe8547c2&quot;&gt;&lt;span&gt;&lt;strong&gt;1-压测check项&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;1bdb7a48018d58710891020efc53317b&quot;&gt;&lt;span&gt;由于压测是在生产环境开展，因此在压测开始前，要针对相关服务的Mock配置、影子库表、流量标传递、测试用户数据预热等相关项进行确认排查，确保压测抱回导致脏写。&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;6145572da0d7b5661735e817c2c55029&quot;&gt;&lt;span&gt;&lt;strong&gt;2-定时job统计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;9e9198fa2a67089506ccfcf72f4cc15e&quot;&gt;&lt;span&gt;由于部分业务是通过定时job去调度执行的，为了避免压测时job调度对服务的性能影响，因此需要专门梳理相关的定时job等任务，针对性的进行临时关闭或者调度策略调整。&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;87bdbbf11fd8b217d71c1968e1c07b02&quot;&gt;&lt;span&gt;&lt;strong&gt;3-降级开关梳理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;7e79d5b6d740bb1091a4e4fc217cd907&quot;&gt;&lt;span&gt;为了应对活动当天的峰值流量，可以对一些弱依赖或者非关键业务进行降级操作，比如&quot;小红点&quot;、&quot;SQL校验&quot;、&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;1954788794ac6520fd58bb930055702e&quot;&gt;&lt;span&gt;&quot;退款到账时间&quot;、商品推荐等。&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;43059648a2b374076e0a6d407c774f30&quot;&gt;&lt;span&gt;PS：&lt;strong&gt;&lt;span&gt;建议将相关的降级操作都通过配置或者开发的方式来处理，便于一键启停，降低操作难度。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;285666cb37e3a3f3798e613eb165be2b&quot;&gt;&lt;span&gt;&lt;strong&gt;4-稳定性预案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;6a2db5c02cec63cc679ba2b3266d4436&quot;&gt;&lt;span&gt;稳定性预案一般分为如下几种：&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;54d0e54cbb2176401aaf2f5a41727312&quot;&gt;&lt;span&gt;&lt;strong&gt;1）应用级别&lt;/strong&gt;：如降级、熔断；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;00e76dd5b936438e1b9ff33d6a7d3242&quot;&gt;&lt;span&gt;&lt;strong&gt;2）系统级别&lt;/strong&gt;：日志归档、网关防爬、风控；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;06e9665c80c1baee177021cfd8eecb65&quot;&gt;&lt;span&gt;&lt;strong&gt;3）定时任务&lt;/strong&gt;：常见的定时job如批处理，定时获取数据；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;0b7827e2ba40072aa36ff03d93ab0877&quot;&gt;&lt;span&gt;&lt;strong&gt;4）缓存预热&lt;/strong&gt;：如商品信息、费率信息；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;35d208fa52382e26b837c2d4c1f06976&quot;&gt;&lt;span&gt;&lt;strong&gt;5）异常处理&lt;/strong&gt;：针对一些异常情况，如优惠券不可用、地址信息获取失败（18年淘宝）；&lt;/span&gt;&lt;/p&gt;
&lt;p id=&quot;tRAD4&quot; data-lake-id=&quot;365a2c71a555bd22888fa2a10dbef0d0&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p data-lake-id=&quot;734816ef00e731672666c9d8e72d6088&quot;&gt;&lt;span&gt;&lt;strong&gt;1、压测方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;e0427cb073112d822ac7671b012f4d7a&quot;&gt;&lt;span&gt;目前生产全链路采用的是基于jmeter的分布式压测，但jmeter本身的分布式压测会将压测数据由slave上报给master，这样会带来一定的性能损耗。&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;e0427cb073112d822ac7671b012f4d7a&quot;&gt;&lt;span&gt;针对这点我们将压测数据写入influxDB，然后由grafana进行查询，做聚合计算并展示。&lt;/span&gt;&lt;span&gt;由于分布式压测需要将测试数据同步到对应的压测机上，&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;e0427cb073112d822ac7671b012f4d7a&quot;&gt;&lt;span&gt;针对这个问题我们开发了一键上传，压测一键启停的功能，这样既提高了并发调整的效率，对于异常场景，也能做到尽快的流量熔断保护功能。&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;99f63a1eea34f1a6fc6d898ad09188bc&quot;&gt;&lt;span&gt;&lt;strong&gt;2、后端优化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;5bc2ae44e2c8e0b15cffb8032a1a8afc&quot;&gt;&lt;span&gt;&lt;strong&gt;1）通讯协议升级&lt;/strong&gt;：服务内部调用由http升级为dubbo的RPC调用；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;04fccf8a6b98f330533f65daa81447b0&quot;&gt;&lt;span&gt;&lt;strong&gt;2）监控采样频次&lt;/strong&gt;：降低了监控数据采样率，由100%降低到10%；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;c6b29073735d4ab6cc5cbc4d969a0207&quot;&gt;&lt;span&gt;&lt;strong&gt;3）数据缓存&lt;/strong&gt;：针对部分非实时强一致性数据，进行了缓存操作；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;e45479dabb5ac5e68ff08eeb2e268c97&quot;&gt;&lt;span&gt;&lt;strong&gt;4）JVM参数&lt;/strong&gt;：针对JVM启动参数，设置Xms和Xmx保持一致，减少扩堆动作；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;e1cff942c0f647370d3260d3a51fc2fa&quot;&gt;&lt;span&gt;&lt;strong&gt;5）线程优化&lt;/strong&gt;：经过多轮压测对比，最终评估得到结果，undertow的work_threads修改为16N；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;0495a392f7f49276dda8af5ff340c562&quot;&gt;&lt;span&gt;&lt;strong&gt;3、前端优化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;9c2b35c6dab1a1000240f5f6889833fa&quot;&gt;&lt;span&gt;CDN、静态资源、大图压缩、资源内置；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;901a84dfe509e947a2fad77e83ebcba8&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;wnIYd&quot; data-lake-id=&quot;b46e0dfc7033da41e072beac63c421f5&quot;&gt;&lt;span&gt;监控建设&lt;/span&gt;&lt;/h2&gt;
&lt;p data-lake-id=&quot;c6d9728eaeba64b2e03c333cb5629777&quot;&gt;&lt;span&gt;监控体系建设是一个长期的过程，针对大促，我们主要优化了如下几点：&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;f1fbbf60d139c92a5c7001d8847bb546&quot;&gt;&lt;span&gt;&lt;strong&gt;1-实时拓扑图&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;13d7af1d79539dbe366b2fa4a1d03598&quot;&gt;&lt;span&gt;&lt;strong&gt;2-决策系统&lt;/strong&gt;：核心链路监控大盘若干&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;55db80086d26d8c9c32edf96d6cf4f38&quot;&gt;&lt;span&gt;&lt;strong&gt;3-监控大盘&lt;/strong&gt;：业务域监控大盘&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;58b0c779a6b0610a2cbc9b32956fa1ef&quot;&gt;&lt;span&gt;这样更便于在也测和大促时及时发现和排查问题。&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;53b2f7f5eee7edbe417363840a224c1d&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p data-lake-id=&quot;9c92a06c39c2f85e69554bf49c93264b&quot;&gt;&lt;span&gt;1-&lt;strong&gt;规格&lt;/strong&gt;&lt;strong&gt;自检升级&lt;/strong&gt;：mq、db、redis、slb、es、MongoDB；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;eab6517be51240792883f0cdde7f0b29&quot;&gt;&lt;span&gt;2-&lt;strong&gt;数据库巡检&lt;/strong&gt;：索引、慢SQL、连接数、proxy层check、负载check；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;0183a524ae7aaf73beb0f0956125de80&quot;&gt;&lt;span&gt;3-&lt;strong&gt;架构图梳理&lt;/strong&gt;：机房、可用区、业务集群分布、slb、网络升级、slb；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;4825db04e294080b4a218c348ae629c1&quot;&gt;&lt;span&gt;4-&lt;strong&gt;安全专项&lt;/strong&gt;：防爬、防DDoS；&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;24ae74acebe3ea681874f31f378fb792&quot;&gt;&lt;span&gt;针对大促，运维团队也对相关的服务资源进行了规格巡检和升配扩容，保障618大促。&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;f6eff146d051c76b8543fdd755a57826&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 04 Jul 2020 14:29:00 +0000</pubDate>
<dc:creator>老_张</dc:creator>
<og:description>前言 每年的618&amp;amp;双11，对于电商公司来说都是一次大考。为了应对活动当天的瞬时峰值流量，进行全链路压测是很有必要的一项技术工程。 而且全链路压测除了对核心链路进行性能问题排查优化之外，还能发</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/imyalost/p/13236978.html</dc:identifier>
</item>
<item>
<title>你还在担心rpc接口超时吗 - OrangeCsong</title>
<link>http://www.cnblogs.com/csong7876/p/13236955.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/csong7876/p/13236955.html</guid>
<description>&lt;p&gt;在使用dubbo时，通常会遇到timeout这个属性，timeout属性的作用是：给某个服务调用设置超时时间，如果服务在设置的时间内未返回结果，则会抛出调用超时异常：TimeoutException，在使用的过程中，我们有时会对provider和consumer两个配置都会设置timeout值，那么服务调用过程中会以哪个为准？橘子同学今天主要针对这个问题进行分析和扩展。&lt;/p&gt;
&lt;h2 id=&quot;三种设置方式&quot;&gt;三种设置方式&lt;/h2&gt;
&lt;p&gt;以provider配置为例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#### 方法级别
&amp;lt;dubbo:service interface=&quot;orangecsong.test.service.TestService&quot; ref=&quot;testServiceImpl&quot;&amp;gt;
   &amp;lt;dubbo:method name=&quot;test&quot; timeout=&quot;10000&quot;/&amp;gt;
&amp;lt;/dubbo:service&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;#### 接口级别
&amp;lt;dubbo:service interface=&quot;orangecsong.test.service.TestService&quot; ref=&quot;testServiceImpl&quot; timeout=&quot;10000&quot;/&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;#### 全局级别
&amp;lt;dubbo:service =&quot;10000&quot;/&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;优先级选择&quot;&gt;优先级选择&lt;/h4&gt;
&lt;p&gt;在dubbo中如果provider和consumer都配置了相同的一个属性，比如本文分析的timeout，其实它们是有优先级的，consumer方法配置 &amp;gt; provider方法配置 &amp;gt; consumer接口配置 &amp;gt; provider接口配置 &amp;gt; consumer全局配置 &amp;gt; provider全局配置。所以对于小橘开始的提出的问题就有了结果，会以消费者配置的为准，接下结合源码来进行解析，其实源码很简单，在RegistryDirectory类中将服务列表转换为DubboInvlker方法中进行了处理：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private Map&amp;lt;String, Invoker&amp;lt;T&amp;gt;&amp;gt; toInvokers(List&amp;lt;URL&amp;gt; urls) {
        Map&amp;lt;String, Invoker&amp;lt;T&amp;gt;&amp;gt; newUrlInvokerMap = new HashMap&amp;lt;String, Invoker&amp;lt;T&amp;gt;&amp;gt;();
        if (urls == null || urls.isEmpty()) {
            return newUrlInvokerMap;
        }
        Set&amp;lt;String&amp;gt; keys = new HashSet&amp;lt;String&amp;gt;();
        String queryProtocols = this.queryMap.get(Constants.PROTOCOL_KEY);
        for (URL providerUrl : urls) {
            // If protocol is configured at the reference side, only the matching protocol is selected
            if (queryProtocols != null &amp;amp;&amp;amp; queryProtocols.length() &amp;gt; 0) {
                boolean accept = false;
                String[] acceptProtocols = queryProtocols.split(&quot;,&quot;);
                for (String acceptProtocol : acceptProtocols) {
                    if (providerUrl.getProtocol().equals(acceptProtocol)) {
                        accept = true;
                        break;
                    }
                }
                if (!accept) {
                    continue;
                }
            }
            if (Constants.EMPTY_PROTOCOL.equals(providerUrl.getProtocol())) {
                continue;
            }
            if (!ExtensionLoader.getExtensionLoader(Protocol.class).hasExtension(providerUrl.getProtocol())) {
                logger.error(new IllegalStateException(&quot;Unsupported protocol &quot; + providerUrl.getProtocol() +
                        &quot; in notified url: &quot; + providerUrl + &quot; from registry &quot; + getUrl().getAddress() +
                        &quot; to consumer &quot; + NetUtils.getLocalHost() + &quot;, supported protocol: &quot; +
                        ExtensionLoader.getExtensionLoader(Protocol.class).getSupportedExtensions()));
                continue;
            }
            // 重点就是下面这个方法
            URL url = mergeUrl(providerUrl);

            String key = url.toFullString(); // The parameter urls are sorted
            if (keys.contains(key)) { // Repeated url
                continue;
            }
            keys.add(key);
            // Cache key is url that does not merge with consumer side parameters, regardless of how the consumer combines parameters, if the server url changes, then refer again
            Map&amp;lt;String, Invoker&amp;lt;T&amp;gt;&amp;gt; localUrlInvokerMap = this.urlInvokerMap; // local reference
            Invoker&amp;lt;T&amp;gt; invoker = localUrlInvokerMap == null ? null : localUrlInvokerMap.get(key);
            if (invoker == null) { // Not in the cache, refer again
                try {
                    boolean enabled = true;
                    if (url.hasParameter(Constants.DISABLED_KEY)) {
                        enabled = !url.getParameter(Constants.DISABLED_KEY, false);
                    } else {
                        enabled = url.getParameter(Constants.ENABLED_KEY, true);
                    }
                    if (enabled) {
                        invoker = new InvokerDelegate&amp;lt;T&amp;gt;(protocol.refer(serviceType, url), url, providerUrl);
                    }
                } catch (Throwable t) {
                    logger.error(&quot;Failed to refer invoker for interface:&quot; + serviceType + &quot;,url:(&quot; + url + &quot;)&quot; + t.getMessage(), t);
                }
                if (invoker != null) { // Put new invoker in cache
                    newUrlInvokerMap.put(key, invoker);
                }
            } else {
                newUrlInvokerMap.put(key, invoker);
            }
        }
        keys.clear();
        return newUrlInvokerMap;
    }
     
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重点就是上面mergeUrl方法，将provider和comsumer的url参数进行了整合，在mergeUrl方法有会调用ClusterUtils.mergeUrl方法进行整合，因为这个方法比较简单，就是对一些参数进行了整合了，会用consumer参数进行覆盖，这里就不分析了，如果感兴趣的同学可以去研究一下。&lt;/p&gt;
&lt;h4 id=&quot;超时处理&quot;&gt;超时处理&lt;/h4&gt;
&lt;p&gt;在配置设置了超时timeout，那么代码中是如何处理的，这里咱们在进行一下扩展，分析一下dubbo中是如何处理超时的，在调用服务方法，最后都会调用DubboInvoker.doInvoke方法，咱们就从这个方法开始分析：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  @Override
    protected Result doInvoke(final Invocation invocation) throws Throwable {
        RpcInvocation inv = (RpcInvocation) invocation;
        final String methodName = RpcUtils.getMethodName(invocation);
        inv.setAttachment(Constants.PATH_KEY, getUrl().getPath());
        inv.setAttachment(Constants.VERSION_KEY, version);

        ExchangeClient currentClient;
        if (clients.length == 1) {
            currentClient = clients[0];
        } else {
            currentClient = clients[index.getAndIncrement() % clients.length];
        }
        try {
            boolean isAsync = RpcUtils.isAsync(getUrl(), invocation);
            boolean isAsyncFuture = RpcUtils.isReturnTypeFuture(inv);
            boolean isOneway = RpcUtils.isOneway(getUrl(), invocation);
            int timeout = getUrl().getMethodParameter(methodName, Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT);
            if (isOneway) {
                boolean isSent = getUrl().getMethodParameter(methodName, Constants.SENT_KEY, false);
                currentClient.send(inv, isSent);
                RpcContext.getContext().setFuture(null);
                return new RpcResult();
            } else if (isAsync) {
                ResponseFuture future = currentClient.request(inv, timeout);
                // For compatibility
                FutureAdapter&amp;lt;Object&amp;gt; futureAdapter = new FutureAdapter&amp;lt;&amp;gt;(future);
                RpcContext.getContext().setFuture(futureAdapter);

                Result result;
                // 异步处理
                if (isAsyncFuture) {
                    // register resultCallback, sometimes we need the async result being processed by the filter chain.
                    result = new AsyncRpcResult(futureAdapter, futureAdapter.getResultFuture(), false);
                } else {
                    result = new SimpleAsyncRpcResult(futureAdapter, futureAdapter.getResultFuture(), false);
                }
                return result;
            } else {
                // 同步处理
                RpcContext.getContext().setFuture(null);
                return (Result) currentClient.request(inv, timeout).get();
            }
        } catch (TimeoutException e) {
            throw new RpcException(RpcException.TIMEOUT_EXCEPTION, &quot;Invoke remote method timeout. method: &quot; + invocation.getMethodName() + &quot;, provider: &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);
        } catch (RemotingException e) {
            throw new RpcException(RpcException.NETWORK_EXCEPTION, &quot;Failed to invoke remote method: &quot; + invocation.getMethodName() + &quot;, provider: &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);
        }
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在这个方法中，就以同步模式进行分析，看request方法，request()方法会返回一个DefaultFuture类，在去调用DefaultFuture.get()方法，这里其实涉及到一个在异步中实现同步的技巧，咱们这里不做分析，所以重点就在get()方法里：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; @Override
    public Object get() throws RemotingException {
        return get(timeout);
    }

    @Override
    public Object get(int timeout) throws RemotingException {
        if (timeout &amp;lt;= 0) {
            timeout = Constants.DEFAULT_TIMEOUT;
        }
        if (!isDone()) {
            long start = System.currentTimeMillis();
            lock.lock();
            try {
                while (!isDone()) {
                    done.await(timeout, TimeUnit.MILLISECONDS);
                    if (isDone() || System.currentTimeMillis() - start &amp;gt; timeout) {
                        break;
                    }
                }
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            } finally {
                lock.unlock();
            }
            if (!isDone()) {
                throw new TimeoutException(sent &amp;gt; 0, channel, getTimeoutMessage(false));
            }
        }
        return returnFromResponse();
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在调用get()方法时，会去调用get(timeout)这个方法，在这个方法中会传一个timeout字段，在和timeout就是咱们配置的那个参数，在这个方法中咱们要关注下面一个代码块：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; if (!isDone()) {
            long start = System.currentTimeMillis();
            lock.lock();
            try {
                while (!isDone()) {
                    // 线程阻塞
                    done.await(timeout, TimeUnit.MILLISECONDS);
                    if (isDone() || System.currentTimeMillis() - start &amp;gt; timeout) {
                        break;
                    }
                }
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            } finally {
                lock.unlock();
            }
            // 在超时时间里，还没有结果，则抛出超时异常
            if (!isDone()) {
                throw new TimeoutException(sent &amp;gt; 0, channel, getTimeoutMessage(false));
            }
        }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重点看await()方法，会进行阻塞timeout时间，如果阻塞时间到了，则会唤醒往下执行，超时跳出while循环中，判断是否有结果返回，如果没有（这个地方要注意：只有有结果返回，或超时才跳出循环中），则抛出超时异常。讲到这里，超时原理基本上其实差不多了，DefaultFuture这个类还有个地方需要注意，在初始化DefaultFuture对象时，会去创建一个超时的延迟任务，延迟时间就是timeout值，在这个延迟任务中也会调用signal()方法唤醒阻塞。&lt;/p&gt;
&lt;h4 id=&quot;分批调用&quot;&gt;分批调用&lt;/h4&gt;
&lt;p&gt;不过在调用rpc远程接口，如果对方的接口不能一次承载返回请求结果能力，我们一般做法是分批调用，将调用一次分成调用多次，然后对每次结果进行汇聚，当然也可以做用利用多线程的能力去执行。后面文章小橘将会介绍这种模式，敬请关注哦！&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * Description:通用 分批调用工具类
 * 场景:
 * &amp;lt;pre&amp;gt;
 *     比如List参数的size可能为 几十个甚至上百个
 *     如果invoke接口比较慢,传入50个以上会超时，那么可以每次传入20个，分批执行。
 * &amp;lt;/pre&amp;gt;
 * Author: OrangeCsong
 */
public class ParallelInvokeUtil {

    private ParallelInvokeUtil() {}

    /**
     * @param sourceList 源数据
     * @param size 分批大小
     * @param buildParam 构建函数
     * @param processFunction 处理函数
     * @param &amp;lt;R&amp;gt; 返回值
     * @param &amp;lt;T&amp;gt; 入参\
     * @param &amp;lt;P&amp;gt; 构建参数
     * @return
     */
    public static &amp;lt;R, T, P&amp;gt; List&amp;lt;R&amp;gt; partitionInvokeWithRes(List&amp;lt;T&amp;gt; sourceList, Integer size,
                                                           Function&amp;lt;List&amp;lt;T&amp;gt;, P&amp;gt; buildParam,
                                                           Function&amp;lt;P, List&amp;lt;R&amp;gt;&amp;gt; processFunction) {

        if (CollectionUtils.isEmpty(sourceList)) {
            return new ArrayList&amp;lt;&amp;gt;(0);
        }
        Preconditions.checkArgument(size &amp;gt; 0, &quot;size大小必须大于0&quot;);

        return Lists.partition(sourceList, size).stream()
                .map(buildParam)
                .map(processFunction)
                .filter(Objects::nonNull)
                .reduce(new ArrayList&amp;lt;&amp;gt;(),
                        (resultList1, resultList2) -&amp;gt; {
                            resultList1.addAll(resultList2);
                            return resultList1;
                        });

    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;4.3661971830986&quot;&gt;
&lt;p&gt;本文由博客群发一文多发等运营工具平台 &lt;a href=&quot;https://openwrite.cn?from=article_bottom&quot;&gt;OpenWrite&lt;/a&gt; 发布&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 04 Jul 2020 14:22:00 +0000</pubDate>
<dc:creator>OrangeCsong</dc:creator>
<og:description>在使用dubbo时，通常会遇到timeout这个属性，timeout属性的作用是：给某个服务调用设置超时时间，如果服务在设置的时间内未返回结果，则会抛出调用超时异常：TimeoutException，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/csong7876/p/13236955.html</dc:identifier>
</item>
<item>
<title>痞子衡嵌入式：轻松为i.MXRT设计更新Segger J-Link Flash下载算法文件 - 痞子衡</title>
<link>http://www.cnblogs.com/henjay724/p/13236872.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/henjay724/p/13236872.html</guid>
<description>&lt;p&gt;在i.MXRT所有Flash下载算法里，痞子衡认为Segger J-Link版的Flash下载算法是最应该掌握的，毕竟Segger提供了完善的软件工具支持（Jlink commander、J-Flash、Ozone），既可独立使用，也可嵌入其他MCU开发环境中使用（实际上它与Keil算法文件是兼容的），会修改和更新Segger Jlink Flash下载算法，那真是走遍天下都不怕。&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;121.58696416022&quot;&gt;
&lt;hr/&gt;&lt;p&gt;　　大家好，我是痞子衡，是正经搞技术的痞子。今天痞子衡给大家分享的是&lt;strong&gt;为i.MXRT设计更新Segger J-Link Flash下载算法文件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　想要在Flash中调试，基本是离不开Flash下载算法的，毕竟要先将代码烧写进Flash，然后才能调试。主流MCU开发环境（MCUX / IAR / Keil）以及调试工具（J-Link）的Flash下载算法设计思路基本都差不多，简单的说，就是把Flash擦写操作的底层驱动代码可执行文件通过JTAG/SWD预先加载到MCU内部RAM里，然后继续从JTAG/SWD接收应用程序代码数据并调用预加载的Flash擦写操作代码实现下载。&lt;/p&gt;
&lt;p&gt;　　痞子衡前段时间为大家介绍过 &lt;a href=&quot;https://www.cnblogs.com/henjay724/p/13202824.html&quot;&gt;《利用i.MXRT系列ROM提供的FlexSPI driver API可轻松IAP》&lt;/a&gt;，其实MCU开发环境和调试工具里的Flash下载算法也在某种程度上算是一种IAP，目前最新版本的开发环境和工具基本上都是基于ROM API来实现i.MXRT的Flash下载算法的。&lt;/p&gt;
&lt;p&gt;　　在i.MXRT所有Flash下载算法里，痞子衡认为Segger J-Link版的Flash下载算法是最应该掌握的，毕竟Segger提供了完善的软件工具支持（Jlink commander、J-Flash、Ozone），既可独立使用，也可嵌入其他MCU开发环境中使用（实际上它与Keil算法文件是兼容的），会修改和更新Segger Jlink Flash下载算法，那真是走遍天下都不怕。&lt;/p&gt;
&lt;p&gt;　　因此痞子衡搞了一个i.MXRT下载算法项目，收集了i.MXRT所有型号的下载算法源代码工程，其中jlink算法是最全的，其他IDE算法还在陆续完善中。今天痞子衡就给大家简单介绍下，如何基于这个项目来生成和更新Segger J-Link Flash算法文件。&lt;/p&gt;
&lt;blockquote readability=&quot;1.8421052631579&quot;&gt;
&lt;p&gt;i.MXRT下载算法项目： &lt;a href=&quot;https://github.com/JayHeng/imxrt-tool-flash-algo&quot;&gt;https://github.com/JayHeng/imxrt-tool-flash-algo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1、安装segger-j-link驱动&quot;&gt;1、安装Segger J-Link驱动&lt;/h3&gt;
&lt;p&gt;　　想正常使用 J-Link 仿真器，首先需要在 Segger 官网下载并安装 J-Link 驱动：&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2、确定mcu型号在j-link支持列表里&quot;&gt;2、确定MCU型号在J-Link支持列表里&lt;/h3&gt;
&lt;p&gt;　　以 i.MXRT600 芯片为例，进入 J-Link 安装目录，找到 \SEGGER\JLink_Vxxx\Devices\NXP\ 路径查看是否有 i.MXRT600 的支持，很遗憾，没有发现 i.MXRT600 的踪影，因为 i.MXRT600 型号比较新，还没有被 J-Link 官方支持。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://henjay724.com/image/github/i.MXRT600_support_in_JLink_v2.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　所以我们需要为 J-Link 增加 i.MXRT600 的支持。将本项目中提供的 i.MXRT600 芯片支持包解压，将包中的 \JLink_V652\Devices\NXP\iMXRT6xx 文件夹拷贝到上图路径下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://henjay724.com/image/github/i.MXRT600_add_support_in_JLink_v2.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　最后需要将如下代码添加到 \SEGGER\JLink_Vxxx\JLinkDevices.xml 文件中，JLinkDevices.xml 文件主要用于告诉 J-Link 仿真器 i.MXRT600 的 flash 算法文件位置在哪里。至此，i.MXRT600 的初步支持已经加到 J-Link 中。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-XML&quot;&gt;  &amp;lt;Device&amp;gt;
    &amp;lt;ChipInfo Vendor=&quot;NXP&quot; Name=&quot;MIMXRT685S_M33&quot; WorkRAMAddr=&quot;0x00000000&quot; WorkRAMSize=&quot;0x00480000&quot; Core=&quot;JLINK_CORE_CORTEX_M33&quot; JLinkScriptFile=&quot;Devices/NXP/iMXRT6xx/iMXRT6xx_CortexM33.JLinkScript&quot;/&amp;gt;
    &amp;lt;FlashBankInfo Name=&quot;FLEXSPI flash&quot; BaseAddr=&quot;0x08000000&quot; MaxSize=&quot;0x08000000&quot; Loader=&quot;Devices/NXP/iMXRT6xx/MIMXRT6XX_EVK_FLEXSPI.FLM&quot; LoaderType=&quot;FLASH_ALGO_TYPE_OPEN&quot; /&amp;gt;
    &amp;lt;FlashBankInfo Name=&quot;Secure OSPI flash Secure&quot; BaseAddr=&quot;0x18000000&quot; MaxSize=&quot;0x08000000&quot; Loader=&quot;Devices/NXP/iMXRT6xx/MIMXRT6XX_EVK_FLEXSPI_S.FLM&quot; LoaderType=&quot;FLASH_ALGO_TYPE_OPEN&quot; /&amp;gt;
  &amp;lt;/Device&amp;gt;
  &amp;lt;Device&amp;gt;
    &amp;lt;ChipInfo Vendor=&quot;NXP&quot; Name=&quot;MIMXRT633S&quot; WorkRAMAddr=&quot;0x00000000&quot; WorkRAMSize=&quot;0x00280000&quot; Core=&quot;JLINK_CORE_CORTEX_M33&quot;/&amp;gt;
  &amp;lt;/Device&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;3、生成flash算法文件&quot;&gt;3、生成flash算法文件&lt;/h3&gt;
&lt;p&gt;　　以 i.MXRT600-EVK (Rev.E) 官方开发板为例，使用 Keil MDK (v5.27及以上) 打开 flash 算法工程，这个工程里的默认 flash 配置适用于 EVK 上 Flash 型号以及连法（关于 RT600 的 flash 连法可参考文章 &lt;a href=&quot;https://www.cnblogs.com/henjay724/p/12436962.html&quot;&gt;《FlexSPI NOR连接方式大全(RT600)》&lt;/a&gt; ）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　如果是其他型号 Flash 或连法，一般只需要更改 FlashPrg_mx25um51345.c 文件里的 CONFIG_OPTION0 和 CONFIG_OPTION1 的值即可。关于这两个值的定义，参考芯片手册里的BootROM章节，因为 i.MXRT600 支持 ROM API，这里的 flash 算法工程是基于 ROM API 实现的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://henjay724.com/image/github/i.MXRT600_B0_NXP_EVK_generate_flash_algo.PNG&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　工程成功编译后，会生成 MIMXRT6XX_EVK_FLEXSPI.FLM，这个文件就是我们要的算法文件，其实它就是.axf文件改了个文件类型。你可以手工地将新生成的 .FLM 改个名字（当然最好在 Keil 工程里改名）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://henjay724.com/image/github/i.MXRT600_jlink_flashloader_project_output.PNG&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;4、使用新生成的flash算法文件&quot;&gt;4、使用新生成的flash算法文件&lt;/h3&gt;
&lt;p&gt;　　有了新生成的 MIMXRT6XX_EVK_FLEXSPI.FLM，将其放到 \SEGGER\JLink_Vxxx\Devices\NXP\iMXRT6xx 目录下，并且注意修改 \SEGGER\JLink_Vxxx\JLinkDevices.xml 文件中的 &lt;strong&gt;Loader=&quot;Devices/NXP/iMXRT6xx/MIMXRT6XX_EVK_FLEXSPI.FLM&quot;&lt;/strong&gt; 语句（如果你改了.FLM文件名的话）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://henjay724.com/image/github/i.MXRT600_new_FLM_for_JLinkDevices_xml.PNG&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　为了让 i.MXRT600 芯片支持包和新 flash 算法生效，最好双击运行一下 \SEGGER\JLink_Vxxx\JLinkDLLUpdater.exe。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://henjay724.com/image/github/Segger_jlink_dll_updater_v2.PNG&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;5、j-flash使用示例&quot;&gt;5、J-Flash使用示例&lt;/h3&gt;
&lt;p&gt;　　至此我们就可以在 J-Link 下正常下载 i.MXRT600-EVK 上的 flash 了，以 J-Link 配套的 flash 烧写工具 J-Flash 为例。打开 \SEGGER\JLink_Vxxx\JFlash.exe 软件，选择目标芯片为 &lt;strong&gt;MiMXRT685S_M33&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://henjay724.com/image/github/i.MXRT600_usage_in_jflash.PNG&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　然后，将 i.MXRT600-EVK 设为 Serial ISP 模式（SW5[2:1]设为Off-Off-On）并通电，连接上后便可以任意读写擦 flash 了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://henjay724.com/image/github/i.MXRT600_usage_in_jflash_run.PNG&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;欢迎订阅&quot;&gt;欢迎订阅&lt;/h3&gt;
&lt;p&gt;文章会同时发布到我的 &lt;a href=&quot;https://www.cnblogs.com/henjay724/&quot;&gt;博客园主页&lt;/a&gt;、&lt;a href=&quot;https://blog.csdn.net/Henjay724&quot;&gt;CSDN主页&lt;/a&gt;、&lt;a href=&quot;http://weixin.sogou.com/weixin?type=1&amp;amp;query=%E7%97%9E%E5%AD%90%E8%A1%A1%E5%B5%8C%E5%85%A5%E5%BC%8F&quot;&gt;微信公众号&lt;/a&gt; 平台上。&lt;/p&gt;
&lt;p&gt;微信搜索&quot;&lt;strong&gt;痞子衡嵌入式&lt;/strong&gt;&quot;或者扫描下面二维码，就可以在手机上第一时间看了哦。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://henjay724.com/image/github/pzhMcu_qrcode_258x258.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Sat, 04 Jul 2020 14:01:00 +0000</pubDate>
<dc:creator>痞子衡</dc:creator>
<og:description>在i.MXRT所有Flash下载算法里，痞子衡认为Segger J-Link版的Flash下载算法是最应该掌握的，毕竟Segger提供了完善的软件工具支持（Jlink commander、J-Flas</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/henjay724/p/13236872.html</dc:identifier>
</item>
</channel>
</rss>