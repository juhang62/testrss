<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>上周我面了个三年 Javaer，这几个问题都没答出来 - yes的练级攻略</title>
<link>http://www.cnblogs.com/yescode/p/14027002.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yescode/p/14027002.html</guid>
<description>&lt;p&gt;身为 Java Web 开发我发现很多人一些 Web 基础问题都答不上来。&lt;/p&gt;
&lt;p&gt;上周我面试了一个三年经验的小伙子，一开始我问他 HTTP/1、HTTP/2相关的他到是能答点东西出来。&lt;/p&gt;
&lt;p&gt;后来我问他：你知道 HTTP 的本质是什么吗？&lt;/p&gt;
&lt;p&gt;他支支吾吾答不出来。&lt;/p&gt;
&lt;p&gt;我接着问那你知道什么是 HTTP 和 RPC 的关系吗？&lt;/p&gt;
&lt;p&gt;为什么要有 RPC？&lt;/p&gt;
&lt;p&gt;他眼睛盯着桌上的水，额了半天。&lt;/p&gt;
&lt;p&gt;最后我跟他说回家等通知吧（当然还有很多都答不上来哈，多方位我都问了）。&lt;/p&gt;
&lt;p&gt;面完试之后我回去问了同事相同的问题，我发现答的也不够好，有些地方有点混淆。&lt;/p&gt;
&lt;p&gt;所以今儿我就整理一波来说说这类问题，相信看完文章之后你会有进一步的认识。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/0c10e542a973ac35b72337775b2a6587.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;http-的本质&quot;&gt;HTTP 的本质&lt;/h2&gt;
&lt;p&gt;首先你要明确 HTTP 是一个协议，是一个超文本传输协议。&lt;/p&gt;
&lt;p&gt;它基于 TCP/IP 来传输文本、图片、视频、音频等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点来了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;HTTP 不提供数据包的传输功能，也就是数据包从浏览器到服务端再来回的&lt;strong&gt;传输&lt;/strong&gt;和它没关系。&lt;/p&gt;
&lt;p&gt;这是 TCP/IP 干的。&lt;/p&gt;
&lt;p&gt;那 HTTP 有啥用？我们来分析一波。&lt;/p&gt;
&lt;p&gt;我们上网要么就是获取一些信息来看，要么就是修改一些信息。&lt;/p&gt;
&lt;p&gt;比如你用浏览器刷微博就是获取信息，发微博就是修改信息。&lt;/p&gt;
&lt;p&gt;所以说浏览器需要告知服务器它需要什么，这次的请求是要获取哪些信息？发怎么样的微博。&lt;/p&gt;
&lt;p&gt;这就涉及到浏览器和服务器之间的通信交互。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;交互就需要一种格式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;像你我之间的谈话就用中文，你要突然换成俄语我听不懂那不就 GG 了。&lt;/p&gt;
&lt;p&gt;所以说 HTTP 它规定了一种格式，一种通信格式，大家都用这个格式来交谈。&lt;/p&gt;
&lt;p&gt;这样不论你是什么服务器、什么浏览器都能顺利的交流，&lt;strong&gt;减少交互的成本&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;就像全世界如果都讲中文，那我们不就不需要学英文了，那不就较少交互的成本了。&lt;/p&gt;
&lt;p&gt;不像现在我们还得学英文，不然就看不懂文档等等。&lt;/p&gt;
&lt;p&gt;万一之后俄语又起来了，咱还得对接俄文，这交互成本是不是就上来了。&lt;/p&gt;
&lt;p&gt;而网络世界还好，咱们现在的 Web 交互基本上就是 HTTP 了。&lt;/p&gt;
&lt;p&gt;其实 HTTP 协议的格式很像我们信封，有个固定的格式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/b65675913f7dd58c3400728113a96715.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;左上角写邮编，右上角贴邮票，然后地址姓名啥的依次来。&lt;/p&gt;
&lt;p&gt;因为计算机是很死板的，不像我们人一样有一种立体扫描感，所以要规定先写头、再写尾。&lt;/p&gt;
&lt;p&gt;你要是先写尾，再写头计算机就认不出来了。&lt;/p&gt;
&lt;p&gt;所以 HTTP 就规定了请求先搞请求行、再搞请求报头、再搞请求体。&lt;/p&gt;
&lt;p&gt;响应就状态行、响应报头、响应体。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/93883b11855366c70c8e019661a3d72e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以 HTTP 的本质是什么？&lt;/p&gt;
&lt;p&gt;就是&lt;strong&gt;客户端和服务端约定好的一种通信格式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对 HTTP 想有多的认识可以看我之前的文章 &lt;a href=&quot;https://mp.weixin.qq.com/s/No2cusaCeKvcEHUafyAG7A&quot;&gt;从 1950 年开始说起，带你看 HTTP 的演进之路&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;http-和-rpc-的关系&quot;&gt;HTTP 和 RPC 的关系&lt;/h2&gt;
&lt;p&gt;HTTP 和 RPC 其实是两个维度的东西， HTTP 指的是通信协议。&lt;/p&gt;
&lt;p&gt;而 RPC 则是远程调用，其对应的是本地调用。&lt;/p&gt;
&lt;p&gt;RPC 的通信可以用 HTTP 协议，也可以自定义协议，是不做约束的。&lt;/p&gt;
&lt;p&gt;像之前的单体时代，我们的 service 调用就是自己实现的方法，是本地进程内的调用。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public User getUserById(Long id) {
       return userDao.getUserById(id); // 这叫本地调用
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在都是微服务了，根据业务模块做了不同的拆分，像用户的服务不用我这个小组负责，我这小组只要写订单服务就行了。&lt;/p&gt;
&lt;p&gt;但是我们服务需要用到用户的信息，于是我们需要调用用户小组的服务，于是代码变成了以下这种&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public User getUserById(Long id) {
       return userConsumer.getUserById(id); // 这是远程调用，逻辑是用户小组的服务实现的。
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可能还有些小伙伴不太清楚，再来看个图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/1abd95851daadc52beb227a0afffd511.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;把之前的用户实现拆分出来弄了一个用户服务，订单相关的也拆成了订单服务，都单独部署。&lt;/p&gt;
&lt;p&gt;这样订单相关的服务要获取用户的信息就需要远程调用了。&lt;/p&gt;
&lt;p&gt;可以看到 RPC 就是通过网络进行远程调用，订单服务其实就是客户端，而用户服务是服务端。&lt;/p&gt;
&lt;p&gt;这又涉及到交互了，所以也需要约定一个格式，&lt;strong&gt;至于要不要用 HTTP 这个格式，就是大家自己看着办&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;至此相信你对 HTTP 是啥也清楚了。&lt;/p&gt;
&lt;p&gt;RPC 和 HTTP 的之间的关系也清楚了。&lt;/p&gt;
&lt;p&gt;下次再也不怕被面试官问这个了。&lt;/p&gt;
&lt;h2 id=&quot;那为什么要有-rpc？&quot;&gt;那为什么要有 RPC？&lt;/h2&gt;
&lt;p&gt;可能你常听到什么什么之间是 RPC 调用的，那你有没有想过为什么要 RPC， 我们直接 WebClient HTTP 调用不行么？&lt;/p&gt;
&lt;p&gt;其实 RPC 调用是因为服务的拆分，或者本身公司内部的多个服务之间的通信。&lt;/p&gt;
&lt;p&gt;服务的拆分独立部署，那服务间的调用就必然需要网络通信，用 WebClient 调用当然可行，但是比较麻烦。&lt;/p&gt;
&lt;p&gt;我们想即使服务被拆分了但是&lt;strong&gt;使用起来还是和之前本地调用一样方便&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以就出现了 RPC 框架，来屏蔽这些底层调用细节，使得我们编码上还是和之前本地调用相差不多。&lt;/p&gt;
&lt;p&gt;并且 HTTP 协议比较的冗余，RPC 都是内部调用所以不需要太考虑通用性，只要公司内部保持格式统一即可。&lt;/p&gt;
&lt;p&gt;所以可以&lt;strong&gt;做各种定制化的协议来使得通信更高效&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如规定 yes 代表 yes的练级攻略，你看是不是更高效了，少传输的 5 个字。&lt;/p&gt;
&lt;p&gt;就像特殊行动的暗号，高效简洁！&lt;/p&gt;
&lt;p&gt;所以公司内部服务的调用一般都用 RPC，而 HTTP 的优势在于通用，大家都认可这个协议。&lt;/p&gt;
&lt;p&gt;所以&lt;strong&gt;三方平台提供的接口都是通过 HTTP 协议调用的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以现在知道为什么我们调用第三方都是 HTTP ，公司内部用 RPC 了吧？&lt;/p&gt;
&lt;p&gt;对了。&lt;/p&gt;
&lt;p&gt;上面这段话看起来仿佛 HTTP 和 RPC 是对等关系，不过相信大家看了之前的解析心里应该都有数了。&lt;/p&gt;
&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;最近几次面试下来我发现挺多同学基础还是挺薄弱的。&lt;/p&gt;
&lt;p&gt;地基要牢啊，八股文得背没错，但是这种基本概念性的东西还是有必要清晰的。&lt;/p&gt;
&lt;p&gt;看起来好像对平时的编码没什么用，但是这可以认为是一个“世界观”。&lt;/p&gt;
&lt;p&gt;这对于一些事物的判断和认知有很重要的意义。&lt;/p&gt;
&lt;p&gt;你站的高才能看的远。&lt;/p&gt;
&lt;p&gt;对了，理解了 HTTP 的本质相信你对 RESTful 风格也应该会有更深一层的理解。&lt;/p&gt;
&lt;p&gt;HTTP 它是协议，不是运输通道。&lt;/p&gt;
&lt;p&gt;下一篇我会剖析下 RESTful ，让你知其然知其所以然。&lt;/p&gt;
&lt;p&gt;平日的面试题遇到难处，或者看某个知识点翻遍全网的资料还是感觉很模糊、不透彻，可以私聊我，给我留言。&lt;/p&gt;
&lt;p&gt;遇到合适的我会整理写出一篇文章，注意这个前提我认为合适的。&lt;/p&gt;
&lt;p&gt;那种工作遇到很细节的场景的还是别了，这种问你上司比较合适：）。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;我是 yes，从一点点到亿点点，微信搜一搜「yes的练级攻略」第一时间阅读，关注回复「123」一份 20W 字的走心算法攻略等你来领取，我们下篇见。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2083803/202011/2083803-20201123214512051-985047493.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 24 Nov 2020 00:41:00 +0000</pubDate>
<dc:creator>yes的练级攻略</dc:creator>
<og:description>身为 Java Web 开发我发现很多人一些 Web 基础问题都答不上来。 上周我面试了一个三年经验的小伙子，一开始我问他 HTTP/1、HTTP/2相关的他到是能答点东西出来。 后来我问他：你知道</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/yescode/p/14027002.html</dc:identifier>
</item>
<item>
<title>贞炸了！上线之后，消息收不到了！ - 楼下小黑哥</title>
<link>http://www.cnblogs.com/goodAndyxublog/p/14028403.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/goodAndyxublog/p/14028403.html</guid>
<description>&lt;p&gt;hello，各位小伙伴们，上午好~&lt;/p&gt;
&lt;p&gt;昨晚生产系统机房切换，又度过了一个不眠之夜。趁着这段无聊时间，分享一下前一段时间 RocketMQ 踩坑经历&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083838479-1060820315.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;太惨了！！！早上刚躺下睡了两小时，就被一通电话侥幸起来查看问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;事情是这样的，前端时间我们有个新业务上线，这个业务需要监听支付成功的 mq 消息，然后向绑定的音箱推送消息。这样用户在支付完成之后，商家端就就可以收到收款播报。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083839070-1289483674.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;起初我们在测试环境的测试的时候，一切流程非常顺利，没有任何问题。但是等到我们发布上线之后，却出现了问题。&lt;/p&gt;
&lt;p&gt;一笔支付成功之后，音箱没有发出收款成功的播报。一切流程排查下来之后，这才发现原来 MQ 消费端没有正常在消费消息。&lt;/p&gt;
&lt;p&gt;开始排查问题，第一想到的是消费端是不是发布失败了，但是查看相关日志，并没有任何异常。&lt;/p&gt;
&lt;p&gt;登录 MQ 控制台，尝试手动重新发布消息，神奇的事来了，&lt;strong&gt;消费端成功收到消息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083839259-1158691881.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总结现在的问题，下文开始排查。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;MQ 消费端应用没有异常，但是无法正常消费&lt;/li&gt;
&lt;li&gt;MQ 控制台发送消息，消费端可以成功消费消息&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;排查问题&quot;&gt;排查问题&lt;/h2&gt;
&lt;p&gt;刚开始排查的时候，由于没有任何异常业务日志可以定位问题，所以问题排查起来十分困难。&lt;/p&gt;
&lt;p&gt;排查了两天了，想过各种问题。比如当前消费端使用 RocketMQ 客户端版本比较高，是不是版本兼容性导致的问题呢？&lt;/p&gt;
&lt;p&gt;于是降低消费端的版本，重新发布之后，问题依然存在。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083839379-1302738959.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;没办法，只好使用 Google 大法了。&lt;/p&gt;
&lt;p&gt;通过搜索发现，原来默认情况下 rockmq 客户端的日志将会单独打印输出，日志文件位置如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;${user.home}/logs/rocketmqlogs
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下图为当时的日志截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083839606-1550777716.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到消费端尝试连接一个 20878 的端口，但是由于网络问题，一直连接失败。&lt;/p&gt;
&lt;p&gt;那这个 20878 是什么端口？&lt;/p&gt;
&lt;p&gt;我们并没有主动配置这个端口，但是 rocketmq broker 配置的端口为 20880。&lt;/p&gt;
&lt;p&gt;搜索发现，原来 rocketmq broker 默认将会启动三个通讯端口：&lt;/p&gt;
&lt;p&gt;第一个是 rocketmq broker 配置文件上配置的端口，默认端口为 &lt;strong&gt;10911&lt;/strong&gt;，这里我们修改成了 20880。&lt;/p&gt;
&lt;p&gt;第二个是 rockemq broker vip 通道端口，这个端口将会在第一个端口基础上减 2，即 20878。&lt;/p&gt;
&lt;p&gt;第三个是 rockemq broker 用户主从数据同步的端口，这个端口将会在第一个端口基础上加 1，即 20881。&lt;/p&gt;
&lt;p&gt;大概知道问题，解决办法就很简单了，要么防火墙打开 29878 网络端口的限制，要么关闭使用 vip 端口。&lt;/p&gt;
&lt;p&gt;RocketMQ 客户端提供两种方式关闭使用 vip 端口。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;代码主动禁止使用 vip 端口，配置如下：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;## 消费端
DefaultMQPushConsumer#setVipChannelEnabled(false)
## 生产端
DefaultMQProducer#setVipChannelEnabled(false);
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;设置 JVM 参数，禁用 vip 端口&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;-Dcom.rocketmq.sendMessageWithVIPChannel=false
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;源码分析&quot;&gt;源码分析&lt;/h2&gt;
&lt;p&gt;虽然问题解决了，但是上述问题本质原因还没有找到。所以这次我们就从源码出发，追本溯源。&lt;/p&gt;
&lt;h3 id=&quot;为什么-vip-端口网络不通将会导致消费者不能正常消费？&quot;&gt;为什么 vip 端口网络不通将会导致消费者不能正常消费？&lt;/h3&gt;
&lt;p&gt;从 rocketmq 错误日志，我们可以看到报错代码位于 &lt;code&gt;RebalanceService&lt;/code&gt; 类中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083840046-1381978429.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里主要用来执行 topic Rebalance（重平衡）。&lt;/p&gt;
&lt;p&gt;首先我们来了解一下，&lt;code&gt;Rebalance&lt;/code&gt; 目的是为什么了。&lt;/p&gt;
&lt;p&gt;假设当前 rocketmq broker 端存在一个 topic ，拥有四个队列，关系如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083840311-836107183.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时如果有一个消费者使用集群模式消费消息，那么它将需要负责消费所有队列中的消息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083840472-1427064553.jpg&quot; alt=&quot;rocketmq 消费者-第 1 页 的副本&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当我们再增加一个消费者消费消息时，此时消费端将会自动进行重平衡，默认情况下将会使用平均分配原则。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083840686-315895315.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到 &lt;code&gt;Rebalance&lt;/code&gt; 机制可以提升的消息的并行处理机制。&lt;/p&gt;
&lt;p&gt;rocketmq 消费端启动时竟会触发 &lt;code&gt;Rebalance&lt;/code&gt; 机制。接着，我们根据源码主要看下 &lt;code&gt;Rebalance&lt;/code&gt; 主流程，代码位于&lt;code&gt;RebalanceImpl#rebalanceByTopic&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;通常我们使用集群消费模式，所以这里主要看集群模式下 &lt;code&gt;Rebalance&lt;/code&gt; 过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083840973-351825916.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上述代码整体流程如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先获取 &lt;strong&gt;Rebalance&lt;/strong&gt; 过程所需元数据，包括 &lt;strong&gt;Topic&lt;/strong&gt; 下的队列信息集合以及消费者组下的消费者实例 id 信息集合&lt;/li&gt;
&lt;li&gt;两者都存在的情况下，将会按照一定策略将队列信息分配给每个消费者，默认按照 &lt;code&gt;AllocateMessageQueueAveragely&lt;/code&gt;，即平均分配原则&lt;/li&gt;
&lt;li&gt;将预分配结果尝试更新 &lt;code&gt;ProcessQueue Table&lt;/code&gt;,如果有更新将会把新的队列在加入异步消费流程。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;后续消息流程就不看源码，比较复杂，网上找了一张消息消费流程图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083841200-1450308763.jpg&quot; alt=&quot;来自：https://blog.csdn.net/binzhaomobile/article/details/75004190&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，由于网络端口问题，无法正常获取所有消费者 ID 集合，这就导致无法正常分配队列信息。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt; List&amp;lt;String&amp;gt; cidAll = this.mQClientFactory.findConsumerIdList(topic, consumerGroup);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于未被分配任一队列，消费端程序也就业务无法正常拉取消息。&lt;/p&gt;
&lt;h3 id=&quot;为什么-mq-控制台重新发送的消息消费者可以收到？&quot;&gt;为什么 mq 控制台重新发送的消息消费者可以收到？&lt;/h3&gt;
&lt;p&gt;rocketmq 控制台重新发送消息代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083841432-35666260.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MessageService&lt;/code&gt; 将会把消息的元数据封装一个&lt;code&gt;CONSUME_MESSAGE_DIRECTLY&lt;/code&gt;类型的请求，接着调用 rocketmq 提供的 admin API，给 rocketmq broker 发送请求。&lt;/p&gt;
&lt;p&gt;broker 端收到请求之后，将会查询消息，然后再向消费端发起 &lt;code&gt;CONSUME_MESSAGE_DIRECTLY&lt;/code&gt; 请求。消费端接受到消息请求之后，将会直接消息这条消息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083841661-1158964656.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;为什么-broker-将会启动两个端口？&quot;&gt;为什么 broker 将会启动两个端口？&lt;/h3&gt;
&lt;p&gt;rocketmq broker 虽然启动了两个端口，但是从 rocketmq broker 的源码可以发现这两个端口启动之后起到作用是一样的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083842025-336651718.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那为什么开启两个监听端口那？我想很多同学应该也有这个疑惑，这里给出一个开发者解释答案。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/rocketmq/issues/1510&quot;&gt;https://github.com/apache/rocketmq/issues/1510&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1419561/202011/1419561-20201124083842425-901753727.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;普通的端口将会承载所有消息网络请求，如果此时请求非常繁忙，broker 端的所有 I/O 线程可能都在执行请求，这就会导致后续网络请求进入队列，从而导致消息请求执行缓慢。&lt;/p&gt;
&lt;p&gt;这对于生产者来说，可能是一个致命的问题，因为消息生产者通常消息发送延时要低。&lt;/p&gt;
&lt;p&gt;这种情况下，我们就可以将消息发送到 VIP 端口，从而降低消息发送的延时。&lt;/p&gt;
&lt;p&gt;默认情况下，rocketmq 客户端的 &lt;code&gt;vipChannel&lt;/code&gt; 配置为 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;private boolean vipChannelEnabled = Boolean.parseBoolean(System.getProperty(SEND_MESSAGE_WITH_VIP_CHANNEL_PROPERTY, &quot;true&quot;));
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;生产者的发送消息，消费者获取元数据信息等请求默认将会使用 &lt;code&gt;vip&lt;/code&gt; 端口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不过这里需要注意一点，消费者拉取消息，将不会使用&lt;code&gt;vip&lt;/code&gt; 端口。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然这个设计很巧妙，但是说实话个人觉得这个配置权限应该交给开发者自己去配置，而不是默认开启。&lt;/p&gt;
&lt;p&gt;因为不熟悉的情况下还是很容易踩坑的，默认情况下，大家应该只熟悉 9876 与 10911 这两个端口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rocketmq 4.5.1 版本之后，&lt;code&gt;vipChannel&lt;/code&gt; 配置被修改为 &lt;code&gt;false&lt;/code&gt;，这时是否使用 vip 端口真正交给开发者自己&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果此时想开启，需要主动 API 参数，或者 JVM 参数增加 &lt;code&gt;-Dcom.rocketmq.sendMessageWithVIPChannel=true&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;今天的问题主要由于 VIP 端口无法连接，从而导致消费端无法正常消费消息。虽然最后的解决办法非常简单，但是这个排查过程真的很难。&lt;/p&gt;
&lt;p&gt;我们平常在使用 rocketmq 过程中，通常只要设置 &lt;strong&gt;nameserver&lt;/strong&gt; 的配置即可， broker 等地址信息将会自动从 &lt;strong&gt;nameserver&lt;/strong&gt; 获取。这就间接导致了，我们可能只了解 9876 这个端口。&lt;/p&gt;
&lt;p&gt;生产环境由于网络安全问题，一般不会开放全部的端口。所以，我们在使用 rocketmq 的过程，需要了解以下四个端口，分别为（&lt;strong&gt;默认配置&lt;/strong&gt;）：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;9876：&lt;strong&gt;nameserver&lt;/strong&gt; 监听端口&lt;/li&gt;
&lt;li&gt;10911： broker 监听端口&lt;/li&gt;
&lt;li&gt;10909：broker vip 监听端口&lt;/li&gt;
&lt;li&gt;10912：broker HA 端口，用于主从同步&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;生产使用 rocketmq 过程，如果碰到诡问题，不妨尝试 telnet 看下网关连通性。另外还可以通过查看 rocketmq 自身日志，确定问题，日志位置位于：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-properties&quot;&gt;${user.home}/logs/rocketmqlogs
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;好了，今天文章就到这里。我是楼下小黑哥，你知道的越多，你不知道的就越多。&lt;/p&gt;
&lt;p&gt;下周见~&lt;/p&gt;
&lt;blockquote readability=&quot;5.5384615384615&quot;&gt;
&lt;p&gt;欢迎关注我的公众号：程序通事，获得日常干货推送。如果您对我的专题内容感兴趣，也可以关注我的博客：&lt;a href=&quot;https://studyidea.cn&quot;&gt;studyidea.cn&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Tue, 24 Nov 2020 00:39:00 +0000</pubDate>
<dc:creator>楼下小黑哥</dc:creator>
<og:description>hello，各位小伙伴们，上午好~ 昨晚生产系统机房切换，又度过了一个不眠之夜。趁着这段无聊时间，分享一下前一段时间 RocketMQ 踩坑经历 太惨了！！！早上刚躺下睡了两小时，就被一通电话侥幸起来</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/goodAndyxublog/p/14028403.html</dc:identifier>
</item>
<item>
<title>Golang 实现 Redis(6): 实现 pipeline 模式的 redis 客户端  - -Finley-</title>
<link>http://www.cnblogs.com/Finley/p/14028402.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Finley/p/14028402.html</guid>
<description>&lt;p&gt;本文是使用 golang 实现 redis 系列的第六篇， 将介绍如何实现一个 Pipeline 模式的 Redis 客户端&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;181.91218034993&quot;&gt;
&lt;p&gt;本文是使用 golang 实现 redis 系列的第六篇， 将介绍如何实现一个 Pipeline 模式的 Redis 客户端。&lt;/p&gt;
&lt;p&gt;本文的完整代码在&lt;a href=&quot;https://github.com/HDT3213/godis/blob/master/src/redis/client/client.go&quot;&gt;Github:Godis/redis/client&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通常 TCP 客户端的通信模式都是阻塞式的: 客户端发送请求 -&amp;gt; 等待服务端响应 -&amp;gt; 发送下一个请求。因为需要等待网络传输数据，完成一次请求循环需要等待较多时间。&lt;/p&gt;
&lt;p&gt;我们能否不等待服务端响应直接发送下一条请求呢？答案是肯定的。&lt;/p&gt;
&lt;p&gt;TCP 作为全双工协议可以同时进行上行和下行通信，不必担心客户端和服务端同时发包会导致冲突。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;p.s. 打电话的时候两个人同时讲话就会冲突听不清，只能轮流讲。这种通信方式称为半双工。广播只能由电台发送到收音机不能反向传输，这种方式称为单工。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们为每一个 tcp 连接分配了一个 goroutine 可以保证先收到的请求先先回复。另一个方面，tcp 协议会保证数据流的有序性，同一个 tcp 连接上先发送的请求服务端先接收，先回复的响应客户端先收到。因此我们不必担心混淆响应所对应的请求。&lt;/p&gt;
&lt;p&gt;这种在服务端未响应时客户端继续向服务端发送请求的模式称为 Pipeline 模式。因为减少等待网络传输的时间，Pipeline 模式可以极大的提高吞吐量，减少所需使用的 tcp 链接数。&lt;/p&gt;
&lt;p&gt;pipeline 模式的 redis 客户端需要有两个后台协程程负责 tcp 通信，调用方通过 channel 向后台协程发送指令，并阻塞等待直到收到响应，这是一个典型的异步编程模式。&lt;/p&gt;
&lt;p&gt;我们先来定义 client 的结构:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-golang&quot;&gt;type Client struct {
    conn        net.Conn // 与服务端的 tcp 连接
    sendingReqs chan *Request // 等待发送的请求
    waitingReqs chan *Request // 等待服务器响应的请求
    ticker      *time.Ticker // 用于触发心跳包的计时器
    addr        string

    ctx        context.Context
    cancelFunc context.CancelFunc
    writing    *sync.WaitGroup // 有请求正在处理不能立即停止，用于实现 graceful shutdown
}

type Request struct {
    id        uint64 // 请求id
    args      [][]byte // 上行参数
    reply     redis.Reply // 收到的返回值
    heartbeat bool // 标记是否是心跳请求
    waiting   *wait.Wait // 调用协程发送请求后通过 waitgroup 等待请求异步处理完成
    err       error
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;调用者将请求发送给后台协程，并通过 wait group 等待异步处理完成:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-golang&quot;&gt;func (client *Client) Send(args [][]byte) redis.Reply {
    request := &amp;amp;Request{
        args:      args,
        heartbeat: false,
        waiting:   &amp;amp;wait.Wait{},
    }
    request.waiting.Add(1) 
    client.sendingReqs &amp;lt;- request // 将请求发往处理队列
    timeout := request.waiting.WaitWithTimeout(maxWait) // 等待请求处理完成或者超时
    if timeout {
        return reply.MakeErrReply(&quot;server time out&quot;)
    }
    if request.err != nil {
        return reply.MakeErrReply(&quot;request failed: &quot; + err.Error())
    }
    return request.reply
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;client 的核心部分是后台的读写协程。先从写协程开始:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-golang&quot;&gt;// 写协程入口
func (client *Client) handleWrite() {
loop:
    for {
        select {
        case req := &amp;lt;-client.sendingReqs: // 从 channel 中取出请求
            client.writing.Add(1) // 未完成请求数+1
            client.doRequest(req) // 发送请求
        case &amp;lt;-client.ctx.Done():
            break loop
        }
    }
}

// 发送请求
func (client *Client) doRequest(req *Request) {
    bytes := reply.MakeMultiBulkReply(req.args).ToBytes() // 序列化
    _, err := client.conn.Write(bytes) // 通过 tcp connection 发送
    i := 0
    for err != nil &amp;amp;&amp;amp; i &amp;lt; 3 { // 失败重试
        err = client.handleConnectionError(err) 
        if err == nil {
            _, err = client.conn.Write(bytes)
        }
        i++
    }
    if err == nil {
        client.waitingReqs &amp;lt;- req // 将发送成功的请求放入等待响应的队列
    } else {
        // 发送失败
        req.err = err
        req.waiting.Done() // 结束调用者的等待
        client.writing.Done() // 未完成请求数 -1
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;读协程是我们熟悉的协议解析器模板, 不熟悉的朋友可以到&lt;a href=&quot;https://www.cnblogs.com/Finley/p/11923168.html&quot;&gt;实现 Redis 协议解析器&lt;/a&gt;了解更多。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-golang&quot;&gt;// 收到服务端的响应
func (client *Client) finishRequest(reply redis.Reply) {
    request := &amp;lt;-client.waitingReqs // 取出等待响应的 request
    request.reply = reply
    if request.waiting != nil {
        request.waiting.Done() // 结束调用者的等待
    }
    client.writing.Done() // 未完成请求数-1
}

// 读协程是个 RESP 协议解析器，不熟悉的朋友可以
func (client *Client) handleRead() error {
    reader := bufio.NewReader(client.conn)
    downloading := false
    expectedArgsCount := 0
    receivedCount := 0
    msgType := byte(0) // first char of msg
    var args [][]byte
    var fixedLen int64 = 0
    var err error
    var msg []byte
    for {
        // read line
        if fixedLen == 0 { // read normal line
            msg, err = reader.ReadBytes('\n')
            if err != nil {
                if err == io.EOF || err == io.ErrUnexpectedEOF {
                    logger.Info(&quot;connection close&quot;)
                } else {
                    logger.Warn(err)
                }

                return errors.New(&quot;connection closed&quot;)
            }
            if len(msg) == 0 || msg[len(msg)-2] != '\r' {
                return errors.New(&quot;protocol error&quot;)
            }
        } else { // read bulk line (binary safe)
            msg = make([]byte, fixedLen+2)
            _, err = io.ReadFull(reader, msg)
            if err != nil {
                if err == io.EOF || err == io.ErrUnexpectedEOF {
                    return errors.New(&quot;connection closed&quot;)
                } else {
                    return err
                }
            }
            if len(msg) == 0 ||
                msg[len(msg)-2] != '\r' ||
                msg[len(msg)-1] != '\n' {
                return errors.New(&quot;protocol error&quot;)
            }
            fixedLen = 0
        }

        // parse line
        if !downloading {
            // receive new response
            if msg[0] == '*' { // multi bulk response
                // bulk multi msg
                expectedLine, err := strconv.ParseUint(string(msg[1:len(msg)-2]), 10, 32)
                if err != nil {
                    return errors.New(&quot;protocol error: &quot; + err.Error())
                }
                if expectedLine == 0 {
                    client.finishRequest(&amp;amp;reply.EmptyMultiBulkReply{})
                } else if expectedLine &amp;gt; 0 {
                    msgType = msg[0]
                    downloading = true
                    expectedArgsCount = int(expectedLine)
                    receivedCount = 0
                    args = make([][]byte, expectedLine)
                } else {
                    return errors.New(&quot;protocol error&quot;)
                }
            } else if msg[0] == '$' { // bulk response
                fixedLen, err = strconv.ParseInt(string(msg[1:len(msg)-2]), 10, 64)
                if err != nil {
                    return err
                }
                if fixedLen == -1 { // null bulk
                    client.finishRequest(&amp;amp;reply.NullBulkReply{})
                    fixedLen = 0
                } else if fixedLen &amp;gt; 0 {
                    msgType = msg[0]
                    downloading = true
                    expectedArgsCount = 1
                    receivedCount = 0
                    args = make([][]byte, 1)
                } else {
                    return errors.New(&quot;protocol error&quot;)
                }
            } else { // single line response
                str := strings.TrimSuffix(string(msg), &quot;\n&quot;)
                str = strings.TrimSuffix(str, &quot;\r&quot;)
                var result redis.Reply
                switch msg[0] {
                case '+':
                    result = reply.MakeStatusReply(str[1:])
                case '-':
                    result = reply.MakeErrReply(str[1:])
                case ':':
                    val, err := strconv.ParseInt(str[1:], 10, 64)
                    if err != nil {
                        return errors.New(&quot;protocol error&quot;)
                    }
                    result = reply.MakeIntReply(val)
                }
                client.finishRequest(result)
            }
        } else {
            // receive following part of a request
            line := msg[0 : len(msg)-2]
            if line[0] == '$' {
                fixedLen, err = strconv.ParseInt(string(line[1:]), 10, 64)
                if err != nil {
                    return err
                }
                if fixedLen &amp;lt;= 0 { // null bulk in multi bulks
                    args[receivedCount] = []byte{}
                    receivedCount++
                    fixedLen = 0
                }
            } else {
                args[receivedCount] = line
                receivedCount++
            }

            // if sending finished
            if receivedCount == expectedArgsCount {
                downloading = false // finish downloading progress

                if msgType == '*' {
                    reply := reply.MakeMultiBulkReply(args)
                    client.finishRequest(reply)
                } else if msgType == '$' {
                    reply := reply.MakeBulkReply(args[0])
                    client.finishRequest(reply)
                }


                // finish reply
                expectedArgsCount = 0
                receivedCount = 0
                args = nil
                msgType = byte(0)
            }
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后编写 client 的构造器和启动异步协程的代码:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-golang&quot;&gt;func MakeClient(addr string) (*Client, error) {
    conn, err := net.Dial(&quot;tcp&quot;, addr)
    if err != nil {
        return nil, err
    }
    ctx, cancel := context.WithCancel(context.Background())
    return &amp;amp;Client{
        addr:        addr,
        conn:        conn,
        sendingReqs: make(chan *Request, chanSize),
        waitingReqs: make(chan *Request, chanSize),
        ctx:         ctx,
        cancelFunc:  cancel,
        writing:     &amp;amp;sync.WaitGroup{},
    }, nil
}

func (client *Client) Start() {
    client.ticker = time.NewTicker(10 * time.Second)
    go client.handleWrite()
    go func() {
        err := client.handleRead()
        logger.Warn(err)
    }()
    go client.heartbeat()
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关闭 client 的时候记得等待请求完成:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-golang&quot;&gt;func (client *Client) Close() {
    // 先阻止新请求进入队列
    close(client.sendingReqs)

    // 等待处理中的请求完成
    client.writing.Wait()

    // 释放资源
    _ = client.conn.Close() // 关闭与服务端的连接，连接关闭后读协程会退出
    client.cancelFunc() // 使用 context 关闭读协程
    close(client.waitingReqs) // 关闭队列
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试一下:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-golang&quot;&gt;func TestClient(t *testing.T) {
    client, err := MakeClient(&quot;localhost:6379&quot;)
    if err != nil {
        t.Error(err)
    }
    client.Start()

    result = client.Send([][]byte{
        []byte(&quot;SET&quot;),
        []byte(&quot;a&quot;),
        []byte(&quot;a&quot;),
    })
    if statusRet, ok := result.(*reply.StatusReply); ok {
        if statusRet.Status != &quot;OK&quot; {
            t.Error(&quot;`set` failed, result: &quot; + statusRet.Status)
        }
    }

    result = client.Send([][]byte{
        []byte(&quot;GET&quot;),
        []byte(&quot;a&quot;),
    })
    if bulkRet, ok := result.(*reply.BulkReply); ok {
        if string(bulkRet.Arg) != &quot;a&quot; {
            t.Error(&quot;`get` failed, result: &quot; + string(bulkRet.Arg))
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</description>
<pubDate>Tue, 24 Nov 2020 00:37:00 +0000</pubDate>
<dc:creator>-Finley-</dc:creator>
<og:description>本文是使用 golang 实现 redis 系列的第六篇， 将介绍如何实现一个 Pipeline 模式的 Redis 客户端</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/Finley/p/14028402.html</dc:identifier>
</item>
<item>
<title>SpringBoot使用策略模式+工厂模式 - Johnson木木</title>
<link>http://www.cnblogs.com/Johnson-lin/p/14028372.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Johnson-lin/p/14028372.html</guid>
<description>&lt;p&gt;为了防止大量的&lt;code&gt;if...else...&lt;/code&gt;或&lt;code&gt;switch case&lt;/code&gt;代码的出现，可以使用策略模式+工厂模式进行优化。&lt;br/&gt;在我的项目当中，报表繁多，所以尝试了这种方式进行优化报表的架构。代码很简单，如下：&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@Service
public class ReportFactory {

    /**
     * 初始化的时候将所有的ReportService自动加载到Map中
     */
    @Autowired
    private final Map&amp;lt;String, ReportService&amp;gt; reportIns = new ConcurrentHashMap&amp;lt;&amp;gt;();

    public ReportService getReportIns(String code) {
        ReportService reportInstance = reportIns.get(code);
        if (reportInstance == null) {
            throw new RuntimeException(&quot;未定义reportInstance&quot;);
        }

        return reportInstance;
    }

}
&lt;/code&gt;
&lt;/pre&gt;

&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public interface ReportService {
    String getResult();
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@Component(value = &quot;A1&quot;)
public class ReportServiceA1 implements ReportService {

    @Override
    public String getResult() {
        return &quot;我是A1&quot;;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@Component(value = &quot;A2&quot;)
public class ReportServiceA2 implements ReportService {

    @Override
    public String getResult() {
        return &quot;我是A2&quot;;
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@SpringBootTest
public class BlogServerApplicationTest {

    @Autowired
    ReportFactory reportFactory;

    @Test
    public void test2() {
        String result1 = reportFactory.getReportIns(&quot;A1&quot;).getResult();
        System.out.println(&quot;-----------------&quot;);
        System.out.println(result1);
        String result2 = reportFactory.getReportIns(&quot;A2&quot;).getResult();
        System.out.println(&quot;-----------------&quot;);
        System.out.println(result2);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;打印如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;-----------------
我是A1
-----------------
我是A2
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;在平时的工作当中，写一些业务代码是无可避免的，但是只要不局限于现状，往往可以发现不一样的乐趣。就像我在报表的业务中学习到了策略模式+工厂模式。&lt;/p&gt;
&lt;blockquote readability=&quot;2.6190476190476&quot;&gt;
&lt;p&gt;个人博客网址： &lt;a href=&quot;https://colablog.cn/&quot;&gt;https://colablog.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我的文章帮助到您，可以关注我的微信公众号，第一时间分享文章给您&lt;br/&gt;&lt;img src=&quot;http://qiniuyun.colablog.cn/%E4%BA%8C%E7%BB%B4%E7%A0%81.jpg&quot; alt=&quot;微信公众号&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 24 Nov 2020 00:17:00 +0000</pubDate>
<dc:creator>Johnson木木</dc:creator>
<og:description>为了防止大量的if...else...或switch case代码的出现，可以使用策略模式+工厂模式进行优化。 在我的项目当中，报表繁多，所以尝试了这种方式进行优化报表的架构。代码很简单，如下： Fa</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/Johnson-lin/p/14028372.html</dc:identifier>
</item>
<item>
<title>Spring Cloud实战 | 第九篇：Spring Cloud整合Spring Security OAuth2认证服务器统一认证自定义异常处理 - 你好，旧时光</title>
<link>http://www.cnblogs.com/haoxianrui/p/14028366.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/haoxianrui/p/14028366.html</guid>
<description>&lt;div id=&quot;cnblogs_post_description&quot; readability=&quot;36&quot;&gt;&lt;img src=&quot;https://www.cnblogs.com/haoxianrui/p/13882310.html&quot; class=&quot;desc_img&quot;/&gt;项目是真的从无到有（往期文章佐证），且使用当前主流的开发模式（微服务+前后端分离），最新主流的技术栈（Spring Boot+ Spring Cloud +Spring Cloud Alibaba + Vue），最流行的统一安全认证授权（OAuth2+JWT）,好了玩笑开完了大家别当真，总之有兴趣一起的小伙伴欢迎加入~&lt;/div&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;169.53465176268&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hxrui/youlai-mall.git&quot;&gt;&lt;strong&gt;本文完整代码下载点击&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2020/11/23/UEzdVXqR5wsm7Hv.gif&quot;/&gt;
&lt;p&gt;相信了解过我或者看过我之前的系列文章应该多少知道点我写这些文章包括创建 &lt;a href=&quot;https://github.com/hxrui/youlai-mall.git&quot;&gt;&lt;strong&gt;有来商城youlai-mall&lt;/strong&gt;&lt;/a&gt; 这个项目的目的，想给那些真的想提升自己或者迷茫的人（包括自己--一个工作6年觉得一无是处的菜鸟）提供一块上升的基石。项目是真的从无到有（往期文章佐证），且使用当前主流的开发模式（微服务+前后端分离），最新主流的技术栈（Spring Boot+ Spring Cloud +Spring Cloud Alibaba + Vue），最流行的统一安全认证授权（OAuth2+JWT）,好了玩笑开完了大家别当真，总之有兴趣一起的小伙伴欢迎加入~&lt;/p&gt;
&lt;p&gt;接下来说下这篇文章的原因，之前我是没想过应用到项目中的OAuth2+JWT这套组合拳这么受大家关注，期间一直有童鞋问怎么自定义Spring Security OAuth2的异常处理、JWT怎么续期、JWT退出等场景下如何失效等问题，所以最近有点时间想把这套统一认证授权完善掉，本篇就以如何自定义Spring Security OAuth2异常处理展开。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;往期文章链接：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/haoxianrui/p/13581881.html&quot;&gt;Spring Cloud实战 | 第一篇：Windows搭建Nacos服务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/haoxianrui/p/13584204.html&quot;&gt;Spring Cloud实战 | 第二篇：Spring Cloud整合Nacos实现注册中心&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/haoxianrui/p/13585125.html&quot;&gt;Spring Cloud实战 | 第三篇：Spring Cloud整合Nacos实现配置中心&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/haoxianrui/p/13608650.html&quot;&gt;Spring Cloud实战 | 第四篇：Spring Cloud整合Gateway实现API网关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/haoxianrui/p/13615592.html&quot;&gt;Spring Cloud实战 | 第五篇：Spring Cloud整合OpenFeign实现微服务之间的调用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/haoxianrui/p/13719356.html&quot;&gt;Spring Cloud实战 | 第六篇：Spring Cloud Gateway+Spring Security OAuth2+JWT实现微服务统一认证授权&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/haoxianrui/p/13740264.html&quot;&gt;Spring Cloud实战 | 最七篇：Spring Cloud Gateway+Spring Security OAuth2集成统一认证授权平台下实现注销使JWT失效方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/haoxianrui/p/14022632.html&quot;&gt;Spring Cloud实战 | 最八篇：Spring Cloud +Spring Security OAuth2+ Vue前后端分离模式下无感知刷新实现JWT续期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/haoxianrui/p/14022632.html&quot;&gt;Spring Cloud实战 | 最九篇：Spring Security OAuth2认证服务器统一认证自定义异常处理&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote&gt;
&lt;p&gt;管理前端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/haoxianrui/p/13624548.html&quot;&gt;vue-element-admin实战 | 第一篇： 移除mock接入后台，搭建有来商城youlai-mall前后端分离管理平台&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/haoxianrui/p/13676619.html&quot;&gt;vue-element-admin实战 | 第二篇： 最小改动接入后台实现根据权限动态加载菜单&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote&gt;
&lt;p&gt;微信小程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/haoxianrui/p/13882310.html&quot;&gt;vue+uniapp商城实战 | 第一篇：【有来小店】微信小程序快速开发接入Spring Cloud OAuth2认证中心完成授权登录&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;直接需要答案的本节走起，添加和修改三个文件即可，异常分析，&lt;a href=&quot;https://github.com/hxrui/youlai-mall.git&quot;&gt;&lt;strong&gt;点击下载完整工程代码&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 在youlai-auth认证服务器模块添加全局异常处理器AuthExceptionHandler&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package com.youlai.auth.exception;

import com.youlai.common.core.result.Result;
import com.youlai.common.core.result.ResultCode;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.InternalAuthenticationServiceException;
import org.springframework.security.oauth2.common.exceptions.InvalidGrantException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
@Slf4j
public class AuthExceptionHandler {

    /**
     * 用户名和密码错误
     *
     * @param e
     * @return
     */
    @ExceptionHandler(InvalidGrantException.class)
    public Result handleInvalidGrantException(InvalidGrantException e) {
        return Result.custom(ResultCode.USERNAME_OR_PASSWORD_ERROR);
    }

    /**
     * 账户异常(禁用、锁定、过期)
     *
     * @param e
     * @return
     */
    @ExceptionHandler({InternalAuthenticationServiceException.class})
    public Result handleInternalAuthenticationServiceException(InternalAuthenticationServiceException e) {
        return Result.error(e.getMessage());
    }
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. 重写ClientCredentialsTokenEndpointFilter实现客户端自定义异常处理&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package com.youlai.auth.filter;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter;
import org.springframework.security.web.AuthenticationEntryPoint;

/**
 * 重写filter实现客户端自定义异常处理
 */
public class CustomClientCredentialsTokenEndpointFilter extends ClientCredentialsTokenEndpointFilter {

    private AuthorizationServerSecurityConfigurer configurer;
    private AuthenticationEntryPoint authenticationEntryPoint;


    public CustomClientCredentialsTokenEndpointFilter(AuthorizationServerSecurityConfigurer configurer) {
        this.configurer = configurer;
    }

    @Override
    public void setAuthenticationEntryPoint(AuthenticationEntryPoint authenticationEntryPoint) {
        super.setAuthenticationEntryPoint(null);
        this.authenticationEntryPoint = authenticationEntryPoint;
    }

    @Override
    protected AuthenticationManager getAuthenticationManager() {
        return configurer.and().getSharedObject(AuthenticationManager.class);
    }

    @Override
    public void afterPropertiesSet() {
        setAuthenticationFailureHandler((request, response, e) -&amp;gt; authenticationEntryPoint.commence(request, response, e));
        setAuthenticationSuccessHandler((request, response, authentication) -&amp;gt; {
        });
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. AuthorizationServerConfig认证服务器配置修改&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
 * 授权服务配置
 */
@Configuration
@EnableAuthorizationServer
@AllArgsConstructor
public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {

    ......

    @Override
    public void configure(AuthorizationServerSecurityConfigurer security) {
        /*security.allowFormAuthenticationForClients();*/
        CustomClientCredentialsTokenEndpointFilter endpointFilter = new CustomClientCredentialsTokenEndpointFilter(security);
        endpointFilter.afterPropertiesSet();
        endpointFilter.setAuthenticationEntryPoint(authenticationEntryPoint());
        security.addTokenEndpointAuthenticationFilter(endpointFilter);

        security.authenticationEntryPoint(authenticationEntryPoint())
                .tokenKeyAccess(&quot;isAuthenticated()&quot;)
                .checkTokenAccess(&quot;permitAll()&quot;);
    }

    @Bean
    public AuthenticationEntryPoint authenticationEntryPoint() {
        return (request, response, e) -&amp;gt; {
            response.setStatus(HttpStatus.HTTP_OK);
            response.setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_UTF8_VALUE);
            response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);
            response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;);
            Result result = Result.custom(ResultCode.CLIENT_AUTHENTICATION_FAILED);
            response.getWriter().print(JSONUtil.toJsonStr(result));
            response.getWriter().flush();
        };
    }
    ......

}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;其实你搜一下有关Spring Security OAuth2如何自定义异常处理，网上会很多差不多解决方案提供参考，但是照搬过来试用，一点效果没有？！咋回事么？其实不能武断的说人家方案不行，最多的可能是Spring Security OAuth2版本不一致，本篇项目使用的是2.3.4版本，目前截止写这篇文章最新一版的是2020.5.28发布的2.5.0版本，后续项目会升级，如果有差异我会修改本篇文章，总之给大家提供一个解决思路，可行不可行我是不希望大家不能在我里浪费时间。&lt;/p&gt;
&lt;p&gt;好了正文开始了~ Spring Security OAuth2认证服务器异常目前我知道的有3类：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;用户名或密码错误&lt;/li&gt;
&lt;li&gt;账户状态异常&lt;/li&gt;
&lt;li&gt;客户端认证异常&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;有知道其他的欢迎留言补充~，以下就这3类异常逐一分析&lt;/p&gt;
&lt;p&gt;在异常处理之前先看下UserDetailsServiceImpl#loadUserByUsername方法抛出的异常信息，如下图：&lt;br/&gt;&lt;img src=&quot;https://i.loli.net/2020/11/23/nTmtIWgYZVuHikL.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-用户名或密码错误&quot;&gt;1. 用户名或密码错误&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;异常分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;org.springframework.security.oauth2.common.exceptions.InvalidGrantException: 用户名或密码错误
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/23/kfEgXiRASZandYK.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过异常堆栈信息定位到最终抛出异常的方法是ResourceOwnerPasswordTokenGranter#getOAuth2Authentication，异常类型是InvalidGrantException,其实到这个异常类型中间经过几道转换UsernameNotFoundException-&amp;gt;BadCredentialsException-&amp;gt;InvalidGrantException&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;处理方法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;添加全局异常处理器捕获（定位标识：AuthExceptionHandler）&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
/**
 * 用户名和密码异常
 *
 * @param e
 * @return
 */
@ExceptionHandler(InvalidGrantException.class)
public Result handleInvalidGrantException(InvalidGrantException e) {
    return Result.error(ResultCode.USERNAME_OR_PASSWORD_ERROR);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;结果验证&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;验证成功，已按照自定义异常格式返回&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/23/lNwvqVATuCKMoWG.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-账户状态异常&quot;&gt;2. 账户状态异常&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;异常分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;首先我们需要把数据库youlai的表sys_user的字段status设置为0，表示不可用状态，然后输入正确的用户名和密码，看看跑出来的原生异常信息，可惜的是这个异常没有打印堆栈信息，不过没关系，我们断点调试下，最终定位到ProviderManager#authenticate方法抛出的异常，异常类型是InternalAuthenticationServiceException。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/23/bGKlOI6LkAHUzhY.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;处理方法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;添加全局异常处理器捕获（定位标识：AuthExceptionHandler）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * 账户异常(禁用、锁定、过期)
 *
 * @param e
 * @return
 */
@ExceptionHandler({InternalAuthenticationServiceException.class})
public Result handleInternalAuthenticationServiceException(InternalAuthenticationServiceException e) {
    return Result.error(e.getMessage());
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;结果验证&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;验证成功，已按照自定义异常格式返回&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/23/rJCilthgFsfa6LA.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-客户端认证异常&quot;&gt;3. 客户端认证异常&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;异常分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;之前两种异常方式都可以通过全局异常处理器捕获，且@RestControllerAdvice只能捕获Controller的异常。&lt;/p&gt;
&lt;p&gt;客户端认证的异常则是发生在过滤器filter上，此时还没进入DispatcherServlet请求处理流程，便无法通过全局异常处理器捕获。&lt;/p&gt;
&lt;p&gt;先看下客户端认证异常出现的位置，首先把客户端ID改成错的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/23/foebrqUjKABRZth.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后执行“登录”操作，返回错误信息如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{&quot;error&quot;:&quot;invalid_client&quot;,&quot;error_description&quot;:&quot;Bad client credentials&quot;}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一眼望去，这显然不是我们想要的格式。&lt;/p&gt;
&lt;p&gt;那怎么做才能捕获这个异常转换成自定义数据格式返回呢？显然全局异常处理器无法实现，那必须转换下思路了。&lt;/p&gt;
&lt;p&gt;首先客户端的认证是交由ClientCredentialsTokenEndpointFilter来完成的，其中有后置添加失败处理方法，最后把异常交给OAuth2AuthenticationEntryPoint这个所谓认证入口处理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/23/MA1b2sQBhN9iZO4.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;认证入口OAuth2AuthenticationEntryPoint#commence方法中转给父类AbstractOAuth2SecurityExceptionHandler#doHandle方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/23/sShFNOJL31pRjHX.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后异常定格在AbstractOAuth2SecurityExceptionHandler#doHandle方法上，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/23/ekopFEbYsXftxrn.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中this.enhanceResponse是调用OAuth2AuthenticationEntryPoint#enhanceResponse方法得到响应结果数据。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;处理方法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面我们得知客户端的认证失败异常是过滤器ClientCredentialsTokenEndpointFilter转交给OAuth2AuthenticationEntryPoint得到响应结果的，既然这样我们就可以重写ClientCredentialsTokenEndpointFilter然后使用自定义的AuthenticationEntryPoint替换原生的OAuth2AuthenticationEntryPoint，在自定义AuthenticationEntryPoint处理得到我们想要的异常数据。&lt;/p&gt;
&lt;p&gt;自定义AuthenticationEntryPoint设置异常响应数据格式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/23/GI8MwAD7qRhfBox.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;重写ClientCredentialsTokenEndpointFilter替换AuthenticationEntryPoint&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/23/2RFrmZbicIxXqyH.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;认证服务器配置添加自定义过滤器&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/23/8FihgWN2Yc4TepA.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;结果验证&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;验证成功，已按照自定义异常格式返回&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/23/7dr52nSkYyA3Xze.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;至此，认证服务器的自定义异常处理已全部处理完毕，资源服务器异常处理说明在这篇文章 &lt;a href=&quot;https://www.cnblogs.com/haoxianrui/p/13719356.html&quot;&gt;Spring Cloud实战 | 第六篇：Spring Cloud Gateway+Spring Security OAuth2+JWT实现微服务统一认证授权&lt;/a&gt;，这就宣告 &lt;a href=&quot;https://github.com/hxrui/youlai-mall.git&quot;&gt;&lt;strong&gt;youlai-mall&lt;/strong&gt;&lt;/a&gt; 的统一认证授权模块基本达到完善的一个标准， 后面继续回到业务功能的开发,所以觉得对你有帮助的给个关注（持续更新）或者给个star，灰常感谢! 最重要的如果你真的对这个项目有兴趣想一起开发学习的像文章开始说的那样请联系我哈~&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Tue, 24 Nov 2020 00:05:00 +0000</pubDate>
<dc:creator>你好，旧时光</dc:creator>
<og:description>本文完整代码下载点击 一. 前言 相信了解过我或者看过我之前的系列文章应该多少知道点我写这些文章包括创建 有来商城youlai-mall 这个项目的目的，想给那些真的想提升自己或者迷茫的人（包括自己-</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/haoxianrui/p/14028366.html</dc:identifier>
</item>
<item>
<title>Flink处理函数实战之五：CoProcessFunction(双流处理) - 程序员欣宸</title>
<link>http://www.cnblogs.com/bolingcavalry/p/14028354.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bolingcavalry/p/14028354.html</guid>
<description>&lt;h3 id=&quot;欢迎访问我的github&quot;&gt;欢迎访问我的GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zq2599/blog_demos&quot;&gt;https://github.com/zq2599/blog_demos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内容：所有原创文章分类汇总及配套源码，涉及Java、Docker、Kubernetes、DevOPS等；&lt;/p&gt;
&lt;h3 id=&quot;欢迎访问我的github-2&quot;&gt;欢迎访问我的GitHub&lt;/h3&gt;
&lt;blockquote readability=&quot;3.8613861386139&quot;&gt;
&lt;p&gt;这里分类和汇总了欣宸的全部原创(含配套源码)：&lt;a href=&quot;https://github.com/zq2599/blog_demos&quot;&gt;https://github.com/zq2599/blog_demos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;flink处理函数实战系列链接&quot;&gt;Flink处理函数实战系列链接&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/boling_cavalry/article/details/106040312&quot;&gt;深入了解ProcessFunction的状态操作(Flink-1.10)&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/106299035&quot;&gt;ProcessFunction&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/106299167&quot;&gt;KeyedProcessFunction类&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/106453229&quot;&gt;ProcessAllWindowFunction(窗口处理)&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/109614001&quot;&gt;CoProcessFunction(双流处理)&lt;/a&gt;；&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;本篇概览&quot;&gt;本篇概览&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;本文是《Flink处理函数实战》系列的第五篇，学习内容是如何同时处理两个数据源的数据；&lt;/li&gt;
&lt;li&gt;试想在面对两个输入流时，如果这两个流的数据之间有业务关系，该如何编码实现呢，例如下图中的操作，同时监听&lt;span&gt;9998&lt;/span&gt;和&lt;span&gt;9999&lt;/span&gt;端口，将收到的输出分别处理后，再由同一个sink处理(打印)：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201124075108456-212078716.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;Flink支持的方式是扩展CoProcessFunction来处理，为了更清楚认识，我们把&lt;span&gt;KeyedProcessFunction&lt;/span&gt;和&lt;span&gt;CoProcessFunction&lt;/span&gt;的类图摆在一起看，如下所示：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201124075108871-431161506.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;从上图可见，CoProcessFunction和KeyedProcessFunction的继承关系一样，另外CoProcessFunction自身也很简单，在processElement1和processElement2中分别处理两个上游流入的数据即可，并且也支持定时器设置；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;编码实战&quot;&gt;编码实战&lt;/h3&gt;
&lt;p&gt;接下来咱们开发一个应用来体验&lt;span&gt;CoProcessFunction&lt;/span&gt;，功能非常简单，描述如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;建两个数据源，数据分别来自本地&lt;span&gt;9998&lt;/span&gt;和&lt;span&gt;9999&lt;/span&gt;端口；&lt;/li&gt;
&lt;li&gt;每个端口收到类似&lt;span&gt;aaa,123&lt;/span&gt;这样的数据，转成Tuple2实例，f0是&lt;span&gt;aaa&lt;/span&gt;，f1是&lt;span&gt;123&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;在CoProcessFunction的实现类中，对每个数据源的数据都打日志，然后全部传到下游算子；&lt;/li&gt;
&lt;li&gt;下游操作是打印，因此&lt;span&gt;9998&lt;/span&gt;和&lt;span&gt;9999&lt;/span&gt;端口收到的所有数据都会在控制台打印出来；&lt;/li&gt;
&lt;li&gt;整个demo的功能如下图所示：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201124075109264-230947484.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;接下来编码实现上述功能；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;源码下载&quot;&gt;源码下载&lt;/h3&gt;
&lt;p&gt;如果您不想写代码，整个系列的源码可在GitHub下载到，地址和链接信息如下表所示(&lt;a href=&quot;https://github.com/zq2599/blog_demos&quot;&gt;https://github.com/zq2599/blog_demos&lt;/a&gt;)：&lt;/p&gt;
&lt;p&gt;这个git项目中有多个文件夹，本章的应用在&lt;span&gt;flinkstudy&lt;/span&gt;文件夹下，如下图红框所示：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201124075109522-1735162736.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;map算子&quot;&gt;Map算子&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;做一个map算子，用来将字符串&lt;span&gt;aaa,123&lt;/span&gt;转成Tuple2实例，f0是&lt;span&gt;aaa&lt;/span&gt;，f1是&lt;span&gt;123&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;算子名为&lt;span&gt;WordCountMap.java&lt;/span&gt;：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package com.bolingcavalry.coprocessfunction;

import org.apache.flink.api.common.functions.MapFunction;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.util.StringUtils;

public class WordCountMap implements MapFunction&amp;lt;String, Tuple2&amp;lt;String, Integer&amp;gt;&amp;gt; {
    @Override
    public Tuple2&amp;lt;String, Integer&amp;gt; map(String s) throws Exception {

        if(StringUtils.isNullOrWhitespaceOnly(s)) {
            System.out.println(&quot;invalid line&quot;);
            return null;
        }

        String[] array = s.split(&quot;,&quot;);

        if(null==array || array.length&amp;lt;2) {
            System.out.println(&quot;invalid line for array&quot;);
            return null;
        }

        return new Tuple2&amp;lt;&amp;gt;(array[0], Integer.valueOf(array[1]));
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;便于扩展的抽象类&quot;&gt;便于扩展的抽象类&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;开发一个抽象类，将前面图中提到的监听端口、map处理、keyby处理、打印都做到这个抽象类中，但是CoProcessFunction的逻辑却不放在这里，而是交给子类来实现，这样如果我们想进一步实践和扩展CoProcessFunction的能力，只要在子类中专注做好CoProcessFunction相关开发即可，如下图，红色部分交给子类实现，其余的都是抽象类完成的：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202011/485422-20201124075109752-1903486437.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;抽象类AbstractCoProcessFunctionExecutor.java，源码如下，稍后会说明几个关键点：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package com.bolingcavalry.coprocessfunction;

import org.apache.flink.api.java.tuple.Tuple;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.streaming.api.datastream.KeyedStream;
import org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.functions.co.CoProcessFunction;

/**
 * @author will
 * @email zq2599@gmail.com
 * @date 2020-11-09 17:33
 * @description 串起整个逻辑的执行类，用于体验CoProcessFunction
 */
public abstract class AbstractCoProcessFunctionExecutor {

    /**
     * 返回CoProcessFunction的实例，这个方法留给子类实现
     * @return
     */
    protected abstract CoProcessFunction&amp;lt;
            Tuple2&amp;lt;String, Integer&amp;gt;,
            Tuple2&amp;lt;String, Integer&amp;gt;,
            Tuple2&amp;lt;String, Integer&amp;gt;&amp;gt; getCoProcessFunctionInstance();

    /**
     * 监听根据指定的端口，
     * 得到的数据先通过map转为Tuple2实例，
     * 给元素加入时间戳，
     * 再按f0字段分区，
     * 将分区后的KeyedStream返回
     * @param port
     * @return
     */
    protected KeyedStream&amp;lt;Tuple2&amp;lt;String, Integer&amp;gt;, Tuple&amp;gt; buildStreamFromSocket(StreamExecutionEnvironment env, int port) {
        return env
                // 监听端口
                .socketTextStream(&quot;localhost&quot;, port)
                // 得到的字符串&quot;aaa,3&quot;转成Tuple2实例，f0=&quot;aaa&quot;，f1=3
                .map(new WordCountMap())
                // 将单词作为key分区
                .keyBy(0);
    }

    /**
     * 如果子类有侧输出需要处理，请重写此方法，会在主流程执行完毕后被调用
     */
    protected void doSideOutput(SingleOutputStreamOperator&amp;lt;Tuple2&amp;lt;String, Integer&amp;gt;&amp;gt; mainDataStream) {
    }

    /**
     * 执行业务的方法
     * @throws Exception
     */
    public void execute() throws Exception {
        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        // 并行度1
        env.setParallelism(1);

        // 监听9998端口的输入
        KeyedStream&amp;lt;Tuple2&amp;lt;String, Integer&amp;gt;, Tuple&amp;gt; stream1 = buildStreamFromSocket(env, 9998);

        // 监听9999端口的输入
        KeyedStream&amp;lt;Tuple2&amp;lt;String, Integer&amp;gt;, Tuple&amp;gt; stream2 = buildStreamFromSocket(env, 9999);

        SingleOutputStreamOperator&amp;lt;Tuple2&amp;lt;String, Integer&amp;gt;&amp;gt; mainDataStream = stream1
                // 两个流连接
                .connect(stream2)
                // 执行低阶处理函数，具体处理逻辑在子类中实现
                .process(getCoProcessFunctionInstance());

        // 将低阶处理函数输出的元素全部打印出来
        mainDataStream.print();

        // 侧输出相关逻辑，子类有侧输出需求时重写此方法
        doSideOutput(mainDataStream);

        // 执行
        env.execute(&quot;ProcessFunction demo : CoProcessFunction&quot;);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;关键点之一：一共有两个数据源，每个源的处理逻辑都封装到&lt;span&gt;buildStreamFromSocket&lt;/span&gt;方法中；&lt;/li&gt;
&lt;li&gt;关键点之二：&lt;span&gt;stream1.connect(stream2)&lt;/span&gt;将两个流连接起来；&lt;/li&gt;
&lt;li&gt;关键点之三：&lt;span&gt;process&lt;/span&gt;接收CoProcessFunction实例，合并后的流的处理逻辑就在这里面；&lt;/li&gt;
&lt;li&gt;关键点之四：&lt;span&gt;getCoProcessFunctionInstance&lt;/span&gt;是抽象方法，返回&lt;span&gt;CoProcessFunction&lt;/span&gt;实例，交给子类实现，所以CoProcessFunction中做什么事情完全由子类决定；&lt;/li&gt;
&lt;li&gt;关键点之五：doSideOutput方法中啥也没做，但是在主流程代码的末尾会被调用，如果子类有侧输出(SideOutput)的需求，重写此方法即可，此方法的入参是处理过的数据集，可以从这里取得侧输出；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;子类决定coprocessfunction的功能&quot;&gt;子类决定CoProcessFunction的功能&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;子类&lt;span&gt;CollectEveryOne.java&lt;/span&gt;如下所示，逻辑很简单，将每个源的上游数据直接输出到下游算子：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package com.bolingcavalry.coprocessfunction;

import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.streaming.api.functions.co.CoProcessFunction;
import org.apache.flink.util.Collector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CollectEveryOne extends AbstractCoProcessFunctionExecutor {

    private static final Logger logger = LoggerFactory.getLogger(CollectEveryOne.class);

    @Override
    protected CoProcessFunction&amp;lt;Tuple2&amp;lt;String, Integer&amp;gt;, Tuple2&amp;lt;String, Integer&amp;gt;, Tuple2&amp;lt;String, Integer&amp;gt;&amp;gt; getCoProcessFunctionInstance() {
        return new CoProcessFunction&amp;lt;Tuple2&amp;lt;String, Integer&amp;gt;, Tuple2&amp;lt;String, Integer&amp;gt;, Tuple2&amp;lt;String, Integer&amp;gt;&amp;gt;() {

            @Override
            public void processElement1(Tuple2&amp;lt;String, Integer&amp;gt; value, Context ctx, Collector&amp;lt;Tuple2&amp;lt;String, Integer&amp;gt;&amp;gt; out) {
                logger.info(&quot;处理1号流的元素：{},&quot;, value);
                out.collect(value);
            }

            @Override
            public void processElement2(Tuple2&amp;lt;String, Integer&amp;gt; value, Context ctx, Collector&amp;lt;Tuple2&amp;lt;String, Integer&amp;gt;&amp;gt; out) {
                logger.info(&quot;处理2号流的元素：{}&quot;, value);
                out.collect(value);
            }
        };
    }

    public static void main(String[] args) throws Exception {
        new CollectEveryOne().execute();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;上述代码中，CoProcessFunction后面的泛型定义很长：&amp;lt;Tuple2&amp;lt;String, Integer&amp;gt;, Tuple2&amp;lt;String, Integer&amp;gt;, Tuple2&amp;lt;String, Integer&amp;gt;&amp;gt; ，一共三个Tuple2，分别代表一号数据源输入、二号数据源输入、下游输出的类型；&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;验证&quot;&gt;验证&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;分别开启本机的&lt;span&gt;9998&lt;/span&gt;和&lt;span&gt;9999&lt;/span&gt;端口，我这里是MacBook，执行&lt;span&gt;nc -l 9998&lt;/span&gt;和&lt;span&gt;nc -l 9999&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;启动Flink应用，如果您和我一样是Mac电脑，直接运行&lt;span&gt;CollectEveryOne.main&lt;/span&gt;方法即可（如果是windows电脑，我这没试过，不过做成jar在线部署也是可以的）；&lt;/li&gt;
&lt;li&gt;在监听9998和9999端口的控制台分别输入&lt;span&gt;aaa,111&lt;/span&gt;和&lt;span&gt;bbb,222&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;以下是flink控制台输出的内容，可见processElement1和processElement1方法的日志代码已经执行，并且print方法作为最下游，将两个数据源的数据都打印出来了，符合预期：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;12:45:38,774 INFO CollectEveryOne - 处理1号流的元素：(aaa,111),
(aaa,111)
12:45:43,816 INFO CollectEveryOne - 处理2号流的元素：(bbb,222)
(bbb,222)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;更多&quot;&gt;更多&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;以上就是最基本的CoProcessFunction用法，其实CoProcessFunction的使用远不及此，结合状态，可以&lt;span&gt;processElement1&lt;/span&gt;获得更多二号流的元素信息，另外还可以结合定时器来约束两个流协同处理的等待时间，您可以参考前面文章中的状态和定时器来自行尝试；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;你不孤单，欣宸原创一路相伴&quot;&gt;你不孤单，欣宸原创一路相伴&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/105068742&quot;&gt;Java系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/105086498&quot;&gt;Spring系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/105086732&quot;&gt;Docker系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/105086794&quot;&gt;kubernetes系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/105086850&quot;&gt;数据库+中间件系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/105086920&quot;&gt;DevOps系列&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;欢迎关注公众号：程序员欣宸&quot;&gt;欢迎关注公众号：程序员欣宸&lt;/h3&gt;
&lt;blockquote readability=&quot;4.258064516129&quot;&gt;
&lt;p&gt;微信搜索「程序员欣宸」，我是欣宸，期待与您一同畅游Java世界...&lt;br/&gt;&lt;a href=&quot;https://github.com/zq2599/blog_demos&quot;&gt;https://github.com/zq2599/blog_demos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 23 Nov 2020 23:51:00 +0000</pubDate>
<dc:creator>程序员欣宸</dc:creator>
<og:description>欢迎访问我的GitHub https://github.com/zq2599/blog_demos 内容：所有原创文章分类汇总及配套源码，涉及Java、Docker、Kubernetes、DevOPS</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/bolingcavalry/p/14028354.html</dc:identifier>
</item>
<item>
<title>图像处理的基础知识(11)——图层(1) - JERRY_Z</title>
<link>http://www.cnblogs.com/JERRY-Z-J-R/p/14028196.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JERRY-Z-J-R/p/14028196.html</guid>
<description>&lt;hr/&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;JERRY_Z. ~ 2020 / 11 / 24&lt;br/&gt;转载请注明出处！❤️&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;div class=&quot;toc&quot;&gt;
&lt;p&gt;目录&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/JERRY-Z-J-R/p/14028196.html#图像处理的基础知识11图层1&quot;&gt;图像处理的基础知识(11)——图层(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/JERRY-Z-J-R/p/14028196.html#一、水晶按钮&quot;&gt;一、水晶按钮&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/JERRY-Z-J-R/p/14028196.html#二、照片叠加&quot;&gt;二、照片叠加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/JERRY-Z-J-R/p/14028196.html#三、衣服贴图&quot;&gt;三、衣服贴图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/JERRY-Z-J-R/p/14028196.html#四、制作巧克力&quot;&gt;四、制作巧克力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/JERRY-Z-J-R/p/14028196.html#五、制作钻石字效果&quot;&gt;五、制作钻石字效果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/JERRY-Z-J-R/p/14028196.html#六、附&quot;&gt;六、附&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003205518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003212104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003218288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003224877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003232906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003241228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003248806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003257724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003307127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003321466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003333132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003344190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003359139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003408835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003417802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003427665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003438568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003519406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003527619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003539549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003547761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003558740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003612130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003619695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003628177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003643325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003718991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003728794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003735227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003746951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003758171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003806579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003817475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003829348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003840434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020112400385234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003906137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003920141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124003934968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004046484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004058287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004108223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004118678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004144949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004159233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004211602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004240920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004304545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004316331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004327427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004340450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004352905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004445747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004458700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004459695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004458412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004526292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004537614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004547646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/202011240045574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020112400461146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004623530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004643237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/202011240046598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004708537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004718171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004727809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004734572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004742789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004751751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004801406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020112400481186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004821462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004833648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004843223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004851201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004900287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004910847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004924228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004931684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124004941313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020112400495125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201124005000311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rfc2lfR29k,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;mark&gt;&lt;em&gt;交流方式：&lt;/em&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;❤️ ❤️ ❤️&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;QQ：&lt;/strong&gt; 1846334075&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WeChat：&lt;/strong&gt; zhoujirui54&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSDN：&lt;/strong&gt;&lt;a href=&quot;https://blog.csdn.net/D_si_God&quot;&gt;https://blog.csdn.net/D_si_God&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cnblogs：&lt;/strong&gt;&lt;a href=&quot;https://www.cnblogs.com/JERRY-Z-J-R/&quot;&gt;https://www.cnblogs.com/JERRY-Z-J-R/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GitHub：&lt;/strong&gt;&lt;a href=&quot;https://github.com/JERRY-Z-J-R&quot;&gt;https://github.com/JERRY-Z-J-R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gitee：&lt;/strong&gt;&lt;a href=&quot;https://gitee.com/JERRY-Z-J-R&quot;&gt;https://gitee.com/JERRY-Z-J-R&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 23 Nov 2020 16:52:00 +0000</pubDate>
<dc:creator>JERRY_Z</dc:creator>
<og:description>图像处理的基础知识(11)——图层(1) JERRY_Z. ~ 2020 / 11 / 24 转载请注明出处！&amp;amp;lt;3 一、水晶按钮 二、照片叠加 三、衣服贴图 四、制作巧克力 五、制作钻石</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/JERRY-Z-J-R/p/14028196.html</dc:identifier>
</item>
<item>
<title>Maven一定要会的这几个知识！ - Java极客思维</title>
<link>http://www.cnblogs.com/xgx120413/p/14028082.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xgx120413/p/14028082.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/3c1fa567e94a4f63486cb4f272064dce.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;一、Maven概念&lt;/p&gt;
&lt;p&gt;        Maven是一个项目管理和整合工具。Maven为开发者提供了一套完整的构建生命周期框架。开发团队几乎不用花多少时间就能够自动完成工程的基础构建配置，因为Maven使用了一个标准的目录结构和一个默认的构建生命周期。&lt;/p&gt;
&lt;p&gt;        若有多个开发团队环境的情况下，Maven能够在很短的时间内使得每项工作都按照标准进行。因为大部分的工程配置都非常简单且可复用，在创建报告、检查、构建和测试自动配置时，Maven可以让开发者的工作变得更简单。&lt;/p&gt;

&lt;p&gt;Maven的主要目的是为开发者提供：&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;一个可复用、可维护、更易理解的工程综合模型，与这个模型交互的插件或工具&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Maven工程结构和内容定义在一个xml文件中（一般是pom.xml）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用Maven构建项目过程阶段：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/389133f540a0e5eb2db0631fafbbc5e9.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/085d8a15a1a37429ac17166d331f3928.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;二、Maven安装配置&lt;/p&gt;
&lt;p&gt;1. JDK安装&lt;/p&gt;
&lt;p&gt;        Maven是基于Java的工具，所以配置Maven要做的第一件事就是安装JDK&lt;/p&gt;

&lt;p&gt;2. Windows安装&lt;/p&gt;
&lt;p&gt;        Maven下载地址：http://maven.apache.org/download.html&lt;/p&gt;
&lt;p&gt;        下载解压后，添加环境变量即完成&lt;/p&gt;

&lt;p&gt;3. Linux安装&lt;/p&gt;
&lt;p&gt;        ① 配置yum源&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; -y &lt;span&gt;yum&lt;/span&gt;-&lt;span&gt;utils
​
# &lt;/span&gt;&lt;span&gt;yum&lt;/span&gt;-config-manager --add-repo http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;         ② 安装Maven&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; -y apache-maven
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完成安装后，通过mvn --version 检验安装版本&lt;br/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/085d8a15a1a37429ac17166d331f3928.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;三、Maven初体验&lt;/p&gt;
&lt;p&gt;Maven主要是用来打jar、war包以及管理jar包&lt;/p&gt;
&lt;p&gt;1. 原始的javac打包方式&lt;/p&gt;
&lt;p&gt;假如我们有一个Hello.java文件，想要将它打成可执行jar包，一般这样做。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/45bf1fa492b699fb68d5049cbfdb14ef.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用 javac 命令和 jar 命令打包：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/f161df8b4322f7ace697e7447dca65ed.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;生成的jar包文件，由两部分组成，class文件和META-INF目录，如下：&lt;/p&gt;
&lt;p&gt;此时的jar包，是不可直接运行的，需要指定入口main类&lt;/p&gt;
&lt;p&gt;进入META-INF目录，编辑MANIFEST.MF文件，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/e212a5a7477f5315cf7239b41614449d.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;运行此jar包，得到运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/f5df8ce4021a9e12ea5a67a325046c37.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2. maven打包&lt;/p&gt;
&lt;p&gt;在pom文件内配置入口类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/30251809e315920b92ba4aab7b0c5604.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;执行maven打包命令&lt;/p&gt;
&lt;p&gt;mvn package&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/3417b55733f36ec26fb474151cdea730.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;运行生成的jar，结果与原始方式无区别&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/1cb77fb3cdc4c352dcf140e8b98c882b.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/085d8a15a1a37429ac17166d331f3928.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;四、POM结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/656bfdb517acfee8cc7f7da1ccc6ff01.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/085d8a15a1a37429ac17166d331f3928.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;五、Maven流程&lt;/p&gt;
&lt;p&gt;1. maven的理想&lt;/p&gt;
&lt;p&gt;maven像一种什么设计模式？答案：模板方法模式&lt;/p&gt;
&lt;p&gt;自动走完标准的构建流程：清理-&amp;gt;编译-&amp;gt;测试-&amp;gt;报告-&amp;gt;打包-&amp;gt;部署&lt;/p&gt;
&lt;p&gt;统一入口，所有配置在一个pom里搞定&lt;/p&gt;

&lt;p&gt;2. maven的约定&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/8a61068762221e6a2e47ffdd69886797.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;约定的目录（不可改）：&lt;/p&gt;
&lt;div class=&quot;table-box&quot;&gt;
&lt;table&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;src/main/java –存放项目的.java文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;src/main/resources –存放项目资源文件。比方spring,hibernate配置文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;src/test/java –存放全部測试.java文件，比方JUnit測试类&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;src/test/resources ---測试资源文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;target ---项目输出位置,编译完毕后的东西放到这里面&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;pom.xml&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;3. maven的生命周期&lt;br/&gt;maven的构建生命周期，只是一个抽象的规范流程。周期内的每个阶段的具体执行，是在插件里面来实现的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/b1f31c2b4b4a84f3ffc4ecf25db90692.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;各个生命周期预设的定义如下：&lt;/p&gt;
&lt;div class=&quot;table-box&quot;&gt;
&lt;table cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;阶段&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;处理&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;验证 validate&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;验证项目&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;验证项目是否正确且所有必须信息是可用的&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;编译 compile&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;执行编译&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;源代码编译在此阶段完成&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;测试 Test&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;使用适当的单元测试框架（例如JUnit）运行测试。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;包装 package&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;打包&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;创建JAR/WAR包如在 pom.xml 中定义提及的包&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;检查 verify&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;检查&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;对集成测试的结果进行检查，以保证质量达标&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;安装 install&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;安装打包的项目到本地仓库，以供其他项目使用&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;部署 deploy&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;部署&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;运行任何一个阶段，都会从其所在生命周期的第一个阶段开始，顺序执行到指定的阶段，如：&lt;/p&gt;
&lt;p&gt;mvn package（本义：执行default周期的package阶段，maven会自动从process-resources阶段开始运行到package阶段结束）&lt;/p&gt;
&lt;p&gt;4. maven的插件&lt;/p&gt;
&lt;p&gt;插件plugin是绑定到生命周期，承担实际功能的组件。mvn运行时，自动关联插件来运行&lt;/p&gt;
&lt;p&gt;下图是maven默认的各阶段对应的插件列表：&lt;/p&gt;
&lt;div class=&quot;table-box&quot;&gt;
&lt;table cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;15&quot;&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;生命周期&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;生命周期阶段&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;​插件目标&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;执行任务&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;clean&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;pre-clean&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;
&lt;p&gt;clean&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;maven-clean-plugin:clean&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;删除项目的输出目录。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;
&lt;p&gt;post-clean&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;site&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;pre-site&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;
&lt;p&gt;site&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;maven-site-plugin:site&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;
&lt;p&gt;post-site&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;
&lt;p&gt;site-deploy&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;maven-site-plugin:deploy&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;
&lt;p&gt;default&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;process-resources&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;maven-resources-plugin:resources&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;复制主资源文件至主输出目录&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;
&lt;p&gt;compile&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;maven-compiler-plugin:compile&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;编译主代码至主输出目录&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;
&lt;p&gt;process-test-resources&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;maven-resources-plugin:testResources&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;复制测试资源文件至测试输出目&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;
&lt;p&gt;test-compile&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;maven-compiler-plugin:testCompile&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;编译测试代码至测试输出目录&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;
&lt;p&gt;test&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;maven-surefire-plugin:test&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;执行测试用例&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;
&lt;p&gt;package&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;maven-jar-plugin:jar（ejb:ejb jar:jar rar:rar war:war）&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;创建项目jar包&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;
&lt;p&gt;install&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;maven-install-plugin:install&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;将项目输出构件安装到本地仓库&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;
&lt;p&gt;deploy&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;maven-deploy-plugin:deploy&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;将项目输出构件部署到远程仓库&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/085d8a15a1a37429ac17166d331f3928.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;六、常用Maven命令&lt;/p&gt;
&lt;p&gt;mvn clean  清理&lt;/p&gt;
&lt;p&gt;mvn compile 编译主程序&lt;/p&gt;
&lt;p&gt;mvn package 打包&lt;/p&gt;
&lt;p&gt;mvn install 安装jar到本地库&lt;/p&gt;

&lt;p&gt;使用maven命令生成项目（idea和eclipse生成项目最终也是依赖maven插件生成的）：&lt;/p&gt;
&lt;p&gt;mvn archetype:generate -DgroupId=enjoy -DartifactId=simple -DarchetypeArtifactId=maven-archetype-quickstart  -Dversion=1.0&lt;/p&gt;

&lt;p&gt;mvn archetype:generate -DgroupId=enjoy -DartifactId=simple-web -DarchetypeArtifactId=maven-archetype-webapp -Dversion=1.0  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/085d8a15a1a37429ac17166d331f3928.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;七、Maven插件开发&lt;/p&gt;
&lt;p&gt;可以自定义插件，来扩展maven的功能。插件的开发步骤如下：&lt;/p&gt;
&lt;p&gt;1. 引入maven api依赖&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/161770af2a986927821fc2190e34a2e2.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2. 编写简单Mojo类（继承AbstractMojo）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/686046229e39bbe562041030a4d471f4.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3. 执行插件&lt;/p&gt;
&lt;p&gt;mvn com.enjoy:enjoy-plugin:1.0:log&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/0d4abcde9c45fc2ad0870b3c66344643.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4. 关联插件到生命周期来执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/34839639fa5717e1339a382c57632f75.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;构建项目对应的生命周期&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/20b63087333745b57cd7715c0a42f951.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/085d8a15a1a37429ac17166d331f3928.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;八、Maven坐标与依赖&lt;/p&gt;
&lt;p&gt;1. 坐标&lt;/p&gt;
&lt;p&gt;--------在数学中, 任何一个坐标可以唯一确定一个“点”&lt;/p&gt;
&lt;p&gt;Maven 中坐标是Jar包的唯一标识&lt;/p&gt;
&lt;p&gt;坐标元素包括groupId、artifactId、version、packaging：&lt;/p&gt;
&lt;div class=&quot;table-box&quot;&gt;
&lt;table&gt;&lt;tbody readability=&quot;9.5&quot;&gt;&lt;tr&gt;&lt;td&gt;元素&lt;/td&gt;
&lt;td&gt;描述&lt;/td&gt;
&lt;td&gt;说明&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;groupId&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;定义当前模块隶属的实际&lt;/p&gt;
&lt;p&gt;Maven项目&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;中小企业常常直接对应公司、组织&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;artifactId&lt;/td&gt;
&lt;td&gt;定义实际项目中的一个Maven模块&lt;/td&gt;
&lt;td&gt;唯一标识一个模块&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td&gt;version&lt;/td&gt;
&lt;td&gt;定义当前项目所属版本&lt;/td&gt;
&lt;td readability=&quot;9&quot;&gt;
&lt;p&gt;SNAPSHOT：表示不稳定版本&lt;/p&gt;
&lt;p&gt;LATEST：指最新发布的版本，可能是个发布版，也可能是一个snapshot版本&lt;/p&gt;
&lt;p&gt;RELEASE：指最后一个发布版&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;packaging&lt;/td&gt;
&lt;td&gt;定义Maven项目打包方式&lt;/td&gt;
&lt;td&gt;有jar（默认）、war、pom、maven-plugin等&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;dassifier&lt;/td&gt;
&lt;td&gt;附属构建（如javadoc、sources）&lt;/td&gt;
&lt;td&gt;须有附加插件的帮助&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;2. 依赖&lt;/p&gt;
&lt;p&gt;依赖即：A-&amp;gt;B，B-&amp;gt;C，C-&amp;gt;D这种项目间的依存关系。&lt;/p&gt;
&lt;p&gt;在java的jvm内，依赖的最终表现是，项目A启动时，其依赖的jar包必须都对应放入其classpath路径内。&lt;/p&gt;

&lt;p&gt;3. 依赖传递&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/3691cfc2a580321943d2933d79054454.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上述过程中，项目Mall归结起来，依赖的fastjson会有三个版本。&lt;/p&gt;
&lt;p&gt;而我们的jvm最终肯定只能接受一个版本的jar，所以必须有所取舍。&lt;/p&gt;
&lt;p&gt;maven默认的取舍规则是：&lt;/p&gt;
&lt;p&gt;1、路径最短原则：product和customer里的fastjson引用路径较短，路径为两步；pay项目里的fastjson引用路径较长，路径为三步。因此pay中的fastjson被淘汰；&lt;/p&gt;
&lt;p&gt;2、同路径长度下，谁先声明谁优先：product和customer中的fastjson路径相同，那么就看在pom中是先声明product还是先声明customer，谁先用谁的。&lt;/p&gt;

&lt;p&gt;4. 依赖冲突及解决&lt;/p&gt;
&lt;p&gt;在依赖传递里，我们看到，maven根据自己的规则为我们取舍出了一个版本的jar，但此jar版本选择可能会与我们的项目预期不符：&lt;/p&gt;
&lt;p&gt;例如：我们最终想的版本是fastjson:1.2.30版本（但它在第一步即被淘汰掉了）&lt;/p&gt;
&lt;p&gt;当出现此类情况时，我们项目运行可能会出错（项目中使用到了1.2.30版本的特性），此问题即是我们常遇到的jar包冲突问题。&lt;/p&gt;
&lt;p&gt;补救方式：使用exclusions将product和customer中的fastjson包排除掉，用法如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/db200f3f8b98bfe4752553c2c398b671.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当发生jar冲突程序报错时，可以使用mvn命令查出项目最终依赖的jar包树，看版本是否是我们预期的：&lt;/p&gt;
&lt;p&gt;命令：mvn dependency:tree&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/c9aaf97a599935b4b0bb13f6edcfaf26.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;5. 依赖范围scope&lt;/p&gt;
&lt;p&gt;mvn在运行时，生命周期的不同阶段，会有不同的依赖范围，一般有以下依赖范围scope：&lt;/p&gt;
&lt;p&gt;- compile：默认范围，用于编译（依赖的jar在打包时会包含进去）      &lt;/p&gt;
&lt;p&gt;- provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath（依赖的jar在打包时不会包含进去）&lt;/p&gt;
&lt;p&gt;- runtime：在执行时需要使用（依赖的jar在打包时会包含进去）&lt;/p&gt;
&lt;p&gt;- test：用于test任务时使用（依赖的jar在打包时不会包含进去）&lt;/p&gt;
&lt;p&gt;- system：需要外在提供相应的元素。通过systemPath来取得（一般禁止使用）&lt;/p&gt;
&lt;p&gt;每个scope实际上是配置了一个不同的classpath，jvm根据选择不同的classpath来达到依赖不同&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/aa7c52470c306f395480f78abcfbbd3d.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/085d8a15a1a37429ac17166d331f3928.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;九、环境激活-profiles使用&lt;/p&gt;
&lt;p&gt;在springmvc项目中，开发/测试/线上三个不同环境，配置文件往往也不同。&lt;/p&gt;
&lt;p&gt;打包时需要对配置文件做出选择（maven提供了profiles机制供我们使用）。&lt;/p&gt;
&lt;h2&gt;1. profiles的场景&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/ae57fff9f088e6f745c1164912751e79.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个选择，实际发生在default生命周期的resource阶段（maven-resources-plugin执行过程里）&lt;/p&gt;

&lt;p&gt;2. 定义profiles&lt;/p&gt;
&lt;p&gt;为了指导插件将对应的resource文件打入classpath里，先定出profiles&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/faebff49d98d0ee997c8af29fa1d8fd8.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此定义即指，当mvn命令执行时，我们需要通过 -P dev或者-P test方式传入我们的意图：&lt;/p&gt;
&lt;p&gt;dev/test选择，会导致properties里的变量值含义不同，我们主要关注package.environment变量&lt;/p&gt;

&lt;p&gt;3. 资源插件的配置指定&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/993b9aeb081790817819243e7b9d5ca1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置maven-resources-plugin插件执行时，要复制的目录资源&lt;/p&gt;

&lt;p&gt;4. mvn约定的资源中需要过滤掉环境目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/59001ade84412636ca61d6db6f485b4f.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;需要将mvn约定的资源目录里，过滤掉环境目录&lt;/p&gt;

&lt;p&gt;5. 小属性更轻便的用法&lt;/p&gt;
&lt;p&gt;对于简单的属性，我们可以选择更轻便的用法&lt;/p&gt;
&lt;p&gt;① 直接在环境中定义属性值&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/d7ba88b05bbd7c17306cff1d7b91f4b8.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 项目属性文件配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/63fe8daff8077d8cdd1db3cba68ff11c.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;③ 约定的资源启用替换过滤&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/3488e899c85847488ceb64fc736f0139.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后有对pom.xml里面各标签有疑惑的小伙伴，下面附上pom.xml文件标签的详细注释解释，可以花时间好好去看一下对应的标签的作用是什么。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt;
         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。
         坐标包括group ID，artifact ID和 version。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 被继承的父项目的构件标识符 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;xxx&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 被继承的父项目的全球唯一标识符 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;xxx&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 被继承的父项目的版本 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;xxx&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。
             Maven首先在构建当前项目的地方寻找父项目的pom，其次在文件系统的这个位置（relativePath位置），
             然后在本地仓库，最后在远程仓库寻找父项目的pom。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;xxx&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，
         这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 4.0.0 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成，
         如com.mycompany.app生成的相对路径为：/com/mycompany/app &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;xxx&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID
         和groupID；在某个特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven
         为项目产生的构件包括：JARs，源码，二进制发布和WARs等。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;xxx&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; jar &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 1.0-SNAPSHOT &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目的名称, Maven产生的文档用 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; xxx-maven &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目主页的URL, Maven产生的文档用 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; http://maven.apache.org &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，
         就可以包含HTML标签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的
         索引页文件，而不是调整这里的文档。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; A maven project to study maven. &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 描述了这个项目构建环境中的前提条件。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;prerequisites&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构建该项目或使用该插件所需要的Maven的最低版本 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;maven&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;maven&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;prerequisites&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;issueManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 问题管理系统（例如jira）的名字， &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; jira &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 该项目使用的问题管理系统的URL &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; http://jira.baidu.com/banseon &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;issueManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目持续集成信息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ciManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 持续集成系统的名字，例如continuum &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;notifiers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置一种方式，当构建中断时，以该方式通知用户/开发者 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;notifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 传送通知的途径 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 发生错误时是否通知 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sendOnError&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sendOnError&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构建失败时是否通知 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sendOnFailure&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sendOnFailure&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构建成功时是否通知 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sendOnSuccess&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sendOnSuccess&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 发生警告时是否通知 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sendOnWarning&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sendOnWarning&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 不赞成使用。通知发送到哪里 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 扩展配置项 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;notifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;notifiers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ciManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目创建年份，4位数字。当产生版权信息时需要使用这个值。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;inceptionYear &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目相关邮件列表信息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mailingLists&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mailingList&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 邮件的名称 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Demo &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; banseon@126.com &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;subscribe&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; banseon@126.com &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;subscribe&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;unsubscribe&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; banseon@126.com &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;unsubscribe&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 你可以浏览邮件信息的URL &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;archive&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; http:/hi.baidu.com/banseon/demo/dev/ &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;archive&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mailingList&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mailingLists&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目开发者列表 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;developers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 某个项目开发者的信息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;developer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; SCM里项目开发者的唯一标识符 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; HELLO WORLD &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目开发者的全名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; banseon &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目开发者的email &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; banseon@126.com &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目开发者的主页的URL &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目开发者在项目中扮演的角色，角色元素描述了各种角色 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;roles&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Project Manager &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Architect &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;roles&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目开发者所属组织 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;organization&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; demo &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;organization&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目开发者所属组织的URL &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;organizationUrl&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; http://hi.baidu.com/xxx &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;organizationUrl&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目开发者属性，如即时消息如何处理等 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dept&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; No &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dept&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目开发者所在时区， -11到12范围内的整数。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;timezone&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; -5 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;timezone&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;developer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;developers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目的其他贡献者列表 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;contributors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目的其他贡献者。参见developers/developer元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;contributor&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目贡献者的全名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目贡献者的email &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目贡献者的主页的URL &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目贡献者所属组织 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;organization&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;organization&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目贡献者所属组织的URL &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;organizationUrl&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;organizationUrl&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目贡献者在项目中扮演的角色，角色元素描述了各种角色 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;roles&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Project Manager &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Architect &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;roles&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目贡献者所在时区， -11到12范围内的整数。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;timezone&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;timezone&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目贡献者属性，如即时消息如何处理等 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dept&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; No &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dept&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;contributor&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;contributors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。
         如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;licenses&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;license&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; license用于法律上的名称 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Apache 2 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 官方的license正文页面的URL &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; http://www.baidu.com/banseon/LICENSE-2.0.txt &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目分发的主要方式：
                    repo，可以从Maven库下载
                    manual， 用户必须手动下载和安装依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;distribution&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; repo &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;distribution&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 关于license的补充信息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;comments&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; A business-friendly OSS license &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;comments&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;license&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;licenses&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scm&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;connection&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;connection&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 给开发者使用的，类似connection元素。即该连接不仅仅只读 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;developerConnection&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;developerConnection&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 当前代码的标签，在开发阶段默认为HEAD &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; http://svn.baidu.com/banseon &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scm&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 描述项目所属组织的各种属性。Maven产生的文档用 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;organization&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 组织的全名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; demo &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 组织主页的URL &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; http://www.baidu.com/banseon &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;organization&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构建项目需要的信息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对
             于pom.xml的相对路径。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sourceDirectory&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sourceDirectory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容会
             被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scriptSourceDirectory&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scriptSourceDirectory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。
             该路径是相对于pom.xml的相对路径。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;testSourceDirectory&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;testSourceDirectory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 被编译过的应用程序class文件存放的目录。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;outputDirectory&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;outputDirectory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 被编译过的测试class文件存放的目录。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;testOutputDirectory&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;testOutputDirectory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 使用来自该项目的一系列构建扩展 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 描述使用到的构建扩展。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;extension&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构建扩展的groupId &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构建扩展的artifactId &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构建扩展的版本 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;extension&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 当项目没有规定目标（Maven2 叫做阶段）时的默认值 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;defaultGoal&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;defaultGoal&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在
             最终的打包文件里。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 这个元素描述了项目相关或测试相关的所有资源路径 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。
                     举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为
                    org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;targetPath&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;targetPath&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素
                     里列出。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filtering&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filtering&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 描述存放资源的目录，该路径相对POM路径 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 包含的模式列表，例如**/*.xml. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 排除的模式列表，例如**/*.xml &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;excludes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclude&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclude&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;excludes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;testResources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;testResource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 描述了测试相关的资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。
                     举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为
                    org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;targetPath&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;targetPath&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素
                     里列出。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filtering&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filtering&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 描述存放测试相关的资源的目录，该路径相对POM路径 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 包含的模式列表，例如**/*.xml. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 排除的模式列表，例如**/*.xml &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;excludes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclude&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclude&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;excludes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;testResource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;testResources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构建产生的所有文件存放的目录 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 产生的构件的文件名，默认值是${artifactId}-${version}。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 当filtering开关打开时，使用到的过滤器属性文件列表 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filters&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filters&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本
             地配置都会覆盖这里的配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 使用的插件列表 。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; plugin元素包含描述插件所需要的信息。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 插件在仓库里的group ID &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 插件在仓库里的artifact ID &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 被使用的插件的版本（或版本范围） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该
                         元素才被设置成enabled。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;executions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; execution元素包含了插件执行需要的信息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;execution&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;phase&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;phase&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置的执行目标 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;goals&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;goals&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置是否被传播到子POM &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 作为DOM对象的配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;execution&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;executions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目引入插件所需要的额外依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 参见dependencies/dependency元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 任何配置是否被传播到子项目 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 作为DOM对象的配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 该项目使用的插件列表 。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; plugin元素包含描述插件所需要的信息。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 插件在仓库里的group ID &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 插件在仓库里的artifact ID &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 被使用的插件的版本（或版本范围） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该
                     元素才被设置成enabled。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;executions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; execution元素包含了插件执行需要的信息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;execution&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;phase&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;phase&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置的执行目标 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;goals&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;goals&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置是否被传播到子POM &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 作为DOM对象的配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;execution&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;executions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目引入插件所需要的额外依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 参见dependencies/dependency元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 任何配置是否被传播到子项目 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 作为DOM对象的配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 在列的项目构建profile，如果被激活，会修改构建处理 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;profiles&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 根据环境参数或命令行参数激活某个构建处理 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;profile&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它能够
                 在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元
                 素并不是激活profile的唯一方式。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;activation&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; profile默认是否激活的标志 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;activeByDefault&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;activeByDefault&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本
                     不是以1.4开头的JDK。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jdk&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jdk版本，如:1.7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;jdk&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;os&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 激活profile的操作系统的名字 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Windows XP &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 激活profile的操作系统所属家族(如 'windows') &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;family&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Windows &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;family&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 激活profile的操作系统体系结构 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;arch&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; x86 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;arch&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 激活profile的操作系统版本 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 5.1.2600 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;os&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 如果Maven检测到某一个属性（其值可以在POM中通过${名称}引用），其拥有对应的名称和值，Profile
                     就会被激活。如果值字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹
                     配属性值字段 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 激活profile的属性的名称 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; mavenVersion &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 激活profile的属性的值 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 2.0.3 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活
                     profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 如果指定的文件存在，则激活profile。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exists&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exists&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 如果指定的文件不存在，则激活profile。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;missing&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;missing&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;activation&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构建项目所需要的信息。参见build元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;defaultGoal &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;targetPath&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;targetPath&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filtering&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filtering&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;excludes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclude&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclude&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;excludes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;testResources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;testResource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;targetPath&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;targetPath&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filtering&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filtering&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;excludes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclude&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclude&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;excludes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;testResource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;testResources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filters&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filters&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 参见build/pluginManagement/plugins/plugin元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;executions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;execution&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;phase&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;phase&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;goals&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;goals&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;execution&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;executions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 参见dependencies/dependency元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;goals&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;goals&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 参见build/pluginManagement/plugins/plugin元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;extensions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;executions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;execution&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;phase&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;phase&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;goals&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;goals&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;execution&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;executions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 参见dependencies/dependency元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;goals&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;goals&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的
                 相对路径 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modules&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;子项目相对路径&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modules&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 发现依赖和扩展的远程仓库列表。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 参见repositories/repository元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;releases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;updatePolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;updatePolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;checksumPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;checksumPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;releases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;updatePolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;updatePolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;checksumPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;checksumPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 发现插件的远程仓库列表，这些插件用于构建和报表 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginRepositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;releases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;updatePolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;updatePolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;checksumPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;checksumPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;releases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;updatePolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;updatePolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;checksumPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;checksumPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginRepositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的
                 仓库中下载。要获取更多信息，请看项目依赖机制。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 参见dependencies/dependency元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 不赞成使用. 现在Maven忽略该元素. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;reports&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;reports&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 该元素包括使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看
                 到所有报表的链接。参见reporting元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;reporting&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;reporting&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 参见dependencyManagement元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 参见dependencies/dependency元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 参见distributionManagement元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;distributionManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;distributionManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 参见properties元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;profile&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;profiles&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modules&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;子项目相对路径&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modules&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 发现依赖和扩展的远程仓库列表。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 包含需要连接到远程仓库的信息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 如何处理远程仓库里发布版本的下载 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;releases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），
                     daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;updatePolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;updatePolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;checksumPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;checksumPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;releases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，
                 为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;updatePolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;updatePolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;checksumPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;checksumPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; banseon-repository-proxy &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 远程仓库名称 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; banseon-repository-proxy &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 远程仓库URL，按protocol://hostname/path形式 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; http://192.168.1.169:9999/repository/ &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认
                 的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; default &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 发现插件的远程仓库列表，这些插件用于构建和报表 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginRepositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginRepositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。
         要获取更多信息，请看项目依赖机制。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 依赖的group ID &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; org.apache.maven &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 依赖的artifact ID &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; maven-artifact &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 3.8.1 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展
                 名或分类器。类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。
                 如果设置extensions为 true，就可以在plugin里定义新的类型。所以前面的类型的例子不完整。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; jar &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，
                 如果你想要构建两个单独的构件成JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生
                 成两个单独的JAR构件。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;classifier&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;classifier&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。
                - compile ：默认范围，用于编译
                - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath
                - runtime: 在执行时需要使用
                - test: 用于test任务时使用
                - system: 需要外在提供相应的元素。通过systemPath来取得
                - systemPath: 仅用于范围为system。提供相应的路径
                - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; test &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件
                 系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如${java.home}。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;systemPath&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;systemPath&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的
                 依赖。此元素主要用于解决版本冲突问题 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; spring-core &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; org.springframework &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。
                 可选依赖阻断依赖的传递性。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; true &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 不赞成使用. 现在Maven忽略该元素. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;reports&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;reports&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;reporting&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;excludeDefaults &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 所有产生的报表存放到哪里。默认值是${project.build.directory}/site。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;outputDirectory &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 使用的报表插件和他们的配置。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; plugin元素包含描述报表插件需要的信息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 报表插件在仓库里的group ID &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 报表插件在仓库里的artifact ID &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 被使用的报表插件的版本（或版本范围） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 任何配置是否被传播到子项目 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 报表插件的配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，
                     有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报
                     表集，对应另一个执行目标 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;reportSets&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 表示报表的一个集合，以及产生该集合的配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;reportSet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 报表集合的唯一标识符，POM继承时用到 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 产生报表集合时，被使用的报表的配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置是否被继承到子POMs &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true/false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;inherited&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 这个集合里使用到哪些报表 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;reports&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;reports&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;reportSet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;reportSets&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;reporting&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖
        （必须描述group ID和artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过
            group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 参见dependencies/dependency元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者
         把构件部署到远程仓库。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;distributionManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 部署项目产生的构件到远程仓库需要的信息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见
                 repositories/repository元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;uniqueVersion &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; banseon-maven2 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; banseon maven2 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; file://${basedir}/target/deploy &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见
             distributionManagement/repository元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshotRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;uniqueVersion &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; banseon-maven2 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Banseon-maven2 Snapshot Repository &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; scp://svn.baidu.com/banseon:/usr/local/maven-snapshot &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshotRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 部署项目的网站需要的信息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;site&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; banseon-site &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 部署位置的名称 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; business api website &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 部署位置的URL，按protocol://hostname/path形式 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;site&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位
             那些不在仓库里的构件（由于license限制）。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;downloadUrl &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relocation&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构件新的group ID &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构件新的artifact ID &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 构件新的版本号 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 显示给用户的，关于移动的额外信息，例如原因。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;relocation&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值
             有：none（默认），converted（仓库管理员从Maven 1 POM转换过来），partner（直接从伙伴Maven
             2仓库同步过来），deployed（从Maven 2实例部署），verified（被核实时正确的和最终的）。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;distributionManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里
         activation元素的说明）。格式是&amp;lt;name&amp;gt;value&amp;lt;/name&amp;gt;。 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;value&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多精彩敬请关注公众号&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/9b371f98aab211f53489c0bbd23fd8ba.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Java极客思维&lt;/p&gt;
&lt;p&gt;微信扫一扫，关注公众号&lt;/p&gt;
</description>
<pubDate>Mon, 23 Nov 2020 16:00:00 +0000</pubDate>
<dc:creator>Java极客思维</dc:creator>
<og:description>一、Maven概念 Maven是一个项目管理和整合工具。Maven为开发者提供了一套完整的构建生命周期框架。开发团队几乎不用花多少时间就能够自动完成工程的基础构建配置，因为Maven使用了一个标准的目</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xgx120413/p/14028082.html</dc:identifier>
</item>
<item>
<title>贼好用，冰河开源了这款精准定时任务和延时队列框架！！ - 冰河团队</title>
<link>http://www.cnblogs.com/binghe001/p/14028079.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/binghe001/p/14028079.html</guid>
<description>&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;blockquote readability=&quot;12.342168674699&quot;&gt;
&lt;p&gt;在实际工作中，很多小伙伴在开发定时任务时，会采取定时扫描数据表的方式实现。然而，这种方式存在着重大的缺陷：如果数据量大的话，频繁的扫描数据表会对数据库造成巨大的压力；难以支撑大规模的分布式定时任务；难以支持精准的定时任务；大量浪费CPU的资源；扫描的数据大部分是不需要执行的任务。那么，既然定时扫描数据表存在这么多的弊端，那么，有没有一种方式来解决这些问题呢？今天，冰河就带着他的开源项目mykit-delay来了！！开源地址：&lt;a href=&quot;https://github.com/sunshinelyz/mykit-delay&quot;&gt;https://github.com/sunshinelyz/mykit-delay&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在使用框架过程中如有任何问题，都可以添加冰河微信【sun_shine_lyz】进行交流。&lt;/p&gt;

&lt;p&gt;文章已收录到https://github.com/sunshinelyz/technology-binghe&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;项目简述&quot;&gt;项目简述&lt;/h2&gt;
&lt;p&gt;Mykit体系中提供的简单、稳定、可扩展的延迟消息队列框架，提供精准的定时任务和延迟队列处理功能。&lt;/p&gt;
&lt;h2 id=&quot;项目模块说明&quot;&gt;项目模块说明&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;mykit-delay-common: mykit-delay 延迟消息队列框架通用工具模块，提供全局通用的工具类&lt;/li&gt;
&lt;li&gt;mykit-delay-config: mykit-delay 延迟消息队列框架通用配置模块，提供全局配置&lt;/li&gt;
&lt;li&gt;mykit-delay-queue: mykit-delay 延迟消息队列框架核心实现模块，目前所有主要的功能都在此模块实现&lt;/li&gt;
&lt;li&gt;mykit-delay-controller: mykit-delay 延迟消息队列框架Restful接口实现模块，对外提供Restful接口访问，兼容各种语言调用&lt;/li&gt;
&lt;li&gt;mykit-delay-core: mykit-delay 延迟消息队列框架的入口，整个框架的启动程序在此模块实现&lt;/li&gt;
&lt;li&gt;mykit-delay-test: mykit-delay 延迟消息队列框架通用测试模块，主要提供Junit单元测试用例&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;需求背景&quot;&gt;需求背景&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;用户下订单后未支付，30分钟后支付超时&lt;/li&gt;
&lt;li&gt;在某个时间点通知用户参加系统活动&lt;/li&gt;
&lt;li&gt;业务执行失败之后隔10分钟重试一次&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;类似的场景比较多 简单的处理方式就是使用定时任务 假如数据比较多的时候 有的数据可能延迟比较严重,而且越来越多的定时业务导致任务调度很繁琐不好管理。&lt;/p&gt;
&lt;h2 id=&quot;队列设计&quot;&gt;队列设计&lt;/h2&gt;
&lt;p&gt;整体架构设计如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020112300574198.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;开发前需要考虑的问题&quot;&gt;开发前需要考虑的问题&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;及时性 消费端能按时收到&lt;/li&gt;
&lt;li&gt;同一时间消息的消费权重&lt;/li&gt;
&lt;li&gt;可靠性 消息不能出现没有被消费掉的情况&lt;/li&gt;
&lt;li&gt;可恢复 假如有其他情况 导致消息系统不可用了 至少能保证数据可以恢复&lt;/li&gt;
&lt;li&gt;可撤回 因为是延迟消息 没有到执行时间的消息支持可以取消消费&lt;/li&gt;
&lt;li&gt;高可用 多实例 这里指HA/主备模式并不是多实例同时一起工作&lt;/li&gt;
&lt;li&gt;消费端如何消费&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当然初步选用redis作为数据缓存的主要原因是因为redis自身支持zset的数据结构(score 延迟时间毫秒) 这样就少了排序的烦恼而且性能还很高,正好我们的需求就是按时间维度去判定执行的顺序 同时也支持map list数据结构。&lt;/p&gt;
&lt;h3 id=&quot;简单定义一个消息数据结构&quot;&gt;简单定义一个消息数据结构&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;private String topic;/***topic**/
private String id;/***自动生成 全局惟一 snowflake**/
private String bizKey;
private long delay;/***延时毫秒数**/
private int priority;//优先级
private long ttl;/**消费端消费的ttl**/
private String body;/***消息体**/
private long createTime=System.currentTimeMillis();
private int status= Status.WaitPut.ordinal();
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;运行原理：&quot;&gt;运行原理：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;用Map来存储元数据。id作为key,整个消息结构序列化(json/…)之后作为value,放入元消息池中。&lt;/li&gt;
&lt;li&gt;将id放入其中(有N个)一个zset有序列表中,以createTime+delay+priority作为score。修改状态为正在延迟中&lt;/li&gt;
&lt;li&gt;使用timer实时监控zset有序列表中top 10的数据 。 如果数据score&amp;lt;=当前时间毫秒就取出来,根据topic重新放入一个新的可消费列表(list)中,在zset中删除已经取出来的数据,并修改状态为待消费&lt;/li&gt;
&lt;li&gt;客户端获取数据只需要从可消费队列中获取就可以了。并且状态必须为待消费 运行时间需要&amp;lt;=当前时间的 如果不满足 重新放入zset列表中,修改状态为正在延迟。如果满足修改状态为已消费。或者直接删除元数据。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;客户端&quot;&gt;客户端&lt;/h3&gt;
&lt;p&gt;因为涉及到不同程序语言的问题,所以当前默认支持http访问方式。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;添加延时消息添加成功之后返回消费唯一ID POST /push {…..消息体}&lt;/li&gt;
&lt;li&gt;删除延时消息 需要传递消息ID GET /delete?id=&lt;/li&gt;
&lt;li&gt;恢复延时消息 GET /reStore?expire=true|false expire是否恢复已过期未执行的消息。&lt;/li&gt;
&lt;li&gt;恢复单个延时消息 需要传递消息ID GET /reStore/id&lt;/li&gt;
&lt;li&gt;获取消息 需要长连接 GET /get/topic&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;用nginx暴露服务,配置为轮询 在添加延迟消息的时候就可以流量平均分配。&lt;/p&gt;
&lt;p&gt;目前系统中客户端并没有采用HTTP长连接的方式来消费消息,而是采用MQ的方式来消费数据这样客户端就可以不用关心延迟消息队列。只需要在发送MQ的时候拦截一下 如果是延迟消息就用延迟消息系统处理。&lt;/p&gt;
&lt;h3 id=&quot;消息可恢复&quot;&gt;消息可恢复&lt;/h3&gt;
&lt;p&gt;实现恢复的原理 正常情况下一般都是记录日志,比如mysql的binlog等。&lt;/p&gt;
&lt;p&gt;这里我们直接采用mysql数据库作为记录日志。&lt;/p&gt;
&lt;p&gt;目前创建以下2张表:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;消息表 字段包括整个消息体&lt;/li&gt;
&lt;li&gt;消息流转表 字段包括消息ID、变更状态、变更时间、zset扫描线程Name、host/ip&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;定义zset扫描线程Name是为了更清楚的看到消息被分发到具体哪个zset中。前提是zset的key和监控zset的线程名称要有点关系 这里也可以是zset key。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;支持消息恢复&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假如redis服务器宕机了,重启之后发现数据也没有了。所以这个恢复是很有必要的,只需要从表1也就是消息表中把消息状态不等于已消费的数据全部重新分发到延迟队列中去,然后同步一下状态就可以了。&lt;/p&gt;
&lt;p&gt;当然恢复单个任务也可以这么干。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据表设计&lt;/strong&gt;&lt;br/&gt;这里，我就直接给出创建数据表的SQL语句。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;DROP TABLE IF EXISTS `mykit_delay_queue_job`;
CREATE TABLE `mykit_delay_queue_job` (
  `id` varchar(128) NOT NULL,
  `bizkey` varchar(128) DEFAULT NULL,
  `topic` varchar(128) DEFAULT NULL,
  `subtopic` varchar(250) DEFAULT NULL,
  `delay` bigint(20) DEFAULT NULL,
  `create_time` bigint(20) DEFAULT NULL,
  `body` text,
  `status` int(11) DEFAULT NULL,
  `ttl` int(11) DEFAULT NULL,
  `update_time` datetime(3) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `mykit_delay_queue_job_ID_STATUS` (`id`,`status`),
  KEY `mykit_delay_queue_job_STATUS` (`status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for mykit_delay_queue_job_log
-- ----------------------------
DROP TABLE IF EXISTS `mykit_delay_queue_job_log`;
CREATE TABLE `mykit_delay_queue_job_log` (
  `id` varchar(128) NOT NULL,
  `status` int(11) DEFAULT NULL,
  `thread` varchar(60) DEFAULT NULL,
  `update_time` datetime(3) DEFAULT NULL,
  `host` varchar(128) DEFAULT NULL,
  KEY `mykit_delay_queue_job_LOG_ID_STATUS` (`id`,`status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;关于高可用&quot;&gt;关于高可用&lt;/h3&gt;
&lt;p&gt;分布式协调还是选用zookeeper。&lt;/p&gt;
&lt;p&gt;如果有多个实例最多同时只能有1个实例工作 这样就避免了分布式竞争锁带来的坏处,当然如果业务需要多个实例同时工作也是支持的,也就是一个消息最多只能有1个实例处理,可以选用zookeeper或者redis就能实现分布式锁了。&lt;/p&gt;
&lt;p&gt;最终做了一下测试多实例同时运行,可能因为会涉及到锁的问题性能有所下降,反而单机效果很好。所以比较推荐基于docker的主备部署模式。&lt;/p&gt;
&lt;h2 id=&quot;运行模式&quot;&gt;运行模式&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;支持 master,slave （HA）需要配置&lt;code&gt;mykit.delay.registry.serverList&lt;/code&gt; zk集群地址列表&lt;/li&gt;
&lt;li&gt;支持 cluster 会涉及到分布式锁竞争 效果不是很明显 分布式锁采用&lt;code&gt;redis&lt;/code&gt;的 &lt;code&gt;setNx&lt;/code&gt;实现&lt;/li&gt;
&lt;li&gt;StandAlone&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;目前，经过测试，&lt;strong&gt;推荐使用master slave的模式&lt;/strong&gt;，后期会优化Cluster模式&lt;/p&gt;
&lt;h2 id=&quot;如何接入&quot;&gt;如何接入&lt;/h2&gt;
&lt;p&gt;为了提供一个统一的精准定时任务和延时队列框架，mykit-delay提供了HTTP Rest接口供其他业务系统调用，接口使用简单方便，只需要简单的调用接口，传递相应的参数即可。&lt;/p&gt;
&lt;h3 id=&quot;消息体&quot;&gt;消息体&lt;/h3&gt;
&lt;p&gt;以JSON数据格式参数 目前只提供了&lt;code&gt;http&lt;/code&gt;协议&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;body 业务消息体&lt;/li&gt;
&lt;li&gt;delay 延时毫秒 距&lt;code&gt;createTime&lt;/code&gt;的间隔毫秒数&lt;/li&gt;
&lt;li&gt;id 任务ID 系统自动生成 任务创建成功返回&lt;/li&gt;
&lt;li&gt;status 状态 默认不填写&lt;/li&gt;
&lt;li&gt;topic 标题&lt;/li&gt;
&lt;li&gt;subtopic 保留字段&lt;/li&gt;
&lt;li&gt;ttl 保留字段&lt;/li&gt;
&lt;li&gt;createTime 创建任务时间 非必填 系统默认&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;添加任务&quot;&gt;添加任务&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/push  
    POST application/json
{&quot;body&quot;:&quot;{hello world}&quot;,&quot;delay&quot;:10000,&quot;id&quot;:&quot;20&quot;,&quot;status&quot;:0,&quot;topic&quot;:&quot;ces&quot;,&quot;subtopic&quot;:&quot;&quot;,ttl&quot;:12}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;删除任务&quot;&gt;删除任务&lt;/h3&gt;
&lt;p&gt;删除任务 需要记录一个JobId&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/delete?jobId=xxx
   GET
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;恢复单个任务&quot;&gt;恢复单个任务&lt;/h3&gt;
&lt;p&gt;用于任务错乱 脑裂情况 根据日志恢复任务&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/reStoreJob?JobId=xxx
   GET
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;恢复所有未完成的任务&quot;&gt;恢复所有未完成的任务&lt;/h3&gt;
&lt;p&gt;根据日志恢复任务&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/reStore?expire=true
   GET
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数&lt;code&gt;expire&lt;/code&gt; 表示是否需要恢复已过期还未执行的数据&lt;/p&gt;
&lt;h3 id=&quot;清空队列数据&quot;&gt;清空队列数据&lt;/h3&gt;
&lt;p&gt;根据日志中未完成的数据清空队列中全部数据。清空之后 会删除缓存中的所有任务&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/clearAll
 GET
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;客户端获取队列方式&quot;&gt;客户端获取队列方式&lt;/h3&gt;
&lt;p&gt;目前默认实现了&lt;code&gt;RocketMQ&lt;/code&gt;与&lt;code&gt;ActiveMQ&lt;/code&gt;的推送方式。依赖MQ的方式来实现延时框架与具体业务系统的耦合。&lt;/p&gt;
&lt;h3 id=&quot;消息体中消息与rocketmq和-activemq-消息字段对应关系&quot;&gt;消息体中消息与&lt;code&gt;RocketMQ&lt;/code&gt;和 &lt;code&gt;ActiveMQ&lt;/code&gt; 消息字段对应关系&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;mykit-delay&lt;/th&gt;
&lt;th&gt;RocketMQ&lt;/th&gt;
&lt;th&gt;ActiveMQ&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;th/&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;topic&lt;/td&gt;
&lt;td&gt;topic&lt;/td&gt;
&lt;td&gt;topic&lt;/td&gt;
&lt;td&gt;点对点发送队列名称或者主题名称&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;subtopic&lt;/td&gt;
&lt;td&gt;subtopic&lt;/td&gt;
&lt;td&gt;subtopic&lt;/td&gt;
&lt;td&gt;点对点发送队列子名称或者主题子名称&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;body&lt;/td&gt;
&lt;td&gt;消息内容&lt;/td&gt;
&lt;td&gt;消息内容&lt;/td&gt;
&lt;td&gt;消息内容&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;关于系统配置&quot;&gt;关于系统配置&lt;/h3&gt;
&lt;p&gt;延迟框架与具体执行业务系统的交互方式通过延迟框架配置实现，具体配置文件位置为mykit-delay-config项目下的&lt;code&gt;resources/properties/starter.properties&lt;/code&gt;文件中。&lt;/p&gt;
&lt;h2 id=&quot;测试&quot;&gt;测试&lt;/h2&gt;
&lt;p&gt;需要配置好数据库地址和Redis的地址 如果不是单机模式 也需要配置好Zookeeper&lt;/p&gt;
&lt;p&gt;运行mykit-delay-test模块下的测试类&lt;code&gt;io.mykit.delay.test.PushTest&lt;/code&gt;添加任务到队列中&lt;/p&gt;
&lt;p&gt;启动mykit-delay-test模块下的&lt;code&gt;io.mykit.delay.TestDelayQueue&lt;/code&gt;消费前面添加数据 为了方便查询效果 默认的消费方式是&lt;code&gt;consoleCQ&lt;/code&gt; 控制台输出&lt;/p&gt;
&lt;h2 id=&quot;扩展&quot;&gt;扩展&lt;/h2&gt;
&lt;p&gt;支持zset队列个数可配置 避免大数据带来高延迟的问题。&lt;/p&gt;
&lt;h2 id=&quot;近期规划&quot;&gt;近期规划&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;分区(buck)支持动态设置&lt;/li&gt;
&lt;li&gt;redis与数据库数据一致性的问题 （&lt;code&gt;重要&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;实现自己的推拉机制&lt;/li&gt;
&lt;li&gt;支持可切换实现方式 目前只是依赖Redis实现，后续待优化&lt;/li&gt;
&lt;li&gt;支持Web控制台管理队列&lt;/li&gt;
&lt;li&gt;实现消息消费&lt;code&gt;TTL&lt;/code&gt;机制&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果这款开源框架对你有帮助，请小伙伴们打开github链接：&lt;a href=&quot;https://github.com/sunshinelyz/mykit-delay&quot;&gt;https://github.com/sunshinelyz/mykit-delay&lt;/a&gt; ，给个Star，让更多的小伙伴看到，减轻工作中繁琐的扫描数据表的定时任务开发。也希望能够有越来越多的小伙伴参与这个开源项目，我们一起养肥它！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201123005613955.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好了，不早了，今天就到这儿吧，我是冰河，我们下期见！！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;重磅福利&quot;&gt;重磅福利&lt;/h2&gt;
&lt;p&gt;微信搜一搜【冰河技术】微信公众号，关注这个有深度的程序员，每天阅读超硬核技术干货，公众号内回复【PDF】有我准备的一线大厂面试资料和我原创的超硬核PDF技术文档，以及我为大家精心准备的多套简历模板（不断更新中），希望大家都能找到心仪的工作，学习是一条时而郁郁寡欢，时而开怀大笑的路，加油。如果你通过努力成功进入到了心仪的公司，一定不要懈怠放松，职场成长和新技术学习一样，不进则退。如果有幸我们江湖再见！&lt;/p&gt;
&lt;p&gt;另外，我开源的各个PDF，后续我都会持续更新和维护，感谢大家长期以来对冰河的支持！！&lt;/p&gt;
</description>
<pubDate>Mon, 23 Nov 2020 15:59:00 +0000</pubDate>
<dc:creator>冰河团队</dc:creator>
<og:description>写在前面 在实际工作中，很多小伙伴在开发定时任务时，会采取定时扫描数据表的方式实现。然而，这种方式存在着重大的缺陷：如果数据量大的话，频繁的扫描数据表会对数据库造成巨大的压力；难以支撑大规模的分布式定</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/binghe001/p/14028079.html</dc:identifier>
</item>
<item>
<title>JVM学习之JVM基础知识 - 码头工人</title>
<link>http://www.cnblogs.com/boycelee/p/14028001.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/boycelee/p/14028001.html</guid>
<description>&lt;hr/&gt;

&lt;h3 id=&quot;1、java体系构成&quot;&gt;1、Java体系构成&lt;/h3&gt;
&lt;p&gt;1）Java程序语言&lt;/p&gt;
&lt;p&gt;2）Java虚拟机&lt;/p&gt;
&lt;p&gt;3）字节码文件&lt;/p&gt;
&lt;p&gt;4）Java类库&lt;/p&gt;
&lt;p&gt;5）第三方Java类库&lt;/p&gt;
&lt;h3 id=&quot;2、jdk、jre、jvm之间的关系&quot;&gt;2、JDK、JRE、JVM之间的关系&lt;/h3&gt;
&lt;p&gt;1）JDK：Java程序语言、Java虚拟机和Java类库统称为JDK（Java Development Kit）&lt;/p&gt;
&lt;p&gt;2）JRE：Java类库中的Java SE和Java虚拟机统称为JDR（Java Runtime Enviroment）&lt;/p&gt;
&lt;img src=&quot;https://gitee.com/leeboyce/imagebed/raw/20200305-image/uPic/JDK%E3%80%81JRE%E3%80%81JVM%E5%85%B3%E7%B3%BB%E5%9B%BE.png&quot; alt=&quot;JDK、JRE、JVM关系图&quot; width=&quot;35%;&quot;/&gt;

&lt;h4 id=&quot;（1）jvm官方文档定义&quot;&gt;（1）JVM官方文档定义&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;The Java Virtual Machine is an abstract computing machine. Like a real computing machine, it has an instruction set and manipulates various memory areas at run time. It is reasonably common to implement a programming language using a virtual machine; the best-known virtual machine may be the P-Code machine of UCSD Pascal.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;The Java Virtual Machine knows nothing of the Java programming language, only of a particular binary format, the class file format. A class file contains Java Virtual Machine instructions (or *bytecodes*) and a symbol table, as well as other ancillary information.&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;（2）中文解释&quot;&gt;（2）中文解释&lt;/h4&gt;
&lt;p&gt;Java虚拟机是一个抽象的计算机（本质上就是可运行程序）。它和真实的计算机相似，具有指令集且能够在运行时对内存区域进行操作。Java虚拟机并不能直接解释Java语言，它只能够解释特定的二进制格式，即.class文件（字节码文件）。&lt;/p&gt;


&lt;img src=&quot;https://gitee.com/leeboyce/imagebed/raw/20200305-image/uPic/HotSpotJVMArchitecture1.png&quot; alt=&quot;HotSpotJVMArchitecture1&quot; width=&quot;50%;&quot;/&gt;

&lt;img src=&quot;https://gitee.com/leeboyce/imagebed/raw/20200305-image/uPic/Java%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B1.png&quot; alt=&quot;Java代码执行流程1&quot; width=&quot;50%;&quot;/&gt;

&lt;h3 id=&quot;1、指令架构&quot;&gt;1、指令架构&lt;/h3&gt;
&lt;h4 id=&quot;（1）基于栈式架构&quot;&gt;（1）基于栈式架构&lt;/h4&gt;
&lt;p&gt;​ a）设计和实现更简单&lt;/p&gt;
&lt;p&gt;​ b）指令集小，编译器易实现&lt;/p&gt;
&lt;p&gt;​ c）不需要硬件支持，可移植性更好，更容易实现跨平台&lt;/p&gt;
&lt;h4 id=&quot;（2）基于寄存器架构&quot;&gt;（2）基于寄存器架构&lt;/h4&gt;
&lt;p&gt;​ a）依赖硬件，可移植性查&lt;/p&gt;
&lt;p&gt;​ b）执行效率高&lt;/p&gt;
&lt;h3 id=&quot;2、例子&quot;&gt;2、例子&lt;/h3&gt;
&lt;h4 id=&quot;（1）java源码&quot;&gt;&lt;strong&gt;（1）Java源码&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public class StackTest {

    public static void main(String[] args) {
        int a = 2;
        int b = 3;
        int c = a + b;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;（2）c源码&quot;&gt;（2）C++源码&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;void test() {
    int a = 2;
    int b = 3;
    int c = a + b;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;（3）基于栈式结构计算过程&quot;&gt;（3）基于栈式结构计算过程&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;使用jclasslib查看字节码&lt;/p&gt;
&lt;img src=&quot;https://gitee.com/leeboyce/imagebed/raw/20200305-image/uPic/jclasslib%E6%9F%A5%E7%9C%8B%E5%AD%97%E8%8A%82%E7%A0%811.png&quot; alt=&quot;jclasslib查看字节码1&quot; width=&quot;67%;&quot;/&gt;&lt;pre&gt;
&lt;code&gt;0 iconst_2    常量为2
1 istore_1    将常量2保存至索引为1的操作数栈中
2 iconst_3    常量为3
3 istore_2    将常量2保存至索引为2的操作数栈中
4 iload_1     加载操作数栈索引为1所对应的值
5 iload_2     加载操作数栈索引为2所对应的值
6 iadd        相加
7 istore_3    将相加结果保存至索引为3的操作数栈中
8 return      
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;（4）基于寄存器结构计算过程&quot;&gt;（4）基于寄存器结构计算过程&lt;/h4&gt;
&lt;p&gt;Android studio编写完后使用ida查看指令，ARM32下的汇编指令&lt;/p&gt;
&lt;img src=&quot;https://gitee.com/leeboyce/imagebed/raw/20200305-image/uPic/%E5%9F%BA%E4%BA%8E%E5%AF%84%E5%AD%98%E5%99%A8%E6%9E%B6%E6%9E%84%E6%8C%87%E4%BB%A41.png&quot; alt=&quot;基于寄存器架构指令1&quot; width=&quot;67%;&quot;/&gt;&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;SUB             SP, SP, #0xC
MOVS            R0, #2                      操作数2移动至R0寄存器 
STR             R0, [SP,#0xC+var_4]         R0寄存器的值写入[SP,#0xC+var_4]地址
MOVS            R0, #3                      操作数3移动至R0寄存器 
STR             R0, [SP,#0xC+var_8]         R0寄存器的值写入[SP,#0xC+var_8]地址
LDR             R0, [SP,#0xC+var_4]         [SP,#0xC+var_4]的值读入R0寄存器
LDR             R1, [SP,#0xC+var_8]         [SP,#0xC+var_8]的值读入R1寄存器
ADD             R0, R1                      R0, R1寄存器相加,结果放置R0寄存器
STR             R0, [SP,#0xC+var_C]         R0寄存器的值写入[SP,#0xC+var_C]地址
ADD             SP, SP, #0xC
BX              LR
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;3、思考&quot;&gt;3、思考&lt;/h3&gt;
&lt;p&gt;网上常有结论，&lt;strong&gt;在完成相同操作的情况下，基于栈式架构比基于寄存器架构的指令路量要多&lt;/strong&gt;。这种说法严谨吗？&lt;/p&gt;
&lt;p&gt;可以从上面例子中看出&lt;strong&gt;ARM32下的基于寄存器架构的指令数量并不比基于栈式结构的指令数量少&lt;/strong&gt;。很多人只讨论了x86架构下的指令数量，而忽略了ARM架构下的指令集数量。&lt;/p&gt;

</description>
<pubDate>Mon, 23 Nov 2020 15:37:00 +0000</pubDate>
<dc:creator>码头工人</dc:creator>
<og:description>一、Java技术体系 1、Java体系构成 1）Java程序语言 2）Java虚拟机 3）字节码文件 4）Java类库 5）第三方Java类库 2、JDK、JRE、JVM之间的关系 1）JDK：Jav</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/boycelee/p/14028001.html</dc:identifier>
</item>
</channel>
</rss>