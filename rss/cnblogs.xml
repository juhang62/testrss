<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Validation框架的应用 - 血夜之末</title>
<link>http://www.cnblogs.com/Tiancheng-Duan/p/12670866.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Tiancheng-Duan/p/12670866.html</guid>
<description>&lt;h2 id=&quot;一，前言&quot;&gt;一，前言&lt;/h2&gt;
&lt;p&gt;这篇博客只说一下Validation框架的应用，不涉及相关JSR，相关理论，以及源码的解析。&lt;/p&gt;
&lt;p&gt;如果之后需要的话，会再开博客描写，这样会显得主题突出一些。&lt;/p&gt;
&lt;p&gt;后续扩展部分会解释message，groups，payload三个核心属性等。&lt;/p&gt;
&lt;p&gt;自定义注解部分，会给出蚂蚁金服内部真实采用的自定义校验注解。&lt;/p&gt;
&lt;h2 id=&quot;二，简介&quot;&gt;二，简介&lt;/h2&gt;
&lt;p&gt;简单来说，就是通过Validation框架，进行数据的各类校验。从Java的基本数据类型到自定义封装数据类型，从非空判断到正则表达式判断，都是Validation框架所支持的。&lt;/p&gt;
&lt;p&gt;在Validation之前，层次架构中，开发者总是采用分层验证模型。就是分别在控制层，服务层，数据层等分别对目标对象的目标属性进行校验。很明显，这是非常不优雅的，而且开发效率低，因为存在大量重复校验逻辑。&lt;/p&gt;
&lt;p&gt;而Validation则提出一个元数据验证模型，而在Spring体系中，则表现为Java Bean验证模型。站在Spring角度来说，无论是在哪个层次，都是针对Java Bean进行验证的。所以，Validation则通过在目标Bean上添加约束注解，以及背后的验证程序，实现了一个对业务代码无侵入的校验功能。&lt;/p&gt;
&lt;h2 id=&quot;三，使用方法&quot;&gt;三，使用方法&lt;/h2&gt;
&lt;h3 id=&quot;1添加依赖&quot;&gt;1.添加依赖&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
    &amp;lt;!-- Validation 相关依赖 --&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;javax.validation&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;validation-api&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;2.0.1.Final&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是Validation框架的核心依赖。&lt;/p&gt;
&lt;p&gt;该依赖是包含在SpringBoot的spring-boot-web-starter中的。所以如果使用了前面Spring-boot-web-starter依赖，则不需要再次引入Validation框架的依赖。&lt;/p&gt;
&lt;p&gt;至于EL等依赖，常用于自定义注解，具体可以根据需要进行依赖引入。&lt;/p&gt;
&lt;h3 id=&quot;2添加约束注解&quot;&gt;2.添加约束注解&lt;/h3&gt;
&lt;p&gt;针对目标Bean，针对不同属性的验证需求，添加不同的约束注解。&lt;/p&gt;
&lt;p&gt;如UserVo的userId，添加@NotNull注解，表示这个属性在验证框架中不可为空。&lt;/p&gt;
&lt;p&gt;有关约束注解，后面有详尽描述。&lt;/p&gt;
&lt;h3 id=&quot;3开启验证&quot;&gt;3.开启验证&lt;/h3&gt;
&lt;p&gt;即使对元数据模型添加了约束注解，但是还没有明确开启验证流程。站在Validation框架的角度，它并不知道应该在什么时候进行校验。因为除了控制层，我们还可能在服务层验证。即使是在服务层，一个调用链路，可能涉及多个方法，也需要确定在哪个方法进行验证。&lt;/p&gt;
&lt;p&gt;那么，开启验证的方法有两种（也许还有别的方法，欢迎补充）：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;验证注解：@Validated或者@Valid&lt;/li&gt;
&lt;li&gt;初始化验证器：Validation.buildDefaultValidatorFactory().getValidator();&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;验证注解&quot;&gt;验证注解&lt;/h4&gt;
&lt;p&gt;@Validated注解的效果与@Valid是一样的，毕竟@Validated是SpringBoot对@Valid注解的封装（@Valid是Java的自带的注解）。而@Validated注解是包含在SpringBoot的spring-boot-web-starter中的。&lt;/p&gt;
&lt;p&gt;在对应位置添加@Validated注解（当程序执行到这里，就会执行对应的校验逻辑）：&lt;/p&gt;
&lt;h5 id=&quot;自定义对象（启动注解在自定义对象前）&quot;&gt;自定义对象（启动注解在自定义对象前）&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
        @PostMapping(&quot;save.do&quot;)
        @ResponseBody
        public ServerResponse saveConfig(@Validated(InclinationConfig.ConfigCommitGroup.class) InclinationConfig inclinationConfig) {
                // 业务逻辑
        }

&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;基本数据类型（）&quot;&gt;基本数据类型（）&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;       
        @Validated
        public class demo {
        
                @PostMapping(&quot;get.do&quot;)
                @ResponseBody
                public ServerResponse getConfig(int configId) {
                        // 业务逻辑
                }
        }

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;针对Java基本数据类型的@NotNull，则需要将对应类上添加@Validated注解。&lt;/p&gt;
&lt;h4 id=&quot;验证器&quot;&gt;验证器&lt;/h4&gt;
&lt;p&gt;初始化，建立验证器对象（Validator对象）：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
        // 验证器对象
    private Validator validator = Validation.buildDefaultValidatorFactory().getValidator();

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;获取验证结果集合（这里也就是开启验证的时间位置）：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
        // 验证结果集合
    private Set&amp;lt;ConstraintViolation&amp;lt;UserInfo&amp;gt;&amp;gt; set = validator.validate(userInfo);

        // 验证过程可以添加分组信息
        private Set&amp;lt;ConstraintViolation&amp;lt;UserInfo&amp;gt;&amp;gt; set = validator.validate(userInfo,UserInfo.RegisterGroup.class);

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;处理验证结果集合：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
        set.forEach(item -&amp;gt; {
        // 输出验证错误信息
        System.out.println(item.getMessage());
        });

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当然啦。更多情况下，我们是直接抛出异常的：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
        // 判断验证结果集是否为空（验证结果集放的都是验证失败时的message）
        if(!CollectionUtils.isEmpty(set)) {
                // 循环时，采用StringBuilder可以有效提高效率（详见String,StringBuilder,StringBuffer三者区别）
                StringBuilder exceptionMessage = new StringBuilder();
                set.forEach(validationItem -&amp;gt; {
                        exceptionMessage.append(validationItem.getMessage());
                });
                // 直接抛出异常（其实这也就是@Valid注解的默认校验器的做法）
                throw new Exception(exceptionMessage.toStrring());
        }

&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四，约束注解&quot;&gt;四，约束注解&lt;/h2&gt;
&lt;h3 id=&quot;1初级应用：常用注解&quot;&gt;1.初级应用：常用注解&lt;/h3&gt;
&lt;p&gt;这里给出了Validation框架（validation-api-2.0.1.Final）中constraints下全部的注解说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;空值校验：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;@Null：目标值为null。比如，注册时的userId当然是null（即使不为null，系统也不会采用的）。&lt;/li&gt;
&lt;li&gt;@NotNull：目标值不为null。比如，登录时的userId当然不为null（当然也可能是通过了外部鉴权，然后内部裸奔）。&lt;/li&gt;
&lt;li&gt;@NotEmpty：目标值不为empty。相较于上者，增加了对空值的判断（就是&quot;&quot;无法通过@NotEmpty的校验）&lt;/li&gt;
&lt;li&gt;@NotBlank：目标值不为blank。相较于上者，增加了对空格的判断（就是空格无法通过@NotBlank校验的）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;范围校验：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;@Min：针对数值类型，目标值不能低于该注解设定的值。&lt;/li&gt;
&lt;li&gt;@Max：针对数值类型，目标值不能高于该注解设定的值。&lt;/li&gt;
&lt;li&gt;@Size：针对集合类型，目标集合的元素数量不可以高于max参数，不可以低于min参数。&lt;/li&gt;
&lt;li&gt;@Digits：针对数值类型，目标值的整数位数必须等于integer参数设定的值，小数位数必须等于fraction参数设定的值。&lt;/li&gt;
&lt;li&gt;@DecimalMax：针对数值类型，目标值必须小于该注解设定的值。&lt;/li&gt;
&lt;li&gt;@DecimalMin：针对数值类型，目标值必须大于该注解设定的值。&lt;/li&gt;
&lt;li&gt;@Past：针对于日期类型，目标值必须是一个过去的时间。&lt;/li&gt;
&lt;li&gt;@PastOrPresent：针对于日期类型，目标值必须是一个过去或现在的时间。&lt;/li&gt;
&lt;li&gt;@Future：针对于日期类型，目标值必须是未来的时间。&lt;/li&gt;
&lt;li&gt;@FutureOrPresent:针对于日期类型，目标值必须是未来或未来的时间。&lt;/li&gt;
&lt;li&gt;@Negative：针对数值类型，目标值必须是负数。&lt;/li&gt;
&lt;li&gt;NegativeOrZero：针对数值类型，目标值必须是非正数。&lt;/li&gt;
&lt;li&gt;@Positive：针对数值类型，目标值必须是正数。&lt;/li&gt;
&lt;li&gt;@PositiveOrZero：针对数值类型，目标值必须是非负数。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他校验：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;@AssertTrue：针对布尔类型，目标值必须为true。&lt;/li&gt;
&lt;li&gt;@AssertFalse：针对布尔类型，目标值必须为false。&lt;/li&gt;
&lt;li&gt;@Email：针对字符串类型，目标值必须是Email格式。&lt;/li&gt;
&lt;li&gt;@URL：针对字符串类型，目标值必须是URL格式。&lt;/li&gt;
&lt;li&gt;@Pattern：针对字符串类型，目标值必须通过注解设定的正则表达式。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面有关NotNull,NotEmpty,NotBlank，可以参考StringUtils的类似API。&lt;br/&gt;另外，就是上述的@Pattern注解，可以说是最为灵活的注解。许多自定义注解，其实都可以通过@Pattern注解实现。&lt;/p&gt;
&lt;h3 id=&quot;2中级应用：级联，分组，序列&quot;&gt;2.中级应用：级联，分组，序列&lt;/h3&gt;
&lt;p&gt;我认为Validation框架的中级应用有三个：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;级联验证：通过@Valid注解实现级联校验。举个例子，我的ScriptionBO中有一个List属性。我希望Validation框架在校验ScriptionBO的时候，不仅仅校验ScriptionBO的属性，还要验证其中List涉及的User们。那么在List上添加@Valid注解，就可以实现了。&lt;/li&gt;
&lt;li&gt;分组校验：通过分组Interface与校验注解的group参数，就可以实现分组校验。举个例子，同样是User实体类，既需要满足登录验证（有userId这样的属性），也需要满足注册验证（不需要userId这样的属性）。那么可以在User实体类中，建立用于登录场景的interface LoginGroup {}接口，与用于注册场景的interface RegisterGroup {}。在userId属性上，增加非空校验的@NotNull(groups = LoginGroup.class)，就可以实现了。&lt;/li&gt;
&lt;li&gt;分组序列：通过分组校验，再加上@GroupSequence({xxxGroup.class,xxxGroup.class})，就可以实现分组序列了。举个例子，登录场景下，User连userId的非空校验都没有通过，那么就更不需要校验手机号码，邮箱等。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;3高级应用：自定义校验注解&quot;&gt;3.高级应用：自定义校验注解&lt;/h3&gt;
&lt;p&gt;首先强调一点，正常情况下，常用约束注解配合Validation框架的中级应用，足以应付大多数情况。尤其是@Pattern注解采用了灵活的正则表达式，可以解决大部分复杂问题。&lt;/p&gt;
&lt;p&gt;举个例子，正常的Email地址校验，可以通过@Email注解进行校验，更可以通过@Pattern实现更为精准的校验。至于自定义校验注解，则可以实现根据配置，动态验证Email地址的功能。&lt;/p&gt;
&lt;p&gt;自定义校验注解，其实就类似于配合自定义注解的切面编程，只不过利用了Validation框架的一些基础方法。&lt;/p&gt;
&lt;p&gt;自定义校验注解分为以下三步：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;约束注解的定义。&lt;/li&gt;
&lt;li&gt;约束验证规则（即自定义约束校验器）&lt;/li&gt;
&lt;li&gt;关联约束注解与约束规则&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;为了更直观的感受，这里给出一个简单的demo。&lt;/p&gt;
&lt;p&gt;另外，这里的依赖，需要单独引入，能只依靠springboot自带的validation依赖。&lt;/p&gt;
&lt;h4 id=&quot;约束注解定义&quot;&gt;约束注解定义&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
        package tech.jarry.learning.demo.common.anno;
        
        import javax.validation.Constraint;
        import javax.validation.Payload;
        import java.lang.annotation.*;
        
        /**
         * @author jarry
         * @description 自定义动态属性校验约束注解
         */
        @Documented
        @Target(ElementType.FIELD)
        @Retention(RetentionPolicy.RUNTIME)
        // 关联约束注解与约束规则
        @Constraint(validatedBy = DynamicPropertyVerificationValidator.class)
        public @interface DynamicPropertyVerification {
                // 约束注解校验失败时的输出信息
                String message() default &quot;property verification fail&quot;;
        
                // 约束注解在验证时所属的组别
                Class&amp;lt;?&amp;gt;[] groups() default {};
        
                // 约束注解的负载（可用来保存一些数据）
                Class&amp;lt;? extends Payload&amp;gt;[] payload() default {};
        }

&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;约束验证规则&quot;&gt;约束验证规则&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
        package tech.jarry.learning.demo.common.anno;
        
        import com.alibaba.fastjson.JSON;
        
        import javax.validation.ConstraintValidator;
        import javax.validation.ConstraintValidatorContext;
        import java.util.ArrayList;
        import java.util.List;
        
        /**
         * @author jarry
         * @description 动态属性的自定义约束校验器
         */
        public class DynamicPropertyVerificationValidator implements ConstraintValidator&amp;lt;DynamicPropertyVerification, String&amp;gt; {
        
                // 为了便于进行测试，这里先放入一些本地数据
                private static final List&amp;lt;String&amp;gt; REX_LIST = new ArrayList&amp;lt;String&amp;gt;() {
                        {
                                add(&quot;auth_1&quot;);
                                add(&quot;auth_2&quot;);
                                add(&quot;auth_3&quot;);
                                add(&quot;auth_4&quot;);
                        }
                };
        
                @Override
                public void initialize(DynamicPropertyVerification dynamicPropertyVerification) {
                        // 通过zk等获取远程配置，或加载本地配置（这个看情况了）
                }
        
                @Override
                public boolean isValid(String value, ConstraintValidatorContext constraintValidatorContext) {
                        // 判断需要校验的属性属于单个属性值，还是集合属性值
                        // 这里只针对&quot;Admin&quot;与[&quot;auth_1&quot;,&quot;auth_3&quot;,&quot;auth_2&quot;]这样的格式进行校验
                        if (JSON.isValidArray(value)) {
                                // 需要校验的属性，是一个集合类型（如权限列表）
                                List&amp;lt;String&amp;gt; requestValueList = JSON.parseArray(value, String.class);
                                boolean result = requestValueList.stream()
                                                .allMatch(requestValue -&amp;gt; isValidRequestValue(requestValue));
                                return result;
                        } else {
                                // 需要校验的属性，是一个单一属性字符串（如gender）
                                boolean result = isValidRequestValue(value);
                                return result;
                        }
                }
        
                private boolean isValidRequestValue(final String value) {
                        return REX_LIST.stream()
                                        .anyMatch(legalValue -&amp;gt;legalValue.equals(value));
                }
        
        }


&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;首先这个注解是真实项目的代码，是我参与的蚂蚁金服某项目的商业平台代码。&lt;/p&gt;
&lt;p&gt;为了实现商业化SDK，便需要后端自行负责数据校验。正好当时这块的负责人希望规范代码，所以就交给我，通过统一的Validation框架进行数据校验。&lt;/p&gt;
&lt;p&gt;不过这个代码很快就增加禁止字段等，并通过接口实现了逻辑上的关注点分离。&lt;/p&gt;
&lt;p&gt;之所以没有引入完整版，一方面完整代码，代码量较多，放在这里会造成主题的偏移。另一方面，完整代码涉及内部的一些配置服务，不方便泄露。&lt;/p&gt;
&lt;h2 id=&quot;五，扩展&quot;&gt;五，扩展&lt;/h2&gt;
&lt;h3 id=&quot;1核心属性解释&quot;&gt;1.核心属性解释&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;message：异常消息。在校验失败时，返回的message。通常会将校验失败时的异常消息，甚至是异常类型等放在这里（异常堆栈，是可以通过校验失败时抛出的BindException获取）。&lt;/li&gt;
&lt;li&gt;groups：分组信息。通过该属性，进行分组校验。详见中级应用：分组信息部分。&lt;/li&gt;
&lt;li&gt;payload：有效负载。用于保存一些关键信息。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其实上述三个核心属性，最为神秘的，就是payload属性。一方面，这个属性用得最少，绝大部分人都不会使用。另一方面，国内的百度很难找到这方面资料。&lt;/p&gt;
&lt;p&gt;我在百度的前两页，都看不到几个相关的解释。即使有解释，也只是一句干巴巴的有效负载（其实就是翻译过来，具体功能和这个没太大关系）。百度中只有两条博客，提到payload可以作为用户校验，以及元数据。而一些Validation框架的教学视频，也大多一笔带过。最后还是在谷歌上找到较为全面的解释。。。&lt;/p&gt;
&lt;h3 id=&quot;2payload的实践应用&quot;&gt;2.payload的实践应用&lt;/h3&gt;
&lt;p&gt;我之前使用Validation框架，也没有使用这个注解。直到在蚂蚁某项目推进数据校验规范时，才去深入了解它。还有一个比较重要的原因，当时一方面需要在message中保存自定义的异常信息，另一方面需要保存错误类型的Code（系统有一个专门的异常Enum），从而对接阿里内部的国际化文案平台-美杜莎（特意查了一些，外网是有资料的。囧）。&lt;/p&gt;
&lt;p&gt;那么需要保存的信息就不止两处。如果通过Json配合BO的方式，就有些复杂化了，而且显得比较重（尤其是有更好的方案）。前期不了解payload的情况下，就通过BindExcpetion的解析，获取所需的核心信息，放弃非核心的信息。那么在了解payload后，问题就简单了。直接通过payload配合对应Payload接口的子接口，可以保存所需的信息。&lt;/p&gt;
&lt;p&gt;之后有机会，可以考虑写一篇博客，来谈谈有关payload的实践应用。&lt;/p&gt;
&lt;h3 id=&quot;3bindexception的解析&quot;&gt;3.BindException的解析&lt;/h3&gt;
&lt;p&gt;先上图，可以看到BindException继承Exception，实现了BindingResult接口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200410012536793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1cmVraW5n,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;Exception，相信大家都熟悉，那么就直接上BindingResult接口吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200410012652254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1cmVraW5n,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;至于最终效果如何，可以看下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200410013116359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1cmVraW5n,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;从上图的红框，我都不用展示具体注解应用，大家就懂了。很明显是一个inclinaionOrigin的对象上，有一个属性dataId没有通过@NotNull注解的校验。并且还可以从上图中找到@NotNull注解的message等信息，以及异常堆栈的追踪信息。&lt;/p&gt;
&lt;p&gt;并且由于返回异常信息的格式固定，所以可以直接通过对BindException的解析，来获取所需的绝大部分异常信息。&lt;/p&gt;
&lt;h2 id=&quot;六，总结&quot;&gt;六，总结&lt;/h2&gt;
&lt;p&gt;简单来说，就五点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;尽量使用Validation框架自带的注解。&lt;/li&gt;
&lt;li&gt;使用自定义注解前，想想是否可以通过@Pattern解决问题。&lt;/li&gt;
&lt;li&gt;payload其实类似groups，不过对应的接口需要继承Payload接口。&lt;/li&gt;
&lt;li&gt;Validation框架校验失败时，抛出的BindException，包含绝大部分所需的异常信息。&lt;/li&gt;
&lt;li&gt;Validation框架是优秀的数据校验规范的落实方案，配合全局异常处理等，更棒。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;最后，愿与诸君共进步。&lt;/p&gt;
&lt;h2 id=&quot;七，附录&quot;&gt;七，附录&lt;/h2&gt;
&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;
</description>
<pubDate>Fri, 10 Apr 2020 00:46:00 +0000</pubDate>
<dc:creator>血夜之末</dc:creator>
<og:description>Validation框架的应用 一，前言 这篇博客只说一下Validation框架的应用，不涉及相关JSR，相关理论，以及源码的解析。 如果之后需要的话，会再开博客描写，这样会显得主题突出一些。 后续</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/Tiancheng-Duan/p/12670866.html</dc:identifier>
</item>
<item>
<title> Django REST Framework 教程开篇 - 削微寒</title>
<link>http://www.cnblogs.com/xueweihan/p/12670027.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xueweihan/p/12670027.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/759200/202004/759200-20200409221518845-190529975.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://www.zmrenwu.com&quot;&gt;HelloGitHub-追梦人物&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎来到 HelloDjango 全栈系列教程第二步——Django REST Framework 教程！&lt;/p&gt;
&lt;p&gt;首先恭喜你完成了 HelloDjango 全栈系列教程的第一步——&lt;a href=&quot;https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/&quot;&gt;Django 博客教程（第二版）&lt;/a&gt;，在这个教程中，我们学习了基于传统模板引擎的开发方式，前端展示的 HTML 页面由后端负责渲染，后端程序员包揽了前后端开发的全部工作。&lt;/p&gt;
&lt;p&gt;但是随着前端技术的演进，前后端分离的开发方式变得越来越流行。稍有规模的公司大都采用前后端分离的开发方式，在这种开发方式下，后端程序员只需关注业务逻辑，通过接口返回业务数据，无需懂得 HTML、CSS、JavaScript 这些前端语言（当然作为优秀的程序员，虽然不用再写，但这些都还是要懂的）；前端程序员，则可以使用借助 Vue、React 等优秀的 js 框架以及 Webpack 等打包工具，专注于页面开发。而将他们联系起来的桥梁就是前后端之间数据交互的接口规范。&lt;/p&gt;
&lt;p&gt;现在最流行的数据交互接口规范当然要属 REST 规范。REST 全称 Representational State Transfer，意为&quot;表现层状态转化&quot;。简单来说，在符合 REST 原则的 RESTful 架构中，一个 URL 代表某个网络资源，网络资源可以指一篇博客文章、一张图片、一首歌曲或者一种服务等。资源通常由某种标准化的格式进行描述，描述资源的格式有很多种，例如 HTML 文档就是一种描述形式。在此之前，XML 是最为常用的格式，但现在，也有越来越多的系统采用 JSON 这种更加轻量的描述形式。在客户端和服务器交互时，资源便以某种描述的格式进行传递。客户端则使用 HTTP 协议，充分借助 HTTP 协议的动词（例如 GET、POST）来表达对服务端资源进行某种操作的意图，例如 GET 用来获取资源，POST 用来新建资源（也可以用于更新资源），PUT 用来更新资源，DELETE 用来删除资源。&lt;/p&gt;
&lt;p&gt;因此，假设我们的系统采用 RESTful 架构，对于前端工程师来说，他的工作就是根据渲染的页面，向后端发起符合 RESTful 风格的 HTTP 请求，获取接口返回的数据，渲染前端页面。而对于后端程序员来说，就是要编写接口，解读前端发来的请求，对资源进行相应操作并返回前端需要的数据。&lt;/p&gt;
&lt;p&gt;如何解读前端的请求、如何使用指定的格式描述并传递资源等都是一系列标准化且重复的工作，所以可以由一套统一的框架来实现。django 本身没有提供这样的处理框架，但 django 的第三方拓展——django-rest-framework 就是一套专门用来开发符合 REST 规范的 RESTful 接口的框架。可以说在现在这个前后端分离的大环境下，django 开发基本离不开 django-rest-framework。因此接下来的教程里，我们将全面学习 django-rest-framework 的使用。&lt;/p&gt;
&lt;p&gt;我们的示例项目将延续 &lt;a href=&quot;https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/&quot;&gt;Django 博客教程（第二版）&lt;/a&gt; 中开发的博客，如果你是跟着教程到这里的话，那你可以很顺畅地继续走下去。如果你没有看上一部教程也没有关系，在 django-rest-framework 教程正式开始之前会指导大家如何一步步将博客运行起来。django-rest-framework 教程虽然延续 &lt;a href=&quot;https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/&quot;&gt;Django 博客教程（第二版）&lt;/a&gt; 中的项目，但在内容上并无太大关联，如果你已经有了 django 基础（了解 ORM 以及类视图就行），就可以直接开始本教程。当然如果是纯 django 新手，对 django 中的基础概念还比较陌生的话，推荐先学习 &lt;a href=&quot;https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/&quot;&gt;Django 博客教程（第二版）&lt;/a&gt;，打好基础，再来学习本教程会事半功倍。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/759200/202002/759200-20200213201956024-782757549.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关注公众号加入交流群&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 10 Apr 2020 00:09:00 +0000</pubDate>
<dc:creator>削微寒</dc:creator>
<og:description>作者： &amp;quot;HelloGitHub 追梦人物&amp;quot; 欢迎来到 HelloDjango 全栈系列教程第二步——Django REST Framework 教程！ 首先恭喜你完成了 Hell</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xueweihan/p/12670027.html</dc:identifier>
</item>
<item>
<title>SQL Server中STATISTICS IO物理读和逻辑读的误区 - 桦仔</title>
<link>http://www.cnblogs.com/lyhabc/p/12670802.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lyhabc/p/12670802.html</guid>
<description>
&lt;p&gt;大家知道，SQL Server中可以利用下面命令查看某个语句读写IO的情况&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SET&lt;/span&gt; &lt;span&gt;STATISTICS&lt;/span&gt; IO &lt;span&gt;ON&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/257159/202004/257159-20200410004128564-884800498.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么这个命令的结果显示的物理读、逻辑读的IO单位大小是多少，比如结果显示有&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
物理读取 &lt;span&gt;1&lt;/span&gt; 次
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是代表 对硬盘做了1次物理IO吗？&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;在回答这个问题之前，需要先普及几个常识&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在一般默认情况下&lt;/p&gt;
&lt;p&gt;Windows的内存分页大小单位是4KB&lt;/p&gt;
&lt;p&gt;数据库的最小读写单位是 8K页面&lt;/p&gt;
&lt;p&gt;Windows操作系统的NTFS文件系统最小读写单位（分配单元/簇）是 4KB&lt;/p&gt;
&lt;p&gt;机械硬盘的的最小读写单位（逻辑扇区和物理扇区）是512字节&lt;/p&gt;
&lt;p&gt;高级格式化：操作系统对文件系统盘符进行格式化，规划每分配单元/簇大小，默认4KB&lt;/p&gt;
&lt;p&gt;低级格式化：存储厂家对物理存储硬件做的低级格式化，例如机械硬盘，规划每扇区大小，通常512字节&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;为什么存在磁盘块/簇/分配单元？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;读取方便：由于扇区的数量比较小，数目众多在寻址时比较困难，所以操作系统就将相邻的扇区组合在一起，形成一个块，再对块进行整体的操作，&lt;/p&gt;
&lt;p&gt;分离对底层的依赖，操作系统忽略对底层物理存储结构的设计，通过虚拟出来磁盘块的概念，文件系统就是操作系统的一部分，所以文件系统操作文件的最小单位是块/簇/分配单元&lt;/p&gt;
&lt;p&gt;这个磁盘块在Linux的ext4文件系统中称为block，在Windows的NTFS文件系统中称为分配单元或簇&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/257159/202004/257159-20200410004229042-242206689.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么是内存分页？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;操作系统经常与内存和硬盘这两种存储设备进行通信，类似于“块”的概念，都需要一种虚拟的基本单位。所以，与内存操作，是虚拟一个页的概念来作为最小单位。与硬盘打交道，就是以块为最小单位&lt;/p&gt;
&lt;p&gt;固态硬盘因为没有扇区概念，用的是块/页，一个块/页一般是4KB，so固态硬盘暂且不讨论&lt;/p&gt;

&lt;p&gt;先说结论，实际上STATISTICS IO 中物理读和逻辑读的统计对象自始至终都是数据库8K页面，比如，逻辑读1次， 物理读1次，实际上都是按8KB页为单位，是SQL Server这个软件的统计方式&lt;/p&gt;
&lt;p&gt;这样就会造成误解，产生疑问&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果物理读为1次，那么数据库对磁盘是做了一次读写操作一次IO，对吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果逻辑读为1次，那么数据库在内存中是读写了一个内存页一次IO，对吗？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实际情况是怎样的呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于物理读情况&lt;/p&gt;
&lt;p&gt;SQL Server是运行在Windows系统上的一个软件，那么这个软件在文件系统上存储数据依然按照NTFS文件系统的规则，存储一个8K的页面需要占用2个分配单元&lt;/p&gt;
&lt;p&gt;可以用winhex这个软件，按8K大小查看数据库的mdf文件可以查看到完整的一个数据库页面数据&lt;/p&gt;
&lt;p&gt;对于文件系统，读写一个数据库8KB页面需要读写2个分配单元 也就是2个文件系统IO&lt;/p&gt;
&lt;p&gt;在机械硬盘里面，文件系统的一个4KB分配单元写入到机械硬盘里，需要读写8个扇区，也就是8个硬盘IO，而1个数据库8KB页面写入到机械硬盘里，就需要读写16个扇区，也就是实际写入一个数据库页面需要16个硬盘IO&lt;/p&gt;
&lt;p&gt;然后这里会出现一些问题，如果系统故障或硬件故障，就有可能出现一个数据库页面写入存储硬件不完整情况，比如16个硬盘IO才能写入完整一个8KB页面，而如果在写入第10个IO的时候发生系统崩溃或硬件崩溃，只写入了5KB页面数据到硬盘，这时候数据库数据就已经不完整了，然后各家数据库厂商才开发【页面写入完整性检测机制】，例如&lt;/p&gt;
&lt;p&gt;MySQL InnoDB的Double Write机制（innodb_doublewrite = 1） + page checksum&lt;/p&gt;
&lt;p&gt;MSSQL的PAGE校验机制&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/257159/202004/257159-20200410004428191-1300606283.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：即使是用固态硬盘，也请不要关闭页面完整性检测功能！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;只有在数据库页面、文件系统分配单元、机械硬盘扇区的大小一致的情况下&lt;/p&gt;
&lt;p&gt;就是说，&lt;strong&gt;数据库&lt;/strong&gt;、&lt;strong&gt;文件系统&lt;/strong&gt;、&lt;strong&gt;存储设备&lt;/strong&gt;的最小读写单位大小一样的情况下，也就是所谓的【对齐】，才能关闭页面完整性检测功能，这个时候可以获得最大性能&lt;/p&gt;
&lt;p&gt;某些文件系统、存储设备所谓的声称支持【原子写】，请各位擦亮眼睛^_^，检查是否真的完整支持，对于某些情况，确实是支持真正原子写，例如&lt;/p&gt;
&lt;p&gt;1、数据库使用裸设备，这样就不需要文件系统&lt;/p&gt;
&lt;p&gt;2、以宝存PCIE闪存为例子，其Nand Flash的最小写单位是page，目前Nand Flash 的page大小是32kb，这个基本上都是大于大部分数据库通用的block size或page size，32kb可以存放4个MSSQL页面（非广告）&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;对于逻辑读情况&lt;/p&gt;
&lt;p&gt;Windows的内存分页大小单位是4KB，一个数据库页面8KB，那么读写一个内存中的数据库页面实际上需要读写2个内存分页&lt;/p&gt;
&lt;p&gt;在内存里，读写一个数据库8KB页面需要读写2个内存分页， 也就是2个内存IO&lt;/p&gt;
&lt;p&gt;然后内存中8KB数据库页跟文件系统中的8KB数据库页是一一对应的，不然的话，利用B+树索引结构和二分查找法查找数据也无从谈起&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;对于文件系统，读写一个数据库8KB页面需要读写2个分配单元 也就是2个文件系统IO&lt;/p&gt;
&lt;p&gt;对于机械硬盘，读写一个数据库8KB页面需要读写16个硬盘扇区 也就是16个硬盘IO&lt;/p&gt;
&lt;p&gt;对于内存，读写一个数据库8KB页面需要读写2个内存分页 也就是2个内存IO&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;SQL Server只是跑在Windows操作系统上的一个软件，它无法知道也不需知道它所在文件系统的最小读写单位，也无法知道也不需知道存储设备的最小读写单位，&lt;/p&gt;
&lt;p&gt;实际上操作系统从文件系统中读取8KB页面数据喂给数据库，数据库收到之后STATISTICS IO 就统计物理读为 1，至于逻辑读也是同理&lt;/p&gt;
&lt;p&gt;最最后，放一张图，做的比较丑&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/257159/202004/257159-20200410005704594-635128460.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;参考文章&lt;/strong&gt;&lt;br/&gt;http://www.dostor.com/article/111637957.html&lt;br/&gt;https://blog.csdn.net/qq_34228570/article/details/80209748&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文版权归作者所有，未经作者同意不得转载。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 09 Apr 2020 17:02:00 +0000</pubDate>
<dc:creator>桦仔</dc:creator>
<og:description>SQL Server中STATISTICS IO物理读和逻辑读的误区 大家知道，SQL Server中可以利用下面命令查看某个语句读写IO的情况 SET STATISTICS IO ON 那么这个命令</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/lyhabc/p/12670802.html</dc:identifier>
</item>
<item>
<title>Prism+MaterialDesign+EntityFramework Core+Postgresql WPF开发总结 之 中级篇 - 走遍江湖</title>
<link>http://www.cnblogs.com/lixiaobin/p/wpfdevreportdesign.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lixiaobin/p/wpfdevreportdesign.html</guid>
<description>&lt;p&gt;总共分三个部分：基础篇主要争对C#初学者，巩固C#常用知识点；中级篇主要争对WPF布局与MaterialDesign设计美化，在减轻代码量的情况做出漂亮的应用；终极篇为框架应用实战，包含MVVM框架Prism，ORM框架EntityFramework Core，开源数据库Postgresql。&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;146.7025070688&quot;&gt;
&lt;p&gt;本着每天记录一点成长一点的原则，打算将目前完成的一个WPF项目相关的技术分享出来，供团队学习与总结。&lt;/p&gt;
&lt;p&gt;总共分三个部分：&lt;/p&gt;
&lt;p&gt;基础篇主要争对C#初学者，巩固C#常用知识点；&lt;/p&gt;
&lt;p&gt;中级篇主要争对WPF布局与MaterialDesign美化设计，在减轻代码量的情况做出漂亮的应用；&lt;/p&gt;
&lt;p&gt;终极篇为框架应用实战，包含MVVM框架Prism，ORM框架EntityFramework Core，开源数据库Postgresql。&lt;/p&gt;
&lt;h3&gt;目录&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/lixiaobin/p/wpfdevreportBasic.html&quot;&gt;Prism+MaterialDesign+EntityFramework Core+Postgresql WPF开发总结 之 基础篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/lixiaobin/p/wpfdevreportdesign.html&quot;&gt;Prism+MaterialDesign+EntityFramework Core+Postgresql WPF开发总结 之 中级篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prism+MaterialDesign+EntityFramework Core+Postgresql WPF开发总结 之 终极篇（待续）&lt;/li&gt;
&lt;/ol&gt;&lt;h3 class=&quot;pgc-h-arrow-right&quot; data-pm-slice=&quot;1 1 []&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;WPF的发布同时伴随着MVVM框架的发布，此篇将围绕MVVM框架做表示与数据分离设计，包含基础UI设计以及MaterialDesign的高端设计。MVVM框架细节请参照终极篇。其中的一个效果图如下，其他效果图请往下看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/319628/202004/319628-20200409233932532-526841522.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;基础UI设计&lt;/h3&gt;
&lt;p&gt;用Windows Presentation Foundation (WPF)，可以创建具有非凡视觉效果的桌面Windows 应用程序。目前.NET Core 3.0 支持使用 Windows Presentation Foundation (WPF) Windows 桌面应用程序，以后有可能扩展到其他OS平台。&lt;/p&gt;
&lt;p&gt;WPF设计中使用的XAML标记语言，类似XML标记语言。XAML以及WPF自带的基础控件此处不做介绍可以参照微软文档。&lt;/p&gt;
&lt;h4 class=&quot;pgc-h-arrow-right&quot;&gt;一、常见布局&lt;/h4&gt;
&lt;p&gt;布局关键点就是不管什么像素下都能适应窗体大小。WPF内部提供了一套强大的布局系统，设计人员只需要使用相对定位布局就可以。&lt;/p&gt;
&lt;p&gt;通用布局：网格，堆叠，停靠。掌握这三种差不多可以应对所有开发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、网格布局&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也就是常用的Grid布局。通过行列把界面划分为网格，子控件指定相应的行列号布局到指定格子。&lt;/p&gt;
&lt;p&gt;行与列的高宽可以使用【*】按比例划分，也可以使用【Auto】根据内容自动调整。默认情况下，行和列占用的空间量最少，以容纳给定行或列中包含的任何单元内的最大内容。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3f3e0360-722e-404d-ab94-8c325b191049')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_3f3e0360-722e-404d-ab94-8c325b191049&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3f3e0360-722e-404d-ab94-8c325b191049&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3f3e0360-722e-404d-ab94-8c325b191049',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3f3e0360-722e-404d-ab94-8c325b191049&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid.RowDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid.RowDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox &lt;/span&gt;&lt;span&gt;Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;column1 auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox &lt;/span&gt;&lt;span&gt;Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;column2 auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox &lt;/span&gt;&lt;span&gt;Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;column3 auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;*&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox &lt;/span&gt;&lt;span&gt;Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;column1 auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox &lt;/span&gt;&lt;span&gt;Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;column2 *&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox &lt;/span&gt;&lt;span&gt;Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;column3 auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;*&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;2*&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox &lt;/span&gt;&lt;span&gt;Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;column1 *&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox &lt;/span&gt;&lt;span&gt;Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;column2 2*&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;*&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;2*&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox
                &lt;/span&gt;&lt;span&gt;Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;
                Height&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt;&lt;span&gt;
                Text&lt;/span&gt;&lt;span&gt;=&quot;column1 * height=100&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox &lt;/span&gt;&lt;span&gt;Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;column2 2*&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;效果如图：大小随窗体自动调整。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/319628/202004/319628-20200409105445657-890553912.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、堆叠&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;控件按指定方向排列，显示不下的时候根据所使用的控件不同会有区别。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.stackpanel&quot; data-linktype=&quot;absolute-path&quot;&gt;StackPanel&lt;/a&gt;：子控件按垂直或水平堆叠，超出空间不换行。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.virtualizingstackpanel&quot; data-linktype=&quot;absolute-path&quot;&gt;VirtualizingStackPanel&lt;/a&gt;：子控件在水平或垂直的行上虚拟化并排列，超出空间不换行。(大量数据绑定时常用)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.wrappanel&quot; data-linktype=&quot;absolute-path&quot;&gt;WrapPanel&lt;/a&gt;：子控件按从左到右的顺序定位，在当前行上的控件超出允许的空间时，换行到下一行。(列表模板常用)&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ef4fb882-e839-4a9b-8cf8-7a5ab4b2950f')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ef4fb882-e839-4a9b-8cf8-7a5ab4b2950f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ef4fb882-e839-4a9b-8cf8-7a5ab4b2950f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ef4fb882-e839-4a9b-8cf8-7a5ab4b2950f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ef4fb882-e839-4a9b-8cf8-7a5ab4b2950f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;ShowGridLines&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid.RowDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;60&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;60&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;60&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;60&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;60&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;60&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid.RowDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;StackPanel &lt;/span&gt;&lt;span&gt;Orientation&lt;/span&gt;&lt;span&gt;=&quot;Horizontal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;statckpanelHorizontal 1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;statckpanelHorizontal 2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;statckpanelHorizontal 3&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;statckpanelHorizontal 4&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;statckpanelHorizontal 5&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;statckpanelHorizontal 6&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;StackPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;StackPanel &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; Orientation&lt;/span&gt;&lt;span&gt;=&quot;Vertical&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;statckpanelVertical 1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;statckpanelVertical 2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;statckpanelVertical 3&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;statckpanelVertical 4&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;statckpanelVertical 5&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;statckpanelVertical 6&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;StackPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;VirtualizingStackPanel &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; Orientation&lt;/span&gt;&lt;span&gt;=&quot;Horizontal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;VirtualizingStackPanelHorizontal 1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;VirtualizingStackPanelHorizontal 2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;VirtualizingStackPanelHorizontal 3&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;VirtualizingStackPanelHorizontal 4&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;VirtualizingStackPanelHorizontal 5&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;VirtualizingStackPanelHorizontal 6&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;VirtualizingStackPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;VirtualizingStackPanel &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt; Orientation&lt;/span&gt;&lt;span&gt;=&quot;Vertical&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;VirtualizingStackPanelVertical 1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;VirtualizingStackPanelVertical 2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;VirtualizingStackPanelVertical 3&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;VirtualizingStackPanelVertical 4&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;VirtualizingStackPanelVertical 5&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;VirtualizingStackPanelVertical 6&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;VirtualizingStackPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;WrapPanel &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;4&quot;&lt;/span&gt;&lt;span&gt; Orientation&lt;/span&gt;&lt;span&gt;=&quot;Horizontal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;WrapPanelHorizontal 1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;WrapPanelHorizontal 2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;WrapPanelHorizontal 3&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;WrapPanelHorizontal 4&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;WrapPanelHorizontal 5&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;WrapPanelHorizontal 6&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;WrapPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;WrapPanel &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt; Orientation&lt;/span&gt;&lt;span&gt;=&quot;Vertical&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;WrapPanelVertical 1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;WrapPanelVertical 2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;WrapPanelVertical 3&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;WrapPanelVertical 4&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;WrapPanelVertical 5&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;WrapPanelVertical 6&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;WrapPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/319628/202004/319628-20200409104217665-791818426.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;StackPanel与VirtualizingStackPanel布局效果一样。WrapPanel比较特殊：指定水平方向堆叠时，水平放不下自动换成下一行显示；指定垂直方向堆叠时，垂直放不下时自动换成下一列显示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、停靠&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.dockpanel&quot; data-linktype=&quot;absolute-path&quot;&gt;DockPanel&lt;/a&gt;：子控件与面板的边缘对齐。这个分模块布局时用的最多。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b9c9fd00-51b4-4565-911e-489b132df7e0')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_b9c9fd00-51b4-4565-911e-489b132df7e0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b9c9fd00-51b4-4565-911e-489b132df7e0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b9c9fd00-51b4-4565-911e-489b132df7e0',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b9c9fd00-51b4-4565-911e-489b132df7e0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DockPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;WrapPanel
            &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;
            Background&lt;/span&gt;&lt;span&gt;=&quot;LightBlue&quot;&lt;/span&gt;&lt;span&gt;
            DockPanel.Dock&lt;/span&gt;&lt;span&gt;=&quot;Top&quot;&lt;/span&gt;&lt;span&gt;
            Orientation&lt;/span&gt;&lt;span&gt;=&quot;Horizontal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;Header----DockPanel.Dock=Top&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;Header1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;Header1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;Header1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;Header1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;Header1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;WrapPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;WrapPanel
            &lt;/span&gt;&lt;span&gt;Background&lt;/span&gt;&lt;span&gt;=&quot;LightGray&quot;&lt;/span&gt;&lt;span&gt;
            DockPanel.Dock&lt;/span&gt;&lt;span&gt;=&quot;Left&quot;&lt;/span&gt;&lt;span&gt;
            Orientation&lt;/span&gt;&lt;span&gt;=&quot;Vertical&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;Left----DockPanel.Dock=Left&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;menu1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;menu1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;menu1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;menu1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;menu1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;menu1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;menu1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;menu1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;menu1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;WrapPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;WrapPanel
            &lt;/span&gt;&lt;span&gt;Background&lt;/span&gt;&lt;span&gt;=&quot;LightSkyBlue&quot;&lt;/span&gt;&lt;span&gt;
            DockPanel.Dock&lt;/span&gt;&lt;span&gt;=&quot;Right&quot;&lt;/span&gt;&lt;span&gt;
            Orientation&lt;/span&gt;&lt;span&gt;=&quot;Horizontal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;Right----DockPanel.Dock=Right&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;WrapPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DockPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;效果如下：与Grid类似，不过是固定区域按方向自动延展。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/319628/202004/319628-20200409110436947-891985661.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、式样与模板&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过定义式样和模板，重复使用它能让应用代码量下降，同时也方便以后维护修改。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、式样 Style&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('37b63e44-e91b-4ecf-9228-cb98a1bacff8')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_37b63e44-e91b-4ecf-9228-cb98a1bacff8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_37b63e44-e91b-4ecf-9228-cb98a1bacff8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('37b63e44-e91b-4ecf-9228-cb98a1bacff8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_37b63e44-e91b-4ecf-9228-cb98a1bacff8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Window.Resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  默认表示字体为16pt  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style &lt;/span&gt;&lt;span&gt;TargetType&lt;/span&gt;&lt;span&gt;=&quot;TextBlock&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;HorizontalAlignment&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;FontSize&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;16&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  继承默认设置并扩展  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style
            &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt;
            BasedOn&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource {x:Type TextBlock}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            TargetType&lt;/span&gt;&lt;span&gt;=&quot;TextBlock&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;FontWeight&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Bold&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;FontSize&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;20&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Window.Resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;StackPanel &lt;/span&gt;&lt;span&gt;Orientation&lt;/span&gt;&lt;span&gt;=&quot;Vertical&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;default style&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource Title}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;Title style&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;StackPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;自定义式样效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/319628/202004/319628-20200409130049425-829322034.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、模板&lt;/strong&gt; &lt;strong&gt;Template&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;WPF的所有控件都提供了默认的模板ControlTemplate，模板一般和式样结合使用。模板中需要特别学习VisualState和Trigger，通过VisualState可以设计在不同状态（鼠标按下，松开等）时控件显示样式，而通过Trigger可以让控件跟随参照对象数据或者绑定的数据做式样变化，内容比较多此篇不详细介绍。&lt;/p&gt;
&lt;p&gt;如下是一个根据绑定的数据内容显示不同控件的例子。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('898647e0-41ed-473e-aa07-71e6d310c95f')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_898647e0-41ed-473e-aa07-71e6d310c95f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_898647e0-41ed-473e-aa07-71e6d310c95f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('898647e0-41ed-473e-aa07-71e6d310c95f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_898647e0-41ed-473e-aa07-71e6d310c95f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Window
    &lt;/span&gt;&lt;span&gt;x:Class&lt;/span&gt;&lt;span&gt;=&quot;WPFUI.Core.Template&quot;&lt;/span&gt;&lt;span&gt;
    xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:x&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:d&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:local&lt;/span&gt;&lt;span&gt;=&quot;clr-namespace:WPFUI.Core&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:mc&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:sys&lt;/span&gt;&lt;span&gt;=&quot;clr-namespace:System;assembly=mscorlib&quot;&lt;/span&gt;&lt;span&gt;
    Title&lt;/span&gt;&lt;span&gt;=&quot;Template&quot;&lt;/span&gt;&lt;span&gt;
    Width&lt;/span&gt;&lt;span&gt;=&quot;800&quot;&lt;/span&gt;&lt;span&gt;
    Height&lt;/span&gt;&lt;span&gt;=&quot;450&quot;&lt;/span&gt;&lt;span&gt;
    mc:Ignorable&lt;/span&gt;&lt;span&gt;=&quot;d&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Window.Resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  TextBox的显示模板  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTemplate &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;typeText&quot;&lt;/span&gt;&lt;span&gt; DataType&lt;/span&gt;&lt;span&gt;=&quot;sys:String&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  Label的显示模板  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTemplate &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;typelabel&quot;&lt;/span&gt;&lt;span&gt; DataType&lt;/span&gt;&lt;span&gt;=&quot;sys:String&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Label &lt;/span&gt;&lt;span&gt;Content&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  CheckBox的显示模板  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTemplate &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;typeCheck&quot;&lt;/span&gt;&lt;span&gt; DataType&lt;/span&gt;&lt;span&gt;=&quot;sys:String&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;CheckBox &lt;/span&gt;&lt;span&gt;Content&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  Image的显示模板  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTemplate &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;typeimg&quot;&lt;/span&gt;&lt;span&gt; DataType&lt;/span&gt;&lt;span&gt;=&quot;sys:String&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Label &lt;/span&gt;&lt;span&gt;Background&lt;/span&gt;&lt;span&gt;=&quot;LightBlue&quot;&lt;/span&gt;&lt;span&gt; Content&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTemplate &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;typeTemp&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ContentPresenter
                &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;detail&quot;&lt;/span&gt;&lt;span&gt;
                Content&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                ContentTemplate&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource typeText}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  如果字符为text，则显示TextBox模板  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTrigger &lt;/span&gt;&lt;span&gt;Binding&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;detail&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;ContentTemplate&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource typeText}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  如果字符为label，则显示Label模板  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTrigger &lt;/span&gt;&lt;span&gt;Binding&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;detail&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;ContentTemplate&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource typelabel}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  如果字符为check，则显示CheckBox模板  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTrigger &lt;/span&gt;&lt;span&gt;Binding&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;check&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;detail&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;ContentTemplate&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource typeCheck}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  如果字符为img，则显示Image模板  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTrigger &lt;/span&gt;&lt;span&gt;Binding&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;img&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;detail&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;ContentTemplate&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource typeimg}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Window.Resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ListView &lt;/span&gt;&lt;span&gt;ItemTemplate&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource typeTemp}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  测试数据  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ListView.ItemsSource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;x:Array &lt;/span&gt;&lt;span&gt;Type&lt;/span&gt;&lt;span&gt;=&quot;sys:String&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sys:String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sys:String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sys:String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;label&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sys:String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sys:String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;check&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sys:String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sys:String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;img&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sys:String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;x:Array&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ListView.ItemsSource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ListView.ItemsPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ItemsPanelTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;WrapPanel &lt;/span&gt;&lt;span&gt;Orientation&lt;/span&gt;&lt;span&gt;=&quot;Vertical&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ItemsPanelTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ListView.ItemsPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ListView&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Window&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;效果如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/319628/202004/319628-20200409172358960-2029249354.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 高端UI设计 MaterialDeisgn&lt;/h3&gt;
&lt;p&gt;它是Google开源的一套UI设计系统，用它可以设计出非常美观的Web页面，App，桌面程序，尤其是图标非常全面。有它你不用懂Photoshop也可以设计出高端的界面。&lt;/p&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;https://material.io/&quot;&gt;https://material.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/319628/202004/319628-20200409113627878-1478435923.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、引入MaterialDesign&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;WPF专用的MaterialDesign开源代码地址：&lt;a href=&quot;https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit&quot;&gt;https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;项目介绍网站：&lt;a href=&quot;http://materialdesigninxaml.net/&quot;&gt;http://materialdesigninxaml.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、添加MaterialDesignThemes包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/319628/202004/319628-20200409215702311-1512410272.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、编辑App.xaml添加资源 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全局引入MaterialDesign的资源文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('99965a65-a706-4316-a58a-8d51cbd67edc')&quot; readability=&quot;38.5&quot;&gt;&lt;img id=&quot;code_img_closed_99965a65-a706-4316-a58a-8d51cbd67edc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_99965a65-a706-4316-a58a-8d51cbd67edc&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('99965a65-a706-4316-a58a-8d51cbd67edc',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_99965a65-a706-4316-a58a-8d51cbd67edc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;prism:PrismApplication
    &lt;/span&gt;&lt;span&gt;x:Class&lt;/span&gt;&lt;span&gt;=&quot;WpfMaterial.Core.App&quot;&lt;/span&gt;&lt;span&gt;
    xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:x&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:local&lt;/span&gt;&lt;span&gt;=&quot;clr-namespace:WpfMaterial.Core&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:prism&lt;/span&gt;&lt;span&gt;=&quot;http://prismlibrary.com/&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Application.Resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ResourceDictionary&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ResourceDictionary.MergedDictionaries&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ResourceDictionary &lt;/span&gt;&lt;span&gt;Source&lt;/span&gt;&lt;span&gt;=&quot;pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ResourceDictionary &lt;/span&gt;&lt;span&gt;Source&lt;/span&gt;&lt;span&gt;=&quot;pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ResourceDictionary &lt;/span&gt;&lt;span&gt;Source&lt;/span&gt;&lt;span&gt;=&quot;pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Indigo.xaml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ResourceDictionary &lt;/span&gt;&lt;span&gt;Source&lt;/span&gt;&lt;span&gt;=&quot;pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ResourceDictionary.MergedDictionaries&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ResourceDictionary&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Application.Resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;prism:PrismApplication&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3、配置MaterialDesign参照和字体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;添加命名空间和字体(字体对图标显示很重要)，这样就可以使用它里面的控件了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2b9f70e2-e994-4a33-b3e2-864a55791c86')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2b9f70e2-e994-4a33-b3e2-864a55791c86&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2b9f70e2-e994-4a33-b3e2-864a55791c86&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2b9f70e2-e994-4a33-b3e2-864a55791c86',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2b9f70e2-e994-4a33-b3e2-864a55791c86&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Window
    &lt;/span&gt;&lt;span&gt;x:Class&lt;/span&gt;&lt;span&gt;=&quot;WpfMaterial.Core.Views.MainWindow&quot;&lt;/span&gt;&lt;span&gt;
    xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:x&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:materialDesign&lt;/span&gt;&lt;span&gt;=&quot;http://materialdesigninxaml.net/winfx/xaml/themes&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:prism&lt;/span&gt;&lt;span&gt;=&quot;http://prismlibrary.com/&quot;&lt;/span&gt;&lt;span&gt;
    Title&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Title}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    Width&lt;/span&gt;&lt;span&gt;=&quot;525&quot;&lt;/span&gt;&lt;span&gt;
    Height&lt;/span&gt;&lt;span&gt;=&quot;350&quot;&lt;/span&gt;&lt;span&gt;
    prism:ViewModelLocator.AutoWireViewModel&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;
    Background&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource MaterialDesignPaper}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    FontFamily&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource MaterialDesignFont}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;materialDesign:Card &lt;/span&gt;&lt;span&gt;Margin&lt;/span&gt;&lt;span&gt;=&quot;16&quot;&lt;/span&gt;&lt;span&gt; Padding&lt;/span&gt;&lt;span&gt;=&quot;32&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource MaterialDesignTitleTextBlock}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;My First Material Design App&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;TextBlock&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;materialDesign:Card&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Window&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;卡片效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/319628/202004/319628-20200409220921460-1585848710.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、使用MaterialDesign&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景一：登录界面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单又美丽，图标都是MaterialDesign自带的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/319628/202004/319628-20200409221945653-1348588356.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;相关代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3c6449df-1aed-4c95-a714-90a8593d46e8')&quot; readability=&quot;40&quot;&gt;&lt;img id=&quot;code_img_closed_3c6449df-1aed-4c95-a714-90a8593d46e8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3c6449df-1aed-4c95-a714-90a8593d46e8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3c6449df-1aed-4c95-a714-90a8593d46e8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3c6449df-1aed-4c95-a714-90a8593d46e8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;materialDesign:Card
            &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;425&quot;&lt;/span&gt;&lt;span&gt;
            Height&lt;/span&gt;&lt;span&gt;=&quot;350&quot;&lt;/span&gt;&lt;span&gt;
            Margin&lt;/span&gt;&lt;span&gt;=&quot;16&quot;&lt;/span&gt;&lt;span&gt;
            Padding&lt;/span&gt;&lt;span&gt;=&quot;32&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid.RowDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid.RowDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;*&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock
                    &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;
                    Grid.ColumnSpan&lt;/span&gt;&lt;span&gt;=&quot;4&quot;&lt;/span&gt;&lt;span&gt;
                    Margin&lt;/span&gt;&lt;span&gt;=&quot;20&quot;&lt;/span&gt;&lt;span&gt;
                    HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt;
                    FontSize&lt;/span&gt;&lt;span&gt;=&quot;28&quot;&lt;/span&gt;&lt;span&gt;
                    Text&lt;/span&gt;&lt;span&gt;=&quot;Login&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;materialDesign:PackIcon
                    &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;
                    Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;
                    Width&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt;&lt;span&gt;
                    Height&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt;&lt;span&gt;
                    Margin&lt;/span&gt;&lt;span&gt;=&quot;30,15,10,15&quot;&lt;/span&gt;&lt;span&gt;
                    VerticalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt;
                    Kind&lt;/span&gt;&lt;span&gt;=&quot;Account&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox
                    &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;
                    Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;
                    Margin&lt;/span&gt;&lt;span&gt;=&quot;0,10,30,10&quot;&lt;/span&gt;&lt;span&gt;
                    materialDesign:HintAssist.Hint&lt;/span&gt;&lt;span&gt;=&quot;用户名&quot;&lt;/span&gt;&lt;span&gt;
                    Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource MaterialDesignFloatingHintTextBox}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;materialDesign:PackIcon
                    &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt;
                    Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;
                    Width&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt;&lt;span&gt;
                    Height&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt;&lt;span&gt;
                    Margin&lt;/span&gt;&lt;span&gt;=&quot;30,15,10,15&quot;&lt;/span&gt;&lt;span&gt;
                    VerticalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt;
                    Kind&lt;/span&gt;&lt;span&gt;=&quot;Key&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PasswordBox
                    &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt;
                    Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;
                    Margin&lt;/span&gt;&lt;span&gt;=&quot;0,10,30,10&quot;&lt;/span&gt;&lt;span&gt;
                    materialDesign:HintAssist.Hint&lt;/span&gt;&lt;span&gt;=&quot;密码&quot;&lt;/span&gt;&lt;span&gt;
                    Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource MaterialDesignFloatingHintPasswordBox}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Button
                    &lt;/span&gt;&lt;span&gt;Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;4&quot;&lt;/span&gt;&lt;span&gt;
                    Grid.ColumnSpan&lt;/span&gt;&lt;span&gt;=&quot;4&quot;&lt;/span&gt;&lt;span&gt;
                    Height&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;
                    Margin&lt;/span&gt;&lt;span&gt;=&quot;40,20,40,25&quot;&lt;/span&gt;&lt;span&gt;
                    Content&lt;/span&gt;&lt;span&gt;=&quot;登录&quot;&lt;/span&gt;&lt;span&gt;
                    FontSize&lt;/span&gt;&lt;span&gt;=&quot;20&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;materialDesign:Card&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;场景二：列表界面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常见使用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/319628/202004/319628-20200409225300788-1641630169.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;相关代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c1a1b7d3-162a-4a8c-8cda-e2a3e25ba6b8')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_c1a1b7d3-162a-4a8c-8cda-e2a3e25ba6b8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c1a1b7d3-162a-4a8c-8cda-e2a3e25ba6b8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c1a1b7d3-162a-4a8c-8cda-e2a3e25ba6b8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c1a1b7d3-162a-4a8c-8cda-e2a3e25ba6b8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Window
    &lt;/span&gt;&lt;span&gt;x:Class&lt;/span&gt;&lt;span&gt;=&quot;WpfMaterial.Core.Views.ListView&quot;&lt;/span&gt;&lt;span&gt;
    xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:x&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:materialDesign&lt;/span&gt;&lt;span&gt;=&quot;http://materialdesigninxaml.net/winfx/xaml/themes&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:prism&lt;/span&gt;&lt;span&gt;=&quot;http://prismlibrary.com/&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:vm&lt;/span&gt;&lt;span&gt;=&quot;clr-namespace:WpfMaterial.Core.ViewModels&quot;&lt;/span&gt;&lt;span&gt;
    Background&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource MaterialDesignPaper}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    FontFamily&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource MaterialDesignFont}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    FontSize&lt;/span&gt;&lt;span&gt;=&quot;16&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Window.DataContext&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;vm:ListViewViewModel &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Window.DataContext&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Window.Resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style
            &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;CrudIsSelectedCheckBoxStyle&quot;&lt;/span&gt;&lt;span&gt;
            BasedOn&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource {x:Type CheckBox}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type CheckBox}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;HorizontalAlignment&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;VerticalAlignment&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style
            &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;CrudDataGridColumnHeaderStyle&quot;&lt;/span&gt;&lt;span&gt;
            BasedOn&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource {x:Type DataGridColumnHeader}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type DataGridColumnHeader}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Background&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource PrimaryHueMidBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;BorderBrush&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;LightGray&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;BorderThickness&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsEnabled&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Padding&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Height&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Foreground&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource PrimaryHueMidForegroundBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style
            &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;CrudDataGridRowHeaderStyle&quot;&lt;/span&gt;&lt;span&gt;
            BasedOn&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource {x:Type DataGridRowHeader}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type DataGridRowHeader}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;BorderThickness&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Width&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style
            &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;CrudDataGridRowStyle&quot;&lt;/span&gt;&lt;span&gt;
            BasedOn&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource {x:Type DataGridRow}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type DataGridRow}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;VerticalContentAlignment&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Stretch&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Height&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsSelected&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Background&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource PrimaryHueLightBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Foreground&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource PrimaryHueLightForegroundBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style
            &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;CrudDataGridCellStyle&quot;&lt;/span&gt;&lt;span&gt;
            BasedOn&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource {x:Type DataGridCell}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type DataGridCell}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Foreground&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource PrimaryHueLightForegroundBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;BorderBrush&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;LightGray&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;BorderThickness&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Padding&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsSelected&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Background&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource PrimaryHueLightBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Foreground&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource PrimaryHueLightForegroundBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;BorderBrush&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;LightGray&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style
            &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;CrudEditButtonStyle&quot;&lt;/span&gt;&lt;span&gt;
            BasedOn&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource MaterialDesignFlatButton}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type Button}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;HorizontalAlignment&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Cursor&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Hand&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;ToolTip&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;编辑&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Content&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;编辑&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Window.Resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGrid
            &lt;/span&gt;&lt;span&gt;Margin&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt;
            AutoGenerateColumns&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;
            CanUserAddRows&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;
            CanUserDeleteRows&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;
            CanUserResizeColumns&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;
            CanUserResizeRows&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;
            CellStyle&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource CrudDataGridCellStyle}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ColumnHeaderStyle&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource CrudDataGridColumnHeaderStyle}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ItemsSource&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Items}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            RowHeaderStyle&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource CrudDataGridRowHeaderStyle}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            RowStyle&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource CrudDataGridRowStyle}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            SelectionMode&lt;/span&gt;&lt;span&gt;=&quot;Single&quot;&lt;/span&gt;&lt;span&gt;
            SelectionUnit&lt;/span&gt;&lt;span&gt;=&quot;FullRow&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGrid.Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn.CellTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;CheckBox &lt;/span&gt;&lt;span&gt;IsChecked&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Selected, Mode=TwoWay}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource CrudIsSelectedCheckBoxStyle}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn.CellTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGridTextColumn
                    &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;*&quot;&lt;/span&gt;&lt;span&gt;
                    Binding&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    Header&lt;/span&gt;&lt;span&gt;=&quot;姓名&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGridTextColumn
                    &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt;&lt;span&gt;
                    Binding&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Age}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    Header&lt;/span&gt;&lt;span&gt;=&quot;年龄&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt;&lt;span&gt; Header&lt;/span&gt;&lt;span&gt;=&quot;编辑&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn.CellTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Button &lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource CrudEditButtonStyle}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;materialDesign:PackIcon &lt;/span&gt;&lt;span&gt;Kind&lt;/span&gt;&lt;span&gt;=&quot;Edit&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn.CellTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataGrid.Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataGrid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Window&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;场景三：消息界面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编辑弹出框&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/319628/202004/319628-20200409231443418-76835274.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;相关代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7cc1f69b-9a5d-46d1-b673-bea38268c1cf')&quot; readability=&quot;40.5&quot;&gt;&lt;img id=&quot;code_img_closed_7cc1f69b-9a5d-46d1-b673-bea38268c1cf&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7cc1f69b-9a5d-46d1-b673-bea38268c1cf&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7cc1f69b-9a5d-46d1-b673-bea38268c1cf',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7cc1f69b-9a5d-46d1-b673-bea38268c1cf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Window
    &lt;/span&gt;&lt;span&gt;x:Class&lt;/span&gt;&lt;span&gt;=&quot;WpfMaterial.Core.Views.ListView&quot;&lt;/span&gt;&lt;span&gt;
    xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:x&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:materialDesign&lt;/span&gt;&lt;span&gt;=&quot;http://materialdesigninxaml.net/winfx/xaml/themes&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:prism&lt;/span&gt;&lt;span&gt;=&quot;http://prismlibrary.com/&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:system&lt;/span&gt;&lt;span&gt;=&quot;clr-namespace:System;assembly=mscorlib&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:vm&lt;/span&gt;&lt;span&gt;=&quot;clr-namespace:WpfMaterial.Core.ViewModels&quot;&lt;/span&gt;&lt;span&gt;
    Background&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource MaterialDesignPaper}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    FontFamily&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource MaterialDesignFont}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    FontSize&lt;/span&gt;&lt;span&gt;=&quot;16&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Window.DataContext&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;vm:ListViewViewModel &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Window.DataContext&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Window.Resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style
            &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;CrudIsSelectedCheckBoxStyle&quot;&lt;/span&gt;&lt;span&gt;
            BasedOn&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource {x:Type CheckBox}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type CheckBox}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;HorizontalAlignment&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;VerticalAlignment&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style
            &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;CrudDataGridColumnHeaderStyle&quot;&lt;/span&gt;&lt;span&gt;
            BasedOn&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource {x:Type DataGridColumnHeader}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type DataGridColumnHeader}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Background&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource PrimaryHueMidBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;BorderBrush&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;LightGray&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;BorderThickness&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsEnabled&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Padding&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Height&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Foreground&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource PrimaryHueMidForegroundBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style
            &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;CrudDataGridRowHeaderStyle&quot;&lt;/span&gt;&lt;span&gt;
            BasedOn&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource {x:Type DataGridRowHeader}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type DataGridRowHeader}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;BorderThickness&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Width&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style
            &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;CrudDataGridRowStyle&quot;&lt;/span&gt;&lt;span&gt;
            BasedOn&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource {x:Type DataGridRow}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type DataGridRow}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;VerticalContentAlignment&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Stretch&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Height&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsSelected&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Background&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource PrimaryHueLightBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Foreground&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource PrimaryHueLightForegroundBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style
            &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;CrudDataGridCellStyle&quot;&lt;/span&gt;&lt;span&gt;
            BasedOn&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource {x:Type DataGridCell}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type DataGridCell}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Foreground&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource PrimaryHueLightForegroundBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;BorderBrush&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;LightGray&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;BorderThickness&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Padding&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsSelected&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Background&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource PrimaryHueLightBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Foreground&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource PrimaryHueLightForegroundBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;BorderBrush&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;LightGray&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style
            &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;CrudEditButtonStyle&quot;&lt;/span&gt;&lt;span&gt;
            BasedOn&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource MaterialDesignFlatButton}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type Button}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;HorizontalAlignment&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Cursor&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Hand&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;ToolTip&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;编辑&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Content&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;编辑&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Window.Resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;materialDesign:DialogHost &lt;/span&gt;&lt;span&gt;DialogMargin&lt;/span&gt;&lt;span&gt;=&quot;8&quot;&lt;/span&gt;&lt;span&gt; Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource MaterialDesignEmbeddedDialogHost}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;materialDesign:DialogHost.DialogContent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;StackPanel &lt;/span&gt;&lt;span&gt;Margin&lt;/span&gt;&lt;span&gt;=&quot;20&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock
                    &lt;/span&gt;&lt;span&gt;FontSize&lt;/span&gt;&lt;span&gt;=&quot;20&quot;&lt;/span&gt;&lt;span&gt;
                    FontWeight&lt;/span&gt;&lt;span&gt;=&quot;Bold&quot;&lt;/span&gt;&lt;span&gt;
                    Text&lt;/span&gt;&lt;span&gt;=&quot;添加用户&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox
                    &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt;&lt;span&gt;
                    Margin&lt;/span&gt;&lt;span&gt;=&quot;0,8,0,0&quot;&lt;/span&gt;&lt;span&gt;
                    HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Stretch&quot;&lt;/span&gt;&lt;span&gt;
                    materialDesign:HintAssist.Hint&lt;/span&gt;&lt;span&gt;=&quot;姓名&quot;&lt;/span&gt;&lt;span&gt;
                    Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource MaterialDesignFloatingHintTextBox}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox
                    &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt;&lt;span&gt;
                    Margin&lt;/span&gt;&lt;span&gt;=&quot;0,8,0,0&quot;&lt;/span&gt;&lt;span&gt;
                    HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Stretch&quot;&lt;/span&gt;&lt;span&gt;
                    materialDesign:HintAssist.Hint&lt;/span&gt;&lt;span&gt;=&quot;年龄&quot;&lt;/span&gt;&lt;span&gt;
                    Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource MaterialDesignFloatingHintTextBox}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;StackPanel &lt;/span&gt;&lt;span&gt;HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Right&quot;&lt;/span&gt;&lt;span&gt; Orientation&lt;/span&gt;&lt;span&gt;=&quot;Horizontal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Button
                        &lt;/span&gt;&lt;span&gt;Margin&lt;/span&gt;&lt;span&gt;=&quot;0,8,8,0&quot;&lt;/span&gt;&lt;span&gt;
                        Command&lt;/span&gt;&lt;span&gt;=&quot;materialDesign:DialogHost.CloseDialogCommand&quot;&lt;/span&gt;&lt;span&gt;
                        IsDefault&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;
                        Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource MaterialDesignFlatButton}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Button.CommandParameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;system:Boolean &lt;/span&gt;&lt;span&gt;xmlns:system&lt;/span&gt;&lt;span&gt;=&quot;clr-namespace:System;assembly=mscorlib&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                                True
                            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;system:Boolean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Button.CommandParameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                        确定
                    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Button
                        &lt;/span&gt;&lt;span&gt;Margin&lt;/span&gt;&lt;span&gt;=&quot;0,8,8,0&quot;&lt;/span&gt;&lt;span&gt;
                        Command&lt;/span&gt;&lt;span&gt;=&quot;materialDesign:DialogHost.CloseDialogCommand&quot;&lt;/span&gt;&lt;span&gt;
                        IsCancel&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;
                        Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource MaterialDesignFlatButton}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Button.CommandParameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;system:Boolean &lt;/span&gt;&lt;span&gt;xmlns:system&lt;/span&gt;&lt;span&gt;=&quot;clr-namespace:System;assembly=mscorlib&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                                False
                            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;system:Boolean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Button.CommandParameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                        取消
                    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;StackPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;StackPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;materialDesign:DialogHost.DialogContent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGrid
                &lt;/span&gt;&lt;span&gt;Margin&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt;
                AutoGenerateColumns&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;
                CanUserAddRows&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;
                CanUserDeleteRows&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;
                CanUserResizeColumns&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;
                CanUserResizeRows&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;
                CellStyle&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource CrudDataGridCellStyle}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                ColumnHeaderStyle&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource CrudDataGridColumnHeaderStyle}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                ItemsSource&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Items}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                RowHeaderStyle&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource CrudDataGridRowHeaderStyle}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                RowStyle&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource CrudDataGridRowStyle}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                SelectionMode&lt;/span&gt;&lt;span&gt;=&quot;Single&quot;&lt;/span&gt;&lt;span&gt;
                SelectionUnit&lt;/span&gt;&lt;span&gt;=&quot;FullRow&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGrid.Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn.CellTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;CheckBox &lt;/span&gt;&lt;span&gt;IsChecked&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Selected, Mode=TwoWay}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource CrudIsSelectedCheckBoxStyle}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn.CellTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGridTextColumn
                        &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;*&quot;&lt;/span&gt;&lt;span&gt;
                        Binding&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        Header&lt;/span&gt;&lt;span&gt;=&quot;姓名&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGridTextColumn
                        &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt;&lt;span&gt;
                        Binding&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Age}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        Header&lt;/span&gt;&lt;span&gt;=&quot;年龄&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt;&lt;span&gt; Header&lt;/span&gt;&lt;span&gt;=&quot;编辑&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn.CellTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Button &lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource CrudEditButtonStyle}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;materialDesign:PackIcon &lt;/span&gt;&lt;span&gt;Kind&lt;/span&gt;&lt;span&gt;=&quot;Edit&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn.CellTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataGridTemplateColumn&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataGrid.Columns&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataGrid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Button
                &lt;/span&gt;&lt;span&gt;Margin&lt;/span&gt;&lt;span&gt;=&quot;0,0,28,20&quot;&lt;/span&gt;&lt;span&gt;
                HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Right&quot;&lt;/span&gt;&lt;span&gt;
                VerticalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Bottom&quot;&lt;/span&gt;&lt;span&gt;
                Command&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Static materialDesign:DialogHost.OpenDialogCommand}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource MaterialDesignFloatingActionMiniAccentButton}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;materialDesign:PackIcon
                    &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;22&quot;&lt;/span&gt;&lt;span&gt;
                    Height&lt;/span&gt;&lt;span&gt;=&quot;22&quot;&lt;/span&gt;&lt;span&gt;
                    Kind&lt;/span&gt;&lt;span&gt;=&quot;Plus&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;materialDesign:DialogHost&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Window&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;以上效果有没有觉得很炫，用MaterialDesign设计界面简单又美观，这也是我推荐的原因。&lt;/p&gt;
&lt;p&gt;其他显示效果可以参考Github上的模拟程序：&lt;a href=&quot;https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit/releases&quot;&gt;https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/319628/202004/319628-20200409231809631-1749533474.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 模拟程序主题配色一览如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/319628/202004/319628-20200410001825388-1152507182.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 09 Apr 2020 16:20:00 +0000</pubDate>
<dc:creator>走遍江湖</dc:creator>
<og:description>总共分三个部分：基础篇主要争对C#初学者，巩固C#常用知识点；中级篇主要争对WPF布局与MaterialDesign设计美化，在减轻代码量的情况做出漂亮的应用；终极篇为框架应用实战，包含MVVM框架P</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/lixiaobin/p/wpfdevreportdesign.html</dc:identifier>
</item>
<item>
<title>基于Quartz编写一个可复用的分布式调度任务管理WebUI组件 - throwable</title>
<link>http://www.cnblogs.com/throwable/p/12670693.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/throwable/p/12670693.html</guid>
<description>&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;创业小团队，无论选择任何方案，都优先考虑节省成本。关于分布式定时调度框架，成熟的候选方案有&lt;code&gt;XXL-JOB&lt;/code&gt;、&lt;code&gt;Easy Scheduler&lt;/code&gt;、&lt;code&gt;Light Task Scheduler&lt;/code&gt;和&lt;code&gt;Elastic Job&lt;/code&gt;等等，其实这些之前都在生产环境使用过。但是想要搭建高可用的分布式调度平台，这些框架（无论是否去中心化）都需要额外的服务器资源去部署中心调度管理服务实例，甚至有时候还会依赖一些中间件如&lt;code&gt;Zookeeper&lt;/code&gt;。回想之前花过一段时间看&lt;code&gt;Quartz&lt;/code&gt;的源码去分析它的线程模型，想到了它可以基于&lt;code&gt;MySQL&lt;/code&gt;，通过一个不是很推荐的&lt;code&gt;X&lt;/code&gt;锁方案（&lt;code&gt;SELECT FOR UPDATE&lt;/code&gt;加锁）实现服务集群中单个触发器只有一个节点（加锁成功的那个节点）能够执行，这样子，就能够仅仅依赖于现有的&lt;code&gt;MySQL&lt;/code&gt;实例资源实现分布式调度任务管理。一般来说，有关系型数据保存需求的业务应用都会有自己的&lt;code&gt;MySQL&lt;/code&gt;实例，这样子就能几乎零成本引入一个分布式调度管理模块。某个加班的周六下午敲定了初步方案之后，花了几个小时把这个轮子造出来了，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202004/b-o-q-w-ui-0.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;方案设计&quot;&gt;方案设计&lt;/h2&gt;
&lt;p&gt;先说说用到的所有依赖：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Uikit&lt;/code&gt;：选用的前端的一个轻量级的&lt;code&gt;UI&lt;/code&gt;框架，主要是考虑到轻量、文档和组件相对齐全。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JQuery&lt;/code&gt;：选用&lt;code&gt;js&lt;/code&gt;框架，原因只有一个：简单。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Freemarker&lt;/code&gt;：模板引擎，主观上比&lt;code&gt;Jsp&lt;/code&gt;和&lt;code&gt;Thymeleaf&lt;/code&gt;好用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Quartz&lt;/code&gt;：工业级调度器。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;项目的依赖如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.quartz-scheduler&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;quartz&amp;lt;/artifactId&amp;gt;
        &amp;lt;exclusions&amp;gt;
            &amp;lt;exclusion&amp;gt;
                &amp;lt;groupId&amp;gt;com.zaxxer&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;HikariCP-java7&amp;lt;/artifactId&amp;gt;
            &amp;lt;/exclusion&amp;gt;
        &amp;lt;/exclusions&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;
        &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-context-support&amp;lt;/artifactId&amp;gt;
        &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt;
        &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-freemarker&amp;lt;/artifactId&amp;gt;
        &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;com.zaxxer&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;HikariCP&amp;lt;/artifactId&amp;gt;
        &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Uikit&lt;/code&gt;和&lt;code&gt;JQuery&lt;/code&gt;可以直接使用现成的&lt;code&gt;CDN&lt;/code&gt;即可：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/uikit@3.2.2/dist/css/uikit.min.css&quot;/&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/uikit@3.2.2/dist/js/uikit.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/uikit@3.2.2/dist/js/uikit-icons.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;表设计&quot;&gt;表设计&lt;/h2&gt;
&lt;p&gt;引入了&lt;code&gt;Quartz&lt;/code&gt;的依赖后，在它的&lt;code&gt;org.quartz.impl.jdbcjobstore&lt;/code&gt;包下可以看到一系列的&lt;code&gt;DDL&lt;/code&gt;，一般使用&lt;code&gt;MySQL&lt;/code&gt;的场景下关注&lt;code&gt;tables_mysql.sql&lt;/code&gt;和&lt;code&gt;tables_mysql_innodb.sql&lt;/code&gt;两个文件即可，笔者所在团队的开发规范&lt;code&gt;MySQL&lt;/code&gt;的引擎必须选择&lt;code&gt;innodb&lt;/code&gt;，所以选用了后者。&lt;/p&gt;
&lt;p&gt;应用中的定时任务信息应该单独拎出来管理，方便提供统一的查询和更变&lt;code&gt;API&lt;/code&gt;。值得注意的是，&lt;code&gt;Quartz&lt;/code&gt;内建的表使用了大量的外键，所以&lt;strong&gt;尽量通过&lt;code&gt;Quartz&lt;/code&gt;提供的&lt;code&gt;API&lt;/code&gt;去增删改它内建表的内容&lt;/strong&gt;，切勿手动操作，否则可能会引发各种意想不到的故障。&lt;/p&gt;
&lt;p&gt;引入的两个新的表包括调度任务表&lt;code&gt;schedule_task&lt;/code&gt;和调度任务参数表&lt;code&gt;schedule_task_parameter&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE `schedule_task`
(
    `id`               BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT '主键',
    `creator`          VARCHAR(16)     NOT NULL DEFAULT 'admin' COMMENT '创建人',
    `editor`           VARCHAR(16)     NOT NULL DEFAULT 'admin' COMMENT '修改人',
    `create_time`      DATETIME        NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    `edit_time`        DATETIME        NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
    `version`          BIGINT          NOT NULL DEFAULT 1 COMMENT '版本号',
    `deleted`          TINYINT         NOT NULL DEFAULT 0 COMMENT '软删除标识',
    `task_id`          VARCHAR(64)     NOT NULL COMMENT '任务标识',
    `task_class`       VARCHAR(256)    NOT NULL COMMENT '任务类',
    `task_type`        VARCHAR(16)     NOT NULL COMMENT '任务类型,CRON,SIMPLE',
    `task_group`       VARCHAR(32)     NOT NULL DEFAULT 'DEFAULT' COMMENT '任务分组',
    `task_expression`  VARCHAR(256)    NOT NULL COMMENT '任务表达式',
    `task_description` VARCHAR(256) COMMENT '任务描述',
    `task_status`      TINYINT         NOT NULL DEFAULT 0 COMMENT '任务状态',
    UNIQUE uniq_task_class_task_group (`task_class`, `task_group`),
    UNIQUE uniq_task_id (`task_id`)
) COMMENT '调度任务';

CREATE TABLE `schedule_task_parameter`
(
    `id`              BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT '主键',
    `task_id`         VARCHAR(64)     NOT NULL COMMENT '任务标识',
    `parameter_value` VARCHAR(1024)   NOT NULL COMMENT '参数值',
    UNIQUE uniq_task_id (`task_id`)
) COMMENT '调度任务参数';
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数统一用&lt;code&gt;JSON&lt;/code&gt;字符串存放，所以一个调度任务实体对应0或者1个调度任务参数实体。这里没有考虑多个应用使用同一个数据源的问题，其实这个问题应该考虑基于不同的&lt;code&gt;org.quartz.jobStore.tablePrefix&lt;/code&gt;实现隔离，也就是不同的应用如果共库，或者每个应用的&lt;code&gt;Quartz&lt;/code&gt;使用不同的表前缀区分，或者单独抽离所有调度任务到同一个应用中。&lt;/p&gt;
&lt;h2 id=&quot;quartz的工作模式&quot;&gt;Quartz的工作模式&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Quartz&lt;/code&gt;在设计调度模型的时候实际上是对触发器&lt;code&gt;Trigger&lt;/code&gt;进行调度，一般在调度对应的任务&lt;code&gt;Job&lt;/code&gt;的时候，需要绑定触发器和该被调度的任务实例，然后当触发器到了触发时间点的时候就会被激发，接着回调该触发器关联的&lt;code&gt;Job&lt;/code&gt;实例的&lt;code&gt;execute()&lt;/code&gt;方法。可以简单理解为触发器和&lt;code&gt;Job&lt;/code&gt;实例是多对多的关系。简单来看就是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202004/b-o-q-w-ui-1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了实现这个多对多的关系，&lt;code&gt;Quartz&lt;/code&gt;为&lt;code&gt;Job&lt;/code&gt;（实际上是&lt;code&gt;JobDetail&lt;/code&gt;）和&lt;code&gt;Trigger&lt;/code&gt;分别定义了&lt;code&gt;JobKey&lt;/code&gt;和&lt;code&gt;TriggerKey&lt;/code&gt;用于作为两者的唯一标识。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;TriggerKey -&amp;gt; [name, group]
JobKey -&amp;gt; [name, group]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了降低维护成本，笔者把这个多对多的绑定关系强制约束为一对一，并且把&lt;code&gt;TriggerKey&lt;/code&gt;和&lt;code&gt;JobKey&lt;/code&gt;同化如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;JobKey,TriggerKey -&amp;gt; [jobClassName, ${spring.application.name} || applicationName]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实际上，调度相关的大部分工作都是委托给&lt;code&gt;org.quartz.Scheduler&lt;/code&gt;完成，举下例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public interface Scheduler {
    ......省略无关的代码......
    // 添加调度任务 - 包括任务内容和触发器
    void scheduleJob(JobDetail jobDetail, Set&amp;lt;? extends Trigger&amp;gt; triggersForJob, boolean replace) throws SchedulerException;

    // 移除触发器
    boolean unscheduleJob(TriggerKey triggerKey) throws SchedulerException;
    
    // 移除任务内容
    boolean deleteJob(JobKey jobKey) throws SchedulerException;
    ......省略无关的代码......
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;笔者要做的，就是通过&lt;code&gt;schedule_task&lt;/code&gt;表管理服务的定时任务，通过&lt;code&gt;org.quartz.Scheduler&lt;/code&gt;提供的&lt;code&gt;API&lt;/code&gt;把任务的具体操作移交给&lt;code&gt;Quartz&lt;/code&gt;，并且添加一些扩展功能。这个模块已经被封装为一个轻量级的框架，命名为&lt;code&gt;quartz-web-ui-kit&lt;/code&gt;，下称&lt;code&gt;kit&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;kit核心逻辑分析&quot;&gt;kit核心逻辑分析&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;kit&lt;/code&gt;的所有核心功能都封装在模块&lt;code&gt;quartz-web-ui-kit-core&lt;/code&gt;中，主要功能包括：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202004/b-o-q-w-ui-2.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;WebUI&lt;/code&gt;部分是通过&lt;code&gt;Freemarker&lt;/code&gt;、&lt;code&gt;JQuery&lt;/code&gt;和&lt;code&gt;Uikit&lt;/code&gt;简单编写出来，主要包括三个页面：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;templates
  - common/script.ftl 公共脚本
  - task-add.ftl  添加新任务页面
  - task-edit.ftl 编辑任务页面
  - task-list.ftl 任务列表
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;调度任务管理的核心方法是&lt;code&gt;QuartzWebUiKitService#refreshScheduleTask()&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
@Autowired
private Scheduler scheduler;

public void refreshScheduleTask(ScheduleTask task,
                                Trigger oldTrigger,
                                TriggerKey triggerKey,
                                Trigger newTrigger) throws Exception {
    JobDataMap jobDataMap = prepareJobDataMap(task);
    JobDetail jobDetail =
            JobBuilder.newJob((Class&amp;lt;? extends Job&amp;gt;) Class.forName(task.getTaskClass()))
                    .withIdentity(task.getTaskClass(), task.getTaskGroup())
                    .usingJobData(jobDataMap)
                    .build();
    // 总是覆盖
    if (ScheduleTaskStatus.ONLINE == ScheduleTaskStatus.fromType(task.getTaskStatus())) {
        scheduler.scheduleJob(jobDetail, Collections.singleton(newTrigger), Boolean.TRUE);
    } else {
        if (null != oldTrigger) {
            scheduler.unscheduleJob(triggerKey);
        }
    }
}

private JobDataMap prepareJobDataMap(ScheduleTask task) {
    JobDataMap jobDataMap = new JobDataMap();
    jobDataMap.put(&quot;scheduleTask&quot;, JsonUtils.X.format(task));
    ScheduleTaskParameter taskParameter = scheduleTaskParameterDao.selectByTaskId(task.getTaskId());
    if (null != taskParameter) {
        Map&amp;lt;String, Object&amp;gt; parameterMap = JsonUtils.X.parse(taskParameter.getParameterValue(),
                new TypeReference&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt;() {
                });
        jobDataMap.putAll(parameterMap);
    }
    return jobDataMap;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实是任意任务触发或者变动，都直接覆盖对应的&lt;code&gt;JobDetail&lt;/code&gt;和&lt;code&gt;Trigger&lt;/code&gt;，这样就能保证调度任务内容和触发器都是全新的，下一轮调度就会生效。&lt;/p&gt;
&lt;p&gt;任务类被抽象为&lt;code&gt;AbstractScheduleTask&lt;/code&gt;，这个类承载了任务执行和大量的扩展功能：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@DisallowConcurrentExecution
public abstract class AbstractScheduleTask implements Job {

    protected Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired(required = false)
    private List&amp;lt;ScheduleTaskExecutionPostProcessor&amp;gt; processors;

    @Override
    public void execute(JobExecutionContext context) throws JobExecutionException {
        String scheduleTask = context.getMergedJobDataMap().getString(&quot;scheduleTask&quot;);
        ScheduleTask task = JsonUtils.X.parse(scheduleTask, ScheduleTask.class);
        ScheduleTaskInfo info = ScheduleTaskInfo.builder()
                .taskId(task.getTaskId())
                .taskClass(task.getTaskClass())
                .taskDescription(task.getTaskDescription())
                .taskExpression(task.getTaskExpression())
                .taskGroup(task.getTaskGroup())
                .taskType(task.getTaskType())
                .build();
        long start = System.currentTimeMillis();
        info.setStart(start);
        // 在MDC中添加traceId便于追踪调用链
        MappedDiagnosticContextAssistant.X.processInMappedDiagnosticContext(() -&amp;gt; {
            try {
                if (enableLogging()) {
                    logger.info(&quot;任务[{}]-[{}]-[{}]开始执行......&quot;, task.getTaskId(), task.getTaskClass(), task.getTaskDescription());
                }
                // 执行前的处理器回调
                processBeforeTaskExecution(info);
                // 子类实现的任务执行逻辑
                executeInternal(context);
                // 执行成功的处理器回调
                processAfterTaskExecution(info, ScheduleTaskExecutionStatus.SUCCESS);
            } catch (Exception e) {
                info.setThrowable(e);
                if (enableLogging()) {
                    logger.info(&quot;任务[{}]-[{}]-[{}]执行异常&quot;, task.getTaskId(), task.getTaskClass(),
                            task.getTaskDescription(), e);
                }
                // 执行异常的处理器回调
                processAfterTaskExecution(info, ScheduleTaskExecutionStatus.FAIL);
            } finally {
                long end = System.currentTimeMillis();
                long cost = end - start;
                info.setEnd(end);
                info.setCost(cost);
                if (enableLogging() &amp;amp;&amp;amp; null != info.getThrowable()) {
                    logger.info(&quot;任务[{}]-[{}]-[{}]执行完毕,耗时:{} ms......&quot;, task.getTaskId(), task.getTaskClass(),
                            task.getTaskDescription(), cost);
                }
                // 执行结束的处理器回调
                processAfterTaskCompletion(info);
            }
        });
    }

    protected boolean enableLogging() {
        return true;
    }

    /**
     * 内部执行方法 - 子类实现
     *
     * @param context context
     */
    protected abstract void executeInternal(JobExecutionContext context);

    /**
     * 拷贝任务信息
     */
    private ScheduleTaskInfo copyScheduleTaskInfo(ScheduleTaskInfo info) {
        return ScheduleTaskInfo.builder()
                .cost(info.getCost())
                .start(info.getStart())
                .end(info.getEnd())
                .throwable(info.getThrowable())
                .taskId(info.getTaskId())
                .taskClass(info.getTaskClass())
                .taskDescription(info.getTaskDescription())
                .taskExpression(info.getTaskExpression())
                .taskGroup(info.getTaskGroup())
                .taskType(info.getTaskType())
                .build();
    }
    
    // 任务执行之前回调
    void processBeforeTaskExecution(ScheduleTaskInfo info) {
        if (null != processors) {
            for (ScheduleTaskExecutionPostProcessor processor : processors) {
                processor.beforeTaskExecution(copyScheduleTaskInfo(info));
            }
        }
    }
    
    // 任务执行完毕时回调
    void processAfterTaskExecution(ScheduleTaskInfo info, ScheduleTaskExecutionStatus status) {
        if (null != processors) {
            for (ScheduleTaskExecutionPostProcessor processor : processors) {
                processor.afterTaskExecution(copyScheduleTaskInfo(info), status);
            }
        }
    }
    
    // 任务完结时回调
    void processAfterTaskCompletion(ScheduleTaskInfo info) {
        if (null != processors) {
            for (ScheduleTaskExecutionPostProcessor processor : processors) {
                processor.afterTaskCompletion(copyScheduleTaskInfo(info));
            }
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要执行的目标调度任务类只需要继承&lt;code&gt;AbstractScheduleTask&lt;/code&gt;即可获得这些功能。另外，调度任务后置处理器&lt;code&gt;ScheduleTaskExecutionPostProcessor&lt;/code&gt;参考了&lt;code&gt;Spring&lt;/code&gt;中的&lt;code&gt;BeanPostProcessor&lt;/code&gt;和&lt;code&gt;TransactionSynchronization&lt;/code&gt;的设计：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public interface ScheduleTaskExecutionPostProcessor {
    
    default void beforeTaskExecution(ScheduleTaskInfo info) {

    }

    default void afterTaskExecution(ScheduleTaskInfo info, ScheduleTaskExecutionStatus status) {

    }

    default void afterTaskCompletion(ScheduleTaskInfo info) {

    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过此后置处理器可以完成任务预警和任务执行日志持久化等各种功能。笔者通过&lt;code&gt;ScheduleTaskExecutionPostProcessor&lt;/code&gt;已经实现了内置的预警功能，抽象出一个预警策略接口&lt;code&gt;AlarmStrategy&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public interface AlarmStrategy {

    void process(ScheduleTaskInfo scheduleTaskInfo);
}

// 默认启用的实现是无预警策略
public class NoneAlarmStrategy implements AlarmStrategy {

    @Override
    public void process(ScheduleTaskInfo scheduleTaskInfo) {

    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过覆盖&lt;code&gt;AlarmStrategy&lt;/code&gt;的&lt;code&gt;Bean&lt;/code&gt;配置即可获得自定义的预警策略，如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@Slf4j
@Component
public class LoggingAlarmStrategy implements AlarmStrategy {

    @Override
    public void process(ScheduleTaskInfo scheduleTaskInfo) {
        if (null != scheduleTaskInfo.getThrowable()) {
            log.error(&quot;任务执行异常,任务内容:{}&quot;, JsonUtils.X.format(scheduleTaskInfo), scheduleTaskInfo.getThrowable());
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;笔者通过此接口的自定义现实，把所有的预警都打印到团队内部的钉钉群中，打印了任务的执行时间、状态以及耗时等等信息，一旦出现异常会及时&lt;code&gt;@&lt;/code&gt;所有人，便于及时监控任务的健康和后续的调优。&lt;/p&gt;
&lt;h2 id=&quot;使用kit项目&quot;&gt;使用kit项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;quartz-web-ui-kit&lt;/code&gt;的项目结构如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;quartz-web-ui-kit
  - quartz-web-ui-kit-core 核心包
  - h2-example H2数据库的演示例子
  - mysql-5.x-example MySQL5.x版本的演示例子
  - mysql-8.x-example MySQL8.x版本的演示例子
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果单纯想体验一下&lt;code&gt;kit&lt;/code&gt;的功能，那么直接下载此项目，启动&lt;code&gt;h2-example&lt;/code&gt;模块中的&lt;code&gt;club.throwable.h2.example.H2App&lt;/code&gt;，然后访问&lt;code&gt;http://localhost:8081/quartz/kit/task/list&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;基于&lt;code&gt;MySQL&lt;/code&gt;实例的应用，这里挑选目前用户比较多的&lt;code&gt;MySQL5.x&lt;/code&gt;的例子简单说明一下。因为轮子刚造好，没有经过时间的考验，暂时没上交到&lt;code&gt;Maven&lt;/code&gt;的仓库，这里需要进行手动编译：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;git clone https://github.com/zjcscut/quartz-web-ui-kit
cd quartz-web-ui-kit
mvn clean compile install
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;引入依赖（只需要引入&lt;code&gt;quartz-web-ui-kit-core&lt;/code&gt;，而且&lt;code&gt;quartz-web-ui-kit-core&lt;/code&gt;依赖于&lt;code&gt;spring-boot-starter-web&lt;/code&gt;、&lt;code&gt;spring-boot-starter-web&lt;/code&gt;、&lt;code&gt;spring-boot-starter-jdbc&lt;/code&gt;、&lt;code&gt;spring-boot-starter-freemarker&lt;/code&gt;和&lt;code&gt;HikariCP&lt;/code&gt;）：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;club.throwable&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quartz-web-ui-kit-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- 这个是必须，MySQL的驱动包 --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.1.48&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加一个配置实现&lt;code&gt;QuartzWebUiKitConfiguration&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@Configuration
public class QuartzWebUiKitConfiguration implements EnvironmentAware {

    private Environment environment;

    @Override
    public void setEnvironment(Environment environment) {
        this.environment = environment;
    }

    @Bean
    public QuartzWebUiKitPropertiesProvider quartzWebUiKitPropertiesProvider() {
        return () -&amp;gt; {
            QuartzWebUiKitProperties properties = new QuartzWebUiKitProperties();
            properties.setDriverClassName(environment.getProperty(&quot;spring.datasource.driver-class-name&quot;));
            properties.setUrl(environment.getProperty(&quot;spring.datasource.url&quot;));
            properties.setUsername(environment.getProperty(&quot;spring.datasource.username&quot;));
            properties.setPassword(environment.getProperty(&quot;spring.datasource.password&quot;));
            return properties;
        };
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里由于&lt;code&gt;quartz-web-ui-kit-core&lt;/code&gt;设计时候考虑到部分组件的加载顺序，使用了&lt;code&gt;ImportBeanDefinitionRegistrar&lt;/code&gt;钩子接口，所以无法通过&lt;code&gt;@Value&lt;/code&gt;或者&lt;code&gt;@Autowired&lt;/code&gt;实现属性注入，因为这两个注解的处理顺序比较靠后，如果用过&lt;code&gt;MyBatis&lt;/code&gt;的&lt;code&gt;MapperScannerConfigurer&lt;/code&gt;就会理解这里的问题。&lt;code&gt;quartz-web-ui-kit-core&lt;/code&gt;依赖中已经整理好一份&lt;code&gt;DDL&lt;/code&gt;脚本：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;scripts
  - quartz-h2.sql
  - quartz-web-ui-kit-h2-ddl.sql
  - quartz-mysql-innodb.sql
  - quartz-web-ui-kit-mysql-ddl.sql
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要提前在目标数据库执行&lt;code&gt;quartz-mysql-innodb.sql&lt;/code&gt;和&lt;code&gt;quartz-web-ui-kit-mysql-ddl.sql&lt;/code&gt;。一份相对标准的配置文件&lt;code&gt;application.properties&lt;/code&gt;如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-properties&quot;&gt;spring.application.name=mysql-5.x-example
server.port=8082
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# 这个local是本地提前建好的数据库
spring.datasource.url=jdbc:mysql://localhost:3306/local?characterEncoding=utf8&amp;amp;useUnicode=true&amp;amp;useSSL=false
spring.datasource.username=root
spring.datasource.password=root
# freemarker配置
spring.freemarker.template-loader-path=classpath:/templates/
spring.freemarker.cache=false
spring.freemarker.charset=UTF-8
spring.freemarker.check-template-location=true
spring.freemarker.content-type=text/html
spring.freemarker.expose-request-attributes=true
spring.freemarker.expose-session-attributes=true
spring.freemarker.request-context-attribute=request
spring.freemarker.suffix=.ftl
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后需要添加一个调度任务类，只需要继承&lt;code&gt;club.throwable.quartz.kit.support.AbstractScheduleTask&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@Slf4j
public class CronTask extends AbstractScheduleTask {

    @Override
    protected void executeInternal(JobExecutionContext context) {
        logger.info(&quot;CronTask触发,TriggerKey:{}&quot;, context.getTrigger().getKey().toString());
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接着启动&lt;code&gt;SpringBoot&lt;/code&gt;的启动类，然后访问&lt;code&gt;http://localhost:8082/quartz/kit/task/list&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202004/b-o-q-w-ui-3.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过左侧按钮添加一个定时任务：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202004/b-o-q-w-ui-4.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;目前的任务表达式支持两种类型：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;CRON&lt;/code&gt;表达式：格式是&lt;code&gt;cron=你的CRON表达式&lt;/code&gt;，如&lt;code&gt;cron=*/20 * * * * ?&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;简单的周期性执行表达式：格式是&lt;code&gt;intervalInMilliseconds=毫秒值&lt;/code&gt;，如&lt;code&gt;intervalInMilliseconds=10000&lt;/code&gt;，表示10000毫秒执行一次。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其他可选的参数有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;repeatCount&lt;/code&gt;：表示简单的周期性执行任务的重复次数，默认为&lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;startAt&lt;/code&gt;：任务首次执行的时间戳。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;关于任务表达式参数，没有考虑十分严格的校验，也没有做字符串的&lt;code&gt;trim&lt;/code&gt;处理，需要输入紧凑的符合约定格式的特定表达式，如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;cron=*/20 * * * * ?

intervalInMilliseconds=10000

intervalInMilliseconds=10000,repeatCount=10
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;调度任务还支持输入用户的自定义参数，目前简单约定为&lt;code&gt;JSON&lt;/code&gt;字符串，这个字符串最后会通过&lt;code&gt;Jackson&lt;/code&gt;进行一次处理，再存放到任务的&lt;code&gt;JobDataMap&lt;/code&gt;中，实际上会被&lt;code&gt;Quartz&lt;/code&gt;持久化到数据库中：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;{&quot;key&quot;:&quot;value&quot;}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样就能从&lt;code&gt;JobExecutionContext#getMergedJobDataMap()&lt;/code&gt;中获得，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@Slf4j
public class SimpleTask extends AbstractScheduleTask {

    @Override
    protected void executeInternal(JobExecutionContext context) {
        JobDataMap jobDataMap = context.getMergedJobDataMap();
        String value = jobDataMap.getString(&quot;key&quot;);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;
&lt;p&gt;关于&lt;code&gt;kit&lt;/code&gt;，有两点设计是笔者基于团队中维护的项目面对的场景做了特化处理：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;AbstractScheduleTask&lt;/code&gt;使用了&lt;code&gt;@DisallowConcurrentExecution&lt;/code&gt;注解，任务会禁用并发执行，也就是多节点的情况下，只会有一个服务节点在同一轮触发时间下进行任务调度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CRON&lt;/code&gt;类型的任务被禁用了&lt;code&gt;Misfire&lt;/code&gt;策略，也就是&lt;code&gt;CRON&lt;/code&gt;类型的任务如果错失了触发时机不会有任何操作（这一点可以了解一下&lt;code&gt;Quartz&lt;/code&gt;的&lt;code&gt;Misfire&lt;/code&gt;策略）。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;如果不能忍受这两点，切勿直接在生产中使用此工具包。&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;本文简单介绍了笔者通过&lt;code&gt;Quartz&lt;/code&gt;的加持造了一个轻量级分布式调度服务的轮子，起到了简单易用和节省成本的效果。不足的是，因为考虑到目前团队的项目中存在调度任务需求的服务都是内部的共享服务，笔者没有花很大的精力去完善鉴权、监控等模块，这里也是也是从目前遇到的业务场景考虑，如果引入过多的设计，就会演化成一个重量级的调度框架如&lt;code&gt;Elastic-Job&lt;/code&gt;，那样会违背了节省部署成本的初衷。&lt;/p&gt;
&lt;p&gt;（本文完 c-14-d e-a-20200410 最近太忙这个文章憋了很久......）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://public-1256189093.cos.ap-guangzhou.myqcloud.com/static/wechat-account-logo.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 09 Apr 2020 16:09:00 +0000</pubDate>
<dc:creator>throwable</dc:creator>
<og:description>前提 创业小团队，无论选择任何方案，都优先考虑节省成本。关于分布式定时调度框架，成熟的候选方案有 、`Easy Scheduler Light Task Scheduler Elastic Job Z</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/throwable/p/12670693.html</dc:identifier>
</item>
<item>
<title>Java 虚拟机运行时数据区 - 我们都是小白鼠</title>
<link>http://www.cnblogs.com/tkzL/p/12670300.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tkzL/p/12670300.html</guid>
<description>&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;本文描述的有关于 JVM 的运行时数据区是基于 HotSpot 虚拟机。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;JVM 在执行 Java 程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机的进程启动而存在，有的区域则依赖于用户线程的启动和结束而建立和销毁。&lt;/p&gt;
&lt;h2 id=&quot;hotspot-运行时数据区&quot;&gt;HotSpot 运行时数据区&lt;/h2&gt;
&lt;p&gt;运行时数据区在 HotSpot 1.8 之前的版本和 1.8 版本有所不同，主要是 &lt;strong&gt;方法区移到元空间&lt;/strong&gt; 了。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1326851/202004/1326851-20200407180551559-1202824995.png&quot;/&gt;&lt;/div&gt;
&lt;center&gt;图 1-1：JDK1.8 之前 JVM 运行时数据区&lt;/center&gt;
&lt;div&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1326851/202004/1326851-20200407180645558-969822820.png&quot;/&gt;&lt;/div&gt;
&lt;center&gt;图 1-2：JDK1.8 JVM 运行时数据区&lt;/center&gt;
&lt;h3 id=&quot;线程私有区域&quot;&gt;线程私有区域&lt;/h3&gt;
&lt;h4 id=&quot;程序计数器&quot;&gt;程序计数器&lt;/h4&gt;
&lt;p&gt;程序计数器是一块很小的区域，它存储的是当前线程正在执行的字节码的地址（&lt;strong&gt;在这里，其实有两个“当前”，一个是：当前正在被 CPU 执行的线程，另一个是：当前这个被执行的线程中正在被执行的字节码指令&lt;/strong&gt;）。&lt;strong&gt;字节码解释器工作时就是改变程序计数器的值来选取下一条需要执行的字节码&lt;/strong&gt;。对于单核心而言，多线程是通过线程轮流切换的方式实现的，在任一时刻只有一个线程能够得到 CPU 的执行权从而执行线程中的字节码指令，因此，为了使线程切换后能够恢复到正在执行的字节码的位置，每个线程都需要拥有自己的程序计数器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：程序计数器是唯一的一块在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 的区域。由于它是线程私有的，所以它的生命周期随着线程的创建而创建，随着线程的结束而死亡 。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;虚拟机栈&quot;&gt;虚拟机栈&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;虚拟机栈也是线程私有的，所以它的生命周期与程序计数器相同。虚拟机栈描述的是 Java 方法执行的内存模型。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每个方法在执行的时候都会创建一个栈帧（一个方法对应一个栈帧，栈帧即栈的基本单位）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每个方法被线程执行从开始到结束，就对应着一个栈帧在虚拟机栈中入栈（压栈）和出栈（弹栈）的过程。局部变量表中存放了编译可知的各种基本数据类型（byte,short,int,long,float,double,char,boolean）、对象引用（reference 类型，它存储的是：对象的地址或者是指向代表对象的句柄）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java 虚拟机规范中规定了虚拟机栈可能出现的两种异常状况：StackOverflowError 和 OutOfMemoryError。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;StackOverflowError：&lt;/strong&gt; 若当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候会抛出 StackOverflowError。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OutOfMemoryError：&lt;/strong&gt; 若虚拟机栈动态扩展过程中，如果线程请求申请栈空间无法申请到足够的内存，就会抛出 OutOfMemoryError。&lt;/p&gt;
&lt;h4 id=&quot;本地方法栈&quot;&gt;本地方法栈&lt;/h4&gt;
&lt;p&gt;本地方法栈与虚拟机栈类似，虚拟机栈是执行 Java 方法开辟的内存空间，而本地方法栈是执行 Native 方法开辟的内存空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与虚拟机栈一样，本地方法栈也会抛出 StackOverflowError 和 OutOfMemoryError 异常，抛出条件也是类似的。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;线程间共享的内存区域&quot;&gt;线程间共享的内存区域&lt;/h3&gt;
&lt;h4 id=&quot;堆&quot;&gt;堆&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;堆是所有线程共享的一块区域&lt;/strong&gt;，主要用来存放对象和数组。&lt;/p&gt;
&lt;p&gt;在 Java 虚拟机规范中有描述：所有的对象实例和数组都要在堆上分配，但是 &lt;strong&gt;随着 JIT（JUST-IN-TIME）编译器的发展与逃逸分析技术的逐渐成熟，并不是所有对象都只在堆上分配了&lt;/strong&gt;，比如：随着逃逸分析技术的逐渐成熟，在即时能被回收的对象也有可能会在虚拟机栈上分配。&lt;/p&gt;
&lt;p&gt;由于现在都采用分代回收算法，所以从内存回收的角度来看，堆还可以细分为：新生代、老年代。新生代又可以分为：Eden 空间、From Survivor 空间、To Survivor 空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：1.8 中已经彻底将方法区的实现由之前的永久代改为元空间。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;堆里面可能抛出的异常就是 OutOfMemoryError，&lt;/strong&gt; 出现这种错误的表现形式主要有两种：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;strong&gt;&lt;span&gt;OutOfMemoryError: GC Overhead Limit Exceeded&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;：当 JVM 花太多时间执行垃圾回收并且只能回收很少的堆空间时，就会发生此错误。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;strong&gt;&lt;span&gt;java.lang.OutOfMemoryError: Java heap space&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;：假如在创建新的对象时, 堆内存中的空间不足以存放新创建的对象, 就会引发&lt;code&gt;&lt;span&gt;java.lang.OutOfMemoryError: Java heap space&lt;/span&gt;&lt;/code&gt; 错误。&lt;/p&gt;
&lt;h4 id=&quot;方法区&quot;&gt;方法区&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;方法区和堆一样也是所有线程共享的一块区域&lt;/strong&gt;，主要用来存储已经被虚拟机加载的类信息、常量（final 修饰的）、静态变量、即时编译器（JIT）编译后产生的代码等数据。&lt;strong&gt;虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆）&lt;/strong&gt;，目的应该是与 Java 堆区分开来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;永久代就是方法区域？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;早些时候，很多开发者更愿意称方法区为“永久代”。其实“永久代”这个称呼的由来是因为 HotSpot 团队并不打算为方法区重新设计垃圾回收算法，为了在方法区中能够沿用堆中的分代回收算法，所以按照堆中的命名方式，将方法去称为“永久代”。对于 JRocket、J9 而言是不存在“永久代”的概念的，&lt;strong&gt;所以当 HotSpot 1.8 和 JRocket 合并时，就彻底放弃了“永久代”的概念（其实从 1.7 就已经开始了），取而代之是元空间，元空间使用的是直接内存。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法区的垃圾回收很困难！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于 Java 虚拟机规范对方法区的限制非常松，甚至可以不实现垃圾回收，一般而言，这个区域的内存回收很不令人满意，尤其是类型的卸载，条件非常苛刻，但是由于现代框架大量的依赖于 JIT 技术，导致方法区的占用比逐渐提高，所以对于方法区的回收至关重要。根据 Java 虚拟机规范规定，当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。&lt;/p&gt;
&lt;h4 id=&quot;运行时常量池&quot;&gt;运行时常量池&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;JDK1.7 及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这块区域在 1.7 之前原来是方法区的一部分，Class 文件中有一项信息是常量池（或者说是一张常量表，Class 文件以表存储数据）。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1326851/202004/1326851-20200407180747692-1963254778.png&quot;/&gt;&lt;/div&gt;
&lt;center&gt;图 1-3：Class 文件常量池&lt;/center&gt;
&lt;p&gt;&lt;strong&gt;运行时常量池存储的东西较为复杂，主要分为字面量和符号引用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字面量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存放的字面量主要包括 &lt;strong&gt;常量（final 修饰的），比如：&lt;code&gt;&lt;span&gt;final int x = 1&lt;/span&gt;&lt;/code&gt;、静态变量（static 修饰的）&lt;/strong&gt;，还有一些其他的字面量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;符号引用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;符号引用主要包括：类的完全限定名、字段名称和描述符、方法名称和描述符&lt;/strong&gt;，包括很多符号，比如：&lt;code&gt;&lt;span&gt;()&lt;/span&gt;&lt;/code&gt; 也可以看做符号引用。&lt;/p&gt;
&lt;p&gt;字面量和符号引用将在类加载（ClassLoader 加载 Class 字节码文件）后进入方法区的运行时常量池中存放。不过，除了保存 Class 文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中。运行时常量池相对于 Class 文件常量池一个重要的特征就是具备动态性，Java 语言并不要求常量一定产生于编译期的 Class 文件的常量池中，也并不是只有 Class 文件常量池中的常量才能够进入运行时常量池中，在线程执行方法的过程当中可能产生新的常量存放到运行时常量池中，例如：String 类的 intern() 方法。当运行时常量池无法申请到内存的时候就会抛出 OutOfMemoryError 异常。&lt;/p&gt;
&lt;h4 id=&quot;直接内存&quot;&gt;直接内存&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;直接内存并不是 JVM 运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 JDK1.4 中新加入的 NIO(New Input/Output) 类，引入了一种基于通道（Channel） 与缓存区（Buffer） 的 I/O 方式，它可以直接使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆之间来回复制数据。&lt;/p&gt;
&lt;p&gt;本机直接内存的分配不会受到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;Java 虚拟机包含的内容很多，本篇文章也只是对 Java 内存管理模块的 Java 虚拟机运行时数据区做了简要的分析，关于内存管理模块的其他部分后续会继续更新，敬请期待！&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;欢迎关注我的公众号，一起交流技术。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1326851/202003/1326851-20200307235900287-613114059.png&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 09 Apr 2020 14:53:00 +0000</pubDate>
<dc:creator>我们都是小白鼠</dc:creator>
<og:description>写在前面 本文描述的有关于 JVM 的运行时数据区是基于 HotSpot 虚拟机。 概述 JVM 在执行 Java 程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/tkzL/p/12670300.html</dc:identifier>
</item>
<item>
<title>并发——抽象队列同步器AQS的实现原理 - 特务依昂</title>
<link>http://www.cnblogs.com/tuyang1129/p/12670014.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tuyang1129/p/12670014.html</guid>
<description>&lt;p&gt;  这段时间在研究&lt;code&gt;Java&lt;/code&gt;并发相关的内容，一段时间下来算是小有收获了。&lt;code&gt;ReentrantLock&lt;/code&gt;是&lt;code&gt;Java&lt;/code&gt;并发中的重要部分，所以也是我的首要研究对象，在学习它的过程中，我发现它是基于&lt;strong&gt;抽象队列同步器AQS&lt;/strong&gt;实现的，所以我花了点时间学习了一下&lt;code&gt;AQS&lt;/code&gt;的实现原理。这篇博客就来说一说&lt;code&gt;AQS&lt;/code&gt;的作用，以及它是如何实现的。&lt;/p&gt;
&lt;br/&gt;&lt;h2 id=&quot;21-什么是aqs&quot;&gt;2.1 什么是AQS&lt;/h2&gt;
&lt;p&gt;  &lt;code&gt;AQS&lt;/code&gt;全称抽象队列同步器（AbstractQuenedSynchronizer），它是一个可以用来实现线程同步的基础框架。当然，它不是我们理解的&lt;code&gt;Spring&lt;/code&gt;这种框架，它是一个类，类名就是&lt;code&gt;AbstractQuenedSynchronizer&lt;/code&gt;，如果我们想要实现一个能够完成线程同步的锁或者类似的同步组件，就可以在使用&lt;code&gt;AQS&lt;/code&gt;来实现，因为它封装了线程同步的方式，我们在自己的类中使用它，就可以很方便的实现一个我们自己的锁。&lt;/p&gt;
&lt;br/&gt;&lt;h2 id=&quot;22-如何使用aqs&quot;&gt;2.2 如何使用AQS&lt;/h2&gt;
&lt;p&gt;  &lt;code&gt;AQS&lt;/code&gt;封装了很多方法，如获取独占锁，释放独占锁，获取共享锁，释放共享锁......我们可以通过在自己的实现的同步组件中调用&lt;code&gt;AQS&lt;/code&gt;的这些方法来实现一个线程同步的功能。但是，根据&lt;code&gt;AQS&lt;/code&gt;的名称也能够想到，我们不能直接创建&lt;code&gt;AQS&lt;/code&gt;的对象，调用这些方法，因为&lt;code&gt;AQS&lt;/code&gt;是一个抽象类，我们需要继承&lt;code&gt;AQS&lt;/code&gt;，创建它的子类对象来使用它。在实际使用中，一般是在我们自己的类中，以内部类的方式继承&lt;code&gt;AQS&lt;/code&gt;，然后在内部创建一个对象，在这个类内部使用，比如&lt;code&gt;ReentrantLock&lt;/code&gt;中就是定义了一个抽象内部类&lt;code&gt;Sync&lt;/code&gt;，继承&lt;code&gt;AQS&lt;/code&gt;，然后定义了一个&lt;code&gt;NonfairSync&lt;/code&gt;类，继承&lt;code&gt;Sync&lt;/code&gt;，&lt;code&gt;NonfairSync&lt;/code&gt;是一个&lt;strong&gt;非公平锁&lt;/strong&gt;；同时又定义了一个&lt;code&gt;FairSync&lt;/code&gt;类继承&lt;code&gt;Sync&lt;/code&gt;，&lt;code&gt;FairSync&lt;/code&gt;是一个&lt;strong&gt;公平锁&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;公平锁&lt;/strong&gt;：多个线程按照申请锁的顺序去获得锁，后申请锁的线程需要排队，等它之前的线程获得锁并释放后，它才能获得锁；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非公平锁&lt;/strong&gt;：线程获得锁的顺序于申请锁的顺序无关，申请锁的线程可以直接尝试获得锁，谁抢到就是谁的；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  我们继承了&lt;code&gt;AQS&lt;/code&gt;，就可以直接调用它的方法了吗？当然不是。&lt;code&gt;Java&lt;/code&gt;中提供的抽象组件，都是帮我们写好了通用的部分，但是一些具体的部分，还需要我们自己实现。举个比较简单的例子，&lt;code&gt;Java&lt;/code&gt;中对自定义类型数组的排序，可以直接调用工具类的&lt;code&gt;sort&lt;/code&gt;方法，&lt;code&gt;sort&lt;/code&gt;方法已经实现了排序的算法，但是其中的比较过程是抽象的，需要我们自己实现，所以我们一般需要提供一个比较器（Comparator），或者让自定义类实现&lt;code&gt;Comparable&lt;/code&gt;接口。这就是&lt;strong&gt;模板方法&lt;/strong&gt;设计模式。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;模板方法&lt;/strong&gt;：在一个方法中实现了一个算法的流程，但是其中的一些步骤是抽象的，需要在子类中实现，或者具体使用时实现。模板方法可以提高算法的复用性，提供了算法的弹性，对于不同的需求，可以通用同一份代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  而&lt;code&gt;AQS&lt;/code&gt;的实现就是封装了一系列的模板方法，包括获取锁、释放锁等，这些都是模板方法。这些方法中调用的一些方法并没有具体实现，需要使用者根据自己的需求，在子类中进行实现。下面我们就来看看&lt;code&gt;AQS&lt;/code&gt;中的这些方法。&lt;/p&gt;
&lt;br/&gt;&lt;h2 id=&quot;23-aqs中的方法&quot;&gt;2.3 AQS中的方法&lt;/h2&gt;
&lt;p&gt;  &lt;strong&gt;AQS底层维护一个int类型的变量state来表示当前的同步状态，根据当前state的值，来判断当前释放处于锁定状态，或者是其他状态&lt;/strong&gt;。而&lt;code&gt;state&lt;/code&gt;的每一个值具体是什么含义，是由我们自己实现的。我们继承&lt;code&gt;AQS&lt;/code&gt;时，根据自己的需求，实现一些方法，其中就是通过修改&lt;code&gt;state&lt;/code&gt;的值来维持同步状态。而关于&lt;code&gt;state&lt;/code&gt;，主要有以下三个方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;**int getState() **：获取当前同步状态&lt;code&gt;state&lt;/code&gt;的值；&lt;/li&gt;
&lt;li&gt;**void setState(int newState) **：设置当前同步状态&lt;code&gt;state&lt;/code&gt;的值；&lt;/li&gt;
&lt;li&gt;**boolean compareAndSetState(int expect, int update) **：使用&lt;code&gt;CAS&lt;/code&gt;设置当前同步状态的值，方法能够保证设置同步状态时的原子性；参数&lt;code&gt;expect&lt;/code&gt;为&lt;code&gt;state&lt;/code&gt;的预期旧值，而&lt;code&gt;update&lt;/code&gt;是需要修改的新值，若设置成功，方法返回&lt;code&gt;true&lt;/code&gt;，否则&lt;code&gt;false&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;3.3333333333333&quot;&gt;
&lt;p&gt;CAS是一种乐观锁，若不了解，可以看看这篇博客：&lt;a href=&quot;https://www.cnblogs.com/tuyang1129/p/12585019.html&quot;&gt;并发——详细介绍CAS机制&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  接下来我们再看一看在继承&lt;code&gt;AQS&lt;/code&gt;时，我们可以重写的方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1324014/202004/1324014-20200409221307219-647175220.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1324014/202004/1324014-20200409221316455-184372984.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  以上这些方法将会在&lt;code&gt;AQS&lt;/code&gt;的模板方法中被调用，我们根据自己的需求，重写上述方法，控制同步状态&lt;code&gt;state&lt;/code&gt;的值，即可控制线程同步的方式。下面再来看看&lt;code&gt;AQS&lt;/code&gt;提供的模板方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1324014/202004/1324014-20200409221327546-1654915227.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;AQS&lt;/code&gt;提供的模板方法主要分为三类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;独占式地获取和释放锁；&lt;/li&gt;
&lt;li&gt;共享式地获取和释放锁；&lt;/li&gt;
&lt;li&gt;查询&lt;code&gt;AQS&lt;/code&gt;的同步队列中正在等待的线程情况；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  下面我们就来具体说一说&lt;code&gt;AQS&lt;/code&gt;是如何实现线程同步的。&lt;/p&gt;
&lt;br/&gt;&lt;h2 id=&quot;24-aqs如何实现线程同步&quot;&gt;2.4 AQS如何实现线程同步&lt;/h2&gt;
&lt;p&gt;  前面提过，&lt;code&gt;AQS&lt;/code&gt;通过一个&lt;code&gt;int&lt;/code&gt;类型的变量&lt;code&gt;state&lt;/code&gt;来记录当前的同步状态，也可以理解为锁的状态，根据&lt;code&gt;state&lt;/code&gt;的值的不同，可以判断当前锁是否已经被获取。就拿独占锁来说，若我们要实现的是一个独占锁，则锁被获取后，其他线程将无法获取锁，需要进入阻塞状态，等待锁被释放。而线程获取锁就是通过修改&lt;code&gt;state&lt;/code&gt;的值来实现的，一个线程修改&lt;code&gt;state&lt;/code&gt;成功，则表示它成功获得了锁；若失败，则表示已经有其他线程获得了锁，则它需要进入阻塞状态。下面我们就来聊一聊&lt;code&gt;AQS&lt;/code&gt;如何实现维持多个线程等待的。&lt;/p&gt;
&lt;p&gt;  首先说明结论：&lt;strong&gt;AQS通过一个同步队列来维护当前获取锁失败，进入阻塞状态的线程&lt;/strong&gt;。这个同步队列是一个双向链表，获取锁失败的线程会被封装成一个链表节点，加入链表的尾部排队，而&lt;code&gt;AQS&lt;/code&gt;保存了链表的头节点的引用&lt;code&gt;head&lt;/code&gt;以及链表的尾节点引用&lt;code&gt;tail&lt;/code&gt;。这个同步队列如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1324014/202004/1324014-20200409221335438-280248331.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  在这个同步队列中，每个节点对应一个线程，每个节点都有一个&lt;code&gt;next&lt;/code&gt;指针指向它的下一个节点，以及一个&lt;code&gt;prev&lt;/code&gt;指针指向它的上一个节点。队列中的头节点&lt;code&gt;head&lt;/code&gt;就是当前已经获取了锁，正在执行的线程对应的节点；而之后的这些节点，则对应着获取锁失败，正在排队的线程。&lt;/p&gt;
&lt;p&gt;  当一个线程获取锁失败，它会被封装成一个&lt;code&gt;Node&lt;/code&gt;，加入同步队列的尾部排队，同时线程会进入阻塞状态。也就是说，在同步队列中，除了头节点对应的线程是运行状态，其余的线程都是等待睡眠状态。而当头节点对应的线程释放锁时，它会唤醒它的下一个节点（也就是上图中的第二个节点），被唤醒的节点对应的线程开始尝试获取锁，若获取成功，它就会将自己置为&lt;code&gt;head&lt;/code&gt;，然后将原来的&lt;code&gt;head&lt;/code&gt;移出队列。接下来我们就通过源码，具体分析一下&lt;code&gt;AQS&lt;/code&gt;的实现过程。&lt;/p&gt;
&lt;br/&gt;&lt;h2 id=&quot;25-独占锁的获取与释放过程&quot;&gt;2.5 独占锁的获取与释放过程&lt;/h2&gt;
&lt;p&gt; &lt;strong&gt;（1）获取锁的实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;AQS&lt;/code&gt;的锁功能齐全，它既可以用来实现独占锁，也可以用来实现共享锁。&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;strong&gt;独占锁&lt;/strong&gt;：也叫排他锁，即锁只能由一个线程获取，若一个线程获取了锁，则其他想要获取锁的线程只能等待，直到锁被释放。比如说写锁，对于写操作，每次只能由一个线程进行，若多个线程同时进行写操作，将很可能出现线程安全问题；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;共享锁&lt;/strong&gt;：锁可以由多个线程同时获取，锁被获取一次，则锁的计数器+1。比较典型的就是读锁，读操作并不会产生副作用，所以可以允许多个线程同时对数据进行读操作，而不会有线程安全问题，当然，前提是这个过程中没有线程在进行写操作；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  我们首先分析一下独占锁。在&lt;code&gt;AQS&lt;/code&gt;中，通过方法&lt;code&gt;acquire&lt;/code&gt;来获取独占锁，&lt;code&gt;acquire&lt;/code&gt;方法的代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public final void acquire(int arg) {
    if (!tryAcquire(arg) &amp;amp;&amp;amp;
        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
        selfInterrupt();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  上面的方法执行流程如下：&lt;/p&gt;
&lt;ol readability=&quot;7&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;首先调用&lt;code&gt;tryAcquire&lt;/code&gt;尝试获取一次锁，若返回&lt;code&gt;true&lt;/code&gt;，表示获取成功，则&lt;code&gt;acquire&lt;/code&gt;方法将直接返回；若返回&lt;code&gt;false&lt;/code&gt;，则会继续向后执行&lt;code&gt;acquireQueued&lt;/code&gt;方法；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;tryAcquire&lt;/code&gt;返回&lt;code&gt;false&lt;/code&gt;后，将执行&lt;code&gt;acquireQueued&lt;/code&gt;，但是这个方法传入的参数调用了&lt;code&gt;addWaiter&lt;/code&gt;方法；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;addWaiter&lt;/code&gt;方法的作用是将当前线封装成同步队列的节点，然后加入到同步队列的尾部进行排队，并返回此节点；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;addWaiter&lt;/code&gt;方法执行完成后，将它的返回值作为参数，调用&lt;code&gt;acquireQueued&lt;/code&gt;方法。&lt;code&gt;acquireQueued&lt;/code&gt;方法的作用是让当前线程在同步队列中阻塞，然后在被其他线程唤醒时去获取锁；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;若线程被唤醒并成功获取锁后，将从&lt;code&gt;acquireQueued&lt;/code&gt;方法中退出，同时返回一个&lt;code&gt;boolean&lt;/code&gt;值表示当前线程是否被中断，若被中断，则会执行下面的&lt;code&gt;selfInterrupt&lt;/code&gt;方法，响应中断；&lt;/p&gt;
&lt;p&gt;  下面我们就来具体分析这个方法中调用的几个方法的执行流程。首先第一个&lt;code&gt;tryAcquire&lt;/code&gt;方法：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;protected boolean tryAcquire(int arg) {
    throw new UnsupportedOperationException();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  可以看到，这个方法的实现仅仅只是抛出了一个异常。我们之前提过，&lt;code&gt;AQS&lt;/code&gt;是基于模板方法设计模式实现的，在其中定义了许多模板方法，在模板方法中会调用一些没有实现的方法，这些方法需要使用者根据自己的需求实现。而&lt;code&gt;acquire&lt;/code&gt;方法就是一个模板方法，其中调用的&lt;code&gt;tryAcquire&lt;/code&gt;方法就是需要我们自己实现的方法。&lt;code&gt;tryAcquire&lt;/code&gt;的作用就是尝试修改&lt;code&gt;state&lt;/code&gt;值，也就是获取锁，若修改成功，则返回&lt;code&gt;true&lt;/code&gt;，否则返回&lt;code&gt;false&lt;/code&gt;。它的实现需要根据&lt;code&gt;AQS&lt;/code&gt;的子类具体分析，比如&lt;code&gt;ReentrantLock&lt;/code&gt;中的&lt;code&gt;Sync&lt;/code&gt;，这里我就不详细叙述了，后面写一篇专门讲&lt;code&gt;ReentrantLock&lt;/code&gt;的博客。下面来看看&lt;code&gt;addWaiter&lt;/code&gt;的源码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;// 将线程封装成一个节点，放入同步队列的尾部
private Node addWaiter(Node mode) {
    // 当前线程封装成同步队列的一个节点Node
    Node node = new Node(Thread.currentThread(), mode);
    // 这个节点需要插入到原尾节点的后面，所以我们在这里先记下原来的尾节点
    Node pred = tail;
    // 判断尾节点是否为空，若为空表示队列中还没有节点，则不执行以下步骤
    if (pred != null) {
        // 记录新节点的前一个节点为原尾节点
        node.prev = pred;
        // 将新节点设置为新尾节点，使用CAS操作保证了原子性
        if (compareAndSetTail(pred, node)) {
            // 若设置成功，则让原来的尾节点的next指向新尾节点
            pred.next = node;
            return node;
        }
    }
    // 若以上操作失败，则调用enq方法继续尝试(enq方法见下面)
    enq(node);
    return node;
}

private Node enq(final Node node) {
    // 使用死循环不断尝试
    for (;;) {
        // 记录原尾节点
        Node t = tail;
        // 若原尾节点为空，则必须先初始化同步队列，初始化之后，下一次循环会将新节点加入队列
        if (t == null) { 
            // 使用CAS设置创建一个默认的节点作为首届点
            if (compareAndSetHead(new Node()))
                // 首尾指向同一个节点
                tail = head;
        } else {
            // 以下操作与addWaiter方法中的if语句块内一致
            node.prev = t;
            if (compareAndSetTail(t, node)) {
                t.next = node;
                return t;
            }
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  以上就是&lt;code&gt;addWaiter&lt;/code&gt;方法的实现过程，我在代码中使用注释对每一步进行了详细的解析，它的执行过程大致可以总结为：&lt;strong&gt;将新线程封装成一个节点，加入到同步队列的尾部，若同步队列为空，则先在其中加入一个默认的节点，再进行加入；若加入失败，则使用死循环（也叫自旋）不断尝试，直到成功为止&lt;/strong&gt;。这个过程中使用&lt;code&gt;CAS&lt;/code&gt;保证了添加节点的原子性。下面看看&lt;code&gt;acquireQueued&lt;/code&gt;方法的源码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
 * 让线程不间断地获取锁，若线程对应的节点不是头节点的下一个节点，则会进入等待状态
 * @param node the node
 */
final boolean acquireQueued(final Node node, int arg) {
    // 记录失败标志
    boolean failed = true;
    try {
        // 记录中断标志，初始为true
        boolean interrupted = false;
        // 循环执行，因为线程在被唤醒后，可能再次获取锁失败，需要重写进入等待
        for (;;) {
            // 获取当前线程节点的前一个节点
            final Node p = node.predecessor();
            // 若前一个节点是头节点，则tryAcquire尝试获取锁，若获取成功，则执行if中的代码
            if (p == head &amp;amp;&amp;amp; tryAcquire(arg)) {
                // 将当前节点设置为头节点
                setHead(node);
                // 将原来的头节点移出同步队列
                p.next = null; // help GC
                // 失败标志置为false
                failed = false;
                // 返回中断标志，acquire方法可以根据返回的中断标志，判断当前线程是否被中断
                return interrupted;
            }
            // shouldParkAfterFailedAcquire方法判断当前线程是否能够进入等待状态，
            // 若当前线程的节点不是头节点的下一个节点，则需要进入等待状态，
            // 在此方法内部，当前线程会找到它的前驱节点中，第一个还在正常等待或执行的节点，
            // 让其作为自己的直接前驱，然后在需要时将自己唤醒（因为其中有些线程可能被中断），
            // 若找到，则返回true，表示自己可以进入等待状态了；
            // 则继续调用parkAndCheckInterrupt方法，当前线程在这个方法中等待，
            // 直到被其他线程唤醒，或者被中断后返回，返回时将返回一个boolean值，
            // 表示这个线程是否被中断，若为true，则将执行下面一行代码，将中断标志置为true
            if (shouldParkAfterFailedAcquire(p, node) &amp;amp;&amp;amp;
                parkAndCheckInterrupt())
                interrupted = true;
        }
    } finally {
        // 上面代码中只有一个return语句，且return的前一句就是failed = false;
        // 所以只有当异常发生时，failed才会保持true的状态运行到此处；
        // 异常可能是线程被中断，也可能是其他方法中的异常，
        // 比如我们自己实现的tryAcquire方法
        // 此时将取消线程获取锁的动作，将它从同步队列中移除
        if (failed)
            cancelAcquire(node);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  以上就是&lt;code&gt;acquireQueued&lt;/code&gt;方法的源码分析。这个方法的作用可以概括为：&lt;strong&gt;让线程在同步队列中阻塞，直到它成为头节点的下一个节点，被头节点对应的线程唤醒，然后开始获取锁，若获取成功才会从方法中返回&lt;/strong&gt;。这个方法会返回一个&lt;code&gt;boolean&lt;/code&gt;值，表示这个正在同步队列中的线程是否被中断。&lt;/p&gt;
&lt;p&gt;  到此，获取独占锁的实现就分析完毕了。需要注意的是，这些过程中使用的&lt;code&gt;compareAndSetXXX&lt;/code&gt;这种形式的方法，都是基于&lt;code&gt;CAS&lt;/code&gt;机制实现的，保证了这些操作的原子性。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;（2）释放锁的实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  分析完获取独占锁的代码后，我们再来看看释放锁的实现。释放独占锁是通过&lt;code&gt;release&lt;/code&gt;方法实现的：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public final boolean release(int arg) {
    // 调用tryRelease尝试修改state释放锁，若成功，将返回true，否则false
    if (tryRelease(arg)) {
        // 若修改state成功，则表示释放锁成功，需要将当前线程移出同步队列
        // 当前线程在同步队列中的节点就是head，所以此处记录head
        Node h = head;
        // 若head不是null，且waitStatus不为0，表示它是一个装有线程的正常节点，
        // 在之前提到的addWaiter方法中，若同步队列为空，则会创建一个默认的节点放入head
        // 这个默认的节点不包含线程，它的waitStatus就是0，所以不能释放锁
        if (h != null &amp;amp;&amp;amp; h.waitStatus != 0)
            // 若head是一个正常的节点，则调用unparkSuccessor唤醒它的下一个节点所对应的线程
            unparkSuccessor(h);
        // 释放成功
        return true;
    }
    // 释放锁失败
    return false;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  以上就是同步队列中头节点对应的线程释放锁的过程。&lt;code&gt;release&lt;/code&gt;也是一个模板方法，其中通过调用&lt;code&gt;tryRelease&lt;/code&gt;尝试释放锁，而&lt;code&gt;tryRelease&lt;/code&gt;也需要使用者自己实现。在之前也说过，头节点释放锁时，需要唤醒它的下一个节点对应的线程，让这个线程不再等待，去获取锁，而这个过程就是通过&lt;code&gt;unparkSuccessor&lt;/code&gt;方法实现的。&lt;/p&gt;
&lt;br/&gt;&lt;h2 id=&quot;26-共享锁的获取与释放过程&quot;&gt;2.6 共享锁的获取与释放过程&lt;/h2&gt;
&lt;p&gt;  前面提到过，&lt;code&gt;AQS&lt;/code&gt;不仅仅可以用来实现独占锁，还可以用来实现共享锁，下面我们就来看看&lt;code&gt;AQS&lt;/code&gt;中，有关共享锁的模板方法的实现。首先是获取共享锁的实现，在&lt;code&gt;AQS&lt;/code&gt;中，定义了&lt;code&gt;acquireShared&lt;/code&gt;方法用来获取共享锁：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public final void acquireShared(int arg) {
    if (tryAcquireShared(arg) &amp;lt; 0)
        doAcquireShared(arg);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  可以看到，这个方法比较简短。首先调用&lt;code&gt;tryAcquireShared&lt;/code&gt;方法尝试获取一次共享锁，即修改&lt;code&gt;state&lt;/code&gt;的值，若返回值&lt;code&gt;&amp;gt;=0&lt;/code&gt;，则表示获取成功，线程不受影响，继续向下执行；若返回值小于&lt;code&gt;0&lt;/code&gt;，表示获取共享锁失败，则线程需要进入到同步队列中等待，调用&lt;code&gt;doAcquireShared&lt;/code&gt;方法。&lt;code&gt;acquireShared&lt;/code&gt;方法也是&lt;code&gt;AQS&lt;/code&gt;的一个模板方法，而其中的&lt;code&gt;tryAcquireShared&lt;/code&gt;方法就是需要使用者自己实现的方法。下面我们来看看&lt;code&gt;doAcquireShared&lt;/code&gt;方法的实现：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
 * 不间断地获取共享锁，若线程对应的节点不是头节点的下一个节点，将进入等待状态
 * 实现与acquireQueued非常类似
 * @param arg the acquire argument
 */
private void doAcquireShared(int arg) {
    // 往同步队列的尾部添加一个默认节点，Node.SHARED是一个Node常量，
    // 它的值就是一个不带任何参数的Node对象，也就是new Node();
    final Node node = addWaiter(Node.SHARED);
    // 失败标志，默认为true
    boolean failed = true;
    try {
        // 中断标志，用来判断线程在等待的过程中释放被中断
        boolean interrupted = false;
        // 死循环不断尝试获取共享锁
        for (;;) {
            // 获取默认节点的前一个节点
            final Node p = node.predecessor();
            // 判断当前节点的前一个节点是否为head节点
            if (p == head) {
                // 尝试获取共享锁
                int r = tryAcquireShared(arg);
                // 若r&amp;gt;0，表示获取成功
                if (r &amp;gt;= 0) {
                    // 当前线程获取锁成功后，调用setHeadAndPropagate方法将当前线程设置为head
                    // 同时，若共享锁还能被其他线程获取，则在这个方法中也会向后传递，唤醒后面的线程
                    setHeadAndPropagate(node, r);
                    // 将原来的head的next置为null
                    p.next = null; // help GC
                    // 判断当前线程是否中断，若被中断，则调用selfInterrupt方法响应中断
                    if (interrupted)
                        selfInterrupt();
                    // 失败标志置为false
                    failed = false;
                    return;
                }
            }
            // 以下代码和获取独占锁的acquireQueued方法相同，即让当前线程进入等待状态
            // 具体解析可以看上面acquireQueued方法的解析
            if (shouldParkAfterFailedAcquire(p, node) &amp;amp;&amp;amp;
                parkAndCheckInterrupt())
                interrupted = true;
        }
    } finally {
        if (failed)
            cancelAcquire(node);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  &lt;code&gt;doAcquireShared&lt;/code&gt;方法的实现和获取独占锁中的&lt;code&gt;acquireQueued&lt;/code&gt;方法很类似，但是主要有一点不同，那就是&lt;strong&gt;线程在被唤醒后，若成功获取到了共享锁，还需要判断共享锁是否还能被其他线程获取，若可以，则继续向后唤醒它的下一个节点对应的线程&lt;/strong&gt;。下面再看看释放共享锁的代码，释放共享锁时通过方法&lt;code&gt;releaseShared&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public final boolean releaseShared(int arg) {
    // 尝试修改state的值释放锁
    if (tryReleaseShared(arg)) {
        // 若成功，则调用以下方法唤醒后继节点中的线程
        doReleaseShared();
        return true;
    }
    return false;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  &lt;code&gt;releaseShared&lt;/code&gt;也是一个模板方法，它通过调用使用者自己实现的&lt;code&gt;tryReleaseShared&lt;/code&gt;方法尝试释放锁，修改&lt;code&gt;state&lt;/code&gt;的值，若返回&lt;code&gt;true&lt;/code&gt;，表示修改成功，则继续向下调用&lt;code&gt;doReleaseShared&lt;/code&gt;唤醒&lt;code&gt;head&lt;/code&gt;的下一个节点对应的线程，让它开始尝试获取锁；若修改&lt;code&gt;state&lt;/code&gt;失败，则返回&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;br/&gt;&lt;h2 id=&quot;27-使用aqs实现一个锁&quot;&gt;2.7 使用AQS实现一个锁&lt;/h2&gt;
&lt;p&gt;  介绍完上面的内容，下面我们就来基于&lt;code&gt;AQS&lt;/code&gt;实现一个自己的同步器，或者说锁。我们需要实现的锁要求如下：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;  实现一个锁，它是一个共享锁，但是每次至多支持两个线程同时获取锁，若当前已经有两个线程获取了锁，则其他获取锁的线程需要等待。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  实现代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
 * 抽象队列同步器（AQS）使用：
 *      实现一个同一时刻至多只支持两个线程同时执行的同步器
 */

// 让当前类继承Lock接口
public class TwinLock implements Lock {

    // 定义锁允许的最大线程数
    private final static int DEFAULT_SYNC_COUNT = 2;
    // 创建一个锁对象，用以进行线程同步，Sync继承自AQS
    private final Sync sync = new Sync(DEFAULT_SYNC_COUNT);

    // 以内部类的形式实现一个同步器类，也就是锁，这个锁继承自AQS
    private static final class Sync extends AbstractQueuedSynchronizer {

        // 构造方法中指定锁支持的线程数量
        Sync(int count) {
            // 若count小于0，则默认为2
            if (count &amp;lt;= 0) {
                count = DEFAULT_SYNC_COUNT;
            }
            // 设置初始同步状态
            setState(count);
        }
        
        /**
         * 重写tryAcquireShared方法，这个方法用来修改同步状态state，也就是获取锁
         */
        @Override
        protected int tryAcquireShared(int arg) {
            // 循环尝试
            for (; ; ) {
                // 获取当前的同步状态
                int nowState = getState();
                // 计算当前线程获取锁后，新的同步状态
                // 注意这里使用了减法，因为此时的state表示的是还能支持多少个线程
                // 而当前线程如果获得了锁，则state就要减小
                int newState = nowState - arg;
                
                // 如果newState小于0，表示当前已经没有剩余的资源了
                // 则当前线程不能获取锁，此时将直接返回小于0的newState；
                // 或者newState&amp;gt;0，就会执行compareAndSetState方法修改state的值，
                // 若修改成功将，将返回大于0的newState；
                // 若修改失败，则表示有其他线程也在尝试修改state，此时循环一次后，再次尝试
                if (newState &amp;lt; 0 || compareAndSetState(nowState, newState)) {
                    return newState;
                }
            }
        }

        /**
         * 尝试释放同步状态
         */
        @Override
        protected boolean tryReleaseShared(int arg) {
            for (; ; ) {
                // 获取当前同步状态
                int nowState = getState();
                // 计算释放后的新同步状态，这里使用加法，
                // 表示有线程释放锁后，当前锁可以支持的线程数量增加了
                int newState = nowState + arg;
                // 使用CAS修改同步状态，若成功则返回true，否则自旋
                if (compareAndSetState(nowState, newState)) {
                    return true;
                }
            }
        }
        
    }


    /**
     * 获取锁的方法
     */
    @Override
    public void lock() {
        // 这里调用的是AQS的模板方法acquireShared，
        // 在acquireShared中将调用我们重写的tryAcquireShared方法
        // 传入参数为1表示当前线程，当前线程获取锁后，state将-1
        sync.acquireShared(1);
    }

    /**
     * 解锁
     */
    @Override
    public void unlock() {
        // 这里调用的是AQS的模板方法releaseShared，
        // 在acquireShared中将调用我们重写的tryReleaseShared方法
        // 传入参数为1表示当前线程，当前线程释放锁后，state将+1
        sync.releaseShared(1);
    }

    /*******************其他需要实现的方法省略***************************/

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  以上就实现了一个支持两个线程同时允许的共享锁，下面我们通过一个测试代码来测试效果：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public static void main(String[] args) throws InterruptedException {
        // 创建一个我们自定义的锁对象
    Lock lock = new TwinLock();

    // 启动10个线程去尝试获取锁
    for (int i = 0; i &amp;lt; 10; i++) {
        Thread t = new Thread(()-&amp;gt;{
            // 循环执行
            while (true) {
                // 获取锁
                lock.lock();
                try {
                    // 休眠1秒
                    Thread.sleep(1000);
                    // 输出线程名称
                    System.out.println(Thread.currentThread().getName());
                    // 再次休眠一秒
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } finally {
                    // 释放锁
                    lock.unlock();
                }
            }
        });
                // 将线程设置为守护线程，主线程结束后，收获线程自动结束
        t.setDaemon(true);
        t.start();
    }

        // 主线程每隔1秒输出一个分割行
    for (int i = 0; i &amp;lt; 10; i++) {
        Thread.sleep(1000);
        System.out.println(&quot;********************************&quot;);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  以上测试代码运行后，在每两个分割行之间，最多不会输出超过两个线程的名称，线程名称的输出将会以两个一队出现。我的输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-txt&quot;&gt;********************************
Thread-1
Thread-0
********************************
********************************
Thread-2
Thread-1
********************************
********************************
Thread-2
Thread-1
********************************
********************************
Thread-2
Thread-3
********************************
********************************
Thread-3
Thread-4
********************************
&lt;/code&gt;
&lt;/pre&gt;
&lt;br/&gt;&lt;h2 id=&quot;28-aqs如何实现线程等待&quot;&gt;2.8 AQS如何实现线程等待&lt;/h2&gt;
&lt;p&gt;  在研究&lt;code&gt;AQS&lt;/code&gt;的过程中，我一直有这个疑惑——&lt;code&gt;AQS&lt;/code&gt;如何让线程阻塞，直到最后才知道有一个叫&lt;code&gt;LockSupport&lt;/code&gt;的工具类。这个工具类定义了很多静态方法，当需要让一个阻塞，或者唤醒一个线程时，就可以调用这个类中的方法，它的底层实现是通过一个&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;类的对象，&lt;code&gt;unsafe&lt;/code&gt;类的方法都是本地方法，由其他语言实现，这个类是给不支持地址操作的&lt;code&gt;Java&lt;/code&gt;，提供的一个操作内存地址的后门。&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;AQS&lt;/code&gt;中通过以下两个方法来阻塞和唤醒线程：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;LockSupport.park()&lt;/strong&gt;：阻塞当前线程；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LockSupport.unpark(Thread thread)&lt;/strong&gt;：将参数中传入的线程唤醒；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  前面讲解&lt;code&gt;AQS&lt;/code&gt;的代码中，用到了方法&lt;code&gt;unparkSuccessor&lt;/code&gt;，它的主要作用就是唤醒当前节点的下一个节点对应的线程，我们可以看看它的部分实现：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;private void unparkSuccessor(Node node) {

    // ...........省略其他代码............
    
    // 以下代码即为唤醒当前节点的下一个节点对应的线程
    Node s = node.next;
    if (s != null)
        LockSupport.unpark(s.thread);   // 使用LockSupport
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  其实&lt;code&gt;AQS&lt;/code&gt;还支持一些其他的方法，比如说在获取锁时设置超时时间等，这些方法的实现与上面介绍的几种大同小异，限于篇幅，这里就不进行叙述了。以上内容对&lt;code&gt;AQS&lt;/code&gt;的实现原理以及主要方法的实现做了一个比较细致的介绍，相信看完之后会对&lt;code&gt;AQS&lt;/code&gt;有一个比较深入的理解，但是想要理解以上内容，需要具备并发的一些基础知识，比如说线程的状态，&lt;code&gt;CAS&lt;/code&gt;机制等。最后希望这篇博客对需要的人有所帮助吧。&lt;/p&gt;
&lt;br/&gt;</description>
<pubDate>Thu, 09 Apr 2020 14:14:00 +0000</pubDate>
<dc:creator>特务依昂</dc:creator>
<og:description>一、前言 这段时间在研究 并发相关的内容，一段时间下来算是小有收获了。 是``Java AQS AQS``的作用，以及它是如何实现的。 二、正文 2.1 什么是AQS 全称抽象队列同步器（Abstra</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/tuyang1129/p/12670014.html</dc:identifier>
</item>
<item>
<title>KVC讲解 - 国孩</title>
<link>http://www.cnblogs.com/guohai-stronger/p/12663910.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guohai-stronger/p/12663910.html</guid>
<description>&lt;p&gt;今天趁着项目bug修复完了，来讲解一下OC知识的另一个技术点-KVC！针对KVC，讲解两个知识点&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;通过KVC修改属性会触发KVO么？&lt;/li&gt;
&lt;li&gt;KVC的赋值过程是怎样的？原理是什么？&lt;/li&gt;
&lt;li&gt;KVC的取值过程是怎样的？原理是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;一、问：通过KVC修改属性会触发KVO么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：会触发KVO&lt;/p&gt;
&lt;p&gt;创建工程项目TestKVO，ZXYPerson类有一个属性age,在控制器ViewController中添加属性观察者KVO，项目代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@interface&lt;/span&gt;&lt;span&gt; ViewController ()&lt;br/&gt;@property(nonatomic,strong) ZXYPerson &lt;/span&gt;*&lt;span&gt;p;
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;
&lt;span&gt;@implementation&lt;/span&gt;&lt;span&gt; ViewController
&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)viewDidLoad {
    [super viewDidLoad];
    
    _p &lt;/span&gt;=&lt;span&gt; [[ZXYPerson alloc]init];
    _p.age &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
    
    [_p addObserver:self forKeyPath:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; options: NSKeyValueObservingOptionNew context:nil];
    &lt;span&gt;&lt;strong&gt;[_p setValue:@&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;12 forKeyPath: @&quot;age&quot;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;];&lt;/strong&gt;&lt;/span&gt;
    
}

&lt;/span&gt;-(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)dealloc {
    [_p removeObserver:self forKeyPath:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
}

&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;)observeValueForKeyPath:(NSString *)keyPath ofObject:(&lt;span&gt;id&lt;/span&gt;)&lt;span&gt;object&lt;/span&gt; change:(NSDictionary&amp;lt;NSKeyValueChangeKey,&lt;span&gt;id&lt;/span&gt;&amp;gt; *)change context:(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;)context{
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;*********%@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, change);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面橙色文字通过KVC方式更改属性的值，将上面代码运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200408233157260-387632931.png&quot; alt=&quot;&quot; width=&quot;627&quot; height=&quot;424&quot;/&gt;&lt;/p&gt;

&lt;p&gt;通过上面发现setValue:forKeyPath触发了KVO，同理发现setValue:forKey也会触发KVO，但是这两个方法有什么区别呢？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;setValue:forKeyPath&lt;/span&gt;会一层一层的（沿着路径）向下找，然而&lt;span&gt;setValue:forKey&lt;/span&gt;并不会这样！（假如ZXYPerson养了一只猫，猫有age属性 ，通过&quot;_p.cat.age&quot;设置应该用&lt;strong&gt;&lt;span&gt;setValue:forKeyPath&lt;/span&gt;，不能用&lt;span&gt;&lt;strong&gt;setValue:forKey&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;思考: 为什么KVC更改属性值会触发KVO？那就需要讲解下面知识。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、问：&lt;/span&gt;KVC的赋值过程是怎样的？原理是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; setValue:forKey:的原理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200408235023192-1681541450.png&quot; alt=&quot;&quot; width=&quot;622&quot; height=&quot;233&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;accessInstanceVariablesDirectly方法的默认返回值是YES&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面一一验证上面的顺序：&lt;/p&gt;
&lt;p&gt; 验证setValue:forkey调用过程不需要用到KVO,去除多余的代码之后,简化成如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#import&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ViewController.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;#import&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ZXYPerson.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;@interface&lt;/span&gt;&lt;span&gt; ViewController ()

@property(nonatomic,strong) ZXYPerson &lt;/span&gt;*&lt;span&gt;p;
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;

&lt;span&gt;@implementation&lt;/span&gt;&lt;span&gt; ViewController
&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)viewDidLoad {
    [super viewDidLoad];
    
    _p &lt;/span&gt;=&lt;span&gt; [[ZXYPerson alloc]init];
    &lt;strong&gt;[_p setValue:@&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;12&lt;/span&gt; forKeyPath: &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;];&lt;/strong&gt;
    
}

&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;


&lt;span&gt;#import&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ZXYPerson.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;@implementation&lt;/span&gt;&lt;span&gt; ZXYPerson

&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;) &lt;strong&gt;setAge:(&lt;span&gt;int&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;)age&lt;/strong&gt; {
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;调用了setAge方法&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}

&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;) &lt;strong&gt;_setAge: (&lt;span&gt;int&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;)age&lt;/strong&gt; {
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;调用了_setAge方法&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;去除了age属性的声明,看看KVC赋值的前期过程&lt;span&gt;&lt;strong&gt;(按照setKey, _setKey方法走)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409093735220-796501877.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 同时写了两个方法,优先调用setAge方法,假如将setAge方法注释掉&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409093942440-1910205926.jpg&quot; alt=&quot;&quot; width=&quot;653&quot; height=&quot;309&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 注释掉setAge方法后,久调用了_setAge方法,证实了KVC的前期赋值情况!&lt;/p&gt;

&lt;p&gt;如果两个方法都没有实现,此时KVC会&lt;span&gt;看&lt;strong&gt;accessInstanceVariablesDirectly方法,返回Yes代表可以直接访问成员变量,反之不能访问成员变量!&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;如果返回为Yes,会按照_key、_isKey、key、isKey成员属性进行赋值&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;此时像上面的代码加入这四个成员变量,如下(前提&lt;strong&gt;accessInstanceVariablesDirectly方法返回Yes&lt;/strong&gt;)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@interface&lt;/span&gt;&lt;span&gt; ZXYPerson : NSObject
{
    &lt;/span&gt;&lt;span&gt;@public&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt;&lt;span&gt; _age;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; _isAge;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; isAge;
}

&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加入上述代码,运行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409095854090-536372394.jpg&quot; alt=&quot;&quot; width=&quot;675&quot; height=&quot;345&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 首先给_age赋值,当四个成员变量同时出现,假如将int _age成员变量注释掉,如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409100006467-281349890.jpg&quot; alt=&quot;&quot; width=&quot;658&quot; height=&quot;334&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现当_age注释掉之后,优先给_isAge赋值,优先级仅次于_age,假如将_isAge注释掉之后&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409100200097-1523014332.jpg&quot; alt=&quot;&quot; width=&quot;642&quot; height=&quot;298&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 发现给age赋值,同理将age成员变量注释掉之后&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409100255951-1192557684.jpg&quot; alt=&quot;&quot; width=&quot;652&quot; height=&quot;288&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 最后给isAge赋值,符合了上述setValue:forkey的访问属性的优先级 &lt;strong&gt;_key &amp;gt; _isKey &amp;gt; key &amp;gt; isKey的顺序&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果这四个成员变量都没有了,就会报异常&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409100528166-1763354940.jpg&quot; alt=&quot;&quot; width=&quot;648&quot; height=&quot;207&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 通过上面讲述知道&lt;strong&gt;setValue:forKey&lt;/strong&gt;会触发KVO&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;[_p setValue:@&lt;/strong&gt;&lt;strong&gt;12 forKeyPath: @&quot;age&quot;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;]&lt;span&gt;内部调用相当于&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;[p willChangeValueForKey @&quot;age&quot;]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;p-&amp;gt;_age = 12;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;[p didChangeValueForKey @&quot;age&quot;]&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以会触发KVO&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以上就是&lt;strong&gt;setValue:forKey的赋值所有过程,希望大家再看看上述图,下面讲述KVC如何取值?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、问: KVC的取值过程是怎样的？原理是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;valueForKey:的原理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409102027147-1210205689.png&quot; alt=&quot;&quot; width=&quot;627&quot; height=&quot;235&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; 下面一一验证上面的顺序：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@interface&lt;/span&gt;&lt;span&gt; ZXYPerson : NSObject{
    &lt;/span&gt;&lt;span&gt;@public&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt;&lt;span&gt; _age;
}

&lt;/span&gt;&lt;span&gt;@implementation&lt;/span&gt;&lt;span&gt; ZXYPerson

&lt;/span&gt;- (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;strong&gt;getAge&lt;/strong&gt; {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;- (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;strong&gt;age&lt;/strong&gt; {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;- (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;strong&gt;isAge&lt;/strong&gt; {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;- (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;strong&gt;_age&lt;/strong&gt; {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;


&lt;span&gt;@interface&lt;/span&gt;&lt;span&gt; ViewController ()
@property(nonatomic,strong) ZXYPerson &lt;/span&gt;*&lt;span&gt;p;
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;
&lt;span&gt;@implementation&lt;/span&gt;&lt;span&gt; ViewController
&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)viewDidLoad {
    [super viewDidLoad];
    
    _p &lt;/span&gt;=&lt;span&gt; [[ZXYPerson alloc]init];
    &lt;strong&gt;_p&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;-&amp;gt;_age = &lt;span&gt;10&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;
    
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;******%@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;strong&gt;[_p valueForKey:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;]&lt;/strong&gt;);
    
}

&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看看KVC取值的前期过程&lt;strong&gt;(按照&lt;/strong&gt;&lt;strong&gt;getAge &amp;gt; &lt;/strong&gt;&lt;strong&gt;age &amp;gt; isAge &amp;gt; _age &lt;/strong&gt;&lt;strong&gt;方法走)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409211927282-1715640711.jpg&quot; alt=&quot;&quot; width=&quot;617&quot; height=&quot;505&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当有四个方法时，会优先调用getAge方法，如上面一样打印出11，调用了getAge方法！假如把getAge()方法注释掉，运行代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409212257371-1446054256.jpg&quot; alt=&quot;&quot; width=&quot;618&quot; height=&quot;509&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 将getAge()方法注释掉后，调用了age方法，验证了getAge &amp;gt; age ！假如把age方法注释掉&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409212519922-449556445.jpg&quot; alt=&quot;&quot; width=&quot;612&quot; height=&quot;511&quot;/&gt;&lt;/p&gt;

&lt;p&gt;将getAge()和age()方法注释掉后，调用了isAge()方法，验证了getAge &amp;gt; age &amp;gt; isAge ！假如把isAge()方法注释掉 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409212647755-608529534.jpg&quot; alt=&quot;&quot; width=&quot;617&quot; height=&quot;500&quot;/&gt;&lt;/p&gt;

&lt;p&gt;将getAge()和age()方法以及isAge()注释掉后，调用了_age()方法，验证了&lt;strong&gt;getAge &amp;gt; age &amp;gt; isAge &amp;gt; _age&lt;/strong&gt;！ &lt;/p&gt;
&lt;p&gt;如果四个方法都没有实现,此时&lt;span&gt;KVC会看&lt;strong&gt;accessInstanceVariablesDirectly方法,返回Yes代表可以直接查找成员变量,反之不能查找成员变量!&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;如果返回为Yes,会按照_key、_isKey、key、isKey成员属性顺序查找成员变量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;此时像上面的代码加入这四个成员变量,如下(前提&lt;strong&gt;accessInstanceVariablesDirectly方法返回Yes，去除四个方法）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @public&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt;&lt;span&gt; _age;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; _isAge;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; isAge;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加入了四个成员变量，控制器ViewController加入设置属性的四个值的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    _p-&amp;gt;_age = &lt;span&gt;11&lt;/span&gt;&lt;span&gt;;
    _p&lt;/span&gt;-&amp;gt;_isAge = &lt;span&gt;12&lt;/span&gt;&lt;span&gt;;
    _p&lt;/span&gt;-&amp;gt;age = &lt;span&gt;13&lt;/span&gt;&lt;span&gt;;
    _p&lt;/span&gt;-&amp;gt;isAge = &lt;span&gt;14&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;观察成员变量的查找顺序！验证&lt;strong&gt;_key、_isKey、key、isKey&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409215431257-1544007999.jpg&quot; alt=&quot;&quot; width=&quot;592&quot; height=&quot;311&quot;/&gt;&lt;/p&gt;

&lt;p&gt; ZXYPerson有四个成员变量，当向着上面代码书写，运行代码结论是11，对应着_age这个成员变量，所以优先取值_age！当将 _age成员变量注释掉以及赋值注释掉后&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409215916379-1402059856.jpg&quot; alt=&quot;&quot; width=&quot;589&quot; height=&quot;310&quot;/&gt;&lt;/p&gt;

&lt;p&gt;发现运行结果为12，对应的结果时_isAge， 得出结论 _age &amp;gt; _isAge！ 继续将_isAge成员变量注释掉以及赋值_isAge如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409220141121-1895474125.jpg&quot; alt=&quot;&quot; width=&quot;581&quot; height=&quot;306&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 发现运行结果为13，对应的结果时age， 得出结论 _age &amp;gt; _isAge &amp;gt; age！ 继续将age成员变量注释掉以及赋值age如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409220300212-992999368.jpg&quot; alt=&quot;&quot; width=&quot;569&quot; height=&quot;316&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 发现运行结果为14，对应的结果时isAge， 得出结论 _age &amp;gt; _isAge &amp;gt; age &amp;gt; isAge！ 继续将isAge成员变量注释掉以及赋值isAge如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1305302/202004/1305302-20200409220420906-1122006888.jpg&quot; alt=&quot;&quot; width=&quot;556&quot; height=&quot;308&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 如果都注释掉，会报异常valueForUndefinedKey错误！&lt;/p&gt;
&lt;p&gt;以上就是&lt;strong&gt;valueForKey&lt;/strong&gt;&lt;strong&gt;的取值所有过程,希望大家再看看上述图回顾KVC如何取值！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;上述就是KVC的基本内容，希望对大家有所帮助，可以关注博客会实时更新，谢谢！！！&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 09 Apr 2020 14:10:00 +0000</pubDate>
<dc:creator>国孩</dc:creator>
<og:description>今天趁着项目bug修复完了，来讲解一下OC知识的另一个技术点-KVC！针对KVC，讲解两个知识点 通过KVC修改属性会触发KVO么？ KVC的赋值过程是怎样的？原理是什么？ KVC的取值过程是怎样的？</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/guohai-stronger/p/12663910.html</dc:identifier>
</item>
<item>
<title>深入解读ES6系列（三） - DDDZ</title>
<link>http://www.cnblogs.com/Three-Z/p/12669748.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Three-Z/p/12669748.html</guid>
<description>&lt;div id=&quot;cnblogs_post_description&quot; readability=&quot;35&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/04/09/GIC2TI.jpg&quot; class=&quot;desc_img&quot;/&gt; 哈喽小伙伴们，爱说‘废’话的Z又回来了，欢迎来到Super IT曾的博客时间，上一节说了函数，解构赋值和数组的五大将，这一节我们继续我们知识的海洋，一起奋斗不秃头！不足的欢迎提问留言。今天又上热门了，连续两篇哈哈哈很开心，我估摸着这一个系列都上那就太爽了，稳住不能飘，基础知识搞扎实才是我们的最终目的，当然我的目的就是搜刮各路粉丝哈哈顺便骗赞，开个玩笑哈哈，最主要的是能够加深印象掌握基础，或许直接罗列出知识点是简单粗暴也干脆说实话我也喜欢，但是过两天你铁定忘了，这就是为啥我们的标题是深入解读的含义，学习嘛就要找我这种，又帅又有才华还能讲段子，讲着讲着知识就掌握了，好了，废话说了这么多，上主菜。&lt;/div&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;150.43669464476&quot;&gt;

&lt;ul&gt;&lt;li&gt;哈喽小伙伴们，爱说‘废’话的Z又回来了，欢迎来到Super IT曾的博客时间，上一节说了函数，解构赋值和数组的五大将，这一节我们继续我们知识的海洋，一起奋斗不秃头！不足的欢迎提问留言。&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200409110035287.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/li&gt;
&lt;li&gt;今天又上热门了，连续两篇哈哈哈很开心，我估摸着这一个系列都上那就太爽了，稳住不能飘，基础知识搞扎实才是我们的最终目的，当然我的目的就是搜刮各路粉丝哈哈顺便骗赞，开个玩笑哈哈，最主要的是能够加深印象掌握基础，或许直接罗列出知识点是简单粗暴也干脆说实话我也喜欢，但是过两天你铁定忘了，这就是为啥我们的标题是深入解读的含义，学习嘛就要找我这种，又帅又有才华还能讲段子，讲着讲着知识就掌握了，好了，废话说了这么多，上主菜。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;敲黑板&quot;&gt;敲黑板&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;字符串两个重点：&lt;br/&gt;1.多了两个新方法startsWith，endsWith&lt;br/&gt;2.字符串模板，连接字符串&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;两个新方法&quot;&gt;两个新方法&lt;/h2&gt;
&lt;p&gt;这两个真的超级简单，看代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
        let a = &quot;https://www.cnblogs.com/Three-Z/&quot;;
        if(a.startsWith(&quot;https:&quot;)){
                console.log(&quot;这是一个加密的网址&quot;)
                if(a.endsWith(&quot;Three-Z/&quot;)){
                        console.log(&quot;这是老曾博客园安全的网址&quot;)
                }
        }else{
                alert(&quot;啥啥也不是&quot;)
        }       
&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;哈哈有没有强行植入推销的感觉，当然endsWith也可用来直接判断文件类型，这里懂怎么用就行哈哈，返回布尔值那是必然。&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200409145125597.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;字符串模板&quot;&gt;字符串模板&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;例子一个字符串“abc”，在a后面插入一个12，怎么做？&lt;img src=&quot;https://img-blog.csdnimg.cn/20200409145544379.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
        let a = 12;
        alert(`a${a}bc`)
&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;是不是简单明了，很简单吧，不过注意使用的是`符号，也就是挨着键盘横着一排的数字1的左边那个，我们叫它反引号，要插入的内容${}包裹起来就成，美元嘛，有钱能使鬼推磨，所以只要你使用这个，想插哪里插哪里，想插什么插什么，而且反引号里面还可以折行，就更方便了嘛。&lt;/li&gt;
&lt;li&gt;说起来我前段时间用的最多的好像是带参数的跳转链接的时候，这样在跳转新的页面就不用再去向服务器发送请求要数据了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;类、构造器&quot;&gt;类、构造器&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript&quot;&gt;面向对象oop&lt;/a&gt;，不知道这个或者不清楚的同学，老规矩点开去补补课再回来继续学习，或者你想跟着学了再去看也可，但是一定要去看oop，这个很重要的，划重点要考的。这里我就先上代码了，不然细说的话可能要写一大篇博客都可能讲不完。&lt;/li&gt;
&lt;li&gt;示例：用oop的方式弹出用户名和密码：&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200409151653103.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200409151703309.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
        function User(name,pass){
                this.name = name;
                this.pass = pass;
        }
        User.prototype.showName = function(){
                alert(this.name);
        }
        User.prototype.showPass = function(){
                alert(this.pass)
        }
        var user = new User(&quot;DDDZ&quot;,&quot;123456&quot;)
        user.showName();
        user.showPass();
&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;没问题这样当然出的来，但是呢？User在这里是一个构造函数吧？是一个类吧？对都没问题但是你要给Java啊C++啊的兄弟说，诶我们构造函数和类是一个，哇老哥绝对是难以言表的眼神看着你哈哈哈。不过时代这么久我们也要像java一哥靠齐，现在有了class和constructor（构造器），来改代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
        class User{
                constructor(name,pass){
                        this.name = name;
                        this.pass = pass;
                }
                showName(){
                        alert(this.name)
                }
                showPass(){
                        alert(this.pass)
                }
        }       
        var user = new User(&quot;DDDZ&quot;,&quot;123456&quot;)
        user.showName();
        user.showPass();
&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样的优点是啥？构造和类分开了、方法也终于不用外挂了。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;现在来提个问，面向对象最有价值的地方，你觉得是啥？开放式答案哈，可以想想。然后我的感觉呢，就是接下来要说的东西~&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;继承&quot;&gt;继承&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;老规矩&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;JavaScript继承&lt;/a&gt;知识不熟练的，乖乖去隔壁班哈，就不细说了，至少最基础的要知道，简单说俗一点就是儿子继承爸爸的东西。&lt;/li&gt;
&lt;li&gt;那我们继续哇，比如我们在原来的代码基础上加一个VIP用户，他有一个自己的等级，最后通过继承显示他的名字密码和等级怎么实现呢现在？留个思考哈，会JS继承的可以自己想想原来怎么实现的反正真的还挺麻烦，这里直接整爽的代码。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;extends和super&quot;&gt;extends和super&lt;/h3&gt;
&lt;p&gt;先上硬菜：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
        class User{
                constructor(name,pass){
                        this.name = name;
                        this.pass = pass;
                }
                showName(){
                        alert(this.name)
                }
                showPass(){
                        alert(this.pass)
                }
        }       
        class VipUser extends User{
                constructor(name,pass,level){
                        super(name,pass)
                        this.level = level
                }
                showLevel(){
                        alert(this.level)
                }
        }
        var user = new VipUser(&quot;DDDZ&quot;,&quot;123456&quot;,3)
        user.showName();
        user.showPass();
        user.showLevel();
&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;是不是简单清晰明了，一目了然。&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200409155645792.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;这里的User就是VipUser的爸爸，儿子继承他的name和pass，说奇怪一点就像是继承遗产的感觉，当然除了继承的，这里的showLevel就是儿子自己的东西，要什么就用什么就行了。&lt;/p&gt;
&lt;h2 id=&quot;面向对象的应用&quot;&gt;面向对象的应用&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;这里先卖个关子，应用上小demo也没啥太大的意义，在我回归的那篇博客有写嘛，答应了要加更VUE和React项目的，框架里面用的就很多啦，那个时候再来具体的体会oop的用法。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;json是不是很亲切呢？亲不亲切一回事，接下来我们就说json的两个事情，看你知不知：&lt;br/&gt;1.json对象： json &amp;lt;=&amp;gt; 字符串 (stringify与parse的使用)&lt;br/&gt;2.json的简写：
&lt;ul&gt;&lt;li&gt;名字一样简写 key和value值一样留一个&lt;/li&gt;
&lt;li&gt;方法简写 ：function一块删&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;记住这两句话哈，咱们开始啦~&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;stringify与parse&quot;&gt;stringify与parse&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;首先我们来思考一个问题，给一个网址拼接一个json，怎么做？瞅瞅下面哪个代码合理你的？&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
        // 1
        let json = {name:&quot;DDDZ&quot;,value:&quot;博客园地址&quot;};
        let url = &quot;https://www.cnblogs.com/Three-Z?data=&quot;+json
        alert(url)
        
        //2
        let json = {name:&quot;DDDZ&quot;,value:&quot;博客园地址&quot;};
        let url = &quot;https://www.cnblogs.com/Three-Z?data=&quot;+JSON.stringify(json)
        alert(url)

        //3
        let json = {name:&quot;DDDZ&quot;,value:&quot;博客园地址&quot;};
        let url = &quot;https://www.cnblogs.com/Three-Z?data=&quot;+encodeURIComponent(JSON.stringify(json))
        alert(url)
&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;三块代码你依次执行，每次只跑一块，我这里演示，所以把仨凑一起的，这时你发现2中多了个stringify，这个是什么呢？其实就是字符串化也就是常说的串行化，这里就实现了json=&amp;gt;string，如图你可以打印看看，至于第三步encodeURIComponent()是什么来来来，挪挪地儿，&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent&quot;&gt;encodeURIComponent的详细使用&lt;/a&gt;。让我放出我的三段代码一次的执行结果你看看和你预期的一样不一样~&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200409185705706.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200409185435783.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200409185359760.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200409185500502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1oyNjk1NzE2Mjc=,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;好了stringify到这里就说的差不多了，下面我们来说说json的解析parse。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;来看看这一段代码你觉得解析出来是什么？&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
        let str = &quot;{a:12, b:5, c:'abc'}&quot;;
        let json = JSON.parse(str)
        console.log((json))
&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你能把打印结果打印出来？我就把es6吃了哈哈，当然报错。&lt;br/&gt;我们json的标准写法两句话：1.只能使用双引号。2.所有名字都必须用引号包起来，比如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{a:'abc', b:5}               ×
{“a”:&quot;abc&quot;, &quot;b&quot;:5}          √
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所以我们来改代码&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
        let str = '{&quot;a&quot;:12, &quot;b&quot;:5, &quot;c&quot;:&quot;abc&quot;}';
        let json = JSON.parse(str)
        console.log((json))
&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当然也就成功的实现了string =&amp;gt; json的转变&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200409204754451.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;json的简写&quot;&gt;json的简写&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;啊，写了这么多有点小累，咱就直接干了好吧，废话下次再吹，我也给你们直击痛处，json赋值并输出，看以前怎么做的，这样肯定是可以的：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
        let a = 12;
        let b = 5;
        let json = {a:a, b:b};
        console.log(json)
&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020040920560493.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;但是现在我们说简写，这里注意啦，偷懒来了，json里面名字和值一样的时候你可以只写一个，这一行代码直接变成：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;let json = {a, b};
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;方法简写一样的直接干：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
        //简写前
        let json = {
                a:12,
                show:function(){
                        alert(this.a);
                }
        }
        json.show();
        //简写后
        let json = {
                a:12,
                show(){ //和es6面向对象方法是不是一样的
                        alert(this.a);
                }
        }
        json.show();
&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样就完事儿~&lt;br/&gt;———————————————————————分割线——————&lt;br/&gt;都看到这里了，只能说明一点，咱俩真的真的真的很有缘分啊！不点个赞再走嘛，😊😀，顺手加个关注嘛，偷偷收藏我博文的小可爱我后台看得到的嘛，点个赞给老曾支持支持，不出意外接下来我一直都在哈哈哈，学知识写博客不着急，基础打好，项目直接上手6到飞起。&lt;/p&gt;
&lt;p&gt;下节说Promise，gengenerator及之后的内容&lt;/p&gt;
&lt;p&gt;放上我的，&lt;a href=&quot;https://www.cnblogs.com/Three-Z&quot;&gt;博客园&lt;/a&gt;，主要博客&lt;a href=&quot;https://blog.csdn.net/Z269571627&quot;&gt;CSDN&lt;/a&gt;，&lt;a href=&quot;https://github.com/269571627/MyGit/tree/web&quot;&gt;GitHub&lt;/a&gt;，&lt;a href=&quot;http://pipe.b3log.org/blogs/DDDZ&quot;&gt;pipe&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 09 Apr 2020 13:35:00 +0000</pubDate>
<dc:creator>DDDZ</dc:creator>
<og:description>ES6字符串 哈喽小伙伴们，爱说‘废’话的Z又回来了，欢迎来到Super IT曾的博客时间，上一节说了函数，解构赋值和数组的五大将，这一节我们继续我们知识的海洋，一起奋斗不秃头！不足的欢迎提问留言。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/Three-Z/p/12669748.html</dc:identifier>
</item>
<item>
<title>java应用诊断和在线debug利器bistoury介绍与在K8S环境使用 - JadePeng</title>
<link>http://www.cnblogs.com/xiaoqi/p/Bistoury.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoqi/p/Bistoury.html</guid>
<description>&lt;p&gt;`Bistoury` 是去哪儿网开源的一个对应用透明，无侵入的java应用诊断工具，本文介绍了Bistoury基本使用以及如何在K8S环境集成使用。&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;292.76313935466&quot;&gt;
&lt;hr/&gt;&lt;h2 id=&quot;bistoury介绍&quot;&gt;Bistoury介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Bistoury&lt;/code&gt; 是去哪儿网开源的一个对应用透明，无侵入的java应用诊断工具，用于提升开发人员的诊断效率和能力，可以让开发人员无需登录机器或修改系统，就可以从日志、内存、线程、类信息、调试、机器和系统属性等各个方面对应用进行诊断，提升开发人员诊断问题的效率和能力。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Bistoury&lt;/code&gt; 集成了Alibaba开源的&lt;a href=&quot;https://github.com/alibaba/arthas&quot;&gt;arthas&lt;/a&gt;和唯品会开源的&lt;a href=&quot;https://github.com/vipshop/vjtools&quot;&gt;vjtools&lt;/a&gt;，因此arthas和vjtools相关功能都可以在&lt;code&gt;Bistoury&lt;/code&gt;中使用。&lt;br/&gt;Arthas和vjtools通过命令行或类似的方式使用，Bistoury在保留命令行界面的基础上，还对很多命令提供了图形化界面，方面用户使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Bistoury&lt;/code&gt; 英文解释是外科手术刀，含义也就不言而喻了。&lt;/p&gt;
&lt;h2 id=&quot;screenshots&quot;&gt;Screenshots&lt;/h2&gt;
&lt;p&gt;通过命令行界面查看日志，使用arthas和vjtools的各项功能&lt;br/&gt;&lt;img src=&quot;https://gitee.com/jadepeng/bistoury/raw/master/docs/image/console.png&quot; alt=&quot;console&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在线debug，在线应用调试神器&lt;br/&gt;&lt;img src=&quot;https://gitee.com/jadepeng/bistoury/raw/master/docs/image/debug_panel.png&quot; alt=&quot;debug&quot;/&gt;&lt;/p&gt;
&lt;p&gt;线程级cpu监控，帮助你掌握线程级cpu使用率&lt;br/&gt;&lt;img src=&quot;https://gitee.com/jadepeng/bistoury/raw/master/docs/image/jstack.png&quot; alt=&quot;jstack_dump&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在web界面查看JVM运行信息，以及各种其它信息&lt;br/&gt;&lt;img src=&quot;https://gitee.com/jadepeng/bistoury/raw/master/docs/image/jvm.png&quot; alt=&quot;jvm&quot;/&gt;&lt;/p&gt;
&lt;p&gt;动态给方法添加监控&lt;br/&gt;&lt;img src=&quot;https://gitee.com/jadepeng/bistoury/raw/master/docs/image/monitor.png&quot; alt=&quot;monitor&quot;/&gt;&lt;/p&gt;
&lt;p&gt;线程dump&lt;br/&gt;&lt;img src=&quot;https://gitee.com/jadepeng/bistoury/raw/master/docs/image/thread_dump.png&quot; alt=&quot;thread_dump&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;bistoury架构分析&quot;&gt;Bistoury架构分析&lt;/h2&gt;
&lt;p&gt;Bistoury核心组件包含agent，proxy，ui：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;agent ： 与需要诊断的应用部署到一起，负责具体的诊断命令执行，通过域名连接proxy&lt;/li&gt;
&lt;li&gt;proxy：agent的代理，agent启动时会通过ws和proxy连接注册，proxy可以部署多个，推荐使用域名负载&lt;/li&gt;
&lt;li&gt;ui：ui提供图形化和命令行界面，接收从用户传来的命令，传递命令给proxy，接收从proxy传来的结果并展示给用户。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/jadepeng/pic/raw/master/pic/2020/4/9/1586431812716.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一次命令执行的数据流向为 ui -&amp;gt; proxy -&amp;gt; agent -&amp;gt; proxy -&amp;gt; ui&lt;/p&gt;
&lt;p&gt;具体分析一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;proxy 先启动，将自己地址注册到zk&lt;/li&gt;
&lt;li&gt;agent通过域名访问proxy，随机分配到一个proxy，在proxy注册自己&lt;/li&gt;
&lt;li&gt;UI 访问一个具体的应用时，通过zk拿到所有的proxy，然后依次检查app对应的agent是否在该proxy，如果在，web网页连接这个proxy&lt;/li&gt;
&lt;li&gt;web上输入一个命令:web-&amp;gt;proxy-&amp;gt;agent-&amp;gt;proxy-&amp;gt;ui&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;具体参见 &lt;a href=&quot;https://github.com/qunarcorp/bistoury/blob/master/docs/cn/design/design.md&quot;&gt;https://github.com/qunarcorp/bistoury/blob/master/docs/cn/design/design.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;bistoury原理分析： &lt;a href=&quot;https://www.jianshu.com/p/f7202e490156&quot;&gt;https://www.jianshu.com/p/f7202e490156&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总结下就是使用类似skywalking那样的agent技术，来监测和协助运行在JVM上的程序。&lt;/p&gt;
&lt;h2 id=&quot;bistoury快速开始&quot;&gt;Bistoury快速开始&lt;/h2&gt;
&lt;p&gt;官方有一个快速开始文档： &lt;a href=&quot;https://github.com/qunarcorp/bistoury/blob/master/docs/cn/quick_start.md&quot;&gt;https://github.com/qunarcorp/bistoury/blob/master/docs/cn/quick_start.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以下载release包快速启动，就可以体验了。&lt;/p&gt;
&lt;p&gt;首先我们将快速启动包 bistoury-quick-start.tar.gz 拷贝到想要安装的位置。&lt;/p&gt;
&lt;p&gt;然后解压启动包：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;tar -zxvf bistoury-quick-start.tar.gz
cd bistoury
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后是启动 Bistoury，因为 Bistoury 会用到 jstack 等操作，为了保证所有功能可用，需要使用和待诊断 JAVA 应用相同的用户启动。&lt;/p&gt;
&lt;p&gt;假设应用进程 id 为 1024&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果应用以本人用户启动，可以直接运行&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;./quick_start.sh -p 1024 start
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;如果应用以其它帐号启动，比如 tomcat，需要指定一下用户然后运行&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;sudo -u tomcat ./quick_start.sh -p 1024 start
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;停止运行&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;./quick_start.sh stop
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;bistoury-在docker运行&quot;&gt;Bistoury 在docker运行&lt;/h2&gt;
&lt;p&gt;官方的git仓库里，有一个docker分支，翻阅后找到相关文档。&lt;/p&gt;
&lt;p&gt;官方的快速启动命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash
#创建网络
echo &quot;start create network&quot;
docker network create --subnet=172.19.0.0/16 bistoury
#mysql 镜像
echo &quot;start run mysql image&quot;
docker run --name mysql -p 3307:3306 -e MYSQL_ROOT_PASSWORD=root -d -i --net bistoury --ip 172.19.0.7  registry.cn-hangzhou.aliyuncs.com/bistoury/bistoury-db
#zk 镜像
echo &quot;start run zk image&quot;
docker run -d -p 2181:2181 -it --net bistoury --ip 172.19.0.2 registry.cn-hangzhou.aliyuncs.com/bistoury/zk:latest
sleep 30
#proxy 镜像
echo &quot;start run proxy module&quot;
docker run -d -p 9880:9880 -p 9881:9881 -p 9090:9090 -i --net bistoury --ip 172.19.0.3 registry.cn-hangzhou.aliyuncs.com/bistoury/bistoury-proxy --real-ip $1 --zk-address 172.19.0.2:2181 --proxy-jdbc-url jdbc:mysql://172.19.0.7:3306/bistoury
#ui 镜像
echo &quot;start run ui module&quot;
docker run -p 9091:9091  -it -d --net bistoury --ip 172.19.0.4 registry.cn-hangzhou.aliyuncs.com/bistoury/bistoury-ui --zk-address 172.19.0.2:2181 --ui-jdbc-url jdbc:mysql://172.19.0.7:3306/bistoury
#boot 镜像
echo &quot;start run demo application&quot;
docker  run -it -d  -p 8686:8686 -i --net bistoury --ip 172.19.0.5 registry.cn-hangzhou.aliyuncs.com/bistoury/bistoury-demo --proxy-host $1:9090
docker  run -it -d  -p 8687:8686 -i --net bistoury --ip 172.19.0.6 registry.cn-hangzhou.aliyuncs.com/bistoury/bistoury-demo --proxy-host $1:9090

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的命令不能直接运行，&lt;code&gt;$1&lt;/code&gt;是需要替换成当前服务器IP，然后再运行就OK了。&lt;/p&gt;
&lt;h2 id=&quot;bistoury-在生产环境运行&quot;&gt;Bistoury 在生产环境运行&lt;/h2&gt;
&lt;p&gt;官方推荐部署方式：&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;ui 独立部署，推荐部署在多台机器，并提供独立的域名&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;proxy 独立部署，推荐部署在多台机器，并提供独立的域名&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;agent 需要和应用部署在同一台机器上。推荐在测试环境全环境自动部署，线上环境提供单机一键部署，以及应用下所有机器一键部署&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;独立的应用中心，管理所有功能内部应用和机器信息，这是一个和 Bistoury 相独立的系统，Bistoury 从中拿到不断更新的应用和机器信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这里有个关键的点，应用中心，Bistoury内置了一个简单的应用中心，Bistoury里代码对应bistoury-application，ui和proxy都通过这个工程获取应用信息，官方默认实现了一个mysql版本的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/jadepeng/pic/raw/master/pic/2020/4/9/1586433126733.png&quot; alt=&quot;application&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用mysql的缺点是，你需要ui界面里手动维护应用以及应用的服务器，做个demo还OK，生产环境肯定不行。更优雅的方式是，用户系统应该在启动时自动注册到注册中心上，汇报自己的应用、机器信息（ip、域名等）、端口等信息。当然这个对大部分微服务架构来说，注册中心是标配的，因此实现一套bistoury-application-api接口即可。&lt;/p&gt;
&lt;h2 id=&quot;bistoury-application-k8sbistoury-on-k8s&quot;&gt;bistoury-application-k8s(Bistoury on K8S)&lt;/h2&gt;
&lt;p&gt;我们项目组所有的应用都部署在K8S环境，因此要实现一个&lt;code&gt;bistoury-application-k8s&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;拷贝&lt;code&gt;bistoury-application-mysql&lt;/code&gt;项目，建立&lt;code&gt;bistoury-application-k8s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;简单对应下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一个应用对应一个deployment，对应一个application&lt;/li&gt;
&lt;li&gt;一个deployment里有n个pod，对应applicationServer&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;所以，我们只需要调用调用K8S API 获取deployment和pod即可。&lt;/p&gt;
&lt;p&gt;首先引入相关jar包：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;   &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.kubernetes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;client-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;8.0.0&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;初始化ApiClient&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;                       ApiClient defaultClient = Configuration.getDefaultApiClient();
            defaultClient.setBasePath(k8sApiServer);
            ApiKeyAuth BearerToken = (ApiKeyAuth) defaultClient.getAuthentication(&quot;BearerToken&quot;);
            BearerToken.setApiKey(k8sToken);
            BearerToken.setApiKeyPrefix(&quot;Bearer&quot;);
            defaultClient.setVerifyingSsl(false);
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;获取deployment&quot;&gt;获取deployment&lt;/h3&gt;
&lt;p&gt;区分下是获取所有namespace，还是获取指定的namespace&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;   private List&amp;lt;V1Deployment&amp;gt; getDeployments() throws ApiException {
        AppsV1Api appsV1Api = new AppsV1Api(k8SConfiguration.getApiClient());
        return k8SConfiguration.isAllNamespace()
                ? appsV1Api.listDeploymentForAllNamespaces(false, null, null, null, 0, null, null, 120, false).getItems()
                : getNamespacesDeployments(k8SConfiguration.getAllowedNamespace());
    }

    List&amp;lt;V1Deployment&amp;gt; getNamespacesDeployments(List&amp;lt;String&amp;gt; namespaces) {
        AppsV1Api appsV1Api = new AppsV1Api(k8SConfiguration.getApiClient());
        List&amp;lt;V1Deployment&amp;gt; deploymentList = new ArrayList&amp;lt;&amp;gt;();
        for (String nameSpace : namespaces) {
            try {
                deploymentList.addAll(appsV1Api.listNamespacedDeployment(nameSpace, null, null, null, null, null, 0, null, 120, false).getItems());
            } catch (ApiException e) {
                logger.error(&quot;get &quot; + nameSpace + &quot;'s deployment error&quot;, e);
            }
        }
        return deploymentList;
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;转换为application：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;    private List&amp;lt;Application&amp;gt; getApplications(List&amp;lt;V1Deployment&amp;gt; applist) {
        return applist.stream().map(this::getApplication).collect(Collectors.toList());
    }

    private Application getApplication(V1Deployment deployment) {
        Application application = new Application();
        application.setCreateTime(deployment.getMetadata().getCreationTimestamp().toDate());
        application.setCreator(deployment.getMetadata().getName());
        application.setGroupCode(deployment.getMetadata().getNamespace());
        application.setName(deployment.getMetadata().getName());
        application.setStatus(1);
        application.setCode(getAppCode(deployment.getMetadata().getNamespace(), deployment.getMetadata().getName()));
        return application;
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;获取pod&quot;&gt;获取pod&lt;/h3&gt;
&lt;p&gt;获取pod相对麻烦点，需要先获取到V1Deployment，拿到部署的lableSelector，然后根据lableSelector选择pod：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt; public List&amp;lt;AppServer&amp;gt; getAppServerByAppCode(final String appCode) {
        Preconditions.checkArgument(!Strings.isNullOrEmpty(appCode), &quot;app code cannot be null or empty&quot;);

        try {
            V1Deployment deployment = getDeployMent(appCode);
            String nameSpace = appCode.split(APPCODE_SPLITTER)[0];
            Map&amp;lt;String, String&amp;gt; labelMap = Objects.requireNonNull(deployment.getSpec()).getSelector().getMatchLabels();
            StringBuilder lableSelector = new StringBuilder();
            labelMap.entrySet().stream().forEach(e -&amp;gt; {
                if (lableSelector.length() &amp;gt; 0) {
                    lableSelector.append(&quot;,&quot;);
                }
                lableSelector.append(e.getKey()).append(&quot;=&quot;).append(e.getValue());
            });

            CoreV1Api coreV1Api = new CoreV1Api(k8SConfiguration.getApiClient());
            V1PodList podList = coreV1Api.listNamespacedPod(nameSpace, null, false, null,
                    null, lableSelector.toString(), 200, null, 600, false);

            return podList.getItems().stream().map(pod -&amp;gt; {
                AppServer server = new AppServer();
                server.setAppCode(appCode);
                server.setHost(pod.getMetadata().getName());
                server.setIp(pod.getStatus().getPodIP());
                server.setLogDir(k8SConfiguration.getAppLogPath());
                server.setAutoJMapHistoEnable(true);
                server.setAutoJStackEnable(true);
                server.setPort(8080);
                return server;
            }).collect(Collectors.toList());

        } catch (ApiException e) {
            logger.error(&quot;get deployment's pod  error&quot;, e);
        }

        return null;

    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后，修改ui和proxy工程，将原来的mysql替换为k8s：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/jadepeng/pic/raw/master/pic/2020/4/9/1586434230879.png&quot; alt=&quot;修改pom&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;应用引入bistoury-agent&quot;&gt;应用引入bistoury agent&lt;/h2&gt;
&lt;p&gt;这块相对比较容易：&lt;/p&gt;
&lt;p&gt;在需要调试的应用的Dockerfile里增加：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-dockerfile&quot;&gt;COPY  --from=hub.xfyun.cn/abkdev/bistoury-agent:2.0.11  /home/q/bistoury  /opt/bistoury
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后修改应用的启动脚本，在最前面增加：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;BISTOURY_APP_LIB_CLASS=&quot;org.springframework.web.servlet.DispatcherServlet&quot;

# default proxy
PROXY=&quot;bistoury-bistoury-proxy.incubation:9090&quot;
AGENT_JAVA_HOME=&quot;/usr/local/openjdk-8/&quot;

# env
if [[ -n $PROXY_HOST ]]; then
    PROXY=$PROXY_HOST
fi

TEMP=`getopt -o : --long proxy-host:,app-class:,agent-java-home: -- &quot;$@&quot;`

eval set -- &quot;$TEMP&quot;

while true; do
  case &quot;$1&quot; in
    --proxy-host )
      PROXY=&quot;$2&quot;; shift 2 ;;
    --app-class )
      BISTOURY_APP_LIB_CLASS=&quot;$2&quot;; shift 2 ;;
    --agent-java-home )
      AGENT_JAVA_HOME=&quot;$2&quot;; shift 2 ;;
    * ) break ;;
  esac
done


echo &quot;proxy host: &quot;$PROXY_HOST
echo &quot;app class: &quot;$BISTOURY_APP_LIB_CLASS
echo &quot;agent java home: &quot;$AGENT_JAVA_HOME

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在最后面增加：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;APP_PID=`$AGENT_JAVA_HOME/bin/jps -l|awk '{if($2!=&quot;sun.tools.jps.Jps&quot;){print $1 ;{exit}} }'`

echo &quot;app pid: &quot;$APP_PID

/opt/bistoury/agent/bin/bistoury-agent.sh -j $AGENT_JAVA_HOME -p $APP_PID -c $BISTOURY_APP_LIB_CLASS -s $PROXY -f start
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;集成测试&quot;&gt;集成测试&lt;/h2&gt;
&lt;p&gt;部署一个测试应用 agent-debug-demo，部署到jx namespace：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/jadepeng/pic/raw/master/pic/2020/4/9/1586434610449.png&quot; alt=&quot; agent-debug-demo&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;{
  &quot;kind&quot;: &quot;Deployment&quot;,
  &quot;apiVersion&quot;: &quot;extensions/v1beta1&quot;,
  &quot;metadata&quot;: {
    &quot;name&quot;: &quot;agent-debug-demo&quot;,
    &quot;namespace&quot;: &quot;jx&quot;,
    &quot;annotations&quot;: {
      &quot;deployment.kubernetes.io/revision&quot;: &quot;2&quot;
    }
  },
  &quot;spec&quot;: {
    &quot;replicas&quot;: 1,
    &quot;selector&quot;: {
      &quot;matchLabels&quot;: {
        &quot;app&quot;: &quot;agent-debug-demo&quot;,
        &quot;draft&quot;: &quot;draft-app&quot;
      }
    },
    &quot;template&quot;: {
      &quot;metadata&quot;: {
        &quot;creationTimestamp&quot;: null,
        &quot;labels&quot;: {
          &quot;app&quot;: &quot;agent-debug-demo&quot;,
          &quot;draft&quot;: &quot;draft-app&quot;
        }
      },
      &quot;spec&quot;: {
        &quot;containers&quot;: [
          {
            &quot;name&quot;: &quot;springboot-rest-demo&quot;,
            &quot;image&quot;: &quot;hub.xxx.cn/abkdev/springboot-rest-demo:dev-113&quot;,
            &quot;ports&quot;: [
              {
                &quot;containerPort&quot;: 8080,
                &quot;protocol&quot;: &quot;TCP&quot;
              }
            ],
            &quot;env&quot;: [
              {
                &quot;name&quot;: &quot;SPRING_PROFILES_ACTIVE&quot;,
                &quot;value&quot;: &quot;dev&quot;
              },
              {
                &quot;name&quot;: &quot;PROXY_HOST&quot;,
                &quot;value&quot;: &quot;$PROXY_HOST:9090&quot;
              }
            ],
            &quot;resources&quot;: {},
            &quot;terminationMessagePath&quot;: &quot;/dev/termination-log&quot;,
            &quot;terminationMessagePolicy&quot;: &quot;File&quot;,
            &quot;imagePullPolicy&quot;: &quot;IfNotPresent&quot;
          }
        ],
        &quot;restartPolicy&quot;: &quot;Always&quot;,
        &quot;terminationGracePeriodSeconds&quot;: 10,
        &quot;dnsPolicy&quot;: &quot;ClusterFirst&quot;,
        &quot;securityContext&quot;: {},
        &quot;schedulerName&quot;: &quot;default-scheduler&quot;
      }
    },
    &quot;strategy&quot;: {
      &quot;type&quot;: &quot;RollingUpdate&quot;,
      &quot;rollingUpdate&quot;: {
        &quot;maxUnavailable&quot;: 1,
        &quot;maxSurge&quot;: 1
      }
    },
    &quot;revisionHistoryLimit&quot;: 2147483647,
    &quot;progressDeadlineSeconds&quot;: 2147483647
  },
  &quot;status&quot;: {
    &quot;observedGeneration&quot;: 2,
    &quot;replicas&quot;: 1,
    &quot;updatedReplicas&quot;: 1,
    &quot;unavailableReplicas&quot;: 1,
    &quot;conditions&quot;: [
      {
        &quot;type&quot;: &quot;Available&quot;,
        &quot;status&quot;: &quot;True&quot;,
        &quot;lastUpdateTime&quot;: &quot;2020-04-09T01:32:42Z&quot;,
        &quot;lastTransitionTime&quot;: &quot;2020-04-09T01:32:42Z&quot;,
        &quot;reason&quot;: &quot;MinimumReplicasAvailable&quot;,
        &quot;message&quot;: &quot;Deployment has minimum availability.&quot;
      }
    ]
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;部署后：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/jadepeng/pic/raw/master/pic/2020/4/9/1586434889358.png&quot; alt=&quot;K8S Dashboard&quot;/&gt;&lt;/p&gt;
&lt;p&gt;打开ui，查看：&lt;/p&gt;
&lt;p&gt;应用名称显示为： namespace名称-部署名称&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/jadepeng/pic/raw/master/pic/2020/4/9/1586434848921.png&quot; alt=&quot;bistoury&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/jadepeng/pic/raw/master/pic/2020/4/9/1586434991429.png&quot; alt=&quot;ThreadDump&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在线调试：&lt;/p&gt;
&lt;p&gt;先选择应用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/jadepeng/pic/raw/master/pic/2020/4/9/1586435034455.png&quot; alt=&quot;选择应用&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击Debug，然后选择需要调试的类，&lt;/p&gt;
&lt;p&gt;测试工程源代码为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;@SpringBootApplication
@Controller
public class RestPrometheusApplication {

        @Autowired
        private MeterRegistry registry;

        @Autowired
        private Environment env;

        @GetMapping(path = &quot;/&quot;, produces = &quot;application/json&quot;)
        @ResponseBody
        public Map&amp;lt;String, Object&amp;gt; landingPage() {
                Counter.builder(&quot;mymetric&quot;).tag(&quot;foo&quot;, &quot;bar&quot;).register(registry).increment();
                String profile = &quot;default&quot;;
                if(env.getActiveProfiles().length &amp;gt; 0){
                        profile = env.getActiveProfiles()[0];
                }

                return singletonMap(&quot;hello&quot;, &quot;&quot;+ profile);
        }

        public static void main(String[] args) {
                SpringApplication.run(RestPrometheusApplication.class, args);
        }

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因此，我们输入RestPrometheusApplication筛选：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/jadepeng/pic/raw/master/pic/2020/4/9/1586435105776.png&quot; alt=&quot;选择Class&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后点击调试，可以看到，反编译出来了源代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/jadepeng/pic/raw/master/pic/2020/4/9/1586435149849.png&quot; alt=&quot;在线debug1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在landingPage最后一行加一个端点，然后点击添加端点，最后访问该POD对应的服务,该pod对应的ip是170.22.149.37，因此我们访问：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;curl http://170.22.149.37:8080
{&quot;hello&quot;:&quot;dev&quot;}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再回到UI，可以看到成员变量，局部变量和调用堆栈等信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/jadepeng/pic/raw/master/pic/2020/4/9/1586435287216.png&quot; alt=&quot;在线debug2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;well down！&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;7.3156342182891&quot;&gt;
&lt;p&gt;作者：Jadepeng&lt;br/&gt;出处：jqpeng的技术记事本--&lt;a href=&quot;http://www.cnblogs.com/xiaoqi&quot;&gt;http://www.cnblogs.com/xiaoqi&lt;/a&gt;&lt;br/&gt;您的支持是对博主最大的鼓励，感谢您的认真阅读。&lt;br/&gt;本文版权归作者所有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 09 Apr 2020 12:31:00 +0000</pubDate>
<dc:creator>JadePeng</dc:creator>
<og:description>`Bistoury` 是去哪儿网开源的一个对应用透明，无侵入的java应用诊断工具，本文介绍了Bistoury基本使用以及如何在K8S环境集成使用。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xiaoqi/p/Bistoury.html</dc:identifier>
</item>
</channel>
</rss>