<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>C#使用EF连接PGSql数据库 - wnxyz8023</title>
<link>http://www.cnblogs.com/wnxyz8023/p/10255524.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wnxyz8023/p/10255524.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;由于项目需要，使用到了PGSql数据库，说实话这是第一次接触并且听说PGSql(PostgreSQL)关系型数据库，之前一直使用的都是SqlServer，一头雾水的各种找资源，终于将PGSql与C#的EF连接起来，可以像使用SQLServer一样使用PGSql了。&lt;/p&gt;
&lt;p&gt;PGSql目前有一个pgAdmin4的管理工具，下载之后就可以直接访问我们的数据库了。&lt;a href=&quot;https://www.pgadmin.org/download/pgadmin-4-windows/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;PGAdmin4下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.为了演示方便，我们新建一个控制台程序，同时新建一个Entity的类库，后续添加实体模型使用。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;306&quot; data-height=&quot;339&quot;&gt;&lt;img title=&quot;项目大体框架&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12306588-410423e55a28fa84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/306/format/webp&quot; alt=&quot;项目大体框架&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/12306588-410423e55a28fa84.png&quot; data-original-width=&quot;306&quot; data-original-height=&quot;339&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;11613&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;2.我们点击工具--&amp;gt;&amp;gt;扩展和更新 --&amp;gt;&amp;gt; 安装PGSql所使用的扩展工具 NPGSql PostgreSql Integration扩展工具。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;748&quot; data-height=&quot;440&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12306588-3cc932bcf2ea83b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/748/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/12306588-3cc932bcf2ea83b5.png&quot; data-original-width=&quot;748&quot; data-original-height=&quot;440&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;76003&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;896&quot; data-height=&quot;610&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12306588-5825621285020deb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/896/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/12306588-5825621285020deb.png&quot; data-original-width=&quot;896&quot; data-original-height=&quot;610&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;85553&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;3.安装完成之后，我们就可以测试连接我们的pgSql数据库了。在工具--&amp;gt;&amp;gt;连接到数据库 我们在数据源 一行 点击更改按钮，就可以看到我们刚刚安装的PGsql扩展工具了。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;568&quot; data-height=&quot;466&quot;&gt;&lt;img title=&quot;更改数据源为PGSql&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12306588-5a6674ab9e2ea0e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/568/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/12306588-5a6674ab9e2ea0e0.png&quot; data-original-width=&quot;568&quot; data-original-height=&quot;466&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;48143&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;4.在操作界面 输入本地主机，和对应的数据库名称，以及 用户名和密码。点击测试连接，可以看到此处已经连接成功了。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;743&quot; data-height=&quot;693&quot;&gt;&lt;img title=&quot;连接PGSql数据库&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12306588-39bc8f25633ab95a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/743/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/12306588-39bc8f25633ab95a.png&quot; data-original-width=&quot;743&quot; data-original-height=&quot;693&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;88218&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;5.接着我们要在我们项目的Entity类库中添加以下两个引用 npgsql 和EntityFramework6.Npgsql。&lt;/p&gt;
&lt;p&gt;具体的添加方法-- 右键项目--管理NuGet包-- 输入名称 下载即可。&lt;/p&gt;
&lt;p&gt;在项目中添加相应的实体模型 &lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;671&quot; data-height=&quot;1087&quot;&gt;&lt;img title=&quot;添加引用和实体框架&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12306588-21dd3b90fd3a4be7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/671/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/12306588-21dd3b90fd3a4be7.png&quot; data-original-width=&quot;671&quot; data-original-height=&quot;1087&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;102735&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;添加完成之后，我们还要做一步操作就是在app.config 中添加如下黑色的配置信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;entityFramework&amp;gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &amp;lt;defaultConnectionFactory type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;       &amp;lt;parameters&amp;gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         &amp;lt;parameter value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mssqllocaldb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;       &amp;lt;/parameters&amp;gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &amp;lt;/defaultConnectionFactory&amp;gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &amp;lt;providers&amp;gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;       &amp;lt;provider invariantName=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Data.SqlClient&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;       &amp;lt;provider invariantName=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Npgsql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Npgsql.NpgsqlServices, EntityFramework6.Npgsql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &amp;lt;/providers&amp;gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;   &amp;lt;/entityFramework&amp;gt;
&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;&lt;strong&gt;&lt;span&gt;23&lt;/span&gt;   &amp;lt;system.data&amp;gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &amp;lt;DbProviderFactories&amp;gt;
&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;       &amp;lt;add name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Npgsql Data Provider&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; invariant=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Npgsql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; description=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Data Provider for PostgreSQL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Npgsql.NpgsqlFactory, Npgsql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     &amp;lt;/DbProviderFactories&amp;gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;   &amp;lt;/system.data&amp;gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意：若在实体信息添加那一步 即将选择表或视图时闪退，请确保你的项目中EntityFramework的版本是否低于或者高于EntityFramework6.Npgsql所要求的版本，否则会直接闪退掉的。我们只需要更改下对应的版本即可。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1201&quot; data-height=&quot;750&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12306588-7099fe3ece1f75f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/12306588-7099fe3ece1f75f6.png&quot; data-original-width=&quot;1201&quot; data-original-height=&quot;750&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;94593&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;最后，我们就可以在项目中使用EF实体对象来访问PGSql了。&lt;/p&gt;
&lt;p&gt;由于我也是第一次使用到PGsql数据库，目前也是个新手小白，遇到不明白的问题也会通过各种资源去解决，希望可以帮助到同样第一次或者以后可能接触到PGSql的朋友。&lt;/p&gt;
</description>
<pubDate>Fri, 11 Jan 2019 07:53:00 +0000</pubDate>
<dc:creator>wnxyz8023</dc:creator>
<og:description>前言 由于项目需要，使用到了PGSql数据库，说实话这是第一次接触并且听说PGSql(PostgreSQL)关系型数据库，之前一直使用的都是SqlServer，一头雾水的各种找资源，终于将PGSql与</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wnxyz8023/p/10255524.html</dc:identifier>
</item>
<item>
<title>容器中的JVM资源该如何被安全的限制？ - 民工哥</title>
<link>http://www.cnblogs.com/youkanyouxiao/p/10255504.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/youkanyouxiao/p/10255504.html</guid>
<description>&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java与Docker的结合，虽然更好的解决了application的封装问题。但也存在着不兼容，比如Java并不能自动的发现Docker设置的内存限制,CPU限制。&lt;/p&gt;
&lt;p&gt;这将导致JVM不能稳定服务业务！容器会杀死你JVM进程，而健康检查又将拉起你的JVM进程，进而导致你监控你的pod一天重启次数甚至能达到几百次。&lt;/p&gt;
&lt;p&gt;我们希望当Java进程运行在容器中时，java能够自动识别到容器限制，获取到正确的内存和CPU信息，而不用每次都需要在kubernetes的yaml描述文件中显示的配置完容器，还需要配置JVM参数。&lt;/p&gt;
&lt;p&gt;使用JVM MaxRAM参数或者解锁实验特性的JVM参数，升级JDK到10+，我们可以解决这个问题（也许吧~.~）。&lt;/p&gt;
&lt;p&gt;首先Docker容器本质是是宿主机上的一个进程，它与宿主机共享一个/proc目录，也就是说我们在容器内看到的/proc/meminfo，/proc/cpuinfo 与直接在宿主机上看到的一致，如下。&lt;/p&gt;
&lt;p&gt;Host&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;cat /proc/meminfo&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;MemTotal&lt;span&gt;:       &lt;span&gt;197869260 &lt;span&gt;kB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;MemFree&lt;span&gt;:         &lt;span&gt;3698100 &lt;span&gt;kB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;MemAvailable&lt;span&gt;:   &lt;span&gt;62230260 &lt;span&gt;kB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;容器&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;docker run -it --rm alpine cat /proc/meminfo&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;MemTotal&lt;span&gt;:       &lt;span&gt;197869260 &lt;span&gt;kB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;MemFree&lt;span&gt;:         &lt;span&gt;3677800 &lt;span&gt;kB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;MemAvailable&lt;span&gt;:   &lt;span&gt;62210088 &lt;span&gt;kB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;那么Java是如何获取到Host的内存信息的呢？没错就是通过/proc/meminfo来获取到的。&lt;/p&gt;
&lt;p&gt;默认情况下，JVM的Max Heap Size是系统内存的1/4，假如我们系统是8G，那么JVM将的默认Heap≈2G。&lt;/p&gt;
&lt;p&gt;Docker通过CGroups完成的是对内存的限制，而/proc目录是已只读形式挂载到容器中的，由于默认情况下Java 压根就看不见CGroups的限制的内存大小，而默认使用/proc/meminfo中的信息作为内存信息进行启动， 这种不兼容情况会导致，如果容器分配的内存小于JVM的内存，JVM进程会被理解杀死。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;内存限制不兼容&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;我们首先来看一组测试，这里我们采用一台内存为188G的物理机。&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;-0.5&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;#free -g&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;             total        used        free      shared  buff/cache   available&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;Mem&lt;span&gt;:            &lt;span&gt;188 &lt;span&gt;        &lt;span&gt;122 &lt;span&gt;          &lt;span&gt;1 &lt;span&gt;          &lt;span&gt;0 &lt;span&gt;         &lt;span&gt;64 &lt;span&gt;         &lt;span&gt;64&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;以下的测试中，我们将包含openjdk的hotspot虚拟机，IBM的openj9虚拟机。&lt;/p&gt;
&lt;p&gt;以下测试中，我们把正确识别到限制的jdk，称之为安全（即不会超出容器限制不会被kill），反之称之为危险。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;测试用例1(OPENJDK)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;这一组测试我们使用最新的openjdk8-12，给容器限制内存为4G，看JDK默认参数下的最大堆为多少？看看我们默认参数下多少版本的JDK是安全的&lt;/p&gt;
&lt;p&gt;命令如下，如果你也想试试看，可以用一下命令。&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;docker run -m &lt;span&gt;4GB &lt;span&gt; --rm  openjdk:&lt;span&gt;8&lt;span&gt;-jre-slim java  -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  openjdk:&lt;span&gt;9&lt;span&gt;-jre-slim java  -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  openjdk:&lt;span&gt;10&lt;span&gt;-jre-slim java -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  openjdk:&lt;span&gt;11&lt;span&gt;-jre-slim java -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  openjdk:&lt;span&gt;12 &lt;span&gt;java -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;OpenJDK8（并没有识别容器限制，26.67G） 危险&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;[root@xiaoke-test ~]# docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  openjdk:&lt;span&gt;8&lt;span&gt;-jre-slim java  -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;VM settings:&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Max&lt;span&gt;. &lt;span&gt;Heap &lt;span&gt;&lt;span&gt;Size &lt;span&gt;(&lt;span&gt;Estimated&lt;span&gt;): &lt;span&gt;26.67G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Ergonomics &lt;span&gt;&lt;span&gt;Machine &lt;span&gt;&lt;span&gt;Class&lt;span&gt;: server&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Using &lt;span&gt;VM: &lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Server &lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;openjdk version &lt;span&gt;&quot;1.8.0_181&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;Runtime &lt;span&gt;&lt;span&gt;Environment &lt;span&gt;(build &lt;span&gt;1.8&lt;span&gt;.&lt;span&gt;0_181&lt;span&gt;-&lt;span&gt;8u181&lt;span&gt;-b13-&lt;span&gt;2&lt;span&gt;~deb9u1-b13)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Server &lt;span&gt;VM (build &lt;span&gt;25.181&lt;span&gt;-b13, mixed mode)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;OpenJDK8 -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap （正确的识别容器限制，910.50M）安全&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;[root@xiaoke-test ~]# docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  openjdk:&lt;span&gt;8&lt;span&gt;-jre-slim java -XX:+&lt;span&gt;UnlockExperimentalVMOptions &lt;span&gt;-XX:+&lt;span&gt;UseCGroupMemoryLimitForHeap &lt;span&gt;-&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;VM settings:&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Max&lt;span&gt;. &lt;span&gt;Heap &lt;span&gt;&lt;span&gt;Size &lt;span&gt;(&lt;span&gt;Estimated&lt;span&gt;): &lt;span&gt;910.50M&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Ergonomics &lt;span&gt;&lt;span&gt;Machine &lt;span&gt;&lt;span&gt;Class&lt;span&gt;: server&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Using &lt;span&gt;VM: &lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Server &lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;openjdk version &lt;span&gt;&quot;1.8.0_181&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;Runtime &lt;span&gt;&lt;span&gt;Environment &lt;span&gt;(build &lt;span&gt;1.8&lt;span&gt;.&lt;span&gt;0_181&lt;span&gt;-&lt;span&gt;8u181&lt;span&gt;-b13-&lt;span&gt;2&lt;span&gt;~deb9u1-b13)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Server &lt;span&gt;VM (build &lt;span&gt;25.181&lt;span&gt;-b13, mixed mode)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;OpenJDK 9（并没有识别容器限制，26.67G）危险&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;3&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;[root@xiaoke-test ~]# docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  openjdk:&lt;span&gt;9&lt;span&gt;-jre-slim java  -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;VM settings:&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Max&lt;span&gt;. &lt;span&gt;Heap &lt;span&gt;&lt;span&gt;Size &lt;span&gt;(&lt;span&gt;Estimated&lt;span&gt;): &lt;span&gt;29.97G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Using &lt;span&gt;VM: &lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Server &lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;openjdk version &lt;span&gt;&quot;9.0.4&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;Runtime &lt;span&gt;&lt;span&gt;Environment &lt;span&gt;(build &lt;span&gt;9.0.4+12&lt;span&gt;-&lt;span&gt;Debian&lt;span&gt;-&lt;span&gt;4&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Server &lt;span&gt;VM (build &lt;span&gt;9.0.4+12&lt;span&gt;-&lt;span&gt;Debian&lt;span&gt;-&lt;span&gt;4&lt;span&gt;, mixed mode)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;OpenJDK 9 -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap （正确的识别容器限制，1G）安全&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;3&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;[root@xiaoke-test ~]# docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  openjdk:&lt;span&gt;9&lt;span&gt;-jre-slim java -XX:+&lt;span&gt;UnlockExperimentalVMOptions &lt;span&gt;-XX:+&lt;span&gt;UseCGroupMemoryLimitForHeap &lt;span&gt;-&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;VM settings:&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Max&lt;span&gt;. &lt;span&gt;Heap &lt;span&gt;&lt;span&gt;Size &lt;span&gt;(&lt;span&gt;Estimated&lt;span&gt;): &lt;span&gt;1.00G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Using &lt;span&gt;VM: &lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Server &lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;openjdk version &lt;span&gt;&quot;9.0.4&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;Runtime &lt;span&gt;&lt;span&gt;Environment &lt;span&gt;(build &lt;span&gt;9.0.4+12&lt;span&gt;-&lt;span&gt;Debian&lt;span&gt;-&lt;span&gt;4&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Server &lt;span&gt;VM (build &lt;span&gt;9.0.4+12&lt;span&gt;-&lt;span&gt;Debian&lt;span&gt;-&lt;span&gt;4&lt;span&gt;, mixed mode)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;OpenJDK 10（正确的识别容器限制，1G）安全&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;4&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;[root@xiaoke-test ~]# docker run -m &lt;span&gt;32GB &lt;span&gt;--rm  openjdk:&lt;span&gt;10&lt;span&gt;-jre-slim java -&lt;span&gt;XshowSettings&lt;span&gt;:vm -XX:&lt;span&gt;MaxRAMFraction&lt;span&gt;=&lt;span&gt;1 &lt;span&gt; -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;VM settings:&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Max&lt;span&gt;. &lt;span&gt;Heap &lt;span&gt;&lt;span&gt;Size &lt;span&gt;(&lt;span&gt;Estimated&lt;span&gt;): &lt;span&gt;1.00G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Using &lt;span&gt;VM: &lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Server &lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;openjdk version &lt;span&gt;&quot;10.0.2&quot; &lt;span&gt;&lt;span&gt;2018&lt;span&gt;-&lt;span&gt;07&lt;span&gt;-&lt;span&gt;17&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;Runtime &lt;span&gt;&lt;span&gt;Environment &lt;span&gt;(build &lt;span&gt;10.0.2+13&lt;span&gt;-&lt;span&gt;Debian&lt;span&gt;-&lt;span&gt;2&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Server &lt;span&gt;VM (build &lt;span&gt;10.0.2+13&lt;span&gt;-&lt;span&gt;Debian&lt;span&gt;-&lt;span&gt;2&lt;span&gt;, mixed mode)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;OpenJDK 11（正确的识别容器限制，1G）安全&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;[root@xiaoke-test ~]# docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  openjdk:&lt;span&gt;11&lt;span&gt;-jre-slim java -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;VM settings:&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Max&lt;span&gt;. &lt;span&gt;Heap &lt;span&gt;&lt;span&gt;Size &lt;span&gt;(&lt;span&gt;Estimated&lt;span&gt;): &lt;span&gt;1.00G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Using &lt;span&gt;VM: &lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Server &lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;openjdk version &lt;span&gt;&quot;11.0.1&quot; &lt;span&gt;&lt;span&gt;2018&lt;span&gt;-&lt;span&gt;10&lt;span&gt;-&lt;span&gt;16&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;Runtime &lt;span&gt;&lt;span&gt;Environment &lt;span&gt;(build &lt;span&gt;11.0.1+13&lt;span&gt;-&lt;span&gt;Debian&lt;span&gt;-&lt;span&gt;3&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Server &lt;span&gt;VM (build &lt;span&gt;11.0.1+13&lt;span&gt;-&lt;span&gt;Debian&lt;span&gt;-&lt;span&gt;3&lt;span&gt;, mixed mode, sharing)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;OpenJDK 12（正确的识别容器限制，1G）安全&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;4&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;[root@xiaoke-test ~]# docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  openjdk:&lt;span&gt;12 &lt;span&gt;java -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;VM settings:&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Max&lt;span&gt;. &lt;span&gt;Heap &lt;span&gt;&lt;span&gt;Size &lt;span&gt;(&lt;span&gt;Estimated&lt;span&gt;): &lt;span&gt;1.00G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Using &lt;span&gt;VM: &lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Server &lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;openjdk version &lt;span&gt;&quot;12-ea&quot; &lt;span&gt;&lt;span&gt;2019&lt;span&gt;-&lt;span&gt;03&lt;span&gt;-&lt;span&gt;19&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;Runtime &lt;span&gt;&lt;span&gt;Environment &lt;span&gt;(build &lt;span&gt;12&lt;span&gt;-ea+&lt;span&gt;23&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Server &lt;span&gt;VM (build &lt;span&gt;12&lt;span&gt;-ea+&lt;span&gt;23&lt;span&gt;, mixed mode, sharing)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt; &lt;/h2&gt;
&lt;h2&gt;&lt;strong&gt;测试用例2(IBMOPENJ9)&lt;/strong&gt;&lt;/h2&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;3&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  adoptopenjdk/openjdk8-openj9:alpine-slim  java -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  adoptopenjdk/openjdk9-openj9:alpine-slim  java -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  adoptopenjdk/openjdk10-openj9:alpine-slim  java -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  adoptopenjdk/openjdk11-openj9:alpine-slim  java -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;openjdk8-openj9 （正确的识别容器限制，3G）安全&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;7&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;[root@xiaoke-test ~]# docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  adoptopenjdk/openjdk8-openj9:alpine-slim  java -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;VM settings:&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Max&lt;span&gt;. &lt;span&gt;Heap &lt;span&gt;&lt;span&gt;Size &lt;span&gt;(&lt;span&gt;Estimated&lt;span&gt;): &lt;span&gt;3.00G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Ergonomics &lt;span&gt;&lt;span&gt;Machine &lt;span&gt;&lt;span&gt;Class&lt;span&gt;: server&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Using &lt;span&gt;VM: &lt;span&gt;Eclipse &lt;span&gt;&lt;span&gt;OpenJ9 &lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;openjdk version &lt;span&gt;&quot;1.8.0_192&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;Runtime &lt;span&gt;&lt;span&gt;Environment &lt;span&gt;(build &lt;span&gt;1.8&lt;span&gt;.&lt;span&gt;0_192&lt;span&gt;-b12_openj9)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;Eclipse &lt;span&gt;&lt;span&gt;OpenJ9 &lt;span&gt;VM (build openj9-&lt;span&gt;0.11&lt;span&gt;.&lt;span&gt;0&lt;span&gt;, JRE &lt;span&gt;1.8&lt;span&gt;.&lt;span&gt;0 &lt;span&gt;&lt;span&gt;Linux &lt;span&gt;amd64-&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Compressed &lt;span&gt;&lt;span&gt;References &lt;span&gt;&lt;span&gt;20181107&lt;span&gt;_95 (JIT enabled, AOT enabled)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJ9 &lt;span&gt;  - &lt;span&gt;090ff9dcd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OMR      - ea548a66&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;JCL      - b5a3affe73 based on jdk8u192-b12)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;openjdk9-openj9 （正确的识别容器限制，3G）安全&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;6&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;[root@xiaoke-test ~]# docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  adoptopenjdk/openjdk9-openj9:alpine-slim  java -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;VM settings:&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Max&lt;span&gt;. &lt;span&gt;Heap &lt;span&gt;&lt;span&gt;Size &lt;span&gt;(&lt;span&gt;Estimated&lt;span&gt;): &lt;span&gt;3.00G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Using &lt;span&gt;VM: &lt;span&gt;Eclipse &lt;span&gt;&lt;span&gt;OpenJ9 &lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;openjdk version &lt;span&gt;&quot;9.0.4-adoptopenjdk&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;Runtime &lt;span&gt;&lt;span&gt;Environment &lt;span&gt;(build &lt;span&gt;9.0&lt;span&gt;.&lt;span&gt;4&lt;span&gt;-adoptopenjdk+&lt;span&gt;12&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;Eclipse &lt;span&gt;&lt;span&gt;OpenJ9 &lt;span&gt;VM (build openj9-&lt;span&gt;0.9&lt;span&gt;.&lt;span&gt;0&lt;span&gt;, JRE &lt;span&gt;9 &lt;span&gt;&lt;span&gt;Linux &lt;span&gt;amd64-&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Compressed &lt;span&gt;&lt;span&gt;References &lt;span&gt;&lt;span&gt;20180814&lt;span&gt;_248 (JIT enabled, AOT enabled)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJ9 &lt;span&gt;  - &lt;span&gt;24e53631&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OMR      - fad6bf6e&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;JCL      - feec4d2ae based on jdk-&lt;span&gt;9.0.4+12&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;openjdk10-openj9 （正确的识别容器限制，3G）安全&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;6&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;[root@xiaoke-test ~]# docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  adoptopenjdk/openjdk10-openj9:alpine-slim  java -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;VM settings:&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Max&lt;span&gt;. &lt;span&gt;Heap &lt;span&gt;&lt;span&gt;Size &lt;span&gt;(&lt;span&gt;Estimated&lt;span&gt;): &lt;span&gt;3.00G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Using &lt;span&gt;VM: &lt;span&gt;Eclipse &lt;span&gt;&lt;span&gt;OpenJ9 &lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;openjdk version &lt;span&gt;&quot;10.0.2-adoptopenjdk&quot; &lt;span&gt;&lt;span&gt;2018&lt;span&gt;-&lt;span&gt;07&lt;span&gt;-&lt;span&gt;17&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;Runtime &lt;span&gt;&lt;span&gt;Environment &lt;span&gt;(build &lt;span&gt;10.0&lt;span&gt;.&lt;span&gt;2&lt;span&gt;-adoptopenjdk+&lt;span&gt;13&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;Eclipse &lt;span&gt;&lt;span&gt;OpenJ9 &lt;span&gt;VM (build openj9-&lt;span&gt;0.9&lt;span&gt;.&lt;span&gt;0&lt;span&gt;, JRE &lt;span&gt;10 &lt;span&gt;&lt;span&gt;Linux &lt;span&gt;amd64-&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Compressed &lt;span&gt;&lt;span&gt;References &lt;span&gt;&lt;span&gt;20180813&lt;span&gt;_102 (JIT enabled, AOT enabled)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJ9 &lt;span&gt;  - &lt;span&gt;24e53631&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OMR      - fad6bf6e&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;JCL      - &lt;span&gt;7db90eda56 &lt;span&gt;based on jdk-&lt;span&gt;10.0.2+13&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;openjdk11-openj9（正确的识别容器限制，3G）安全&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;6&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;[root@xiaoke-test ~]# docker run -m &lt;span&gt;4GB &lt;span&gt;--rm  adoptopenjdk/openjdk11-openj9:alpine-slim  java -&lt;span&gt;XshowSettings&lt;span&gt;:vm  -version&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;VM settings:&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Max&lt;span&gt;. &lt;span&gt;Heap &lt;span&gt;&lt;span&gt;Size &lt;span&gt;(&lt;span&gt;Estimated&lt;span&gt;): &lt;span&gt;3.00G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;   &lt;span&gt;Using &lt;span&gt;VM: &lt;span&gt;Eclipse &lt;span&gt;&lt;span&gt;OpenJ9 &lt;span&gt;VM&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;openjdk version &lt;span&gt;&quot;11.0.1&quot; &lt;span&gt;&lt;span&gt;2018&lt;span&gt;-&lt;span&gt;10&lt;span&gt;-&lt;span&gt;16&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJDK &lt;span&gt;&lt;span&gt;Runtime &lt;span&gt;&lt;span&gt;Environment &lt;span&gt;&lt;span&gt;AdoptOpenJDK &lt;span&gt;(build &lt;span&gt;11.0.1+13&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;Eclipse &lt;span&gt;&lt;span&gt;OpenJ9 &lt;span&gt;VM &lt;span&gt;AdoptOpenJDK &lt;span&gt;(build openj9-&lt;span&gt;0.11&lt;span&gt;.&lt;span&gt;0&lt;span&gt;, JRE &lt;span&gt;11 &lt;span&gt;&lt;span&gt;Linux &lt;span&gt;amd64-&lt;span&gt;64&lt;span&gt;-&lt;span&gt;Bit &lt;span&gt;&lt;span&gt;Compressed &lt;span&gt;&lt;span&gt;References &lt;span&gt;&lt;span&gt;20181020&lt;span&gt;_70 (JIT enabled, AOT enabled)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OpenJ9 &lt;span&gt;  - &lt;span&gt;090ff9dc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;OMR      - ea548a66&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;JCL      - f62696f378 based on jdk-&lt;span&gt;11.0.1+13&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;分析之前我们先了解这么一个情况：&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;JavaMemory &lt;span&gt;(&lt;span&gt;MaxRAM&lt;span&gt;) = 元数据+线程+代码缓存+&lt;span&gt;OffHeap&lt;span&gt;+&lt;span&gt;Heap&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;一般我们都只配置Heap即使用-Xmx来指定JVM可使用的最大堆。而JVM默认会使用它获取到的最大内存的1/4作为堆的原因也是如此。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;安全性（即不会超过容器限制被容器kill）&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;OpenJdk&lt;/p&gt;
&lt;p&gt;OpenJdk8-12,都能保证这个安全性的特点（8和9需要特殊参数，-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap）。&lt;/p&gt;
&lt;p&gt;OpenJ9&lt;/p&gt;
&lt;p&gt;2.IbmOpenJ9所有的版本都能识别到容器限制。&lt;/p&gt;
&lt;p&gt;资源利用率&lt;/p&gt;
&lt;p&gt;OpenJdk&lt;/p&gt;
&lt;p&gt;自动识别到容器限制后，OpenJdk把最大堆设置为了大概容器内存的1/4，对内存的浪费不可谓不大。&lt;/p&gt;
&lt;p&gt;当然可以配合另一个JVM参数来配置最大堆。-XX:MaxRAMFraction=int。下面是我整理的一个常见内存设置的表格， 从中我们可以看到似乎JVM默认的最大堆的取值为MaxRAMFraction=4，随着内存的增加，堆的闲置空间越来越大，在16G容器内存时，java堆只有不到4G。&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;MaxRAMFraction&lt;span&gt;取值    堆占比 容器内存=&lt;span&gt;1G &lt;span&gt;容器内存=&lt;span&gt;2G &lt;span&gt;容器内存=&lt;span&gt;4G &lt;span&gt;容器内存=&lt;span&gt;8G &lt;span&gt;容器内存=&lt;span&gt;16G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;1 &lt;span&gt;   ≈&lt;span&gt;90&lt;span&gt;%    &lt;span&gt;910.50M &lt;span&gt;&lt;span&gt;1.78G &lt;span&gt;  &lt;span&gt;3.56G &lt;span&gt;  &lt;span&gt;7.11G &lt;span&gt;  &lt;span&gt;14.22G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;2 &lt;span&gt;   ≈&lt;span&gt;50&lt;span&gt;%    &lt;span&gt;455.50M &lt;span&gt;&lt;span&gt;910.50M &lt;span&gt;&lt;span&gt;1.78G &lt;span&gt;  &lt;span&gt;3.56G &lt;span&gt;  &lt;span&gt;7.11G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;3 &lt;span&gt;   ≈&lt;span&gt;33&lt;span&gt;%    &lt;span&gt;304.00M &lt;span&gt;&lt;span&gt;608.00M &lt;span&gt;&lt;span&gt;1.19G &lt;span&gt;  &lt;span&gt;2.37G &lt;span&gt;  &lt;span&gt;4.74G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;4 &lt;span&gt;   ≈&lt;span&gt;25&lt;span&gt;%    &lt;span&gt;228.00M &lt;span&gt;&lt;span&gt;455.50M &lt;span&gt;&lt;span&gt;910.50M &lt;span&gt;&lt;span&gt;1.78G &lt;span&gt;  &lt;span&gt;3.56G&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;OpenJ9&lt;/p&gt;
&lt;p&gt;关于OpenJ9的的详细介绍你可以从这里了解更多。 对于内存利用率OpenJ9的策略是优于OpenJdk的。以下是OpenJ9的策略表格&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;容器内存&amp;lt;size&amp;gt;    最大&lt;span&gt;Java&lt;span&gt;堆大小&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;小于&lt;span&gt;1 &lt;span&gt;GB    &lt;span&gt;50&lt;span&gt;％&amp;lt;size&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;1 &lt;span&gt;GB - &lt;span&gt;2 &lt;span&gt;GB    &lt;span&gt;&amp;lt;size&amp;gt; &lt;span&gt;- &lt;span&gt;512 &lt;span&gt;MB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;大于&lt;span&gt;2 &lt;span&gt;GB    大于&lt;span&gt;2 &lt;span&gt;GB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;注意：这里我们说的是容器内存限制，和物理机内存不同，&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;自动档&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;如果你想要的是，不显示的指定-Xmx，让Java进程自动的发现容器限制。 &lt;/p&gt;
&lt;p&gt;1.如果你想要的是jvm进程在容器中安全稳定的运行，不被容器kill，并且你的JDK版本小于10（大于等于JDK10的版本不需要设置，参考前面的测试） 你需要额外设置JVM参数-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap，即可保证你的Java进程不会因为内存问题被容器Kill。 当然这个方式使用起来简单，可靠，缺点也很明显，资源利用率过低（参考前面的表格MaxRAMFraction=4）。&lt;/p&gt;
&lt;p&gt;2.如果想在基础上我还想提高一些内存资源利用率，并且容器内存为1 GB - 4 GB，我建议你设置-XX:MaxRAMFraction=2，在大于8G的可以尝试设置-XX:MaxRAMFraction=1（参考上表格）。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;手动挡&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;如果你想要的是手动挡的体验，更加进一步的利用内存资源，那么你可能需要回到手动配置时代-Xmx。 手动挡部分，请可以完全忽略上面我的BB。 &lt;/p&gt;
&lt;p&gt;1.上面的我们说到了自动挡的配置，用起来很简单很舒服，自动发现容器限制，无需担心和思考去配置-Xmx。&lt;/p&gt;
&lt;p&gt;2.比如你有内存1G那么我建议你的-Xmx750M,2G建议配置-Xmx1700M,4G建议配置-Xmx3500-3700M,8G建议设置-Xmx7500-7600M, 总之就是至少保留300M以上的内存留给JVM的其他内存。如果堆特别大，可以预留到1G甚至2G。 &lt;/p&gt;
&lt;p&gt;3.手动挡用起来就没有那么舒服了，当然资源利用率相对而言就更高了。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;/p&gt;
&lt;p&gt;https://qingmu.io/2018/12/17/How-to-securely-limit-JVM-resources-in-a-container/&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- MORE | 往期精彩文章 -&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 11 Jan 2019 07:46:00 +0000</pubDate>
<dc:creator>民工哥</dc:creator>
<og:description>前言 Java与Docker的结合，虽然更好的解决了application的封装问题。但也存在着不兼容，比如Java并不能自动的发现Docker设置的内存限制,CPU限制。 这将导致JVM不能稳定服务</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/youkanyouxiao/p/10255504.html</dc:identifier>
</item>
<item>
<title>从零开始学Vue（一）—— Vue.js 入门 - 小风飞鱼</title>
<link>http://www.cnblogs.com/qdjianghao/p/10255320.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdjianghao/p/10255320.html</guid>
<description>&lt;h2 align=&quot;center&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;vue.js作为现在笔记热门的JS框架，使用比较简单易上手，也成为很多公司首选的JS框架。 但是对于初学者可能学起来有些麻烦，所以推出《从零开始学Vue》系列博客，本系列计划推出19篇博客文章，这是最简单的入门第一篇！ 如下是暂定的系列博客目录，欢迎有兴趣的同学关注学习~~&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;系列博客目录一览（暂定）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span&gt;01 Vue.js入门 

02 Vue.js实例

03插值、指令

04过滤器Filters

05计算属性Computed

06 Class与Style绑定

07 监听属性 Watch

08 条件渲染

09 列表渲染v-for

10 事件处理

11 初识组件

12 命令行工具(CLI)搭建

13 介绍vue-cli工程目录结构

14 组件嵌套/组件CSS作用域Scoped

15 Props属性传值

16 传值与传址

17 自定义事件传值

18 生命周期钩子

19 路由&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;

&lt;h2 align=&quot;center&quot;&gt;1.1 Vue.js &lt;span&gt;概念&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。&lt;/p&gt;

&lt;h2 align=&quot;center&quot;&gt;1.2 &lt;span&gt;起步&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;官方指南假设你已了解关于&lt;/span&gt; HTML&lt;span&gt;、&lt;/span&gt;&lt;span&gt;CSS&lt;/span&gt; &lt;span&gt;和&lt;/span&gt; &lt;span&gt;JavaScript&lt;/span&gt; &lt;span&gt;的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。&lt;/span&gt;&lt;/p&gt;

&lt;h2 align=&quot;center&quot;&gt;1.3 &lt;span&gt;初试&lt;/span&gt;Vue.js&lt;/h2&gt;
&lt;h3&gt;1.3.1 &lt;span&gt;声明式渲染：&lt;/span&gt;&lt;span&gt;模板语法&lt;/span&gt;——&lt;span&gt;插值&lt;/span&gt;（文本）&lt;/h3&gt;
&lt;p&gt;Vue.js &lt;span&gt;的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进&lt;/span&gt; &lt;span&gt;DOM&lt;/span&gt; &lt;span&gt;的系统：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;HTML：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

  {{ message }}

&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JS：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; app = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({

  el: &lt;/span&gt;'#app'&lt;span&gt;,

  data: {

    message: &lt;/span&gt;'Hello Vue!'&lt;span&gt;

  }

})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;浏览器输出内容&lt;/span&gt;：Hello Vue!&lt;/p&gt;

&lt;p&gt;除了文本插值，我们还可以像这样来绑定元素特性：&lt;/p&gt;
&lt;p&gt;HTML：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app-2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-bind:title&lt;/span&gt;&lt;span&gt;=&quot;message&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

    鼠标悬停几秒钟查看此处动态绑定的提示信息！

  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;JS：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; app2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({

  el: &lt;/span&gt;'#app-2'&lt;span&gt;,

  data: {

    message: &lt;/span&gt;'页面加载于 ' + &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().toLocaleString()

  }

})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;span&gt;这里我们遇到了一点新东西。&lt;/span&gt;v-bind &lt;span&gt;特性被称为指令。指令带有前缀&lt;/span&gt; &lt;span&gt;v-&lt;/span&gt;&lt;span&gt;，以表示它们是&lt;/span&gt; &lt;span&gt;Vue&lt;/span&gt; &lt;span&gt;提供的特殊特性。可能你已经猜到了，它们会在渲染的&lt;/span&gt; &lt;span&gt;DOM&lt;/span&gt; &lt;span&gt;上应用特殊的响应式行为。在这里，该指令的意思是：“将这个元素节点的&lt;/span&gt; &lt;span&gt;title&lt;/span&gt; &lt;span&gt;特性和&lt;/span&gt; &lt;span&gt;Vue&lt;/span&gt; &lt;span&gt;实例的&lt;/span&gt; &lt;span&gt;message&lt;/span&gt; &lt;span&gt;属性保持一致”。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;1.3.2 &lt;span&gt;模板语法&lt;/span&gt;——条件&lt;span&gt;v-if&lt;/span&gt;&lt;span&gt;与循环&lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;控制切换一个元素是否显示也相当简单：&lt;/p&gt;
&lt;p&gt;HTML：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app-3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;v-if&lt;/span&gt;&lt;span&gt;=&quot;seen&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;现在你看到我了&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;JS：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; app3 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({

  el: &lt;/span&gt;'#app-3'&lt;span&gt;,

  data: {

    seen: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;

  }

})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;浏览器输出打印：现在你看到我了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;span&gt;这个例子演示了我们不仅可以把数据绑定到&lt;/span&gt; DOM &lt;span&gt;文本或特性，还可以绑定到&lt;/span&gt; &lt;span&gt;DOM&lt;/span&gt; &lt;span&gt;结构。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;还有其它很多指令，每个都有特殊的功能。例如，&lt;/span&gt;v-for &lt;span&gt;指令可以绑定数组的数据来渲染一个项目列表：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;HTML：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app-4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;todo in todos&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

      {{ todo.text }}

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;JS&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; app4 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({

  el: &lt;/span&gt;'#app-4'&lt;span&gt;,

  data: {

    todos: [

      { text: &lt;/span&gt;'学习 JavaScript'&lt;span&gt; },

      { text: &lt;/span&gt;'学习 Vue'&lt;span&gt; },

      { text: &lt;/span&gt;'整个牛项目'&lt;span&gt; }

    ]

  }

})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;在控制台里，输入&lt;/span&gt; app4.todos.push({ text: '&lt;span&gt;新项目&lt;/span&gt;&lt;span&gt;' })&lt;/span&gt;&lt;span&gt;，你会发现列表最后添加了一个新项目。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;1.3.3 &lt;span&gt;模板语法&lt;/span&gt;——处理用户输入&lt;/h3&gt;

&lt;p&gt;&lt;span&gt;为了让用户和你的应用进行交互，我们可以用&lt;/span&gt; v-on &lt;span&gt;指令添加一个事件监听器，通过它调用在&lt;/span&gt; &lt;span&gt;Vue&lt;/span&gt; &lt;span&gt;实例中定义的方法：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;HTML：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app-5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ message }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;v-on:click&lt;/span&gt;&lt;span&gt;=&quot;reverseMessage&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;逆转消息&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;JS：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; app5 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({

  el: &lt;/span&gt;'#app-5'&lt;span&gt;,

  data: {

    message: &lt;/span&gt;'Hello Vue.js!'&lt;span&gt;

  },

  methods: {

    reverseMessage: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {

      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.message = &lt;span&gt;this&lt;/span&gt;.message.split('').reverse().join(''&lt;span&gt;)

    }

  }

})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;span&gt;在&lt;/span&gt; reverseMessage &lt;span&gt;方法中，我们更新了应用的状态，但没有触碰&lt;/span&gt; &lt;span&gt;DOM&lt;/span&gt;&lt;span&gt;——所有的&lt;/span&gt; &lt;span&gt;DOM&lt;/span&gt; &lt;span&gt;操作都由&lt;/span&gt; &lt;span&gt;Vue&lt;/span&gt; &lt;span&gt;来处理，你编写的代码只需要关注逻辑层面即可。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;1.3.4 &lt;span&gt;双向数据绑定&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Vue &lt;span&gt;还提供了&lt;/span&gt; &lt;span&gt;v-model&lt;/span&gt; &lt;span&gt;指令，它能轻松实现表单输入和应用状态之间的双向绑定。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;HTML：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ message }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;message&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;JS：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; app6 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({

  el: &lt;/span&gt;'#app-6'&lt;span&gt;,

  data: {

    message: &lt;/span&gt;'Hello Vue!'&lt;span&gt;

  }

})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;1.3.5 &lt;span&gt;组件化应用构建&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;span&gt;组件系统是&lt;/span&gt; Vue &lt;span&gt;的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt; Vue &lt;span&gt;里，一个组件本质上是一个拥有预定义选项的一个&lt;/span&gt; &lt;span&gt;Vue&lt;/span&gt; &lt;span&gt;实例。在&lt;/span&gt; &lt;span&gt;Vue&lt;/span&gt; &lt;span&gt;中注册组件很简单：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义名为 todo-item 的新组件&lt;/span&gt;
&lt;span&gt;
Vue.component(&lt;/span&gt;'todo-item'&lt;span&gt;, {

  template: &lt;/span&gt;'&amp;lt;li&amp;gt;这是个待办项&amp;lt;/li&amp;gt;'&lt;span&gt;

})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;现在你可以用它构建另一个组件模板：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 创建一个 todo-item 组件的实例 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;todo-item&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;todo-item&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;但是这样会为每个待办项渲染同样的文本，这看起来并不炫酷。我们应该能从父作用域将数据传到子组件才对。让我们来修改一下组件的定义，使之能够接受一个&lt;/span&gt; prop&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Vue.component('todo-item'&lt;span&gt;, {

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; todo-item 组件现在接受一个&lt;/span&gt;

  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;prop&quot;，类似于一个自定义特性。&lt;/span&gt;

  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这个 prop 名为 todo。&lt;/span&gt;
&lt;span&gt;
  props: [&lt;/span&gt;'todo'&lt;span&gt;],

  template: &lt;/span&gt;'&amp;lt;li&amp;gt;{{ todo.text }}&amp;lt;/li&amp;gt;'&lt;span&gt;

})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;现在，我们可以使用&lt;/span&gt; v-bind &lt;span&gt;指令将待办项传到循环输出的每个组件中：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app-7&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;

      现在我们为每个 todo-item 提供 todo 对象

      todo 对象是变量，即其内容可以是动态的。

      我们也需要为每个组件提供一个“key”，稍后再

      作详细解释。

    &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;todo-item

      &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;item in groceryList&quot;&lt;/span&gt;&lt;span&gt;

      v-bind:todo&lt;/span&gt;&lt;span&gt;=&quot;item&quot;&lt;/span&gt;&lt;span&gt;

      v-bind:key&lt;/span&gt;&lt;span&gt;=&quot;item.id&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;todo-item&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

Vue.component('todo-item', {

  props: ['todo'],

  template: '&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ todo.text }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'

})

 

var app7 = new Vue({

  el: '#app-7',

  data: {

    groceryList: [

      { id: 0, text: '蔬菜' },

      { id: 1, text: '奶酪' },

      { id: 2, text: '随便其它什么人吃的东西' }

    ]

  }

})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;尽管这只是一个刻意设计的例子，但是我们已经设法将应用分割成了两个更小的单元。子单元通过&lt;/span&gt; prop &lt;span&gt;接口与父单元进行了良好的解耦。我们现在可以进一步改进&lt;/span&gt; &lt;span&gt;&amp;lt;todo-item&amp;gt;&lt;/span&gt; &lt;span&gt;组件，提供更为复杂的模板和逻辑，而不会影响到父单元。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在一个大型应用中，有必要将整个应用程序划分为组件，以使开发更易管理。在后续教程中我们将详述组件，不过这里有一个&lt;/span&gt; (&lt;span&gt;假想的&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;例子，以展示使用了组件的应用模板是什么样的：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;app-nav&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;app-nav&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;app-view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;app-sidebar&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;app-sidebar&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;app-content&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;app-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;app-view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 11 Jan 2019 07:22:00 +0000</pubDate>
<dc:creator>小风飞鱼</dc:creator>
<og:description>vue.js作为现在笔记热门的JS框架，使用比较简单易上手，也成为很多公司首选的JS框架。 但是对于初学者可能学起来有些麻烦，所以推出《从零开始学Vue》系列博客，本系列计划推出19篇博客文章，这是最</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdjianghao/p/10255320.html</dc:identifier>
</item>
<item>
<title>Webpack4教程 - 第三部分，如何使用插件 - 葡萄城技术团队</title>
<link>http://www.cnblogs.com/powertoolsteam/p/10255294.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/powertoolsteam/p/10255294.html</guid>
<description>&lt;blockquote readability=&quot;6.5414847161572&quot;&gt;
&lt;p&gt;转载请注明出处：&lt;a href=&quot;https://www.grapecity.com.cn/&quot;&gt;葡萄城官网&lt;/a&gt;，葡萄城为开发者提供专业的开发工具、解决方案和服务，赋能开发者。&lt;br/&gt;原文出处：https://wanago.io/2018/07/23/webpack-4-course-part-three-working-with-plugins/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;大家好！今天我们介绍&lt;strong&gt;插件&lt;/strong&gt;这个概念。插件与loader的不同之处在于它能完成更复杂的任务。基本上，loader做不了的其他事情，就可以用插件来做。loader往往作用于某种特定类型的文件，而插件则更加通用。这次，我们来学习如何使用插件，看看它解决了什么问题。本文会涉及一些日常用例，比如，生成链接了所有资源的HTML，以及把CSS抽取为单独的文件。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;Webpack 4&lt;/strong&gt;&lt;strong&gt;教程 - 第三部分 如何使用插件&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;使用插件最基本的方法是把它们放在配置文件中的plugins属性下。你需要调用new操作符创建一个插件的实例。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;若想知道更多关于&lt;strong&gt;new&lt;/strong&gt;关键字和原型的，请查看&lt;span&gt;&lt;a href=&quot;https://wanago.io/2018/03/19/prototype-the-big-bro-behind-es6-class/&quot; target=&quot;_blank&quot;&gt;原型，ES6 class背后的大哥&lt;/a&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;html-webpack-plugin&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;手动的把所有JavaScript文件添加到HTML里是件很繁重的事情。幸好你不必那样做！这有一个非常有用的插件&lt;strong&gt;HtmlWebpackPlugin&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
npm install html-webpack-plugin
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;它使用起来很方便：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
// webpack.config.js
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  plugins: [
    new HtmlWebpackPlugin()
  ]
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;它将会为我们在dist文件夹下面创建index.html文件。我们的JavaScript文件会以链接形式插入在&amp;lt;body&amp;gt;标签后面。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;你需要自己追踪插入HTML的文件，而当它们变多时，这就很繁琐了。此插件则简化了这件事情。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;另一件值得注意的重要事情就是，你的外链文件名可能会因为打包时使用哈希而改变。这就让&lt;strong&gt;HtmlWebpackPlugin&lt;/strong&gt;更加有用了，因为你不需要手动追踪那些文件名。这个机制被用来应对浏览器的缓存。我们会在后面的课程讨论这个话题。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;给插件传递配置&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;你可以给插件传递更多的配置。下面是一个为&lt;strong&gt;HtmlWebpackPlugin&lt;/strong&gt;传入一个HTML模板的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
// webpack.config.js
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  plugins: [
    new HtmlWebpackPlugin({template: './src/index.html'})
  ]
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;有了它，插件就不再使用默认的HTML文件，而会使用你提供给它的那个。 可以在&lt;span&gt;&lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin&quot; target=&quot;_blank&quot;&gt;这个库&lt;/a&gt;&lt;/span&gt;看到更多的配置项。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;把同一个插件使用多次&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;你可能会好奇，为什么我们每次使用插件，都要用&lt;strong&gt;new&lt;/strong&gt;新建一个实例。这是因为你能够不止一次地使用同一个插件。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;当创建多页面应用时，你可能需要不止一个HTML模板文件。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;如果你想了解更多关于entry和output的内容，以及如何使用它们创建多文件应用，可参考我们的&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/powertoolsteam/p/9584302.html&quot; target=&quot;_blank&quot;&gt;第一节课&lt;/a&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这可以通过多次使用&lt;strong&gt;HtmlWebpackPlugin&lt;/strong&gt;来实现。　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;46&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
// webpack.config.js
const HtmlWebpackPlugin = require('html-webpack-plugin');
const path = require('path');

module.exports = {
  entry: {
    one: './src/one.js',
    two: './src/two.js',
  },
  output: {
    filename: '[name].bundle.js',
    path: path.resolve(__dirname, 'dist')
  },
  plugins: [
    new HtmlWebpackPlugin({
      filename: 'one.html',
      template: './src/one.html',
      chunks: ['one']
    }),
    new HtmlWebpackPlugin({
      filename: 'two.html',
      template: './src/two.html',
      chunks: ['two']
    })
  ]
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;插件的实例，会基于chunks数组对入口点（entry point）进行匹配。根据上面的配置运行Webpack，会得到：one.html，tow.html，one.bundle.js，two.bundle.js。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;插件和loader并用&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在之前的教程里，我们把&lt;strong&gt;css-loader&lt;/strong&gt;和&lt;strong&gt;style-loader&lt;/strong&gt;结合起来，并把输出的css代码插入&amp;lt;style&amp;gt;标签。你可能倾向于输出真正的css的文件给用户。如果那样的话，需要使用mini-css-extract-plugin。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在过去，我们曾使用 ExtractTextWebpackPlugin 来做这件事情。但从Webpack 4 开始就不应该再使用它了。若想了解更多，参见&lt;span&gt;&lt;a href=&quot;https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/749&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;这里演示了怎么做：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
npm install mini-css-extract-plugin
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);

module.exports = {
  entry: './src/style.js',
  module: {
    rules: [
      {
        test: /\.css$/,
        use: [
            MiniCssExtractPlugin.loader,
            'css-loader'
        ]
      }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin(),
    new MiniCssExtractPlugin()
  ]
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;由于使用了&lt;strong&gt;HtmlWepbackPlugin&lt;/strong&gt;，自动生成的css文件被插入到HTML中。你会得到像下面这样的输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;lt;!-- index.html --&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Webpack App&amp;lt;/title&amp;gt;
  &amp;lt;link href=&quot;main.css&quot; rel=&quot;stylesheet&quot;&amp;gt;&amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;script type=&quot;text/javascript&quot; src=&quot;main.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;以上面的配置运行Webpack，每个包含CSS导入的JavaScript文件都将得到一个CSS输出文件。若想改变这种行为，需要使用SplitChunksPlugin，我们将会在另一个教程里学习它。你也可以在&lt;span&gt;&lt;a href=&quot;https://github.com/webpack-contrib/mini-css-extract-plugin#user-content-extracting-all-css-in-a-single-file&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;&lt;/span&gt;里找到操作说明。&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;今天我们学习了什么是插件，及其基本使用方法。不仅如此，我们还学习了如何给插件传递配置项，以及如何将它们与loader一并使用。虽然这里只是一部分插件的用例，但其他插件的使用方法也是类似的。你可查看&lt;span&gt;&lt;a href=&quot;https://webpack.js.org/plugins/&quot; target=&quot;_blank&quot;&gt;官方的插件列表&lt;/a&gt;&lt;/span&gt;来寻找你需要的插件。你也可以使用搜索引擎去发现更多。Webpack本身就是基于同样的一套插件系统来构建的，所以学习它们在底层是如何工作的会很有趣。我们将在以后讨论这些，届时去实现我们自己的插件。&lt;/p&gt;

</description>
<pubDate>Fri, 11 Jan 2019 07:19:00 +0000</pubDate>
<dc:creator>葡萄城技术团队</dc:creator>
<og:description>转载请注明出处：葡萄城官网，葡萄城为开发者提供专业的开发工具、解决方案和服务，赋能开发者。原文出处：https://wanago.io/2018/07/23/webpack-4-course-part</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/powertoolsteam/p/10255294.html</dc:identifier>
</item>
<item>
<title>SQL——嵌套查询与子查询 - SakuraOne</title>
<link>http://www.cnblogs.com/myworld7/p/10255181.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/myworld7/p/10255181.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;sql的嵌套查询可以说是sql语句中比较复杂的一部分，但是掌握好了的话就可以提高查询效率。下面将介绍带&lt;code&gt;in&lt;/code&gt;的子查询、带&lt;code&gt;比较运算符&lt;/code&gt;的子查询、带&lt;code&gt;any/all&lt;/code&gt;的子查询、带&lt;code&gt;exists&lt;/code&gt;的子查询以及基于&lt;code&gt;派生表&lt;/code&gt;的子查询。很多数据库是不区分关键字大小写的，并且关键字还会有高亮，所以我为了写语句方便（不要频繁切换大小写或者按shift键）和看着方便（大写一般还要在大脑中转换下）关键字是使用小写。&lt;/p&gt;
&lt;h2 id=&quot;什么是sql嵌套查询&quot;&gt;什么是SQL嵌套查询&lt;/h2&gt;
&lt;p&gt;嵌套查询指的是&lt;strong&gt;一个查询语块可以嵌套在另外一个查询语句块的where子句或者having子句中&lt;/strong&gt;，前者为子查询或内查询，后者为父查询或外查询。&lt;/p&gt;
&lt;h2 id=&quot;表的定义&quot;&gt;表的定义&lt;/h2&gt;
&lt;p&gt;例子使用的表的定义为：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;create table `student`(
    `sno` char(12) collate utf8_bin not null primary key comment '学号',
    `sname` char(30) collate utf8_bin not null comment '姓名',
    `birthday` Date collate utf8_bin comment '出生日期'
)engine=InnoDB default charset=utf8 collate=utf8_bin comment '学号信息表';

create table `course`
(
    `cno` char(4) collate utf8_bin not null primary key comment '课程号',
    `cname` char(40) collate utf8_bin not null comment '课程名',
    `ceredit` smallint not null default 0 comment '学分'
)engine=InnoDB default charset=utf8 collate=utf8_bin comment '课程表';

create table `sc`
(
    `sno` char(12) collate utf8_bin not null comment '学号',
    `cno` char(4) collate utf8_bin not null comment '课程号',
    `score` smallint not null default 0 comment '成绩'
)engine=InnoDB default charset=utf8 collate=utf8_bin comment '学生课程表';
#为sc表添加主键和外键
alter table `sc` add primary key (`sno`,`cno`);
alter table `sc` add foreign key(`sno`) references `student`(`sno`);
alter table `sc` add foreign key(`cno`) references `course`(`cno`);&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;带in的子查询&quot;&gt;带in的子查询&lt;/h2&gt;
&lt;p&gt;in关键字主要用于判断表达式是否在多值列表中。返回在多值列表中的记录。&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;#列出选修了C001课程的学生的学号、姓名
select sno, sname
from student
where sno in (select sno from sc where cno='C001');&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里子查询里面没有依赖父查询，此种查询也叫做&lt;code&gt;不相关子查询&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;若子查询条件依赖于父查询，则为&lt;code&gt;相关子查询&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;带比较运算符的子查询&quot;&gt;带比较运算符的子查询&lt;/h2&gt;
&lt;p&gt;带比较运算符的子查询指父查询与子查询之间通过比较运算符连接，并且&lt;strong&gt;子查询返回的是单值&lt;/strong&gt;，才可以用 = 、&amp;lt;、 &amp;gt;、 != 、&amp;gt;=、 &amp;lt;=等比较运算符连接。&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;#选出学号为2016110129的同学所选课程中的成绩大于他平均成绩的课程的课程号
select cno from sc as x
where score &amp;gt; 
(
    select avg(score) from sc as y where x.sno=y.sno and x.sno = '2016110129'
)
and sno = '2016110129';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个子查询依赖于父查询，属于&lt;strong&gt;相关子查询&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;因为这里将同一张表既作为父查询的表又作为子查询的表，所以将这张表取了两个别名，以便区分。&lt;/p&gt;&lt;p&gt;【查询过程】：将父查询中的sno代入子查询中sno进行匹配，然后判断该记录中的课程成绩是否大于该学生的平均成绩，符合条件则返回该记录，否则继续在子查询中匹配该学生的下一条记录。&lt;/p&gt;
&lt;h2 id=&quot;带anysome或all的子查询&quot;&gt;带any（some）或all的子查询&lt;/h2&gt;
&lt;p&gt;子查询返回单值时的比较，可以用上面的比较运算符，当返回多值时需要比较，就要使用any(some)或者all。&lt;/p&gt;&lt;p&gt;若是在与多值序列的比较中，只需要满足与多值序列中的&lt;strong&gt;一个值&lt;/strong&gt;满足比较关系就返回true，则用any(some)。&lt;/p&gt;&lt;p&gt;若是在与多值序列的比较中，需要满足与多值序列中的&lt;strong&gt;全部值&lt;/strong&gt;满足比较关系才返回true，则用all。&lt;br/&gt;&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;#查询选课人数最多的课程号
select cno from sc
group by cno
having COUNT(*) &amp;gt;= all(select COUNT(*) from sc group by cno);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;【查询过程】：将sc表中的记录按照cno进行分组，筛选记录数最多的课程号。&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt; all(select COUNT(*) from sc group by cno)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;是找出所有以cno分组的记录数，是一个多值集合。使用&amp;gt;=也就是选出最大的值。&lt;/p&gt;
&lt;h2 id=&quot;带exists的子查询&quot;&gt;带exists的子查询&lt;/h2&gt;
&lt;p&gt;exists代表存在量词，带有EXISTS的子查询&lt;span&gt;&lt;strong&gt;不返回任何数据，只产生逻辑真值“true”或者逻辑假值“false”&lt;/strong&gt;&lt;/span&gt;。&lt;br/&gt;使用exists的嵌套语句，若子查询结果不为空，则exists返回true，否则返回false。&lt;/p&gt;&lt;p&gt;&lt;u&gt;使用exists引出的子查询，其目标表达式列都使用*，因为带exists的子查询只返回真值或假值，给出列名无实际含义。&lt;/u&gt;&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;#列出选修了C001课程的学生的学号、姓名
select sno,sname from student
where exists(
select * from sc where sc.sno=student.sno and cno='C001'
);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;【查询过程】：从student的第一条记录开始查询，将第一条记录代入子查询中，在sc表中匹配该学生选课记录，若匹配到则立刻返回真，父查询中输出该记录；若匹配完后结果仍为空，否则返回假，继续父查询继续代入下一条记录到子查询中查询。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与in子查询的区别&lt;/strong&gt;：&lt;br/&gt;在带in的子查询中，会遍历sc表中所有记录进行筛选，带exists的查询找到一条记录就返回，不会遍历整个表，所以带EXISTS的查询是一个优质查询。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;附加一题作为exists的练习&lt;br/&gt;&lt;strong&gt;“查询选了所有课程的学生”&lt;/strong&gt;&lt;br/&gt;这里需要使用双层带not exists(即不存在)关键词的查询。具体查询语句如下：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;#查询选了所有课程的学生
select sno,sname from student where not exists(
    select * from course where not exists (
        select * from sc where sc.sno=student.sno and sc.cno=course.cno
    )
);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个相当于一个进行一个双重循环，因为是选出学生的信息，所以student表作为“外层循环”，course表作为“内循环”，在sc表中查询学生的选课记录是否存在。&lt;/p&gt;&lt;p&gt;把student表中第一个学生代入“内循环”，然后开始，在sc表中查询该学生是否选了course表中所有课程。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果遍历了course表后，不存在没有被选的课程（课程在sc表中没有记录），则说明该学生选了所有课程，内部not exists就会返回假，外部not exists返回为真，说明该学生不存在没有选的课程，外部查询输出该学生的信息，然后开始下一个学生的查询。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在遍历course表时，若有一个课程没有被选，则内部就会立刻返回真（不会继续看下一门课程是否被选），外部查询返回为假，说明该学生没有选完所有课程，外部查询就会开始下一个学生的查询。&lt;/p&gt;
&lt;p&gt;再附加一个练习&lt;br/&gt;&lt;strong&gt;“找出被所有学生选了的课程的课程号和课程名”&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;select cno,cname from course where not exists(
    select * from student where not exists (
        select * from sc where sc.sno=student.sno and sc.cno=course.cno
    )
);&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;基于派生表的查询&quot;&gt;基于派生表的查询&lt;/h2&gt;
&lt;p&gt;select 查询的结果也是一张表，可以作为出现在from子句后面作为派生表进行查询。&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;#求学分获得8分以上学生的学号 平均分  以及总学分  
#需要注意此处的作用域不同，只有该课程的成绩大于60才会获得该课程的学分，平均分包括了所有课程（不及格和及格）
#思路：先将查询到的总学分结果看做是一张表 再与sc表连接进行查询平均分
select sc.sno,total_cre,avg(score) from
    (select sno,SUM(ceredit) as total_cre from sc,course where sc.cno=course.cno 
    and score &amp;gt;= 60
    group by sno 
    having SUM(ceredit) &amp;gt;= 8) as temptable, sc
where temptable.sno=sc.sno 
group by sc.sno,sum_cre;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;回顾了学习数据库时的嵌套查询，简单总结了一番。当时觉得其中比较难理解的exists查询，现在梳理了一下理解起来也没有那么困难。sql语句还是要常写，不然一些逻辑复杂点的语句就会理解不到。&lt;/p&gt;
</description>
<pubDate>Fri, 11 Jan 2019 07:06:00 +0000</pubDate>
<dc:creator>SakuraOne</dc:creator>
<og:description>前言 sql的嵌套查询可以说是sql语句中比较复杂的一部分，但是掌握好了的话就可以提高查询效率。下面将介绍带 的子查询、带 的子查询、带 的子查询、带 的子查询以及基于 的子查询。很多数据库是不区分关</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/myworld7/p/10255181.html</dc:identifier>
</item>
<item>
<title>【C#】调用2.0的坑 - cc_Lqqy</title>
<link>http://www.cnblogs.com/ccLqqy/p/10255055.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ccLqqy/p/10255055.html</guid>
<description>&lt;p&gt;1.初始化&lt;br/&gt; &lt;/p&gt;
&lt;p&gt; [DllImport(&quot;libarcsoft_face_engine.dll&quot;, EntryPoint = &quot;ASFInitEngine&quot;, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]&lt;br/&gt;private static extern int ASFInitEngine(uint detectMode, int orientPriority, int scale, int maxFaceNumber, uint combinedMask, out IntPtr pEngine);&lt;br/&gt;开始时，写了个long detectMode，返回错误信息是：0x16004，（detectFaceScaleVal 不支持）正式鬼扯，害我各种调整scale。&lt;br/&gt;改成uint就ok了。&lt;br/&gt;话说就一个mode，您弄&lt;br/&gt;  const uint ASF_DETECT_MODE_VIDEO = 0x00000000;  //Video模式，一般用于多帧连续检测&lt;br/&gt;  const uint ASF_DETECT_MODE_IMAGE = 0xFFFFFFFF;  //Image模式，一般用于静态图的单次检测&lt;/p&gt;&lt;p&gt;这两宝贝，我也是醉了。0/1不行吗？&lt;/p&gt;&lt;p&gt;2.人脸检测&lt;/p&gt;
&lt;p&gt;[DllImport(&quot;libarcsoft_face_engine.dll&quot;, EntryPoint = &quot;ASFDetectFaces&quot;, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]&lt;br/&gt;private static extern int ASFDetectFaces(IntPtr pEngine, int width, int height, int format, IntPtr pImageData, out ASF_MultiFaceInfo faceInfo);&lt;/p&gt;&lt;p&gt;开始时，弄了张身份证照片，102的宽度，不是4的倍数，返回0x1600F，手动编辑图片，拉伸成104的宽度便告成功。&lt;br/&gt;最终写了个方法，自动设成4的倍数，如下：&lt;br/&gt;    private (int W, int H, IntPtr PImageData) GetImageData(Bitmap bitmap)&lt;br/&gt;        {&lt;/p&gt;&lt;p&gt;            var bmpData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);&lt;br/&gt;            int width = (bitmap.Width + 3) / 4 * 4;&lt;/p&gt;&lt;p&gt;            var bytesCount = bmpData.Height * width * 3;&lt;br/&gt;            IntPtr pImageData = Marshal.AllocCoTaskMem(bytesCount);&lt;br/&gt;            if (width == bitmap.Width)&lt;br/&gt;                CopyMemory(pImageData, bmpData.Scan0, bytesCount);&lt;br/&gt;            else&lt;br/&gt;                for (int i = 0; i &amp;lt; bitmap.Height; i++)&lt;br/&gt;                    CopyMemory(IntPtr.Add(pImageData, i * width * 3), IntPtr.Add(bmpData.Scan0, i * bmpData.Stride), bmpData.Stride);&lt;br/&gt;            bitmap.UnlockBits(bmpData);&lt;br/&gt;            return new ValueTuple&amp;lt;int, int, IntPtr&amp;gt;(width, bitmap.Height, pImageData);&lt;br/&gt;        }&lt;/p&gt;&lt;p&gt;踩了这两个坑后，便愉快的运行了。&lt;/p&gt;&lt;p&gt;话说2.0的优点也不少：&lt;br/&gt;1.特征值缩小了，由原来的20多K变成1032字节（咱就不能变成1024？）&lt;br/&gt;2.比对速度快了很多很多，四线程10万次的比对也只要3秒多钟。&lt;/p&gt;
</description>
<pubDate>Fri, 11 Jan 2019 06:41:00 +0000</pubDate>
<dc:creator>cc_Lqqy</dc:creator>
<og:description>1.初始化 [DllImport(&quot;libarcsoft_face_engine.dll&quot;, EntryPoint = &quot;ASFInitEngine&quot;, Cal</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ccLqqy/p/10255055.html</dc:identifier>
</item>
<item>
<title>自动发布-asp.net自动发布、IIS站点自动发布（集成SLB、配置管理、Jenkins） - 钛氢硼</title>
<link>http://www.cnblogs.com/tihb666/p/10255008.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tihb666/p/10255008.html</guid>
<description>&lt;p&gt;PS：概要、背景、结语都是日常“装X”，可以跳过直接看自动发布&lt;/p&gt;
&lt;p&gt;环境：阿里云SLB、阿里云ECS、IIS7.0、Jenkins、Spring.Net&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;概要&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　公司一个项目从无到有，不仅仅是系统从无到有的过程，也是项目管理流程、运维流程逐步完善的过程，今天主要说说运维方面的，从人肉运维到自动运维，我们搭建了运维平台来实现。运维平台在很多人理解应该是运维来做，不过就像前面文章说过，在很多公司，资源有限的情况下，研发往往是“万能”的，需要承担更多的责任，本文我们主要讲关于Asp.Net自动发布这一块。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1、新进入一个公司，往往系统已经初具规模，已有成型的框架，但往往由于前期为了赶项目进度或者系统架构规划问题，随着系统功能的不断增加，一些运维方面的问题会越来越突显出来，如：配置管理混乱、站点特殊内容太多且无记录、发布纯人工操作等，发布风险很高，每次发布都提心吊胆，如临大敌；&lt;/p&gt;
&lt;p&gt;　　2、作为一名想“偷懒”的程序员，自从走向管理岗，就开始为运维自动化的投入争取资源，公司的运维平台搭建基本都是自己做产品经理或者研发。目前我们实现了日志管理、调度管理、站点管理、ECS管理、负载均衡管理、配置管理（目前只是实现了配置分离，下一步会实现配置动态生效）、发布申请管理、自动发布管理、MQ消息队列管理，监控主要是用阿里云自带的，业务异常监控应该算目前比较缺失的一块，以及其他很多都需要完善，但对公司最紧急的基本都已经实现；&lt;/p&gt;
&lt;p&gt;　　3、在当前Java风行，其他新兴语言慢慢崛起，并且微软自身也推出.Net Core的情况下，.Net的市场份额越来越小，很多公司都开始转Java，包括我目前所在的公司新系统也开始使用Java了。但就算转Java，以前的系统还是需要维护，对于公司来说花最小的代价达到优化的效果就行，转语言不是目的。对于程序员来说，掌握哪一种编程语言本身并不重要，更重要的是编程的思想、系统架构的思维，编程语言只是一种表现形式（作为一名.Net的老兵，最近在准备做Java的容器化，优化Java架构）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;自动发布&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　从我加入公司到现在，关于.Net的IIS站点发布大概经历了以下3个阶段：一、手工发布；二、半自动发布；三、系统自动发布；&lt;/p&gt;
&lt;p&gt;　　一、手工发布&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/445171/201901/445171-20190111141713928-1358606187.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　该阶段缺点：&lt;/p&gt;
&lt;p&gt;　　　　　　1、运维人员需要记住相应的代码路径、解决方案、项目名称，站点新建没有标准，导致不同的站点有一些特殊的设置或操作，导致新入职的运维人员需要很长时间才能上手；&lt;/p&gt;
&lt;p&gt;　　　　　　2、需要登录每台服务器修改配置，以及切换IIS站点路径，重启站点，且无法验证是否发布正常，发布工作量巨大，发布效率低，发布风险很高，把问题的发现抛给了用户，每次发布都提心吊胆；&lt;/p&gt;
&lt;p&gt;　　　　　　3、没有统一的平台管理各类信息，导致大部分信息都记录在相应的研发或运维人员脑袋里，每次关键人员离职都是“大地震”，信息孤岛严重；&lt;/p&gt;
&lt;p&gt;　　　　　　4、大部分工作都压在运维人员身上，且大多数时间都在做一些简单重复的工作，不利于运维人员自身的成长，难以留存人员。&lt;/p&gt;

&lt;p&gt;　　二、半自动发布&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/445171/201901/445171-20190111141910802-705667746.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　该阶段优化内容：&lt;/p&gt;
&lt;p&gt;　　　　　　1、制定IIS站点规范（如：配置与应用分离、增加发布成功测试页、规定特殊项的范围）；&lt;/p&gt;
&lt;p&gt;　　　　　　2、运维平台实现IIS站点信息及配置管理（维护站点基本信息、配置信息、特殊项）；&lt;/p&gt;
&lt;p&gt;　　　　　　3、运维平台实现阿里云SLB的管理（同步基本信息、添加/移除/刷新ECS状态）；&lt;/p&gt;
&lt;p&gt;　　　　　　4、搭建Jenkins持续集成平台，实现预发布环境的站点发布（获取最新代码、生成打包、上传服务器、覆盖文件、重启站点）。&lt;/p&gt;
&lt;p&gt;　　　　该阶段缺点：&lt;/p&gt;
&lt;p&gt;　　　　　　1、投产站点发布还是需要运维人员登录到每台服务器里面进行操作，发布工作量大，且人工发布虽然有信息记录，但因为不同运维人员的能力不同，导致发布风险还是很高；&lt;/p&gt;
&lt;p&gt;　　　　　　2、发布准备以及操作发布的时间都比较长，导致发布的前置时间比较长，不利于系统的快速迭代。&lt;/p&gt;

&lt;p&gt;　　三、系统自动发布&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/445171/201901/445171-20190111142113068-1316399321.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　该阶段优化内容：&lt;/p&gt;
&lt;p&gt;　　　　　　1、利于IIS的FTP实现发布文件分发到IIS站点的各服务器，并复制到相应的站点目录下；&lt;/p&gt;
&lt;p&gt;　　　　　　2、利于C#类库Microsoft.Web.Administration.dll，实现对IIS的站点管理，如：切换路径、站点重启等，相关代码见：&lt;a title=&quot;IIS站点管理-IIS站点以管理员身份或指定用户运行&quot; href=&quot;https://www.cnblogs.com/tihb666/p/10245660.html&quot; target=&quot;_blank&quot;&gt;IIS站点管理-IIS站点以管理员身份或指定用户运行&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;　　　　　　3、实现IIS站点发布的批量操作，如：从SLB移除ECS、发布配置、发布站点、浏览测试页、从SLB添加ECS、直至成功标记为已发布。&lt;/p&gt;
&lt;p&gt;　　　　自动发布相关截图：&lt;/p&gt;
&lt;p&gt;　　　　　　1、创建发布申请：&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/445171/201901/445171-20190111142503831-1998957683.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　2、发布操作页面&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/445171/201901/445171-20190111142314380-492458.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　3、单个站点一键发布&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/445171/201901/445171-20190111142336452-555673645.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　4、批量发布组1同时移除组2&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/445171/201901/445171-20190111142345438-244805493.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;结语&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　现在新项目用.Net的应该已经很少了，不过对于公司已有的系统，有些并不一定要去花时间重构，能花最小的代价达到能接受的效果对公司才是最划算的；以上很多只是提供了思路，以及关键的实现，如果大家真的需要应用到自己公司的系统，还是需要结合自己公司的情况进行处理。&lt;/p&gt;
</description>
<pubDate>Fri, 11 Jan 2019 06:35:00 +0000</pubDate>
<dc:creator>钛氢硼</dc:creator>
<og:description>PS：概要、背景、结语都是日常“装X”，可以跳过直接看自动发布 环境：阿里云SLB、阿里云ECS、IIS7.0、Jenkins、Spring.Net 概要 公司一个项目从无到有，不仅仅是系统从无到有的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tihb666/p/10255008.html</dc:identifier>
</item>
<item>
<title>程序员怎样提升自我，应对寒冬 - 幕三少</title>
<link>http://www.cnblogs.com/smiler/p/10255003.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smiler/p/10255003.html</guid>
<description>&lt;p align=&quot;left&quot;&gt;  国内的信息产业环境不成熟，举个最明显的例子，目前编程领域的从业人员超过半数都是通过培训机构出来的，甚至那些计算机专业毕业的学生，也不得不通过几个月的技能培训，才能找到工作，那我上了四年的计算机专业学了有什么用？通过剖析计算机从业人员接受的基础教育结构，市场环境，还有企业需求，最终得到的结论是，一个标准 IT 企业需要具备的条件如下：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;1. 计算机底层研发能力&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;2. 企业应用编程&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;3. 推向市场的产品&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;相对于这三项对位的计算机从业人员团队需要的技能如下：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;1. 计算机底层知识&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;2. 企业应用逻辑编程&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;3. 产品定位与规划能力&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;从业人员的个人能力获得途径如下：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;1. 学校的信息技术基础教育（底层知识）&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;2.培训机构 （编程能力）&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;3. 企业工作经验（产品能力，也就是项目经验）&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    综合国内基础教育结构，市场环境，还有企业需求，可以看出，培训机构是国内信息技术教育缺失的产物，简单来说就是学校只教基础，而企业需要高层编程能力，所以培训机构就是在这样的环境下产生的。一句话总结本质原因就是：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;&lt;em&gt;产学脱钩，导致学校人才供给无法满足市场企业需求。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;说明了原因，再来看另一个问题，写代码的都知道有 “一致性” 的概念，大了说有架构一致性，小了说有代码风格一致性，看前人的代码看着头疼就是因为你和写代码的人设计，代码风格都不一致，所以会有冲突。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    那么对于我们从小学到大学的整个教育过程这个大项目来说，其实存在巨大的不一致性，举个例子，你的小学老师教了你们六年，对学生的能力，特点是最熟悉的，可是升入初中之后，换了初中老师，这个过程中唯一留下能让初中老师用的 “交接文档” 就是以前的分数，这样的情况下，因材施教，因地制宜，从何而来？非要一对一的提高成绩的话，那么之前小学老师做的工作，初中老师要重复做一遍，才能对学生充分了解，并且初中老师只有三年时间，还没算上中间换老师的情况。过了初中之后，同样的情况会在高中，大学老师的身上重复发生，大家都在重复造轮子，就是因为一个求学者整个十几年的教育流程中的设计和把控是有缺陷的。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    这还是在学校教育项目内的问题，那么像毕业之后参加培训这种项目外的情况如何呢？这个影响就严重了，在没有人引导和告知的情况下，培训生普遍不知道培训机构的本质是大学教育过程的延伸，几乎所有的培训生都是觉得，培训就是用来找工作用的，潜在逻辑是，参加培训，培训机构包分配，然后我就能找到工作了。这种情况下，在培训机构学到的东西与学校知识的对接，不一致性就极其巨大了。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    通过以上分析，终于可以说回为什么工作四年才会看代码这个问题。从培训出来找到工作开始，之前分析的1,2,3条件中的2，也就是编程能力，已经在编程机构初步获得了，3条件，也就是企业产品需求，需要在长时间的工作当中去获得相关的感觉或者产品意识。当工作个五六年，随着自身职称的提高，遇到的问题也越来越难，面对企业的高并发，高访问这些问题，已经不能用培训机构获得的 CURD 来解决了，这个时候学校底层知识才迎来了应用的机会。这个时候，才会回顾以前的职业生涯，总结经验，然后把学校的底层知识捡起来，去解决 CURD 解决不了的难题。这个时候，才懂得了代码的深层意义。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    可以看出，理想的情况应该是，大学坚实的底层技术，配合中间层的编程能力，然后获得高层的企业工作能力，这个良好的架构设计最终因为现实原因割裂开了。底层是学了，但是没有用武之地，学生毕业之后没有在学校获得编程能力，面临的是 “断崖式的成长”，是的，本来应该是平缓过度到社会，结果却是断崖式的，中间缺失的一部分，将在生活中，通过鼻青脸肿式的棍棒教育，在社会这所大学里获得。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    大家读到这里，是不是觉得生活黑暗，要怨天尤人，并且抱怨为什么有这样的教育设计？这里要说一下的是，先有鸡还是先有蛋这个问题，是一个难题，好的学生是好教师教出来的，但是好的教师是哪里来的？如果没有好老师，那么教出来的学生是什么样的？将来这些学生成了老师又会是什么样的？这样岂不是恶性循环？要知道，教育问题，在世界上都是个及难解决的问题。并且教育问题不是靠个人能够解决的问题，这需要国家，社会，企业，家庭，教师，学生等等一起努力去改革，家长简单的把学生扔给学校，是没有办法100%培养出高素质人才的。我国目前还只是社会主义初级阶段，国家的重中之重是经济建设，有了钱，才能搞教育，除了教育，还有医疗，国防，还要抵御西方的恶意抵制。用钱的地方那么多，钱包却那么小，所以要辩证客观的看问题。一个企业在资金有限的情况下还会有所权衡，更不用说一个16亿人的大企业，我们所要做的，就是不灰心，充满希望的继续乐观生活，只有国家强盛，才有我们生活质量的进一步提高。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;最后说一下怎么避免工作很久之后才发现底层知识的缺失吧，不废话，直接给出如下：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;1. 未雨绸缪，不要太功利主义，不要觉得之后能赚钱的知识才是要学的知识，平时多看些编译原理，数学方面的知识，不是计算机专业的同学可以去搜一下国内外计算机专业名校的课程安排，然后去慢慢学习&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;2.多写代码，没有时间看底层，就反向去学底层，以代码为手段，遇到问题就深挖原理，在编程中深入底层，熟悉原理&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;3.培养全栈思维，全栈不是一个岗位，而是一种思维，可以用一种系统的观点让你重新认识自己目前的工作与岗位，获得全栈的简单方式就是多用新技术，然后横向对比，最终回到自己目前所用的语言，也就是跳出语言学语言&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;4.寻求大神帮助，大神的经历与能力都是经过实践验证的，大神的能力提升方法也一定是高效率的，通过大神的提点，能够避免许多走弯路的情况。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;5.多读人文历史类书籍，在团队中工作，没有好的情商，好的人文情怀，同事关系一定会出问题，技术只是实现产品的手段，产品之外还有广阔的知识领域与人生乐趣，不要太封闭自己，多读好的小说和书籍，你会发现一片不一样的天地。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;5.最后一点，对于以后想要成为大神的同学也是最重要的一点：警惕碎片化方式。不管是生活还是工作，大众的生活习惯已经趋向于碎片化，这是社会高速发展的结果，而编程需要的核心能力却是与碎片化相对的深度思维方式，不要小看碎片化，长时间在这种方式下生活，会丧失大脑的深度思考能力。是不是看超过5分钟以上的长文会有头晕不适的情况，是不是短视频app看的停不下来，有多久没有读一本超过300页的长篇书籍了？适度的娱乐是没问题的，但长时间如此的生活方式，会使大脑处理信息的能力退化。未来 AI 浪潮是大势所趋，国家也制定了相关的人工智能战略，而 AI 时代的编程从业者，需要的就是深度的，长时间的思考能力。 你可以不学底层，你可以继续靠 CURD 就能月入过万，但寒冬来临时，如果被裁了，那就不能怨社会了。如今都在谈论现在的寒冬有多可怕，又有多少人看到 AI 领域百万难求一人的情况呢。这一冷一热的两重天气，只有系统化思维的人才能看到原因，也只有这样的人，将来的路才会越走越宽。寒冬不可怕，在寒冬里没有生存能力，才是最可怕的。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Fri, 11 Jan 2019 06:34:00 +0000</pubDate>
<dc:creator>幕三少</dc:creator>
<og:description>国内的信息产业环境不成熟，举个最明显的例子，目前编程领域的从业人员超过半数都是通过培训机构出来的，甚至那些计算机专业毕业的学生，也不得不通过几个月的技能培训，才能找到工作，那我上了四年的计算机专业学了</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smiler/p/10255003.html</dc:identifier>
</item>
<item>
<title>软件测试 APP测试丶 - 雀巢先生丶</title>
<link>http://www.cnblogs.com/ll1996/p/10254518.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ll1996/p/10254518.html</guid>
<description>&lt;p&gt;android.util.Log常用的方法有以下六个：Log.v() Log.d() Log.i() Log.w() ， Log.e()以及Log.a() (android 4.0新增加的)。根据首字母对应           VERBOSE，DEBUG,INFO,WARN，ERROR,Assert。&lt;/p&gt;
&lt;p&gt;1、Log.v 的调试颜色为黑色的，任何消息都会输出，这里的v代表verbose啰嗦的意思，平时使用就是Log.v(&quot;&quot;,&quot;&quot;);&lt;/p&gt;
&lt;p&gt;2、Log.d的输出颜色是蓝色的，仅输出debug调试的意思，但他会输出上层的信息，过滤起来可以通过DDMS的Logcat标签来选择.&lt;/p&gt;
&lt;p&gt;3、Log.i的输出为绿色，一般提示性的消息information，它不会输出Log.v和Log.d的信息，但会显示i、w和e的信息&lt;/p&gt;
&lt;p&gt;4、Log.w的意思为橙色，可以看作为warning警告，一般需要我们注意优化Android代码，同时选择它后还会输出Log.e的信息。&lt;/p&gt;
&lt;p&gt;5、Log.e为红色，可以想到error错误，这里仅显示红色的错误信息，这些错误就需要我们认真的分析，查看栈的信息了。&lt;/p&gt;
&lt;p&gt;6    Log.a为4.0新增加的。           启动Eclipse,打开DDMS大家可以在LogCat里看见（前提是android 4.0的ADT）5&lt;/p&gt;
</description>
<pubDate>Fri, 11 Jan 2019 06:25:00 +0000</pubDate>
<dc:creator>雀巢先生丶</dc:creator>
<og:description>&lt;!-- ^ Position is not set to relative / absolute here because of Mozilla --&gt; 一：APP概述 APP架构：C/</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ll1996/p/10254518.html</dc:identifier>
</item>
<item>
<title>SQL练习题-30道 - 青笙挽歌余梦初</title>
<link>http://www.cnblogs.com/wan-ge1212/p/10254742.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wan-ge1212/p/10254742.html</guid>
<description>&lt;h3 class=&quot;title-article&quot;&gt;&lt;span&gt;使用方法：我用的数据库是 mysql数据库Webyog-SQLyog-Ultimate12.0.8.0l,大家练习时应当自己准备数据，自己先思考，切勿急躁翻答案！否则效果减半，做完这些，恭喜你，你的 SQL 就算过关了。&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;我的首页： https://www.cnblogs.com/wan-ge1212/&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准备数据 ： 测试表格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-&lt;span&gt;数据库文件：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;–&lt;span&gt;-1.&lt;/span&gt;&lt;span&gt;学生表&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Student(s_id,s_name,s_birth,s_sex) &lt;span&gt;–&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;学生编号&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;学生姓名&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;出生年月&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;学生性别&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;–&lt;span&gt;-2.&lt;/span&gt;&lt;span&gt;课程表&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Course(c_id,c_name,t_id) &lt;span&gt;––课程编号&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;课程名称&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;教师编号&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;–&lt;span&gt;-3.&lt;/span&gt;&lt;span&gt;教师表&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Teacher(t_id,t_name) &lt;span&gt;–教师编号&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;教师姓名&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;–&lt;span&gt;-4.&lt;/span&gt;&lt;span&gt;成绩表&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Score(s_id,c_id,s_score) &lt;span&gt;–&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;学生编号&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;课程编号&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;分数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;---------------------&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;--&lt;span&gt;建表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;–-1.学生表&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;CREATE TABLE `Student`(&lt;/p&gt;

&lt;p&gt;    `s_id` VARCHAR(20),&lt;/p&gt;

&lt;p&gt;    `s_name` VARCHAR(20) NOT NULL DEFAULT '',&lt;/p&gt;

&lt;p&gt;    `s_birth` VARCHAR(20) NOT NULL DEFAULT '',&lt;/p&gt;

&lt;p&gt;    `s_sex` VARCHAR(10) NOT NULL DEFAULT '',&lt;/p&gt;

&lt;p&gt;    PRIMARY KEY(`s_id`)&lt;/p&gt;

&lt;p&gt;);&lt;/p&gt;

&lt;p&gt;&lt;span&gt;--&lt;span&gt;课程表&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;CREATE TABLE `Course`(&lt;/p&gt;

&lt;p&gt;    `c_id`  VARCHAR(20),&lt;/p&gt;

&lt;p&gt;    `c_name` VARCHAR(20) NOT NULL DEFAULT '',&lt;/p&gt;

&lt;p&gt;    `t_id` VARCHAR(20) NOT NULL,&lt;/p&gt;

&lt;p&gt;    PRIMARY KEY(`c_id`)&lt;/p&gt;

&lt;p&gt;);&lt;/p&gt;

&lt;p&gt;&lt;span&gt;--&lt;span&gt;教师表&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;CREATE TABLE `Teacher`(&lt;/p&gt;

&lt;p&gt;    `t_id` VARCHAR(20),&lt;/p&gt;

&lt;p&gt;    `t_name` VARCHAR(20) NOT NULL DEFAULT '',&lt;/p&gt;

&lt;p&gt;    PRIMARY KEY(`t_id`)&lt;/p&gt;

&lt;p&gt;);&lt;/p&gt;

&lt;p&gt;&lt;span&gt;--&lt;span&gt;成绩表&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;CREATE TABLE `Score`(&lt;/p&gt;

&lt;p&gt;    `s_id` VARCHAR(20),&lt;/p&gt;

&lt;p&gt;    `c_id`  VARCHAR(20),&lt;/p&gt;

&lt;p&gt;    `s_score` INT(3),&lt;/p&gt;

&lt;p&gt;    PRIMARY KEY(`s_id`,`c_id`)&lt;/p&gt;

&lt;p&gt;);&lt;/p&gt;

&lt;p&gt;&lt;span&gt;--&lt;span&gt;插入学生表测试数据&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Student values('01' , '&lt;span&gt;赵雷&lt;/span&gt;&lt;span&gt;' , '1990-01-01' , '&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;');&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Student values('02' , '&lt;span&gt;钱电&lt;/span&gt;&lt;span&gt;' , '1990-12-21' , '&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;');&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Student values('03' , '&lt;span&gt;孙风&lt;/span&gt;&lt;span&gt;' , '1990-05-20' , '&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;');&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Student values('04' , '&lt;span&gt;李云&lt;/span&gt;&lt;span&gt;' , '1990-08-06' , '&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;');&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Student values('05' , '&lt;span&gt;周梅&lt;/span&gt;&lt;span&gt;' , '1991-12-01' , '&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;');&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Student values('06' , '&lt;span&gt;吴兰&lt;/span&gt;&lt;span&gt;' , '1992-03-01' , '&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;');&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Student values('07' , '&lt;span&gt;郑竹&lt;/span&gt;&lt;span&gt;' , '1989-07-01' , '&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;');&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Student values('08' , '&lt;span&gt;王菊&lt;/span&gt;&lt;span&gt;' , '1990-01-20' , '&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;');&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;--&lt;span&gt;课程表测试数据&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Course values('01' , '&lt;span&gt;语文&lt;/span&gt;&lt;span&gt;' , '02');&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Course values('02' , '&lt;span&gt;数学&lt;/span&gt;&lt;span&gt;' , '01');&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Course values('03' , '&lt;span&gt;英语&lt;/span&gt;&lt;span&gt;' , '03');&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;--&lt;span&gt;教师表测试数据&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Teacher values('01' , '&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;');&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Teacher values('02' , '&lt;span&gt;李四&lt;/span&gt;&lt;span&gt;');&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Teacher values('03' , '&lt;span&gt;王五&lt;/span&gt;&lt;span&gt;');&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;--&lt;span&gt;成绩表测试数据&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;insert into Score values('01' , '01' , 80);&lt;/p&gt;

&lt;p&gt;insert into Score values('01' , '02' , 90);&lt;/p&gt;

&lt;p&gt;insert into Score values('01' , '03' , 99);&lt;/p&gt;

&lt;p&gt;insert into Score values('02' , '01' , 70);&lt;/p&gt;

&lt;p&gt;insert into Score values('02' , '02' , 60);&lt;/p&gt;

&lt;p&gt;insert into Score values('02' , '03' , 80);&lt;/p&gt;

&lt;p&gt;insert into Score values('03' , '01' , 80);&lt;/p&gt;

&lt;p&gt;insert into Score values('03' , '02' , 80);&lt;/p&gt;

&lt;p&gt;insert into Score values('03' , '03' , 80);&lt;/p&gt;

&lt;p&gt;insert into Score values('04' , '01' , 50);&lt;/p&gt;

&lt;p&gt;insert into Score values('04' , '02' , 30);&lt;/p&gt;

&lt;p&gt;insert into Score values('04' , '03' , 20);&lt;/p&gt;

&lt;p&gt;insert into Score values('05' , '01' , 76);&lt;/p&gt;

&lt;p&gt;insert into Score values('05' , '02' , 87);&lt;/p&gt;

&lt;p&gt;insert into Score values('06' , '01' , 31);&lt;/p&gt;

&lt;p&gt;insert into Score values('06' , '03' , 34);&lt;/p&gt;

&lt;p&gt;insert into Score values('07' , '02' , 89);&lt;/p&gt;

&lt;p&gt;insert into Score values('07' , '03' , 98);&lt;/p&gt;

&lt;p&gt;--------------------- &lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 1&lt;span&gt;、查询&lt;/span&gt;&lt;span&gt;&quot;01&quot;&lt;/span&gt;&lt;span&gt;课程比&lt;/span&gt;&lt;span&gt;&quot;02&quot;&lt;/span&gt;&lt;span&gt;课程成绩高的学生的信息及课程分数&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  SELECT A.s_id,A.s_score&lt;/p&gt;
&lt;p&gt;FROM (SELECT * FROM score WHERE c_id=1) A,&lt;/p&gt;
&lt;p&gt;     (SELECT * FROM score WHERE c_id=2 ) B&lt;/p&gt;
&lt;p&gt;WHERE A.s_id=B.s_id&lt;/p&gt;
&lt;p&gt;   AND A.s_score&amp;gt;B.s_score;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 2&lt;span&gt;、查询&lt;/span&gt;&lt;span&gt;&quot;01&quot;&lt;/span&gt;&lt;span&gt;课程比&lt;/span&gt;&lt;span&gt;&quot;02&quot;&lt;/span&gt;&lt;span&gt;课程成绩低的学生的信息及课程分数&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  SELECT A.s_id,A.s_score&lt;/p&gt;
&lt;p&gt;FROM (SELECT * FROM score WHERE c_id=1) A,&lt;/p&gt;
&lt;p&gt;     (SELECT * FROM score WHERE c_id=2 ) B&lt;/p&gt;
&lt;p&gt;WHERE A.s_id=B.s_id&lt;/p&gt;
&lt;p&gt;   AND A.s_score&amp;gt;B.s_score;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;-- 3&lt;span&gt;、查询平均成绩大于等于&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;&lt;span&gt;分的同学的学生编号和学生姓名和平均成绩&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT A.s_id,B.s_name,AVG(A.s_score)&lt;/p&gt;
&lt;p&gt;FROM Score A,Student B&lt;/p&gt;
&lt;p&gt;WHERE A.s_id=B.s_id&lt;/p&gt;
&lt;p&gt;GROUP BY A.s_id,B.s_name&lt;/p&gt;
&lt;p&gt;HAVING AVG(A.s_score)&amp;gt;=60;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;-- 4&lt;span&gt;、查询平均成绩小于&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;&lt;span&gt;分的同学的学生编号和学生姓名和平均成绩&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;包括有成绩的和无成绩的&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT A.s_id,B.s_name,AVG(A.s_score)&lt;/p&gt;
&lt;p&gt;FROM Score A,Student B&lt;/p&gt;
&lt;p&gt;WHERE A.s_id=B.s_id&lt;/p&gt;
&lt;p&gt;GROUP BY A.s_id,B.s_name&lt;/p&gt;
&lt;p&gt;HAVING AVG(A.s_score)&amp;lt;60&lt;/p&gt;
&lt;p&gt;or AVG(A.s_score) is null;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 5&lt;span&gt;、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT E.s_id,E.s_name,COUNT(C.c_id)OVER(PARTITION BY C.s_id,E.s_name),&lt;/p&gt;
&lt;p&gt;SUM(C.s_score)OVER(PARTITION BY C.s_id,C.c_id)&lt;/p&gt;
&lt;p&gt;FROM Student E,Score C&lt;/p&gt;
&lt;p&gt;WHERE E.s_id=C.s_id;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 6&lt;span&gt;、查询&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;姓老师的数量&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT COUNT(t_id)&lt;/p&gt;
&lt;p&gt;FROM Teacher&lt;/p&gt;
&lt;p&gt;WHERE t_name LIKE '&lt;span&gt;李&lt;/span&gt;&lt;span&gt;%';&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 7&lt;span&gt;、查询学过&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;老师授课的同学的信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT S.*&lt;/p&gt;
&lt;p&gt;FROM Student S,Score  C&lt;/p&gt;
&lt;p&gt;WHERE S.s_id=C.s_id AND C.c_id IN&lt;/p&gt;
&lt;p&gt;(SELECT E.c_id FROM Course E,Teacher T&lt;/p&gt;
&lt;p&gt;WHERE E.c_name=T.t_name AND T.t_name='&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;');&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 8&lt;span&gt;、查询没学过&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;老师授课的同学的信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT  S.*&lt;/p&gt;
&lt;p&gt;FROM Student S WHERE NOT EXISTS&lt;/p&gt;
&lt;p&gt;(SELECT s_id  FROM Score X,Course C,Teacher T&lt;/p&gt;
&lt;p&gt;WHERE X.c_id=C.c_id AND C.t_id=T.t_id AND T.t_name='&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;' AND S.s_id=X.s_id)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 9&lt;span&gt;、查询学过编号为&lt;/span&gt;&lt;span&gt;&quot;01&quot;&lt;/span&gt;&lt;span&gt;并且也学过编号为&lt;/span&gt;&lt;span&gt;&quot;02&quot;&lt;/span&gt;&lt;span&gt;的课程的同学的信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT DISTINCT S.* FROM Score C,Student S&lt;/p&gt;
&lt;p&gt;WHERE S.S_ID=C.S_ID AND C_ID=1&lt;/p&gt;
&lt;p&gt;UNION&lt;/p&gt;
&lt;p&gt;SELECT DISTINCT S.* FROM Score C,Student S&lt;/p&gt;
&lt;p&gt;WHERE S.S_ID=C.S_ID AND C_ID=2&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 10&lt;span&gt;、查询学过编号为&lt;/span&gt;&lt;span&gt;&quot;01&quot;&lt;/span&gt;&lt;span&gt;但是没有学过编号为&lt;/span&gt;&lt;span&gt;&quot;02&quot;&lt;/span&gt;&lt;span&gt;的课程的同学的信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT DISTINCT S.* FROM Score C,Student S&lt;/p&gt;
&lt;p&gt;WHERE S.S_ID=C.S_ID AND C_ID=1&lt;/p&gt;
&lt;p&gt;UNION&lt;/p&gt;
&lt;p&gt;SELECT  DISTINCT S.* FROM Student S&lt;/p&gt;
&lt;p&gt;WHERE NOT EXISTS&lt;/p&gt;
&lt;p&gt;(SELECT s_id  FROM Score C WHERE C_ID=2  AND S.s_id=C.s_id)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 11&lt;span&gt;、查询没有学全所有课程的同学的信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT S.* FROM Student S,Score C&lt;/p&gt;
&lt;p&gt;WHERE S.S_ID=C.S_ID&lt;/p&gt;
&lt;p&gt;GROUP BY S.S_ID,S.s_name&lt;/p&gt;
&lt;p&gt;HAVING COUNT(C.C_ID)!=(SELECT COUNT(C_ID)FROM COURSE);&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 12&lt;span&gt;、查询至少有一门课与学号为&lt;/span&gt;&lt;span&gt;&quot;01&quot;&lt;/span&gt;&lt;span&gt;的同学所学相同的同学的信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT DISTINCT S.* FROM STUDENT S,SCORE C&lt;/p&gt;
&lt;p&gt;WHERE S.S_ID!=1 AND C.C_ID  IN&lt;/p&gt;
&lt;p&gt;(SELECT C_ID FROM SCORE WHERE S_ID=1);&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 13&lt;span&gt;、查询和&lt;/span&gt;&lt;span&gt;&quot;01&quot;&lt;/span&gt;&lt;span&gt;号的同学学习的课程完全相同的其他同学的信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT DISTINCT S.*&lt;/p&gt;
&lt;p&gt;FROM STUDENT S,SCORE C&lt;/p&gt;
&lt;p&gt;WHERE S.S_ID=C.S_ID AND C.S_ID!=1  &lt;/p&gt;
&lt;p&gt;GROUP BY S.S_ID,S.S_NAME&lt;/p&gt;
&lt;p&gt;HAVING COUNT( C.C_ID)=&lt;/p&gt;
&lt;p&gt;(SELECT COUNT(C_ID) FROM SCORE WHERE S_ID=1);&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 14&lt;span&gt;、查询没学过&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;老师讲授的任一门课程的学生姓名&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT S_ID,S_NAME FROM STUDENT WHERE S_ID NOT IN&lt;/p&gt;
&lt;p&gt;(SELECT C.S_ID&lt;/p&gt;
&lt;p&gt;FROM SCORE C,COURSE E,TEACHER T&lt;/p&gt;
&lt;p&gt;WHERE  C.C_ID=E.C_ID AND E.T_ID=T.T_ID AND T.T_NAME='&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;' );&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 15&lt;span&gt;、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;select s_name,avg(s_score)&lt;/p&gt;
&lt;p&gt;from Student S,Score sc&lt;/p&gt;
&lt;p&gt;where s.s_id=sc.s_id and s_score&amp;lt;60&lt;/p&gt;
&lt;p&gt;group by s_name&lt;/p&gt;
&lt;p&gt;having count(s_score)&amp;gt;=2&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 16&lt;span&gt;、检索&lt;/span&gt;&lt;span&gt;&quot;01&quot;&lt;/span&gt;&lt;span&gt;课程分数小于&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;&lt;span&gt;，按分数降序排列的学生信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT S_ID FROM SCORE&lt;/p&gt;
&lt;p&gt;WHERE C_ID=1 AND S_SCORE&amp;lt;60&lt;/p&gt;
&lt;p&gt;ORDER BY S_SCORE DESC;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;-- 17&lt;span&gt;、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;select distinct A.c_id,c_name,&lt;span&gt;最高分&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;最低分&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;平均分&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;及格率&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;中等率&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;优良率&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;优秀率&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;from Score A&lt;/p&gt;
&lt;p&gt;left join Course on A.c_id=Course.c_id&lt;/p&gt;
&lt;p&gt;left join (select c_id,MAX(s_score) &lt;span&gt;最高分&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;MIN(s_score) &lt;span&gt;最低分&lt;/span&gt;&lt;span&gt;,AVG(s_score)&lt;/span&gt; &lt;span&gt;平均分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;from Score  group by c_id)B  on A.c_id=B.c_id&lt;/p&gt;
&lt;p&gt;left join (select c_id,(convert(decimal(5,2),&lt;/p&gt;
&lt;p&gt;(sum(case when s_score&amp;gt;=60  then 1 else 0 end)*1.00)/COUNT(*))*100) &lt;span&gt;及格率&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;from Score group by c_id)C  on A.c_id=C.c_id&lt;/p&gt;
&lt;p&gt;left join (select c_id,(convert(decimal(5,2),&lt;/p&gt;
&lt;p&gt;(sum(case when s_score &amp;gt;=70 and s_score&amp;lt;80 then 1 else 0 end)*1.00)/COUNT(*))*100) &lt;span&gt;中等率&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;from Score group by c_id)D on A.c_id=D.c_id&lt;/p&gt;
&lt;p&gt;left join (select c_id,(convert(decimal(5,2),&lt;/p&gt;
&lt;p&gt;(sum(case when s_score &amp;gt;=80 and s_score&amp;lt;90 then 1 else 0 end)*1.00)/COUNT(*))*100) &lt;span&gt;优良率&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;from Score group by c_id)E  on A.c_id=E.c_id&lt;/p&gt;
&lt;p&gt;left join (select c_id,(convert(decimal(5,2),&lt;/p&gt;
&lt;p&gt;(sum(case when s_score &amp;gt;=90 then 1 else 0 end)*1.00)/COUNT(*))*100) &lt;span&gt;优秀率&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; from Score group by c_id)F  on A.c_id=F.c_id&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;-- 18&lt;span&gt;、查询各科成绩最高分、最低分和平均分：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;以如下形式显示：课程&lt;/span&gt;ID&lt;span&gt;，课程&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;，最高分，最低分，平均分，及格率，中等率，优良率，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;优秀率及格为&lt;/span&gt;&amp;gt;=60&lt;span&gt;，中等为：&lt;/span&gt;&lt;span&gt;70-80&lt;/span&gt;&lt;span&gt;，优良为：&lt;/span&gt;&lt;span&gt;80-90&lt;/span&gt;&lt;span&gt;，优秀为：&lt;/span&gt;&lt;span&gt;&amp;gt;=90&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;select *,RANK()over(order by s_score desc)&lt;span&gt;排名&lt;/span&gt; &lt;span&gt;from Score&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;-- 19&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;、查询下月过生日的学生  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;         &lt;/span&gt;&lt;span&gt;(sql server)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;select s.* from Student s&lt;/p&gt;
&lt;p&gt;where to_char(s.s_birth, 'mm')=to_char(add_months(trunc(sysdate),1),'mm')&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 20&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;、查询本月过生日的学生&lt;/span&gt;  &lt;/strong&gt;&lt;/span&gt;          &lt;/span&gt;&lt;span&gt;(sql server)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;select s.* from Student s&lt;/p&gt;
&lt;p&gt; where to_char(s.s_birth, 'mm') = to_char(sysdate,'mm')&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 21&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;、查询下周过生日的学生  &lt;/span&gt; &lt;/strong&gt;&lt;/span&gt;         &lt;/span&gt;&lt;span&gt;(sql server)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;select s.* from student s&lt;/p&gt;
&lt;p&gt; where to_char(s.s_birth, 'mmdd') between&lt;/p&gt;
&lt;p&gt;to_char(trunc(sysdate, 'iw')+7, 'mmdd') and       &lt;/p&gt;
&lt;p&gt;to_char(trunc(sysdate, 'iw') + 13, 'mmdd')&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 22&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;、查询本周过生日的学生  &lt;/span&gt; &lt;/strong&gt;&lt;/span&gt;         &lt;/span&gt;&lt;span&gt;(sql server)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;select st.*  from student s&lt;/p&gt;
&lt;p&gt; where to_char(s.s_birth, 'mmdd')  between&lt;/p&gt;
&lt;p&gt;to_char(trunc(sysdate, 'iw'), 'mmdd') and&lt;/p&gt;
&lt;p&gt;to_char(trunc(sysdate, 'iw') + 6, 'mmdd')&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;-- 23&lt;span&gt;、查询各学生的年龄&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;按照出生日期来算，当前月日&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;&lt;span&gt;出生年月的月日则，年龄减一  &lt;/span&gt; &lt;/strong&gt;         &lt;span&gt;(sql server)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;select s.*, (to_char(sysdate, 'yyyy') - to_char(s.s_birth, 'yyyy')) &quot;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;&quot;  from student s&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;-- 24&lt;span&gt;、查询选修了全部课程的学生信息&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT S.* FROM STUDENT S,SCORE C&lt;/p&gt;
&lt;p&gt;WHERE S.S_ID=C.S_ID&lt;/p&gt;
&lt;p&gt;GROUP BY S.S_ID,S.s_name&lt;/p&gt;
&lt;p&gt;HAVING COUNT(C.C_ID) IN (SELECT COUNT(C_ID)FROM COURSE);&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;-- 25&lt;span&gt;、检索至少选修两门课程的学生学号&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT S_ID,COUNT(C_ID)FROM SCORE GROUP BY S_ID HAVING COUNT(C_ID)&amp;gt;2;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-- 26&lt;span&gt;、查询每门功成绩最好的前两名&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;select c_id,COUNT(s_id)&lt;span&gt;选修人数&lt;/span&gt; &lt;span&gt;from Score&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;group by c_id&lt;/p&gt;
&lt;p&gt;having COUNT(s_id)&amp;gt;5&lt;/p&gt;
&lt;p&gt;order by &lt;span&gt;选修人数&lt;/span&gt; &lt;span&gt;desc,c_id&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;-- 27&lt;span&gt;、查询选修&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;老师所授课程的学生中，成绩最高的学生信息及其成绩&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SELECT S.S_ID,C.S_SCORE&lt;/p&gt;
&lt;p&gt;FROM STUDENT S,SCORE C,COURSE E,TEACHER T&lt;/p&gt;
&lt;p&gt;WHERE S.S_ID=C.S_ID AND C.C_ID=E.C_ID AND E.T_ID=T.T_ID AND T.T_NAME='&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;AND C.S_SCORE=(SELECT MAX(S_SCORE)FROM SCORE WHERE C_ID=C.C_ID );&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;-- 28&lt;span&gt;、查询所有学生的课程及分数情况&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;select a.s_id,a.s_name,b.s_id,c.c_name,b.s_score&lt;/p&gt;
&lt;p&gt;         from student a,Score b,Course c&lt;/p&gt;
&lt;p&gt;         where a.s_id=b.s_id and b.c_id=c.c_id;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;-- 29&lt;span&gt;、查询平均成绩大于等于&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;&lt;span&gt;的所有学生的学号、姓名和平均成绩&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SELECT S.S_ID,S_NAME,AVG(S_SCORE) FROM STUDENT S,SCORE C&lt;/p&gt;
&lt;p&gt;WHERE S.S_ID=C.S_ID GROUP BY S.S_ID,S_NAME&lt;/p&gt;
&lt;p&gt;HAVING AVG(S_SCORE)&amp;gt;=85;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;-- 30&lt;span&gt;、查询同名同性学生名单，并统计同名人数&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;select s_name,count(s_name) from student&lt;/p&gt;
&lt;p&gt; group by s_name having count(s_name)&amp;gt;1 ;&lt;/p&gt;

</description>
<pubDate>Fri, 11 Jan 2019 06:09:00 +0000</pubDate>
<dc:creator>青笙挽歌余梦初</dc:creator>
<og:description>sql查询30题 使用方法：我用的数据库是 mysql数据库Webyog-SQLyog-Ultimate12.0.8.0l,大家练习时应当自己准备数据，自己先思考，切勿急躁翻答案！否则效果减半，做完这</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wan-ge1212/p/10254742.html</dc:identifier>
</item>
</channel>
</rss>