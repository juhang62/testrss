<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>React 中阻止事件冒泡的问题 - 刘哇勇</title>
<link>http://www.cnblogs.com/Wayou/p/react_event_issue.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Wayou/p/react_event_issue.html</guid>
<description>&lt;p&gt;在正式开始前，先来看看 JS 中事件的触发与事件处理器的执行。&lt;/p&gt;
&lt;h2&gt;JS 中事件的监听与处理&lt;/h2&gt;
&lt;h3&gt;事件捕获与冒泡&lt;/h3&gt;
&lt;p&gt;DOM 事件会先后经历 &lt;strong&gt;捕获&lt;/strong&gt; 与 &lt;strong&gt;冒泡&lt;/strong&gt; 两个阶段。捕获即事件沿着 DOM 树由上往下传递，到达触发事件的元素后，开始由下往上冒泡。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;IE9 及之前的版本只支持冒泡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;                  |  A
 -----------------|--|-----------------
 | Parent         |  |                |
 |   -------------|--|-----------     |
 |   |Children    V  |          |     |
 |   ----------------------------     |
 |                                    |
 --------------------------------------
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;事件处理器&lt;/h3&gt;
&lt;p&gt;默认情况下，事件处理器是在事件的冒泡阶段执行，无论是直接设置元素的 &lt;code&gt;onclick&lt;/code&gt; 属性还是通过 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;EventTarget.addEventListener()&lt;/code&gt;&lt;/a&gt; 来绑定，后者在没有设置 &lt;code&gt;useCapture&lt;/code&gt; 参数为 &lt;code&gt;true&lt;/code&gt; 的情况下。&lt;/p&gt;
&lt;p&gt;考察下面的示例：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-html-basic&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;btnClickHandler(event)&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;CLICK ME&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt;&amp;gt;
&lt;span class=&quot;pl-s1&quot;&gt;  &lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;) {&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;    &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;document clicked&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;  });&lt;/span&gt;

&lt;span class=&quot;pl-s1&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;btnClickHandler&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;) {&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;    &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;btn clicked&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;  }&lt;/span&gt;
&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;btn clicked
document clicked
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;阻止事件的冒泡&lt;/h3&gt;
&lt;p&gt;通过调用事件身上的 &lt;code&gt;stopPropagation()&lt;/code&gt; 可阻止事件冒泡，这样可实现只我们想要的元素处理该事件，而其他元素接收不到。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-html-basic&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;btnClickHandler(event)&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;CLICK ME&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt;&amp;gt;
&lt;span class=&quot;pl-s1&quot;&gt;  &lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;addEventListener&lt;/span&gt;(&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;    &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;) {&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;      &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;document clicked&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;    },&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;    &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;  );&lt;/span&gt;

&lt;span class=&quot;pl-s1&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;btnClickHandler&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;) {&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;    &lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;stopPropagation&lt;/span&gt;();&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;    &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;btn clicked&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;  }&lt;/span&gt;
&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;btn clicked
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;一个阻止冒泡的应用场景&lt;/h3&gt;
&lt;p&gt;常见的弹窗组件中，点击弹窗区域之外关闭弹窗的功能，可通过阻止事件冒泡来方便地实现，而不用这种方式的话，会引入复杂的判断当前点击坐标是否在弹窗之外的复杂逻辑。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, () &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; close dialog&lt;/span&gt;
});

&lt;span class=&quot;pl-smi&quot;&gt;dialogElement&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;stopPropagation&lt;/span&gt;();
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但如果你尝试在 React 中实现上面的逻辑，一开始的尝试会让你怀疑人生。&lt;/p&gt;
&lt;h2&gt;React 下事件执行的问题&lt;/h2&gt;
&lt;p&gt;了解了 JS 中事件的基础，一切都没什么难的。在引入 React 后，，事情开始起变化。将上面阻止冒泡的逻辑在 React 里实现一下，代码大概像这样：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;App&lt;/span&gt;() {
  &lt;span class=&quot;pl-en&quot;&gt;useEffect&lt;/span&gt;(() &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, documentClickHandler);
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; () &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;removeEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, documentClickHandler);
    };
  }, []);

  &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;documentClickHandler&lt;/span&gt;() {
    &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;document clicked&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
  }

  &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;btnClickHandler&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;) {
    &lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;stopPropagation&lt;/span&gt;();
    &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;btn clicked&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
  }

  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;{btnClickHandler}&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;CLICK&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;ME&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;btn clicked
document clicked
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;document 上的事件处理器正常执行了，并没有因为我们在按钮里面调用 &lt;code&gt;event.stopPropagation()&lt;/code&gt; 而阻止。&lt;/p&gt;
&lt;p&gt;那么问题出在哪？&lt;/p&gt;
&lt;h3&gt;React 中事件处理的原理&lt;/h3&gt;
&lt;p&gt;考虑下面的示例代码并思考点击按钮后的输出。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;19&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;React&lt;/span&gt;, { &lt;span class=&quot;pl-smi&quot;&gt;useEffect&lt;/span&gt; } &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;react&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ReactDOM&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;react-dom&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;

&lt;span class=&quot;pl-c1&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;window&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
});

&lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;document:bedore react mount&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
});

&lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;body&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
});

&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;App&lt;/span&gt;() {
  &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;documentHandler&lt;/span&gt;() {
    &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;document within react&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
  }

  &lt;span class=&quot;pl-en&quot;&gt;useEffect&lt;/span&gt;(() &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, documentHandler);
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; () &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;removeEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, documentHandler);
    };
  }, []);

  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; (
    &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;div
      onClick&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;{() &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;raect:container&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
      }}
    &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;button
        onClick&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;{&lt;span class=&quot;pl-smi&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
          &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;react:button&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
        }}
      &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;pl-c1&quot;&gt;CLICK&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;ME&lt;/span&gt;
      &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
  );
}

&lt;span class=&quot;pl-smi&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;App &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;root&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;));

&lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;document:after react mount&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在对代码做一些变动，在 body 的事件处理器中把冒泡阻止，再思考其输出。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
document.body.addEventListener(&quot;click&quot;, event =&amp;gt; {
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;  event.stopPropagation();&lt;/span&gt;
  console.log(&quot;body&quot;);
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是剧透环节，如果你懒得自己实验的话。&lt;/p&gt;
&lt;p&gt;点击按钮后的输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;body
document:bedore react mount
react:button
raect:container
document:after react mount
document within react
window
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;bdoy 上阻止冒泡后，你可能会觉得，既然 body 是按钮及按钮容器的父级，那么按钮及容器的事件会正常执行，事件到达 body 后， body 的事件处理器执行，然后就结束了。 document 上的事件处理器一个也不执行。&lt;/p&gt;
&lt;p&gt;事实上，按钮及按钮容器上的事件处理器也没执行，只有 body 执行了。&lt;/p&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;body
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过下面的分析，你能够完全理解上面的结果。&lt;/p&gt;
&lt;h4&gt;SyntheticEvent&lt;/h4&gt;
&lt;p&gt;React 有自身的一套事件系统，叫作 &lt;a href=&quot;https://reactjs.org/docs/events.html&quot; rel=&quot;nofollow&quot;&gt;SyntheticEvent&lt;/a&gt;。叫什么不重要，实现上，其实就是通过在 document 上注册事件代理了组件树中所有的事件（&lt;a href=&quot;https://github.com/facebook/react/issues/4335#issuecomment-120269153&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/facebook/react/issues/4335/hovercard&quot;&gt;facebook/react#4335&lt;/a&gt;），并且它监听的是 document 冒泡阶段。你完全可以忽略掉 SyntheticEvent 这个名词，如果觉得它有点让事情变得高大上或者增加了一些神秘的话。&lt;/p&gt;
&lt;p&gt;除了事件系统，它有自身的一套，另外还需要理解的是，界面上展示的 DOM 与我们代码中的 DOM 组件，也是两样东西，需要在概念上区分开来。&lt;/p&gt;
&lt;p&gt;所以，当你在页面上点击按钮，事件开始在原生 DOM 上走捕获冒泡流程。React 监听的是 document 上的冒泡阶段。事件冒泡到 document 后，React 将事件再派发到组件树中，然后事件开始在组件树 DOM 中走捕获冒泡流程。&lt;/p&gt;
&lt;p&gt;现在来尝试理解一下输出结果：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;事件最开始从原生 DOM 按钮一路冒泡到 body，body 的事件处理器执行，输出 &lt;code&gt;body&lt;/code&gt;。注意此时流程还没进入 React。为什么？因为 React 监听的是 document 上的事件。&lt;/li&gt;
&lt;li&gt;继续往上事件冒泡到 document。
&lt;ul&gt;&lt;li&gt;事件到达 document 之后，发现 document 上面一共绑定了三个事件处理器，分别是代码中通过 &lt;code&gt;document.addEventListener&lt;/code&gt; 在 &lt;code&gt;ReactDOM.render&lt;/code&gt; 前后调用的，以及一个隐藏的事件处理器，是 &lt;a href=&quot;https://github.com/facebook/react/blob/e8857918422b5ce8505ba5ce4a2d153e509c17a1/packages/react-dom/src/events/ReactBrowserEventEmitter.js#L105-L173&quot;&gt;ReactDOM 绑定的&lt;/a&gt;，也就是前面提到的 React 用来代理事件的那个处理器。&lt;/li&gt;
&lt;li&gt;同一元素上如果对同一类型的事件绑定了多个处理器，会按照绑定的顺序来执行。&lt;/li&gt;
&lt;li&gt;所以 &lt;code&gt;ReactDOM.render&lt;/code&gt; 之前的那个处理器先执行，输出 &lt;code&gt;document:before react mount&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;然后是 React 的事件处理器。此时，流程才真正进入 React，走进我们的组件。组件里面就好理解了，从 button 冒泡到 container，依次输出。&lt;/li&gt;
&lt;li&gt;最后 &lt;code&gt;ReactDOM.render&lt;/code&gt; 之后的那个处理器先执行，输出 &lt;code&gt;document:after react mount&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;事件完成了在 document 上的冒泡，往上到了 window，执行相应的处理器并输出 &lt;code&gt;window&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;理解 &lt;strong&gt;React 是通过监听 document 冒泡阶段来代理组件中的事件&lt;/strong&gt;，这点很重要。同时，区分原生 DOM 与 React 组件，也很重要。并且，React 组件上的事件处理器接收到的 &lt;code&gt;event&lt;/code&gt; 对象也有别于原生的事件对象，不是同一个东西。但这个对象上有个 &lt;code&gt;nativeEvent&lt;/code&gt; 属性，可获取到原生的事件对象，后面会用到和讨论它。&lt;/p&gt;
&lt;p&gt;紧接着的代码的改动中，我们在 body 上阻止了事件冒泡，这样事件在 body 就结束了，没有到达 document，那么 React 的事件就不会被触发，所以 React 组件树中，按钮及容器就没什么反应。如果没理解到这点，光看表象还以为是 bug。&lt;/p&gt;
&lt;p&gt;进而可以理解，如果在 &lt;code&gt;ReactDOM.render()&lt;/code&gt; 之前的的 document 事件处理器上将冒泡结束掉，同样会影响 React 的执行。只不过这里需要调用的不是 &lt;code&gt;event.stopPropagation()&lt;/code&gt;，而是 &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
document.addEventListener(&quot;click&quot;, event =&amp;gt; {
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;  event.stopImmediatePropagation();&lt;/span&gt;
  console.log(&quot;document:bedore react mount&quot;);
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;body
document:bedore react mount
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stopImmediatePropagation&lt;/code&gt; 会产生这样的效果，即，如果同一元素上同一类型的事件（这里是 &lt;code&gt;click&lt;/code&gt;）绑定了多个事件处理器，本来这些处理器会按绑定的先后来执行，但如果其中一个调用了 &lt;code&gt;stopImmediatePropagation&lt;/code&gt;，不但会阻止事件冒泡，还会阻止这个元素后续其他事件处理器的执行。&lt;/p&gt;
&lt;p&gt;所以，虽然都是监听 document 上的点击事件，但 &lt;code&gt;ReactDOM.render()&lt;/code&gt; 之前的这个处理器要先于 React，所以 React 对 document 的监听不会触发。&lt;/p&gt;
&lt;h3&gt;解答前面按钮未能阻止冒泡的问题&lt;/h3&gt;
&lt;details readability=&quot;6&quot;&gt;如果你已经忘了，这是相应的代码及输出。
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;App&lt;/span&gt;() {
 &lt;span class=&quot;pl-en&quot;&gt;useEffect&lt;/span&gt;(() &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
   &lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, documentClickHandler);
   &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; () &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
     &lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;removeEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, documentClickHandler);
   };
 }, []);

 &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;documentClickHandler&lt;/span&gt;() {
   &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;document clicked&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
 }

 &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;btnClickHandler&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;) {
   &lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;stopPropagation&lt;/span&gt;();
   &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;btn clicked&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
 }

 &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;{btnClickHandler}&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;CLICK&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;ME&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;btn clicked
document clicked
&lt;/code&gt;
&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;到这里，已经可以解答为什么 React 组件中 button 的事件处理器中调用 &lt;code&gt;event.stopPropagation()&lt;/code&gt; 没有阻止 document 的点击事件执行的问题了。因为 button 事件处理器的执行前提是事件达到 document 被 React 接收到，然后 React 将事件派发到 button 组件。既然在按钮的事件处理器执行之前，事件已经达到 document 了，那当然就无法在按钮的事件处理器进行阻止了。&lt;/p&gt;
&lt;h2&gt;问题的解决&lt;/h2&gt;
&lt;p&gt;要解决这个问题，这里有不止一种方法。&lt;/p&gt;
&lt;h3&gt;用 &lt;code&gt;window&lt;/code&gt; 替换 &lt;code&gt;document&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;来自 &lt;a href=&quot;https://github.com/facebook/react/issues/4335#issuecomment-421705171&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/facebook/react/issues/4335/hovercard&quot;&gt;React issue 回答&lt;/a&gt;中提供的这个方法是最快速有效的。使用 window 替换掉 document 后，前面的代码可按期望的方式执行。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
function App() {
  useEffect(() =&amp;gt; {
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;    window.addEventListener(&quot;click&quot;, documentClickHandler);&lt;/span&gt;
    return () =&amp;gt; {
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;      window.removeEventListener(&quot;click&quot;, documentClickHandler);&lt;/span&gt;
    };
  }, []);

  function documentClickHandler() {
    console.log(&quot;document clicked&quot;);
  }

  function btnClickHandler(event) {
    event.stopPropagation();
    console.log(&quot;btn clicked&quot;);
  }

  return &amp;lt;button onClick={btnClickHandler}&amp;gt;CLICK ME&amp;lt;/button&amp;gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里 button 事件处理器上接到到的 event 来自 React 系统，也就是 document 上代理过来的，所以通过它阻止冒泡后，事件到 document 就结束了，而不会往上到 window。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;Event.stopImmediatePropagation()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;组件中事件处理器接收到的 &lt;code&gt;event&lt;/code&gt; 事件对象是 React 包装后的 SyntheticEvent 事件对象。但可通过它的 &lt;code&gt;nativeEvent&lt;/code&gt; 属性获取到原生的 DOM 事件对象。通过调用这个原生的事件对象上的 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;stopImmediatePropagation()&lt;/code&gt;&lt;/a&gt; 方法可达到阻止冒泡的目的。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
function btnClickHandler(event) {
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;  event.nativeEvent.stopImmediatePropagation();&lt;/span&gt;
  console.log(&quot;btn clicked&quot;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至于原理，其实前面已经有展示过。React 在 render 时监听了 document 冒泡阶段的事件，当我们的 &lt;code&gt;App&lt;/code&gt; 组件执行时，准确地说是渲染完成后（&lt;code&gt;useEffect&lt;/code&gt; 渲染完成后执行），又在 document 上注册了 click 的监听。此时 document 上有两个事件处理器了，并且组件中的这个顺序在 React 后面。&lt;/p&gt;
&lt;p&gt;当调用 &lt;code&gt;event.nativeEvent.stopImmediatePropagation()&lt;/code&gt; 后，阻止了 document 上同类型后续事件处理器的执行，达到了想要的效果。&lt;/p&gt;
&lt;p&gt;但这种方式有个缺点很明显，那就是要求需要被阻止的事件是在 React render 之后绑定，如果在之前绑定，是达不到效果的。&lt;/p&gt;
&lt;h3&gt;通过元素自身来绑定事件处理器&lt;/h3&gt;
&lt;p&gt;当绕开 React 直接通过调用元素自己身上的方法来绑定事件时，此时走的是原生 DOM 的流程，都没在 React 的流程里面。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;15&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;App&lt;/span&gt;() {
  &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;btnElement&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;useRef&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;);
  &lt;span class=&quot;pl-en&quot;&gt;useEffect&lt;/span&gt;(() &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, documentClickHandler);
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;btnElement&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;current&lt;/span&gt;) {
      &lt;span class=&quot;pl-smi&quot;&gt;btnElement&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;current&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, btnClickHandler);
    }

    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; () &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;removeEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, documentClickHandler);
      &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;btnElement&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;current&lt;/span&gt;) {
        &lt;span class=&quot;pl-smi&quot;&gt;btnElement&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;current&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;removeEventListener&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, btnClickHandler);
      }
    };
  }, []);

  &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;documentClickHandler&lt;/span&gt;() {
    &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;document clicked&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
  }

  &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;btnClickHandler&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;) {
    &lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;stopPropagation&lt;/span&gt;();
    &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;btn clicked&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
  }

  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;button ref&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;{btnElement}&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;CLICK&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;ME&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很明显这样是能解决问题，但你根本不会想要这样做。代码丑陋，不直观也不易理解。&lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;注意区分 React 组件的事件及原生 DOM 事件，一般情况下，尽量使用 React 的事件而不要混用。如果必需要混用比如监听 document，window 上的事件，处理 &lt;code&gt;mousemove&lt;/code&gt;，&lt;code&gt;resize&lt;/code&gt; 等这些场景，那么就需要注意本文提到的顺序问题，不然容易出 bug。&lt;/p&gt;
&lt;h2&gt;相关资源&lt;/h2&gt;
</description>
<pubDate>Fri, 05 Apr 2019 17:36:00 +0000</pubDate>
<dc:creator>刘哇勇</dc:creator>
<og:description>在正式开始前，先来看看 JS 中事件的触发与事件处理器的执行。 JS 中事件的监听与处理 事件捕获与冒泡 DOM 事件会先后经历 捕获 与 冒泡 两个阶段。捕获即事件沿着 DOM 树由上往下传递，到达</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Wayou/p/react_event_issue.html</dc:identifier>
</item>
<item>
<title>大数据技术之_16_Scala学习_11_客户信息管理系统+并发编程模型 Akka+Akka 网络编程-小黄鸡客服案例+Akka 网络编程-Spark Master Worker 进程通讯项目 - 黑泽君</title>
<link>http://www.cnblogs.com/chenmingjun/p/10660643.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenmingjun/p/10660643.html</guid>
<description>&lt;p id=&quot;tocid_0&quot; class=&quot;toc&quot;&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h&quot;&gt;第十五章 客户信息管理系统&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h151&quot;&gt;15.1 项目的开发流程&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h152&quot;&gt;15.2 项目的需求分析&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h153&quot;&gt;15.3 项目的界面&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h154&quot;&gt;15.4 项目的设计-程序框架图&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h155&quot;&gt;15.5 项目的功能实现&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1551customer&quot;&gt;15.5.1 完成 Customer 类&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1552&quot;&gt;15.5.2 完成显示主菜单和退出软件功能&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1553&quot;&gt;15.5.3 完成显示客户列表的功能&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1554&quot;&gt;15.5.4 完成添加客户的功能&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1555&quot;&gt;15.5.5 完成删除客户的功能&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1556&quot;&gt;15.5.6 完善退出确认功能&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1557&quot;&gt;15.5.7 完善删除确认功能&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1558&quot;&gt;15.5.8 完成修改客户的功能&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#hakka&quot;&gt;第十六章 并发编程模型 Akka&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h161akka&quot;&gt;16.1 Akka 的介绍&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h162actor&quot;&gt;16.2 Actor 模型用于解决什么问题&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h163akkaactor&quot;&gt;16.3 Akka 中 Actor 模型详解&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h164actor&quot;&gt;16.4 Actor 模型工作机制说明&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h165actor&quot;&gt;16.5 Actor 模型应用实例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1651actor&quot;&gt;16.5.1 Actor 自我通讯&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1652actor&quot;&gt;16.5.2 Actor 之间通讯&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h167akka&quot;&gt;16.7 Akka 网络编程&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1671akka&quot;&gt;16.7.1 Akka 网络编程基本介绍&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1672tcpip&quot;&gt;16.7.2 协议(tcp/ip)&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1673ositcpip&quot;&gt;16.7.3 OSI 与 Tcp/ip 参考模型&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1674ip&quot;&gt;16.7.4 ip 地址&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1675port&quot;&gt;16.7.5 端口(port)&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h168akka&quot;&gt;16.8 Akka 网络编程-小黄鸡客服案例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1681&quot;&gt;16.8.1 需求分析 + 界面设计&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1682&quot;&gt;16.8.2 程序框架图&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1683&quot;&gt;16.8.3 功能实现&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h169akkasparkmasterworker&quot;&gt;16.9 Akka 网络编程-Spark Master Worker 进程通讯项目&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1691&quot;&gt;16.9.1 项目意义&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1692&quot;&gt;16.9.2 项目需求分析&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h1693&quot;&gt;16.9.3 项目界面设计&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h16941worker&quot;&gt;16.9.4 实现功能 1-Worker 完成注册&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h16952worker&quot;&gt;16.9.5 实现功能 2-Worker 定时发送心跳&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h16963masterworker&quot;&gt;16.9.6 实现功能 3-Master 启动定时任务，定时检测注册的 Worker&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10660643.html#h16974masterworker&quot;&gt;16.9.7 实现功能 4-Master,Worker 的启动参数运行时指定&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;h&quot;&gt;&lt;span&gt;&lt;strong&gt;第十五章 客户信息管理系统&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h151&quot;&gt;&lt;span&gt;&lt;strong&gt;15.1 项目的开发流程&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWK6EQ.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h152&quot;&gt;&lt;span&gt;&lt;strong&gt;15.2 项目的需求分析&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  模拟实现基于文本界面的《客户信息管理软件》。&lt;br/&gt;  该软件 scala 能够实现对客户对象的插入、修改、删除、显示、查询（用 ArrayBuffer 或者 ListBuffer 实现），并能够打印客户明细表。&lt;/p&gt;
&lt;h3 id=&quot;h153&quot;&gt;&lt;span&gt;&lt;strong&gt;15.3 项目的界面&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;主界面&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKrDS.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;添加客户&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKsHg.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;修改客户&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKRCn.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;删除客户&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKDu8.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;客户列表&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKcNj.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h154&quot;&gt;&lt;span&gt;&lt;strong&gt;15.4 项目的设计-程序框架图&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;程序框架图：设计系统有多少个文件，以及文件之间的调用关系，可以帮助程序员实现模块的设计（清晰），便于程序员之间对项目交流分析。【业务优化，设计方案】&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKg4s.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h155&quot;&gt;&lt;span&gt;&lt;strong&gt;15.5 项目的功能实现&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKfg0.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h1551customer&quot;&gt;&lt;span&gt;&lt;strong&gt;15.5.1 完成 Customer 类&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;根据需求文档或者页面，写出 Customer 类&lt;br/&gt;Customer.scala&lt;/p&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;11&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter15.customercrm.bean&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Customer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;var id: Int = _&lt;br/&gt;var name: String = _&lt;br/&gt;var gender: Char = _&lt;br/&gt;var age: Short = _&lt;br/&gt;var tel: String = _&lt;br/&gt;var email: String = _&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id: Int, name: String, gender: Char, age: Short, tel: String, email: String)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.id = id&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name = name&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.gender = gender&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.age = age&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.tel = tel&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.email = email&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h1552&quot;&gt;&lt;span&gt;&lt;strong&gt;15.5.2 完成显示主菜单和退出软件功能&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;CustomerView.scala 功能分析：&lt;br/&gt;  1. 将主菜单的显示放入到 while&lt;br/&gt;  2. 用户可以根据输入，选择自己的操作&lt;br/&gt;  3. 如果输入5退出&lt;br/&gt;CustomerView.scala&lt;/p&gt;
&lt;pre readability=&quot;6.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;7&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter15.customercrm.view&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.io.StdIn&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CustomerView&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;var loop = &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;var key = &lt;span class=&quot;hljs-string&quot;&gt;' '&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;mainMenu&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----------------客户信息管理软件-----------------&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;                  1 添 加 客 户                  &quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;                  2 修 改 客 户                  &quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;                  3 删 除 客 户                  &quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;                  4 客 户 列 表                  &quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;                  5 退       出                  &quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;                  请选择(1-5):                   &quot;&lt;/span&gt;)&lt;br/&gt;key = StdIn.readChar()&lt;br/&gt;key match {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'1'&lt;/span&gt; =&amp;gt; println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;添 加 客 户&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'2'&lt;/span&gt; =&amp;gt; println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;修 改 客 户&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'3'&lt;/span&gt; =&amp;gt; println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;删 除 客 户&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'4'&lt;/span&gt; =&amp;gt; println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;客 户 列 表&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'5'&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.loop = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (loop)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;你退出了系统...&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;4&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.chapter15.customercrm.app&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.atguigu.chapter15.customercrm.view.CustomerView&lt;/p&gt;&lt;p&gt;object CustomerCrm {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CustomerView().mainMenu()&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h1553&quot;&gt;&lt;span&gt;&lt;strong&gt;15.5.3 完成显示客户列表的功能&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;CustomerView.scala 功能分析：&lt;br/&gt;  1. 接收4，显示客户列表&lt;br/&gt;  2. 调用 CustomerService 的方法 list&lt;br/&gt;  3. 需要一个 CustomerService 对象(属性)&lt;br/&gt;CustomerService.sacla 功能分析：&lt;br/&gt;  1. 编写一个方法 list，返回当前系统有哪些客户&lt;br/&gt;  2. 客户放在哪？--&amp;gt; 内存 --&amp;gt; 可变集合 --&amp;gt; ArrayBuffer&lt;br/&gt;1、在 Customer.sacla 中重写 toString 方法&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;  override def toString: String = {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.id + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\t\t&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\t\t&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.gender + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\t\t&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.age + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\t\t&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.tel + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\t\t&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.email&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、在 CustomerService.scala 中编写一个方法 list，返回当前系统有哪些客户&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;2&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CustomerService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;val customers = ArrayBuffer(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Customer(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;tom&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'男'&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;110&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;tom@sohu.com&quot;&lt;/span&gt;))&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: ArrayBuffer[Customer] &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.customers&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、在 CustomerView.scala 中 调用 CustomerService 的方法 list&lt;/p&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;5&quot;&gt;  val customerService = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CustomerService()&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;println()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------------客户列表---------------------------&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;编号\t\t姓名\t\t性别\t\t年龄\t\t电话\t\t邮箱&quot;&lt;/span&gt;)&lt;br/&gt;val customers = customerService.list()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (customer &amp;lt;- customers) {&lt;br/&gt;println(customer)&lt;br/&gt;}&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-------------------------客户列表完成-------------------------&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h1554&quot;&gt;&lt;span&gt;&lt;strong&gt;15.5.4 完成添加客户的功能&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;CustomerView.scala 功能分析：&lt;br/&gt;  1. 接收客户的信息，并封装成对应的 Customer 对象&lt;br/&gt;  2. 调用 CustomerService 的方法 add&lt;br/&gt;CustomerService.sacla 功能分析：&lt;br/&gt;  1. 编写一个方法 add，接收一个 Customer 对象&lt;br/&gt;  2. 加入到 ArrayBuffer 中&lt;br/&gt;  3. 规定：以添加客户是第几个作为它的 id&lt;br/&gt;1、在 Customer.sacla 中添加一个新的 辅助构造器(没有id属性)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;  &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(name: String, gender: Char, age: Short, tel: String, email: String)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name = name&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.gender = gender&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.age = age&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.tel = tel&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.email = email&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、在 CustomerService.scala 中编写一个方法 add，接收一个 Customer 对象，并设置 id 后再加入到 ArrayBuffer 中&lt;/p&gt;
&lt;pre readability=&quot;4.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;3&quot;&gt;  &lt;br/&gt;var customerNum = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(customer: Customer)&lt;/span&gt;: Boolean &lt;/span&gt;= {&lt;br/&gt;customerNum += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;customer.id = customerNum&lt;br/&gt;customers.append(customer)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、在 CustomerView.scala 中 调用 CustomerService 的方法 add&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;  &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;println()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------添加客户---------------------&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;姓名：&quot;&lt;/span&gt;)&lt;br/&gt;val name = StdIn.readLine()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;性别：&quot;&lt;/span&gt;)&lt;br/&gt;val gender = StdIn.readChar()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;年龄：&quot;&lt;/span&gt;)&lt;br/&gt;val age = StdIn.readShort()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;电话：&quot;&lt;/span&gt;)&lt;br/&gt;val tel = StdIn.readLine()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;邮箱：&quot;&lt;/span&gt;)&lt;br/&gt;val email = StdIn.readLine()&lt;br/&gt;val customer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Customer(name, gender, age, tel, email)&lt;br/&gt;customerService.add(customer)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------添加完成---------------------&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h1555&quot;&gt;&lt;span&gt;&lt;strong&gt;15.5.5 完成删除客户的功能&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;CustomerView.scala 功能分析：&lt;br/&gt;  1. 接收客户 id，准备删除&lt;br/&gt;  2. 调用 CustomerService 的 del(id)&lt;br/&gt;CustomerService.sacla 功能分析：&lt;br/&gt;  1. 编写一个方法 del，接收一个 id，先去调用另一个方法 findIndexById，判断&lt;br/&gt;  2. 编写一个方法 findIndexById（因为我们的 ArrayBuffer 索引和 id 并不是对应的）&lt;br/&gt;  3. 如果发现有，则删除，如果没有就返回 false&lt;br/&gt;1、在 CustomerService.scala 中编写一个方法 del，接收一个 id，先去调用另一个方法 findIndexById，判断&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;1&quot;&gt;  &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;findIndexById&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id: Int)&lt;/span&gt;: Int &lt;/span&gt;= {&lt;br/&gt;var index = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &amp;lt;- &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; until customers.length) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (customers(i).id == id) {&lt;br/&gt;index = &lt;span class=&quot;hljs-function&quot; readability=&quot;2&quot;&gt;i&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;index&lt;br/&gt;}&lt;p&gt;&lt;br/&gt;def &lt;span class=&quot;hljs-title&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id: Int)&lt;/span&gt;: Boolean &lt;/p&gt;&lt;/span&gt;= {&lt;br/&gt;val index = findIndexById(id)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;customers.remove(index)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、在 CustomerView.scala 中接收客户 id，调用 CustomerService 的 del(id)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;  &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;println()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------删除客户---------------------&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;请选择待删除客户编号(-1退出)：&quot;&lt;/span&gt;)&lt;br/&gt;val id = StdIn.readInt()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (id == -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------删除没有完成---------------------&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;确认是否删除(Y/N)：&quot;&lt;/span&gt;)&lt;br/&gt;val choice = StdIn.readChar().&lt;span class=&quot;hljs-function&quot;&gt;toLower&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(choice == &lt;span class=&quot;hljs-string&quot;&gt;'y'&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (customerService.del(id)) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------删除完成---------------------&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------删除没有完成---------------------&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h1556&quot;&gt;&lt;span&gt;&lt;strong&gt;15.5.6 完善退出确认功能&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;功能说明：&lt;br/&gt;  要求用户在退出时提示 &quot;确认是否退出(Y/N)：&quot;，用户必须输入y/n，否则循环提示。且输入为y时，退出系统；输入为n时，不退出系统。&lt;br/&gt;1、在 CustomerView.scala 中定义一个方法 isOut，并修改 key 所对应的函数。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;  &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;isOut&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;println()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;确认是否退出(Y/N)：&quot;&lt;/span&gt;)&lt;br/&gt;key = StdIn.readChar().toLower&lt;br/&gt;key match {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'y'&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.loop = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'n'&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.loop = &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; _ =&amp;gt; isOut()&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h1557&quot;&gt;&lt;span&gt;&lt;strong&gt;15.5.7 完善删除确认功能&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;功能说明：&lt;br/&gt;  要求用户在删除确认时提示 &quot;确认是否删除(Y/N)：&quot;，用户必须输入y/n，否则循环提示。&lt;br/&gt;1、在 CustomerView.scala 中，修改 del() 方法即可&lt;/p&gt;
&lt;pre readability=&quot;6.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;7&quot;&gt;  &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;println()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------删除客户---------------------&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;请选择待删除客户编号(-1退出)：&quot;&lt;/span&gt;)&lt;br/&gt;val id = StdIn.readInt()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (id == -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------删除没有完成---------------------&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;确认是否删除(Y/N)：&quot;&lt;/span&gt;)&lt;br/&gt;var choice = &lt;span class=&quot;hljs-string&quot;&gt;' '&lt;/span&gt;&lt;p&gt;&lt;br/&gt;breakable {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {&lt;br/&gt;choice = StdIn.readChar().&lt;span class=&quot;hljs-function&quot;&gt;toLower&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(choice == &lt;span class=&quot;hljs-string&quot;&gt;'y'&lt;/span&gt; || choice == &lt;span class=&quot;hljs-string&quot;&gt;'n'&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;()&lt;br/&gt;}&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;确认是否删除(Y/N)：&quot;&lt;/span&gt;)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (choice == &lt;span class=&quot;hljs-string&quot;&gt;'y'&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (customerService.del(id)) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------删除完成---------------------&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------删除没有完成---------------------&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h1558&quot;&gt;&lt;span&gt;&lt;strong&gt;15.5.8 完成修改客户的功能&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1、在 CustomerService.scala 中定义一个方法根据 id 修改用户（更新用户）的方法 和 // 根据 id 查找用户信息 的方法&lt;/p&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;5&quot;&gt;  &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;findCustomerById&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id: Int)&lt;/span&gt;: Customer &lt;/span&gt;= {&lt;br/&gt;val index = findIndexById(id)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;customers(index)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id: Int, customer: Customer)&lt;/span&gt;: Boolean &lt;/span&gt;= {&lt;br/&gt;val index = findIndexById(id)&lt;br/&gt;customers.update(index, customer)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、在 CustomerView.scala 中定义一个方法 update&lt;/p&gt;
&lt;pre readability=&quot;14&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;22&quot;&gt;  &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;println()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------修改客户---------------------&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;请选择待修改客户编号(-1退出)：&quot;&lt;/span&gt;)&lt;br/&gt;var id = StdIn.readInt()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (id == -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------修改没有完成---------------------&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;val customer = customerService.findCustomerById(id)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (customer == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------修改没有完成---------------------&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;p&gt;var name = customer.&lt;span class=&quot;hljs-function&quot;&gt;name&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;姓名(${name})：&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;name &lt;/span&gt;= StdIn.readLine()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (name.length == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) name = customer.name&lt;/p&gt;&lt;p&gt;var gender = customer.&lt;span class=&quot;hljs-function&quot;&gt;gender&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;性别(${gender})：&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;gender &lt;/span&gt;= StdIn.readChar()&lt;/p&gt;&lt;p&gt;var age = customer.&lt;span class=&quot;hljs-function&quot;&gt;age&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;年龄(${age})：&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;age &lt;/span&gt;= StdIn.readShort()&lt;/p&gt;&lt;p&gt;var tel = customer.&lt;span class=&quot;hljs-function&quot;&gt;tel&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;电话(${tel})：&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;tel &lt;/span&gt;= StdIn.readLine()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (tel.length == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) tel = customer.tel&lt;/p&gt;&lt;p&gt;var email = customer.&lt;span class=&quot;hljs-function&quot;&gt;email&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;邮箱(${email})：&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;email &lt;/span&gt;= StdIn.readLine()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (email.length == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) email = customer.email&lt;/p&gt;&lt;p&gt;&lt;br/&gt;val newCustomer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Customer(id, name, gender, age, tel, email)&lt;br/&gt;customerService.update(id, newCustomer)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---------------------修改完成---------------------&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;hakka&quot;&gt;&lt;span&gt;&lt;strong&gt;第十六章 并发编程模型 Akka&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h161akka&quot;&gt;&lt;span&gt;&lt;strong&gt;16.1 Akka 的介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKhvV.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h162actor&quot;&gt;&lt;span&gt;&lt;strong&gt;16.2 Actor 模型用于解决什么问题&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKW3q.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h163akkaactor&quot;&gt;&lt;span&gt;&lt;strong&gt;16.3 Akka 中 Actor 模型详解&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Actor 模型及其说明&lt;/strong&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKIDU.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;strong&gt;对上图的详解如下：&lt;/strong&gt;&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWK5uT.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h164actor&quot;&gt;&lt;span&gt;&lt;strong&gt;16.4 Actor 模型工作机制说明&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKobF.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;strong&gt;Actor模型工作机制说明(对照工作机制示意图理解)：&lt;/strong&gt;&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWK7E4.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;strong&gt;Actor 间传递消息机制(对照工作机制示意图理解)&lt;/strong&gt;&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKHUJ.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h165actor&quot;&gt;&lt;span&gt;&lt;strong&gt;16.5 Actor 模型应用实例&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h1651actor&quot;&gt;&lt;span&gt;&lt;strong&gt;16.5.1 Actor 自我通讯&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;应用实例需求&lt;/strong&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKLCR.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;br/&gt;SayHelloActor 项目步骤：&lt;br/&gt;1) 创建项目 Mew -&amp;gt; New Project -&amp;gt; 选择 Maven&lt;br/&gt;2) 给项目命名&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKb59.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;3) 下一步 -&amp;gt; Finish&lt;br/&gt;4) 会生成 pom.xml 文件(maven 文件， 项目包的依赖)&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKjv6.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;5) 将下面的 maven 配置模板拷贝到 pom.xml 文件中，新的 pom.xml 文件文件内容如下：
&lt;pre readability=&quot;14.5&quot;&gt;
&lt;code class=&quot;xml language-xml hljs&quot; readability=&quot;23&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.atguigu.akka&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;SayHelloActor&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;encoding&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;encoding&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;scala.version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.11.8&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;scala.version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;scala.compat.version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.11&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;scala.compat.version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;akka.version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.4.17&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;akka.version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.scala-lang&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;scala-library&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;${scala.version}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.typesafe.akka&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;akka-actor_${scala.compat.version}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;${akka.version}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.typesafe.akka&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;akka-remote_${scala.compat.version}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;${akka.version}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;sourceDirectory&lt;/span&gt;&amp;gt;&lt;/span&gt;src/main/scala&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;sourceDirectory&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;testSourceDirectory&lt;/span&gt;&amp;gt;&lt;/span&gt;src/test/scala&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;testSourceDirectory&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;net.alchim31.maven&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;scala-maven-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.2.2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;compile&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;testCompile&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;args&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;arg&lt;/span&gt;&amp;gt;&lt;/span&gt;-dependencyfile&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;arg&lt;/span&gt;&amp;gt;&lt;/span&gt;${project.build.directory}/.scala_dependencies&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;args&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;maven-shade-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.4.3&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;phase&lt;/span&gt;&amp;gt;&lt;/span&gt;package&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;phase&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;shade&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;filters&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifact&lt;/span&gt;&amp;gt;&lt;/span&gt;*:*&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifact&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;excludes&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;exclude&lt;/span&gt;&amp;gt;&lt;/span&gt;META-INF/*.SF&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;exclude&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;exclude&lt;/span&gt;&amp;gt;&lt;/span&gt;META-INF/*.DSA&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;exclude&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;exclude&lt;/span&gt;&amp;gt;&lt;/span&gt;META-INF/*.RSA&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;exclude&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;excludes&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;filters&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;transformers&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;transformer&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;implementation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;resource&lt;/span&gt;&amp;gt;&lt;/span&gt;reference.conf&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;resource&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;transformer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;transformer&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;implementation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;mainClass&lt;/span&gt;&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;mainClass&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;transformer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;transformers&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;project&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6) 因为按照配置模板的内容 &quot;指定源码包和测试包的位置&quot; 的部分：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;sourceDirectory&lt;/span&gt;&amp;gt;&lt;/span&gt;src/main/scala&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;sourceDirectory&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;testSourceDirectory&lt;/span&gt;&amp;gt;&lt;/span&gt;src/test/scala&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;testSourceDirectory&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们需要创建对应的 scala 目录，并 mark 为 Sources Root&lt;br/&gt;7) 当修改后，第一次速度比较慢，因为 maven 需要 resolve 包的依赖，要下载相关的包。&lt;br/&gt;&lt;code&gt;注意&lt;/code&gt;：需要如图勾选，update snapshots，而且不需要联网，如果使用 maven 解决依赖后，仍然 pom.xml 有误，则只需要重启下 idea, 或者动一下 pom.xml 文件(不用改)，重新保存即可。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKO81.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;8) 代码实现：
&lt;pre readability=&quot;12.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;19&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.akka.actor&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; akka.actor.{Actor, ActorRef, ActorSystem, Props}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SayHelloActor&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Actor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;override def receive: Receive = {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt; =&amp;gt; println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;发送：hello\t\t回应：hello too:)&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;ok&quot;&lt;/span&gt; =&amp;gt; println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;发送：ok\t\t\t回应：ok too:)&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;exit&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;接收到exit~指令，退出系统...&quot;&lt;/span&gt;)&lt;br/&gt;context.stop(self) &lt;br/&gt;context.system.terminate() &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;object SayHelloActor {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; val actoryFactory = ActorSystem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;actoryFactory&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; val sayHelloActorRef: ActorRef = actoryFactory.actorOf(Props[SayHelloActor], &lt;span class=&quot;hljs-string&quot;&gt;&quot;sayHelloActor&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;sayHelloActorRef ! &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;br/&gt;sayHelloActorRef ! &lt;span class=&quot;hljs-string&quot;&gt;&quot;ok&quot;&lt;/span&gt;&lt;br/&gt;sayHelloActorRef ! &lt;span class=&quot;hljs-string&quot;&gt;&quot;ok~&quot;&lt;/span&gt;&lt;br/&gt;sayHelloActorRef ! &lt;span class=&quot;hljs-string&quot;&gt;&quot;exit&quot;&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;发送：hello        回应：hello too:)&lt;br/&gt;发送：ok            回应：ok too:)&lt;br/&gt;接收到exit~指令，退出系统...&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;9) 运行的效果&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKxKK.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;代码的示意图和小结&lt;/strong&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKXgx.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;小结：&lt;br/&gt;当程序执行 private val sayHelloActorRef: ActorRef = actoryFactory.actorOf(Props[SayHelloActor], &quot;sayHelloActor&quot;) 会完成如下任务： [这是非常重要的方法]
&lt;ul&gt;&lt;li&gt;&lt;span&gt;1、actorFactory 是 ActorSystem(&quot;actorFactory&quot;) 创建的。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2、这里的 Props[SayHelloActor] 会使用反射机制，创建一个 SayHelloActor 对象，如果是 actorFactory.actorOf(Props(new SayHelloActor(其他代理对象的引用)), &quot;sayHelloActor&quot;) 形式，就是使用 new 的方式创建一个 SayHelloActor 对象。注意：Props() 是小括号。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;3、会创建一个 SayHelloActor 对象的代理对象 sayHelloActorRef，使用 sayHelloActorRef 才能发送消息。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;4、会在底层创建 Dispather Message，是一个线程池，用于分发消息，消息是发送到对应的 Actor 的 MailBox。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;5、会在底层创建 SayHelloActor 的 MailBox 对象，该对象是一个队列，可接收 Dispatcher Message 发送的消息。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;6、MailBox 实现了 Runnable 接口，是一个线程，一直运行并调用 Actor 的 receive 方法，因此当Dispather 发送消息到 MailBox 时，Actor 在r eceive 方法就可以得到信息。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;7、SayHelloActorRef ! &quot;hello&quot; ，表示把 hello 消息发送到 SayHello Actor 的 Mailbox （通过Dispatcher Message 转发）。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;h1652actor&quot;&gt;&lt;span&gt;&lt;strong&gt;16.5.2 Actor 之间通讯&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;应用实例需求&lt;/strong&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWM9Ve.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;两个 Actor 的通讯机制原理图&lt;/strong&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMSbD.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;br/&gt;AActor.scala&lt;/p&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;8&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.akka.actors&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; akka.actor.{Actor, ActorRef}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AActor&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;bActorRef&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;ActorRef&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Actor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;var count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;override def receive: Receive = {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;AActor 出招了，start ok&quot;&lt;/span&gt;)&lt;br/&gt;bActorRef ! &lt;span class=&quot;hljs-string&quot;&gt;&quot;我打&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;我打&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;count += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;println(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;AActor(黄飞鸿) 厉害！看我佛山无影脚 第${count}脚&quot;&lt;/span&gt;)&lt;br/&gt;Thread.sleep(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)&lt;br/&gt;bActorRef ! &lt;span class=&quot;hljs-string&quot;&gt;&quot;我打&quot;&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BActor.scala&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;4&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.akka.actors&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; akka.actor.Actor&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BActor&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Actor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;var count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;override def receive: Receive = {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;我打&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;count += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;println(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;BActor(乔峰) 挺猛 看我降龙十八掌 第${count}掌&quot;&lt;/span&gt;)&lt;br/&gt;Thread.sleep(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)&lt;br/&gt;sender() ! &lt;span class=&quot;hljs-string&quot;&gt;&quot;我打&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ActorApp.scala&lt;/p&gt;
&lt;pre readability=&quot;8&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;10&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.akka.actors&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; akka.actor.{ActorRef, ActorSystem, Props}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;object ActorApp extends App {&lt;br/&gt;val actorfactory = ActorSystem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;actorfactory&quot;&lt;/span&gt;)&lt;br/&gt;val bActorRef: ActorRef = actorfactory.actorOf(Props[BActor], &lt;span class=&quot;hljs-string&quot;&gt;&quot;bActor&quot;&lt;/span&gt;)&lt;br/&gt;val aActorRef: ActorRef = actorfactory.actorOf(Props(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; AActor(bActorRef)), &lt;span class=&quot;hljs-string&quot;&gt;&quot;aActor&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;aActorRef ! &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;AActor 出招了，&lt;span class=&quot;hljs-function&quot;&gt;start ok&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;BActor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(乔峰)&lt;/span&gt; 挺猛 看我降龙十八掌 第1掌&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;AActor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(黄飞鸿)&lt;/span&gt; 厉害！看我佛山无影脚 第1脚&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;BActor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(乔峰)&lt;/span&gt; 挺猛 看我降龙十八掌 第2掌&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;AActor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(黄飞鸿)&lt;/span&gt; 厉害！看我佛山无影脚 第2脚&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;BActor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(乔峰)&lt;/span&gt; 挺猛 看我降龙十八掌 第3掌&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;AActor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(黄飞鸿)&lt;/span&gt; 厉害！看我佛山无影脚 第3脚&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;BActor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(乔峰)&lt;/span&gt; 挺猛 看我降龙十八掌 第4掌&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;AActor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(黄飞鸿)&lt;/span&gt; 厉害！看我佛山无影脚 第4脚&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;BActor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(乔峰)&lt;/span&gt; 挺猛 看我降龙十八掌 第5掌&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;AActor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(黄飞鸿)&lt;/span&gt; 厉害！看我佛山无影脚 第5脚&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;BActor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(乔峰)&lt;/span&gt; 挺猛 看我降龙十八掌 第6掌&lt;br/&gt;&lt;span class=&quot;hljs-title&quot;&gt;AActor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(黄飞鸿)&lt;/span&gt; 厉害！看我佛山无影脚 第6脚&lt;br/&gt;......&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;代码的小结&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;1、两个 Actor 通讯机制和 Actor 自身发消息机制基本一样，只是要注意如下：&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2、如果 A Actor 在需要给 B Actor 发消息，则需要持有 B Actor 的 ActorRef，可以通过创建 A Actor 时，传入 B Actor 的代理对象(ActorRef)。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;3、当 B Actor 在 receive 方法中接收到消息，需要回复时，可以通过 sender() 获取到发送 Actor 的代理对象。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;如何理解 Actor 的 receive 方法被调用？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;1、每个 Actor 对应 MailBox。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2、MailBox 实现了 Runnable 接口，处于运行的状态。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;3、当有消息到达 MailBox，就会去调用 Actor 的 receive 方法，即将消息推送给 receive 方法。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h167akka&quot;&gt;&lt;span&gt;&lt;strong&gt;16.7 Akka 网络编程&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;看两个实际应用(socket/tcp/ip)&lt;br/&gt;  QQ、迅雷、百度网盘客户端、新浪网站、京东商城、淘宝&lt;/p&gt;
&lt;h4 id=&quot;h1671akka&quot;&gt;&lt;span&gt;&lt;strong&gt;16.7.1 Akka 网络编程基本介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWKzDO.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h1672tcpip&quot;&gt;&lt;span&gt;&lt;strong&gt;16.7.2 协议(tcp/ip)&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  TCP/IP(Transmission Control Protocol/Internet Protocol)的简写，中文译名为传输控制协议/因特网互联协议，又叫网络通讯协议，这个协议是Internet 最基本的协议、是 Internet 国际互联网络的基础，简单地说，就是由网络层的IP协议和传输层的TCP协议组成的。&lt;br/&gt;  TCP/IP 3本圣经级别书籍：xxx&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMk8I.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h1673ositcpip&quot;&gt;&lt;span&gt;&lt;strong&gt;16.7.3 OSI 与 Tcp/ip 参考模型&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMCUH.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h1674ip&quot;&gt;&lt;span&gt;&lt;strong&gt;16.7.4 ip 地址&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  概述：每个 internet 上的主机和路由器都有一个 ip 地址，它包括网络号和主机号，ip 地址有 ipv4(32位) 或者 ipv6(128位)，可以通过 ipconfig（ifconfig） 来查看。&lt;br/&gt;  一个小技巧：网络不通时，如何确定是哪一个路由(ip地址)出现问题？答：使用 tracert 指令。演示如下：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMP5d.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h1675port&quot;&gt;&lt;span&gt;&lt;strong&gt;16.7.5 端口(port)&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  我们这里所指的端口不是指物理意义上的端口，而是特指TCP/IP协议中的端口，是逻辑意义上的端口。如果把 IP 地址比作一间房子，端口就是出入这间房子的门。真正的房子只有几个门，但是一个 IP 地址的端口 可以有65535（即：256×256-1）个之多！端口是通过端口号来标记的。&lt;br/&gt;&lt;strong&gt;端口(port)-分类&lt;/strong&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMFPA.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;strong&gt;端口(port)-使用注意&lt;/strong&gt;&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMA2t.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;strong&gt;socket 编程中客户端和服务器的网络分布&lt;/strong&gt;&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMExP.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h168akka&quot;&gt;&lt;span&gt;&lt;strong&gt;16.8 Akka 网络编程-小黄鸡客服案例&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h1681&quot;&gt;&lt;span&gt;&lt;strong&gt;16.8.1 需求分析 + 界面设计&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;需求分析&lt;/strong&gt;&lt;br/&gt;  1、服务端进行监听(9999)&lt;br/&gt;  2、客户端可以通过键盘输入，发送咨询问题给小黄鸡客服(服务端)&lt;br/&gt;  3、小黄鸡(服务端)回答客户的问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;界面设计&lt;/strong&gt;&lt;br/&gt;服务端：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMM5j.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;客户端：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMZKf.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h1682&quot;&gt;&lt;span&gt;&lt;strong&gt;16.8.2 程序框架图&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMmqS.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h1683&quot;&gt;&lt;span&gt;&lt;strong&gt;16.8.3 功能实现&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;代码结构：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMer8.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;示例代码如下：&lt;br/&gt;YellowChickenServer.scala
&lt;pre readability=&quot;13.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;21&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.akka.yellowchicken.server&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; akka.actor.{Actor, ActorRef, ActorSystem, Props}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.atguigu.akka.yellowchicken.common.{ClientMessage, ServerMessage}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.typesafe.config.ConfigFactory&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;YellowChickenServer&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Actor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;override def receive: Receive = {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt; =&amp;gt; println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;start 小黄鸡客服开始工作了...&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ClientMessage&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(mes)&lt;/span&gt; &lt;/span&gt;=&amp;gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;客户咨询的问题是：&quot;&lt;/span&gt; + mes)&lt;br/&gt;mes match {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;大数据学费&quot;&lt;/span&gt; =&amp;gt; sender() ! ServerMessage(&lt;span class=&quot;hljs-string&quot;&gt;&quot;20000 RMB&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;学校地址&quot;&lt;/span&gt; =&amp;gt; sender() ! ServerMessage(&lt;span class=&quot;hljs-string&quot;&gt;&quot;北京市朝阳区青年路大悦城&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;学习什么技术&quot;&lt;/span&gt; =&amp;gt; sender() ! ServerMessage(&lt;span class=&quot;hljs-string&quot;&gt;&quot;大数据 前端 Python&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; _ =&amp;gt; sender() ! ServerMessage(&lt;span class=&quot;hljs-string&quot;&gt;&quot;你说的啥子:)&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;object YellowChickenServerApp extends App {&lt;br/&gt;val host = &lt;span class=&quot;hljs-string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt; &lt;br/&gt;val port = &lt;span class=&quot;hljs-number&quot;&gt;9999&lt;/span&gt; &lt;br/&gt;val config = ConfigFactory.parseString(&lt;br/&gt;s&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;br/&gt;|akka.actor.provider=&quot;&lt;/span&gt;akka.remote.RemoteActorRefProvider&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;br/&gt;|akka.remote.netty.tcp.hostname=$host&lt;br/&gt;|akka.remote.netty.tcp.port=$port&lt;br/&gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.stripMargin)&lt;br/&gt;val serverActorSystem = ActorSystem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Server&quot;&lt;/span&gt;, config)&lt;br/&gt;val yellowChickenServerActorRef: ActorRef = serverActorSystem.actorOf(Props[YellowChickenServer], &lt;span class=&quot;hljs-string&quot;&gt;&quot;YellowChickenServer-01&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;yellowChickenServerActorRef ! &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;CustomerActor.scala&lt;/p&gt;
&lt;pre readability=&quot;23&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;40&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.akka.yellowchicken.client&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; akka.actor.{Actor, ActorRef, ActorSelection, ActorSystem, Props}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.atguigu.akka.yellowchicken.common.{ClientMessage, ServerMessage}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.typesafe.config.ConfigFactory&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.io.&lt;span class=&quot;hljs-function&quot;&gt;StdIn&lt;/span&gt;&lt;/p&gt;&lt;p&gt;class &lt;span class=&quot;hljs-title&quot;&gt;CustomerActor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(serverHost: String, serverPort: Int)&lt;/span&gt; extends Actor {&lt;/p&gt;&lt;p&gt;&lt;br/&gt;var serverActorRef: ActorSelection = _&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;override def &lt;span class=&quot;hljs-title&quot;&gt;preStart&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.serverActorRef = context.actorSelection(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;akka.tcp://Server@${serverHost}:${serverPort}/user/YellowChickenServer-01&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;this.serverActorRefer=&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.serverActorRef)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;override def receive: Receive = {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt; =&amp;gt; println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;start 客户端运行，可以咨询问题&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; mes: String =&amp;gt; {&lt;br/&gt;serverActorRef ! ClientMessage(mes) &lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ServerMessage&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(mes)&lt;/span&gt; &lt;/span&gt;=&amp;gt; {&lt;br/&gt;println(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;收到小黄鸡客服(Server)消息：$mes&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;object CustomerActorApp extends App {&lt;br/&gt;val (host, port, serverHost, serverPort) = (&lt;span class=&quot;hljs-string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9990&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9999&lt;/span&gt;)&lt;br/&gt;val config = ConfigFactory.parseString(&lt;br/&gt;s&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;br/&gt;|akka.actor.provider=&quot;&lt;/span&gt;akka.remote.RemoteActorRefProvider&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;br/&gt;|akka.remote.netty.tcp.hostname=$host&lt;br/&gt;|akka.remote.netty.tcp.port=$port&lt;br/&gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.stripMargin)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;val clientActorSystem = ActorSystem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Client&quot;&lt;/span&gt;, config)&lt;br/&gt;val clientActorRef: ActorRef = clientActorSystem.actorOf(Props(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CustomerActor(serverHost, serverPort)), &lt;span class=&quot;hljs-string&quot;&gt;&quot;CustomerActor-01&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;clientActorRef ! &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {&lt;br/&gt;val mes = StdIn.readLine()&lt;br/&gt;clientActorRef ! mes&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;MessageProtocol.scala&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;4&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.akka.yellowchicken.common&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; class &lt;span class=&quot;hljs-title&quot;&gt;ClientMessage&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(mes: String)&lt;/span&gt;  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; class &lt;span class=&quot;hljs-title&quot;&gt;ServerMessage&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(mes: String)&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h169akkasparkmasterworker&quot;&gt;&lt;span&gt;&lt;strong&gt;16.9 Akka 网络编程-Spark Master Worker 进程通讯项目&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h1691&quot;&gt;&lt;span&gt;&lt;strong&gt;16.9.1 项目意义&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  1、深入理解 Spark 的 Master 和 Worker 的通讯机制。&lt;br/&gt;  2、为了方便同学们看 Spark 的底层源码，命名的方式和源码保持一致(如：通讯消息类命名就是一样的)。&lt;br/&gt;  3、加深对&lt;code&gt;主从服务心跳检测机制(HeartBeat)&lt;/code&gt;的理解，方便以后 spark 源码二次开发。&lt;/p&gt;
&lt;h4 id=&quot;h1692&quot;&gt;&lt;span&gt;&lt;strong&gt;16.9.2 项目需求分析&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMuVg.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h1693&quot;&gt;&lt;span&gt;&lt;strong&gt;16.9.3 项目界面设计&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  我们主要是通过应用实例，来剖析 Spark 的 Master 和 Worker 的通讯机制，因此功能比较简洁，设计的界面如下。看后面演示即可。&lt;/p&gt;
&lt;h4 id=&quot;h16941worker&quot;&gt;&lt;span&gt;&lt;strong&gt;16.9.4 实现功能 1-Worker 完成注册&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;功能要求: Worker 注册到 Master，Master 完成注册，并回复 Worker 注册成功。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMlPs.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;代码结构：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMKaQ.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;示例代码如下：&lt;br/&gt;MasterActor.scala
&lt;pre readability=&quot;18&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;30&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.akka.sparkmasterworker.master&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; akka.actor.{Actor, ActorSystem, Props}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.atguigu.akka.sparkmasterworker.common.{RegisterWorkerInfo, RegisteredWorkerInfo, WorkerInfo}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.typesafe.config.ConfigFactory&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.collection.mutable&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MasterActor&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Actor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;val workers = mutable.HashMap[String, WorkerInfo]()&lt;/p&gt;&lt;p&gt;override def receive: Receive = {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt; =&amp;gt; println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Master服务器启动了...&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;RegisterWorkerInfo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id, cpu, ram)&lt;/span&gt; &lt;/span&gt;=&amp;gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!workers.contains(id)) {&lt;br/&gt;val workerInfo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WorkerInfo(id, cpu, ram)&lt;br/&gt;workers += (id -&amp;gt; workerInfo)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;服务器的Workers= &quot;&lt;/span&gt; + workers)&lt;br/&gt;sender() ! RegisteredWorkerInfo&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;object MasterActorApp {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val host = &lt;span class=&quot;hljs-string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt; &lt;br/&gt;val port = &lt;span class=&quot;hljs-number&quot;&gt;10005&lt;/span&gt; &lt;br/&gt;val config = ConfigFactory.parseString(&lt;br/&gt;s&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;br/&gt;|akka.actor.provider=&quot;&lt;/span&gt;akka.remote.RemoteActorRefProvider&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;br/&gt;|akka.remote.netty.tcp.hostname=$host&lt;br/&gt;|akka.remote.netty.tcp.port=$port&lt;br/&gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.stripMargin)&lt;br/&gt;val masterActorSystem = ActorSystem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Master&quot;&lt;/span&gt;, config)&lt;br/&gt;val masterActorRef = masterActorSystem.actorOf(Props[MasterActor], &lt;span class=&quot;hljs-string&quot;&gt;&quot;MasterActor-01&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;masterActorRef ! &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;WorkerActor.scala&lt;/p&gt;
&lt;pre readability=&quot;25&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;44&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.akka.sparkmasterworker.worker&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; akka.actor.{Actor, ActorRef, ActorSelection, ActorSystem, Props}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.atguigu.akka.sparkmasterworker.common.{RegisterWorkerInfo, RegisteredWorkerInfo}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.typesafe.config.&lt;span class=&quot;hljs-function&quot;&gt;ConfigFactory&lt;/span&gt;&lt;/p&gt;&lt;p&gt;class &lt;span class=&quot;hljs-title&quot;&gt;WorkerActor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(serverHost: String, serverPort: Int)&lt;/span&gt; extends Actor {&lt;br/&gt;var masterActorProxy: ActorSelection = _&lt;/p&gt;&lt;p&gt;&lt;br/&gt;var id = java.util.UUID.randomUUID().toString&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;override def &lt;span class=&quot;hljs-title&quot;&gt;preStart&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.masterActorProxy = context.actorSelection(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;akka.tcp://Master@${serverHost}:${serverPort}/user/MasterActor-01&quot;&lt;/span&gt;)&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;this.masterActorProxy=&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.masterActorProxy)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;override def receive = {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Worker客户端启动运行&quot;&lt;/span&gt;)&lt;br/&gt;masterActorProxy ! RegisterWorkerInfo(id, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; RegisteredWorkerInfo =&amp;gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;WorkedId= &quot;&lt;/span&gt; + id + &lt;span class=&quot;hljs-string&quot;&gt;&quot; 注册成功！&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;object WorkerActorApp {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args: Array[String])&lt;/span&gt;: Unit &lt;/span&gt;= {&lt;br/&gt;val (host, port, serverHost, serverPort) = (&lt;span class=&quot;hljs-string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10001&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10005&lt;/span&gt;)&lt;br/&gt;val config = ConfigFactory.parseString(&lt;br/&gt;s&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;br/&gt;|akka.actor.provider=&quot;&lt;/span&gt;akka.remote.RemoteActorRefProvider&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;br/&gt;|akka.remote.netty.tcp.hostname=$host&lt;br/&gt;|akka.remote.netty.tcp.port=$port&lt;br/&gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.stripMargin)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;val workerActorSystem = ActorSystem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Worker&quot;&lt;/span&gt;, config)&lt;br/&gt;val workerActorRef: ActorRef = workerActorSystem.actorOf(Props(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WorkerActor(serverHost, serverPort)), &lt;span class=&quot;hljs-string&quot;&gt;&quot;WorkerActor-01&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;workerActorRef ! &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;MessageProtocol.scala&lt;/p&gt;
&lt;pre readability=&quot;8&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;10&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.akka.sparkmasterworker.common&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; class &lt;span class=&quot;hljs-title&quot;&gt;RegisterWorkerInfo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id: String, cpu: Int, ram: Int)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;class &lt;span class=&quot;hljs-title&quot;&gt;WorkerInfo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(val id: String, val cpu: Int, val ram: Int)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; object RegisteredWorkerInfo&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h16952worker&quot;&gt;&lt;span&gt;&lt;strong&gt;16.9.5 实现功能 2-Worker 定时发送心跳&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;功能要求：Worker 定时发送心跳给 Master，Master 能够接收到，并更新 Worker 上一次心跳时间。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMJMV.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;示例代码如下：&lt;br/&gt;MessageProtocol.scala 中增加代码
&lt;pre readability=&quot;10&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;14&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atguigu.akka.sparkmasterworker.common&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; class &lt;span class=&quot;hljs-title&quot;&gt;RegisterWorkerInfo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id: String, cpu: Int, ram: Int)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;class &lt;span class=&quot;hljs-title&quot;&gt;WorkerInfo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(val id: String, val cpu: Int, val ram: Int)&lt;/span&gt; {&lt;br/&gt;var lastHeartBeatTime: Long = _&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; object RegisteredWorkerInfo&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; class &lt;span class=&quot;hljs-title&quot;&gt;HeartBeat&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id: String)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; object SendHeartBeat&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;MasterActor.scala 中增加代码&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HeartBeat&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id)&lt;/span&gt; &lt;/span&gt;=&amp;gt; {&lt;br/&gt;val workerInfo = workers(id)&lt;br/&gt;workerInfo.lastHeartBeatTime = System.currentTimeMillis()&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Master更新了 &quot;&lt;/span&gt; + id + &lt;span class=&quot;hljs-string&quot;&gt;&quot; 的心跳时间 &quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;WorkerActor.scala 中增加代码&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;      &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; context.dispatcher&lt;br/&gt;context.system.scheduler.schedule(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; millis, &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt; millis, self, SendHeartBeat)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; SendHeartBeat =&amp;gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;WorkedId= &quot;&lt;/span&gt; + id + &lt;span class=&quot;hljs-string&quot;&gt;&quot; 给Master发送心跳&quot;&lt;/span&gt;)&lt;br/&gt;masterActorProxy ! HeartBeat(id)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h16963masterworker&quot;&gt;&lt;span&gt;&lt;strong&gt;16.9.6 实现功能 3-Master 启动定时任务，定时检测注册的 Worker&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;功能要求：Master 启动定时任务，定时检测注册的 Worker 有哪些没有更新心跳，已经超时的 Worker，将其从 HashMap 中删除掉。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWM1Gn.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;示例代码如下：&lt;br/&gt;MessageProtocol.scala 中增加代码
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;2&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; object StartTimeOutWorker&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; object RemoveTimeOutWorker&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;MasterActor.scala 中增加代码&lt;/p&gt;
&lt;pre readability=&quot;8&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;10&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt; =&amp;gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Master服务器启动了...&quot;&lt;/span&gt;)&lt;br/&gt;self ! StartTimeOutWorker&lt;br/&gt;}&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; StartTimeOutWorker =&amp;gt; {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;开启了定时检测Worker心跳的任务&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; context.dispatcher &lt;br/&gt;context.system.scheduler.schedule(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; millis, &lt;span class=&quot;hljs-number&quot;&gt;9000&lt;/span&gt; millis, self, RemoveTimeOutWorker)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; RemoveTimeOutWorker =&amp;gt; {&lt;br/&gt;val workerInfos = workers.values&lt;br/&gt;val nowTime = System.currentTimeMillis()&lt;br/&gt;workerInfos.filter(workerInfo =&amp;gt; (nowTime - workerInfo.lastHeartBeatTime) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;6000&lt;/span&gt;)&lt;br/&gt;.foreach(workerInfo =&amp;gt; workers.remove(workerInfo.id))&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;当前有 &quot;&lt;/span&gt; + workers.size + &lt;span class=&quot;hljs-string&quot;&gt;&quot; 个Worker存活&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h16974masterworker&quot;&gt;&lt;span&gt;&lt;strong&gt;16.9.7 实现功能 4-Master,Worker 的启动参数运行时指定&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;功能要求：Master，Worker 的启动参数运行时指定，而不是固定写在程序中的。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWM32q.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;MasterActor.scala 中修改代码
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (args.length != &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;请输入参数 host port MasterActor的名字&quot;&lt;/span&gt;)&lt;br/&gt;sys.exit()&lt;br/&gt;}&lt;br/&gt;val host = args(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)  &lt;br/&gt;val port = args(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)  &lt;br/&gt;val masterName = args(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)  &lt;br/&gt;......&lt;br/&gt;val masterActorRef = masterActorSystem.actorOf(Props[MasterActor], s&lt;span class=&quot;hljs-string&quot;&gt;&quot;${masterName}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;WorkerActor.scala 中增修改代码&lt;/p&gt;
&lt;pre readability=&quot;7.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;9&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (args != &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) {&lt;br/&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;请输入参数 host port WorkerActor的名字 serverHost serverPort MasterActor的名字&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;p&gt;val host = args(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;val port = args(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;val workerName = args(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;val serverHost = args(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)&lt;br/&gt;val serverPort = args(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)&lt;br/&gt;val masterName = args(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)&lt;br/&gt;......&lt;br/&gt;val workerActorRef: ActorRef = workerActorSystem.actorOf(Props(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WorkerActor(serverHost, serverPort.toInt, masterName)), s&lt;span class=&quot;hljs-string&quot;&gt;&quot;${workerName}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Master 配置参数截图：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWM8x0.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;Worker 配置参数截图：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/06/AWMYrT.png&quot; alt=&quot;&quot;/&gt;</description>
<pubDate>Fri, 05 Apr 2019 17:25:00 +0000</pubDate>
<dc:creator>黑泽君</dc:creator>
<og:description>第十五章 客户信息管理系统15.1 项目的开发流程15.2 项目的需求分析15.3 项目的界面15.4 项目的设计-程序框架图15.5 项目的功能实现15.5.1 完成 Customer 类15.5.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenmingjun/p/10660643.html</dc:identifier>
</item>
<item>
<title>python爬虫系列之初识爬虫 - bainianminguo</title>
<link>http://www.cnblogs.com/bainianminguo/p/10660560.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bainianminguo/p/10660560.html</guid>
<description>&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;我们这里主要是利用requests模块和bs4模块进行简单的爬虫的讲解，让大家可以对爬虫有了初步的认识，我们通过爬几个简单网站，让大家循序渐进的掌握爬虫的基础知识，做网络爬虫还是需要基本的前端的知识的，下面我们进行我们的爬虫讲解&lt;/p&gt;
&lt;p&gt;在进行实战之前，我们先给大家看下爬虫的一般讨论，方便大家看懂下面的实例&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201904/1101486-20190406001201266-1067524118.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;一、爬汽车之家&lt;/h3&gt;
&lt;p&gt;汽车之家这个网站没有做任何的防爬虫的限制，所以最适合我们来练手&lt;/p&gt;
&lt;p&gt;1、导入我们要用到的模块&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import requests
from bs4 import BeautifulSoup
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、利用requests模块伪造浏览器请求&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# 通过代码伪造浏览器请求
res = requests.get(&quot;https://www.autohome.com.cn/news/&quot;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3、设置解码的方式，python是utf-8，但是汽车之家是用gbk编码的，所以这里要设置一下解码的方式&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# 设置解码的方式
res.encoding = &quot;gbk&quot;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;4、把请求返回的对象，传递一个bs4模块，生成一个BeautifulSoup对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
soup = BeautifulSoup(res.text,&quot;html.parser&quot;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;5、这样，我们就可以使用BeautifulSoup给我们提供的方法，如下是查找一个div标签，且这个div标签的id属性为auto-channel-lazyload-atricle&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# find是找到相匹配的第一个标签
div = soup.find(name=&quot;div&quot;,attrs={&quot;id&quot;:&quot;auto-channel-lazyload-article&quot;})
# 这个div是一个标签对象
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;6、findall方法，是超找符合条件的所有的标签，下面是在步骤5的div标签内查找所有的li标签&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
li_list = div.find_all(name=&quot;li&quot;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;7、查找li标签中的不同条件的标签&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
li_list = div.find_all(name=&quot;li&quot;)
for li in li_list:
    title = li.find(name=&quot;h3&quot;)
    neirong = li.find(name=&quot;p&quot;)
    href = li.find(name=&quot;a&quot;)
    img = li.find(name=&quot;img&quot;)
    if not title:
        continue
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;8、获取标签的属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
    # print(title, title.text, sep=&quot;标题--&amp;gt;&quot;)
    # print(neirong, neirong.text, sep=&quot;内容--&amp;gt;&quot;)
    # print(href, href.attrs[&quot;href&quot;], sep=&quot;超链接--&amp;gt;&quot;)

    # 获取标签对接的属性
    # print(img.attrs[&quot;src&quot;])
    # ret = requests.get(img_src)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;9、如果我们下载一个文件，则需要requests.get这个文件，然后调用这个文件对象的content方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
    src = img.get(&quot;src&quot;)
    img_src = src.lstrip(&quot;/&quot;)
    file_name = img_src.split(&quot;/&quot;)[-1]
    img_src = &quot;://&quot;.join([&quot;https&quot;,img_src])
    print(file_name)
    ret = requests.get(img_src)
    with open(file_name,&quot;wb&quot;) as f:
        f.write(ret.content)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;10、整体的代码如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201904/1101486-20190405234759916-1130012860.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;二、爬抽屉&lt;/h3&gt;
&lt;p&gt;这里我们看下如何爬抽屉&lt;/p&gt;
&lt;p&gt;1、首先抽屉有做防爬虫的机制，我们在访问的时候必须要加一个请求头&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# 实例1：爬取数据，这个网址有做防爬虫机制，所以需要带一个请求头信息，才能让服务端以为我们是浏览器，不然服务端会把我们的请求当做爬虫行为进行拦截
# 设置一个请求头
chouti = requests.get(url=&quot;https://dig.chouti.com/&quot;,
                      headers={
                          &quot;user-agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;
                      })
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、这个请求网站会返回一个cookies，通过下面的方法获取cookies&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
print(chouti.cookies.get_dict())
# {'gpsd': 'ab141f7a741144216429b6e901da5f34', 'JSESSIONID': 'aaaNxWlWjLLKU9CGXDyNw'}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3、转换页面为一个BeautifulSoup对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# 将页面转换成一个BeautifulSoup的对象，就可以使用BeautifulSoup的方法了
soup = BeautifulSoup(chouti.text,&quot;html.parser&quot;)

news_list = soup.find_all(name=&quot;div&quot;,attrs={&quot;class&quot;:&quot;item&quot;})

for news in news_list:
    compont = news.find(name=&quot;div&quot;,attrs={&quot;class&quot;:&quot;part2&quot;})

    print(compont.get(&quot;share-title&quot;))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201904/1101486-20190405235226089-644551132.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;4、下面我们看下如何登陆抽屉&lt;/p&gt;
&lt;p&gt;首先我们先通过get方式访问主页&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# 1、先查看首页
r1 = requests.get(url=&quot;https://dig.chouti.com/&quot;,
                      headers={
                          &quot;user-agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;
                      })
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后我们通过post方式进行登陆，&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# 2、提交用户名和密码进行登陆

r2 = requests.post(url=&quot;https://dig.chouti.com/login&quot;,
              headers={
                    &quot;user-agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;
              },
              data={
                  &quot;phone&quot;:&quot;86139252938822&quot;,
                  &quot;password&quot;:&quot;admin&quot;,
                  &quot;oneMonth&quot;:1
              },
              cookies=r1.cookies.get_dict()
              )
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201904/1101486-20190405235510814-1110598936.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;最后登陆成功后，我们来实现一个点赞的操作，这里要注意&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;46&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# 第二次登陆的时候把第一次返回的cookies带上，这个是抽屉这个网站的套路，同样这次登陆也会返回一个cookies，但是登陆这次返回的cookies其实是个迷惑我们的cookies，没有用
# print(r2.text)
# 登陆失败返回的信息：{&quot;result&quot;:{&quot;code&quot;:&quot;21101&quot;, &quot;message&quot;:&quot;手机号或密码错误&quot;, &quot;data&quot;:{}}}
# 登陆成功返回的信息：{&quot;result&quot;:{&quot;code&quot;:&quot;9999&quot;, &quot;message&quot;:&quot;&quot;, &quot;data&quot;:{&quot;complateReg&quot;:&quot;0&quot;,&quot;destJid&quot;:&quot;cdu_53218132468&quot;}}}

# 如果登陆成功，通过下面的方法就可以把服务端返回的cookies拿到，以后在发请求，带着cookies去就可以了
print(r2.cookies.get_dict())
# {'puid': 'b11ec95d3b515ae2677a01f6abd5b916', 'gpid': '01cff9a184bd427789429d1dd556f4d2'}

r3 = requests.post(url=&quot;https://dig.chouti.com/link/vote?linksId=25461201&quot;,
                    headers={
                        &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;
                    },
                   # cookies=r2.cookies.get_dict(),
                   cookies=r1.cookies.get_dict(),
                   # 破解抽屉coookies套路
                   )
# 这次点赞，我们同样带的cookies是第一次登陆主页返回的cookies，而不是登陆成功后返回的cookies
# print(r3.text)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201904/1101486-20190405235747850-358559413.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 爬抽屉所有的代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;60&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# 实例1：爬取数据，这个网址有做防爬虫机制，所以需要带一个请求头信息，才能让服务端以为我们是浏览器，不然服务端会把我们的请求当做爬虫行为进行拦截

# 设置一个请求头
chouti = requests.get(url=&quot;https://dig.chouti.com/&quot;,
                      headers={
                          &quot;user-agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;
                      })

# print(chouti.text)

print(chouti.cookies.get_dict())
# {'gpsd': 'ab141f7a741144216429b6e901da5f34', 'JSESSIONID': 'aaaNxWlWjLLKU9CGXDyNw'}

# 将页面转换成一个BeautifulSoup的对象，就可以使用BeautifulSoup的方法了
soup = BeautifulSoup(chouti.text,&quot;html.parser&quot;)

news_list = soup.find_all(name=&quot;div&quot;,attrs={&quot;class&quot;:&quot;item&quot;})

for news in news_list:
    compont = news.find(name=&quot;div&quot;,attrs={&quot;class&quot;:&quot;part2&quot;})

    print(compont.get(&quot;share-title&quot;))



# 1、先查看首页
r1 = requests.get(url=&quot;https://dig.chouti.com/&quot;,
                      headers={
                          &quot;user-agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;
                      })

# r1.cookies.get_dict()，第一次访问主页，服务端就给返回了一个cookies

# 2、提交用户名和密码进行登陆

r2 = requests.post(url=&quot;https://dig.chouti.com/login&quot;,
              headers={
                    &quot;user-agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;
              },
              data={
                  &quot;phone&quot;:&quot;8613925293887&quot;,
                  &quot;password&quot;:&quot;admin123.&quot;,
                  &quot;oneMonth&quot;:1
              },
              cookies=r1.cookies.get_dict()
              )


# 第二次登陆的时候把第一次返回的cookies带上，这个是抽屉这个网站的套路，同样这次登陆也会返回一个cookies，但是登陆这次返回的cookies其实是个迷惑我们的cookies，没有用
# print(r2.text)
# 登陆失败返回的信息：{&quot;result&quot;:{&quot;code&quot;:&quot;21101&quot;, &quot;message&quot;:&quot;手机号或密码错误&quot;, &quot;data&quot;:{}}}
# 登陆成功返回的信息：{&quot;result&quot;:{&quot;code&quot;:&quot;9999&quot;, &quot;message&quot;:&quot;&quot;, &quot;data&quot;:{&quot;complateReg&quot;:&quot;0&quot;,&quot;destJid&quot;:&quot;cdu_53218132468&quot;}}}

# 如果登陆成功，通过下面的方法就可以把服务端返回的cookies拿到，以后在发请求，带着cookies去就可以了
print(r2.cookies.get_dict())
# {'puid': 'b11ec95d3b515ae2677a01f6abd5b916', 'gpid': '01cff9a184bd427789429d1dd556f4d2'}

r3 = requests.post(url=&quot;https://dig.chouti.com/link/vote?linksId=25461201&quot;,
                    headers={
                        &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;
                    },
                   # cookies=r2.cookies.get_dict(),
                   cookies=r1.cookies.get_dict(),
                   # 破解抽屉coookies套路
                   )
# 这次点赞，我们同样带的cookies是第一次登陆主页返回的cookies，而不是登陆成功后返回的cookies
# print(r3.text)
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;三、爬github&lt;/h3&gt;
&lt;p&gt; github的登陆是form表单做的，所以我们在登陆github的时候需要把cookies和crsf_token都带上&lt;/p&gt;
&lt;p&gt;1、访问github的首页&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# 1、GET，访问登陆页面

r1 = requests.get(url=&quot;https://github.com/&quot;,
                  headers={
                      &quot;user-agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;
                      }
                  )
# print(r1.cookies.get_dict())
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、访问登陆页面，需要在隐藏的input标签中找到token，然后获取到&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
r2 = requests.get(url=&quot;https://github.com/login&quot;,
                  headers={
                          &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;
                      }
                  )

login_obj = BeautifulSoup(r2.text,&quot;html.parser&quot;)

token = login_obj.find(name=&quot;form&quot;,attrs={&quot;action&quot;:&quot;/session&quot;}).find(name=&quot;input&quot;,attrs={&quot;name&quot;:&quot;authenticity_token&quot;}).get(&quot;value&quot;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201904/1101486-20190406000116504-1613945644.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 3、post方式访问登陆页面，携带上用户名和密码，token和cookies&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# 2、发送post请求，发送用户名和密码，发送的数据要不仅有用户名和密码，还要带上csrf token和cookie，浏览器发什么，我们就发什么
r3 = requests.post(url=&quot;https://github.com/session&quot;,
                  headers={
                          &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;
                      },
                   data={
                       &quot;login&quot;:&quot;admin&quot;,
                       &quot;password&quot;:&quot;admin&quot;,
                       &quot;authenticity_token&quot;:token
                   },
                    cookies=r2.cookies.get_dict()
                  )
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;4、以后就可以携带r3这个请求访问的cookies进行登陆github后的操作了&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
obj = BeautifulSoup(r3.text,&quot;html.parser&quot;)

# print(obj.find_all(name=&quot;img&quot;,attrs={&quot;alt&quot;:&quot;@admin&quot;}))

# 3、发送get请求，访问这个路径：https://github.com/settings/profile

r4 = requests.get(url=&quot;https://github.com/settings/profile&quot;,
             cookies=r3.cookies.get_dict()
             )

print(r4.text)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;爬github的所有的代码如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201904/1101486-20190406000427597-1292490164.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;四、爬拉钩网&lt;/h3&gt;
&lt;p&gt;最后我们来爬一下拉勾网&lt;/p&gt;
&lt;p&gt;1、首先get方式访问拉勾网的首页&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import requests
from bs4 import BeautifulSoup

# 如果遇到登陆的密码被加密了有两种解决办法
# 1、获取他的加密方式，然后手动破解
# 2、直接抓包把加密后的数据发过去就可以了

# 1、访问登陆页面
l1 = requests.get(url=&quot;https://passport.lagou.com/login/login.html&quot;,
                  headers={
                      &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&quot;
                  })

# print(l1.text)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、登陆拉钩网，他的请求头稍微有点特殊&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201904/1101486-20190406000737866-2065221221.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;data很简单，我们直接抓包就可以拿到&lt;/p&gt;
&lt;p&gt;主要是请求头中的数据是怎么来的，下面这2个是在我们请求登陆的页面中返回的，由于这2项在script标签中，我们只能通过正则表达式来匹配获取&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201904/1101486-20190406000835228-1470946967.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201904/1101486-20190406000953115-1381224223.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201904/1101486-20190406001015685-587467621.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;最后是爬拉勾网的所有的代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201904/1101486-20190406001052336-1757520457.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 05 Apr 2019 16:12:00 +0000</pubDate>
<dc:creator>bainianminguo</dc:creator>
<og:description>前言 我们这里主要是利用requests模块和bs4模块进行简单的爬虫的讲解，让大家可以对爬虫有了初步的认识，我们通过爬几个简单网站，让大家循序渐进的掌握爬虫的基础知识，做网络爬虫还是需要基本的前端的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bainianminguo/p/10660560.html</dc:identifier>
</item>
<item>
<title>apply、call、bind有什么区别？ - JoeJoan</title>
<link>http://www.cnblogs.com/Joe-and-Joan/p/10660544.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Joe-and-Joan/p/10660544.html</guid>
<description>&lt;h3 id=&quot;-apply&quot; data-id=&quot;heading-5&quot;&gt;使用 apply&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; a =&lt;span&gt; {
        name : &lt;/span&gt;&quot;Cherry&quot;&lt;span&gt;,

        func1: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name)
        },

        func2: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            setTimeout(  &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.func1()
            }.apply(a),&lt;/span&gt;100&lt;span&gt;);
        }

    };

    a.func2()            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Cherry&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;-call&quot; data-id=&quot;heading-6&quot;&gt;使用 call&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; a =&lt;span&gt; {
        name : &lt;/span&gt;&quot;Cherry&quot;&lt;span&gt;,

        func1: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name)
        },

        func2: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            setTimeout(  &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.func1()
            }.call(a),&lt;/span&gt;100&lt;span&gt;);
        }

    };

    a.func2()            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Cherry&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;-bind&quot; data-id=&quot;heading-7&quot;&gt;使用 bind&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; a =&lt;span&gt; {
        name : &lt;/span&gt;&quot;Cherry&quot;&lt;span&gt;,

        func1: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name)
        },

        func2: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            setTimeout(  &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.func1()
            }.bind(a)(),&lt;/span&gt;100&lt;span&gt;);
        }

    };

    a.func2()            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Cherry&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div readability=&quot;14.461521450686&quot;&gt;

&lt;p&gt;刚刚我们已经介绍了 apply、call、bind 都是可以改变 this 的指向的，但是这三个函数稍有不同。&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&quot;https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fapply&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;MDN&lt;/a&gt; 中定义 apply 如下；&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;apply() 方法调用一个函数, 其具有一个指定的this值，以及作为一个数组（或类似数组的对象）提供的参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;fun.apply(thisArg, [argsArray])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;thisArg：在 fun 函数运行时指定的 this 值。需要注意的是，指定的 this 值并不一定是该函数执行时真正的 this 值，如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动指向全局对象（浏览器中就是window对象），同时值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的自动包装对象。&lt;/li&gt;
&lt;li&gt;argsArray：一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 fun 函数。如果该参数的值为null 或 undefined，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。浏览器兼容性请参阅本文底部内容。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;apply-call-&quot; data-id=&quot;heading-9&quot;&gt;apply 和 call 的区别&lt;/h2&gt;
&lt;div readability=&quot;16.5&quot;&gt;
&lt;div readability=&quot;12.5&quot;&gt;
&lt;p&gt;其实 apply 和 call 基本类似，他们的区别只是传入的参数不同。&lt;/p&gt;
&lt;p&gt;call 的语法为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
fun.call(thisArg[, arg1[, arg2[, ...]]])
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;所以 apply 和 call 的区别是 call 方法接受的是若干个参数列表，而 apply 接收的是一个包含多个参数的数组。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; a =&lt;span&gt;{
        name : &lt;/span&gt;&quot;Cherry&quot;&lt;span&gt;,
        fn : &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (a,b) {
            console.log( a &lt;/span&gt;+&lt;span&gt; b)
        }
    }

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; b =&lt;span&gt; a.fn;
    b.apply(a,[&lt;/span&gt;1,2])     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; a =&lt;span&gt;{
        name : &lt;/span&gt;&quot;Cherry&quot;&lt;span&gt;,
        fn : &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (a,b) {
            console.log( a &lt;/span&gt;+&lt;span&gt; b)
        }
    }

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; b =&lt;span&gt; a.fn;
    b.call(a,&lt;/span&gt;1,2)       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;bind-apply-call-&quot; data-id=&quot;heading-10&quot;&gt;bind 和 apply、call 区别&lt;/h2&gt;
我们先来将刚刚的例子使用 bind 试一下&lt;/div&gt;
&lt;div readability=&quot;7.9589743589744&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; a =&lt;span&gt;{
        name : &lt;/span&gt;&quot;Cherry&quot;&lt;span&gt;,
        fn : &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (a,b) {
            console.log( a &lt;/span&gt;+&lt;span&gt; b)
        }
    }

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; b =&lt;span&gt; a.fn;
    b.bind(a,&lt;/span&gt;1,2)
&lt;/pre&gt;&lt;/div&gt;
&lt;div readability=&quot;10.435051546392&quot;&gt;
&lt;div readability=&quot;10.912&quot;&gt;
&lt;p&gt;我们会发现并没有输出，这是为什么呢，我们来看一下 &lt;a href=&quot;https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fbind&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;MDN&lt;/a&gt; 上的文档说明：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我们可以看出，bind 是创建一个新的函数，我们必须要手动去调用：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; a =&lt;span&gt;{
        name : &lt;/span&gt;&quot;Cherry&quot;&lt;span&gt;,
        fn : &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (a,b) {
            console.log( a &lt;/span&gt;+&lt;span&gt; b)
        }
    }

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; b =&lt;span&gt; a.fn;
    b.bind(a,&lt;/span&gt;1,2)()           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 05 Apr 2019 16:04:00 +0000</pubDate>
<dc:creator>JoeJoan</dc:creator>
<og:description>使用 apply 使用 call 使用 bind apply、call、bind 区别 刚刚我们已经介绍了 apply、call、bind 都是可以改变 this 的指向的，但是这三个函数稍有不同。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Joe-and-Joan/p/10660544.html</dc:identifier>
</item>
<item>
<title>Rabbit安装(windows) - fuguang</title>
<link>http://www.cnblogs.com/fuguang/p/10660536.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fuguang/p/10660536.html</guid>
<description>&lt;p&gt;安装rabbit后，启动服务，浏览器打开控制台找不到。查百度说是要装插件。翻了好几篇都是互相抄，没有能用到。&lt;/p&gt;
&lt;p&gt;多翻了几篇终于找到一个靠谱的。可以打开控制台了。记录下：&lt;/p&gt;
&lt;p&gt;首先要安装Erlang语言支持，我用的是&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1283985/201904/1283985-20190405235532097-1723571021.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;6.6349206349206&quot;&gt;
&lt;p&gt;安装完Erlang后，需要配置环境变量&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1283985/201904/1283985-20190405235551100-501324587.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8.4759493670886&quot;&gt;
&lt;p&gt;再配置path变量&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1283985/201904/1283985-20190405235613703-1567556092.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;15.957333333333&quot;&gt;
&lt;p&gt;安装rabbit。安装路径不要有空格。&lt;/p&gt;
&lt;p&gt;直接下一步下一步安装后。&lt;/p&gt;
&lt;p&gt;在cmd命令行进入到rabbit的sbin目录下执行命令&lt;/p&gt;
&lt;p&gt;rabbitmq-plugins.bat enable rabbitmq_management&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1283985/201904/1283985-20190405235639963-1476772653.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;div readability=&quot;11.357142857143&quot;&gt;
&lt;p&gt;。重启rabbit。因为安装完默认是启动的。&lt;/p&gt;
&lt;p&gt;rabbitmq-service.bat stop&lt;/p&gt;
&lt;p&gt;rabbitmq-service.bat start&lt;/p&gt;

&lt;p&gt;默认账号密码是guest/guest&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 05 Apr 2019 15:59:00 +0000</pubDate>
<dc:creator>fuguang</dc:creator>
<og:description>安装rabbit后，启动服务，浏览器打开控制台找不到。查百度说是要装插件。翻了好几篇都是互相抄，没有能用到。 多翻了几篇终于找到一个靠谱的。可以打开控制台了。记录下： 首先要安装Erlang语言支持，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fuguang/p/10660536.html</dc:identifier>
</item>
<item>
<title>Springboot项目redisTemplate实现轻量级消息队列 - wangzaiplus</title>
<link>http://www.cnblogs.com/wangzaiplus/p/10660520.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangzaiplus/p/10660520.html</guid>
<description>&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;br/&gt;公司项目有个需求, 前端上传excel文件, 后端读取数据、处理数据、返回错误数据, 最简单的方式同步处理, 客户端上传文件后一直阻塞等待响应, 但用户体验无疑很差, 处理数据可能十分耗时, 没人愿意傻等, 由于项目暂未使用ActiveMQ等消息队列中间件, 而redis的lpush和rpop很适合作为一种轻量级的消息队列实现, 所以用它完成此次功能开发&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;&lt;li&gt;excel文件读写--阿里easyexcel sdk&lt;/li&gt;
&lt;li&gt;文件上传、下载--腾讯云对象存储&lt;/li&gt;
&lt;li&gt;远程服务调用--restTemplate&lt;/li&gt;
&lt;li&gt;生产者、消费者--redisTemplate leftPush和rightPop操作&lt;/li&gt;
&lt;li&gt;异步处理数据--Executors线程池&lt;/li&gt;
&lt;li&gt;读取网络文件流--HttpClient&lt;/li&gt;
&lt;li&gt;自定义注解实现用户身份认证--JWT token认证, 拦截器拦截标注有@LoginRequired注解的请求入口&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;当然, Java实现咯&lt;br/&gt;涉及的知识点比较多, 每一个知识点都可以作为专题进行学习分析, 本文将完整实现呈现出来, 后期拆分与小伙伴分享学习&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4931997-164140f5b91fa260.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;项目结构&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt; 数据库DAO层放到另一个模块了, 不是本文重点&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;easyexcel&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;&amp;lt;easyexcel-latestVersion&amp;gt;1.1.2-beta4&amp;lt;/easyexcel-latestVersion&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;easyexcel&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${easyexcel-latestVersion}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;JWT&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.jsonwebtoken&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jjwt&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.7.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;redis&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-redis&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.3.5.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;腾讯cos&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.qcloud&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cos_api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;5.4.5&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;ol&gt;&lt;li&gt;用户上传文件&lt;/li&gt;
&lt;li&gt;将文件存储到腾讯cos&lt;/li&gt;
&lt;li&gt;将上传后的文件id及上传记录保存到数据库&lt;/li&gt;
&lt;li&gt;redis生产一条导入消息, 即保存文件id到redis&lt;/li&gt;
&lt;li&gt;请求结束, 返回&quot;处理中&quot;状态&lt;/li&gt;
&lt;li&gt;redis消费消息&lt;/li&gt;
&lt;li&gt;读取cos文件, 异步处理数据&lt;/li&gt;
&lt;li&gt;将错误数据以excel形式上传至cos, 以供用户下载, 并更新处理状态为&quot;处理完成&quot;&lt;/li&gt;
&lt;li&gt;客户端轮询查询处理状态, 并可以下载错误文件&lt;/li&gt;
&lt;li&gt;结束&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;上传文件&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4931997-ee702d6a3b3ec96b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;上传文件&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库导入记录&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4931997-5877d1ec033f33b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;数据库导入记录&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导入的数据&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4931997-4ec0bb60fb18ce1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;导入的数据&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载错误文件&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4931997-09eb1890b008a1fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;下载错误文件&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;错误数据提示&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4931997-a01648f5841e6331.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;错误数据提示&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询导入记录&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4931997-60ee7b9493cda427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;查询导入记录&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;导入excel控制层&quot;&gt;1、导入excel控制层&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;    @LoginRequired
    @RequestMapping(value = &quot;doImport&quot;, method = RequestMethod.POST)
    public JsonResponse doImport(@RequestParam(&quot;file&quot;) MultipartFile file, HttpServletRequest request) {
        PLUser user = getUser(request);
        return orderImportService.doImport(file, user.getId());
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;service层&quot;&gt;2、service层&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;    @Override
    public JsonResponse doImport(MultipartFile file, Integer userId) {
        if (null == file || file.isEmpty()) {
            throw new ServiceException(&quot;文件不能为空&quot;);
        }

        String filename = file.getOriginalFilename();
        if (!checkFileSuffix(filename)) {
            throw new ServiceException(&quot;当前仅支持xlsx格式的excel&quot;);
        }

        // 存储文件
        String fileId = saveToOss(file);
        if (StringUtils.isBlank(fileId)) {
            throw new ServiceException(&quot;文件上传失败, 请稍后重试&quot;);
        }

        // 保存记录到数据库
        saveRecordToDB(userId, fileId, filename);

        // 生产一条订单导入消息
        redisProducer.produce(RedisKey.orderImportKey, fileId);

        return JsonResponse.ok(&quot;导入成功, 处理中...&quot;);
    }

    /**
     * 校验文件格式
     * @param fileName
     * @return
     */
    private static boolean checkFileSuffix(String fileName) {
        if (StringUtils.isBlank(fileName) || fileName.lastIndexOf(&quot;.&quot;) &amp;lt;= 0) {
            return false;
        }

        int pointIndex = fileName.lastIndexOf(&quot;.&quot;);
        String suffix = fileName.substring(pointIndex, fileName.length()).toLowerCase();
        if (&quot;.xlsx&quot;.equals(suffix)) {
            return true;
        }

        return false;
    }

   /**
     * 将文件存储到腾讯OSS
     * @param file
     * @return
     */
    private String saveToOss(MultipartFile file) {
        InputStream ins = null;
        try {
            ins = file.getInputStream();
        } catch (IOException e) {
            e.printStackTrace();
        }

        String fileId;
        try {
            String originalFilename = file.getOriginalFilename();
            File f = new File(originalFilename);
            inputStreamToFile(ins, f);
            FileSystemResource resource = new FileSystemResource(f);

            MultiValueMap&amp;lt;String, Object&amp;gt; param = new LinkedMultiValueMap&amp;lt;&amp;gt;();
            param.add(&quot;file&quot;, resource);

            ResponseResult responseResult = restTemplate.postForObject(txOssUploadUrl, param, ResponseResult.class);
            fileId = (String) responseResult.getData();
        } catch (Exception e) {
            fileId = null;
        }

        return fileId;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;redis生产者&quot;&gt;3、redis生产者&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@Service
public class RedisProducerImpl implements RedisProducer {

    @Autowired
    private RedisTemplate redisTemplate;

    @Override
    public JsonResponse produce(String key, String msg) {
        Map&amp;lt;String, String&amp;gt; map = Maps.newHashMap();
        map.put(&quot;fileId&quot;, msg);
        redisTemplate.opsForList().leftPush(key, map);
        return JsonResponse.ok();
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;redis消费者&quot;&gt;4、redis消费者&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@Service
public class RedisConsumer {

    @Autowired
    public RedisTemplate redisTemplate;

    @Value(&quot;${txOssFileUrl}&quot;)
    private String txOssFileUrl;

    @Value(&quot;${txOssUploadUrl}&quot;)
    private String txOssUploadUrl;

    @PostConstruct
    public void init() {
        processOrderImport();
    }

    /**
     * 处理订单导入
     */
    private void processOrderImport() {
        ExecutorService executorService = Executors.newCachedThreadPool();
        executorService.execute(() -&amp;gt; {
            while (true) {
                Object object = redisTemplate.opsForList().rightPop(RedisKey.orderImportKey, 1, TimeUnit.SECONDS);
                if (null == object) {
                    continue;
                }
                String msg = JSON.toJSONString(object);
                executorService.execute(new OrderImportTask(msg, txOssFileUrl, txOssUploadUrl));
            }
        });
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;处理任务线程类&quot;&gt;5、处理任务线程类&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;public class OrderImportTask implements Runnable {
    public OrderImportTask(String msg, String txOssFileUrl, String txOssUploadUrl) {
        this.msg = msg;
        this.txOssFileUrl = txOssFileUrl;
        this.txOssUploadUrl = txOssUploadUrl;
    }
}

    /**
     * 注入bean
     */
    private void autowireBean() {
        this.restTemplate = BeanContext.getApplicationContext().getBean(RestTemplate.class);
        this.transactionTemplate = BeanContext.getApplicationContext().getBean(TransactionTemplate.class);
        this.orderImportService = BeanContext.getApplicationContext().getBean(OrderImportService.class);
    }

    @Override
    public void run() {
        // 注入bean
        autowireBean();

        JSONObject jsonObject = JSON.parseObject(msg);
        String fileId = jsonObject.getString(&quot;fileId&quot;);

        MultiValueMap&amp;lt;String, Object&amp;gt; param = new LinkedMultiValueMap&amp;lt;&amp;gt;();
        param.add(&quot;id&quot;, fileId);

        ResponseResult responseResult = restTemplate.postForObject(txOssFileUrl, param, ResponseResult.class);
        String fileUrl = (String) responseResult.getData();
        if (StringUtils.isBlank(fileUrl)) {
            return;
        }

        InputStream inputStream = HttpClientUtil.readFileFromURL(fileUrl);
        List&amp;lt;Object&amp;gt; list = ExcelUtil.read(inputStream);
        process(list, fileId);
    }

    /**
     * 将文件上传至oss
     * @param file
     * @return
     */
    private String saveToOss(File file) {
        String fileId;
        try {
            FileSystemResource resource = new FileSystemResource(file);
            MultiValueMap&amp;lt;String, Object&amp;gt; param = new LinkedMultiValueMap&amp;lt;&amp;gt;();
            param.add(&quot;file&quot;, resource);

            ResponseResult responseResult = restTemplate.postForObject(txOssUploadUrl, param, ResponseResult.class);
            fileId = (String) responseResult.getData();
        } catch (Exception e) {
            fileId = null;
        }
        return fileId;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt; 处理数据的业务逻辑代码就不用贴了&lt;/p&gt;
&lt;h3 id=&quot;上传文件到cos&quot;&gt;6、上传文件到cos&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;    @RequestMapping(&quot;/txOssUpload&quot;)
    @ResponseBody
    public ResponseResult txOssUpload(@RequestParam(&quot;file&quot;) MultipartFile file) throws UnsupportedEncodingException {
        if (null == file || file.isEmpty()) {
            return ResponseResult.fail(&quot;文件不能为空&quot;);
        }

        String originalFilename = file.getOriginalFilename();
        originalFilename = MimeUtility.decodeText(originalFilename);// 解决中文乱码问题
        String contentType = getContentType(originalFilename);
        String key;

        InputStream ins = null;
        File f = null;

        try {
            ins = file.getInputStream();
            f = new File(originalFilename);
            inputStreamToFile(ins, f);
            key = iFileStorageClient.txOssUpload(new FileInputStream(f), originalFilename, contentType);
        } catch (Exception e) {
            return ResponseResult.fail(e.getMessage());
        } finally {
            if (null != ins) {
                try {
                    ins.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (f.exists()) {// 删除临时文件
                f.delete();
            }
        }

        return ResponseResult.ok(key);
    }

    public static void inputStreamToFile(InputStream ins,File file) {
        try {
            OutputStream os = new FileOutputStream(file);
            int bytesRead = 0;
            byte[] buffer = new byte[8192];
            while ((bytesRead = ins.read(buffer, 0, 8192)) != -1) {
                os.write(buffer, 0, bytesRead);
            }
            os.close();
            ins.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public String txOssUpload(FileInputStream inputStream, String key, String contentType) {
        key = Uuid.getUuid() + &quot;-&quot; + key;
        OSSUtil.txOssUpload(inputStream, key, contentType);
        try {
            if (null != inputStream) {
                inputStream.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return key;
    }

    public static void txOssUpload(FileInputStream inputStream, String key, String contentType) {
        ObjectMetadata objectMetadata = new ObjectMetadata();
        try{
            int length = inputStream.available();
            objectMetadata.setContentLength(length);
        }catch (Exception e){
            logger.info(e.getMessage());
        }
        objectMetadata.setContentType(contentType);
        cosclient.putObject(txbucketName, key, inputStream, objectMetadata);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;下载文件&quot;&gt;7、下载文件&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;    /**
     * 腾讯云文件下载
     * @param response
     * @param id
     * @return
     */
    @RequestMapping(&quot;/txOssDownload&quot;)
    public Object txOssDownload(HttpServletResponse response, String id) {
        COSObjectInputStream cosObjectInputStream = iFileStorageClient.txOssDownload(id, response);
        String contentType = getContentType(id);
        FileUtil.txOssDownload(response, contentType, cosObjectInputStream, id);
        return null;
    }

    public static void txOssDownload(HttpServletResponse response, String contentType, InputStream fileStream, String fileName) {
        FileOutputStream fos = null;
        response.reset();
        OutputStream os = null;
        try {
            response.setContentType(contentType + &quot;; charset=utf-8&quot;);
            if(!contentType.equals(PlConstans.FileContentType.image)){
                try {
                    response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot; + new String(fileName.getBytes(&quot;UTF-8&quot;), &quot;ISO8859-1&quot;));
                } catch (UnsupportedEncodingException e) {
                    response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot; + fileName);
                    logger.error(&quot;encoding file name failed&quot;, e);
                }
            }

            os = response.getOutputStream();

            byte[] b = new byte[1024 * 1024];
            int len;
            while ((len = fileStream.read(b)) &amp;gt; 0) {
                os.write(b, 0, len);
                os.flush();
                try {
                    if(fos != null) {
                        fos.write(b, 0, len);
                        fos.flush();
                    }
                } catch (Exception e) {
                    logger.error(e.getMessage());
                }
            }
        } catch (IOException e) {
            IOUtils.closeQuietly(fos);
            fos = null;
        } finally {
            IOUtils.closeQuietly(os);
            IOUtils.closeQuietly(fileStream);
            if(fos != null) {
                IOUtils.closeQuietly(fos);
            }
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;读取网络文件流&quot;&gt;8、读取网络文件流&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;    /**
     * 读取网络文件流
     * @param url
     * @return
     */
    public static InputStream readFileFromURL(String url) {
        if (StringUtils.isBlank(url)) {
            return null;
        }

        HttpClient httpClient = new DefaultHttpClient();
        HttpGet methodGet = new HttpGet(url);
        try {
            HttpResponse response = httpClient.execute(methodGet);
            if (response.getStatusLine().getStatusCode() == 200) {
                HttpEntity entity = response.getEntity();
                return entity.getContent();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;excelutil&quot;&gt;9、ExcelUtil&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;    /**
     * 读excel
     * @param inputStream 文件输入流
     * @return list集合
     */
    public static List&amp;lt;Object&amp;gt; read(InputStream inputStream) {
        return EasyExcelFactory.read(inputStream, new Sheet(1, 1));
    }

    /**
     * 写excel
     * @param data list数据
     * @param clazz
     * @param saveFilePath 文件保存路径
     * @throws IOException
     */
    public static void write(List&amp;lt;? extends BaseRowModel&amp;gt; data, Class&amp;lt;? extends BaseRowModel&amp;gt; clazz, String saveFilePath) throws IOException {
        File tempFile = new File(saveFilePath);
        OutputStream out = new FileOutputStream(tempFile);
        ExcelWriter writer = EasyExcelFactory.getWriter(out);
        Sheet sheet = new Sheet(1, 3, clazz, &quot;Sheet1&quot;, null);
        writer.write(data, sheet);
        writer.finish();
        out.close();
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt; 至此, 整个流程算是完整了, 下面将其他知识点代码也贴出来参考&lt;/p&gt;

&lt;h3 id=&quot;loginrequired注解&quot;&gt;1、@LoginRequired注解&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * 在需要登录验证的Controller的方法上使用此注解
 */
@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface LoginRequired {
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;mycontrolleradvice&quot;&gt;2、MyControllerAdvice&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@ControllerAdvice
public class MyControllerAdvice {

    @ResponseBody
    @ExceptionHandler(TokenValidationException.class)
    public JsonResponse tokenValidationExceptionHandler() {
        return JsonResponse.loginInvalid();
    }

    @ResponseBody
    @ExceptionHandler(ServiceException.class)
    public JsonResponse serviceExceptionHandler(ServiceException se) {
        return JsonResponse.fail(se.getMsg());
    }

    @ResponseBody
    @ExceptionHandler(Exception.class)
    public JsonResponse exceptionHandler(Exception e) {
        e.printStackTrace();
        return JsonResponse.fail(e.getMessage());
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;authenticationinterceptor&quot;&gt;3、AuthenticationInterceptor&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;public class AuthenticationInterceptor implements HandlerInterceptor {

    private static final String CURRENT_USER = &quot;user&quot;;

    @Autowired
    private UserService userService;

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {
        // 如果不是映射到方法直接通过
        if (!(handler instanceof HandlerMethod)) {
            return true;
        }
        HandlerMethod handlerMethod = (HandlerMethod) handler;
        Method method = handlerMethod.getMethod();

        // 判断接口是否有@LoginRequired注解, 有则需要登录
        LoginRequired methodAnnotation = method.getAnnotation(LoginRequired.class);
        if (methodAnnotation != null) {
            // 验证token
            Integer userId = JwtUtil.verifyToken(request);
            PLUser plUser = userService.selectByPrimaryKey(userId);
            if (null == plUser) {
                throw new RuntimeException(&quot;用户不存在，请重新登录&quot;);
            }
            request.setAttribute(CURRENT_USER, plUser);
            return true;
        }
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception {
    }

    @Override
    public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception {
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;jwtutil&quot;&gt;4、JwtUtil&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;    public static final long EXPIRATION_TIME = 2592_000_000L; // 有效期30天
    public static final String SECRET = &quot;pl_token_secret&quot;;
    public static final String HEADER = &quot;token&quot;;
    public static final String USER_ID = &quot;userId&quot;;

    /**
     * 根据userId生成token
     * @param userId
     * @return
     */
    public static String generateToken(String userId) {
        HashMap&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
        map.put(USER_ID, userId);
        String jwt = Jwts.builder()
                .setClaims(map)
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(SignatureAlgorithm.HS512, SECRET)
                .compact();
        return jwt;
    }

    /**
     * 验证token
     * @param request
     * @return 验证通过返回userId
     */
    public static Integer verifyToken(HttpServletRequest request) {
        String token = request.getHeader(HEADER);
        if (token != null) {
            try {
                Map&amp;lt;String, Object&amp;gt; body = Jwts.parser()
                        .setSigningKey(SECRET)
                        .parseClaimsJws(token)
                        .getBody();

                for (Map.Entry entry : body.entrySet()) {
                    Object key = entry.getKey();
                    Object value = entry.getValue();
                    if (key.toString().equals(USER_ID)) {
                        return Integer.valueOf(value.toString());// userId
                    }
                }
                return null;
            } catch (Exception e) {
                logger.error(e.getMessage());
                throw new TokenValidationException(&quot;unauthorized&quot;);
            }
        } else {
            throw new TokenValidationException(&quot;missing token&quot;);
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;结语:&lt;/strong&gt; OK, 搞定,睡了, 好困&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 05 Apr 2019 15:53:00 +0000</pubDate>
<dc:creator>wangzaiplus</dc:creator>
<og:description>背景 公司项目有个需求, 前端上传excel文件, 后端读取数据、处理数据、返回错误数据, 最简单的方式同步处理, 客户端上传文件后一直阻塞等待响应, 但用户体验无疑很差, 处理数据可能十分耗时, 没</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangzaiplus/p/10660520.html</dc:identifier>
</item>
<item>
<title>Spring之AOP流程解析(ProxyFactory) - letsfly</title>
<link>http://www.cnblogs.com/letsfly/p/10660488.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/letsfly/p/10660488.html</guid>
<description>&lt;p&gt;　　本节我们从ProxyFactory开始分析。该类有几个比较重要的方法——addAdvice、addAdvisor、getProxy，其中最后一个方法是我们本节的重点。前两个方法都是向ProxyFactory中成员变量advisors中加入成员，以便后面调用方法时实现拦截。&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;　　这里，我们首先来了解前两个方法。在addAdvice中会调用到addAdvisor，而内部封装的advisor实际类型是DefaultPointcutAdvisor。如下图所示，这里将advice封装到DefaultPointcutAdvisor。这里我们默认只传入advice参数，在DefaultPointcutAdvisor中的成员变量pointcut默认为Pointcut.TRUE，也就是TruePointcut.INSTANCE，他比较特殊的是通过方法getClassFilter返回的是ClassFilter.TRUE，也就是TrueClassFilter.INSTANCE，通过方法getMethodMatcher返回的是MethodMatcher.TRUE，也就是TrueMethodMatcher.INSTANCE。通过他们的matches方法返回值都是true。接着，在addAdvisor方法中调用了addAdvisorInternal，该方法将入参advisor加入成员变量advisors中，然后将其中的值转换为数组赋给成员变量advisorArray(该变量用于后来在方法DefaultAdvisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice中构建interceptorList列表)，然后调用adviceChanged方法将成员变量methodCache中的值清空。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201904/1365945-20190405233244552-1779405921.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　下面，我们来到本节的重点ProxyFactory.getProxy，该方法并不复杂，只是返回一个代理对象，该代理对象除了实现了ProxyFactory.targetSource.getTargetClass所实现接口，另外实现了SpringProxy、Advised、DecoratingProxy这三个接口。&lt;/p&gt;
&lt;p&gt;　　在ProxyFactory.getProxy方法中调用了ProxyCreatorSupport.createAopProxy，该方法首先调用了方法activate，然后通过方法getAopProxyFactory获得成员变量aopProxyFactory，该成员变量在通过ProxyFactory调用时是DefaultAopProxyFactory的实例。关于ProxyCreatorSupport的另一个构造方法，入参为aopProxyFactory，调用是在ProxyFactoryBean.newPrototypeInstance中，我将放在以后来讲解。接下来调用了DefaultAopProxyFactory.createAopProxy，这里的入参就是我们的ProxyFactory，这点需要紧记，因为在后来的代理对象调用方法时会用到，这里的入参接着会传入到接下来构建的AopProxy实现类型中。在DefaultAopProxyFactory.createAopProxy方法中根据情况构造了ObjenesisCglibAopProxy或者JdkDynamicAopProxy。其中JdkDynamicAopProxy是AopProxy基于JDK的实现，而ObjenesisCglibAopProxy是基于Cglib的实现，他直接继承自CglibAopProxy。这里我只分析JdkDynamicAopProxy，大家有兴趣可以看一下ObjenesisCglibAopProxy，二者只是实现方式不同，大体流程是一致的。我们这里然后就调用了JdkDynamicAopProxy.getProxy，这里有一个参数是ClassUtils.getDefaultClassLoader()，该方法获取的是当前线程的ClassLoader，也就是默认的Launcher$AppClassLoader。然后通过方法AopProxyUtils.completeProxiedInterfaces填充了SpringProxy、Advised、DecoratingProxy这三个接口。而后通过Proxy.newProxyInstance方法构建了代理对象，注意，这里的最后一个入参就是我们这里的JdkDynamicAopProxy。&lt;/p&gt;
&lt;p&gt;　　下面，假设我们调用了返回的代理对象的某个方法，也就是说，我们将来到JdkDynamicAopProxy.invoke。不知道大家是否还记得，在JdkDynamicAopProxy.advised就是在DefaultAopProxyFactory.createAopProxy方法中的入参，也就是我们的ProxyFactory。让我们再回到JdkDynamicAopProxy.invoke方法。这里首先获得了advised.targetSource，也就是ProxyFactory.targetSource。这里的targetSource是在ProxyFactory的构造函数中将入参Object封装后的TargetSource，默认实现是SingletonTargetSource。接着调用了targetSource.getTarget，也就是获取到了我们这里的目标对象，也就是构造ProxyFactory时的入参Object。然后，获取到target的实际类型，调用了advised.getInterceptorsAndDynamicInterceptionAdvice，也就是方法AdvisedSupport.getInterceptorsAndDynamicInterceptionAdvice。该方法根据之前传入的advisor构建调用链。由于我们之前并没有调用该方法，因此，在AdvisedSupport.methodCache中并没有该方法的缓存值，然后调用了DefaultAdvisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice来构造cached并将其将入到成员变量methodCache中。&lt;/p&gt;
&lt;p&gt;　　接下来，让我们来到DefaultAdvisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice，该方法实现了将入参config中的Advisors转换为通过匹配后的MethodInterceptor列表，也就是真实方法调用前的拦截链。如下图所示，这里是getInterceptorsAndDynamicInterceptionAdvice的完整方法。&lt;/p&gt;
&lt;p&gt;　　1.首先调用GlobalAdvisorAdapterRegistry.getInstance获得DefaultAdvisorAdapterRegistry。这里我们需要注意的是在DefaultAdvisorAdapterRegistry的构造方法中已经调用registerAdvisorAdapter方法为其成员变量adapters加入了MethodBeforeAdviceAdapter、AfterReturningAdviceAdapter、ThrowsAdviceAdapter这三个AdvisorAdapter。&lt;/p&gt;
&lt;p&gt;　　2.调用入参config.getAdvisors获取在ProxyFactory中配置的advisors。&lt;/p&gt;
&lt;p&gt;　　3.遍历ProxyFactory.advisors，一般来说，在ProxyFactory中加入的advisor是DefaultPointcutAdvisor，实现了接口PointcutAdvisor。因此，这里将advisor强转为PointcutAdvisor，获取其pointcut，紧接着调用Pointcut.getClassFilter，并调用ClassFilter.matches，判断目标类型是否与当前pointcut的ClassFilter相匹配，如果返回值为true，则继续调用PointcutAdvisor.getPointcut.getMethodMatcher获得MethodMatcher，接着判断其是否与目标类型的调用方法相匹配。如果当前调用方法确实是拦截点，就会调用DefaultAdvisorAdapterRegistry.getInterceptors将当前advisor转换为MethodInterceptor列表。&lt;/p&gt;
&lt;p&gt;　　这里我简单说一下PointcutAdvisor与Advisor。PointcutAdvisor实现接口Advisor，并且增加了方法getPointcut，返回的Pointcut就是用来判断当前执行的方法是否与当前PointcutAdvisor相匹配。而advisor的作用就是用来封装advice，其有一个方法是getAdvice。这里的DefaultAdvisorAdapterRegistry.getInterceptors方法我放到后面来讲解。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;　　4.将返回的MethodInterceptor数组加入到interceptorList中然后返回。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201904/1365945-20190405233325527-132455531.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　这里我们首先来到DefaultAdvisorAdapterRegistry.getInterceptors。&lt;/p&gt;
&lt;p&gt;　　1.如果通过advisor.getAdvice获取的advice实现了接口MethodInterceptor，则直接将其加入到interceptors列表中。&lt;/p&gt;
&lt;p&gt;　　2.这里的成员变量adapters就是在DefaultAdvisorAdapterRegistry构造时就填充了MethodBeforeAdviceAdapter、AfterReturningAdviceAdapter、ThrowsAdviceAdapter。接着遍历adapters并将满足条件的advice封装后加入到interceptors列表中。&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;　　这里我们以MethodBeforeAdviceAdapter为例。在MethodBeforeAdviceAdapter.supportsAdvice方法中仅仅是判断入参advice是否实现了MethodBeforeAdvice接口，如果满足条件，则调用MethodBeforeAdviceAdapter.getInterceptor将advice强转为MethodBeforeAdvice并将其封装到MethodBeforeAdviceInterceptor中。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201904/1365945-20190405233408635-1553345077.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　到此为止，我们就构造好了AdviceChain，接下来，来到本节的最后一个重点——构造ReflectiveMethodInvocation，并调用其proceed方法。在构造ReflectiveMethodInvocation时，其最后一个入参就是我们刚刚构造好的chain。接下来，我们来到ReflectiveMethodInvocation.proceed。这里的链式调用很类似web应用中的过滤器，可能spirng团队也是经常写web架构的。&lt;/p&gt;
&lt;p&gt;　　1.这里首先判断当前调用是否已经将所有的调用链完成，如果已经完成，则调用invokeJoinpoint，触发真实要执行的方法。大家可能比较疑惑，这里为什么是interceptorsAndDynamicMethodMatchers.size() - 1，因为这里的currentInterceptorIndex是从-1开始的，如果从0开始的话，那么，显然就没有后面的 - 1。&lt;/p&gt;
&lt;p&gt;　　2.从interceptorsAndDynamicMethodMatchers列表中获取值，然后调用其invoke方法。这里我把MethodBeforeAdviceInterceptor、AfterReturningAdviceInterceptor、ThrowsAdviceInterceptor都讲解一下。&lt;/p&gt;
&lt;p&gt;　　如果这里的MethodInterceptor实际类型是MethodInterceptor，那么调用了MethodBeforeAdviceInterceptor.invoke，注意，这里的入参是ReflectiveMethodInvocation，也就是说，这里在调用了advice.before后，接着调用了ReflectiveMethodInvocation.proceed，接着来到ReflectiveMethodInvocation.proceed。&lt;/p&gt;
&lt;p&gt;　　然后假设这里的MethodInterceptor实际类型是AfterReturningAdviceInterceptor，这里直接就调用了ReflectiveMethodInvocation.proceed，在其调用完成后，调用了advice.afterReturning。&lt;/p&gt;
&lt;p&gt;　　接着，我们假设这里的MethodInterceptor实际类型是ThrowsAdviceInterceptor，这里直接调用了ReflectiveMethodInvocation.proceed，不过，这里添加了异常捕获如果获取到对应的Method，则通过invokeHandlerMethod调用捕获异常的方法。然后继续将异常抛出。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;　　可以说，这里很好的使用的递归的思路，实现了拦截器的链式调用。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201904/1365945-20190405233505195-1646791867.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　到这里，本节的内容就结束了。尽管内容洋洋洒洒，但是当你调试代码的时候，会发现其实并没有多少东西。希望大家在看本文的时候尽量结合源码调试，以加深理解。如果有疑问或有相关问题探讨，欢迎大家留言。&lt;/p&gt;

</description>
<pubDate>Fri, 05 Apr 2019 15:38:00 +0000</pubDate>
<dc:creator>letsfly</dc:creator>
<og:description>本节我们从ProxyFactory开始分析。该类有几个比较重要的方法——addAdvice、addAdvisor、getProxy，其中最后一个方法是我们本节的重点。前两个方法都是向ProxyFact</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/letsfly/p/10660488.html</dc:identifier>
</item>
<item>
<title>盘点ip地址冲突解决方法 - 新爵</title>
<link>http://www.cnblogs.com/sucy/p/10660491.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sucy/p/10660491.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;日常生活中常会遇到主机报IP冲突的情形，那么出现该问题该如何排查：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.源头追溯，查日志&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;运行——&amp;gt; cmd——&amp;gt; eventvwr.msc  打开系统日志，依次进入Windows日志-系统，进入查看。找到类别为错误，来源为Tcpip的日志并打开，我们就能找到冲突主机的物理地址：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1296096/201904/1296096-20190405230656629-317397087.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;以上说明，检测到240e:fa:c1b4:5300:3479:168b:88f5:2 和 0C-84-DC-90-D9-38 两块网卡存在冲突，这就是冲突来源！（对比发现，该地址实际并不是本机网卡，当然如果是本机，可能右下角网卡图标处直接有异常提示出现，而且不能正常上网的哟，这也是区别的地方。）注意这里日志记录并不一定是针对本机，它记录的是该局域网内的冲突事件的哦。&lt;/p&gt;
&lt;p&gt;2.顺藤摸瓜，查找mac事件主机&lt;/p&gt;
&lt;p&gt;根据日志记录的两个mac去查找到对应的主机。本事例经查发现一小伙伴自己笔记本电脑外接了一块无线网卡........冲突自此而来！&lt;/p&gt;
&lt;p&gt;3.解决方法&lt;/p&gt;
&lt;p&gt;禁用其一无线网卡即可解决。 &lt;/p&gt;
&lt;p&gt;这里要说一下，其实这就是个双网卡入同一个局域网的问题，有的时候有线+无线网卡同时入网也会出现这种问题，需要注意。&lt;/p&gt;

&lt;p&gt;其他：&lt;/p&gt;
&lt;p&gt;当然网上也给出了各种处理这类故障的方法，常见的有：&lt;/p&gt;
&lt;p&gt;（1）运行ipconfig /release ——&amp;gt; ipconfig /renew   终端重获ip&lt;/p&gt;
&lt;p&gt;（2）重启路由器（DHCP服务）&lt;/p&gt;
&lt;p&gt;（3）指定静态IP&lt;/p&gt;
&lt;p&gt;......对于上面的案例，以上3种方法是无济于事的！对于专业人士，掌握方法，才是根本哦。&lt;/p&gt;
</description>
<pubDate>Fri, 05 Apr 2019 15:36:00 +0000</pubDate>
<dc:creator>新爵</dc:creator>
<og:description>日常生活中常会遇到主机报IP冲突的情形，那么出现该问题该如何排查： 1.源头追溯，查日志 运行——&gt; cmd——&gt; eventvwr.msc 打开系统日志，依次进入Windows日志-系统</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sucy/p/10660491.html</dc:identifier>
</item>
<item>
<title>Java 集合系列（四）—— ListIterator 源码分析 - 那一叶随风</title>
<link>http://www.cnblogs.com/phpstudy2015-6/p/10660457.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/phpstudy2015-6/p/10660457.html</guid>
<description>&lt;p&gt;以脑图的形式来展示Java集合知识，让零碎知识点形成体系&lt;/p&gt;
&lt;h4&gt;Iterator 对比&lt;/h4&gt;
&lt;p&gt;  Iterator（迭代器）是一种设计模式，是一个对象，用于遍历集合中的所有元素。&lt;br/&gt;  Iterator 包含四个方法，分别是：next()、hasNext()、remove()、forEachRemaining(Consumer&amp;lt;? super E&amp;gt; action)&lt;/p&gt;
&lt;p&gt;  Collection 接口继承 java.lang.Iterable，因此所有 Collection 实现类都拥有 Iterator 迭代能力。&lt;br/&gt;  逆向思考，Iterable 面向众多的 Collection 类型实现类，定义的方法就不可能太定制化，因此 Iterator 定义的功能比较简单。&lt;br/&gt;  仅有如上所列出来的四种方法，并且该迭代器只能够单向移动。&lt;/p&gt;
&lt;p&gt;  由于 List 类型的 Collection 是一个有序集合，对于拥有双向迭代是很有意义的。&lt;br/&gt;  ListIterator 接口则在继承 Iterator 接口的基础上定义了：add(E newElement)、set(E newElement)、hasPrevious()、previous()、nextIndex()、previousIndex() 等方法，使得 ListIterator 迭代能力增强，能够进行双向迭代、迭代过程中可以进行增删改操作。&lt;/p&gt;
&lt;h4&gt;现象与问题&lt;/h4&gt;

&lt;ol&gt;&lt;li&gt;add() 方法在迭代器位置前面添加一个新元素&lt;/li&gt;
&lt;li&gt;next() 与 previous() 返回越过的对象&lt;/li&gt;
&lt;li&gt;set() 方法替换的是 next() 和 previous() 方法返回的上一个元素&lt;/li&gt;
&lt;li&gt;next() 后，再 remove() 则删除前面的元素；previous() 则会删除后面的元素&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         List&amp;lt;String&amp;gt; list = &lt;span&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         list.add(&quot;aaa&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         list.add(&quot;bbb&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         list.add(&quot;ccc&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         ListIterator&amp;lt;String&amp;gt; listIterator =&lt;span&gt; list.listIterator();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;迭代器位置： add-1 | aaa bbb ccc&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         listIterator.add(&quot;add-1&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add-1 add-1 | aaa bbb ccc&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         listIterator.add(&quot;add-2&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回： aaa
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add-1 add-1 aaa | bbb ccc&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        listIterator.next();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add-1 add-1 aaa-set | bbb ccc&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         listIterator.set(&quot;aaa-set&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bbb
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add-1 add-1 aaa-set bbb | ccc&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        listIterator.next();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回： bbb
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add-1 add-1 aaa-set | bbb ccc&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        listIterator.previous();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add-1 add-1 aaa-set | bbb-set ccc&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         listIterator.set(&quot;bbb-set&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 删除 bbb-set&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        listIterator.remove();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        listIterator.remove();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         System.out.println(list);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;很多书本都有给出这样子的结论：&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;链表有 n 个元素，则有 n+1 个位置可以添加新元素；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;add() 方法只依赖迭代器的+位置；remove() 和 set() 方法依赖于迭代器的状态（此时迭代的方向）；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;连续两个 remove() 会出错，remove() 前应先执行 next() 或 previous()。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;迭代同时修改问题：&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;  一个迭代器指向另一个迭代器刚刚删除的元素，则现在这个迭代器就变成无效的了（节点删除被回收；即使没被回收，该节点的前后引用也被重置为null）。&lt;br/&gt;链表迭代器有能够检测到这种修改的功能，当发现集合被修改了，将会抛出一个 ConcurrentModificationException 异常&lt;/p&gt;
&lt;p&gt;  为什么出现上面的这些现象与问题呢，我们还是从源码中寻找答案吧&lt;/p&gt;

&lt;h4&gt;源码分析&lt;/h4&gt;
&lt;p&gt;  有多个集合类根据自己的特点实现了 ListIterator 接口，其实现都大同小异，这里我们主要分析 LinkedList 中所实现的 ListIterator。&lt;/p&gt;
&lt;p&gt;  首先我们来分析 LinkedList 的 listIterator() 和 listIterator(int index) 方法获取 ListIterator 迭代器过程。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; AbstractList.java
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; listIterator() 方法 LinkedList 类本身并没有重写，需要追溯到 AbstractList 抽象类
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取 ListIterator 迭代器&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; ListIterator&amp;lt;E&amp;gt;&lt;span&gt; listIterator() {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; listIterator(0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; ListIterator&amp;lt;E&amp;gt; listIterator(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; index) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         rangeCheckForAdd(index);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查 index 范围是否超出&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ListItr(index);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该抽象类也有实现 ListItr 类&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; rangeCheckForAdd(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (index &amp;lt; 0 || index &amp;gt;&lt;span&gt; size())
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexOutOfBoundsException(outOfBoundsMsg(index));
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; LinkedList.java
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; LinkedList 类重写了 listIterator(int index) 方法&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; ListIterator&amp;lt;E&amp;gt; listIterator(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index) {
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;         checkPositionIndex(index);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 同理 检查 index 范围；相关代码就不贴了&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ListItr(index);
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ListItr &lt;span&gt;implements&lt;/span&gt; ListIterator&amp;lt;E&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; Node&amp;lt;E&amp;gt; lastReturned;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 上一次处理的节点&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; Node&amp;lt;E&amp;gt; next;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 即将要处理的节点&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; nextIndex;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 即将要处理的节点的 index
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; modCount 表示集合和迭代器修改的次数；expectedModCount 表示当前迭代器对集合修改的次数&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; expectedModCount =&lt;span&gt; modCount;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt;         ListItr(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index) {
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; assert isPositionIndex(index);&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;             next = (index == size) ? &lt;span&gt;null&lt;/span&gt;&lt;span&gt; : node(index);
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;             nextIndex =&lt;span&gt; index;
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasNext() {
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; nextIndex &amp;lt;&lt;span&gt; size;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; 
&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;        * 处理对象：迭代器当前的 next 节点
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;        * 将处理目标储到 lastReturned 变量中
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;        * 然后将当前的 next.next 节点保存起来，用于下一次迭代处理
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;        * nextIndex 同时 +1
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;        * 返回 lastReturned.item 元素
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;        * 执行后：lastReturned 指向该次处理的节点；next、nextIndex 指向该次处理节点的后一个节点
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; E next() {
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查 modCount 与 expectedModCount 是否相等
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实际检查该链表是否被其他迭代器或者集合本身修改&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;            checkForComodification();
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断是否存在 next 节点&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;hasNext())
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NoSuchElementException();
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;             
&lt;span&gt; 43&lt;/span&gt;             lastReturned = next;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将这次返回的 node 节点更新到迭代器中的 lastReturned 变量&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;             next = next.next;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将下一次需要处理 node 节点更新会 next 变量&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;             nextIndex++;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 变量 nextIndex +1&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; lastReturned.item;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回元素&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; 
&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasPrevious() {
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; nextIndex &amp;gt; 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; 
&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;        * 处理对象：迭代器当前的 next.prev 节点
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;        * 将处理目标储到 lastReturned 变量中
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;        * 然后将当前的 next.prev 节点保存起来，用于下一次迭代处理
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;        * nextIndex 同时 -1
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;        * 返回当前的 next.item 元素
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;        * 执行后：next、lastReturned、nextIndex 指向该次处理节点的前一个节点
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; E previous() {
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;            checkForComodification();
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断是否存在 prev 节点&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;hasPrevious())
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NoSuchElementException();
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; 
&lt;span&gt; 67&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 处理当前 next 的 prev 节点
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 特殊情况：next = null 时，则它的 prev 节点为 last 节点  &lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;             lastReturned = next = (next == &lt;span&gt;null&lt;/span&gt;) ?&lt;span&gt; last : next.prev;    
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;             nextIndex--;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; nextIndex -1&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; lastReturned.item;
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; 
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; nextIndex() {
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; nextIndex;
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; 
&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; previousIndex() {
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; nextIndex - 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; 
&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;        * 处理对象：lastReturned
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;        * 删除 lastReturned 指向的节点，并置为 null
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;        * 同时保证 next 和 nextIndex 指向同一个节点
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; remove() {
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;             checkForComodification();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 同理， 检查 modCount 与 expectedModCount 是否相等&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (lastReturned == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IllegalStateException();
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt;             Node&amp;lt;E&amp;gt; lastNext = lastReturned.next;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 暂存 lastReturned 的 next 节点，用于恢复迭代状态&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;             unlink(lastReturned);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 删除最后返回的节点    modCount++;
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;             
&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分迭代方向处理（因为删除一个节点后，需要恢复迭代状态：next 和 nextIndex 指向同一个节点）&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (next == lastReturned)   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; next 与 lastReturned 节点相同则表明最近一次迭代操作是 previous()&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;                 next = lastNext;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 删除了原有 next 指向的节点，因此 nextIndex 相对指向的节点变为 next.next，需要更新 next 变量的指向&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;                 nextIndex--;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; next() 迭代方向；删除了next前面的节点，因此next的相对位置发生变化，需要 nextIndex -1&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;             lastReturned = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;    
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;             expectedModCount++;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 同时 expectedModCount++&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; 
&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt; &lt;span&gt;        * 处理对象：lastReturned
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;         &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; set(E e) {
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (lastReturned == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IllegalStateException();
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;            checkForComodification();
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;             lastReturned.item =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; 
&lt;span&gt;114&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt; &lt;span&gt;        * 分位置进行添加
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; add(E e) {
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;            checkForComodification();
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;             lastReturned = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (next == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;                linkLast(e);
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt; &lt;span&gt;                linkBefore(e, next);
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;             nextIndex++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;             expectedModCount++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; 
&lt;span&gt;128&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; forEachRemaining(Consumer&amp;lt;? &lt;span&gt;super&lt;/span&gt; E&amp;gt;&lt;span&gt; action) {
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;            Objects.requireNonNull(action);
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (modCount == expectedModCount &amp;amp;&amp;amp; nextIndex &amp;lt;&lt;span&gt; size) {
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;                action.accept(next.item);
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;                 lastReturned =&lt;span&gt; next;
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;                 next =&lt;span&gt; next.next;
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;                 nextIndex++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;            checkForComodification();
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; 
&lt;span&gt;139&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; &lt;span&gt;        * 检查 modCount 与 expectedModCount 是否相等，否则抛出错误
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;        * ListIterator 迭代器进行增删操作时，都会同时对这两个变量 +1
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;        * 目的：
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;        * 使用 ListIterator 迭代器期间，LinkedList 对象有且只能当前这一个迭代器可以进行修改
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;        * 避免 LinkedList 对象本身以及其他迭代器进行修改导致链表混乱
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;         &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; checkForComodification() {
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (modCount !=&lt;span&gt; expectedModCount)
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConcurrentModificationException();
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;小结&lt;/h4&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;  总的来说 ListIterator 是记录 List 位置的一个对象，它主要的成员变量是 lastReturned、next、nextIndex 以及 expectedModCount。&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;next() 处理的是 next 节点，返回 next.item&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;previous() 处理的是 next.prev 节点 返回 next.prev.item&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;remove() 处理的是 lastReturned 节点，并置为null，但要注意的是，删除节点后的 next 与 nextIndex 需分情况处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;set() 处理的是 lastReturned 节点，lastReturned.item = e&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;add() 添加，并将 lastReturned 置为null&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;  这就很好地解释上面所提到的一些现象与问题了。&lt;br/&gt;  典型的就是连续两个 remove() 会报错，那是因为第一个 reomve() 之后 lastReturned 被置为null；第二个 remove() 处理的对象是null，因此炮锤 IllegalStateException&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;知识脑图&lt;/h4&gt;
&lt;p&gt;From &lt;a href=&quot;https://github.com/suifeng412/JCKTree&quot; target=&quot;_blank&quot;&gt;Java Core Knowledge Tree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/789055/201904/789055-20190405232355497-282276452.png&quot; alt=&quot;&quot; width=&quot;908&quot; height=&quot;749&quot;/&gt;&lt;/p&gt;


&lt;p&gt;在 github 上建了一个 repository ，&lt;a href=&quot;https://github.com/suifeng412/JCKTree&quot; target=&quot;_blank&quot;&gt;Java Core Knowledge Tree&lt;/a&gt;，各位看官若是喜欢请给个star，以示鼓励，谢谢。&lt;br/&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsuifeng412%2FJCKTree&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/suifeng412/JCKTree&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;（以上是自己的一些见解，若有不足或者错误的地方请各位指出）&lt;/p&gt;
&lt;p&gt; 作者：&lt;a href=&quot;http://www.cnblogs.com/phpstudy2015-6/&quot; target=&quot;_blank&quot;&gt;那一叶随风&lt;/a&gt;   &lt;a href=&quot;http://www.cnblogs.com/phpstudy2015-6/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/phpstudy2015-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 原文地址： &lt;a href=&quot;https://www.cnblogs.com/phpstudy2015-6/p/10660457.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/phpstudy2015-6/p/10660457.html&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/phpstudy2015-6/p/%20https://www.cnblogs.com/phpstudy2015-6/p/6732784.html&quot; target=&quot;_blank&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 声明：本博客文章为原创，只代表本人在工作学习中某一时间内总结的观点或结论。转载时请在文章页面明显位置给出原文链接&lt;/p&gt;

</description>
<pubDate>Fri, 05 Apr 2019 15:30:00 +0000</pubDate>
<dc:creator>那一叶随风</dc:creator>
<og:description>以脑图的形式来展示Java集合知识，让零碎知识点形成体系 Iterator 对比 Iterator（迭代器）是一种设计模式，是一个对象，用于遍历集合中的所有元素。 Iterator 包含四个方法，分别</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/phpstudy2015-6/p/10660457.html</dc:identifier>
</item>
<item>
<title>[java初探05]__数组的简单认识及Arrays类的常用方法 - 小舍先生</title>
<link>http://www.cnblogs.com/gemuxiaoshe/p/10660450.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gemuxiaoshe/p/10660450.html</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;数组是具有相同数据类型的一组数据的集合.在程序设计中,这样的集合称之为数组.数组的每个元素都具有相同的数据类型,在Java中数组也被看为一个对象.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在里,了解了数组的定义之后, 我们知道了,数组并不是简单的由一组数组成的.而是由一组具有相同数据类型的数据组成的,可以是一组整型的数据,也可以是一组字符型的数组,这里的数可以来理解为代表的是数据,而不是数字的意思.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;如果一维数组中的每一个元素任然是一个数组的话,那么它就构成了一个二维数组了.二维数组常用于表示表,表中的信息以行和列的形式组织.第一个代表元素的所在列,第二个下标是代表元素所在的列.&lt;/p&gt;
&lt;p&gt;在理解上,一维二维,就是线与面的关系,或者说一条数据和一个数据表的关系.面由线组成,表由一条条数据组成.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;创建一维数组,我们可以将代表数组的符号[]加在变量或者数据类型关键字后面,在通常情况下,数组的创建,都是使用第二种,及将[]加在数据类型关键字后面,这样在使用上,和在意义表达上也都要更加契合一些.&lt;/p&gt;
&lt;p&gt;而数组的创建,不仅要new一个数组出来,我们还的为它分配内存.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;int a[]; // 声明int型数组
int[] b=new int[4]; // 声明的同时直接分配内存大小
a = new int [4]; //为其分配内存大小&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/8067684-a5528f0d9390cb3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;2019-4-5-02.png&quot;/&gt;&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;一维数组的初始化&lt;br/&gt;在前面我们知道了,数组的每个元素的表示,都是以数组的下标来表示的.那么我们想要对数组中的元素进行操作的化,必然要从数组的下标入手.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;静态初始化&lt;br/&gt;我们可以直接在创建数组的时候使用{}直接为数组初始化赋值,实现一步直接创建并初始化数组赋初值.这样就省略了分配内存的步骤.&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;int[] b={1,2,3,4};&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;动态初始化&lt;br/&gt;我们也可以直接通过数组的下标来直接对数组中的某个元素赋值初始化,称作动态初始化,动态初始化前,我们需要先为数组分配内存空间.&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;  int[] a;
        a =new int[4];
        a[0]=1;
        a[1]=2;
        a[3]=3;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;动态初始化给数组赋值时,可以不对数组中的某些元素赋初始值,其将会输出为默认值0.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;二维数组的创建与初始化&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;二位数组前面我们说过了,就是在一维的基础上,再加一维.由线变面.&lt;br/&gt;所以二位数组的创建与初始化与一维数组的大同小异.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
int arr[][];
int[][] arr2;
arr2 = new int[2][4];

   int[][] c={{2,3},{12,13},{22,23}};
        System.out.println(c[0][1]);
        int[][] d=new int[3][4];
        d[0][0]=1;
        d[0][1]=2;
        d[0][2]=3;
        d[0][3]=4;
        d[1][0]=11;
        d[1][1]=12;
        d[1][2]=13;
        d[1][3]=14;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/8067684-37d1ff99457f51ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;2019-4-5-03.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数组操作&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;遍历数组&lt;br/&gt;通过for循环遍历数组,将数组内容全部输出.一维数组的遍历十分简单:&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;int[] a={1,2,3,4,5};
        for(int i=0;i&amp;lt;a.length;i++){
            System.out.print(a[i]+&quot;,&quot;);
        }&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;二维数组的遍历&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;相对的,二维数组的遍历就要稍微复杂一些,我们观察一维数组的遍历,了解到实现原理是通过for循环,来循环输出对应下标的数组元素,每循环一次下标就加1,然后使条件小于数组的长度.&lt;/p&gt;
&lt;p&gt;那么二维数组的遍历应当可以使用一样的原理,不过二维数组有两个下标,怎么办呢,想来也是因该使用两个for循环来控制.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  // 二维数组的遍历
        int[][] b={{2,3,4,5},{12,13,14,15},{22,23,24,25}};
        for(int i=0;i&amp;lt;b.length;i++){ // 通过两个for循环遍历二维数组,外层循环遍历列的下标,
            for (int j=0;j&amp;lt;b[i].length;j++){  // 内存循环循环遍历行的下标.
                System.out.print(b[i][j]+&quot;,&quot;); //循环输出对应下标的元素.遍历出整个二维数组.
            }
            System.out.println(); // 输出换行(每行数据输出红后换行.)
        }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/8067684-fb420d26869df257.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;2019-4-5-04.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;替换数组元素&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Arrays类中给我们提供了fill方法用来填充后替换数组中的元素.其重载有多种方法提供不同形式的替换方式.fill(int[],int)方法可以将指定值替换(填充)到指定数组的所有元素中.fill(int[],int ,int,int)方法将指定值替换到指定范围的元素中,前两个int参数指定数组下标范围.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  //填充数组
        Arrays.fill(c,6);
        System.out.println(Arrays.toString(c));
        Arrays.fill(c,3,7,10);
        System.out.println(Arrays.toString(c));&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;数组排序&lt;br/&gt;Arrays类中还提供了排序方法sort()其也重载有多个方法.最简单的排序方法sort(object)参数及需要排序的数组.&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt; Arrays.sort(c);
        System.out.println(Arrays.toString(c));&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;复制数组&lt;br/&gt;Arrays类也提供有copyOf()方法和copyOfRange()方法用来将一个数组复制到另一个新数组中.copyOfrange()方法可以指定copy范围.&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;//copy数组
        int[] d=Arrays.copyOf(c,12);
        int[] e=Arrays.copyOfRange(c,3,7);
        System.out.println(Arrays.toString(d));
        System.out.println(Arrays.toString(e));&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;数组查询&lt;br/&gt;Arrays类的binarySearch()方法,可使用二分法来搜索指定数组.其也提供有多种重载方式,可以在指定范围搜索数组.返回值为数组所在位置(不是返回其下标).&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;//数组查询
          //数组查询
        System.out.println(Arrays.binarySearch(c,10));
        System.out.println(Arrays.binarySearch(c,5,7,10));
&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;p&gt;关于Arrays(数组)类的其他方法,我们可以打开Arrays类进行查看.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/8067684-0680a1d4f6d78ec0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;2019-4-5-05.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于数组的学习笔记就暂且记录到这里,关于数组的排序,又涉及到排序算法,而排序算法的种类又有很多,之后会专门单独总结一篇文章来系统的学习排序算法.这里就不涉及数组的排序了.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import java.sql.SQLOutput;
import java.util.Arrays;

/**
 * @outhor xiaoshe
 * @date 2019/4/5  - @time 20:40
 * 数组
 */
public class Sty_Array {

    public static void main(String[] args) {
        Sty_Array sty_array = new Sty_Array();
        sty_array.create_array();
        sty_array.TraverArrays();

    }

    // 两种数组的创建,我们可以将代表数组的符号[]加给变量或者数据类型关键字.

    public void create_array(){
        // 一维数组
        int[] a;
        a =new int[4];
        a[0]=1;
        a[3]=3;
        System.out.println(a[3]);
        System.out.println(Arrays.toString(a));
        System.out.println(a.length);
        char[] b ={'a','b','c','d'};
        System.out.println(Arrays.toString(b));
        // 二维数组
        int[][] c={{2,3},{12,13},{22,23}};
        System.out.println(c[0][1]);
        int[][] d=new int[3][4];
        d[0][0]=1;
        d[0][3]=4;
        d[1][0]=11;
    }

    // 数组操作
    public void TraverArrays(){
        //一维数组的遍历
        int[] a={1,2,3,4,5};
        int[] c={3,6,2,4,1,7,9,8,0};
        for(int i=0;i&amp;lt;a.length;i++){
            System.out.print(a[i]+&quot;,&quot;);
        }
        System.out.println(&quot;\n----分界线-----&quot;);
        // 二维数组的遍历
        int[][] b={{2,3,4,5},{12,13,14,15},{22,23,24,25}};
        for(int i=0;i&amp;lt;b.length;i++){ // 通过两个for循环遍历二维数组,外层循环遍历列的下标,
            for (int j=0;j&amp;lt;b[i].length;j++){  // 内存循环循环遍历行的下标.
                System.out.print(b[i][j]+&quot;,&quot;); //循环输出对应下标的元素.遍历出整个二维数组.
            }
            System.out.println(); // 输出换行(每行数据输出红后换行.)
        }
        //数组排序
        Arrays.sort(c);
        System.out.println(Arrays.toString(c));
        //copy数组
        int[] d=Arrays.copyOf(c,12);
        int[] e=Arrays.copyOfRange(c,3,7);
        System.out.println(Arrays.toString(d));
        System.out.println(Arrays.toString(e));
        //填充数组
        Arrays.fill(c,6);
        System.out.println(Arrays.toString(c));
        Arrays.fill(c,3,7,10);
        System.out.println(Arrays.toString(c));
        //数组查询
        System.out.println(Arrays.binarySearch(c,10));
        System.out.println(Arrays.binarySearch(c,5,7,10));
}
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;p&gt;更新时间:&lt;br/&gt;2019-4-5&lt;br/&gt;23:14&lt;/p&gt;
</description>
<pubDate>Fri, 05 Apr 2019 15:22:00 +0000</pubDate>
<dc:creator>小舍先生</dc:creator>
<og:description>数组是具有相同数据类型的一组数据的集合.在程序设计中,这样的集合称之为数组.数组的每个元素都具有相同的数据类型,在Java中数组也被看为一个对象. 在里,了解了数组的定义之后, 我们知道了,数组并不是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gemuxiaoshe/p/10660450.html</dc:identifier>
</item>
</channel>
</rss>