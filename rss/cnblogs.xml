<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Spring：（二）DI依赖注入方式 - JYRoy</title>
<link>http://www.cnblogs.com/jyroy/p/10304533.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jyroy/p/10304533.html</guid>
<description>&lt;h2 id=&quot;di-依赖注入&quot;&gt;DI 依赖注入&lt;/h2&gt;
&lt;p&gt;　　DI（Dependency Injection）依赖注入，说简单一点就将类里面的属性在创建类的过程中给属性赋值，即将对象依赖属性（简单值，集合，对象）通过配置设值给该对象。&lt;/p&gt;

&lt;h2 id=&quot;依赖注入的方式&quot;&gt;属性注入的方式&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;　构造方法的方式&lt;/li&gt;
&lt;li&gt;　set方法的方式&lt;/li&gt;
&lt;li&gt;　工厂方法注入&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　主要学习前两种方式&lt;/p&gt;
&lt;h3&gt;构造方法的方式&lt;/h3&gt;
&lt;p&gt;　　当是构造方法时注入Bean的属性值（简单值，集合，对象）&lt;/p&gt;
&lt;p&gt;　　利用&amp;lt;constructor-arg&amp;gt;标签进行属性的注入&lt;/p&gt;
&lt;p&gt;　　　　name：被设置属性的名&lt;/p&gt;
&lt;p&gt;　　　　value：被设置属性的值&lt;/p&gt;
&lt;p&gt;　编写用构造方法的pojo&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; spring_test1.pojo;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserConstructor {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; UserConstructor(String name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;User_constructor [name=&quot; + name + &quot;, id=&quot; + id + &quot;]&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;XML配置编写&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;
            http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring构造方法注入 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;user_cons&quot;&lt;/span&gt;&lt;span&gt;  class&lt;/span&gt;&lt;span&gt;=&quot;spring_test1.pojo.UserConstructor&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;Roy&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;1001&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
        
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;编写测试类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; spring_test1.test;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; org.junit.Assert.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ApplicationContext;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.support.ClassPathXmlApplicationContext;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; spring_test1.pojo.UserConstructor;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserConstructorTest {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test() {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建Spring的工厂&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         ApplicationContext applicationContext = &lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到User对象&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         UserConstructor userConstructor = (UserConstructor) applicationContext.getBean(&quot;user_cons&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        System.out.println(userConstructor);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1378215/201901/1378215-20190122161349189-1150875357.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;set方法的方式&lt;/h3&gt;
&lt;p&gt; 　　我在&lt;a href=&quot;https://www.cnblogs.com/jyroy/p/10289930.html&quot; target=&quot;_blank&quot;&gt;Spring：（一）&lt;/a&gt;那一篇中的第一个Spring程序便是set方法时的属性注入方式&lt;/p&gt;
&lt;p&gt;　　利用&amp;lt;property&amp;gt;标签&lt;/p&gt;
&lt;p&gt;　　　　name：被设置属性的名&lt;/p&gt;
&lt;p&gt;　　　　value：被设置属性的值&lt;/p&gt;
&lt;h4&gt;标准XML格式&lt;/h4&gt;
&lt;p&gt;编写pojo&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; spring_test1.pojo;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; jyroy
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;User [name=&quot; + name + &quot;, id=&quot; + id + &quot;]&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;编写XML配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;
            http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;Spring的set方法的属性注入&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt;  class&lt;/span&gt;&lt;span&gt;=&quot;spring_test1.pojo.User&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;李东&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;1007&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 

        
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;编写测试类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; spring_test1.test;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ApplicationContext;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.support.ClassPathXmlApplicationContext;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; spring_test1.pojo.User;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserTest {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; demo1() {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建Spring的工厂&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         ApplicationContext applicationContext = &lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到User对象&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         User user = (User) applicationContext.getBean(&quot;user&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        System.out.println(user);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 运行结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1378215/201901/1378215-20190122161736943-1945228538.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;p命名空间的方式&lt;/h4&gt;
&lt;p&gt;　　看上面的XML配置，似乎用&amp;lt;property/&amp;gt;标签还是比较臃肿。&lt;/p&gt;
&lt;p&gt;　　于是从2.0开始，Spring支持使用名称空间的可扩展配置格式。这些名称空间都是基于一种XML Schema定义。p命名空间就可以用bean 元素的属性代替&amp;lt;property/&amp;gt;元素。&lt;/p&gt;
&lt;p&gt;　　还需要在使用p命名空间时先声明使用对应的命名空间，即在bean元素上添加 xmlns:p=&quot;http://www.springframework.org/schema/p&quot;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1        &lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; p命名空间的方式 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;spring_test1.pojo.User&quot;&lt;/span&gt;&lt;span&gt; p:name&lt;/span&gt;&lt;span&gt;=&quot;Roy&quot;&lt;/span&gt;&lt;span&gt; p:id&lt;/span&gt;&lt;span&gt;=&quot;1004&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;c命名空间的方式&lt;/h4&gt;
&lt;p&gt;　　C命名空间与p命名空间类似，但是使用c命名空间可以用内联的构造参数代替嵌套的constructor-arg元素&lt;/p&gt;
&lt;p&gt;　　同样先声明使用对应的命名空间，即在bean元素上添加 xmlns:c=&quot;http://www.springframework.org/schema/c&quot;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:c&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/c&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 标准XML格式 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;foo&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;x.y.Foo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;bar&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;bar&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;baz&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;baz&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;foo@bar.com&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; c命名空间格式 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;foo&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;x.y.Foo&quot;&lt;/span&gt;&lt;span&gt; c:bar-ref&lt;/span&gt;&lt;span&gt;=&quot;bar&quot;&lt;/span&gt;&lt;span&gt; c:baz-ref&lt;/span&gt;&lt;span&gt;=&quot;baz&quot;&lt;/span&gt;&lt;span&gt; c:email&lt;/span&gt;&lt;span&gt;=&quot;foo@bar.com&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 还可以使用c命名空间的参数索引格式 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;foo&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;x.y.Foo&quot;&lt;/span&gt;&lt;span&gt; c:_0-ref&lt;/span&gt;&lt;span&gt;=&quot;bar&quot;&lt;/span&gt;&lt;span&gt; c:_1-ref&lt;/span&gt;&lt;span&gt;=&quot;baz&quot;&lt;/span&gt;&lt;span&gt; c:_2&lt;/span&gt;&lt;span&gt;=&quot;foo@bar.com&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;spel表达式方式&quot;&gt;SpEL表达式方式&lt;/h3&gt;
&lt;p&gt;　　Spring 表达式语言 （Spring Expression Language），打算整理完整的一篇&lt;/p&gt;

&lt;h2&gt;集合类型属性注入&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;collectionBean&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.roy.spring.demo5.CollectionBean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数组类型 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;arrs&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;数组一&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;数组二&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注入list集合类型 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;list一&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;list二&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注入set集合类型&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;set&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;set一&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;set二&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注入Map集合 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;map&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;aaa&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;111&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;bbb&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;222&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;ccc&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;333&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;             
&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注入property集合 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;properties&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;prop &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;key1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;value1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;prop &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;key2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;value2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;prop &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;key3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;value3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 22 Jan 2019 15:50:00 +0000</pubDate>
<dc:creator>JYRoy</dc:creator>
<og:description>DI 依赖注入 DI（Dependency Injection）依赖注入，说简单一点就将类里面的属性在创建类的过程中给属性赋值，即将对象依赖属性（简单值，集合，对象）通过配置设值给该对象。 属性注入的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jyroy/p/10304533.html</dc:identifier>
</item>
<item>
<title>窗口看门狗 - 再也不喝水了</title>
<link>http://www.cnblogs.com/Socthinking/p/10306759.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Socthinking/p/10306759.html</guid>
<description>&lt;p&gt;&amp;lt;!doctype html&amp;gt;窗口看门狗&lt;/p&gt;
&lt;div id=&quot;write&quot; class=&quot;is-node&quot; readability=&quot;10&quot;&gt;

&lt;h2&gt;STM32F1窗口看门狗简介&lt;/h2&gt;
&lt;p&gt;窗口关门狗（WWDG）通常被用来监测由外部干扰或不可预见的逻辑条件造成的应用程序背离正常运行而产生的软件故障。在递减计数器（WWDG-&amp;gt;CR）的第六位变成零时会产生一个MCU复位。在递减计数器到达窗口配置寄存器（WWDG-&amp;gt;CFR）数值之前，如果七位递减计数器的数值被刷新，那么也会产生一个MCU复位。这表明递减计数器需要在一个窗口中被刷新。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;1548166754584&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;图例&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;寄存器介绍&lt;/h2&gt;
&lt;ol start=&quot;&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;控制寄存器&lt;/strong&gt;（WWDG_CR）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;32位寄存器，低八位有效&lt;/li&gt;
&lt;li&gt;第七位（WDGA）：看门狗激活位，软件置1有效，硬件清零&lt;/li&gt;
&lt;li&gt;低7位：存储看门狗计数器值，每个周期（ 4096 ×2^ WDGTB）减一&lt;/li&gt;
&lt;li&gt;从0x40变到0x3f时，MCU复位&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;配置寄存器&lt;/strong&gt;（WWDG_CFR）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;32位寄存器，低10位有效&lt;/li&gt;
&lt;li&gt;位9（EWI）：提前唤醒中断，此位置一，计数器达0x40时产生中断，硬件复位消除&lt;/li&gt;
&lt;li&gt;位8:7：时基，用于修改预分频器数值&lt;/li&gt;
&lt;li&gt;6:0：下窗口值&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;状态寄存器&lt;/strong&gt;（WWDG_SR）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;32位寄存器，位0有效&lt;/li&gt;
&lt;li&gt;计数器到达0x40时，此位由硬件置一，由软件清零&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;操作流程&lt;/h2&gt;
&lt;ol start=&quot;&quot;&gt;&lt;li&gt;使能WWDG时钟，32khz&lt;/li&gt;
&lt;li&gt;设置WWDG_CFR和WWDG_CR&lt;/li&gt;
&lt;li&gt;开中断&lt;/li&gt;
&lt;li&gt;写中断服务函数，一定要在一个周期内完成喂狗&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;
</description>
<pubDate>Tue, 22 Jan 2019 15:39:00 +0000</pubDate>
<dc:creator>再也不喝水了</dc:creator>
<og:description>&lt;!doctype html&gt;窗口看门狗 窗口看门狗 STM32F1窗口看门狗简介 窗口关门狗（WWDG）通常被用来监测由外部干扰或不可预见的逻辑条件造成的应用程序背离正常运行而产生的软件</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Socthinking/p/10306759.html</dc:identifier>
</item>
<item>
<title>elastic-job集成到springboot教程，和它的一个异常处理办法:Sharding item parameters '1' format error, should be int=xx,int=xx - BigOcean</title>
<link>http://www.cnblogs.com/MyOceansWeb/p/10306702.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MyOceansWeb/p/10306702.html</guid>
<description>&lt;p&gt;先说这个Sharding item parameters '1' format error, should be int=xx,int=xx异常吧，这是在做动态添加调度任务的时候出现的，网上找了一会没有搜到任何信息，最后发现，是添加任务这个方法里有一个漏洞。&lt;/p&gt;
&lt;p&gt;这个源码出自：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; ShardingItem parse(&lt;span&gt;final&lt;/span&gt; String shardingItemParameter, &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String originalShardingItemParameters) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         String[] pair =&lt;span&gt; shardingItemParameter.trim().split(KEY_VALUE_DELIMITER);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (2 !=&lt;span&gt; pair.length) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; JobConfigurationException(&quot;Sharding item parameters '%s' format error, should be int=xx,int=xx&quot;&lt;span&gt;, originalShardingItemParameters);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ShardingItem(Integer.parseInt(pair[0].trim()), pair[1&lt;span&gt;].trim());
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt; (&lt;span&gt;final&lt;/span&gt;&lt;span&gt; NumberFormatException ex) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; JobConfigurationException(&quot;Sharding item parameters key '%s' is not an integer.&quot;, pair[0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;修改前代码（报这个异常的代码）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; addJobScheduler(&lt;span&gt;final&lt;/span&gt; Class&amp;lt;? &lt;span&gt;extends&lt;/span&gt; SimpleJob&amp;gt;&lt;span&gt; jobClass,
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;       &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String cron,
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;       &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; shardingTotalCount,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;       &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String shardingItemParameters) {
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     JobCoreConfiguration coreConfig =&lt;span&gt; JobCoreConfiguration.newBuilder(jobClass.getName(), cron, shardingTotalCount).shardingItemParameters(shardingItemParameters).build();
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     SimpleJobConfiguration simpleJobConfig = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleJobConfiguration(coreConfig, jobClass.getCanonicalName());
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     JobScheduler jobScheduler = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JobScheduler(regCenter, LiteJobConfiguration.newBuilder(simpleJobConfig).build());
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;    jobScheduler.init();
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;   }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;是不是发现不管你怎么设置，都给你报这个，你明明传的就不是1这个参数，还是给你报这个，问题出在build()那里，需要overwrite。修改后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; addJobScheduler(&lt;span&gt;final&lt;/span&gt; Class&amp;lt;? &lt;span&gt;extends&lt;/span&gt; SimpleJob&amp;gt;&lt;span&gt; jobClass,
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;       &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String cron,
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;       &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; shardingTotalCount,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;       &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String shardingItemParameters) {
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     JobCoreConfiguration coreConfig =&lt;span&gt; JobCoreConfiguration.newBuilder(jobClass.getName(), cron, shardingTotalCount).shardingItemParameters(shardingItemParameters).build();
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     SimpleJobConfiguration simpleJobConfig = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleJobConfiguration(coreConfig, jobClass.getCanonicalName());
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     JobScheduler jobScheduler = &lt;span&gt;new&lt;/span&gt; JobScheduler(regCenter, LiteJobConfiguration.newBuilder(simpleJobConfig)&lt;span&gt;.overwrite(true&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;.build());
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;    jobScheduler.init();
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;   }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;红色代码为修改后加的代码。&lt;/p&gt;

&lt;p&gt;先说说这个dangdang的elastic-job，它是一个分布式任务调度插件。今天我遇到的问题就是，有部分任务，在多节点环境中，不需要每个节点执行，比如只需要一个节点（确切地说就是作业分片总数=1）上运行的任务，这时候elastic-job就是个不错的选择，它可以很灵活的配置作业分片总数等。它的官方文档，链接指向配置说明：http://elasticjob.io/docs/elastic-job-lite/02-guide/config-manual/&lt;/p&gt;

&lt;p&gt;那么spring boot中如何集成进它。需要的一个前提条件是zookeeper服务，这个一般项目里都会用到，你只需要连就好了，如果dev或者你们还没用上，可以找个教程安装一下。链接指向&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/huangjianping/p/8012580.html&quot;&gt;在 CentOS7 上安装 Zookeeper服务&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;然后.propertis配置文件（yml类同）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;regCenter.serverList=10.0.30.140:2181
regCenter.namespace=elastic-job

simpleJob.cron=0/5 * * * * ?  
# 作业分片总数,设为1只在一个节点执行
simpleJob.shardingTotalCount=1
simpleJob.shardingItemParameters=0=A,1=B,2=C&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，pom中需要引入elastic-job：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;elastic-job-common-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.dangdang&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${elastic-job.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;elastic-job-lite-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.dangdang&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${elastic-job.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;elastic-job-lite-spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.dangdang&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${elastic-job.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.curator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;curator-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${curator.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本示例代码用到的版本是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;elastic-job.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.1.5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;elastic-job.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;curator.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.10.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;curator.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;连接zookeeper注册中心：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.dangdang.ddframe.job.reg.zookeeper.ZookeeperConfiguration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Value;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; binhy
 *@date 2019-1-22
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Configuration
@ConditionalOnExpression(&lt;/span&gt;&quot;'${regCenter.serverList}'.length() &amp;gt; 0&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RegistryCenterConfig {

  @Bean(initMethod &lt;/span&gt;= &quot;init&quot;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ZookeeperRegistryCenter regCenter(@Value(&quot;${regCenter.serverList}&quot;) &lt;span&gt;final&lt;/span&gt; String serverList, @Value(&quot;${regCenter.namespace}&quot;) &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String namespace) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ZookeeperRegistryCenter(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ZookeeperConfiguration(serverList, namespace));
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后做一个任务信息持久化：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.annotation.Resource;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.sql.DataSource;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.dangdang.ddframe.job.event.JobEventConfiguration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.dangdang.ddframe.job.event.rdb.JobEventRdbConfiguration;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; binhy
 *@date 2019-1-22
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Configuration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JobEventConfig {

  @Resource
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; DataSource dataSource;

  @Bean
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; JobEventConfiguration jobEventConfiguration() {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JobEventRdbConfiguration(dataSource);
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当你最后运行后会发现你的库里多了两张表job_execution_log和job_status_trace_log他们会详细的记录你的任务执行信息，包括执行ip，开始结束时间等，还是非常不错的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1024653/201901/1024653-20190122231440996-1131109232.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;然后需要一个任务管理类，初始化一些任务，我这里把动态添加任务的方法也写在了这里。因为这种形式需要你一个任务写一个配置和类去实现。动态添加会省很多事。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.goopal.exdata.dangdang.DemoJob;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.annotation.Resource;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Value;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.ApplicationArguments;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.dangdang.ddframe.job.api.simple.SimpleJob;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.dangdang.ddframe.job.config.JobCoreConfiguration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.dangdang.ddframe.job.config.simple.SimpleJobConfiguration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.dangdang.ddframe.job.event.JobEventConfiguration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.dangdang.ddframe.job.lite.api.JobScheduler;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.dangdang.ddframe.job.lite.config.LiteJobConfiguration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.dangdang.ddframe.job.lite.spring.api.SpringJobScheduler;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; binhy
 * @date 2019-1-22
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Configuration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SimpleJobConfig {

  @Resource
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ZookeeperRegistryCenter regCenter;

  @Resource
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; JobEventConfiguration jobEventConfiguration;

  @Bean
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; SimpleJob simpleJob() {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DemoJob();
  }

  @Bean(initMethod &lt;/span&gt;= &quot;init&quot;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; JobScheduler simpleJobScheduler(&lt;span&gt;final&lt;/span&gt; SimpleJob simpleJob, @Value(&quot;${simpleJob.cron}&quot;) &lt;span&gt;final&lt;/span&gt; String cron, @Value(&quot;${simpleJob.shardingTotalCount}&quot;) &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; shardingTotalCount,
      @Value(&lt;/span&gt;&quot;${simpleJob.shardingItemParameters}&quot;) &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String shardingItemParameters) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SpringJobScheduler(simpleJob, regCenter, getLiteJobConfiguration(simpleJob.getClass(), cron, shardingTotalCount, shardingItemParameters), jobEventConfiguration);
  }

  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; LiteJobConfiguration getLiteJobConfiguration(&lt;span&gt;final&lt;/span&gt; Class&amp;lt;? &lt;span&gt;extends&lt;/span&gt; SimpleJob&amp;gt; jobClass, &lt;span&gt;final&lt;/span&gt; String cron, &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; shardingTotalCount, &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String shardingItemParameters) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; LiteJobConfiguration.newBuilder(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleJobConfiguration(JobCoreConfiguration.newBuilder(
        jobClass.getName(), cron, shardingTotalCount).shardingItemParameters(shardingItemParameters).build(), jobClass.getCanonicalName())).overwrite(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;).build();
  }

  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * 动态添加
   * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; jobClass
   * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; cron
   * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; shardingTotalCount
   * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; shardingItemParameters
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; addJobScheduler(&lt;span&gt;final&lt;/span&gt; Class&amp;lt;? &lt;span&gt;extends&lt;/span&gt; SimpleJob&amp;gt;&lt;span&gt; jobClass,
      &lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt; String cron,
      &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; shardingTotalCount,
      &lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt; String shardingItemParameters) {
    JobCoreConfiguration coreConfig &lt;/span&gt;=&lt;span&gt; JobCoreConfiguration.newBuilder(jobClass.getName(), cron, shardingTotalCount).shardingItemParameters(shardingItemParameters).build();
    SimpleJobConfiguration simpleJobConfig &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleJobConfiguration(coreConfig, jobClass.getCanonicalName());
    JobScheduler jobScheduler &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; JobScheduler(regCenter, LiteJobConfiguration.newBuilder(simpleJobConfig).overwrite(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;).build());
    jobScheduler.init();
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里，你在配置文件中配置的定时任务就已经可以在多节点环境中，仅在1个节点执行了。需要添加更多的不同cron的任务，只需要在代码业务逻辑处调用即可。如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; @Autowired
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;  SimpleJobConfig simpleJobConfig;
  @Override
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; run(ApplicationArguments args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {

    simpleJobConfig.addJobScheduler(AnalysisData.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;,&quot;0/3 * * * * ?&quot;,3,&quot;0=A,1=B,2=C&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;0=A,1=B,2=C&lt;/span&gt;
  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果有帮助到你，给我点个赞哦~&lt;/p&gt;

</description>
<pubDate>Tue, 22 Jan 2019 15:21:00 +0000</pubDate>
<dc:creator>BigOcean</dc:creator>
<og:description>先说这个Sharding item parameters '1' format error, should be int=xx,int=xx异常吧，这是在做动态添加调度任务的时候出现的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MyOceansWeb/p/10306702.html</dc:identifier>
</item>
<item>
<title>MySQL内存使用查看方式 - xuanm</title>
<link>http://www.cnblogs.com/grasp/p/10306697.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/grasp/p/10306697.html</guid>
<description>&lt;p&gt;使用版本：MySQL 5.7&lt;/p&gt;
&lt;p&gt;在performance_schema有如下表记录内存使用情况&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; show tables like &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%memory%summary%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;+-------------------------------------------------+
| Tables_in_performance_schema (%memory%summary%) |
+-------------------------------------------------+
| memory_summary_by_account_by_event_name         |
| memory_summary_by_host_by_event_name            |
| memory_summary_by_thread_by_event_name          |
| memory_summary_by_user_by_event_name            |
| memory_summary_global_by_event_name             |
+-------------------------------------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;每个内存统计表都有如下统计列： &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;* COUNT_ALLOC，COUNT_FREE：对内存分配和释放内存函数的调用总次数 &lt;/p&gt;
&lt;p&gt;* SUM_NUMBER_OF_BYTES_ALLOC，SUM_NUMBER_OF_BYTES_FREE：已分配和已释放的内存块的总字节大小 &lt;/p&gt;
&lt;p&gt;* CURRENT_COUNT_USED：这是一个便捷列，等于COUNT_ALLOC - COUNT_FREE &lt;/p&gt;
&lt;p&gt;* CURRENT_NUMBER_OF_BYTES_USED：当前已分配的内存块但未释放的统计大小。这是一个便捷列，等于SUM_NUMBER_OF_BYTES_ALLOC - SUM_NUMBER_OF_BYTES_FREE &lt;/p&gt;
&lt;p&gt;* LOW_COUNT_USED，HIGH_COUNT_USED：对应CURRENT_COUNT_USED列的低和高水位标记 &lt;/p&gt;
&lt;p&gt;* LOW_NUMBER_OF_BYTES_USED，HIGH_NUMBER_OF_BYTES_USED：对应CURRENT_NUMBER_OF_BYTES_USED列的低和高水位标记&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存统计表允许使用TRUNCATE TABLE语句。使用truncate语句时有如下行为： &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;* 通常，truncate操作会重置统计信息的基准数据（即清空之前的数据），但不会修改当前server的内存分配等状态。也就是说，truncate内存统计表不会释放已分配内存 &lt;/p&gt;
&lt;p&gt; * 将COUNT_ALLOC和COUNT_FREE列重置，并重新开始计数（等于内存统计信息以重置后的数值作为基准数据）&lt;/p&gt;
&lt;p&gt;* SUM_NUMBER_OF_BYTES_ALLOC和SUM_NUMBER_OF_BYTES_FREE列重置与COUNT_ALLOC和COUNT_FREE列重置类似 &lt;/p&gt;
&lt;p&gt;* LOW_COUNT_USED和HIGH_COUNT_USED将重置为CURRENT_COUNT_USED列值 &lt;/p&gt;
&lt;p&gt;*  LOW_NUMBER_OF_BYTES_USED和HIGH_NUMBER_OF_BYTES_USED将重置为CURRENT_NUMBER_OF_BYTES_USED列值 &lt;/p&gt;
&lt;p&gt;* 此外，按照帐户，主机，用户或线程分类统计的内存统计表或memory_summary_global_by_event_name表，如果在对其依赖的accounts、hosts、users表执行truncate时，会隐式对这些内存统计表执行truncate语句&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;简单来说，就是可以根据用户、主机、线程、账号、全局的维度对内存进行监控。同时库sys&lt;span lang=&quot;ZH-CN&quot;&gt;也就这些表做了进一步的格式化，可以使得用户非常容易的观察到每个对象的内存开销：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; &lt;span&gt;select&lt;/span&gt; event_name,current_alloc from sys.memory_global_by_current_bytes limit &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;+-----------------------------------------------------------------------------+---------------+
| event_name                                                                  | current_alloc |
+-----------------------------------------------------------------------------+---------------+
| memory/performance_schema/events_statements_history_long                    | &lt;span&gt;13.66&lt;/span&gt; MiB     |
| memory/performance_schema/events_statements_history_long.sqltext            | &lt;span&gt;9.77&lt;/span&gt; MiB      |
| memory/performance_schema/events_statements_history_long.tokens             | &lt;span&gt;9.77&lt;/span&gt; MiB      |
| memory/performance_schema/events_statements_summary_by_digest.tokens        | &lt;span&gt;9.77&lt;/span&gt; MiB      |
| memory/performance_schema/table_handles                                     | &lt;span&gt;9.06&lt;/span&gt; MiB      |
| memory/performance_schema/events_statements_summary_by_thread_by_event_name | &lt;span&gt;8.67&lt;/span&gt; MiB      |
| memory/sql/String::value                                                    | &lt;span&gt;6.02&lt;/span&gt; MiB      |
| memory/performance_schema/memory_summary_by_thread_by_event_name            | &lt;span&gt;5.62&lt;/span&gt; MiB      |
| memory/performance_schema/events_statements_summary_by_digest               | &lt;span&gt;4.88&lt;/span&gt; MiB      |
| memory/sql/TABLE                                                            | &lt;span&gt;4.35&lt;/span&gt; MiB      |
+-----------------------------------------------------------------------------+---------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;默认情况下performance_schema&lt;span lang=&quot;ZH-CN&quot;&gt;只对performance_schema&lt;span lang=&quot;ZH-CN&quot;&gt;进行了内存开销的统计。根据你的MySQL安装代码区域可能包括performance_schema、sql、client、innodb、myisam、csv、memory、blackhole、archive、partition和其他。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;查看innodb相关的内存监控是否开启，默认不开启&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; SELECT *&lt;span&gt; FROM performance_schema.setup_instruments
    &lt;/span&gt;-&amp;gt; WHERE NAME LIKE &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%memory%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
+--------------------------------------------------------------------------------+---------+-------+
| NAME                                                                           | ENABLED | TIMED |
+--------------------------------------------------------------------------------+---------+-------+
| memory/performance_schema/mutex_instances                                      | YES     | NO    |
| memory/performance_schema/rwlock_instances                                     | YES     | NO    |
| memory/performance_schema/cond_instances                                       | YES     | NO    |
| memory/performance_schema/file_instances                                       | YES     | NO    |
| memory/performance_schema/socket_instances                                     | YES     | NO    |
| memory/performance_schema/metadata_locks                                       | YES     | NO    |
| memory/performance_schema/file_handle                                          | YES     | NO    |
| memory/performance_schema/accounts                                             | YES     | NO    |
| memory/performance_schema/events_waits_summary_by_account_by_event_name        | YES     | NO    |
| memory/performance_schema/events_stages_summary_by_account_by_event_name       | YES     | NO    |
| memory/performance_schema/events_statements_summary_by_account_by_event_name   | YES     | NO    |
| memory/performance_schema/events_transactions_summary_by_account_by_event_name | YES     | NO    |
| memory/performance_schema/memory_summary_by_account_by_event_name              | YES     | NO    |
| memory/performance_schema/events_stages_summary_global_by_event_name           | YES     | NO    |
| memory/performance_schema/events_statements_summary_global_by_event_name       | YES     | NO    |
| memory/performance_schema/memory_summary_global_by_event_name                  | YES     | NO    |
| memory/performance_schema/hosts                                                | YES     | NO    |
| memory/performance_schema/events_waits_summary_by_host_by_event_name           | YES     | NO    |
| memory/performance_schema/events_stages_summary_by_host_by_event_name          | YES     | NO    |
| memory/performance_schema/events_statements_summary_by_host_by_event_name      | YES     | NO    |
| memory/performance_schema/events_transactions_summary_by_host_by_event_name    | YES     | NO    |
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过条件缩小范围：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; SELECT *&lt;span&gt; FROM performance_schema.setup_instruments
       WHERE NAME LIKE &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%memory/innodb%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;+-------------------------------------------+---------+-------+
| NAME                                      | ENABLED | TIMED |
+-------------------------------------------+---------+-------+
| memory/innodb/adaptive hash index         | NO      | NO    |
| memory/innodb/buf_buf_pool                | NO      | NO    |
| memory/innodb/dict_stats_bg_recalc_pool_t | NO      | NO    |
| memory/innodb/dict_stats_index_map_t      | NO      | NO    |
| memory/innodb/dict_stats_n_diff_on_level  | NO      | NO    |
| memory/innodb/other                       | NO      | NO    |
| memory/innodb/row_log_buf                 | NO      | NO    |
| memory/innodb/row_merge_sort              | NO      | NO    |
| memory/innodb/std                         | NO      | NO    |
| memory/innodb/trx_sys_t::rw_trx_ids       | NO      | NO    |
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对所有可能的对象进行内存监控。因此，还需要做下面的设置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; update performance_schema.setup_instruments set enabled = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; where name like &lt;span&gt;'&lt;/span&gt;&lt;span&gt;memory%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
Query OK, &lt;/span&gt;&lt;span&gt;306&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)
Rows matched: &lt;/span&gt;&lt;span&gt;376&lt;/span&gt;  Changed: &lt;span&gt;306&lt;/span&gt;  Warnings: &lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这种在线打开内存统计的方法仅对之后新增的内存对象有效：&lt;/p&gt;
&lt;p&gt;如想要对全局生命周期中的对象进行内存统计，必须在配置文件中进行设置，然后重启：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[mysqld]
performance&lt;/span&gt;-schema-instrument=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;memory/%=COUNTED&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以使用sys库下的memory_global_by_current_bytes表来查询相同的底层数据，该模式表显示了全局服务器内当前内存使用情况，按分配类型进行细分。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; SELECT *&lt;span&gt; FROM sys.memory_global_by_current_bytes
       WHERE event_name LIKE &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;memory/innodb/buf_buf_pool&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\G
&lt;/span&gt;*************************** &lt;span&gt;1&lt;/span&gt;. row ***************************&lt;span&gt;
       event_name: memory&lt;/span&gt;/innodb/&lt;span&gt;buf_buf_pool
    current_count: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    current_alloc: &lt;/span&gt;&lt;span&gt;131.06&lt;/span&gt;&lt;span&gt; MiB
current_avg_alloc: &lt;/span&gt;&lt;span&gt;131.06&lt;/span&gt;&lt;span&gt; MiB
       high_count: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
       high_alloc: &lt;/span&gt;&lt;span&gt;131.06&lt;/span&gt;&lt;span&gt; MiB
   high_avg_alloc: &lt;/span&gt;&lt;span&gt;131.06&lt;/span&gt; MiB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此sys模式查询通过current_alloc()代码区域聚合当前分配的内存：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; SELECT SUBSTRING_INDEX(event_name,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;) AS
       code_area, sys.format_bytes(SUM(current_alloc))
       AS current_alloc
       FROM sys.x$memory_global_by_current_bytes
       GROUP BY SUBSTRING_INDEX(event_name,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
       ORDER BY SUM(current_alloc) DESC;
&lt;/span&gt;+---------------------------+---------------+
| code_area                 | current_alloc |
+---------------------------+---------------+
| memory/innodb             | &lt;span&gt;843.24&lt;/span&gt; MiB    |
| memory/performance_schema | &lt;span&gt;81.29&lt;/span&gt; MiB     |
| memory/mysys              | &lt;span&gt;8.20&lt;/span&gt; MiB      |
| memory/sql                | &lt;span&gt;2.47&lt;/span&gt; MiB      |
| memory/memory             | &lt;span&gt;174.01&lt;/span&gt; KiB    |
| memory/myisam             | &lt;span&gt;46.53&lt;/span&gt; KiB     |
| memory/blackhole          | &lt;span&gt;512&lt;/span&gt; bytes     |
| memory/federated          | &lt;span&gt;512&lt;/span&gt; bytes     |
| memory/csv                | &lt;span&gt;512&lt;/span&gt; bytes     |
| memory/vio                | &lt;span&gt;496&lt;/span&gt; bytes     |
+---------------------------+---------------+
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 22 Jan 2019 15:20:00 +0000</pubDate>
<dc:creator>xuanm</dc:creator>
<og:description>使用版本：MySQL 5.7 在performance_schema有如下表记录内存使用情况 每个内存统计表都有如下统计列： * COUNT_ALLOC，COUNT_FREE：对内存分配和释放内存函数</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/grasp/p/10306697.html</dc:identifier>
</item>
<item>
<title>富文本编辑器Quill(二)上传图片与视频 - 再见紫罗兰</title>
<link>http://www.cnblogs.com/linxiyue/p/10305047.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linxiyue/p/10305047.html</guid>
<description>&lt;p&gt;image与video在Quill formats中属于Embeds，要在富文本中插入图片或者视频需要使用&lt;a href=&quot;https://quilljs.com/docs/api/#insertembed&quot; target=&quot;_blank&quot;&gt;insertEmbed&lt;/a&gt; api。&lt;/p&gt;
&lt;h3 id=&quot;insertembed&quot;&gt;insertEmbed&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
insertEmbed(index: Number, type: String, value: any, source: String = 'api'): Delta
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;插入图片需要位置，内容类型以及图片的url：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
quill.insertEmbed(10, 'image', 'https://quilljs.com/images/cloud.png')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取位置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
const range = quill.getSelection();
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;上传图片&lt;/h3&gt;
&lt;p&gt;首先toolbar中添加image，还需要一个隐藏input元素用来上传图片：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;div id=&quot;toolbar&quot;&amp;gt;
      &amp;lt;span class=&quot;ql-formats&quot;&amp;gt;
        &amp;lt;button class=&quot;ql-image&quot;&amp;gt;&amp;lt;/button&amp;gt;
        &amp;lt;button class=&quot;ql-video&quot;&amp;gt;&amp;lt;/button&amp;gt;
      &amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div id=&quot;editor&quot;&amp;gt;
      &amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Some initial &amp;lt;strong&amp;gt;bold&amp;lt;/strong&amp;gt; text&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;input id=&quot;uploadImg&quot; type=&quot;file&quot; style=&quot;display:none&quot; accept=&quot;image/png, image/jpeg, image/gif&quot; @change=&quot;uploadImage&quot;&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为image添加handler，点击时上传图片：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
this.quill.getModule(&quot;toolbar&quot;).addHandler(&quot;image&quot;, this.uploadImageHandler)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;handler:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
    uploadImageHandler () {
      const input = document.querySelector('#uploadImg')
      input.value = ''
      input.click()
    },
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为input元素添加onchange事件，获取上传图片，上传服务器，获取图片地址，将地址插入到编辑器中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
  async uploadImage (event) {
      const form = new FormData()
      form.append('upload_file', event.target.files[0])
      const url = await $.ajax(...)  #上传图片 获取地址
      const addImageRange = this.quill.getSelection()
      const newRange = 0 + (addImageRange !== null ? addImageRange.index : 0)
      this.quill.insertEmbed(newRange, 'image', url)
      this.quill.setSelection(1 + newRange)
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　全部代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;48&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;div id=&quot;toolbar&quot;&amp;gt;
      &amp;lt;span class=&quot;ql-formats&quot;&amp;gt;
        &amp;lt;button class=&quot;ql-image&quot;&amp;gt;&amp;lt;/button&amp;gt;
        &amp;lt;button class=&quot;ql-video&quot;&amp;gt;&amp;lt;/button&amp;gt;
      &amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div id=&quot;editor&quot;&amp;gt;
      &amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Some initial &amp;lt;strong&amp;gt;bold&amp;lt;/strong&amp;gt; text&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;input id=&quot;uploadImg&quot; type=&quot;file&quot; style=&quot;display:none&quot; accept=&quot;image/png, image/jpeg, image/gif&quot; @change=&quot;uploadImage&quot;&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import Quill from 'quill'

export default {
  name: &quot;QuillEditor&quot;,
  mounted () {
    this.initQuill()
  },
  beforeDestroy () {
    this.quill = null
    delete this.quill
  },
  methods: {
    initQuill () {
      const quill = new Quill('#editor', {
        theme: 'snow',
        modules: {
          toolbar: '#toolbar'
        }
      })
      this.quill = quill
      this.quill.getModule(&quot;toolbar&quot;).addHandler(&quot;image&quot;, this.uploadImageHandler)
    },
    uploadImageHandler () {
      const input = document.querySelector('#uploadImg')
      input.value = ''
      input.click()
    },
    async uploadImage (event) {
      const form = new FormData()
      form.append('upload_file', event.target.files[0])
      const url = await $.ajax(...)
      const addImageRange = this.quill.getSelection()
      const newRange = 0 + (addImageRange !== null ? addImageRange.index : 0)
      this.quill.insertEmbed(newRange, 'image', url)
      this.quill.setSelection(1 + newRange)
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上传视频做些少许修改就可以了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;lt;input id=&quot;uploadVideo&quot; type=&quot;file&quot; style=&quot;display:none&quot; accept=&quot;video/*&quot; @change=&quot;uploadVideo&quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
this.quill.getModule(&quot;toolbar&quot;).addHandler(&quot;video&quot;, this.uploadVideoHandler)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
uploadVideoHandler () {...}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
async uploadVideo (event) {...}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;定制Video&lt;/h3&gt;
&lt;p&gt;默认的video上传会存在一个问题，上传后video是放在iframe中的，一般情况下是没有问题的，但在小程序中使用h5页面时，iframe中的域名需要添加到小程序业务域名中，否则会禁止访问。&lt;/p&gt;
&lt;p&gt;更好的解决方法是简单的添加一个video元素，而不是iframe，我们需要&lt;a href=&quot;https://quilljs.com/guides/cloning-medium-with-parchment/#videos&quot; target=&quot;_blank&quot;&gt;定制&lt;/a&gt;一个Video Embed。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
const BlockEmbed = Quill.import('blots/block/embed')
class VideoBlot extends BlockEmbed {
  static create (value) {
    let node = super.create()
    node.setAttribute('src', value.url)
    node.setAttribute('controls', value.controls)
    node.setAttribute('width', value.width)
    node.setAttribute('height', value.height)
    node.setAttribute('webkit-playsinline', true)
    node.setAttribute('playsinline', true)
    node.setAttribute('x5-playsinline', true)
    return node;
  }

  static value (node) {
    return {
      url: node.getAttribute('src'),
      controls: node.getAttribute('controls'),
      width: node.getAttribute('width'),
      height: node.getAttribute('height')
    };
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注册：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
VideoBlot.blotName = 'simpleVideo'
VideoBlot.tagName = 'video'
Quill.register(VideoBlot)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;插入Embed：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
      this.quill.insertEmbed(newRange, 'simpleVideo', {
        url,
        controls: 'controls',
        width: '100%',
        height: '100%'
      })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加效果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;lt;video src=&quot;...mp4&quot; controls=&quot;controls&quot; width=&quot;100%&quot; height=&quot;100%&quot; webkit-playsinline=&quot;true&quot; playsinline=&quot;true&quot; x5-playsinline=&quot;true&quot;&amp;gt;&amp;lt;/video&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 22 Jan 2019 15:19:00 +0000</pubDate>
<dc:creator>再见紫罗兰</dc:creator>
<og:description>image与video在Quill formats中属于Embeds，要在富文本中插入图片或者视频需要使用insertEmbed api。 insertEmbed 插入图片需要位置，内容类型以及图片的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/linxiyue/p/10305047.html</dc:identifier>
</item>
<item>
<title>简述组件化解决方案CTMediator与MGJRouter的主要思想 - 滴水微澜</title>
<link>http://www.cnblogs.com/zhou--fei/p/10306657.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhou--fei/p/10306657.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;简述CTMediator&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CTMediator按照功能的结构来讲，使用时需要实现CTMediator的个三部分。&lt;/p&gt;
&lt;p&gt;1.CTMediator类：承担总枢纽，总调度的责任&lt;/p&gt;
&lt;p&gt;2.Target_(ModuleName)类：承担组件对外暴漏接口功能，组件要提供什么服务，主要在它的接口声明上进行体现&lt;/p&gt;
&lt;p&gt;3.CTMediator+(ModuleName)分类：主要供客户端使用，里面声明了可以调用的组件接口。&lt;/p&gt;
&lt;p&gt;下面详细讲解&lt;/p&gt;
&lt;div readability=&quot;14&quot;&gt;

&lt;p&gt;&lt;strong&gt;Part1: CTMediator核心功能实现：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CTMediator主要采用target-action的方式实现组件间解耦合，本身功能完全独立，不依赖任何组件模块。&lt;/p&gt;
&lt;p&gt;主要结构如下：&lt;/p&gt;
&lt;p&gt;CTMediator作为中介者，是各个组件的进行信息通讯的中枢。&lt;/p&gt;
&lt;p&gt;主要实现方案分两种情况：&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;1.首先利用runtime进行反射，将类字符串和方法字符串转换成类和SEL方法选择子：&lt;/p&gt;
&lt;div readability=&quot;12&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
SEL action = NSSelectorFromString(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;Action_response:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
NSObject &lt;/span&gt;*target = [[NSClassFromString(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;Target_NoTargetAction&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) alloc] init];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后调用cocoa touch框架提供的方法直接调用&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div readability=&quot;13&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[target performSelector:action withObject:&lt;span&gt;params&lt;/span&gt;];
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2.或者使用cocoa touch提供的命令模式，将消息和消息接受者封装成一个对象，进行执行。&lt;/p&gt;
&lt;p&gt;首先，利用target-action生成方法签名&lt;/p&gt;
&lt;p&gt;然后，创建NSInvocation对象，进行执行invoke。并拿到返回的结果。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;p&gt;利用方法签名，NSInvocation实现&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;20&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
NSMethodSignature* methodSig =&lt;span&gt; [target methodSignatureForSelector:action];
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(methodSig ==&lt;span&gt; nil) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil;
}
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;* retType =&lt;span&gt; [methodSig methodReturnType];
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (strcmp(retType, @encode(&lt;span&gt;void&lt;/span&gt;)) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
    NSInvocation &lt;/span&gt;*invocation =&lt;span&gt; [NSInvocation invocationWithMethodSignature:methodSig];
    [invocation setArgument:&lt;/span&gt;&amp;amp;&lt;span&gt;params&lt;/span&gt; atIndex:&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
    [invocation setSelector:action];
    [invocation setTarget:target];
    [invocation invoke];
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Part2: 组件对外服务接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果组件需要对外提供服务，就需要创建自己的接收动作类&lt;/p&gt;
&lt;p&gt;比如ModuleA要对外提供服务。那么就要创建一个&lt;/p&gt;
&lt;p&gt;Target_A类，然后在Target_A类的.h文件中声明对外服务的接口，并在.m文件中进行实现。&lt;/p&gt;
&lt;p&gt;注意：Target_A类是依赖组件的。它属于组件的一部分。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@interface&lt;/span&gt;&lt;span&gt; Target_Mine : NSObject
&lt;/span&gt;- (&lt;span&gt;id&lt;/span&gt;)Action_nativeFetchSportsResultVC:(NSDictionary *&lt;span&gt;)param;
&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;)Action_remoteAlertSportsResultVC:(NSDictionary *&lt;span&gt;)param;
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@implementation&lt;/span&gt;&lt;span&gt; Target_Mine
&lt;/span&gt;- (&lt;span&gt;id&lt;/span&gt;)Action_nativeFetchSportsResultVC:(NSDictionary *&lt;span&gt;)param {
    UIViewController &lt;/span&gt;*vc = [[FZMineCoordinator sharedFZMineCoordinator] targetVCWithClassName:NSStringFromClass([FZSportsResultVC &lt;span&gt;class&lt;/span&gt;&lt;span&gt;])];
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ([vc isKindOfClass:[FZSportsResultVC &lt;span&gt;class&lt;/span&gt;&lt;span&gt;]]) {
        [(FZSportsResultVC &lt;/span&gt;*)vc configContent:param[&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]];
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; vc;
}

&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;)Action_remoteAlertSportsResultVC:(NSDictionary *&lt;span&gt;)param {
    UIViewController &lt;/span&gt;*vc = [[FZMineCoordinator sharedFZMineCoordinator] targetVCWithClassName:NSStringFromClass([FZSportsResultVC &lt;span&gt;class&lt;/span&gt;&lt;span&gt;])];
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ([vc isKindOfClass:[FZSportsResultVC &lt;span&gt;class&lt;/span&gt;&lt;span&gt;]]) {
        [(FZSportsPlanVC &lt;/span&gt;*)vc configContent:param[&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]];
    }
    
    &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&amp;lt;UIApplicationDelegate&amp;gt; appDelegate = [UIApplication sharedApplication].&lt;span&gt;delegate&lt;/span&gt;&lt;span&gt;;
    UITabBarController &lt;/span&gt;*rootVC =&lt;span&gt; [[appDelegate window] rootViewController];
    [rootVC.childViewControllers[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] pushViewController:vc animated:YES];
}
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Part3: CTMediator+ModuleA组件通讯实际使用类&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;28&quot;&gt;
&lt;p&gt;为了实现完全解耦，这个类所有使用的所有参数全部是cocoa touch框架中定义的基本类型。&lt;/p&gt;
&lt;p&gt;像：NSDictionary，NSString， UIImage等。&lt;/p&gt;
&lt;p&gt;里面按照作用分，可以分为：&lt;/p&gt;
&lt;p&gt;模块名称字符串，模块本地调用方法名称字符串，模块远程调用方法名称字符串&lt;/p&gt;
&lt;p&gt;在CTMediator+ModuleA分类文件的.h文件中，定义了供其他模块使用的接口&lt;/p&gt;
&lt;p&gt;在CTMediator+ModuleA分类文件的.m文件中，实现供其他模块使用的接口，调用用CTMediator的runtime机制进行实现。&lt;/p&gt;

&lt;p&gt;CTMediator提供的方案是我认为最好的，巧妙的使用了cocoaTouch提供的反射机制，方法签名与命令模式，简单又完美的解决了组件间的解耦问题。&lt;/p&gt;
&lt;p&gt;同时因为实现是基于Object-C的特性，稳定性靠谱。&lt;/p&gt;
&lt;p&gt;在方案不同作用类分工上，简单明了。实现了从形式到实质上完全的解耦，同时提供了对外部appURL调用的支持。是非常完美的方案。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
- (IBAction)goSportsPlanDetail:(UIButton *&lt;span&gt;)sender {
    UIViewController &lt;/span&gt;*vc = [[CTMediator sharedInstance] Mediator_fetchSportsPlanVC:@{&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:[sender currentTitle]}];
    [self.navigationController pushViewController:vc animated:YES];
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;13&quot;&gt;
&lt;p&gt;CTMediator提供的方案是我认为最好的，巧妙的使用了cocoaTouch提供的反射机制，方法签名与命令模式，简单又完美的解决了组件间的解耦问题。&lt;/p&gt;
&lt;p&gt;同时因为实现是基于Object-C的特性，稳定性靠谱。&lt;/p&gt;
&lt;p&gt;在方案不同作用类分工上，简单明了。实现了从形式到实质上完全的解耦，同时提供了对外部appURL调用的支持。是非常完美的方案。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;简述MGJRouter&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div readability=&quot;21.732103321033&quot;&gt;
&lt;p&gt;蘑菇街组件化方案，采用了url-block加protocal-class的方案，url-block用于页面跳转，protocal-class用于组件跳转&lt;/p&gt;
&lt;p&gt;下面对MGJRouter的主要思路进行分析。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MGJRouter核心功能实现&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;strong&gt;Part1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MGJRouter的url-block实现方案思路为，在路由中心维护着一张路由表，url为key, block为value。&lt;/p&gt;
&lt;p&gt;注册路由表时，将key和value对应保存到路由表routes中&lt;/p&gt;
&lt;p&gt;使用时，根据URL拿到对应的block进行执行。&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;9.5&quot;&gt; 
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
- (NSMutableDictionary *&lt;span&gt;)routes
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;_routes) {
        _routes &lt;/span&gt;=&lt;span&gt; [[NSMutableDictionary alloc] init];
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _routes;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是URL对应像UIImage,NSData这样的非常规对象是很难传递的。&lt;/p&gt;
&lt;/div&gt;

&lt;div readability=&quot;11.5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Part2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;蘑菇街的protocal-class实现方案思路为：&lt;/p&gt;
&lt;p&gt;在ModuleManager内维护着一张映射表，以protocol为key,以Class为Value。&lt;/p&gt;
&lt;p&gt;注册映射表&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[ModuleManager registerClass:ClassA forProtocol:ProtocolA]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用映射表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[ModuleManager classForProtocol:ProtocolA]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：上面一一对应的关系中，类是实现了对应的协议的。所以通过协议拿到的类是可以按照protocol中声明的方法自由使用的。&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div readability=&quot;10.772271016311&quot;&gt; 
&lt;p&gt;&lt;strong&gt;注册步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.url-block方案注册：&lt;/p&gt;
&lt;p&gt;在模块对应要展示的页面中，在load方法中进行注册&lt;/p&gt;
&lt;div readability=&quot;11.732432432432&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
+ (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)load {
    [MGJRouter registerURLPattern:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;engineer://SportsPlanVC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; toObjectHandler:^&lt;span&gt;id&lt;/span&gt;(NSDictionary *&lt;span&gt;routerParameters) {
        FZSportsPlanVC &lt;/span&gt;*planVC = [FZSportsPlanVC &lt;span&gt;new&lt;/span&gt;&lt;span&gt;];
        [planVC configContent:routerParameters[&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;MGJRouterParameterUserInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;][&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]];
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; planVC;
    }];
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.protocal-class方案注册：&lt;/p&gt;
&lt;p&gt;在模块的协议实现类中进行注册：&lt;/p&gt;
&lt;div readability=&quot;10.677619893428&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
+ (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)load {
    [[FZProtocolMediator sharedFZProtocolMediator] registerProtocol:NSProtocolFromString(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;FZModuleMineProtocol&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) forClass:[FZModuleMineProtocolImplete &lt;span&gt;class&lt;/span&gt;&lt;span&gt;]];
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;使用步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据对应的单例获取方式，获取既可。&lt;/p&gt;
&lt;div readability=&quot;14.5&quot;&gt; 
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
- (IBAction)mgj_goSportsPlanDetail:(UIButton *&lt;span&gt;)sender {
    UIViewController &lt;/span&gt;*vc = [MGJRouter objectForURL:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;engineer://SportsPlanVC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; withUserInfo:@{&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:[sender currentTitle]}];
    [self.navigationController pushViewController:vc animated:YES];
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
- (IBAction)protocol_class_goSportsPlanDetail:(UIButton *&lt;span&gt;)sender {
    Class&lt;/span&gt;&amp;lt;FZModuleMineProtocol&amp;gt; &lt;span&gt;class&lt;/span&gt; = [[FZProtocolMediator sharedFZProtocolMediator] classForProtocol:NSProtocolFromString(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;FZModuleMineProtocol&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)];
    UIViewController &lt;/span&gt;*vc = [&lt;span&gt;class&lt;/span&gt;&lt;span&gt; fetchSportsPlanVC:sender.currentTitle];
    [self.navigationController pushViewController:vc animated:YES];
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MGJRouter实现方案上有些复杂，使得新手学习上有些困难，同时两张表也增加了维护成本。&lt;/p&gt;
&lt;p&gt;不过不可否认的是url-block和protocal-class都是非常巧妙的解耦方案。&lt;/p&gt;

&lt;p&gt;使用效果如下：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201901/826860-20190122230947402-801113765.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201901/826860-20190122231002649-2036408301.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 22 Jan 2019 15:13:00 +0000</pubDate>
<dc:creator>滴水微澜</dc:creator>
<og:description>简述CTMediator CTMediator按照功能的结构来讲，使用时需要实现CTMediator的个三部分。 1.CTMediator类：承担总枢纽，总调度的责任 2.Target_(Module</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhou--fei/p/10306657.html</dc:identifier>
</item>
<item>
<title>Python+Selenium爬取动态加载页面（2） - EndlessCoding</title>
<link>http://www.cnblogs.com/endlesscoding/p/10306429.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/endlesscoding/p/10306429.html</guid>
<description>&lt;blockquote readability=&quot;5.2077087794433&quot;&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 上一篇&lt;a href=&quot;https://www.cnblogs.com/endlesscoding/p/10304350.html&quot;&gt;《Python+Selenium爬取动态加载页面（1）》&lt;/a&gt;讲了基本地如何获取动态页面的数据，这里再讲一个稍微复杂一点的数据获取&lt;a href=&quot;http://xxfb.hydroinfo.gov.cn/ssIndex.html&quot;&gt;全国水雨情网&lt;/a&gt;。数据的获取过程跟人手动获取过程类似，所以也不会对服务器造成更大负荷。本文的代码见&lt;a href=&quot;https://cloud.tsinghua.edu.cn/d/fcb82707948c4d609a40/&quot;&gt;Selenium获取动态页面数据2.ipynb或Selenium获取动态页面数据2.py&lt;/a&gt;。同样在开始前需要准备环境，具体环境准备&lt;a href=&quot;https://www.cnblogs.com/endlesscoding/p/10304350.html#_label0&quot;&gt;参考上一篇&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;全国水雨情网的数据同样是动态加载出来的，在浏览中&lt;a href=&quot;http://xxfb.hydroinfo.gov.cn/ssIndex.html&quot;&gt;打开网页后http://xxfb.hydroinfo.gov.cn/ssIndex.html&lt;/a&gt;，可以看到回下图1-1所示的页面。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;&lt;img alt=&quot;fig1-1-web_analysis_fig2&quot; src=&quot;https://cloud.tsinghua.edu.cn/f/9df02d6e51a14fedbda8/?dl=1&quot;/&gt;&lt;p&gt;图1-1 全国水雨情网&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;可以看到，其中并没有显示任何的数据，如果我们需要查看数据，还需要点击一下其中的几个按钮。比如，我们需要得到其中大型水库的数据，那么需要点击&lt;code&gt;大型水库&lt;/code&gt;按钮，得到如下图1-2所示的结果。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;&lt;img alt=&quot;fig1-2-web_analysis_fig3&quot; src=&quot;https://cloud.tsinghua.edu.cn/f/441182464c2846b18fc2/?dl=1&quot;/&gt;&lt;p&gt;图1-2 全国水雨情信息-大型水库&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;得到这个页面后，就可以从其中的&lt;span&gt;HTML页面源码&lt;/span&gt;中解析数据了。&lt;/p&gt;

&lt;h2 id=&quot;打开网页&quot;&gt;2.1 打开网页&lt;/h2&gt;
&lt;p&gt;运行下面代码，会自动弹出Chrome浏览器的窗口；如果用的&lt;code&gt;browser = webdriver.PhantomJS()&lt;/code&gt;，则没有窗口出来。浏览器的窗口出来后，可以看到，它加载出我们的页面了。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import re
import pandas as pd
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC

# 打开chrome浏览器（需提前安装好chromedriver）
browser = webdriver.Chrome()
# browser = webdriver.PhantomJS()
# 这里经常出现加载超的异常，后面需要处理一下：捕获异常后，刷新浏览器
browser.get(&quot;http://xxfb.hydroinfo.gov.cn/ssIndex.html&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;查找目标数据&quot;&gt;2.2 查找目标数据&lt;/h2&gt;
&lt;p&gt;页面加载完成后，接下需要定位我们的&lt;code&gt;大型水库&lt;/code&gt;按钮，通过按浏览器的&lt;code&gt;F12&lt;/code&gt;查看源码，可以得到这个按钮的&lt;span&gt;xpath&lt;/span&gt;：&lt;span&gt;//*[@id=&quot;sscontent&quot;]/table/tbody/tr/td/table/tbody/tr[1]/td/table/tbody/tr/td[3]/a&lt;/span&gt;，如图2-1所示。&lt;/p&gt;
&lt;div&gt;&lt;img alt=&quot;fig2-1-web_xpath_select1&quot; src=&quot;https://cloud.tsinghua.edu.cn/f/03d9d19fd2384a90a748/?dl=1&quot;/&gt;&lt;p&gt;图2-1 xpath定位&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;定位到按钮后，需要再点击一下。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 找到大型水库的按钮---通过xpath
btn_water_xpath = &quot;//*[@id=\&quot;sscontent\&quot;]/table/tbody/tr/td/table/tbody/tr[1]/td/table/tbody/tr/td[3]/a&quot;
# 等待响应完成
wait = WebDriverWait(browser, 10)
wait.until(EC.presence_of_element_located((By.XPATH, btn_water_xpath)))
# 查找目标按钮
btn_water = browser.find_element_by_xpath(btn_water_xpath)
# 找到按钮后单击
btn_water.click()&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;得到页面源码&quot;&gt;2.2 得到页面源码&lt;/h2&gt;
&lt;p&gt;数据定位完成后，接下来得到页面源码。按照上面同样的方法，我们需要定位其中的数据表，并等待其加载完成，加载完成后，我们才能读取其页面源码。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 大型水库的数据表--xpath
water_table_xpath = &quot;//*[@id=\&quot;sktable\&quot;]/table/tbody&quot;
# 得到新的页面，并等待其数据表加载完成
wait = WebDriverWait(browser, 10)
wait.until(EC.presence_of_element_located(
    (By.XPATH, water_table_xpath)))

soup = BeautifulSoup(browser.page_source, 'lxml')&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;提取数据&quot;&gt;2.3 提取数据&lt;/h2&gt;
&lt;p&gt;得到页面源码后，可直接利用Pandas的&lt;code&gt;read_html&lt;/code&gt;方法得以其中的表格数据，非常方便。同时我们还需要定位它的表头信息，来得到我们的表头。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 表头信息
table_head_csel = &quot;#skcontent&amp;gt;table:nth-child(3)&amp;gt;tbody&amp;gt;tr&quot;
table_head = soup.select(table_head_csel)[0]

# 通过css选择器，找到水库表信息
table_css_select = &quot;#sktable&quot;
table_content = soup.select(table_css_select)[0]

df_table = pd.read_html(str(table_content))[0]
df_table.columns = [h.text for h in table_head.find_all(&quot;td&quot;)]
# df_table.columns = ['流域', '行政区', '河名', '库名', '库水位(米)', \
#                     '蓄水量(亿米3)', '入库(米3/秒)', '堤顶高程(米)']&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看提取数据的前5行，如表2.1所示。&lt;/p&gt;
&lt;p&gt;表2.1 提取数据前5行&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;流域&lt;/th&gt;
&lt;th&gt;行政区&lt;/th&gt;
&lt;th&gt;河名&lt;/th&gt;
&lt;th&gt;库名&lt;/th&gt;
&lt;th&gt;库水位(米)&lt;/th&gt;
&lt;th&gt;蓄水量(亿米3)&lt;/th&gt;
&lt;th&gt;入库(米3/秒)&lt;/th&gt;
&lt;th&gt;堤顶高程(米)&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;0&lt;/th&gt;
&lt;td&gt;其他流域&lt;/td&gt;
&lt;td&gt;新疆&lt;/td&gt;
&lt;td&gt;乌伦古河&lt;/td&gt;
&lt;td&gt;福海水库&lt;/td&gt;
&lt;td&gt;575.14 ↓&lt;/td&gt;
&lt;td&gt;1.756&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;579.00&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;其他流域&lt;/td&gt;
&lt;td&gt;新疆&lt;/td&gt;
&lt;td&gt;卡浪古尔河&lt;/td&gt;
&lt;td&gt;喀浪古尔水库&lt;/td&gt;
&lt;td&gt;988.26 —&lt;/td&gt;
&lt;td&gt;0.126&lt;/td&gt;
&lt;td&gt;1.23&lt;/td&gt;
&lt;td&gt;1007.50&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;其他流域&lt;/td&gt;
&lt;td&gt;新疆&lt;/td&gt;
&lt;td&gt;三屯河&lt;/td&gt;
&lt;td&gt;三屯河水库&lt;/td&gt;
&lt;td&gt;1024.49 —&lt;/td&gt;
&lt;td&gt;0.078&lt;/td&gt;
&lt;td&gt;1.982&lt;/td&gt;
&lt;td&gt;1039.60&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;其他流域&lt;/td&gt;
&lt;td&gt;新疆&lt;/td&gt;
&lt;td&gt;头屯河&lt;/td&gt;
&lt;td&gt;头屯河水库&lt;/td&gt;
&lt;td&gt;986.52 —&lt;/td&gt;
&lt;td&gt;0.108&lt;/td&gt;
&lt;td&gt;1.75&lt;/td&gt;
&lt;td&gt;995.20&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;其他流域&lt;/td&gt;
&lt;td&gt;新疆&lt;/td&gt;
&lt;td&gt;乌鲁木齐河&lt;/td&gt;
&lt;td&gt;红雁池水库&lt;/td&gt;
&lt;td&gt;995.54 ↓&lt;/td&gt;
&lt;td&gt;0.234&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1009.00&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;保存数据&quot;&gt;2.4 保存数据&lt;/h2&gt;
&lt;p&gt;数据提取完成后，下面还将其表格的时间提取出来，以作为文件名，防止数据重复。这里利用了一个简单的正则表达式提时间信息，然后利用&lt;span&gt;pandas&lt;/span&gt;的&lt;code&gt;to_csv&lt;/code&gt;方法，得到两种编码格式的&lt;code&gt;.csv&lt;/code&gt;文件。其中&lt;code&gt;rvr_tab_2019_1_22_ch.csv&lt;/code&gt;为中文编码格式，可直接用excel打开，如图2-2所示。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# 找到水库信息的时间
table_time_csel = &quot;#skdate&quot;
time_text = soup.select(table_time_csel)[0].text
time_info = re.search(r&quot;(\d{4})年(\d{1,2})月(\d{1,2})&quot;, time_text).groups()

df_table.to_csv(&quot;rvr_tab_%s_%s_%s.csv&quot; % time_info, index=None)
# 换一个编码方式，此文件可以直接用excel打开，不会出现乱码
df_table.to_csv(&quot;rvr_tab_%s_%s_%s_ch.csv&quot; % time_info,encoding=&quot;GB18030&quot;, index=None)&lt;/code&gt;
&lt;/pre&gt;
&lt;div&gt;&lt;img alt=&quot;fig2-2_web_data_excel2&quot; src=&quot;https://cloud.tsinghua.edu.cn/f/dd79e7934d284acf8280/?dl=1&quot;/&gt;&lt;p&gt;图2-2 获取的数据&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;本文的方法与上一篇&lt;a href=&quot;https://www.cnblogs.com/endlesscoding/p/10304350.html&quot;&gt;《Python+Selenium爬取动态加载页面（1）》&lt;/a&gt;的方法类似，只是多一个按钮点击的过程。&lt;/p&gt;
</description>
<pubDate>Tue, 22 Jan 2019 14:16:00 +0000</pubDate>
<dc:creator>EndlessCoding</dc:creator>
<og:description>注： 上一篇 '《Python+Selenium爬取动态加载页面（1）》' 讲了基本地如何获取动态页面的数据，这里再讲一个稍微复杂一点的数据获取 '全国水雨情网' 。数据的获取过程跟人手动获取过程类似</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/endlesscoding/p/10306429.html</dc:identifier>
</item>
<item>
<title>设计模式之单例模式 - 纯鈞</title>
<link>http://www.cnblogs.com/willvi624/p/10306396.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/willvi624/p/10306396.html</guid>
<description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;设计模式是人们在日常工作中总结出来的一些好的设计方式。用于指导人们能够写出优雅（可扩展，好维护）的代码。&lt;/p&gt;
&lt;p&gt;也能让自己心情愉快。&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;
&lt;p&gt;单例模式是一种比较简单的模式。定义为确保某一个类只有一个是实例，而且自行实例化并向整个系统提供这个实例。&lt;/p&gt;
&lt;h3 id=&quot;例子&quot;&gt;例子&lt;/h3&gt;
&lt;h4 id=&quot;饿汉式&quot;&gt;饿汉式：&lt;/h4&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Singleton {
    private static final Singleton singeleton = new Singleton();
    // 私有对象可限制new多个对象
    private Singleton(){}
    
    public static Singleton getSingeleton(){
        return singeleton;
    }
    
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;线程安全&lt;/li&gt;
&lt;li&gt;实现简单&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;不是懒加载，在加载类时就会被初始化。即使该类你没有被使用。&lt;/li&gt;
&lt;li&gt;如果实例依赖参数则无法实现&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;懒汉式-线程不安全不推荐&quot;&gt;懒汉式 线程不安全（不推荐）&lt;/h4&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Singleton {
    private static Singleton instance;
    private Singleton (){}

    public static Singleton getInstance() {
     if (instance == null) {
         instance = new Singleton();
     }
     return instance;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;实现了懒加载，在单线程下在使用时才能正确创建实例&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;虽然使用了懒加载，但是有个严重问题。在多个线程并行调用getInstance()时会创建多个实例。这样在这个充满多线程开发的web应用下是很不可取的。所以不推荐这种用法。&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;懒汉式-线程安全双重检验锁模式&quot;&gt;懒汉式 线程安全（双重检验锁模式）&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;使用同步块枷锁的方式来保证线程安全，为何双重判断？当有多个线程同时进入第一个if的时候。如果此时未实例化，则会只有一个线程进入同步代码块，其他代码块将会等待，然后进入第二个。如果该线程在获取锁后已经实例化就跳过实例化，所以存在第二重判断空。&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static Singleton getSingleton() {
    if (instance == null) {                       
        synchronized (Singleton.class) {
            if (instance == null) {              
                instance = new Singleton();
            }
        }
    }
    return instance ;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上代码看着很完美，但是它存在一个问题。&lt;code&gt;instance = new Singleton();&lt;/code&gt;就是这个&lt;/p&gt;
&lt;p&gt;他并非一个原子操作。这句在jvm中做了三件事情&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;分配内存&lt;/li&gt;
&lt;li&gt;调用构造函数初始化成员变量&lt;/li&gt;
&lt;li&gt;分配内存空间（instance ！=null）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;由于jvm在编译时存在指令重排序的优化，也就是第二步和第三步有可能被交换。这样就会出现先分配空间在初始化。这时如果有线程到了第一个if就会错误的得到instanc！=null的并没有初始化的实例。如果使用没有初始化的实例则会报错。&lt;/p&gt;
&lt;p&gt;解决方案为添加&lt;code&gt;volatile&lt;/code&gt;关键字来防止指令的重排&lt;/p&gt;
&lt;p&gt;优化后的代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Singleton {
    private volatile static Singleton instance; //声明成 volatile
    private Singleton (){}

    public static Singleton getSingleton() {
        if (instance == null) {                         
            synchronized (Singleton.class) {
                if (instance == null) {       
                    instance = new Singleton();
                }
            }
        }
        return instance;
    }
   
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;实现了懒加载&lt;/li&gt;
&lt;li&gt;线程安全&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;代码较复杂而且还隐含jvm问题，不容易理解，一不小心容易犯错&lt;/li&gt;
&lt;li&gt;java5以前的版本&lt;code&gt;volatile&lt;/code&gt;有缺陷无法避免重排序&lt;/li&gt;
&lt;li&gt;存在同步代码块，性能上可能不如其他方式&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;懒汉式静态内部类懒汉式加载推荐&quot;&gt;懒汉式，静态内部类（懒汉式加载推荐）&lt;/h4&gt;
&lt;p&gt;《Effective Java》上推荐&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Singleton {  
    private static class SingletonHolder {  
        private static final Singleton INSTANCE = new Singleton();  
    }  
    private Singleton (){}  
    public static final Singleton getInstance() {  
        return SingletonHolder.INSTANCE; 
    }  
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;懒加载&lt;/li&gt;
&lt;li&gt;线程安全&lt;/li&gt;
&lt;li&gt;读取实例不同步，性能比双重校验好&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;基本无缺点，真要说缺点就是不出名&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;小结&quot;&gt;小结&lt;/h4&gt;
&lt;p&gt;就一般而言，直接使用饿汉式即可，如果要求使用懒加载推荐使用静态内部类。&lt;/p&gt;
&lt;h3 id=&quot;为何要使用单列模式&quot;&gt;为何要使用单列模式&lt;/h3&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;单例模式在内存中，只有一个实例，减少内存开支。&lt;/li&gt;
&lt;li&gt;当一个对象的产生需要比较多资源时，如读取配置可以通过启动时实现一个单例对象来解决&lt;/li&gt;
&lt;li&gt;避免对资源的多重占用，避免对一个资源文件的同时写操作&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;没有接口，扩展难&lt;/li&gt;
&lt;li&gt;对测试不理&lt;/li&gt;
&lt;li&gt;与单一职责原则冲突&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;使用场景&quot;&gt;使用场景&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;要求生成巍译序列号的环境&lt;/li&gt;
&lt;li&gt;整个项目需要一个共享访问点或共享数据，如web页面计数器，使用单例可以保持计数器的值&lt;/li&gt;
&lt;li&gt;创建一个对象需要消耗资源过多，如访问IO和数据库&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Tue, 22 Jan 2019 14:09:00 +0000</pubDate>
<dc:creator>纯鈞</dc:creator>
<og:description>前言 设计模式是人们在日常工作中总结出来的一些好的设计方式。用于指导人们能够写出优雅（可扩展，好维护）的代码。 也能让自己心情愉快。 简介 单例模式是一种比较简单的模式。定义为确保某一个类只有一个是实</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/willvi624/p/10306396.html</dc:identifier>
</item>
<item>
<title>美赛LaTeX急救指南 - 黑山雁</title>
<link>http://www.cnblogs.com/xjtu-blacksmith/p/10306189.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xjtu-blacksmith/p/10306189.html</guid>
<description>&lt;p&gt;一年一度的美国大学生数学建模竞赛（MCM/ICM）又要开始了。在比赛中，将有一部分同学选择用&lt;code&gt;LaTeX&lt;/code&gt;排版论文，以使论文获得更好的视觉效果；但是，就既往经验来看，其中的很大一部分同学，还并没有熟练地掌握&lt;code&gt;LaTeX&lt;/code&gt;的相关技巧，只是比较生硬的套用网上所给的论文模板（例如通行的&lt;code&gt;mcmthesis&lt;/code&gt;，以及本站发布的&lt;code&gt;easymcm&lt;/code&gt;），一旦出现一些小问题就会&lt;strong&gt;不知所措&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;此份文档，是要为各位同学提供一份比较详细的&lt;code&gt;LaTeX&lt;/code&gt;排版问答集锦，内容集中于比赛时可能出现的种种情况，对其他情形下的常见问题则并不叙述。主要着眼于本站发布的&lt;code&gt;easymcm&lt;/code&gt;宏包，对于&lt;code&gt;mcmthesis&lt;/code&gt;文档类在使用时的常见问题也有少量的论述。读者可将此份文档存留、收藏，待遇到问题无法自行解决时，再来到这份文档中查找解决方案。&lt;/p&gt;
&lt;p&gt;此份文档将根据我所了解到的问题继续&lt;strong&gt;补充&lt;/strong&gt;。作者有将此文档转化为&lt;code&gt;pdf&lt;/code&gt;文档（用&lt;code&gt;LaTeX&lt;/code&gt;撰写）的打算，但暂无时间进行此项工作。本文的&lt;code&gt;markdown&lt;/code&gt;源码已发布于&lt;code&gt;GitHub&lt;/code&gt;上，&lt;a href=&quot;https://github.com/xjtu-blacksmith/cnblogs-source/blob/master/blog-mcmaid/mcmaid.md&quot;&gt;戳这里看看&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;关于easymcm宏包的基本信息以及编译系统的若干问题&quot;&gt;1 关于&lt;code&gt;easymcm&lt;/code&gt;宏包的基本信息，以及编译系统的若干问题&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q1.1&lt;/strong&gt;: 目前通行的&lt;code&gt;mcmthesis&lt;/code&gt;是一个“文档类”，而本站发布的&lt;code&gt;easymcm&lt;/code&gt;是一个“宏包”。请问这二者有何区别？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;strong&gt;文档类&lt;/strong&gt;（文件后缀名为&lt;code&gt;.cls&lt;/code&gt;）是一整套预定义的文档样式，其决定了诸如标题样式、纸张大小、章节格式等属性，相当于是文档的“框架”。由&lt;code&gt;LaTeX&lt;/code&gt;定义的基本文档类包括&lt;code&gt;article&lt;/code&gt;、&lt;code&gt;book&lt;/code&gt;、&lt;code&gt;report&lt;/code&gt;等。而&lt;strong&gt;宏包&lt;/strong&gt;（文件后缀名为&lt;code&gt;.sty&lt;/code&gt;）如同编程语言中的“库文件”，可为文档提供若干补充的命令、功能和设置。这是一般的情况。不过，在实际使用时，文档类和宏包却可以发挥类同的作用，这主要是因为&lt;code&gt;LaTeX&lt;/code&gt;系统对文档类/宏包文件的内容、格式未做太过严格的限定，因此许多功能既可以通过文档类实现，也可以通过宏包实现。&lt;code&gt;mcmthesis&lt;/code&gt;采用的文档类样式，实现较复杂，但更为精细。本站的&lt;code&gt;easymcm&lt;/code&gt;宏包二次开发自&lt;code&gt;mcmthesis&lt;/code&gt;的老版本，仍然是一个宏包文件，结构简单，便于使用。&lt;/p&gt;
&lt;p&gt;在实际使用时，文档类通过&lt;code&gt;\documentclass&lt;/code&gt;命令确定，宏包通过&lt;code&gt;\usepackage&lt;/code&gt;命令引用。一份可编译的&lt;code&gt;tex&lt;/code&gt;文档可以引用多个宏包，也可以不引用任何宏包，但&lt;strong&gt;必须&lt;/strong&gt;确定&lt;strong&gt;一种&lt;/strong&gt;文档类。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q1.2&lt;/strong&gt;: 我在编译宏包时出现了以下报错信息，请问是什么问题？&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;! LaTeX Error: Environment abstract undefined.&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;code&gt;ABSTRACT.tex&lt;/code&gt;文件是不能编译的，其已通过&lt;code&gt;\input&lt;/code&gt;命令嵌入于&lt;code&gt;PAPER.tex&lt;/code&gt;文件之中了。请编译&lt;code&gt;PAPER.tex&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;作为补充，需要提醒的是：一份可以编译的&lt;code&gt;LaTeX&lt;/code&gt;源代码，至少要具有以下&lt;strong&gt;两个要素&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;文档类&lt;/strong&gt;的声明（&lt;code&gt;\documentclass&lt;/code&gt;命令）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document&lt;/code&gt;主环境（一段由&lt;code&gt;\begin{document}&lt;/code&gt;与&lt;code&gt;\end{document}&lt;/code&gt;括起来的区域）。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;如果一份文档中缺少以上两个要素，说明其是作为&lt;strong&gt;分支文档&lt;/strong&gt;被嵌入到其他&lt;code&gt;tex&lt;/code&gt;代码中去了，不能用以编译。还不熟悉&lt;code&gt;LaTeX&lt;/code&gt;文档结构的用户，可以此为依据，避免再次出错。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q1.3&lt;/strong&gt;: 我在编译宏包时出现了以下报错信息，请问是什么问题？&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;! Missing \endcsname inserted.&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 这是由于您不慎编译了&lt;code&gt;easymcm.sty&lt;/code&gt;宏包文件，其是不能编译的。请编译&lt;code&gt;PAPER.tex&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q1.4&lt;/strong&gt;: 看起来&lt;code&gt;easymcm&lt;/code&gt;中不支持中文（相反，&lt;code&gt;mcmthesis&lt;/code&gt;是支持的），请问如何解决这一问题呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 请问您为什么要在美赛论文中插入中文？虽然现在美赛的评委里中国人越来越多了，但美赛论文还是不能用中文写的。&lt;/p&gt;
&lt;p&gt;（补充：若您使用&lt;code&gt;pdflatex&lt;/code&gt;编译文件，请特别注意，一定不要在论文中插入任何&lt;strong&gt;中文符号&lt;/strong&gt;。否则，论文中将会生成类似于某类拉丁字符的乱码，难以检查出来，会影响论文的最终效果。如果您&lt;strong&gt;无法保证&lt;/strong&gt;自己在来回切换输入法的过程中不会误敲中文符号，请使用&lt;code&gt;UTF-8&lt;/code&gt;版本的美赛模板，并使用&lt;code&gt;xelatex&lt;/code&gt;或&lt;code&gt;lualatex&lt;/code&gt;进行编译。这样，不慎敲入的中文符号能够正常显示出来——尽管这仍然影响论文的美观性。）&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Q1.5: 我使用&lt;code&gt;CTeX&lt;/code&gt;套装进行排版，编译时系统报错：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;! LaTeX Error: File ` lastpage.sty ' not found.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;是缺少宏包吗？应如何解决呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Answer: 就实际经验来说，您使用的应该是非完整版的&lt;code&gt;CTeX&lt;/code&gt;套装，缺少宏包且不能自动联网安装。在安装时，应下载带有&lt;code&gt;Full&lt;/code&gt;字样的安装包，如下图所示（截图来自&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/ctex/legacy/2.9/&quot;&gt;清华镜像&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/xjtu-blacksmith/1245580/o_tsinghuaCTeX.jpg&quot; alt=&quot;CTeX下载&quot;/&gt;&lt;/p&gt;
&lt;p&gt;另外，补充说明：尽管大多数资深的&lt;code&gt;LaTeX&lt;/code&gt;用户都不推荐大家使用老旧的&lt;code&gt;CTeX&lt;/code&gt;套装（我作为一个初级的&lt;code&gt;LaTeX&lt;/code&gt;用户也不推荐），但&lt;code&gt;easymcm&lt;/code&gt;宏包的更新过程中仍将充分考虑与&lt;code&gt;CTeX&lt;/code&gt;套装的兼容性。许多新手仍然先接触到&lt;code&gt;CTeX&lt;/code&gt;套装，这是不以人的意志为转移的现状。&lt;/p&gt;
&lt;h2 id=&quot;图片表格数学公式网址的处理&quot;&gt;2 图片、表格、数学公式、网址的处理&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q2.1&lt;/strong&gt;: 我还不太会插入图标和表格，怎么办怎么办！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;code&gt;easymcm&lt;/code&gt;的发行版本中附带有一份&lt;strong&gt;样例论文&lt;/strong&gt;，其源码中有大量的图、表插入命令，可供参考。另外，您也可参考一般的&lt;code&gt;LaTeX&lt;/code&gt;教程。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q2.2&lt;/strong&gt;: 较大的表格，不易用&lt;code&gt;LaTeX&lt;/code&gt;命令编写。请问是否有解决方案？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 一般而言，有两种解决方案：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;使用有关工具将&lt;code&gt;Excel&lt;/code&gt;、&lt;code&gt;Matlab&lt;/code&gt;等表格（矩阵）格式转换为&lt;code&gt;LaTeX&lt;/code&gt;命令，或直接在&lt;strong&gt;可视化界面&lt;/strong&gt;中编辑表格并转换为&lt;code&gt;LaTeX&lt;/code&gt;命令。一个可用的工具是&lt;code&gt;Excel2LaTeX&lt;/code&gt;（LaTeXStudio上的&lt;a href=&quot;http://www.latexstudio.net/archives/6992.html&quot;&gt;中文介绍与下载&lt;/a&gt;、&lt;code&gt;CTAN&lt;/code&gt;上的&lt;a href=&quot;https://ctan.org/tex-archive/support/excel2latex/&quot;&gt;发布页面&lt;/a&gt;），另一个可以&lt;strong&gt;在线转换&lt;/strong&gt;的网页是&lt;code&gt;TablesGenerator&lt;/code&gt;（&lt;a href=&quot;http://www.tablesgenerator.com/latex_tables&quot;&gt;点此进入&lt;/a&gt;，我推荐这一方式）。其中的若干门道，这里就不再介绍了，用户可以自行尝试。&lt;/li&gt;
&lt;li&gt;将表格截图后以图片形式插入到&lt;code&gt;LaTeX&lt;/code&gt;中。这是最方便的做法，问题在于截图是&lt;strong&gt;位图格式&lt;/strong&gt;的，对文档的显示效果可能有一定的影响。同时，在插入截图时，还应采取这样的“&lt;strong&gt;古怪&lt;/strong&gt;”方式：&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;latex&quot;&gt;
&lt;code&gt;\begin{table}[!htbp]
\centering
\caption{Name of the table}\label{tb:XXX}
\includegraphics[width=Xcm]{XXX.jpg}
\end{table}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由此，显示出的标题将是“Table X: Name of the table”，而不是“Figure”。原理上，&lt;code&gt;figure&lt;/code&gt;环境与&lt;code&gt;table&lt;/code&gt;环境都是浮动对象，没有本质上的区别，主要区别就在其标题名称（也即&lt;code&gt;\caption&lt;/code&gt;命令的效果）上。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q2.3&lt;/strong&gt;: &lt;code&gt;easymcm&lt;/code&gt;自带的样例论文中，所有的表格几乎都是&lt;strong&gt;三线表&lt;/strong&gt;。不能使用更复杂的样式吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 三线表是科技论文中的通用表格形式，简洁明快，在美赛论文中的确不推荐用其他类型的表格。但是，如果需要处理&lt;strong&gt;特别复杂&lt;/strong&gt;的表格，必须在表格中用若干竖线分隔（&lt;strong&gt;这是三线表中不应该出现的！&lt;/strong&gt;），则还是用&lt;strong&gt;默认&lt;/strong&gt;的表格样式为好。不建议新手自己用代码写复杂表格，请按照&lt;strong&gt;Q2.2&lt;/strong&gt;中所提供的解决方案来生成复杂表格的&lt;code&gt;LaTeX&lt;/code&gt;代码。关于三线表的更多信息，可以查看三线表宏包&lt;code&gt;booktabs&lt;/code&gt;的&lt;a href=&quot;http://mirrors.ctan.org/macros/latex/contrib/booktabs/booktabs.pdf&quot;&gt;说明文档&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q2.4&lt;/strong&gt;: &lt;code&gt;LaTeX&lt;/code&gt;中的公式代码太繁琐了，记不住、用不熟，怎么破？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 如果您已经比较熟悉&lt;code&gt;LaTeX&lt;/code&gt;中数学公式的基本语法，以及若干的数学环境，只是对具体的符号代码感到苦恼，可以准备一份&lt;strong&gt;公式代码表&lt;/strong&gt;在手头以供查阅。各种纸质的、在线的&lt;code&gt;LaTeX&lt;/code&gt;教程中，都有这样的公式符号代码表。我的&lt;a href=&quot;https://xjtu-blacksmith.github.io/sharing-page/&quot;&gt;资源分享页面&lt;/a&gt;中所引用的两种电子版教程（&lt;em&gt;A Primer&lt;/em&gt;以及&lt;code&gt;lshort&lt;/code&gt;）中，也有这样的表可供查阅。&lt;/p&gt;
&lt;p&gt;如果您对基本的公式语法都感到陌生，则建议您利用其他&lt;strong&gt;可视化编辑器&lt;/strong&gt;生成&lt;code&gt;LaTeX&lt;/code&gt;代码。使用&lt;code&gt;Office&lt;/code&gt;套装处理文档的用户，应该比较熟悉&lt;code&gt;MathType&lt;/code&gt;&lt;strong&gt;公式编辑器&lt;/strong&gt;了，其内置有生成&lt;code&gt;TeX&lt;/code&gt;代码的模块，具体的配置方法可在网上容易地找到（前提是，您使用的是完整版的&lt;code&gt;MathType&lt;/code&gt;，不是在试用期结束后残存的“&lt;em&gt;精简版&lt;/em&gt;”）。另外，还有一个较好的&lt;a href=&quot;https://www.codecogs.com/latex/eqneditor.php&quot;&gt;在线公式编辑器&lt;/a&gt;，语言可调整为中文，使用十分便捷，同时也可以充当一个&lt;strong&gt;公式表&lt;/strong&gt;：如果您遗忘了某些符号，或记不清矩阵、积分号等的使用方法，可直接在界面上寻找对应按钮，点击就能生成规范的&lt;code&gt;LaTeX&lt;/code&gt;代码。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q2.5&lt;/strong&gt;: 插入由&lt;code&gt;\texttt&lt;/code&gt;引导的网址时，出现了&lt;strong&gt;不能换行&lt;/strong&gt;的问题。如何解决？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 打字机字族&lt;code&gt;ttfamily&lt;/code&gt;在&lt;code&gt;TeX&lt;/code&gt;的底层定义中，默认是&lt;strong&gt;不能换行&lt;/strong&gt;的。（参考这个知乎上的&lt;a href=&quot;https://www.zhihu.com/question/53129242&quot;&gt;回答&lt;/a&gt;）解决方案不少，本站提供的&lt;code&gt;easymcm&lt;/code&gt;宏包中是用&lt;code&gt;url&lt;/code&gt;宏包下&lt;code&gt;\UrlBreaks&lt;/code&gt;命令定义换行字符来解决的。不幸的是，我目前所提供的样例论文中并没有应用这一方案——那时我和队友还在学习&lt;code&gt;LaTeX&lt;/code&gt;论文排版，采用的手段还是手动换行。为了自动换行，请在论文正文及参考文献区采用&lt;code&gt;\url&lt;/code&gt;命令将需要引用的网址括起来，例如一个含网址的&lt;code&gt;bibitem&lt;/code&gt;应写成这样：&lt;/p&gt;
&lt;pre class=&quot;latex&quot;&gt;
&lt;code&gt;\bibitem{XXX}Easymcm: A useful template for MCM/ICM. 2019.1.22. \url{https://www.cnblogs.com/xjtu-blacksmith/p/9737960.html}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;效果如下图所示，可见自动换行的问题已解决了。特别注意，&lt;code&gt;\url&lt;/code&gt;是一个&lt;strong&gt;抄录环境&lt;/strong&gt;——也就是说，在其中不需要将&lt;code&gt;_&lt;/code&gt;、&lt;code&gt;^&lt;/code&gt;、&lt;code&gt;$&lt;/code&gt;等字符做&lt;strong&gt;转义&lt;/strong&gt;处理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/xjtu-blacksmith/1245580/o_url.jpg&quot; alt=&quot;url命令的使用&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;样式字体字号段落的设置&quot;&gt;3 样式、字体字号、段落的设置&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Q3.1: 我想将论文字体调整为&lt;code&gt;Times New Roman&lt;/code&gt;，请问如何做？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 首先，美赛官方未要求论文字体，仅要求论文的字号不小于12号，因此任何字体都是可以的。其次，如果您一定要使用一般情况下的规范字体&lt;code&gt;Times New Roman&lt;/code&gt;，首先应将&lt;code&gt;PAPER.tex&lt;/code&gt;导言区中的&lt;code&gt;\usepackage{palatino}&lt;/code&gt;去掉，然后再在原位置引用另一宏包：&lt;/p&gt;
&lt;pre class=&quot;latex&quot;&gt;
&lt;code&gt;\usepackage{mathptmx}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再次编译即可。&lt;code&gt;mathptmx&lt;/code&gt;宏包提供了一种可用的&lt;code&gt;Times New Roman&lt;/code&gt;字体。详细内容，可以参考LaTeXStudio上的&lt;a href=&quot;http://www.latexstudio.net/archives/9323.html&quot;&gt;一篇介绍&lt;/a&gt;），读者也可以尝试该页面上所提供的其他方案。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q3.2&lt;/strong&gt;: 如何调整&lt;strong&gt;段间距&lt;/strong&gt;？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 在&lt;code&gt;easymcm&lt;/code&gt;宏包目前版本（&lt;code&gt;v5.02&lt;/code&gt;）的模板文件夹内，&lt;code&gt;ABSTRACT.tex&lt;/code&gt;文件中，有一段已经被注释掉的命令：&lt;/p&gt;
&lt;pre class=&quot;latex&quot;&gt;
&lt;code&gt;% 下面的语句可调整全文行距为标准值的0.6倍，请自行使用
% \renewcommand{\baselinestretch}{0.6}\normalsize&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将下面命令的注释号去掉，即可使之生效；修改其倍数，即可调整段落间距的大小（设为&lt;code&gt;0&lt;/code&gt;则表示不需要段间距）。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q3.3&lt;/strong&gt;: 为调整页边距，我在导言区加载了&lt;code&gt;geometry&lt;/code&gt;宏包后页面显示有问题，请问哪里出了问题？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;code&gt;easymcm&lt;/code&gt;中已经加载过&lt;code&gt;geometry&lt;/code&gt;宏包了，再次加载会出错（有如在&lt;code&gt;C++&lt;/code&gt;程序中多次引用头文件的错误）。不推荐用户修改相关参数。如一定要修改，则应打开&lt;code&gt;easymcm.sty&lt;/code&gt;并修改引用&lt;code&gt;geometry&lt;/code&gt;宏包时所设定的参数。&lt;/p&gt;
&lt;p&gt;特别说明：论文排版时常用的各类宏包，诸如&lt;code&gt;geometry&lt;/code&gt;、&lt;code&gt;hyperref&lt;/code&gt;、&lt;code&gt;booktabs&lt;/code&gt;、&lt;code&gt;fontspec&lt;/code&gt;、&lt;code&gt;fancyhdr&lt;/code&gt;、&lt;code&gt;xcolor&lt;/code&gt;、&lt;code&gt;graphicx&lt;/code&gt;等，全部都在&lt;code&gt;easymcm&lt;/code&gt;之中加载过了，切不可在论文正文的导言区&lt;strong&gt;再次加载&lt;/strong&gt;。如果要修改加载这些宏包时所设置的参数，请使用宏包所提供的设置接口，或直接到&lt;code&gt;easymcm.sty&lt;/code&gt;的对应位置修改。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q3.4&lt;/strong&gt;: 如何修改目录、正文标题的样式？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;strong&gt;不推荐&lt;/strong&gt;用户修改。如果您有能力轻松地修改这些样式，那何必过来用&lt;code&gt;easymcm&lt;/code&gt;这样的入门级模板呢？如您一定要定制自己的论文样式，可以参考&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24501131&quot;&gt;这个页面&lt;/a&gt;（但注意，请不要在美赛论文中使用&lt;code&gt;\ctexset&lt;/code&gt;之类的中文处理命令，&lt;code&gt;easymcm&lt;/code&gt;中并未添加对中文的支持！），也可参考&lt;code&gt;titlesec&lt;/code&gt;宏包的&lt;a href=&quot;http://mirrors.ctan.org/macros/latex/contrib/titlesec/titlesec.pdf&quot;&gt;说明文档&lt;/a&gt;——处理目录、标题样式的&lt;code&gt;titlesec&lt;/code&gt;、&lt;code&gt;titletoc&lt;/code&gt;宏包均已在&lt;code&gt;easymcm&lt;/code&gt;中加载过了。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q3.5&lt;/strong&gt;: 我使用的美赛模板是&lt;code&gt;mcmthesis&lt;/code&gt;文档类，默认的论文样式中有多余的&lt;strong&gt;摘要页&lt;/strong&gt;。请问如何去除？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 使用&lt;code&gt;mcmthesis&lt;/code&gt;自带的设置命令：&lt;/p&gt;
&lt;pre class=&quot;latex&quot;&gt;
&lt;code&gt;\mcmsetup{CTeX = false, tcn = 1234567, problem = A,%
  sheet = true, titleinsheet = true, keywordsinsheet = true,%
  titlepage = false, abstract = false}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;即可将其调整到符合美赛论文规范的程度（队伍控制号&lt;code&gt;tcn&lt;/code&gt;和选题&lt;code&gt;problem&lt;/code&gt;需根据实际情况再做调整）。其他问题，请用户参考&lt;code&gt;mcmthesis&lt;/code&gt;自带的&lt;a href=&quot;http://static.latexstudio.net/article/2019/0120/mcmthesis-guide.pdf&quot;&gt;说明文档&lt;/a&gt;（原则上，如果您安装的是完整版的&lt;code&gt;TeX&lt;/code&gt;发行版，则可以直接用本地搜索引擎搜索到&lt;code&gt;mcmthesis.pdf&lt;/code&gt;这份参考文档）。您也可直接联系&lt;code&gt;mcmthesis&lt;/code&gt;目前的维护者，在[LaTeXStudio]上您可以找到其站长（&lt;code&gt;mcmthesis&lt;/code&gt;目前的维护者）的联系方式。&lt;/p&gt;
&lt;h2 id=&quot;目录交叉引用的相关问题&quot;&gt;4 目录、交叉引用的相关问题&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q4.1&lt;/strong&gt;: 编译后，生成了空白的目录，请问发生了什么？！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;strong&gt;重复编译&lt;/strong&gt;几次即可。别慌。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q4.2&lt;/strong&gt;: 如何自己定义目录上各条目的样式？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 请参考问题&lt;strong&gt;Q3.4&lt;/strong&gt;的回答。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q4.3&lt;/strong&gt;: 我的论文章节太多，导致目录生成了两页。如何将其压缩到一页以内？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 美赛论文理应短小精悍、结构突出，一篇20页的论文不应有太过繁密的章节划分。目录应当控制在一页以内，因此&lt;code&gt;easymcm&lt;/code&gt;宏包中未考虑目录超出一页的情形。如果目录&lt;strong&gt;被迫&lt;/strong&gt;超出一页（&lt;em&gt;即实在无法删减章节&lt;/em&gt;），有下列解决方案：&lt;/p&gt;
&lt;p&gt;(1) 将目录页上的&lt;strong&gt;字号&lt;/strong&gt;改小，方法是到&lt;code&gt;easymcm.sty&lt;/code&gt;的第125行左右，加入一条&lt;strong&gt;缩小字号&lt;/strong&gt;的命令：&lt;/p&gt;
&lt;pre class=&quot;latex&quot;&gt;
&lt;code&gt;%=========目录的制作==========
\renewcommand\tableofcontents{%
\centerline{\normalfont\Large\bfseries\contentsname%
\@mkboth{%
\MakeUppercase\contentsname}{\MakeUppercase\contentsname}}%
\vskip 3ex%
\small% 这条命令是新加入的
\@starttoc{toc}%
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该方法对于目录内容仅微微多于一页的情形是适用的。&lt;/p&gt;
&lt;p&gt;(2) 不显示三级标题，只显示二级标题。方法是到&lt;code&gt;easymcm.sty&lt;/code&gt;的第48行，将原来的&lt;code&gt;\setcounter{tocdepth}{3}&lt;/code&gt;改成&lt;code&gt;\setcounter{tocdepth}{2}&lt;/code&gt;。（也可在不修改&lt;code&gt;sty&lt;/code&gt;文件的前提下，直接在&lt;code&gt;PAPER.tex&lt;/code&gt;的导言区声明&lt;code&gt;\setcounter{tocdepth}{2}&lt;/code&gt;，以覆盖之前的计数器。）&lt;/p&gt;
&lt;p&gt;(3) 定制目录样式，去掉目录中&lt;code&gt;section&lt;/code&gt;级别标题的默认顶部间距。方法在网上可查到，但&lt;strong&gt;不推荐&lt;/strong&gt;，因目录样式定制不是一件容易的事情。&lt;/p&gt;
&lt;p&gt;如您坚持认为自己的论文&lt;strong&gt;必须&lt;/strong&gt;有两页目录，请参考一位博友所引用的解决方案：&lt;a href=&quot;https://www.zhihu.com/question/28067948/answer/312184585&quot;&gt;知乎页面&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;Q4.4&lt;/strong&gt;: 我设置了正确的&lt;code&gt;\label&lt;/code&gt;&amp;amp;&lt;code&gt;\ref&lt;/code&gt;引用，但输出的论文中却显示出“??”，这是什么情况？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 请参考&lt;strong&gt;Q4.1&lt;/strong&gt;的回答。&lt;/p&gt;
</description>
<pubDate>Tue, 22 Jan 2019 13:24:00 +0000</pubDate>
<dc:creator>黑山雁</dc:creator>
<og:description>一年一度的美国大学生数学建模竞赛（MCM/ICM）又要开始了。在比赛中，将有一部分同学选择用 排版论文，以使论文获得更好的视觉效果；但是，就既往经验来看，其中的很大一部分同学，还并没有熟练地掌握 的相</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xjtu-blacksmith/p/10306189.html</dc:identifier>
</item>
<item>
<title>Linux中删除特殊名称文件的多种方式 - 守望先生</title>
<link>http://www.cnblogs.com/bianchengzhuji/p/10305781.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bianchengzhuji/p/10305781.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;今日分享：我们在肉体的疾病方面花了不少钱，精神的病害方面却没有花什么，现在已经到了时候，我们应该有不平凡的学校。--《瓦尔登湖》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;h&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;我们都知道，在linux删除一个文件可以使用rm命令，但是有一些特殊名称的文件使用普通的rm方式却没法删除，本文介绍linux中删除特殊名称文件的多种方式。&lt;/p&gt;
&lt;h2 id=&quot;hlinux&quot;&gt;linux文件命名规则&lt;/h2&gt;
&lt;p&gt;在介绍之前，简单说明一下linux中文件命名规则。文件或目录名由除“/”和空字符“\0”之外的任意ASCII字符序列组成。当然很多操作系统允许更多类型的字符组成文件名。但对于我们来说，从来不建议使用一些特殊字符来命名文件。不幸的是，我们可能无意中创建了一些特殊名称的文件，或者由程序意外的创建了一些由特殊字符组成的文件。这个时候，要删除它们，似乎没有想象中的那么简单。&lt;/p&gt;
&lt;h2 id=&quot;h-1&quot;&gt;删除时带上路径&lt;/h2&gt;
&lt;p&gt;假设有一个名为-static文件，我们使用普通方式将它删除：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;shell language-shell hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt; rm -static&lt;br/&gt;rm: invalid option -- 's'&lt;br/&gt;Try 'rm ./-static' to remove the file '-static'.&lt;br/&gt;Try 'rm --help' for more information.&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;非常可惜，这种方式提示出错，并不能成功地删除-static文件。这是为什么？我们知道在linux中，通常以-开头，后面跟一些字符，作为一个命令的选项，而不巧的，-static就被rm命令认为是一个参数选项，更不幸的是，实际上并没有该选项，因此最终提示invalid option -- 's'，导致-static文件无法删除。&lt;/p&gt;
&lt;p&gt;那么有没有什么办法删除呢？我们注意到，除了提示非法选项外，还让我们尝试rm ./-static，是否可以呢？我们试一下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;shell language-shell hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt; rm ./-static&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最终发现，我们将-static文件成功删除了。因此得到我们的第一种方式，&lt;strong&gt;删除文件时带上路径&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;h-2&quot;&gt;删除时使用 --&lt;/h2&gt;
&lt;p&gt;前面除了提示让我们使用rm ./-static之外，还让我们使用rm --help获取更多信息，那么我们就看一下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;shell language-shell hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt; rm --&lt;span class=&quot;hljs-built_in&quot;&gt;help&lt;br/&gt;(省略部分内容)&lt;br/&gt;To remove a file whose name starts with a '-', for example '-foo',&lt;br/&gt;use one of these commands:&lt;br/&gt;rm -- -foo&lt;br/&gt;rm ./-foo&lt;br/&gt;(省略部分内容)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;内容较多，但是可以注意到上面的内容，对于以-开头的文件，提供了两种删除方式，第二种是前面提到的，而第二种，是在删除的文件前面再加--：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;shell language-shell hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt; rm -- -static&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt; &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们发现这种方式也是可以删除以-开头的文件。&lt;/p&gt;
&lt;h2 id=&quot;h-3&quot;&gt;删除时用引号引起来&lt;/h2&gt;
&lt;p&gt;对于特殊字符，如&amp;lt;&amp;gt;!*等组成的文件如何删除呢？例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;shell language-shell hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt; rm &amp;lt;&amp;gt;\!*&lt;br/&gt;rm: missing operand&lt;br/&gt;Try 'rm --help' for more information.&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于这种类型的文件，我们需要用引号将文件名包含起来：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;shell language-shell hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt; rm &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;&amp;gt;\!*&quot;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt; &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样就可以删除掉了，但是这种方式并不能针对所有该类型的文件，例如，文件名为!*的文件就不能通过这样的方式删除，因为!*是有其他含义的，具体可参看《&lt;a href=&quot;https://www.huyanbing.me/2018/12/22/40915.html&quot;&gt;linux中！的惊叹用法&lt;/a&gt;》。&lt;/p&gt;
&lt;h2 id=&quot;h-4&quot;&gt;增加转义字符删除文件&lt;/h2&gt;
&lt;p&gt;既然!*无法通过加引号的方式删除，那还有什么办法吗？有！删除时，增加转义字符：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;shell language-shell hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt; rm \!*&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样便可以删除。在linux中，很多字符有着特殊的含义，因此当你需要把它当普通字符使用时，就需要在前面加上\转义字符，这和C语言中的转义有点类似。再举个例子，要删除以空格开头的abc文件，可以使用下面的方式：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;shell language-shell hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt; rm \ abc&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;即可成功删除。&lt;/p&gt;
&lt;h2 id=&quot;hi&quot;&gt;按照i节点号删除&lt;/h2&gt;
&lt;p&gt;很多时候，文件名压根没法输入，因为它们都是一堆乱码。因此也完全无法通过前面介绍的方法进行删除，那还有办法吗？有！通过查找文件的i节点，按照i节点进行删除。&lt;br/&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;shell language-shell hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;span class=&quot;bash&quot;&gt; ls -i &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关于find命令用法，可参考《&lt;a href=&quot;https://www.huyanbing.me/2018/12/15/21083.html&quot;&gt;find命令高级用法&lt;/a&gt;》。这种通过i节点号进行删除的方式适用于前面所提到的任何类型文件。&lt;/p&gt;
&lt;p&gt;这里扩展说几句。在操作系统中，它是如何识别一个文件的呢？它并不是通过文件名，而是通过一个iNode号，即i节点号来识别不同的文件，文件名不过是这个文件其中的一个属性而已。&lt;/p&gt;
&lt;h2 id=&quot;h-5&quot;&gt;使用通配符删除&lt;/h2&gt;
&lt;p&gt;不多解释：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs php&quot;&gt;$ rm *.pdf&lt;br/&gt;$ &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是这种方式可能存在误删，因为只要文件名结尾为.pdf就会被删除，因此根据实际情况慎重使用。&lt;/p&gt;
&lt;h2 id=&quot;h-6&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;删除特殊文件名称的方法有很多，总结如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;删除时带上路径&lt;/li&gt;
&lt;li&gt;删除时使用 --&lt;/li&gt;
&lt;li&gt;删除时用引号引起来&lt;/li&gt;
&lt;li&gt;使用转义字符辅助删除&lt;/li&gt;
&lt;li&gt;按照i节点号删除&lt;/li&gt;
&lt;li&gt;使用通配符删除&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;不同类型文件可选择使用上面所提较方便的方式进行删除。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;微信公众号【编程珠玑】：专注但不限于分享计算机编程基础，Linux，C语言，C++，算法，数据库等编程相关[原创]技术文章，号内包含大量经典电子书和视频学习资源。欢迎一起交流学习，一起修炼计算机“内功”，知其然，更知其所以然。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Tue, 22 Jan 2019 11:57:00 +0000</pubDate>
<dc:creator>守望先生</dc:creator>
<og:description>我们都知道，在linux删除一个文件可以使用rm命令，但是有一些特殊名称的文件使用普通的rm方式却没法删除，该怎么办呢？</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bianchengzhuji/p/10305781.html</dc:identifier>
</item>
</channel>
</rss>