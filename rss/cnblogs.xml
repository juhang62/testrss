<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Nginx执行阶段 - 飞翔码农</title>
<link>http://www.cnblogs.com/feixiangmanon/p/10425968.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/feixiangmanon/p/10425968.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;Nginx 介绍&lt;/strong&gt;&lt;br/&gt;Nginx (engine x) 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。&lt;br/&gt;Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。其特点是占有内存少，并发能力强&lt;br/&gt;&lt;strong&gt;OpenResty介绍&lt;/strong&gt;&lt;br/&gt;OpenResty 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;
&lt;code&gt;location /test {
set $a 32;
echo $a;

set $a 56;
echo $a;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;两次都会输出56，因为set阶段始终在content阶段之前执行，跟代码的先后顺序无关。&lt;/p&gt;

&lt;p&gt;Nginx 处理请求的过程一共划分为 11 个阶段，按照执行顺序依次是 post-read、server-rewrite、find-config、rewrite、post-rewrite、preaccess、access、post-access、try-files、content 以及 log&lt;/p&gt;
&lt;h2 id=&quot;post-read-阶段&quot;&gt;post-read 阶段&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;该阶段Nginx标准函数 set_real_ip_from、real_ip_header&lt;/strong&gt;&lt;br/&gt;最先执行的 post-read 阶段在 Nginx 读取并解析完请求头（request headers）之后就立即开始运行。标准模块 ngx_realip 就在 post-read 阶段注册了处理程序，它的功能是迫使 Nginx 认为当前请求的来源地址是指定的某一个请求头的值。下面这个例子就使用了 ngx_realip 模块提供的 set_real_ip_from 和 real_ip_header&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;server {
    listen 8080;
    set_real_ip_from 127.0.0.1;
    real_ip_header   X-My-IP;

    location /test {
        set $addr $remote_addr;
        echo &quot;from: $addr&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的配置是让 Nginx 把那些来自 127.0.0.1 的所有请求的来源地址，都改写为请求头 X-My-IP 所指定的值。同时该例使用了标准内建变量 $remote_addr 来输出当前请求的来源地址，以确认是否被成功改写。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ curl -H 'X-My-IP: 1.2.3.4' localhost:8080/test
    from: 1.2.3.4&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;server-rewrite阶段&quot;&gt;server-rewrite阶段&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;该阶段包含标准函数ngx_rewrite、set 以及openresty函数set_by_lua、rewrite_by_lua&lt;/strong&gt;&lt;br/&gt;post-read 阶段之后便是 server-rewrite 阶段。当 ngx_rewrite 模块的配置指令直接书写在 server 配置块中时，基本上都是运行在 server-rewrite 阶段。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;server {
    listen 8080;

    location /test {
        set $b &quot;$a, world&quot;;
        echo $b;
    }

    set $a hello;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里，配置语句 set $a hello 直接写在了 server 配置块中，因此它就运行在 server-rewrite 阶段。而 server-rewrite 阶段要早于 rewrite 阶段运行，因此写在 location 配置块中的语句 set $b &quot;$a, world&quot; 便晚于外面的 set $a hello 语句运行。该例的测试结果证明了这一点：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ curl localhost:8080/test
hello, world&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;find-config-阶段&quot;&gt;find-config 阶段&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;这个阶段并不支持 Nginx 模块注册处理程序，而是由 Nginx 核心来完成当前请求与 location 配置块之间的配对工作。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;location /hello {
    echo &quot;hello world&quot;;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;rewrite-阶段&quot;&gt;rewrite 阶段&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;该阶段包含标准函数set_unescape_uri、rewrite以及openresty函数set_by_lua、 rewrite_by_lua&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;post-rewrite-阶段&quot;&gt;post-rewrite 阶段&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;post-rewrite 阶段，不接受 Nginx 模块注册处理程序，而是由 Nginx 核心完成 rewrite 阶段所要求的“内部跳转”操作&lt;/strong&gt;&lt;br/&gt;“内部跳转”的工作原理：本质上其实就是把当前的请求处理阶段强行倒退到 find-config 阶段，以便重新进行请求 URI 与 location 配置块的配对。比如例中，运行在 rewrite 阶段的 rewrite 指令就让当前请求的处理阶段倒退回了 find-config 阶段。由于此时当前请求的 URI 已经被 rewrite 指令修改为了 /bar，所以这一次换成了 location /bar 与当前请求相关联，然后再接着从 rewrite 阶段往下执行。&lt;br/&gt;为什么不直接在 rewrite 指令执行时立即进行跳转呢？&lt;br/&gt;为了在最初匹配的 location 块中支持多次反复地改写 URI&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    server {
        listen 8080;

        location /foo {
            set $a hello;
            rewrite ^ /bar;
        }

        location /bar {
            echo &quot;a = [$a]&quot;;
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;location /foo {
    rewrite ^ /bar;
    rewrite ^ /baz;

    echo foo;
}

location /bar {
    echo bar;
}

location /baz {
    echo baz;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意的：如果在 server 配置块中直接使用 rewrite 配置指令对请求 URI 进行改写，则不会涉及“内部跳转”&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;server {
listen 8080;

rewrite ^/foo /bar;

location /foo {
    echo foo;
}

location /bar {
    echo bar;
}
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;preaccess-阶段&quot;&gt;preaccess 阶段&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;该阶段包含标准函数ngx_access-allow deny ngx_limit_req 和 ngx_limit_zone ngx_auth_request 以及openresty函数access_by_lua其中也包含了限频限流模块resty.limit.req resty.limit.conn&lt;/strong&gt;&lt;br/&gt;注意的是：标准模块 ngx_realip 其实也在这个阶段注册了处理程序&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;server {
    listen 8080;

    location /test {
        set_real_ip_from 127.0.0.1;
        real_ip_header X-Real-IP;

        echo &quot;from: $remote_addr&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;与先看前到的例子相比，此例最重要的区别在于把 ngx_realip 的配置指令放在了 location 配置块中。前面我们介绍过，Nginx 匹配 location 的动作发生在 find-config 阶段，而 find-config 阶段远远晚于 post-read 阶段执行，所以在 post-read 阶段，当前请求还没有和任何 location 相关联。&lt;br/&gt;&lt;strong&gt;建议是：尽量在 server 配置块中配置 ngx_realip 这样的模块&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;post-access阶段&quot;&gt;post-access阶段&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;该阶段不支持 Nginx 模块注册处理程序，而是由 Nginx 核心自己完成一些处理工作&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;try-files-阶段&quot;&gt;try-files 阶段&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;实现标准配置指令 try_files 的功能，并不支持 Nginx 模块注册处理程序。&lt;/strong&gt;&lt;br/&gt;try_files 指令接受两个以上任意数量的参数，每个参数都指定了一个 URI. 这里假设配置了 N 个参数，则 Nginx 会在 try-files 阶段，依次把前 N-1 个参数映射为文件系统上的对象（文件或者目录），然后检查这些对象是否存在。一旦 Nginx 发现某个文件系统对象存在，就会在 try-files 阶段把当前请求的 URI 改写为该对象所对应的参数 URI（但不会包含末尾的斜杠字符，也不会发生 “内部跳转”）。如果前 N-1 个参数所对应的文件系统对象都不存在，try-files 阶段就会立即发起“内部跳转”到最后一个参数（即第 N 个参数）所指定的 URI.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;location /test {
    try_files /foo /bar/ /baz;
    echo &quot;uri: $uri&quot;;
}

location /foo {
    echo foo;
}

location /bar/ {
    echo bar;
}

location /baz {
    echo baz;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们在 location /test 中使用了 try_files 配置指令，并提供了三个参数，/foo、/bar/ 和 /baz. 根据前面对 try_files 指令的介绍，我们可以知道，它会在 try-files 阶段依次检查前两个参数 /foo 和 /bar/ 所对应的文件系统对象是否存在。&lt;br/&gt;不妨先来做一组实验。假设现在 /var/www/ 路径下是空的，则第一个参数 /foo 映射成的文件 /var/www/foo 是不存在的；同样，对于第二个参数 /bar/ 所映射成的目录 /var/www/bar/ 也是不存在的。于是此时 Nginx 会在 try-files 阶段发起到最后一个参数所指定的 URI（即 /baz）的“内部跳转”。实际的请求结果证实了这一点：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; $ curl localhost:8080/test
   baz&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来再做一组实验：在 /var/www/ 下创建一个名为 foo 的文件，其内容为 hello world（注意你需要有 /var/www/ 目录下的写权限）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ echo 'hello world' &amp;gt; /var/www/foo&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后再请求 /test 接口：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; $ curl localhost:8080/test
  uri: /foo&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里发生了什么？我们来看， try_files 指令的第一个参数 /foo 可以映射为文件 /var/www/foo，而 Nginx 在 try-files 阶段发现此文件确实存在，于是立即把当前请求的 URI 改写为这个参数的值，即 /foo，并且不再继续检查后面的参数，而直接运行后面的请求处理阶段。&lt;br/&gt;通过前面这几组实验不难看到， try_files 指令本质上只是有条件地改写当前请求的 URI，而这里说的“条件”其实就是文件系统上的对象是否存在。当“条件”都不满足时，它就会无条件地发起一个指定的“内部跳转”。当然，除了无条件地发起“内部跳转”之外， try_files 指令还支持直接返回指定状态码的 HTTP 错误页，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; try_files /foo /bar/ =404;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这行配置是说，当 /foo 和 /bar/ 参数所对应的文件系统对象都不存在时，就直接返回 404 Not Found 错误页。注意这里它是如何使用等号字符前缀来标识 HTTP 状态码的。&lt;/p&gt;
&lt;h2 id=&quot;content阶段&quot;&gt;content阶段&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;该阶段包含标准函数echo proxy_pass 以及openresty 函数content_by_lua balance_by_lua header_filter_by_lua body_filter_by_lua&lt;br/&gt;log&lt;/strong&gt;&lt;br/&gt;所有请求的标准输出都在改阶段。几乎所有的逻辑代码也在改阶段执行。这个阶段比较常见&lt;/p&gt;
&lt;h2 id=&quot;log阶段&quot;&gt;log阶段&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;改阶段包含ngx的acces_log error_log以及openresty函数log_by_lua&lt;/strong&gt;&lt;br/&gt;该阶段主要记录日志&lt;/p&gt;

&lt;h2 id=&quot;satisfy指令&quot;&gt;satisfy指令&lt;/h2&gt;
&lt;p&gt;对于多个 Nginx 模块注册在 access 阶段的处理程序， satisfy 配置指令可以用于控制它们彼此之间的协作方式。比如模块 A 和 B 都在 access 阶段注册了与访问控制相关的处理程序，那就有两种协作方式，一是模块 A 和模块 B 都得通过验证才算通过，二是模块 A 和模块 B 只要其中任一个通过验证就算通过。第一种协作方式称为 all 方式（或者说“与关系”），第二种方式则被称为 any 方式（或者说“或关系”）。默认情况下，Nginx 使用的是 all 方式。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;location /test {
    satisfy all;

    deny all;
    access_by_lua 'ngx.exit(ngx.OK)';

    echo something important;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果我们把上例中的 satisfy all 语句更改为 satisfy any，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;location /test {
    satisfy any;

    deny all;
    access_by_lua 'ngx.exit(ngx.OK)';

    echo something important;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果则会完全不同：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ curl localhost:8080/test
something important&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在 any 方式下，access 阶段只要有一个模块通过了验证，就会认为请求整体通过了验证，而在上例中， ngx_lua 模块的 access_by_lua 语句总是会通过验证的。&lt;/p&gt;
&lt;h2 id=&quot;ngx_index-模块-ngx_autoindex-模块以及-ngx_static-模块&quot;&gt;ngx_index 模块， ngx_autoindex 模块，以及 ngx_static 模块&lt;/h2&gt;
&lt;p&gt;Nginx 一般会在 content 阶段安排三个这样的静态资源服务模块。按照它们在 content 阶段的运行顺序，依次是 ngx_index 模块， ngx_autoindex 模块，以及 ngx_static 模块。&lt;br/&gt;ngx_index 和 ngx_autoindex 模块都只会作用于那些 URI 以 / 结尾的请求，例如请求 GET /cats/，而对于不以 / 结尾的请求则会直接忽略，同时把处理权移交给 content 阶段的下一个模块。而 ngx_static 模块则刚好相反，直接忽略那些 URI 以 / 结尾的请求。&lt;br/&gt;ngx_index 模块主要用于在文件系统目录中自动查找指定的首页文件，类似 index.html 和 index.htm 这样的，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;location / {
    root /var/www/;
    index index.htm index.html;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了进一步确认 ngx_index 模块在找到文件时的“内部跳转”行为，我们不妨设计下面这个小例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;location / {
    root /var/www/;
    index index.html;
}

location /index.html {
    set $a 32;
    echo &quot;a = $a&quot;;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时我们在本机的 /var/www/ 目录下创建一个空白的 index.html 文件，并确保该文件的权限设置对于运行 Nginx worker 进程的帐户可读&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ curl 'http://localhost:8080/'
a = 32&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果此时把 /var/www/index.html 文件删除，再访问 / 又会发生什么事情呢？答案是返回 403 Forbidden 出错页。为什么呢？因为 ngx_index 模块找不到 index 指令指定的文件（在这里就是 index.html），接着把处理权转给 content 阶段的后续模块，而后续的模块也都无法处理这个请求，于是 Nginx 只好放弃，输出了错误页&lt;br/&gt;运行在 ngx_index 模块之后的 ngx_autoindex 模块就可以用于自动生成这样的“目录索引”网页。我们来把上例修改一下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;location / {
    root /var/www/;
    index index.html;
    autoindex on;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时仍然保持文件系统中的 /var/www/index.html 文件不存在。我们再访问 / 位置时，就会得到一张漂亮的网页：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ curl 'http://localhost:8080/'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ngx_static 模块服务磁盘文件的例子。我们使用下面这个配置片段：&lt;br/&gt;location / {&lt;br/&gt;root /var/www/;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;现在来通过 HTTP 协议请求一下这两个文件所对应的 URI：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ curl 'http://localhost:8080/index.html'
this is my home

$ curl 'http://localhost:8080/hello.html'
hello world&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;location / 中没有使用运行在 content 阶段的模块指令，于是也就没有模块注册这个 location 的“内容处理程序”，处理权便自动落到了在 content 阶段“垫底”的那 3 个静态资源服务模块。首先运行的 ngx_index 和 ngx_autoindex 模块先后看到当前请求的 URI，/index.html 和 /hello.html，并不以 / 结尾，于是直接弃权，将处理权转给了最后运行的 ngx_static 模块。ngx_static 模块根据 root 指令指定的“文档根目录”（document root），分别将请求 URI /index.html 和 /hello.html 映射为文件系统路径 /var/www/index.html 和 /var/www/hello.html，在确认这两个文件存在后，将它们的内容分别作为响应体输出，并自动设置 Content-Type、Content-Length 以及 Last-Modified 等响应头。&lt;/p&gt;
&lt;p&gt;很多初学者会想当然地把 404 错误理解为某个 location 不存在，其实上面这个例子表明，即使 location 存在并成功匹配，也是可能返回 404 错误页的。因为决定着 404 错误页的是抽象的“资源”是否存在，而非某个具体的 location 是否存在。&lt;br/&gt;location /auth {&lt;br/&gt;access_by_lua '&lt;br/&gt;';&lt;br/&gt;}&lt;br/&gt;显然，这个 /auth 接口只定义了 access 阶段的配置指令，即 access_by_lua，并未定义任何 content 阶段的配置指令。于是当我们请求 /auth 接口时，在 access 阶段的 Lua 代码会如期执行，然后 content 阶段的那些静态文件服务会紧接着自动发生作用，直至 ngx_static 模块去文件系统上找名为 auth 的文件。而经常地，404 错误页会抛出，除非运气太好，在对应路径上确实存在一个叫做 auth 的文件。所以，一条经验是，当遇到意外的 404 错误并且又不涉及静态文件服务时，应当首先检查是否在对应的 location 配置块中恰当地配置了 content 阶段的模块指令，例如 content_by_lua、 echo 以及 proxy_pass 之类。&lt;/p&gt;
&lt;h2 id=&quot;openresty请求处理顺序&quot;&gt;openresty请求处理顺序&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;set_by_lua&lt;em&gt;: 流程分支处理判断变量初始化&lt;br/&gt;rewrite_by_lua&lt;/em&gt;: 转发、重定向、缓存等功能(例如特定请求代理到外网)&lt;br/&gt;access_by_lua&lt;em&gt;: IP 准入、接口权限等情况集中处理(例如配合 iptable 完成简单防火墙)&lt;br/&gt;content_by_lua&lt;/em&gt;: 内容生成&lt;br/&gt;header_filter_by_lua&lt;em&gt;: 响应头部过滤处理(例如添加头部信息)&lt;br/&gt;body_filter_by_lua&lt;/em&gt;: 响应体过滤处理(例如完成应答内容统一成大写) log_by_lua*:会话完成后本地异步完成日志记录(日志可以记录在本地，还可以同步到其他机器)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://moonbingbing.gitbooks.io/openresty-best-practices/images/openresty_phases.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;&lt;strong&gt;内容全部来自于&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/articlelist_1834459124_0_1.html&quot; class=&quot;uri&quot;&gt;http://blog.sina.com.cn/s/articlelist_1834459124_0_1.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://openresty.org/download/agentzh-nginx-tutorials-zhcn.html#02-NginxDirectiveExecOrder01&quot; class=&quot;uri&quot;&gt;https://openresty.org/download/agentzh-nginx-tutorials-zhcn.html#02-NginxDirectiveExecOrder01&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 24 Feb 2019 23:47:00 +0000</pubDate>
<dc:creator>飞翔码农</dc:creator>
<og:description>Nginx 介绍 Nginx (engine x) 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。 Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/feixiangmanon/p/10425968.html</dc:identifier>
</item>
<item>
<title>以最简单的方式讲HashMap - 段小辉</title>
<link>http://www.cnblogs.com/xiaohuiduan/p/10428906.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuiduan/p/10428906.html</guid>
<description>

&lt;p&gt;HashMap可以说是面试中最常出现的名词，这次头条的一面，第一个问的问题就是HashMap。所以就让我们来探讨下HashMap吧。&lt;/p&gt;
&lt;p&gt;实验环境：JDK1.8&lt;/p&gt;
&lt;p&gt;首先先说一下，和JDK1.7相比，对HashMap做了一些优化，使得HashMap的性能更加的优化。&lt;/p&gt;
&lt;ol readability=&quot;-1&quot;&gt;&lt;li&gt;
&lt;p&gt;HashMap的储存结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HashMap中的Hash&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;HashMap是怎么保存数据的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HashMap的扩容操作&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;HashMap的线程安全问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;HashMap的储存结构&lt;/h2&gt;
&lt;p&gt;只有当我们知道HashMap的储存结构时，我们才能够明白HashMap的工作原理。&lt;/p&gt;

&lt;h3&gt;jdk1.7的存储结构&lt;/h3&gt;
&lt;p&gt;在JDK1.7中，HashMap采用的是&lt;code&gt;数组【位桶】+单链表&lt;/code&gt;的数据结构&lt;/p&gt;

&lt;div class=&quot;story_image_container story_block_image&quot;&gt;
&lt;div class=&quot;story_image&quot;&gt;&lt;img title=&quot;&quot; src=&quot;https://img2018.cnblogs.com/blog/1439869/201902/1439869-20190225020919308-586151054.png&quot; alt=&quot;&quot; name=&quot;images/hashmap1.png&quot; data-src=&quot;images/hashmap1.png&quot;/&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;图片来自&lt;a href=&quot;https://blog.csdn.net/qq_30683329/article/details/80454518&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;jdk1.8的储存结构&lt;/h3&gt;
&lt;p&gt;在JDK1.8中，与JDK1.7最不相同的地方就是，采用了红黑树进行储存，采用的是&lt;code&gt;数组【位桶】+链表+红黑树&lt;/code&gt;，当链表的长度超过某一阀值时，就会将链表转换为红黑树，这个阀值可以自己设置，默认是8。&lt;/p&gt;

&lt;div class=&quot;story_image_container story_block_image&quot;&gt;
&lt;div class=&quot;story_image&quot;&gt;&lt;img title=&quot;&quot; src=&quot;https://img2018.cnblogs.com/blog/1439869/201902/1439869-20190225020919977-845482325.png&quot; alt=&quot;&quot; name=&quot;images/hash.png&quot; data-src=&quot;images/hash.png&quot;/&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;图片来自&lt;a href=&quot;https://www.cnblogs.com/leesf456/p/5242233.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Hash&lt;/h2&gt;
&lt;p&gt;首先先说HashMap中的hash。当我们使用HashMap中的&lt;code&gt;put(k,v)&lt;/code&gt;时，&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java hljs&quot; data-info=&quot;java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; V &lt;span class=&quot;hljs-title&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(K key, V value)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; putVal(hash(key), key, value, &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先我们要根据&lt;code&gt;key&lt;/code&gt;算出key的hash值。&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java hljs&quot; data-info=&quot;java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object key)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; h;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (key == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) ? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个hash值不仅仅是通过Object中的hashCode的得到的，还需要进行右移和^位异或。&lt;/p&gt;

&lt;h2&gt;HashMap保存数据&lt;/h2&gt;
&lt;p&gt;总所周知，HashMap默认的容量大小是16，那么当我们储存一个值时，是怎么判断储存的位置呢？&lt;/p&gt;
&lt;p&gt;首先我们需要明白几个参数。在使用HashMap的时候我们很可能会使用以下的构造参数：&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java hljs&quot; data-info=&quot;java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; initialCapacity, &lt;span class=&quot;hljs-keyword&quot;&gt;float&lt;/span&gt; loadFactor)&lt;/span&gt; &lt;/span&gt;;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;initialCapacity：初始化容量默认是16&lt;/li&gt;
&lt;li&gt;capacity：容量，通过initCapacity计算出一个大于或者等于initCapacity且为2的幂的值&lt;/li&gt;
&lt;li&gt;loadFactor：装载因子，默认是0.75，根据它来确定需要扩容的阀值。&lt;/li&gt;
&lt;li&gt;threshold：阀值，capacity*loadFactor即为阀值。&lt;/li&gt;
&lt;/ul&gt;&lt;ol readability=&quot;-1.5&quot;&gt;&lt;li readability=&quot;-0.5&quot;&gt;
&lt;p&gt;未产生hash冲突&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java hljs&quot; data-info=&quot;java&quot;&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i;

&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((p = tab[i = (n - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;amp; hash]) == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)
    tab[i] = newNode(hash, key, value, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;story_image_container story_block_image&quot;&gt;
&lt;div class=&quot;story_image&quot;&gt;&lt;img title=&quot;&quot; src=&quot;https://img2018.cnblogs.com/blog/1439869/201902/1439869-20190225020920907-650973333.png&quot; alt=&quot;&quot; name=&quot;images/hash.png&quot; data-src=&quot;images/hash.png&quot;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;例如：当某一hash值与（n-1）相与的结果是3，那么就将这个这个table的第3号的位置。

&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;产生hash冲突&lt;/p&gt;
&lt;p&gt;但是如果当我们得到的&lt;code&gt;hash值&lt;/code&gt;一样或者说&lt;code&gt;相与&lt;/code&gt;的结果的table位置已经存在一个值了，那么我们应该怎么去储存呢？&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;当key与table[i]的所有key进行equals比较，如果相同则直接更新覆盖value。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;假如key进行equals比较不相同，则进行元素的插入操作（在jdk1.7中是链表的插入，在jdk1.8中既有链表的插入操作也有红黑树的操作）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;HashMap保存数据的JKD1.8源代码&lt;span class=&quot;mark&quot;&gt;看源代码能够更好的理解HashMap的put操作&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;30&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java hljs&quot; data-info=&quot;java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; V &lt;span class=&quot;hljs-title&quot;&gt;putVal&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; hash, K key, V value, &lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; onlyIfAbsent,
                   &lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; evict)&lt;/span&gt; &lt;/span&gt;{
        Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; p; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; n, i;
        
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((tab = table) == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; || (n = tab.length) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)
            n = (tab = resize()).length;
        
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((p = tab[i = (n - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;amp; hash]) == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)
            tab[i] = newNode(hash, key, value, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);
        
        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
            Node&amp;lt;K,V&amp;gt; e; K k;
            
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p.hash == hash &amp;amp;&amp;amp;
                ((k = p.key) == key || (key != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; key.equals(k))))
                e = p;
            
            
            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; TreeNode)
                e = ((TreeNode&amp;lt;K,V&amp;gt;)p).putTreeVal(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, tab, hash, key, value);
            
            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                
                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; binCount = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; ; ++binCount) {
                    
                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((e = p.next) == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
                        
                        p.next = newNode(hash, key, value, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);
                        
                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (binCount &amp;gt;= TREEIFY_THRESHOLD - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) 
                            treeifyBin(tab, hash);
                        
                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;
                    }
                    
                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (e.hash == hash &amp;amp;&amp;amp;
                        ((k = e.key) == key || (key != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; key.equals(k))))
                        
                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;
                    p = e;
                }
            }
            
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (e != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) { 
                V oldValue = e.value;
                
                
                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!onlyIfAbsent || oldValue == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)
                    e.value = value;
                
                afterNodeAccess(e);
                
                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oldValue;
            }
        }
        
        ++modCount;
        
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (++size &amp;gt; threshold)
            resize();
        
        afterNodeInsertion(evict);
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
    }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;HashMap的扩容操作&lt;/h2&gt;
&lt;p&gt;在HashMap中进行扩容操作是特别耗费时间的，因为随着扩容，会重新进行一次hash分配，遍历hash表中的所有元素，因为桶的大小【也就是数组长度n】变了，那么&lt;code&gt;(n - 1) &amp;amp; hash&lt;/code&gt;的值也会发生改变，所以我们在编写程序时应该尽量避免resize，尽量在新建HashMap对象的时候指令桶的长度【阿里巴巴开发手册也是这样推荐使用】。&lt;/p&gt;
&lt;p&gt;HashMap进行扩容时，会完全新建一个桶，我们从上面了解到桶就是数组，而数组是没办法自动扩容的，所以我们需要用一个新的数组来代替前面的桶。而当HashMap进行扩容是，&lt;code&gt;阀值&lt;/code&gt;会变成原来的&lt;code&gt;两倍&lt;/code&gt;，&lt;code&gt;容量&lt;/code&gt;也会变成原来的&lt;code&gt;两倍&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;首先我们先讲讲JDK1.7中的resize(),JDK1.8有红黑树，还是有点麻烦。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;JDK1.7 的rezise()&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java hljs&quot; data-info=&quot;java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; newCapacity)&lt;/span&gt; &lt;/span&gt;{   
    
    Entry[] oldTable = table;
    &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; oldCapacity = oldTable.length;  
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (oldCapacity == MAXIMUM_CAPACITY) {  
        
        threshold = Integer.MAX_VALUE;
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;  
    }  

    
    Entry[] newTable = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Entry[newCapacity];  
    
    transfer(newTable);
    
    table = newTable;
    threshold = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;) (newCapacity * loadFactor);
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Entry[] newTable)&lt;/span&gt; &lt;/span&gt;{  
    Entry[] src = table;                   
    &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; newCapacity = newTable.length;  
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; src.length; j++) { 
        Entry&amp;lt;K, V&amp;gt; e = src[j];
        
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (e != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {  
            
            src[j] = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
            
            &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {  
                
                Entry&amp;lt;K, V&amp;gt; next = e.next;  
                
                &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i = indexFor(e.hash, newCapacity);
                
                e.next = newTable[i];
                
                newTable[i] = e;
                
                e = next;
            } &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (e != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);  
        }  
    }  
}  
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;indexFor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; h, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; length)&lt;/span&gt; &lt;/span&gt;{  
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; h &amp;amp; (length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);  
}  
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;JDK1.8 的rezise()&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;26&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java hljs&quot; data-info=&quot;java&quot;&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Node&amp;lt;K,V&amp;gt;[] resize() {
    Node&amp;lt;K,V&amp;gt;[] oldTab = table;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; oldCap = (oldTab == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) ? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; : oldTab.length;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; oldThr = threshold;
    &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; newCap, newThr = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (oldCap &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {
        
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (oldCap &amp;gt;= MAXIMUM_CAPACITY) {
            
            threshold = Integer.MAX_VALUE;
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oldTab;
        }
        
        
        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((newCap = oldCap &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp;
                    oldCap &amp;gt;= DEFAULT_INITIAL_CAPACITY)
            
            newThr = oldThr &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; 
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (oldThr &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) 
        
        newCap = oldThr;
    
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {               
        
        newCap = DEFAULT_INITIAL_CAPACITY;
        
        newThr = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (newThr == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;float&lt;/span&gt; ft = (&lt;span class=&quot;hljs-keyword&quot;&gt;float&lt;/span&gt;)newCap * loadFactor;
        newThr = (newCap &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp; ft &amp;lt; (&lt;span class=&quot;hljs-keyword&quot;&gt;float&lt;/span&gt;)MAXIMUM_CAPACITY ?
                    (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)ft : Integer.MAX_VALUE);
    }
    threshold = newThr;
    

    &lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings&lt;/span&gt;({&lt;span class=&quot;hljs-string&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;})
    Node&amp;lt;K,V&amp;gt;[] newTab = (Node&amp;lt;K,V&amp;gt;[])&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Node[newCap];
    table = newTab;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (oldTab != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; oldCap; ++j) {
            Node&amp;lt;K,V&amp;gt; e;
            
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((e = oldTab[j]) != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
                oldTab[j] = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
                
                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (e.next == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)
                    
                    newTab[e.hash &amp;amp; (newCap - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)] = e;
                
                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (e &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; TreeNode)
                    
                    ((TreeNode&amp;lt;K,V&amp;gt;)e).split(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, newTab, j, oldCap);

                
                
                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { 
                    Node&amp;lt;K,V&amp;gt; loHead = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;, loTail = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
                    Node&amp;lt;K,V&amp;gt; hiHead = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;, hiTail = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
                    Node&amp;lt;K,V&amp;gt; next;
                    &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {
                        next = e.next;
                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((e.hash &amp;amp; oldCap) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {
                            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (loTail == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)
                                loHead = e;
                            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;
                                loTail.next = e;
                            loTail = e;
                        }
                        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (hiTail == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)
                                hiHead = e;
                            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;
                                hiTail.next = e;
                            hiTail = e;
                        }
                    } &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((e = next) != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);
                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (loTail != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
                        loTail.next = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
                        newTab[j] = loHead;
                    }
                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (hiTail != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
                        hiTail.next = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
                        newTab[j + oldCap] = hiHead;
                    }
                }
            }
        }
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newTab;
}

&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;HashMap的线程安全问题&lt;/h2&gt;
&lt;p&gt;相信很多人都听说过HashMap线程不安全，但是HashMap为什么会产生线程安全问题呢？&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;多线程put()操作&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;设想一个场景，A线程正在进行put操作，它经过hash计算，以及链表查找，已经确定了put的位置&lt;code&gt;X&lt;/code&gt;，但是这时候cpu时间片到了，A线程不得不退出put操作的执行，这时候B线程获得了cpu时间片，在&lt;code&gt;X&lt;/code&gt;的位置进行插入值，如果A线程再执行put操作就会覆盖以前的值，此时数据就不一致了。&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;多线程resize()操作&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;当多个线程进行resize()操作时，假如table已经变成新数组，那么下一个线程会使用已经被赋值过得的table做为初始值进行操作。这样可能就会出现死循环的操作。&lt;/p&gt;
&lt;p&gt;至于怎么避免HashMap的多线程安全问题，ConcurrentHashMap是一个好东西，至于它是怎么解决并发的问题，我们下次再聊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HashMap其实并不是很难，我们主要是要理解它储存元素的思想与方法。而通过源代码，我们能够更好的理解设计的理念&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 24 Feb 2019 18:09:00 +0000</pubDate>
<dc:creator>段小辉</dc:creator>
<og:description>以最简单的方式讲HashMap HashMap可以说是面试中最常出现的名词，这次头条的一面，第一个问的问题就是HashMap。所以就让我们来探讨下HashMap吧。 &lt;!-- more --&amp;g</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuiduan/p/10428906.html</dc:identifier>
</item>
<item>
<title>编程语言居然是魔法咒语！ - 鬼柒</title>
<link>http://www.cnblogs.com/7rhythm/p/10428889.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/7rhythm/p/10428889.html</guid>
<description>&lt;p&gt;&amp;#13;
                                    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&lt;/button&gt;&amp;#13;
                                    &lt;h4 class=&quot;modal-title&quot;&gt;&amp;#13;
                                        请完成人机识别验证&amp;#13;
                                    &lt;/h4&gt;&amp;#13;
                                &lt;/p&gt;
                                &lt;div class=&quot;modal-body&quot; readability=&quot;33&quot;&gt;
                                    
                                    &lt;p&gt;&amp;#13;
                                        &lt;span id=&quot;geetestLoading&quot;&gt; 验证码组件加载中,请稍后...&lt;/span&gt;&amp;#13;
                                    &lt;/p&gt;
                                &lt;/div&gt;
                            </description>
<pubDate>Sun, 24 Feb 2019 17:54:00 +0000</pubDate>
<dc:creator>鬼柒</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://passport.cnblogs.com/user/signin?ReturnUrl=https%3A%2F%2Fwww.cnblogs.com%2F7rhythm%2Fp%2F10428889.html&amp;AspxAutoDetectCookieSupport=1</dc:identifier>
</item>
<item>
<title>服务注册中心之ZooKeeper系列(二) 实现一个简单微服务之间调用的例子 - MicroHeart！</title>
<link>http://www.cnblogs.com/MicroHeart/p/10428778.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MicroHeart/p/10428778.html</guid>
<description>&lt;p&gt;　　上一篇文章简单介绍了ZooKeeper，讲了分布式中，每个微服务都会部署到多台服务器上，那服务之间的调用是怎么样的呢？如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/794803/201902/794803-20190225005020535-980487357.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　1、集群A中的服务调用者如何发现集群B中的服务提供者呢？&lt;/p&gt;
&lt;p&gt;　　2、集群A中的服务调用者如何选择集群B中的某一台服务提供者去调用呢？&lt;/p&gt;
&lt;p&gt;　　3、集群B中某台机器下线，集群A怎么避免下次调用不在使用这台掉线的机器？&lt;/p&gt;
&lt;p&gt;　　4、集群B提供的某个服务如何获知集群A中哪些机器正在消费该服务？&lt;/p&gt;
&lt;p&gt;　　这篇文章写两个微服务，将两个服务部署到多台服务器中 ，通过将服务注册到ZooKeeper中，实现服务之间的调用。最终实现下面的ZooKeeper节点，然后通过服务节点下的地址，进行远程调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/794803/201902/794803-20190225000111804-1727811392.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;一、服务实现&lt;/h2&gt;
&lt;p&gt;　　一个获取订单的服务和顾客信息的服务，服务之间调用是通过订单服务查询此订单顾客的信息。 涉及的两个实体Order和Customer.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Custormer //顾客实体
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Phone { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Order //订单实体
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; CustomerId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Goods { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Address { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;&lt;span&gt; Custormer Custormer;&lt;/span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;订单实体中包含此订单顾客的引用。&lt;/p&gt;
&lt;p&gt; 创建一个订单微服务项目，实现获取订单列表的服务：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        [Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Order/GetOrders&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;List&amp;lt;Order&amp;gt;&amp;gt;&lt;span&gt; GetOrders()
        {
            List&lt;/span&gt;&amp;lt;Order&amp;gt; orders = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Order&amp;gt;&lt;span&gt;();

            Order order &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            HttpClient client &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpClient();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;10&lt;/span&gt;; i++&lt;span&gt;)
            {
                order &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Order();
                order.Address &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;浙江省杭州市拱墅区北部软件园&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; i;
                order.CustomerId &lt;/span&gt;=&lt;span&gt; i;
                order.Goods &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;麻辣香锅&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; i;
                order.Id &lt;/span&gt;=&lt;span&gt; i;
               &lt;span&gt;//这里需要调用获取顾客信息服务，获取顾客信息。这里先写null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;
                order.Custormer =&lt;/span&gt;&lt;span&gt;&lt;span&gt; null;&lt;/span&gt;

                orders.Add(order);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; orders;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 创建一个顾客微服务项目，实现获取顾客信息的服务：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerController : ControllerBase
    {
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Customer/GetCustomer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Custormer GetCustomer(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; Id)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Custormer() { Id=Id,Name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MicroHeart&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+Id,Phone=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1234567&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;};
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;二、服务注册到ZooKeeper中&lt;/h2&gt;
&lt;p&gt;　　两个服务写完了，上篇讲的在服务启动的时候，需要将服务注册到ZooKeeper中，服务调用者启动的时候，将服务提供或者信息从注册中心下拉倒服务调用者本机缓存。当需要调用服务时，从本地缓存列表中找到服务提供者的地址列表，基于某种负载均衡策略(随机、轮询等)选择一台服务器发起远程调用。&lt;/p&gt;
&lt;p&gt;　　在两个项目中的Startup构造函数中，调用下面方法，保证服务启动时就在ZooKeeper中注册服务。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; InitZooKeeper()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; MyApp = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/MyApp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建ZooKeeper 我就不在本地创建了 客户端和服务端都在本地的话，会造成误会&lt;/span&gt;
            ZooKeeper zooKeeper = &lt;span&gt;new&lt;/span&gt; ZooKeeper(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;118.24.96.212:2181&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;50000&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyWatcher());

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建 MyApp节点，数据为:MyAppData 权限控制为：开放  节点类型为：持久性节点&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (zooKeeper.existsAsync(MyApp) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                zooKeeper.createAsync(MyApp, Encoding.UTF8.GetBytes(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MyAppData&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过反射获取所有Controller下的方法，在获取方法上的Route特性，通过特性设置ZooKeeper节点。&lt;/span&gt;
            Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&amp;gt; serviceAndApiPaths = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; types =&lt;span&gt; System.Reflection.Assembly.GetExecutingAssembly().GetTypes();
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; type &lt;span&gt;in&lt;/span&gt;&lt;span&gt; types)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (type.BaseType == &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(ControllerBase))
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; methods =&lt;span&gt; type.GetMethods();
                    &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; method &lt;span&gt;in&lt;/span&gt;&lt;span&gt; methods)
                    {
                        &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; customAttribute &lt;span&gt;in&lt;/span&gt;&lt;span&gt; method.CustomAttributes)
                        {
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (customAttribute.AttributeType == &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(RouteAttribute))
                            {
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; serviceName = type.Name.Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Controller&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Services&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;serviceAndApiPaths.Keys.Contains(serviceName))
                                {
                                    List&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; apiPaths = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();&lt;br/&gt;　　　　　　　　　　　　　　　　　　　　　&lt;span&gt;//因为Route的值带&quot;/&quot; 会导致ZooKeeper认为是节点符号，所以要转换一下&lt;/span&gt;
                                    apiPaths.Add(customAttribute.ConstructorArguments[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;].ToString().Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                                    serviceAndApiPaths.Add(serviceName, apiPaths);
                                }
                                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                                    serviceAndApiPaths[serviceName].Add(customAttribute.ConstructorArguments[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;].ToString().Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                            }
                        }
                    }
                }
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将这些接口列表 放到MyApp节点下 &lt;/span&gt;
            &lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; serviceAndApiPaths)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建 服务节点，为持久性节点&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (zooKeeper.existsAsync($&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;{MyApp}/{item.Key}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    zooKeeper.createAsync($&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;{MyApp}/{item.Key}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; apiPath &lt;span&gt;in&lt;/span&gt;&lt;span&gt; item.Value)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建 Api节点，为持久性节点&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt; (zooKeeper.existsAsync($&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;{MyApp}/{item.Key}/{apiPath}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        zooKeeper.createAsync($&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;{MyApp}/{item.Key}/{apiPath}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建 Ip+port 节点，&lt;span&gt;为临时性节点&lt;/span&gt;(由于我本地 不能通过我局域网Ip地址访问，所以我写死127.0.0.1) 写成临时节点 是因为
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当这个客户端与服务端断开时，对应的节点自动消失了。
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IPAddress[] IPList = System.Net.Dns.GetHostEntry(System.Net.Dns.GetHostName()).AddressList;
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;string currentIp = IPList.Where(ip=&amp;gt;ip.AddressFamily==System.Net.Sockets.AddressFamily.InterNetwork).Last().ToString();&lt;/span&gt;
                    &lt;span&gt;string&lt;/span&gt; currentIp = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (zooKeeper.existsAsync($&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;{MyApp}/{item.Key}/{apiPath}/{currentIp}:{Configuration[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Port&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        zooKeeper.createAsync($&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;{MyApp}/{item.Key}/{apiPath}/{currentIp}:{Configuration[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Port&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;, Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
                }
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里简单介绍一下其中使用到的ZooKeeperAPI。&lt;/p&gt;
&lt;p&gt; 　　创建ZooKeeper的构造函数：ZooKeeper(string connectstring, int sessionTimeout, Watcher watcher, bool canBeReadOnly = false); &lt;/p&gt;
&lt;p&gt;　　　　　　connectstring：ZooKeeper服务的地址和端口&lt;/p&gt;
&lt;p&gt;　　　　　　sessionTimeout：连接超时时间，毫秒&lt;/p&gt;
&lt;p&gt;　　　　　　watcher：观察者，相当于一个触发器，自己实现process方法&lt;/p&gt;
&lt;p&gt;　　　　　　canBeReadOnly ：是否是只读权限&lt;/p&gt;
&lt;p&gt;　　创建节点：Task&amp;lt;string&amp;gt; createAsync(string path, byte[] data, List&amp;lt;ACL&amp;gt; acl, CreateMode createMode);&lt;/p&gt;
&lt;p&gt;　　　　　　path：节点路径 必须以“/”开头&lt;/p&gt;
&lt;p&gt;　　　　　　data：节点的数据，数据大小不建议超过2M，数据格式为字节数组。&lt;/p&gt;
&lt;p&gt;　　　　　　acl：权限相关&lt;/p&gt;
&lt;p&gt;　　　　　　createMode：节点的类型(上篇文章讲到的四种类型 持久型节点、持久有序型节点、临时型节点、临时有序型节点)&lt;/p&gt;
&lt;p&gt;　　获取子节点：Task&amp;lt;ChildrenResult&amp;gt; getChildrenAsync(string path, Watcher watcher);&lt;/p&gt;
&lt;p&gt;　　　　　　path：节点路径 必须以“/”开头&lt;/p&gt;
&lt;p&gt;　　　　　　watcher：：观察者，相当于一个触发器&lt;/p&gt;
&lt;p&gt; 上面的代码中服务的端口我没有写死，是通过获取appsettings.json文件中的Port参数值设置。配置文件和Program中的代码如下。我设置顾客服务端口为5000，订单服务端口为5100&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Logging&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogLevel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Warning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
  },
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AllowedHosts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取配置&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; config = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConfigurationBuilder()
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要先设置路径 然后在路径中找到json文件&lt;/span&gt;
&lt;span&gt;                                .SetBasePath(Directory.GetCurrentDirectory())
                                .AddJsonFile($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appsettings.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
                                .Build();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置启动地址和端口号&lt;/span&gt;
&lt;span&gt;            CreateWebHostBuilder(args)
                .UseUrls(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://127.0.0.1:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + config[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;])
                .UseConfiguration(config)
                .Build()
                .Run();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;三、启动服务&lt;/h2&gt;
&lt;p&gt;　　这里介绍一个工具ZooInspector，&lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip%20&quot; target=&quot;_blank&quot;&gt;下载地址&lt;/a&gt;，通过它可以很容易查看ZooKeeper里面的内容。&lt;/p&gt;
&lt;p&gt;　　通过命令启动两个服务，通过ZooInspector看到ZooKeeper结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/794803/201902/794803-20190225003227230-1705522078.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 如果你关闭一个服务窗口，那对应的服务下面的IP列表就会消失，因为这个节点是临时节点。&lt;/p&gt;
&lt;p&gt; 现在我们已经实现了，服务的注册，现在可以回头来继续写刚才还没有完成的订单调用。需改获取订单列表里代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;List&amp;lt;Order&amp;gt;&amp;gt;&lt;span&gt; GetOrders()
        {
            List&lt;/span&gt;&amp;lt;Order&amp;gt; orders = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Order&amp;gt;&lt;span&gt;();

            Order order &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            HttpClient client &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpClient();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;10&lt;/span&gt;; i++&lt;span&gt;)
            {
                order &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Order();
                order.Address &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;浙江省杭州市拱墅区北部软件园&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; i;
                order.CustomerId &lt;/span&gt;=&lt;span&gt; i;
                order.Goods &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;麻辣香锅&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; i;
                order.Id &lt;/span&gt;=&lt;span&gt; i;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接ZooKeeper&lt;/span&gt;
                ZooKeeper zooKeeper = &lt;span&gt;new&lt;/span&gt; ZooKeeper(&lt;span&gt;&quot;118.24.96.212&lt;/span&gt;&lt;span&gt;:2181&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;50000&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyWatcher());&lt;/span&gt;&lt;span&gt;
                ChildrenResult childrenResult &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
　　　　　　　　　　
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;await&lt;/span&gt; zooKeeper.existsAsync(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/MyApp/CustomerServices/Customer-GetCustomer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;br/&gt;　　　　　　　　　　　　&lt;span&gt;//获取所有顾客信息服务的地址&lt;/span&gt;
                    childrenResult &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt; zooKeeper.getChildrenAsync(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/MyApp/CustomerServices/Customer-GetCustomer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成一个随机数 &lt;/span&gt;
                Random random = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; num = random.Next(&lt;span&gt;0&lt;/span&gt;, childrenResult.Children.Count - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过随机数 获取服务列表中随机的一个地址 &lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; url = $&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;http://{childrenResult.Children[num]}/Customer/GetCustomer?Id=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; order.CustomerId;&lt;br/&gt;　　　　　　　　　&lt;span&gt;//调用顾客服务
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; client.GetAsync(url);
               &lt;/span&gt;
                Custormer custormer = JsonConvert.DeserializeObject&amp;lt;Custormer&amp;gt;&lt;span&gt;(result.Content.ReadAsStringAsync().Result);
                order.Custormer &lt;/span&gt;=&lt;span&gt; custormer;

                orders.Add(order);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; orders;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过刚才我们仅仅部署了服务到一台服务器中，现在我们改变端口配置，通过命令启动多个实例。如文章的第二个图，顾客服务配置了3台服务器(其实都在同一电脑)，订单服务也配置了3台服务器，当订单服务调用时，会从中随机选一台服务器，进行调用。&lt;/p&gt;
&lt;p&gt; 通过Postman调用接口，结果中返回了订单列表，且订单中包含顾客信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/794803/201902/794803-20190225010025609-353118261.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;本文源代码在：&lt;a href=&quot;https://github.com/MicroHeartWangZheng/Zookeeper&quot; target=&quot;_blank&quot;&gt;ZooKeeper代码&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;如果你认为文章写的不错，就点个推荐吧。&lt;/h3&gt;

</description>
<pubDate>Sun, 24 Feb 2019 17:07:00 +0000</pubDate>
<dc:creator>MicroHeart！</dc:creator>
<og:description>上一篇文章简单介绍了ZooKeeper，讲了分布式中，每个微服务都会部署到多台服务器上，那服务之间的调用是怎么样的呢？如图： 1、集群A中的服务调用者如何发现集群B中的服务提供者呢？ 2、集群A中的服</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MicroHeart/p/10428778.html</dc:identifier>
</item>
<item>
<title>记一次vue长列表的内存性能分析和优化 - -渔人码头-</title>
<link>http://www.cnblogs.com/imwtr/p/10428819.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imwtr/p/10428819.html</guid>
<description>&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;好久没写东西，博客又长草了，这段时间身心放松了好久，都没什么主题可以写了&lt;/p&gt;
&lt;p&gt;上周接到一个需求，优化vue的一个长列表页面，忙活了很久也到尾声了，内存使用和卡顿都做了一点点优化，还算有点收获&lt;/p&gt;
&lt;p&gt;写的有点啰嗦，可以看一下我是怎么进行这个优化的，也许有点帮助呢&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个长列表页面，其实是一个实时日志上报的页面，随着页面打开时间的增加，日志数量也会增多，常规的页面布局和渲染免不了会遇到性能问题。&lt;/p&gt;
&lt;p&gt;使用了vue框架，框架内部的虚拟DOM和组件缓存已经做了一些优化，比起原生实现是有了一些优化处理。&lt;/p&gt;
&lt;p&gt;但这个页面是用到element-ui的el-table组件，渲染出来的是表格数据列表，众所周知，表格在渲染的时候需要绘制整个表格区，所以，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步就是将表格实现改为其他元素标签实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一步操作之后，其实没什么大的变化的，几千条日志（每条日志还有很多信息）左右，滚动页面明显卡顿严重&lt;/p&gt;
&lt;p&gt;而需求又改不了，日志可以展开查看详情或收起，已经看过的日志在下次看的时候不需要加载，新的日志会实时添加进来&lt;/p&gt;
&lt;p&gt;以前在做大表格数据鼠标滑过行着色的时候，也有严重的卡顿，当时主要的优化手段是不对所有数据进行处理，仅处理视窗可见区域，也可以在这里试试，所以&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步就是仅渲染视窗可见的数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种方案的原理是使用一个大容器作为滚动区域，里面有一个内容区域，JS通过数据数量和每条数据的高度计算出内容区的高度，内容区用padding或绝对定位撑开滚动区域，让容器可滚动，另外就是数据项了，滚动的时候，计算当前滚动位置scrollTop，再从数据项中找出各项的高度，从头到尾计算出此时容器中放什么数据&lt;/p&gt;
&lt;p&gt;哈哈哈 ... 这文字描述简直了，看不懂就不看了吧，可以去看下&lt;a href=&quot;https://juejin.im/entry/5aaf66f56fb9a028c71e403e&quot; target=&quot;_blank&quot;&gt;别人的解说&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;知道原理之后，实现起来也不难，不过代码就写的比较凌乱了，还是使用现成的比较成熟的&lt;a href=&quot;https://github.com/tangbc/vue-virtual-scroll-list&quot; target=&quot;_blank&quot;&gt;vue插件&lt;/a&gt;吧，比较方便&lt;/p&gt;
&lt;p&gt;复制粘贴一顿猛操作之后，页面重新展现出来，想着应该可以收工了吧&lt;/p&gt;
&lt;p&gt;然鹅，测试的时候发现，页面内存使用可以达到一两G，看来不仅要优化卡顿，还要优化内存使用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190224220823395-1258726069.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;还能遇到这种少见的页面崩溃，也算是开了眼了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190224215249501-86288108.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这个方案是把原先页面应该渲染的所有DOM拆分出来，动态地渲染该渲染的部分，&lt;/p&gt;
&lt;p&gt;所以就会有一个问题，动态计算需要时间，当滚动非常快的时候会有明显的卡顿现象，所以&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步就是进行函数节流&lt;/strong&gt;，即控制scroll事件的处理，在规定的时间内仅触发一次&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4b1c7435-3ece-40c5-85ae-36dcdec5afac')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_4b1c7435-3ece-40c5-85ae-36dcdec5afac&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4b1c7435-3ece-40c5-85ae-36dcdec5afac&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4b1c7435-3ece-40c5-85ae-36dcdec5afac',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4b1c7435-3ece-40c5-85ae-36dcdec5afac&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 函数节流，频繁操作中间隔 delay 的时间才处理一次&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; throttle(fn, delay) {
    delay &lt;/span&gt;= delay || 200&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; timer = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每次滚动初始的标识&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; timestamp = 0&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arg =&lt;span&gt; arguments;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; now =&lt;span&gt; Date.now();
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置开始时间&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (timestamp === 0&lt;span&gt;) {
            timestamp &lt;/span&gt;=&lt;span&gt; now;
        }
        
        clearTimeout(timer);
        timer &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 已经到了delay的一段时间，进行处理&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (now - timestamp &amp;gt;=&lt;span&gt; delay) {
            fn.apply(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arg);
            timestamp &lt;/span&gt;=&lt;span&gt; now;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加定时器，确保最后一次的操作也能处理&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            timer &lt;/span&gt;= setTimeout(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                fn.apply(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arg);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 恢复标识&lt;/span&gt;
                timestamp = 0&lt;span&gt;;
            }, delay);
        }
    }
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; count = 0&lt;span&gt;;

window.onscroll &lt;/span&gt;= throttle(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e) {
    console.log(e.type, &lt;/span&gt;++count); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; scroll&lt;/span&gt;
}, 500);
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码参考&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;虽然改善不是很大，但好歹也是一种方案&lt;/p&gt;

&lt;p&gt;接下来是针对这个磨人的内存占用了，也花了蛮多时间去分析去定位，头发又少了几根..&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现象是这样的：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;刚进入页面的时候，最初100条数据，仅渲染30条数据，内存就占用了100+M&lt;/p&gt;
&lt;p&gt;滚动的时候内存蹭蹭蹭往上涨，峰值能到几个G，一段时间后又下降一部分&lt;/p&gt;
&lt;p&gt;随着数据总量的增多，内存最初的占用和最后的占用也不同&lt;/p&gt;
&lt;p&gt;在常规滚动和快速滚动的时候，内存占用也不同&lt;/p&gt;
&lt;p&gt;最后发现在数据总量一定的时候，内存最大占用量是固定的（垃圾回收之后）&lt;/p&gt;

&lt;p&gt;嗯挺奇怪的，实际项目比较复杂，有其他组件干扰，不好排除法分析&lt;/p&gt;
&lt;p&gt;所以就从&lt;a href=&quot;https://tangbc.github.io/vue-virtual-scroll-list/examples/finite/&quot; target=&quot;_blank&quot;&gt;插件给的Demo&lt;/a&gt; 开刀，发现它的表现是一致的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190224222902414-1379842364.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;分析要有数据，实验和方案选取要有对比测试&lt;/p&gt;
&lt;p&gt;所以使用Chrome DevTool 自带的 Memory工具，另外为了避免Chrome插件的影响，在隐身窗口中进行调试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190224223346603-977143331.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面有个强制垃圾回收的按钮，JS垃圾回收机制是什么这里就不说了，可以去搜一下&lt;/p&gt;
&lt;p&gt;目前垃圾回收方案主要都是标记清除法了，而实现主要是根据GC根往下一层层遍历，遍历不到的对象会被垃圾回收掉，当某些对象本应该被回收，但还是能从GC根访问的时候，就产生了内存泄漏，主要需要考虑两类内存泄漏：普通JS的对象，游离的DOM节点（本该被回收，却还有对象引用它）&lt;/p&gt;
&lt;p&gt;垃圾回收的时间点是不固定的，随机的，我们在代码中没法控制&lt;/p&gt;
&lt;p&gt;点击左边的第一个小圆圈就可以开始分析了，一般来说分析之前都会自动进行垃圾回收，不过为了更准确，可以再强制点按钮回收一次&lt;/p&gt;
&lt;p&gt;常用的主要就是两种分析方式：&lt;/p&gt;
&lt;p&gt;第一种是进行堆快照（JS的对象一般放在堆中），查看当前的内存分布情况&lt;/p&gt;
&lt;p&gt;第二种是进行内存时间线分析，查看一顿操作之后的内存增长情况，主要针对这个操作过程（这个时候可以结合Performance标签功能中来分析）&lt;/p&gt;

&lt;p&gt;上图中左侧是两个快照的结果，64.5M是进入页面之后的内存快照，149M是各种操作之后的内存快照&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;VirtualList &lt;/span&gt;&lt;span&gt;:size&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; :remain&lt;/span&gt;&lt;span&gt;=&quot;6&quot;&lt;/span&gt;&lt;span&gt; :bench&lt;/span&gt;&lt;span&gt;=&quot;44&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;list&quot;&lt;/span&gt;&lt;span&gt; :start&lt;/span&gt;&lt;span&gt;=&quot;startIndex&quot;&lt;/span&gt;&lt;span&gt; :debounce&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Item &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;(udf, index) of items&quot;&lt;/span&gt;&lt;span&gt; :index&lt;/span&gt;&lt;span&gt;=&quot;index&quot;&lt;/span&gt;&lt;span&gt; :key&lt;/span&gt;&lt;span&gt;=&quot;index&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Item&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;VirtualList&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个长列表总共10w条数据，仅仅渲染了50条（6 + 44）数据，每条数据仅仅是短短的字符串，不该占用这么多内存&lt;/p&gt;
&lt;p&gt;去看下内存具体占用情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190224225215326-426589929.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;内容有点多，因为用的是vue，所以我们只需要关注比较重要的虚拟DOM对象 VNode和渲染的组件就行了&lt;/p&gt;
&lt;p&gt;VNode基本就是所有的数据了，VueComponent是当前渲染的，所以，这里的VNode是不是有很多内存浪费了，与之关联的很多东西也占坑了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190224225650762-200461457.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看看字符串内容，每条仅仅占用了32字节，所以这里想到的一个点是要缩减Item项的数量&lt;/p&gt;
&lt;p&gt;然后，想想为什么所有虚拟DOM都留在了内存中呢，展开一个来看对象的引用关系，有一个$slot.default&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190224230202953-353009066.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后回去看看&lt;a href=&quot;https://github.com/tangbc/vue-virtual-scroll-list/blob/master/index.js&quot; target=&quot;_blank&quot;&gt;插件的实现&lt;/a&gt;，插件是将所有子项目都放到了子元素中，以slot的方式插入，然后在内部抽出进行再创建&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190224230514694-1361408258.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190224230659599-399446450.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 容器组件在重新渲染的时候，确实能触发了组件的销毁函数 destroy，而这个也将对象间的关系清的干干净净的了&lt;/p&gt;
&lt;p&gt;具体可以看vue中组件是怎么销毁的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
Vue.prototype.$destroy = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; vm = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (vm._isBeingDestroyed) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;
      }
      callHook(vm, &lt;/span&gt;'beforeDestroy'&lt;span&gt;);
      vm._isBeingDestroyed &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; remove self from parent&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt; parent =&lt;span&gt; vm.$parent;
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (parent &amp;amp;&amp;amp; !parent._isBeingDestroyed &amp;amp;&amp;amp; !&lt;span&gt;vm.$options.abstract) {
        remove(parent.$children, vm);
      }
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; teardown watchers&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (vm._watcher) {
        vm._watcher.teardown();
      }
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; i =&lt;span&gt; vm._watchers.length;
      &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (i--&lt;span&gt;) {
        vm._watchers[i].teardown();
      }
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; remove reference from data ob&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; frozen object may not have observer.&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (vm._data.__ob__) {
        vm._data.__ob__.vmCount&lt;/span&gt;--&lt;span&gt;;
      }
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; call the last hook...&lt;/span&gt;
      vm._isDestroyed = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; invoke destroy hooks on current rendered tree&lt;/span&gt;
      vm.__patch__(vm._vnode, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; fire destroyed hook&lt;/span&gt;
      callHook(vm, 'destroyed'&lt;span&gt;);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; turn off all instance listeners.&lt;/span&gt;
&lt;span&gt;      vm.$off();
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; remove __vue__ reference&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (vm.$el) {
        vm.$el.__vue__ &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
      }
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; release circular reference (#6759)&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (vm.$vnode) {
        vm.$vnode.parent &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
      }
    };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把$vnode的对象关系都切的差不多了，但slot方式的使用下是处理不了的，所以在垃圾回收之后，内存中的vnode对象非常多&lt;/p&gt;
&lt;p&gt;再来看看内存占用的最大值&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190224231246049-927446862.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以发现VNode增长了一部分，而最为瞩目的是VueComponent数量竟然有那么多，按道理应该只有渲染的几个组件的&lt;/p&gt;
&lt;p&gt;为了做对比，我们一般使用comparison对比两个快照，看看相差的地方&lt;/p&gt;
&lt;p&gt;相关使用可以去&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/&quot; target=&quot;_blank&quot;&gt;看文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有兴趣的也可以导入我这两个快照自行分析 &lt;a href=&quot;https://pan.baidu.com/s/1sTEj0am1olcO8D7wfroonw&quot; target=&quot;_blank&quot;&gt;default&lt;/a&gt;  &lt;a href=&quot;https://pan.baidu.com/s/17WwUwoWwow7jxP2t5QFdHg&quot; target=&quot;_blank&quot;&gt;maximum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190224231540492-1540597277.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这段时间里创建的vue对象基本没能被清理掉，说明有很多不应该出现的对象引用关系，其中detached HTMLDivElement是指游离的DOM对象，一般用于分析DOM相关的内存泄漏，可以猜测出这里的主角应该是vue的组件&lt;/p&gt;
&lt;p&gt;挑一个组件来看看，可以发现它还是和slot有关的，所以滚动期间创建的组件，属于VNode节点的componentInstance属性，而VNode节点没法被回收，所以组件驻留在内存中&lt;/p&gt;
&lt;p&gt;接下来的问题是，既然一开始VNode是所有的数据了，为何在滚动期间，还会有那么多VNode会创建出来&lt;/p&gt;
&lt;p&gt;挑一个这期间增加的VNode来看看引用关系，可以发现VNode中有两种，增加的是不同的_vnode&lt;/p&gt;
&lt;p&gt;@后面带的是对象的id，另外我们也可以在调试的时候，console打印出它们是不同的对象&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190224232927964-344638705.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;经过上面各种分析，有&lt;strong&gt;两个问题需要去解决&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;减少驻留的VNode和Vue组件&lt;/p&gt;
&lt;p&gt;减少操作期间增加的对象&lt;/p&gt;

&lt;p&gt;减少驻留，即不用slot的方式，那只能改插件了&lt;/p&gt;
&lt;p&gt;插件中vm.$slots.default 获取到的是vnode节点，然后再使用render函数传递vnode进行创建组件并渲染&lt;/p&gt;
&lt;p&gt;由此想来，我们也可以自己创建vnode节点，&lt;/p&gt;
&lt;p&gt;不直接写成子组件，而是将纯粹的数据项和组件单元传递给插件，让插件来创建vnode节点&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;VirtualList &lt;/span&gt;&lt;span&gt;:size&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; :remain&lt;/span&gt;&lt;span&gt;=&quot;6&quot;&lt;/span&gt;&lt;span&gt; :bench&lt;/span&gt;&lt;span&gt;=&quot;44&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;list&quot;&lt;/span&gt;&lt;span&gt; :start&lt;/span&gt;&lt;span&gt;=&quot;startIndex&quot;&lt;/span&gt;&lt;span&gt;
            :items&lt;/span&gt;&lt;span&gt;=&quot;items&quot;&lt;/span&gt;&lt;span&gt; :item-component&lt;/span&gt;&lt;span&gt;=&quot;itemComponent&quot;&lt;/span&gt;&lt;span&gt; :item-binding&lt;/span&gt;&lt;span&gt;=&quot;itemBinding&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;VirtualList&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;items 是数据项，itemComponent是 import 进来的一个组件单元，itemBinding是一个函数，返回类似&lt;a href=&quot;https://cn.vuejs.org/v2/guide/render-function.html#%E6%B7%B1%E5%85%A5-data-%E5%AF%B9%E8%B1%A1&quot; target=&quot;_blank&quot;&gt;渲染函数的data对象&lt;/a&gt;，用以传递属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;itemBinding(item, idx) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
                    key: item,
                    props: {
                        index: item
                    }
                };

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; return {&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     key: item.id,&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     props: {&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         index: item.num,&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     },&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     nativeOn: {&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         dblclick: (...args) =&amp;gt; {&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;             console.log(idx, 'dblclick');&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         }&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     }&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
            }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在插件内部，接收传递进来的items和itemComponent，构造出相应的vnodes，当然slots方式也可以支持&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = delta.start; i &amp;lt;= Math.ceil(delta.end); i++&lt;span&gt;) {
                    targets.push(&lt;/span&gt;!&lt;span&gt;this&lt;/span&gt;.itemComponent ?&lt;span&gt; slots[i]
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; create vnode, using custom attrs binder&lt;/span&gt;
                        : &lt;span&gt;this&lt;/span&gt;.$createElement(&lt;span&gt;this&lt;/span&gt;.itemComponent, &lt;span&gt;this&lt;/span&gt;.itemBinding(&lt;span&gt;this&lt;/span&gt;.items[i], i) ||&lt;span&gt; {})
                    )
                }

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; targets
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完整的代码实例可以&lt;a href=&quot;https://github.com/imwtr/vue-virtual-scroll-list/blob/memory-saving/examples/finite-m/finite.vue&quot; target=&quot;_blank&quot;&gt;看这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解决办法挺简单的，虽然这一步创建会耗费一些时间，不过测试发现，跟原先的做法差不多的，原先的也需要创建&lt;/p&gt;
&lt;p&gt;来看看优化之后的内存占用情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190224234906565-1003963796.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190224234659370-779811264.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同样的数据，最初进入页面占用5M，各种操作之后也差不多，操作之中创建的vue对象基本被清理掉了，且对象数量还算符合预期&lt;/p&gt;
&lt;p&gt;在当前10万条简单数据下，内存使用初始减小成1/13，最大减小成1/26，而且随着总数量的增加，优化比率也更高&lt;/p&gt;
&lt;p&gt;在实际项目组件复杂的情况下使用，400条日志，内存使用大概由400M到80M，优化率达到了1/5，也挺可观&lt;/p&gt;

&lt;p&gt;接下来考虑一下如何减少操作期间增加的对象&lt;/p&gt;
&lt;p&gt;这就需要收集一些操作过程中的数据了&lt;/p&gt;
&lt;p&gt;分析过程，我比较喜欢用Performance面板，这里有非常详细的函数调用栈，&lt;/p&gt;
&lt;p&gt;另外还要使用调试大法，由最开始的onScroll事件入口开始，一步一步地理解组件创建更新销毁过程，看看哪些地方合不合理，能不能在上游在外部间接地改进&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190225000549362-1060723095.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击左侧小圆圈开始记录，然后滚动一段时间，然后结束记录，查看收集的信息&lt;/p&gt;
&lt;p&gt;勾选了右上角的memory选项框知乎，这个面板也可以查看内存的使用，不过记得手动进行一次垃圾回收（那个按钮），因为它一般在记录之前不会自动调用&lt;/p&gt;
&lt;p&gt;可以发现还是比较规律的，挑这段略为明显的进行分析&lt;/p&gt;
&lt;p&gt;有兴趣的也可以自己导入&lt;a href=&quot;https://pan.baidu.com/s/1bTW_VJlFWlGO8gxJbM0Blw&quot; target=&quot;_blank&quot;&gt;我这份数据&lt;/a&gt;进行分析&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190225001147714-5195914.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以发现这里发生了组件的更新，$mount和$destroy的调用，是发生在插件重新渲染可视区域组件的时候&lt;/p&gt;
&lt;p&gt;找到关键的地方，调试分析发现每次都会创建新的VNode对象&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190225001559341-115411283.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190225001612148-167144589.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201902/688270-20190225001718369-5959405.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样看来，操作期间创建的对象是避免不了的了，只能通过减少操作期间函数执行的次数了，即最初提到的函数节流&lt;/p&gt;
&lt;p&gt;而组件销毁的时候，会判断组件是否为keepAlive型，可以尝试一下给Item组件加上，这能解决操作期间组件创建和销毁带来的内存开销，不过会导致所有组件都会驻留在内存中，综合考虑下，这种方案不可取&lt;/p&gt;
&lt;p&gt;最后想想，再挤出一点优化方案，既然操作过程中会创建组件，而组件里可能还有子组件，所以，还可以优化子组件&lt;/p&gt;
&lt;p&gt;即Item组件内部，能不用组件的可以不用组件，改为普通HTMl标签代替，经过测试，确实能改善那么一丢丢&lt;/p&gt;

&lt;p&gt;一个性能问题的排查分析和解决，文章略长略啰嗦，到这里就结束了&lt;/p&gt;
&lt;p&gt;总结一下，主要的五个优化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 将表格实现改为其他元素标签实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 仅渲染视窗可见的数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt;进行函数节流&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;4. 减少驻留的VNode和Vue组件，不使用显示的子组件slot方式，改为手动创建虚拟DOM来切断对象引用&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;5. 减少操作期间增加的对象，操作时组件必然会更新创建，可以减少组件中子组件的数量&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 24 Feb 2019 16:39:00 +0000</pubDate>
<dc:creator>-渔人码头-</dc:creator>
<og:description>好久没写东西，博客又长草了，这段时间身心放松了好久，都没什么主题可以写了 上周接到一个需求，优化vue的一个长列表页面，忙活了很久也到尾声了，内存使用和卡顿都做了一点点优化，还算有点收获 写的有点啰嗦</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/imwtr/p/10428819.html</dc:identifier>
</item>
<item>
<title>mysql数据库引擎InnoDB和MyISAM - FOEVERYANG</title>
<link>http://www.cnblogs.com/lsgspace/p/10428808.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lsgspace/p/10428808.html</guid>
<description>&lt;h2&gt;一.Mysql锁分类　　&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;表级锁：开销小，加锁块；不会出现死锁，锁定粒度大，发生锁冲突的概率最高，并发度最低。&lt;/li&gt;
&lt;li&gt;行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发性也最高。&lt;/li&gt;
&lt;li&gt;页面锁：开销和加锁界于表锁和行锁之间，会出现死锁；锁定粒度界与表锁和行锁之间，并发一般。&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;二.MyISAM&lt;/h2&gt;
&lt;h3&gt;1.开门见山&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;1.MyISAM不支持事物；&lt;/li&gt;
&lt;li&gt;2.MyISAM只支持&lt;strong&gt;表锁&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;不能在表损坏后恢复数据;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;MyISAM表锁有两种模式：表共享读锁（table read lock）和表独占写锁（table write lock），锁的解释如下：　&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;myISAM表的读操作，不会阻塞其他用户对同一个表的读请求，但会阻塞对同一个表的写请求。&lt;/li&gt;
&lt;li&gt;myISAM表的写操作，会阻塞其他用户对同一个表的读和写操作。&lt;/li&gt;
&lt;li&gt;myISAM表的读、写操作之间、以及写操作之间是串行的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;适合在以下几种情况下使用：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;做很多count的计算&lt;/li&gt;
&lt;li&gt;查询非常频繁&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;MyISAM在执行查询前，会自动执行表的加锁、解锁操作，一般情况下不需要用户手动加、解锁，但是有的时候也需要显示加锁。当然也可以用union做关联查询代替&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; lock &lt;span&gt;table&lt;/span&gt; t1 &lt;span&gt;read&lt;/span&gt;, t2 &lt;span&gt;read&lt;/span&gt;&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;(t1.id) &lt;span&gt;as&lt;/span&gt; &lt;span&gt;'total&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; t1;  
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;(t2.id) &lt;span&gt;as&lt;/span&gt; &lt;span&gt;'total&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; t2;  
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; unlock tables; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;p&gt;1.在锁定表时候，如果加上关键字&lt;span&gt;local&lt;/span&gt;，满足&lt;span&gt;myISAM表的并发插入问题 。&lt;/span&gt;eg： lock table t3 read local;&lt;/p&gt;
&lt;p&gt;2.使用locak tables 给表加锁时候，必须同时给所有涉及到的表加锁，因为加锁之后，当前会话，就不能操作没有加锁的表。&lt;/p&gt;
&lt;h3&gt;2.并发插入问题&lt;/h3&gt;
&lt;p&gt;MyIAM表的读和写是串行的，但是这是就总体而言，在一定条件下MyISAM表也支持查询和插入操作的并发进行.&lt;/p&gt;
&lt;p&gt;MyISAM存储引擎有一个系统变量&lt;span&gt;concurrent_insert&lt;/span&gt;,专门用于充值其并发插入的行为，其值分别可以为0,1和2　&lt;/p&gt;
&lt;div readability=&quot;32&quot;&gt;
&lt;div readability=&quot;13&quot;&gt;
&lt;p&gt;当concurrent_insert = 0 时，不允许并发插入&lt;/p&gt;
&lt;p&gt;当concurrent_insert = 1时，如果myisam表中没有空洞（即表的中间没有被删除的行），myisam允许在一个进程读表的同时，另一个进程从表尾插入记录&lt;/p&gt;
&lt;p&gt;当concurrent_insert = 2时，无论myisam表中有没有空洞，都允许在表尾并发插入记录&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt; 3.MyISAM锁调度问题&lt;/strong&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;p&gt;　　MyISAM存储引擎的读锁和写锁是互斥的，读写操作室串行的，那么如果读写两个进程同时请求同一张表，Mysql将会使写进程先获得锁。不仅仅如此，即使读请求先到达锁等待队列，写锁后到达，写锁也会先执行。因为mysql因为写请求比读请求更加重要。这也正是MyISAM不适合含有大量更新操作和查询操作应用的原因。&lt;/p&gt;
&lt;p&gt;调节办法：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通过指定启动参数low-priority-updates,使MyISAM引擎默认给与读请求优先的权限&lt;/li&gt;
&lt;li&gt;通过执行set low_PRIORITY_UPDATES=1，降低更新请求的优先级。&lt;/li&gt;
&lt;li&gt;指定INSERT、UPDATE、DELETE语句的LOW_PRIORITY属性。&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;三.InnoDB存储引擎&lt;/h2&gt;
&lt;h3&gt;1.开门见山&lt;/h3&gt;
&lt;p&gt;　　具有提交、回滚和崩溃恢复能力的事务安全（ACID兼容）存储引擎。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;支持事物和外键&lt;/li&gt;
&lt;li&gt;默认是行锁&lt;/li&gt;
&lt;li&gt;支持数据恢复&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;　　注意：行锁在某些情况下会变成表锁，比如SQL的更新（update）或者删除（delete）语句中未使用到索引，导致在InnoDB在对数据进行相应操作的时候必须把整个表锁起来进行检索（表锁）。而如果使用了索引的话，InnoDB只会通过索引条件检索数据，而只锁住索引对应的行（行锁）。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;2.实例分析&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;问题&lt;/strong&gt;&lt;strong&gt;描述：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;系统中有一个实时的定时任务，当有条件触发的时候，会更新对应的A表；&lt;/li&gt;
&lt;li&gt;但是同时有另外一个对A表的写操作，因此当进行测试的时候，有时候会不固定的出“&lt;span&gt;Lock wait timeout exceeded&lt;/span&gt;”的错误。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　当出现这个问题的时候，从很多的地方进行了分析，然后都无法得到正确的解决方案（因为描述1模块不是我写的，所以没有去查看更新表的代码操作）&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;可能的原因：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　    在描述1中定时任务更新表A的时候，更新条件中没有使用索引，导致当进行定时任务更新表的时候形成了表锁。然后因为表A数据量比较大，检索较慢，然后导致了描述2中对表A的写操作的等锁超时。&lt;/p&gt;
&lt;h3&gt;3.适用的场景&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;更新和查询都相当的频繁，多重并发&lt;/li&gt;
&lt;li&gt;要求事务，或者可靠性要求比较高&lt;/li&gt;
&lt;li&gt;外键约束，MySQL支持外键的存储引擎只有InnoDB&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　&lt;span&gt;一般来说，如果需要事务支持，并且有较高的并发读取频率，InnoDB是不错的选择。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p class=&quot;alt&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Sun, 24 Feb 2019 16:28:00 +0000</pubDate>
<dc:creator>FOEVERYANG</dc:creator>
<og:description>一.Mysql锁分类 二.MyISAM 1.开门见山 MyISAM表锁有两种模式：表共享读锁（table read lock）和表独占写锁（table write lock），锁的解释如下： myIS</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lsgspace/p/10428808.html</dc:identifier>
</item>
<item>
<title>大数据技术之_08_Hive学习_01_Hive入门+Hive安装、配置和使用+Hive数据类型 - 黑泽君</title>
<link>http://www.cnblogs.com/chenmingjun/p/10428809.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenmingjun/p/10428809.html</guid>
<description>&lt;p id=&quot;tocid_0&quot; class=&quot;toc&quot;&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h1hive&quot;&gt;第1章 Hive入门&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h11hive&quot;&gt;1.1 什么是Hive&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h12hive&quot;&gt;1.2 Hive的优缺点&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h121&quot;&gt;1.2.1 优点&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h122&quot;&gt;1.2.2 缺点&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h13hive&quot;&gt;1.3 Hive架构原理&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h14hive&quot;&gt;1.4 Hive和数据库比较&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h141&quot;&gt;1.4.1 查询语言&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h142&quot;&gt;1.4.2 数据存储位置&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h143&quot;&gt;1.4.3 数据更新&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h144&quot;&gt;1.4.4 索引&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h145&quot;&gt;1.4.5 执行&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h146&quot;&gt;1.4.6 执行延迟&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h147&quot;&gt;1.4.7 可扩展性&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h148&quot;&gt;1.4.8 数据规模&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h2hive&quot;&gt;第2章 Hive安装、配置和使用&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h21hive&quot;&gt;2.1 Hive安装地址&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h22hive&quot;&gt;2.2 Hive安装部署&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h23hive&quot;&gt;2.3 将本地文件导入Hive案例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h24mysql&quot;&gt;2.4 MySql安装&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h241&quot;&gt;2.4.1 安装包准备&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h242mysql&quot;&gt;2.4.2 安装MySql服务器&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h243mysql&quot;&gt;2.4.3 安装MySql客户端&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h244mysqluser&quot;&gt;2.4.4 MySql中user表中主机配置&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h25hivemysql&quot;&gt;2.5 Hive元数据配置到MySql&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h251&quot;&gt;2.5.1 驱动拷贝&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h252metastoremysql&quot;&gt;2.5.2 配置metastore到MySql&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h253hive&quot;&gt;2.5.3 多窗口启动Hive测试&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h26hivejdbc&quot;&gt;2.6 Hive JDBC访问&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h261hiveserver2&quot;&gt;2.6.1 启动hiveserver2服务&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h262beeline&quot;&gt;2.6.2 启动beeline&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h263hiveserver2&quot;&gt;2.6.3 连接hiveserver2&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h27hive&quot;&gt;2.7 Hive常用交互命令&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h28hive&quot;&gt;2.8 Hive其他命令操作&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h29hive&quot;&gt;2.9 Hive常见属性配置&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h291hive&quot;&gt;2.9.1 Hive数据仓库位置配置&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h292hive&quot;&gt;2.9.2 Hive查询后信息显示配置&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h293hive&quot;&gt;2.9.3 Hive运行日志信息配置&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h294hive&quot;&gt;2.9.4 Hive参数配置方式&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h3hive&quot;&gt;第3章 Hive数据类型&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h31&quot;&gt;3.1 基本数据类型&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h32&quot;&gt;3.2 集合数据类型&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10428809.html#h33&quot;&gt;3.3 类型转化&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;h1hive&quot;&gt;&lt;span&gt;&lt;strong&gt;第1章 Hive入门&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h11hive&quot;&gt;&lt;span&gt;&lt;strong&gt;1.1 什么是Hive&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  Hive：由Facebook开源用于解决海量结构化日志的数据统计（分析框架）。&lt;br/&gt;  Hive是基于Hadoop的一个&lt;code&gt;数据仓库工具&lt;/code&gt;，可以将&lt;code&gt;结构化的数据文件映射为一张表&lt;/code&gt;，并提供&lt;code&gt;类SQL&lt;/code&gt;查询功能。&lt;br/&gt;  &lt;code&gt;本质是：将HQL转化成MapReduce程序&lt;/code&gt;。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/25/k5m1sA.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;  1）Hive处理的数据存储在HDFS上。&lt;br/&gt;  2）Hive分析数据底层的实现是MapReduce。&lt;br/&gt;  3）执行程序运行在Yarn上。&lt;br/&gt;  即Hive类似于一个Hadoop的客户端，所以Hive不涉及集群的概念，可以安装多个。
&lt;h3 id=&quot;h12hive&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2 Hive的优缺点&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h121&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2.1 优点&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  1) 操作接口采用&lt;code&gt;类SQL语法&lt;/code&gt;，提供快速开发的能力（简单、容易上手）。&lt;br/&gt;  2) 避免了去写MapReduce，减少开发人员的学习成本。&lt;br/&gt;  3) Hive的&lt;code&gt;执行延迟比较高&lt;/code&gt;，因此Hive常用于数据分析，对实时性要求不高的场合。&lt;br/&gt;  4) Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高。&lt;br/&gt;  5) Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数，扩展性好。&lt;/p&gt;
&lt;h4 id=&quot;h122&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2.2 缺点&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1、Hive的HQL表达能力有限&lt;br/&gt;  （1）迭代式算法无法表达（算法，机器学习，即多个MapReduce串联的局限性）&lt;br/&gt;  （2）数据挖掘方面不擅长（不善于“啤酒+纸尿布案列”，善于数据分析）&lt;br/&gt;2、Hive的效率比较低&lt;br/&gt;  （1）Hive自动生成的MapReduce作业，通常情况下不够智能化&lt;br/&gt;  （2）Hive调优比较困难，粒度较粗&lt;/p&gt;
&lt;h3 id=&quot;h13hive&quot;&gt;&lt;span&gt;&lt;strong&gt;1.3 Hive架构原理&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/25/k5mKRe.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;1、用户接口：Client&lt;br/&gt;  CLI（hive shell）、JDBC/ODBC(java访问hive)、WEBUI（浏览器访问hive）&lt;br/&gt;2、元数据：Metastore&lt;br/&gt;  元数据包括：表名、表所属的数据库（默认是default）、表的拥有者、列/分区字段、表的类型（是否是外部表）、表的数据所在目录等。&lt;br/&gt;  默认存储在自带的derby数据库中，推荐使用MySQL存储Metastore。&lt;br/&gt;3、Hadoop&lt;br/&gt;  使用HDFS进行存储，使用MapReduce进行计算。&lt;br/&gt;4、驱动器：Driver&lt;br/&gt;  （1）解析器（SQL Parser）：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。&lt;br/&gt;  （2）编译器（Physical Plan）：将AST编译生成逻辑执行计划。&lt;br/&gt;  （3）优化器（Query Optimizer）：对逻辑执行计划进行优化。&lt;br/&gt;  （4）执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR/Spark。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/25/k5muGD.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;  Hive通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的Driver，结合元数据(MetaStore)，将这些指令翻译成MapReduce，提交到Hadoop中执行，最后，将执行返回的结果输出到用户交互接口。
&lt;h3 id=&quot;h14hive&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4 Hive和数据库比较&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  由于 Hive 采用了类似SQL 的查询语言 HQL(Hive Query Language)，因此很容易将 Hive 理解为数据库。其实从结构上来看，Hive 和数据库除了拥有类似的查询语言，再无类似之处。本文将从多个方面来阐述 Hive 和数据库的差异。数据库可以用在 Online 的应用中，但是 Hive 是为数据仓库而设计的，清楚这一点，有助于从应用角度理解 Hive 的特性。&lt;/p&gt;
&lt;h4 id=&quot;h141&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4.1 查询语言&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  由于SQL被广泛的应用在数据仓库中，因此，专门针对 Hive 的特性设计了类SQL的查询语言HQL。熟悉SQL开发的开发者可以很方便的使用 Hive 进行开发。&lt;/p&gt;
&lt;h4 id=&quot;h142&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4.2 数据存储位置&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  Hive 是建立在 Hadoop 之上的，所有 Hive 的数据都是存储在 HDFS 中的。而数据库则可以将数据保存在块设备或者本地文件系统中。&lt;/p&gt;
&lt;h4 id=&quot;h143&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4.3 数据更新&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  由于 Hive 是针对数据仓库应用设计的，而&lt;code&gt;数据仓库的内容是读多写少的&lt;/code&gt;。因此，&lt;code&gt;Hive 中不建议对数据的改写，所有的数据都是在加载的时候确定好的&lt;/code&gt;。而数据库中的数据通常是需要经常进行修改的，因此可以使用 INSERT INTO … VALUES 添加数据，使用 UPDATE … SET修改数据。&lt;/p&gt;
&lt;h4 id=&quot;h144&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4.4 索引&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  Hive 在加载数据的过程中不会对数据进行任何处理，甚至不会对数据进行扫描，因此也没有对数据中的某些Key建立索引。Hive 要访问数据中满足条件的特定值时，需要&lt;code&gt;暴力扫描整个数据&lt;/code&gt;，因此访问延迟较高。由于 MapReduce 的引入， Hive 可以并行访问数据，因此即使没有索引，对于大数据量的访问，Hive 仍然可以体现出优势。数据库中，通常会针对一个或者几个列建立索引，因此对于少量的特定条件的数据的访问，数据库可以有很高的效率，较低的延迟。由于数据的访问延迟较高，决定了 Hive 不适合在线数据查询。&lt;/p&gt;
&lt;h4 id=&quot;h145&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4.5 执行&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  Hive 中大多数查询的执行是通过 Hadoop 提供的 MapReduce 来实现的。而数据库通常有自己的执行引擎。&lt;/p&gt;
&lt;h4 id=&quot;h146&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4.6 执行延迟&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  Hive 在查询数据的时候，由于没有索引，需要扫描整个表，因此延迟较高。另外一个导致 Hive 执行延迟高的因素是 MapReduce 框架。由于MapReduce 本身具有较高的延迟，因此在利用 MapReduce 执行 Hive 查询时，也会有较高的延迟。相对的，数据库的执行延迟较低。当然，这个低是有条件的，即数据规模较小，当数据规模大到超过数据库的处理能力的时候，Hive的并行计算显然能体现出优势。&lt;/p&gt;
&lt;h4 id=&quot;h147&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4.7 可扩展性&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  由于 Hive 是建立在 Hadoop 之上的，因此 Hive 的可扩展性是和 Hadoop 的可扩展性是一致的（世界上最大的 Hadoop 集群在 Yahoo!，2009年的规模在 4000 台节点左右）。而数据库由于 ACID 语义的严格限制，扩展行非常有限。目前最先进的并行数据库 Oracle 在理论上的扩展能力也只有100台左右。&lt;/p&gt;
&lt;h4 id=&quot;h148&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4.8 数据规模&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  由于 Hive 建立在集群上并可以利用 MapReduce 进行并行计算，因此可以支持很大规模的数据；对应的，数据库可以支持的数据规模较小。&lt;/p&gt;
&lt;h2 id=&quot;h2hive&quot;&gt;&lt;span&gt;&lt;strong&gt;第2章 Hive安装、配置和使用&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h21hive&quot;&gt;&lt;span&gt;&lt;strong&gt;2.1 Hive安装地址&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1、Hive官网地址&lt;br/&gt;  &lt;a href=&quot;http://hive.apache.org/&quot; target=&quot;_blank&quot;&gt;http://hive.apache.org/&lt;/a&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/25/k5mlMd.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;2、文档查看地址&lt;br/&gt;  &lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/GettingStarted&quot; target=&quot;_blank&quot;&gt;https://cwiki.apache.org/confluence/display/Hive/GettingStarted&lt;/a&gt;&lt;br/&gt;3、下载地址&lt;br/&gt;  &lt;a href=&quot;http://archive.apache.org/dist/hive/&quot; target=&quot;_blank&quot;&gt;http://archive.apache.org/dist/hive/&lt;/a&gt;&lt;br/&gt;4、github地址&lt;br/&gt;  &lt;a href=&quot;https://github.com/apache/hive&quot; target=&quot;_blank&quot;&gt;https://github.com/apache/hive&lt;/a&gt;
&lt;h3 id=&quot;h22hive&quot;&gt;&lt;span&gt;&lt;strong&gt;2.2 Hive安装部署&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1、Hive安装及配置&lt;/strong&gt;&lt;br/&gt;（1）把apache-hive-1.2.1-bin.tar.gz上传到linux的/opt/software目录下&lt;br/&gt;（2）解压apache-hive-1.2.1-bin.tar.gz到/opt/module/目录下面&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 software]$ tar -zxvf apache-hive-&lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-bin.tar.gz -C /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）修改apache-hive-1.2.1-bin.tar.gz的名称为hive&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;]$ &lt;span class=&quot;hljs-title&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;apache&lt;/span&gt;-&lt;span class=&quot;hljs-title&quot;&gt;hive&lt;/span&gt;-1.2.1-&lt;span class=&quot;hljs-title&quot;&gt;bin&lt;/span&gt;/ &lt;span class=&quot;hljs-title&quot;&gt;hive&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）修改/opt/module/hive/conf目录下的hive-env.sh.template名称为hive-env.sh&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 conf]$ mv hive-env.sh.template hive-env.sh&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）配置hive-env.sh文件&lt;br/&gt;（a）配置HADOOP_HOME路径&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ini&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;HADOOP_HOME&lt;/span&gt;=/opt/module/hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（b）配置HIVE_CONF_DIR路径&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; HIVE_CONF_DIR=/opt/&lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;/hive/conf&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（6）配置HIVE_HOME&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;hljs bash&quot; readability=&quot;2&quot;&gt;[atguigu@hadoop102 ~]$ sudo vim /etc/profile&lt;p&gt;添加的内容如下：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;export&lt;/span&gt; HIVE_HOME=/opt/module/hive&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;export&lt;/span&gt; PATH=&lt;span class=&quot;hljs-variable&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;hljs-variable&quot;&gt;$HIVE_HOME&lt;/span&gt;/bin&lt;/p&gt;&lt;p&gt;:wq 保存退出&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使配置文件生效&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 ~]$ source /etc/profile&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2、Hadoop集群配置&lt;/strong&gt;&lt;br/&gt;（1）在启动Hive之前，必须先启动hdfs和yarn&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/start-dfs.sh&lt;br/&gt;[atguigu@hadoop103 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ sbin/start-yarn.sh&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）在HDFS上创建/tmp和/user/hive/warehouse两个目录并修改他们的同组权限可写&lt;/p&gt;
&lt;pre readability=&quot;4.5&quot;&gt;
&lt;code class=&quot;hljs perl&quot; readability=&quot;3&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ bin/hadoop fs -&lt;span class=&quot;hljs-keyword&quot;&gt;mkdir&lt;/span&gt; /tmp&lt;br/&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ bin/hadoop fs -&lt;span class=&quot;hljs-keyword&quot;&gt;mkdir&lt;/span&gt; -p /user/hive/warehouse&lt;p&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ bin/hadoop fs -&lt;span class=&quot;hljs-keyword&quot;&gt;chmod&lt;/span&gt; g+w /tmp&lt;br/&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ bin/hadoop fs -&lt;span class=&quot;hljs-keyword&quot;&gt;chmod&lt;/span&gt; g+w /user/hive/warehouse&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3、Hive基本操作&lt;/strong&gt;&lt;br/&gt;（1）启动hive&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hive]$ bin/hive&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）查看数据库&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hive&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; show databases;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）打开默认数据库&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs php&quot;&gt;hive&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;default&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）显示default数据库中的表&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hive&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; show tables;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）创建一张表&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;hive&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;create table &lt;span class=&quot;hljs-title&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(id &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;, name &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（6）显示数据库中有几张表&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hive&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; show tables;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（7）查看表的结构&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hive&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; desc student;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（8）向表中插入数据&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;hive&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;insert &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; student &lt;span class=&quot;hljs-title&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ss&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（9）查询表中数据&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;hive&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; student;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（10）退出hive&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hive&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; quit;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h23hive&quot;&gt;&lt;span&gt;&lt;strong&gt;2.3 将本地文件导入Hive案例&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　需求：将本地/opt/module/datas/student.txt这个目录下的数据导入到hive的student(id int, name string)表中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、数据准备&lt;/strong&gt;&lt;br/&gt;在/opt/module/datas这个目录下准备数据&lt;br/&gt;（1）在/opt/module/目录下创建datas&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;]$ &lt;span class=&quot;hljs-title&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;datas&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）在/opt/module/datas/目录下创建student.txt文件并添加数据&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 datas]$ touch student.txt&lt;br/&gt;[atguigu@hadoop102 datas]$ vim student.txt&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1001&lt;/span&gt;    zhangshan&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1002&lt;/span&gt;    lishi&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1003&lt;/span&gt;    zhaoliu&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意以tab键间隔。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、Hive实际操作&lt;/strong&gt;&lt;br/&gt;（1）启动hive&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hive]$ bin/hive&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）显示数据库&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hive&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; show databases;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）使用default数据库&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs php&quot;&gt;hive&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;default&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）显示default数据库中的表&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hive&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; show tables;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）删除已创建的student表&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hive&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; drop table student;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（6）创建student表, 并声明文件分隔符’\t’&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs lua&quot;&gt;hive&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;table&lt;/span&gt; student(id int, name &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;) row &lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt; delimited fields terminated by &lt;span class=&quot;hljs-string&quot;&gt;'\t'&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（7）加载/opt/module/datas/student.txt 文件到student数据库表中。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs lua&quot;&gt;hive&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;load&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;local&lt;/span&gt; inpath &lt;span class=&quot;hljs-string&quot;&gt;'/opt/module/datas/student.txt'&lt;/span&gt; into &lt;span class=&quot;hljs-built_in&quot;&gt;table&lt;/span&gt; student;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（8）Hive查询结果&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;hive&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; student;&lt;br/&gt;OK&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1001&lt;/span&gt;    zhangshan&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1002&lt;/span&gt;    lishi&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1003&lt;/span&gt;    zhaoliu&lt;br/&gt;Time taken: &lt;span class=&quot;hljs-number&quot;&gt;0.266&lt;/span&gt; seconds, Fetched: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; row(s)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3、遇到的问题&lt;/strong&gt;&lt;br/&gt;再打开一个客户端窗口启动hive，会产生java.sql.SQLException异常。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;Exception in thread &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.RuntimeException: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient&lt;br/&gt;at org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:&lt;span class=&quot;hljs-number&quot;&gt;522&lt;/span&gt;)&lt;br/&gt;at org.apache.hadoop.hive.cli.CliDriver.run(CliDriver.java:&lt;span class=&quot;hljs-number&quot;&gt;677&lt;/span&gt;)&lt;br/&gt;at org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:&lt;span class=&quot;hljs-number&quot;&gt;621&lt;/span&gt;)&lt;br/&gt;at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:&lt;span class=&quot;hljs-number&quot;&gt;62&lt;/span&gt;)&lt;br/&gt;at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:&lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;)&lt;br/&gt;at java.lang.reflect.Method.invoke(Method.java:&lt;span class=&quot;hljs-number&quot;&gt;498&lt;/span&gt;)&lt;br/&gt;at org.apache.hadoop.util.RunJar.run(RunJar.java:&lt;span class=&quot;hljs-number&quot;&gt;221&lt;/span&gt;)&lt;br/&gt;at org.apache.hadoop.util.RunJar.main(RunJar.java:&lt;span class=&quot;hljs-number&quot;&gt;136&lt;/span&gt;)&lt;br/&gt;Caused by: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient&lt;br/&gt;at org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance(MetaStoreUtils.java:&lt;span class=&quot;hljs-number&quot;&gt;1523&lt;/span&gt;)&lt;br/&gt;at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.&amp;lt;init&amp;gt;(RetryingMetaStoreClient.java:&lt;span class=&quot;hljs-number&quot;&gt;86&lt;/span&gt;)&lt;br/&gt;at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:&lt;span class=&quot;hljs-number&quot;&gt;132&lt;/span&gt;)&lt;br/&gt;at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:&lt;span class=&quot;hljs-number&quot;&gt;104&lt;/span&gt;)&lt;br/&gt;at org.apache.hadoop.hive.ql.metadata.Hive.createMetaStoreClient(Hive.java:&lt;span class=&quot;hljs-number&quot;&gt;3005&lt;/span&gt;)&lt;br/&gt;at org.apache.hadoop.hive.ql.metadata.Hive.getMSC(Hive.java:&lt;span class=&quot;hljs-number&quot;&gt;3024&lt;/span&gt;)&lt;br/&gt;at org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:&lt;span class=&quot;hljs-number&quot;&gt;503&lt;/span&gt;)&lt;br/&gt;... &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; more&lt;br/&gt;......&lt;br/&gt;......&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;原因是：&lt;code&gt;Metastore（元数据）默认存储在自带的derby数据库中，derby数据库是单一用户的，所以推荐使用MySQL存储Metastore&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;h24mysql&quot;&gt;&lt;span&gt;&lt;strong&gt;2.4 MySql安装&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h241&quot;&gt;&lt;span&gt;&lt;strong&gt;2.4.1 安装包准备&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1、查看mysql是否安装，如果安装了，卸载mysql&lt;br/&gt;（1）查看&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@hadoop102 桌面]&lt;br/&gt;mysql-libs&lt;span class=&quot;hljs-number&quot;&gt;-5.1&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.73&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-7.&lt;/span&gt;el6.x86_64&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）卸载&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[root@hadoop102 桌面]&lt;/span&gt;# &lt;span class=&quot;hljs-selector-tag&quot;&gt;rpm&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;--nodeps&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;mysql-libs-5&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.73-7&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.el6&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.x86_64&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、解压mysql-libs.zip文件到当前目录&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@hadoop102 software]&lt;br/&gt;[root@hadoop102 software]&lt;br/&gt;mysql-libs.zip&lt;br/&gt;mysql-libs&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、进入到mysql-libs文件夹下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[root@hadoop102 mysql-libs]&lt;/span&gt;# &lt;span class=&quot;hljs-selector-tag&quot;&gt;ll&lt;/span&gt;&lt;br/&gt;总用量 76048&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;-rw-r--r--&lt;/span&gt;. 1 &lt;span class=&quot;hljs-selector-tag&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;root&lt;/span&gt; 18509960 3月  26 2015 &lt;span class=&quot;hljs-selector-tag&quot;&gt;MySQL-client-5&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.6&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.24-1&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.el6&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.x86_64&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.rpm&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;-rw-r--r--&lt;/span&gt;. 1 &lt;span class=&quot;hljs-selector-tag&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;root&lt;/span&gt;  3575135 12月  1 2013 &lt;span class=&quot;hljs-selector-tag&quot;&gt;mysql-connector-java-5&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.27&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.gz&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;-rw-r--r--&lt;/span&gt;. 1 &lt;span class=&quot;hljs-selector-tag&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;root&lt;/span&gt; 55782196 3月  26 2015 &lt;span class=&quot;hljs-selector-tag&quot;&gt;MySQL-server-5&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.6&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.24-1&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.el6&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.x86_64&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.rpm&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h242mysql&quot;&gt;&lt;span&gt;&lt;strong&gt;2.4.2 安装MySql服务器&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1、安装mysql服务端&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[root@hadoop102 mysql-libs]&lt;/span&gt;# &lt;span class=&quot;hljs-selector-tag&quot;&gt;rpm&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-ivh&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;MySQL-server-5&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.6&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.24-1&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.el6&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.x86_64&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.rpm&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、查看产生的随机密码&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@hadoop102 mysql-libs]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、查看mysql状态&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@hadoop102 mysql-libs]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、启动mysql&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@hadoop102 mysql-libs]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h243mysql&quot;&gt;&lt;span&gt;&lt;strong&gt;2.4.3 安装MySql客户端&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1、安装mysql客户端&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[root@hadoop102 mysql-libs]&lt;/span&gt;# &lt;span class=&quot;hljs-selector-tag&quot;&gt;rpm&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-ivh&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;MySQL-client-5&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.6&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.24-1&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.el6&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.x86_64&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.rpm&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、连接mysql&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@hadoop102 mysql-libs]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、修改密码&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;mysql&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt; password=password(&lt;span class=&quot;hljs-string&quot;&gt;&quot;123456&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、退出mysql&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;mysql&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5、重新登录mysql&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@hadoop102 mysql-libs]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h244mysqluser&quot;&gt;&lt;span&gt;&lt;strong&gt;2.4.4 MySql中user表中主机配置&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  配置只要是root用户+密码，在任何主机上都能登录MySQL数据库。即配置MySQL无主机登录。&lt;br/&gt;1、进入mysql&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@hadoop102 mysql-libs]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、显示数据库&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;mysql&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; show databases;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、使用mysql数据库&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs php&quot;&gt;mysql&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、展示mysql数据库中的所有表&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;mysql&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; show tables;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5、展示user表的结构&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;mysql&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; desc user;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6、查询user表&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;mysql&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; User, Host, Password &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; user;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7、修改user表，把Host表内容修改为%，%表示通配符的意思&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;mysql&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; update user &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt; host=&lt;span class=&quot;hljs-string&quot;&gt;'%'&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;where&lt;/span&gt; host=&lt;span class=&quot;hljs-string&quot;&gt;'localhost'&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;8、删除root用户的其他host&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;mysql&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; user where Host=&lt;span class=&quot;hljs-string&quot;&gt;'hadoop102'&lt;/span&gt;;&lt;br/&gt;mysql&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; user where Host=&lt;span class=&quot;hljs-string&quot;&gt;'127.0.0.1'&lt;/span&gt;;&lt;br/&gt;mysql&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; user where Host=&lt;span class=&quot;hljs-string&quot;&gt;'::1'&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;9、刷新&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;mysql&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; flush privileges;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;10、退出&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;mysql&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; quit;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h25hivemysql&quot;&gt;&lt;span&gt;&lt;strong&gt;2.5 Hive元数据配置到MySql&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h251&quot;&gt;&lt;span&gt;&lt;strong&gt;2.5.1 驱动拷贝&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1、在/opt/software/mysql-libs目录下解压mysql-connector-java-5.1.27.tar.gz驱动包&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[root@hadoop102 mysql-libs]&lt;/span&gt;# &lt;span class=&quot;hljs-selector-tag&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-zxvf&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;mysql-connector-java-5&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.27&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.gz&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、拷贝/opt/software/mysql-libs/mysql-connector-java-5.1.27目录下的mysql-connector-java-5.1.27-bin.jar到/opt/module/hive/lib/&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@hadoop102 mysql-connector-java&lt;span class=&quot;hljs-number&quot;&gt;-5.1&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.27&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h252metastoremysql&quot;&gt;&lt;span&gt;&lt;strong&gt;2.5.2 配置metastore到MySql&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1、在/opt/module/hive/conf目录下创建一个hive-site.xml&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 conf]$ touch hive-site.xml&lt;br/&gt;[atguigu@hadoop102 conf]$ vim hive-site.xml&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、根据官方文档配置参数，拷贝数据到hive-site.xml文件中&lt;br/&gt;https://cwiki.apache.org/confluence/display/Hive/AdminManual+MetastoreAdmin&lt;/p&gt;
&lt;pre readability=&quot;7.5&quot;&gt;
&lt;code class=&quot;xml language-xml hljs&quot; readability=&quot;9&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.jdo.option.ConnectionURL&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;jdbc:mysql://hadoop102:3306/metastore?createDatabaseIfNotExist=true&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;JDBC connect string for a JDBC metastore&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.jdo.option.ConnectionDriverName&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;com.mysql.jdbc.Driver&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;Driver class name for a JDBC metastore&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.jdo.option.ConnectionUserName&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;root&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;username to use against metastore database&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.jdo.option.ConnectionPassword&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;123456&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;password to use against metastore database&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、配置完毕后，如果启动hive异常，可以重新启动虚拟机。（重启后，别忘了启动hadoop集群）&lt;/p&gt;
&lt;h4 id=&quot;h253hive&quot;&gt;&lt;span&gt;&lt;strong&gt;2.5.3 多窗口启动Hive测试&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1、先启动MySQL&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 mysql-libs]$ mysql -uroot -p123456&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看有几个数据库&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;mysql&amp;gt; show databases;&lt;br/&gt;+--------------------+&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| Database           |&lt;/span&gt;&lt;br/&gt;+--------------------+&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| information_schema |&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| mysql              |&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| performance_schema |&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| test               |&lt;/span&gt;&lt;br/&gt;+--------------------+&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、再次打开多个窗口，分别启动hive，发现没有问题，因为MySQL是多用户模式。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hive]$ bin/hive&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、启动hive后，回到MySQL窗口查看数据库，显示增加了metastore数据库&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;mysql&amp;gt; show databases;&lt;br/&gt;+--------------------+&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| Database           |&lt;/span&gt;&lt;br/&gt;+--------------------+&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| information_schema |&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| metastore          |&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| mysql              |&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| performance_schema |&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| test               |&lt;/span&gt;&lt;br/&gt;+--------------------+&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h26hivejdbc&quot;&gt;&lt;span&gt;&lt;strong&gt;2.6 Hive JDBC访问&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h261hiveserver2&quot;&gt;&lt;span&gt;&lt;strong&gt;2.6.1 启动hiveserver2服务&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hive]$ bin/hiveserver2&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h262beeline&quot;&gt;&lt;span&gt;&lt;strong&gt;2.6.2 启动beeline&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[atguigu@hadoop102 hive]$ bin/beeline&lt;br/&gt;Beeline version &lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; Apache Hive&lt;br/&gt;beeline&amp;gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h263hiveserver2&quot;&gt;&lt;span&gt;&lt;strong&gt;2.6.3 连接hiveserver2&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;beeline&amp;gt; !connect jdbc:hive2:&lt;br/&gt;Connecting to jdbc:hive2:&lt;br/&gt;Enter username &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; jdbc:hive2:&lt;br/&gt;Enter password &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; jdbc:hive2:&lt;br/&gt;Connected to: &lt;span class=&quot;hljs-function&quot;&gt;Apache &lt;span class=&quot;hljs-title&quot;&gt;Hive&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;version &lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;)&lt;br/&gt;Driver: Hive &lt;span class=&quot;hljs-title&quot;&gt;JDBC&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;version &lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;)&lt;br/&gt;Transaction isolation: TRANSACTION_REPEATABLE_READ&lt;br/&gt;0: jdbc:hive2:&lt;br/&gt;+----------------+--+&lt;br/&gt;| database_name  |&lt;br/&gt;+----------------+--+&lt;br/&gt;| &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;        |&lt;br/&gt;| hive_db2       |&lt;br/&gt;+----------------+--+&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h27hive&quot;&gt;&lt;span&gt;&lt;strong&gt;2.7 Hive常用交互命令&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;应用于：做定时任务。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs sql&quot;&gt;[atguigu@hadoop102 hive]$ bin/hive -&lt;span class=&quot;hljs-keyword&quot;&gt;help&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;usage&lt;/span&gt;: hive&lt;br/&gt;-d,&lt;br/&gt;commands. e.g. -d A=B &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;br/&gt;-e &amp;lt;quoted-&lt;span class=&quot;hljs-keyword&quot;&gt;query&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&amp;gt;         &lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; command line&lt;br/&gt;-f &amp;lt;filename&amp;gt;                    &lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; files&lt;br/&gt;-H,&lt;br/&gt;commands. e.g. &lt;br/&gt;-i &amp;lt;filename&amp;gt;                    Initialization &lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt;&lt;br/&gt;-S,&lt;br/&gt;-v,&lt;br/&gt;console)&lt;br/&gt;[atguigu@hadoop102 hive]$ &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;0、由于我们更换了数据库为MySQL，为了下面的演示方便，我们需要先做一些准备工作：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;hive&amp;gt; show databases;&lt;br/&gt;hive&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;create table &lt;span class=&quot;hljs-title&quot;&gt;student&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;id &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;, name &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;) row format delimited fields terminated &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; '\t'&lt;/span&gt;;&lt;br/&gt;hive&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; student;&lt;br/&gt;OK&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1001&lt;/span&gt;    zhangshan&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1002&lt;/span&gt;    lishi&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1003&lt;/span&gt;    zhaoliu&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;1、“-e”不进入hive的交互窗口执行sql语句&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs sql&quot;&gt;[atguigu@hadoop102 hive]$ bin/hive -e &quot;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; student;&quot;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、“-f”执行脚本中sql语句&lt;br/&gt;（1）在/opt/module/datas目录下创建hivef.sql文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 datas]$ touch hivef.sql&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;文件中写入正确的sql语句&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; student;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）执行文件中的sql语句&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hive]$ bin/hive -f /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;datas&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hivef&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;sql&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）执行文件中的sql语句并将结果写入文件中&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 hive]$ bin/hive -f /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;datas&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hivef&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;sql&lt;/span&gt; &amp;gt; /&lt;span class=&quot;hljs-title&quot;&gt;opt&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;datas&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hive_result&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;txt&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h28hive&quot;&gt;&lt;span&gt;&lt;strong&gt;2.8 Hive其他命令操作&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1、退出hive窗口：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;hive(&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;)&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;;&lt;br/&gt;hive(&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;)&amp;gt; quit;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　在新版的hive中没区别了，在以前的版本是有的：&lt;br/&gt;　　　　exit:先隐性提交数据，再退出。&lt;br/&gt;　　　　quit:不提交数据，直接退出。&lt;br/&gt;2、在hive cli命令窗口中如何查看hdfs文件系统&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;hive(&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;)&amp;gt; dfs -ls /;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、在hive cli命令窗口中如何查看本地文件系统&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;hive(&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;)&amp;gt; ! ls /opt/&lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;/datas;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、查看在hive中输入的所有历史命令&lt;br/&gt;（1）进入到当前用户的根目录/root或/home/atguigu&lt;br/&gt;（2）查看.hivehistory文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 ~]$ cat .hivehistory&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h29hive&quot;&gt;&lt;span&gt;&lt;strong&gt;2.9 Hive常见属性配置&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h291hive&quot;&gt;&lt;span&gt;&lt;strong&gt;2.9.1 Hive数据仓库位置配置&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1）default数据仓库的最原始位置是在hdfs上的/user/hive/warehouse路径下。&lt;br/&gt;2）&lt;code&gt;在仓库目录下，没有对默认的数据库default创建文件夹。如果某张表属于default数据库，直接会在数据仓库目录下创建一个文件夹&lt;/code&gt;。&lt;br/&gt;3）修改default数据仓库原始位置（将hive-default.xml.template如下配置信息拷贝到hive-site.xml文件中）。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;hive.metastore.warehouse.dir&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;/user/hive/warehouse&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;location of default database for the warehouse&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置同组用户具有写权限&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs perl&quot;&gt;[atguigu@hadoop102 hadoop-&lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]$ bin/hadoop fs -&lt;span class=&quot;hljs-keyword&quot;&gt;chmod&lt;/span&gt; g+w /user/hive/warehouse&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h292hive&quot;&gt;&lt;span&gt;&lt;strong&gt;2.9.2 Hive查询后信息显示配置&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1）在hive-site.xml文件中添加如下配置信息，就可以实现显示当前数据库，以及查询表的头信息配置。&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;xml language-xml hljs&quot; readability=&quot;2&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;hive.cli.print.header&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;hive.cli.print.current.db&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2）重新启动hive，对比配置前后差异。&lt;br/&gt;（1）配置前，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/25/k5meIK.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;（2）配置后，如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/25/k5mnPO.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h293hive&quot;&gt;&lt;span&gt;&lt;strong&gt;2.9.3 Hive运行日志信息配置&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1、Hive的log默认存放在/tmp/atguigu/hive.log目录下（当前用户名下）&lt;br/&gt;2、修改hive的log存放日志到/opt/module/hive/logs&lt;br/&gt;（1）修改/opt/module/hive/conf/hive-log4j.properties.template文件名称为&lt;br/&gt;hive-log4j.properties&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;atguigu@hadoop102 conf]$ pwd&lt;br/&gt;/opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;hive&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;conf&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop102 conf]$ cp hive-log4j.properties.template hive-log4j.properties&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）在hive-log4j.properties文件中修改log存放位置&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;hive.&lt;span class=&quot;hljs-built_in&quot;&gt;log&lt;/span&gt;.dir=/opt/&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/hive/logs&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h294hive&quot;&gt;&lt;span&gt;&lt;strong&gt;2.9.4 Hive参数配置方式&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1、查看当前所有的配置信息&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hive&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、参数的配置三种方式&lt;br/&gt;（1）配置文件方式&lt;br/&gt;  默认配置文件：hive-default.xml.template&lt;br/&gt;  用户自定义配置文件：hive-site.xml&lt;br/&gt;  &lt;code&gt;注意：&lt;/code&gt;用户自定义配置会覆盖默认配置。另外，Hive也会读入Hadoop的配置，因为&lt;code&gt;Hive是作为Hadoop的客户端启动的，Hive的配置会覆盖Hadoop的配置&lt;/code&gt;。配置文件的设定对本机启动的所有Hive进程都有效。&lt;br/&gt;（2）命令行参数方式&lt;br/&gt;  启动Hive时，可以在命令行添加&lt;code&gt;-hiveconf param=value&lt;/code&gt;来设定参数。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop103 hive]$ bin/hive -hiveconf mapred.reduce.tasks=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  &lt;code&gt;注意：&lt;/code&gt;仅对本次hive启动有效。&lt;br/&gt;  查看参数设置：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;hive (&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;)&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt; mapred.reduce.tasks;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）参数声明方式&lt;br/&gt;  可以在HQL中使用SET关键字设定参数例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;hive (&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;)&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt; mapred.reduce.tasks=&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  &lt;code&gt;注意：&lt;/code&gt;仅对本次hive启动有效。&lt;br/&gt;  查看参数设置&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;hive (&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;)&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt; mapred.reduce.tasks;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  上述三种设定方式的&lt;code&gt;优先级依次递增&lt;/code&gt;。即&lt;code&gt;优先级：配置文件&amp;lt;命令行参数&amp;lt;参数声明&lt;/code&gt;。注意某些系统级的参数，例如log4j相关的设定，必须用前两种方式设定，因为那些参数的读取在会话建立以前已经完成了。&lt;/p&gt;
&lt;h2 id=&quot;h3hive&quot;&gt;&lt;span&gt;&lt;strong&gt;第3章 Hive数据类型&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h31&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1 基本数据类型&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/25/k5mMxH.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;  &lt;code&gt;注意：&lt;/code&gt;对于Hive的String类型相当于数据库的varchar类型，该类型是一个可变的字符串，不过它不能声明其中最多能存储多少个字符，理论上它可以存储2GB的字符数。
&lt;h3 id=&quot;h32&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2 集合数据类型&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/02/25/k5m3qI.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;  Hive有三种复杂数据类型ARRAY、MAP 和 STRUCT。ARRAY和MAP与Java中的Array和Map类似，而STRUCT与C语言中的Struct类似，它封装了一个命名字段集合，复杂数据类型允许任意层次的嵌套。&lt;br/&gt;案例实操&lt;br/&gt;1）假设某表有如下一行，我们用JSON格式来表示其数据结构。在Hive下访问的格式为：
&lt;pre&gt;
&lt;code class=&quot;json language-json hljs&quot;&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;songsong&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;friends&quot;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&quot;bingbing&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;lili&quot;&lt;/span&gt;] ,   // 列表Array, &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;children&quot;&lt;/span&gt;: {                       // 键值Map,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;xiao song&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt; ,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;xiaoxiao song&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot;&lt;/span&gt;: {                      // 结构Struct,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;street&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;hui long guan&quot;&lt;/span&gt; ,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;beijing&quot;&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2）基于上述数据结构，我们在Hive里创建对应的表，并导入数据。&lt;br/&gt;创建本地测试文件test.txt&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;songsong&lt;/span&gt;,&lt;span class=&quot;hljs-selector-tag&quot;&gt;bingbing_lili&lt;/span&gt;,&lt;span class=&quot;hljs-selector-tag&quot;&gt;xiao&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;song&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:18_xiaoxiao&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;song&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:19&lt;/span&gt;,&lt;span class=&quot;hljs-selector-tag&quot;&gt;hui&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;guan_beijing&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;yangyang&lt;/span&gt;,&lt;span class=&quot;hljs-selector-tag&quot;&gt;caicai_susu&lt;/span&gt;,&lt;span class=&quot;hljs-selector-tag&quot;&gt;xiao&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;yang&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:18_xiaoxiao&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;yang&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:19&lt;/span&gt;,&lt;span class=&quot;hljs-selector-tag&quot;&gt;chao&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;yang_beijing&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;注意：&lt;/code&gt;MAP，STRUCT和ARRAY里的元素间关系都可以用同一个字符表示，这里用“_”。&lt;/p&gt;
&lt;p&gt;3）Hive上创建测试表test&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql language-sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;test&lt;/span&gt;(&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;,&lt;br/&gt;friends &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&amp;gt;,&lt;br/&gt;children &lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;,&lt;br/&gt;address &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;&amp;lt;street:&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, city:&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;br/&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;delimited&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;terminated&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;','&lt;/span&gt;&lt;br/&gt;collection items &lt;span class=&quot;hljs-keyword&quot;&gt;terminated&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'_'&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;terminated&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;':'&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;terminated&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'\n'&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;字段解释：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql language-sql hljs&quot;&gt;row format delimited fields terminated by ','   &lt;br/&gt;collection items terminated by '_'              &lt;br/&gt;map keys terminated by ':'                      &lt;br/&gt;lines terminated by '\n';                       &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4）导入文本数据到测试表&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;hljs ruby&quot; readability=&quot;2&quot;&gt;hive (default)&amp;gt; load data local inpath ‘/opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;datas&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;txt&lt;/span&gt;’ &lt;span class=&quot;hljs-title&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;p&gt;或者&lt;/p&gt;&lt;p&gt;[atguigu@hadoop102 datas]$ hadoop fs -put test.txt /user/hive/warehouse/test&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5）访问三种集合列里的数据，以下分别是ARRAY，MAP，STRUCT的访问方式&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;hive&amp;gt; desc test;&lt;br/&gt;OK&lt;br/&gt;name                    &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;                                      &lt;br/&gt;friends                 array&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&amp;gt;                               &lt;br/&gt;children                map&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&amp;gt;                             &lt;br/&gt;address                 &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;&amp;lt;street:&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;,city:&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&amp;gt;                       &lt;br/&gt;Time taken: &lt;span class=&quot;hljs-number&quot;&gt;1.032&lt;/span&gt; seconds, Fetched: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; row(s)&lt;br/&gt;hive&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; test;&lt;br/&gt;OK&lt;br/&gt;songsong    [&lt;span class=&quot;hljs-string&quot;&gt;&quot;bingbing&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;lili&quot;&lt;/span&gt;] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;xiao song&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;xiaoxiao song&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;} {&lt;span class=&quot;hljs-string&quot;&gt;&quot;street&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;hui long guan&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;beijing&quot;&lt;/span&gt;}&lt;br/&gt;yangyang    [&lt;span class=&quot;hljs-string&quot;&gt;&quot;caicai&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;susu&quot;&lt;/span&gt;]   {&lt;span class=&quot;hljs-string&quot;&gt;&quot;xiao yang&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;xiaoxiao yang&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;} {&lt;span class=&quot;hljs-string&quot;&gt;&quot;street&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;chao yang&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;beijing&quot;&lt;/span&gt;}&lt;br/&gt;Time taken: &lt;span class=&quot;hljs-number&quot;&gt;0.274&lt;/span&gt; seconds, Fetched: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; row(s)&lt;br/&gt;hive&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; friends[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],children[&lt;span class=&quot;hljs-string&quot;&gt;'xiao song'&lt;/span&gt;],address.city &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; test &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;songsong&quot;&lt;/span&gt;;&lt;br/&gt;OK&lt;br/&gt;lili    &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;  beijing&lt;br/&gt;Time taken: &lt;span class=&quot;hljs-number&quot;&gt;0.179&lt;/span&gt; seconds, Fetched: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; row(s)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h33&quot;&gt;&lt;span&gt;&lt;strong&gt;3.3 类型转化&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  Hive的原子数据类型是可以进行隐式转换的，类似于Java的类型转换，例如某表达式使用INT类型，TINYINT会自动转换为INT类型，但是Hive不会进行反向转化，例如，某表达式使用TINYINT类型，INT不会自动转换为TINYINT类型，它会返回错误，除非使用CAST操作。&lt;br/&gt;  1、隐式类型转换规则如下&lt;br/&gt;    （1）任何整数类型都可以隐式地转换为一个范围更广的类型，如TINYINT可以转换成INT，INT可以转换成BIGINT。&lt;br/&gt;    （2）所有整数类型、FLOAT和STRING类型都可以隐式地转换成DOUBLE。&lt;br/&gt;    （3）TINYINT、SMALLINT、INT都可以转换为FLOAT。&lt;br/&gt;    （4）BOOLEAN类型不可以转换为任何其它的类型。&lt;br/&gt;  2、可以使用CAST操作显示进行数据类型转换&lt;br/&gt;    例如：CAST('1' AS INT) 将把字符串'1' 转换成整数1；如果强制类型转换失败，如执行CAST('X' AS INT)，表达式返回空值NULL。&lt;/p&gt;
</description>
<pubDate>Sun, 24 Feb 2019 16:28:00 +0000</pubDate>
<dc:creator>黑泽君</dc:creator>
<og:description>第1章 Hive入门1.1 什么是Hive1.2 Hive的优缺点1.2.1 优点1.2.2 缺点1.3 Hive架构原理1.4 Hive和数据库比较1.4.1 查询语言1.4.2 数据存储位置1.4</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenmingjun/p/10428809.html</dc:identifier>
</item>
<item>
<title>使用FreeHttp任意篡改http报文 （FreeHttp使用及实现说明） - lulianqi15</title>
<link>http://www.cnblogs.com/lulianqi/p/10428551.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lulianqi/p/10428551.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;FreeHttp是一个Fiddler插件借助FreeHttp您可按照您自己的设定修改请求或响应报文&lt;/p&gt;
&lt;p&gt;这对测试及调试都非常有用&lt;/p&gt;
&lt;p&gt;比如您发现线上页面js文件错误，直接使用规则替换新的js文件您可以在不对线上服务做任何改动的情况下直接在线上验证&lt;/p&gt;
&lt;p&gt;同样在发现服务接口数据不符合预期时也可以直接修改验证，甚至可以清除手机浏览器或微信服务号的登陆状态&lt;/p&gt;
&lt;p&gt;希望在您了解其基本功能及工作原理后，可以实际工作中为您提供便利&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;FreeHttp起始&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;如今互联网或IT行业几乎跟HTTP已经分不开了，系统与系统之间的联系相当一部分都需要借助HTTP，在平时的工作中（特别是测试工作）渐渐的会发现自己除了对抓取HTTP报文有需求，很多时候需要篡改报文辅助测试或调试。&lt;/p&gt;
&lt;p&gt;Fiddler实际已经提供断点，AutoResponder及FiddlerScript 功能可以直接或间接实现报文篡改功能，不过使用过程中会发现，他们在很多情况下使用不是很方便甚至达不到我的需求&lt;/p&gt;
&lt;p&gt;为了满足自己的一些特定需求，借助Fiddler扩展接口自己慢慢的为自己编写了插件，后来插件功能越来越多，自己就萌生了把功能做成通用的形式或许可以给其他同学提供帮助（也就成为了FreeHttp的雏形）&lt;/p&gt;
&lt;div readability=&quot;10.92&quot;&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;FreeHttp 插件安装&lt;/h3&gt;
&lt;p&gt;1：您的计算机需要已经安装Fiddler （如未安装，请至官网下载安装 &lt;a href=&quot;http://docs.telerik.com/fiddler/configure-fiddler/tasks/configurefiddler&quot;&gt;http://docs.telerik.com/fiddler/configure-fiddler/tasks/configurefiddler&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;2：进入Fiddler安装目录的Scripts目录下，将FreeHttp.dll复制到该目录下  (下载请至：https://files.cnblogs.com/files/lulianqi/FreeHttp.zip   解压可得到 FreeHttp.dll  ）&lt;/p&gt;
&lt;p&gt;3：重启Fiddler即可在面板中出现 FreeHttp 标签&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;h3&gt;FreeHttp 基本界面&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;基本操作界面如下图，主要分为5个部分&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/10104670851F430F9FE0F53854990076/16853&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/10104670851F430F9FE0F53854990076/16853&quot;/&gt;&lt;/div&gt;

&lt;ol&gt;&lt;li&gt;Session 匹配规则编辑区『Url Filter』&lt;/li&gt;
&lt;li&gt;Htpp 请求或响应篡改规则编辑区&lt;/li&gt;
&lt;li&gt;规则编辑控制条&lt;/li&gt;
&lt;li&gt;http session 捕获/篡改或规则执行日志&lt;/li&gt;
&lt;li&gt;已创建http篡改规则列表&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;         &lt;em&gt;当请求发出或接收到响应时，freehttp会在篡改规则列表中匹配篡改规则（匹配使用Url Filter中的内容），如果匹配成功即执行http报文的篡改（篡改使用规则编辑区内容）&lt;/em&gt;&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/8542E5412651468C88F62BFE7545909D/16879&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/8542E5412651468C88F62BFE7545909D/16879&quot;/&gt;&lt;/div&gt;
&lt;p&gt;            如上图您可以简单调整各显示区域的布局&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;备注：  &lt;/strong&gt;&lt;span&gt;&lt;em&gt;由于本文篇幅较长，如果您当前时间不充裕或暂时不打算查看 FreeHttp的详细功能，建议您直接阅读第6章节【六：快速入门】，第7章节【七：简单实践】（这2章节有可以帮您快速了解FreeHttp的基本功能）&lt;br/&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;            如果您对FreeHttp的代码实现感兴趣，或您打算修改FreeHttp的功能，您可以在末尾章节【实现及源码】找到相关内容（源代码地址及工程结构简介）&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;



&lt;h2&gt;一：规则匹配区&lt;/h2&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/4D9412F20DD1434E8153BBFA78E92208/16372&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/4D9412F20DD1434E8153BBFA78E92208/16372&quot;/&gt;&lt;/div&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;1.1：『get http sesion in left session list』&lt;/h3&gt;
&lt;p&gt;表示从fiddler Session列表获取Session信息&lt;/p&gt;
&lt;p&gt;点击此图标会将您选中的session的url自动填充到urlfilter输入框中， 并将该session的request及response信息填入下方Http篡改规则的『Request Replace』及『Response Replace』中方便篡改规则的编辑&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/07E8BECF337645039763D2AF7C7BAFA2/16417&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/07E8BECF337645039763D2AF7C7BAFA2/16417&quot;/&gt;&lt;/div&gt;
&lt;p&gt;（如上图：选择fiddler默认更新session，点击获取按钮，黄色区域即为获取的信息）&lt;/p&gt;

&lt;h3&gt;1.2：『select url filter method』&lt;/h3&gt;
&lt;p&gt;表示url匹配方式（匹配后方文本框中内容），支持Contain，StartWith，Is，Regex，AllPass&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Contion：当当前Http请求session url包含指定值时匹配通过。&lt;/li&gt;
&lt;li&gt;StartWith：当当前Http请求session url以指定值开始时匹配通过。&lt;/li&gt;
&lt;li&gt;Is：当当前Http请求session url与指定值完全一致时匹配通过。&lt;/li&gt;
&lt;li&gt;Regex：当当前Http请求session url 通过指定正则匹配时匹配通过。（如[“^https://www.bing.cn/js/page.\S*?.js\b”该正则匹配表示以“https://www.bing.cn/js/page.”开头并以“.js”结尾并且中间含随机版本的js请求url）&lt;/li&gt;
&lt;li&gt;AllPass：对任意Http请求session url匹配通过。（当您需要为所有通过fiddler的请求都进行指定规则的篡改时，比如为所有请求添加标记head头，或设置禁用验证缓存时可能会需要使用到AllPass匹配方式）&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/D22105A68C724B36B3687839C81A37EC/16432&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/D22105A68C724B36B3687839C81A37EC/16432&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/07C40D1CF70B47718B5403C132311498/16436&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/07C40D1CF70B47718B5403C132311498/16436&quot;/&gt;&lt;/div&gt;
&lt;p&gt;（如上图：当鼠标悬停该区域，会有匹配方式提示出现）&lt;/p&gt;

&lt;h3&gt;1.3：『adit advanced http filter』&lt;/h3&gt;
&lt;p&gt;点击此图标可以进行http篡改匹配规则的高级匹配&lt;/p&gt;
&lt;p&gt;包括对request 对请求头及请求实体的匹配检查&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/AB28FD94A41C41FBACAAA697256768AC/16504&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/AB28FD94A41C41FBACAAA697256768AC/16504&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如果前面的Url Filter 选项已经能帮助您筛选目标http请求，您不用再设置该项&lt;/p&gt;
&lt;p&gt;默认状态下『adit advanced http filter』图标显示为黑色，表示没有对advanced http filter进行过设置&lt;/p&gt;
&lt;p&gt;如果您对当前匹配规则的advanced http filter已经进行过设置，该图标会显示为蓝色&lt;/p&gt;
&lt;p&gt;点击该图标即可在弹出窗口中设置 advanced http filter&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/F98A5B59C93648D3BAFDA9CF1C592208/18161&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/F98A5B59C93648D3BAFDA9CF1C592208/18161&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图 advanced http filter分为4部分&lt;/p&gt;
&lt;p&gt;1：Url Filter 部分内容与前面的Url Filter 完全一致（这里不在单独说明）&lt;/p&gt;
&lt;p&gt;2：Head Filter 部分可以帮你设置head头筛选，点击『+』弹出操作框按提示输入Key于Value（表示被匹配http请求必须满足，请求头中必须含有Key值请求头，并且该请求头的内容必须含有Value值）&lt;/p&gt;
&lt;p&gt;点击目标控制区域『+』弹出添加对话框进行添加&lt;/p&gt;
&lt;p&gt;点击目标控制区域『-』 可以删除已经添加但不再需要的规则（不选择任何指定item则移除当前所有）&lt;/p&gt;
&lt;p&gt;双击任意条目弹出编辑框可以对已经添加条目进行编辑操作&lt;/p&gt;
&lt;p&gt;3：HTTP Body Filter 部分的逻辑于Url Filter 维持一致，唯一不同的是此处的筛选条件是请求的body&lt;/p&gt;
&lt;p&gt;4：Rule Alias 部分用于设置该规则的别名 （该别名会显示在后面 『Tamper Rule』篡改规则列表区）&lt;/p&gt;
&lt;p&gt;注意以上2，3，4都不是必须项如果不需要可以不用填写&lt;/p&gt;


&lt;h3&gt;1.4：『new or edit rule』&lt;/h3&gt;
&lt;p&gt;在创建模式确认创建新规则&lt;/p&gt;
&lt;p&gt;在编辑模式确认保存当前规则&lt;/p&gt;
&lt;p&gt;该按钮与下方『规则编辑控制条』中确认按钮意义一致&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/30BBE1897A9043FD879ED706DA591A50/16533&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/30BBE1897A9043FD879ED706DA591A50/16533&quot;/&gt;&lt;/div&gt;


&lt;h2&gt;二：请求或响应篡改规则编辑区域&lt;/h2&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/346ED7055F484FFF88616B9ACEAF758A/16528&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/346ED7055F484FFF88616B9ACEAF758A/16528&quot;/&gt;&lt;/div&gt;

&lt;p&gt;HTTP篡改区有4个tab分别是 请求修改『Request Modific』；请求替换『Request Replsce』；响应修改『Response Modific』；响应替换『Response Replace』&lt;/p&gt;
&lt;p&gt;通过设置这4类篡改规则您几乎可以对指定Http请求的request或response进行任意的篡改，使它变为您需要的样子&lt;/p&gt;
&lt;p&gt;篡改还包括对文件及动态参数化及外部文件数据源的支持&lt;/p&gt;

&lt;h3&gt;2.1：『Request Modific』&lt;/h3&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/2BA1FC8EE73A4D99856A93E10908E7CE/16750&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/2BA1FC8EE73A4D99856A93E10908E7CE/16750&quot;/&gt;&lt;/div&gt;
&lt;p&gt;『Request Modific』可以完成对http请求的篡改，请求修改按HTTP自身结构分为4块&lt;/p&gt;
&lt;p&gt;分别是对请求url的修改，对请求头的移除，对请求头的添加，对请求实体的修改&lt;/p&gt;

&lt;h4&gt;2.1.1：请求行uri 修改 『Uri Modofic』&lt;/h4&gt;
&lt;p&gt;该编辑区用于控制修改匹配http request的url&lt;/p&gt;
&lt;p&gt;不输入任何值，则代表不修改该项&lt;/p&gt;
&lt;p&gt;第一个文本框输入需要替换的内容，第二个文本框输入替换之后的内容&lt;/p&gt;
&lt;p&gt;注意：该替换规则将替换目标中所有匹配字符串（如果发现多处匹配，将都被替换）&lt;/p&gt;
&lt;p&gt;如果第一个文本框置空，仅在第二个文本框中输入内容，则代表替换请求行的整个uri&lt;/p&gt;
&lt;p&gt;如请求行是 GET https://www.fiddler2.com/UpdateCheck.aspx?isBeta=False HTTP/1.1 ，在第一个文本框中输入&quot;&quot;（置空不输入）,在第二个文本框中输入“http://test.com”&lt;/p&gt;
&lt;p&gt;如果请求『Url Filter』规则匹配，请求在发送前请求行将被篡改为 GET http://test.com HTTP/1.1&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/12A9F61088C3448A82EC1043A52B2AA5/16617&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/12A9F61088C3448A82EC1043A52B2AA5/16617&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图，在第一个文本框中输入&quot;isBeta=False&quot;,在第二个文本框中输入“isBeta=true”&lt;/p&gt;
&lt;p&gt;如果请求『Url Filter』规则匹配，若请求行是 GET https://www.fiddler2.com/UpdateCheck.aspx?isBeta=False HTTP/1.1 ，则Url Modific执行（因为url含有“isBeta=False”），请求在发出前，请求行将被篡改为 GET https://www.fiddler2.com/UpdateCheck.aspx?isBeta=true HTTP/1.1&lt;/p&gt;

&lt;h4&gt;2.1.2：请求头heads移除『Head Modific』『Remove Head』&lt;/h4&gt;
&lt;p&gt;该编辑区用于控制修改匹配http request的head头，删除指定request head头&lt;/p&gt;
&lt;p&gt;点击目标控制区域『+』弹出添加对话框进行添加&lt;/p&gt;
&lt;p&gt;点击目标控制区域『-』 可以删除已经添加但不再需要的head移除规则（不选择任何指定item则移除当前所有）&lt;/p&gt;
&lt;p&gt;双击任意条目弹出编辑框可以对已经添加条目进行编辑操作&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/26A608729F8C4C539DBC70898D532ACD/16640&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/26A608729F8C4C539DBC70898D532ACD/16640&quot;/&gt;&lt;/div&gt;
&lt;p&gt;（如上图点击添加，弹出窗口进行添加，或双击任意item弹出该窗口进行编辑）&lt;/p&gt;
&lt;p&gt;以上『Remove Head』设置表示移除请求头中的Pragram，Cache-Contorl，If-None-Match，If-Modified-Since请求头&lt;/p&gt;
&lt;h4&gt; &lt;/h4&gt;
&lt;h4&gt;2.1.3：请求头heads添加『Head Modific』『Add Head』&lt;/h4&gt;
&lt;p&gt;该编辑区用于控制修改匹配http request的head头，添加指定request head头&lt;/p&gt;
&lt;p&gt;点击目标控制区域『+』弹出添加对话框进行添加&lt;/p&gt;
&lt;p&gt;点击目标控制区域『-』 可以删除已经添加但不再需要的head添加规则（不选择任何指定item则移除当前所有）&lt;/p&gt;
&lt;p&gt;双击任意条目弹出编辑框可以对已经添加条目进行编辑操作&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/1C09E7CBFDD34B0BAC7092E99C69AF85/16613&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/1C09E7CBFDD34B0BAC7092E99C69AF85/16613&quot;/&gt;&lt;/div&gt;
&lt;p&gt;（如上图点击添加弹出窗口进行添加，或双击任意item弹出该窗口进行编辑）&lt;/p&gt;
&lt;p&gt;以上『Add Head』设置表示添加请求头请求头Pragma: no-cache ， Cache-Control: no-cache （因为在『Remove Head』中也有Pragme请求头，所以实际含义是修改Pragme请求头为no-cache）&lt;/p&gt;

&lt;h4&gt;2.1.3备注&lt;/h4&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;关于『Remove Head』&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;因为RFC@2616 请求头中头域名称不区分大小写，所以host与hoST的意义是一样的，一旦规则匹配将会移除请求头中的host头&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;关于『Add Head』&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;添加请求头允许添加2个同名域头，比如您可以同时添加Accept-Encoding: gzip 和Accept-Encoding: deflate 这2个头会分别添加到请求头域（即使使用一样的头域名称）&lt;/p&gt;
&lt;p&gt;注意由于同名头域并不会相互覆盖，所以如果你想实现指定请求头的修改功能，需要先删除指定头域，再添加该头域&lt;/p&gt;
&lt;p&gt;比如您需要将Pragma：xxx 改为Pragma: no-cache，就需要先添加一个Remove Head测试规则Pragma，然后添加一个头域修改规则Pragma: no-cache&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;关于请求或响应篡改规则编辑区域其他类似『Add Head』的操作规则&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;基本操作逻辑维持一致&lt;/p&gt;
&lt;p&gt;点击『+』添加项&lt;/p&gt;
&lt;p&gt;点击『-』删除选定项（未选定任何项删除全部）&lt;/p&gt;
&lt;p&gt;双击任意项为编辑该项&lt;/p&gt;


&lt;p&gt;2.1.4：请求体Body修改『Body Modific』&lt;/p&gt;
&lt;p&gt;如果您对请求中含有Body，您可能也会有对请求体body的修改的需求&lt;/p&gt;
&lt;p&gt;Body Modific的逻辑与Uri Modific基本维持一致，不过同时支持regex正则替换&lt;/p&gt;
&lt;p&gt;不输入任何值，则代表不修改该项&lt;/p&gt;
&lt;p&gt;第一个文本框输入需要替换的内容，第二个文本框输入替换之后的内容&lt;/p&gt;
&lt;p&gt;当第一个文本框以&amp;lt;regex&amp;gt;开头时则表示启用正则替换，后面的内容为查找替换的的正则表达式&lt;/p&gt;
&lt;p&gt;如第一个文本框中输入&quot;&amp;lt;egex&amp;gt;nloginpwd=.*?&amp;amp;&quot;(不包含引号)，第二个文本框中输入“nloginpwd=123456&amp;amp;”&lt;/p&gt;
&lt;p&gt;该正则替换规则表示将请求体Body中所有以“nloginpwd=”开头，以“&amp;amp;”结尾的文本替换为“nloginpwd=123456”&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/B3694116A0B246AD9CD3A5B455946528/16666&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/B3694116A0B246AD9CD3A5B455946528/16666&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图，在第一个文本框置空,在第二个文本框中输入“test”&lt;/p&gt;
&lt;p&gt;如果请求『Url Filter』规则匹配，Http请求body将被替换为“test body”&lt;/p&gt;
&lt;p&gt;注意这种设置即使原始body为空也会进行替换（实际上GET等请求是不含有请求实体的，此处仅为演示）&lt;/p&gt;

&lt;h3&gt;2.2：『Request Replace』&lt;/h3&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/73E9D82EDED2423C8A9AEE4B1401E41B/16746&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/73E9D82EDED2423C8A9AEE4B1401E41B/16746&quot;/&gt;&lt;/div&gt;
&lt;p&gt;『Request Replace』可以完成对http请求的整体替换&lt;/p&gt;
&lt;p&gt;Request Replace是http请求的另一种篡改模式，他不关心匹配请求的原始request内容，直接对整个请求做替换操作&lt;/p&gt;
&lt;p&gt;Request Replace 对替换规则的编辑分为两种方式，辅助模式及Raw模式&lt;/p&gt;
&lt;p&gt;为了方便您创建替换规则，『Request Replace』按http请求结构分为3部分，请求行，请求头请求体，及Raw描述切换（不使用格式辅助，进入Raw编辑进行编辑）&lt;/p&gt;

&lt;h4&gt;2.2.1 『Start Line』编辑替换请求行&lt;/h4&gt;
&lt;p&gt;请求行的编辑按请求行的规则分为&lt;/p&gt;
&lt;p&gt;对请求方法的编辑（可以进行下拉辅助编辑，或手动输入自定义方法）&lt;/p&gt;
&lt;p&gt;对url的编辑（注意请保持url的完整性）&lt;/p&gt;
&lt;p&gt;对http协议版本的编辑（可以进行下拉辅助编辑，或手动输入自定义方法）&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/4873FAE9A70F42D3A3332F7FF5EBBA8B/16803&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/4873FAE9A70F42D3A3332F7FF5EBBA8B/16803&quot;/&gt;&lt;/div&gt;

&lt;h4&gt;2.2.2 『Request Heads』编辑替换请求头&lt;/h4&gt;
&lt;p&gt;请求替换中对请求头的编辑与【2.1.3】中设置请求头类似，使用同样的方式进行配置编辑（此处不再重复说明）&lt;/p&gt;
&lt;p&gt;此处的请求头将与上面『Start Line』一起用于整体替换&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/702320F9A5744236B67E2FC4D58B980A/16818&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/702320F9A5744236B67E2FC4D58B980A/16818&quot;/&gt;&lt;/div&gt;
&lt;h4&gt; &lt;/h4&gt;
&lt;h4&gt;2.2.3 『Request Body』编辑替换请求体&lt;/h4&gt;
&lt;p&gt;请求体的替换的编辑基本功能十分便捷，您只需要在图中高亮部分填入您想要的request body正文即可&lt;/p&gt;
&lt;p&gt;如果您的body正文是二进制的数据，或是一个需要上传的文件，您可以直接在此处添加本地文件&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/036E9DBAB2DA4355A0735DA9DBAF3A81/16894&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/036E9DBAB2DA4355A0735DA9DBAF3A81/16894&quot;/&gt;&lt;/div&gt;
&lt;p&gt;编辑框单机鼠标右键，在弹出菜单中选择『add file』&lt;/p&gt;
&lt;p&gt;选择计算机中本地文件文件&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/182C53DC0BFD4BFAB11243B9B3ED1B64/16891&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/182C53DC0BFD4BFAB11243B9B3ED1B64/16891&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图选择文件后“&amp;lt;&amp;lt;replace file path&amp;gt;&amp;gt;C:\Users\administer\Pictures\3613e290-8028-4ddc-946c-b89c67f4f31a.jpg”将会被添加至编辑框&lt;/p&gt;
&lt;p&gt;表示3613e290-8028-4ddc-946c-b89c67f4f31a.jpg该文件将直接作为request的请求实体进行替换&lt;/p&gt;
&lt;p&gt;您也可以按照格式约定手动添加文件（以“&amp;lt;&amp;lt;replace file path&amp;gt;&amp;gt;”开头，后接文件路径）&lt;/p&gt;
&lt;p&gt;注意：只有以&amp;lt;&amp;lt;replace file path&amp;gt;&amp;gt;开头才表示文件模式(“data&amp;lt;&amp;lt;replace file path&amp;gt;&amp;gt;C:\test.jpg”这种数据将不会被当作文件处理)&lt;/p&gt;
&lt;p&gt;关于『add Parameter』添加参数化数据&lt;/p&gt;
&lt;p&gt;您可以在您需要的任意地方右键选择『add Parameter』添加您想要的静态化数据&lt;/p&gt;
&lt;p&gt;详细使用方法请查看【八：参数化数据设置】（不了解参数化数据的设置并不会影响您使用freehttp的主要功能）&lt;/p&gt;
&lt;h4&gt; &lt;/h4&gt;
&lt;h4&gt;2.2.4 『Raw Mode』切换原始数据视图&lt;/h4&gt;
&lt;p&gt;如果您熟悉Http原始报文，您可以点击下图中的图标进入raw mode，对将要替换的原始报文进行编辑&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/E056CE9ADF5D4F9F8CFE7A1581DF65F1/16947&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/E056CE9ADF5D4F9F8CFE7A1581DF65F1/16947&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/AAA35BE4689049EFA78C1795471C924C/16954&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/AAA35BE4689049EFA78C1795471C924C/16954&quot;/&gt;&lt;/div&gt;
&lt;p&gt;进入raw mode可以直接编辑（如果您使用『get http sesion in left session list』获取过session信息，这里会提前填入目标http的request报文方便您的编辑）&lt;/p&gt;
&lt;p&gt;您不用担心您输入的错误的http格式会影响替换，如果使用『raw mode』在您编辑或新增完成时，系统会检查你的输入，如果格式有误，会给出明确提示告诉您什么地方不符合标准规范（标准规范请参见RFC2616）&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/7D3410A003504933980A9810AECBD16D/16977&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/7D3410A003504933980A9810AECBD16D/16977&quot;/&gt;&lt;/div&gt;
&lt;p&gt;raw mode 支持上文request replace的全部功能，包括【八：参数化数据设置】会介绍的参数化数据  &lt;/p&gt;
&lt;p&gt;在raw mode您同样可以使用文件替换request body，替换方式与【2.2.3】中的问题替换基本维持一致&lt;/p&gt;
&lt;p&gt;需要注意的是，只有request body才能被替换为文件&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/FA864BEB9D494DDE8E1EF694603D2CCC/16991&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/FA864BEB9D494DDE8E1EF694603D2CCC/16991&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图如果您已经有body 内容为test data，则不能同时添加文件body&lt;/p&gt;

&lt;h4&gt;2.2.4备注&lt;/h4&gt;
&lt;p&gt;在右键添加文件时，同时可以看到右键菜单中有『anto Content-Length』,如果勾选该项在你创建或保存当前规则时会自动计算Body长度并为请求添加Content-Length头。&lt;/p&gt;
&lt;p&gt;在你点击创建或保存按钮时，『Request Replace』Tab当前停在raw mode模式 即保存raw mode 数据，停在辅助模式则使用辅助模式的数据&lt;/p&gt;

&lt;h3&gt;2.3：『Response Modific』&lt;/h3&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/E2E2320F293145D0849716A587F1D20D/17057&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/E2E2320F293145D0849716A587F1D20D/17057&quot;/&gt;&lt;/div&gt;
&lt;p&gt;『Response Modific』可以完成对http响应的任意篡改，请求修改按HTTP自身结构分为3块，分别是对响应头的移除，对请响应的添加，对响应实体的修改&lt;/p&gt;
&lt;p&gt;『Response Modific』的编辑及执行模式与『Response Modific』基本维持一致，不同的是在『Response Modific』不能对响应行及响应状态码进行篡改（因为对状态码的修改意味着对整个响应的完全修改，如果需要修改状态码请使用后面的『Response Replace』）&lt;/p&gt;


&lt;h4&gt;2.3.1：响应头heads移除『Head Modific』『Remove Head』&lt;/h4&gt;
&lt;p&gt;该编辑区用于控制修改匹配http response的head头，删除指定response head头&lt;/p&gt;
&lt;p&gt;该项编辑逻辑与【2.1.2】中对请求头的移除是一致的，这里不再重复说明&lt;/p&gt;

&lt;h4&gt;2.3.2：响应头heads添加『Head Modific』『Add Head』&lt;/h4&gt;
&lt;p&gt;该编辑区用于控制修改匹配http response的head头，添加指定response head头&lt;/p&gt;
&lt;p&gt;该项编辑逻辑与【2.1.3】中对请求头的添加是一致的，这里不再重复说明&lt;/p&gt;


&lt;h4&gt;2.3.3：响应体Body修改『Body Modific』&lt;/h4&gt;
&lt;p&gt;如果您的响应中含有body，您可能也会有对响应body的修改的需求&lt;/p&gt;
&lt;p&gt;同样支持完全覆盖，替换，正则替换&lt;/p&gt;
&lt;p&gt;该项编辑逻辑与【2.1.4】中对请体的修改是一致的，这里不再重复说明&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/B696C7D4E5B44412B6E045AB5238906A/17102&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/B696C7D4E5B44412B6E045AB5238906A/17102&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图设置则表示为匹配的http响应添加一个Set-Cookie头，内容为UM_distinctid=167,当浏览器接收到这个被篡改过的响应头后，会为该域名添加名为UM_distinctid的cookie，如果已有同名cookie则会直接覆盖&lt;/p&gt;


&lt;h3&gt;2.4：『Response Replace』&lt;/h3&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/67F20EF5FE6C4ABFA3EFEF770CF91ED9/17120&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/67F20EF5FE6C4ABFA3EFEF770CF91ED9/17120&quot;/&gt;&lt;/div&gt;
&lt;p&gt;『Response Replace』可以完成对http响应的整体替换&lt;/p&gt;
&lt;p&gt;Response Replace是http响应的另一种篡改模式，他不关心匹配请求的原始response内容，直接对整个响应做替换操作&lt;/p&gt;
&lt;p&gt;Response Replace 对响应的替换直接使用Raw模式，不过为了方便替换提供了一组标准响应返回的模板&lt;/p&gt;
&lt;p&gt;Response Replace 按编辑功能分为3部分，响应Raw内容编辑，模板选择，Response Direct选择&lt;/p&gt;
&lt;h4&gt; &lt;/h4&gt;
&lt;h4&gt;2.4.1 响应Raw原始报文编辑&lt;/h4&gt;
&lt;p&gt;在此Tab可以直接编辑替换用的Raw原始报文（如果您使用『get http sesion in left session list』获取过session信息，这里会提前填入目标http的response报文方便您的编辑）&lt;/p&gt;
&lt;p&gt;您不用担心您输入的错误的http格式会影响替换，如果使用『response replace』在您保存或新建时系统会检查你的输入，并给出明确提示告诉您什么地方不符合标准规范（标准规范请参见RFC2616）&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/D5B0AB5907404B19ABEC03DD790C2822/17163&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/D5B0AB5907404B19ABEC03DD790C2822/17163&quot;/&gt;&lt;/div&gt;
&lt;p&gt;与【2.2.4】 请求『Raw Mode』替换一样，支持文件及参数化数据，除报文要求的格式外，其他编辑逻辑与【2.2.4】中规则维持一致，此处不再重复说明&lt;/p&gt;

&lt;h4&gt;2.4.2『Select Replace Template』选择模板&lt;/h4&gt;
&lt;p&gt;如果您需要自己创建response响应内容，您可以使用模板辅助您的编辑，模板包含大多数常规响应的基本格式&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/32DF8198D67D4FF48F6A7625710F2366/17179&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/32DF8198D67D4FF48F6A7625710F2366/17179&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图下拉选择您想要的模板即可，上图中选择了[HTTP/1.1 200 OK]的模板，模板内容即是一个常规Http 200 返回的例子，您可以直接在例子上进行修改&lt;/p&gt;

&lt;h4&gt;2.4.3『Response Direct』直接返回响应&lt;/h4&gt;
&lt;p&gt;该选项用于控制response返回时机，当『Url Filter』匹配到http请求后，同时该篡改规则为『Response Replace』时，可以使用该项设置请求是否直接返回&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/DC1D84269B004D32B776504A21FF5946/17210&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/DC1D84269B004D32B776504A21FF5946/17210&quot;/&gt;&lt;/div&gt;
&lt;p&gt;当『Response Direct』被勾选选时，feddler将不会把请求发送到目标服务器，而是使用Response Replace里的resonse直接返回，即客户端发送请求后就会立即接收到您自定义的响应，这种模式对于实际请求是不存在的或暂时不能连通的情况是十分必要（比如您想要使用暂时未开发好的接口，这时就需要该选项mock接口），同时您可以设置接口的执行时间在后面【3.3】『set response latency』 会介绍如何为响应设置指定响应时间&lt;/p&gt;
&lt;p&gt;当『Response Direct』未被勾选时，则使用常规请求路径，请求会被发送至服务器（即使服务的返回并不会被使用），在服务返回响应结果后，执行替换操作 （默认不勾选）&lt;/p&gt;


&lt;h2&gt;三：规则编辑控制条及常规设置编辑区域&lt;/h2&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/3193C435B241499BAAE30A90C2BE5A58/17279&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/3193C435B241499BAAE30A90C2BE5A58/17279&quot;/&gt;&lt;/div&gt;
&lt;p&gt;规则控制编辑条由3部分组成如上图1，2，3，4组成的规则控制，5快速规则编辑，6篡改工具及常规设置&lt;/p&gt;

&lt;h3&gt;3.1『affirm rule』确认创建规则或保存规则修改&lt;/h3&gt;
&lt;p&gt;该按钮的功能与【1.4】『new or edit rule』维持一致&lt;/p&gt;
&lt;p&gt;在创建模式确认创建新规则&lt;/p&gt;
&lt;p&gt;在编辑模式确认保存当前规则&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/9512D1519C2448A5B437EFED5FCEE012/17297&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/9512D1519C2448A5B437EFED5FCEE012/17297&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图当年点击确认（黄色标记区域）时，即会创建能编辑的篡改规则&lt;/p&gt;
&lt;p&gt;请注意上方『url Filter』右侧文字提示（New Mode 表示现在处于创建模式）会显示当前模式&lt;/p&gt;
&lt;p&gt;还有一点需要说明当前篡改规则编辑区域停留在哪种编辑模式，即是对哪种规则的保存（『Request Modific』『Request Replsce』『Response Modific』『Response Replace』）&lt;/p&gt;
&lt;p&gt;单个规则仅包含一种篡改规则，如果您需要对同一个请求同时执行多个篡改，您可以对其创建多个篡改规则（实际应用中这种场景是存在的）&lt;/p&gt;
&lt;p&gt;如果当前创建的规则是『Request Modific』或『Request Replsce』，创建完成的规则会出现在『Request Rule』列表中，如果是『Response Modific』或『Response Replace』，创建完成则会出现在『Response Rule』中&lt;/p&gt;
&lt;p&gt;完成创建后，下方日志会有相应记录，并清空当前编辑区域（图中编辑区域没有清空仅为演示，实际使用中编辑区数据将完全被清除）&lt;/p&gt;
&lt;p&gt;当您点击确认时系统会检查您编辑的规则，如果有不符合要求的地方会有相应提示，并在出现错误的编辑的区域进行短时间的高亮显示以提示 （通常如果是新规则会在添加在规则类表末尾，并有短时间高亮显示进行提示）&lt;/p&gt;

&lt;h3&gt;3.2『cancel edit』取消&lt;/h3&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/46DEF5031AFC42008389544F3435AD30/17351&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/46DEF5031AFC42008389544F3435AD30/17351&quot;/&gt;&lt;/div&gt;
&lt;p&gt;『cancel edit』功能相对简单，仅用于清除编辑区域保存的信息&lt;/p&gt;
&lt;p&gt;在创建模式直接清除信息，在编辑模式可以取消对当前规则的编辑状态&lt;/p&gt;

&lt;h3&gt;3.3『set response latency』 设置响应延时&lt;/h3&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/8390BD05A53A468FA976AAC54C3B9FF3/17369&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/8390BD05A53A468FA976AAC54C3B9FF3/17369&quot;/&gt;&lt;/div&gt;
&lt;p&gt;『set response latency』可用于设置『Response Rule』的响应延迟（『Response Modific』及『Response Replace』为『Response Rule』）&lt;/p&gt;
&lt;p&gt;如上图该图标按钮有3种状态（can set ， unable set，is seded）&lt;/p&gt;
&lt;p&gt;1.can set：延时设置对当前篡改规则为可设置状态，此时点击该图标即弹出设置框。&lt;/p&gt;
&lt;p&gt;2.unable set ：延时设置对当前篡改规则为不可设置状态，此时该图标不能点击，因为响应延时是针对http response的延时，即该设置对『Request Modific』『Request Replsce』是无效的&lt;/p&gt;
&lt;p&gt;3.is seted：第3种状态是已经设置过延时的情况，如图设置的数值将会直接显示在刚刚图标的位置。（这个时候也可以点击该数值进行修改）&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/C4FDCD5E28BA4806B0246366F6D155AB/17415&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/C4FDCD5E28BA4806B0246366F6D155AB/17415&quot;/&gt;&lt;/div&gt;
&lt;p&gt;设置窗口如上图，您直接填入数值即可（单位为毫秒），如果填0或空则表示不设置延时&lt;/p&gt;

&lt;h3&gt;3.4『set parameter pick info』设置参数化数据获取规则&lt;/h3&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/6C73C3065E394B1CB798C8943C370A80/17434&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/6C73C3065E394B1CB798C8943C370A80/17434&quot;/&gt;&lt;/div&gt;
&lt;p&gt;『set parameter pick info』用于在原始请求或响应中捕获初始化数据（对现有参数化数据做添加或修改操作）&lt;/p&gt;
&lt;p&gt;该图标有2种状态含义分别是&lt;/p&gt;
&lt;p&gt;1：该篡改规则未设置任何参数捕获规则&lt;/p&gt;
&lt;p&gt;2：该篡改规则至少已经设置一条参数捕获规则&lt;/p&gt;
&lt;p&gt;这两种状态下都可以点击图标直接进入编辑框，如果已经有设置过的规则，已有规则会在编辑框中直接加载&lt;/p&gt;
&lt;p&gt;详细使用方法请查看【八：参数化数据设置】（不了解参数化数据的设置并不会影响您使用freehttp的主要功能）&lt;/p&gt;

&lt;h3&gt;3.5『Quick Rule』快速规则&lt;/h3&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/6B40741F03D1402A841107529E1F715B/17467&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/6B40741F03D1402A841107529E1F715B/17467&quot;/&gt;&lt;/div&gt;
&lt;p&gt;当前版本共有6个快速规则，帮助您快速完成篡改规则的设置&lt;/p&gt;

&lt;h4&gt;3.5.1『disable cache』&lt;/h4&gt;
&lt;p&gt;该quick rule针对Request Modific，可以为匹配规则的请求去除条件缓存并强制服务器不要使用缓存&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/5E430099C69F42B89EDCCF555E74211C/17480&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/5E430099C69F42B89EDCCF555E74211C/17480&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图使用该quick rule后会在『Request Modific』中『Head Modific』直接添加预设的值，这时您直接点击确认即可用快速完成一个Request Rule的创建&lt;/p&gt;

&lt;h4&gt;3.5.2『add cookie 』&lt;/h4&gt;
&lt;p&gt;该quick rule针对Request Modific，可以为匹配规则的请求添加指定cookie&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/9060D2A1AC734B02B673AD9C6543D4C2/17502&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/9060D2A1AC734B02B673AD9C6543D4C2/17502&quot;/&gt;&lt;/div&gt;
&lt;p&gt;选择项后弹出如上图对话框，直接输入您需要设置的cookie即可，（注意cookie的格式 key=value ）&lt;/p&gt;

&lt;h4&gt;3.5.3『delete cookie』&lt;/h4&gt;
&lt;p&gt;该quick rule针对Response Modific，可以为匹配规则的响应添加Set-Cookie（通过设置指定cookie立即过期，从而实现删除客户端cookie的功能）&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/717E865F65514690BD21252343AC1C60/17517&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/717E865F65514690BD21252343AC1C60/17517&quot;/&gt;&lt;/div&gt;
&lt;p&gt;选择项后弹出如上图对话框，在Name处输入你想要删除cookie的名称（同时为了让浏览器准确定位到您要删除的cookie，你还需要注意修改Domain及Path为正确的值，一般情况下Domain为当前网站域名，Path为/）&lt;/p&gt;

&lt;h4&gt;3.5.4『set client cookie』&lt;/h4&gt;
&lt;p&gt;该quick rule针对Response Modific，可以为匹配规则的响应添加指定Set-Cookie，设置客户端cookie （这里是通过Set-Cookie完成对客户端cookie的效果，比如在手机浏览器，或某些软件的内置web浏览器并没有提供调试模式，这个时候Set-Cookie将是不错的解决方案）&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/B72887D5891A4EE781F38A44F52E968F/17533&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/B72887D5891A4EE781F38A44F52E968F/17533&quot;/&gt;&lt;/div&gt;
&lt;p&gt;选择项后弹出如上图对话框，按提示输入指定值即可&lt;/p&gt;

&lt;h4&gt;3.5.5『copy session cookies』&lt;/h4&gt;
&lt;p&gt;该quick rule针对针对Response Modific，可以快速将指定session的所有cookies快速的设置到客户端另一个域下（该功能可以让您在多个浏览器，甚至多个设备，多个域名下共享同一份cookie，这在调试或测试中跳过授权会非常有效）&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/7D800DCB5E0D48238076D7B1FC9214E3/17563&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/7D800DCB5E0D48238076D7B1FC9214E3/17563&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图要使用该功能，您需要先在Filddler左侧Session列表选择您需要复制cookies的源请求（图中选择的是github.com/lulianqi/FreeHttp），选中指定session后点击copy session cookies即可以看到在Heads Modific的Add Head编辑框自动添加了来自github的cookie信息（该规则会为匹配的请求添加Set-Cookies从而达到复制效果）&lt;/p&gt;

&lt;h4&gt;3.5.6『add UserAgent』&lt;/h4&gt;
&lt;p&gt;该quick rule针对Request Modific，可以为匹配规则的请求添加指定UserAgent&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/DFD99B6B597D4CF5AE2AE020F660DD33/17600&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/DFD99B6B597D4CF5AE2AE020F660DD33/17600&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图该项相对简单，直接填入您需要的UserAgent即可&lt;/p&gt;

&lt;h3&gt;3.6『Modific Tool』篡改工具及常规设置&lt;/h3&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/8178248B2A3149DFB0F060DF3A0B895C/17611&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/8178248B2A3149DFB0F060DF3A0B895C/17611&quot;/&gt;&lt;/div&gt;
&lt;p&gt;当前版本共有4个工具项，方便您的使用或提供其他设置功能&lt;/p&gt;
&lt;h4&gt;3.6.1『show selected session stream』&lt;/h4&gt;
&lt;p&gt;该工具可以将您选择的session以RAW的模式显示在一个新的窗口（该窗口一直顶层显示，但不影响您在主窗口下的操作），您在创建篡改规则的同时可以使用该窗口查看session信息而不用切换Tab（您也可以直接在session列表中选中session拖动到编辑区域，raw形式的报文同样会显示在日志区，但不会打开新的窗口 ）&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/F61813A031F049C8AD8C6F49037EAF4B/17633&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/F61813A031F049C8AD8C6F49037EAF4B/17633&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图在fiddler左侧session列表选择任意请求，点击show selected session stream将会弹出新的独立窗口以显示您选择的session的原始报文&lt;/p&gt;

&lt;h4&gt;3.6.2『http tamper setting』&lt;/h4&gt;
&lt;p&gt;该项提供一些对FreeHttp插件的基本设置&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/8924F4C8B28648869980EAE7039FB5C8/17648&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/8924F4C8B28648869980EAE7039FB5C8/17648&quot;/&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;is only match fist tamper rule: （默认是）是否仅执行第一个匹配成功的篡改规则（因为您可以对同一个请求有多个篡改规则，您可以通过此选项控制是否执行多个篡改规则）&lt;/li&gt;
&lt;li&gt;is skip tls handshake:（默认是）是否对TLS握手包进行匹配（除非您需要调试TLS握手，建议您维持默认设置）&lt;/li&gt;
&lt;li&gt;is default enable tamper rule:（默认否）是否默认启用规则匹配（在『Request Rule』及『Response Rule』都有独立启用开关，该选项用于控制软件启动时的默认状态）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3.6.3『parameter data manage』参数化数据管理器&lt;/h4&gt;
&lt;p&gt;该项提供对FreeHttp的参数化数据的集中管理&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/D6DAA58046084144B03831DCE7544594/17678&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/D6DAA58046084144B03831DCE7544594/17678&quot;/&gt;&lt;/div&gt;
&lt;p&gt;选择该项后弹出层管理器窗口，您可以在管理器中对参数进行新增，修改，测试等操作&lt;/p&gt;
&lt;p&gt;后面【八：参数化数据设置】会详细介绍参数化数据的使用，这里暂不具体说明&lt;/p&gt;

&lt;h4&gt;3.6.4『issues and suggest』&lt;/h4&gt;
&lt;div readability=&quot;10.258426966292&quot;&gt;点击该选会使用您的默认浏览器打开问题提交页，您可以在该页提交您的问题及意见（在此处提交问题可能需要您拥有github帐号，如果不方便登录可以直接发送邮件至&lt;a href=&quot;mailto:mycllq@hotmail.com&quot;&gt;mycllq@hotmail.com&lt;/a&gt;提交您的问题及建议）&lt;/div&gt;


&lt;h2&gt;四：『Execution Log』执行日志&lt;/h2&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/1C3A7F5544704D46A6A8C431507D5FB2/17724&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/1C3A7F5544704D46A6A8C431507D5FB2/17724&quot;/&gt;&lt;/div&gt;
&lt;p&gt;该区域仅对篡改规则的操作及执行日志进行显示&lt;/p&gt;
&lt;p&gt;日志统一格式以数据开头，并用颜色区分错误，提示及信息日志&lt;/p&gt;



&lt;h2&gt;五：『Tamper Rule』篡改规则列表&lt;/h2&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/1532BB9A5AFF4C1EBC91BC44C3B20B03/17749&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/1532BB9A5AFF4C1EBC91BC44C3B20B03/17749&quot;/&gt;&lt;/div&gt;
&lt;p&gt;『Tamper Rule』篡改规则主要集中显示及管理您已经创建的规则，您可以在这里设置需要生效的规则，删除或修改已有规则，对规则排序等操作&lt;/p&gt;
&lt;p&gt;列表分为2部分（这2部分的操作逻辑都是一致，仅是存储的规则类型不一样）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;上部列表为『Request Rule』请求篡改规则（由『Request Modific』，以编辑图标显示及『Request Replsce』以替换图标显示组成）&lt;/li&gt;
&lt;li&gt;下部列表为『Request Rule』响应篡改规则（由『Response Modific』，以编辑图标显示及『Response Replace』，以替换图标显示组成）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;5.1 Tamper Rule控制选项&lt;/h3&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/DCE81AADF4C04510B1DB0311188AEF18/17779&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/DCE81AADF4C04510B1DB0311188AEF18/17779&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Tamper Rule控制选项主要由2部分组成&lt;/p&gt;
&lt;p&gt;位于右上角的控制栏，从左至右分别是『+』添加，『-』删除，『启用』控制&lt;/p&gt;
&lt;p&gt;点击添加：编辑面板会直接切换至『Request Modific』提示您进行编辑（如果是在『Response Rule』上点击添加编辑面板则会切换至『Response Modific』）&lt;/p&gt;
&lt;p&gt;点击删除：删除选中Rule，如果没有选择任何Rule则会向您询问是否删除全部Rule&lt;/p&gt;
&lt;p&gt;启用控制：Request Rule与Response Rule的启用控制是独立的，您可以分别设置他们的启用状态，只有当您选择启用后，Fillder才会匹配列表中处于Checked状态的规则，匹配命中后执行规则（您可以设置启动时直接启用，详见【3.6.2】『http tamper setting』）&lt;/p&gt;
&lt;p&gt;在篡改规则列表区任意位置右键可提出Rule控制菜单&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;remove selected rule 删除选定规则&lt;/li&gt;
&lt;li&gt;remove all rule 删除所有规则&lt;/li&gt;
&lt;li&gt;enable this rule 生效指定规则&lt;/li&gt;
&lt;li&gt;enable all rule 生效所有规则&lt;/li&gt;
&lt;li&gt;unable all rule 让所有规则不生效&lt;/li&gt;
&lt;li&gt;edit this rule 编辑当前规则&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;5.2 Tamper Rule信息显示&lt;/h3&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/DAC2A65F212E4B1088246103E2838263/17839&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/DAC2A65F212E4B1088246103E2838263/17839&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图您创建的规则都会显示在Tamper Rule列表里，每条规则在列表处显示信息依次有如下4项&lt;/p&gt;
&lt;p&gt;1：是否进行匹配复选框（如果您想要篡改规则生效，除了要设置『启用』控制，还需要将此处设置为勾选状态）&lt;/p&gt;
&lt;p&gt;2：替换/编辑图标，该处仅显示一个图标表示当前篡改规则是一个编辑规则还是替换规则&lt;/p&gt;
&lt;p&gt;3：当前篡改规则的的序号，注意该序号是自动生成的唯一序号，在您对规则做添加或删除操作时会重新生成每条规则的序号&lt;/p&gt;
&lt;p&gt;4：规则名称，如果您没有设置规则别名这里会直接显示匹配url的方式加匹配url值（别名的设置请参考【1.3】『adit advanced http filter』）&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/82F83E7415C247F4AB29D13982D24141/17885&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/82F83E7415C247F4AB29D13982D24141/17885&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图，但您将鼠标移至rule图标处会显示规则匹配的详细内容（仅显示匹配信息，不显示篡改详情）&lt;/p&gt;

&lt;p&gt;2：请求必须含有名为“Data”的请求头，且该请求头的值含有“GMT”&lt;/p&gt;
&lt;p&gt;3：请求Body必须含有显示的字符串&lt;/p&gt;

&lt;h3&gt;5.3 Rule的编辑及排序&lt;/h3&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/2EC438EA31A54B19B37561762E34993D/17907&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/2EC438EA31A54B19B37561762E34993D/17907&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图您在rule列表对任意篡改规则进行双击则进入编辑模式，对当前规则进行编辑&lt;/p&gt;
&lt;p&gt;处于编辑模式的rule在列表处以红色背景展示，在图中红线出也显示了当前编辑面板的状态&lt;/p&gt;
&lt;p&gt;请注意编辑完成后务必点击保存使更改生效（保存成功后当前rule规则特殊背景色会消失）&lt;/p&gt;
&lt;p&gt;如果您想放弃修改请点击取消（详见：【3.2】『cancel edit』取消）&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/5A3ABCAE614E4FFDBDBA9FE4535421A1/17945&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/5A3ABCAE614E4FFDBDBA9FE4535421A1/17945&quot;/&gt;&lt;/div&gt;
&lt;p&gt;规则的匹配是由上至下的，所以最上面的规则会被先匹配到，如果您『is only match fist tamper rule』设置的是On，那如果有2个生效规则都可以被匹配到，实际当前一个匹配规则匹配成功即会停止下面的匹配，这种情况下规则顺序的更改将十分必要&lt;/p&gt;
&lt;p&gt;顺序调整也十分便捷，您只需要选择您想要调整位置的rule(支持多选)，将它拖动到您需要的位置即可&lt;/p&gt;

&lt;h2&gt;六：快速入门&lt;/h2&gt;
&lt;p&gt;这里向您演示如何快速创建一个规则，并完成对http请求或响应的修改&lt;/p&gt;

&lt;p&gt;假设我们希望修改url中isBeta的值为ture，并将Connection:头修改为Keep-Alive&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/6097EB13989E4C758D88EFBF31A8EBBD/17990&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/6097EB13989E4C758D88EFBF31A8EBBD/17990&quot;/&gt;&lt;/div&gt;
&lt;p&gt;您只需要在填入如上图所示信息，点击右下角确认&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/5DA2C65165CB485F80C27FD48A9D619A/17996&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/5DA2C65165CB485F80C27FD48A9D619A/17996&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图设置开启规则匹配并勾选您需要参与匹配的规则（图中序号为6的的请求即是我们刚刚创建的规则）&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/B7A856AD1D084D63B9EAACEE11F88A1A/18008&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/B7A856AD1D084D63B9EAACEE11F88A1A/18008&quot;/&gt;&lt;/div&gt;
&lt;p&gt;当系统匹配到http请求后，会将fiddler左侧session列表中被匹配中session，及右侧rule列表被匹配中规则同时以浅黄色高亮提示（rule列表处高亮提示将在2-3秒后消失），同时在Log日志区会出现相应日志&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/80621104AFB546A89DDFBA8B4685AFCA/18013&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/80621104AFB546A89DDFBA8B4685AFCA/18013&quot;/&gt;&lt;/div&gt;
&lt;p&gt;篡改结果如上图Inspectors标红处，可以看到对http的修改已经生效&lt;/p&gt;

&lt;h2&gt;七：简单实践&lt;/h2&gt;
&lt;p&gt;目标：将baidu首页的logo替换为google的logo&lt;/p&gt;


&lt;p&gt;通过FreeHttp我们有多种方案可以完成目标&lt;/p&gt;
&lt;p&gt;1：使用『Request Modific』修改请求url内容让他实际请求google的logo&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/757E22C5DEB640CE99E7809A334E0999/18051&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/757E22C5DEB640CE99E7809A334E0999/18051&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图设置规则即可&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/7BF9777F724F49809DA8C9E78C524BE1/18054&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/7BF9777F724F49809DA8C9E78C524BE1/18054&quot;/&gt;&lt;/div&gt;
&lt;p&gt;效果如图实际请求baidu logo的请求实际被修改为了google的（这些改动对客户端浏览器是不可见的，不过因为是图片文件所以您在测试的时候请注意浏览器缓存）&lt;/p&gt;

&lt;p&gt;2：使用『Response Replace』修改请求重定向到google的链接&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/85323047FCD546A99CA20B0857C6C9D4/18067&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/85323047FCD546A99CA20B0857C6C9D4/18067&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图设置规则即可（如果您刚刚设置了对该图片链接的Request Modific规则，为了不影响测试过程请将前面的规则设置为不可用）&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/C95ABCBD9F0743BBB15D6B4076E1F02C/18077&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/C95ABCBD9F0743BBB15D6B4076E1F02C/18077&quot;/&gt;&lt;/div&gt;
&lt;p&gt;效果如图，bd_logo1.png的请求实际被重定向到了新的地址，同样实现了刚刚的效果&lt;/p&gt;

&lt;p&gt;3：使用『Response Replace』直接替换返回图片内容&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/D35F0456DCC94EADB0FC206923FA7996/18095&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/D35F0456DCC94EADB0FC206923FA7996/18095&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图设置规则即可（本地图片需要提前准备）&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/12E47D8E0E2A4C0EB962ECD64B65C4AC/18089&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/12E47D8E0E2A4C0EB962ECD64B65C4AC/18089&quot;/&gt;&lt;/div&gt;
&lt;p&gt;效果如图（效果是一样的实际原理稍有不同，这次是直接使用本地文件更改的请求响应）&lt;/p&gt;

&lt;p&gt;4：使用『Response Modific』修改百度首页HTML，将图片元素的地址修改为google的链接&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/82FB34A9888D46659FCE8FDC867D752C/18108&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/82FB34A9888D46659FCE8FDC867D752C/18108&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/37148A544C5D4D7EB75F6AD07FFDC28D/18106&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/37148A544C5D4D7EB75F6AD07FFDC28D/18106&quot;/&gt;&lt;/div&gt;
&lt;p&gt;效果如图，可以看到这次百度首页的HTML的地址直接被修改了，浏览器解析到被篡改的url从而请求了错误的图片&lt;/p&gt;



&lt;h2&gt;八：参数化数据设置&lt;/h2&gt;
&lt;p&gt;参数化数据的使用可以让您使用篡改规则动态的修改http的内容，并且支持在http请求或相应中捕获数据供篡改规则使用&lt;/p&gt;
&lt;p&gt;当前版本支持以下类型的参数化数据 （所有种类的参数化数据可以使用『=』当前值，『+』下一个值，『-』上一个值这3种方式进行取值）&lt;/p&gt;
&lt;p&gt;Key-Value 这是最直接的参数类型，仅提供Key Value 功能，一般用于固定常量，或存放从HTTP报文中捕获的数据&lt;/p&gt;
&lt;p&gt;Index 该参数类型提供一种类似索引的功能（您可以设置它的起始值及范围，还可以设置每次取值的进步） (the max is 2147483647)&lt;/p&gt;
&lt;p&gt;LongIndex 该参数类型与Index类似，不过LongIndex提供了更大的范围(the max is 9223372036854775807)&lt;/p&gt;
&lt;p&gt;StringIndex 该参数与与LongIndex类似，不过它提供一直固定长度的索引（如0001到9999而不是1到9999）&lt;/p&gt;
&lt;p&gt;Time 该参数可以让您以指定格式获取当前时间&lt;/p&gt;
&lt;p&gt;Random 该参数可以让您以指定格式获取一个随机字符串/数&lt;/p&gt;
&lt;p&gt;List 该参数提供一组特定列表，如“小红”，“小黑”，“小花”，您可以使用该参数依次或随机取出设置的3个值&lt;/p&gt;
&lt;p&gt;CSV 该参数可以让您直接使用CSV文件中的数据&lt;/p&gt;

&lt;h3&gt;8.1 『parameter data manage』参数化数据管理器&lt;/h3&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/80C308A5F57A4E1A8943DB14BF47BA2D/18318&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/80C308A5F57A4E1A8943DB14BF47BA2D/18318&quot;/&gt;&lt;/div&gt;
&lt;p&gt;点击Modific Tool中的parameter data manage 即可弹出如上图所示参数化数据管理器（在request replace 机response replace 编辑区右键菜单中add parameter data -&amp;gt; edit data 也可以打开该管理器）&lt;/p&gt;
&lt;p&gt;参数化数据管理器只要用于集中管理您所添加的参数化数据&lt;/p&gt;

&lt;h4&gt;8.1.1参数化数据管理器基本显示及操作&lt;/h4&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/2B7DD049A8F247B5AEBBA1EF3557F7EB/18340&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/2B7DD049A8F247B5AEBBA1EF3557F7EB/18340&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图『parameter data manage』主要分如上3个部分&lt;/p&gt;
&lt;p&gt;1：parameter data manage类别 （点击不同的类别分类可以进行列表切换）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;KeyValue：包含Key-Value参数列表&lt;/li&gt;
&lt;li&gt;Parameter：包含Index，LongIndex，StringIndex，Time，Random，List参数列表&lt;/li&gt;
&lt;li&gt;DataSouce：包含CSV参数列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2：参数列表&lt;/p&gt;
&lt;p&gt;列表依次显示参数的名称，类别，当前值（可能每一次取值都不一样，列表仅显示当前值）&lt;/p&gt;
&lt;p&gt;您可以通过列表右上方添加删除按钮添加删除参数&lt;/p&gt;
&lt;p&gt;3：控制当前参数&lt;/p&gt;
&lt;p&gt;您在参数列表中选择任意参数，该参数会在这里进入编辑模式&lt;/p&gt;
&lt;p&gt;该区依次显示参数名称（不可编辑），当前值（可编辑），控制按钮&lt;/p&gt;
&lt;p&gt;控制选项一共有3个&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;编辑当前值：点击该按钮即为用该区文本框中的内容设置当前参数（注意并不是任意值都是合法的，如字母“ABC”就对一个Index类型的参数一定不合法）&lt;/li&gt;
&lt;li&gt;取下一个值：获取当前参数的下一个值&lt;/li&gt;
&lt;li&gt;重置参数：对当前参数进行重置&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;8.1.2添加参数化数据&lt;/h4&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/A2B34423DB8B4B8DA17967014FEC63A5/18410&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/A2B34423DB8B4B8DA17967014FEC63A5/18410&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如同点击添加按钮弹出添加框，依次选择填写图中4处信息即可完成添加&lt;/p&gt;
&lt;p&gt;1：下拉选择参数化数据类别（大类别）&lt;/p&gt;
&lt;p&gt;2：下拉选择参数化数据具体类别&lt;/p&gt;
&lt;p&gt;3：填写您需要添加的参数化数据名称&lt;/p&gt;
&lt;p&gt;4：填写您参数化数据的格式要求（当您选择完类别后回显示格式要求，含义及示例在图中黄色高亮区域，以帮助您填写正确的格式要求）&lt;/p&gt;
&lt;p&gt;填写完成后点击添加即可完成添加&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/E947F33592204348984C01D489A57C1E/18442&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/E947F33592204348984C01D489A57C1E/18442&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图设置将会添加一个名为RandomId，类型为Random的参数化数据，该Random参数为10位长度的数字&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/2E8435E4A664492BACC372BBD1FD5254/18454&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/2E8435E4A664492BACC372BBD1FD5254/18454&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图设置将会添加一个名为csv，类型为CSV的参数化数据，该Random使用本地文件D:\data.csv作为数据源并以UTF-8读取数据&lt;/p&gt;

&lt;p&gt;注意如果添加CSV类型数据后，若再在计算机中单独在对改文件直接进行编辑后，您需要重新添加该数据源才能使您的编辑生效&lt;/p&gt;


&lt;h4&gt;8.1.3查看编辑导出CSV类型数据&lt;/h4&gt;
&lt;p&gt;您在任意一个CSV数据类型上双击都会弹出数据源显示/编辑框&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/CD8311F362FF4703A939F4FA2DA918DF/18479&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/CD8311F362FF4703A939F4FA2DA918DF/18479&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图您可以选则csv表格中的任意数据（因为实际CSV参数取值都是按从左至右从上至下顺序取值，所以但其游标十分重要，您选择的数据再您保存后将成为该参数的当前数据）&lt;/p&gt;
&lt;p&gt;您同样可以编辑（双击任意项可以进行编辑），删除（选择行按键盘Delete），添加（在尾行直接统计）&lt;/p&gt;
&lt;p&gt;完成编辑后您可以点击左上角save data图标进行保存，或点击export data将您的数据直接导出为文件（CSV参数里的数据可能全部来自HTTP捕获，所以导出可能对您十分必要）&lt;/p&gt;

&lt;h3&gt;8.2 在规则中使用参数化数据&lt;/h3&gt;
&lt;p&gt;您在参数化数据管理器中添加的参数可以在『Request Replsce』，『Response Replace』规则中直接使用&lt;/p&gt;
&lt;h4&gt; &lt;/h4&gt;
&lt;h4&gt;8.2.1 使用插入的方式添加参数&lt;/h4&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/06482B215CA54234801A11802177610F/18533&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/06482B215CA54234801A11802177610F/18533&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图您可以在『Request Replsce』或『Response Replace』编辑区域鼠标右键，在右键菜单中选择add Parameter Data ，选择添加参数的类别，选择您要添加的参数（这里选择的是刚刚添加的ran2），最后选择取值方式&lt;/p&gt;
&lt;p&gt;完成选择后参数会自动添加到光标后方（图中黄色高亮区域）&lt;/p&gt;

&lt;h4&gt;8.2.2使用拖拽的方式添加参数&lt;/h4&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/25A1F86E5AEC48E0B4D585EAD145C6D6/18556&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/25A1F86E5AEC48E0B4D585EAD145C6D6/18556&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图所示您可以在参数管理器中选择您需要的参数直接拖拽到编辑区的任意地方，同样会为您自动完成添加（以拖拽添加的参数的取值方式都是“下一个”，您可以手动修改）&lt;/p&gt;

&lt;h4&gt;8.2.3使用手动编辑的方式进行添加&lt;/h4&gt;
&lt;p&gt;只要按照指定格式*#参数名称(取值方式)*#您可以自己手动添加参数&lt;/p&gt;
&lt;p&gt;参数名称需要是已经存在的参数名称&lt;/p&gt;
&lt;p&gt;取值方式默认有 下一个(+)，上一个(-)，当前值(=) 3种可以使用&lt;/p&gt;
&lt;p&gt;CSV数据参数除支持上面3种默认取值方式外还支持使用二维坐标系地址取值，比如 *#dtb(0-2)*# 表示取dtb这个csv数据源的第0列，第2行数据（以0为起始索引）&lt;/p&gt;
&lt;p&gt;默认下一个取值(+)还支持(+N)后面第N个的取值方式&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/82C577D57620412387BA423C7CC1C24A/18608&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/82C577D57620412387BA423C7CC1C24A/18608&quot;/&gt;&lt;/div&gt;
&lt;p&gt;注意使用手动添加参数后需要手动勾选use Parameter Data&lt;/p&gt;

&lt;h3&gt;8.3 动态拾取参数化数据&lt;/h3&gt;
&lt;p&gt;FreeHttp动态获取http报文中的数据用于设置或添加参数&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/79649307DF464CAC85B51E8EF7FF786F/18616&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/79649307DF464CAC85B51E8EF7FF786F/18616&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图在控制条中有『set parameter pick info』图标（【3.4】节）&lt;/p&gt;
&lt;p&gt;您可以在Http请求报文，或响应报文中拾取参数，这取决于您当前创建的篡改规则的类型&lt;/p&gt;
&lt;p&gt;点击图标即可进入参数拾取规则设置窗口&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/3617B843C8B9467C89998D7A0A08A5DF/18639&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/3617B843C8B9467C89998D7A0A08A5DF/18639&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图按提示依次填入参数名称，拾取方式，拾取附加项，拾取范围，拾取表达式，然后点击添加或删除按钮&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;参数名称：如果使用的参数名称已经存在于参数管理器中，该拾取会修改当前参数的参数值（修改实际都是修改下一个值，对Key-Value来说当前值与下一个值都是同一个值），如果是一个新的参数则会直接添加一个Key-Value型参数&lt;/li&gt;
&lt;li&gt;拾取方式：当前版本支持Regex，XML，String 3种拾取方式&lt;/li&gt;
&lt;li&gt;拾取附加项：对拾取方式的附加说明&lt;/li&gt;
&lt;li&gt;拾取范围：无论是请求报文还是响应报文，都支持以Line请求/响应行，Heads 请求/响应头，Entity 请求/响应实体为查找范围&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面以Regex为例（Xml使用Xpath与Regex是类似的），说明参数拾取规则的填写（获取User-Agent括号内的数据）&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/DC8E46C5467D421993BFF74552BAEDB1/18678&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/DC8E46C5467D421993BFF74552BAEDB1/18678&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Parameter Name填写ua_1，PickType选择Regex&lt;/p&gt;
&lt;p&gt;PickAdditional选1，1表示取匹配结果的第一项（因为Regex于Xpath匹配都可能是多个结果），0表示把多个结果以逗号连接在一起返回，当然您可以手动填写2，3，4等索引表示取第N个价格&lt;/p&gt;
&lt;p&gt;PickRange 选择Heads （因为User-Agent在head头中）&lt;/p&gt;
&lt;p&gt;Pick Expression 填写 \(.*?\)&lt;/p&gt;

&lt;p&gt;如果您对Regex还不是很熟悉可以直接使用Str（使用Str同样可以完成大多数的查找）&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/DB87D8FF48C248668A0B5D0B07CA5643/18719&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/DB87D8FF48C248668A0B5D0B07CA5643/18719&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图,选择PickType为Str，PickAdditional为str-str（str-str：字符串首尾拾取目标值，str-len：使用指定字符串开始并指定长度，index-len：以指定索引开始并指定长度，长度填0则表示拾取到最大长度）&lt;/p&gt;
&lt;p&gt;PickRange依然选择Heads，Pick Expression 填写 (-)&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/F0C65D6216DB4DCE8C791DB13836FD3F/18748&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/F0C65D6216DB4DCE8C791DB13836FD3F/18748&quot;/&gt;&lt;/div&gt;
&lt;p&gt;最后如上图使用str-len获取请求行中的isBeta参数，完成后点击确认&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/55B636D16764410D9E13E64C6F9E0242/18756&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/55B636D16764410D9E13E64C6F9E0242/18756&quot;/&gt;&lt;/div&gt;
&lt;p&gt;在HTTP请求被匹配命中后，即会执行设置好的参数拾取，如上图参数已经在请求报文中拾取出来了（注意用Str方式匹配的结果是不含有首尾字符串的，所以上图ua_2会少一个括号）&lt;/p&gt;
&lt;p&gt;参数拾取过程也会被打印在日志区&lt;/p&gt;

&lt;h3&gt;8.4 参数化数据示例&lt;/h3&gt;
&lt;p&gt;目标：匹配www.test.com/parameter?name=value请求，并返回{&quot;mes&quot;:&quot;hello value&quot;}&lt;/p&gt;
&lt;p&gt;其中www.test.com是一个不存在的域名，value可能是任意字符串 （实际是对不存在接口的mock）&lt;/p&gt;

&lt;p&gt;如下配置即可&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/5420A02EF3D64A6BA3271A7CF37C62D1/18800&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/5420A02EF3D64A6BA3271A7CF37C62D1/18800&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图添加一个Request Modific规则，因为实际只需要获取name名称不需要对请求进行修改，所以修改区域不用填写然后信息（不修改），仅添加一个参数拾取规则即可&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/8D63B017A6034ACA9EE10D7A482B17CA/18848&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/8D63B017A6034ACA9EE10D7A482B17CA/18848&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图再添加一个Response Replace，因为实际接口是不存在的所有必须手动替换一个虚拟的返回，返回body中使用到了请求将会获取的testName参数（注意勾选Response Direct）&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/C15CBFD27E4845D29C990B440EFF8C55/18840&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/C15CBFD27E4845D29C990B440EFF8C55/18840&quot;/&gt;&lt;/div&gt;
&lt;p&gt;完成添加后，设置刚刚添加的2个规则生效。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/0FF28D9877C246ECB8126FA5F62C84A2/18852&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/0FF28D9877C246ECB8126FA5F62C84A2/18852&quot;/&gt;&lt;/div&gt;


&lt;p&gt;可以看到这个并不存在的接口已经按预期返回了数据，并且成功取出了name&lt;/p&gt;




&lt;h2&gt;实现及源码&lt;/h2&gt;



&lt;p&gt;Fiddler 对外开放接口可以参见《Lulu.Debugging with Fiddler》（书中不仅介绍Fiddler的起源，还纤细介绍了Fiddler的使用，其中就包括对外提供的扩展接口）&lt;/p&gt;

&lt;p&gt;当前FreeHttp控制使用.net framework 版本为4.5（您在配置开发环境时需要注意您调试引用的Fiddler 的版本，及您开发环境所支持的最高版本）&lt;/p&gt;

&lt;p&gt;基本基本结构如下图&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/655E98937C2D4BA88E3A6A2C4AF9D272/18909&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/655E98937C2D4BA88E3A6A2C4AF9D272/18909&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/4E7A05EBCF3A4E7199AB4C6A71122676/18898&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/2b0a190c7e320fe7819ca8ba2daa6f19/xmlnote/4E7A05EBCF3A4E7199AB4C6A71122676/18898&quot;/&gt;&lt;/div&gt;
&lt;p&gt;下载工程并加载成功后您可以看到如上图的基本结构&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1：AutoTest命名空间主要提供参数化数据的拾取及管理&lt;/li&gt;
&lt;li&gt;2：FiddlerHelper命名空间 提供与Fiddler篡改直接相关的功能&lt;/li&gt;
&lt;li&gt;3：FreeHttpControl命名空间提供UI界面及窗体操作逻辑&lt;/li&gt;
&lt;li&gt;4：HttpHelper命名空间提供对HTTP协议报文处理的功能&lt;/li&gt;
&lt;li&gt;5：MyHelper 命名空间提供公共的辅助工具&lt;/li&gt;
&lt;li&gt;6：WebService命名空间提供使网络服务的功能&lt;/li&gt;
&lt;li&gt;7：FiddlerFreeHttp继承至IAutoTamper，他是与FIddler数据交换的入口  ， FiddlerSessionTamper是FiddlerFreeHttp的工具类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;您可以根据自己的需要直接修改FreeHttp各部分的代码以改动或扩展FreeHttp的功能，使他更符合您的需求。&lt;/p&gt;




</description>
<pubDate>Sun, 24 Feb 2019 16:11:00 +0000</pubDate>
<dc:creator>lulianqi15</dc:creator>
<og:description>前言 FreeHttp是一个Fiddler插件借助FreeHttp您可按照您自己的设定修改请求或响应报文 这对测试及调试都非常有用 比如您发现线上页面js文件错误，直接使用规则替换新的js文件您可以在</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lulianqi/p/10428551.html</dc:identifier>
</item>
<item>
<title>分享几个有趣的Linux命令 - 纪莫</title>
<link>http://www.cnblogs.com/jimoer/p/10415837.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jimoer/p/10415837.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;最近工作比较忙，没时间写博客，这次介绍几个有趣的Linux命令。&lt;/p&gt;
&lt;h2&gt;命令：sl&lt;/h2&gt;
&lt;p&gt;当你使用这个命令时会看到一辆小火车从你的屏幕经过。亲测！&lt;/p&gt;
&lt;p&gt;安装命令如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; -y &lt;span&gt;install&lt;/span&gt; sl
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/772743/201902/772743-20190224180346682-658718868.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;命令：rev&lt;/h2&gt;
&lt;p&gt;翻转字符串，翻转命令后面带着的字符串。&lt;/p&gt;
&lt;p&gt;先输入rev 然后回车就可以输入向翻转的字符串了，输入完成后再按回车执行翻转。&lt;/p&gt;
&lt;p&gt;执行效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/772743/201902/772743-20190224181241819-986693935.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此命令不仅能翻转后面跟着的字符串，也能翻转文本文件中的字符串。&lt;/p&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/772743/201902/772743-20190224181550487-1458712858.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;命令：pv&lt;/h2&gt;
&lt;p&gt;这个命令可以让我们将已经设置好的一段文字，匀速的在屏幕上打印出来，就像有机器人在敲键盘。&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
yum -y install pv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/772743/201902/772743-20190224183810188-266755720.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;命令：boxes&lt;/h2&gt;
&lt;p&gt;boxes是 linux 下的一款命令行工具，可以用字符组成盒子把你的文字包围在里面。&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
yum -y install boxes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
echo &quot;jiomer&quot; | boxes -&lt;span&gt;d girl
echo &lt;/span&gt;&quot;jiomer&quot; | boxes -d dog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令的最后一个单词是指用什么样子的盒子来包文字，查看有多少种盒子可以使用命令：&lt;/p&gt;

&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/772743/201902/772743-20190224190057848-1831356502.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;命令：factor&lt;/h2&gt;
&lt;p&gt;这个命令可以得到输入的数字的因子，分解因数的作用。&lt;/p&gt;
&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/772743/201902/772743-20190224190938306-1565631186.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;命令：cowsay&lt;/h2&gt;
&lt;p&gt;可以输出一只ASCII形式的牛，并且可以说出任何你想让它说的话。&lt;/p&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
yum install -y cowsay
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/772743/201902/772743-20190224223240598-98666317.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果想让“牛”变成“羊”可以这样写&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/772743/201902/772743-20190224223626974-813308276.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;更多的形式可以使用cowsay -l 命令来查看。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;其实还有好几个有趣的命令 ，只不过是我的centos系统上有的是装不上的，&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;可以让你屏幕上变成水族馆的命令：&lt;/p&gt;
&lt;p&gt;ASCIIquarium&lt;/p&gt;
&lt;p&gt;可以将图片转换为ascii码的命令：&lt;br/&gt;asciiview&lt;/p&gt;
&lt;p&gt;会在屏幕上出现一个小猫的命令：&lt;/p&gt;
&lt;p&gt;oneko&lt;/p&gt;
&lt;p&gt;以及，aafire、xeyes、&lt;span class=&quot;ez-toc-section&quot;&gt;cmatrix、&lt;/span&gt;telnet等等。以后再发现了有趣的命令会继续写出来分享。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/772743/201902/772743-20190225000117090-1961830280.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;文章会同步到我的公众号上面，欢迎关注。&lt;/p&gt;

</description>
<pubDate>Sun, 24 Feb 2019 15:58:00 +0000</pubDate>
<dc:creator>纪莫</dc:creator>
<og:description>前言 最近工作比较忙，没时间写博客，这次介绍几个有趣的Linux命令。 命令：sl 当你使用这个命令时会看到一辆小火车从你的屏幕经过。亲测！ 安装命令如下： 执行效果如下： 命令：rev 翻转字符串，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jimoer/p/10415837.html</dc:identifier>
</item>
<item>
<title>CSS中层叠和CSS的7阶层叠水平（上篇） - 一只菜鸟攻城狮啊</title>
<link>http://www.cnblogs.com/suihang/p/10428754.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/suihang/p/10428754.html</guid>
<description>&lt;p&gt;今天搜索资料时，忽然发现了以前没注意的一个知识点，所以拖过来搞一搞，这个知识点叫做CSS的7阶层叠水平&lt;/p&gt;
&lt;p&gt;在说这个知识之前，我们必须要先了解一个东西以便于我们更好的理解CSS的7阶层叠水平&lt;/p&gt;
&lt;p&gt;这个东西就是z-index属性（此篇为上篇，仅仅讲z-index）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;基本含义：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;z-index&lt;/span&gt;通俗来说就是在Z轴上的索引，Z轴是垂直于电脑屏幕的一根轴&lt;/p&gt;
&lt;p&gt;用来设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面，即通常情况下，z-index为2的元素会在z-index为1的元素上面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;取值情况：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;z-index有三个取值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;auto&lt;/span&gt;：默认。堆叠顺序与父元素相等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;　　&lt;span&gt;number&lt;/span&gt;：&lt;/em&gt;设置元素的堆叠顺序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;inherit&lt;/span&gt;：规定应该从父元素继承 z-index 属性的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;特性：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　1.支持负值（如果为正数，则离用户更近，为负数则表示离用户更远。）&lt;/p&gt;

&lt;p&gt;　　2.支持CSS3 animation动画；（并没什么实用应用场景）&lt;/p&gt;

&lt;p&gt;　　3.在CSS2.1时代，&lt;span&gt;需要和定位元素配合使用，&lt;/span&gt;如果不考虑CSS3，只有定位元素（position:relative/absolute/fixed/sticky）的z-index才有作用！在CSS3中有例外&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;准则：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;span&gt;1.后来者居上原则&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    .a&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; yellow；&lt;br/&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    .b&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        margin-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
         &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;a&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;b&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/em&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1459059/201902/1459059-20190224233652716-462985045.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;解析：我们可以看到，红色作为后来的元素覆盖在之前的元素上了，在未设置z-index的前提下，后来元素会覆盖前面添加到元素，当然实在开启了绝对定位的前提下（不开启绝对定位不能直观的看到效果）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　2.谁大谁先上原则&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　&lt;/strong&gt;&lt;span&gt;在.a添加z-index:2,在.b添加z-index:1&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　&lt;strong&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1459059/201902/1459059-20190224234241225-1087493861.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　解析：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;通常情况下，z-index越大，层级越高，越在上面&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　当发生嵌套时，祖先优先原则&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    .a&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; yellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        z-index&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    .b&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        margin-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        z-index&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1
         &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    .a1&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    .b1&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        z-index&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100
    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;a&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;a1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;b&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;b1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1459059/201902/1459059-20190224234857668-400016633.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;解析：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;按照前面所说应该是蓝色的格子会在最上面，这里并没有，原因就是祖先优先原则&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　a的层级大于b的层级，所以a里面的元素会始终在b的上面，即使b的子元素的z-index为10000也没用&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所有主流浏览器都支持 z-index 属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　任何的版本的 Internet Explorer （包括 IE8）都不支持属性值 &quot;inherit&quot;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 24 Feb 2019 15:54:00 +0000</pubDate>
<dc:creator>一只菜鸟攻城狮啊</dc:creator>
<og:description>今天搜索资料时，忽然发现了以前没注意的一个知识点，所以拖过来搞一搞，这个知识点叫做CSS的7阶层叠水平 在说这个知识之前，我们必须要先了解一个东西以便于我们更好的理解CSS的7阶层叠水平 这个东西就是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/suihang/p/10428754.html</dc:identifier>
</item>
</channel>
</rss>