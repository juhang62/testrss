<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>zookeeper源码 — 一、单机启动 - lacker</title>
<link>http://www.cnblogs.com/sunshine-2015/p/10753999.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunshine-2015/p/10753999.html</guid>
<description>&lt;p&gt;zookeeper一般使用命令工具启动，启动主要就是初始化所有组件，让server可以接收并处理来自client的请求。本文主要结构：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;main入口&lt;/li&gt;
&lt;li&gt;配置解析&lt;/li&gt;
&lt;li&gt;组件启动&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;main入口&quot;&gt;main入口&lt;/h2&gt;
&lt;p&gt;我们一般使用命令行工具来部署zk server，zkServer.sh，这个脚本用来启动停止server，通过不同的参数和选项来达到不同的功能。该脚本最后会通过Java执行下面的main方法&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;org.apache.zookeeper.server.quorum.QuorumPeerMain#main&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不管单机还是集群都是使用&lt;code&gt;zkServer.sh&lt;/code&gt;这个脚本来启动，只是参数不同，所以main方法入口也是一样的。所以这个入口方法主要是根据不同的入参判断是集群启动还是单机启动。&lt;/p&gt;
&lt;p&gt;该main方法主要做了以下几件事&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/95e68fd0ly1g2am96sgd0j21gm0l20xz.jpg&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;解析配置，如果传入的是配置文件(参数只有一个)，解析配置文件并初始化QuorumPeerConfig&lt;/li&gt;
&lt;li&gt;启动清理文件的线程&lt;/li&gt;
&lt;li&gt;判断是单机还是集群
&lt;ol&gt;&lt;li&gt;集群：只有一个参数，并且配置了多个server&lt;/li&gt;
&lt;li&gt;单机：上面的条件不满足，一般在启动的使用了以下两种配置的一种
&lt;ol&gt;&lt;li&gt;使用的是文件配置，但是没有配置多台server&lt;/li&gt;
&lt;li&gt;命令行配置多个（2-4）参数：port dataDir [tickTime] [maxClientCnxns]&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;配置解析&quot;&gt;配置解析&lt;/h2&gt;
&lt;p&gt;配置解析主要有两种情况&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;使用配置文件&lt;/li&gt;
&lt;li&gt;使用命令行参数&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;使用配置文件&quot;&gt;使用配置文件&lt;/h3&gt;
&lt;p&gt;使用配置文件的时候是使用&lt;code&gt;QuorumPeerConfig&lt;/code&gt;来解析配置的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/95e68fd0ly1g2amx21csoj21gu0g4adh.jpg&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;先校验文件的合法性&lt;/li&gt;
&lt;li&gt;配置文件是使用Java的properties形式写的，所以可以通过Properties.load来解析&lt;/li&gt;
&lt;li&gt;将解析出来的key、value赋值给对应的配置&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;使用命令行参数&quot;&gt;使用命令行参数&lt;/h3&gt;
&lt;p&gt;直接在命令指定对应的配置，这种情况只有在单机的时候才会使用，包含以下几个参数&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;port，必填，sever监听的端口&lt;/li&gt;
&lt;li&gt;dataDir，必填，数据所在的目录&lt;/li&gt;
&lt;li&gt;tickTime，选填&lt;/li&gt;
&lt;li&gt;maxClientCnxns，选填，最多可处理的客户端连接数&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;组件启动&quot;&gt;组件启动&lt;/h2&gt;
&lt;p&gt;zookeeper包含的主要组件有&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;FileTxnSnapLog：管理FileTxLog和FileSnap&lt;/li&gt;
&lt;li&gt;ZooKeeperServer：维护一个处理器链表processor chain&lt;/li&gt;
&lt;li&gt;NIOServerCnxnFactory：管理来自客户端的连接&lt;/li&gt;
&lt;li&gt;Jetty，用来通过http管理zk&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;zookeeper维护了自己的数据结构和物理文件，而且要接收并处理client发送来的网络请求，所以在zookeeper启动的时候，要做好下面的准备工作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/95e68fd0ly1g2b4sw3p4fj22kh1wx4hb.jpg&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;初始化FileTxnSnapLog，创建了FileTxnLog实例和FIleSnap实例，并保存刚启动时候DataTree的snapshot&lt;/li&gt;
&lt;li&gt;启动adminServer&lt;/li&gt;
&lt;li&gt;启动NIOServerCnxnFactory
&lt;ol&gt;&lt;li&gt;从解析出的配置中配置NIOServerCnxnFactory&lt;/li&gt;
&lt;li&gt;初始化网络连接管理类:NIOServerCnxnFactory
&lt;ol&gt;&lt;li&gt;初始化：WorkerService：用来业务处理的线程池&lt;/li&gt;
&lt;li&gt;线程启动：&lt;br/&gt;SelectorThread（有多个）：处理网络请求，write和read&lt;br/&gt;AcceptThread：用来接收连接请求，建立连接，zk也支持使用reactor多线程，accept线程用来建立连接，selector线程用来处理read、write&lt;br/&gt;ConnectionExpirerThread：关闭超时的连接，所有的session都放在&lt;code&gt;org.apache.zookeeper.server.ExpiryQueue#expiryMap&lt;/code&gt;里面维护，这个线程不断从里面拿出超时的连接关闭&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;启动ZookeeperServer，主要是用来创建SessionTrackerImpl，这个类是用来管理session的&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;单机模式部署较为简单，一般在开发、测试环境使用，由于单机环境需要的组件少，启动过程也较为简单，主要是解析传入的参数，然后启动对应的网络组件和请求处理组件，后面紧接着我们看下zk的集群启动流程。&lt;/p&gt;
</description>
<pubDate>Mon, 22 Apr 2019 16:20:00 +0000</pubDate>
<dc:creator>lacker</dc:creator>
<og:description>zookeeper一般使用命令工具启动，启动主要就是初始化所有组件，让server可以接收并处理来自client的请求。本文主要结构： main入口 配置解析 组件启动 main入口 我们一般使用命令</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sunshine-2015/p/10753999.html</dc:identifier>
</item>
<item>
<title>Hadoop3.2.0使用详解 - 哥不是小萝莉</title>
<link>http://www.cnblogs.com/smartloli/p/10753998.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smartloli/p/10753998.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Factory to create client IPC classes.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.ipc.client.factory.class&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Factory to create server IPC classes.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.ipc.server.factory.class&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Factory to create serializeable records.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.ipc.record.factory.class&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;RPC class implementation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.ipc.rpc.class&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop.yarn.ipc.HadoopYarnProtoRPC&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  
  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Resource Manager Configs &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The hostname of the RM.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.hostname.hdp-rm01&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nna&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The hostname of the RM.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.hostname.hdp-rm02&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nns&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The address of the applications manager interface in the RM.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      The actual address the server will bind to. If this optional address is
      set, the RPC and webapp servers will bind to this address and the port specified in
      yarn.resourcemanager.address and yarn.resourcemanager.webapp.address, respectively. This
      is most useful for making RM listen to all interfaces by setting to 0.0.0.0.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.bind-host&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The number of threads used to handle applications manager requests.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.client.thread-count&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;50&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The expiry interval for application master reporting.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.am.liveness-monitor.expiry-interval-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;600000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The Kerberos principal for the resource manager.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.principal&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The address of the scheduler interface.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.scheduler.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn01-sh:8030&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Number of threads to handle scheduler interface.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.scheduler.client.thread-count&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;50&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        This configures the HTTP endpoint for Yarn Daemons.The following
        values are supported:
        - HTTP_ONLY : Service is provided only on http
        - HTTPS_ONLY : Service is provided only on https
      &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.http.policy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;HTTP_ONLY&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The http address of the RM web application.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.webapp.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn01-sh:8088&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The https adddress of the RM web application.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.webapp.https.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn01-sh:8088&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.resource-tracker.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn01-sh:8031&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Are acls enabled.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.acl.enable&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ACL of who can be admin of the YARN cluster.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.admin.acl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The address of the RM admin interface.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.admin.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Number of threads used to handle RM admin interface.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.admin.client.thread-count&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Maximum time to wait to establish connection to
    ResourceManager.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.connect.max-wait.ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;900000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;How often to try connecting to the
    ResourceManager.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.connect.retry-interval.ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;30000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The maximum number of application attempts. It's a global
    setting for all application masters. Each application master can specify
    its individual maximum number of application attempts via the API, but the
    individual number cannot be more than the global upper bound. If it is,
    the resourcemanager will override it. The default number is set to 2, to
    allow at least one retry for AM.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.am.max-attempts&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;How often to check that containers are still alive. &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.container.liveness-monitor.interval-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;600000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Flag to enable override of the default kerberos authentication
    filter with the RM authentication filter to allow authentication using
    delegation tokens(fallback to kerberos if the tokens are missing). Only
    applicable when the http authentication type is kerberos.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.webapp.delegation-token-auth-filter.enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;How long to wait until a node manager is considered dead.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nm.liveness-monitor.expiry-interval-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;600000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Path to file with nodes to include.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.nodes.include-path&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Path to file with nodes to exclude.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.nodes.exclude-path&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Number of threads to handle resource tracker calls.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.resource-tracker.client.thread-count&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;50&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The class to use as the resource scheduler.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.scheduler.class&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The minimum allocation for every container request at the RM,
    in MBs. Memory requests lower than this won't take effect,
    and the specified value will get allocated at minimum.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.scheduler.minimum-allocation-mb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1024&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The maximum allocation for every container request at the RM,
    in MBs. Memory requests higher than this won't take effect,
    and will get capped to this value.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.scheduler.maximum-allocation-mb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2048&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The minimum allocation for every container request at the RM,
    in terms of virtual CPU cores. Requests lower than this won't take effect,
    and the specified value will get allocated the minimum.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.scheduler.minimum-allocation-vcores&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The maximum allocation for every container request at the RM,
    in terms of virtual CPU cores. Requests higher than this won't take effect,
    and will get capped to this value.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.scheduler.maximum-allocation-vcores&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Enable RM to recover state after starting. If true, then 
      yarn.resourcemanager.store.class must be specified. &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.recovery.enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Enable RM work preserving recovery. This configuration is private
    to YARN for experimenting the feature.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.work-preserving-recovery.enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Set the amount of time RM waits before allocating new
    containers on work-preserving-recovery. Such wait period gives RM a chance
    to settle down resyncing with NMs in the cluster on recovery, before assigning
    new containers to applications.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.work-preserving-recovery.scheduling-wait-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The class to use as the persistent store.

      If org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore
      is used, the store is implicitly fenced; meaning a single ResourceManager
      is able to use the store at any point in time. More details on this
      implicit fencing, along with setting up appropriate ACLs is discussed
      under yarn.resourcemanager.zk-state-store.root-node.acl.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.store.class&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The maximum number of completed applications RM state
    store keeps, less than or equals to ${yarn.resourcemanager.max-completed-applications}.
    By default, it equals to ${yarn.resourcemanager.max-completed-applications}.
    This ensures that the applications kept in the state store are consistent with
    the applications remembered in RM memory.
    Any values larger than ${yarn.resourcemanager.max-completed-applications} will
    be reset to ${yarn.resourcemanager.max-completed-applications}.
    Note that this value impacts the RM recovery performance.Typically,
    a smaller value indicates better performance on RM recovery.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.state-store.max-completed-applications&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${yarn.resourcemanager.max-completed-applications}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Host:Port of the ZooKeeper server to be used by the RM. This
      must be supplied when using the ZooKeeper based implementation of the
      RM state store and/or embedded automatic failover in a HA setting.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.zk-address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dn1:2181,dn2:2181,dn3:2181&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Number of times RM tries to connect to ZooKeeper.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.zk-num-retries&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Retry interval in milliseconds when connecting to ZooKeeper.
      When HA is enabled, the value here is NOT used. It is generated
      automatically from yarn.resourcemanager.zk-timeout-ms and
      yarn.resourcemanager.zk-num-retries.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.zk-retry-interval-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Full path of the ZooKeeper znode where RM state will be
    stored. This must be supplied when using
    org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore
    as the value for yarn.resourcemanager.store.class&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.zk-state-store.parent-path&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/rmstore&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;ZooKeeper session timeout in milliseconds. Session expiration
    is managed by the ZooKeeper cluster itself, not by the client. This value is
    used by the cluster to determine when the client's session expires.
    Expirations happens when the cluster does not hear from the client within
    the specified session timeout period (i.e. no heartbeat).&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.zk-timeout-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ACL's to be used for ZooKeeper znodes.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.zk-acl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;world:anyone:rwcda&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      ACLs to be used for the root znode when using ZKRMStateStore in a HA
      scenario for fencing.

      ZKRMStateStore supports implicit fencing to allow a single
      ResourceManager write-access to the store. For fencing, the
      ResourceManagers in the cluster share read-write-admin privileges on the
      root node, but the Active ResourceManager claims exclusive create-delete
      permissions.

      By default, when this property is not set, we use the ACLs from
      yarn.resourcemanager.zk-acl for shared admin access and
      rm-address:random-number for username-based exclusive create-delete
      access.

      This property allows users to set ACLs of their choice instead of using
      the default mechanism. For fencing to work, the ACLs should be
      carefully set differently on each ResourceManger such that all the
      ResourceManagers have shared admin access and the Active ResourceManger
      takes over (exclusively) the create-delete access.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.zk-state-store.root-node.acl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        Specify the auths to be used for the ACL's specified in both the
        yarn.resourcemanager.zk-acl and
        yarn.resourcemanager.zk-state-store.root-node.acl properties.  This
        takes a comma-separated list of authentication mechanisms, each of the
        form 'scheme:auth' (the same syntax used for the 'addAuth' command in
        the ZK CLI).
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.zk-auth&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;URI pointing to the location of the FileSystem path where
    RM state will be stored. This must be supplied when using
    org.apache.hadoop.yarn.server.resourcemanager.recovery.FileSystemRMStateStore
    as the value for yarn.resourcemanager.store.class&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.fs.state-store.uri&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${hadoop.tmp.dir}/yarn/system/rmstore&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;value&amp;gt;hdfs://localhost:9000/rmstore&amp;lt;/value&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;hdfs client retry policy specification. hdfs client retry
    is always enabled. Specified in pairs of sleep-time and number-of-retries
    and (t0, n0), (t1, n1), ..., the first n0 retries sleep t0 milliseconds on
    average, the following n1 retries sleep t1 milliseconds on average, and so on.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.fs.state-store.retry-policy-spec&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2000, 500&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Enable RM high-availability. When enabled,
      (1) The RM starts in the Standby mode by default, and transitions to
      the Active mode when prompted to.
      (2) The nodes in the RM ensemble are listed in
      yarn.resourcemanager.ha.rm-ids
      (3) The id of each RM either comes from yarn.resourcemanager.ha.id
      if yarn.resourcemanager.ha.id is explicitly specified or can be
      figured out by matching yarn.resourcemanager.address.{id} with local address
      (4) The actual physical addresses come from the configs of the pattern
      - {rpc-config}.{id}&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.ha.enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Enable automatic failover.
      By default, it is enabled only when HA is enabled&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.ha.automatic-failover.enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Enable embedded automatic failover.
      By default, it is enabled only when HA is enabled.
      The embedded elector relies on the RM state store to handle fencing,
      and is primarily intended to be used in conjunction with ZKRMStateStore.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.ha.automatic-failover.embedded&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The base znode path to use for storing leader information,
      when using ZooKeeper based leader election.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.ha.automatic-failover.zk-base-path&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/yarn-leader-election&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Name of the cluster. In a HA setting,
      this is used to ensure the RM participates in leader
      election for this cluster and ensures it does not affect
      other clusters&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.cluster-id&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn01-sh&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The list of RM nodes in the cluster when HA is
      enabled. See description of yarn.resourcemanager.ha
      .enabled for full details on how this is used.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.ha.rm-ids&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hdp-rm01,hdp-rm02&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The id (string) of the current RM. When HA is enabled, this
      is an optional config. The id of current RM can be set by explicitly
      specifying yarn.resourcemanager.ha.id or figured out by matching
      yarn.resourcemanager.address.{id} with local address
      See description of yarn.resourcemanager.ha.enabled
      for full details on how this is used.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.ha.id&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;value&amp;gt;rm1&amp;lt;/value&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;When HA is enabled, the class to be used by Clients, AMs and
      NMs to failover to the Active RM. It should extend
      org.apache.hadoop.yarn.client.RMFailoverProxyProvider&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.client.failover-proxy-provider&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop.yarn.client.ConfiguredRMFailoverProxyProvider&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;When HA is enabled, the max number of times
      FailoverProxyProvider should attempt failover. When set,
      this overrides the yarn.resourcemanager.connect.max-wait.ms. When
      not set, this is inferred from
      yarn.resourcemanager.connect.max-wait.ms.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.client.failover-max-attempts&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;value&amp;gt;15&amp;lt;/value&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;When HA is enabled, the sleep base (in milliseconds) to be
      used for calculating the exponential delay between failovers. When set,
      this overrides the yarn.resourcemanager.connect.* settings. When
      not set, yarn.resourcemanager.connect.retry-interval.ms is used instead.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.client.failover-sleep-base-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;value&amp;gt;500&amp;lt;/value&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;When HA is enabled, the maximum sleep time (in milliseconds)
      between failovers. When set, this overrides the
      yarn.resourcemanager.connect.* settings. When not set,
      yarn.resourcemanager.connect.retry-interval.ms is used instead.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.client.failover-sleep-max-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;value&amp;gt;15000&amp;lt;/value&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;When HA is enabled, the number of retries per
      attempt to connect to a ResourceManager. In other words,
      it is the ipc.client.connect.max.retries to be used during
      failover attempts&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.client.failover-retries&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;When HA is enabled, the number of retries per
      attempt to connect to a ResourceManager on socket timeouts. In other
      words, it is the ipc.client.connect.max.retries.on.timeouts to be used
      during failover attempts&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.client.failover-retries-on-socket-timeouts&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;60&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The maximum number of completed applications RM keeps. &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.max-completed-applications&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Interval at which the delayed token removal thread runs&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.delayed.delegation-token.removal-interval-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;30000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;If true, ResourceManager will have proxy-user privileges.
    Use case: In a secure cluster, YARN requires the user hdfs delegation-tokens to
    do localization and log-aggregation on behalf of the user. If this is set to true,
    ResourceManager is able to request new hdfs delegation tokens on behalf of
    the user. This is needed by long-running-service, because the hdfs tokens
    will eventually expire and YARN requires new valid tokens to do localization
    and log-aggregation. Note that to enable this use case, the corresponding
    HDFS NameNode has to configure ResourceManager as the proxy-user so that
    ResourceManager can itself ask for new tokens on behalf of the user when
    tokens are past their max-life-time.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.proxy-user-privileges.enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Interval for the roll over for the master key used to generate
        application tokens
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.am-rm-tokens.master-key-rolling-interval-secs&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;86400&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Interval for the roll over for the master key used to generate
        container tokens. It is expected to be much greater than
        yarn.nm.liveness-monitor.expiry-interval-ms and
        yarn.rm.container-allocation.expiry-interval-ms. Otherwise the
        behavior is undefined.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.container-tokens.master-key-rolling-interval-secs&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;86400&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The heart-beat interval in milliseconds for every NodeManager in the cluster.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.nodemanagers.heartbeat-interval-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The minimum allowed version of a connecting nodemanager.  The valid values are
      NONE (no version checking), EqualToRM (the nodemanager's version is equal to
      or greater than the RM version), or a Version String.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.nodemanager.minimum.version&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;NONE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Enable a set of periodic monitors (specified in
        yarn.resourcemanager.scheduler.monitor.policies) that affect the
        scheduler.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.scheduler.monitor.enable&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The list of SchedulingEditPolicy classes that interact with
        the scheduler. A particular module may be incompatible with the
        scheduler, other policies, or a configuration of either.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.scheduler.monitor.policies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity.ProportionalCapacityPreemptionPolicy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The class to use as the configuration provider.
    If org.apache.hadoop.yarn.LocalConfigurationProvider is used,
    the local configuration will be loaded.
    If org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider is used,
    the configuration which will be loaded should be uploaded to remote File system first.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.configuration.provider-class&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop.yarn.LocalConfigurationProvider&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;value&amp;gt;org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider&amp;lt;/value&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The setting that controls whether yarn system metrics is
    published on the timeline server or not by RM.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.system-metrics-publisher.enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Number of worker threads that send the yarn system metrics
    data.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.system-metrics-publisher.dispatcher.pool-size&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Node Manager Configs &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The hostname of the NM.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.hostname&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The address of the container manager in the NM.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${yarn.nodemanager.hostname}:0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      The actual address the server will bind to. If this optional address is
      set, the RPC and webapp servers will bind to this address and the port specified in
      yarn.nodemanager.address and yarn.nodemanager.webapp.address, respectively. This is
      most useful for making NM listen to all interfaces by setting to 0.0.0.0.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.bind-host&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Environment variables that should be forwarded from the NodeManager's environment to the container's.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.admin-env&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;MALLOC_ARENA_MAX=$MALLOC_ARENA_MAX&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Environment variables that containers may override rather than use NodeManager's default.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.env-whitelist&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,HADOOP_YARN_HOME&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;who will execute(launch) the containers.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.container-executor.class&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop.yarn.server.nodemanager.DefaultContainerExecutor&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;value&amp;gt;org.apache.hadoop.yarn.server.nodemanager.LinuxContainerExecutor&amp;lt;/value&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Number of threads container manager uses.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.container-manager.thread-count&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;20&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Number of threads used in cleanup.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.delete.thread-count&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Number of seconds after an application finishes before the nodemanager's 
      DeletionService will delete the application's localized file directory
      and log directory.
      
      To diagnose Yarn application problems, set this property's value large
      enough (for example, to 600 = 10 minutes) to permit examination of these
      directories. After changing the property's value, you must restart the 
      nodemanager in order for it to have an effect.

      The roots of Yarn applications' work directories is configurable with
      the yarn.nodemanager.local-dirs property (see below), and the roots
      of the Yarn applications' log directories is configurable with the 
      yarn.nodemanager.log-dirs property (see also below).
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.delete.debug-delay-sec&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;List of directories to store localized files in. An 
      application's localized file directory will be found in:
      ${yarn.nodemanager.local-dirs}/usercache/${user}/appcache/application_${appid}.
      Individual containers' work directories, called container_${contid}, will
      be subdirectories of this.
   &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.local-dirs&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/data/soft/new/dfs/nm-local-dir&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;It limits the maximum number of files which will be localized
      in a single local directory. If the limit is reached then sub-directories
      will be created and new files will be localized in them. If it is set to
      a value less than or equal to 36 [which are sub-directories (0-9 and then
      a-z)] then NodeManager will fail to start. For example; [for public
      cache] if this is configured with a value of 40 ( 4 files +
      36 sub-directories) and the local-dir is &quot;/tmp/local-dir1&quot; then it will
      allow 4 files to be created directly inside &quot;/tmp/local-dir1/filecache&quot;.
      For files that are localized further it will create a sub-directory &quot;0&quot;
      inside &quot;/tmp/local-dir1/filecache&quot; and will localize files inside it
      until it becomes full. If a file is removed from a sub-directory that
      is marked full, then that sub-directory will be used back again to
      localize files.
   &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.local-cache.max-files-per-directory&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;8192&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Address where the localizer IPC is.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.localizer.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${yarn.nodemanager.hostname}:8040&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Interval in between cache cleanups.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.localizer.cache.cleanup.interval-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;600000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Target size of localizer cache in MB, per nodemanager. It is
      a target retention size that only includes resources with PUBLIC and 
      PRIVATE visibility and excludes resources with APPLICATION visibility
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.localizer.cache.target-size-mb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;11010048&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Number of threads to handle localization requests.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.localizer.client.thread-count&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Number of threads to use for localization fetching.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.localizer.fetch.thread-count&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Where to store container logs. An application's localized log directory 
      will be found in ${yarn.nodemanager.log-dirs}/application_${appid}.
      Individual containers' log directories will be below this, in directories 
      named container_{$contid}. Each container directory will contain the files
      stderr, stdin, and syslog generated by that container.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.log-dirs&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/data/soft/new/dfs/userlogs&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Whether to enable log aggregation. Log aggregation collects
      each container's logs and moves these logs onto a file-system, for e.g.
      HDFS, after the application completes. Users can configure the
      &quot;yarn.nodemanager.remote-app-log-dir&quot; and
      &quot;yarn.nodemanager.remote-app-log-dir-suffix&quot; properties to determine
      where these logs are moved to. Users can access the logs via the
      Application Timeline Server.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.log-aggregation-enable&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;How long to keep aggregation logs before deleting them.  -1 disables. 
    Be careful set this too small and you will spam the name node.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.log-aggregation.retain-seconds&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;-1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;How long to wait between aggregated log retention checks.
    If set to 0 or a negative value then the value is computed as one-tenth
    of the aggregated log retention time. Be careful set this too small and
    you will spam the name node.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.log-aggregation.retain-check-interval-seconds&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;-1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Time in seconds to retain user logs. Only applicable if
    log aggregation is disabled
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.log.retain-seconds&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10800&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Where to aggregate logs to.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.remote-app-log-dir&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/tmp/logs&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The remote log dir will be created at 
      {yarn.nodemanager.remote-app-log-dir}/${user}/{thisParam}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.remote-app-log-dir-suffix&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;logs&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 以实际物理机可用内存为准 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Amount of physical memory, in MB, that can be allocated 
    for containers.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.resource.memory-mb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2048&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Whether physical memory limits will be enforced for
    containers.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.pmem-check-enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Whether virtual memory limits will be enforced for
    containers.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.vmem-check-enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Ratio between virtual memory to physical memory when
    setting memory limits for containers. Container allocations are
    expressed in terms of physical memory, and virtual memory usage
    is allowed to exceed this allocation by this ratio.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.vmem-pmem-ratio&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 以实际物理机CPU可用核数为准 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Number of vcores that can be allocated
    for containers. This is used by the RM scheduler when allocating
    resources for containers. This is not used to limit the number of
    physical cores used by YARN containers.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.resource.cpu-vcores&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Percentage of CPU that can be allocated
    for containers. This setting allows users to limit the amount of
    CPU that YARN containers use. Currently functional only
    on Linux using cgroups. The default is to use 100% of CPU.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.resource.percentage-physical-cpu-limit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;100&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;NM Webapp address.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.webapp.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${yarn.nodemanager.hostname}:8042&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;How often to monitor containers.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.container-monitor.interval-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Class that calculates containers current resource utilization.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.container-monitor.resource-calculator.class&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Frequency of running node health script.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.health-checker.interval-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;600000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Script time out period.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.health-checker.script.timeout-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1200000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The health check script to run.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.health-checker.script.path&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The arguments to pass to the health check script.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.health-checker.script.opts&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Frequency of running disk health checker code.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.disk-health-checker.interval-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;120000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Frequency of running disk health checker code.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.disk-health-checker.enable&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The minimum fraction of number of disks to be healthy for the
    nodemanager to launch new containers. This correspond to both
    yarn-nodemanager.local-dirs and yarn.nodemanager.log-dirs. i.e. If there
    are less number of healthy local-dirs (or log-dirs) available, then
    new containers will not be launched on this node.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.disk-health-checker.min-healthy-disks&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.25&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The maximum percentage of disk space utilization allowed after 
    which a disk is marked as bad. Values can range from 0.0 to 100.0. 
    If the value is greater than or equal to 100, the nodemanager will check 
    for full disk. This applies to yarn-nodemanager.local-dirs and 
    yarn.nodemanager.log-dirs.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;96.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The minimum space that must be available on a disk for
    it to be used. This applies to yarn-nodemanager.local-dirs and 
    yarn.nodemanager.log-dirs.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.disk-health-checker.min-free-space-per-disk-mb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The path to the Linux container executor.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.linux-container-executor.path&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The class which should help the LCE handle resources.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.linux-container-executor.resources-handler.class&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop.yarn.server.nodemanager.util.DefaultLCEResourcesHandler&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;value&amp;gt;org.apache.hadoop.yarn.server.nodemanager.util.CgroupsLCEResourcesHandler&amp;lt;/value&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The cgroups hierarchy under which to place YARN proccesses (cannot contain commas).
    If yarn.nodemanager.linux-container-executor.cgroups.mount is false (that is, if cgroups have
    been pre-configured), then this cgroups hierarchy must already exist and be writable by the
    NodeManager user, otherwise the NodeManager may fail.
    Only used when the LCE resources handler is set to the CgroupsLCEResourcesHandler.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.linux-container-executor.cgroups.hierarchy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/hadoop-yarn&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Whether the LCE should attempt to mount cgroups if not found.
    Only used when the LCE resources handler is set to the CgroupsLCEResourcesHandler.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.linux-container-executor.cgroups.mount&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Where the LCE should attempt to mount cgroups if not found. Common locations
    include /sys/fs/cgroup and /cgroup; the default location can vary depending on the Linux
    distribution in use. This path must exist before the NodeManager is launched.
    Only used when the LCE resources handler is set to the CgroupsLCEResourcesHandler, and
    yarn.nodemanager.linux-container-executor.cgroups.mount is true.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.linux-container-executor.cgroups.mount-path&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;This determines which of the two modes that LCE should use on a non-secure
    cluster.  If this value is set to true, then all containers will be launched as the user 
    specified in yarn.nodemanager.linux-container-executor.nonsecure-mode.local-user.  If 
    this value is set to false, then containers will run as the user who submitted the 
    application.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.linux-container-executor.nonsecure-mode.limit-users&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The UNIX user that containers will run as when Linux-container-executor
    is used in nonsecure mode (a use case for this is using cgroups) if the
    yarn.nodemanager.linux-container-executor.nonsecure-mode.limit-users is set 
    to true.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.linux-container-executor.nonsecure-mode.local-user&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nobody&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The allowed pattern for UNIX user names enforced by
    Linux-container-executor when used in nonsecure mode (use case for this
    is using cgroups). The default value is taken from /usr/sbin/adduser&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.linux-container-executor.nonsecure-mode.user-pattern&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;^[_.A-Za-z0-9][-@_.A-Za-z0-9]{0,255}?[$]?$&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;This flag determines whether apps should run with strict resource limits
    or be allowed to consume spare resources if they need them. For example, turning the
    flag on will restrict apps to use only their share of CPU, even if the node has spare
    CPU cycles. The default value is false i.e. use available resources. Please note that
    turning this flag on may reduce job throughput on the cluster.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.linux-container-executor.cgroups.strict-resource-usage&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;T-file compression types used to compress aggregated logs.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.log-aggregation.compression-type&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;none&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The kerberos principal for the node manager.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.principal&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;the valid service name should only contain a-zA-Z0-9_ and can not start with numbers&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.aux-services&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;value&amp;gt;mapreduce_shuffle,spark_shuffle&amp;lt;/value&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mapreduce_shuffle&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.aux-services.spark_shuffle.class&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.spark.network.yarn.YarnShuffleService&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;No. of ms to wait between sending a SIGTERM and SIGKILL to a container&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.sleep-delay-before-sigkill.ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;250&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Max time to wait for a process to come up when trying to cleanup a container&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.process-kill-wait.ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The minimum allowed version of a resourcemanager that a nodemanager will connect to.  
      The valid values are NONE (no version checking), EqualToNM (the resourcemanager's version is 
      equal to or greater than the NM version), or a Version String.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.resourcemanager.minimum.version&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;NONE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Max number of threads in NMClientAsync to process container
    management events&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.client.nodemanager-client-async.thread-pool-max-size&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;500&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Max time to wait to establish a connection to NM&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.client.nodemanager-connect.max-wait-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;900000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Time interval between each attempt to connect to NM&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.client.nodemanager-connect.retry-interval-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Maximum number of proxy connections to cache for node managers. If set
      to a value greater than zero then the cache is enabled and the NMClient
      and MRAppMaster will cache the specified number of node manager proxies.
      There will be at max one proxy per node manager. Ex. configuring it to a
      value of 5 will make sure that client will at max have 5 proxies cached
      with 5 different node managers. These connections for these proxies will
      be timed out if idle for more than the system wide idle timeout period.
      Note that this could cause issues on large clusters as many connections
      could linger simultaneously and lead to a large number of connection
      threads. The token used for authentication will be used only at
      connection creation time. If a new token is received then the earlier
      connection should be closed in order to use the new token. This and
      (yarn.client.nodemanager-client-async.thread-pool-max-size) are related
      and should be in sync (no need for them to be equal).
      If the value of this property is zero then the connection cache is
      disabled and connections will use a zero idle timeout to prevent too
      many connection threads on large clusters.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.client.max-cached-nodemanagers-proxies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Enable the node manager to recover after starting&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.recovery.enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The local filesystem directory in which the node manager will
    store state when recovery is enabled.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.recovery.dir&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${hadoop.tmp.dir}/yarn-nm-recovery&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;Map Reduce configuration&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.aux-services.mapreduce_shuffle.class&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mapreduce.job.jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mapreduce.job.hdfs-servers&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${fs.defaultFS}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; WebAppProxy Configuration&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The kerberos principal for the proxy, if the proxy is not
    running as part of the RM.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.web-proxy.principal&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Keytab for WebAppProxy, if the proxy is not running as part of 
    the RM.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.web-proxy.keytab&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The address for the web proxy as HOST:PORT, if this is not
     given then the proxy will run as part of the RM&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.web-proxy.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nna:8090&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Applications' Configuration&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      CLASSPATH for YARN applications. A comma-separated list
      of CLASSPATH entries. When this value is empty, the following default
      CLASSPATH for YARN applications would be used. 
      For Linux:
      $HADOOP_CONF_DIR,
      $HADOOP_COMMON_HOME/share/hadoop/common/*,
      $HADOOP_COMMON_HOME/share/hadoop/common/lib/*,
      $HADOOP_HDFS_HOME/share/hadoop/hdfs/*,
      $HADOOP_HDFS_HOME/share/hadoop/hdfs/lib/*,
      $HADOOP_YARN_HOME/share/hadoop/yarn/*,
      $HADOOP_YARN_HOME/share/hadoop/yarn/lib/*
      For Windows:
      %HADOOP_CONF_DIR%,
      %HADOOP_COMMON_HOME%/share/hadoop/common/*,
      %HADOOP_COMMON_HOME%/share/hadoop/common/lib/*,
      %HADOOP_HDFS_HOME%/share/hadoop/hdfs/*,
      %HADOOP_HDFS_HOME%/share/hadoop/hdfs/lib/*,
      %HADOOP_YARN_HOME%/share/hadoop/yarn/*,
      %HADOOP_YARN_HOME%/share/hadoop/yarn/lib/*
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.application.classpath&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/data/soft/new/hadoop-config,/data/soft/new/hadoop/share/hadoop/common/*,/data/soft/new/hadoop/share/hadoop/common/lib/*,/data/soft/new/hadoop/share/hadoop/hdfs/*,/data/soft/new/hadoop/share/hadoop/hdfs/lib/*,/data/soft/new/hadoop/share/hadoop/yarn/*,/data/soft/new/hadoop/share/hadoop/yarn/lib/*,/data/soft/new/hadoop/share/hadoop/mapreduce/*,/data/soft/new/hadoop/share/hadoop/mapreduce/lib/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Timeline Service's Configuration&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Indicate to clients whether timeline service is enabled or not.
    If enabled, clients will put entities and events to the timeline server.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The hostname of the timeline service web application.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.hostname&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;This is default address for the timeline server to start the
    RPC server.&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${yarn.timeline-service.hostname}:10200&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The http address of the timeline service web application.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.webapp.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${yarn.timeline-service.hostname}:8188&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The https address of the timeline service web application.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.webapp.https.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${yarn.timeline-service.hostname}:8190&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      The actual address the server will bind to. If this optional address is
      set, the RPC and webapp servers will bind to this address and the port specified in
      yarn.timeline-service.address and yarn.timeline-service.webapp.address, respectively.
      This is most useful for making the service listen to all interfaces by setting to
      0.0.0.0.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.bind-host&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Store class name for timeline store.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.store-class&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.hadoop.yarn.server.timeline.LeveldbTimelineStore&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Enable age off of timeline store data.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.ttl-enable&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Time to live for timeline store data in milliseconds.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.ttl-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;604800000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Store file name for leveldb timeline store.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.leveldb-timeline-store.path&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${hadoop.tmp.dir}/yarn/timeline&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Length of time to wait between deletion cycles of leveldb timeline store in milliseconds.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.leveldb-timeline-store.ttl-interval-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;300000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Size of read cache for uncompressed blocks for leveldb timeline store in bytes.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.leveldb-timeline-store.read-cache-size&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;104857600&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Size of cache for recently read entity start times for leveldb timeline store in number of entities.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.leveldb-timeline-store.start-time-read-cache-size&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Size of cache for recently written entity start times for leveldb timeline store in number of entities.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.leveldb-timeline-store.start-time-write-cache-size&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Handler thread count to serve the client RPC requests.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.handler-thread-count&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;40&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.http-authentication.type&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;simple&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Defines authentication used for the timeline server HTTP endpoint.
      Supported values are: simple | kerberos | #AUTHENTICATION_HANDLER_CLASSNAME#
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.http-authentication.simple.anonymous.allowed&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Indicates if anonymous requests are allowed by the timeline server when using
      'simple' authentication.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;The Kerberos principal for the timeline server.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.principal&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    Default maximum number of retires for timeline servive client.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.client.max-retries&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;30&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    Default retry time interval for timeline servive client.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.timeline-service.client.retry-interval-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Other configuration &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;The interval that the yarn client library uses to poll the
    completion status of the asynchronous API of application client protocol.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.client.application-client-protocol.poll-interval-ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;200&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;RSS usage of a process computed via 
    /proc/pid/stat is not very accurate as it includes shared pages of a
    process. /proc/pid/smaps provides useful information like
    Private_Dirty, Private_Clean, Shared_Dirty, Shared_Clean which can be used
    for computing more accurate RSS. When this flag is enabled, RSS is computed
    as Min(Shared_Dirty, Pss) + Private_Clean + Private_Dirty. It excludes
    read-only shared mappings in RSS computation.  
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.container-monitor.procfs-tree.smaps-based-rss.enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; YARN registry &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Is the registry enabled: does the RM start it up,
      create the user and system paths, and purge
      service records when containers, application attempts
      and applications complete
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop.registry.rm.enabled&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop.registry.zk.root&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/registry&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Zookeeper session timeout in milliseconds
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop.registry.zk.session.timeout.ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;60000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Zookeeper session timeout in milliseconds
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop.registry.zk.connection.timeout.ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;15000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Zookeeper connection retry count before failing
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop.registry.zk.retry.times&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop.registry.zk.retry.interval.ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Zookeeper retry limit in milliseconds, during
      exponential backoff: {@value}

      This places a limit even
      if the retry times and interval limit, combined
      with the backoff policy, result in a long retry
      period
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop.registry.zk.retry.ceiling.ms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;60000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      List of hostname:port pairs defining the
      zookeeper quorum binding for the registry
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop.registry.zk.quorum&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dn1:2181,dn2:2181,dn3:2181&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Key to set if the registry is secure. Turning it on
      changes the permissions policy from &quot;open access&quot;
      to restrictions on kerberos with the option of
      a user adding one or more auth key pairs down their
      own tree.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop.registry.secure&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      A comma separated list of Zookeeper ACL identifiers with
      system access to the registry in a secure cluster.

      These are given full access to all entries.

      If there is an &quot;@&quot; at the end of a SASL entry it
      instructs the registry client to append the default kerberos domain.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop.registry.system.acls&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;sasl:yarn@, sasl:mapred@, sasl:mapred@hdfs@&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      The kerberos realm: used to set the realm of
      system principals which do not declare their realm,
      and any other accounts that need the value.

      If empty, the default realm of the running process
      is used.

      If neither are known and the realm is needed, then the registry
      service/client will fail.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop.registry.kerberos.realm&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Key to define the JAAS context. Used in secure
      mode
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop.registry.jaas.context&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Defines how often NMs wake up to upload log files.
    The default value is -1. By default, the logs will be uploaded when
    the application is finished. By setting this configure, logs can be uploaded
    periodically when the application is running. The minimum rolling-interval-seconds
    can be set is 3600.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.log-aggregation.roll-monitoring-interval-seconds&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;-1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 加载队列配置文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.scheduler.fair.allocation.file&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/data/soft/new/hadoop-config/fair-scheduler.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.scheduler.increment-allocation-mb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;256&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.scheduler.fair.preemption&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.scheduler.fair.allow-undeclared-pools&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.scheduler.fair.user-al-default-queue&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 22 Apr 2019 16:19:00 +0000</pubDate>
<dc:creator>哥不是小萝莉</dc:creator>
<og:description>1.概述 Hadoop3已经发布很久了，迭代集成的一些新特性也是很有用的。截止本篇博客书写为止，Hadoop发布了3.2.0。接下来，笔者就为大家分享一下在使用Hadoop3中遇到到一些问题，以及解决</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smartloli/p/10753998.html</dc:identifier>
</item>
<item>
<title>SpringBoot之旅第五篇-数据访问 - 茶底世界</title>
<link>http://www.cnblogs.com/yuanqinnan/p/10753979.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yuanqinnan/p/10753979.html</guid>
<description>&lt;h2&gt;一、引言&lt;/h2&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;大部分系统都离不开数据访问，数据库包括SQL和NOSQL，SQL是指关系型数据库，常见的有SQL Server，Oracle，MySQL(开源)，NOSQL是泛指非关系型数据库，常见的有MongoDB，Redis。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;用spring开发时我们常用的ORM框架有JDBC、Mybatis，Hibernate，现在最常用的应该是Mybatis。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;在Springboot中对于数据访问层，无论是SQL还是NOSQL，都默认采用整合Spring Data的方式进行统一处理，Springboot会帮我们添加大量自动配置，屏蔽了很多设置。并引入各种xxxTemplate，xxxRepository来简化我们对数据访问层的操作。对我们来说只需要进行简单的设置即可。这篇就来学习springboot整合JDBC，mybatis、JPA。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-focus&quot;&gt;&lt;span&gt;我们需要用什么数据访问，就引入相关的start进行开发。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-focus&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1113901/201904/1113901-20190422234907153-121238261.png&quot; alt=&quot;&quot; width=&quot;1213&quot; height=&quot;582&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;二、&lt;span class=&quot;md-expand&quot;&gt;JDBC&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;jdbc是我们最先学习的一个数据库框架，SpringBoot也进行了相应整合.&lt;/p&gt;
&lt;h3&gt;&lt;span class=&quot;md-expand&quot;&gt;2.1、 &lt;/span&gt;&lt;span class=&quot;md-expand&quot;&gt;引入依赖&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;JDBC &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-jdbc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;mysql 驱动&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;runtime&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.2、&lt;span class=&quot;md-expand&quot;&gt;数据源配置&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;我們可以做个测试：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Autowired
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; DataSource dataSource;

@Test
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; test() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
    System.out.println(dataSource.getClass());
    Connection connection &lt;/span&gt;=&lt;span&gt; dataSource.getConnection();
    System.out.println(connection);
    connection.close();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;输出为：com.zaxxer.hikari.HikariDataSource&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-focus&quot;&gt;&lt;span&gt;说明默认数据源是com.zaxxer.hikari.HikariDataSource，而在springboot 2.0之前为org.apache.tomcat.jdbc.pool.DataSource。我们也可以通过改变spring.datasource.type 属性来更改我们想自定义的数据源。数据源的相关配置都在DataSourceProperties，我们可以参考这个类进行配置。&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-focus&quot;&gt;&lt;span&gt;2.3、&lt;/span&gt;&lt;span class=&quot;md-expand&quot;&gt;DataSourceInitializer&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;DataSourceInitializer这里面有两个方法runSchemaScripts()可以运行建表语句，runDataScripts()可以运行插入数据的sql语句。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-focus&quot;&gt;&lt;span&gt;默认使用schema-&lt;span&gt;&lt;em&gt;.sql创建建表语句，用data-&lt;/em&gt;&lt;span class=&quot;md-expand&quot;&gt;.sql插入数据语句，当然我们也可以自己配置：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring:
  datasource:
    schema:
     - classpath:department.sql&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.4、&lt;span class=&quot;md-expand&quot;&gt;操作数据库&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;由于spingboot已经帮我们自动配置了，那我们可以直接使用JdbcTemplate进行数据库操作：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Autowired
JdbcTemplate jdbcTemplate;

@Test
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; jdbcTest(){
    List&lt;/span&gt;&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; mapList = jdbcTemplate.queryForList(&quot;select * from user &quot;&lt;span&gt;);
    System.out.println(mapList.get(&lt;/span&gt;0&lt;span&gt;));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：{id=1, username=王五, birthday=null, sex=2, address=null}&lt;/p&gt;
&lt;h2&gt;三、&lt;span class=&quot;md-expand&quot;&gt;整合Druid数据源&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;上面讲到我们有默认的数据源，但一般情况我们还是会使用阿里提供的Druid数据源，因为Druid提供的功能更多，并且能够监控统计，这个时候我们需要先引入pom依赖，然后将spring.datasource.type 修改：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/com.alibaba/druid &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;druid&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.1.16&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Druid的常用配置如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;type: com.alibaba.druid.pool.DruidDataSource
#   数据源其他配置
initialSize: 5
minIdle: 5
maxActive: 20
maxWait: 60000
timeBetweenEvictionRunsMillis: 60000
minEvictableIdleTimeMillis: 300000
validationQuery: SELECT 1 FROM DUAL
testWhileIdle: true
testOnBorrow: false
testOnReturn: false
poolPreparedStatements: true
#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
filters: stat,wall,log4j
maxPoolPreparedStatementPerConnectionSize: 20
useGlobalDataSourceStat: true
connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置之后不会立刻生效，我们还需要编写配置类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Configuration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DruidConfig {

    @ConfigurationProperties(prefix &lt;/span&gt;= &quot;spring.datasource&quot;&lt;span&gt;)
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DataSource druid(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DruidDataSource();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再次运行上面查询数据源的方法，可以得到如下结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1113901/201904/1113901-20190422235740711-1595155131.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注：必须引入日志依赖，否则会报错&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/log4j/log4j &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.17&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们在加上Druid的监控配置:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置Druid的监控
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、配置一个管理后台的Servlet&lt;/span&gt;
&lt;span&gt;@Bean
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ServletRegistrationBean statViewServlet(){
    ServletRegistrationBean bean &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ServletRegistrationBean(&lt;span&gt;new&lt;/span&gt; StatViewServlet(), &quot;/druid/*&quot;&lt;span&gt;);
    Map&lt;/span&gt;&amp;lt;String,String&amp;gt; initParams = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();

    initParams.put(&lt;/span&gt;&quot;loginUsername&quot;,&quot;admin&quot;&lt;span&gt;);
    initParams.put(&lt;/span&gt;&quot;loginPassword&quot;,&quot;123456&quot;&lt;span&gt;);
    initParams.put(&lt;/span&gt;&quot;allow&quot;,&quot;&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认就是允许所有访问&lt;/span&gt;
    initParams.put(&quot;deny&quot;,&quot;192.168.15.21&quot;&lt;span&gt;);

    bean.setInitParameters(initParams);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bean;
}


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、配置一个web监控的filter&lt;/span&gt;
&lt;span&gt;@Bean
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; FilterRegistrationBean webStatFilter(){
    FilterRegistrationBean bean &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FilterRegistrationBean();
    bean.setFilter(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; WebStatFilter());

    Map&lt;/span&gt;&amp;lt;String,String&amp;gt; initParams = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
    initParams.put(&lt;/span&gt;&quot;exclusions&quot;,&quot;*.js,*.css,/druid/*&quot;&lt;span&gt;);

    bean.setInitParameters(initParams);

    bean.setUrlPatterns(Arrays.asList(&lt;/span&gt;&quot;/*&quot;&lt;span&gt;));

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;  bean;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样我们可以直接通过后台监控数据源访问情况。&lt;/p&gt;
&lt;h2&gt;四、&lt;span class=&quot;md-expand&quot;&gt;Mybatis&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;第一步也是引入依赖：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也导入Druid数据源，并加入之前学习Mybatis时用到的实体，而后就可以进行测试，Mybatis的使用也有两种方法，注解版和配置文件版，注解版用的很少，一般都是配置文件。&lt;/p&gt;
&lt;h3&gt;4.1、&lt;span class=&quot;md-expand&quot;&gt;注解版&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Mapper
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; DepartmentMapper {
    @Select(&lt;/span&gt;&quot;select * from department where id=#{id}&quot;&lt;span&gt;)
    Department getDeptById(Integer id);

    @Delete(&lt;/span&gt;&quot;delete from department where id=#{id}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; deleteDeptById(Integer id);

    @Options(useGeneratedKeys &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;,keyProperty = &quot;id&quot;&lt;span&gt;)
    @Insert(&lt;/span&gt;&quot;insert into department(departmentName) values(#{departmentName})&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; insertDept(Department department);

    @Update(&lt;/span&gt;&quot;update department set departmentName=#{departmentName} where id=#{id}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; updateDept(Department department);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Autowired
UserMapper userMapper;

@Autowired
DepartmentMapper departmentMapper;

@Test
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; mybatisTest(){
    Department deptById &lt;/span&gt;= departmentMapper.getDeptById(1&lt;span&gt;);
    System.out.println(deptById);

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：Department(id=1, departmentName=AA)&lt;/p&gt;
&lt;h3&gt;4.2、&lt;span class=&quot;md-expand&quot;&gt;配置文件版&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;使用配置文件版方式也很简单，也是先新增一个接口：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Mapper
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; UserMapper {
    User queryUserById(Integer id);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后新增一个全局配置文件：SqlMapConfig.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;里面暂时什么配置都不需要，然后再引入相应的XXXMapper.xml文件，最后在配置文件中加上扫描文件配置即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mybatis:
  config-location: classpath:mybatis/SqlMapConfig.xml
  mapper-locations: classpath:mybatis/mapper/*.xml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1113901/201904/1113901-20190423000448611-1916342503.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;UserMapper.xml内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;com.yuanqinnan.mapper.UserMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryUserById&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.yuanqinnan.model.User&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    SELECT * FROM `user`where id=#{id}
   &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Test
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; mybatisTest(){
    Department deptById &lt;/span&gt;= departmentMapper.getDeptById(1&lt;span&gt;);
    System.out.println(deptById);
    User userById &lt;/span&gt;= userMapper.queryUserById(1&lt;span&gt;);
    System.out.println(userById);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mybatis的配置就是这么简单，基本不需要额外配置。&lt;/p&gt;
&lt;h2&gt;五、&lt;span class=&quot;md-expand&quot;&gt;JPA&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;JDBC和Mybatis我们之前都学习过，SpringBoot只不过是帮我们整合配置，而JPA我们之前没有接触过，所以还是要先解释下，了解JPA之前我们先了解Spring Data：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-focus&quot;&gt;&lt;span&gt;Spring Data 项目的目的是为了简化构建基于Spring 框架应用的数据访问技术，包括非关系数据库、Map-Reduce 框架、云数据服务等等；另外也包含对关系数据库的访问支持。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-focus&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1113901/201904/1113901-20190423000641998-374051382.png&quot; alt=&quot;&quot; width=&quot;1012&quot; height=&quot;556&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Spring Data 主要特点是：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;SpringData为我们提供使用统一的API来对数据访问层进行操作；这主要是Spring Data Commons项目来实现的。Spring Data Commons让我们在使用关系型或者非关系型数据访问技术时都基于Spring提供的统一标准，标准包含了CRUD（创建、获取、更新、删除）、查询、排序和分页的相关操作。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;SpringData帮我们封装了数据库操作，我们只需要进程接口，就可以进行操作，SpringData有如下统一的接口&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Repository&amp;lt;T, ID extends Serializable&amp;gt;：统一接口 &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span&gt;RevisionRepository&amp;lt;T, ID extends Serializable, N extends Number &amp;amp; Comparable&lt;span class=&quot;md-tag md-raw-inline&quot;&gt;&amp;lt;N&amp;gt;&lt;span&gt;&amp;gt;：基于乐观锁机制 &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span&gt;CrudRepository&amp;lt;T, ID extends Serializable&amp;gt;：基本CRUD操作 &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span&gt;PagingAndSortingRepository&amp;lt;T, ID extends Serializable&amp;gt;：基本CRUD及分页&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;我们要使用JPA，就是继承JpaRepository,我们只要按照它的命名规范去对命名接口，便可以实现数据库操作功能，这样说有些抽象，还是用一个例子来说明：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-focus&quot;&gt;&lt;span&gt;第一步：引入依赖&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; springdata jpa依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二步：编写表对应实体：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用JPA注解配置映射关系&lt;/span&gt;
@Entity &lt;span&gt;//&lt;/span&gt;&lt;span&gt;告诉JPA这是一个实体类（和数据表映射的类）&lt;/span&gt;
@Table(name = &quot;order&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;@Table来指定和哪个数据表对应;order；&lt;/span&gt;
&lt;span&gt;@Data
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Order {

    @Id &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这是一个主键&lt;/span&gt;
    @GeneratedValue(strategy = GenerationType.IDENTITY)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自增主键&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer id;

    @Column(name &lt;/span&gt;= &quot;user_Id&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer userId;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这是和数据表对应的一个列&lt;/span&gt;
    @Column(name=&quot;number&quot;,length = 32&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String number;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 订单创建时间,省略默认列名就是属性名&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date createtime;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 备注&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String note;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第三步：编写仓库接口：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Repository
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; OrderRepository &lt;span&gt;extends&lt;/span&gt; JpaRepository&amp;lt;Order, Integer&amp;gt;&lt;span&gt; {
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个时候OrderRepository 已经有了很多实现好的方法，我们只要跟着调用即可&lt;/p&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Autowired
OrderRepository orderRepository;

@Test
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; jpaTest(){
    List&lt;/span&gt;&amp;lt;Order&amp;gt; all =&lt;span&gt; orderRepository.findAll();
    System.out.println(all);

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个简单的JPA实现完成，当然JPA的内容很多，这里只是一个非常简单的例子，要进一步的学习的话还是要去看官方文档。&lt;/p&gt;

</description>
<pubDate>Mon, 22 Apr 2019 16:12:00 +0000</pubDate>
<dc:creator>茶底世界</dc:creator>
<og:description>一、引言 大部分系统都离不开数据访问，数据库包括SQL和NOSQL，SQL是指关系型数据库，常见的有SQL Server，Oracle，MySQL(开源)，NOSQL是泛指非关系型数据库，常见的有Mo</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yuanqinnan/p/10753979.html</dc:identifier>
</item>
<item>
<title>数据结构与算法分析 - coding-for-self</title>
<link>http://www.cnblogs.com/longjiang-uestc/p/10753955.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/longjiang-uestc/p/10753955.html</guid>
<description>[unable to retrieve full-text content]数据结构与算法分析 C 语言描述 引论 从N个数中确定第k个最大值,称为选择问题(selection problem). 不是所有的数学递归函数都能有效地(或正确地)由C的递归模拟来实现. 递归将反复进行直到基准情形出现. 递归的四条基本法则: 基准情形: 不需递归也能得到的解, 即终止条件. 不断</description>
<pubDate>Mon, 22 Apr 2019 16:02:00 +0000</pubDate>
<dc:creator>coding-for-self</dc:creator>
<og:description>数据结构与算法分析 C 语言描述 引论 从N个数中确定第k个最大值,称为选择问题(selection problem). 不是所有的数学递归函数都能有效地(或正确地)由C的递归模拟来实现. 递归将反复</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/longjiang-uestc/p/10753955.html</dc:identifier>
</item>
<item>
<title>解读 kubernetes client-go 官方 examples - Part Ⅰ - 黄挤挤</title>
<link>http://www.cnblogs.com/guangze/p/10753929.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guangze/p/10753929.html</guid>
<description>&lt;p&gt;&lt;strong&gt;转发请注明出处：https://www.cnblogs.com/guangze/p/10753929.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最近，因为需要对 Kubernetes 进行二次开发，接触了 client-go 库。client-go 作为官方维护的 go 语言实现的 client 库，提供了大量的高质量代码帮助开发者编写自己的客户端程序，来访问、操作 Kubernetes 集群。 在学习过程中我发现，除了官方的几个 examples 和 README 外，介绍 client-go 的文章较少。因此，这里有必要总结一下我的学习体会，分享出来。&lt;/p&gt;
&lt;p&gt;访问 Kubernetes 集群的方式有多种（见 &lt;a href=&quot;https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/&quot;&gt;Access Clusters Using the Kubernetes API&lt;/a&gt; ），但本质上都要通过调用 Kubernetes REST API 实现对集群的访问和操作。比如，使用最多 kubernetes 命令行工具 kubectl，就是通过调用 Kubernetes REST API 完成的。当执行 &lt;code&gt;kubectl get pods -n test&lt;/code&gt; 命令时， kubectl 向 Kubernetes API Server 完成认证、并发送 GET 请求：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;GET /api/v1/namespaces/test/pods
---
200 OK
Content-Type: application/json
{
  &quot;kind&quot;: &quot;PodList&quot;,
  &quot;apiVersion&quot;: &quot;v1&quot;,
  &quot;metadata&quot;: {&quot;resourceVersion&quot;:&quot;10245&quot;},
  &quot;items&quot;: [...]
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么如何编写自己的 http 客户端程序呢？ 这就需要 Kubernetes 提供的 Golang client 库。&lt;/p&gt;
&lt;p&gt;本文通过解读 Kubernetes client-go 官方例子之一 &lt;a href=&quot;https://github.com/kubernetes/client-go/tree/master/examples/create-update-delete-deployment&quot;&gt;Create, Update &amp;amp; Delete Deployment&lt;/a&gt; ，详细介绍 client-go 原理和使用方法。该例子实现了创建、更新、查询、删除 deployment 资源。&lt;/p&gt;

&lt;h2 id=&quot;测试环境&quot;&gt;2.1 测试环境&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Ubuntu 18.04.2&lt;/li&gt;
&lt;li&gt;Minikube 1.0.0&lt;/li&gt;
&lt;li&gt;golang 1.12.4&lt;/li&gt;
&lt;li&gt;k8s.io/client-go 源码&lt;/li&gt;
&lt;li&gt;GoLand IDE&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下载 Minikube release 地址：https://github.com/kubernetes/minikube/releases&lt;/p&gt;
&lt;p&gt;下载 k8s.io/client-go 源码：https://github.com/kubernetes/client-go&lt;/p&gt;
&lt;p&gt;client-go 源码下载后，使用 go mod vendor 下载依赖库，或直接从github上下载依赖的其他库（如果没有设置外网代理的话）。&lt;/p&gt;
&lt;h2 id=&quot;运行结果&quot;&gt;2.2 运行结果&lt;/h2&gt;
&lt;p&gt;因为我自己开了 VPN 连接到远程的 Kubernetes 集群内网，并复制 .kube/config 到了本地，所以我可以直接在 GoLand 上编译运行，就能看到如下输出：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;Creating deployment...
Created deployment &quot;demo-deployment&quot;.
-&amp;gt; Press Return key to continue.

Updating deployment...
Updated deployment...
-&amp;gt; Press Return key to continue.

Listing deployments in namespace &quot;default&quot;:
 * demo-deployment (1 replicas)
 * intended-quail-fluentbit-operator (1 replicas)
 * test (1 replicas)
-&amp;gt; Press Return key to continue.

Deleting deployment...
Deleted deployment.

Process finished with exit code 0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在运行过程中，你也可以通过 kubectl 命令观察创建的 deployment 变化。可以看到，这个 example 分别完成了四个操作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在 default namespace 下创建了一个叫 demo-deployment 的 deployment&lt;/li&gt;
&lt;li&gt;更新该 deployment 的副本数量、修改容器镜像版本到 nginx:1.13&lt;/li&gt;
&lt;li&gt;列出 default namespace 下的所有 deployment&lt;/li&gt;
&lt;li&gt;删除创建的 demo-deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成 deployment 资源的增删改查，大体可以分为以下几个步骤。这个流程对访问其他 Kubernete 资源也是一样的：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通过 kubeconfig 信息，构造 Config 实例。该实例记录了集群证书、 API Server 地址等信息；&lt;/li&gt;
&lt;li&gt;根据 Config 实例携带的信息，创建 http 客户端；&lt;/li&gt;
&lt;li&gt;向 apiserver 发送请求，创建 Kubernetes 资源等&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;我用 go-callvis 制作了 example 中的函数调用图，以供参考：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/409355/201904/409355-20190422233531454-1526038177.png&quot; alt=&quot;例子里的函数调用图&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;获取-kubeconfig-信息并构造-restconfig-实例&quot;&gt;3.1 获取 kubeconfig 信息，并构造 rest#Config 实例&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Note: 我用 &amp;lt;package&amp;gt;#&amp;lt;func, struct&amp;gt; 表示某包下的函数、结构体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在访问 Kubernetes 集群时，少不了身份认证。使用 kubeconfig 配置文件是其中一种主要的认证方式。kubeconfig 文件描述了集群（cluster）、用户（user）和上下文（context）信息。默认的 kubeconfig 文件位于 $HOME/.kube/config 下。可以通过 &lt;code&gt;cat $HOME/.kube/config&lt;/code&gt;， 或者 &lt;code&gt;kubectl config view&lt;/code&gt; 查看：&lt;/p&gt;
&lt;pre class=&quot;yaml&quot;&gt;
&lt;code&gt;apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://192.168.0.8:6443
  name: cluster.local
contexts:
- context:
    cluster: cluster.local
    user: kubernetes-admin
  name: kubernetes-admin@cluster.local
users:
- name: kubernetes-admin
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED
current-context: kubernetes-admin@cluster.local
preferences: {}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我的测试环境 kubeconfig 配置显示，集群 API Server 地址位于 192.168.0.8:6443，集群开启 TLS，certificate-authority-data 指定公钥。客户端用户名为 kubernetes-admin，证书为 client-certificate-data，通过私钥 client-key-data 访问集群。上下文参数将集群和用户关联了起来。关于 kubeconfig 的更多介绍可以参考 [kubernetes中kubeconfig的用法]。(https://www.cnblogs.com/charlieroro/p/8489515.html)&lt;/p&gt;
&lt;p&gt;源码中，kubeconfig 变量记录了 kubeconfig 文件路径。通过 BuildConfigFromFlags 函数返回了一个 rest#Config 结构体实例。该实例记录了 kubeconfig 文件解析、处理后的信息。&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;var kubeconfig *string
if home := homedir.HomeDir(); home != &quot;&quot; {
  kubeconfig = flag.String(&quot;kubeconfig&quot;, filepath.Join(home, &quot;.kube&quot;, &quot;config&quot;), &quot;(optional) absolute path to the kubeconfig file&quot;)
} else {
  kubeconfig = flag.String(&quot;kubeconfig&quot;, &quot;&quot;, &quot;absolute path to the kubeconfig file&quot;)
}
flag.Parse()

config, err := clientcmd.BuildConfigFromFlags(&quot;&quot;, *kubeconfig)
if err != nil {
  panic(err)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BuildConfigFromFlags 函数是如何实例化 Config 结构体的呢？&lt;/p&gt;
&lt;p&gt;首先，BuildConfigFromFlags 函数接受一个 kubeconfigPath 变量，然后在内部依次调用如下函数：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;func NewNonInteractiveDeferredLoadingClientConfig(loader ClientConfigLoader, overrides *ConfigOverrides) ClientConfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func (config *DeferredLoadingClientConfig) ClientConfig() (*restclient.Config, error)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;func BuildConfigFromFlags(masterUrl, kubeconfigPath string) (*restclient.Config, error) {
  if kubeconfigPath == &quot;&quot; &amp;amp;&amp;amp; masterUrl == &quot;&quot; {
    ...
  }
  return NewNonInteractiveDeferredLoadingClientConfig(
    &amp;amp;ClientConfigLoadingRules{ExplicitPath: kubeconfigPath},
    &amp;amp;ConfigOverrides{ClusterInfo: clientcmdapi.Cluster{Server: masterUrl}}).ClientConfig()
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们来看看这两个链式调用的函数都做了哪些工作：&lt;/p&gt;
&lt;h3 id=&quot;toolsclientcmdnewnoninteractivedeferredloadingclientconfig&quot;&gt;3.1.1 tools/clientcmd#NewNonInteractiveDeferredLoadingClientConfig&lt;/h3&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;func NewNonInteractiveDeferredLoadingClientConfig(loader ClientConfigLoader, overrides *ConfigOverrides) ClientConfig {
  return &amp;amp;DeferredLoadingClientConfig{loader: loader, overrides: overrides, icc: &amp;amp;inClusterClientConfig{overrides: overrides}}
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;返回值：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;返回一个 &lt;code&gt;tools/clientcmd#DirectClientConfig&lt;/code&gt; 类型的实例。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;DeferredLoadingClientConfig 结构体是 ClientConfig 接口的一种实现。主要工作是确保装载的 Config 实例使用的是最新 kubeconfig 数据（对于配置了多个集群的，export KUBECONFIG=cluster1-config:cluster2-config，需要执行 merge）。虽然本例子中还感受不到 Deferred Loading 体现在何处。源码注释中有这样一段话：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;It is used in cases where the loading rules may change after you've instantiated them and you want to be sure that the most recent rules are used. This is useful in cases where you bind flags to loading rule parameters before the parse happens and you want your calling code to be ignorant of how the values are being mutated to avoid passing extraneous information down a call stack&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;参数列表：&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;loader ClientConfigLoader：&lt;/p&gt;
&lt;p&gt;我的测试环境是通过单一的路径 &lt;code&gt;$HOME/.kube/config&lt;/code&gt; 获取 kubeconfig。但 kubeconfig 可能由不只一个配置文件 merge 而成，loader 确保在最终创建 Config 实例时，使用的是最新的 kubeconfig。loader 的 ExplicitPath 字段记录指定的 kubeconfig 文件路径，Precedence 字符串数组记录要 merge 的 kubeconfig 信息。这也是为什么返回值叫 &lt;strong&gt;Deferred Loading ClientConfig&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;loader 接受一个 ClientConfigLoader 接口实现，比如：&lt;code&gt;&amp;amp;ClientConfigLoadingRules{ExplicitPath: kubeconfigPath}&lt;/code&gt;（这里是地址类型，因为是 *ClientConfigLoadingRules 实现了 ClientConfigLoader 接口，而不是 ClientConfigLoadingRules）。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;overrides *ConfigOverrides：&lt;/p&gt;
&lt;p&gt;overtrides 保存用于强制覆盖 Config 实例的信息。本例中没有用到。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;deferredloadingclientconfig.clientconfig&quot;&gt;3.1.2 (*DeferredLoadingClientConfig).ClientConfig()&lt;/h3&gt;
&lt;p&gt;上一个函数返回了 ClientConfig 接口实例。这里调用 ClientConfig 接口定义的 ClientConfig() 方法。ClientConfig() 工作是解析、处理 kubeconfig 文件里的认证信息，并返回一个完整的 rest#Config 实例。&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;// 错误处理省略
func (config *DeferredLoadingClientConfig) ClientConfig() (*restclient.Config, error) {
  mergedClientConfig, err := config.createClientConfig()
  ...

  // load the configuration and return on non-empty errors and if the
  // content differs from the default config
  mergedConfig, err := mergedClientConfig.ClientConfig()
  ...

  // check for in-cluster configuration and use it
  if config.icc.Possible() {
    klog.V(4).Infof(&quot;Using in-cluster configuration&quot;)
    return config.icc.ClientConfig()
  }

  // return the result of the merged client config
  return mergedConfig, err
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个函数主要有两个重要部分：&lt;/p&gt;
&lt;p&gt;1.&lt;code&gt;mergedClientConfig, err := config.createClientConfig()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;内部执行遍历 kubeconfig files （如果有多个）， 对每个 kubeconfig 执行 LoadFromFile 返回 tools/clientcmd/api#Config 实例。api#Config 顾名思义 api 包下的 Config，是把 kubeconfig （eg. $HOME/.kube/config） 序列化为一个 API 资源对象。&lt;/p&gt;
&lt;p&gt;现在,我们看到了几种结构体或接口命名相似，不要混淆了：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;api#Config：序列化 kubeconfig 文件后生成的对象&lt;/li&gt;
&lt;li&gt;tools/clientcmd#ClientConfig：负责用 api#Config 真正创建 rest#Config。处理、解析 kubeconfig 中的认证信息，有了它才能创建 rest#Config，所以命名叫 &lt;strong&gt;Client&lt;/strong&gt;Config&lt;/li&gt;
&lt;li&gt;rest#Config：用于创建 http 客户端&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对于 merge 后的 api#Config，调用 NewNonInteractiveClientConfig 创建一个 ClientConfig 接口的实现。&lt;/p&gt;
&lt;p&gt;2.&lt;code&gt;mergedConfig, err := mergedClientConfig.ClientConfig()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;真正创建 rest#Config 的地方。在这里解析、处理 kubeconfig 中的认证信息。&lt;/p&gt;
&lt;h2 id=&quot;创建-clientset&quot;&gt;3.2 创建 ClientSet&lt;/h2&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;// NewForConfig creates a new Clientset for the given config.
config, err := clientcmd.BuildConfigFromFlags(&quot;&quot;, *kubeconfig)
if err != nil {
  panic(err)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ClientSet 是一个重要的对象。它就是负责访问集群 apiserver 的客户端。那为什么叫 ClientSet 呢？ 说明 Client 不止一个。比如 deployment 的 extensions/v1beta1、apps/v1beta、最新的 apps/v1 有多种版本（API Group），每种都有一个 Client 用于创建该版本的 deployment&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
  ...
  appsV1                       *appsv1.AppsV1Client
  appsV1beta1                  *appsv1beta1.AppsV1beta1Client
  appsV1beta2                  *appsv1beta2.AppsV1beta2Client
  ...
  extensionsV1beta1            *extensionsv1beta1.ExtensionsV1beta1Client
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;创建一个-default-命名空间下的-appsv1deployment-资源&quot;&gt;3.3 创建一个 default 命名空间下的 apps/v1#deployment 资源&lt;/h2&gt;
&lt;h3 id=&quot;创建-deploymentsclient&quot;&gt;3.3.1 创建 deploymentsClient&lt;/h3&gt;
&lt;p&gt;创建 apps/v1 版本的 deployment，首先获得该版本的 client。&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;deploymentsClient := clientset.AppsV1().Deployments(apiv1.NamespaceDefault)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;构造一个-appsv1deployment-实例&quot;&gt;3.3.2 构造一个 apps/v1#deployment 实例&lt;/h3&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;deployment := &amp;amp;appsv1.Deployment{
  ObjectMeta: metav1.ObjectMeta{
    Name: &quot;demo-deployment&quot;,  // 指定 deployment 名字
  },
  Spec: appsv1.DeploymentSpec{
    Replicas: int32Ptr(2), // 指定副本数
    Selector: &amp;amp;metav1.LabelSelector{  // 指定标签
      MatchLabels: map[string]string{
        &quot;app&quot;: &quot;demo&quot;,
      },
    },
    Template: apiv1.PodTemplateSpec{ // 容器模板
      ObjectMeta: metav1.ObjectMeta{
        Labels: map[string]string{
          &quot;app&quot;: &quot;demo&quot;,
        },
      },
      Spec: apiv1.PodSpec{
        ...
      },
    },
  },
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;向-apiserver-发送-post-创建-deployment&quot;&gt;3.3.3 向 apiserver 发送 POST 创建 deployment&lt;/h3&gt;
&lt;p&gt;有兴趣的朋友可以进一步看源码这里是如何实现 http client 的。&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;result, err := deploymentsClient.Create(deployment)

---

// Create takes the representation of a deployment and creates it.  Returns the server's representation of the deployment, and an error, if there is any.
func (c *deployments) Create(deployment *v1.Deployment) (result *v1.Deployment, err error) {
  result = &amp;amp;v1.Deployment{}
  err = c.client.Post().
    Namespace(c.ns).
    Resource(&quot;deployments&quot;).
    Body(deployment).
    Do().
    Into(result)
  return
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，一个 deployment 就创建完成了。删、改、查操作也是一样。&lt;/p&gt;

&lt;p&gt;要搞彻底清楚 client-go，一方面要多查看 K8s 的 API 文档，另一方建议用 GoLand 单步调试，搞清楚每一步的含义。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/&quot;&gt;Access Clusters Using the Kubernetes API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/reference/using-api/api-concepts/#efficient-detection-of-changes&quot;&gt;Kubernetes API Concepts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/charlieroro/p/8489515.html&quot;&gt;kubernetes中kubeconfig的用法&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 22 Apr 2019 15:53:00 +0000</pubDate>
<dc:creator>黄挤挤</dc:creator>
<og:description>本文通过解读 Kubernetes client-go 官方例子之一 Create, Update &amp; Delete Deployment ，详细介绍 client-go 原理和使用方法。该例子实现了</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guangze/p/10753929.html</dc:identifier>
</item>
<item>
<title>ansible playbook详细知识点（个人笔记加官网资料整合） - 魏俊峰</title>
<link>http://www.cnblogs.com/aaaaaaa/p/10753860.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aaaaaaa/p/10753860.html</guid>
<description>&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1652795/201904/1652795-20190422220825092-466126572.png&quot; alt=&quot;&quot; width=&quot;259&quot; height=&quot;262&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内容比较杂多,不太会调格式，你自己&lt;/strong&gt;ctrl F 方便查找哈 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;执行playbook命令  &lt;/strong&gt;&lt;br/&gt;&lt;span&gt;ansible­playbook -­i &quot;inventory文件名&quot; playbook.yml ­f 10  (并行级别10)&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;加参数&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;-e &quot;temp_file=${uuid}&quot;     或者：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;--extra­vars &quot;version=1.23.45 other_variable=foo&quot; ­­ 或者：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;--extra­vars  &lt;em id=&quot;__mceDel&quot;&gt;'{&quot;pacman&quot;:&quot;mrs&quot;,&quot;ghosts&quot;:[&quot;inky&quot;,&quot;pinky&quot;,&quot;clyde&quot;,&quot;sue&quot;]}'  或者：&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;--extra­vars  &lt;em id=&quot;__mceDel&quot;&gt;&quot;@some_file.json&quot;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;执行一个 playbook 之前,农想看看这个 playbook 的执行会影响到哪些 hosts,可&lt;em id=&quot;__mceDel&quot;&gt;以这样做:&lt;/em&gt;&lt;br/&gt;&lt;span&gt;ansible­playbook playbook.yml ­­--list-­hosts&lt;/span&gt;&lt;br/&gt;实践例子：https://github.com/ansible/ansible­examples   &lt;/p&gt;
&lt;p&gt; playbook.yml 文件like 可 this：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;- hosts: webservers,webservers2&lt;br/&gt;vars:     &lt;br/&gt;http_port: &lt;span&gt;80&lt;/span&gt;     &lt;br/&gt;max_clients: &lt;span&gt;200&lt;/span&gt;   &lt;br/&gt;remote_user: root   &lt;br/&gt;tasks:   &lt;br/&gt;- name: ensure apache &lt;span&gt;is&lt;/span&gt; at the latest version(确定是不是最新版本)&lt;br/&gt;yum: pkg=httpd state=latest&lt;br/&gt;remote_user: yourname&lt;br/&gt;- name: write the apache config file     &lt;br/&gt;template: src=/srv/httpd.j2 dest=/etc/httpd.conf     &lt;br/&gt;notify:     &lt;br/&gt;- restart apache   &lt;br/&gt;- name: ensure apache &lt;span&gt;is&lt;/span&gt; running     &lt;br/&gt;service: name=httpd state=started   &lt;br/&gt;handlers:     &lt;br/&gt;- name: restart apache       &lt;br/&gt;service: name=httpd state=restarted
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;inventory文件例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;
&lt;pre readability=&quot;8&quot;&gt;
[all:vars] &lt;br/&gt;DOCKERREGISTRY=kubernetes-master &lt;br/&gt;DOCKERREGISTRYPROT=&lt;span&gt;5000&lt;/span&gt; &lt;br/&gt;IMAGESVERSION=&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-SNAPSHOT  &lt;br/&gt;[k8s_emu_vip_node] &lt;br/&gt;k8s_emu_vip_node1 ansible_ssh_host=&lt;span&gt;10.222&lt;/span&gt;.&lt;span&gt;2.201&lt;/span&gt; ansible_connection=ssh ansible_ssh_user=root ansible_ssh_pass=gsta123 ansible_ssh_extra_args=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-o StrictHostKeyChecking=no&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;    &lt;p&gt;[k8s_emu_node] &lt;br/&gt;k8s_emu_node1 ansible_ssh_host=&lt;span&gt;1.1&lt;/span&gt;.&lt;span&gt;1.1&lt;/span&gt; ansible_connection=ssh ansible_ssh_user=root ansible_ssh_pass=gsta123 ansible_ssh_extra_args=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-o StrictHostKeyChecking=no&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;br/&gt;k8s_emu_node2 ansible_ssh_host=&lt;span&gt;1.1&lt;/span&gt;.&lt;span&gt;1.2&lt;/span&gt; ansible_connection=ssh ansible_ssh_user=root ansible_ssh_pass=gsta123 ansible_ssh_extra_args=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-o StrictHostKeyChecking=no&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;{{}}里进行操作，lookup插件，读取network_test_conf文件，然后作为变量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
{{ lookup(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, network_test_conf) | from_yaml }}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注册node，添加主机，添加组&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
- name: Register ansible node list  &lt;br/&gt;add_host:       &lt;br/&gt;hostname: '{{item[&quot;name&quot;]}}'       &lt;br/&gt;groups: 'fio-server'    &lt;br/&gt;#   ansible_ssh_host: '{{item.addresses[network_name] | selectattr(&quot;OS-EXT-IPS:type&quot;,&quot;equalto&quot;, &quot;floating&quot;)| map(attribute=&quot;addr&quot;) | join(&quot;,&quot;)}}'       &lt;br/&gt;ansible_ssh_host: '{{item.addresses[network_name] | selectattr(&quot;OS-EXT-IPS:type&quot;,&quot;equalto&quot;, &quot;fixed&quot;)| map(attribute=&quot;addr&quot;) | join(&quot;,&quot;)}}'       &lt;br/&gt;ansible_ssh_port: &quot;22&quot;       &lt;br/&gt;ansible_ssh_user: '{{image_ssh_user}}'       &lt;br/&gt;ansible_ssh_pass: '{{image_ssh_pass}}'       &lt;br/&gt;ansible_ssh_extra_args: &quot;-o StrictHostKeyChecking=no&quot;       &lt;br/&gt;ansible_sftp_extra_args: &quot;-o StrictHostKeyChecking=no&quot;              &lt;br/&gt;#ansible_ssh_extra_args: &quot;-o ProxyCommand='{{proxy}}' -o StrictHostKeyChecking=no&quot;       &lt;br/&gt;#ansible_sftp_extra_args: &quot;-o ProxyCommand='{{proxy}}' -o StrictHostKeyChecking=no&quot;  with_items: &quot;{{result.json.servers}}&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;copy模块&lt;/strong&gt;[拷贝文件，从本地拷贝文件至各主机]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
- name: Copy the keyfile &lt;span&gt;for&lt;/span&gt; authentication    &lt;br/&gt;copy: src=/wjf/weijunfeng dest={{ mongodb_datadir_prefix }}/secret owner=mongod group=mongod mode=&lt;span&gt;0400&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;fetch模块&lt;/strong&gt;，从各主机拷贝文件到本地，flat: &quot;yes&quot;表示不自动创建目录，如果为false，会自动创建带各自主机名的目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
fetch:  &lt;br/&gt;src: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/home/fio-result&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;br/&gt;dest: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;./fio-test-result/{{ansible_ssh_host}}/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;br/&gt;flat: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;创建文件或者目录，&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
- name: Create data directory for mongoc configuration server    &lt;br/&gt;file: path={{ mongodb_datadir_prefix }}/configdb state=directory owner=mongod group=mongod
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;l  path: 路径，一般用于创建删除文件或目录&lt;/p&gt;
&lt;p&gt;l  state: file的相关操作，&lt;/p&gt;
&lt;p&gt;       directory表示创建目录，&lt;/p&gt;
&lt;p&gt;       link表示创建软连接，link还需要源路径和目标路径配合使用&lt;/p&gt;
&lt;p&gt;       touch表示创建文件，&lt;/p&gt;
&lt;p&gt;       absent表示删除文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;执行shell命令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;- name: Initialize the replication set   &lt;br/&gt;shell: /usr/bin/mongo --port &quot;&lt;/span&gt;{&lt;span&gt;{ mongod_port &lt;/span&gt;}&lt;span&gt;}&quot; /tmp/repset_init.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;暂停，等待&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;- name: pause   pause: seconds=20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;service服务模块 比如启动nginx&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt; - name: Make sure nginx start with boot     &lt;br/&gt;service: name=nginx state=started enabled=yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;enabled&lt;/em&gt;：这个注意了，默认是&lt;em&gt;no&lt;/em&gt;，如果配置成&lt;em&gt;false&lt;/em&gt;就是&lt;em&gt;restart&lt;/em&gt;了之后就不关心结果了，配置成&lt;em&gt;yes&lt;/em&gt;是要关心结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解压模块&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;- unarchive: src=foo.tgz dest=/var/lib/foo  &lt;br/&gt;- unarchive: src=/tmp/foo.zip dest=/usr/local/bin copy=no  &lt;br/&gt;- unarchive: src=https://example.com/example.zip dest=/usr/local/bin copy=no&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;unarchive模块&lt;/p&gt;
&lt;p&gt;用于解压文件，模块包含如下选项：&lt;/p&gt;
&lt;p&gt;copy：在解压文件之前，是否先将文件复制到远程主机，默认为yes。若为no，则要求目标主机上压缩包必须存在。&lt;/p&gt;
&lt;p&gt;creates：指定一个文件名，当该文件存在时，则解压指令不执行&lt;/p&gt;
&lt;p&gt;dest：远程主机上的一个路径，即文件解压的路径&lt;/p&gt;
&lt;p&gt;grop：解压后的目录或文件的属组&lt;/p&gt;
&lt;p&gt;list_files：如果为yes，则会列出压缩包里的文件，默认为no，2.0版本新增的选项&lt;/p&gt;
&lt;p&gt;mode：解决后文件的权限&lt;/p&gt;
&lt;p&gt;src：如果copy为yes，则需要指定压缩文件的源路径&lt;/p&gt;
&lt;p&gt;owner：解压后文件或目录的属主&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;yum模块&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;- name: remove epel if installed   &lt;br/&gt;yum:     &lt;br/&gt;name: epel-release     &lt;br/&gt;state: absent   &lt;br/&gt;ignore_errors: true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Wait_for模块：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;等待事情发生，例如等待数据库启动、web容器启动等。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;- name: wait for dnsmasq port 53   &lt;br/&gt;wait_for:     &lt;br/&gt;port: 53 &lt;br/&gt;timeout: 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;port：等待某端口号必须启动&lt;/p&gt;
&lt;p&gt;path：等待某文件必须创建&lt;/p&gt;
&lt;p&gt;host：默认是127.0.0.1，为了满足等待其它远程服务器的场景&lt;/p&gt;
&lt;p&gt;timeout的单位是秒&lt;/p&gt;
&lt;p&gt;state：默认是started，也就是等待启动或创建，也可能存在等待删除或停止等场景。对象是端口的时候start状态会确保端口是打开的，stoped状态会确认端口是关闭的;对象是文件的时候，present或者started会确认文件是存在的，而absent会确认文件是不存在的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Git模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于git版本服务的操作模块&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;- name: ANSISTRANO | GIT | Update remote repository   &lt;br/&gt;git:     &lt;br/&gt;repo: &quot;&lt;/span&gt;{&lt;span&gt;{ ansistrano_git_repo &lt;/span&gt;}&lt;span&gt;}&quot;     &lt;br/&gt;dest: &quot;&lt;/span&gt;{&lt;span&gt;{ ansistrano_deploy_to &lt;/span&gt;}&lt;span&gt;}/repo&quot;     &lt;br/&gt;version: &quot;&lt;/span&gt;{&lt;span&gt;{ ansistrano_git_branch &lt;/span&gt;}&lt;span&gt;}&quot;     &lt;br/&gt;accept_hostkey: true     &lt;br/&gt;update: yes     &lt;br/&gt;force: yes   &lt;br/&gt;register: ansistrano_git_result_update   &lt;br/&gt;when: ansistrano_git_identity_key_path|trim == '' and ansistrano_git_identity_key_remote_path|trim == ''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;repo：git仓库的地址&lt;/p&gt;
&lt;p&gt;dest：仓库中的相对目录&lt;/p&gt;
&lt;p&gt;version：哪个版本&lt;/p&gt;
&lt;p&gt;accept_hostkey：如果ssh_opts包含” -o StrictHostKeyChecking=no”，此参数可以省略，如果配置成true或yes，需要添加hostkey&lt;/p&gt;
&lt;p&gt;update：是否要更新新版本&lt;/p&gt;
&lt;p&gt;force：配置成yes，本地仓库将永远被仓库服务端覆盖&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;get_url模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也就是download操作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
- name: codelivery | download | Download artifact   &lt;br/&gt;get_url:     &lt;br/&gt;url: &quot;{{ codelivery_product_url }}&quot;     &lt;br/&gt;dest: &quot;{{ codelivery_releases_dir }}/{{ codelivery_product_url | basename }}&quot;     &lt;br/&gt;force_basic_auth: &quot;{{ codelivery_download_force_basic_auth | default(omit) }}&quot;     &lt;br/&gt;headers: &quot;{{ codelivery_download_headers | default(omit) }}&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;url：http的地址&lt;/p&gt;
&lt;p&gt;dest：下载文件到目的机的路径&lt;/p&gt;
&lt;p&gt;force_basic_auth：在发起请求前是否发出权限校验信息&lt;/p&gt;
&lt;p&gt;headers：报文头信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;uri模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比get_url功能更强大的http请求模块，可以发起get、post、put等各种请求方式，也可以处理返回值及内容&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
- name: codelivery | healthcheck | urlcheck status==200?   &lt;br/&gt;uri:     &lt;br/&gt;url: &quot;http://{{ codelivery_urlcheck_addr }}:{{ codelivery_urlcheck_port }}{{ codelivery_urlcheck_url }}&quot;     &lt;br/&gt;method: GET     &lt;br/&gt;headers:       &lt;br/&gt;Host: &quot;{{ codelivery_urlcheck_host }}&quot;     &lt;br/&gt;timeout: 10     &lt;br/&gt;status_code: 200     &lt;br/&gt;return_content: no
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;debug模块&lt;/strong&gt; 打印出变量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
- debug: msg=&quot;heat_failed_reason={{reason.stdout}}&quot;   &lt;br/&gt;when: result.stdout==&quot;CREATE_FAILED&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;常用魔数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ansible_distribution=Ubuntu&lt;/p&gt;
&lt;p&gt;ansible_distribution_version=14.04&lt;/p&gt;
&lt;p&gt;ansible_distribution_major_version：系统的大版本号&lt;/p&gt;
&lt;p&gt;ansible_os_family：系统的操作系统(‘RedHat’,’Debian’,’FreeBSD’)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自定义局部变量并赋值&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
- name: Define nginx_user.   &lt;br/&gt;set_fact:     &lt;br/&gt;nginx_user: &quot;{{ __nginx_user }}&quot;   &lt;br/&gt;when: nginx_user is not defined
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;支持从 sudo 执行命令:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
--- 
 -&lt;span&gt; hosts: webservers   
   remote_user: yourname   &lt;br/&gt;sudo: yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以登陆后,sudo 到不同的用户身份,而不是使用 root:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
---&lt;br/&gt;- hosts: webservers  &lt;br/&gt;remote_user: yourname  &lt;br/&gt;sudo: yes  &lt;br/&gt;sudo_user: postgres
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果需要在使用 sudo 时指定密码,可在运行 &lt;em&gt;ansible-playbook&lt;/em&gt; 命令时加上选项 --ask-sudo-pass (&lt;em&gt;-K&lt;/em&gt;). 如果使用 sudo 时,playbook 疑似被挂起,可能是在 sudo prompt 处被卡住,这时可执行 &lt;em&gt;Control-C&lt;/em&gt; 杀死卡住的任务,再重新运行一次.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;service moudle&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
tasks:   &lt;br/&gt;- name: make sure apache is running     &lt;br/&gt;service: name=httpd state=running
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;command&lt;/em&gt; 和 &lt;em&gt;shell&lt;/em&gt; ,它们不使用 key=value 格式的参数:[执行命令，linux命令]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
tasks:   &lt;br/&gt;- name: disable selinux     &lt;br/&gt;command: /sbin/setenforce 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;command module 和 shell module 时,需要关心返回码信息,如果有一条命令,它的成功执行的返回码不是0, 意思就是执行命令不成功，你可以通过下面例子进行忽略[忽略错误，跳过报错]：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
tasks:   &lt;br/&gt;- name: run &lt;span&gt;this&lt;/span&gt; command and ignore the result     &lt;br/&gt;shell: /usr/bin/somecommand || /bin/true&lt;br/&gt;或者：&lt;br/&gt;tasks:   &lt;br/&gt;- name: run this command and ignore the result     &lt;br/&gt;shell: /usr/bin/somecommand     &lt;br/&gt;ignore_errors: True
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;假设在 ‘vars’ 那里定义了一个变量 ‘vhost’ ,可以这样使用:{{}}  [使用参数方法]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
tasks:   &lt;br/&gt;- name: create a virtual host file &lt;span&gt;for&lt;/span&gt; {{ vhost }}     &lt;br/&gt;template: src=somefile.j2 dest=/etc/httpd/conf.d/{{ vhost }}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;‘notify’ 下列出的即是 handlers，比如当一个文件的内容被改动时,重启两个 services:[文件改变时执行]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
- name: template configuration file   &lt;br/&gt;template: src=template.j2 dest=/etc/foo.conf   &lt;br/&gt;notify:      &lt;br/&gt;- restart memcached      &lt;br/&gt;- restart apache
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Handlers 也是一些 task 的列表,通过名字来引用,它们和一般的 task 并没有什么区别.Handlers 是由通知者进行 notify, 如果没有被 notify,handlers 不会执行.不管有多少个通知者进行了 notify,等到 play 中的所有 task 执行完成之后,handlers 也只会被执行一次，handlers 例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 handlers:     &lt;br/&gt;- name: restart memcached       &lt;br/&gt;service:  name=memcached state=restarted     &lt;br/&gt;- name: restart apache       &lt;br/&gt;service: name=apache state=restarted&lt;br/&gt;- include: handlers/handlers.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;include指令&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一个 task include file foo.yml 由一个普通的 task 列表所组成，像这样:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;# possibly saved as tasks/foo.yml  &lt;br/&gt;- name: placeholder foo   &lt;br/&gt;command: /bin/foo  &lt;br/&gt;- name: placeholder bar   &lt;br/&gt;command: /bin/bar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Include 指令可以跟普通的 task 混合，所以呢，你可以这样使用(后面可以加参数):[include参数]&lt;/p&gt;
&lt;p&gt;tasks:   - include: tasks/foo.yml  wp_user=timmy&lt;/p&gt;
&lt;p&gt;如果Ansible 1.4 及以后的版本，include 语法可更为精简&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;tasks: 

   &lt;/span&gt;- { include: wordpress.yml, wp_user: timmy, ssh_keys: [ 'keys/one.txt', 'keys/two.txt' ] }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从 1.0 版开始，Ansible 支持另一种传递变量到 include files 的语法，这种语法支持结构化的变量:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;tasks:  

  &lt;/span&gt;-&lt;span&gt; include: wordpress.yml    

    vars:        

      wp_user: timmy        

      some_list_variable:          

           &lt;/span&gt;-&lt;span&gt; alpha          

           &lt;/span&gt;-&lt;span&gt; beta          

           &lt;/span&gt;- gamma
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Roles&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; Roles 基于一个已知的文件结构，去自动的加载某些 vars_files，tasks 以及 handlers。基于 roles 对内容进行分组&lt;/p&gt;
&lt;p&gt;roles目录结构如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
site.yml &lt;br/&gt;webservers.yml &lt;br/&gt;fooservers.yml &lt;br/&gt;roles/    &lt;br/&gt;common/      &lt;br/&gt;files/      &lt;br/&gt;templates/      &lt;br/&gt;tasks/      &lt;br/&gt;handlers/      &lt;br/&gt;vars/      &lt;br/&gt;defaults/      &lt;br/&gt;meta/    &lt;br/&gt;webservers/      &lt;br/&gt;files/      &lt;br/&gt;templates/      &lt;br/&gt;tasks/      &lt;br/&gt;handlers/      &lt;br/&gt;vars/      &lt;br/&gt;defaults/      &lt;br/&gt;meta/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;哥哥姐姐们可以这样使用roles&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;- hosts: webservers   &lt;br/&gt;roles:      &lt;br/&gt;- common      &lt;br/&gt;- webservers
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个 playbook 为一个角色 ‘x’ 指定了如下的行为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;l  如果 roles/x/tasks/main.yml 存在, 其中列出的 tasks 将被添加到 play 中&lt;/li&gt;
&lt;li&gt;l  如果 roles/x/handlers/main.yml 存在, 其中列出的 handlers 将被添加到 play 中&lt;/li&gt;
&lt;li&gt;l  如果 roles/x/vars/main.yml 存在, 其中列出的 variables 将被添加到 play 中&lt;/li&gt;
&lt;li&gt;l  如果 roles/x/meta/main.yml 存在, 其中列出的 “角色依赖” 将被添加到 roles 列表中 (1.3 and later)&lt;/li&gt;
&lt;li&gt;l  所有 copy tasks 可以引用 roles/x/files/ 中的文件，不需要指明文件的路径。&lt;/li&gt;
&lt;li&gt;l  所有 script tasks 可以引用 roles/x/files/ 中的脚本，不需要指明文件的路径。&lt;/li&gt;
&lt;li&gt;l  所有 template tasks 可以引用 roles/x/templates/ 中的文件，不需要指明文件的路径。&lt;/li&gt;
&lt;li&gt;l  所有 include tasks 可以引用 roles/x/tasks/ 中的文件，不需要指明文件的路径。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在 Ansible 1.4 及之后版本，你可以为”角色”的搜索设定 roles_path 配置项。使用这个配置项将所有的 common 角色 check out 到一个位置，以便在多个 playbook 项目中可方便的共享使用它们&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
roles_path = /opt/mysite/roles
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果 roles 目录下有文件不存在，这些文件将被忽略。比如 roles 目录下面缺少了 ‘vars/’ 目录，这也没关系。&lt;/p&gt;
&lt;p&gt;roles带参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;- hosts: webservers  &lt;br/&gt;roles:     &lt;br/&gt;- common     &lt;br/&gt;- { role: foo_app_instance, dir: '/opt/a',  port: 5000 }     &lt;br/&gt;- { role: foo_app_instance, dir: '/opt/b',  port: 5001 }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;roles带条件，when&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;- hosts: webservers   &lt;br/&gt;roles:     &lt;br/&gt;- { role: some_role, when: &quot;ansible_os_family == 'RedHat'&quot; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;roles分配tags&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;- hosts: webservers   &lt;br/&gt;roles:     &lt;br/&gt;- { role: foo, tags: [&quot;bar&quot;, &quot;baz&quot;] }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果 play 仍然包含有 ‘tasks’ section，这些 tasks 将在所有 roles 应用完成之后才被执行。&lt;/p&gt;
&lt;p&gt;如果你希望定义一些 tasks，让它们在 roles 之前以及之后执行，大佬你可以这样做:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;- hosts: webservers    &lt;br/&gt;pre_tasks:     &lt;br/&gt;- shell: echo 'hello'    &lt;br/&gt;roles:     &lt;br/&gt;- { role: some_role }    &lt;br/&gt;tasks:     &lt;br/&gt;- shell: echo 'still busy'    &lt;br/&gt;post_tasks:     &lt;br/&gt;- shell: echo 'goodbye'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;角色默认变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要创建默认变量，只需在 roles 目录下添加 &lt;em&gt;defaults/main.yml&lt;/em&gt; 文件。这些变量在所有可用变量中拥有最低优先级，可能被其他地方定义的变量(包括 inventory 中的变量)所覆盖。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;角色依赖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“角色依赖” 使你可以自动地将其他 roles 拉取到现在使用的 role 中。”角色依赖” 保存在 roles 目录下的 &lt;em&gt;meta/main.yml&lt;/em&gt; 文件中。这个文件应包含一列 roles 和 为之指定的参数，下面是在 &lt;em&gt;roles/myapp/meta/main.yml&lt;/em&gt; 文件中的示例:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;dependencies:   &lt;br/&gt;- { role: common, some_parameter: 3 }   &lt;br/&gt;- { role: apache, port: 80 }   &lt;br/&gt;- { role: postgres, dbname: blarg, other_parameter: 12 }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;“角色依赖” 也可以通过源码控制仓库或者 tar 文件指定，使用逗号分隔：路径、一个可选的版本（tag, commit, branch 等等）、一个可选友好角色名（尝试从源码仓库名或者归档文件名中派生出角色名）:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
--- dependencies:   &lt;br/&gt;- { role: 'git+http://git.example.com/repos/role-foo,v1.1,foo' }   &lt;br/&gt;- { role: '/path/to/tar/file.tgz,,friendly-name' }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;“角色依赖” 总是在 role （包含”角色依赖”的role）之前执行，并且是递归地执行。默认情况下，作为 “角色依赖” 被添加的 role 只能被添加一次，如果另一个 role 将一个相同的角色列为 “角色依赖” 的对象，它不会被重复执行。但这种默认的行为可被修改，通过添加 &lt;em&gt;allow_duplicates: yes&lt;/em&gt; 到&lt;em&gt;meta/main.yml&lt;/em&gt; 文件中。 比如，一个 role 名为 ‘car’，它可以添加名为 ‘wheel’ 的 role 到它的 “角色依赖” 中:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;dependencies: &lt;br/&gt;- { role: wheel, n: 1 } &lt;br/&gt;- { role: wheel, n: 2 } &lt;br/&gt;- { role: wheel, n: 3 } &lt;br/&gt;- { role: wheel, n: 4 }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;wheel 角色的 &lt;em&gt;meta/main.yml&lt;/em&gt; 文件包含如下内容:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;allow_duplicates: yes &lt;br/&gt;dependencies: &lt;br/&gt;- { role: tire } &lt;br/&gt;- { role: brake }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终的执行顺序是这样的:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
tire(n=1)&lt;br/&gt;brake(n=1)&lt;br/&gt;wheel(n=1)&lt;br/&gt;tire(n=2)&lt;br/&gt;brake(n=2)&lt;br/&gt;wheel(n=2)&lt;br/&gt;...&lt;br/&gt;car
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;YAML语法要求如果值以{{ foo }}开头的话我们需要将整行用双引号包起来.这是为了确认你不是想声明一个YAML字典&lt;/p&gt;
&lt;p&gt;这样是不行的:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
- hosts: app_servers   &lt;br/&gt;vars:       &lt;br/&gt;app_path: {{ base_path }}/22
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你应该这么做:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
- hosts: app_servers   &lt;br/&gt;vars:        &lt;br/&gt;app_path: &quot;{{ base_path }}/22&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Facts通过访问远程系统获取相应的信息. 一个例子就是远程主机的IP地址或者操作系统是什么. 使用以下命令可以查看哪些信息是可用的:[查看主机信息]&lt;/p&gt;
&lt;p&gt;如果你不需要使用你主机的任何fact数据,你已经知道了你系统的一切,那么你可以关闭fact数据的获取.这有利于增强Ansilbe面对大量系统的push模块,或者你在实验性平台中使用Ansible.在任何playbook中可以这样做:[关闭facts]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
- hosts: whatever   &lt;br/&gt;gather_facts: no
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取主机名 {{ ansible_nodename }}&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;ansible hostname -m setup   &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;命令输出如下：（哇这格式真的没法调，，米娜桑将就看，或者拷贝到notepad ，然后转成json）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &quot;ansible_all_ipv4_addresses&quot;: [     &quot;REDACTED IP ADDRESS&quot; ], &quot;ansible_all_ipv6_addresses&quot;: [     &quot;REDACTED IPV6 ADDRESS&quot; ], &quot;ansible_architecture&quot;: &quot;x86_64&quot;, &quot;ansible_bios_date&quot;: &quot;09/20/2012&quot;, &quot;ansible_bios_version&quot;: &quot;6.00&quot;, &quot;ansible_cmdline&quot;: {     &quot;BOOT_IMAGE&quot;: &quot;/boot/vmlinuz-3.5.0-23-generic&quot;,     &quot;quiet&quot;: true,     &quot;ro&quot;: true,     &quot;root&quot;: &quot;UUID=4195bff4-e157-4e41-8701-e93f0aec9e22&quot;,     &quot;splash&quot;: true }, &quot;ansible_date_time&quot;: {     &quot;date&quot;: &quot;2013-10-02&quot;,     &quot;day&quot;: &quot;02&quot;,     &quot;epoch&quot;: &quot;1380756810&quot;,     &quot;hour&quot;: &quot;19&quot;,     &quot;iso8601&quot;: &quot;2013-10-02T23:33:30Z&quot;,     &quot;iso8601_micro&quot;: &quot;2013-10-02T23:33:30.036070Z&quot;,     &quot;minute&quot;: &quot;33&quot;,     &quot;month&quot;: &quot;10&quot;,     &quot;second&quot;: &quot;30&quot;,     &quot;time&quot;: &quot;19:33:30&quot;,     &quot;tz&quot;: &quot;EDT&quot;,     &quot;year&quot;: &quot;2013&quot; }, &quot;ansible_default_ipv4&quot;: {     &quot;address&quot;: &quot;REDACTED&quot;,     &quot;alias&quot;: &quot;eth0&quot;,     &quot;gateway&quot;: &quot;REDACTED&quot;,     &quot;interface&quot;: &quot;eth0&quot;,     &quot;macaddress&quot;: &quot;REDACTED&quot;,     &quot;mtu&quot;: 1500,     &quot;netmask&quot;: &quot;255.255.255.0&quot;,     &quot;network&quot;: &quot;REDACTED&quot;,     &quot;type&quot;: &quot;ether&quot; }, &quot;ansible_default_ipv6&quot;: {}, &quot;ansible_devices&quot;: {     &quot;fd0&quot;: {         &quot;holders&quot;: [],         &quot;host&quot;: &quot;&quot;,         &quot;model&quot;: null,         &quot;partitions&quot;: {},         &quot;removable&quot;: &quot;1&quot;,         &quot;rotational&quot;: &quot;1&quot;,         &quot;scheduler_mode&quot;: &quot;deadline&quot;,         &quot;sectors&quot;: &quot;0&quot;,         &quot;sectorsize&quot;: &quot;512&quot;,         &quot;size&quot;: &quot;0.00 Bytes&quot;,         &quot;support_discard&quot;: &quot;0&quot;,         &quot;vendor&quot;: null     },     &quot;sda&quot;: {         &quot;holders&quot;: [],         &quot;host&quot;: &quot;SCSI storage controller: LSI Logic / Symbios Logic 53c1030 PCI-X Fusion-MPT Dual Ultra320 SCSI (rev 01)&quot;,         &quot;model&quot;: &quot;VMware Virtual S&quot;,         &quot;partitions&quot;: {             &quot;sda1&quot;: {                 &quot;sectors&quot;: &quot;39843840&quot;,                 &quot;sectorsize&quot;: 512,                 &quot;size&quot;: &quot;19.00 GB&quot;,                 &quot;start&quot;: &quot;2048&quot;             },             &quot;sda2&quot;: {                 &quot;sectors&quot;: &quot;2&quot;,                 &quot;sectorsize&quot;: 512,                 &quot;size&quot;: &quot;1.00 KB&quot;,                 &quot;start&quot;: &quot;39847934&quot;             },             &quot;sda5&quot;: {                 &quot;sectors&quot;: &quot;2093056&quot;,                 &quot;sectorsize&quot;: 512,                 &quot;size&quot;: &quot;1022.00 MB&quot;,                 &quot;start&quot;: &quot;39847936&quot;             }         },         &quot;removable&quot;: &quot;0&quot;,         &quot;rotational&quot;: &quot;1&quot;,         &quot;scheduler_mode&quot;: &quot;deadline&quot;,         &quot;sectors&quot;: &quot;41943040&quot;,         &quot;sectorsize&quot;: &quot;512&quot;,         &quot;size&quot;: &quot;20.00 GB&quot;,         &quot;support_discard&quot;: &quot;0&quot;,         &quot;vendor&quot;: &quot;VMware,&quot;     },     &quot;sr0&quot;: {         &quot;holders&quot;: [],         &quot;host&quot;: &quot;IDE interface: Intel Corporation 82371AB/EB/MB PIIX4 IDE (rev 01)&quot;,         &quot;model&quot;: &quot;VMware IDE CDR10&quot;,         &quot;partitions&quot;: {},         &quot;removable&quot;: &quot;1&quot;,         &quot;rotational&quot;: &quot;1&quot;,         &quot;scheduler_mode&quot;: &quot;deadline&quot;,         &quot;sectors&quot;: &quot;2097151&quot;,         &quot;sectorsize&quot;: &quot;512&quot;,         &quot;size&quot;: &quot;1024.00 MB&quot;,         &quot;support_discard&quot;: &quot;0&quot;,         &quot;vendor&quot;: &quot;NECVMWar&quot;     } }, &quot;ansible_distribution&quot;: &quot;Ubuntu&quot;, &quot;ansible_distribution_release&quot;: &quot;precise&quot;, &quot;ansible_distribution_version&quot;: &quot;12.04&quot;, &quot;ansible_domain&quot;: &quot;&quot;, &quot;ansible_env&quot;: {     &quot;COLORTERM&quot;: &quot;gnome-terminal&quot;,     &quot;DISPLAY&quot;: &quot;:0&quot;,     &quot;HOME&quot;: &quot;/home/mdehaan&quot;,     &quot;LANG&quot;: &quot;C&quot;,     &quot;LESSCLOSE&quot;: &quot;/usr/bin/lesspipe %s %s&quot;,     &quot;LESSOPEN&quot;: &quot;| /usr/bin/lesspipe %s&quot;,     &quot;LOGNAME&quot;: &quot;root&quot;,     &quot;LS_COLORS&quot;: &quot;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:&quot;,     &quot;MAIL&quot;: &quot;/var/mail/root&quot;,     &quot;OLDPWD&quot;: &quot;/root/ansible/docsite&quot;,     &quot;PATH&quot;: &quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,     &quot;PWD&quot;: &quot;/root/ansible&quot;,     &quot;SHELL&quot;: &quot;/bin/bash&quot;,     &quot;SHLVL&quot;: &quot;1&quot;,     &quot;SUDO_COMMAND&quot;: &quot;/bin/bash&quot;,     &quot;SUDO_GID&quot;: &quot;1000&quot;,     &quot;SUDO_UID&quot;: &quot;1000&quot;,     &quot;SUDO_USER&quot;: &quot;mdehaan&quot;,     &quot;TERM&quot;: &quot;xterm&quot;,     &quot;USER&quot;: &quot;root&quot;,     &quot;USERNAME&quot;: &quot;root&quot;,     &quot;XAUTHORITY&quot;: &quot;/home/mdehaan/.Xauthority&quot;,     &quot;_&quot;: &quot;/usr/local/bin/ansible&quot; }, &quot;ansible_eth0&quot;: {     &quot;active&quot;: true,     &quot;device&quot;: &quot;eth0&quot;,     &quot;ipv4&quot;: {         &quot;address&quot;: &quot;REDACTED&quot;,         &quot;netmask&quot;: &quot;255.255.255.0&quot;,         &quot;network&quot;: &quot;REDACTED&quot;     },     &quot;ipv6&quot;: [         {             &quot;address&quot;: &quot;REDACTED&quot;,             &quot;prefix&quot;: &quot;64&quot;,             &quot;scope&quot;: &quot;link&quot;         }     ],     &quot;macaddress&quot;: &quot;REDACTED&quot;,     &quot;module&quot;: &quot;e1000&quot;,     &quot;mtu&quot;: 1500,     &quot;type&quot;: &quot;ether&quot; }, &quot;ansible_form_factor&quot;: &quot;Other&quot;, &quot;ansible_fqdn&quot;: &quot;ubuntu2.example.com&quot;, &quot;ansible_hostname&quot;: &quot;ubuntu2&quot;, &quot;ansible_interfaces&quot;: [     &quot;lo&quot;,     &quot;eth0&quot; ], &quot;ansible_kernel&quot;: &quot;3.5.0-23-generic&quot;, &quot;ansible_lo&quot;: {     &quot;active&quot;: true,     &quot;device&quot;: &quot;lo&quot;,     &quot;ipv4&quot;: {         &quot;address&quot;: &quot;127.0.0.1&quot;,         &quot;netmask&quot;: &quot;255.0.0.0&quot;,         &quot;network&quot;: &quot;127.0.0.0&quot;     },     &quot;ipv6&quot;: [         {             &quot;address&quot;: &quot;::1&quot;,             &quot;prefix&quot;: &quot;128&quot;,             &quot;scope&quot;: &quot;host&quot;         }     ],     &quot;mtu&quot;: 16436,     &quot;type&quot;: &quot;loopback&quot; }, &quot;ansible_lsb&quot;: {     &quot;codename&quot;: &quot;precise&quot;,     &quot;description&quot;: &quot;Ubuntu 12.04.2 LTS&quot;,     &quot;id&quot;: &quot;Ubuntu&quot;,     &quot;major_release&quot;: &quot;12&quot;,     &quot;release&quot;: &quot;12.04&quot; }, &quot;ansible_machine&quot;: &quot;x86_64&quot;, &quot;ansible_memfree_mb&quot;: 74, &quot;ansible_memtotal_mb&quot;: 991, &quot;ansible_mounts&quot;: [     {         &quot;device&quot;: &quot;/dev/sda1&quot;,         &quot;fstype&quot;: &quot;ext4&quot;,         &quot;mount&quot;: &quot;/&quot;,         &quot;options&quot;: &quot;rw,errors=remount-ro&quot;,         &quot;size_available&quot;: 15032406016,         &quot;size_total&quot;: 20079898624     } ], &quot;ansible_nodename&quot;: &quot;ubuntu2.example.com&quot;, &quot;ansible_os_family&quot;: &quot;Debian&quot;, &quot;ansible_pkg_mgr&quot;: &quot;apt&quot;, &quot;ansible_processor&quot;: [     &quot;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&quot; ], &quot;ansible_processor_cores&quot;: 1, &quot;ansible_processor_count&quot;: 1, &quot;ansible_processor_threads_per_core&quot;: 1, &quot;ansible_processor_vcpus&quot;: 1, &quot;ansible_product_name&quot;: &quot;VMware Virtual Platform&quot;, &quot;ansible_product_serial&quot;: &quot;REDACTED&quot;, &quot;ansible_product_uuid&quot;: &quot;REDACTED&quot;, &quot;ansible_product_version&quot;: &quot;None&quot;, &quot;ansible_python_version&quot;: &quot;2.7.3&quot;, &quot;ansible_selinux&quot;: false, &quot;ansible_ssh_host_key_dsa_public&quot;: &quot;REDACTED KEY VALUE&quot; &quot;ansible_ssh_host_key_ecdsa_public&quot;: &quot;REDACTED KEY VALUE&quot; &quot;ansible_ssh_host_key_rsa_public&quot;: &quot;REDACTED KEY VALUE&quot; &quot;ansible_swapfree_mb&quot;: 665, &quot;ansible_swaptotal_mb&quot;: 1021, &quot;ansible_system&quot;: &quot;Linux&quot;, &quot;ansible_system_vendor&quot;: &quot;VMware, Inc.&quot;, &quot;ansible_user_id&quot;: &quot;root&quot;, &quot;ansible_userspace_architecture&quot;: &quot;x86_64&quot;, &quot;ansible_userspace_bits&quot;: &quot;64&quot;, &quot;ansible_virtualization_role&quot;: &quot;guest&quot;, &quot;ansible_virtualization_type&quot;: &quot;VMware&quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本地Facts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果远程受管理的机器有一个 “/etc/ansible/facts.d” 目录,那么在该目录中任何以 ”.fact”结尾的文件都可以在Ansible中提供局部facts.这些文件可以是JSON,INI或者任何可以返回JSON的可执行文件.&lt;/p&gt;
&lt;p&gt;例如建设有一个 /etc/ansible/facts.d/perferences.fact文件:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
[general]&lt;br/&gt;asdf=1&lt;br/&gt;bar=2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这将产生一个名为 “general” 的哈希表fact,里面成员有 ‘asdf’ 和 ‘bar’. 可以这样验证:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ansible &amp;lt;hostname&amp;gt; -m setup -a &quot;filter=ansible_local&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后你会看到有以下fact被添加:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&quot;ansible_local&quot;: {         &lt;br/&gt;&quot;preferences&quot;: {             &lt;br/&gt;&quot;general&quot;: {                 &lt;br/&gt;&quot;asdf&quot; : &quot;1&quot;,                &lt;br/&gt;&quot;bar&quot;  : &quot;2&quot;             }         }  }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而且也可以在template或palybook中访问该数据:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
{{ ansible_local.preferences.general.asdf }}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;本地命名空间放置其它用户提供的fact或者playbook中定义的变量覆盖系统facts值.&lt;/p&gt;
&lt;p&gt;如果你有个一个playook,它复制了一个自定义的fact,然后运行它,请显式调用来重新运行setup模块,这样可以让我们在该playbook中使用这些fact.否则,在下一个play中才能获取这些自定义的fact信息.这里有一个示例:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
- hosts: webservers   &lt;br/&gt;tasks:     &lt;br/&gt;- name: create directory &lt;span&gt;for&lt;/span&gt; ansible custom facts       &lt;br/&gt;file: state=directory recurse=yes path=/etc/ansible/facts.d     &lt;br/&gt;- name: install custom impi fact       &lt;br/&gt;copy: src=ipmi.fact dest=/etc/ansible/facts.d     &lt;br/&gt;- name: re-read facts after adding custom fact       &lt;br/&gt;setup: filter=ansible_local
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然而在该模式中你也可以编写一个fact模块,这只不过是多了一个选项.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact&lt;/strong&gt;&lt;strong&gt;缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从一个服务器引用另一个服务器的变量是可行的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
{{ hostvars['asdf.example.com']['ansible_os_family'] }}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注册变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; register&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre readability=&quot;5&quot;&gt;
- hosts: web_servers   &lt;br/&gt;tasks:      &lt;br/&gt;- shell: /usr/bin/foo        &lt;br/&gt;register: foo_result        &lt;br/&gt;ignore_errors: True       &lt;p&gt;- shell: /usr/bin/bar        &lt;br/&gt;when: foo_result.rc == 5
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;魔法变量,以及如何访问其它主机的信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ansible会自动提供给你一些变量,即使你并没有定义过它们.这些变量中重要的有 ‘hostvars’,’group_names’,和 ‘groups’.由于这些变量名是预留的,所以用户不应当覆盖它们. ‘environmen’ 也是预留的. hostvars可以让你访问其它主机的变量,包括哪些主机中获取到的facts.如果你还没有在当前playbook或者一组playbook的任何play中访问那个主机,那么你可以获取变量,但无法看到facts值. 如果数据库服务器想使用另一个节点的某个 ‘fact’ 值,或者赋值给该节点的一个inventory变量.可以在一个模板中甚至命令行中轻松实现:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
{{ hostvars['test.example.com']['ansible_distribution'] }}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外, &lt;em&gt;group_names&lt;/em&gt; 是当前主机所在所有群组的列表(数组).所以可以使用Jinja2语法在模板中根据该主机所在群组关系(或角色)来产生变化:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
{% &lt;span&gt;if&lt;/span&gt; 'webserver' &lt;span&gt;in&lt;/span&gt; group_names %}   &lt;br/&gt;　　 # some part of a configuration file that only applies to webservers &lt;br/&gt;{% endif %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;groups&lt;/em&gt; 是inventory中所有群组(主机)的列表.可用于枚举群组中的所有主机.例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
{% &lt;span&gt;for&lt;/span&gt; host &lt;span&gt;in&lt;/span&gt; groups['app_servers'] %}    &lt;br/&gt;　　# something that applies to all app servers. &lt;br/&gt;{% endfor %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个经常使用的范式是找出该群组中的所有IP地址:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
{% &lt;span&gt;for&lt;/span&gt; host &lt;span&gt;in&lt;/span&gt; groups['app_servers'] %}   &lt;br/&gt;　　 {{ hostvars[host]['ansible_eth0']['ipv4']['address'] }}&lt;br/&gt;{% endfor %}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;外部的变量文件:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre readability=&quot;5&quot;&gt;
--- &lt;br/&gt;- hosts: all   &lt;br/&gt;remote_user: root   &lt;br/&gt;vars:    &lt;br/&gt;favcolor: blue  &lt;br/&gt;vars_files:     &lt;br/&gt;- /vars/external_vars.yml    &lt;p&gt;tasks:   &lt;br/&gt;- name: &lt;span&gt;this&lt;/span&gt; is just a placeholder    &lt;br/&gt;command: /bin/echo foo
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这可以保证你共享playbook源码时隔离敏感数据的风险.&lt;/p&gt;
&lt;p&gt;每个变量文件的内容是一个简单的YAML文件,如下所示:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;# &lt;span&gt;in&lt;/span&gt; the above example, &lt;span&gt;this&lt;/span&gt; would be vars/external_vars.yml&lt;br/&gt;somevar: somevalue &lt;br/&gt;password: magic
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;变量的优先级，变量优先级&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre readability=&quot;13&quot;&gt;
* extra vars (-e &lt;span&gt;in&lt;/span&gt; the command line) always win &lt;br/&gt;* then comes connection variables defined &lt;span&gt;in&lt;/span&gt; inventory (ansible_ssh_user, etc) &lt;br/&gt;* then comes &quot;most everything else&quot; (command line switches, vars &lt;span&gt;in&lt;/span&gt; play, included vars, role vars, etc) &lt;br/&gt;* then comes the rest of the variables defined &lt;span&gt;in&lt;/span&gt; inventory &lt;br/&gt;* then comes facts discovered about a system * then &quot;role defaults&quot;, which are the most &quot;defaulty&quot; and lose &lt;span&gt;in&lt;/span&gt; priority to everything.  &lt;p&gt;* extra vars (在命令行中使用 -e)优先级最高 &lt;br/&gt;* 然后是在inventory中定义的连接变量(比如ansible_ssh_user) &lt;br/&gt;* 接着是大多数的其它变量(命令行转换,play中的变量,included的变量,role中的变量等) &lt;br/&gt;* 然后是在inventory定义的其它变量 &lt;br/&gt;* 然后是由系统发现的facts &lt;br/&gt;* 然后是 &quot;role默认变量&quot;, 这个是最默认的值,很容易丧失优先权
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;when&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
- include: tasks/sometasks.yml   &lt;br/&gt;when: &quot;'reticulating splines' in output&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者应用于role:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
- hosts: webservers   &lt;br/&gt;roles:      &lt;br/&gt;- { role: debian_stock_config, when: ansible_os_family == 'Debian' }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.ansible.com.cn/docs/playbooks_conditionals.html#id11&quot;&gt;基于变量选择文件和模版&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ansible.com.cn/docs/playbooks_loops.html#id18&quot;&gt;&lt;strong&gt;循环&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
- name: add several users   &lt;br/&gt;user: name={{ item }} state=present groups=wheel   &lt;br/&gt;with_items:      &lt;br/&gt;- testuser1      &lt;br/&gt;- testuser2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
with_items: &quot;{{somelist}}&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
- name: add several users   &lt;br/&gt;user: name={{ item.name }} state=present groups={{ item.groups }}   &lt;br/&gt;with_items:     &lt;br/&gt;- { name: 'testuser1', groups: 'wheel' }     &lt;br/&gt;- { name: 'testuser2', groups: 'root' }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ansible.com.cn/docs/playbooks_loops.html#id19&quot;&gt;&lt;strong&gt;嵌套循环&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
- name: give users access to multiple databases   &lt;br/&gt;mysql_user: name={{ item[0] }} priv={{ item[1] }}.*:ALL append_privs=yes password=foo   &lt;br/&gt;with_nested:     &lt;br/&gt;- [ 'alice', 'bob' ]     &lt;br/&gt;- [ 'clientdb', 'employeedb', 'providerdb' ]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;对哈希表使用循环&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;New in version 1.5.&lt;/p&gt;
&lt;p&gt;假如你有以下变量:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
--- users:   &lt;br/&gt;alice:     &lt;br/&gt;name: Alice Appleworth     &lt;br/&gt;telephone: 123-456-7890   &lt;br/&gt;bob:    &lt;br/&gt;name: Bob Bananarama     &lt;br/&gt;telephone: 987-654-3210
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你想打印出每个用户的名称和电话号码.你可以使用 with_dict 来循环哈希表中的元素:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
tasks:  &lt;br/&gt;- name: Print phone records     &lt;br/&gt;debug: msg=&quot;User {{ item.key }} is {{ item.value.name }} ({{ item.value.telephone }})&quot;     &lt;br/&gt;with_dict: &quot;{{users}}&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;对文件列表使用循环&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;with_fileglob 可以以非递归的方式来模式匹配单个目录中的文件.如下面所示:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;- hosts: all   &lt;br/&gt;tasks:      &lt;br/&gt;# first ensure our target directory exists     &lt;br/&gt;- file: dest=/etc/fooapp state=directory      &lt;br/&gt;# copy each file over that matches the given pattern     &lt;br/&gt;- copy: src={{ item }} dest=/etc/fooapp/ owner=root mode=600       &lt;br/&gt;with_fileglob:         &lt;br/&gt;- /playbooks/files/fooapp/*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;对子元素使用循环&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设你想对一组用户做一些动作,比如创建这些用户,并且允许它们使用一组SSH key来登录.&lt;/p&gt;
&lt;p&gt;如何实现那? 先假设你有按以下方式定义的数据,可以通过”vars_files”或”group_vars/all”文件加载:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
--- users:   &lt;br/&gt;- name: alice     &lt;br/&gt;authorized:       &lt;br/&gt;- /tmp/alice/onekey.pub      &lt;br/&gt;- /tmp/alice/twokey.pub     &lt;br/&gt;mysql:         &lt;br/&gt;password: mysql-password         &lt;br/&gt;hosts:           &lt;br/&gt;- &quot;%&quot;           &lt;br/&gt;- &quot;127.0.0.1&quot;&lt;br/&gt;- &quot;::1&quot;       &lt;br/&gt;- &quot;localhost&quot;         &lt;br/&gt;privs:           &lt;br/&gt;- &quot;*.*:SELECT&quot;     &lt;br/&gt;- &quot;DB1.*:ALL&quot; &lt;br/&gt;- name: bob     &lt;br/&gt;authorized:       &lt;br/&gt;- /tmp/bob/id_rsa.pub     &lt;br/&gt;mysql:         &lt;br/&gt;password: other-mysql-password         &lt;br/&gt;hosts:    &lt;br/&gt;- &quot;db1&quot;    &lt;br/&gt;privs:       &lt;br/&gt;- &quot;*.*:SELECT&quot;     &lt;br/&gt;- &quot;DB2.*:ALL&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么可以这样实现:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre readability=&quot;7&quot;&gt;
- user: name={{ item.name }} state=present generate_ssh_key=yes   &lt;br/&gt;with_items: &quot;{{users}}&quot;  &lt;p&gt;- authorized_key: &quot;user={{ item.0.name }} key='{{ lookup('file', item.1) }}'&quot;   &lt;br/&gt;with_subelements:      &lt;br/&gt;- users      &lt;br/&gt;- authorized
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据mysql hosts以及预先给定的privs subkey列表,我们也可以在嵌套的subkey中迭代列表:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
- name: Setup MySQL users   &lt;br/&gt;mysql_user: name={{ item.0.user }} password={{ item.0.mysql.password }} host={{ item.1 }} priv={{ item.0.mysql.privs | join('/') }}   &lt;br/&gt;with_subelements:     &lt;br/&gt;- users     &lt;br/&gt;-&lt;span&gt; mysql.hosts

Subelements walks a list of hashes (aka dictionaries) and then traverses a list &lt;/span&gt;&lt;span&gt;with&lt;/span&gt; a given key inside of those records.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你也可以为字元素列表添加第三个元素,该元素可以放置标志位字典.现在你可以加入’skip_missing’标志位.如果设置为True,那么查找插件会跳过不包含指定子键的列表条目.如果没有该标志位,或者标志位值为False,插件会产生错误并指出缺少该子键.&lt;/p&gt;
&lt;p&gt;这就是authorized_key模式中key的获取方式.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对整数序列使用循环&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;with_sequence 可以以升序数字顺序生成一组序列.你可以指定起始值、终止值,以及一个可选的步长值.&lt;/p&gt;
&lt;p&gt;指定参数时也可以使用key=value这种键值对的方式.如果采用这种方式,’format’是一个可打印的字符串.&lt;/p&gt;
&lt;p&gt;数字值可以被指定为10进制,16进制(0x3f8)或者八进制(0600).负数则不受支持.请看以下示例:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;- hosts: all    &lt;br/&gt;tasks:      # create groups     &lt;br/&gt;- group: name=evens state=present    &lt;br/&gt;- group: name=odds state=present     &lt;br/&gt;# create some test users     &lt;br/&gt;- user: name={{ item }} state=present groups=evens      &lt;br/&gt;with_sequence: start=0 end=32 format=testuser%02x      &lt;br/&gt;# create a series of directories &lt;span&gt;with&lt;/span&gt; even numbers &lt;span&gt;for&lt;/span&gt; some reason     &lt;br/&gt;-file: dest=/var/stuff/{{ item }} state=directory       &lt;br/&gt;with_sequence: start=4 end=16 stride=2      &lt;br/&gt;# a simpler way to use the sequence plugin     &lt;br/&gt;# create 4 groups     &lt;br/&gt;- group: name=group{{ item }} state=present       &lt;br/&gt;with_sequence: count=4
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;随机选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;‘random_choice’功能可以用来随机获取一些值.它并不是负载均衡器(已经有相关的模块了).它有时可以用作一个简化版的负载均衡器,比如作为条件判断:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
- debug: msg={{ item }}   &lt;br/&gt;with_random_choice:      &lt;br/&gt;- &quot;go through the door&quot;      &lt;br/&gt;- &quot;drink from the goblet&quot;      &lt;br/&gt;- &quot;press the red button&quot;      &lt;br/&gt;- &quot;do nothing&quot; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ansible.com.cn/docs/playbooks_loops.html#id26&quot;&gt;&lt;strong&gt;Do-Until&lt;/strong&gt;&lt;strong&gt;循环&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有时你想重试一个任务直到达到某个条件.比如下面这个例子:[重复执行]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
- action: shell /usr/bin/foo   &lt;br/&gt;register: result   &lt;br/&gt;until: result.stdout.find(&quot;all systems go&quot;) != -1   &lt;br/&gt;retries: 5   &lt;br/&gt;delay: 10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的例子递归运行shell模块,直到模块结果中的stdout输出中包含”all systems go”字符串,或者该任务按照10秒的延迟重试超过5次.”retries”和”delay”的默认值分别是3和5.&lt;/p&gt;
&lt;p&gt;该任务返回最后一个任务返回的结果.单次重试的结果可以使用-vv选项来查看. 被注册的变量会有一个新的属性’attempts’,值为该任务重试的次数.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;查找第一个匹配的文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这其实不是一个循环,但和循环很相似.如果你想引用一个文件,而该文件是从一组文件中根据给定条件匹配出来的.这组文件中部分文件名由变量拼接而成.针对该场景你可以这样做:[动态文件名]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
- name: INTERFACES | Create Ansible header &lt;span&gt;for&lt;/span&gt; /etc/network/interfaces   &lt;br/&gt;template: src={{ item }} dest=/etc/foo.conf   &lt;br/&gt;with_first_found:    &lt;br/&gt;- &quot;{{ansible_virtualization_type}}_foo.conf&quot;    &lt;br/&gt;- &quot;default_foo.conf&quot;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;该功能还有一个更完整的版本,可以配置搜索路径.请看以下示例:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
- name: some configuration template   &lt;br/&gt;template: src={{ item }} dest=/etc/file.cfg mode=0444 owner=root group=root   &lt;br/&gt;with_first_found:     &lt;br/&gt;- files:        &lt;br/&gt;- &quot;{{inventory_hostname}}/etc/file.cfg&quot;      &lt;br/&gt;paths:        &lt;br/&gt;- ../../../templates.overwrites        &lt;br/&gt;- ../../../templates    &lt;br/&gt;- files:        &lt;br/&gt;- etc/file.cfg       &lt;br/&gt;paths:         &lt;br/&gt;- templates
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;异步操作和轮询&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认情况下playbook中的任务执行时会一直保持连接,直到该任务在每个节点都执行完毕.有时这是不必要的,比如有些操作运行时间比SSH超时时间还要长.&lt;/p&gt;
&lt;p&gt;解决该问题最简单的方式是一起执行它们,然后轮询直到任务执行完毕，简单的意思就是，像下面的例子，执行任务后，ansible就不等它了，往下执行下一个任务，然后每隔5秒钟去看看它执行完成没，超时时间为45秒，async参数值代表了这个任务执行时间的上限值。即任务执行所用时间如果超出这个时间，则认为任务失败。此参数若未设置，则为同步执行。&lt;/p&gt;
&lt;p&gt;你也可以对执行时间非常长（有可能遭遇超时）的操作使用异步模式.&lt;/p&gt;
&lt;p&gt;为了异步启动一个任务,可以指定其最大超时时间以及轮询其状态的频率.如果你没有为 &lt;em&gt;poll&lt;/em&gt; 指定值,那么默认的轮询频率是10秒钟:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;
&lt;pre readability=&quot;8&quot;&gt;
--- &lt;br/&gt;- hosts: all   &lt;br/&gt;remote_user: root   &lt;br/&gt;tasks:    &lt;p&gt;- name: simulate &lt;span&gt;long&lt;/span&gt; running op (15 sec), wait &lt;span&gt;for&lt;/span&gt; up to 45 sec, poll every 5 sec     &lt;br/&gt;command: /bin/sleep 15     &lt;br/&gt;async: 45     &lt;br/&gt;poll: 5
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;async&lt;/em&gt; 并没有默认值,如果你没有指定 &lt;em&gt;async&lt;/em&gt; 关键字,那么任务会以同步的方式运行,这是Ansible的默认行为.&lt;/p&gt;

&lt;p&gt;另外,如果你不需要等待任务执行完毕,你可以指定 &lt;em&gt;poll&lt;/em&gt; 值为0而启用 “启动并忽略”&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
---  &lt;br/&gt;- hosts: all   &lt;br/&gt;remote_user: root   &lt;br/&gt;tasks:    &lt;br/&gt;- name: simulate &lt;span&gt;long&lt;/span&gt; running op, allow to run &lt;span&gt;for&lt;/span&gt; 45 sec, fire and forget     &lt;br/&gt;command: /bin/sleep 15     &lt;br/&gt;async: 45     &lt;br/&gt;poll: 0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;改为”启动并忽略,稍后再检查”,你可以使用以下方式执行任务:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;# Requires ansible 1.8+ &lt;br/&gt;- name: 'YUM - fire and forget task'   &lt;br/&gt;yum: name=docker-io state=installed   &lt;br/&gt;async: 1000   &lt;br/&gt;poll: 0   &lt;br/&gt;register: yum_sleeper  &lt;br/&gt;- name: 'YUM - check on fire and forget task'   &lt;br/&gt;async_status: jid={{ yum_sleeper.ansible_job_id }}   &lt;br/&gt;register: job_result   &lt;br/&gt;until: job_result.finished   &lt;br/&gt;retries: 30
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果 async: 值太小,可能会导致 “稍后检查” 任务执行失败,因为 async_status:: 的临时状态文件还未被写入信息,而”稍后检查”任务就试图读取此文件.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;delegate_to  选中主机执行&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
  - name: add back to load balancer pool     &lt;br/&gt;command: /usr/bin/add_back_to_pool {{ inventory_hostname }}     &lt;br/&gt;delegate_to: 127.0.0.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本地执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;# ...   &lt;br/&gt;tasks:    &lt;br/&gt;- name: recursively copy files from management server to target     &lt;br/&gt;local_action: command rsync -a /path/to/files {{ inventory_hostname }}:/path/to/target/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Run Once&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;New in version 1.7.&lt;/p&gt;
&lt;p&gt;有时候你有这样的需求,在一个主机上面只执行一次一个任务.这样的配置可以配置”run_once”来实现:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
--- &lt;br/&gt;# ...    &lt;br/&gt;tasks:      &lt;br/&gt;# ...     &lt;br/&gt;- command: /opt/application/upgrade_db.py      &lt;br/&gt;run_once: true      # ...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样可以添加在”delegat_to”选项对中来定义要执行的主机:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
- command: /opt/application/upgrade_db.py   &lt;br/&gt;run_once: true   &lt;br/&gt;delegate_to: web01.example.org
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当”run_once” 没有喝”delegate_to”一起使用,这个任务将会被清单指定的第一个主机. 在一组被play制定主机.例如 webservers[0], 如果play指定为 “hosts: webservers”.&lt;/p&gt;
&lt;p&gt;这个方法也很类似,虽然比使用条件更加简单粗暴,如下事例:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
- command: /opt/application/upgrade_db.py   &lt;br/&gt;when: inventory_hostname == webservers[0]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;本地Playbooks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在本地使用playbook有时候比ssh远程使用更加有用.可以通过把playbook放在crontab中,来确保一个系统的配置,可以很有用. 在OS installer 中运行一个playbook也很有用.例如Anaconda kickstart.&lt;/p&gt;
&lt;p&gt;要想在本地运行一个play,可以直接设置”host:” 与 “hosts:127.0.0.1”, 然后使用下面的命令运行:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ansible-playbook playbook.yml --connection=local
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者,一个本地连接也可以作为一个单独的playbook play应用在playbook中, 即便playbook中其他的plays使用默认远程 连接如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
- hosts: 127.0.0.1   &lt;br/&gt;connection: local
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;environment  使用代理上网&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
- hosts: all   &lt;br/&gt;remote_user: root    &lt;br/&gt;tasks:      &lt;br/&gt;- apt: name=cobbler state=installed       &lt;br/&gt;environment:         &lt;br/&gt;http_proxy: http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;proxy.example.com:8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;environment 也可以被存储在变量中,像如下方式访问:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
- hosts: all   &lt;br/&gt;remote_user: root   &lt;br/&gt;# here we make a variable named &quot;proxy_env&quot; that is a dictionary   &lt;br/&gt;vars:     &lt;br/&gt;proxy_env:       &lt;br/&gt;http_proxy: http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;proxy.example.com:8080    &lt;br/&gt;tasks:      &lt;br/&gt;- apt: name=cobbler state=installed       &lt;br/&gt;environment: proxy_env&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;指定错误条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[判定错误]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
- name: &lt;span&gt;this&lt;/span&gt; command prints FAILED when it fails   &lt;br/&gt;command: /usr/bin/example-command -x -y -z   &lt;br/&gt;register: command_result   &lt;br/&gt;failed_when: &quot;'FAILED' in command_result.stderr&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Ansible 1.4 之前的版本能通过如下方式完成:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;
&lt;pre readability=&quot;6&quot;&gt;
- name: &lt;span&gt;this&lt;/span&gt; command prints FAILED when it fails   &lt;br/&gt;command: /usr/bin/example-command -x -y -z   &lt;br/&gt;register: command_result   ignore_errors: True  &lt;p&gt;- name: fail the play if the previous command did not succeed   &lt;br/&gt;fail: msg=&quot;the command failed&quot;   &lt;br/&gt;when: &quot;'FAILED' in command_result.stderr
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;不输出结果，不报告状态，覆写结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre readability=&quot;5&quot;&gt;
tasks:   &lt;br/&gt;- shell: /usr/bin/billybass --mode=&quot;take me to the river&quot;     &lt;br/&gt;register: bass_result     &lt;br/&gt;changed_when: &quot;bass_result.rc != 2&quot;    &lt;p&gt;# this will never report 'changed' status  &lt;br/&gt;- shell: wall 'beep'     &lt;br/&gt;changed_when: False
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;标签tags&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你有一个大型的 playbook,那能够只运行其中特定部分的配置而无需运行整个 playbook 将会很有用.&lt;/p&gt;
&lt;p&gt;plays 和 tasks 都因这个理由而支持 “tags:”&lt;/p&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
tasks:      &lt;br/&gt;- yum: name={{ item }} state=installed      &lt;br/&gt;with_items:         &lt;br/&gt;- httpd         &lt;br/&gt;- memcached     &lt;br/&gt;tags:       &lt;br/&gt;- packages &lt;br/&gt;- template: src=templates/src.j2 dest=/etc/foo.conf       &lt;br/&gt;tags:          &lt;br/&gt;- configuration
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你只想运行一个非常大的 playbook 中的 “configuration” 和 “packages”,你可以这样做:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ansible-playbook example.yml --tags &quot;configuration,packages&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另一方面,如果你只想执行 playbook 中某个特定任务 &lt;em&gt;之外&lt;/em&gt; 的所有任务,你可以这样做:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ansible-playbook example.yml --skip-tags &quot;notification&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你同样也可以对 roles 应用 tags:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
roles:   &lt;br/&gt;- { role: webserver, port: 5000, tags: [ 'web', 'foo' ] }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你同样也可以对基本的 include 语句使用 tag:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
- include: foo.yml tags=web,foo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;从指定任务开始运行palybook以及分步运行playbook&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下列出了几种方式来运行playbook.这对于测试或调试新的playbook很有帮助.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Start-at-task&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你想从指定的任务开始执行playbook,可以使用``–start-at``选项:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ansible-playbook playbook.yml --start-at=&quot;install packages&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上命令就会在名为”install packages”的任务开始执行你的playbook.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分步运行playbook&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们也可以通过``–step``选项来交互式的执行playbook:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ansible-playbook playbook.yml --step
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样ansible在每个任务前会自动停止,并询问是否应该执行该任务.&lt;/p&gt;
&lt;p&gt;比如你有个名为``configure ssh``的任务,playbook执行到这里会停止并询问:&lt;/p&gt;
&lt;p&gt;Perform task: configure ssh (y/n/c):&lt;/p&gt;
&lt;p&gt;“y”回答会执行该任务,”n”回答会跳过该任务,而”c”回答则会继续执行剩余的所有任务而不再询问你.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;python ansible api调用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;90&quot;&gt;
&lt;pre&gt;
#!/usr/bin/env python2
&lt;span&gt;
import sys
import json
import shutil
import pprint
from collections import namedtuple
from ansible.parsing.dataloader import DataLoader
from ansible.vars.manager import VariableManager
from ansible.inventory.manager import InventoryManager
from ansible.playbook.play import Play
from ansible.executor.task_queue_manager import TaskQueueManager
from ansible.plugins.callback import CallbackBase
import ansible.constants as C
from ansible.inventory.group import Group
from ansible.inventory.host import Host
def get_info(username,password,resource):
    class ResultCallback(CallbackBase):
        def __init__(self, &lt;/span&gt;*args, **&lt;span&gt;kwargs):
            self.info &lt;/span&gt;=&lt;span&gt; {}
        def v2_runner_on_ok(self, result, &lt;/span&gt;**&lt;span&gt;kwargs):
            host &lt;/span&gt;=&lt;span&gt; result._host
            self.info[host.name] &lt;/span&gt;=&lt;span&gt; result._result

    Options &lt;/span&gt;= namedtuple('Options', ['connection', 'module_path', 'forks', 'become', 'become_method', 'become_user', 'check', 'diff'&lt;span&gt;])
    options &lt;/span&gt;= Options(connection='local', module_path=['/to/mymodules'], forks=10, become=None, become_method=None, become_user=None, check=False, diff=&lt;span&gt;False)
    loader &lt;/span&gt;=&lt;span&gt; DataLoader()
    results_callback &lt;/span&gt;=&lt;span&gt; ResultCallback()
    #inventory &lt;/span&gt;= InventoryManager(loader=loader, sources=&lt;span&gt;[tempFileName])
    inventory &lt;/span&gt;= InventoryManager(loader=&lt;span&gt;loader)
    inventory.add_group(&lt;/span&gt;&quot;default&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; host &lt;span&gt;in&lt;/span&gt;&lt;span&gt; resource:
        inventory.add_host(host&lt;/span&gt;=host,port=22,group='default'&lt;span&gt;)
    variable_manager &lt;/span&gt;= VariableManager(loader=loader, inventory=&lt;span&gt;inventory)

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; host &lt;span&gt;in&lt;/span&gt;&lt;span&gt; resource:        
        host &lt;/span&gt;= inventory.get_host(hostname=&lt;span&gt;host)
        variable_manager.set_host_variable(host&lt;/span&gt;=host,varname='ansible_ssh_host',value=&lt;span&gt;host)
        variable_manager.set_host_variable(host&lt;/span&gt;=host,varname='ansible_ssh_user',value=&lt;span&gt;username)
        variable_manager.set_host_variable(host&lt;/span&gt;=host,varname='ansible_ssh_pass',value=&lt;span&gt;password)
        variable_manager.set_host_variable(host&lt;/span&gt;=host,varname='ansible_connection',value='local'&lt;span&gt;)
    play_source &lt;/span&gt;=&lt;span&gt;  dict(
        name &lt;/span&gt;= &quot;Ansible Play&quot;&lt;span&gt;,
        hosts &lt;/span&gt;=&lt;span&gt; resource,
        gather_facts &lt;/span&gt;= 'no'&lt;span&gt;,
        tasks &lt;/span&gt;=&lt;span&gt; [
            dict(action&lt;/span&gt;=dict(module='setup', args=''&lt;span&gt;))
         ]
        )
    play &lt;/span&gt;= Play().load(play_source, variable_manager=variable_manager, loader=&lt;span&gt;loader)
    tqm &lt;/span&gt;=&lt;span&gt; None
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
        tqm &lt;/span&gt;=&lt;span&gt; TaskQueueManager(
              inventory&lt;/span&gt;=&lt;span&gt;inventory,
              variable_manager&lt;/span&gt;=&lt;span&gt;variable_manager,
              loader&lt;/span&gt;=&lt;span&gt;loader,
              options&lt;/span&gt;=&lt;span&gt;options,
              passwords&lt;/span&gt;=&lt;span&gt;None,
              stdout_callback&lt;/span&gt;=&lt;span&gt;results_callback,
          )
        result &lt;/span&gt;=&lt;span&gt; tqm.run(play)
    &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; tqm is not None:
        tqm.cleanup()
        shutil.rmtree(C.DEFAULT_LOCAL_TMP, True)

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; results_callback.info

def handle_info(rawdata, node):
    # data dictionary
    data &lt;/span&gt;=&lt;span&gt; {}
    detail &lt;/span&gt;=&lt;span&gt; {}

    # read sysinfo
    cpu_count &lt;/span&gt;= rawdata[node]['ansible_facts']['ansible_processor_count'&lt;span&gt;]
    cpu_cores &lt;/span&gt;= rawdata[node]['ansible_facts']['ansible_processor_cores'&lt;span&gt;]
    cpu_model &lt;/span&gt;= list(set(rawdata[node]['ansible_facts']['ansible_processor'][2::3&lt;span&gt;]))
    cpu_vcpus &lt;/span&gt;= rawdata[node]['ansible_facts']['ansible_processor_vcpus'&lt;span&gt;]
    # memtotal &lt;/span&gt;= rawdata[node]['ansible_facts']['ansible_memtotal_mb'&lt;span&gt;]
    # memfree &lt;/span&gt;= rawdata[node]['ansible_facts']['ansible_memfree_mb'&lt;span&gt;]
    memory &lt;/span&gt;= rawdata[node]['ansible_facts']['ansible_memory_mb']['real'&lt;span&gt;]
    disk_info &lt;/span&gt;= rawdata[node]['ansible_facts']['ansible_devices'&lt;span&gt;]
    interfaces_info &lt;/span&gt;= rawdata[node]['ansible_facts']['ansible_interfaces'&lt;span&gt;]
    
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(len(interfaces_info)):
        tmp &lt;/span&gt;= &quot;ansible_&quot; + interfaces_info[i].replace(&quot;-&quot;, &quot;_&quot;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; rawdata[node]['ansible_facts'][tmp].has_key('type'&lt;span&gt;):
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; rawdata[node]['ansible_facts'][tmp]['type'] == &quot;bridge&quot;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;
        detail[interfaces_info[i]] &lt;/span&gt;=&lt;span&gt; {}
        detail[interfaces_info[i]][&lt;/span&gt;'active'] = rawdata[node]['ansible_facts'][tmp]['active'&lt;span&gt;]
        detail[interfaces_info[i]][&lt;/span&gt;'mtu'] = rawdata[node]['ansible_facts'][tmp]['mtu'&lt;span&gt;]
        detail[interfaces_info[i]][&lt;/span&gt;'promisc'] = rawdata[node]['ansible_facts'][tmp]['promisc'&lt;span&gt;]
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; rawdata[node]['ansible_facts'][tmp].has_key('speed'&lt;span&gt;):
            detail[interfaces_info[i]][&lt;/span&gt;'speed'] = rawdata[node]['ansible_facts'][tmp]['speed'&lt;span&gt;]
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; rawdata[node]['ansible_facts'][tmp].has_key('type'&lt;span&gt;):
            detail[interfaces_info[i]][&lt;/span&gt;'type'] = rawdata[node]['ansible_facts'][tmp]['type'&lt;span&gt;]
        

    # store sysinfo into data dictionary
    
    
    cpu &lt;/span&gt;=&lt;span&gt; {}
    cpu[&lt;/span&gt;'cpu_number'] =&lt;span&gt; cpu_count
    cpu[&lt;/span&gt;'cpu_cores'] =&lt;span&gt; cpu_cores
    cpu[&lt;/span&gt;'cpu_model'] =&lt;span&gt; cpu_model
    cpu[&lt;/span&gt;'cpu_vcpus'] =&lt;span&gt; cpu_vcpus
    data[&lt;/span&gt;'cpu'] =&lt;span&gt; cpu
    data[&lt;/span&gt;'memory'] =&lt;span&gt; memory
    
    disk &lt;/span&gt;=&lt;span&gt; {}
    disk[&lt;/span&gt;'number'] =&lt;span&gt; len(disk_info)
    disk[&lt;/span&gt;'info'] =&lt;span&gt; {}
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; disk_info:
        disk[&lt;/span&gt;'info'][key] =&lt;span&gt; {}
        disk[&lt;/span&gt;'info'][key]['size'] = disk_info[key]['size'&lt;span&gt;]
    data[&lt;/span&gt;'disk'] =&lt;span&gt; disk
    
    interfaces &lt;/span&gt;=&lt;span&gt; {}
    interfaces[&lt;/span&gt;'number'] =&lt;span&gt; len(interfaces_info)
    interfaces[&lt;/span&gt;'info'] =&lt;span&gt; detail
    data[&lt;/span&gt;'interfaces'] =&lt;span&gt; interfaces

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; data

def handle_infos(rawdata):
    info &lt;/span&gt;=&lt;span&gt; []
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; rawdata:
        temp &lt;/span&gt;=&lt;span&gt; {}
        temp[&lt;/span&gt;'IP_ADDR'] =&lt;span&gt; key
        temp[&lt;/span&gt;'OBJ_ATTRS'] =&lt;span&gt; handle_info(rawdata, key)
        info.append(temp)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; info

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; __name__ == '__main__'&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; len(sys.argv) != 4&lt;span&gt;:
        print &lt;/span&gt;&quot;need parameter:username,password,list of hosts(split with ',')!!!&quot;&lt;span&gt;
        sys.exit()
    hosts&lt;/span&gt;=sys.argv[3].split(&quot;,&quot;&lt;span&gt;)
    raw_data &lt;/span&gt;= get_info(sys.argv[1],sys.argv[2&lt;span&gt;],hosts)
    data &lt;/span&gt;=&lt;span&gt; handle_infos(raw_data)
    data &lt;/span&gt;=&lt;span&gt; json.dumps(data)
    pprint.pprint(data)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;早点睡,晚安(￣o￣) . z Z&lt;/p&gt;

</description>
<pubDate>Mon, 22 Apr 2019 15:32:00 +0000</pubDate>
<dc:creator>魏俊峰</dc:creator>
<og:description>内容比较杂多,不太会调格式，你自己ctrl F 方便查找哈 执行playbook命令 ansible­playbook -­i &quot;inventory文件名&amp;qu</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aaaaaaa/p/10753860.html</dc:identifier>
</item>
<item>
<title>BoltDB简单使用教程 - 勋爵</title>
<link>http://www.cnblogs.com/X-knight/p/10753833.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/X-knight/p/10753833.html</guid>
<description>&lt;h2&gt;1.BoltDB简介&lt;/h2&gt;
&lt;p&gt;Bolt是一个纯粹Key/Value模型的程序。该项目的目标是为不需要完整数据库服务器（如Postgres或MySQL）的项目提供一个简单，快速，可靠的数据库。&lt;/p&gt;
&lt;p&gt;BoltDB只需要将其链接到你的应用程序代码中即可使用BoltDB提供的API来高效的存取数据。而且BoltDB支持完全可序列化的ACID事务，让应用程序可以更简单的处理复杂操作。&lt;/p&gt;
&lt;p&gt;其源码地址为:&lt;strong&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/boltdb/bolt&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://github.com/boltdb/bolt&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;2.BoltDB特性&lt;/h2&gt;
&lt;p&gt;BoltDB设计源于LMDB，具有以下特点：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;2.5&quot;&gt;&lt;li&gt;
&lt;p&gt;使用Go语言编写&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;不需要服务器即可运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持数据结构&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;直接使用API存取数据，没有查询语句；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;支持完全可序列化的ACID事务，这个特性比LevelDB强；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;数据保存在内存映射的文件里。没有wal、线程压缩和垃圾回收；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;通过COW技术，可实现无锁的读写并发，但是无法实现无锁的写写并发，这就注定了读性能超高，但写性能一般，适合与读多写少的场景。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;BoltDB是一个Key/Value（键/值）存储，这意味着没有像SQL RDBMS（MySQL，PostgreSQL等）中的表，没有行，没有列。相反，数据作为键值对存储（如在Golang Maps中）。键值对存储在Buckets中，它们旨在对相似的对进行分组（这与RDBMS中的表类似）。因此，为了获得Value(值)，需要知道该Value所在的桶和钥匙。&lt;/p&gt;
&lt;h2&gt;3.BoltDB的安装&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Linux中：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ go get github.com/boltdb/bolt/...
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;Windows中：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.前提是已经&lt;strong&gt;安装GO语言环境.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;安装git&lt;/strong&gt; for windows :&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;%20http://git-for-windows.github.io/&quot; target=&quot;_blank&quot;&gt; http://git-for-windows.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.安装Git后才能&lt;strong&gt;执行命令:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
go get github.com/boltdb/bolt/...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;来安装第三方包。这条命令它会把 类库包源代码，下载解压到你的 %GOPATH% 路径里面去，比如：C:\go\gopath\   src\github.com\...&lt;br/&gt;前面是gopath路径，后面是类库，并且它还会同时执行 go install xxx ，生成 D:\go\gopath\pkg\xxxx 这样的包路径。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;4. 在&lt;strong&gt;代码中导入第三方包:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import (
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;github.com/boltdb/bolt&lt;/span&gt;&lt;span&gt;&quot; // 从环境变量：%goPath% 中定义的路径去查找第三方类库&lt;/span&gt;&lt;span&gt;
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4.BoltDB简单使用&lt;/h2&gt;
&lt;h3&gt;4.1 打开或创建数据库&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.数据库创建
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在这里gland直接运行，生成的my.db在main.go上层目录;命令行build在运行的话是当前目录！！！&lt;/span&gt;
    db, err := bolt.Open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chaorsBlock.db&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0600&lt;/span&gt;&lt;span&gt;, nil)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        log.Fatal(err)
    }
    defer db.Close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;如果通过goland程序运行创建的my.db会保存在$GOPATH /src/Project目录下&lt;br/&gt;如果通过go build main.go ; ./main 执行生成的my.db，会保存在当前目录$GOPATH /src/Project/package下&lt;/p&gt;
&lt;h3&gt;4.2 数据库操作&lt;/h3&gt;
&lt;h4&gt;4.2.1 创建数据库表&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.创建表&lt;/span&gt;
    err = db.Update(func(tx *&lt;span&gt;bolt.Tx) error {
  
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断要创建的表是否存在&lt;/span&gt;
        b := tx.Bucket([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MyBlocks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; b ==&lt;span&gt; nil {
  
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建叫&quot;MyBucket&quot;的表&lt;/span&gt;
            _, err := tx.CreateBucket([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MyBlocks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;也可以在这里对表做插入操作&lt;/span&gt;
&lt;span&gt;                log.Fatal(err)
            }
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一定要返回nil&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil
    })

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新数据库失败&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        log.Fatal(err)
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4.2.2 更新&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.更新表数据&lt;/span&gt;
    err = db.Update(func(tx *&lt;span&gt;bolt.Tx) error {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取出叫&quot;MyBucket&quot;的表&lt;/span&gt;
        b := tx.Bucket([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MyBlocks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;往表里面存储数据&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; b !=&lt;span&gt; nil {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;插入的键值对数据类型必须是字节数组&lt;/span&gt;
            err := b.Put([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;), []&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0x0000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            err :&lt;/span&gt;= b.Put([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;), []&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0x0001&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
                        err :&lt;/span&gt;= b.Put([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;), []&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0x0002&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
                log.Fatal(err)
            }
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一定要返回nil&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil
    })

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新数据库失败&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        log.Fatal(err)
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4.2.3 查询&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.查看表数据&lt;/span&gt;
    err = db.View(func(tx *&lt;span&gt;bolt.Tx) error {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取出叫&quot;MyBucket&quot;的表&lt;/span&gt;
        b := tx.Bucket([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MyBlocks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;往表里面存储数据&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; b !=&lt;span&gt; nil {

            data :&lt;/span&gt;= b.Get([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            fmt.Printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, data)
            data :&lt;/span&gt;= b.Get([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            fmt.Printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, data)
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一定要返回nil&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil
    })

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询数据库失败&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        log.Fatal(err)
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 22 Apr 2019 15:27:00 +0000</pubDate>
<dc:creator>勋爵</dc:creator>
<og:description>1.BoltDB简介 Bolt是一个纯粹Key/Value模型的程序。该项目的目标是为不需要完整数据库服务器（如Postgres或MySQL）的项目提供一个简单，快速，可靠的数据库。 BoltDB只需</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/X-knight/p/10753833.html</dc:identifier>
</item>
<item>
<title>babel 7 简单指北 - 郭佬</title>
<link>http://www.cnblogs.com/guolao/p/10753795.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guolao/p/10753795.html</guid>
<description>&lt;h2 id=&quot;babel-7&quot;&gt;babel 7&lt;/h2&gt;
&lt;p&gt;对于 babel 7，&lt;a href=&quot;https://babeljs.io/&quot;&gt;babel 的官网&lt;/a&gt;已经介绍得非常详细了，但有时感觉文档和实际使用总是差那么一点东西。&lt;/p&gt;
&lt;h3 id=&quot;主要包&quot;&gt;主要包&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;先来看一下主要的包，babel 7 对于包进行了一些简化。&lt;/p&gt;
&lt;h3 id=&quot;安装-babel-7&quot;&gt;安装 babel 7&lt;/h3&gt;
&lt;hr/&gt;&lt;pre class=&quot;powershell&quot;&gt;
&lt;code&gt;npm init -y
npm i -S @babel/cli @babel/core&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装完之后，可以看见 package.json 下有 babel 的信息。&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
  &quot;name&quot;: &quot;babel_7&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;
  },
  &quot;keywords&quot;: [],
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;,
  &quot;dependencies&quot;: {
    &quot;@babel/cli&quot;: &quot;^7.4.3&quot;,
    &quot;@babel/core&quot;: &quot;^7.4.3&quot;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;新建一个 src 目录，并在目录下创建一个 index.js：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;// src/index.js
const sum = (a, b) =&amp;gt; a + b&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接着新建 dist 目录，存放打包文件，然后执行命令：&lt;/p&gt;
&lt;pre class=&quot;powershell&quot;&gt;
&lt;code&gt;npx babel src/index.js -d dist/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以在 dist 下看见转换后的 index.js，但内容一模一样，因为 @babel/core 只复制把代码转换为 AST，然后 babel 又把 AST 转为代码，中间并没有做任何处理。&lt;/p&gt;
&lt;h4 id=&quot;babelcli-的一些命令&quot;&gt;@babel/cli 的一些命令&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;转码结果输出到标准输出
npx babel example.js
 
转码结果写入一个文件
--out-file 或 -o 参数指定输出文件
npx babel example.js --out-file compiled.js
或者
npx babel example.js -o compiled.js
 
整个目录转码
--out-dir 或 -d 参数指定输出目录
npx babel src --out-dir lib
或者
npx babel src -d lib
 
-s 参数生成 source map 文件
npx babel src -d lib -s&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;配置&quot;&gt;配置&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;babel 7 提供了 3 种通过文件进行配置的方式。&lt;/p&gt;
&lt;ol readability=&quot;12&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;code&gt;babel.config.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;适用场景：以编程的方式创建配置文件，希望编译 &lt;code&gt;node_modules&lt;/code&gt; 目录下的模块&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;module.exports = function (api) {
  api.cache(true);

  const presets = [ ... ];
  const plugins = [ ... ];

  return {
    presets,
    plugins
  };
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;code&gt;.babelrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;适用场景：简单的静态配置&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
  &quot;presets&quot;: [...],
  &quot;plugins&quot;: [...]
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也可以将上面的配置移到 package.json 中：&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
  &quot;name&quot;: &quot;my-package&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;babel&quot;: {
    &quot;presets&quot;: [ ... ],
    &quot;plugins&quot;: [ ... ],
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;code&gt;.babelrc.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;适用场景和 babel.config.js 类似&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;const presets = [ ... ];
const plugins = [ ... ];
module.exports = { presets, plugins };&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还可以调用 Node.js 的任何 API，例如基于进程环境进行动态配置：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;const presets = [ ... ];
const plugins = [ ... ];

if (process.env[&quot;ENV&quot;] === &quot;prod&quot;) {
  plugins.push(...);
}

module.exports = { presets, plugins };&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;babelpolyfillbabelpreset-env&quot;&gt;@babel/polyfill、@babel/preset-env&lt;/h3&gt;
&lt;hr/&gt;&lt;pre class=&quot;powershell&quot;&gt;
&lt;code&gt;npm i -S @babel/polyfill
npm i -D @babel/preset-env&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装完之后，在根目录下创建 .babelrc 文件，进行一些简单配置:&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
  &quot;presets&quot;: [
    [
      &quot;@babel/preset-env&quot;,
      {
        &quot;useBuiltIns&quot;: &quot;entry&quot;
      }
    ]
  ]
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再将 src/index.js 改一下：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;// src/index.js
import &quot;@babel/polyfill&quot;

let list = new Set()
list.set(0, 'hhh')

const sum = (a, b) =&amp;gt; a + b&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后运行转换命令：&lt;/p&gt;
&lt;pre class=&quot;powershell&quot;&gt;
&lt;code&gt; npx babel src/index.js -d dist/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后会发现 dist/index.js 中 es6+ 的语法转换为了 es5，而且还添加了一堆&lt;code&gt;require(...)&lt;/code&gt;，这些都是 polyfill，但没用到的一些东西也依然打包进来了，对于这种情况，babel 7 提供了&lt;code&gt;useBuiltIns&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;usebuiltins&quot;&gt;useBuiltIns&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;useBuiltIns: &quot;usage&quot;, &quot;entry&quot;, &quot;false&quot;。默认为 false。&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;usage: 在每个文件中使用 polyfill 时，为 polyfill 添加特定导入，babel 利用捆绑器只加载一次相同的polyfill。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;entry: 使用 entry 属性，必须在项目入口处引入一次 @babel/polyfill。然后 babel 在做代码转换的时候，会把&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;import @babel/polyfill&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;转成&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;require(&quot;core-js/modules/es6.array.copy-within&quot;);
require(&quot;core-js/modules/es6.array.every&quot;);
require(&quot;core-js/modules/es6.array.fill&quot;);
// more&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;false: 不引入 polyfill&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;将 .babelrc 下的&lt;code&gt;useBuiltIns&lt;/code&gt;改为&lt;code&gt;usage&lt;/code&gt;，再执行转换命令，就会发现 polyfill 变成了按需导入。&lt;/p&gt;
&lt;h4 id=&quot;targets&quot;&gt;targets&lt;/h4&gt;
&lt;p&gt;babel 7 还提供了&lt;code&gt;targets&lt;/code&gt;，这个配置主要用于指定需要支持的环境，一般是指浏览器版本。（ targets 还可以指定 node、android、ios、electron 等其他环境）&lt;/p&gt;
&lt;p&gt;设置了 targets，babel 在转换前，会先检查 targets 指定的环境已经支持了哪些新语法和 API，然后就不再转换或者不引入已经支持的内容。&lt;/p&gt;
&lt;p&gt;配置 targets，依然是修改 .babelrc 文件：&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
  &quot;presets&quot;: [
    [
      &quot;@babel/preset-env&quot;,
      {
        &quot;useBuiltIns&quot;: &quot;usage&quot;,
        &quot;targets&quot;: {
          &quot;browsers&quot;: [&quot;last 2 versions&quot;, &quot;ie &amp;gt;= 10&quot;]
        }
      }
    ]
  ]
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;babelplugin-transform-runtimebabelruntime&quot;&gt;@babel/plugin-transform-runtime、@babel/runtime&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;使用 @babel/polyfill 会对全局对象进行污染，所以可以使用 @babel/plugin-transform-runtime 和@babel/runtime 防止这种现象。&lt;/p&gt;
&lt;p&gt;@babel/plugin-transform-runtime 会在你需要的地方自动引入你使用到的新方法。&lt;/p&gt;
&lt;pre class=&quot;powershell&quot;&gt;
&lt;code&gt;npm i -D @babel/plugin-transform-runtime
npm i -S @babel/runtime&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装完毕之后依然是修改 .babelrc 文件：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;{
  &quot;presets&quot;: [
    [
      &quot;@babel/preset-env&quot;,
      {
        &quot;targets&quot;: {
          &quot;browsers&quot;: [&quot;last 2 versions&quot;, &quot;ie &amp;gt;= 10&quot;]
        }
      }
    ]
  ],
  &quot;plugins&quot;: [&quot;@babel/plugin-transform-runtime&quot;]
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后修改一下 src/index.js：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// src/index.js

class Person {
  constructor (name) {
    this.name = name
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后用命令进行转换，会发现转换结果和使用 @babel/polyfill 是有一点不一样的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 如果使用 @babel/runtime 的话，一些类的实例方法如：&lt;code&gt;foobar.includes(&quot;foo&quot;)&lt;/code&gt;将无法工作。因为它必须在原生对象的原型链上进行修改。&lt;/p&gt;
&lt;h4 id=&quot;区别&quot;&gt;区别&lt;/h4&gt;
&lt;p&gt;看了上面的做法，你可能会觉得困惑，为什么要一起使用 @babel/plugin-transform-runtime、@babel/runtime 呢，为什么不能单独使用一个？&lt;/p&gt;
&lt;p&gt;其实是因为 babel 转换时，@babel/plugin-transform-runtime 这个插件会自动引入使用到的新方法，而引入的这些 polyfill 包是在 @babel/runtime 里面的，所以 @babel/runtime 需要安装在 dependency（生产环境）下，@babel/plugin-transform-runtime 则安装在 devDependency（开发环境）下。&lt;/p&gt;
&lt;h4 id=&quot;使用哪一个&quot;&gt;使用哪一个？&lt;/h4&gt;
&lt;p&gt;至于是使用 @babel/polyfill，还是 @babel/runtime，我也不太清楚，网上的说法大致都是：&lt;/p&gt;
&lt;p&gt;一般库或工具中使用 @babel/runtime，因为它可以避免全局的污染。如果是项目中可以直接使用 @babel/polyfill。&lt;/p&gt;
&lt;p&gt;其实就是看使用场景吧，毕竟各有利弊。&lt;/p&gt;
</description>
<pubDate>Mon, 22 Apr 2019 15:18:00 +0000</pubDate>
<dc:creator>郭佬</dc:creator>
<og:description>babel 7 对于 babel 7， 'babel 的官网' 已经介绍得非常详细了，但有时感觉文档和实际使用总是差那么一点东西。 主要包 先来看一下主要的包，babel 7 对于包进行了一些简化。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guolao/p/10753795.html</dc:identifier>
</item>
<item>
<title>ASP.NET Core 使用 Google 验证码（reCAPTCHA v3）代替传统验证码 - 乔达摩</title>
<link>http://www.cnblogs.com/xiaxiaolu/p/10753583.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaxiaolu/p/10753583.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201904/641760-20190422223542168-361650878.jpg&quot; alt=&quot;Image result for reCAPTCHA v3&quot;/&gt;&lt;/p&gt;

&lt;p&gt;友情提示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Google reCAPTCHA(v3下同) 的使用不需要“梯子”，但申请账号的时候需要！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Google reCAPTCHA 的使用不需要“梯子”，但申请账号的时候需要！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Google reCAPTCHA 的使用不需要“梯子”，但申请账号的时候需要！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那天上班路上刷博客园，看到&lt;a href=&quot;https://www.cnblogs.com/stulzq&quot;&gt;晓晨&lt;/a&gt;大佬的&lt;a href=&quot;https://www.cnblogs.com/stulzq/p/10714417.html&quot;&gt;ASP.NET Core 使用 Google 验证码（Google reCAPTCHA）&lt;/a&gt;手痒不已，回家立马抽空自己也写了一遍（基本上抄晓晨大佬的），趁周末写个文，挥发下余温；（然而今天晚上下班才匆忙收尾。。。）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;日常所见各类奇葩验证码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个太有名了，必须前排&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201904/641760-20190422223541458-1786569204.png&quot; alt=&quot;1555769673891&quot;/&gt;&lt;/p&gt;
&lt;p&gt;京东的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201904/641760-20190422223540346-554542901.png&quot; alt=&quot;1555769755756&quot;/&gt;&lt;/p&gt;
&lt;p&gt;中文的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201904/641760-20190422223539817-43775923.png&quot; alt=&quot;1555769838576&quot;/&gt;&lt;/p&gt;
&lt;p&gt;丧心病狂的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201904/641760-20190422223538869-1293802571.png&quot; alt=&quot;1555769913750&quot;/&gt;&lt;/p&gt;
&lt;p&gt;面对这堆无力吐槽的验证码，降低用户体验不说，也提高了开发成本；&lt;/p&gt;
&lt;p&gt;很多现在很多公司验证码是用了第三方的，&lt;a href=&quot;https://www.geetest.com/GCN/&quot;&gt;极验&lt;/a&gt;、&lt;a href=&quot;https://dun.163.com/trial/sense&quot;&gt;网易云盾&lt;/a&gt;等等。&lt;/p&gt;
&lt;p&gt;也有很多公司的验证码（人机识别）模块是自己做的，有的甚至做了几套，还有更甚的甚至用上了&lt;strong&gt;理解图卷积算法&lt;/strong&gt;，堪称丧心病狂；&lt;/p&gt;
&lt;p&gt;但现在爬虫横行，恶意爬取数据，大量肉鸡爬取几乎等于dos攻击等，这算轻的；稍有不慎，暴力破解、数据泄露等安全问题也着实严峻；&lt;/p&gt;
&lt;p&gt;so,如果现在说，有人帮你搞定这些（人机识别），让你的登录页面清清爽爽，没有验证码，你想不想爽一把。&lt;/p&gt;
&lt;p&gt;我看你也跟我一样，定抵不住这&lt;a href=&quot;https://developers.google.com/recaptcha/docs/v3&quot;&gt;Google.reCAPTCHA-v3&lt;/a&gt;这妖艳货色婀娜的身姿；&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;本文讲的reCAPTCHA都是v3，下同；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://developers.google.com/recaptcha/docs/v3&quot; class=&quot;uri&quot;&gt;https://developers.google.com/recaptcha/docs/v3&lt;/a&gt; 英文好的自己看看；&lt;/p&gt;
&lt;p&gt;一句带过：reCAPTCHA 会以嵌入js的方式，给网站后台返回一个分数，这个分数是用于判断用户是否是机器人，分数的范围是0~1，分数约接近0，越像机器人；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顺便提一句，reCAPTCHA 这妖艳货色是免费的哦！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;注册站点：&lt;a href=&quot;https://www.google.com/recaptcha/admin/create&quot; class=&quot;uri&quot;&gt;https://www.google.com/recaptcha/admin/create&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;这里很简单啦，照着我的图瞎点就行了；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201904/641760-20190422223534420-573605114.png&quot; alt=&quot;1555603088777&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点提交之后，得到：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;这两个kes是配置用的，作用页面也说清楚了；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201904/641760-20190422223533399-824183667.png&quot; alt=&quot;1555603128328&quot;/&gt;&lt;/p&gt;
&lt;p&gt;很简单，ok，接下来看看怎么在.net core站点中使用；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、创建项目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201904/641760-20190422223532754-576236117.png&quot; alt=&quot;1555603893270&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、引用程序包&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;install-package Unicorn.reCAPTCHA.AspNetCore&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;4.8275862068966&quot;&gt;
&lt;p&gt;这个包是晓晨大佬改过的（我也不知道改了什么[捂脸]），就先用它&lt;/p&gt;
&lt;p&gt;不想用这个的，可以用&lt;a href=&quot;https://github.com/TimothyMeadows/reCAPTCHA.AspNetCore&quot; class=&quot;uri&quot;&gt;https://github.com/TimothyMeadows/reCAPTCHA.AspNetCore&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;3、写个简单的登录页&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AccountViewModel&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public class AccountViewModel
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }

        public string GoogleToken { get; set; }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后端：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; public IActionResult Login()
        {
            return View();
        }

        [HttpPost]
        public async Task&amp;lt;IActionResult&amp;gt; Login(AccountViewModel model)
        {
            if (ModelState.IsValid)
            {
                var recaptchaReault = await _recaptcha.Validate(model.GoogleToken);

                if (!recaptchaReault.success || recaptchaReault.score &amp;lt; 0.08m)
                {
                    ModelState.AddModelError(string.Empty, &quot;老实说，你是不是机器人！&quot;);
                }
                else
                {
                    ModelState.AddModelError(string.Empty, &quot;登录成功~&quot;);
                }
            }

            return View(model);
        }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;前端：&lt;/p&gt;
&lt;p&gt;appsettings.json&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
  &quot;RecaptchaSettings&quot;: {
    &quot;SiteKey&quot;: &quot;刚刚申请的SiteKey&quot;,
    &quot;SecretKey&quot;: &quot;刚刚申请的SecretKey&quot;,
    &quot;Version&quot;: &quot;v3&quot;,
    &quot;Domain&quot;: &quot;www.recaptcha.net&quot;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Startup&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;services.AddGoogleRecaptcha(Configuration.GetSection(&quot;RecaptchaSettings&quot;));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4、简单测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们先把这里改成这样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201904/641760-20190422223532064-1207248669.png&quot; alt=&quot;1555772858463&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后调试会得到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/641760/201904/641760-20190422223531074-778270706.gif&quot; alt=&quot;12&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我还放到了对外地址上，大家有空可以点来玩玩（但提交不要点太快哦，js异步加载token太快会报错）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sophiawu.cn/&quot; class=&quot;uri&quot;&gt;http://www.sophiawu.cn/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;哦，对了，还有一个坑，就是你点登录按钮后点浏览器的返回按钮，再点登录，这个时候百分百识别为机器人，线上用的时候要注意这个问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以后做有人机验证需求的登录页面，多了个选择，后面多玩下，自己试着用爬虫摸一下这个页面什么的，可靠的话我就投入生产了；&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gebiWangshushu/cnblogs-demos/tree/master/Google.reCAPTCHA.V3.Example&quot;&gt;本文示例代码&lt;/a&gt;（也没写什么新内容，大部分是看晓晨大佬那篇博客自己实现了一遍）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/stulzq/p/10714417.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/stulzq/p/10714417.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 22 Apr 2019 14:37:00 +0000</pubDate>
<dc:creator>乔达摩</dc:creator>
<og:description>﻿ 写在前面 友情提示： Google reCAPTCHA(v3下同) 的使用不需要“梯子”，但申请账号的时候需要！ Google reCAPTCHA 的使用不需要“梯子”，但申请账号的时候需要！ G</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaxiaolu/p/10753583.html</dc:identifier>
</item>
<item>
<title>为什么会有Comparable与Comparator接口? 引入策略模式 - 炭烧生蚝</title>
<link>http://www.cnblogs.com/tanshaoshenghao/p/10753022.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tanshaoshenghao/p/10753022.html</guid>
<description>&lt;ul&gt;&lt;li&gt;大家先考虑一个场景, 有一个整形数组, 我们希望通过调用一个工具类的排序方法就能对该数组进行排序. 请看下面的代码:&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Strategy {
    public static void main(String[] args) {
        int[] arr = {5, 3, 1, 7, 2};
        new DataSorter().sort(arr);//调用工具类进行排序
        for(int i = 0; i &amp;lt; arr.length; i++){
            System.out.println(arr[i]);
        }
    }
}

class DataSorter{//用于排序的工具类
    public void sort(int[] arr){//调用sort方法进行排序, 此处使用冒泡排序
        for(int i = arr.length - 1; i &amp;gt; 0; i--){
            for(int j = 0; j &amp;lt; i; j++){
                if(arr[j] &amp;gt; arr[j + 1])
                    swap(arr, j, j  + 1);
            }
        }
    }

    private void swap(int[] arr, int i, int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}&lt;/code&gt;
&lt;/pre&gt;


&lt;ul&gt;&lt;li&gt;通过上面的代码, 我们能够轻易地对整形数组进行排序, 那么如果现在有了新需求, 需要对浮点类型数据进行排序, 排序工具类应该如何做呢?&lt;/li&gt;
&lt;li&gt;或许你会想, 不如就新添加一个排序方法, 方法的参数类型为&lt;code&gt;float&lt;/code&gt;类型, 把int类型数组的排序算法复制一遍不就可以了吗?&lt;/li&gt;
&lt;li&gt;那如果我继续追问, 如果现在要对一只猫进行排序, 那应该怎么做呢? 猫的类如下&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class Cat{
    private int age;//猫的年龄
    private int weight;//猫的体重

    //get / set 方法...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;你也许会顺着原来的思路回答, 照样copy一份排序的算法, 修改方法参数, 然后在比较的地方指定比较猫的年龄或体重不就可以了吗?&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public void sort(Cat[] arr){//以猫数组作为参数
    for(int i = arr.length - 1; i &amp;gt; 0; i--){
        for(int j = 0; j &amp;lt; i; j++){
            if(arr[j].getAge() &amp;gt; arr[j + 1].getAge())//根据猫的年龄作比较
                swap(arr, j, j  + 1);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;但仔细想想, 如果还要继续比较小狗, 小鸡, 小鸭等各种对象, 那么这个排序工具类的代码量岂不是变得很大? 为了能让排序算法的可重用性高一点, 我们希望排序工具中的&lt;code&gt;sort()&lt;/code&gt;方法可以对任何调用它的对象进行排序.&lt;/li&gt;
&lt;li&gt;你可能会想: 到对任何对象都能排序, 把&lt;code&gt;sort()&lt;/code&gt;方法的参数改为&lt;code&gt;Object&lt;/code&gt;类型不久可以了嘛. 这个方向是对的, 但是问题是, 当拿到两个&lt;code&gt;Object&lt;/code&gt;类型对象, 应该根据什么规则进行比较呢?&lt;/li&gt;
&lt;li&gt;这个时候我们自然而然地就希望调用工具类进行排序的对象本身就具备自己的&lt;code&gt;比较法则&lt;/code&gt;, 这样在排序的时候就能直接调用对象的排序法则进行排序了.&lt;/li&gt;
&lt;li&gt;我们把比较法则抽象为&lt;code&gt;Comparable&lt;/code&gt;接口, 凡是要进行比较的类都要实现&lt;code&gt;Comparable&lt;/code&gt;接口, 并且定义自己的比较法则, 也就是&lt;code&gt;CompareTo()&lt;/code&gt;方法.&lt;/li&gt;
&lt;li&gt;这样当我们在封装工具时, 就可以直接对实现了&lt;code&gt;Comparable&lt;/code&gt;接口的对象进行比较, 不用担心比较的细节了.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Strategy {
public class Strategy {
    public static void main(String[] args) {
//      Integer[] arr = {5, 3, 1, 7, 2};//注意这里把int改为Integer, Integer是Object的子类
        Cat[] arr = {new Cat(3, 3), new Cat(1, 1), new Cat(5, 5)};
        DataSorter ds = new DataSorter();
        ds.sort(arr);
        for(int i = 0; i &amp;lt; arr.length; i++){
            System.out.println(arr[i]);
        }
    }
}
}

class DataSorter{//用于排序的工具类
    public void sort(Object[] arr){//参数类型为Object
        for(int i = arr.length - 1; i &amp;gt; 0; i--){
            for(int j = 0; j &amp;lt; i; j++){
                Comparable c1 = (Comparable) arr[j];//先转为Comparable类型
                Comparable c2 = (Comparable) arr[j + 1];
                if(c1.CompareTo(c2) == 1)//调用CompareTo()进行比较, 不关心具体的实现
                    swap(arr, j, j  + 1);
            }
        }
    }

    private void swap(Object[] arr, int i, int j){
        Object temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}

class Cat implements Comparable{
    private int age;
    private int weight;

    @Override
    public int CompareTo(Object o) {
        if(o instanceof Cat){//先判断传入的是否是Cat类对象, 不是则抛异常
            Cat c = (Cat) o;
            if(this.age &amp;gt; c.age) return 1;
            else if (this.age &amp;lt; c.age) return -1;
            else return 0;
        }
        throw null == o ? new NullPointerException() : new ClassCastException();
    }

    // get / set ...
    //toString() ...
}

interface Comparable{
    public int CompareTo(Object o);
}&lt;/code&gt;
&lt;/pre&gt;


&lt;ul&gt;&lt;li&gt;相信看了上面的&lt;code&gt;Comparable&lt;/code&gt;接口来由, 大家会感觉整个设计又美好了一些, 但是其中还有漏洞. 我们在&lt;code&gt;Cat&lt;/code&gt;类的&lt;code&gt;CompareTo()&lt;/code&gt;方法中, 对猫的比较策略是写死的, 现在我们按猫的年龄比较大小, 如果哪天我们想按照猫的体重比较大小, 又要去修改源码了. 有没有扩展性更好的设计?&lt;/li&gt;
&lt;li&gt;我们可以让用户自己定义一个比较器类, 对象可以根据用户指定的比较器比较大小.&lt;/li&gt;
&lt;li&gt;整个逻辑是: 如果这个对象需要进行比较, 那么它必须实现&lt;code&gt;Comparable&lt;/code&gt;接口, 但是它具体是怎么比较的, 则通过具体的&lt;code&gt;Comparator&lt;/code&gt;比较器进行比较.&lt;/li&gt;
&lt;li&gt;当然这里少不了多态, 我们首先要定义一个比较器接口&lt;code&gt;Comparator&lt;/code&gt;, 用户的比较器需要实现&lt;code&gt;Comparator&lt;/code&gt;接口, 下面上代码:&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Strategy {
    public static void main(String[] args) {
        Cat[] arr = {new Cat(3, 3), new Cat(1, 1), new Cat(5, 5)};
        DataSorter ds = new DataSorter();
        ds.sort(arr);
        for(int i = 0; i &amp;lt; arr.length; i++){
            System.out.println(arr[i]);
        }
    }
}

class DataSorter{//用于排序的工具类
    public void sort(Object[] arr){//参数类型为Object
        for(int i = arr.length - 1; i &amp;gt; 0; i--){
            for(int j = 0; j &amp;lt; i; j++){
                Comparable c1 = (Comparable) arr[j];//先转为Comparable类型
                Comparable c2 = (Comparable) arr[j + 1];
                if(c1.CompareTo(c2) == 1)//背后已经转换为使用Comparator的定义的规则进行比较
                    swap(arr, j, j  + 1);
            }
        }
    }

    private void swap(Object[] arr, int i, int j){
        Object temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}

class Cat implements Comparable{
    private int age;
    private int weight;
    private Comparator comparator = new CatAgeComparator();//默认持有年龄比较器

    @Override
    public int CompareTo(Object o) {
        return comparator.Compare(this, o);//调用比较器比较而不是直接在此写比较法则
    }

    // get / set / toString ...
}

interface Comparable{
    public int CompareTo(Object o);
}

interface Comparator{
    public int Compare(Object o1, Object o2);
}

//用户自己定义的, 按照猫的年龄比较大小的比较器
class CatAgeComparator implements Comparator{
    @Override
    public int Compare(Object o1, Object o2) {
        Cat c1 = (Cat) o1;
        Cat c2 = (Cat) o2;
        if(c1.getAge() &amp;gt; c2.getAge()) return 1;
        else if(c1.getAge() &amp;lt; c2.getAge()) return -1;
        else return 0;
    }
}

//按照猫的体重比较大小的比较器
class CatWeightComparator implements Comparator{
    @Override
    public int Compare(Object o1, Object o2) {
        Cat c1 = (Cat) o1;
        Cat c2 = (Cat) o2;
        if(c1.getWeight() &amp;gt; c2.getWeight()) return 1;
        else if(c1.getWeight() &amp;lt; c2.getWeight()) return -1;
        else return 0;
    }
}&lt;/code&gt;
&lt;/pre&gt;


&lt;ul&gt;&lt;li&gt;在上面的例子中, 我们自己定义了&lt;code&gt;Comparable&lt;/code&gt;接口和&lt;code&gt;Comparator&lt;/code&gt;接口, 其实这两个接口都是Java自带的, 通过上面的代码示例, 想必大家也应该知道了为什么会有这两个接口.&lt;/li&gt;
&lt;li&gt;其实&lt;code&gt;Comparable&lt;/code&gt;定义的就是一种比较的策略, 这里的策略你可以理解为一个功能, 然而策略有了, 我们还需要有具体的策略实现, 于是便有了&lt;code&gt;Comparator&lt;/code&gt;接口.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;这里再举一个例子方便大家理解.&lt;/li&gt;
&lt;li&gt;现在有一个坦克小游戏, 坦克要能够发射炮弹, 那么我们可以认为发射炮弹就是一种策略, 但是具体到发送什么炮弹, 这可以由具体的策略实现.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/liuyj24/TankOnline&quot;&gt;到GitHub上看看该坦克游戏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;首先定义发射炮弹这种策略&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public interface Fire {
    public void fire();//发射炮弹的策略
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;为了实现发射炮弹这种策略, 定义策略的具体实现, 也就是定义发射炮弹动作&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public interface FireAction {
    public void fireAction(Tank tank);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;坦克想要发送炮弹必须实现&lt;code&gt;Fire()&lt;/code&gt;接口, 而且坦克拥有发射炮弹的动作, 至于动作的具体实现, 这里默认给出只发射一颗炮弹的动作.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Tank implements TankHitListener, Fire {
    //省略各种属性方法...
    private FireAction fireAction = new NormalFireAction();//默认动作是只发射一颗炮弹
    
    @Override
    public void fire() {
        fireAction.fireAction(this);
    }
    
    //...&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;使用了策略模式有什么好处&quot;&gt;使用了策略模式有什么好处?&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;以上面的坦克游戏为例, 当把发射炮弹定义为一种策略后, 能发射炮弹的对象就不只坦克一个了, 如果游戏中有机关, 可以让机关也实现&lt;code&gt;fire()&lt;/code&gt;接口, 获得发射炮弹的能力.&lt;/li&gt;
&lt;li&gt;而且在定义策略后我们可以根据策略给出不同的实现方式, 比方说坦克发射炮弹的动作是每次只发射一颗炮弹, 而机关是每次向八个方向发射一颗炮弹. 非常灵活.&lt;/li&gt;
&lt;li&gt;结束&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://www.cnblogs.com/images/cnblogs_com/tanshaoshenghao/1426602/o_tankGif.gif&quot;/&gt;</description>
<pubDate>Mon, 22 Apr 2019 13:07:00 +0000</pubDate>
<dc:creator>炭烧生蚝</dc:creator>
<og:description>[TOC] 引入 大家先考虑一个场景, 有一个整形数组, 我们希望通过调用一个工具类的排序方法就能对该数组进行排序. 请看下面的代码:   Comparable接口的来龙去脉 通过上面的代码</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tanshaoshenghao/p/10753022.html</dc:identifier>
</item>
</channel>
</rss>