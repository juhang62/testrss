<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Jenkins环境搭建（4）-配置定时构建 - 温一壶清酒</title>
<link>http://www.cnblogs.com/hong-fithing/p/10547176.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hong-fithing/p/10547176.html</guid>
<description>&lt;p&gt;每次手动触发job构建，是很麻烦的一件事情，job中可以配置定时构建，今天就来分享下定时构建；构建分为两种：定时构建和轮询SCM。&lt;/p&gt;
&lt;h2&gt;一.定时构建&lt;/h2&gt;
&lt;p&gt;Jenkins采用了著名的UNIX任务调度工具CRON所使用的配置方式，用5个字段代表5个不同的时间单位（中间用空格隔开），语法如下：&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr align=&quot;left&quot;&gt;&lt;td&gt;字段&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot;&gt;&lt;td&gt;含义&lt;/td&gt;
&lt;td&gt;分钟&lt;/td&gt;
&lt;td&gt;小时&lt;/td&gt;
&lt;td&gt;日期&lt;/td&gt;
&lt;td&gt;月份&lt;/td&gt;
&lt;td&gt;星期&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot;&gt;&lt;td&gt;取值范围&lt;/td&gt;
&lt;td&gt;0-59&lt;/td&gt;
&lt;td&gt;0-23&lt;/td&gt;
&lt;td&gt;1-31&lt;/td&gt;
&lt;td&gt;1-12&lt;/td&gt;
&lt;td&gt;0-7&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot;&gt;&lt;td&gt;示例&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; readability=&quot;2&quot;&gt;&lt;td&gt;每隔15分钟执行一次&lt;/td&gt;
&lt;td&gt;H/15&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; readability=&quot;2&quot;&gt;&lt;td&gt;每隔2小时执行一次　&lt;/td&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;H/2&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot;&gt;&lt;td&gt;每隔3天执行一次&lt;/td&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;H/3&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; readability=&quot;2&quot;&gt;&lt;td&gt;每隔3天执行一次（每月的1-15号）&lt;/td&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;1-15/3&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot;&gt;&lt;td&gt;每周1/3/5执行一次&lt;/td&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;1,3,5&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot;&gt;&lt;td&gt;每天3点执行一次&lt;/td&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; readability=&quot;2&quot;&gt;&lt;td&gt;每天8/12/22点执行一次&lt;/td&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;8,12,22&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot;&gt;&lt;td&gt;规则&lt;/td&gt;
&lt;td&gt;备注&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot;&gt;&lt;td&gt;指定时间范围&lt;/td&gt;
&lt;td&gt;x-y&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot;&gt;&lt;td&gt;指定时间间隔&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot;&gt;&lt;td&gt;指定变量取值&lt;/td&gt;
&lt;td&gt;x,y,z&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;job详细配置如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1242227/201903/1242227-20190317150301007-38749133.png&quot; alt=&quot;&quot; width=&quot;927&quot; height=&quot;335&quot;/&gt;&lt;/p&gt;
&lt;p&gt;设置为H/10 * * *，是每十分钟执行一次，从上图中可看出，两次运行时间相差十分钟&lt;/p&gt;
&lt;p&gt;到了时间就会自动构建，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1242227/201903/1242227-20190317150439154-485376469.png&quot; alt=&quot;&quot; width=&quot;929&quot; height=&quot;411&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到了设置时间，则自己开始构建，免除了手动构建的烦恼&lt;/p&gt;
&lt;h2&gt;二.轮询SCM&lt;/h2&gt;
&lt;p&gt; 轮询SCM：定时检查源码变更（根据SCM软件的版本号），如果有更新就checkout最新code下来，然后执行构建动作&lt;/p&gt;
&lt;p&gt; 配置如下：*/10 * * * * （每10分钟检查一次源码变化）&lt;/p&gt;
&lt;h2&gt;三.Cron表达式与Jenkins定时表达式的异同&lt;/h2&gt;
&lt;h3&gt;1.Cron语法格式&lt;/h3&gt;
&lt;p&gt;Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式： &lt;br/&gt;Seconds Minutes Hours DayofMonth Month DayofWeek Year&lt;br/&gt;Seconds Minutes Hours DayofMonth Month DayofWeek&lt;/p&gt;
&lt;h3&gt;2.特殊字符详解&lt;/h3&gt;
&lt;p&gt;每一个域可出现的字符如表格所示： &lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;14.5&quot;&gt;&lt;tr&gt;&lt;td&gt;字段&lt;/td&gt;
&lt;td&gt;允许值&lt;/td&gt;
&lt;td&gt;允许的特殊字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;秒（Seconds）&lt;/td&gt;
&lt;td&gt;0~59的整数&lt;/td&gt;
&lt;td&gt;, - * /    四个字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;分（Minutes）&lt;/td&gt;
&lt;td&gt;0~59的整数&lt;/td&gt;
&lt;td&gt;, - * /    四个字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;小时（Hours）&lt;/td&gt;
&lt;td&gt;0~23的整数&lt;/td&gt;
&lt;td&gt;, - * /    四个字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;日期（DayofMonth）&lt;/td&gt;
&lt;td&gt;1~31的整数（需要考虑月的天数）&lt;/td&gt;
&lt;td&gt;,- * ? / L W C     八个字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;月份（Month）&lt;/td&gt;
&lt;td&gt;1~12的整数或者 JAN-DEC&lt;/td&gt;
&lt;td&gt;, - * /    四个字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;星期（DayofWeek）&lt;/td&gt;
&lt;td&gt;1~7的整数或者 SUN-SAT （1=SUN）&lt;/td&gt;
&lt;td&gt;, - * ? / L C #     八个字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;年(可选，留空)（Year）&lt;/td&gt;
&lt;td&gt;1970~2099&lt;/td&gt;
&lt;td&gt;, - * /    四个字符&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;注意事项：每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是： &lt;/p&gt;
&lt;p&gt;(1)*：表示匹配该域的任意值，假如在Minutes域使用*, 即表示每分钟都会触发事件。&lt;/p&gt;
&lt;p&gt;(2)?:只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用*，如果使用*表示不管星期几都会触发，实际上并不是这样。 &lt;/p&gt;
&lt;p&gt;(3)-:表示范围，例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次 &lt;/p&gt;
&lt;p&gt;(4)/：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次. &lt;/p&gt;
&lt;p&gt;(5),:表示列出枚举值值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。 &lt;/p&gt;
&lt;p&gt;(6)L:表示最后，只能出现在DayofWeek和DayofMonth域，如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。 &lt;/p&gt;
&lt;p&gt;(7)W:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 &lt;/p&gt;
&lt;p&gt;(8)LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。 &lt;/p&gt;
&lt;p&gt;(9)#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。&lt;/p&gt;
&lt;p&gt;举几个例子: &lt;br/&gt;0 0 2 1 * ? * 表示在每月的1日的凌晨2点调度任务 &lt;br/&gt;0 15 10 ? * MON-FRI 表示周一到周五每天上午10：15执行作业 &lt;br/&gt;0 15 10 ? * 6L 2002-2006 表示2002-2006年的每个月的最后一个星期五上午10:15执行作&lt;/p&gt;
&lt;h3&gt;3.Cron举例&lt;/h3&gt;
&lt;p&gt;一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素。 &lt;br/&gt;按顺序依次为 &lt;br/&gt;秒（0~59） &lt;br/&gt;分钟（0~59） &lt;br/&gt;小时（0~23） &lt;br/&gt;天（月）（1~31，需要考虑月的天数） &lt;br/&gt;月（1~12） &lt;br/&gt;天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT） &lt;br/&gt;年份（1970－2099）&lt;/p&gt;
&lt;p&gt;其中每个元素可以是一个值(如6)，一个连续区间(9-12)，一个间隔时间(8-18/4)(/表示每隔4小时)，一个列表(1,3,5)通配符。由于&quot;月份中的日期&quot;和&quot;星期中的日期&quot;这两个元素互斥的，必须要对其中一个设置?&lt;/p&gt;
&lt;p&gt;0 0 10,14,16 * * ? 每天上午10点，下午2点，4点 &lt;br/&gt;0 0/30 9-17 * * ? 朝九晚五工作时间内每半小时 &lt;br/&gt;0 0 12 ? * WED 表示每个星期三中午12点 &lt;br/&gt;&quot;0 0 12 * * ?&quot; 每天中午12点触发 &lt;br/&gt;&quot;0 15 10 ? * *&quot; 每天上午10:15触发 &lt;br/&gt;&quot;0 15 10 * * ?&quot; 每天上午10:15触发 &lt;br/&gt;&quot;0 15 10 * * ? *&quot; 每天上午10:15触发 &lt;br/&gt;&quot;0 15 10 * * ? 2005&quot; 2005年的每天上午10:15触发 &lt;br/&gt;&quot;0 * 14 * * ?&quot; 在每天下午2点到下午2:59期间的每1分钟触发 &lt;br/&gt;&quot;0 0/5 14 * * ?&quot; 在每天下午2点到下午2:55期间的每5分钟触发 &lt;br/&gt;&quot;0 0/5 14,18 * * ?&quot; 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 &lt;br/&gt;&quot;0 0-5 14 * * ?&quot; 在每天下午2点到下午2:05期间的每1分钟触发 &lt;br/&gt;&quot;0 10,44 14 ? 3 WED&quot; 每年三月的星期三的下午2:10和2:44触发 &lt;br/&gt;&quot;0 15 10 ? * MON-FRI&quot; 周一至周五的上午10:15触发 &lt;br/&gt;&quot;0 15 10 15 * ?&quot; 每月15日上午10:15触发 &lt;br/&gt;&quot;0 15 10 L * ?&quot; 每月最后一日的上午10:15触发 &lt;br/&gt;&quot;0 15 10 ? * 6L&quot; 每月的最后一个星期五上午10:15触发 &lt;br/&gt;&quot;0 15 10 ? * 6L 2002-2005&quot; 2002年至2005年的每月的最后一个星期五上午10:15触发 &lt;br/&gt;&quot;0 15 10 ? * 6#3&quot; 每月的第三个星期五上午10:15触发&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;有些子表达式能包含一些范围或列表&lt;/p&gt;
&lt;p&gt;例如：子表达式（天（星期））可以为 “MON-FRI”，“MON，WED，FRI”，“MON-WED,SAT”&lt;/p&gt;
&lt;p&gt;“*”字符代表所有可能的值&lt;/p&gt;
&lt;p&gt;因此，“*”在子表达式（月）里表示每个月的含义，“*”在子表达式（天（星期））表示星期的每一天&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;“/”字符用来指定数值的增量 &lt;br/&gt;例如：在子表达式（分钟）里的“0/15”表示从第0分钟开始，每15分钟 &lt;br/&gt;在子表达式（分钟）里的“3/20”表示从第3分钟开始，每20分钟（它和“3，23，43”）的含义一样&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;“？”字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值 &lt;br/&gt;当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为“？”&lt;/p&gt;
&lt;p&gt;“L” 字符仅被用于天（月）和天（星期）两个子表达式，它是单词“last”的缩写 &lt;br/&gt;但是它在两个子表达式里的含义是不同的。 &lt;br/&gt;在天（月）子表达式中，“L”表示一个月的最后一天 &lt;br/&gt;在天（星期）自表达式中，“L”表示一个星期的最后一天，也就是SAT&lt;/p&gt;
&lt;p&gt;如果在“L”前有具体的内容，它就具有其他的含义了&lt;/p&gt;
&lt;p&gt;例如：“6L”表示这个月的倒数第６天，“FRIL”表示这个月的最一个星期五 &lt;br/&gt;注意：在使用“L”参数时，不要指定列表或范围，因为这会导致问题&lt;/p&gt;

&lt;p&gt;Jenkins定时表达式与Cron表达式一对比，虽然相似，还是有很大程度的不同，使用中需要注意区分。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;29.483394833948&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;本文仅代表作者观点，系作者@温一壶清酒发表。&lt;br/&gt;欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。&lt;br/&gt;文章出处：&lt;a href=&quot;http://www.cnblogs.com/hong-fithing/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/hong-fithing/&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 17 Mar 2019 07:29:00 +0000</pubDate>
<dc:creator>温一壶清酒</dc:creator>
<og:description>每次手动触发job构建，是很麻烦的一件事情，job中可以配置定时构建，今天就来分享下定时构建；构建分为两种：定时构建和轮询SCM。 一.定时构建 Jenkins采用了著名的UNIX任务调度工具CRON</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hong-fithing/p/10547176.html</dc:identifier>
</item>
<item>
<title>ASP.NET Core的JWT的实现（中间件）.md - HANS许</title>
<link>http://www.cnblogs.com/xuhuale/p/10507241.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuhuale/p/10507241.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_1&quot;&gt;既然选择了远方，便只顾风雨兼程 __ HANS许&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt; &lt;/p&gt;


&lt;blockquote readability=&quot;8.6568914956012&quot;&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_1&quot;&gt;引言：挺久没更新了，之前做了Vue的系列，后面想做做服务端的系列，上下衔接，我们就讲讲WebApi(网络应用程序接口),接口免不了用户认证，所以接下来我们的主题系列文章便是“&lt;span class=&quot;mark&quot;&gt;&lt;a class=&quot;xsj_link xsj_auto_link&quot; href=&quot;http://xn--ASP-xi9dt44b.NET&quot; target=&quot;_blank&quot;&gt;基于ASP.NET&lt;/a&gt; Core的用户认证&lt;/span&gt;”，分为市面上流行的JWT(JSON WebToken)与OAuth2(开放授权)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h4&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;JWT(JSON Web Token)&lt;/span&gt;&lt;/h4&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;8.5&quot;&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_2&quot;&gt;什么叫JWT&lt;br/&gt;JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。&lt;/p&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_2&quot;&gt;一般来说，互联网用户认证是这样子的。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_3&quot;&gt;1、用户向服务器发送用户名和密码。&lt;br/&gt;2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。&lt;br/&gt;3、服务器向用户返回一个 session_id，写入用户的 Cookie。&lt;br/&gt;4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。&lt;br/&gt;5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_2&quot;&gt;服务器需要保存session，做持久化，这种模式&lt;span class=&quot;mark&quot;&gt;没有分布式架构，无法支持横向扩展&lt;/span&gt;，如果真的要的话就必须采用分布式缓存来进行管理Seesion。那JWT相反，它保存的是在客户端，每次请求都将JWT代入服务器，进行签名，权限验证。&lt;span class=&quot;mark&quot;&gt;JWT由客户端请求，服务端生成，客户端保存，服务端验证。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_2&quot;&gt;JWT的原理与格式&lt;/p&gt;
&lt;ol readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_4&quot;&gt;原理&lt;br/&gt;在上面，我们也讲过了，简单的来说，我们将服务器需要验证我们的条件(账户，密码等等)，发给服务器，服务器认证通过，生成一个JSON对象返回给我们，例如下面。当然，为了防止被篡改，所以我们会将对象加密，再次请求服务器，需要将jwt放在请求头部，传递给服务器，来判断权限等等。&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;div class=&quot;xiaoshujiang_pre&quot;&gt;
&lt;div class=&quot;language-JSON hljs code_linenums xiaoshujiang_code&quot;&gt;
&lt;ol class=&quot;ol_linenums&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;姓名&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;张三&quot;&lt;/span&gt;, 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;角色&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;管理员&quot;&lt;/span&gt;, 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;到期时间&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2018年7月1日0点0分&quot;&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_4&quot;&gt;格式&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;实际格式&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;div class=&quot;xiaoshujiang_pre&quot;&gt;
&lt;div class=&quot;nohighlight hljs code_linenums xiaoshujiang_code&quot;&gt;
&lt;ol class=&quot;ol_linenums&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;li_linenum li_list_style&quot;&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;eyJBIjoiQUFBQSIsIkIiOiJCQkJCIiwiQyI6IkNDQ0MiLCJ1ZXIiOiJ4dWh1YWxlIiwib3BlbmlkIjoiNTE1NjEzMTM1MTYzMjEiLCJmZiI6ImRmc2RzZGZzZGZzZHMiLCJuYmYiOjE1NTIyMTE4NjAsImV4cCI6MTU1MjIxMzY2MH0. 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;16m57YnnIcgIth25dwphQKPYuIq42BVmZV6LIBO7KDg 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_4&quot;&gt;它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT内部是没有换行的，这里只是为了便于展示，将它写成了几行。JWT 的三个部分依次如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;Header（头部）&lt;/li&gt;
&lt;li&gt;Payload（负载）&lt;/li&gt;
&lt;li&gt;Signature（签名）&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_4&quot;&gt;简单讲下，&lt;code&gt;Header&lt;/code&gt;描述加密算法与token类型，&lt;code&gt;Payload&lt;/code&gt;描述的是实际需要传递的数据，如失效时间，签发人等等，&lt;code&gt;Signature&lt;/code&gt;描述的是一段对于前面两部部分的签名，当然秘钥只有服务器才知道。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;4.6774193548387&quot;&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_1&quot;&gt;简单的介绍下JWT，更多的话，可以这边&lt;a class=&quot;xsj_link xsj_manu_link&quot; href=&quot;http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html&quot; target=&quot;_blank&quot;&gt;文章&lt;/a&gt;看看。我们着重讲下实现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 class=&quot;xsj_heading_hash xsj_heading xsj_heading_h5&quot;&gt;&lt;span class=&quot;xsj_heading_content&quot;&gt;&lt;a class=&quot;xsj_link xsj_auto_link&quot; href=&quot;http://ASP.NET&quot; target=&quot;_blank&quot;&gt;ASP.NET&lt;/a&gt; Core 的Middleware实现&lt;/span&gt;&lt;/h5&gt;
&lt;ol readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_2&quot;&gt;创建JWT&lt;br/&gt;首先我们要先创建token，毕竟这个是最重要的。Core自带JWT帮助类，所以我们按照帮助类的意思来写个方法创建token。&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;div class=&quot;xiaoshujiang_pre&quot;&gt;
&lt;div class=&quot;language-CSharp hljs code_linenums xiaoshujiang_code&quot;&gt;
&lt;ol class=&quot;ol_linenums&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CreateJsonWebToken&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Dictionary&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&amp;gt; payLoad&lt;/span&gt;)&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;.IsNullOrWhiteSpace(setting.SecurityKey)) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentNullException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;JsonWebTokenSetting.securityKey&quot;&lt;/span&gt;, 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;securityKey为NULL或空字符串。请在\&quot;appsettings.json\&quot;配置\&quot;JsonWebToken\&quot;节点及其子节点\&quot;securityKey\&quot;&quot;&lt;/span&gt;); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; now = DateTime.UtcNow; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; claims = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Claim&amp;gt;(); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; payLoad.Keys) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tempClaim = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Claim(key, payLoad[key]?.ToString()); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;claims.Add(tempClaim); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jwt = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JwtSecurityToken( 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;issuer: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;audience: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;claims: claims, 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;notBefore: now, 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;expires: now.Add(TimeSpan.FromMinutes(setting.ExpiresMinute)), 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;signingCredentials: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SigningCredentials(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SymmetricSecurityKey(Encoding.ASCII.GetBytes(setting.SecurityKey)), SecurityAlgorithms.HmacSha256)); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; encodedJwt = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JwtSecurityTokenHandler().WriteToken(jwt); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; encodedJwt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_2&quot;&gt;从方法我们看到，我们传入的是负载这个片段，而失效时间与秘钥我们是放在了&lt;code&gt;appsettings.json&lt;/code&gt;来进行配置的。使用DI来获取配置文件中的节点值。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_2&quot;&gt;编写中间件&lt;br/&gt;我们都知道，中间件是Core的管道模型组成部分，所以我们在中间件做验证，来判断每次请求用户是有有权限是有该WebApi或者其他API。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;中间件
&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;div class=&quot;xiaoshujiang_pre&quot;&gt;
&lt;div class=&quot;language-CSharp hljs code_linenums xiaoshujiang_code&quot;&gt;
&lt;ol class=&quot;ol_linenums&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;JwtCustomerAuthorizeMiddleware&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;RequestDelegate next, IOptions&amp;lt;JsonWebTokenSetting&amp;gt; options, IJsonWebTokenValidate jsonWebTokenValidate, Func&amp;lt;Dictionary&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&amp;gt;, JsonWebTokenSetting, &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;&amp;gt; validatePayLoad, List&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&amp;gt; anonymousPathList&lt;/span&gt;)&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._next = next; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._setting = options.Value; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._jsonWebTokenValidate = jsonWebTokenValidate; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._validatePayLoad = validatePayLoad; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._anonymousPathList = anonymousPathList; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; Task &lt;span class=&quot;hljs-title&quot;&gt;Invoke&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;HttpContext context&lt;/span&gt;)&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (_anonymousPathList.Contains(context.Request.Path.Value)) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; _next(context); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = context.Request.Headers.TryGetValue(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; StringValues authStr); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!result || &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;.IsNullOrEmpty(authStr.ToString())) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; UnauthorizedAccessException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;未授权，请传递Header头的Authorization参数。&quot;&lt;/span&gt;); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;result = _jsonWebTokenValidate.Validate(authStr.ToString().Substring(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bearer &quot;&lt;/span&gt;.Length).Trim() 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;, _setting, _validatePayLoad); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!result) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; UnauthorizedAccessException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;验证失败，请查看传递的参数是否正确或是否有权限访问该地址。&quot;&lt;/span&gt;); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; _next(context); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_2&quot;&gt;从代码来看，&lt;code&gt;anonymousPathList&lt;/code&gt;是URL路径，若是在这个&lt;code&gt;List&lt;/code&gt;内的URL，便可直接跳过验证，&lt;br/&gt;接着将&lt;code&gt;authStr&lt;/code&gt;token代入验证函数，&lt;code&gt;validatePayLoad&lt;/code&gt;却是我们自代入的委托函数，用于服务器自定义验证。&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;验证&lt;br/&gt;验证方法，我只是做了签名验证与时间验证。并没有定得死死的，让用户自由度的去进行验证。
&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;div class=&quot;xiaoshujiang_pre&quot;&gt;
&lt;div class=&quot;language-CSharp hljs code_linenums xiaoshujiang_code&quot;&gt;
&lt;ol class=&quot;ol_linenums&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Validate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; encodeJwt, JsonWebTokenSetting setting, Func&amp;lt;Dictionary&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&amp;gt;, JsonWebTokenSetting, &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;&amp;gt; validatePayLoad&lt;/span&gt;)&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;.IsNullOrWhiteSpace(setting.SecurityKey)) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentNullException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;JsonWebTokenSetting.securityKey&quot;&lt;/span&gt;, 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;securityKey为NULL或空字符串。请在\&quot;appsettings.json\&quot;配置\&quot;JsonWebToken\&quot;节点及其子节点\&quot;securityKey\&quot;&quot;&lt;/span&gt;); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; success = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jwtArr = encodeJwt.Split(&lt;span class=&quot;hljs-string&quot;&gt;'.'&lt;/span&gt;); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; header = JsonConvert.DeserializeObject&amp;lt;Dictionary&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&amp;gt;&amp;gt;(Base64UrlEncoder.Decode(jwtArr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; payLoad = JsonConvert.DeserializeObject&amp;lt;Dictionary&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&amp;gt;&amp;gt;(Base64UrlEncoder.Decode(jwtArr[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; hs256 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HMACSHA256(Encoding.ASCII.GetBytes(setting.SecurityKey)); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;success = success &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;.Equals(jwtArr[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], Base64UrlEncoder.Encode(hs256.ComputeHash(Encoding.UTF8.GetBytes(&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;.Concat(jwtArr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;, jwtArr[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))))); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!success) 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; success; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; now = ToUnixEpochDate(DateTime.UtcNow); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;success = success &amp;amp;&amp;amp; (now &amp;gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt;.Parse(payLoad[&lt;span class=&quot;hljs-string&quot;&gt;&quot;nbf&quot;&lt;/span&gt;].ToString()) &amp;amp;&amp;amp; now &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt;.Parse(payLoad[&lt;span class=&quot;hljs-string&quot;&gt;&quot;exp&quot;&lt;/span&gt;].ToString())); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;success = success &amp;amp;&amp;amp; validatePayLoad(payLoad, setting); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; success; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_2&quot;&gt;加载中间件&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;使用扩展方法，来封装中间件&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;div class=&quot;xiaoshujiang_pre&quot;&gt;
&lt;div class=&quot;language-CSharp hljs code_linenums xiaoshujiang_code&quot;&gt;
&lt;ol class=&quot;ol_linenums&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; IApplicationBuilder &lt;span class=&quot;hljs-title&quot;&gt;UseJwtCustomerAuthorize&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; IApplicationBuilder app, Action&amp;lt;IJwtCustomerAuthorezeOption&amp;gt; action&lt;/span&gt;)&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _JwtCustomerAuthorezeOption = app.ApplicationServices.GetService&amp;lt;IJwtCustomerAuthorezeOption&amp;gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; JwtCustomerAuthorezeOption;  
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;action(_JwtCustomerAuthorezeOption); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; app.UseMiddleware&amp;lt;JwtCustomerAuthorizeMiddleware&amp;gt;(_JwtCustomerAuthorezeOption.validatePayLoad, _JwtCustomerAuthorezeOption.anonymousPath); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;在&lt;code&gt;Startup.cs&lt;/code&gt;使用&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;注册服务
&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;div class=&quot;xiaoshujiang_pre&quot;&gt;
&lt;div class=&quot;language-CSharp hljs code_linenums xiaoshujiang_code&quot;&gt;
&lt;ol class=&quot;ol_linenums&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ConfigureServices&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;IServiceCollection services&lt;/span&gt;)&lt;/span&gt; { 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;services.AddJwt(Configuration);} 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;使用中间件
&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;div class=&quot;xiaoshujiang_pre&quot;&gt;
&lt;div class=&quot;language-CSharp hljs code_linenums xiaoshujiang_code&quot;&gt;
&lt;ol class=&quot;ol_linenums&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Configure&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;IApplicationBuilder app, IHostingEnvironment env&lt;/span&gt;)&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;app.UseJwtCustomerAuthorize(option =&amp;gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;option.SetAnonymousPaths(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; System.Collections.Generic.List&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&amp;gt;() 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;/Home/Privacy&quot;&lt;/span&gt;, 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;/Home/CreateJsonToken&quot;&lt;/span&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;option.SetValidateFunc((playLoad, sertting) =&amp;gt; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;{ 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}); 
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;li class=&quot;li_linenum li_list_style&quot;&gt;}  
&lt;hr class=&quot;code_line_break_hack&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;7.344262295082&quot;&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_1&quot;&gt;总结下，通过上面，&lt;a class=&quot;xsj_link xsj_auto_link&quot; href=&quot;http://xn--JWTASP-2e8in30d5jjesboy6a.NET&quot; target=&quot;_blank&quot;&gt;就完成了JWT在ASP.NET&lt;/a&gt; Core使用中间件的方式的实现。简单来说就是用自带方法创建token，验证则使用中间件的形式，每次请求都需要进行验证当然你可以设置特殊URL。在下篇文章我们来讲讲使用策略模式的JWT实现。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sun, 17 Mar 2019 06:53:00 +0000</pubDate>
<dc:creator>HANS许</dc:creator>
<og:description>既然选择了远方，便只顾风雨兼程 __ HANS许 JWT(JSON Web Token) ASP.NET Core 的Middleware实现 引言：挺久没更新了，之前做了Vue的系列，后面想做做服务</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuhuale/p/10507241.html</dc:identifier>
</item>
<item>
<title>SpringBoot2 task scheduler 定时任务调度器四种方式 - cnJun</title>
<link>http://www.cnblogs.com/cnJun/p/10546745.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cnJun/p/10546745.html</guid>
<description>&lt;h3 id=&quot;使用enablescheduling方式&quot;&gt;使用@EnableScheduling方式&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Component
@Configurable
@EnableScheduling
public class Task1 {
    private static Log logger = LogFactory.getLog(Task1.class);
    @Scheduled(cron = &quot;0/2 * * * * * &quot;)
    public void execute() {
        logger.info(&quot;Task1&amp;gt;&amp;gt;&quot; + new Date());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;xml配置方式&quot;&gt;xml配置方式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;application&lt;/code&gt;启动加入读取&lt;code&gt;xml&lt;/code&gt;文件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@SpringBootApplication
@ImportResource(value = { &quot;classpath:applicationContext*.xml&quot; })
public class Springboot2TaskApplication {

    public static void main(String[] args) {
        SpringApplication.run(Springboot2TaskApplication.class, args);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;context:component-scan base-package=&quot;com.chenyingjun.task.schedual&quot;&amp;gt;&amp;lt;/context:component-scan&amp;gt;
&amp;lt;task:scheduler id=&quot;appScheduler&quot; pool-size=&quot;2&quot; /&amp;gt; 
&amp;lt;!-- 调整定时任务 --&amp;gt;
&amp;lt;task:scheduled-tasks&amp;gt;    
    &amp;lt;task:scheduled ref=&quot;task2&quot; method=&quot;method2&quot; cron=&quot;0/10 * * * * ?&quot;/&amp;gt;
&amp;lt;/task:scheduled-tasks&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Service
public class Task2 {
    private static Log logger = LogFactory.getLog(Task2.class);
    public void method2() {
        logger.info(&quot;Task2----method2&amp;gt;&amp;gt;&amp;gt;&amp;gt;&quot; + new Date());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;bean创建工厂方式&quot;&gt;bean创建工厂方式&lt;/h3&gt;
&lt;p&gt;使用到的&lt;code&gt;jar&lt;/code&gt;包&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-context-support&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-tx&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.quartz-scheduler&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quartz&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;新建&lt;code&gt;SchedledConfiguration.java&lt;/code&gt;文件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Configuration
public class SchedledConfiguration {

    /**
     * attention:
     * Details：配置定时任务
     */
    @Bean(name = &quot;jobDetail&quot;)
    public MethodInvokingJobDetailFactoryBean detailFactoryBean(Task3 task) {// TestTask为需要执行的任务
        MethodInvokingJobDetailFactoryBean jobDetail = new MethodInvokingJobDetailFactoryBean();
        /*
         *  是否并发执行
         *  例如每5s执行一次任务，但是当前任务还没有执行完，就已经过了5s了，
         *  如果此处为true，则下一个任务会执行，如果此处为false，则下一个任务会等待上一个任务执行完后，再开始执行
         */
        jobDetail.setConcurrent(false);

        // 设置任务的名字
        jobDetail.setName(&quot;jobDetailName&quot;);

        // 设置任务的分组，这些属性都可以存储在数据库中，在多任务的时候使用
        jobDetail.setGroup(&quot;jobDetailGroup&quot;);

        /*
         * 为需要执行的实体类对应的对象
         */
        jobDetail.setTargetObject(task);

        /*
         * 通过这几个配置，告诉JobDetailFactoryBean我们需要执行定时执行ScheduleTask类中的task方法
         */
        jobDetail.setTargetMethod(&quot;task&quot;);
        return jobDetail;
    }

    /**
     * Details：配置定时任务的触发器，也就是什么时候触发执行定时任务
     */
    @Bean(name = &quot;jobTrigger&quot;)
    public CronTriggerFactoryBean cronJobTrigger(JobDetail jobDetail) {
        CronTriggerFactoryBean tigger = new CronTriggerFactoryBean();
        tigger.setJobDetail(jobDetail);
        // 初始时的cron表达式，可以改成从数据库中获取
        tigger.setCronExpression(&quot;0/2 * * * * ?&quot;);
        // trigger的name
        tigger.setName(&quot;tiggerName&quot;);
        return tigger;

    }

    /**
     * Details：定义quartz调度工厂
     */
    @Bean(name = &quot;scheduler&quot;)
    public SchedulerFactoryBean schedulerFactory(Trigger trigger) {
        SchedulerFactoryBean bean = new SchedulerFactoryBean();
        // 用于quartz集群,QuartzScheduler 启动时更新己存在的Job
        bean.setOverwriteExistingJobs(true);
        // 延时启动，应用启动1秒后
        bean.setStartupDelay(1);
        // 注册触发器
        bean.setTriggers(trigger);
        return bean;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;新建Task任务&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Service
public class Task3 {

    @Resource(name = &quot;jobTrigger&quot;)
    private CronTrigger cronTrigger;

    @Resource(name = &quot;scheduler&quot;)
    private Scheduler scheduler;

    private static Log logger = LogFactory.getLog(Task3.class);

    public void task() {
        logger.info(&quot;Task3---------&quot; + new Date());
    }

    /**
     * 设置cron并重启定时器
     * @param cron cron值
     */
    public void setCron(String cron) {
        try {
            // 表达式调度构建器
            CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(cron);
            // 按新的cronExpression表达式重新构建trigger
            CronTrigger trigger = (CronTrigger) scheduler.getTrigger(cronTrigger.getKey());
            trigger = trigger.getTriggerBuilder().withIdentity(cronTrigger.getKey())
                    .withSchedule(scheduleBuilder).build();
            // 按新的trigger重新设置job执行
            scheduler.rescheduleJob(cronTrigger.getKey(), trigger);
        } catch (SchedulerException e) {
            logger.info(&quot;cron表达式错误&quot;);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中&lt;code&gt;setCron&lt;/code&gt;方法可以进行重新设定任务调度时间&lt;/p&gt;
&lt;h3 id=&quot;threadpooltaskscheduler-runnable方式&quot;&gt;ThreadPoolTaskScheduler Runnable方式&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Task4 implements Runnable {

    private ThreadPoolTaskScheduler threadPoolTaskScheduler;

    private static Log logger = LogFactory.getLog(Task4.class);

    @Override
    public void run() {
        logger.info(&quot;Task4================&quot; + new Date());
    }

    /**
     * 设置cron并启动
     * @param cronExp cron值
     */
    public void reStart(String cronExp) {
        if (null != this.threadPoolTaskScheduler) {
            ScheduledExecutorService scheduledExecutorService = this.threadPoolTaskScheduler.getScheduledExecutor();
            if (!scheduledExecutorService.isShutdown()) {
                scheduledExecutorService.shutdownNow();
            }

            this.threadPoolTaskScheduler.destroy();
        }

        if (null != cronExp &amp;amp;&amp;amp; cronExp.trim().length() &amp;gt; 0) {
            this.threadPoolTaskScheduler = new ThreadPoolTaskScheduler();
            this.threadPoolTaskScheduler.setThreadNamePrefix(&quot;task4&quot;);
            this.threadPoolTaskScheduler.initialize();
            this.threadPoolTaskScheduler.schedule(this, new CronTrigger(cronExp));
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中reStart可以进行任务启动和重新设置任务调度时间,调用方式如下所示&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
     * 初始化task4
     * 这里的代码不应该写在rest层上， 应该写在service层上
     */
    @PostConstruct
    private void initTask4() {
        //初始化task4任务调度器cron，可以从数据库中查询到cron值
        setTask4Cron(&quot;0/3 * * * * ?&quot;);
    }

    /**
     * 改变task4的cron
     * @param cron cron值
     * @return 成功标志
     */
    @RequestMapping(value = { &quot;/setTask4Cron&quot; }, method = RequestMethod.GET)
    @ResponseBody
    public String setTask4Cron(String cron) {
        if (null == task4) {
            task4 = new Task4();
        }

        task4.reStart(cron);
        return &quot;success&quot;;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;initTask4&lt;/code&gt;方法加了&lt;code&gt;@PostConstruct&lt;/code&gt;'注解,可以在项目启动时自动根据cron来启动任务,&lt;code&gt;setTask4Cron&lt;/code&gt;方法可以重新调置任务时间&lt;/p&gt;
&lt;p&gt;四个任务的效果如下:&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/555177/201903/555177-20190317135222745-1116672380.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 17 Mar 2019 05:54:00 +0000</pubDate>
<dc:creator>cnJun</dc:creator>
<og:description>使用@EnableScheduling方式 xml配置方式 启动加入读取 文件 bean创建工厂方式 使用到的 包 新建 文件 新建Task任务 其中 方法可以进行重新设定任务调度时间 ThreadP</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cnJun/p/10546745.html</dc:identifier>
</item>
<item>
<title>JavaScript之扑朔迷离的this - Gerryli</title>
<link>http://www.cnblogs.com/gerry2019/p/10546752.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gerry2019/p/10546752.html</guid>
<description>&lt;p&gt;　　JavaScript这门语言中，最令人迷惑的地方有三个，闭包、this、原型。针对大多数人，可以利用词法作用域等避开this的坑，但是我们不能一直生活在舒适区，要敢于打破砂锅问到底，对我们来说也是一种提升。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　一、一般对this关键字的误解：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　1、&lt;strong&gt;this指向函数自身&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　2、&lt;strong&gt;this指向函数声明的词法作用域&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　我们可以看以下一段代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; test() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;             test.a = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.a = 2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            console.log(test.a);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             console.log(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.a);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             console.log(test.a === &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.a);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        test();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         console.dir(test);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在上面这段代码中，我们在全局声明一个方法test,给test中的a属性赋值1，当前方法中的this中的a属性赋值2，加入this指向函数自身，那么test.a === this,a并且都等于2.&lt;/p&gt;
&lt;p&gt;下面我们来看下这段代码的运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1107056/201903/1107056-20190317122533821-515504561.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1107056/201903/1107056-20190317120919329-13882299.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从上可以看出，scopes为全局作用域window，this也指向这里，虽然函数本身也是一个对象，但是this并不指向这里。&lt;/p&gt;
&lt;p&gt;　　有一点我们一定要记住，&lt;strong&gt;this是在运行时进行绑定的，并不是在编写时绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;既然this是在运行时绑定的，那我们有没有办法改变当前this的绑定，使其不指向window，而指向方法test呢？答案是肯定的，我们可以借助一些强制绑定方法，如&lt;strong&gt;call、apply、bind&lt;/strong&gt;来改变this的指向，我们可以将代码改成下面这种方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; test() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;             test.a = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.a = 2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            console.log(test.a);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             console.log(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.a);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             console.log(test.a === &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.a);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        test.call(test);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         console.dir(test);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1107056/201903/1107056-20190317122349943-495786222.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1107056/201903/1107056-20190317122502211-897935197.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　接下来我们看下this是否指向函数的词法作用域，以下有段比较有意思的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; parent() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; a = 2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;function&lt;/span&gt;&lt;span&gt; child() {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 console.log(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.a)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            child();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         parent();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　假如this指向函数的词法作用域，那么child方法中的this.a应该是存在，实际上的执行结果如下，child中的this指向仍为window：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1107056/201903/1107056-20190317155210600-1475745819.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1107056/201903/1107056-20190317155305753-1647443794.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　实际上，&lt;strong&gt;在JavaScript内部，作用域确实和对象类似，可见的标识符都是它的属性。但是作用域“对象”无法通过JavaScript代码访问，它存在JavaScript引擎内部。&lt;/strong&gt;所以每当你想要把this和词法作用域的查找混合使用时，一定要提醒自己，这是无法实现的。&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　二、this的绑定规则&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　this的绑定规则大致分为以下几类：&lt;/p&gt;
&lt;p&gt;　　　　　　2.1 默认绑定&lt;/p&gt;
&lt;p&gt;　　　　　　2.2 隐式绑定&lt;/p&gt;
&lt;p&gt;　　　　　　2.3 显式绑定&lt;/p&gt;
&lt;p&gt;　　　　　　2.4 new绑定&lt;/p&gt;
&lt;p&gt;　　　　2.1 默认绑定&lt;/p&gt;
&lt;p&gt;　　　　　　上述示例中this的指向是指向window的，他们都有一个共同的特征，不带任何修饰的函数引用进行调用的，因此只能使用默认绑定，无法应用其他规则&lt;/p&gt;
&lt;p&gt;　　　　2.2 隐式绑定&lt;/p&gt;
&lt;p&gt;　　　　　　隐式绑定首先需要考虑的规则就是&lt;strong&gt;调用位置是否有上下文对象，或者说是否被某个对象拥有或包含&lt;/strong&gt;，例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1107056/201903/1107056-20190317131235015-381958418.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里的this就是指向对象obj。还有类似一些DOM事件的绑定，document.getElementById('xxx').addEventListener('click', function(){xxx});回调方法中的this是指向选择器选中的元素的。这种情况下可以简单的理解为this指向调用方法.前面的那个对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1107056/201903/1107056-20190317131737446-1550318650.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2.3 显式绑定&lt;/p&gt;
&lt;p&gt;　　　显示绑定在开发过程中运用的比较多，借助于这些显式绑定方法，可以直接改变当前方法的this指向，使得js语言非常的灵活。主要有call、apply和bind三种，基本使用如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; sum() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;             console.log(&lt;span&gt;this&lt;/span&gt;.a + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.b);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; obj1 =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             a: 1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             b: 2
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; test =&lt;span&gt; sum.bind(obj1);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         sum.call(obj1); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         sum.apply(obj1); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         test(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意事项：&lt;/p&gt;
&lt;p&gt;　　　　call &amp;amp;&amp;amp; apply第一个参数接受的是this对象，call第二个参数以后可以接受字符串形式的参数，apply接受的是一个类数组/数组参数&lt;/p&gt;
&lt;p&gt;　　　　将null || undefined作为this的绑定对象传入call/apply/bind时，这些值在调用时会被忽略，实际应用的是默认绑定规则&lt;/p&gt;
&lt;p&gt;　　2.4 new绑定&lt;/p&gt;
&lt;p&gt;　　　　JavaScript语言中的new操作符和其他面向对象语言中的new操作符不大一样，因为在JavaScript中没有对象的概念。所有的函数都可以使用new来调用，new的调用又称为构造函数调用。在构造函数调用过程中，会自动执行下面的操作。&lt;/p&gt;
&lt;p&gt;　　1、创建（或者说构造）一个全新的对象&lt;/p&gt;
&lt;p&gt;　　2、这个对象会被执行[[Prototype]]连接&lt;/p&gt;
&lt;p&gt;　　3、这个新对象会绑定到函数调用的this&lt;/p&gt;
&lt;p&gt;　　4、如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象&lt;/p&gt;
&lt;p&gt;　　构造函数也是js中常用的一种设计模式，如以下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Test(a, b) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.a =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.b =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.add = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;debugger&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 console.log(&lt;span&gt;this&lt;/span&gt;.a + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.b);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; cc = &lt;span&gt;new&lt;/span&gt; Test(1, 2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        cc.add();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         console.log(cc);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在new调用过程中，返回了一个新对象，并且该对象的this指向Test；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1107056/201903/1107056-20190317135322422-1926818074.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　如有问题，烦请及时指出，谢谢！&lt;/p&gt;
</description>
<pubDate>Sun, 17 Mar 2019 05:54:00 +0000</pubDate>
<dc:creator>Gerryli</dc:creator>
<og:description>JavaScript这门语言中，最令人迷惑的地方有三个，闭包、this、原型。针对大多数人，可以利用词法作用域等避开this的坑，但是我们不能一直生活在舒适区，要敢于打破砂锅问到底，对我们来说也是一种</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gerry2019/p/10546752.html</dc:identifier>
</item>
<item>
<title>#1   爬虫：豆瓣图书TOP250 「requests、BeautifulSoup」 - MinuteSheep</title>
<link>http://www.cnblogs.com/minutesheep/p/10546003.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/minutesheep/p/10546003.html</guid>
<description>&lt;h4&gt;一、项目背景&lt;/h4&gt;
&lt;p&gt;随着时代的发展，国人对于阅读的需求也是日益增长，既然要阅读，就要读好书，什么是好书呢？本项目选择以豆瓣图书网站为对象，统计其排行榜的前250本书籍。&lt;/p&gt;
&lt;h4&gt;二、项目介绍&lt;/h4&gt;
&lt;p&gt;本项目使用Python爬虫技术统计豆瓣图书网站上排名前250的书籍信息，包括书名、作者、出版社、出版日期、价格、评星、简述信息&lt;/p&gt;
&lt;p&gt;将获取到的信息存储在Mysql数据库中&lt;/p&gt;
&lt;h4&gt;三、项目流程&lt;/h4&gt;
&lt;h4&gt;3.1 分析第一页&lt;/h4&gt;
&lt;p&gt;第一页地址为：&lt;a href=&quot;https://book.douban.com/top250&quot;&gt;https://book.douban.com/top250&lt;/a&gt;，打开后页面呈现为如下： &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1443622/201903/1443622-20190317111856010-1566063575.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 我们需要获得的信息为每一本书的所有信息： &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1443622/201903/1443622-20190317112217718-443220868.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以思路为：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解析这一页---&amp;gt;得到这一页所有图书的信息&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;3.2 解析第一页&lt;/h4&gt;
&lt;p&gt;使用开发者模式查看网页源代码（Chrome浏览器按F12），选择network后，刷新网页，效果如下图： &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1443622/201903/1443622-20190317113606490-1216824039.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 之后点击top250---&amp;gt;Response，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1443622/201903/1443622-20190317114044484-1036439324.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时就会在右下方看到网页的源代码，分析源代码可知：&lt;/p&gt;
&lt;p&gt;每一本书都是被「table标签，class=item」扩起来的，比如《追风筝的人》源代码在253-307行。&lt;/p&gt;
&lt;p&gt;使用requests模块获取源代码，Python代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import requests&lt;p&gt;def&lt;/p&gt;&lt;/span&gt;&lt;span&gt; parse_index(url):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    解析索引页面
    返回图书所有信息
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
        response &lt;/span&gt;=&lt;span&gt; requests.get(url)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; response.status_code == 200&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; response.text
    &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, e)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;『防抄袭：读者请忽略这段文字，文章作者是博客园的&lt;a href=&quot;https://www.cnblogs.com/minutesheep/p/10546003.html&quot;&gt;MinuteSheep&lt;/a&gt;』&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;3.3 解析图书详细信息&lt;/h4&gt;
&lt;p&gt;获取到页面源代码后，接下来要做的工作就是解析每一本图书的详细信息了。所以思路继续深入：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解析这一页---&amp;gt;得到这一页所有图书的信息---&amp;gt;解析一本图书---&amp;gt;将图书详细信息保存为字典格式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;书名都是被「a标签」扩起来的，比如《追风筝的人》书名源代码在268-274行；&lt;/p&gt;
&lt;p&gt;作者、出版社、出版日期、价格都是被「p标签，class=pl」扩起来的，比如《追风筝的人》这些信息源代码在285行；&lt;/p&gt;
&lt;p&gt;评星都是被「span标签，class=rating_nums」扩起来的，比如《追风筝的人》评星源代码在292行；&lt;/p&gt;
&lt;p&gt;简述信息都是被「span标签，class=inq」扩起来的，比如《追风筝的人》简述信息源代码在301行。&lt;/p&gt;
&lt;p&gt;Python源代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from bs4 import BeautifulSoup&lt;p&gt;def&lt;/p&gt;&lt;/span&gt;&lt;span&gt; parse(text):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    解析图书详细信息
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    soup &lt;/span&gt;= BeautifulSoup(text.strip(), &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lxml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    books &lt;/span&gt;= soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.item&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    info &lt;/span&gt;=&lt;span&gt; {}
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; book &lt;span&gt;in&lt;/span&gt;&lt;span&gt; books:
        info.clear()
        info[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = book.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.pl2 a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)[0].get_text(
        ).strip().replace(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
        info[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;author&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; book.select(
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.pl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0].get_text().strip().split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)[0].strip()
        info[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;publishers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; book.select(
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.pl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0].get_text().strip().split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[-3&lt;span&gt;].strip()
        info[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; book.select(
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.pl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0].get_text().strip().split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[-2&lt;span&gt;].strip()
        info[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; book.select(
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.pl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0].get_text().strip().split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[-1&lt;span&gt;].strip()
        info[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;star&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = float(book.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.rating_nums&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)[0].get_text())
        info[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;summary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = book.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.inq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)[0].get_text(
        ).strip() &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; book.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.inq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;else&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;
        &lt;span&gt;yield&lt;/span&gt; info
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3.4 将信息保存在Mysql数据库&lt;/h4&gt;
&lt;p&gt;进入Mysql的交互环境，依次建立数据库、创建数据表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;database&lt;/span&gt; douban;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;use&lt;/span&gt; douban;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;&lt;span&gt; book_top250(
&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt; id &lt;span&gt;int&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt; auto_increment,
&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt; title &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;unique&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt; author &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt; publisher &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt; date &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt; price &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt; star &lt;span&gt;float&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt; summary &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后使用Mysql官方推荐的连接库：mysql.connector&lt;/p&gt;
&lt;p&gt;Python代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import mysql.connector&lt;p&gt;def&lt;/p&gt;&lt;/span&gt;&lt;span&gt; open_mysql():
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    连接mysql
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    cnx &lt;/span&gt;= mysql.connector.connect(user=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;minutesheep&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, database=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;douban&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    cursor &lt;/span&gt;=&lt;span&gt; cnx.cursor()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cnx, cursor


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; save_to_mysql(cnx, cursor, info):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    将数据写入mysql
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    add_book_top250 &lt;/span&gt;= (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;INSERT IGNORE INTO book_top250 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                       &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(title,author,publishers,date,price,star,summary) &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                       &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;VALUES (%(title)s, %(author)s, %(publishers)s, %(date)s, %(price)s, %(star)s, %(summary)s)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    cursor.execute(add_book_top250, info)
    cnx.commit()


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; close_mysql(cnx, cursor):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    关闭mysql
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    cursor.close()
    cnx.close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到此为止，一本图书的信息就已经保存完毕了&lt;/p&gt;
&lt;h4&gt;3.5 遍历本页面所有图书&lt;/h4&gt;
&lt;p&gt;现在只需要将本页面的所有图书遍历一遍，就完成了一个页面的抓取&lt;/p&gt;
&lt;p&gt;&lt;span&gt;『防抄袭：读者请忽略这段文字，文章作者是博客园的&lt;a href=&quot;https://www.cnblogs.com/minutesheep/p/10546003.html&quot;&gt;MinuteSheep&lt;/a&gt;』&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;3.6 遍历所有页面&lt;/h4&gt;
&lt;p&gt;最后只需要将所有页面遍历就可以抓取到250本图书了。现在观察每一页的URL变化：&lt;/p&gt;
&lt;p&gt;第一页：&lt;a href=&quot;https://book.douban.com/top250&quot;&gt;https://book.douban.com/top250&lt;/a&gt; 或 &lt;a href=&quot;https://book.douban.com/top250?start=0&quot;&gt;https://book.douban.com/top250?start=0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第二页：&lt;a href=&quot;https://book.douban.com/top250?start=25&quot;&gt;https://book.douban.com/top250?start=25&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第三页：&lt;a href=&quot;https://book.douban.com/top250?start=50&quot;&gt;https://book.douban.com/top250?start=50&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第十页（最后一页）：&lt;a href=&quot;https://book.douban.com/top250?start=225&quot;&gt;https://book.douban.com/top250?start=225&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过观察可知，后一页的URL只需要将前一页的URL最后的数字加25&lt;/p&gt;
&lt;p&gt;基于此，Python代码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def main():
    base_url &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://book.douban.com/top250?start=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    cnx, &lt;/span&gt;&lt;span&gt;cursor&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt; open_mysql()
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; page &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;250&lt;/span&gt;, &lt;span&gt;25&lt;/span&gt;&lt;span&gt;):
        index_url &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; base_url &lt;span&gt;+&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;(page)
        &lt;/span&gt;&lt;span&gt;text&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt; parse_index(index_url)
        info &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; parse(&lt;span&gt;text&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; result &lt;span&gt;in&lt;/span&gt;&lt;span&gt; info:
            save_to_mysql(cnx, &lt;/span&gt;&lt;span&gt;cursor&lt;/span&gt;&lt;span&gt;, result)
    close_mysql(cnx, &lt;/span&gt;&lt;span&gt;cursor&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;四、项目流程图 &lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1443622/201903/1443622-20190317131241325-800465025.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;五、项目源代码&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0a2a609e-fb8a-4e4e-a375-8504f4895f09')&quot; readability=&quot;46.5&quot;&gt;&lt;img id=&quot;code_img_closed_0a2a609e-fb8a-4e4e-a375-8504f4895f09&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0a2a609e-fb8a-4e4e-a375-8504f4895f09&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0a2a609e-fb8a-4e4e-a375-8504f4895f09',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0a2a609e-fb8a-4e4e-a375-8504f4895f09&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;88&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; bs4 &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BeautifulSoup
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; mysql.connector


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; parse_index(url):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    解析索引页面
    返回图书所有信息
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
        response &lt;/span&gt;=&lt;span&gt; requests.get(url)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; response.status_code == 200&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; response.text
    &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, e)


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; parse(text):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    解析图书详细信息
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    soup &lt;/span&gt;= BeautifulSoup(text.strip(), &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lxml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    books &lt;/span&gt;= soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.item&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    info &lt;/span&gt;=&lt;span&gt; {}
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; book &lt;span&gt;in&lt;/span&gt;&lt;span&gt; books:
        info.clear()
        info[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = book.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.pl2 a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)[0].get_text(
        ).strip().replace(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
        info[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;author&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; book.select(
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.pl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0].get_text().strip().split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)[0].strip()
        info[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;publishers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; book.select(
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.pl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0].get_text().strip().split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[-3&lt;span&gt;].strip()
        info[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; book.select(
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.pl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0].get_text().strip().split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[-2&lt;span&gt;].strip()
        info[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; book.select(
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.pl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0].get_text().strip().split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[-1&lt;span&gt;].strip()
        info[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;star&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = float(book.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.rating_nums&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)[0].get_text())
        info[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;summary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = book.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.inq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)[0].get_text(
        ).strip() &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; book.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.inq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;else&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;
        &lt;span&gt;yield&lt;/span&gt;&lt;span&gt; info


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; open_mysql():
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    连接mysql
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    cnx &lt;/span&gt;= mysql.connector.connect(user=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;minutesheep&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, database=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;douban&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    cursor &lt;/span&gt;=&lt;span&gt; cnx.cursor()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cnx, cursor


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; save_to_mysql(cnx, cursor, info):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    将数据写入mysql
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    add_book_top250 &lt;/span&gt;= (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;INSERT IGNORE INTO book_top250 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                       &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(title,author,publishers,date,price,star,summary) &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                       &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;VALUES (%(title)s, %(author)s, %(publishers)s, %(date)s, %(price)s, %(star)s, %(summary)s)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    cursor.execute(add_book_top250, info)
    cnx.commit()


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; close_mysql(cnx, cursor):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    关闭mysql
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    cursor.close()
    cnx.close()


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main():
    base_url &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://book.douban.com/top250?start=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    cnx, cursor &lt;/span&gt;=&lt;span&gt; open_mysql()
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; page &lt;span&gt;in&lt;/span&gt; range(0, 250, 25&lt;span&gt;):
        index_url &lt;/span&gt;= base_url +&lt;span&gt; str(page)
        text &lt;/span&gt;=&lt;span&gt; parse_index(index_url)
        info &lt;/span&gt;=&lt;span&gt; parse(text)
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; result &lt;span&gt;in&lt;/span&gt;&lt;span&gt; info:
            save_to_mysql(cnx, cursor, result)
    close_mysql(cnx, cursor)


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    main()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;源代码&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;整个项目地址：&lt;a href=&quot;https://github.com/MinuteSheep/DoubanBookTop250&quot;&gt;https://github.com/MinuteSheep/DoubanBookTop250&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;提醒：仅供学习使用，商用后果自负&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 17 Mar 2019 05:25:00 +0000</pubDate>
<dc:creator>MinuteSheep</dc:creator>
<og:description>本篇博文利用requests和BeautifulSoup模块爬取豆瓣图书TOP250,保存在Mysql数据库中</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/minutesheep/p/10546003.html</dc:identifier>
</item>
<item>
<title>001.Ansible部署RHCS存储集群 - 木二</title>
<link>http://www.cnblogs.com/itzgr/p/10546584.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itzgr/p/10546584.html</guid>
<description>&lt;h2 align=&quot;left&quot;&gt;一 前期准备&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;1.1 前置条件&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;至少有三个不同的主机运行monitor (MON)节点；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;至少三个直接存储(非外部SAN硬件)的OSD节点主；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;至少两个不同的manager (MGR)节点；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如果使用CephFS，则至少有两个完全相同配置的MDS节点；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如果使用Ceph对象网关，则至少有两个不同的RADOSGW节点。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;一个部署节点，可以使用ceph-ansible包中的Ansible剧本来部署和配置集群。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：Red Hat Ceph存储还支持在Red Hat OpenStack平台计算节点上部署OSDs、MONs、RGWs，但不支持部署mon和osd。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;红帽Ceph存储，默认配置将所有流量放在一个网络上。生产环境中建议公共通信和集群通信配置单独的网络。公共网络用于客户端通信和与mon的通信。集群网络用于OSD心跳、复制、回填和恢复流量。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;1.2 准备工作&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;具备相同操作系统的集群节点，建议RHEL7；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;配置软件仓库（centos epel源、ubuntu apt源、redhat使用subscription-manager命令注册系统）；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;所有节点配置网络及NTP时间同步；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;关闭selinux与防火墙，或放通所有相关流量和端口；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;在部署节点安装ansbile；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;添加hosts，并确保能正确解析到所有主机；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;配置部署节点使用Ansible任务的用户到其他所有节点可以ssh免密登录；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;验证部署节点能够在集群节点上能正常运行ansible任务。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;1.3 其他注意事项&lt;/h3&gt;
&lt;div&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;OSD磁盘不建议使用RAID，Ceph使用复制或纠删码来保护数据&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;在生产环境部署Ceph集群，为便于管理，OSD主机应尽量使用统一的硬件。尽可能配置数量、大小和名称都相同的磁盘，有助于确保性能一致，并且简化故障排除；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;需要确认每个OSD主机提供的OSD的数量。密度较小的存储集群意味着osd守护进程分布到更多的主机上，分发工作负载。密度较高的存储意味着重平衡和数据恢复需要更高的流量&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;h2 align=&quot;left&quot;&gt;附一：组件端口说明&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Monitor&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6789/TCP：Communication within the Ceph cluster&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Manager&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7000/TCP：Communication with the Ceph Manager dashboard&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;8003/TCP：Communication with the Ceph Manager RESTful API via HTTPS&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;9283/TCP：Communication with the Ceph Manager Prometheus plug-in&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;OSD&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6800-7300/TCP：Each OSD uses three ports in this range: one for communicating with clients and monitors over the public network; one for sending data to other OSDs over a cluster network,or over the public network if the former does not exist; and another for exchanging heartbeat packets over a cluster network or over the public network if the former does not exists.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;RADOS Gateway&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7480/TCP：RADOS Gateway uses port 7480/TCP,but you can change it, for example to port 80/TCP,or to port 443/TCP if using the SSL/TLS service.&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;二 部署相关知识点&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;2.1 Ansible介绍&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;略，具体Ansible操作见本博客Ansible文章。&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;2.2 Ansible部署Ceph相关yml&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;/usr/share/ceph-ansible/group_vars/all.yml：所有节点相关yml配置；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;/usr/share/ceph-ansible/group_vars/osds.yml：所有OSD节点的yml配置；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;/usr/share/ceph-ansible/group_vars/client.yml：客户端节点的yml配置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;/usr/share/ceph-ansible：运行Ansible部署的主目录。&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;2.3 yml主要相关参数&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;all.yml参数&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table&gt;&lt;colgroup/&gt;&lt;colgroup&gt;&lt;col width=&quot;206&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;206&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;206&quot;/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;10.5&quot;&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-0-0&quot;&gt;
&lt;p&gt;&lt;span&gt;变量&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-0-1&quot;&gt;
&lt;p&gt;&lt;span&gt;值&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-0-2&quot;&gt;
&lt;p&gt;&lt;span&gt;含义&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-1-0&quot;&gt;
&lt;p&gt;&lt;span&gt;fetch_directory&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-1-1&quot;&gt;
&lt;p&gt;&lt;span&gt;~/ceph-ansible-keys&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;6379-1552753832907-cell-1-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;用于将身份验证密钥复制到集群节点的临时目录的位置。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-2-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph_origin&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-2-1&quot;&gt;
&lt;p&gt;&lt;span&gt;repository&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;6379-1552753832907-cell-2-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;Ceph来源，repository表示使用包存储库&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-3-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph_repository&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-3-1&quot;&gt;
&lt;p&gt;&lt;span&gt;rhcs&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;6379-1552753832907-cell-3-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;用于安装Red Hat的存储库Ceph存储。rhcs使用官方红帽Ceph存储包。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-4-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph_repository_type&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-4-1&quot;&gt;
&lt;p&gt;&lt;span&gt;cdn or iso&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;6379-1552753832907-cell-4-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;rhcs的安装源，CDN或本地ISO映像。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-5-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph_rhcs_iso_path&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-5-1&quot;&gt;
&lt;p&gt;&lt;span&gt;path to iso&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;6379-1552753832907-cell-5-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;如果使用iso存储库类型，则指向Red Hat Ceph存储iso的路径。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-6-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph_rhcs_version&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-6-1&quot;&gt;
&lt;p&gt;&lt;span&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;6379-1552753832907-cell-6-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;Red Hat Ceph安装的版本。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-7-0&quot;&gt;
&lt;p&gt;&lt;span&gt;monitor_interface&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-7-1&quot;&gt;
&lt;p&gt;&lt;span&gt;network interface&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;6379-1552753832907-cell-7-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;Monitor用于侦听的网络接口。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-8-0&quot;&gt;
&lt;p&gt;&lt;span&gt;public_network&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-8-1&quot;&gt;
&lt;p&gt;&lt;span&gt;address and netmask&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;6379-1552753832907-cell-8-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;集群的公共网络的子网，如192.168.122.0/24。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-9-0&quot;&gt;
&lt;p&gt;&lt;span&gt;cluster_network&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-9-1&quot;&gt;
&lt;p&gt;&lt;span&gt;address and netmask&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;6379-1552753832907-cell-9-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;集群专用网络的子网。默认设置为public_network的值。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-10-0&quot;&gt;
&lt;p&gt;&lt;span&gt;journal_size&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;6379-1552753832907-cell-10-1&quot;&gt;
&lt;p&gt;&lt;span&gt;size in MB&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;6379-1552753832907-cell-10-2&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;分配给OSD日志的大小。应该是预期的两倍。在大多数情况下不应小于5120 MB。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：可以在group_vars/all.yml中将common_single_host_mode这个特殊参数设置为true。用于部署一个单节点、集所有功能于一身的Ceph集群作为测试学习使用。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div&gt;
&lt;table&gt;&lt;colgroup/&gt;&lt;colgroup&gt;&lt;col width=&quot;206&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;206&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;206&quot;/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7835-1552754790019-cell-0-0&quot;&gt;
&lt;p&gt;&lt;span&gt;变量&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7835-1552754790019-cell-0-1&quot;&gt;
&lt;p&gt;&lt;span&gt;值&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7835-1552754790019-cell-0-2&quot;&gt;
&lt;p&gt;&lt;span&gt;含义&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7835-1552754790019-cell-1-0&quot;&gt;
&lt;p&gt;&lt;span&gt;osd_scenario&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7835-1552754790019-cell-1-1&quot;&gt;
&lt;p&gt;&lt;span&gt;collocated&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;or non-collocated&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;7835-1552754790019-cell-1-2&quot;&gt;
&lt;p&gt;&lt;span&gt;OSD日志部署类型。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7835-1552754790019-cell-2-0&quot;&gt;
&lt;p&gt;&lt;span&gt;devices&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7835-1552754790019-cell-2-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;用于OSDs的设备的名称列表。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;7835-1552754790019-cell-2-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;用于并行OSD数据和日志分区或非并行OSD数据分区的设备。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7835-1552754790019-cell-3-0&quot;&gt;
&lt;p&gt;&lt;span&gt;dedicated_devices&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7835-1552754790019-cell-3-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;用于非并列OSD期刊的设备名称列表。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; data-cell-id=&quot;7835-1552754790019-cell-3-2&quot;&gt;
&lt;p&gt;&lt;span&gt;OSD日志设备。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;并置方案：假定所有OSD主机具有相同的硬件并使用相同的设备名称。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;group_vars/osds.yml配置示例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;osd_scenario: &quot;collocated&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;devices:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;- /dev/sdb&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;- /dev/sdc&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;- /dev/sdd&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;非并置方案：将不同的存储设备用于OSD数据和OSD日志。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;group_vars/osds.yml配置示例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;osd_scenario: &quot;non-collocated&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;devices:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;- /dev/sdb&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;- /dev/sdc&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;dedicated_devices:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;- /dev/sdd&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;- /dev/sde&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;2.4 客户端相关命令&lt;/h3&gt;
&lt;div&gt;
&lt;table&gt;&lt;colgroup/&gt;&lt;colgroup&gt;&lt;col width=&quot;251&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;275&quot;/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-0-0&quot;&gt;
&lt;p&gt;&lt;span&gt;命令&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-0-1&quot;&gt;
&lt;p&gt;&lt;span&gt;含义&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-1-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph -s&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-1-1&quot;&gt;
&lt;p&gt;&lt;span&gt;查看集群状态。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-2-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph -w&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-2-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;动态观察集群更改。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-3-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph df&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-3-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;查看集群剩余空间状态。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-4-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph osd df&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-4-1&quot;&gt;
&lt;p&gt;&lt;span&gt;查看OSD使用情况。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-5-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph auth get-or-create&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-5-1&quot;&gt;
&lt;p&gt;&lt;span&gt;创建用户。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-6-0&quot;&gt;
&lt;p&gt;&lt;span&gt;aeph auth list&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-6-1&quot;&gt;
&lt;p&gt;&lt;span&gt;查看用户列表。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-7-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph auth caps&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-7-1&quot;&gt;
&lt;p&gt;&lt;span&gt;查看用户权限。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-8-0&quot;&gt;
&lt;p&gt;&lt;span&gt;ceph auth del&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;7184-1552755059163-cell-8-1&quot;&gt;
&lt;p&gt;&lt;span&gt;删除用户。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;2.5 对象object相关命令&lt;/h3&gt;
&lt;div&gt;
&lt;table&gt;&lt;colgroup/&gt;&lt;colgroup&gt;&lt;col width=&quot;339&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;187&quot;/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;5020-1552755343662-cell-0-0&quot;&gt;
&lt;p&gt;&lt;span&gt;命令&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;5020-1552755343662-cell-0-1&quot;&gt;
&lt;p&gt;&lt;span&gt;含义&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;5020-1552755343662-cell-1-0&quot;&gt;
&lt;p&gt;&lt;span&gt;rados -p pool_name ls&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;5020-1552755343662-cell-1-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;查看一个pool中的object。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;5020-1552755343662-cell-2-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;rados -p pool_name put object_name file_path&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;5020-1552755343662-cell-2-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;上传一个文件作为对象。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;5020-1552755343662-cell-3-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;rados -p pool_name get object_name file_path&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;5020-1552755343662-cell-3-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;以文件的形式检索object。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;5020-1552755343662-cell-4-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;rados -p pool_name stat object_name&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;5020-1552755343662-cell-4-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;显示object的统计数据。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;5020-1552755343662-cell-5-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;rados -p pool_name rm object_name&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;5020-1552755343662-cell-5-1&quot;&gt;
&lt;p&gt;&lt;span&gt;删除一个object。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h2 align=&quot;left&quot;&gt;三 正式部署&lt;/h2&gt;
&lt;div&gt;
&lt;table&gt;&lt;colgroup/&gt;&lt;colgroup&gt;&lt;col width=&quot;128&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;97&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;121&quot;/&gt;&lt;/colgroup&gt;&lt;colgroup&gt;&lt;col width=&quot;92&quot;/&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-0-0&quot;&gt;
&lt;p&gt;&lt;span&gt;节点&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-0-1&quot;&gt;
&lt;p&gt;&lt;span&gt;类型&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-0-2&quot;&gt;
&lt;p&gt;&lt;span&gt;IP&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-0-3&quot;&gt;
&lt;p&gt;&lt;span&gt;备注&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-1-0&quot;&gt;
&lt;p&gt;&lt;span&gt;servera&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-1-1&quot;&gt;
&lt;p&gt;&lt;span&gt;部署节点&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-1-2&quot;&gt;
&lt;p&gt;&lt;span&gt;172.25.250.10&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-1-3&quot;&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-2-0&quot;&gt;
&lt;p&gt;&lt;span&gt;serverc&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-2-1&quot;&gt;
&lt;p&gt;&lt;span&gt;mons&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mgrs&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;osds&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-2-2&quot;&gt;
&lt;p&gt;&lt;span&gt;172.25.250.12&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-2-3&quot;&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-3-0&quot;&gt;
&lt;p&gt;&lt;span&gt;serverd&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-3-1&quot;&gt;
&lt;p&gt;&lt;span&gt;mons&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mgrs&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;osds&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-3-2&quot;&gt;
&lt;p&gt;&lt;span&gt;172.25.250.13&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-3-3&quot;&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-4-0&quot;&gt;
&lt;p&gt;&lt;span&gt;servere&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-4-1&quot;&gt;
&lt;p&gt;&lt;span&gt;mons&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mgrs&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span&gt;osds&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-4-2&quot;&gt;
&lt;p&gt;&lt;span&gt;172.25.250.14&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; data-cell-id=&quot;1161-1552756233523-cell-4-3&quot;&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;3.1 部署节点配置主机名&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [root@servera ~]# vi /etc/hosts
&lt;span&gt;  2&lt;/span&gt; 172.25.250.10 servera
&lt;span&gt;  3&lt;/span&gt; 172.25.250.12 serverc
&lt;span&gt;  4&lt;/span&gt; 172.25.250.13 serverd
&lt;span&gt;  5&lt;/span&gt; 172.25.250.14 servere
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：主机名应该能正确解析主机名，若管理节点同时也是一个Ceph节点，也要确认能正确解析自己的主机名和IP地址。本实验环境此3.1步骤可省略。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;3.2 创建相关用户&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [root@servera ~]# useradd student
&lt;span&gt;  2&lt;/span&gt; [root@servera ~]# echo student | passwd --stdin student               #创建非root的管理用户
&lt;span&gt;  3&lt;/span&gt; [root@servera ~]# for i in {a..e}; do echo &quot;====server${i}====&quot;;ssh root@server${i} 'useradd -d /home/student -m student; echo &quot;student&quot; | passwd --stdin student'; done                 #所有OSD server节点创建student用户
&lt;span&gt;  5&lt;/span&gt; [root@servera ~]# for i in {a..e}; do echo &quot;====server${i}====&quot;;ssh root@server${i} 'useradd -d /home/ceph -m ceph; echo &quot;redhat&quot; | passwd --stdin ceph'; done
&lt;span&gt;  6&lt;/span&gt; [root@servera ~]# for i in {a..e}; do echo &quot;====server${i}====&quot;;ssh root@server${i} 'echo &quot;student ALL = (root) NOPASSWD:ALL&quot; &amp;gt; /etc/sudoers'; done
&lt;span&gt;  7&lt;/span&gt; [root@servera ~]# for i in {a..e}; do echo &quot;====server${i}====&quot;;ssh root@server${i} 'chmod 0440 /etc/sudoers'; done
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;3.3 配置部署节点免密钥&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [root@servera ~]# su - student
&lt;span&gt;  2&lt;/span&gt; [student@servera ~]$ ssh-keygen -f ~/.ssh/id_rsa -N ''
&lt;span&gt;  3&lt;/span&gt; [student@servera ~]$ for i in {a..e}; do echo &quot;====server${i}====&quot;;ssh-copy-id student@server$i;ssh-copy-id ceph@server$i; done
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;3.4 配置Ansible Inventory&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ sudo vi /usr/share/ceph-ansible/ansible.cfg
&lt;span&gt;  2&lt;/span&gt; log_path = /tmp/ansible.log                   #修改日志路径为student用户可写入的/tmp路径
&lt;span&gt;  3&lt;/span&gt; deprecation_warnings = False          #禁用在ansible-playbook输出结果相关必须要警告
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：Ansible默认使用/etc/ansible/hosts作为Inventory文件，也可使用-f参数手动指定其他文件。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ sudo vi /etc/ansible/hosts
&lt;span&gt;  2&lt;/span&gt; [mons]
&lt;span&gt;  3&lt;/span&gt; server[c:e]
&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; [mgrs]
&lt;span&gt;  6&lt;/span&gt; server[c:e]
&lt;span&gt;  7&lt;/span&gt; [student@servera ~]$ ansible mons -m ping             #测试mons组节点通信
&lt;span&gt;  8&lt;/span&gt; [student@servera ~]$ ansible mgrs -m ping             #测试mgrs组节点通信
&lt;span&gt;  9&lt;/span&gt; [student@servera ~]$ ansible mons -m command -a id    #通过命令测试mons组节点
&lt;span&gt; 10&lt;/span&gt; [student@servera ~]$ ansible mgrs -m command -a id    #通过命令测试mgrs组节点
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：ceph ansible playbook为每种Ceph节点类型使用一个主机组：monitors节点使用mons, osds节点使用osds，managers节点使用mgrs，MDSs使用mdss, Ceph客户端使用clients, RADOS网关节点使用raws, iSCSI网关使用iscsi-gws，启用RBD mirroring使用rd-mirror。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;因此需要需要根据Ceph主机的角色将它们在对应的Inventory文件中配置为对应的组。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;3.5 创建site.yml&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ cd /usr/share/ceph-ansible/
&lt;span&gt;  2&lt;/span&gt; [student@servera ceph-ansible]$ sudo cp site.yml.sample site.yml
&lt;span&gt;  3&lt;/span&gt; [student@servera ceph-ansible]$ sudo vi site.yml
&lt;span&gt;  4&lt;/span&gt; #……
&lt;span&gt;  5&lt;/span&gt; - hosts: osds
&lt;span&gt;  6&lt;/span&gt;   gather_facts: false
&lt;span&gt;  7&lt;/span&gt;   become: True
&lt;span&gt;  8&lt;/span&gt;   serial: 1                                   #在osd（80行左右）添加此行
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：添加serial: 1添，会减慢了OSD的部署，但是使我们更有可能预测哪个OSD编号被分配给哪个OSD主机，以便将来的实验室练习。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;3.6 创建all.yml&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ cd /usr/share/ceph-ansible/group_vars/
&lt;span&gt;  2&lt;/span&gt; [student@servera group_vars]$ sudo cp all.yml.sample all.yml
&lt;span&gt;  3&lt;/span&gt; [student@servera group_vars]$ sudo vi all.yml
&lt;span&gt;  4&lt;/span&gt; ---
&lt;span&gt;  5&lt;/span&gt; dummy:
&lt;span&gt;  6&lt;/span&gt; ntp_service_enabled: false                    #本实验采用chrony进行时钟同步
&lt;span&gt;  7&lt;/span&gt; ceph_origin: repository
&lt;span&gt;  8&lt;/span&gt; ceph_repository: rhcs
&lt;span&gt;  9&lt;/span&gt; ceph_rhcs_version: &quot;3&quot;
&lt;span&gt; 10&lt;/span&gt; ceph_repository_type: cdn
&lt;span&gt; 11&lt;/span&gt; rbd_cache: &quot;true&quot;                             #开启RBD回写缓存
&lt;span&gt; 12&lt;/span&gt; rbd_cache_writethrough_until_flush: &quot;false&quot;   #在切换回写之前，不从写透开始。
&lt;span&gt; 13&lt;/span&gt; rbd_client_directories: false         #不要创建客户机目录(它们应该已经存在)。
&lt;span&gt; 14&lt;/span&gt; monitor_interface: eth0
&lt;span&gt; 15&lt;/span&gt; journal_size: 1024                            #本环境存储设备很小，OSD日志比通常建议的要小
&lt;span&gt; 16&lt;/span&gt; public_network: 172.25.250.0/24
&lt;span&gt; 17&lt;/span&gt; cluster_network: &quot;{{ public_network }}&quot;
&lt;span&gt; 18&lt;/span&gt; ceph_conf_overrides:
&lt;span&gt; 19&lt;/span&gt;   global:
&lt;span&gt; 20&lt;/span&gt;     mon_osd_allow_primary_affinity: 1
&lt;span&gt; 21&lt;/span&gt;     mon_clock_drift_allowed: 0.5              #允许MON时钟间隔最多0.5秒
&lt;span&gt; 22&lt;/span&gt;     osd_pool_default_size: 2
&lt;span&gt; 23&lt;/span&gt;     osd_pool_default_min_size: 1              #降低存储池复制大小的默认设置
&lt;span&gt; 24&lt;/span&gt;     mon_pg_warn_min_per_osd: 0                #见提示一
&lt;span&gt; 25&lt;/span&gt;     mon_pg_warn_max_per_osd: 0                #见提示二
&lt;span&gt; 26&lt;/span&gt;     mon_pg_warn_max_object_skew: 0            #见提示三
&lt;span&gt; 27&lt;/span&gt;   client:
&lt;span&gt; 28&lt;/span&gt;     rbd_default_features: 1                   #仅为以后的练习启用一组特定的客户机功能
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示一：根据每个OSD的pg数量关闭集群健康警告。通常，第一个变量被设置为30，如果OSD中的每个“in”平均少于30个pg，集群就会发出警告。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示二：此变量默认值为300，如果OSD中的每个“in”平均超过300个pg，集群就会发出警告，在本实验的小集群中可能没有很多pg，因此采用禁用。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示三：根据某个池中对象的数量大于集群中一组池中对象的平均数量，关闭集群健康警告。同样，我们有一个非常小的集群，这避免了通常指示我们需要调优集群的额外警告。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;3.7 正式部署Ceph集群&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ cd /usr/share/ceph-ansible/
&lt;span&gt;  2&lt;/span&gt; [student@servera ceph-ansible]$ ansible-playbook site.yml
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130459855-376041311.png&quot;&gt;&lt;img width=&quot;610&quot; height=&quot;48&quot; title=&quot;001&quot; alt=&quot;001&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130500272-464766020.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：若部署成功，则对于每个MON节点，前面的命令输出应该显示failed=0。在playbook执行过程中，可能会有许多非致命的警告，它们不会被当做“失败”任务，可以忽略。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;3.8 确认验证Ceph集群&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ ssh ceph@serverc ceph -s
&lt;/pre&gt;&lt;/div&gt;
&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130500559-1620787609.png&quot;&gt;&lt;img width=&quot;423&quot; height=&quot;242&quot; title=&quot;002&quot; alt=&quot;002&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130501081-1976226884.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ ssh ceph@serverc cat /etc/ceph/ceph.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130501550-798494275.png&quot;&gt;&lt;img width=&quot;493&quot; height=&quot;275&quot; title=&quot;003&quot; alt=&quot;003&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130501842-379776859.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ ssh ceph@serverc ps aux | grep ceph-mon
&lt;/pre&gt;&lt;/div&gt;
&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130502082-237800561.png&quot;&gt;&lt;img width=&quot;1160&quot; height=&quot;33&quot; title=&quot;004&quot; alt=&quot;004&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130502387-1566259894.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;3.9 创建osds.yml&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ cd /usr/share/ceph-ansible/group_vars/
&lt;span&gt;  2&lt;/span&gt; [student@servera group_vars]$ sudo cp osds.yml.sample osds.yml
&lt;span&gt;  3&lt;/span&gt; [student@servera group_vars]$ sudo vi osds.yml
&lt;span&gt;  4&lt;/span&gt; ---
&lt;span&gt;  5&lt;/span&gt; dummy:
&lt;span&gt;  6&lt;/span&gt; osd_scenario: &quot;collocated&quot;                    #OSD使用并列的OSD形式
&lt;span&gt;  7&lt;/span&gt; devices:
&lt;span&gt;  8&lt;/span&gt;   - /dev/vdb                          #使用/dev/vdb作为后端存储设备
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;3.10 配置Ansible Inventory&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ sudo vi /etc/ansible/hosts
&lt;span&gt;  2&lt;/span&gt; [mons]
&lt;span&gt;  3&lt;/span&gt; server[c:e]
&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; [mgrs]
&lt;span&gt;  6&lt;/span&gt; server[c:e]
&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt; [osds]
&lt;span&gt;  9&lt;/span&gt; server[c:e]                                   #追加osds组
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;3.11 正式部署OSD节点&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ cd /usr/share/ceph-ansible/
&lt;span&gt;  2&lt;/span&gt; [student@servera ceph-ansible]$ ansible-playbook site.yml
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130502854-1307923424.png&quot;&gt;&lt;img width=&quot;608&quot; height=&quot;49&quot; title=&quot;005&quot; alt=&quot;005&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130503210-761403327.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：若部署成功，则对于每个OSD节点，前面的命令输出应该显示failed=0。在playbook执行过程中，可能会有许多非致命的警告，它们不会被当做“失败”任务，可以忽略。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;3.12 确认验证OSD节点&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ ssh ceph@serverc ceph -s
&lt;/pre&gt;&lt;/div&gt;
&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130503488-1542765466.png&quot;&gt;&lt;img width=&quot;454&quot; height=&quot;246&quot; title=&quot;006&quot; alt=&quot;006&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130503772-7791241.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ ssh ceph@serverc ceph -w            #使用此命令监视集群事件
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：ceph -w命令将继续显示集群的运行状况和当前事件。要终止该命令，可按ctrl+c。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;3.13 测试及验证&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ sudo systemctl stop ceph-mon.target    #停止serverc的mon进程
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph -s                                     #观察Ceph状态
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130504046-799704241.png&quot;&gt;&lt;img width=&quot;535&quot; height=&quot;256&quot; title=&quot;007&quot; alt=&quot;007&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130504338-1335256228.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ sudo systemctl start ceph-mon.target   #重启开启mon进程
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ sudo systemctl stop ceph-osd.target #停止serverc的osd进程
&lt;span&gt;  3&lt;/span&gt; [ceph@serverc ~]$ ceph -s                                     #观察Ceph状态
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130504521-112840713.png&quot;&gt;&lt;img width=&quot;422&quot; height=&quot;278&quot; title=&quot;008&quot; alt=&quot;008&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130504737-2134034179.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph osd tree                          #查看osd情况
&lt;/pre&gt;&lt;/div&gt;
&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130504950-2028527625.png&quot;&gt;&lt;img width=&quot;461&quot; height=&quot;150&quot; title=&quot;009&quot; alt=&quot;009&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130505192-13320889.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ sudo systemctl start ceph-osd.target   #重启开启osd进程
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ sudo systemctl stop ceph-osd@0              #停止serverc的osd id为0的进程
&lt;span&gt;  3&lt;/span&gt; [ceph@serverc ~]$ ceph osd tree                               #查看osd情况
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130505493-2146941215.png&quot;&gt;&lt;img width=&quot;464&quot; height=&quot;147&quot; title=&quot;010&quot; alt=&quot;010&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130505731-1656089332.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ sudo systemctl start ceph-osd@0        #重启开启osd 0进程
&lt;span&gt;  2&lt;/span&gt; [ceph@serverc ~]$ ceph -s                             #观察Ceph状态
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130506021-631691773.png&quot;&gt;&lt;img width=&quot;418&quot; height=&quot;241&quot; title=&quot;011&quot; alt=&quot;011&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130506221-1145588369.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@serverc ~]$ ceph -v                        #查看Ceph版本
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;3.14 创建client.yml&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ cd /usr/share/ceph-ansible/group_vars/
&lt;span&gt;  2&lt;/span&gt; [student@servera group_vars]$ sudo cp clients.yml.sample clients.yml
&lt;span&gt;  3&lt;/span&gt; [student@servera group_vars]$ sudo vi clients.yml
&lt;span&gt;  4&lt;/span&gt; ---
&lt;span&gt;  5&lt;/span&gt; dummy:
&lt;span&gt;  6&lt;/span&gt; copy_admin_key: true
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;3.15 配置Ansible Inventory&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ sudo vi /etc/ansible/hosts
&lt;span&gt;  2&lt;/span&gt; [mons]
&lt;span&gt;  3&lt;/span&gt; server[c:e]
&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; [mgrs]
&lt;span&gt;  6&lt;/span&gt; server[c:e]
&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt; [osds]
&lt;span&gt;  9&lt;/span&gt; server[c:e]
&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt; [clients]
&lt;span&gt; 12&lt;/span&gt; servera                                       #追加client客户端
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3.16 正式部署client节点&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ cd /usr/share/ceph-ansible/
&lt;span&gt;  2&lt;/span&gt; [student@servera ceph-ansible]$ ansible-playbook site.yml
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130506410-482493987.png&quot;&gt;&lt;img width=&quot;608&quot; height=&quot;65&quot; title=&quot;012&quot; alt=&quot;012&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130506746-1301595168.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：若部署成功，则对于每个OSD节点，前面的命令输出应该显示failed=0。在playbook执行过程中，可能会有许多非致命的警告，它们不会被当做“失败”任务，可以忽略。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;3.17 确认验证&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [kiosk@foundation0 ~]$ ssh ceph@servera                  #使用ceph用户登录servera
&lt;span&gt;  2&lt;/span&gt; [ceph@servera ~]$ ceph -s                                     #查看Ceph集群
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130507203-161494671.png&quot;&gt;&lt;img width=&quot;718&quot; height=&quot;291&quot; title=&quot;013&quot; alt=&quot;013&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130507466-437188731.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h2 align=&quot;left&quot;&gt;四 扩容Ceph集群&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;4.1 扩容前置条件&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;在不中断服务的前提下，扩展ceph集群存储容量&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可通过ceph-ansible以两种方式扩展集群中的存储：&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;可以添加额外OSD主机到集群（scale-out）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可以添加额外存储设备到现有的OSD主机（scale-up）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;开始部署额外的OSD前，需确保集群处于HEALTH_OK状态&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;相关主机解析已正常添加指hosts&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;4.2 创建相关用户&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [root@serverf ~]# useradd student
&lt;span&gt;  2&lt;/span&gt; [root@serverf ~]# echo student | passwd --stdin student                 #创建非root的管理用户
&lt;span&gt;  3&lt;/span&gt; [root@serverf ~]# useradd -d /home/student -m student; echo &quot;student&quot; | passwd --stdin student'                                                                                         #所有OSD server节点创建student用户
&lt;span&gt;  4&lt;/span&gt; [root@serverf ~]# useradd -d /home/ceph -m ceph; echo &quot;redhat&quot; | passwd --stdin ceph'
&lt;span&gt;  5&lt;/span&gt; [root@serverf ~]# echo &quot;student ALL = (root) NOPASSWD:ALL&quot; &amp;gt; /etc/sudoers'
&lt;span&gt;  6&lt;/span&gt; [root@serverf ~]# chmod 0440 /etc/sudoers
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;4.3 配置部署节点免密钥&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [root@servera ~]# su - student
&lt;span&gt;  2&lt;/span&gt; [student@servera ~]$ ssh-copy-id student@serverf;ssh-copy-id ceph@serverf
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;4.4 扩容额外的OSD主机&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ sudo vi /etc/ansible/hosts          #配置Ansible Inventory
&lt;span&gt;  2&lt;/span&gt; [student@servera ~]$ sudo vi /etc/ansible/hosts
&lt;span&gt;  3&lt;/span&gt; [mons]
&lt;span&gt;  4&lt;/span&gt; server[c:e]
&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; [mgrs]
&lt;span&gt;  7&lt;/span&gt; server[c:e]
&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; [osds]
&lt;span&gt; 10&lt;/span&gt; server[c:e]
&lt;span&gt; 11&lt;/span&gt; serverf                                                       #追加serverf
&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt; [clients]
&lt;span&gt; 14&lt;/span&gt; servera
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;4.5 添加额外OSD存储设备&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; devices:
&lt;span&gt;  2&lt;/span&gt;   - /dev/vdb
&lt;span&gt;  3&lt;/span&gt;   - /dev/vdc
&lt;span&gt;  4&lt;/span&gt;   - /dev/vdd                                          #追加存储设备
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;4.6 正式部署OSD节点&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [student@servera ~]$ cd /usr/share/ceph-ansible/
&lt;span&gt;  2&lt;/span&gt; [student@servera ceph-ansible]$ ansible-playbook site.yml
&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130507776-968534126.png&quot;&gt;&lt;img width=&quot;605&quot; height=&quot;79&quot; title=&quot;014&quot; alt=&quot;014&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130508164-320856970.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;提示：若部署成功，则对于每个OSD节点，前面的命令输出应该显示failed=0。在playbook执行过程中，可能会有许多非致命的警告，它们不会被当做“失败”任务，可以忽略。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;4.7 确认验证&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@servera ~]$ ceph -s
&lt;/pre&gt;&lt;/div&gt;
&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130508444-376634566.png&quot;&gt;&lt;img width=&quot;421&quot; height=&quot;242&quot; title=&quot;015&quot; alt=&quot;015&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130508640-2140735461.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt;  [ceph@servera ~]$ ceph osd tree
&lt;/pre&gt;&lt;/div&gt;
&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130508987-812664702.png&quot;&gt;&lt;img width=&quot;479&quot; height=&quot;254&quot; title=&quot;017&quot; alt=&quot;017&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130509226-1098898865.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [ceph@servera ~]$ ceph osd df
&lt;/pre&gt;&lt;/div&gt;
&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130509498-605394147.png&quot;&gt;&lt;img width=&quot;479&quot; height=&quot;254&quot; title=&quot;017&quot; alt=&quot;017&quot; src=&quot;https://img2018.cnblogs.com/blog/680719/201903/680719-20190317130509789-1546614067.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 17 Mar 2019 05:05:00 +0000</pubDate>
<dc:creator>木二</dc:creator>
<og:description>一 前期准备1.1 前置条件至少有三个不同的主机运行monitor (MON)节点；至少三个直接存储(非外部SAN硬件)的OSD节点主；至少两个不同的manager (MGR)节点；如果使用CephF</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/itzgr/p/10546584.html</dc:identifier>
</item>
<item>
<title>TreeMap 的排序冲突吗 - 快乐菠菜</title>
<link>http://www.cnblogs.com/klbc/p/10546530.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/klbc/p/10546530.html</guid>
<description>&lt;p&gt;今天在网上看到一个问题：&lt;strong&gt;一个已经构建好的 TreeSet，怎么完成倒排序？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网上给出的答案是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;通过TreeSet构造函数传入一个比较器，指定比较器进行排序为原排序的倒叙。
TreeSet的自然排序是根据集合元素的大小，TreeSet将他们以升序排列。如果需要实现定制排序，例如降序，则可以使用Comparator接口。该接口里包含一个int compare（T o1，T o2）方法，该方法用于比较o1和o2的大小。
如果需要实现定制排序，则需要在创建TreeSet集合对象时，并提供一个Comparator对象与该TreeSet集合关联，由该Comparator对象负责集合元素的排序逻辑。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们知道，如果要实现TreeSet 的 排序（或者说让一个TreeSet可用），必须让加入的对象具有可排序性，否则就会报错 java.lang.ClassCastException。&lt;/p&gt;
&lt;p&gt;实现思路有两个（二选一即可）：&lt;/p&gt;
&lt;p&gt;1、加入的对象（相对于TreeMap，就是key对象，TreeSet 是通过 TreeMap 来实现的）需要实现 Comparable 接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cd.demo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.TreeSet;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TreeSetTest1 {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 构造一个可用的TreeSet对象：传入对象实现 Comparable 接口 （按照年龄排序）&lt;/span&gt;
        Set&amp;lt;User&amp;gt; userSet = &lt;span&gt;new&lt;/span&gt; TreeSet&amp;lt;&amp;gt;&lt;span&gt;();
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(5, 32, &quot;阿布1&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(12, 25, &quot;阿布2&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(9, 36, &quot;阿布3&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(20, 34, &quot;阿布4&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(15, 48, &quot;阿布5&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (User u : userSet) {
            System.out.println(u.toString());
        }
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; static 内部类，可以在main方法中 直接使用new User(...)初始化，否则就要：new TreeSetTest().new User(...) 才行&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; User &lt;span&gt;implements&lt;/span&gt; Comparable&amp;lt;User&amp;gt;&lt;span&gt; {
        Integer id;

        Integer age;

        String name;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User(Integer id, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age, String name) {
            &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getId() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(Integer id) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;User [id=&quot; + id + &quot;, age=&quot; + age + &quot;, name=&quot; + name + &quot;]&quot;&lt;span&gt;;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareTo(User arg0) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.age.compareTo(arg0.getAge());
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
User [id=12, age=25, name=阿布2]
User [id=5, age=32, name=阿布1]
User [id=20, age=34, name=阿布4]
User [id=9, age=36, name=阿布3]
User [id=15, age=48, name=阿布5]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、TreeSet初始化时需要一个 Comparator 接口实例 的入参&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cd.demo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Comparator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.TreeSet;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TreeSetTest2 {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 构造一个可用的TreeSet对象：传入一个Comparator 接口实例作为入参 （按照id排序）&lt;/span&gt;
        Set&amp;lt;User&amp;gt; userSet = &lt;span&gt;new&lt;/span&gt; TreeSet&amp;lt;&amp;gt;(&lt;span&gt;new&lt;/span&gt; Comparator&amp;lt;User&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(User arg0, User arg1) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; arg0.getId().compareTo(arg1.getId());
            }
        });
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 因为 userSet 已经有入参 Comparator，故不会报错&lt;/span&gt;
        userSet.add(&lt;span&gt;new&lt;/span&gt; User(5, 32, &quot;阿布1&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(12, 25, &quot;阿布2&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(9, 36, &quot;阿布3&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(20, 34, &quot;阿布4&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(15, 48, &quot;阿布5&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (User u : userSet) {
            System.out.println(u.toString());
        }
    }
&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
        Integer id;

        Integer age;

        String name;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User(Integer id, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age, String name) {
            &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getId() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(Integer id) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;User [id=&quot; + id + &quot;, age=&quot; + age + &quot;, name=&quot; + name + &quot;]&quot;&lt;span&gt;;
        }

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
User [id=5, age=32, name=阿布1]
User [id=9, age=36, name=阿布3]
User [id=12, age=25, name=阿布2]
User [id=15, age=48, name=阿布5]
User [id=20, age=34, name=阿布4]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　那么，现在问题来了，如果TreeSet中 保存的对象实现了 Comparable 接口，而 TreeSet 又传入了外部的 Comparator，会怎么样呢，会出现排序冲突吗？&lt;/p&gt;
&lt;p&gt;看代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cd.demo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Comparator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.TreeSet;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TreeSetTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 构造一个可用的TreeSet对象：要么传入一个Comparator 接口实例作为入参，要么 key 必须实现 Comparable 接口
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 现在同时两个都满足，User内部按照 age 排序，外部 Comparator 按照id 排序，会怎么样呢&lt;/span&gt;
        Set&amp;lt;User&amp;gt; userSet = &lt;span&gt;new&lt;/span&gt; TreeSet&amp;lt;&amp;gt;(&lt;span&gt;new&lt;/span&gt; Comparator&amp;lt;User&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(User arg0, User arg1) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; arg0.getId().compareTo(arg1.getId());
            }
        });
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 因为 userSet 已经有入参 Comparator，故不会报错&lt;/span&gt;
        userSet.add(&lt;span&gt;new&lt;/span&gt; User(5, 32, &quot;阿布1&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(12, 25, &quot;阿布2&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(9, 36, &quot;阿布3&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(20, 34, &quot;阿布4&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(15, 48, &quot;阿布5&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; userSet 构造测试（同时实现内外排序时，按照 Comparator 外部排序来） &lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (User u : userSet) {
            System.out.println(u.toString());
        }
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; static 内部类，可以在main方法中 直接使用new User(...)初始化，否则就要：new TreeSetTest().new User(...) 才行&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; User &lt;span&gt;implements&lt;/span&gt; Comparable&amp;lt;User&amp;gt;&lt;span&gt; {
        Integer id;

        Integer age;

        String name;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User(Integer id, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age, String name) {
            &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getId() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(Integer id) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;User [id=&quot; + id + &quot;, age=&quot; + age + &quot;, name=&quot; + name + &quot;]&quot;&lt;span&gt;;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareTo(User arg0) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.age.compareTo(arg0.getAge());
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
User [id=5, age=32, name=阿布1]
User [id=9, age=36, name=阿布3]
User [id=12, age=25, name=阿布2]
User [id=15, age=48, name=阿布5]
User [id=20, age=34, name=阿布4]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以看出，&lt;strong&gt;如果同时实现了内外排序&lt;/strong&gt;（对象实现 Comparable 接口、TreeSet 初始化 传入 Comparator 接口对象）&lt;strong&gt;，则排序 以 Comparator 的外部排序进行&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;看一下TreeSet 的 add 方法源码，内部其实调用的是TreeMap 的 put：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; V put(K key, V value) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根节点&lt;/span&gt;
  Entry&amp;lt;K,V&amp;gt; t =&lt;span&gt; root;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果根节点为空，则直接创建一个根节点，返回&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (t == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TBD:
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5045147: (coll) Adding null to an empty TreeSet should
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; throw NullPointerException
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; compare(key, key); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; type check&lt;/span&gt;
      root = &lt;span&gt;new&lt;/span&gt; Entry&amp;lt;K,V&amp;gt;(key, value, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
      size &lt;/span&gt;= 1&lt;span&gt;;
      modCount&lt;/span&gt;++&lt;span&gt;;
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 记录比较结果&lt;/span&gt;
  &lt;span&gt;int&lt;/span&gt;&lt;span&gt; cmp;
  Entry&lt;/span&gt;&amp;lt;K,V&amp;gt;&lt;span&gt; parent;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; split comparator and comparable paths
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前使用的比较器&lt;/span&gt;
  &lt;span&gt;Comparator&amp;lt;? &lt;span&gt;super&lt;/span&gt; K&amp;gt; cpr =&lt;/span&gt;&lt;span&gt;&lt;span&gt; comparator&lt;/span&gt; ;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果比较器不为空，就是用指定的比较器来维护TreeMap的元素顺序&lt;/span&gt;
  &lt;span&gt;&lt;span&gt;if&lt;/span&gt; (cpr != &lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt; {
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; do while循环，查找key要插入的位置（也就是新节点的父节点是谁）&lt;/span&gt;
      &lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 记录上次循环的节点t&lt;/span&gt;
          parent =&lt;span&gt; t;
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 比较当前节点的key和新插入的key的大小&lt;/span&gt;
          cmp =&lt;span&gt; cpr.compare(key, t. key);
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新插入的key小的话，则以当前节点的左孩子节点为新的比较节点&lt;/span&gt;
          &lt;span&gt;if&lt;/span&gt; (cmp &amp;lt; 0&lt;span&gt;)
              t &lt;/span&gt;=&lt;span&gt; t. left;
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新插入的key大的话，则以当前节点的右孩子节点为新的比较节点&lt;/span&gt;
          &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (cmp &amp;gt; 0&lt;span&gt;)
              t &lt;/span&gt;=&lt;span&gt; t. right;
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果当前节点的key和新插入的key想的的话，则覆盖map的value，返回&lt;/span&gt;
              &lt;span&gt;return&lt;/span&gt;&lt;span&gt; t.setValue(value);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 只有当t为null，也就是没有要比较节点的时候，代表已经找到新节点要插入的位置&lt;/span&gt;
      } &lt;span&gt;while&lt;/span&gt; (t != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
  }
  &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果比较器为空，则使用key作为比较器进行比较
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里要求key不能为空，并且必须实现Comparable接口&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt; (key == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
          &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullPointerException();
      &lt;span&gt;Comparable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;? &lt;span&gt;super&lt;/span&gt; K&amp;gt; k = (Comparable&amp;lt;? &lt;span&gt;super&lt;/span&gt; K&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;) key&lt;/span&gt;;
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 和上面一样，喜欢查找新节点要插入的位置&lt;/span&gt;
      &lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
          parent &lt;/span&gt;=&lt;span&gt; t;
          &lt;span&gt;cmp &lt;/span&gt;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&lt;span&gt; k.compareTo(t. key)&lt;/span&gt;;
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cmp &amp;lt; 0&lt;span&gt;)
              t &lt;/span&gt;=&lt;span&gt; t. left;
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (cmp &amp;gt; 0&lt;span&gt;)
              t &lt;/span&gt;=&lt;span&gt; t. right;
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
              &lt;span&gt;return&lt;/span&gt;&lt;span&gt; t.setValue(value);
      } &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (t != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 找到新节点的父节点后，创建节点对象&lt;/span&gt;
  Entry&amp;lt;K,V&amp;gt; e = &lt;span&gt;new&lt;/span&gt; Entry&amp;lt;K,V&amp;gt;&lt;span&gt;(key, value, parent);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果新节点key的值小于父节点key的值，则插在父节点的左侧&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (cmp &amp;lt; 0&lt;span&gt;)
      parent. left &lt;/span&gt;=&lt;span&gt; e;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果新节点key的值大于父节点key的值，则插在父节点的右侧&lt;/span&gt;
  &lt;span&gt;else&lt;/span&gt;&lt;span&gt;
      parent. right &lt;/span&gt;=&lt;span&gt; e;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 插入新的节点后，为了保持红黑树平衡，对红黑树进行调整&lt;/span&gt;
&lt;span&gt;  fixAfterInsertion(e);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; map元素个数+1&lt;/span&gt;
  size++&lt;span&gt;;
  modCount&lt;/span&gt;++&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意看上面的下划线部分代码，&lt;strong&gt;jdk 中 默认是先使用 Comparator ，如果没有 Comparator ，才使用对象的 Comparable 接口。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那回到开篇的问题，如果需要实现倒序，就得分两种情况了：&lt;/p&gt;
&lt;p&gt;1、只实现了 Comparable 的倒序；&lt;/p&gt;
&lt;p&gt;2、实现了 Comparator 的倒序。&lt;/p&gt;
&lt;p&gt;这两种情况，都可以通过 重新 建立一个 TreeSet，传入倒序的 Comparator 来实现倒序，伪代码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        Set&amp;lt;User&amp;gt; userSetNew = &lt;span&gt;new&lt;/span&gt; TreeSet&amp;lt;&amp;gt;(&lt;span&gt;new&lt;/span&gt; Comparator&amp;lt;User&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(User arg0, User arg1) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ...; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新的排序逻辑&lt;/span&gt;
&lt;span&gt;            }
        });
        userSetNew.addAll(userSetOld);
        System.out.println(&lt;/span&gt;&quot;---------------  倒序后  ----------------&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (User u : userSetNew ) {
            System.out.println(u.toString());
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个思路有一种投机取巧的方法，就是 compare 方法中默认返回 -1，比如上面的代码实现倒序可以为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cd.demo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Comparator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.TreeSet;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TreeSetTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 构造一个可用的TreeSet对象：要么传入一个Comparator 接口实例作为入参，要么 key 必须实现 Comparable 接口
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 现在同时两个都满足，User内部按照 age 排序，外部 Comparator 按照id 排序，会怎么样呢&lt;/span&gt;
        Set&amp;lt;User&amp;gt; userSet = &lt;span&gt;new&lt;/span&gt; TreeSet&amp;lt;&amp;gt;(&lt;span&gt;new&lt;/span&gt; Comparator&amp;lt;User&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(User arg0, User arg1) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; arg0.getId().compareTo(arg1.getId());
            }
        });
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 因为 userSet 已经有入参 Comparator，故不会报错&lt;/span&gt;
        userSet.add(&lt;span&gt;new&lt;/span&gt; User(5, 32, &quot;阿布1&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(12, 25, &quot;阿布2&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(9, 36, &quot;阿布3&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(20, 34, &quot;阿布4&quot;&lt;span&gt;));
        userSet.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(15, 48, &quot;阿布5&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; userSet 构造测试（同时实现内外排序时，按照 Comparator 外部排序来） &lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (User u : userSet) {
            System.out.println(u.toString());
        }

        Set&lt;/span&gt;&amp;lt;User&amp;gt; userSet2 = &lt;span&gt;new&lt;/span&gt; TreeSet&amp;lt;&amp;gt;(&lt;span&gt;new&lt;/span&gt; Comparator&amp;lt;User&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(User arg0, User arg1) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -1&lt;span&gt;;
            }
        });
        userSet2.addAll(userSet);
        System.out.println(&lt;/span&gt;&quot;---------------  倒序后  ----------------&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (User u : userSet2) {
            System.out.println(u.toString());
        }
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; static 内部类，可以在main方法中 直接使用new User(...)初始化，否则就要：new TreeSetTest().new User(...) 才行&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; User &lt;span&gt;implements&lt;/span&gt; Comparable&amp;lt;User&amp;gt;&lt;span&gt; {
        Integer id;

        Integer age;

        String name;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User(Integer id, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age, String name) {
            &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getId() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(Integer id) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;User [id=&quot; + id + &quot;, age=&quot; + age + &quot;, name=&quot; + name + &quot;]&quot;&lt;span&gt;;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareTo(User arg0) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.age.compareTo(arg0.getAge());
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;55&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
User [id=5, age=32, name=阿布1]
User [id=9, age=36, name=阿布3]
User [id=12, age=25, name=阿布2]
User [id=15, age=48, name=阿布5]
User [id=20, age=34, name=阿布4]
---------------  倒序后  ----------------
User [id=20, age=34, name=阿布4]
User [id=15, age=48, name=阿布5]
User [id=12, age=25, name=阿布2]
User [id=9, age=36, name=阿布3]
User [id=5, age=32, name=阿布1]
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 17 Mar 2019 04:55:00 +0000</pubDate>
<dc:creator>快乐菠菜</dc:creator>
<og:description>今天在网上看到一个问题：一个已经构建好的 TreeSet，怎么完成倒排序？ 网上给出的答案是： 我们知道，如果要实现TreeSet 的 排序（或者说让一个TreeSet可用），必须让加入的对象具有可排</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/klbc/p/10546530.html</dc:identifier>
</item>
<item>
<title>cAdvisor+Prometheus+Grafana监控docker - 渣渣辉</title>
<link>http://www.cnblogs.com/Dev0ps/p/10546276.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Dev0ps/p/10546276.html</guid>
<description>&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　cAdvisor+Prometheus+Grafana监控docker&lt;/p&gt;
&lt;h3&gt;一、cAdvisor(需要监控的主机都要安装)&lt;/h3&gt;
&lt;p&gt;官方地址：&lt;a href=&quot;https://github.com/google/cadvisor&quot; target=&quot;_blank&quot;&gt;https://github.com/google/cadvisor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CAdvisor是&lt;a href=&quot;https://www.baidu.com/s?wd=%E8%B0%B7%E6%AD%8C&amp;amp;tn=24004469_oem_dg&amp;amp;rsv_dl=gh_pl_sl_csd&quot; target=&quot;_blank&quot;&gt;谷歌&lt;/a&gt;开发的用于分析运行中容器的资源占用和性能指标的开源工具。CAdvisor是一个运行时的守护进程，负责收集、聚合、处理和输出运行中容器的信息。&lt;br/&gt;注意在查找相关资料后发现这是最新版cAdvisor的bug，换成版本为google/cadvisor:v0.24.1 就ok了，映射主机端口默认是8080,可以修改。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
sudo docker run \
  --volume=/:/rootfs:ro \
  --volume=/var/run:/var/run:ro \
  --volume=/sys:/sys:ro \
  --volume=/var/lib/docker/:/var/lib/docker:ro \
  --volume=/dev/disk/:/dev/disk:ro \
  --publish=8090:8080 \
  --detach=true \
  --name=cadvisor \
  google/cadvisor:v0.24.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cAdvisor exposes a web UI at its port:&lt;br/&gt;http://&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;/&lt;/p&gt;&lt;p&gt;下图为cAdvisor的web界面，数据实时刷新但是不能存储。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201903/1271786-20190317122502257-1443701453.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt; 查看json格式&lt;br/&gt; http://192.168.247.212:8090/metrics&lt;br/&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201903/1271786-20190317122526632-1968010026.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;二、Prometheus&lt;/h3&gt;
&lt;p&gt;官方地址：&lt;a href=&quot;https://prometheus.io/&quot; target=&quot;_blank&quot;&gt;https://prometheus.io/&lt;/a&gt;&lt;br/&gt;随着容器技术的迅速发展，Kubernetes 已然成为大家追捧的容器集群管理系统。Prometheus 作为生态圈 Cloud Native Computing Foundation（简称：CNCF）中的重要一员,其活跃度仅次于 Kubernetes, 现已广泛用于 Kubernetes 集群的监控系统中。本文将简要介绍 Prometheus 的组成和相关概念，并实例演示 Prometheus 的安装，配置及使用，以便开发人员和云平台运维人员可以快速的掌握 Prometheus。&lt;br/&gt;&lt;span&gt;Prometheus 简介&lt;/span&gt;&lt;br/&gt;Prometheus 是一套开源的系统监控报警框架。它启发于 Google 的 borgmon 监控系统，由工作在 SoundCloud 的 google 前员工在 2012 年创建，作为社区开源项目进行开发，并于 2015 年正式发布。2016 年，Prometheus 正式加入 Cloud Native Computing Foundation，成为受欢迎度仅次于 Kubernetes 的项目。&lt;br/&gt;作为新一代的监控框架，Prometheus 具有以下特点：&lt;/p&gt;&lt;p&gt;    强大的多维度数据模型：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;        时间序列数据通过 metric 名和键值对来区分。&lt;/li&gt;
&lt;li&gt;        所有的 metrics 都可以设置任意的多维标签。&lt;/li&gt;
&lt;li&gt;        数据模型更随意，不需要刻意设置为以点分隔的字符串。&lt;/li&gt;
&lt;li&gt;        可以对数据模型进行聚合，切割和切片操作。&lt;/li&gt;
&lt;li&gt;        支持双精度浮点类型，标签可以设为全 unicode。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;    灵活而强大的查询语句（PromQL）：在同一个查询语句，可以对多个 metrics 进行乘法、加法、连接、取分数位等操作。&lt;br/&gt;    易于管理： Prometheus server 是一个单独的二进制文件，可直接在本地工作，不依赖于分布式存储。&lt;br/&gt;    高效：平均每个采样点仅占 3.5 bytes，且一个 Prometheus server 可以处理数百万的 metrics。&lt;br/&gt;    使用 pull 模式采集时间序列数据，这样不仅有利于本机测试而且可以避免有问题的服务器推送坏的 metrics。&lt;br/&gt;    可以采用 push gateway 的方式把时间序列数据推送至 Prometheus server 端。&lt;br/&gt;    可以通过服务发现或者静态配置去获取监控的 targets。&lt;br/&gt;    有多种可视化图形界面。&lt;br/&gt;    易于伸缩。&lt;/p&gt;&lt;p&gt;需要指出的是，由于数据采集可能会有丢失，所以 Prometheus 不适用对采集数据要 100% 准确的情形。但如果用于记录时间序列数据，Prometheus 具有很大的查询优势，此外，Prometheus 适用于微服务的体系架构&lt;br/&gt;Prometheus 组成及架构&lt;/p&gt;&lt;p&gt;Prometheus 生态圈中包含了多个组件，其中许多组件是可选的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;    Prometheus Server: 用于收集和存储时间序列数据。&lt;/li&gt;
&lt;li&gt;    Client Library: 客户端库，为需要监控的服务生成相应的 metrics 并暴露给 Prometheus server。当 Prometheus server 来 pull 时，直接返回实时状态的 metrics。&lt;/li&gt;
&lt;li&gt;    Push Gateway: 主要用于短期的 jobs。由于这类 jobs 存在时间较短，可能在 Prometheus 来 pull 之前就消失了。为此，这次 jobs 可以直接向 Prometheus server 端推送它们的 metrics。这种方式主要用于服务层面的 metrics，对于机器层面的 metrices，需要使用 node exporter。&lt;/li&gt;
&lt;li&gt;    Exporters: 用于暴露已有的第三方服务的 metrics 给 Prometheus。&lt;/li&gt;
&lt;li&gt;    Alertmanager: 从 Prometheus server 端接收到 alerts 后，会进行去除重复数据，分组，并路由到对收的接受方式，发出报警。常见的接收方式有：电子邮件，pagerduty，OpsGenie, webhook 等。一些其他的工具。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;Prometheus 架构图&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201903/1271786-20190317122711477-790002586.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装步骤：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
wget https://github.com/prometheus/prometheus/releases/download/v2.8.0/prometheus-2.8.0.linux-amd64.tar.gz
tar -xf prometheus-2.8.0.linux-amd64.tar.gz
cd prometheus-2.8.0.linux-amd64
修改配置文件prometheus.yml，添加以下内容
    static_configs:
    - targets: ['192.168.247.211:9090']
  - job_name: 'docker'
    static_configs:
    - targets:
      - &quot;192.168.247.211:8090&quot;
      - &quot;192.168.247.212:8090&quot;

cp prometheus promtool /usr/local/bin/

启动：
nohup prometheus --config.file=./prometheus.yml &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 我的完整简单prometheus.yml配置文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
# my global config
global:
  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
  - static_configs:
    - targets:
      # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - &quot;first_rules.yml&quot;
  # - &quot;second_rules.yml&quot;

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=&amp;lt;job_name&amp;gt;` to any timeseries scraped from this config.
  - job_name: 'prometheus'

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
    - targets: ['192.168.247.211:9090']
  - job_name: 'docker'
    static_configs:
    - targets: 
      - &quot;192.168.247.211:8090&quot;
      - &quot;192.168.247.212:8090&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;访问：http://192.168.247.211:9090&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201903/1271786-20190317122922726-1259887082.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;三、Grafana&lt;/h3&gt;
&lt;p&gt;官方地址：&lt;a href=&quot;https://grafana.com/&quot; target=&quot;_blank&quot;&gt;https://grafana.com/&lt;/a&gt;&lt;br/&gt;安装步骤：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
wget https://dl.grafana.com/oss/release/grafana-6.0.1-1.x86_64.rpm
sudo yum localinstall grafana-6.0.1-1.x86_64.rpm -y
systemctl daemon-reload
systemctl start grafana-server
systemctl status grafana-server
#设置开机自启动
Enable the systemd service so that Grafana starts at boot.
sudo systemctl enable grafana-server.service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.访问：http://192.168.247.211:3000/login&lt;br/&gt;默认密码：admin/admin&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201903/1271786-20190317123044662-870967451.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.配置Prometheus数据源&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201903/1271786-20190317123147122-1117221448.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;3.下载模板模板地址：&lt;a href=&quot;https://grafana.com/dashboards&quot; target=&quot;_blank&quot;&gt;https://grafana.com/dashboards&lt;/a&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201903/1271786-20190317123222718-84643374.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4.导入模板&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201903/1271786-20190317123237753-680280005.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5.成品&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201903/1271786-20190317123336399-1867354313.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


</description>
<pubDate>Sun, 17 Mar 2019 04:37:00 +0000</pubDate>
<dc:creator>渣渣辉</dc:creator>
<og:description>cAdvisor+Prometheus+Grafana监控docker 一、cAdvisor(需要监控的主机都要安装) 官方地址：https://github.com/google/cadvisor</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Dev0ps/p/10546276.html</dc:identifier>
</item>
<item>
<title>初探奥尔良(Orleans) - LeoLaw</title>
<link>http://www.cnblogs.com/leolaw/p/10546239.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leolaw/p/10546239.html</guid>
<description>
&lt;p&gt;由于工作上关系目前经常被各种并发数据问题搞得焦头烂额，要么要性能舍弃数据上得一致性，要么要一致性但是却得到了特别糟糕的响应。难道鱼和熊掌真的无法兼得吗？&lt;/p&gt;
&lt;p&gt;然后找到了类似奥尔良这种基于Actor模型的kuangjia&lt;/p&gt;

&lt;p&gt;首先本人因为是C#系的所以暂不考虑Java系那套，那摆在面前的此类型的框架其实就2个。 Akka.Net和Orleans。&lt;/p&gt;

&lt;h2&gt;什么是Actor？&lt;/h2&gt;
&lt;p&gt;Actor应该说是一种编程模型，一个Actor是一个最基本的计算单原，他能接收消息并执行计算（一个行为）&lt;/p&gt;
&lt;p&gt;它最重要的特性是每个Actor之间互相隔离，互补共享内存，也就是说每个Actor都能维持一个私有状态且不能被别人所改变。&lt;/p&gt;
&lt;p&gt;这对于我们意味着什么呢？想下一般我们遇到的并发问题，是不是在我们执行某个操作的时候，一个数据不正确的被另一个操作所干扰，导致数据最终混乱，而Actor则确保自己的数据不能被别人改变（独立维护自己的状态）以便使得最终一致。&lt;/p&gt;
&lt;p&gt;wait&lt;/p&gt;
&lt;p&gt;如果Actor自己数据不能被别人改变，那就是顺序执行？那会不会很慢？&lt;/p&gt;
&lt;p&gt;对于一个Actor来说，没错，他还真的就顺序执行，因此能确保准确性&lt;/p&gt;
&lt;p&gt;但是你真正系统里肯定不会只有一个Actor，而是由很多Actor组成，每个Actor之间是能并行的（因为他们不共享数据，所以他们可以互相独立的正确处理）&lt;/p&gt;

&lt;p&gt;具体来说，当并行的消息到达一个Actor的时候，它会存储到一个MailBox（邮箱）里（你可以简单理解为一个队列），然后Actor从MailBox捞数据，一条一条顺序的捞&lt;/p&gt;
&lt;p&gt;然后不同的Actor则并行着处理一样的事情&lt;/p&gt;
&lt;p&gt;由于大家都是互相独立的处理各自的事情，数据不会发生冲突，也就无需类似锁之类的机制来确保数据一致性问题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190317122602928-770803036.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190317122603321-790839716.png&quot; alt=&quot;image&quot; width=&quot;800&quot; height=&quot;508&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于Actor类文章网上搜索一大片， 在此就不再过多阐述了。&lt;/p&gt;


&lt;h2&gt;什么是奥尔良？&lt;/h2&gt;
&lt;p&gt;简单一句话，微软的一个基于Actor模型的实现，具体介绍可以更多参考官网&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dotnet.github.io/orleans/Documentation/grains/index.html&quot; target=&quot;_blank&quot;&gt;奥尔良官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;他跟正儿八经的Actor相比，微软习惯就是将其做更加上层的封装，Actor都变成了Grains，万事万物皆是Grains的感觉&lt;/p&gt;
&lt;h2&gt; &lt;/h2&gt;
&lt;h2&gt;我干了什么？&lt;/h2&gt;
&lt;p&gt;我也刚开始入门，发这篇文章主要是想证实下，Actor那套是不是真的那么神，本文涉及的所有代码均在 &lt;a title=&quot;https://github.com/virtualcca/OrleansTest/tree/master&quot; href=&quot;https://github.com/virtualcca/OrleansTest/tree/master&quot;&gt;https://github.com/virtualcca/OrleansTest/tree/master&lt;/a&gt; 上面&lt;/p&gt;

&lt;p&gt;既然他们说他们是以单线程来处理同一个Actor，那我就想测试下用Orleans搞一个并发转账的场景，和我常规的多线程并发转账场景的一个对比，而我想看到的结果是，常规版的由于多线程的问题数据总是错乱的，而奥尔良则能始终正确&lt;/p&gt;

&lt;p&gt;转账代码&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190317122603700-58836880.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190317122604168-847425663.png&quot; alt=&quot;image&quot; width=&quot;800&quot; height=&quot;475&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我有一个账户，账户上面有Money, 我能做2个操作，要么转钱过来，要么查看我还有多少钱，当然，转账总要点时间的对吧，所以转账时候Delay了1ms&lt;/p&gt;

&lt;p&gt;实际转账的执行代码&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190317122604522-1261915531.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190317122604981-2006722046.png&quot; alt=&quot;image&quot; width=&quot;800&quot; height=&quot;479&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以注意下奥尔良版和原始版唯一区别在于&lt;/p&gt;
&lt;p&gt;奥尔良版是通过client.GetGrain来获取了一个IAccount，这样获取到的是属于奥尔良托管的一个Client实例，对其执行的操作其实会发送到Host里执行，然后Host里就是正儿八经的Actor架构来去处理所有操作&lt;/p&gt;
&lt;p&gt;但是正如之前介绍Actor的时候谈到单个Actor是单线程，而多个Actor之间是并发，如何确定你是一个还是多个Actor，是通过一个Id来区分（具体奥尔良官网有介绍），而GetGrain后面的那个0的参数就是他的Id，也就是我的这个IAccount是属于一个Actor&lt;/p&gt;
&lt;p&gt;常规版直接new一个实例执行同样操作&lt;/p&gt;

&lt;p&gt;然后代码运行，可以看到结果&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190317122605454-2108438219.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/658343/201903/658343-20190317122605702-267189386.png&quot; alt=&quot;image&quot; width=&quot;732&quot; height=&quot;241&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原始版的结果仅供参考，我每次运行得出来的结果也都不一样（多线程执行顺序是不确定的）&lt;/p&gt;
&lt;p&gt;而奥尔良版则能正确的恒定输出4950&lt;/p&gt;

&lt;p&gt;至此，可以明确奥尔良完美的实现了Actor里关于单个Actor单线程的这么个处理。。。。&lt;/p&gt;
</description>
<pubDate>Sun, 17 Mar 2019 04:26:00 +0000</pubDate>
<dc:creator>LeoLaw</dc:creator>
<og:description>由于工作上关系目前经常被各种并发数据问题搞得焦头烂额，要么要性能舍弃数据上得一致性，要么要一致性但是却得到了特别糟糕的响应。难道鱼和熊掌真的无法兼得吗？ 然后找到了类似奥尔良这种基于Actor模型的k</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leolaw/p/10546239.html</dc:identifier>
</item>
<item>
<title>Python进阶：如何将字符串常量转化为变量？ - 豌豆花下猫</title>
<link>http://www.cnblogs.com/pythonista/p/10546215.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pythonista/p/10546215.html</guid>
<description>&lt;p&gt;前几天，我们&lt;code&gt;Python猫交流学习群&lt;/code&gt; 里的 M 同学提了个问题。这个问题挺有意思，经初次讨论，我们认为它无解。&lt;/p&gt;
&lt;p&gt;然而，我认为它很有价值，应该继续思考怎么解决，所以就在私密的知识星球上记录了下来。&lt;/p&gt;
&lt;p&gt;万万没想到的是，在第二天，有两位同学接连给出了解决方法！&lt;/p&gt;
&lt;p&gt;由此，群内出现了一轮热烈的技术交流。&lt;/p&gt;
&lt;p&gt;本文将相关的内容要点作了梳理，并由此引申到更进一步的学习话题，希望对你有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;h1&quot;&gt;1、如何动态生成变量名？&lt;/h2&gt;
&lt;p&gt;M 同学的问题如下：&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;打扰一下大家，请教一个问题，已知 list = ['A', 'B', 'C', 'D'] , 如何才能得到以 list 中元素命名的新列表 A = [], B = [], C = [], D = [] 呢?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单理解，这个问题的意思是，&lt;strong&gt;将字符串内容作为其它对象的变量名。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;list 中的元素是字符串，此处的 ‘A’-‘D’ 是&lt;strong&gt;常量&lt;/strong&gt; ，而在要求的结果中，A-D 是&lt;strong&gt;变量&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;如果强行直接将常量当做变量使用，它会报错：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;'A' = []&lt;br/&gt;...&lt;span class=&quot;hljs-symbol&quot;&gt;SyntaxError: can&lt;span class=&quot;hljs-string&quot;&gt;'t assign to literal&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;报错中的&lt;code&gt;literal&lt;/code&gt; 指的是&lt;code&gt;字面量&lt;/code&gt; ，这是计算机科学中常见的一个概念，&lt;strong&gt;用于表达源代码中的固定值。&lt;/strong&gt; 例如，整数、浮点数、字符串等基本类型，就是字面量。&lt;/p&gt;
&lt;p&gt;字面量指的就是一个量本身，可以理解为一种原子性的实体，当然不能再被赋值了。&lt;/p&gt;
&lt;p&gt;所以，取出的字符串内容，并不能直接用作变量名，需要另想办法。&lt;/p&gt;
&lt;p&gt;有初学者可能会想，list[0] = [] 行不行？当然不行，因为没有出现 A 。那 A = list[0] ，接着 A = [] 呢？那也不行，因为这里的 A 是你凭空定义出来的，而不是从已有条件中生成的。&lt;/p&gt;
&lt;p&gt;当时，群里只有两三个同学参与了讨论，我们没想到解决办法。但是，我觉得这个题目很有意思，值得玩味。&lt;/p&gt;
&lt;p&gt;因为，如果能解决这个问题，那就意味着可以不作预先定义，而是动态地生成变量名，这不仅能减少给变量取名的麻烦，还实现了自动编码！&lt;/p&gt;
&lt;p&gt;可以设想一下未来，人工智能在编写代码的时候，如果能根据已知条件，动态生成变量名，那编写代码的过程不就顺利多了么？（据说，现在已经有人工智能可以编写代码了，不知它在取变量名时，是用的什么方法？）&lt;/p&gt;
&lt;h2 id=&quot;h2&quot;&gt;2、办法总是有的&lt;/h2&gt;
&lt;p&gt;最近，学习群里蒙混进来了几个打广告的，为此，我决定提高审核门槛，例如，用群里的问题来作个考核。&lt;/p&gt;
&lt;p&gt;万万没想到的是，第一个被考核到的 Q 同学，几乎不假思索地就说出了一个解决上述问题的思路。而&lt;strong&gt;偏偏就是那么巧&lt;/strong&gt; ，几乎在同时，群内的 J 同学给出了另外一个解决方法（他没看到群内的讨论，而是看到了知识星球的记录，才知道这个问题的）。&lt;/p&gt;
&lt;p&gt;也就是说，前一晚还以为无解的问题，在第二天竟得到了两种不同的解决方法！&lt;/p&gt;
&lt;p&gt;那么，他们的答案是什么呢？&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;/&gt;
&lt;/pre&gt;
&lt;p&gt;这个方法通过修改全局命名空间，巧妙地“定义”出了新的变量。globals() 方法取出来的是一个字典，字符串 ‘A’ 是其中一个键值（key），而这个键值恰恰是全局命名空间中的一个变量，这就实现了从常量到变量的转化。&lt;/p&gt;
&lt;p&gt;在数据结构层面上，空列表 [] 作为一个值（value）跟它的字符串键值绑定在一起，而在运用层面上，它作为变量内容而跟变量名绑定在一起。&lt;/p&gt;
&lt;p&gt;看到这个回答的时候，我就突然想起来了，上个月转载过一篇《&lt;a href=&quot;https://mp.weixin.qq.com/s/f9BBe2W1X1p7NcHg665I4A&quot;&gt;Python 动态赋值的陷阱&lt;/a&gt;》，讲的正是&lt;strong&gt;动态地进行变量赋值&lt;/strong&gt; 的问题啊！我似乎只关注了 globals() 与 locals() 用法的区别，却没有真正地掌握它们的原初用途。&lt;/p&gt;
&lt;p&gt;J 同学说，他正是看了那篇文章，才学得了这个方法。这就有意思了，我分享了一个自己囫囵吞枣的知识，然后它被 J 同学吸收掌握，最后反馈回来解决了我的难题。&lt;/p&gt;
&lt;p&gt;我真切地感受到了知识分享的魅力：&lt;strong&gt;知识在流动中获得生命，在碰撞中锃亮色泽。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同时，我也真切地明白了一个互助的学习团体的好处：&lt;strong&gt;利人者也利己，互助者共同进步。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;h3&quot;&gt;3、动态执行代码的方法&lt;/h2&gt;
&lt;p&gt;新进群的 Q 同学，提供了一个不同的答案：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;/&gt;
&lt;/pre&gt;
&lt;p&gt;他的写法用到了 Python 3.6 才引入的 f-strings 特性，事实上，在较低版本中，也是可以实现的，只需要保证 exec() 方法接收的参数是包含了变量 i 的字符串即可，例如这样写：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;/&gt;
&lt;/pre&gt;
&lt;p&gt;这几种写法的区别只是字符串拼接法的区别，关于如何拼接字符串，以及不同方法之间的区别，可参看《&lt;a href=&quot;https://mp.weixin.qq.com/s/Whrd6NiD4Y2Z-YSCy4XJ1w&quot;&gt;详解Python拼接字符串的七种方式&lt;/a&gt;》。&lt;/p&gt;
&lt;p&gt;Q 同学这个答案的核心在于 exec() 方法，它是内置的，用途是&lt;strong&gt;执行储存在字符串或文件中的代码段。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它的基础用法如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&lt;span class=&quot;bash&quot;&gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;exec(&lt;span class=&quot;hljs-string&quot;&gt;'x = 1 + 2')&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&lt;span class=&quot;bash&quot;&gt;&amp;gt;&amp;gt; x&lt;br/&gt;3&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;br/&gt;#&lt;span class=&quot;bash&quot;&gt; 执行代码段&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&lt;span class=&quot;bash&quot;&gt;&amp;gt;&amp;gt; s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&lt;span class=&quot;bash&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;gt;&amp;gt; x = 10&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&lt;span class=&quot;bash&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;gt;&amp;gt; y = 20&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&lt;span class=&quot;bash&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;gt;&amp;gt; sum = x + y&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&lt;span class=&quot;bash&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;gt;&amp;gt; print(sum)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&lt;span class=&quot;bash&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;gt;&amp;gt; &quot;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&lt;span class=&quot;bash&quot;&gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;exec(s)&lt;br/&gt;30&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看完了 exec() 的用法，我们再回来看 Q 同学的答案。for-循环中取出来的 i 是字符串，而拼接后的字符串经过 exec() 的处理，就获得了动态编写代码的效果。&lt;/p&gt;
&lt;p&gt;也就是说，因为字符串常量的内容被当做有效代码而执行了，其中的 'A'-'D' 元素，就取得了新的身份，变成了最终的 A-D 变量名。&lt;/p&gt;
&lt;p&gt;这个方法看起来很简单啊，可是由于 exec() 方法太生僻了，直到 Q 同学提出，我们才醒悟过来。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;注意：在 Python3 中，exec() 是个内置方法；而在 Python2 中，exec 是个语句（statement），另外有个 execfile() 方法，两者相合并，就成了 Python3 中的 exec() 方法。本文使用的是 Python3。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;h4&quot;&gt;4、总结&lt;/h2&gt;
&lt;p&gt;抽象一下最初的问题，它实际问的是“如何将字符串内容作为其它对象的变量名”，更进一步地讲是——“&lt;strong&gt;如何将常量转化为变量&lt;/strong&gt; ”。&lt;/p&gt;
&lt;p&gt;使用直接进行赋值的静态方法，行不通。&lt;/p&gt;
&lt;p&gt;两位同学提出的方法都是间接的动态方法：&lt;strong&gt;一个是动态地进行变量赋值，通过修改命名空间而植入变量；一个是动态地执行代码，可以说是通过“走后门”的方式，安插了变量。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两种方法殊途同归，不管是白猫还是黑猫，它们都抓到了老鼠。&lt;/p&gt;
&lt;p&gt;这两种方法已经给我们带来了很有价值的启发，同时，因为它们，群内小伙伴们更是发散地讨论一些相关联的话题，例如：S 同学提出了另一种修改命名空间中变量的写法、L 同学提到了 eval() 的意义、eval() 与 exec() 的区别、我查到了为什么要慎用 eval() 、C 与 H 同学提到了 eval() 的安全用法……&lt;/p&gt;
&lt;p&gt;虽然，某些话题无法在群聊中充分展开，但是，这些话题知识的延展联系，大大地丰富了本文开头的问题，这一个微小的问题，牵连出来了两个大的知识体系。&lt;/p&gt;
&lt;p&gt;最后，真得感谢群内的这些爱学习的优秀的同志们！除了文中提及的，还有一些同学也做了积极贡献，大家都很给力！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相关链接：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《&lt;a href=&quot;https://mp.weixin.qq.com/s/f9BBe2W1X1p7NcHg665I4A&quot;&gt;Python 动态赋值的陷阱&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;《&lt;a href=&quot;https://mp.weixin.qq.com/s/Whrd6NiD4Y2Z-YSCy4XJ1w&quot;&gt;详解Python拼接字符串的七种方式&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;eval()、exec()及其相关函数：https://www.tuicool.com/wx/vEbeumE&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1g08dfkg8sdj2076076t96.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;公众号【&lt;strong&gt;Python猫&lt;/strong&gt;】， 专注Python技术、数据科学和深度学习，力图创造一个有趣又有用的学习分享平台。本号连载优质的系列文章，有喵星哲学猫系列、Python进阶系列、好书推荐系列、优质英文推荐与翻译等等，欢迎关注哦。PS：后台回复“&lt;strong&gt;爱学习&lt;/strong&gt;”，免费获得一份学习大礼包。&lt;/p&gt;
</description>
<pubDate>Sun, 17 Mar 2019 04:18:00 +0000</pubDate>
<dc:creator>豌豆花下猫</dc:creator>
<og:description>前几天，我们Python猫交流学习群 里的 M 同学提了个问题。这个问题挺有意思，经初次讨论，我们认为它无解。 然而，我认为它很有价值，应该继续思考怎么解决，所以就在私密的知识星球上记录了下来。 万万</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pythonista/p/10546215.html</dc:identifier>
</item>
</channel>
</rss>