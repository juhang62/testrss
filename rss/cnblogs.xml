<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>N+6 裁员裁出幸福感的背后 - 纯洁的微笑</title>
<link>http://www.cnblogs.com/ityouknow/p/10860148.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ityouknow/p/10860148.html</guid>
<description>&lt;h2 id=&quot;section&quot;&gt;01.&lt;/h2&gt;
&lt;p&gt;史上最牛逼的数据库公司，Oracle 裁员了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.itmind.net/assets/images/2019/it/oracle_logo.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2019年5月7日，甲骨文召开了面向全中国区的电话会议，亚太区人力资源负责人在会上简要介绍道，公司正进行业务结构调整，导致一部分人要离开岗位，这将是全球性的。&lt;/p&gt;
&lt;p&gt;短暂介绍后，没有任何提问环节，甲骨文北京地区便开始了一对一面谈，介绍赔偿内容。&lt;/p&gt;
&lt;p&gt;接下来两天内，很多甲骨文员工都收到了 HR 的约谈。&lt;/p&gt;
&lt;p&gt;并被告知：“5月22日之前，签订协议离职的能拿到N+6的补偿，而在5月22日到6月7日之前签字，将只有N+1的补偿，6月7日之后的员工，将只有N的赔偿。”&lt;/p&gt;
&lt;p&gt;中国区研发中心（CDC）裁员900人，占CDC全部人数的56%。而剩余的44%，据传在7月，也要全部被裁。&lt;/p&gt;
&lt;h2 id=&quot;section-1&quot;&gt;02.&lt;/h2&gt;
&lt;p&gt;业内纷纷感慨裁员裁出幸福感，很多程序员甚至都期待自己能够遇到这样的裁员机遇。&lt;/p&gt;
&lt;p&gt;近两年各大互联网公司都经历了这一个过程，N + 6 的方案相比很多中小互联网公司来说，确实很厚道了。&lt;/p&gt;
&lt;p&gt;但显然，这份方案并没有获得甲骨文中国员工的完全认同，他们其中的一些人在当天下午，就在甲骨文中国公司楼下拉起了横幅。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.itmind.net/assets/images/2019/it/hengfu.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;标语中有 “我们要工作”、“孩子要上学”、“为何如此下狠手”等词，我们可以体会到当事人的心情。&lt;/p&gt;
&lt;p&gt;在这背后有一个数据，被裁的员工，大部分都是高学历工程师，平均年龄是37岁。试想一下这些人在市场上再次找工作的时候，会面临什么样的困难。&lt;/p&gt;
&lt;p&gt;高学历意味着对薪资的要求不会太低，平均37岁的年龄意味着大部分都是上有老下有小，重新从一线开始是否能适应996的工作强度。&lt;/p&gt;
&lt;p&gt;在中国目前互联网的情况下，真的没太多的优势。&lt;/p&gt;
&lt;h2 id=&quot;section-2&quot;&gt;03.&lt;/h2&gt;
&lt;p&gt;他们曾经都是天之骄子。&lt;/p&gt;
&lt;p&gt;Oracle，是仅次于微软的世界第二大软件公司，全球最大的企业级软件公司，有着无比辉煌的过往。&lt;/p&gt;
&lt;p&gt;而进入中国的 Oracle，在招开发人员时，曾经“必须是清华北大上交复旦和北邮五所学校读过本科才能进，但是同时得有硕士学历。”&lt;/p&gt;
&lt;p&gt;裁员消息传出时候，有朋友就说“北京最大的一个养老院倒了。”&lt;/p&gt;
&lt;p&gt;甲骨文公司福利简直不要太好。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;最少16天带薪年假，工作越久，假期越长。&lt;/li&gt;
&lt;li&gt;每月可以请两天带薪病假。&lt;/li&gt;
&lt;li&gt;看病全额报销，子女报销一半。&lt;/li&gt;
&lt;li&gt;上下班不打卡，工作时间自由分配。&lt;/li&gt;
&lt;li&gt;可以申请在家办公。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Oracle 公司这两年的日子确实不太好过，在中国以阿里巴巴为首推动的去 IOE 化，越来越多的互联网公司开始采用新型的数据库。&lt;/p&gt;
&lt;p&gt;在全球都处于上升期的云计算业务却是甲骨文裁员的重灾区，甲骨文的云计算业务几乎停滞不前，和国内外的云计算公司相比几乎可以忽略不记。&lt;/p&gt;
&lt;p&gt;越来越多的互联网公司使用云服务器，以及云计算厂商提供的云数据库，云服务器在行业内的不断推进，Oracle 的劣势就越发明显。&lt;/p&gt;
&lt;p&gt;我相信在 Oracle 公司工作的员工，不会看不到这一点。很少有人会主动拥抱变化，贪图安逸随波逐流才是绝大多数人的选择。&lt;/p&gt;
&lt;p&gt;裁员这一天也就来了。&lt;/p&gt;
&lt;h2 id=&quot;section-3&quot;&gt;04.&lt;/h2&gt;
&lt;p&gt;我毕业后的第一份正式工作是外包，那时候我也知道网上都说外包不好，刚毕业的我没有太多选择，就去了。&lt;/p&gt;
&lt;p&gt;分到部门之后发现有很多同事在这里已经工作了好几年，有几位同事还都是研究生毕业，我在想公司是怎么忽悠这些人进来的。&lt;/p&gt;
&lt;p&gt;外包公司的大部分工作都是没有技术含量的，做的都是修修补补的工作，同时工作压力也不小，加班到两三点也是常事。&lt;/p&gt;
&lt;p&gt;工作了9个月之后，我就受不了离职了，同时决定以后再也不会踏入外包行业中。&lt;/p&gt;
&lt;p&gt;外包公司人员流动比较大，但你会发现总有一些人，可以一直呆下去。我距离职的那家公司已经快8年了，回去的时候听朋友说，还是以前的老同事在里面工作。&lt;/p&gt;
&lt;p&gt;以上绝对不是个例，我们几乎可以在每一个公司都发现类似的情况，总有一批老人呆在公司，职位、薪资、技能几乎无变化，却可以一呆就是6、7年，或者更长。&lt;/p&gt;
&lt;p&gt;和上面的 Oracle 公司对比，你说他们安逸吗？他们一点都不安逸，有的甚至工作强度大、工资也不高，但为什么可以一直坚持下去呢？&lt;/p&gt;
&lt;p&gt;人们在面对新事物的时候，总是下意识的拒绝变化，害怕变化。&lt;/p&gt;
&lt;p&gt;他们在想，反正出去的那些人也混得不咋的；彼此间的的情况也不一样；要不明年不行我就走；再呆最后一年；公司现在福利挺好的，走了可惜；找不到比现在工作更好的怎么办，等等。&lt;/p&gt;
&lt;p&gt;年纪越大越希望稳定，越希望稳定越拒绝变化。&lt;/p&gt;
&lt;h2 id=&quot;section-4&quot;&gt;05.&lt;/h2&gt;
&lt;p&gt;其实对于我来讲，我是极度喜欢和拥抱变化的一个人，哪怕有时候变得不太好。&lt;/p&gt;
&lt;p&gt;最可怕的是，那种一眼可以看到头的职场生涯，其实这才是职场的最大危机。&lt;/p&gt;
&lt;p&gt;所谓的稳定、安逸不存在的，短期的安逸和稳定是一剂职场毒药，必然会在历史的线条上给你还回来。&lt;/p&gt;
&lt;p&gt;对于我们这种从底层做起的人来讲，应该非常非常的喜欢变化才对，没有变化怎么可能有你的机会，每一次变化就意味着可能会出现的机遇。&lt;/p&gt;
&lt;p&gt;拥抱变化、抓住机遇、才能赢得未来。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1.甲骨文大裁员，几年前主动离开的他们，早已身家亿万，何加盐，微信公众号&lt;/li&gt;
&lt;li&gt;2.为什么甲骨文被裁员工不值得同情，克虏伯，子弹财经，微信公众号&lt;/li&gt;
&lt;li&gt;3.Oracle 痛裁程序员，阿里云坐收渔翁利，胡巍巍，CSDN，微信公众号&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;作者简介：纯洁的微笑，一个有故事的程序员。曾在互联网金融，第三方支付公司工作，现为一名自由职业者，和你一起用技术的角度去看这个世界。我的个人微信号 puresmileit，欢迎大家找我聊天，记录你我的故事。&lt;/p&gt;
</description>
<pubDate>Mon, 13 May 2019 23:03:00 +0000</pubDate>
<dc:creator>纯洁的微笑</dc:creator>
<og:description>01. 史上最牛逼的数据库公司，Oracle 裁员了。 2019年5月7日，甲骨文召开了面向全中国区的电话会议，亚太区人力资源负责人在会上简要介绍道，公司正进行业务结构调整，导致一部分人要离开岗位，这</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ityouknow/p/10860148.html</dc:identifier>
</item>
<item>
<title>大量阅读，并不等同于“走马观花” - 沉默王二</title>
<link>http://www.cnblogs.com/qing-gee/p/10860135.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qing-gee/p/10860135.html</guid>
<description>
&lt;h3 id=&quot;h01&quot;&gt;01、大量阅读有什么好处&lt;/h3&gt;
&lt;p&gt;开门见山地说吧，大量阅读有以下四个好处，并且是显而易见的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）可以很快地看懂文章，抓住重点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一点，在做英语卷子的《阅读理解》时，最深有体会了。如果词汇量不够的话，做《阅读理解》的时候注定蒙圈。相反，词汇量足够的话，就能很快地在短文中找出问题的答案。&lt;/p&gt;
&lt;p&gt;同样的道理，如果我们没有大量阅读的话，怎么可能看懂一篇文章，又抓住它的重点呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）可以正确地表达自己的观点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很长一段时间内，我都害怕与人交流，因为我不知道应该和别人说什么。起初，我把这种原因归咎于自卑。但渐渐地我发现，压根就不是因为我的自卑，而是我无法正确地表达自己。&lt;/p&gt;
&lt;p&gt;在读书的过程中，我们经常会情不自禁地感慨到：“哦，原来是这样啊！”这就是因为书中表达了我们想要表达却没有表达清楚的观点。&lt;/p&gt;
&lt;p&gt;读的书多了以后，自然而然地就学会了书里面人说话的方式。如果你身边有小朋友的话，这一点的感受会非常的深：他们经常会表达出一些你意想不到的观点，而这些观点大多数来自于她读过的那些绘本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）可以写出合乎逻辑、不自相矛盾的文章&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你考究过那些作家、那些能写的作者的话，你一定能够得出一条明确的结论：他们无一例外地都读了大量的书籍。&lt;/p&gt;
&lt;p&gt;在读《明朝的那些事儿》的时候，我经常被作者震撼到：当年明月怎么会知道那么多事、那么多人物呢？并且能够把这些人和事有条不紊地联系起来？翻看这本书的引子就知道了。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;要说明的是，这本书是描写正史的，资料来源包括《明实录》、《明通鉴》、《明史》、《明史纪事本末》等二十余种明代史料和笔记杂谈。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;4）能够在思考中得出独到的见解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大量阅读并不等同于“走马观花”，我们要在阅读中学会思考。什么叫思考，就是苹果砸你脑袋上了，你得明白它为什么会砸你头上，而不是往太空飞去。&lt;/p&gt;
&lt;p&gt;经常听到一些名人说自己每年至少会读几百本书，几一般大于一。这听起来非常的夸张，夸张到让我怀疑他们说话的真实性。&lt;/p&gt;
&lt;p&gt;拿我自己来做对比吧，我每个月最多能够读完半本书——像《Java 编程思想》、《Java 核心技术卷》这种大部头的技术书，每周读完一章都略显吃力。这么算下来的话，我每个月连半本书都读不完，因为这种大部头的书动辄就十好几章，满打满算的话，每年十本技术书的量，已经不算少的了。&lt;/p&gt;
&lt;p&gt;那么这也叫思考。不要轻信别人的观点，要有自己的主见。&lt;/p&gt;
&lt;h3 id=&quot;h02&quot;&gt;02、为什么需要大量阅读&lt;/h3&gt;
&lt;p&gt;再来说说为什么需要大量阅读，我的观点有两个。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）读书越少，常识就越不足&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我之前向大家推荐了一本书，叫《沉默的大多数》，文章中有这样一句话：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果你留意观察的话，我的笔名“沉默王二”就佐证了这本书对我的影响深远。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我一个朋友非要说我用错了一个词——“佐证”，她认为“佐证”是个名词，不能作为一个动词来使用。但其实“佐证”这个词既可以做名词，又可以做动词——我朋友的常识不足。&lt;/p&gt;
&lt;p&gt;像这种常识，只有通过大量阅读才能获得。有人会说，常识可以维基百科啊！我朋友就没有维基百科，呵呵。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）读书越少，阅读能力越差&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作为一个程序员，我是不称职的，因为很长一段时间里，我都没有勇气去查看 &lt;code&gt;String&lt;/code&gt; 的源码，因为我理解不了 &lt;code&gt;hashcode&lt;/code&gt; 等这类源码要表达的意思。&lt;/p&gt;
&lt;p&gt;但在我读完了《Java 编程思想》和《Java 核心技术卷》后，奇迹竟然发生了，我竟然能看懂 &lt;code&gt;hashcode&lt;/code&gt; 的源码了，并且明白 &lt;code&gt;equals&lt;/code&gt; 和 &lt;code&gt;hashcode&lt;/code&gt; 的关联。&lt;/p&gt;
&lt;p&gt;道理很简单，看得多了，也就懂了。&lt;/p&gt;
&lt;h3 id=&quot;h03&quot;&gt;03、应该读什么类型的书&lt;/h3&gt;
&lt;p&gt;既然决定要大量阅读，总得知道该读什么类型的书吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）经典名著&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;经典名著之所以能够留存下来，除了有人刻意想要它留下来的原因之外，就只能是因为经典的原因了。&lt;/p&gt;
&lt;p&gt;《三国演义》是必须要读的，至于《红楼梦》嘛，可以不读。反正我这么觉得的。&lt;/p&gt;
&lt;p&gt;外国的经典名著，比如说《了不起的盖茨比》是应该读的，但《百年孤独》就算了。我是这么觉得的。&lt;/p&gt;
&lt;p&gt;总之，经典名著有很多，你得学会挑着读。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）优质的论述性文章&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一点，作为程序员的我们就不需要刻意去找了，几乎所有的技术书都是论述性（不抒情，只说干货）的文章。&lt;/p&gt;
&lt;p&gt;至于哪些是优质的，在“沉默王二”公众号后台回复「Java」、「Python」、和「2048」就知道了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）侦探性质的小说&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在我印象中，最喜欢的侦探小说就是《福尔摩斯探案集》，其次就是东野圭吾的推理小说，比如说《解忧杂货店》。&lt;/p&gt;
&lt;p&gt;读侦探性质的小说，可以极大程度上提升我们的“逻辑思维”，比听罗胖子的“逻辑思维”要有用得多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4）国际新闻&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有很多人喜欢看新闻，但只喜欢关注身边的、国内的，对国际上的新闻漠不关心。这样的做法不太可取。&lt;/p&gt;
&lt;p&gt;我之前一直号召，不要只把目光聚焦在自己身上或者周围，而应该站在一个可以“鸟瞰”的高度上。&lt;/p&gt;
&lt;p&gt;比如，提个醒啊，GitHub 上这几天非常火的一个消息是：微软终于要升级它的终端（terminal）了！如果你知道了这个消息，在微软升级终端的第一时间写出来一篇介绍的文章，我相信一定会大火！&lt;/p&gt;
&lt;h3 id=&quot;h04&quot;&gt;04、一边阅读，一边思考&lt;/h3&gt;
&lt;p&gt;在我看来，阅读的最大乐趣在于思考，而不是咬文嚼字。&lt;/p&gt;
&lt;p&gt;不知道你有没有这样的阶段，读小说会上瘾，我之前差不多一个月的时间就读完了九本《明朝的那些事儿》，但读完了也就完了，什么也没记住（只记住了书名和作者当年明月）。&lt;/p&gt;
&lt;p&gt;但当我后来再读的时候，我刻意把节奏停了下来。在读的时候去思考，思考为什么魏忠贤会“一步一个脚印”地爬上权力的最顶层，思考为什么崇祯会选择上吊自尽而不是决一死战。&lt;/p&gt;
&lt;p&gt;我认为，魏忠贤的“上进心”源自于他的无知、“太监”的了无牵挂；而崇祯的自尽源自于他的“崇高”，他本是一个励精图治的好皇帝，奈何被出身于草根农民的李自成毁了江山。&lt;/p&gt;
&lt;p&gt;最后，不得不感慨一下，这也是我在“大量”阅读后得出来的：&lt;strong&gt;在我已经走过的生命里，最遗憾的就是没有用心地去读理财、股票、产品、营销方面的书籍&lt;/strong&gt;（或者资料），以至于我在三十岁的时候还没有实现财务自由！&lt;/p&gt;

</description>
<pubDate>Mon, 13 May 2019 22:15:00 +0000</pubDate>
<dc:creator>沉默王二</dc:creator>
<og:description>01、大量阅读有什么好处 开门见山地说吧，大量阅读有以下四个好处，并且是显而易见的。 1）可以很快地看懂文章，抓住重点 这一点，在做英语卷子的《阅读理解》时，最深有体会了。如果词汇量不够的话，做《阅读</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qing-gee/p/10860135.html</dc:identifier>
</item>
<item>
<title>我是如何学习和工作的(2) - 番茄工作法(2) - 叶伟民</title>
<link>http://www.cnblogs.com/adalovelacer/p/pomodoro-technique-guang-zhou-dot-net-club-2.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/adalovelacer/p/pomodoro-technique-guang-zhou-dot-net-club-2.html</guid>
<description>&lt;p&gt;自从我发表了&amp;lt;&lt;a href=&quot;https://www.cnblogs.com/adalovelacer/p/pomodoro-technique-guang-zhou-dot-net-clube.html&quot; target=&quot;_blank&quot;&gt;我是如何学习和工作的(1) - 番茄工作法(1)&lt;/a&gt;&amp;gt;之后, 不知不觉已经4个月过去了.&lt;/p&gt;
&lt;p&gt;在这4个月时间里, 不少朋友说这个方法很赞, 但是也有不少人质疑. 质疑来自两方面:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;有多少人在用番茄工作法?&lt;/li&gt;
&lt;li&gt;番茄工作法这个理论是什么? &lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;先回答第一个问题, 无数人!&lt;br/&gt;让我们回到我们的学生生涯, 在长达十几年的学生生涯里面, 我们不断的重复以下操作:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;上40分钟课. &lt;/li&gt;
&lt;li&gt;课间休息10分钟. &lt;/li&gt;
&lt;li&gt;每节课专注一样东西, 比如这40分钟课是上数学, 那就整堂课都在学数学, 不会去学语文.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这三点不就是番茄工作法吗? 只不过在现在流行的番茄工作法里, 是每25分钟专注做一件事情, 然后休息5分钟. 只是时间长短不一样而已. 本质是一样的啊.&lt;/p&gt;
&lt;p&gt;See! 清晰了吧! 你顿时发现不但有无数人在使用番茄工作法, 而且自己也用了番茄工作法十几年!&lt;/p&gt;
&lt;p&gt;说到这里, 顿时有人反驳了. 觉得自己用了番茄工作法十几年也没怎么见效有用啊. 这个问题问得十分好! 问到了本质了!&lt;br/&gt;本质就是你是被强迫使用番茄工作法还是你主动去使用番茄工作法?&lt;br/&gt;读书的时候,&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;如果你是被学校被老师被整个环境强迫去学习去使用番茄工作法的, 学习成绩极大概率不会顶尖.&lt;/li&gt;
&lt;li&gt;如果你是自己主动去学习, 去使用番茄工作法的, 学习成绩极大概率不会差到哪里去.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;顿时又有人说, 博主你这不是在讲废话吗? 既然本质是主动和被动的区别, 主动去学就能学好, 那还需要什么方法嘛?&lt;br/&gt;No! No! No!&lt;br/&gt;让我们回到学生生涯, 有多少人在学生生涯有过肩周炎\颈椎病等办公室疾病的? 很少&lt;br/&gt;但是为什么读了十几年书没有得肩周炎\颈椎病. 出来工作就得了呢?&lt;br/&gt;就因为我们学生生涯里使用了番茄工作法啊! 每上40分钟课就休息10分钟啊. 出来工作之后没有使用番茄工作法, 基本就没有了中间休息这个说法了.&lt;/p&gt;
&lt;p&gt;另外额外补充一下, 我们学生生涯里每个星期至少有两节体育课, 还经常放学了就去踢球, 出来工作之后有多少人的运动时间有学生生涯多?&lt;/p&gt;
&lt;p&gt;还有人说, 读书是在被动的接收知识, 工作很多时候是主动的去创新, 充满了不确定性. 所以不适用番茄工作法.&lt;br/&gt;我认为, 首先工作时候需要创新的时间并不多, 很多程序员日常工作其实是CRUD.&lt;br/&gt;然后, 我自己的经验告诉我, 做创新工作时使用番茄工作法, 经常能够在番茄工作法那5分钟休息时间里恍然大悟, 走出死胡同, 避免钻牛角尖.&lt;br/&gt;最后, 为什么很多程序员的日常工作就是CRUD, 但是还是经常觉得充满不确定性, 觉得不能控制和计划时间. 这就涉及到对时间的规划和管理能力了. 在欧洲的这几个月里, 我发现欧洲人干事十分慢, 有关注我朋友圈的朋友应该会看到很多事迹, 比如找一份工作通常要一个月才能走完四轮面试流程. 那么欧洲人节奏这么慢, 凭啥变成发达国家啊? 如果是靠侵略, 那么芬兰,瑞典,瑞士, 比利时, 挪威并没有侵略其他国家, 甚至还被其他国家侵略, 为啥还能出诺基亚宜家这种巨头, 还能变成发达国家? 所以我一直在思考和研究这个问题, 目前发现的第一个原因就是欧洲人对时间的控制和计划能力很强! 特别是德国人. 所以节奏虽然慢, 但是从容不迫, 最终产出高啊.&lt;br/&gt;所以说程序员工作其实是适用番茄工作法的, 觉得不适合的更多是因为对时间的控制和计划能力不强.&lt;/p&gt;
&lt;p&gt;回答完大家的问题后, 我开始讲讲番茄工作法的理论基础.&lt;/p&gt;
&lt;p&gt;番茄工作法的理论基础就是: 钟摆型管理.&lt;/p&gt;
&lt;p&gt;再讲钟摆型管理之前, 我先说说放弃了学生生涯那十几年番茄工作法的小伙伴所属的方式: 直线型管理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直线型管理：&lt;/strong&gt;&lt;br/&gt;大部分人毕业出来工作之后管理精力的方式是直线消耗型—就是一直工作，累到停为止，然后休息，一直到不累继续工作。这时，休息是一种“没法工作”的虚弱的表现，或者为了工作不得不做的事。听说原来李开复和人比赛晚回邮件 ，我们也常常比赛谁能熬夜，这是一种很糟糕的精力管理方式。&lt;/p&gt;
&lt;p&gt;精力好比手机电池，直线型的管理是一直用到关机，然后充到能开机20%的电量又匆忙继续使用，常年保持在半电量的恐慌状态。这也是你的精力管理现状，你不断地喝咖啡、抽烟，相当于给这个手机加一个移动电源，但如果你不改这个习惯，你会发现电量总是不够用，人也永远缓不过来。&lt;br/&gt;精力其实是一种节律性的东西，春夏秋冬，白天黑夜，像钟摆一样，有自己的节奏和高低谷。高手从来不把精力电池用到没电，而是理解和配合这些节律，主动进行休息和补充。&lt;br/&gt;注意, 精力和体力是两码事哦.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;钟摆型管理：&lt;/strong&gt;&lt;br/&gt;采用钟摆型管理, 也就是我们在学生生涯里使用了十几年的番茄工作法, 是懂得掌握节奏，主动或被动休息。休息被认为是一种高效能的工作方式。《精力管理》的作者吉姆花了数百个小时观察顶尖网球选手的比赛，他发现顶级选手特别擅长用得分间隙恢复体力。他们通过改变呼吸方式、放松肩膀和手臂、大吼一声等方式来发泄紧张情绪。他们在得分间隙的 16-20 秒里，平均每分钟的心率可下降 20次。而他们对手的心率居高不下，一场比赛下来体能消耗要高20%，这些细小的差距，造成了顶尖选手和优秀选手的区别。&lt;/p&gt;
&lt;p&gt;今天暂时先讲到这里, 欢迎大家问问题.&lt;br/&gt;写到这里， 突然很想念在天堂里的老朋友 装配脑袋! 身体是一切的本钱啊. 希望广大程序员使用番茄工作法, 再健康生活几十年.&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/adalovelacer/p/ReActive-GuangZhou-DotNet-Club.html&quot; target=&quot;_blank&quot;&gt;广州.NET俱乐部&lt;/a&gt;会在这个话题上持续探讨.&lt;/p&gt;

</description>
<pubDate>Mon, 13 May 2019 18:00:00 +0000</pubDate>
<dc:creator>叶伟民</dc:creator>
<og:description>《我是如何学习和工作的(1) - 番茄工作法(1)》后, 不知不觉已经4个月过去，这里回答一下大家问的问题和讲述一下理论基础</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/adalovelacer/p/pomodoro-technique-guang-zhou-dot-net-club-2.html</dc:identifier>
</item>
<item>
<title>使用Samba在Linux服务器上搭建共享文件服务 - RHINO_WU</title>
<link>http://www.cnblogs.com/rhino/p/share-folder-with-samba.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rhino/p/share-folder-with-samba.html</guid>
<description>&lt;p&gt;最近我们的小团队需要在服务器上共分出一个共享文件夹用于大家存放公共的资源文档， 大家想啊，这肯定很简单呀，在Windows下面只要创建相关的windows account，共享某个文件夹，把读/写权限给我们创建的account的，就完成了共享，但在Linux下面就没有这么美好了，网上查阅资源资料多指向通过Samba完成共享任务，但一些blog只介绍了怎么做，但没有为什么这么 做，搭建工作且不太顺利，对Linux算不上熟悉，走了很多弯路，所以通过这篇blog深入理解其中的每一步。&lt;/p&gt;

&lt;p&gt;Samba是在Linux和UNIX系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。这些是废话….. 来看点有意思的。作者Tridgwell申请使用SMBServer ( Server Message Block 的简写 ) 注册这个软件的商标, 因为SMB 是没有意义的文字而没有办法注册。然后他就翻字典，看到SAMBA一遍正好包含SMB几个字母 ，这这个词也是我们熟知的拉丁舞蹈的名称，然后就有了三八这个名字🙄。（自百科）&lt;/p&gt;

&lt;p&gt;搭建Samba共享目录, 如果需要使用用户名/密码的形式访问共享目录，我们需要先创建Linux的user，然后通过&lt;code&gt;smbpasswd&lt;/code&gt;创建samba用户（用户名需要一致），原文在这里:&lt;/p&gt;
&lt;p&gt;To provide authentication on a standalone host, you have to create the accounts locally on the operating system and additionally in the Samba database. By default, Samba uses the &lt;code&gt;tdbsam&lt;/code&gt; back end and stores the database in the &lt;code&gt;/usr/local/samba/private/passdb.tdb&lt;/code&gt; file. Optionally set a different location in the &lt;code&gt;smb.conf&lt;/code&gt; file using the &lt;code&gt;passdb backend&lt;/code&gt; parameter. See the &lt;code&gt;smb.conf 5&lt;/code&gt; man page for details(from &lt;a href=&quot;https://wiki.samba.org/index.php/Setting_up_Samba_as_a_Standalone_Server&quot;&gt;https://wiki.samba.org/index.php/Setting_up_Samba_as_a_Standalone_Server&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;1． 创建共享目录的用户,  我们这里使用来组(group)来演示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;groupadd smbgrp
useradd fielshare &lt;/span&gt;-s /sbin/nologin -g smbgrp -p &amp;lt;password&amp;gt;&lt;span&gt;
#创建同名的smb用户, 这里的密码和local用户的密码是完全独立的，我们最后用的通过smbpasswd创建的用户
smbpasswd &lt;/span&gt;-a fielshare
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2． 创建需要共享的工作目录，设置好文件夹的权限&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir&lt;/span&gt; -p /srv/samba/&lt;span&gt;secure
&lt;/span&gt;&lt;span&gt;chmod&lt;/span&gt; -R &lt;span&gt;0770&lt;/span&gt; /srv/samba/&lt;span&gt;secure
&lt;/span&gt;&lt;span&gt;chown&lt;/span&gt; -R root:smbgrp /srv/samba/secure
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;搭建Samba共享目录, 如果需要使用用户名/密码的形式访问共享目录，我们需要先创建Linux的user，然后通过&lt;code&gt;smbpasswd&lt;/code&gt;创建samba用户（用户名需要一致），原文在这里:&lt;/p&gt;

&lt;p&gt;3． 修改安全上文&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
chcon -t samba_share_t /srv/samba/secure
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这条命令是SELinux(详见&lt;a href=&quot;https://en.wikipedia.org/wiki/Security-Enhanced_Linux&quot;&gt;Security-Enhanced Linux&lt;/a&gt;)下面的命令, 作用提把/srv/samba/securel切换到samba的上下文中。&lt;/p&gt;

&lt;p&gt;4． 修改配置文件smb.conf&lt;/p&gt;
&lt;p&gt;修改配置文件之前 ，我们先做好备份工作，以防不测。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cp&lt;/span&gt; /etc/samba/smb.conf /etc/samba/smb.conf.orig
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在这里我们有以下事情需要做：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在[global] section下修改workgroup为WORKGROUP (就是我的电脑=&amp;gt;属性=&amp;gt; 计算机名看到的工作级的名字)&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/204983/201905/204983-20190513235647848-2071803545.png&quot; alt=&quot;&quot;/&gt;
&lt;/li&gt;
&lt;li&gt;设置[global] 下的netbios name, 这个可以是任意，就是我们在我的芳邻下看到的计算机名称&lt;/li&gt;
&lt;li&gt; 确定 [global] 下security设置为user&lt;/li&gt;
&lt;li&gt;添加共享目录的配置&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#为暴露在我的芳邻里点进去看到的文件夹名称&lt;br/&gt;[share]
　　comment &lt;/span&gt;=&lt;span&gt; Secure File Server Share&lt;br/&gt;　　# 为需要共享的目录
　　path &lt;/span&gt;=  /srv/samba/&lt;span&gt;secure&lt;br/&gt;　　# 可访问的用户，多用户用空格隔开, 以@开头为用户组
　　valid users &lt;/span&gt;=&lt;span&gt; @smbgrp&lt;br/&gt;　　# 关闭匿名访问，设置为no
　　guest ok &lt;/span&gt;=&lt;span&gt; no
　　writable &lt;/span&gt;=&lt;span&gt; yes
　　browsable &lt;/span&gt;= yes
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;整个smb.conf文件如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
# See smb.conf.example &lt;span&gt;for&lt;/span&gt; a &lt;span&gt;more&lt;/span&gt; detailed config &lt;span&gt;file&lt;/span&gt;&lt;span&gt; or
# read the smb.conf manpage.
# Run &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;testparm&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; to verify the config is correct after
# you modified it.
 
[global]
　　workgroup &lt;/span&gt;=&lt;span&gt; WORKGROUP
　　netbios name &lt;/span&gt;=&lt;span&gt; centos
　　security &lt;/span&gt;=&lt;span&gt; user
　　passdb backend &lt;/span&gt;=&lt;span&gt; tdbsam
　　printing &lt;/span&gt;=&lt;span&gt; cups
　　printcap name &lt;/span&gt;=&lt;span&gt; cups
　　load printers &lt;/span&gt;=&lt;span&gt; no
　　cups options &lt;/span&gt;=&lt;span&gt; raw
 

[printers]
　　comment &lt;/span&gt;=&lt;span&gt; All Printers
　　path &lt;/span&gt;= /var/&lt;span&gt;tmp
　　printable &lt;/span&gt;=&lt;span&gt; Yes
　　create mask &lt;/span&gt;= &lt;span&gt;0600&lt;/span&gt;&lt;span&gt;
　　browseable &lt;/span&gt;=&lt;span&gt; No

[print$]
　　comment &lt;/span&gt;=&lt;span&gt; Printer Drivers
　　path &lt;/span&gt;= /var/lib/samba/&lt;span&gt;drivers
　　&lt;/span&gt;&lt;span&gt;write&lt;/span&gt; list =&lt;span&gt; @printadmin root
　　force group &lt;/span&gt;=&lt;span&gt; @printadmin
　　create mask &lt;/span&gt;= &lt;span&gt;0664&lt;/span&gt;&lt;span&gt;
　　directory mask &lt;/span&gt;= &lt;span&gt;0775&lt;/span&gt;&lt;span&gt;

　[share]
　　comment &lt;/span&gt;= secure &lt;span&gt;file&lt;/span&gt;&lt;span&gt; share
　　path &lt;/span&gt;= /srv/samba/&lt;span&gt;secure
　　valid users &lt;/span&gt;=&lt;span&gt; @smbgrp
　　guest ok &lt;/span&gt;=&lt;span&gt; no
　　writable &lt;/span&gt;=&lt;span&gt; yes
　　browsable &lt;/span&gt;=&lt;span&gt; yes
　　browseable &lt;/span&gt;= yes
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　注意smb.conf默认会有[home]节点，如果不是不想得一个和用户名同名的文件夹，请删除它。 &lt;/p&gt;
&lt;p&gt;　　完成编辑, 保存配置文件,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/204983/201905/204983-20190514000821832-502797145.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　执行testparm后会得到下面相似的结果，就是说配置文件没有问题&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@localhost software]# testparm
Load smb config files from &lt;/span&gt;/etc/samba/&lt;span&gt;smb.conf
rlimit_max: increasing rlimit_max (&lt;/span&gt;&lt;span&gt;1024&lt;/span&gt;) to minimum Windows limit (&lt;span&gt;16384&lt;/span&gt;&lt;span&gt;)
Processing section &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[printers]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
Processing section &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[print$]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
Processing section &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[share]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
Loaded services &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt; OK.
Server role: ROLE_STANDALONE

Press enter to see a dump of your service definitions

# Global parameters
[global]
        load printers &lt;/span&gt;=&lt;span&gt; No
        netbios name &lt;/span&gt;=&lt;span&gt; CENTOS-SHARE
        printcap name &lt;/span&gt;=&lt;span&gt; cups
        security &lt;/span&gt;=&lt;span&gt; USER
        idmap config &lt;/span&gt;* : backend =&lt;span&gt; tdb
        cups options &lt;/span&gt;=&lt;span&gt; raw


[printers]
        browseable &lt;/span&gt;=&lt;span&gt; No
        comment &lt;/span&gt;=&lt;span&gt; All Printers
        create mask &lt;/span&gt;= &lt;span&gt;0600&lt;/span&gt;&lt;span&gt;
        path &lt;/span&gt;= /var/&lt;span&gt;tmp
        printable &lt;/span&gt;=&lt;span&gt; Yes


[print$]
        comment &lt;/span&gt;=&lt;span&gt; Printer Drivers
        create mask &lt;/span&gt;= &lt;span&gt;0664&lt;/span&gt;&lt;span&gt;
        directory mask &lt;/span&gt;= &lt;span&gt;0775&lt;/span&gt;&lt;span&gt;
        force group &lt;/span&gt;=&lt;span&gt; @printadmin
        path &lt;/span&gt;= /var/lib/samba/&lt;span&gt;drivers
        &lt;/span&gt;&lt;span&gt;write&lt;/span&gt; list =&lt;span&gt; @printadmin root


[share]
        comment &lt;/span&gt;= secure &lt;span&gt;file&lt;/span&gt;&lt;span&gt; share
        path &lt;/span&gt;= /home/&lt;span&gt;share
        read only &lt;/span&gt;=&lt;span&gt; No
        valid users &lt;/span&gt;=&lt;span&gt; @smbgrp
[root@localhost software]#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5． 重启samba服务, 打开我的电脑进行测试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;systemctl restart smb.service
systemctl restart nmb.service&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由于测试机和Linux主机不在同一个网络，我的芳邻里面找不到我配置的芳邻 CENTOS-SHARE， 这里我通过IP直接访问&lt;/p&gt;

&lt;p&gt;6． 别忘了添加防火墙，不然你是看不到你的芳邻的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
firewall-cmd --permanent --zone=public --add-service=&lt;span&gt;samba
firewall&lt;/span&gt;-cmd --reload
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/204983/201905/204983-20190514003518734-1191606525.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/204983/201905/204983-20190514003449083-1530129598.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;这里只演示了使用了用户名的验证模式来共享文件夹，主要是针对Windows的，对这一块不熟悉的同学可以自行尝试匿名共享。在设置过程中，我接触到以前没有接触到东西SELinux，这一块还是有很多的东西的。对于SAMBA的使用介绍网上有不少文章的，写这遍博客的目的也算是多个视角来告诉大家如何使用。 &lt;/p&gt;
</description>
<pubDate>Mon, 13 May 2019 16:32:00 +0000</pubDate>
<dc:creator>RHINO_WU</dc:creator>
<og:description>最近我们的小团队需要在服务器上共分出一个共享文件夹用于大家存放公共的资源文档， 大家想啊，这肯定很简单呀，在Windows下面只要创建相关的windows account，共享某个文件夹，把读/写权限</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rhino/p/share-folder-with-samba.html</dc:identifier>
</item>
<item>
<title>Python进阶之网络编程 - YifChan</title>
<link>http://www.cnblogs.com/yifchan/p/python-1-22.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yifchan/p/python-1-22.html</guid>
<description>&lt;h2 id=&quot;网络通信&quot;&gt;网络通信&lt;/h2&gt;
&lt;h3 id=&quot;使用网络的目的&quot;&gt;使用网络的目的&lt;/h3&gt;
&lt;p&gt;把多方链接在一起，进行数据传递；&lt;br/&gt;网络编程就是，让不同电脑上的软件进行数据传递，即进程间通信；&lt;/p&gt;
&lt;h3 id=&quot;ip地址&quot;&gt;ip地址&lt;/h3&gt;
&lt;h4 id=&quot;ip地址概念和作用&quot;&gt;ip地址概念和作用&lt;/h4&gt;
&lt;p&gt;IP地址是什么：比如192.168.1.1 这样的一些数字；&lt;br/&gt;ip地址的作用：用来在电脑中 标识唯一一台电脑，比如192.168.1.1；在本地局域网是唯一的。&lt;/p&gt;
&lt;h4 id=&quot;网卡信息&quot;&gt;网卡信息&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;查看网卡信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linux：ifconfig&lt;br/&gt;windows：ipconfig&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ensxx：用来与外部进行通信的网卡；&lt;/li&gt;
&lt;li&gt;lo：环回网卡，用来进行本地通信的；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;linux关闭/开启网卡：sudo ifconfig ensxx down/up&lt;/p&gt;
&lt;h4 id=&quot;ip和ip地址的分类&quot;&gt;ip和ip地址的分类&lt;/h4&gt;
&lt;p&gt;ip分为ipv4和ipv6&lt;/p&gt;
&lt;p&gt;ip地址分为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A类地址&lt;/li&gt;
&lt;li&gt;B类地址&lt;/li&gt;
&lt;li&gt;C类地址&lt;/li&gt;
&lt;li&gt;D类地址--用于多播&lt;/li&gt;
&lt;li&gt;E类地址--保留地址，因ipv6诞生，已无用&lt;/li&gt;
&lt;li&gt;私有ip&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;单播--一对一&lt;br/&gt;多播--一对多&lt;br/&gt;广播--多对多&lt;/p&gt;
&lt;h3 id=&quot;端口&quot;&gt;端口&lt;/h3&gt;
&lt;p&gt;ip：标识电脑；&lt;br/&gt;&lt;strong&gt;端口：标识电脑上的进程(正在运行的程序)；&lt;/strong&gt;&lt;br/&gt;ip和端口一起使用，唯一标识主机中的应用程序，进行统一软件的通信；&lt;/p&gt;
&lt;h4 id=&quot;端口分类&quot;&gt;端口分类&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;知名端口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;固定分配给特定进程的端口号，其他进程一般无法使用这个端口号；&lt;br/&gt;小于1024的，大部分都是知名端口；&lt;br/&gt;范围从0~1023；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动态端口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不固定分配，动态分配，使用后释放的端口号；&lt;br/&gt;范围1024~65535；&lt;/p&gt;
&lt;h2 id=&quot;socket&quot;&gt;socket&lt;/h2&gt;
&lt;h3 id=&quot;socket的概念&quot;&gt;socket的概念&lt;/h3&gt;
&lt;p&gt;socket是进程间通信的一种方式，能实现不同主机间的进程间通信，即socket是用来网络通信必备的东西；&lt;/p&gt;
&lt;h3 id=&quot;创建socket&quot;&gt;创建socket&lt;/h3&gt;
&lt;p&gt;创建套接字：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import socket
soc = socket.socket(AddressFamily, Type)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;函数socket.socket创建一个socket，该函数有两个参数：&lt;br/&gt;Address Family:可选 AF_INET(用于internet进程间通信)和AF_UNIX(用于同一台机器进程间通信);&lt;br/&gt;Type:套接字类型，可选 SOCK_STREAM(流式套接字，主用于TCP协议)/SOCK_DGRAM(数据报套接字，主用于UDP套接字);&lt;/p&gt;
&lt;p&gt;创建tcp套接字&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import socket

soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
...
soc.close()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;创建udp套接字&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import socket

soc = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
...
soc.close()&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;udp&quot;&gt;udp&lt;/h2&gt;
&lt;h3 id=&quot;udp使用socket发送数据&quot;&gt;udp使用socket发送数据&lt;/h3&gt;
&lt;p&gt;在同一局域网内发消息；&lt;br/&gt;如果用虚拟机和windows，要用桥接模式，确保在同一局域网内；&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import socket


def main():
    # 创建一个udp套接字
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    # 使用套接字收发数据
    udp_socket.sendto(b&quot;hahaha&quot;, (&quot;193.168.77.1&quot;, 8080))
    # 关闭套接字
    udp_socket.close()


if __name__ == &quot;__main__&quot;:
    main()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;udp发送数据的几种情况：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在固定数据的引号前加b，不能使用于用户自定义数据；&lt;/li&gt;
&lt;li&gt;用户自定义数据，并进行发送，使用.encode(&quot;utf-8&quot;)进行encode编码&lt;/li&gt;
&lt;li&gt;用户循环发送数据&lt;/li&gt;
&lt;li&gt;用户循环发送数据并可以退出&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;只贴出最后一种情况，即完整代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import socket


def main():
    # 创建一个udp套接字
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    while 1:
        # 从键盘获取要发送的数据
        send_data = input(&quot;请输入你要发送的数据：&quot;)
        if send_data == &quot;exit&quot;:
            break
        # 使用套接字收发数据
        udp_socket.sendto(send_data.encode(&quot;utf-8&quot;), (&quot;193.168.77.1&quot;, 8080))

    # 关闭套接字
    udp_socket.close()


if __name__ == &quot;__main__&quot;:
    main()&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;udp接收数据&quot;&gt;udp接收数据&lt;/h3&gt;
&lt;p&gt;接收到的数据是一个元组，元组第一部分是发送方发送的内容，元组第二部分是发送方的ip地址和端口号；&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import socket


def main():
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    localaddr = ('', 8080)
    udp_socket.bind(localaddr)  # 必须绑定自己电脑的ip和端口

    # 接收数据
    recv_data = udp_socket.recvfrom(1024)
    # recv_data这个变量存储的是一个元组，例如 (b'hahaha', ('192.168.77.1', 8888))
    recv_msg = recv_data[0]
    send_addr = recv_data[1]
    # print(&quot;%s 发送了：%s&quot; % (str(send_addr), recv_msg.decode(&quot;utf-8&quot;)))  # linux发送的数据用utf8解码
    print(&quot;%s 发送了：%s&quot; % (str(send_addr), recv_msg.decode(&quot;gbk&quot;)))  # windows发送的数据用gbk解码

    udp_socket.close()


if __name__ == &quot;__main__&quot;:
    main()&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;udp接发数据总结&quot;&gt;udp接发数据总结&lt;/h3&gt;
&lt;p&gt;发送数据的流程：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;创建套接字&lt;/li&gt;
&lt;li&gt;发送数据&lt;/li&gt;
&lt;li&gt;关闭套接字&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;接收数据的流程：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;创建套接字&lt;/li&gt;
&lt;li&gt;绑定本地自己的信息，ip和端口&lt;/li&gt;
&lt;li&gt;接收数据&lt;/li&gt;
&lt;li&gt;关闭套接字&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;端口绑定的问题&quot;&gt;端口绑定的问题&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;如果在你发送数据时，还没有绑定端口，那么操作系统就会随机给你分配一个端口，循环发送时用的是同一个端口；&lt;/li&gt;
&lt;li&gt;也可以先绑定端口，再发送数据。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;udp发送消息时自己绑定端口示例&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import socket


def main():
    # 创建一个udp套接字
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    # 绑定端口
    udp_socket.bind(('192.168.13.1', 8080))
    while 1:
        # 从键盘获取要发送的数据
        send_data = input(&quot;请输入你要发送的数据：&quot;)
        if send_data == &quot;exit&quot;:
            break
        # 使用套接字收发数据
        udp_socket.sendto(send_data.encode(&quot;utf-8&quot;), (&quot;193.168.77.1&quot;, 8080))

    # 关闭套接字
    udp_socket.close()  # 按ctrl+c退出


if __name__ == &quot;__main__&quot;:
    main()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但应注意，&lt;strong&gt;同一端口在同一时间不能被两个不同的程序同时使用&lt;/strong&gt;；&lt;/p&gt;
&lt;h3 id=&quot;单工半双工全双工&quot;&gt;单工，半双工，全双工&lt;/h3&gt;
&lt;h4 id=&quot;单工半双工全双工的理解&quot;&gt;单工半双工全双工的理解&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;单工&lt;/strong&gt;:&lt;br/&gt;只能单向发送信息，别人接收，别人不能回复消息，比如广播；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;半双工&lt;/strong&gt;:&lt;br/&gt;两个人都能发消息，但是在同一时间只能有一个人发消息，比如对讲机；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全双工&lt;/strong&gt;：&lt;br/&gt;两个人都能发消息，能同时发，比如打电话；&lt;/p&gt;
&lt;h4 id=&quot;udp使用同一套接字收且发数据&quot;&gt;udp使用同一套接字收且发数据&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&quot;&quot;&quot;socket套接字是全双工&quot;&quot;&quot;
import socket


def main():
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_socket.bind(('192.168.13.1', 8080))
    # 让用户输入要发送的ip地址和端口
    dest_ip = input(&quot;请输入你要发送数据的ip地址：&quot;)
    dest_port = int(input(&quot;请输入你要发送数据的端口号：&quot;))

    # 从键盘获取要发送的数据
    send_data = input(&quot;请输入你要发送的数据：&quot;)
    # 使用套接字收发数据
    udp_socket.sendto(send_data.encode(&quot;utf-8&quot;), (dest_ip, dest_port))
    # 套接字可以同时 收发数据；
    recv_data = udp_socket.recvfrom(1024)
    print(recv_data)

    # 关闭套接字
    udp_socket.close()  # 按ctrl+c退出


if __name__ == &quot;__main__&quot;:
    main()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在这里体现不出来socket是全双工，因为现在解释器只能按照流程，一步一步走下去，后面学习了进程线程协程就可以做到了。&lt;/p&gt;
&lt;h2 id=&quot;tcp&quot;&gt;tcp&lt;/h2&gt;
&lt;h3 id=&quot;tcp-可靠传输&quot;&gt;tcp-可靠传输&lt;/h3&gt;
&lt;h4 id=&quot;tcp采取的机制&quot;&gt;tcp采取的机制&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;采用发送应答机制&lt;/li&gt;
&lt;li&gt;超时重传&lt;/li&gt;
&lt;li&gt;错误校验&lt;/li&gt;
&lt;li&gt;流量控制和阻塞管理&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;tcp与udp的区别&quot;&gt;tcp与udp的区别&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;tcp更安全可靠，udp相对没那么安全可靠；&lt;/li&gt;
&lt;li&gt;面向连接&lt;/li&gt;
&lt;li&gt;有序数据传输&lt;/li&gt;
&lt;li&gt;重发丢失的数据&lt;/li&gt;
&lt;li&gt;舍弃重复的数据包&lt;/li&gt;
&lt;li&gt;无差错的数据传输&lt;/li&gt;
&lt;li&gt;阻塞/流量控制&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;tcpudp应用场景&quot;&gt;tcp，udp应用场景&lt;/h4&gt;
&lt;p&gt;tcp应用场景：下载，发送消息&lt;br/&gt;udp应用场景：电话，视频直播等&lt;/p&gt;
&lt;h3 id=&quot;tcp客户端&quot;&gt;tcp客户端&lt;/h3&gt;
&lt;p&gt;tcp客户端发送数据&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import socket


def main():
    # 1.创建tcp的套接字
    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # 2.链接服务器
    tcp_socket.connect(('193.168.11.1', 8080))
    # 3.发送/接收消息
    send_data = input(&quot;请输入你要发送的消息：&quot;)
    tcp_socket.send(send_data.encode(&quot;utf-8&quot;))
    # 4.关闭套接字
    tcp_socket.close()


if __name__ == &quot;__main__&quot;:
    main()&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;tcp服务器&quot;&gt;tcp服务器&lt;/h3&gt;
&lt;p&gt;监听套接字，专门用来监听的；&lt;br/&gt;accept会对应新创建的套接字，当监听套接字收到一个请求后，将该请求分配给新套接字，由此监听套接字可以继续去监听了，而新套接字则为该胡克段服务。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import socket


def main():
    # 创建tcp套接字
    tcp_service_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    tcp_service_socket.bind(('', 8080))
    # 让默认的套接字由主动变为被动
    tcp_service_socket.listen(128)

    # 等待客户端的链接
    new_client_socket, client_addr = tcp_service_socket.accept()
    print(&quot;链接的客户端地址为：&quot;, client_addr)
    # 接收客户端发送过来的请求
    recv_data = new_client_socket.recvfrom(1024)
    print(recv_data)
    # 给客户端回送消息
    new_client_socket.send(&quot;hahahah&quot;.encode(&quot;utf-8&quot;))

    new_client_socket.close()
    tcp_service_socket.close()


if __name__ == '__main__':
    main()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;listen里面的参数，表示同时只允许128个链接访问。&lt;/p&gt;
&lt;h4 id=&quot;qq不绑定端口的运行原理-扩展&quot;&gt;QQ不绑定端口的运行原理-扩展&lt;/h4&gt;
&lt;p&gt;udp和tcp并用；&lt;br/&gt;使用QQ，先登录，登录后告诉腾讯服务器此QQ运行的端口，发消息时，通过腾讯服务器转发给另一个QQ；&lt;br/&gt;不绑定端口也有一个好处，就是允许多开，即一个电脑上可以运行多个QQ；&lt;/p&gt;
&lt;h4 id=&quot;recv和recvfrom的区别&quot;&gt;recv和recvfrom的区别&lt;/h4&gt;
&lt;p&gt;recvfrom里面不仅有发过来的数据，还有发过来数据的人的信息；&lt;br/&gt;recv里面就只有数据；&lt;/p&gt;
&lt;h3 id=&quot;tcp客户端服务端流程梳理&quot;&gt;tcp客户端服务端流程梳理&lt;/h3&gt;
&lt;h4 id=&quot;tcp服务器流程梳理&quot;&gt;tcp服务器流程梳理&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;创建服务器套接字&lt;/li&gt;
&lt;li&gt;绑定本地信息&lt;/li&gt;
&lt;li&gt;让默认的套接字由主动变为被动&lt;/li&gt;
&lt;li&gt;等待客户端的链接，堵塞&lt;/li&gt;
&lt;li&gt;被客户端链接后，创建一个新的客服套接字为客户端服务；&lt;/li&gt;
&lt;li&gt;接收客户端发送的消息，堵塞&lt;/li&gt;
&lt;li&gt;接收客户端发送的消息后，给客户端回消息&lt;/li&gt;
&lt;li&gt;关闭客服套接字，关闭服务端套接字&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;tcp注意点&quot;&gt;tcp注意点&lt;/h3&gt;
&lt;ol readability=&quot;5.5&quot;&gt;&lt;li&gt;tcp服务器一般情况下都需要綁定，否则客户端找不到这个服务器。&lt;/li&gt;
&lt;li&gt;tcp客户端一般不绑定,因为是主动链接服务器,所以只要确定好服务器的ip， port等信息就好，本地客户端可以随机。&lt;/li&gt;
&lt;li&gt;tcp服务器通过listen可以将socket创建出来的主动套接字变为被动的,这是做tcp服务器时必须要做的。&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;当客户端需要链接服务器时，就需要使用connect进行链接, udp是不需要链接的而是直接发送，但是tcp必须先链接，只有链接成功才能通信。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;当一个tcp客户端连接服务器时，服务器端会有1个新的套接字,这个套接字用来标记这个客户端,单独为这个客户端服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;liston后的套接字是被动套接字，用来接收新的客户端的链接请求的，而accept返回的新套接字是标记这个新客户端的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;关闭isten后的套接字意味着被动套接字关闭了，会导致新的客户端不能够链接服务器，但是之前已经链接成功的客户端正常通信。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;关闭accept返回的套接字意味着这个客户端已经服务完毕。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;9.当客户端的套接字调用close后.服务器端会recv解堵塞,并且返回的长度为0，因此服务器可以通过 返回数据的长度来区别客户端是否已经下线。&lt;/p&gt;
&lt;h3 id=&quot;tcp应用案例&quot;&gt;tcp应用案例&lt;/h3&gt;
&lt;p&gt;示例1-为一个用户办理一次业务：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot;&quot;&quot;可以理解为银行一个客服为排队的人员办理业务&quot;&quot;&quot;

import socket


def main():
    # 1.创建tcp套接字
    tcp_service_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # 2.绑定本地信息
    tcp_service_socket.bind(('', 8080))

    # 3.让默认的套接字由主动变为被动
    tcp_service_socket.listen(128)
    while 1:
        # 4.等待客户端的链接
        new_client_socket, client_addr = tcp_service_socket.accept()
        print(&quot;链接的客户端地址为：&quot;, client_addr)
        # 接收客户端发送过来的请求
        recv_data = new_client_socket.recvfrom(1024)
        print(recv_data)
        # 给客户端回送消息
        new_client_socket.send(&quot;hahahah&quot;.encode(&quot;utf-8&quot;))
        # 关闭套接字
        new_client_socket.close()

    tcp_service_socket.close()


if __name__ == '__main__':
    main()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例2-为同一用户服务多次并判断一个用户是否服务完毕：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot;&quot;&quot;可以理解为银行一个客服为排队的人员办理业务&quot;&quot;&quot;

import socket


def main():
    # 1.创建tcp套接字
    tcp_service_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # 2.绑定本地信息
    tcp_service_socket.bind(('', 8080))

    # 3.让默认的套接字由主动变为被动
    tcp_service_socket.listen(128)
    while 1:
        # 4.等待客户端的链接
        new_client_socket, client_addr = tcp_service_socket.accept()
        print(&quot;链接的客户端地址为：&quot;, client_addr)
        # 循环目的：为同一个客户服务多次
        while 1:
            # 接收客户端发送过来的请求
            recv_data = new_client_socket.recvfrom(1024)
            print(recv_data)
            # 如果recv解堵塞，那么有两种方式
            # 1.客户端发了数据过来
            # 2.客户端调用了close
            if recv_data:
                # 给客户端回送消息
                new_client_socket.send(&quot;hahahah&quot;.encode(&quot;utf-8&quot;))
            else:
                break
        # 关闭套接字
        new_client_socket.close()

    tcp_service_socket.close()


if __name__ == '__main__':
    main()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例3-tcp文件下载客户端和服务端：&lt;/p&gt;
&lt;p&gt;文件下载客户端&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import socket


def main():
    # 1.创建套接字
    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # 2.获取服务器的ip，port
    dest_ip = input(&quot;请输入你要链接的服务器ip：&quot;)
    dest_port = input(&quot;请输入你要链接的端口：&quot;)
    # 3.链接服务器
    tcp_socket.connect((dest_ip, dest_port))

    # 4.获取下载的文件名字
    want_file = input(&quot;请输入你要下载的文件：&quot;)
    # 5.将文件名字发送到服务器
    tcp_socket.send(want_file.encode(&quot;utf-8&quot;))

    # 6.接收要下载的文件
    file_data = tcp_socket.recv(1024)
    # 7.将接收文件的数据写入一个文件中
    if file_data:
        with open(&quot;[复件]&quot; + want_file, &quot;wb&quot;) as f:
            f.write(file_data)

    # 8.关闭套接字
    tcp_socket.close()
    pass


if __name__ == '__main__':
    main()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;文件下载服务端&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import socket


def send_file2client(new_socket, client_addr):
    # 1.接受客户端发送过来的 要下载的文件名
    want_file = new_socket.recv(1024).decode(&quot;utf-8&quot;)
    print(&quot;客户端 %s 要接收的文件为：%s&quot; % (str(client_addr), want_file))
    # 2.读取文件数据
    file_data = None
    try:
        f = open(want_file, &quot;rb&quot;)
        file_data = f.read()
        f.close()
    except Exception as e:
        print(&quot;你要下载的文件 %s 不存在&quot; % want_file)

    # 3.发送文件的数据给客户端
    if file_data:
        new_socket.send(file_data)


def main():
    # 1.创建套接字
    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # 2.绑定本地信息
    tcp_socket.bind(('', 8080))
    # 3.套接字被动接受 listen
    tcp_socket.listen(128)
    while 1:
        # 4.等待客户端的链接 accept
        new_socket, client_addr = tcp_socket.accept()
        # 5.调用函数发送文件到客户端
        send_file2client(new_socket, client_addr)
        # 7.关闭套接字
        new_socket.close()

    tcp_socket.close()


if __name__ == '__main__':
    main()&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 13 May 2019 16:24:00 +0000</pubDate>
<dc:creator>YifChan</dc:creator>
<og:description>Python进阶之网络编程，内容包括 网络通信，socket，udp，tcp。其中，网络通信 包括 使用网络的目的，ip地址，端口；socket 包括 socket的概念，创建socket；udp 包</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yifchan/p/python-1-22.html</dc:identifier>
</item>
<item>
<title>死磕 java原子类之终结篇（面试题） - 彤哥读源码</title>
<link>http://www.cnblogs.com/tong-yuan/p/Atomic.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tong-yuan/p/Atomic.html</guid>
<description>&lt;h2 id=&quot;概览&quot;&gt;概览&lt;/h2&gt;
&lt;p&gt;原子操作是指不会被线程调度机制打断的操作，这种操作一旦开始，就一直运行到结束，中间不会有任何线程上下文切换。&lt;/p&gt;
&lt;p&gt;原子操作可以是一个步骤，也可以是多个操作步骤，但是其顺序不可以被打乱，也不可以被切割而只执行其中的一部分，将整个操作视作一个整体是原子性的核心特征。&lt;/p&gt;
&lt;p&gt;在java中提供了很多原子类，笔者在此主要把这些原子类分成四大类。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20java%E5%B9%B6%E5%8F%91%E5%8C%85/resource/atomic1.png&quot; alt=&quot;atomic&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;原子更新基本类型或引用类型&quot;&gt;原子更新基本类型或引用类型&lt;/h2&gt;
&lt;p&gt;如果是基本类型，则替换其值，如果是引用，则替换其引用地址，这些类主要有：&lt;/p&gt;
&lt;p&gt;（1）AtomicBoolean&lt;/p&gt;
&lt;p&gt;原子更新布尔类型，内部使用int类型的value存储1和0表示true和false，底层也是对int类型的原子操作。&lt;/p&gt;
&lt;p&gt;（2）AtomicInteger&lt;/p&gt;
&lt;p&gt;原子更新int类型。&lt;/p&gt;
&lt;p&gt;（3）AtomicLong&lt;/p&gt;
&lt;p&gt;原子更新long类型。&lt;/p&gt;
&lt;p&gt;（4）AtomicReference&lt;/p&gt;
&lt;p&gt;原子更新引用类型，通过泛型指定要操作的类。&lt;/p&gt;
&lt;p&gt;（5）AtomicMarkableReference&lt;/p&gt;
&lt;p&gt;原子更新引用类型，内部使用Pair承载引用对象及是否被更新过的标记，避免了ABA问题。&lt;/p&gt;
&lt;p&gt;（6）AtomicStampedReference&lt;/p&gt;
&lt;p&gt;原子更新引用类型，内部使用Pair承载引用对象及更新的邮戳，避免了ABA问题。&lt;/p&gt;
&lt;p&gt;这几个类的操作基本类似，底层都是调用Unsafe的compareAndSwapXxx()来实现，基本用法如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;private static void testAtomicReference() {
    AtomicInteger atomicInteger = new AtomicInteger(1);
    atomicInteger.incrementAndGet();
    atomicInteger.getAndIncrement();
    atomicInteger.compareAndSet(3, 666);
    System.out.println(atomicInteger.get());

    AtomicStampedReference&amp;lt;Integer&amp;gt; atomicStampedReference = new AtomicStampedReference&amp;lt;&amp;gt;(1, 1);
    atomicStampedReference.compareAndSet(1, 2, 1, 3);
    atomicStampedReference.compareAndSet(2, 666, 3, 5);
    System.out.println(atomicStampedReference.getReference());
    System.out.println(atomicStampedReference.getStamp());
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;原子更新数组中的元素&quot;&gt;原子更新数组中的元素&lt;/h2&gt;
&lt;p&gt;原子更新数组中的元素，可以更新数组中指定索引位置的元素，这些类主要有：&lt;/p&gt;
&lt;p&gt;（1）AtomicIntegerArray&lt;/p&gt;
&lt;p&gt;原子更新int数组中的元素。&lt;/p&gt;
&lt;p&gt;（2）AtomicLongArray&lt;/p&gt;
&lt;p&gt;原子更新long数组中的元素。&lt;/p&gt;
&lt;p&gt;（3）AtomicReferenceArray&lt;/p&gt;
&lt;p&gt;原子更新Object数组中的元素。&lt;/p&gt;
&lt;p&gt;这几个类的操作基本类似，更新元素时都要指定在数组中的索引位置，基本用法如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;private static void testAtomicReferenceArray() {
    AtomicIntegerArray atomicIntegerArray = new AtomicIntegerArray(10);
    atomicIntegerArray.getAndIncrement(0);
    atomicIntegerArray.getAndAdd(1, 666);
    atomicIntegerArray.incrementAndGet(2);
    atomicIntegerArray.addAndGet(3, 666);
    atomicIntegerArray.compareAndSet(4, 0, 666);
    
    System.out.println(atomicIntegerArray.get(0));
    System.out.println(atomicIntegerArray.get(1));
    System.out.println(atomicIntegerArray.get(2));
    System.out.println(atomicIntegerArray.get(3));
    System.out.println(atomicIntegerArray.get(4));
    System.out.println(atomicIntegerArray.get(5));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;原子更新对象中的字段&quot;&gt;原子更新对象中的字段&lt;/h2&gt;
&lt;p&gt;原子更新对象中的字段，可以更新对象中指定字段名称的字段，这些类主要有：&lt;/p&gt;
&lt;p&gt;（1）AtomicIntegerFieldUpdater&lt;/p&gt;
&lt;p&gt;原子更新对象中的int类型字段。&lt;/p&gt;
&lt;p&gt;（2）AtomicLongFieldUpdater&lt;/p&gt;
&lt;p&gt;原子更新对象中的long类型字段。&lt;/p&gt;
&lt;p&gt;（3）AtomicReferenceFieldUpdater&lt;/p&gt;
&lt;p&gt;原子更新对象中的引用类型字段。&lt;/p&gt;
&lt;p&gt;这几个类的操作基本类似，都需要传入要更新的字段名称，基本用法如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;private static void testAtomicReferenceField() {
    AtomicReferenceFieldUpdater&amp;lt;User, String&amp;gt; updateName = AtomicReferenceFieldUpdater.newUpdater(User.class, String.class,&quot;name&quot;);
    AtomicIntegerFieldUpdater&amp;lt;User&amp;gt; updateAge = AtomicIntegerFieldUpdater.newUpdater(User.class, &quot;age&quot;);

    User user = new User(&quot;tong ge&quot;, 21);
    updateName.compareAndSet(user, &quot;tong ge&quot;, &quot;read source code&quot;);
    updateAge.compareAndSet(user, 21, 25);
    updateAge.incrementAndGet(user);
    
    System.out.println(user);
}

private static class User {
    volatile String name;
    volatile int age;

    public User(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public String toString() {
        return &quot;name: &quot; + name + &quot;, age: &quot; + age;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;高性能原子类&quot;&gt;高性能原子类&lt;/h2&gt;
&lt;p&gt;高性能原子类，是java8中增加的原子类，它们使用分段的思想，把不同的线程hash到不同的段上去更新，最后再把这些段的值相加得到最终的值，这些类主要有：&lt;/p&gt;
&lt;p&gt;（1）Striped64&lt;/p&gt;
&lt;p&gt;下面四个类的父类。&lt;/p&gt;
&lt;p&gt;（2）LongAccumulator&lt;/p&gt;
&lt;p&gt;long类型的聚合器，需要传入一个long类型的二元操作，可以用来计算各种聚合操作，包括加乘等。&lt;/p&gt;
&lt;p&gt;（3）LongAdder&lt;/p&gt;
&lt;p&gt;long类型的累加器，LongAccumulator的特例，只能用来计算加法，且从0开始计算。&lt;/p&gt;
&lt;p&gt;（4）DoubleAccumulator&lt;/p&gt;
&lt;p&gt;double类型的聚合器，需要传入一个double类型的二元操作，可以用来计算各种聚合操作，包括加乘等。&lt;/p&gt;
&lt;p&gt;（5）DoubleAdder&lt;/p&gt;
&lt;p&gt;double类型的累加器，DoubleAccumulator的特例，只能用来计算加法，且从0开始计算。&lt;/p&gt;
&lt;p&gt;这几个类的操作基本类似，其中DoubleAccumulator和DoubleAdder底层其实也是用long来实现的，基本用法如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;private static void testNewAtomic() {
    LongAdder longAdder = new LongAdder();
    longAdder.increment();
    longAdder.add(666);
    System.out.println(longAdder.sum());

    LongAccumulator longAccumulator = new LongAccumulator((left, right)-&amp;gt;left + right * 2, 666);
    longAccumulator.accumulate(1);
    longAccumulator.accumulate(3);
    longAccumulator.accumulate(-4);
    System.out.println(longAccumulator.get());
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;关于原子类的问题，笔者整理了大概有以下这些：&lt;/p&gt;
&lt;p&gt;（1）Unsafe是什么？&lt;/p&gt;
&lt;p&gt;（3）Unsafe为什么是不安全的？&lt;/p&gt;
&lt;p&gt;（4）Unsafe的实例怎么获取？&lt;/p&gt;
&lt;p&gt;（5）Unsafe的CAS操作？&lt;/p&gt;
&lt;p&gt;（6）Unsafe的阻塞/唤醒操作？&lt;/p&gt;
&lt;p&gt;（7）Unsafe实例化一个类？&lt;/p&gt;
&lt;p&gt;（8）实例化类的六种方式？&lt;/p&gt;
&lt;p&gt;（9）原子操作是什么？&lt;/p&gt;
&lt;p&gt;（10）原子操作与数据库ACID中A的关系？&lt;/p&gt;
&lt;p&gt;（11）AtomicInteger怎么实现原子操作的？&lt;/p&gt;
&lt;p&gt;（12）AtomicInteger主要解决了什么问题？&lt;/p&gt;
&lt;p&gt;（13）AtomicInteger有哪些缺点？&lt;/p&gt;
&lt;p&gt;（14）ABA是什么？&lt;/p&gt;
&lt;p&gt;（15）ABA的危害？&lt;/p&gt;
&lt;p&gt;（16）ABA的解决方法？&lt;/p&gt;
&lt;p&gt;（17）AtomicStampedReference是怎么解决ABA的？&lt;/p&gt;
&lt;p&gt;（18）实际工作中遇到过ABA问题吗？&lt;/p&gt;
&lt;p&gt;（19）CPU的缓存架构是怎样的？&lt;/p&gt;
&lt;p&gt;（20）CPU的缓存行是什么？&lt;/p&gt;
&lt;p&gt;（21）内存屏障又是什么？&lt;/p&gt;
&lt;p&gt;（22）伪共享是什么原因导致的？&lt;/p&gt;
&lt;p&gt;（23）怎么避免伪共享？&lt;/p&gt;
&lt;p&gt;（24）消除伪共享在java中的应用？&lt;/p&gt;
&lt;p&gt;（25）LongAdder的实现方式？&lt;/p&gt;
&lt;p&gt;（26）LongAdder是怎么消除伪共享的？&lt;/p&gt;
&lt;p&gt;（27）LongAdder与AtomicLong的性能对比？&lt;/p&gt;
&lt;p&gt;（28）LongAdder中的cells数组是无限扩容的吗？&lt;/p&gt;
&lt;p&gt;关于原子类的问题差不多就这么多，都能回答上来吗？点击下面的链接可以直接到相应的章节查看：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/0s-u-MysppIaIHVrshp9fA&quot;&gt;死磕 java魔法类之Unsafe解析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/DdwSC5bYgFCWwnb0jxkspg&quot;&gt;死磕 java原子类之AtomicInteger源码分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/7pY1jKNVB_dvadZRIzmD1Q&quot;&gt;死磕 java原子类之AtomicStampedReference源码分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/rd13SOSxhLA6TT13N9ni8Q&quot;&gt;杂谈 什么是伪共享（false sharing）？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/_-z1Bz2iMiK1tQnaDD4N6Q&quot;&gt;死磕 java原子类之LongAdder源码分析&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;彩蛋&quot;&gt;彩蛋&lt;/h2&gt;
&lt;p&gt;原子类系列源码分析到此就结束了，虽然分析的类比较少，但是牵涉的内容非常多，特别是操作系统底层的知识，比如CPU指令、CPU缓存架构、内存屏障等。&lt;/p&gt;
&lt;p&gt;下一章，我们将进入“同步系列”，同步最常见的就是各种锁了，这里会着重分析java中的各种锁、各种同步器以及分布式锁相关的内容。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;欢迎关注我的公众号“彤哥读源码”，查看更多源码系列文章, 与彤哥一起畅游源码的海洋。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20java%E9%9B%86%E5%90%88%E7%B3%BB%E5%88%97/resource/qrcode_ss.jpg&quot; alt=&quot;qrcode&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 13 May 2019 15:33:00 +0000</pubDate>
<dc:creator>彤哥读源码</dc:creator>
<og:description>原子类底层的实现方式？ 原子类的种类？ 原子类的面试题？</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tong-yuan/p/Atomic.html</dc:identifier>
</item>
<item>
<title>线程池原理初探 - 木瓜芒果</title>
<link>http://www.cnblogs.com/volcano-liu/p/10783008.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/volcano-liu/p/10783008.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　在Java中，我们如果想同时做多件事情，则需要将不同事情以任务的形式抽象出来(即实现了Runnable接口的类)，将不同的任务交给线程来驱动，以完成同时执行多件事情的效果。创建任务很容易，new一个类就可以了，但是要跑起来还需要线程啊，线程可是稀缺资源啊，怎么获取呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　前面在&lt;a href=&quot;https://www.cnblogs.com/volcano-liu/p/10765247.html&quot; target=&quot;_blank&quot;&gt;Java线程机制&lt;/a&gt;一文中我们简单介绍了线程创建的几种方法，但这只是作为学习使用的，在生产环境中一般是不会直接通过新建线程来获取线程资源的。因为Java中的线程是和操作系统底层的线程挂钩的，创建线程是一个很消耗时间和资源的事情，如果频繁创建和销毁线程就可能会导致资源耗尽；而且如果创建了大量线程，也会导致线程之间的频繁切换，这也是很耗时间的操作。因此，JDK中提供了线程池来帮助我们获取和管理线程资源。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　有了线程池，我们无需直接创建线程，只需将需要执行的任务交给线程池就好了，线程池会帮我们分配线程来执行任务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　使用线程池，有如下好处：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;线程池帮我们管理线程，使得我们无需关心这些细节，可以更专注于任务的实现，解耦；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;线程池通过统一管理创建的线程，实现线程的复用，避免线程的频繁创建和销毁，减少了在创建和销毁线程上所花的时间以及系统资源的开销，资源利用率更高；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;当需要执行大量的异步任务时，由线程池统一管理和调配线程资源，可以获得更好的性能；&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;span&gt;本文我们会从如下几个方面来进行总结：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;a href=&quot;http://www.cnblogs.com/volcano-liu/p/10783008.html#a&quot;&gt;Executor框架&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;a href=&quot;http://www.cnblogs.com/volcano-liu/p/10783008.html#b&quot;&gt;线程池使用&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;a href=&quot;http://www.cnblogs.com/volcano-liu/p/10783008.html#c&quot;&gt;线程池结构及状态&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;a href=&quot;http://www.cnblogs.com/volcano-liu/p/10783008.html#d&quot;&gt;总结&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;1. Executor框架&lt;/h2&gt;
&lt;p&gt;　　&lt;span&gt;既然线程池这么好，我们就来看看JDK中提供了哪些线程池供我们使用吧。Java中提供线程池工具的是Executor框架，如下是其类图，我们看一下其基本组成：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1335887/201905/1335887-20190510214700767-1692093186.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;1.1 Eecutor&lt;/h3&gt;
&lt;p&gt;　　&lt;span&gt;处于最顶部的是Executor，这是一个基础接口，只定义了一个唯一方法execute()，用于提交任务：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; execute(Runnable command);
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.2 ExecutorService&lt;/h3&gt;
&lt;p&gt;　　&lt;span&gt;ExecutorService则提供了更多功能，包括service的管理功能如shutdown等方法，还包括不同于execute的更全面的提交任务机制，如返回Future的submit方法。因为Runnable是执行工作的独立任务，但是它不返回任何值，如果希望任务在完成时能够返回一个值，那么可以让任务实现Callable接口而不是Runnable接口，并且必须使用ExecutorService.submit()方法提交任务，看一个demo吧：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;// 定义一个带返回值的任务，实现Callable接口&lt;br/&gt;class&lt;/span&gt; TaskWithResult &lt;span&gt;implements&lt;/span&gt; Callable&amp;lt;String&amp;gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; TaskWithResult(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }&lt;br/&gt;　　 // 这个就是提供返回值的方法，当获取返回值时实际会调用这个方法
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String call(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;result of TaskWithResult &quot; +&lt;span&gt; id;
    }
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CallableDemo{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        ExecutorService exec &lt;/span&gt;=&lt;span&gt; Executors.newCachedThreadPool();
        ArrayList&lt;/span&gt;&amp;lt;Futrue&amp;lt;String&amp;gt;&amp;gt; results = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Future&amp;lt;String&amp;gt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = 0; i&amp;lt;10 ; i++&lt;span&gt;){&lt;br/&gt;　　　　　　  // 提交任务之后会返回一个Future，可以通过它的get方法获取任务计算返回的结果
            results.add(exec.submit(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; TaskWithResult(i)));
        }
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(Future&amp;lt;String&amp;gt;&lt;span&gt; fs : results){
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用get()方法时必要的话(计算任务未完成)会阻塞&lt;/span&gt;
&lt;span&gt;                System.out.println(fs.get());
            }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(InterruptedException e){
                System.out.println(e);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(ExecutionExecution e){
                System.out.println(e);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }&lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;{
                exec.shutdown();
            }
        }
    }
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; output:
result of TaskWithResult 0
result of TaskWithResult 1
...
result of TaskWithResult 9
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.3 线程池实现&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　JDK提供了几种线程池基础实现，分别是ThreadPoolExecutor、ScheduledThreadPoolExecutor、ForkJoinPool。通过不同的构造参数，我们可以产生多种不同特性的线程池以满足复杂多变的实际应用场景。后面我们会进一步分析其构造函数部分源码，来剖析这个灵活性的源头。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;1.4 Executors　　&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　借助Executors提供的静态工厂方法，我们可以方便地创建出不同配置的线程池，Executors目前主要提供了如下几种不同的线程池创建方式：&lt;/span&gt;&lt;/p&gt;
&lt;ul data-source-line=&quot;22&quot; readability=&quot;8.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;newCachedThreadPool()，它是一种用来处理大量短时间工作任务的线程池，它会试图缓存线程并重用，当无缓存线程可用时，就会创建新的工作线程；如果线程闲置的时间超过60秒，则被终止并移出缓存；长时间闲置时，这种线程池，不会消耗什么资源。其内部使用 SynchronousQueue作为工作队列。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;newFixedThreadPool(int nThreads)，重用指定数目(nThreads)的线程，其底层使用的是无界的工作队列，任何时候最多有nThreads个工作线程是活动的。这意味着，如果任务数量超过了活动队列数目，将在工作队列中等待空闲线程出现；如果有工作线程退出，将会有新的工作线程被创建，以补足指定的数目 nThreads。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;newSingleThreadExecutor()，它的特点在于工作线程数目被限制为1，操作一个无界的工作队列，所以它保证了所有任务的都是被顺序执行，最多会有一个任务处于活动状态，并且不允许使用者改动线程池实例，因此可以避免其改变线程数目。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;newSingleThreadScheduledExecutor()和newScheduledThreadPool(int corePoolSize)，创建的是一个ScheduledExecutorService，可以进行定时或周期性的工作调度，区别在于单一工作线程还是多个工作线程。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;newWorkStealingPool(int parallelism)，这是一个经常被人忽略的线程池，java8才加入这个创建方法，其内部会构建ForkJoin Pool，利用Work-Stealing算法，并行地处理任务，不保证处理顺序。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. 线程池使用&lt;/h2&gt;
&lt;p&gt; 　　&lt;span&gt;利用这些工厂方法，常见的线程池创建方式如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
ExecutorService threadPool1 =&lt;span&gt; Executors.newCachedThreadPool();
ExecutorService threadPool2 &lt;/span&gt;= Executors.newFixedThreadPool(10&lt;span&gt;);
ExecutorService threadPool3 &lt;/span&gt;=&lt;span&gt; Executors.newSingleThreadExecutor();
ExecutorService threadPool4 &lt;/span&gt;= Executors.newScheduledThreadPool(10&lt;span&gt;);
ExecutorService threadPool5 &lt;/span&gt;= Executors.newWorkStealingPool();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;在大多数应用场景下，使用Executors提供的静态工厂方法就足够了，但是仍然可能需要直接利用ThreadPoolExecutor等构造函数线程池创建(其实如上5种方式除了newWorkStealingPool之外，其余都是通过ThreadPoolExecutor类的构造函数来实现的)，比如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
ExecutorService service = &lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor(1,1&lt;span&gt;,
                &lt;/span&gt;60L&lt;span&gt;,TimeUnit.SECONDS,
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ArrayBlockingQueue&amp;lt;Runnable&amp;gt;(10));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　为什么需要这样做呢？因为这样做可以根据我们的实际使用场景灵活调整线程池参数。这需要对线程池构造方式有进一步的了解，需要明白线程池的设计和结构。因为大部分线程池的构造函数都是调用的ThreadPoolExecutor的构造器，所以在本文以及后面的原理分析的文章中我们都是针对ThreadPoolExecutor，JDK为1.8，我们先来看一下ThreadPoolExecutor的构造函数：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; ThreadPoolExecutor(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; corePoolSize,
                              &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; maximumPoolSize,
                              &lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt; keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue&lt;/span&gt;&amp;lt;Runnable&amp;gt;&lt;span&gt; workQueue,
                              ThreadFactory threadFactory,
                              RejectedExecutionHandler handler) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (corePoolSize &amp;lt; 0 ||&lt;span&gt;
        maximumPoolSize &lt;/span&gt;&amp;lt;= 0 ||&lt;span&gt;
        maximumPoolSize &lt;/span&gt;&amp;lt; corePoolSize ||&lt;span&gt;
        keepAliveTime &lt;/span&gt;&amp;lt; 0&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IllegalArgumentException();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (workQueue == &lt;span&gt;null&lt;/span&gt; || threadFactory == &lt;span&gt;null&lt;/span&gt; || handler == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullPointerException();
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.corePoolSize =&lt;span&gt; corePoolSize;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.maximumPoolSize =&lt;span&gt; maximumPoolSize;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.workQueue =&lt;span&gt; workQueue;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.keepAliveTime =&lt;span&gt; unit.toNanos(keepAliveTime);
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.threadFactory =&lt;span&gt; threadFactory;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.handler =&lt;span&gt; handler;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;当然ThreadPoolExecutor还有很多构造函数，但是底层也都是调用的这个构造函数，只是传的参数是默认参数而已，这里就不一一列出了，占空间。线程池的构造函数有一堆的参数，这个还是有必要看一下的：&lt;/span&gt;&lt;/p&gt;
&lt;ul data-source-line=&quot;99&quot; readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;corePoolSize：核心线程数量，常驻线程数量，包括空闲线程；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;maximumPoolSize：最大的线程数量，常驻+临时线程数量；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;workQueue：多余任务等待队列，此队列仅保持由 execute方法提交的 Runnable任务，必须是BlockingQueue；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;keepAliveTime：非核心线程空闲时间，即当线程数大于核心数时，多余的空闲线程等待新任务的最长时间；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;unit：keepAliveTime 参数的时间单位；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;threadFactory：执行程序创建新线程时使用的工厂，这里用到了抽象工厂模式，Executors提供了一个默认的线程工厂实现DefaultThreadFactory；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;handler：线程池拒绝策略，当任务实在是太多，没有空闲线程，等待队列也满了，如果还有任务怎么办？默认是不处理，抛出异常告诉任务提交者，我这忙不过来了，你提交了也处理不了；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;span&gt;通过配置不同的参数，我们就可以创建出行为特性各异的线程池，而这，就是线程池高度灵活性的基石。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;3. 线程池结构及状态&lt;/h2&gt;
&lt;p&gt;　　&lt;span&gt;到这里我们知道线程的优点，学习了怎样创建线程池以及通过构造器部分的源码我们知道了线程池灵活性的根源，是时候再进一步了。我们可以把线程池理解成为一个容器，帮我们创建线程，接受我们提交给它的任务，并帮我们执行任务。那我们就有必要详细来看一下线程池内部是如何保存我们的任务以及线程，并通过什么方式来表征线程池自身的状态的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们进入源码，首先映入眼帘的便是如下这一堆代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; AtomicInteger ctl = &lt;span&gt;new&lt;/span&gt; AtomicInteger(ctlOf(RUNNING, 0&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; COUNT_BITS = Integer.SIZE - 3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 工作线程的理论上限，大约5亿多个线程&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; CAPACITY   = (1 &amp;lt;&amp;lt; COUNT_BITS) - 1&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; runState is stored in the high-order bits&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; RUNNING    = -1 &amp;lt;&amp;lt; COUNT_BITS; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;11100000000000000000000000000000&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; SHUTDOWN   =  0 &amp;lt;&amp;lt; COUNT_BITS; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; STOP       =  1 &amp;lt;&amp;lt; COUNT_BITS; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;00100000000000000000000000000000&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; TIDYING    =  2 &amp;lt;&amp;lt; COUNT_BITS; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;01000000000000000000000000000000&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; TERMINATED =  3 &amp;lt;&amp;lt; COUNT_BITS; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;01100000000000000000000000000000

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Packing and unpacking ctl&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; runStateOf(&lt;span&gt;int&lt;/span&gt; c)     { &lt;span&gt;return&lt;/span&gt; c &amp;amp; ~&lt;span&gt;CAPACITY; }
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; workerCountOf(&lt;span&gt;int&lt;/span&gt; c)  { &lt;span&gt;return&lt;/span&gt; c &amp;amp;&lt;span&gt; CAPACITY; }
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ctlOf(&lt;span&gt;int&lt;/span&gt; rs, &lt;span&gt;int&lt;/span&gt; wc) { &lt;span&gt;return&lt;/span&gt; rs | wc; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　ctl，即线程池的控制状态，这是一个原子类，在这个整型数中封装了两层意思(限于表达能力，只能这样表达)：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;workerCount，即有效线程数量(也可以说是worker的数量)；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;runState，你线程池的运行状态；&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;　　我们来看一下Doug Lea大神是如何在一个整型变量中表达两层含义的呢？&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3.1 线程数量&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　我们知道Java中的int型整数是32位的，在线程池中利用整型的高3位来表征线程池的运行状态，用剩下的低29位来表达有效线程数量，2的29次方是什么数量级，大概5亿吧，在目前以及未来很长一段时间，单机上是很难达到这个级别的线程数量的(即便未来存在问题，也可以通过Long类型来解决)，所以线程数量问题就满足了，多出来的高三位就可以用来表达线程池运行状态了。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3.2 线程池状态&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　对照代码来看，上面COUNT_BITS实际为29，CAPACITY表示最大有效线程数量，大概是2的29次方。线程的状态和其对应的位的值如下：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;RUNNING：高三位为111，运行状态，可以接受任务执行队列里的任务；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;SHUTDOWN：高三位为000，指调用了 shutdown() 方法，不再接受新任务了，但是队列里的任务得执行完毕；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;STOP：高三位为001，指调用了 shutdownNow() 方法，不再接受新任务，同时抛弃阻塞队列里的所有任务并中断所有正在执行任务；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;TIDYING：高三位为010，所有任务都执行完毕，在调用 shutdown()/shutdownNow() 中都会尝试更新为这个状态；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;TERMINATED：高三位为011，终止状态，当执行 terminated() 后会更新为这个状态；&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;　　这些状态之间是会互相转变的，它们之间的转换时间如下：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;RUNNING -&amp;gt; SHUTDOWN，&lt;/span&gt;&lt;span&gt;调用线程池的shutdown()方法；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;(RUNNING or SHUTDOWN) -&amp;gt; STOP，&lt;/span&gt;&lt;span&gt;调用线程池的shutdownNow()方法时；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;SHUTDOWN -&amp;gt; TIDYING，&lt;/span&gt;&lt;span&gt;当任务队列和线程池(保存线程的一个hashSet)都为空时；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;STOP -&amp;gt; TIDYING，&lt;/span&gt;&lt;span&gt;当任务队列为空时；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;TIDYING -&amp;gt; TERMINATED，&lt;/span&gt;&lt;span&gt;调用线程池的terminated()方法并执行完毕之后；&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;　　说了这么多，还是上张图吧：&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1335887/201905/1335887-20190511113441853-1801685705.png&quot; alt=&quot;&quot;/&gt;&lt;/h2&gt;
&lt;h3&gt;3.3 为什么这么设计&lt;/h3&gt;
&lt;p&gt;　　&lt;span&gt;但是看上面那堆代码，因为一个整型变量表示两种含义，每次要使用的时候都要通过一些位运算来将需要的信息提取出来，为什么不直接用两个变量来表示？难道是节约空间？嗯，起先我也是这样认为的，后来才发现是自己too young了。。。一个整型总共才占用4个字节，两个才多了4个字节，为了这4个字节需要这么大费周章吗！后来才知道这是因为在多线程环境下，运行状态和有效线程数量往往需要保证统一，不能出现一个改而另一个没有改动的情况，如果将他们放在同一个AtmocInteger中，利用AtomicInteger的原子操作，就可以保证这两个值始终是统一的，嗯，对Doug大神并发的理解真是出神入化。后面我们在源码分析中可以有更直观的体会。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3.4 线程池核心数据结构&lt;/h3&gt;
&lt;p&gt;　　&lt;span&gt;我们接着看源码，主要有两个地方需要注意：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;// 保存任务的阻塞队列&lt;br/&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; BlockingQueue&amp;lt;Runnable&amp;gt;&lt;span&gt; workQueue;
&lt;br/&gt;// 保存工作线程的set，即真正的池
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; HashSet&amp;lt;Worker&amp;gt; workers = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;Worker&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;对于这里，比较简单：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;工作队列负责存储用户提交的任务，容量可以指定，必须为BlockingQueue&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;这个works才是真正的“线程池”，用来保存工作线程的集合，原来所谓的线程池中的线程都是保存在一个HashSet中。线程池的工作线程被抽象为静态内部类Worker，是基于AQS实现，后面会详细分析其原理。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. 总结&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1. 使用线程池有很多好处：&lt;/span&gt;&lt;/p&gt;
&lt;ul data-source-line=&quot;11&quot; readability=&quot;2&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span&gt;解耦，用户不用关心线程的创建，只需提交任务即可；&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2. JDK中Executor框架提供如ThreadPoolExecutor、ScheduledThreadPoolExecutor、ForkJoinPool等线程池的基本实现，可以通过Executors提供的静态工厂方法创建多种线程池，也可使用ThreadPoolExecutor提供的构造函数定制化符合业务需求的线程池；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3. 线程通过一个整型变量ctl表示存活线程数量和线程池运行状态；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4. 用户提交的任务是保存在一个阻塞队列中，线程池创建的工作线程是保存在一个HashSet中；&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　在本文中我们从线程池优点开始，再到了解整个Executor框架，通过一些加单demo了解了线程池的基本使用，再结合源码初步分析了线程池的内部数据结构以及状态表征，关于线程池进一步的运行原理，有兴趣的同学可以关注后面的文章。总结不易，觉得有帮助就点个赞吧^_^&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 13 May 2019 13:41:00 +0000</pubDate>
<dc:creator>木瓜芒果</dc:creator>
<og:description>Java线程池学习即原理初探</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/volcano-liu/p/10783008.html</dc:identifier>
</item>
<item>
<title>收到一个神盾局的offer，怎么样？ - mindwind</title>
<link>http://www.cnblogs.com/mindwind/p/10859102.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mindwind/p/10859102.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/815275/201905/815275-20190512190840936-1278687233.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;漫威十一年系列总结性的电影《复联4》正在热映，而衍生出的一部和漫威宇宙关联的美剧《神盾局特工》，今年我也在陆陆续续地看。一开始预期的是一部特工加一些科幻或魔幻元素的剧集，就图看得爽快，但实际制作水平和电影还是差距很大，一度差点弃剧。&lt;/p&gt;
&lt;p&gt;但慢慢看下来，吸引我的元素反而是另外一些东西，感觉更像一部职场剧。这个职场就是——神盾局（S.H.I.E.L.D=Strategic Homeland Intervention, Enforcement and Logistics Division 国土战略防御攻击与后勤保障局），故事就是围绕它的核心团队展开的。&lt;/p&gt;
&lt;p&gt;这么一想，神盾局算是一个国家事业单位吧，假如像剧中一些角色一样收到一个神盾局核心团队的 offer 邀约，怎么样？你会想加入吗？&lt;/p&gt;
&lt;h2 id=&quot;信念为什么来这里工作&quot;&gt;信念：为什么来这里工作？&lt;/h2&gt;
&lt;p&gt;首先在剧中，这个核心团队为神盾局工作的每一个成员，都有自己的基本信念，而且都还能和神盾局这个组织存在的意义有所关联。&lt;/p&gt;
&lt;p&gt;神盾局这份工作的目的有点保卫世界，拯救人类的意思，有一个很宏大的意义。核心团队成员，没人仅仅是来打一份工的，他们经历、能力和性格各异，但都会围绕在一个信念之下去协同战斗（他们的工作内容用“战斗”来描述是准确的，而非比喻了）。没有这份信念，这种战斗性和代价高昂的工作，可能很难干得下去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每一份工作，要做到最好，也许都要有超越工作本身之外的信念。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;架构组织是怎么运转和协作的&quot;&gt;架构：组织是怎么运转和协作的？&lt;/h2&gt;
&lt;p&gt;神盾局算是大单位（平台）了，采用了小团队+大平台的架构。&lt;/p&gt;
&lt;p&gt;剧中是一个 10 人左右的核心团队，团队中每个人都有自己的专业领域——一线特工、生物医疗专家、电子工程专家、软件黑客、机械工程师；当然还有漫威的特色：超能力英雄。所有角色背后组织都提供了最强有力的培养、支撑和保障，让他们在各自的专业领域中发挥到最好水平。&lt;/p&gt;
&lt;p&gt;组织提供的大平台就有点现在互联网流行的 “中台” 感觉了。提供各种平台能力，其中有执行任务需要的 “硬” 能力：各种飞行器，安全屋，弹药武器，卫星网络系统，紧急backup支援等等；也有 “软” 能力：信息处理、情报分析，甚至协调其他机构（军方、CIA等）协同支持的能力。而这个核心的小团队就依赖这样的平台支持去完成各种各样困难且艰险的任务。&lt;/p&gt;
&lt;p&gt;大组织的价值在于平台，平台的能力输出水平决定了组织中各个任务团队的起跑线，甚至也在一定程度上决定了他们所能达到的极限。&lt;/p&gt;
&lt;h2 id=&quot;变化这份工作稳定吗&quot;&gt;变化：这份工作稳定吗？&lt;/h2&gt;
&lt;p&gt;任何组织都可能会面临危机与变化，神盾局这么厉害的组织也差点因为死对头 “九头蛇” 这个恐怖组织的渗透而崩溃倒闭。&lt;/p&gt;
&lt;p&gt;这次巨变的剧情在漫威电影《美队2》中有所体现，经历灾难，困境反转，组织重建后，剧中原团队负责人也因此被质疑和降职，并派回一线去做外勤特工。原有团队成员也被打散，分配到不同的项目或任务中去了。&lt;/p&gt;
&lt;p&gt;团队中的成员也在变化，有些人在任务中牺牲了，也有人遭受重大打击，最后选择了离开。有人离开，也有新人加入。比如，正好收到 offer 的你，可能正在考虑是否要加入？需要去理解和适应这种变化，没有任何一份工作是所谓稳定的，不变的。&lt;/p&gt;
&lt;p&gt;学会接受变化，理解变化，在变化中可能告别，也可能继续前行，作为个体或团队都会是在演变中发展。&lt;/p&gt;
&lt;h2 id=&quot;形式日常都做些什么我该怎么工作&quot;&gt;形式：日常都做些什么，我该怎么工作？&lt;/h2&gt;
&lt;p&gt;与工作 offer 判断有关的一件重要内容是每日日常都在干嘛？&lt;/p&gt;
&lt;p&gt;剧中不会演日常，只会演非日常的紧急高光时刻。但既然团队中每个人都有自己的领域，日常我想都是在储备和磨练能力，是为每一次出任务时准备的。而每一次任务，大多数都是局长牵头负责的（毕竟是主演😂），而剧中的局长是寇森，就是电影《美队2》中被洛基一刀捅死的配角特工。而在剧中通过外星黑科技复活，并升职代理局长。&lt;/p&gt;
&lt;p&gt;局长大部分时候是中场指挥，远程命令，最重要的作用是全局把握，判断每位任务中的成员该做什么，分配不同特长的队员匹配不同特性的任务。而每位队员都站在全局任务中的一个局部点位上，可能会因为信息差而质疑局长的命令，总是会提出质疑，但局长只有两种应答：要么提供信息让对方理解；要么说这是保密信息（对方级别还不够，暂时不能知道）。&lt;/p&gt;
&lt;p&gt;队员会理解自己掌握的信息差异，并保留疑问但接受命令，坚决执行。而一线外勤的特工，因为临场变化很快，会有更多的自我决策空间，在协议（任务之前会为可能发生的情况做设计预案，预定预案在剧中叫协议：Protocol）框架范围内灵活选择合适的执行方式。&lt;/p&gt;
&lt;p&gt;在复杂任务中，决策有时会集中，有时会分散；一开始集中决策好任务的执行框架，而实际的执行中，更多是分散的，它们同时发生，同时变化，这就是一个智能的知识工作者需要面临的大部分日常。&lt;/p&gt;
&lt;h2 id=&quot;决断我该接受这个-offer吗&quot;&gt;决断：我该接受这个 offer吗？&lt;/h2&gt;
&lt;p&gt;到了这里，是到决断的时候了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;神盾局&lt;/strong&gt;&lt;br/&gt;知名全球化事业单位；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;待遇&lt;/strong&gt;&lt;br/&gt;薪酬不详；核心团队都在 “玩命”，感觉都不差钱的样子，组织福利超乎想象；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;办公环境&lt;/strong&gt;&lt;br/&gt;主要办公区为超大型空中指挥机，上班通勤主要是小型喷气机；&lt;br/&gt;提供全球免费旅行，小型飞机还带有火箭喷射发动机，偶尔也会去太空办公或公费旅行；&lt;br/&gt;所有飞机都自带隐身功能，非常注重隐私保护。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其他福利&lt;/strong&gt;&lt;br/&gt;能最早或唯一接触外星文明的机构；&lt;br/&gt;对于技术岗位，这里的 “黑科技” 数不胜数；&lt;br/&gt;重要岗位的核心成员，若因公殉职，死亡时间不长，提供一次复活重生机会（稀缺资源）；&lt;/p&gt;
&lt;p&gt;哈哈，以上看上去都挺吸引你的，但更重要的是：它提供的是独一无二的生命（人生）体验，但遗憾的是这只是一份假想的 offer 和虚构的组织，而真实的职业选择，也不妨可以这样来考虑考虑。&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;《神盾局》这个剧拍了好几季了，还没看完，有空就会看上几集，陆续看了好几个月了。看过不少美剧后，发现有个编剧架构模式，一般都会有一条或明或暗的主线贯穿全剧，但中间经常游离出来讲一些主线之外的独立故事。&lt;/p&gt;
&lt;p&gt;这个模式就和人生道路非常类似了，人生如剧集，自己就是编剧兼主演，不要忘记自己的主线。如果我们的人生只有一些游离的独立故事组合，那么这样的剧看起来也没什么意思，剧的吸引力就在于有一条贯穿始终的主线。&lt;/p&gt;
&lt;p&gt;这条线的质量，决定了整部剧的吸引力。有时我们确实会因为各种原因，被迫要去 “演” 一些独立的故事，但别忘了我们自己的主线。人生的结局都是一样的，但过程是可以努力去选择的。&lt;/p&gt;
&lt;p&gt;神盾局的 offer，我也想收一个呀:)&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;写点文字，画点画儿，记录成长瞬间。&lt;br/&gt;微信公众号「瞬息之间」，既然遇见，不如同行。&lt;br/&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/815275/201602/815275-20160216164606173-1251141402.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 13 May 2019 13:23:00 +0000</pubDate>
<dc:creator>mindwind</dc:creator>
<og:description>漫威十一年系列总结性的电影《复联4》正在热映，而衍生出的一部和漫威宇宙关联的美剧《神盾局特工》，今年我也在陆陆续续地看。一开始预期的是一部特工加一些科幻或魔幻元素的剧集，就图看得爽快，但实际制作水平和</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mindwind/p/10859102.html</dc:identifier>
</item>
<item>
<title>ES(Elastic Search)update操作设置无 docment时进行insert - LinkLee</title>
<link>http://www.cnblogs.com/sunlightlee/p/10858556.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunlightlee/p/10858556.html</guid>
<description>&lt;p&gt;&lt;span&gt;今日阅读公司一套数据加工中间工具的源码，查看es操作中的update操作。其中方法命名为updateOrInsert。但是没见到代码中有ES的insert方法调用。于是仔细分析了代码逻辑。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;经过一路追溯，直至ES java客户端请求发送代码。没找到insert相关内容。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;于是到官网查看究竟，可官网对 java Client相关说明比较少。查看不到具体api的说明。于是回到代码调用处：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;String jsonText =&lt;span&gt; jsonBuild.endObject().string();
                UpdateRequest request &lt;/span&gt;= (UpdateRequest)esClient.prepareUpdate(xxx.getDatabase(), xxx.getTable(), docId).setDoc(jsonText).&lt;span&gt;setDetectNoop&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;).&lt;span&gt;setDocAsUpsert&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;).setRetryOnConflict(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.retryOnConflict).request();
                esClient.update(request).get();&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;代码中属于链式调用，由于太长没有换行，竟然没看到后边的setDetectNoop,setDocAsUpsert参数的调用，于是思考，javaClient不就是封装和转换了调用请求么，于是再回到官网查看&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/2.1/docs.html&quot;&gt;Document APIs&lt;/a&gt;，找到update操作的说明，就有了下边关于 Detecting Noop Updates 以及 Upserts说明：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;h3&gt;&lt;span&gt;Detecting noop updatesedit&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;If &lt;code class=&quot;literal&quot;&gt;doc&lt;/code&gt; is specified its value is merged with the existing &lt;code class=&quot;literal&quot;&gt;_source&lt;/code&gt;. By default the document is only reindexed if the new &lt;code class=&quot;literal&quot;&gt;_source&lt;/code&gt; field differs from the old. Setting &lt;code class=&quot;literal&quot;&gt;detect_noop&lt;/code&gt; to &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; will cause Elasticsearch to always update the document even if it hasn’t changed. For example:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pre_wrapper&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;programlisting prettyprint lang-js&quot;&gt;
&lt;span&gt;curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
    &quot;doc&quot; : {
        &quot;name&quot; : &quot;new_name&quot;
    },
    &quot;detect_noop&quot;: false
}'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;上边这段的意思是当更新的文档发生变化时进行更新，如果为fasle,则始终更新。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;25&quot;&gt;
&lt;h3&gt;&lt;span&gt;Upsertsedit&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;If the document does not already exist, the contents of the &lt;code class=&quot;literal&quot;&gt;upsert&lt;/code&gt; element will be inserted as a new document. If the document does exist, then the &lt;code class=&quot;literal&quot;&gt;script&lt;/code&gt; will be executed instead:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pre_wrapper&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;programlisting prettyprint lang-js&quot;&gt;
&lt;span&gt;curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
    &quot;script&quot; : {
        &quot;inline&quot;: &quot;ctx._source.counter += count&quot;,
        &quot;params&quot; : {
            &quot;count&quot; : 4
        }
    },
    &quot;upsert&quot; : {
        &quot;counter&quot; : 1
    }
}'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;&lt;code class=&quot;literal&quot;&gt;scripted_upsert&lt;/code&gt;edit&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;If you would like your script to run regardless of whether the document exists or not — i.e. the script handles initializing the document instead of the &lt;code class=&quot;literal&quot;&gt;upsert&lt;/code&gt; element — then set &lt;code class=&quot;literal&quot;&gt;scripted_upsert&lt;/code&gt; to &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pre_wrapper&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;programlisting prettyprint lang-js&quot;&gt;
&lt;span&gt;curl -XPOST 'localhost:9200/sessions/session/dh3sgudg8gsrgl/_update' -d '{
    &quot;scripted_upsert&quot;:true,
    &quot;script&quot; : {
        &quot;id&quot;: &quot;my_web_session_summariser&quot;,
        &quot;params&quot; : {
            &quot;pageViewEvent&quot; : {
                &quot;url&quot;:&quot;foo.com/bar&quot;,
                &quot;response&quot;:404,
                &quot;time&quot;:&quot;2014-01-01 12:32&quot;
            }
        }
    },
    &quot;upsert&quot; : {}
}'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;code class=&quot;literal&quot;&gt;doc_as_upsert&lt;/code&gt;edit&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Instead of sending a partial &lt;code class=&quot;literal&quot;&gt;doc&lt;/code&gt; plus an &lt;code class=&quot;literal&quot;&gt;upsert&lt;/code&gt; doc, setting &lt;code class=&quot;literal&quot;&gt;doc_as_upsert&lt;/code&gt; to &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; will use the contents of &lt;code class=&quot;literal&quot;&gt;doc&lt;/code&gt; as the &lt;code class=&quot;literal&quot;&gt;upsert&lt;/code&gt; value:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pre_wrapper&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;programlisting prettyprint lang-js&quot;&gt;
&lt;span&gt;&lt;strong&gt;curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
    &quot;doc&quot; : {
        &quot;name&quot; : &quot;new_name&quot;
    },
    &quot;doc_as_upsert&quot; : true
}'&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;　　上边描述：upsert参数的使用，有三种方式：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;指定upsert内容&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;指定打开脚本upsert开关使用脚本处理upsert&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;使用文档内容做为upsert参数，则打开 doc_as_upsert。显然我们上边所说的javaClient调用中就是使用的 doc_as_upsert，这样当文档不存在时候，就会将传递过来的文档内容insert进去。达到update or Insert 目的。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;　　因此对于ES java Clent使用不熟的完全可以参照 api命名查找官网的 api说明，java客户端只不过是用java语言进行了封装。一看便知道调用代码逻辑的含义了。仅此记录，为不熟悉ES的其他使用者 引个路子。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;官网内容链接：&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/2.1/docs-update.html#upserts&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/2.1/docs-update.html#upserts&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以根据自己使用的ES版本进行切换查看。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 13 May 2019 11:33:00 +0000</pubDate>
<dc:creator>LinkLee</dc:creator>
<og:description>今日阅读公司一套数据加工中间工具的源码，查看es操作中的update操作。其中方法命名为updateOrInsert。但是没见到代码中有ES的insert方法调用。于是仔细分析了代码逻辑。 经过一路追</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sunlightlee/p/10858556.html</dc:identifier>
</item>
<item>
<title>SmartSql使用教程（1）——初探，建立一个简单的CURD接口服务 - Noah.Ji</title>
<link>http://www.cnblogs.com/noahji/p/10846215.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/noahji/p/10846215.html</guid>
<description>&lt;p&gt;&lt;span&gt;最近SmartSql被正式引入到了NCC，借着这个契机写一个使用教程系列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;strong&gt;1. SmartSql是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;SmartSql = MyBatis + Cache(Memory | Redis) + R/W Splitting +Dynamic Repository + Diagnostics ......&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;2. SmartSql的特性&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;简洁、高效、高性能、扩展性、监控、渐进式开发！&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;3. 她是如何工作的？&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　SmartSql 借鉴了 MyBatis 的思想，使用 XML 来管理 SQL ，并且提供了若干个筛选器标签来消除代码层面的各种 if/else 的判断分支。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　SmartSql将管理你的 SQL ，并且通过筛选标签来维护本来你在代码层面的各种条件判断，使你的代码更加优美。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;4. 为什么选择SmartSql？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　DotNet 体系下大都是 Linq 系的 ORM，Linq 很好，消除了开发人员对 SQL 的依赖。 但却忽视了一点，SQL 本身并不复杂，而且在复杂查询场景当中开发人员很难通过编写Linq来生成良好性能的SQL，相信使用过EF的同学一定有这样的体验：“我想好了Sql怎么写，然后再来写Linq,完了可能还要再查看一下Linq输出的Sql是什么样的“。这是非常糟糕的体验。要想对Sql做绝对的优化，那么开发者必须对Sql有绝对的控制权。另外Sql本身很简单，为何要增加一层翻译器呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　知道了SmartSql是什么，那接下来我们开始创建一个项目从0开始使用SmartSql写一个简单的CURD接口服务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　先上一个项目结构，然后我们一一分析他们的作用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/572600/201905/572600-20190510191648766-1323281581.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1. 创建DB&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　这里我用的DB是MSSql，直接贴脚本了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('bdf5e69b-fd41-4487-b7af-b178075e7012')&quot; readability=&quot;36&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_bdf5e69b-fd41-4487-b7af-b178075e7012&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bdf5e69b-fd41-4487-b7af-b178075e7012&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('bdf5e69b-fd41-4487-b7af-b178075e7012',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_bdf5e69b-fd41-4487-b7af-b178075e7012&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;Create&lt;/span&gt; &lt;span&gt;Database&lt;/span&gt;&lt;span&gt; SmartSqlSample
&lt;/span&gt;&lt;span&gt;GO&lt;/span&gt;
&lt;span&gt;Use&lt;/span&gt;&lt;span&gt; SmartSqlSample
&lt;/span&gt;&lt;span&gt;GO&lt;/span&gt;
&lt;span&gt;Create&lt;/span&gt; &lt;span&gt;Table&lt;/span&gt;&lt;span&gt; T_Article (
    Id &lt;/span&gt;&lt;span&gt;bigint&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt; &lt;span&gt;identity&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;),
    Title &lt;/span&gt;&lt;span&gt;nvarchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
    Content &lt;/span&gt;&lt;span&gt;nvarchar&lt;/span&gt;(&lt;span&gt;max&lt;/span&gt;) &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
    Author &lt;/span&gt;&lt;span&gt;nvarchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
    Status &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
    CreateTime &lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;getdate&lt;/span&gt;&lt;span&gt;(),
    ModifiedTime &lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;getdate&lt;/span&gt;&lt;span&gt;()
)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Init脚本&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;2. SmartSql 基础配置&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;2.1 添加Nuget依赖&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　SmartSql的库可以直接在Nuget上找到，但因为.NetCoreMVC的项目现在自带了DI依赖注入的关系，我们只需要直接引用SmartSql.DI.Extension就可以了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　项目的依赖性包括了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1. AspNetCore基础库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2. SmartSql.DI.Extension（我们的主角）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3. Swashbuckle.AspNetCore（方便我们接口测试）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/572600/201905/572600-20190510192412317-1064447078.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2.2 添加SmartSql配置文件&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　SmartSql是一个基于Xml配置的ORM。这点和Mybatis没有什么不同。如果你熟悉Mybatis，相信你很快就能适应SmartSql。如果你以前没接触过类似的ORM。那请跟着这个教程，一步一步了解SmartSql的强大。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;SmartSqlMapConfig.xml，SmartSql的起点。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;//*******************************
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;// Create By Noah.Ji
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;// Date 2019-05-10
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;// Github : https://github.com/noahjzc/SmartSqlSample
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//*******************************&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;SmartSqlMapConfig &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://SmartSql.net/schemas/SmartSqlMapConfig.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 允许使用缓存（以后章节细讲） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Settings &lt;/span&gt;&lt;span&gt;IsCacheEnabled&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 属性、特性配置节点，这里只配置一个连接字符串 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Property &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;ConnectionString&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Data Source=localhost;database=SmartSqlSample;uid=sa;pwd=123456&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Property &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;ReadOneConnectionString&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Data Source=123.123.123.123;database=SmartSqlSample;uid=sa;pwd=123456&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库配置 Start &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Database&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DbProvider &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;SqlServer&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Write &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;Sample-Write&quot;&lt;/span&gt;&lt;span&gt; ConnectionString&lt;/span&gt;&lt;span&gt;=&quot;${ConnectionString}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 多读节点配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    &amp;lt;Read Name=&quot;Sample-Node-1&quot; ConnectionString=&quot;${ReadOneConnectionString}&quot; Weight=&quot;60&quot;/&amp;gt;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    &amp;lt;Read Name=&quot;Sample-Node-2&quot; ConnectionString=&quot;Data Source=456.456.456.456;database=SmartSqlSample;uid=sa;pwd=123456&quot; Weight=&quot;40&quot;/&amp;gt;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Database&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库配置 End &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据Map配置 Start &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;SmartSqlMaps&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 文件夹 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;SmartSqlMap &lt;/span&gt;&lt;span&gt;Path&lt;/span&gt;&lt;span&gt;=&quot;Maps&quot;&lt;/span&gt;&lt;span&gt; Type&lt;/span&gt;&lt;span&gt;=&quot;Directory&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;SmartSqlMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 文件夹及子集（递归获取文件夹下所有Map文件） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;SmartSqlMap Path=&quot;Maps&quot; Type=&quot;DirectoryWithAllSub&quot;&amp;gt;&amp;lt;/SmartSqlMap&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 单个文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;SmartSqlMap Path=&quot;Maps/T_Article.xml&quot; Type=&quot;File&quot;&amp;gt;&amp;lt;/SmartSqlMap&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 嵌入式资源 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;SmartSqlMap Path=&quot;SmartSqlSampleChapterOne.Maps.T_Article.xml, SmartSqlSampleChapterOne&quot; Type=&quot;Embedded&quot;&amp;gt;&amp;lt;/SmartSqlMap&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; http资源 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;SmartSqlMap Type=&quot;Uri&quot; Path=&quot;https://smartsql.net/Maps/T_Article.xml&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;SmartSqlMaps&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据Map配置 End &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;SmartSqlMapConfig&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;2.3 表Map配置&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;2.3.1 Root节点&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;SmartSqlMap &lt;/span&gt;&lt;span&gt;Scope&lt;/span&gt;&lt;span&gt;=&quot;Article&quot;&lt;/span&gt;&lt;span&gt; xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://SmartSql.net/schemas/SmartSqlMap.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;...
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;SmartSqlMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里的关键在于Scope，这个属性是用于定位Map的。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;2.3.2 CUD配置&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('89000931-3016-4ead-8784-22bc717ec879')&quot; readability=&quot;40&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_89000931-3016-4ead-8784-22bc717ec879&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_89000931-3016-4ead-8784-22bc717ec879&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('89000931-3016-4ead-8784-22bc717ec879',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_89000931-3016-4ead-8784-22bc717ec879&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;新增&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Statement &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;=&quot;Insert&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  INSERT INTO T_Article
  (Title
  ,Content
  ,Author
  ,Status
  ,CreateTime
  ,ModifiedTime
  )
  VALUES
  (@Title
  ,@Content
  ,@Author
  ,@Status
  ,@CreateTime
  ,GetDate()
  );
  SELECT Scope_Identity();
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Statement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;删除&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Statement &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;=&quot;Delete&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  DELETE T_Article WHERE Id = @Id
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Statement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;更新&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Statement &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;=&quot;Update&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  UPDATE T_Article
  &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    ModifiedTime = GetDate()
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;IsProperty &lt;/span&gt;&lt;span&gt;Prepend&lt;/span&gt;&lt;span&gt;=&quot;,&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Title = @Title
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;IsProperty&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;IsProperty &lt;/span&gt;&lt;span&gt;Prepend&lt;/span&gt;&lt;span&gt;=&quot;,&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Content = @Content
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;IsProperty&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;IsProperty &lt;/span&gt;&lt;span&gt;Prepend&lt;/span&gt;&lt;span&gt;=&quot;,&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Author&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Author = @Author
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;IsProperty&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;IsProperty &lt;/span&gt;&lt;span&gt;Prepend&lt;/span&gt;&lt;span&gt;=&quot;,&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Status&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Status = @Status
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;IsProperty&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;IsProperty &lt;/span&gt;&lt;span&gt;Prepend&lt;/span&gt;&lt;span&gt;=&quot;,&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;CreateTime&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      CreateTime = @CreateTime
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;IsProperty&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  Where id=@Id
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Statement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;CUD配置&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;2.3.3 通用查询节点&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('26ba8fdc-a6ee-4028-b732-8c24c6630c16')&quot; readability=&quot;32.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_26ba8fdc-a6ee-4028-b732-8c24c6630c16&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_26ba8fdc-a6ee-4028-b732-8c24c6630c16&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('26ba8fdc-a6ee-4028-b732-8c24c6630c16',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_26ba8fdc-a6ee-4028-b732-8c24c6630c16&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Statement &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;=&quot;QueryParams&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;IsGreaterEqual &lt;/span&gt;&lt;span&gt;Prepend&lt;/span&gt;&lt;span&gt;=&quot;And&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Id&quot;&lt;/span&gt;&lt;span&gt; CompareValue&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      T.Id = @Id
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;IsGreaterEqual&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;IsNotEmpty &lt;/span&gt;&lt;span&gt;Prepend&lt;/span&gt;&lt;span&gt;=&quot;And&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      T.Title Like '%'+@Title+'%'
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;IsNotEmpty&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;IsNotEmpty &lt;/span&gt;&lt;span&gt;Prepend&lt;/span&gt;&lt;span&gt;=&quot;And&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Ids&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      T.Id IN @Ids
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;IsNotEmpty&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Statement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;通用查询节点&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这个Statement节点其实和别的节点没什么区别。SmartSql允许Statement的嵌套。使用规则如下面这段配置&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3558b164-01a3-4a8c-93b4-70b8d1148d1e')&quot; readability=&quot;32&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_3558b164-01a3-4a8c-93b4-70b8d1148d1e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3558b164-01a3-4a8c-93b4-70b8d1148d1e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3558b164-01a3-4a8c-93b4-70b8d1148d1e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_3558b164-01a3-4a8c-93b4-70b8d1148d1e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Statement &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;=&quot;Query&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  SELECT T.* FROM T_Article T
  &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Include &lt;/span&gt;&lt;span&gt;RefId&lt;/span&gt;&lt;span&gt;=&quot;QueryParams&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Switch &lt;/span&gt;&lt;span&gt;Prepend&lt;/span&gt;&lt;span&gt;=&quot;Order By&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;OrderBy&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      T.id Desc
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Switch&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;IsNotEmpty &lt;/span&gt;&lt;span&gt;Prepend&lt;/span&gt;&lt;span&gt;=&quot;Limit&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Taken&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@Taken&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;IsNotEmpty&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Statement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Query&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在这段Query配置中。我们使用了Include标签来引入上面定义好的Id为QueryParams的Statement，这样就做到了查询配置的通用性。例如我还可以将QueryParams配置到分页和查询结果数的配置中。如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2bfc1a6d-d3f7-4832-9267-010115cd3389')&quot; readability=&quot;32.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_2bfc1a6d-d3f7-4832-9267-010115cd3389&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2bfc1a6d-d3f7-4832-9267-010115cd3389&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2bfc1a6d-d3f7-4832-9267-010115cd3389',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_2bfc1a6d-d3f7-4832-9267-010115cd3389&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;获取分页数据&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Statement &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;=&quot;QueryByPage&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  SELECT T.* FROM T_Article As T
  &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Include &lt;/span&gt;&lt;span&gt;RefId&lt;/span&gt;&lt;span&gt;=&quot;QueryParams&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Switch &lt;/span&gt;&lt;span&gt;Prepend&lt;/span&gt;&lt;span&gt;=&quot;Order By&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;OrderBy&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      T.Id Desc
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Switch&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  Offset ((@PageIndex-1)*@PageSize) Rows Fetch Next @PageSize Rows Only;
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Statement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;获取记录数&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Statement &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;=&quot;GetRecord&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  SELECT Count(1) FROM T_Article T
  &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Include &lt;/span&gt;&lt;span&gt;RefId&lt;/span&gt;&lt;span&gt;=&quot;QueryParams&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Statement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;分页及结果数查询&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;2.4 Startup&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;注入SmartSql&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; register smartsql&lt;/span&gt;
services.AddSmartSql(builder =&amp;gt;&lt;span&gt;
{
    builder.UseAlias(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SmartSqlSampleChapterOne&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义实例别名，在多库场景下适用。
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;.UseXmlConfig(ResourceType.File,&quot;MyConfig.xml&quot;);&lt;/span&gt;
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在2.2中我们把基础配置文件命名为SmartSqlMapConfig。这个是默认文件名，我们也可以像上面的注释代码一样。自定义配置文件的名称。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;3. 让配置工作起来&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;其实到了这一步一切都顺其自然了。我感觉没有什么可以多讲了。直接上代码了！&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('430ee561-0c5a-453a-827e-ebcc1094fc0c')&quot; readability=&quot;40.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_430ee561-0c5a-453a-827e-ebcc1094fc0c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_430ee561-0c5a-453a-827e-ebcc1094fc0c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('430ee561-0c5a-453a-827e-ebcc1094fc0c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_430ee561-0c5a-453a-827e-ebcc1094fc0c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.DependencyInjection;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SmartSql;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SmartSqlSampleChapterOne.Entity;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SmartSqlSampleChapterOne.DataAccess
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ArticleDataAccess
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ISqlMapper _sqlMapper;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; 
&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; 
&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;sp&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ArticleDataAccess(IServiceProvider sp)
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;             _sqlMapper = sp.GetSmartSql(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SmartSqlSampleChapterOne&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).SqlMapper;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Insert
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;article&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; Insert(T_Article article)
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; _sqlMapper.ExecuteScalar&amp;lt;&lt;span&gt;long&lt;/span&gt;&amp;gt;(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RequestContext
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;                 Scope = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;                 SqlId = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Insert&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;                 Request =&lt;span&gt; article
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Update
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;article&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Update(T_Article article)
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; _sqlMapper.Execute(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RequestContext
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;                 Scope = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;                 SqlId = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;                 Request =&lt;span&gt; article
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; 
&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; DyUpdate
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;updateObj&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; DyUpdate(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; updateObj)
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; _sqlMapper.Execute(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RequestContext
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;                 Scope = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;                 SqlId = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;                 Request =&lt;span&gt; updateObj
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; 
&lt;span&gt; 70&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Delete
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;id&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Delete(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; id)
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; _sqlMapper.Execute(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RequestContext
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;                 Scope = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;                 SqlId = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Delete&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;                 Request = &lt;span&gt;new&lt;/span&gt; { Id =&lt;span&gt; id }
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; 
&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; GetById
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;id&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; T_Article GetById(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; id)
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; _sqlMapper.QuerySingle&amp;lt;T_Article&amp;gt;(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RequestContext
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;                 Scope = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;                 SqlId = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GetEntity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;                 Request = &lt;span&gt;new&lt;/span&gt; { Id =&lt;span&gt; id }
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; 
&lt;span&gt;100&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Query
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;queryParams&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;T_Article&amp;gt; Query(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; queryParams)
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; _sqlMapper.Query&amp;lt;T_Article&amp;gt;(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RequestContext
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;                 Scope = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;                 SqlId = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Query&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;                 Request =&lt;span&gt; queryParams
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; 
&lt;span&gt;115&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; GetRecord
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;queryParams&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; GetRecord(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; queryParams)
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; _sqlMapper.ExecuteScalar&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RequestContext
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;                 Scope = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;                 SqlId = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GetRecord&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;                 Request =&lt;span&gt; queryParams
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; 
&lt;span&gt;130&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; IsExist
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;queryParams&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsExist(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; queryParams)
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; _sqlMapper.QuerySingle&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RequestContext
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;                 Scope = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;                 SqlId = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsExist&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;                 Request =&lt;span&gt; queryParams
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ArticleDataAccess&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;4. 最后一步&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;4.1 ArticleController&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;有了DataAccess我们可以轻松的操作数据库了。最后一步我们建立一个Controller，对外暴露一些接口吧。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('30b5aaef-829b-4d44-973d-0d623d421a74')&quot; readability=&quot;33.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_30b5aaef-829b-4d44-973d-0d623d421a74&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_30b5aaef-829b-4d44-973d-0d623d421a74&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('30b5aaef-829b-4d44-973d-0d623d421a74',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_30b5aaef-829b-4d44-973d-0d623d421a74&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; SmartSqlSampleChapterOne.DataAccess;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; SmartSqlSampleChapterOne.Entity;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SmartSqlSampleChapterOne.Controllers
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; 
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    [Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[controller]/[action]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ArticleController : Controller
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ArticleDataAccess _articleDataAccess;

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; constructor
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;articleDataAccess&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ArticleController(ArticleDataAccess articleDataAccess)
        {
            _articleDataAccess &lt;/span&gt;=&lt;span&gt; articleDataAccess;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;article&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; T_Article Add([FromBody] T_Article article)
        {
            article.Id &lt;/span&gt;=&lt;span&gt; _articleDataAccess.Insert(article);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; article;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;id&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; T_Article Get([FromQuery] &lt;span&gt;long&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _articleDataAccess.GetById(id);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;article&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; Update([FromBody] T_Article article)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _articleDataAccess.Update(article) &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;id&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;status&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; UpdateStatus([FromQuery] &lt;span&gt;long&lt;/span&gt; id, [FromQuery] &lt;span&gt;int&lt;/span&gt;&lt;span&gt; status)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _articleDataAccess.DyUpdate(&lt;span&gt;new&lt;/span&gt;&lt;span&gt;
            {
                Id &lt;/span&gt;=&lt;span&gt; id,
                Status &lt;/span&gt;=&lt;span&gt; status
            }) &lt;/span&gt;&amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;id&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsExist([FromQuery] &lt;span&gt;long&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _articleDataAccess.IsExist(&lt;span&gt;new&lt;/span&gt;&lt;span&gt;
            {
                Id &lt;/span&gt;=&lt;span&gt; id
            });
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;key&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;T_Article&amp;gt; Query([FromQuery] &lt;span&gt;string&lt;/span&gt; key = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _articleDataAccess.Query(&lt;span&gt;new&lt;/span&gt;&lt;span&gt;
            {
                Title &lt;/span&gt;=&lt;span&gt; key
            });
        }
    }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ArticleController&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;4.2 Startup&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;前面我们已经把SmartSql注入到了DI。现在我们再完善一下它，把Mvc和Swagger也注入进去。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('49e74240-e107-4fa3-bc1a-6fd2fbc3c066')&quot; readability=&quot;36.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_49e74240-e107-4fa3-bc1a-6fd2fbc3c066&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_49e74240-e107-4fa3-bc1a-6fd2fbc3c066&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('49e74240-e107-4fa3-bc1a-6fd2fbc3c066',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_49e74240-e107-4fa3-bc1a-6fd2fbc3c066&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Builder;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Hosting;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Configuration;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.DependencyInjection;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Logging;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Swashbuckle.AspNetCore.Swagger;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SmartSql.ConfigBuilder;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SmartSqlSampleChapterOne.DataAccess;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SmartSqlSampleChapterOne
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Startup
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Startup(IConfiguration configuration)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             Configuration =&lt;span&gt; configuration;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; IConfiguration Configuration { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to add services to the container.
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; For more information on how to configure your application, visit &lt;/span&gt;&lt;span&gt;https://go.microsoft.com/fwlink/?LinkID=398940&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            services.AddMvc();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;             services.AddLogging(logging =&amp;gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                logging.SetMinimumLevel(LogLevel.Trace);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                logging.AddConsole();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; register smartsql&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             services.AddSmartSql(builder =&amp;gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                 builder.UseAlias(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SmartSqlSampleChapterOne&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义实例别名，在多库场景下适用。
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;.UseXmlConfig(ResourceType.File,&quot;MyConfig.xml&quot;);&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; register data access&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;             services.AddSingleton&amp;lt;ArticleDataAccess&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; register swagger&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;             services.AddSwaggerGen(c =&amp;gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                 c.SwaggerDoc(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SmartSqlSampleChapterOne&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Info
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                     Title = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SmartSqlSample.ChapterOne&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                     Version = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                     Description = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SmartSqlSample.ChapterOne&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;                });
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SmartSqlSampleChapterOne.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (File.Exists(filePath)) c.IncludeXmlComments(filePath);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; 
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to configure the HTTP request pipeline.&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configure(IApplicationBuilder app, IHostingEnvironment env)
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (env.IsDevelopment()) app.UseDeveloperExceptionPage();
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;            app.UseMvc();
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; 
&lt;span&gt;65&lt;/span&gt;             app.UseSwagger(c =&amp;gt;&lt;span&gt; { });
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;             app.UseSwaggerUI(c =&amp;gt; { c.SwaggerEndpoint(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/swagger/SmartSqlSampleChapterOne/swagger.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SmartSqlSampleChapterOne&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); });
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Startup&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;好了！至此项目的大部分元素都做了一个简单介绍。我们来看看最终的运行结果吧。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;5. 接口演示&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;接口预览&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/572600/201905/572600-20190513190716931-1752413102.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;添加接口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/572600/201905/572600-20190513190741938-357594157.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;获取接口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/572600/201905/572600-20190513190751428-1030734086.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;查询接口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/572600/201905/572600-20190513190804801-2049487822.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;6. 结语&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;本篇文章简单介绍了一下如何使用SmartSql从无到有，完成一个单表的CURD接口实现。但其实SmartSql是一个非常强大的CRM，它还有许多特性没有展开。再接下来的系列文章中。我会一一为大家介绍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a title=&quot;Deme Code&quot; href=&quot;https://github.com/noahjzc/SmartSqlSample&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;strong&gt;示例代码链接在这里&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;下期预告：使用动态代理实现CURD&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 13 May 2019 11:17:00 +0000</pubDate>
<dc:creator>Noah.Ji</dc:creator>
<og:description>SmartSql = MyBatis + Cache(Memory | Redis) + R/W Splitting +Dynamic Repository + Diagnostics ......</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/noahji/p/10846215.html</dc:identifier>
</item>
</channel>
</rss>