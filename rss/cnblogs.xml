<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>C#设计模式-模板方法模式(Template Method) - Tynam.Yang</title>
<link>http://www.cnblogs.com/tynam/p/13900280.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tynam/p/13900280.html</guid>
<description>&lt;h2&gt;概念&lt;/h2&gt;
&lt;p&gt;模板指一些可以套用的公共内容，例如网页模板是当网站中有许多页面版式色彩相同的情况下，将其定义为网页模板，并定义其中部分可编辑，部分不可编辑，那么在利用网页模板制作其他页面时就会很方便，不易出错。&lt;br/&gt;在设计模式中，模板方法模式中模板和生活中模板概念非常类似，在一个抽象类中定义一个操作中的算法骨架（对应于模板），而将一些步骤延迟到子类中去实现（对应根据自己的情况向模板填充内容）。&lt;br/&gt;在面向对象程序设计过程中，程序员常常会遇到这种情况：设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。此时就可以采用模板方法进行设计。&lt;/p&gt;
&lt;p&gt;例如公司的入职流程，进入公司，入职准备、入职报到、办理入职手续、进行入职培训，转正，入职结束进入岗位。这些步骤都很固定，但是不同的公司，流程中每个步骤稍有不同。这些不同的可以在具体实现上进行填充。&lt;/p&gt;
&lt;h2&gt;特点&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;br/&gt;它封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类继续扩展。&lt;br/&gt;它在父类中提取了公共的部分代码，实现了代码复用。&lt;br/&gt;部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;br/&gt;对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象。&lt;br/&gt;父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。&lt;br/&gt;因为引入了一个抽象类，如果具体实现过多的话，需要用户或开发人员需要花更多的时间去理清类之间的关系。&lt;/p&gt;
&lt;h2&gt;模式结构&lt;/h2&gt;
&lt;p&gt;根据模板方法模式类图结构，有利于我们理清该模式中类之间的关系，具体类图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1359074/202010/1359074-20201030083025430-387645441.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;模板方法模式中涉及的角色：&lt;br/&gt;抽象模板角色：定义了一个或多个抽象操作，以便让子类实现，这些抽象操作称为基本操作。它由一个模板方法和若干个基本方法构成。&lt;br/&gt;　　模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。&lt;br/&gt;　　基本方法：是整个算法中的一个步骤，包含了抽象方法、具体方法。&lt;br/&gt;具体模板角色：实现父类所定义的一个或多个抽象方法。&lt;/p&gt;
&lt;h2&gt;应用场景&lt;/h2&gt;
&lt;p&gt;算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现。&lt;br/&gt;当多个子类存在公共的行为时，可以将其提取出来并集中到一个公共父类中以避免代码重复。首先，要识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。&lt;/p&gt;
&lt;h2&gt;实现&lt;/h2&gt;
&lt;p&gt;以入职流程为例，进行具体的实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; 模板模式
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; EntryProcess
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            SamsungEntryProcess samsung &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SamsungEntryProcess();
            HuaweiEntryProcess huawei &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HuaweiEntryProcess();

            samsung.JoiningCompany();
            huawei.JoiningCompany();

            Console.Read();
        }
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 抽象类，入职流程&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TemplateEntryProcess
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 模板方法，不要把模版方法定义为 Virtual 或 abstract 方法，避免被子类重写，防止更改流程的执行顺序&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; JoiningCompany()
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.entryCompany(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 进入公司&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.preparationForEntry(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 入职前准备，整理衣帽等&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.registrationForEmployment(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 入职报到&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.entryProcedures(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 办理入职手续&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.inductionTraining(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 入职培训&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.evaluationOfConversion(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 转正评估&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.entryOver(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 入职结束，进入岗位&lt;/span&gt;
&lt;span&gt;        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; entryCompany();

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; preparationForEntry()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;做准备，整理衣帽等；&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; registrationForEmployment()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;入职报到；&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; entryProcedures()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;办理入职手续；&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; inductionTraining()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;进行入职培训；&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; evaluationOfConversion()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;完成入职前培训，进行转正评估；&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; entryOver()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;入职流程完成，进入岗位。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }

    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 具体子类，三星入职&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SamsungEntryProcess: TemplateEntryProcess
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; entryCompany()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;进入三星公司&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }

    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 具体子类，华为入职&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HuaweiEntryProcess: TemplateEntryProcess
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; entryCompany()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;进入华为公司&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行后结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;进入三星公司
做准备，整理衣帽等；
入职报到；
办理入职手续；
进行入职培训；
完成入职前培训，进行转正评估；
入职流程完成，进入岗位。
进入华为公司
做准备，整理衣帽等；
入职报到；
办理入职手续；
进行入职培训；
完成入职前培训，进行转正评估；
入职流程完成，进入岗位。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 30 Oct 2020 00:34:00 +0000</pubDate>
<dc:creator>Tynam.Yang</dc:creator>
<og:description>概念 模板指一些可以套用的公共内容，例如网页模板是当网站中有许多页面版式色彩相同的情况下，将其定义为网页模板，并定义其中部分可编辑，部分不可编辑，那么在利用网页模板制作其他页面时就会很方便，不易出错。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/tynam/p/13900280.html</dc:identifier>
</item>
<item>
<title>在美国东海岸小公司工作 3 年的感受 - 码农田小齐</title>
<link>http://www.cnblogs.com/nycsde/p/13900254.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nycsde/p/13900254.html</guid>
<description>&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;这里是《齐姐聊大厂》系列的第 12 篇&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;（前 11 篇见文末）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;每周五早上 8 点，与你唠唠大厂的那些事&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小齐说：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自从《齐姐聊大厂》系列开放以来，收到了很多小伙伴的支持和好评，同时也有很多人问我，能不能聊聊“小厂”的工作经历？&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小公司 vs 大公司，也是很多人纠结的点，所以今天这篇文章，给大家带来博士大佬——小七在美国东海岸的一家小公司工作了 3 年的感受和体验，希望对你有所帮助。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如果你喜欢这个系列，欢迎你转发分享，这对我很有帮助，谢谢大家～&lt;/strong&gt;&lt;/p&gt;
&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在读博期间，由于导师的经费不足，所以在学校本地找到了一家 IT 公司做实习，既能补贴家用，又不至于和媳妇分隔两地。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;做实习时间加起来一共一年半左右，毕业之后就转了全职。因为毕业季的忙碌，再加上公司给了我们两个 offer，所以就没有再出去面试。本人 CS，媳妇也是 CS 专业。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;公司情况&lt;/span&gt;&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在美国的东岸的二、三线城市，职工大概 200-500 人，工资还可以，偶尔发一点 Stock Unit，但是因为没上市，没有什么实际价值。但是就工资来说可以在这个小城镇过得不错。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;公司提供 H1B 和绿卡办理。但是因为是小公司，找的律师很慢，并且很不靠谱，经常填错一些表格。后来我申请任何提交的表格，都需要自己来检查一遍，保证没有严重的错误。我相信这些事情在大公司是不会出现的，毕竟员工的时间还是应该花在工作上面。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和众多小企业相同，老板时不时的会为员工们画大饼。同事之间的关系还算不错，大家互帮互助，没有遇到严重的挖坑现象。公司也没有太多的政治斗争，工作氛围很好。可以说工作的战友是我在这份工作中最大的收获了。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;公司的 tech stack 稍显滞后，面试时对基本算法比如时间复杂度，图论要求较高，因为是公司的核心竞争力。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;个人成长与发展&lt;/span&gt;&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在小公司的优势就是你能接触到很多东西，包括 backend，frontend，design document，sprint planning，甚至和客户交流以及 budget forecasting. 在积累了一些工作经验之后，我也有幸开始带领几个工程师一起搞一些大的 feature。这些我觉得都是很不错的经验，记得有很多次越洋和客户开会，讨论 business requirement 和 use case，可能在大公司不是很容易能锻炼的到。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;公司可以提高的地方就是可以多提供一些个人发展和自我提高的机会，比如组织各种 tech talk，和参加会议。但是毕竟小公司是 project based，资金链相对紧张，钱还是需要用在刀刃上。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每年涨工资在 5%-10%，依据表现 annual review。主要还是和 manager 积极主动交流，没事多想点新的能提高产品质量的想法。因为小公司提倡 entrepreneurship, 所以 ownership 高的话应该会受到赏识。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Negotiate 主要是要能提供 artifacts，也就是业绩和工作能力的证明。平时工作中注意积累，完成了某项重要工作及时记录，年底 review 的时候做到心中有数。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;同事关系&lt;/span&gt;&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是我在这家公司呆了 3 年的最重要的原因，组内的气氛非常好，而且每个人都是非常的积极。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;了解了大概的任务，每个人都能够积极的制定工作计划和讨论细节。如果需要的话大家可以一起 brainstorming（头脑风暴）。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我觉得大老板的人格魅力还是很高的，是学校的教授，吸引了一批优秀的 engineer。虽然离职了，还是会和他们保持联系，希望今后还有机会一起共事。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;建议&lt;/span&gt;&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过这几年的工作经验，能给大家的主要建议：&lt;/p&gt;
&lt;ol data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;一份工作干的开不开心，最重要的还是同事以及领导关系。如果关系融洽，每个人都很积极, 那么工作起来自然开心，效率也会很高。&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;小公司的主要局限还是资金，经常有吃了上顿没下顿的忧虑。所以如果考虑稳定安逸的话，还是选择大公司。&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;在小公司可以锻炼到一些领导能力和与客户的沟通能力，这些可能会对未来的职业发展有帮助，在软实力上的提升大于在简历和 linkedin profile 的光彩。&lt;/section&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;非常感谢小七的分享，如果你也想和大家分享你的工作感受，欢迎投稿，让更多人看到优质的内容，还会有稿费哦～&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我是小齐，终生学习者，每天晚上 9 点，云自习室里不见不散！&lt;/p&gt;
</description>
<pubDate>Fri, 30 Oct 2020 00:23:00 +0000</pubDate>
<dc:creator>码农田小齐</dc:creator>
<og:description>这里是《齐姐聊大厂》系列的第 12 篇 （前 11 篇见文末） 每周五早上 8 点，与你唠唠大厂的那些事 小齐说： 自从《齐姐聊大厂》系列开放以来，收到了很多小伙伴的支持和好评，同时也有很多人问我，能</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/nycsde/p/13900254.html</dc:identifier>
</item>
<item>
<title>C#数据结构-线程安全队列 - 温暖如太阳</title>
<link>http://www.cnblogs.com/xtt321/p/13899276.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xtt321/p/13899276.html</guid>
<description>&lt;p&gt;什么是线程安全？&lt;/p&gt;
&lt;p&gt;答：线程安全是多线程编程时的计算机程序代码中的一个概念。在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意外情况。&lt;/p&gt;
&lt;p&gt;前面几篇写的线性结构，在多线程并行的情况下会出现共享数据会线程间读取与写入不一直的情况，为了解决这种情况，通常会使用锁来解决，也就是将并行改为串行。但是在使用穿行违背了使用多线程并发的初衷，这种情况下我们可以考虑采用线程安全结构。&lt;/p&gt;
&lt;p&gt;先看下线程安全队列的用法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
ConcurrentQueue&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; ts = &lt;span&gt;new&lt;/span&gt;  System.Collections.Concurrent.ConcurrentQueue&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;();
ts.Enqueue(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
ts.Enqueue(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
ts.Enqueue(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
ts.Enqueue(&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; r &lt;span&gt;in&lt;/span&gt;&lt;span&gt; ts)
{
    Console.Write($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data:{r} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}
Console.WriteLine();
ts.TryPeek(&lt;/span&gt;&lt;span&gt;out&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pk);
Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;peek:{pk}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
ts.TryDequeue(&lt;/span&gt;&lt;span&gt;out&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; ck);
ts.Enqueue(&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;);
ts.Enqueue(&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;);
Console.WriteLine();
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; r &lt;span&gt;in&lt;/span&gt;&lt;span&gt; ts)
{
    Console.Write($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data:{r} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}
Console.WriteLine();
Console.ReadLine();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/404258/202010/404258-20201029210153135-1478392140.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在我们看下线程安全队列的实现方式：（参考自：.net framework 4.8）,核心代码全部做了注释。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;总的来说，（总结语放到前面，防止代码篇幅太大，同志们没有耐心翻到最底下~）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、线程安全队列通过SpinWait自旋类来实现等待并行线程完成与Interlocked原子操作类计数实现的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、线程安全队列通过单向链表实现的，链的节点为长度32的数组，通过记录链的头节点与尾节点、以及队列的头尾实现队列的存储与入队、出队操作的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/404258/202010/404258-20201029210720733-1847804745.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyConcurrentQueue&amp;lt;T&amp;gt; : IProducerConsumerCollection&amp;lt;T&amp;gt;&lt;span&gt;
{
    [NonSerialized]
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt;&lt;span&gt; Segment m_head;

    [NonSerialized]
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt;&lt;span&gt; Segment m_tail;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; T[] m_serializationArray;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; SEGMENT_SIZE = &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;

    [NonSerialized]
    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; m_numSnapshotTakers = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 链尾部节点
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MyConcurrentQueue()
    {
        m_head &lt;/span&gt;= m_tail = &lt;span&gt;new&lt;/span&gt; Segment(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;尝试添加&lt;/span&gt;
    &lt;span&gt;bool&lt;/span&gt; IProducerConsumerCollection&amp;lt;T&amp;gt;&lt;span&gt;.TryAdd(T item)
    {
        Enqueue(item);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 尝试从中移除并返回对象
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;item&quot;&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
    &lt;span&gt;bool&lt;/span&gt; IProducerConsumerCollection&amp;lt;T&amp;gt;.TryTake(&lt;span&gt;out&lt;/span&gt;&lt;span&gt; T item)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; TryDequeue(&lt;span&gt;out&lt;/span&gt;&lt;span&gt; item);
    }
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 判断当前链是否为空
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; IsEmpty
    {
        &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
        {
            Segment head &lt;/span&gt;=&lt;span&gt; m_head;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;head.IsEmpty)
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果头不为空，则链非空&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (head.Next == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果头节点的下一个节点为空，且为链尾，&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果头节点为空且不是最后一个节点 ，则标识另一个线程正在写入该数组
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;等待中..&lt;/span&gt;
&lt;span&gt;            {
                SpinWait spin &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SpinWait();
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (head.IsEmpty)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;此时为空&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt; (head.Next == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;否则标识正在有线程占用写入
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;线程循环一次&lt;/span&gt;
&lt;span&gt;                    spin.SpinOnce();
                    head &lt;/span&gt;=&lt;span&gt; m_head;
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
        }
    }
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用来判断链是否在变化
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;head&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;tail&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;headLow&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;tailHigh&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; GetHeadTailPositions(&lt;span&gt;out&lt;/span&gt; Segment head, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; Segment tail,
        &lt;/span&gt;&lt;span&gt;out&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; headLow, &lt;span&gt;out&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; tailHigh)
    {
        head &lt;/span&gt;=&lt;span&gt; m_head;
        tail &lt;/span&gt;=&lt;span&gt; m_tail;
        headLow &lt;/span&gt;=&lt;span&gt; head.Low;
        tailHigh &lt;/span&gt;=&lt;span&gt; tail.High;
        SpinWait spin &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SpinWait();
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;head.Low:{head.Low},tail.High：{tail.High}，head.m_index:{head.m_index}，tail.m_index：{tail.m_index}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过循环来保证值不再更改（也就是说并行线程操作结束）
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保证线程串行核心的判断逻辑&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;头尾发生变化&lt;/span&gt;
            head != m_head || tail !=&lt;span&gt; m_tail
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果队列头、尾索引发生变化&lt;/span&gt;
            || headLow != head.Low || tailHigh !=&lt;span&gt; tail.High
            &lt;/span&gt;|| head.m_index &amp;gt;&lt;span&gt; tail.m_index)
        {
            spin.SpinOnce();
            head &lt;/span&gt;=&lt;span&gt; m_head;
            tail &lt;/span&gt;=&lt;span&gt; m_tail;
            headLow &lt;/span&gt;=&lt;span&gt; head.Low;
            tailHigh &lt;/span&gt;=&lt;span&gt; tail.High;
        }
    }
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取总数
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Count
    {
        &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
        {
            Segment head, tail;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; headLow, tailHigh;
            GetHeadTailPositions(&lt;/span&gt;&lt;span&gt;out&lt;/span&gt; head, &lt;span&gt;out&lt;/span&gt; tail, &lt;span&gt;out&lt;/span&gt; headLow, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; tailHigh);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (head ==&lt;span&gt; tail)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; tailHigh - headLow + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;头节点长度&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; count = SEGMENT_SIZE -&lt;span&gt; headLow;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加上中间其他节点长度&lt;/span&gt;
            count += SEGMENT_SIZE * ((&lt;span&gt;int&lt;/span&gt;)(tail.m_index - head.m_index - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加上尾节点长度&lt;/span&gt;
            count += tailHigh + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; count;
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; SyncRoot =&amp;gt; &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsSynchronized =&amp;gt; &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; CopyTo(T[] array, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; index)
    {
        
    }
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 暂未实现
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; IEnumerator&amp;lt;T&amp;gt;&lt;span&gt; GetEnumerator()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 添加
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;item&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Enqueue(T item)
    {
        SpinWait spin &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SpinWait();
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
        {
            Segment tail &lt;/span&gt;=&lt;span&gt; m_tail;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (tail.TryAppend(item))
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            spin.SpinOnce();
        }
    }
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 尝试删除节点
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;result&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; TryDequeue(&lt;span&gt;out&lt;/span&gt;&lt;span&gt; T result)
    {
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;IsEmpty)
        {
            Segment head &lt;/span&gt;=&lt;span&gt; m_head;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (head.TryRemove(&lt;span&gt;out&lt;/span&gt;&lt;span&gt; result))
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        result &lt;/span&gt;= &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(T);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 查看最后一个添加入的元素
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;result&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; TryPeek(&lt;span&gt;out&lt;/span&gt;&lt;span&gt; T result)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;原子增加值&lt;/span&gt;
        Interlocked.Increment(&lt;span&gt;ref&lt;/span&gt;&lt;span&gt; m_numSnapshotTakers);


        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;IsEmpty)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;首先从头节点看一下第一个节点是否存在&lt;/span&gt;
            Segment head =&lt;span&gt; m_head;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (head.TryPeek(&lt;span&gt;out&lt;/span&gt;&lt;span&gt; result))
            {
                Interlocked.Decrement(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt; m_numSnapshotTakers);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }
        result &lt;/span&gt;= &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(T);
        Interlocked.Decrement(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt; m_numSnapshotTakers);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; CopyTo(Array array, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; index)
    {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; T[] ToArray()
    {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
    }
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 为线程安全队列提供一个 单向链表，
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 链表的每个节点存储长度为32的数组
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Segment
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 定义一个数组，用于存储每个节点的内容
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt;&lt;span&gt; T[] m_array;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 定义一个结构数组，用于标识数组中每个节点是否有效（是否存储内容）
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt;&lt;span&gt; VolatileBool[] m_state;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指针，指向下一个节点数组
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果是最后一个节点，则节点为空&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt;&lt;span&gt; Segment m_next;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 索引，用来存储链表的长度
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; m_index;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用来标识队列头-数组弹出索引
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; m_low;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用来标识队列尾-数组最新存储位置
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; m_high;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用来标识队列
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; MyConcurrentQueue&amp;lt;T&amp;gt;&lt;span&gt; m_source;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 实例化链节点
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;internal&lt;/span&gt; Segment(&lt;span&gt;long&lt;/span&gt; index, MyConcurrentQueue&amp;lt;T&amp;gt;&lt;span&gt; source)
        {
            m_array &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; T[SEGMENT_SIZE];
            m_state &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; VolatileBool[SEGMENT_SIZE]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;all initialized to false&lt;/span&gt;
            m_high = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            m_index &lt;/span&gt;=&lt;span&gt; index;
            m_source &lt;/span&gt;=&lt;span&gt; source;
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 链表的下一个节点
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;internal&lt;/span&gt;&lt;span&gt; Segment Next
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_next; }
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 如果当前节点数组为空返回true，
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; IsEmpty
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; (Low &amp;gt;&lt;span&gt; High); }
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 非安全添加方法（无判断数组长度）
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;value&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; UnsafeAdd(T value)
        {
            m_high&lt;/span&gt;++&lt;span&gt;;
            m_array[m_high] &lt;/span&gt;=&lt;span&gt; value;
            m_state[m_high].m_value &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }


        &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt;&lt;span&gt; Segment UnsafeGrow()
        {
            Segment newSegment &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Segment(m_index + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, m_source);
            m_next &lt;/span&gt;=&lt;span&gt; newSegment;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; newSegment;
        }


        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 如果当前数组满了 &amp;gt;=32,则链扩展节点。
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Grow()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新船舰数组&lt;/span&gt;
            Segment newSegment = &lt;span&gt;new&lt;/span&gt; Segment(m_index + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, m_source);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;赋值给next指针&lt;/span&gt;
            m_next =&lt;span&gt; newSegment;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将节点添加到链&lt;/span&gt;
            m_source.m_tail =&lt;span&gt; m_next;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 在末尾添加元素
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;value&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;元素&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;tail&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The tail.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;如果附加元素，则为true；如果当前数组已满，则为false&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;&lt;span&gt;如果附加指定的元素成功，并且在此之后数组满了，在链上添加新节点（节点为32长度数组）    &lt;/span&gt;&lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; TryAppend(T value)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果数组已满则跳出方法&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (m_high &amp;gt;= SEGMENT_SIZE - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;局部变量初始化&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; newhigh =&lt;span&gt; SEGMENT_SIZE;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            { }
            &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;原子递增&lt;/span&gt;
                newhigh = Interlocked.Increment(&lt;span&gt;ref&lt;/span&gt;&lt;span&gt; m_high);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (newhigh &amp;lt;= SEGMENT_SIZE - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                {
                    m_array[newhigh] &lt;/span&gt;=&lt;span&gt; value;
                    m_state[newhigh].m_value &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果数组满了，则扩展链节点。&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (newhigh == SEGMENT_SIZE - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                {
                    Grow();
                }
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果 newhigh &amp;lt;= SEGMENT_SIZE-1, 这意味着当前线程成功地占据了一个位置&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; newhigh &amp;lt;= SEGMENT_SIZE - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 尝试从链的头部数组删除节点
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;result&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; TryRemove(&lt;span&gt;out&lt;/span&gt;&lt;span&gt; T result)
        {
            SpinWait spin &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SpinWait();
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; lowLocal = Low, highLocal =&lt;span&gt; High;
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (lowLocal &amp;lt;=&lt;span&gt; highLocal)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取队头索引&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (Interlocked.CompareExchange(&lt;span&gt;ref&lt;/span&gt; m_low, lowLocal + &lt;span&gt;1&lt;/span&gt;, lowLocal) ==&lt;span&gt; lowLocal)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果要弹出队列的值不可用，说明这个位置被并行线程获取到了权限，但是值还未写入。
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过线程自旋等待值写入&lt;/span&gt;
                    SpinWait spinLocal = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SpinWait();
                    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;m_state[lowLocal].m_value)
                    {
                        spinLocal.SpinOnce();
                    }
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取出值&lt;/span&gt;
                    result =&lt;span&gt; m_array[lowLocal];
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果没有其他线程读取（GetEnumerator（）、ToList（）） 执行删除
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如 TryPeek 的时候m_numSnapshotTakers会在进入方法体时++，在出方法体--
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 清空该索引下的值&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt; (m_source.m_numSnapshotTakers &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                        m_array[lowLocal] &lt;/span&gt;= &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(T);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果说lowLocal+1 = 32 说明当前链节点的数组已经全部出队&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt; (lowLocal + &lt;span&gt;1&lt;/span&gt; &amp;gt;=&lt;span&gt; SEGMENT_SIZE)
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;由于lowLocal &amp;lt;= highLocal成立
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;lowLocal + 1 &amp;gt;= SEGMENT_SIZE 如果成立 ,且m_next == null 成立，
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;说明在此时有其他线程正在做扩展链结构
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;那么当前线程需要等待其他线程完成扩展链表，再做出队操作。&lt;/span&gt;
                        spinLocal = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SpinWait();
                        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (m_next == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        {
                            spinLocal.SpinOnce();
                        }
                        m_source.m_head &lt;/span&gt;=&lt;span&gt; m_next;
                    }
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;此时说明 当前线程竞争资源失败，做短暂自旋后继续竞争资源&lt;/span&gt;
&lt;span&gt;                    spin.SpinOnce();
                    lowLocal &lt;/span&gt;= Low; highLocal =&lt;span&gt; High;
                }
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;失败的情况下返回空值&lt;/span&gt;
            result = &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(T);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 尝试获取队列头节点元素
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; TryPeek(&lt;span&gt;out&lt;/span&gt;&lt;span&gt; T result)
        {
            result &lt;/span&gt;= &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(T);
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; lowLocal =&lt;span&gt; Low;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;校验当前队列是否正确&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (lowLocal &amp;gt;&lt;span&gt; High)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            SpinWait spin &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SpinWait();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果头节点无效，则说明当前节点被其他线程占用，并在做写入操作，
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要等待其他线程写入后再执行读取操作&lt;/span&gt;
            &lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;m_state[lowLocal].m_value)
            {
                spin.SpinOnce();
            }
            result &lt;/span&gt;=&lt;span&gt; m_array[lowLocal];
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 返回队列首位置
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Low
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Math.Min(m_low, SEGMENT_SIZE);
            }
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取队列长度    
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; High
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果m_high&amp;gt;SEGMENT_SIZE，则表示超出范围，我们应该返回 SEGMENT_SIZE-1&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; Math.Min(m_high, SEGMENT_SIZE - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 结构-用来存储整数组每个索引上是否存储值
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; VolatileBool
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; VolatileBool(&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; value)
    {
        m_value &lt;/span&gt;=&lt;span&gt; value;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; m_value;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码通篇看下来有些长（已经精简了很多，只实现入队、出队、与查看下一个出队的值），不知道有多少人能翻到这里~&lt;/p&gt;
&lt;p&gt;&lt;span&gt;说明：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、TryAppend方法通过Interlocked.Increment()原子递增方法获取下一个数组存储点，通过比对32判断链是否需要增加下一个链节点，也就是说，链的存储空间每次扩展为32个存储位置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、TryRemove方法通过 Interlocked.CompareExchange()方法来判断当前是否有并行线程在写入，如果有则通过 while循环 SpinWait类的SpinOnce()方法实现等待写入完成后，再做删除；特别说明，判断是否写入是靠VolatileBool结构来实现的，每个链表的每个节点在存储值的同时每个存储都对应一个VolatileBool结构用来标识当前写入点是否成功写入。特殊情况，如果当前链节点的数组已经空了，则需要pinWait类的SpinOnce()简短的自旋等待并行的写入方法完成扩展链后，再做删除。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、TryPeek方法，同样会判断要获取的元素是否已经成功写入（不成功则说明并行线程还未完成写入），如果未完成，则通过 while pinWait类的SpinOnce()来等待写入完成后，再读取元素内容。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;现在代码已经看完了，来试下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
MyConcurrentQueue&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; myConcurrentQueue = &lt;span&gt;new&lt;/span&gt; MyConcurrentQueue&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;67&lt;/span&gt;; i++&lt;span&gt;)
{
    myConcurrentQueue.Enqueue($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第{i}位&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;总数：{myConcurrentQueue.Count}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}

myConcurrentQueue.TryPeek(&lt;/span&gt;&lt;span&gt;out&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; rs);
Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TryPeek 总数：{myConcurrentQueue.Count}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;34&lt;/span&gt;; i++&lt;span&gt;)
{
    myConcurrentQueue.TryDequeue(&lt;/span&gt;&lt;span&gt;out&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; result0);
    Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TryDequeue 总数：{myConcurrentQueue.Count}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}
Console.ReadKey();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;137&quot;&gt;
&lt;pre&gt;
head.Low:&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;0&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;1&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;3&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;4&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;5&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;6&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;7&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;8&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;9&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;10&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;11&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;12&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;13&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;14&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;15&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;16&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;17&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;18&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;19&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;20&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;21&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;22&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;23&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;24&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;25&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;26&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;27&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;28&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;29&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;30&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：-&lt;span&gt;1&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;0&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;1&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;3&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;4&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;5&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;6&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;7&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;8&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;9&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;10&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;11&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;12&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;13&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;14&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;15&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;16&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;17&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;18&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;19&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;20&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;21&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;22&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;23&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;24&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;25&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;26&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;27&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;28&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;29&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;30&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：-&lt;span&gt;1&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;0&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;1&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
总数：&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryPeek 总数：&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;0&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;1&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;1&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;&lt;span&gt;
head.Low:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,tail.High：&lt;span&gt;2&lt;/span&gt;，head.m_index:&lt;span&gt;1&lt;/span&gt;，tail.m_index：&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
TryDequeue 总数：&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有时间希望大家能将代码跑一下，相信会更明白其中的原理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/404258/202010/404258-20201029211150633-2075337827.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 30 Oct 2020 00:11:00 +0000</pubDate>
<dc:creator>温暖如太阳</dc:creator>
<og:description>什么是线程安全？ 答：线程安全是多线程编程时的计算机程序代码中的一个概念。在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xtt321/p/13899276.html</dc:identifier>
</item>
<item>
<title>群晖DS218+部署mysql - 程序员欣宸</title>
<link>http://www.cnblogs.com/bolingcavalry/p/13900199.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bolingcavalry/p/13900199.html</guid>
<description>&lt;h3 id=&quot;欢迎访问我的github&quot;&gt;欢迎访问我的GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zq2599/blog_demos&quot;&gt;https://github.com/zq2599/blog_demos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内容：所有原创文章分类汇总及配套源码，涉及Java、Docker、Kubernetes、DevOPS等；&lt;/p&gt;
&lt;h3 id=&quot;起因是懒&quot;&gt;起因是懒&lt;/h3&gt;
&lt;p&gt;我是个Java程序员，在家写代码时离不开redis、mysql、kafka这些基础服务，通常做法是打开电脑，启动redis、mysql、kafka，用完再关闭电脑，麻烦呀（您想骂我懒么？您骂得对.....）&lt;/p&gt;
&lt;h3 id=&quot;并非第一次折腾&quot;&gt;并非第一次折腾&lt;/h3&gt;
&lt;p&gt;之前曾折腾过家里的群晖DS218+，装了maven私服nexus3，地址：&lt;a href=&quot;https://blog.csdn.net/boling_cavalry/article/details/105458466&quot;&gt;《群晖DS218+做maven私服(nexus3)》&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;群晖ds218&quot;&gt;群晖DS218+&lt;/h3&gt;
&lt;p&gt;家里有一台群晖DS218+，很久以来始终24小时开机为全家服务，如果能把mysql装到这里，似乎前面的麻烦就没有了；&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;下图是DS218+刚买来的样子，两块NAS硬盘，一直在稳定服务：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074944031-106163786.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;下图是网购的内存条，现在一共2+8=10G内存，内存充足才是敢折腾的底气：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074944904-1002505505.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;据说拆机可以把原装2G内存条换掉，就能装两根8G内存条，目前暂时用不上，我需要克制...&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;思路&quot;&gt;思路&lt;/h3&gt;
&lt;p&gt;其实操作很简单：群晖带有docker服务，用docker来部署mysql即可，所以，本文其实也就是群晖docker的基本操作记录，以下几处是要注意的地方：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;容器端口&lt;/li&gt;
&lt;li&gt;容器数据卷&lt;/li&gt;
&lt;li&gt;文件权限&lt;/li&gt;
&lt;li&gt;登录容器操作&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;环境信息&quot;&gt;环境信息&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;群晖系统：DSM 6.2.2-24922 Update 4&lt;/li&gt;
&lt;li&gt;Mysql：5.7.29&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;准备工作&quot;&gt;准备工作&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;先要给MySQL容器准备好一个本地目录，否则一旦容器出了问题MySQL的数据就找不回来了&lt;/li&gt;
&lt;li&gt;如下图，在File Station中，在docker目录下新建一个文件夹，名为mysql：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074945525-449265513.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;还要给此目录赋予权限，否则容器无法写入数据，如下图，点击右键，在菜单上选择&lt;span&gt;属性&lt;/span&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074945942-1932581093.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;如下图，我这里为了简单省事儿放开了所有权限：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074946576-1223775515.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;如下图红框中的操作：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074946908-1016338088.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;准备工作已经完成，可以开始正式操作了；&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;操作&quot;&gt;操作&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;进入群晖管理页面&lt;/li&gt;
&lt;li&gt;进入docker应用，搜索mysql镜像，操作如下图的数字顺序，即可开始下载镜像：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074947264-2049975929.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;镜像下载好之后，操作如下图的数字顺序，进入启动容器的页面：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074947677-601335531.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;给容器起个合适的名字，然后点击&lt;span&gt;高级设置&lt;/span&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074948016-2076700666.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;选择&lt;span&gt;卷&lt;/span&gt;这个Tab页，点击&lt;span&gt;添加文件夹&lt;/span&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074948309-2101037703.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;选中咱们刚才新建的mysql文件夹：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074948615-1988990114.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;装载路径是指容器内的路径，写&lt;span&gt;/var/lib/mysql&lt;/span&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074948872-193554139.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;接下来设置端口，如下图，把3306对应的本地端口从&lt;span&gt;自动&lt;/span&gt;改为&lt;span&gt;3306&lt;/span&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074949123-2066555275.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;最后在&lt;span&gt;环境&lt;/span&gt;的Tab页，增加MySQL的root账号的密码设置，如下图，名字&lt;span&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;，值&lt;span&gt;123456&lt;/span&gt;，操作完成后点击右下角的&lt;span&gt;应用&lt;/span&gt;按钮完成设置：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074949488-846021848.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;勾选&lt;span&gt;向导完成后运行此容器&lt;/span&gt;，点击右下角的&lt;span&gt;应用&lt;/span&gt;即可开始创建容器：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074949809-726238401.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;验证&quot;&gt;验证&lt;/h3&gt;
&lt;p&gt;来验证一下MySQL是否可用：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;双击下图红框中的位置：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074950081-793414685.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;在弹出的页面中，继续双击下图红框中的位置：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074950396-63693721.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;如下图操作，即可在MySQL容器的namepace内执行一个shell命令：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074950708-305540114.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;弹出一个窗口让您输入命令，请输入&lt;span&gt;/bin/bash&lt;/span&gt;：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074950972-176566793.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;如下图，进入容器了：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074951223-157075854.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;执行命令&lt;span&gt;mysql -uroot -p123456&lt;/span&gt;，可以进入MySQL命令模式了，如下图，操作正常：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074951642-729765177.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;远程连接也要试试，毕竟今后是别的机器通过IP地址来连接的，我这里用了一台Macbook Pro，安装了&lt;span&gt;MySQL Workbench&lt;/span&gt;，配置了群晖的IP地址和&lt;span&gt;3306&lt;/span&gt;端口，账号是&lt;span&gt;root&lt;/span&gt;，密码&lt;span&gt;123456&lt;/span&gt;，连接正常，如下图：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202010/485422-20201030074952017-1099046599.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;至此，群晖DS218+部署MySQL成功，今后数据库服务随时可用，也没有什么额外代价，码农福音...&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;欢迎关注公众号：程序员欣宸&quot;&gt;欢迎关注公众号：程序员欣宸&lt;/h3&gt;
&lt;blockquote readability=&quot;4.258064516129&quot;&gt;
&lt;p&gt;微信搜索「程序员欣宸」，我是欣宸，期待与您一同畅游Java世界...&lt;br/&gt;&lt;a href=&quot;https://github.com/zq2599/blog_demos&quot;&gt;https://github.com/zq2599/blog_demos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 29 Oct 2020 23:50:00 +0000</pubDate>
<dc:creator>程序员欣宸</dc:creator>
<og:description>欢迎访问我的GitHub https://github.com/zq2599/blog_demos 内容：所有原创文章分类汇总及配套源码，涉及Java、Docker、Kubernetes、DevOPS</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/bolingcavalry/p/13900199.html</dc:identifier>
</item>
<item>
<title>云计算管理平台之OpenStack计算服务nova - Linux-1874</title>
<link>http://www.cnblogs.com/qiuhom-1874/p/13899170.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiuhom-1874/p/13899170.html</guid>
<description>&lt;p&gt;　　一、nova简介&lt;/p&gt;
&lt;p&gt;　　nova是openstack中的计算服务，其主要作用是帮助我们在计算节点上管理虚拟机的核心服务；这里的计算节点就是指用于提供运行虚拟机实例的主机，通常像这种计算节点有很多台，那么虚拟机到底在哪个server上启动？如何启动？这就是nova需要做的；对于openstack用户来讲，底层到底在哪台server上启动虚拟机以及怎么启动的，我们可以不关心；因为nova服务帮我们搞定；&lt;/p&gt;
&lt;p&gt;　　nova架构图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029200442105-1523162890.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　nova服务有很多组件，其中核心组件有nova-api、nova-scheduler、nova-conductor、nova-console、nova-novncproxy、nova-placement和nova-compute ；其中nava-api主要用来接收客户端请求，并将请求信息放到对应的消息队列中，同时将用户的请求写入到nova数据库中，相当于服务的入口；nova-scheduler主要用于调度用户的请求，比如创建虚拟机需要调度到哪台物理server上创建都是由nova-scheduler来决策；它会将其调度结果放到对应的消息队列中同时它也会把调度信息写入nova数据库中；nova-conductor主要用来帮助其他组件修改虚拟机后的信息，将其写入到nova 数据库中的；所有队列中有关写数据库的请求都会先丢给nova-conductor所订阅的消息队列中，然后nova-conductor会按照一定的速度向数据库中写；这样做主要是减少数据库的压力，避免数据库压力过大而出现异常；nova-console主要用来给虚拟机提供控制台服务，并将其控制台地址写入到nova数据库中；nova-novncproxy主要作用是代理用户通过novnc访问虚拟机控制台；nova-placement主要作用是跟踪每个数据节点的资源使用情况；nova-computer主要用来调用数据节点的hypervisor，来管理虚拟机；这些组件都是基于一个消息队列服务来相互调用的；从而实现各组件解耦；所以nova服务是严重依赖消息队列服务的；&lt;/p&gt;
&lt;p&gt;　　nova核心工作流程&lt;/p&gt;
&lt;p&gt;　　当nova-api接收到用户的请求，比如创建一个虚拟机实例，nova-api会把这个请求放到消息队列中，并把用户的请求信息写入到nova数据库中，然后继续接收其他用户的请求；nova-api把用户请求放到未调度的消息队列中，nova-scheduler会从未调度的消息队列中取出用户的请求进行调度，把调度结果又返回给对应计算节点所订阅的消息队列中，同时它也会把调度结果写到nova数据库中，然后由对应的数据节点nova-computer取出调度后的消息进行处理；nova-computer的处理就是调用本地的hypervisor来创建虚拟机，最后把创建成功的消息，丢给消息队列，然后由nova-api到消息队列中取得虚拟机实例创建成功的消息，nova-api再把消息返回给用户；对于其他组件的工作原理也是类似，他们都是把处理的结果放到对应的消息队列中，然后由其他组件去消息队列中取结果，从而完成各组件间的互相调用；&lt;/p&gt;
&lt;p&gt;　　二、nova服务的安装、配置、测试&lt;/p&gt;
&lt;p&gt;　　1、创建数据库、用户、授权用户&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node02 ~]# mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 2
Server version: 10.1.20-MariaDB MariaDB Server

Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]&amp;gt; CREATE DATABASE nova_api;
Query OK, 1 row affected (0.01 sec)

MariaDB [(none)]&amp;gt; CREATE DATABASE nova;
Query OK, 1 row affected (0.00 sec)

MariaDB [(none)]&amp;gt; CREATE DATABASE nova_cell0;
Query OK, 1 row affected (0.00 sec)

MariaDB [(none)]&amp;gt; CREATE DATABASE placement;
Query OK, 1 row affected (0.00 sec)

MariaDB [(none)]&amp;gt; GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%'  IDENTIFIED BY 'nova123';
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%'  IDENTIFIED BY 'nova123';
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'%'  IDENTIFIED BY 'nova123';
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'%'  IDENTIFIED BY 'nova123';
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| glance             |
| information_schema |
| keystone           |
| mysql              |
| nova               |
| nova_api           |
| nova_cell0         |
| performance_schema |
| placement          |
| test               |
+--------------------+
10 rows in set (0.05 sec)

MariaDB [(none)]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：以上主要创建了四个数据库，分别是nova_api,nova,nova_cell0,placement；然后创建了两个用户，一个是nova用户，并授权它能够从任意主机连接到数据库，并对nova_api,nova,nova_cell0这三个库下的有所有表有增删查改的权限；一个用户是placement，并授权该用户能够从任意主机连接到placement数据库对placment库下的所有表增删查改的权限；&lt;/p&gt;
&lt;p&gt;　　验证：用其他主机使用nova用户连接mariadb，看看是否能够正常连接？是否能够看到nova_api,nova,nova_cell0这三个库？&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# mysql -unova -pnova123 -hnode02
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 3
Server version: 10.1.20-MariaDB MariaDB Server

Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| nova               |
| nova_api           |
| nova_cell0         |
| test               |
+--------------------+
5 rows in set (0.00 sec)

MariaDB [(none)]&amp;gt; exit
Bye
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：使用nova用户和nova用户的密码连接数据能够看到我们之前授权的三个库，说明我们创建nova用户并授权的操作没有问题；&lt;/p&gt;
&lt;p&gt;　　验证：用其他主机使用placement用户连接mariadb,看看是否可正常连接？是否能够看到placement这个库？&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# mysql -uplacement -pnova123 -hnode02
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 4
Server version: 10.1.20-MariaDB MariaDB Server

Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| placement          |
| test               |
+--------------------+
3 rows in set (0.00 sec)

MariaDB [(none)]&amp;gt; exit
Bye
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　说明：能够看到placement库就说明placement账号没有问题；&lt;/p&gt;
&lt;p&gt;　　2、在控制节点上安装、配置nova服务&lt;/p&gt;
&lt;p&gt;　　导出admin用户的环境变量，创建nova用户，设置其密码为nova&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# source admin.sh 
[root@node01 ~]# openstack user create --domain default --password-prompt nova
User Password:
Repeat User Password:
+---------------------+----------------------------------+
| Field               | Value                            |
+---------------------+----------------------------------+
| domain_id           | 47c0915c914c49bb8670703e4315a80f |
| enabled             | True                             |
| id                  | 8e0ed287f92749e098a913a3edb90c74 |
| name                | nova                             |
| options             | {}                               |
| password_expires_at | None                             |
+---------------------+----------------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　将nova用户授权为admin角色，并指明是一个service项目&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# openstack role add --project service --user nova admin
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建nova服务，并将其类型设置为compute &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# openstack service create --name nova \
&amp;gt;   --description &quot;OpenStack Compute&quot; compute
+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description | OpenStack Compute                |
| enabled     | True                             |
| id          | 8e002dd8e3ba4bd98a15b433dede19a3 |
| name        | nova                             |
| type        | compute                          |
+-------------+----------------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建compute API endport （服务端点，注册服务）&lt;/p&gt;
&lt;p&gt;　　创建公共端点&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# openstack endpoint create --region RegionOne \
&amp;gt;   compute public http://controller:8774/v2.1
+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | 7524a1aa1c6f4c21ac4917c1865667f3 |
| interface    | public                           |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 8e002dd8e3ba4bd98a15b433dede19a3 |
| service_name | nova                             |
| service_type | compute                          |
| url          | http://controller:8774/v2.1      |
+--------------+----------------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建私有端点&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# openstack endpoint create --region RegionOne \
&amp;gt;   compute internal http://controller:8774/v2.1
+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | 1473a41427174c24b8d84c62b25262f6 |
| interface    | internal                         |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 8e002dd8e3ba4bd98a15b433dede19a3 |
| service_name | nova                             |
| service_type | compute                          |
| url          | http://controller:8774/v2.1      |
+--------------+----------------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建管理端点&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# openstack endpoint create --region RegionOne \
&amp;gt;   compute admin http://controller:8774/v2.1
+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | 3427fe37f3564252bffe0ee2f6bc766c |
| interface    | admin                            |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 8e002dd8e3ba4bd98a15b433dede19a3 |
| service_name | nova                             |
| service_type | compute                          |
| url          | http://controller:8774/v2.1      |
+--------------+----------------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建placement用户，并设置密码为placement&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# openstack user create --domain default --password-prompt placement
User Password:
Repeat User Password:
+---------------------+----------------------------------+
| Field               | Value                            |
+---------------------+----------------------------------+
| domain_id           | 47c0915c914c49bb8670703e4315a80f |
| enabled             | True                             |
| id                  | a75c42cd405b4ea4885141df228b4caf |
| name                | placement                        |
| options             | {}                               |
| password_expires_at | None                             |
+---------------------+----------------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　将placement用户授权为admin角色，并指明是一个service项目&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# openstack role add --project service --user placement admin
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建placement服务，并将其类型设置为placement&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# openstack service create --name placement \
&amp;gt;   --description &quot;Placement API&quot; placement
+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description | Placement API                    |
| enabled     | True                             |
| id          | de21b8c49adb4a8d88c38a08d5db2d59 |
| name        | placement                        |
| type        | placement                        |
+-------------+----------------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建placement API endport （服务端点，注册服务）&lt;/p&gt;
&lt;p&gt;　　公共端点&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# openstack endpoint create --region RegionOne \
&amp;gt;   placement public http://controller:8778
+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | 222b6f91a2674ea993524c94e41a5757 |
| interface    | public                           |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | de21b8c49adb4a8d88c38a08d5db2d59 |
| service_name | placement                        |
| service_type | placement                        |
| url          | http://controller:8778           |
+--------------+----------------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　私有端点&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# openstack endpoint create --region RegionOne \
&amp;gt;   placement internal http://controller:8778
+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | 04fa958200a943f4905893c6063389ab |
| interface    | internal                         |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | de21b8c49adb4a8d88c38a08d5db2d59 |
| service_name | placement                        |
| service_type | placement                        |
| url          | http://controller:8778           |
+--------------+----------------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　管理端点&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# openstack endpoint create --region RegionOne \
&amp;gt;   placement admin http://controller:8778
+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | 6ddf51b6d9d8467e92cbf22c40e1ba1c |
| interface    | admin                            |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | de21b8c49adb4a8d88c38a08d5db2d59 |
| service_name | placement                        |
| service_type | placement                        |
| url          | http://controller:8778           |
+--------------+----------------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　验证：在控制节点上查看是端点列表，看看nova和placement服务端点是否都创建成功？&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# openstack endpoint list 
+----------------------------------+-----------+--------------+--------------+---------+-----------+-----------------------------+
| ID                               | Region    | Service Name | Service Type | Enabled | Interface | URL                         |
+----------------------------------+-----------+--------------+--------------+---------+-----------+-----------------------------+
| 04cd3747614b42a3ba086cef39a1acd9 | RegionOne | glance       | image        | True    | admin     | http://controller:9292      |
| 04fa958200a943f4905893c6063389ab | RegionOne | placement    | placement    | True    | internal  | http://controller:8778      |
| 09f5ec434ea24d4c8dc9efe2bbb62b01 | RegionOne | glance       | image        | True    | internal  | http://controller:9292      |
| 1473a41427174c24b8d84c62b25262f6 | RegionOne | nova         | compute      | True    | internal  | http://controller:8774/v2.1 |
| 222b6f91a2674ea993524c94e41a5757 | RegionOne | placement    | placement    | True    | public    | http://controller:8778      |
| 3427fe37f3564252bffe0ee2f6bc766c | RegionOne | nova         | compute      | True    | admin     | http://controller:8774/v2.1 |
| 358ccfc245264b60a9d1a0c113dfa628 | RegionOne | glance       | image        | True    | public    | http://controller:9292      |
| 3bd05493999b462eb4b4af8d5e5c1fa9 | RegionOne | keystone     | identity     | True    | admin     | http://controller:5000/v3   |
| 5293ad18db674ea1b01d8f401cb2cf14 | RegionOne | keystone     | identity     | True    | public    | http://controller:5000/v3   |
| 6593f8d808094b01a6311828f2ef72bd | RegionOne | keystone     | identity     | True    | internal  | http://controller:5000/v3   |
| 6ddf51b6d9d8467e92cbf22c40e1ba1c | RegionOne | placement    | placement    | True    | admin     | http://controller:8778      |
| 7524a1aa1c6f4c21ac4917c1865667f3 | RegionOne | nova         | compute      | True    | public    | http://controller:8774/v2.1 |
+----------------------------------+-----------+--------------+--------------+---------+-----------+-----------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：如果在端点列表中有3个nova和3个placement的端点，分别对应public、internal和admin接口，说明我们配置nova和placement服务端端点注册没有问题；&lt;/p&gt;
&lt;p&gt;　　安装nova服务组件包&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# yum install openstack-nova-api openstack-nova-conductor \
&amp;gt;   openstack-nova-console openstack-nova-novncproxy \
&amp;gt;   openstack-nova-scheduler openstack-nova-placement-api
Loaded plugins: fastestmirror
base                                                                                                   | 3.6 kB  00:00:00     
centos-ceph-luminous                                                                                   | 3.0 kB  00:00:00     
centos-openstack-rocky                                                                                 | 3.0 kB  00:00:00     
centos-qemu-ev                                                                                         | 3.0 kB  00:00:00     
epel                                                                                                   | 4.7 kB  00:00:00     
extras                                                                                                 | 2.9 kB  00:00:00     
updates                                                                                                | 2.9 kB  00:00:00     
(1/2): epel/x86_64/updateinfo                                                                          | 1.0 MB  00:00:00     
(2/2): epel/x86_64/primary_db                                                                          | 6.9 MB  00:00:00     
Loading mirror speeds from cached hostfile
 * base: mirrors.aliyun.com
 * centos-qemu-ev: mirrors.aliyun.com
 * extras: mirrors.aliyun.com
 * updates: mirrors.aliyun.com
Resolving Dependencies
--&amp;gt; Running transaction check
---&amp;gt; Package openstack-nova-api.noarch 1:18.3.0-1.el7 will be installed
--&amp;gt; Processing Dependency: openstack-nova-common = 1:18.3.0-1.el7 for package: 1:openstack-nova-api-18.3.0-1.el7.noarch
---&amp;gt; Package openstack-nova-conductor.noarch 1:18.3.0-1.el7 will be installed
---&amp;gt; Package openstack-nova-console.noarch 1:18.3.0-1.el7 will be installed
--&amp;gt; Processing Dependency: python-websockify &amp;gt;= 0.8.0 for package: 1:openstack-nova-console-18.3.0-1.el7.noarch
---&amp;gt; Package openstack-nova-novncproxy.noarch 1:18.3.0-1.el7 will be installed
……省略部分内容……
Installed:
  openstack-nova-api.noarch 1:18.3.0-1.el7                        openstack-nova-conductor.noarch 1:18.3.0-1.el7              
  openstack-nova-console.noarch 1:18.3.0-1.el7                    openstack-nova-novncproxy.noarch 1:18.3.0-1.el7             
  openstack-nova-placement-api.noarch 1:18.3.0-1.el7              openstack-nova-scheduler.noarch 1:18.3.0-1.el7              

Dependency Installed:
  novnc.noarch 0:0.5.1-2.el7                                      openstack-nova-common.noarch 1:18.3.0-1.el7                
  python-kazoo.noarch 0:2.2.1-1.el7                               python-nova.noarch 1:18.3.0-1.el7                          
  python-oslo-versionedobjects-lang.noarch 0:1.33.3-1.el7         python-paramiko.noarch 0:2.1.1-9.el7                       
  python-websockify.noarch 0:0.8.0-1.el7                          python2-microversion-parse.noarch 0:0.2.1-1.el7            
  python2-os-traits.noarch 0:0.9.0-1.el7                          python2-os-vif.noarch 0:1.11.2-1.el7                       
  python2-oslo-reports.noarch 0:1.28.0-1.el7                      python2-oslo-versionedobjects.noarch 0:1.33.3-1.el7        
  python2-psutil.x86_64 0:5.6.7-1.el7                             python2-pyroute2.noarch 0:0.5.2-4.el7                      
  python2-redis.noarch 0:2.10.6-1.el7                             python2-tooz.noarch 0:1.62.1-1.el7                         
  python2-voluptuous.noarch 0:0.11.5-1.el7.1                      python2-zake.noarch 0:0.2.2-2.el7                          

Complete!
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　编辑配置/etc/nova/nova.conf文件，在【DEFAULT】配置段配置仅启用计算和元数据api和rabbitmq地址信息&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;br/&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029220559643-403166492.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【&lt;code class=&quot;docutils literal notranslate&quot;&gt;api_daabase&lt;/code&gt;】配置段配置连接nova_api数据库相关信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029215744707-1021808497.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【&lt;span class=&quot;k&quot;&gt;database&lt;/span&gt;】配置段配置连接nova数据库的相关信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029220018467-1382983686.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【&lt;span class=&quot;k&quot;&gt;placement_database】配置段配置连接placlement数据库相关信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;k&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029220314212-1300197411.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　在【api】配置段配置使用keystone验证&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029220745502-1867605328.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【keystone_authtoken】配置段配置keystone相关信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029221007496-1856049883.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【DEFAULT】配置段配置支持使用neutron以及相关驱动&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029221340467-515394637.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【vnc】配置段配置启用vnc,并设置vnc监听地址和客户端代理使用的ip地址，这里都用controller的解析地址即可；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029225808043-1051110389.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【glance】配置段配置连接glance的地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029222211021-197663208.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【&lt;span class=&quot;k&quot;&gt;oslo_concurrency&lt;/span&gt;】配置段配置锁文件存放路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029222400177-80585090.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【&lt;span class=&quot;k&quot;&gt;placement】配置段配置plancement api服务相关信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029222623475-2025007316.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　/etc/nova/nova.conf最终配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# grep -i ^&quot;[a-z\[]&quot; /etc/nova/nova.conf
[DEFAULT]
enabled_apis = osapi_compute,metadata
transport_url = rabbit://openstack:openstack123@node02
use_neutron = true
firewall_driver = nova.virt.firewall.NoopFirewallDriver
[api]
auth_strategy = keystone
[api_database]
connection = mysql+pymysql://nova:nova123@node02/nova_api
[barbican]
[cache]
[cells]
[cinder]
[compute]
[conductor]
[console]
[consoleauth]
[cors]
[database]
connection = mysql+pymysql://nova:nova123@node02/nova
[devices]
[ephemeral_storage_encryption]
[filter_scheduler]
[glance]
api_servers = http://controller:9292
[guestfs]
[healthcheck]
[hyperv]
[ironic]
[key_manager]
[keystone]
[keystone_authtoken]
auth_url = http://controller:5000/v3
memcached_servers = node02:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = nova
password = nova
[libvirt]
[matchmaker_redis]
[metrics]
[mks]
[neutron]
[notifications]
[osapi_v21]
[oslo_concurrency]
lock_path=/var/lib/nova/tmp
[oslo_messaging_amqp]
[oslo_messaging_kafka]
[oslo_messaging_notifications]
[oslo_messaging_rabbit]
[oslo_messaging_zmq]
[oslo_middleware]
[oslo_policy]
[pci]
[placement]
region_name = RegionOne
project_domain_name = Default
project_name = service
auth_type = password
user_domain_name = Default
auth_url = http://controller:5000/v3
username = placement
password = placement
[placement_database]
connection = mysql+pymysql://placement:nova123@node02/placement
[powervm]
[profiler]
[quota]
[rdp]
[remote_debug]
[scheduler]
[serial_console]
[service_user]
[spice]
[upgrade_levels]
[vault]
[vendordata_dynamic_auth]
[vmware]
[vnc]
enabled = true
server_listen = controller
server_proxyclient_address = controller
[workarounds]
[wsgi]
[xenserver]
[xvp]
[zvm]
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　编辑/etc/httpd/conf.d/00-nova-placement-api.conf配置文件，添加对placement api 的访问控制，在配置文件末尾添加&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&amp;lt;Directory /usr/bin&amp;gt;
   &amp;lt;IfVersion &amp;gt;= 2.4&amp;gt;
      Require all granted
   &amp;lt;/IfVersion&amp;gt;
   &amp;lt;IfVersion &amp;lt; 2.4&amp;gt;
      Order allow,deny
      Allow from all
   &amp;lt;/IfVersion&amp;gt;
&amp;lt;/Directory&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029230320000-1572351888.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　重启httpd&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029230652629-1630922280.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：重启httpd服务后，确保5000和8778端口能够正常监听；&lt;/p&gt;
&lt;p&gt;　　初始化数据库&lt;/p&gt;
&lt;p&gt;　　初始化nova_api数据库和placement数据库&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# su -s /bin/sh -c &quot;nova-manage api_db sync&quot; nova
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　验证：查看nova-api库和placement库是否有表生成？&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
MariaDB [(none)]&amp;gt; use nova_api
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
MariaDB [nova_api]&amp;gt; show tables;
+------------------------------+
| Tables_in_nova_api           |
+------------------------------+
| aggregate_hosts              |
| aggregate_metadata           |
| aggregates                   |
| allocations                  |
| build_requests               |
| cell_mappings                |
| consumers                    |
| flavor_extra_specs           |
| flavor_projects              |
| flavors                      |
| host_mappings                |
| instance_group_member        |
| instance_group_policy        |
| instance_groups              |
| instance_mappings            |
| inventories                  |
| key_pairs                    |
| migrate_version              |
| placement_aggregates         |
| project_user_quotas          |
| projects                     |
| quota_classes                |
| quota_usages                 |
| quotas                       |
| request_specs                |
| reservations                 |
| resource_classes             |
| resource_provider_aggregates |
| resource_provider_traits     |
| resource_providers           |
| traits                       |
| users                        |
+------------------------------+
32 rows in set (0.00 sec)

MariaDB [nova_api]&amp;gt; use placement
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
MariaDB [placement]&amp;gt; show tables;
+------------------------------+
| Tables_in_placement          |
+------------------------------+
| aggregate_hosts              |
| aggregate_metadata           |
| aggregates                   |
| allocations                  |
| build_requests               |
| cell_mappings                |
| consumers                    |
| flavor_extra_specs           |
| flavor_projects              |
| flavors                      |
| host_mappings                |
| instance_group_member        |
| instance_group_policy        |
| instance_groups              |
| instance_mappings            |
| inventories                  |
| key_pairs                    |
| migrate_version              |
| placement_aggregates         |
| project_user_quotas          |
| projects                     |
| quota_classes                |
| quota_usages                 |
| quotas                       |
| request_specs                |
| reservations                 |
| resource_classes             |
| resource_provider_aggregates |
| resource_provider_traits     |
| resource_providers           |
| traits                       |
| users                        |
+------------------------------+
32 rows in set (0.00 sec)

MariaDB [placement]&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注册cell0&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# su -s /bin/sh -c &quot;nova-manage cell_v2 map_cell0&quot; nova
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建cell1&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# su -s /bin/sh -c &quot;nova-manage cell_v2 create_cell --name=cell1 --verbose&quot; nova
2ad18452-0e55-4505-ba5e-76cbf071b0d6
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　验证cell0和cell1是否注册正确&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# su -s /bin/sh -c &quot;nova-manage cell_v2 list_cells&quot; nova
+-------+--------------------------------------+--------------------------------+---------------------------------------------+----------+
|  Name |                 UUID                 |         Transport URL          |             Database Connection             | Disabled |
+-------+--------------------------------------+--------------------------------+---------------------------------------------+----------+
| cell0 | 00000000-0000-0000-0000-000000000000 |             none:/             | mysql+pymysql://nova:****@node02/nova_cell0 |  False   |
| cell1 | 2ad18452-0e55-4505-ba5e-76cbf071b0d6 | rabbit://openstack:****@node02 |    mysql+pymysql://nova:****@node02/nova    |  False   |
+-------+--------------------------------------+--------------------------------+---------------------------------------------+----------+
[root@node01 ~]#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：能够看到以上信息就表示cell0和cell1注册没有问题；&lt;/p&gt;
&lt;p&gt;　　初始化nova数据库&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# su -s /bin/sh -c &quot;nova-manage db sync&quot; nova
/usr/lib/python2.7/site-packages/pymysql/cursors.py:170: Warning: (1831, u'Duplicate index `block_device_mapping_instance_uuid_virtual_name_device_name_idx`. This is deprecated and will be disallowed in a future release.')
  result = self._query(query)
/usr/lib/python2.7/site-packages/pymysql/cursors.py:170: Warning: (1831, u'Duplicate index `uniq_instances0uuid`. This is deprecated and will be disallowed in a future release.')
  result = self._query(query)
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：这里提示两个警告信息，说两个指令在未来的版本中不允许这样使用；我们可以忽略这些警告信息；&lt;/p&gt;
&lt;p&gt;　　验证：查看nova数据库中是否有表生成？&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
MariaDB [placement]&amp;gt; use nova
Database changed
MariaDB [nova]&amp;gt; show tables;
+--------------------------------------------+
| Tables_in_nova                             |
+--------------------------------------------+
| agent_builds                               |
| aggregate_hosts                            |
| aggregate_metadata                         |
| aggregates                                 |
| allocations                                |
| block_device_mapping                       |
| bw_usage_cache                             |
| cells                                      |
| certificates                               |
| compute_nodes                              |
| console_auth_tokens                        |
| console_pools                              |
| consoles                                   |
| dns_domains                                |
| fixed_ips                                  |
| floating_ips                               |
| instance_actions                           |
| instance_actions_events                    |
| instance_extra                             |
| instance_faults                            |
| instance_group_member                      |
| instance_group_policy                      |
| instance_groups                            |
| instance_id_mappings                       |
| instance_info_caches                       |
| instance_metadata                          |
| instance_system_metadata                   |
| instance_type_extra_specs                  |
| instance_type_projects                     |
| instance_types                             |
| instances                                  |
| inventories                                |
| key_pairs                                  |
| migrate_version                            |
| migrations                                 |
| networks                                   |
| pci_devices                                |
| project_user_quotas                        |
| provider_fw_rules                          |
| quota_classes                              |
| quota_usages                               |
| quotas                                     |
| reservations                               |
| resource_provider_aggregates               |
| resource_providers                         |
| s3_images                                  |
| security_group_default_rules               |
| security_group_instance_association        |
| security_group_rules                       |
| security_groups                            |
| services                                   |
| shadow_agent_builds                        |
| shadow_aggregate_hosts                     |
| shadow_aggregate_metadata                  |
| shadow_aggregates                          |
| shadow_block_device_mapping                |
| shadow_bw_usage_cache                      |
| shadow_cells                               |
| shadow_certificates                        |
| shadow_compute_nodes                       |
| shadow_console_pools                       |
| shadow_consoles                            |
| shadow_dns_domains                         |
| shadow_fixed_ips                           |
| shadow_floating_ips                        |
| shadow_instance_actions                    |
| shadow_instance_actions_events             |
| shadow_instance_extra                      |
| shadow_instance_faults                     |
| shadow_instance_group_member               |
| shadow_instance_group_policy               |
| shadow_instance_groups                     |
| shadow_instance_id_mappings                |
| shadow_instance_info_caches                |
| shadow_instance_metadata                   |
| shadow_instance_system_metadata            |
| shadow_instance_type_extra_specs           |
| shadow_instance_type_projects              |
| shadow_instance_types                      |
| shadow_instances                           |
| shadow_key_pairs                           |
| shadow_migrate_version                     |
| shadow_migrations                          |
| shadow_networks                            |
| shadow_pci_devices                         |
| shadow_project_user_quotas                 |
| shadow_provider_fw_rules                   |
| shadow_quota_classes                       |
| shadow_quota_usages                        |
| shadow_quotas                              |
| shadow_reservations                        |
| shadow_s3_images                           |
| shadow_security_group_default_rules        |
| shadow_security_group_instance_association |
| shadow_security_group_rules                |
| shadow_security_groups                     |
| shadow_services                            |
| shadow_snapshot_id_mappings                |
| shadow_snapshots                           |
| shadow_task_log                            |
| shadow_virtual_interfaces                  |
| shadow_volume_id_mappings                  |
| shadow_volume_usage_cache                  |
| snapshot_id_mappings                       |
| snapshots                                  |
| tags                                       |
| task_log                                   |
| virtual_interfaces                         |
| volume_id_mappings                         |
| volume_usage_cache                         |
+--------------------------------------------+
110 rows in set (0.00 sec)

MariaDB [nova]&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到nova数据库中生成了很多张表，说明初始nova数据库没有问题；&lt;/p&gt;
&lt;p&gt;　　启动nova相关服务，并将其设置为开机启动&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# systemctl start openstack-nova-api.service \
&amp;gt;   openstack-nova-consoleauth openstack-nova-scheduler.service \
&amp;gt;   openstack-nova-conductor.service openstack-nova-novncproxy.service
[root@node01 ~]# systemctl enable openstack-nova-api.service \
&amp;gt;   openstack-nova-consoleauth openstack-nova-scheduler.service \
&amp;gt;   openstack-nova-conductor.service openstack-nova-novncproxy.service
Created symlink from /etc/systemd/system/multi-user.target.wants/openstack-nova-api.service to /usr/lib/systemd/system/openstack-nova-api.service.
Created symlink from /etc/systemd/system/multi-user.target.wants/openstack-nova-consoleauth.service to /usr/lib/systemd/system/openstack-nova-consoleauth.service.
Created symlink from /etc/systemd/system/multi-user.target.wants/openstack-nova-scheduler.service to /usr/lib/systemd/system/openstack-nova-scheduler.service.
Created symlink from /etc/systemd/system/multi-user.target.wants/openstack-nova-conductor.service to /usr/lib/systemd/system/openstack-nova-conductor.service.
Created symlink from /etc/systemd/system/multi-user.target.wants/openstack-nova-novncproxy.service to /usr/lib/systemd/system/openstack-nova-novncproxy.service.
[root@node01 ~]#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　验证对应服务的端口是否处于监听状态？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201029233337657-1412223682.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：6080是nova-novncproxy服务所监听的端口；8774和8775是nova-api所监听的端口；8778是placement服务所监听的端口；如果能够看到这四个端口启动起来了，说明在控制节点的nova服务配置就没有什么问题；&lt;/p&gt;
&lt;p&gt;　　到此nova服务在控制节点上就安装配置完毕&lt;/p&gt;
&lt;p&gt;　　3、在计算节点上安装配置nova服务&lt;/p&gt;
&lt;p&gt;　　安装nova-compute包&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node03 ~]# yum install openstack-nova-compute -y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　编辑/etc/nova/nova.conf配置文件，在【DEFAULT】配置段配置仅启用计算和元数据api和rabbitmq地址信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201030001345668-2121230213.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【api】配置段配置使用keystone服务进行验证&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201030001443778-1909331923.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【&lt;span class=&quot;k&quot;&gt;keystone_authtoken&lt;/span&gt;】配置段配置keystone服务相关信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201030001623313-585776273.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【&lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt;】配置段配置支持使用neutron以及相关驱动&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201030001735402-657243725.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【vnc】配置段配置启用vpn，以及vncserver的地址和novncproxy的接口地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201030002245462-1348042874.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：server_proxyclient_address这个可以写ip地址或者主机名，如果是主机名请将其解析到对应计算节点的ip上；&lt;/p&gt;
&lt;p&gt;　　在【glance】配置段配置连接glance服务端相关信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201030002513649-1539569044.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【&lt;span class=&quot;k&quot;&gt;oslo_concurrency&lt;/span&gt;】配置段配置锁文件存放路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201030002627025-1501016760.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在【placement】配置段配置placement服务相关信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201030002739716-1535213881.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　验证计算节点是否支持硬件虚拟化&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node03 ~]# egrep -c '(vmx|svm)' /proc/cpuinfo
0
[root@node03 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：如果以上命令运行返回0，表示该计算节点不支持硬件虚拟化，如果返回非0，表示该计算节点支持硬件虚拟化；如果计算节点支持硬件虚拟化，到此计算节点上的nova配置就完成了；如果不支持硬件虚拟化，我们需要在【libvirt】配置段明确指明使用的virt_type为qemu，而不是kvm;&lt;/p&gt;
&lt;p&gt;　　在【libvirt】配置段明确指明使用qemu&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201030014727471-2134376661.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　nova.conf最终配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node03 ~]# grep -i ^&quot;[a-z\[]&quot; /etc/nova/nova.conf               
[DEFAULT]
enabled_apis = osapi_compute,metadata
transport_url = rabbit://openstack:openstack123@node02
use_neutron = true
firewall_driver = nova.virt.firewall.NoopFirewallDriver
[api]
auth_strategy = keystone
[api_database]
[barbican]
[cache]
[cells]
[cinder]
[compute]
[conductor]
[console]
[consoleauth]
[cors]
[database]
[devices]
[ephemeral_storage_encryption]
[filter_scheduler]
[glance]
api_servers = http://controller:9292
[guestfs]
[healthcheck]
[hyperv]
[ironic]
[key_manager]
[keystone]
[keystone_authtoken]
auth_url = http://controller:5000/v3
memcached_servers = node02:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = nova
password = nova
[libvirt]
virt_type = qemu
[matchmaker_redis]
[metrics]
[mks]
[neutron]
[notifications]
[osapi_v21]
[oslo_concurrency]
lock_path=/var/lib/nova/tmp
[oslo_messaging_amqp]
[oslo_messaging_kafka]
[oslo_messaging_notifications]
[oslo_messaging_rabbit]
[oslo_messaging_zmq]
[oslo_middleware]
[oslo_policy]
[pci]
[placement]
region_name = RegionOne
project_domain_name = Default
project_name = service
auth_type = password
user_domain_name = Default
auth_url = http://controller:5000/v3
username = placement
password = placement
[placement_database]
[powervm]
[profiler]
[quota]
[rdp]
[remote_debug]
[scheduler]
[serial_console]
[service_user]
[spice]
[upgrade_levels]
[vault]
[vendordata_dynamic_auth]
[vmware]
[vnc]
enabled = true
server_listen = 0.0.0.0
server_proxyclient_address = node03
novncproxy_base_url = http://controller:6080/vnc_auto.html
[workarounds]
[wsgi]
[xenserver]
[xvp]
[zvm]
[root@node03 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　启动nova-compute和libvirtd服务，并将其设置为开机启动&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node03 ~]# systemctl start libvirtd.service openstack-nova-compute.service
[root@node03 ~]# systemctl enable libvirtd.service openstack-nova-compute.service     
Created symlink from /etc/systemd/system/multi-user.target.wants/openstack-nova-compute.service to /usr/lib/systemd/system/openstack-nova-compute.service.
[root@node03 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在控制节点上导出admin用户的环境变量，将计算节点信息添加到cell数据库中&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# source admin.sh 
[root@node01 ~]# openstack compute service list --service nova-compute
+----+--------------+-----------------+------+---------+-------+----------------------------+
| ID | Binary       | Host            | Zone | Status  | State | Updated At                 |
+----+--------------+-----------------+------+---------+-------+----------------------------+
|  9 | nova-compute | node03.test.org | nova | enabled | up    | 2020-10-29T16:46:34.000000 |
+----+--------------+-----------------+------+---------+-------+----------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　手动扫描发现计算节点&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# su -s /bin/sh -c &quot;nova-manage cell_v2 discover_hosts --verbose&quot; nova
Found 2 cell mappings.
Skipping cell0 since it does not contain hosts.
Getting computes from cell 'cell1': 2ad18452-0e55-4505-ba5e-76cbf071b0d6
Checking host mapping for compute host 'node03.test.org': 24beeca9-7c6e-4025-ada4-f6cfffb89b5d
Creating host mapping for compute host 'node03.test.org': 24beeca9-7c6e-4025-ada4-f6cfffb89b5d
Found 1 unmapped computes in cell: 2ad18452-0e55-4505-ba5e-76cbf071b0d6
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　设置自动发现计算节点，并自动完成计算节点注册的间隔时间&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202010/1503305-20201030005117559-966445001.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：这个配置要在控制节点的nova.conf中配置，上述配置表示每隔300秒自动扫描一下有没有新的计算节点加入；&lt;/p&gt;
&lt;p&gt;　　到此，计算节点上的nova服务就安装配置完成了&lt;/p&gt;
&lt;p&gt;　　验证：在控制节点导出admin用户的环境变量，列出服务组件，验证每个流程的成功启动和注册&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# source admin.sh 
[root@node01 ~]# openstack compute service list 
+----+------------------+-----------------+----------+---------+-------+----------------------------+
| ID | Binary           | Host            | Zone     | Status  | State | Updated At                 |
+----+------------------+-----------------+----------+---------+-------+----------------------------+
|  1 | nova-consoleauth | node01.test.org | internal | enabled | up    | 2020-10-29T16:57:33.000000 |
|  2 | nova-scheduler   | node01.test.org | internal | enabled | up    | 2020-10-29T16:57:33.000000 |
|  6 | nova-conductor   | node01.test.org | internal | enabled | up    | 2020-10-29T16:57:34.000000 |
|  9 | nova-compute     | node03.test.org | nova     | enabled | up    | 2020-10-29T16:57:34.000000 |
+----+------------------+-----------------+----------+---------+-------+----------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：能够看到controller节点上启用的三个服务组件和compute节点上启用的一个服务组件。能够看到上述信息，表示nova服务工作正常；&lt;/p&gt;
&lt;p&gt;　　验证：列出通过keystone验证的API端点&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# openstack catalog list
+-----------+-----------+-----------------------------------------+
| Name      | Type      | Endpoints                               |
+-----------+-----------+-----------------------------------------+
| nova      | compute   | RegionOne                               |
|           |           |   internal: http://controller:8774/v2.1 |
|           |           | RegionOne                               |
|           |           |   admin: http://controller:8774/v2.1    |
|           |           | RegionOne                               |
|           |           |   public: http://controller:8774/v2.1   |
|           |           |                                         |
| keystone  | identity  | RegionOne                               |
|           |           |   admin: http://controller:5000/v3      |
|           |           | RegionOne                               |
|           |           |   public: http://controller:5000/v3     |
|           |           | RegionOne                               |
|           |           |   internal: http://controller:5000/v3   |
|           |           |                                         |
| glance    | image     | RegionOne                               |
|           |           |   admin: http://controller:9292         |
|           |           | RegionOne                               |
|           |           |   internal: http://controller:9292      |
|           |           | RegionOne                               |
|           |           |   public: http://controller:9292        |
|           |           |                                         |
| placement | placement | RegionOne                               |
|           |           |   internal: http://controller:8778      |
|           |           | RegionOne                               |
|           |           |   public: http://controller:8778        |
|           |           | RegionOne                               |
|           |           |   admin: http://controller:8778         |
|           |           |                                         |
+-----------+-----------+-----------------------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　验证：检查cell和placement是否工作正常&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@node01 ~]# nova-status upgrade check
+--------------------------------+
| Upgrade Check Results          |
+--------------------------------+
| Check: Cells v2                |
| Result: Success                |
| Details: None                  |
+--------------------------------+
| Check: Placement API           |
| Result: Success                |
| Details: None                  |
+--------------------------------+
| Check: Resource Providers      |
| Result: Success                |
| Details: None                  |
+--------------------------------+
| Check: Ironic Flavor Migration |
| Result: Success                |
| Details: None                  |
+--------------------------------+
| Check: API Service Version     |
| Result: Success                |
| Details: None                  |
+--------------------------------+
| Check: Request Spec Migration  |
| Result: Success                |
| Details: None                  |
+--------------------------------+
| Check: Console Auths           |
| Result: Success                |
| Details: None                  |
+--------------------------------+
[root@node01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：这个检查必须要全部都是成功的才没有问题；到此nova服务的安装配置和测试就完了；后续我们还差一个neutron网络服务，就可以在openstack上启动虚拟机了；&lt;/p&gt;
</description>
<pubDate>Thu, 29 Oct 2020 17:54:00 +0000</pubDate>
<dc:creator>Linux-1874</dc:creator>
<og:description>一、nova简介 nova是openstack中的计算服务，其主要作用是帮助我们在计算节点上管理虚拟机的核心服务；这里的计算节点就是指用于提供运行虚拟机实例的主机，通常像这种计算节点有很多台，那么虚拟</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qiuhom-1874/p/13899170.html</dc:identifier>
</item>
<item>
<title>协同过滤在推荐系统中的应用 - 哥不是小萝莉</title>
<link>http://www.cnblogs.com/smartloli/p/13900072.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smartloli/p/13900072.html</guid>
<description>&lt;p&gt;前面的博客介绍过如何构建一个推荐系统，以及简要的介绍了协同过滤的实现。本篇博客，笔者将介绍协同过滤在推荐系统的应用。推荐系统是大数据和机器学习中最常见、最容易理解的应用之一。其实，在日常的生活当中，我们会频繁的遇到推荐的场景 ，比如你在电商网站购买商品、使用视频App观看视频、在手机上下载各种游戏等，这些都是使用了推荐技术来个性化你想要的内容和物品。&lt;/p&gt;

&lt;p&gt;本篇博客将通过以下方式来介绍，通过建立协同过滤模型，利用订单数据来想用户推荐预期的物品。步骤如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;转换和规范化数据&lt;/li&gt;
&lt;li&gt;训练模型&lt;/li&gt;
&lt;li&gt;评估模型性能&lt;/li&gt;
&lt;li&gt;选择最佳模型&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;2.1 技术选型&lt;/h2&gt;
&lt;p&gt;完成本篇博客所需要的技术使用Python和机器学习Turicreate来实现。Python所需要的依赖库如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;pandas和numpy：用于操作数据&lt;/li&gt;
&lt;li&gt;turicreate：用于进行模型选择与评估&lt;/li&gt;
&lt;li&gt;sklearn：用于对数据进行封装，包括回归、降维、分类、聚类等。&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;2.2 加载数据&lt;/h2&gt;
&lt;p&gt;本次演示的数据源，包含如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;customer_id.csv：列出1000个客户ID作为输出推荐；&lt;/li&gt;
&lt;li&gt;customer_data.csv：物品数据源集。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;加载Python依赖库，实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import pandas as pd
import numpy as np
import &lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;
import turicreate as tc
from sklearn.model_selection import train_test_split&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看数据集，实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
customers = pd.read_csv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customer_id.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) 
transactions &lt;/span&gt;= pd.read_csv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customer_data.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
print(customers.&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;())
print(transactions.&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;预览结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201029223527209-645896732.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.3 数据准备&lt;/h2&gt;
&lt;p&gt;将上述csv中的数据集中，将products列中的每个物品列表分解成行，并计算用户购买的产品数量。&lt;/p&gt;
&lt;h3&gt;2.3.1 使用用户、物品和目标字段创建数据&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;此表将作为稍后建模的输入&lt;/li&gt;
&lt;li&gt;在本次案例中，使用customerId、productId和purchase_count字段&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
transactions[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = transactions[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].apply(lambda x: [&lt;span&gt;int&lt;/span&gt;(i) &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; x.&lt;span&gt;split&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)])
data &lt;/span&gt;= pd.melt(transactions.set_index(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].apply(pd.Series).reset_index(), 
             id_vars&lt;/span&gt;=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
             value_name&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) \
    .dropna().drop([&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;variable&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], axis=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) \
    .groupby([&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]) \
    .agg({&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}) \
    .rename(columns&lt;/span&gt;={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}) \
    .reset_index() \
    .rename(columns&lt;/span&gt;={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].astype(np.int64)
print(data.shape)
print(data.&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;预览截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201029224134385-627129344.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.3.1 创建虚拟对象&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;标识用户是否购买该商品的虚拟人；&lt;/li&gt;
&lt;li&gt;如果一个人购买了一个物品，那么标记purchase_dummy字段为值为1；&lt;/li&gt;
&lt;li&gt;可能会有疑问，为什么需要创建一个虚拟人而不是将其规范化，对每个用户的购买数量进行规范化是不可行的，因为用户的购买频率在现实情况中可能不一样；但是，我们可以根据所有用户的购买频率对商品进行规范化。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def create_data_dummy(data):
    data_dummy &lt;/span&gt;=&lt;span&gt; data.copy()
    data_dummy[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_dummy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    return data_dummy
data_dummy &lt;/span&gt;=&lt;span&gt; create_data_dummy(data)
print(data_dummy.&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;预览结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201029224718100-301109753.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 2.3.2 规范化物品&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;我们通过首先创建一个用户矩阵来规范每个用户的购买频率。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
df_matrix = pd.pivot_table(data, values=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, index=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, columns=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
print(df_matrix.&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;预览结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201029225050677-55488317.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 矩阵规范化实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
df_matrix_norm = (df_matrix-df_matrix.min())/(df_matrix.max()-&lt;span&gt;df_matrix.min())
print(df_matrix_norm.&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;预览结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201029225219230-1659744499.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建一个表作为模型的输入，实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
d =&lt;span&gt; df_matrix_norm.reset_index() 
d.index.names &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scaled_purchase_freq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
data_norm &lt;/span&gt;= pd.melt(d, id_vars=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], value_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scaled_purchase_freq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).dropna()
print(data_norm.shape)
print(data_norm.&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;预览结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201029225333394-2045457315.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上述步骤可以组合成下面定义的函数，实现代码如下 ：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; normalize_data(data):
    df_matrix &lt;/span&gt;= pd.pivot_table(data, values=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, index=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, columns=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    df_matrix_norm &lt;/span&gt;= (df_matrix-df_matrix.min())/(df_matrix.max()-&lt;span&gt;df_matrix.min())
    d &lt;/span&gt;=&lt;span&gt; df_matrix_norm.reset_index()
    d.index.names &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scaled_purchase_freq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; pd.melt(d, id_vars=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], value_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scaled_purchase_freq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).dropna()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面，我们规范化了用户的购买历史记录，从0到1（1是一个物品的最多购买次数，0是该物品的0个购买计数）。&lt;/p&gt;
&lt;h2&gt;2.4 拆分用于训练用的数据集&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;将数据分割成训练集和测试集是评估预测建模的一个重要部分，在这种情况下使一个协作过滤模型。通过，我们使用较大部分的数据用于训练，而较小的部分用于测试；&lt;/li&gt;
&lt;li&gt;我们将训练集和测试集占比拆分为80% : 20%；&lt;/li&gt;
&lt;li&gt;训练部分将用于开发预测模型，而另外一部分用于评估模型的性能。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;拆分函数实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; split_data(data):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    Splits dataset into training and test set.
    
    Args:
        data (pandas.DataFrame)
        
    Returns
        train_data (tc.SFrame)
        test_data (tc.SFrame)
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    train, test &lt;/span&gt;= train_test_split(data, test_size = .2&lt;span&gt;)
    train_data &lt;/span&gt;=&lt;span&gt; tc.SFrame(train)
    test_data &lt;/span&gt;=&lt;span&gt; tc.SFrame(test)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; train_data, test_data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们有了是三个数据集，分别是购买计数、购买虚拟数据和按比例的购买计数，这里我们将每个数据集分开进行建模，实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
train_data, test_data =&lt;span&gt; split_data(data)
train_data_dummy, test_data_dummy &lt;/span&gt;=&lt;span&gt; split_data(data_dummy)
train_data_norm, test_data_norm &lt;/span&gt;=&lt;span&gt; split_data(data_norm)&lt;br/&gt;&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(train_data)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里打印训练结果数据，预览结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201029232403121-1986199375.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.5 使用Turicreate库来构建模型&lt;/h2&gt;
&lt;p&gt;在运行更加复杂的方法（比如协同过滤）之前，我们应该运行一个基线模型来比较和评估模型。由于基线通常使用一种非常简单的方法，因此如果在这种方法之外使用的技术显示出相对较好的准确性和复杂性，则应该选择这些技术。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Baseline Model是机器学习领域的一个术语，简而言之，就是使用最普遍的情况来做结果预测。比如，猜硬币游戏，最简单的策略就是一直选择正面或者反面，这样从预测的模型结果来看，你是有50%的准确率的。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一种更复杂但是更常见的预测购买商品的方法就是协同过滤。下面，我们首先定义要在模型中使用的变量，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# constant variables to define field names include:
user_id &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
item_id &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
users_to_recommend &lt;/span&gt;=&lt;span&gt; list(customers[user_id])
n_rec &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt; # number of items to recommend
n_display &lt;/span&gt;= &lt;span&gt;30&lt;/span&gt; # to display the first few rows &lt;span&gt;in&lt;/span&gt; an output dataset
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Turicreate使我们非常容易去调用建模技术，因此，定义所有模型的函数如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; model(train_data, name, user_id, item_id, target, users_to_recommend, n_rec, n_display):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; name == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;popularity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        model &lt;/span&gt;=&lt;span&gt; tc.popularity_recommender.create(train_data, 
                                                    user_id&lt;/span&gt;=&lt;span&gt;user_id, 
                                                    item_id&lt;/span&gt;=&lt;span&gt;item_id, 
                                                    target&lt;/span&gt;=&lt;span&gt;target)
    &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; name == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cosine&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        model &lt;/span&gt;=&lt;span&gt; tc.item_similarity_recommender.create(train_data, 
                                                    user_id&lt;/span&gt;=&lt;span&gt;user_id, 
                                                    item_id&lt;/span&gt;=&lt;span&gt;item_id, 
                                                    target&lt;/span&gt;=&lt;span&gt;target, 
                                                    similarity_type&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cosine&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; name == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pearson&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        model &lt;/span&gt;=&lt;span&gt; tc.item_similarity_recommender.create(train_data, 
                                                    user_id&lt;/span&gt;=&lt;span&gt;user_id, 
                                                    item_id&lt;/span&gt;=&lt;span&gt;item_id, 
                                                    target&lt;/span&gt;=&lt;span&gt;target, 
                                                    similarity_type&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pearson&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    recom &lt;/span&gt;= model.recommend(users=users_to_recommend, k=&lt;span&gt;n_rec)
    recom.print_rows(n_display)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; model
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.5.1 使用Popularity Model作为Baseline&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Popularity Model采用最受欢迎的物品进行推荐，这些物品在用户中销量是最高的；&lt;/li&gt;
&lt;li&gt;训练数据用于模型选择。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;购买计数实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;popularity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
popularity &lt;/span&gt;=&lt;span&gt; model(train_data, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(popularity)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201029234009511-1371962555.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;购买虚拟人代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;popularity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_dummy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
pop_dummy &lt;/span&gt;=&lt;span&gt; model(train_data_dummy, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(pop_dummy)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201029234134680-38531954.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 按比例购买计数实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;popularity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;scaled_purchase_freq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
pop_norm &lt;/span&gt;=&lt;span&gt; model(train_data_norm, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(pop_norm)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201029234312698-848510701.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.6 协同过滤模型&lt;/h2&gt;
&lt;p&gt;根据用户如何在协作购买物品的基础上推荐相似的物品。例如，如果用户1和用户2购买了类似的物品，比如用户1购买的X、Y、Z，用户2购买了X、Y、Y，那么我们可以向用户2推荐物品Z。&lt;/p&gt;
&lt;h3&gt;2.6.1 原理&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;创建一个用户-物品矩阵，其中索引值表示唯一的用户ID，列值表示唯一的物品ID；&lt;/li&gt;
&lt;li&gt;创建相似矩阵，这个作用是用于计算一个物品和另外一个物品的相似度，这里我们使用余弦相似度或者皮尔森相似度。&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;要计算物品X和物品Y之间的相似性，需要查看对这两个物品进行评级的所有用户，例如，用户1和用户2都对物品X和Y进行了评级&lt;/li&gt;
&lt;li&gt;然后，我们在（用户1，用户2）的用户空间中创建两个物品向量，V1表示物品X，V2表示物品Y，然后找出这些向量之间的余弦值。余弦值为1的零角度或者重叠向量表示完全相似（或者每个用户，所有物品都有相同的评级），90度的角度意味着余弦为0或者没有相似性。&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;２.６.2 余弦相似度&lt;/h3&gt;
&lt;p&gt;公式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201029235816724-166956782.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 购买计数代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cosine&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
cos &lt;/span&gt;=&lt;span&gt; model(train_data, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(cos)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201029235952949-330722091.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;
&lt;p&gt; 购买虚拟人代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cosine&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_dummy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
cos_dummy &lt;/span&gt;=&lt;span&gt; model(train_data_dummy, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(cos_dummy)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201030001223324-1157988199.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;
&lt;p&gt; 按比例购买计数，实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cosine&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; 
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;scaled_purchase_freq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; 
cos_norm &lt;/span&gt;=&lt;span&gt; model(train_data_norm, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(cos_norm)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201030000222932-1206793192.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 2.6.3 皮尔森相似度&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201030000825389-1446022225.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 购买计数实现代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pearson&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
pear &lt;/span&gt;=&lt;span&gt; model(train_data, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(pear)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201030000941788-752410103.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 购买虚拟人实现代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pearson&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_dummy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
pear_dummy &lt;/span&gt;=&lt;span&gt; model(train_data_dummy, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(pear_dummy)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201030001432955-1867121631.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 按比例购买计数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pearson&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;scaled_purchase_freq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
pear_norm &lt;/span&gt;=&lt;span&gt; model(train_data_norm, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(pear_norm)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201030001603658-519664148.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt; 2.7 模型训练&lt;/h2&gt;
&lt;p&gt;在评价推荐引擎时，我们可以使用RMSE和精准召回的概念。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;RMSE（Root Mean Squared Errors）&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;测量预测值的误差；&lt;/li&gt;
&lt;li&gt;RMSE值越小，结果越好。&lt;/li&gt;
&lt;/ol&gt;&lt;ol&gt;&lt;li&gt;用户购买的物品中实际推荐的比例是多少；&lt;/li&gt;
&lt;li&gt;如果一个用户购买了5种物品，而推荐列表决定展示其中的3种，那么召回率为60%。&lt;/li&gt;
&lt;/ol&gt;&lt;ol&gt;&lt;li&gt;在所有推荐的物品中，有多少用户真正喜欢；&lt;/li&gt;
&lt;li&gt;如果向用户推荐了5种物品，而用户购买了其中的4种，那么准确率为80%。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;为何召回和准确度如此重要呢？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;考虑一个案例，我们推荐所有的物品。这样我们的用户一定会涵盖他们喜欢和购买的物品。这种情况下，我们的召回率为100%，这样是否意味着我们的模型是最好的呢？&lt;/li&gt;
&lt;li&gt;我们必须考虑准确率，如果我们推荐300件物品，但用户喜欢，而且购买了3件，那么准确率是1%，这个非常低的准确率表明，尽管他们的召回率很高，但是这个模型并不是很好。&lt;/li&gt;
&lt;li&gt;因此，我们最终的目标是优化召回率和准确率，让他们尽可能的接近1。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面，我们为模型求值创建初识可调用变量，实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
models_w_counts =&lt;span&gt; [popularity, cos, pear]
models_w_dummy &lt;/span&gt;=&lt;span&gt; [pop_dummy, cos_dummy, pear_dummy]
models_w_norm &lt;/span&gt;=&lt;span&gt; [pop_norm, cos_norm, pear_norm]
names_w_counts &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Popularity Model on Purchase Counts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cosine Similarity on Purchase Counts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Pearson Similarity on Purchase Counts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
names_w_dummy &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Popularity Model on Purchase Dummy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cosine Similarity on Purchase Dummy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Pearson Similarity on Purchase Dummy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
names_w_norm &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Popularity Model on Scaled Purchase Counts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cosine Similarity on Scaled Purchase Counts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Pearson Similarity on Scaled Purchase Counts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，让我们比较一下我们基于RMSE和精准召回特性构建的所有模型，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
eval_counts = tc.recommender.util.compare_models(test_data, models_w_counts, model_names=&lt;span&gt;names_w_counts)
eval_dummy &lt;/span&gt;= tc.recommender.util.compare_models(test_data_dummy, models_w_dummy, model_names=&lt;span&gt;names_w_dummy)
eval_norm &lt;/span&gt;= tc.recommender.util.compare_models(test_data_norm, models_w_norm, model_names=names_w_norm)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;评估结果输出如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/666745/202010/666745-20201030004249954-1365099821.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;协同过滤：我们可以看到，协同过滤算法比Popularity Model更加适合购买数量。实际上，Popularity Model并没有提供任何个性化设置，因为它只向每个用户提供相同的推荐项目列表；&lt;/li&gt;
&lt;li&gt;精准召回：综上所述，我们可以看到购买数量 &amp;gt; 购买虚拟 &amp;gt; 标准化购买计数的精准率和召回率。然而，由于标准化购买数据的推荐分数为0且不变，所以我们选择了虚拟的，实际上，虚拟模型和标准模型化数据模型的RMSE差别不大；&lt;/li&gt;
&lt;li&gt;RMSE：由于使用皮尔森相似度的RMSE比余弦相似度结果高，所以我们选择较小的均方误差模型，在这种情况下，就是选择余弦相似度模型。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;完成实例代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;95&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_573f66e8-82af-4c8d-b014-c2738563a2b4&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_573f66e8-82af-4c8d-b014-c2738563a2b4&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_573f66e8-82af-4c8d-b014-c2738563a2b4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;185&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pandas as pd
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; turicreate as tc
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.model_selection &lt;span&gt;import&lt;/span&gt;&lt;span&gt; train_test_split

customers &lt;/span&gt;= pd.read_csv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customer_id.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) 
transactions &lt;/span&gt;= pd.read_csv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customer_data.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(customers.head())&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; print(transactions.head())&lt;/span&gt;
transactions[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = transactions[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].apply(&lt;span&gt;lambda&lt;/span&gt; x: [int(i) &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; x.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)])
data &lt;/span&gt;= pd.melt(transactions.set_index(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].apply(pd.Series).reset_index(), 
             id_vars&lt;/span&gt;=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
             value_name&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) \
    .dropna().drop([&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;variable&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], axis=1&lt;span&gt;) \
    .groupby([&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]) \
    .agg({&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}) \
    .rename(columns&lt;/span&gt;={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}) \
    .reset_index() \
    .rename(columns&lt;/span&gt;={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;products&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].astype(np.int64)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(data.shape)&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; print(data.head())&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; create_data_dummy(data):
    data_dummy &lt;/span&gt;=&lt;span&gt; data.copy()
    data_dummy[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_dummy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = 1
    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data_dummy
data_dummy &lt;/span&gt;=&lt;span&gt; create_data_dummy(data)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(data_dummy.head())&lt;/span&gt;
&lt;span&gt;
df_matrix &lt;/span&gt;= pd.pivot_table(data, values=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, index=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, columns=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(df_matrix.head())&lt;/span&gt;
&lt;span&gt;
df_matrix_norm &lt;/span&gt;= (df_matrix-df_matrix.min())/(df_matrix.max()-&lt;span&gt;df_matrix.min())
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(df_matrix_norm.head())&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; create a table for input to the modeling  &lt;/span&gt;
d =&lt;span&gt; df_matrix_norm.reset_index() 
d.index.names &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scaled_purchase_freq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
data_norm &lt;/span&gt;= pd.melt(d, id_vars=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], value_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scaled_purchase_freq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).dropna()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(data_norm.shape)&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; print(data_norm.head())&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; normalize_data(data):
    df_matrix &lt;/span&gt;= pd.pivot_table(data, values=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, index=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, columns=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    df_matrix_norm &lt;/span&gt;= (df_matrix-df_matrix.min())/(df_matrix.max()-&lt;span&gt;df_matrix.min())
    d &lt;/span&gt;=&lt;span&gt; df_matrix_norm.reset_index()
    d.index.names &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scaled_purchase_freq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; pd.melt(d, id_vars=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], value_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scaled_purchase_freq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).dropna()

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; split_data(data):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    Splits dataset into training and test set.
    
    Args:
        data (pandas.DataFrame)
        
    Returns
        train_data (tc.SFrame)
        test_data (tc.SFrame)
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    train, test &lt;/span&gt;= train_test_split(data, test_size = .2&lt;span&gt;)
    train_data &lt;/span&gt;=&lt;span&gt; tc.SFrame(train)
    test_data &lt;/span&gt;=&lt;span&gt; tc.SFrame(test)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; train_data, test_data

train_data, test_data &lt;/span&gt;=&lt;span&gt; split_data(data)
train_data_dummy, test_data_dummy &lt;/span&gt;=&lt;span&gt; split_data(data_dummy)
train_data_norm, test_data_norm &lt;/span&gt;=&lt;span&gt; split_data(data_norm)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(train_data)&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; constant variables to define field names include:&lt;/span&gt;
user_id = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;customerId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
item_id &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
users_to_recommend &lt;/span&gt;=&lt;span&gt; list(customers[user_id])
n_rec &lt;/span&gt;= 10 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; number of items to recommend&lt;/span&gt;
n_display = 30 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; to display the first few rows in an output dataset&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; model(train_data, name, user_id, item_id, target, users_to_recommend, n_rec, n_display):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; name == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;popularity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        model &lt;/span&gt;=&lt;span&gt; tc.popularity_recommender.create(train_data, 
                                                    user_id&lt;/span&gt;=&lt;span&gt;user_id, 
                                                    item_id&lt;/span&gt;=&lt;span&gt;item_id, 
                                                    target&lt;/span&gt;=&lt;span&gt;target)
    &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; name == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cosine&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        model &lt;/span&gt;=&lt;span&gt; tc.item_similarity_recommender.create(train_data, 
                                                    user_id&lt;/span&gt;=&lt;span&gt;user_id, 
                                                    item_id&lt;/span&gt;=&lt;span&gt;item_id, 
                                                    target&lt;/span&gt;=&lt;span&gt;target, 
                                                    similarity_type&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cosine&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; name == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pearson&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        model &lt;/span&gt;=&lt;span&gt; tc.item_similarity_recommender.create(train_data, 
                                                    user_id&lt;/span&gt;=&lt;span&gt;user_id, 
                                                    item_id&lt;/span&gt;=&lt;span&gt;item_id, 
                                                    target&lt;/span&gt;=&lt;span&gt;target, 
                                                    similarity_type&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pearson&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    recom &lt;/span&gt;= model.recommend(users=users_to_recommend, k=&lt;span&gt;n_rec)
    recom.print_rows(n_display)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; model

name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;popularity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
popularity &lt;/span&gt;=&lt;span&gt; model(train_data, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(popularity)&lt;/span&gt;
&lt;span&gt;
name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;popularity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_dummy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
pop_dummy &lt;/span&gt;=&lt;span&gt; model(train_data_dummy, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(pop_dummy)&lt;/span&gt;
&lt;span&gt;
name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;popularity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;scaled_purchase_freq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
pop_norm &lt;/span&gt;=&lt;span&gt; model(train_data_norm, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(pop_norm)&lt;/span&gt;
&lt;span&gt;
name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cosine&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
cos &lt;/span&gt;=&lt;span&gt; model(train_data, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(cos)&lt;/span&gt;
&lt;span&gt;
name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cosine&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_dummy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
cos_dummy &lt;/span&gt;=&lt;span&gt; model(train_data_dummy, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(cos_dummy)&lt;/span&gt;
&lt;span&gt;
name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cosine&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; 
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;scaled_purchase_freq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; 
cos_norm &lt;/span&gt;=&lt;span&gt; model(train_data_norm, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(cos_norm)&lt;/span&gt;
&lt;span&gt;
name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pearson&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
pear &lt;/span&gt;=&lt;span&gt; model(train_data, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(pear)&lt;/span&gt;
&lt;span&gt;
name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pearson&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase_dummy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
pear_dummy &lt;/span&gt;=&lt;span&gt; model(train_data_dummy, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(pear_dummy)&lt;/span&gt;
&lt;span&gt;
name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pearson&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
target &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;scaled_purchase_freq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
pear_norm &lt;/span&gt;=&lt;span&gt; model(train_data_norm, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(pear_norm)&lt;/span&gt;
&lt;span&gt;
models_w_counts &lt;/span&gt;=&lt;span&gt; [popularity, cos, pear]
models_w_dummy &lt;/span&gt;=&lt;span&gt; [pop_dummy, cos_dummy, pear_dummy]
models_w_norm &lt;/span&gt;=&lt;span&gt; [pop_norm, cos_norm, pear_norm]
names_w_counts &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Popularity Model on Purchase Counts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cosine Similarity on Purchase Counts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Pearson Similarity on Purchase Counts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
names_w_dummy &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Popularity Model on Purchase Dummy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cosine Similarity on Purchase Dummy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Pearson Similarity on Purchase Dummy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
names_w_norm &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Popularity Model on Scaled Purchase Counts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cosine Similarity on Scaled Purchase Counts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Pearson Similarity on Scaled Purchase Counts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

eval_counts &lt;/span&gt;= tc.recommender.util.compare_models(test_data, models_w_counts, model_names=&lt;span&gt;names_w_counts)
eval_dummy &lt;/span&gt;= tc.recommender.util.compare_models(test_data_dummy, models_w_dummy, model_names=&lt;span&gt;names_w_dummy)
eval_norm &lt;/span&gt;= tc.recommender.util.compare_models(test_data_norm, models_w_norm, model_names=&lt;span&gt;names_w_norm)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Final Output Result &lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; final_model = tc.item_similarity_recommender.create(tc.SFrame(data_dummy), user_id=user_id, item_id=item_id, target='purchase_dummy', similarity_type='cosine')&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; recom = final_model.recommend(users=users_to_recommend, k=n_rec)&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; recom.print_rows(n_display)&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; df_rec = recom.to_dataframe()&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; print(df_rec.shape)&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; print(df_rec.head())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;这篇博客就和大家分享到这里，如果大家在研究学习的过程当中有什么问题，可以加群进行讨论或发送邮件给我，我会尽我所能为您解答，与君共勉！&lt;/p&gt;
&lt;p&gt;另外，博主出书了《&lt;a href=&quot;https://item.jd.com/12455361.html&quot; target=&quot;_blank&quot;&gt;Kafka并不难学&lt;/a&gt;》和《&lt;a href=&quot;https://item.jd.com/12371763.html&quot; target=&quot;_blank&quot;&gt;Hadoop大数据挖掘从入门到进阶实战&lt;/a&gt;》，喜欢的朋友或同学， 可以在公告栏那里点击购买链接购买博主的书进行学习，在此感谢大家的支持。关注下面公众号，根据提示，可免费获取书籍的教学视频。&lt;/p&gt;
</description>
<pubDate>Thu, 29 Oct 2020 16:58:00 +0000</pubDate>
<dc:creator>哥不是小萝莉</dc:creator>
<og:description>1.概述 前面的博客介绍过如何构建一个推荐系统，以及简要的介绍了协同过滤的实现。本篇博客，笔者将介绍协同过滤在推荐系统的应用。推荐系统是大数据和机器学习中最常见、最容易理解的应用之一。其实，在日常的生</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/smartloli/p/13900072.html</dc:identifier>
</item>
<item>
<title>直接理解转置卷积（Transposed convolution）的各种情况 - 颀周</title>
<link>http://www.cnblogs.com/qizhou/p/13895967.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qizhou/p/13895967.html</guid>
<description>&lt;p&gt;　　使用GAN生成图像必不可少的层就是上采样，其中最常用的就是转置卷积（Transposed Convolution）。如果把卷积操作转换为矩阵乘法的形式，转置卷积实际上就是将其中的矩阵进行转置，从而产生逆向的效果。所谓效果仅仅在于特征图的形状，也就是说，如果卷积将特征图从形状a映射到形状b，其对应的转置卷积就是从形状b映射回形状a，而其中的值并不一一对应，是不可逆的。另外，不要把逆卷积（Deconvolution）和转置卷积混淆，逆卷积的目标在于构建输入特征图的稀疏编码（Sparse coding），并不是以上采样为目的的。但是转置卷积的确是来源于逆卷积，关于逆卷积与转置卷积的论文请看[1][2]。&lt;/p&gt;
&lt;p&gt;　　下面直接对转置卷积的各种情况进行举例，从而全面理解转置卷积在Pytorch中的运算机制。使用Pytorch而不是TF的原因在于，TF中的padding方式只有两种，即valid与same，并不能很好地帮我们理解原理。而且TF和Pytorch插入0值的方式有些差异，虽然在模型层面，你只需关注模型输入输出的形状，隐层的微小差异可以通过训练来抵消，但是为了更好得把握模型结构，最好还是使用Pytorch。&lt;/p&gt;
&lt;p&gt;　　对于Pytorch的nn.ConvTranspose2d()的参数，下面的讨论不考虑膨胀度dilation，默认为1；output_padding就是在最终的输出特征外面再加上几层0，所以也不讨论，默认为0；为了便于理解，bias也忽略不计，设为False；不失一般性，输入输出的channels都设为1。除了对将卷积转换成矩阵乘法的理解外，理解难点主要在于stride和padding的变化对转置卷积产生的影响，因此下面我们主要变化kernel_size、stride、padding三个参数来分析各种情况。&lt;/p&gt;
&lt;p&gt;　　举例之前要注意，转换为矩阵的形式是由卷积的结果得到的，矩阵形式本身是不能直接获得的。要注意这个因果关系，转换为矩阵形式是为了便于理解，以及推导转置卷积。&lt;/p&gt;

&lt;h2&gt;kernel_size = 2, stride = 1, padding = 0&lt;/h2&gt;
&lt;p&gt;　　首先是kernel_size = 2，stride=1，padding=0的情况，如下图： &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1908255/202010/1908255-20201029213626867-500143807.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　图中上半部分表示将卷积转换为矩阵乘法的形式。在卷积中，我们是输入一个3x3的特征图，输出2x2的特征图，矩阵乘法形式如上图上中部分所示；转置卷积就是将这个矩阵乘法反过来，如上图下中部分所示。然后将下中部分的矩阵乘法转换为卷积的形式，即可得到转置卷积的示意图如上图右下部分所示。&lt;/p&gt;
&lt;h2&gt;kernel_size = 2, stride = 1, padding = 1&lt;/h2&gt;
&lt;p&gt;　　然后是kernel_size = 2，stride=1，padding=1的情况（因为第一张图中已有，虚线与注释都不加了）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1908255/202010/1908255-20201029222848628-1109349561.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　与上一张图的主要不同之处在于转置卷积将卷积结果的最外层去掉，这是因为padding=1，也正符合与卷积相反的操作。也就是说，padding越大，转置卷积就会去掉越多的外层，输出就会越小。&lt;/p&gt;
&lt;h2&gt;kernel_size = 3, stride = 1, padding = 1&lt;/h2&gt;
&lt;p&gt;　　为了分析转置卷积的卷积核与卷积的卷积核的区别，这次把kernel_size变为3，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1908255/202010/1908255-20201029223524056-20868724.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看出，转置卷积的先将输入padding 2层，用于抵消卷积核带来的规模上的减小，从而将输出扩增到相对应卷积操作的输入大小。然后，我们可以发现，卷积核是输入的卷积核的逆序。也就是说，我们输入函数中的是1~9的方阵，而它实际作为卷积核的是9~1的方阵。最后，因为padding=1，这对于卷积操作是向外加一层0，而对于逆卷积，就是去掉最外面的一层，所以得到最终3x3的结果。&lt;/p&gt;
&lt;h2&gt;kernel_size = 2, stride = 2, padding = 1&lt;/h2&gt;
&lt;p&gt;　　最后，分析stride对转置卷积的影响，将stride设为2，如下图：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1908255/202010/1908255-20201029224539185-1232935316.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　分析在图中都已写明。你可能会奇怪，为什么这里转置卷积最终输出与卷积的输入形状不同，这是因为卷积的padding并没有被全都用上（只计算了一边），而转置卷积最后却把两边的padding都去掉了，所以造成了卷积与转置卷积不对应的情况。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;　　经过对以上各种实例的分析，对于某个$kernel \,size=k,stride=s,padding=p$的转置卷积，如果输入宽高都为$n$，则输出宽高为&lt;/p&gt;
&lt;p&gt; $\begin{aligned} m&amp;amp;=ns-(s-1)+2(k-1)-(k-1)-2p\\ &amp;amp;=(n-1)s-2p+k   \\ \end{aligned}$&lt;/p&gt;
&lt;p&gt;　　实际上，卷积与转置卷积除了输入输出的形状上相反以外，没有别的联系，所以我们只要会计算转置卷积输出的形状即可。&lt;/p&gt;
&lt;p&gt;　　以上图都是用excel作的，已上传至博客园文件，需要的可以下载（&lt;a href=&quot;https://files.cnblogs.com/files/qizhou/%E5%8D%B7%E7%A7%AF%E4%B8%8E%E8%BD%AC%E7%BD%AE%E5%8D%B7%E7%A7%AF%E5%AE%9E%E4%BE%8B.zip&quot; target=&quot;_blank&quot;&gt;点击链接&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;　　[1] Zeiler M D, Krishnan D, Taylor G W, et al. Deconvolutional networks[C]. Computer Vision and Pattern Recognition, 2010.&lt;/p&gt;
&lt;p&gt;　　[2] Zeiler M D, Fergus R. Visualizing and Understanding Convolutional Networks[C]. European Conference on Computer Vision, 2013.&lt;/p&gt;
</description>
<pubDate>Thu, 29 Oct 2020 15:19:00 +0000</pubDate>
<dc:creator>颀周</dc:creator>
<og:description>使用GAN生成图像必不可少的层就是上采样，其中最常用的就是转置卷积（Transposed Convolution）。如果把卷积操作转换为矩阵乘法的形式，转置卷积实际上就是将其中的矩阵进行转置，从而产生</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qizhou/p/13895967.html</dc:identifier>
</item>
<item>
<title>利用transformer进行中文文本分类（数据集是复旦中文语料） - 西西嘛呦</title>
<link>http://www.cnblogs.com/xiximayou/p/13871438.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiximayou/p/13871438.html</guid>
<description>&lt;p&gt;&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/xiximayou/p/13782440.html&quot; target=&quot;_blank&quot;&gt;利用TfidfVectorizer进行中文文本分类（数据集是复旦中文语料）&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/xiximayou/p/13828988.html&quot; target=&quot;_blank&quot;&gt;利用RNN进行中文文本分类（数据集是复旦中文语料） &lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/xiximayou/p/13842312.html&quot; target=&quot;_blank&quot;&gt;利用CNN进行中文文本分类（数据集是复旦中文语料） &lt;/a&gt; &lt;/p&gt;
&lt;p&gt;和之前介绍的不同，重构了些代码，为了使整个流程更加清楚，我们要重新对数据进行预处理。&lt;/p&gt;
&lt;p&gt;阅读本文，你可以了解中文文本分类从数据预处理、模型定义、训练和测试的整个流程。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、熟悉数据&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;数据的格式是这样子的：&lt;/p&gt;
&lt;p&gt;基本目录如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503039/202010/1503039-20201024191927085-753166246.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中train存放的是训练集，answer存放的是测试集，具体看下train中的文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503039/202010/1503039-20201024191943879-1887856925.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面有20个文件夹，对应着20个类，我们继续看下其中的文件，以C3-Art为例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503039/202010/1503039-20201024192001196-663108889.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;每一篇都对应着一个txt文件，编码格式是gb18030.utf8文件夹下的是utf-8编码格式的txt文件。&lt;/p&gt;
&lt;p&gt;其中C3-Art0001.txt的部分内容如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503039/202010/1503039-20201024192021940-288652424.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、数据预处理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本文数据预处理基本流程：&lt;/p&gt;
&lt;ul&gt;&lt;li readability=&quot;4.5&quot;&gt;先将所有训练数据的txt路径以及测试用的txt路径写入到txt中备用：train.txt、test.txt&lt;br/&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt; _txtpath_to_txt(self): &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将训练集和测试集下的txt路径保存&lt;/span&gt;
    train_txt_path = os.path.join(PATH, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;process/Fudan/train.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) 
    test_txt_path &lt;/span&gt;= os.path.join(PATH, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;process/Fudan//test.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    train_list &lt;/span&gt;= os.listdir(os.path.join(PATH, self.trainPath)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获得该目录下的所有文件夹，返回一个列表&lt;/span&gt;
    fp1 = open(train_txt_path,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    fp2 &lt;/span&gt;= open(test_txt_path,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; train_dir &lt;span&gt;in&lt;/span&gt; train_list: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;取得下一级目录下的所有的txt路径（绝对路径）&lt;/span&gt;
      &lt;span&gt;for&lt;/span&gt; txt &lt;span&gt;in&lt;/span&gt; glob.glob(os.path.join(PATH,self.trainPath+train_dir+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/*.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)):
        fp1.write(txt&lt;/span&gt;+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    fp1.close()
    test_list &lt;/span&gt;= os.listdir(os.path.join(PATH,self.testPath)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获得该目录下的所有文件夹，返回一个列表&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; test_dir &lt;span&gt;in&lt;/span&gt;&lt;span&gt; test_list:
      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; txt &lt;span&gt;in&lt;/span&gt; glob.glob(os.path.join(PATH, self.testPath+test_dir+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/*.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)):
        fp2.write(txt&lt;/span&gt;+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    fp2.close()&lt;/span&gt;
&lt;/pre&gt;
&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503039/202010/1503039-20201024192747247-893008967.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;代码就不一一贴了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、创建模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;207&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; warnings
warnings.filterwarnings(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ignore&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Transformer(object):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    Transformer Encoder 用于文本分类
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, config, wordEmbedding):

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 定义模型的输入&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;inputX:[None,600]，inputY:[None,20]&lt;/span&gt;
        self.inputX = tf.placeholder(tf.int32, [None, config.sequenceLength], name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;inputX&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        self.inputY &lt;/span&gt;= tf.placeholder(tf.int32, [None, config.numClasses], name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;inputY&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        self.lastBatch &lt;/span&gt;=&lt;span&gt; False
        self.dropoutKeepProb &lt;/span&gt;= tf.placeholder(tf.float32, name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dropoutKeepProb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        
        self.config &lt;/span&gt;=&lt;span&gt; config
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 定义l2损失&lt;/span&gt;
        l2Loss = tf.constant(0.0&lt;span&gt;)
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 词嵌入层, 位置向量的定义方式有两种：一是直接用固定的one-hot的形式传入，然后和词向量拼接，在当前的数据集上表现效果更好。另一种&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 就是按照论文中的方法实现，这样的效果反而更差，可能是增大了模型的复杂度，在小数据集上表现不佳。&lt;/span&gt;
&lt;span&gt; 
        with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wordEmbedding&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
          self.W &lt;/span&gt;= tf.Variable(tf.cast(wordEmbedding, dtype=tf.float32, name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;word2vec&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;), name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;W&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          self.wordEmbedded &lt;/span&gt;=&lt;span&gt; tf.nn.embedding_lookup(self.W, self.inputX)
        
        with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;positionEmbedding&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; tf.shape(self.wordEmbedded)[0] ==&lt;span&gt; config.batchSize:
            self.positionEmbedded &lt;/span&gt;=&lt;span&gt; self._positionEmbedding()
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            self.positionEmbedded &lt;/span&gt;= self._positionEmbedding(lastBatch=&lt;span&gt;tf.shape(self.wordEmbedded)[0])
        self.embeddedWords &lt;/span&gt;= self.wordEmbedded +&lt;span&gt; self.positionEmbedded
       
        with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;transformer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
          &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(config.modelConfig.numBlocks):
            with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;transformer-{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(i + 1&lt;span&gt;)):
            
              &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 维度[batch_size, sequence_length, embedding_size]&lt;/span&gt;
              multiHeadAtt = self._multiheadAttention(rawKeys=self.wordEmbedded, queries=&lt;span&gt;self.embeddedWords,
                                  keys&lt;/span&gt;=&lt;span&gt;self.embeddedWords)
              &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 维度[batch_size, sequence_length, embedding_size]&lt;/span&gt;
              self.embeddedWords =&lt;span&gt; self._feedForward(multiHeadAtt, [config.modelConfig.filters, config.modelConfig.embeddingSize])
                
          outputs &lt;/span&gt;= tf.reshape(self.embeddedWords, [-1, config.sequenceLength *&lt;span&gt; (config.modelConfig.embeddingSize)])

        outputSize &lt;/span&gt;= outputs.get_shape()[-1&lt;span&gt;].value
        
        with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dropout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
            outputs &lt;/span&gt;= tf.nn.dropout(outputs, keep_prob=&lt;span&gt;self.dropoutKeepProb)
    
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 全连接层的输出&lt;/span&gt;
        with tf.name_scope(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;output&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
            outputW &lt;/span&gt;=&lt;span&gt; tf.get_variable(
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;outputW&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                shape&lt;/span&gt;=&lt;span&gt;[outputSize, config.numClasses],
                initializer&lt;/span&gt;=&lt;span&gt;tf.contrib.layers.xavier_initializer())
            
            outputB&lt;/span&gt;= tf.Variable(tf.constant(0.1, shape=[config.numClasses]), name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;outputB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            l2Loss &lt;/span&gt;+=&lt;span&gt; tf.nn.l2_loss(outputW)
            l2Loss &lt;/span&gt;+=&lt;span&gt; tf.nn.l2_loss(outputB)
            self.logits &lt;/span&gt;= tf.nn.xw_plus_b(outputs, outputW, outputB, name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logits&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; config.numClasses == 1&lt;span&gt;:
                self.predictions &lt;/span&gt;= tf.cast(tf.greater_equal(self.logits, 0.0), tf.float32, name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;predictions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; config.numClasses &amp;gt; 1&lt;span&gt;:
                self.predictions &lt;/span&gt;= tf.argmax(self.logits, axis=-1, name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;predictions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算二元交叉熵损失&lt;/span&gt;
        with tf.name_scope(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
            
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; config.numClasses == 1&lt;span&gt;:
                losses &lt;/span&gt;= tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=tf.cast(tf.reshape(self.inputY, [-1, 1&lt;span&gt;]), 
                                                                                                    dtype&lt;/span&gt;=&lt;span&gt;tf.float32))
            &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; config.numClasses &amp;gt; 1&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(self.logits,self.inputY)
                losses &lt;/span&gt;= tf.nn.softmax_cross_entropy_with_logits(logits=self.logits, labels=&lt;span&gt;self.inputY)
                
            self.loss &lt;/span&gt;= tf.reduce_mean(losses) + config.modelConfig.l2RegLambda *&lt;span&gt; l2Loss
            
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; _layerNormalization(self, inputs, scope=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;layerNorm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; LayerNorm层和BN层有所不同&lt;/span&gt;
        epsilon =&lt;span&gt; self.config.modelConfig.epsilon

        inputsShape &lt;/span&gt;= inputs.get_shape() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; [batch_size, sequence_length, embedding_size]&lt;/span&gt;
&lt;span&gt;
        paramsShape &lt;/span&gt;= inputsShape[-1&lt;span&gt;:]

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; LayerNorm是在最后的维度上计算输入的数据的均值和方差，BN层是考虑所有维度的&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; mean, variance的维度都是[batch_size, sequence_len, 1]&lt;/span&gt;
        mean, variance = tf.nn.moments(inputs, [-1], keep_dims=&lt;span&gt;True)

        beta &lt;/span&gt;=&lt;span&gt; tf.Variable(tf.zeros(paramsShape))

        gamma &lt;/span&gt;=&lt;span&gt; tf.Variable(tf.ones(paramsShape))
        normalized &lt;/span&gt;= (inputs - mean) / ((variance + epsilon) ** .5&lt;span&gt;)
        
        outputs &lt;/span&gt;= gamma * normalized +&lt;span&gt; beta

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; outputs
            
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; _multiheadAttention(self, rawKeys, queries, keys, numUnits=None, causality=False, scope=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;multiheadAttention&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; rawKeys 的作用是为了计算mask时用的，因为keys是加上了position embedding的，其中不存在padding为0的值&lt;/span&gt;
&lt;span&gt;        
        numHeads &lt;/span&gt;=&lt;span&gt; self.config.modelConfig.numHeads
        keepProp &lt;/span&gt;=&lt;span&gt; self.config.modelConfig.keepProp
        
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; numUnits &lt;span&gt;is&lt;/span&gt; None:  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 若是没传入值，直接去输入数据的最后一维，即embedding size.&lt;/span&gt;
            numUnits = queries.get_shape().as_list()[-1&lt;span&gt;]

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; tf.layers.dense可以做多维tensor数据的非线性映射，在计算self-Attention时，一定要对这三个值进行非线性映射，&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 其实这一步就是论文中Multi-Head Attention中的对分割后的数据进行权重映射的步骤，我们在这里先映射后分割，原则上是一样的。&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Q, K, V的维度都是[batch_size, sequence_length, embedding_size]&lt;/span&gt;
        Q = tf.layers.dense(queries, numUnits, activation=&lt;span&gt;tf.nn.relu)
        K &lt;/span&gt;= tf.layers.dense(keys, numUnits, activation=&lt;span&gt;tf.nn.relu)
        V &lt;/span&gt;= tf.layers.dense(keys, numUnits, activation=&lt;span&gt;tf.nn.relu)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将数据按最后一维分割成num_heads个, 然后按照第一维拼接&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Q, K, V 的维度都是[batch_size * numHeads, sequence_length, embedding_size/numHeads]&lt;/span&gt;
        Q_ = tf.concat(tf.split(Q, numHeads, axis=-1), axis=&lt;span&gt;0) 
        K_ &lt;/span&gt;= tf.concat(tf.split(K, numHeads, axis=-1), axis=&lt;span&gt;0) 
        V_ &lt;/span&gt;= tf.concat(tf.split(V, numHeads, axis=-1), axis=&lt;span&gt;0)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算keys和queries之间的点积，维度[batch_size * numHeads, queries_len, key_len], 后两维是queries和keys的序列长度&lt;/span&gt;
        similary = tf.matmul(Q_, tf.transpose(K_, [0, 2, 1&lt;span&gt;]))

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 对计算的点积进行缩放处理，除以向量长度的根号值&lt;/span&gt;
        scaledSimilary = similary / (K_.get_shape().as_list()[-1] ** 0.5&lt;span&gt;)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在我们输入的序列中会存在padding这个样的填充词，这种词应该对最终的结果是毫无帮助的，原则上说当padding都是输入0时，&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算出来的权重应该也是0，但是在transformer中引入了位置向量，当和位置向量相加之后，其值就不为0了，因此在添加位置向量&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 之前，我们需要将其mask为0。虽然在queries中也存在这样的填充词，但原则上模型的结果之和输入有关，而且在self-Attention中&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; queryies = keys，因此只要一方为0，计算出的权重就为0。&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 具体关于key mask的介绍可以看看这里： https://github.com/Kyubyong/transformer/issues/3&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 利用tf，tile进行张量扩张， 维度[batch_size * numHeads, keys_len] keys_len = keys 的序列长度&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; tf.tile((?, 200), [8,1])&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将每一时序上的向量中的值相加取平均值&lt;/span&gt;
        keyMasks = tf.sign(tf.abs(tf.reduce_sum(rawKeys, axis=-1)))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 维度[batch_size, time_step]&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(keyMasks.shape)

        keyMasks &lt;/span&gt;= tf.tile(keyMasks, [numHeads, 1&lt;span&gt;]) 

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 增加一个维度，并进行扩张，得到维度[batch_size * numHeads, queries_len, keys_len]&lt;/span&gt;
        keyMasks = tf.tile(tf.expand_dims(keyMasks, 1), [1, tf.shape(queries)[1], 1&lt;span&gt;])

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; tf.ones_like生成元素全为1，维度和scaledSimilary相同的tensor, 然后得到负无穷大的值&lt;/span&gt;
        paddings = tf.ones_like(scaledSimilary) * (-2 ** (32 + 1&lt;span&gt;))

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; tf.where(condition, x, y),condition中的元素为bool值，其中对应的True用x中的元素替换，对应的False用y中的元素替换&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 因此condition,x,y的维度是一样的。下面就是keyMasks中的值为0就用paddings中的值替换&lt;/span&gt;
        maskedSimilary = tf.where(tf.equal(keyMasks, 0), paddings, scaledSimilary) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 维度[batch_size * numHeads, queries_len, key_len]&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在计算当前的词时，只考虑上文，不考虑下文，出现在Transformer Decoder中。在文本分类时，可以只用Transformer Encoder。&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Decoder是生成模型，主要用在语言生成中&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; causality:
            diagVals &lt;/span&gt;= tf.ones_like(maskedSimilary[0, :, :])  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; [queries_len, keys_len]&lt;/span&gt;
            tril = tf.contrib.linalg.LinearOperatorTriL(diagVals).to_dense()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; [queries_len, keys_len]&lt;/span&gt;
            masks = tf.tile(tf.expand_dims(tril, 0), [tf.shape(maskedSimilary)[0], 1, 1])  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; [batch_size * numHeads, queries_len, keys_len]&lt;/span&gt;
&lt;span&gt;
            paddings &lt;/span&gt;= tf.ones_like(masks) * (-2 ** (32 + 1&lt;span&gt;))
            maskedSimilary &lt;/span&gt;= tf.where(tf.equal(masks, 0), paddings, maskedSimilary)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; [batch_size * numHeads, queries_len, keys_len]&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 通过softmax计算权重系数，维度 [batch_size * numHeads, queries_len, keys_len]&lt;/span&gt;
        weights =&lt;span&gt; tf.nn.softmax(maskedSimilary)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加权和得到输出值, 维度[batch_size * numHeads, sequence_length, embedding_size/numHeads]&lt;/span&gt;
        outputs =&lt;span&gt; tf.matmul(weights, V_)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将多头Attention计算的得到的输出重组成最初的维度[batch_size, sequence_length, embedding_size]&lt;/span&gt;
        outputs = tf.concat(tf.split(outputs, numHeads, axis=0), axis=2&lt;span&gt;)
        
        outputs &lt;/span&gt;= tf.nn.dropout(outputs, keep_prob=&lt;span&gt;keepProp)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 对每个subLayers建立残差连接，即H(x) = F(x) + x&lt;/span&gt;
        outputs +=&lt;span&gt; queries
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; normalization 层&lt;/span&gt;
        outputs =&lt;span&gt; self._layerNormalization(outputs)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; outputs

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; _feedForward(self, inputs, filters, scope=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;multiheadAttention&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在这里的前向传播采用卷积神经网络&lt;/span&gt;
        
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 内层&lt;/span&gt;
        params = {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;inputs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: inputs, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;filters&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: filters[0], &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;kernel_size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 1&lt;span&gt;,
                  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;activation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: tf.nn.relu, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;use_bias&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: True}
        outputs &lt;/span&gt;= tf.layers.conv1d(**&lt;span&gt;params)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 外层&lt;/span&gt;
        params = {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;inputs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: outputs, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;filters&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: filters[1], &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;kernel_size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 1&lt;span&gt;,
                  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;activation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: None, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;use_bias&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: True}

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 这里用到了一维卷积，实际上卷积核尺寸还是二维的，只是只需要指定高度，宽度和embedding size的尺寸一致&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 维度[batch_size, sequence_length, embedding_size]&lt;/span&gt;
        outputs = tf.layers.conv1d(**&lt;span&gt;params)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 残差连接&lt;/span&gt;
        outputs +=&lt;span&gt; inputs

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 归一化处理&lt;/span&gt;
        outputs =&lt;span&gt; self._layerNormalization(outputs)

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; outputs
    
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; _positionEmbedding(self, lastBatch=None, scope=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;positionEmbedding&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成可训练的位置向量&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; lastBatch &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
          batchSize &lt;/span&gt;= self.config.batchSize &lt;span&gt;#&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
          batchSize &lt;/span&gt;=&lt;span&gt; lastBatch
        sequenceLen &lt;/span&gt;= self.config.sequenceLength &lt;span&gt;#&lt;/span&gt;&lt;span&gt;600&lt;/span&gt;
        embeddingSize = self.config.modelConfig.embeddingSize &lt;span&gt;#&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;
        
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成位置的索引，并扩张到batch中所有的样本上&lt;/span&gt;
        positionIndex = tf.tile(tf.expand_dims(tf.range(sequenceLen), 0), [batchSize, 1&lt;span&gt;])

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 根据正弦和余弦函数来获得每个位置上的embedding的第一部分&lt;/span&gt;
        positionEmbedding = np.array([[pos / np.power(10000, (i-i%2) / embeddingSize) &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(embeddingSize)] 
                                      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; pos &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(sequenceLen)])

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 然后根据奇偶性分别用sin和cos函数来包装&lt;/span&gt;
        positionEmbedding[:, 0::2] = np.sin(positionEmbedding[:, 0::2&lt;span&gt;])
        positionEmbedding[:, &lt;/span&gt;1::2] = np.cos(positionEmbedding[:, 1::2&lt;span&gt;])

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将positionEmbedding转换成tensor的格式&lt;/span&gt;
        positionEmbedding_ = tf.cast(positionEmbedding, dtype=&lt;span&gt;tf.float32)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 得到三维的矩阵[batchSize, sequenceLen, embeddingSize]&lt;/span&gt;
        positionEmbedded =&lt;span&gt; tf.nn.embedding_lookup(positionEmbedding_, positionIndex)

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; positionEmbedded
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、定义训练、测试、预测&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;197&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
BASE_DIR &lt;/span&gt;= os.path.dirname(os.path.abspath(&lt;span&gt;__file__&lt;/span&gt;)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;当前程序上一级目录，这里为transformer&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; dataset.fudanDataset &lt;span&gt;import&lt;/span&gt;&lt;span&gt; FudanDataset
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; models.transformer &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Transformer
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; utils.utils &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;from&lt;/span&gt; utils.metrics &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;from&lt;/span&gt; config.fudanConfig &lt;span&gt;import&lt;/span&gt;&lt;span&gt; FudanConfig
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; config.globalConfig &lt;span&gt;import&lt;/span&gt;&lt;span&gt; PATH
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as numpy
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; tkinter &lt;span&gt;import&lt;/span&gt;&lt;span&gt; _flatten
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn &lt;span&gt;import&lt;/span&gt;&lt;span&gt; metrics
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; jieba

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; train():
  &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;配置Saver。。。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  save_dir &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;checkpoint/transformer/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; os.path.exists(save_dir):
    os.makedirs(save_dir)
  save_path &lt;/span&gt;= os.path.join(save_dir, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;best_validation&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 最佳验证结果保存路径&lt;/span&gt;
  globalStep = tf.Variable(0, name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;globalStep&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, trainable=&lt;span&gt;False)
  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 配置 Saver&lt;/span&gt;
  saver =&lt;span&gt; tf.train.Saver()

  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义session&lt;/span&gt;
  &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
  session_conf = tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)
  session_conf.gpu_options.allow_growth=True
  session_conf.gpu_options.per_process_gpu_memory_fraction = 0.9  # 配置gpu占用率  
  sess = tf.Session(config=session_conf)
  &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
  sess &lt;/span&gt;=&lt;span&gt; tf.Session()
  &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;定义优化器。。。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 定义优化函数，传入学习速率参数&lt;/span&gt;
  optimizer =&lt;span&gt; tf.train.AdamOptimizer(config.trainConfig.learningRate)
  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算梯度,得到梯度和变量&lt;/span&gt;
  gradsAndVars =&lt;span&gt; optimizer.compute_gradients(model.loss)
  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将梯度应用到变量下，生成训练器&lt;/span&gt;
  trainOp = optimizer.apply_gradients(gradsAndVars, global_step=&lt;span&gt;globalStep)
  sess.run(tf.global_variables_initializer())
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; trainStep(batchX, batchY):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    训练函数
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;   
    feed_dict &lt;/span&gt;=&lt;span&gt; {
      model.inputX: batchX,
      model.inputY: batchY,
      model.dropoutKeepProb: config.modelConfig.dropoutKeepProb,
    }
    _, step, loss, predictions &lt;/span&gt;=&lt;span&gt; sess.run([trainOp, globalStep, model.loss, model.predictions], feed_dict)

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; config.numClasses == 1&lt;span&gt;:
        acc, recall, prec, f_beta &lt;/span&gt;= get_binary_metrics(pred_y=predictions, true_y=&lt;span&gt;batchY)
    &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; config.numClasses &amp;gt; 1&lt;span&gt;:
        acc, recall, prec, f_beta &lt;/span&gt;= get_multi_metrics(pred_y=predictions, true_y=batchY, labels=&lt;span&gt;labelList)
        
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; loss, acc, prec, recall, f_beta

  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; valStep(batchX, batchY):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    验证函数
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    feed_dict &lt;/span&gt;=&lt;span&gt; {
      model.inputX: batchX,
      model.inputY: batchY,
      model.dropoutKeepProb: &lt;/span&gt;1.0&lt;span&gt;,
    }
    step, loss, predictions &lt;/span&gt;=&lt;span&gt; sess.run([globalStep, model.loss, model.predictions], feed_dict)
    
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; config.numClasses == 1&lt;span&gt;:
        acc, recall, prec, f_beta &lt;/span&gt;= get_binary_metrics(pred_y=predictions, true_y=&lt;span&gt;batchY)  
    &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; config.numClasses &amp;gt; 1&lt;span&gt;:
        acc, recall, prec, f_beta &lt;/span&gt;= get_multi_metrics(pred_y=predictions, true_y=batchY, labels=&lt;span&gt;labelList) 

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; loss, acc, prec, recall, f_beta
  &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;开始训练。。。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  best_f_beta_val &lt;/span&gt;= 0.0  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 最佳验证集准确率&lt;/span&gt;
  last_improved = 0  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 记录上一次提升批次&lt;/span&gt;
  require_improvement = 1000  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果超过1000轮未提升，提前结束训练&lt;/span&gt;
  flag =&lt;span&gt; False
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; epoch &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(config.trainConfig.epoches):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Epoch:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, epoch + 1&lt;span&gt;)
    batch_train &lt;/span&gt;=&lt;span&gt; batch_iter(train_data, train_label, config.batchSize)
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; x_batch, y_batch &lt;span&gt;in&lt;/span&gt;&lt;span&gt; batch_train:
      loss, acc, prec, recall, f_beta &lt;/span&gt;=&lt;span&gt; trainStep(x_batch, y_batch)
      currentStep &lt;/span&gt;=&lt;span&gt; tf.train.global_step(sess, globalStep) 
      &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 多少次迭代打印一次训练结果：&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt; currentStep % config.trainConfig.print_per_step ==&lt;span&gt; 0:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;train: step: {}, loss: {:.4f}, acc: {:.4f}, recall: {:.4f}, precision: {:.4f}, f_beta: {:.4f}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(
                      currentStep, loss, acc, recall, prec, f_beta))
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; currentStep % config.trainConfig.evaluateEvery ==&lt;span&gt; 0:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;开始验证。。。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        
        losses &lt;/span&gt;=&lt;span&gt; []
        accs &lt;/span&gt;=&lt;span&gt; []
        f_betas &lt;/span&gt;=&lt;span&gt; []
        precisions &lt;/span&gt;=&lt;span&gt; []
        recalls &lt;/span&gt;=&lt;span&gt; []
        batch_val &lt;/span&gt;=&lt;span&gt; batch_iter(val_data, val_label, config.batchSize)
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; x_batch, y_batch &lt;span&gt;in&lt;/span&gt;&lt;span&gt; batch_val:
            loss, acc, precision, recall, f_beta &lt;/span&gt;=&lt;span&gt; valStep(x_batch, y_batch)
            losses.append(loss)
            accs.append(acc)
            f_betas.append(f_beta)
            precisions.append(precision)
            recalls.append(recall)
            
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; mean(f_betas) &amp;gt;&lt;span&gt; best_f_beta_val:
          &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存最好结果&lt;/span&gt;
          best_f_beta_val =&lt;span&gt; mean(f_betas)
          last_improved &lt;/span&gt;=&lt;span&gt; currentStep
          saver.save(sess&lt;/span&gt;=sess, save_path=&lt;span&gt;save_path)
          improved_str &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
          improved_str &lt;/span&gt;= &lt;span&gt;''&lt;/span&gt;&lt;span&gt;
        time_str &lt;/span&gt;=&lt;span&gt; datetime.datetime.now().isoformat()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}, step: {:&amp;gt;6}, loss: {:.4f}, acc: {:.4f},precision: {:.4f}, recall: {:.4f}, f_beta: {:.4f} {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(
          time_str, currentStep, mean(losses), mean(accs), mean(precisions), mean(recalls), mean(f_betas), improved_str))
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; currentStep - last_improved &amp;gt;&lt;span&gt; require_improvement:
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 验证集正确率长期不提升，提前结束训练&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;没有优化很长一段时间了，自动停止&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        flag &lt;/span&gt;=&lt;span&gt; True
        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 跳出循环&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; flag:  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 同上&lt;/span&gt;
        &lt;span&gt;break&lt;/span&gt;&lt;span&gt;
  sess.close()

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; test(test_data,test_label):
  &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;开始进行测试。。。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  save_path &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;checkpoint/transformer/best_validation&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  
  saver &lt;/span&gt;=&lt;span&gt; tf.train.Saver()
  sess &lt;/span&gt;=&lt;span&gt; tf.Session()
  sess.run(tf.global_variables_initializer())
  saver.restore(sess&lt;/span&gt;=sess, save_path=save_path)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取保存的模型&lt;/span&gt;
&lt;span&gt;
  data_len &lt;/span&gt;=&lt;span&gt; len(test_data)
  test_batchsize &lt;/span&gt;= 128&lt;span&gt;
  batch_test &lt;/span&gt;= batch_iter(test_data, test_label, 128, is_train=&lt;span&gt;False)
  pred_label &lt;/span&gt;=&lt;span&gt; []
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; x_batch,y_batch &lt;span&gt;in&lt;/span&gt;&lt;span&gt; batch_test:
    feed_dict &lt;/span&gt;=&lt;span&gt; {
      model.inputX: x_batch,
      model.inputY: y_batch,
      model.dropoutKeepProb: &lt;/span&gt;1.0&lt;span&gt;,
    }
    predictions &lt;/span&gt;=&lt;span&gt; sess.run([model.predictions], feed_dict)
    pred_label.append(predictions[0].tolist())
  pred_label &lt;/span&gt;=&lt;span&gt; list(_flatten(pred_label))
  test_label &lt;/span&gt;= [np.argmax(item) &lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; test_label]
  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 评估&lt;/span&gt;
  &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;计算Precision, Recall and F1-Score...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(metrics.classification_report(test_label, pred_label, target_names=&lt;span&gt;true_labelList))
  sess.close()

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; process_sentence(data):
  fudanDataset._get_stopwords()
  sentence_list &lt;/span&gt;=&lt;span&gt; []
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; content &lt;span&gt;in&lt;/span&gt;&lt;span&gt; data:
    words_list &lt;/span&gt;= jieba.lcut(content, cut_all=&lt;span&gt;False)
    tmp1 &lt;/span&gt;=&lt;span&gt; []
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; word &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words_list:
      word &lt;/span&gt;=&lt;span&gt; word.strip()
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; word &lt;span&gt;not&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; fudanDataset.stopWordDict &lt;span&gt;and&lt;/span&gt; word != &lt;span&gt;''&lt;/span&gt;&lt;span&gt;:
        tmp1.append(word)
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;
    sentence_list.append(tmp1)
  vocab &lt;/span&gt;=&lt;span&gt; fudanDataset._get_vocaburay()
  word2idx,idx2word &lt;/span&gt;=&lt;span&gt; fudanDataset._wordToIdx()
  label2idx,idx2label &lt;/span&gt;=&lt;span&gt; fudanDataset._labelToIdx()
  res_data &lt;/span&gt;=&lt;span&gt; []
  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;print(content)&lt;/span&gt;
  &lt;span&gt;for&lt;/span&gt; content &lt;span&gt;in&lt;/span&gt;&lt;span&gt; sentence_list:
    tmp2 &lt;/span&gt;=&lt;span&gt; []
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; len(content) &amp;gt;= config.sequenceLength: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;大于最大长度进行截断&lt;/span&gt;
      content =&lt;span&gt; content[:config.sequenceLength]
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;小于最大长度用PAD的id进行填充层&lt;/span&gt;
      content = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PAD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]*(config.sequenceLength-len(content)) +&lt;span&gt; content
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; word &lt;span&gt;in&lt;/span&gt; content: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将词语用id进行映射&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt; word &lt;span&gt;in&lt;/span&gt;&lt;span&gt; word2idx:
        tmp2.append(word2idx[word])
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        tmp2.append(word2idx[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;UNK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
    res_data.append(tmp2)
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; res_data

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_predict_content(content_path,label_path):
  use_data &lt;/span&gt;= 5&lt;span&gt;
  txt_list &lt;/span&gt;=&lt;span&gt; []
  label_list &lt;/span&gt;=&lt;span&gt; []
  predict_data &lt;/span&gt;=&lt;span&gt; []
  predict_label &lt;/span&gt;=&lt;span&gt; []
  content_file &lt;/span&gt;= open(content_path,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  label_file &lt;/span&gt;= open(label_path,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; txt &lt;span&gt;in&lt;/span&gt; content_file.readlines(): &lt;span&gt;#&lt;/span&gt;&lt;span&gt;读取每一行的txt  &lt;/span&gt;
    txt = txt.strip() &lt;span&gt;#&lt;/span&gt;&lt;span&gt;去除掉\n&lt;/span&gt;
&lt;span&gt;    txt_list.append(txt)
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; label &lt;span&gt;in&lt;/span&gt;&lt;span&gt; label_file.readlines():
    label &lt;/span&gt;=&lt;span&gt; label.strip()
    label_list.append(label)
  data &lt;/span&gt;=&lt;span&gt; []
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; txt,label &lt;span&gt;in&lt;/span&gt;&lt;span&gt; zip(txt_list,label_list):
    data.append((txt,label))
  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; random
  predict_data &lt;/span&gt;=&lt;span&gt; random.sample(data,use_data)
  p_data &lt;/span&gt;=&lt;span&gt; []
  p_label &lt;/span&gt;=&lt;span&gt; []
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; txt,label &lt;span&gt;in&lt;/span&gt;&lt;span&gt; predict_data:
    with open(txt,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gb18030&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,errors=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ignore&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as fp1:
      tmp &lt;/span&gt;=&lt;span&gt; []
      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt; fp1.readlines(): &lt;span&gt;#&lt;/span&gt;&lt;span&gt;读取每一行&lt;/span&gt;
&lt;span&gt;        tmp.append(line.strip())
      p_data.append(&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;.join(tmp))
    p_label.append(label)
  content_file.close()
  label_file.close()
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; p_data,p_label


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; predict(data,label,p_data):
  &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;开始预测文本的类别。。。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  predict_data &lt;/span&gt;=&lt;span&gt; data
  predict_true_data &lt;/span&gt;=&lt;span&gt; label
  save_path &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;checkpoint/transformer/best_validation&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
  saver &lt;/span&gt;=&lt;span&gt; tf.train.Saver()
  sess &lt;/span&gt;=&lt;span&gt; tf.Session()
  sess.run(tf.global_variables_initializer())
  saver.restore(sess&lt;/span&gt;=sess, save_path=save_path)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取保存的模型&lt;/span&gt;
&lt;span&gt;
  feed_dict &lt;/span&gt;=&lt;span&gt; {
    model.inputX: predict_data,
    model.inputY: predict_true_data,
    model.dropoutKeepProb: &lt;/span&gt;1.0&lt;span&gt;,
  }
  predictions &lt;/span&gt;=&lt;span&gt; sess.run([model.predictions], feed_dict)
  pred_label &lt;/span&gt;=&lt;span&gt; predictions[0].tolist()
  real_label &lt;/span&gt;= [np.argmax(item) &lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; predict_true_data]
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; content,pre_label,true_label &lt;span&gt;in&lt;/span&gt;&lt;span&gt; zip(p_data,pred_label,real_label):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;输入的文本是：{}...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(content[:100&lt;span&gt;]))
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;预测的类别是：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,idx2label[pre_label])
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;真实的类别是：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,idx2label[true_label])
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;================================================&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  sess.close()

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
  config &lt;/span&gt;=&lt;span&gt; FudanConfig()
  fudanDataset &lt;/span&gt;=&lt;span&gt; FudanDataset(config)
  word2idx,idx2word &lt;/span&gt;=&lt;span&gt; fudanDataset._wordToIdx()
  label2idx,idx2label &lt;/span&gt;=&lt;span&gt; fudanDataset._labelToIdx()
  &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;加载数据。。。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  train_content_path &lt;/span&gt;= os.path.join(PATH, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;process/Fudan/word2vec/data/train_content.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  train_label_path &lt;/span&gt;= os.path.join(PATH, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;process/Fudan/train_label.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  test_content_path &lt;/span&gt;= os.path.join(PATH, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;process/Fudan/word2vec/data/test_content.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  test_label_path &lt;/span&gt;= os.path.join(PATH, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;process/Fudan/test_label.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  fudanDataset._getTrainValData(train_content_path,train_label_path)
  fudanDataset._getTestData(test_content_path,test_label_path)
  fudanDataset._getWordEmbedding()
  train_data,val_data,train_label,val_label &lt;/span&gt;=&lt;span&gt; fudanDataset.trainData,fudanDataset.valData,fudanDataset.trainLabels,fudanDataset.valLabels
  test_data,test_label &lt;/span&gt;=&lt;span&gt; fudanDataset.testData,fudanDataset.testLabels
  train_label &lt;/span&gt;=&lt;span&gt; one_hot(train_label)
  val_label &lt;/span&gt;=&lt;span&gt; one_hot(val_label)
  test_label &lt;/span&gt;=&lt;span&gt; one_hot(test_label)

  wordEmbedding &lt;/span&gt;=&lt;span&gt; fudanDataset.wordEmbedding
  labelList &lt;/span&gt;=&lt;span&gt; fudanDataset.labelList
  true_labelList &lt;/span&gt;= [idx2label[label] &lt;span&gt;for&lt;/span&gt; label &lt;span&gt;in&lt;/span&gt;&lt;span&gt; labelList]
  
  &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;定义模型。。。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  model &lt;/span&gt;=&lt;span&gt; Transformer(config, wordEmbedding)
  test(test_data,test_label)
  
  &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;进行预测。。。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  p_data,p_label &lt;/span&gt;= get_predict_content(os.path.join(PATH, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;process/Fudan/test.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),test_label_path)

  process_data &lt;/span&gt;=&lt;span&gt; process_sentence(p_data)
  onehot_label &lt;/span&gt;=&lt;span&gt; np.zeros((len(p_label),config.numClasses))
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i,value &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(p_label):
    onehot_label[i][label2idx[value]] &lt;/span&gt;= 1&lt;span&gt;
  process_label &lt;/span&gt;=&lt;span&gt; onehot_label

  predict(process_data,process_label,p_data)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
计算Precision, Recall &lt;span&gt;and&lt;/span&gt; F1-&lt;span&gt;Score...
               precision    recall  f1&lt;/span&gt;-&lt;span&gt;score   support

  Agriculture       &lt;/span&gt;0.83      0.90      0.87      1022&lt;span&gt;
          Art       &lt;/span&gt;0.79      0.86      0.82       742&lt;span&gt;
Communication       &lt;/span&gt;0.00      0.00      0.00        27&lt;span&gt;
     Computer       &lt;/span&gt;0.93      0.97      0.95      1358&lt;span&gt;
      Economy       &lt;/span&gt;0.87      0.89      0.88      1601&lt;span&gt;
    Education       &lt;/span&gt;0.67      0.07      0.12        61&lt;span&gt;
  Electronics       &lt;/span&gt;0.00      0.00      0.00        28&lt;span&gt;
       Energy       &lt;/span&gt;1.00      0.03      0.06        33&lt;span&gt;
  Enviornment       &lt;/span&gt;0.86      0.95      0.90      1218&lt;span&gt;
      History       &lt;/span&gt;0.68      0.66      0.67       468&lt;span&gt;
          Law       &lt;/span&gt;0.18      0.12      0.14        52&lt;span&gt;
   Literature       &lt;/span&gt;0.00      0.00      0.00        34&lt;span&gt;
      Medical       &lt;/span&gt;0.19      0.06      0.09        53&lt;span&gt;
     Military       &lt;/span&gt;0.50      0.03      0.05        76&lt;span&gt;
         Mine       &lt;/span&gt;1.00      0.03      0.06        34&lt;span&gt;
   Philosophy       &lt;/span&gt;0.62      0.22      0.33        45&lt;span&gt;
     Politics       &lt;/span&gt;0.78      0.88      0.83      1026&lt;span&gt;
        Space       &lt;/span&gt;0.91      0.81      0.85       642&lt;span&gt;
       Sports       &lt;/span&gt;0.86      0.88      0.87      1254&lt;span&gt;
    Transport       &lt;/span&gt;1.00      0.02      0.03        59&lt;span&gt;

     accuracy                           &lt;/span&gt;0.84      9833&lt;span&gt;
    macro avg       &lt;/span&gt;0.63      0.42      0.43      9833&lt;span&gt;
 weighted avg       &lt;/span&gt;0.83      0.84      0.83      9833
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
输入的文本是：中国环境科学CHINA ENVIRONMENTAL SCIENCE1998年 第18卷 第1期 No.1 Vol.18 1998科技期刊镉胁迫对小麦叶片细胞膜脂过氧化的影响*&lt;span&gt;罗立新　孙铁珩　靳月华(中...
预测的类别是： Enviornment
真实的类别是： Enviornment
&lt;/span&gt;================================================&lt;span&gt;
输入的文本是：自动化学报AGTA AUTOMATICA SINICA1999年 第25卷 第2期 Vol.&lt;/span&gt;25 No.2&lt;span&gt; 1999TSP问题分层求解算法的复杂度研究1)卢　欣　李衍达关键词　TSP，局部搜索算法，动...
预测的类别是： Computer
真实的类别是： Computer
&lt;/span&gt;================================================&lt;span&gt;
输入的文本是：【 文献号 】&lt;/span&gt;3-5519【原文出处】人民日报【原刊地名】京【原刊期号】19960615【原刊页号】⑵【分 类 号】D4【分 类 名】中国政治【复印期号】199606&lt;span&gt;【 标  题 】中国人民政治协商会...
预测的类别是： Politics
真实的类别是： Politics
&lt;/span&gt;================================================&lt;span&gt;
输入的文本是：软件学报JOURNAL OF SOFTWARE1999年 第2期 No.&lt;/span&gt;2&lt;span&gt; 1999视觉导航中基于模糊神经网的消阴影算法研究郭木河　杨　磊　陶西平　何克忠　张　钹摘要　在实际的应用中,由于室外移动机器...
预测的类别是： Computer
真实的类别是： Computer
&lt;/span&gt;================================================&lt;span&gt;
输入的文本是：【 文献号 】&lt;/span&gt;2-814【原文出处】中国乡镇企业会计【原刊地名】京【原刊期号】199907【原刊页号】7～9【分 类 号】F22【分 类 名】乡镇企业与农场管理【复印期号】199908&lt;span&gt;【 标  题 】...
预测的类别是： Economy
真实的类别是： Economy
&lt;/span&gt;================================================
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总目录结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503039/202010/1503039-20201029225621249-997900991.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503039/202010/1503039-20201029225724217-1294009564.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;后续还将继续添加相应的功能，比如tensorboard可视化，其它网络LSTM、GRU等等。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;https://www.cnblogs.com/jiangxinyang/p/10210813.html&lt;/p&gt;
&lt;p&gt;这里面在transformer模型多头注意力那里漏了一句：&lt;/p&gt;
&lt;p&gt;keyMasks = tf.sign(tf.abs(tf.reduce_sum(rawKeys, axis=-1)))&lt;/p&gt;
&lt;p&gt;导致弄了好久，同时也参考了：&lt;/p&gt;
&lt;p&gt;https://github.com/gaussic/text-classification-cnn-rnn&lt;/p&gt;
&lt;p&gt;基本上是结合了这两个地方的代码再进行了些重构。&lt;/p&gt;

</description>
<pubDate>Thu, 29 Oct 2020 15:05:00 +0000</pubDate>
<dc:creator>西西嘛呦</dc:creator>
<og:description>利用TfidfVectorizer进行中文文本分类（数据集是复旦中文语料） 利用RNN进行中文文本分类（数据集是复旦中文语料） 利用CNN进行中文文本分类（数据集是复旦中文语料） 和之前介绍的不同，重</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xiximayou/p/13871438.html</dc:identifier>
</item>
<item>
<title>正则表达式性能优化的探究 - 码猿手</title>
<link>http://www.cnblogs.com/huangrenhui/p/13893903.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangrenhui/p/13893903.html</guid>
<description>&lt;h2&gt;一.背景&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　前文的&lt;a href=&quot;https://www.cnblogs.com/huangrenhui/p/13853574.html&quot; target=&quot;_blank&quot;&gt;String字符串性能优化的探究&lt;/a&gt;中的第3点讲述了Split() 方法使用了正则表达式实现了其强大的分割功能，而正则表达式的性能是非常不稳定的，使用不恰当会引起回溯问题。那么今天详细探讨下正则表达式。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　正则表达式是计算机科学的一个概念，很多语言都实现了它。正则表达式使用一些特定的元字符来检索、匹配以及替换符合规定的字符串。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　构造正则表达式语法的元字符，由普通字符、标准字符、限定字符（量词）、定位符（边界字符）组成，详情如下图：                                                             &lt;img src=&quot;https://img2020.cnblogs.com/blog/1363696/202010/1363696-20201028222609355-1255884924.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;二.正则表达式引擎&lt;/h2&gt;
&lt;p&gt;　　&lt;span&gt;正则表达式是一个用正则符号写出的公式，程序对这个公式进行语法分析，建立一个语法分析树，再根据这个分析树结合正则表达式的引擎生成执行程序（这个执行程序我们把它称作状态机，也叫状态自动机），用于字符匹配。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　而这里的正则表达式引擎就是一套核心算法，用于建立状态机。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　目前实现正则表达式引擎的方式有两种：DFA自动机（Deterministic Final Automata 确定有限状态自动机）和 NFA（Non deterministic Finite Automaton 非确定有限状态自动机）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对比来看，构造 DFA 自动机的代价远大于 NFA 自动机，但 DFA 自动机的执行效率高于 NFA 自动机。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;假设一个字符串的长度是 n，如果用 DFA 自动机作为正则表达式引擎，则匹配的时间复杂度为 O(n)；如果用 NFA 自动机作为正则表达式引擎，由于 NFA 自动机在匹配过程中存在大量的分支和回溯，假设 NFA 的状态数为 s，则该匹配算法的时间复杂度为 O(ns)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　NFA 自动机的优势是支持更多功能。例如：捕获 group、环视、占有优先量词等高级功能。这些功能都是基于子表达式独立进行匹配，因此在编程语言里，使用的正则表达式库都是基于 NFA 实现的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　那么 NFA 自动机到底是怎么进行匹配的呢？接下来以下面的例子来进行说明：&lt;/span&gt;&lt;span&gt;　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
text = &quot;aabcab&quot;&lt;span&gt;
regex &lt;/span&gt;= &quot;bc&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;　　NFA 自动机会读取正则表达式的每一个字符，拿去和目标字符串匹配，匹配成功就换正则表达式的下一个字符，反之就继续和目标字符串的下一个字符进行匹配。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　分解一下过程：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1）读取正则表达式的第一个匹配符和字符串的第一个字符进行比较，b 对 a，不匹配；继续换字符串的下一个字符，也就是 a，不匹配；继续换下一个，是 b，匹配；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1363696/202010/1363696-20201029210839145-1316665991.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2）同理，读取正则表达式的第二个匹配符和字符串的第四个字符进行比较，c 对 c，匹配；继续读取正则表达式的下一个字符，然而后面已经没有可匹配的字符了，结束。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1363696/202010/1363696-20201029211313714-1653191007.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这就是 NFA 自动机的匹配过程，虽然在实际应用中，碰到的正则表达式都要比这复杂，但匹配方法是一样的。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;三.NFA自动机的回溯&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　用 NFA 自动机实现的比较复杂的正则表达式，在匹配过程中经常会引起回溯问题。大量的回溯会长时间地占用 CPU，从而带来系统性能开销。如下面例子：　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
text = &quot;abbc&quot;&lt;span&gt;
regex &lt;/span&gt;= &quot;ab{1,3}c&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　上面例子，匹配目的比较简单。匹配以 a 开头，以 c 结尾，中间有 1-3 个 b 字符的字符串。NFA 自动机对其解析的过程是这样的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1）读取正则表达式第一个匹配符 a 和字符串第一个字符 a 进行比较，a 对 a，匹配；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1363696/202010/1363696-20201029212555377-1403037325.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2）读取正则表达式第一个匹配符 b{1,3} 和字符串的第二个字符 b 进行比较，匹配。但因为 b{1,3} 表示 1-3 个 b 字符串，NFA 自动机又具有贪婪特性，所以此时不会继续读取正则表达式的下一个匹配符，而是依旧使用 b{1,3} 和字符串的第三个字符 b 进行比较，结果还是匹配。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1363696/202010/1363696-20201029212805784-1442933497.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3）继续使用 b{1,3} 和字符串的第四个字符 c 进行比较，发现不匹配了，此时就会发生回溯，已经读取的字符串第四个字符 c 将被吐出去，指针回到第三个字符 b 的位置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1363696/202010/1363696-20201029213547022-1210007501.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　4）那么发生回溯以后，匹配过程怎么继续呢？程序会读取正则表达式的下一个匹配符 c，和字符串中的第四个字符 c 进行比较，结果匹配，结束。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1363696/202010/1363696-20201029213643723-792635613.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;四.如何避免回溯问题？&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　既然回溯会给系统带来性能开销，那我们如何应对呢？如果你有仔细看上面那个案例的话，你会发现 NFA 自动机的贪婪特性就是导火索，这和正则表达式的匹配模式息息相关。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　&lt;/span&gt;1.贪婪模式（Greedy）&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　顾名思义，就是在数量匹配中，如果单独使用 +、？、*或（min,max）等量词，正则表达式会匹配尽可能多的内容。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　例如，上面那个例子：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
text = &quot;abbc&quot;&lt;span&gt;
regex &lt;/span&gt;= &quot;ab{1,3}c&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;就是在贪婪模式下，NFA自动机读取了最大的匹配范围，即匹配 3 个 b 字符。匹配发生了一次失败，就引起了一次回溯。如果匹配结果是“abbbc”，就会匹配成功。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
text = &quot;abbbc&quot;&lt;span&gt;
regex &lt;/span&gt;= &quot;ab{1,3}c&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　2.懒惰模式（Reluctant）&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　在该模式下，正则表达式会尽可能少地重复匹配字符，如果匹配成功，它会继续匹配剩余的字符串。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　例如，上面的例子的字符后面加一个“?”，就可以开启懒惰模式。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
text = &quot;abc&quot;&lt;span&gt;
regex &lt;/span&gt;= &quot;ab{1,3}?c&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;　　匹配结果是“abc”，该模式下 NFA 自动机首先选择最小的匹配范围，即匹配 1 个 b 字符，因此就避免了回溯问题。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;　　3.独占模式（Possessive）&lt;/h3&gt;
&lt;p&gt; 　　&lt;span&gt;同贪婪模式一样，独占模式一样会最大限度地匹配更多内容；不同的是，在独占模式下，匹配失败就会结束匹配，不会发生回溯问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　还是上面的例子，在字符后面加一个“+”，就可以开启独占模式。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
text = &quot;abbc&quot;&lt;span&gt;
regex &lt;/span&gt;= &quot;ab{1,3}+c&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　结果是不匹配，结束匹配，不会发生回溯问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所以综上所述，避免回溯的方法就是：使用懒惰模式或独占模式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　前面讲述了“Split() 方法使用了正则表达式实现了其强大的分割功能，而正则表达式的性能是非常不稳定的，使用不恰当会引起回溯问题。”，比如使用了 split 方法提取域名，并检查请求参数是否符合规定。split 在匹配分组时遇到特殊字符产生了大量回溯，解决办法就是在正则表达式后加一个需要匹配的字符和“+”解决了回溯问题：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
\\?(([A-Za-z0-9-~_=%]++\\&amp;amp;{0,1})+)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;五.正则表达式的优化&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;1.&lt;strong&gt;少用贪婪模式&lt;/strong&gt;：多用贪婪模式会引起回溯问题，可以使用独占模式来避免回溯。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2.&lt;strong&gt;减少分支选择&lt;/strong&gt;：分支选择类型 “(X|Y|Z)” 的正则表达式会降低性能，在开发的时候要尽量减少使用。如果一定要用，可以通过以下几种方式来优化：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;1）考虑选择的顺序，将比较常用的选择项放在前面，使他们可以较快地被匹配；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;2）可以尝试提取共用模式，例如，将 “(abcd|abef)” 替换为 “ab(cd|ef)” ，后者匹配速度较快，因为 NFA 自动机会尝试匹配 ab，如果没有找到，就不会再尝试任何选项；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;3）如果是简单的分支选择类型，可以用三次 index 代替 “(X|Y|Z)” ，如果测试话，你就会发现三次 index 的效率要比 “(X|Y|Z)” 高一些。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;3.&lt;strong&gt;减少捕获嵌套 ：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　捕获组是指把正则表达式中，子表达式匹配的内容保存到以数字编号或显式命名的数组中，方便后面引用。一般一个（）就是一个捕获组，捕获组可以进行嵌套。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　非捕获组则是指参与匹配却不进行分组编号的捕获组，其表达式一般由（?:exp）组成。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　在正则表达式中，每个捕获组都有一个编号，编号 0 代表整个匹配到的内容。可以看看下面的例子：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        String text &lt;/span&gt;= &quot;&amp;lt;input high=\&quot;20\&quot; weight=\&quot;70\&quot;&amp;gt;test&amp;lt;/input&amp;gt;&quot;&lt;span&gt;;
        String reg &lt;/span&gt;= &quot;(&amp;lt;input.*?&amp;gt;)(.*?)(&amp;lt;/input&amp;gt;)&quot;&lt;span&gt;;
        Pattern p &lt;/span&gt;=&lt;span&gt; Pattern.compile(reg);
        Matcher m &lt;/span&gt;=&lt;span&gt; p.matcher(text);
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (m.find()){
            System.out.println(m.group(&lt;/span&gt;0));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;整个匹配到的内容&lt;/span&gt;
            System.out.println(m.group(1));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&amp;lt;input.*?&amp;gt;&lt;/span&gt;
            System.out.println(m.group(2));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(.*?)&lt;/span&gt;
            System.out.println(m.group(3));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(&amp;lt;/input&amp;gt;)&lt;/span&gt;
&lt;span&gt;        }

    }
&lt;/span&gt;=====运行结果=====
&amp;lt;input high=&quot;20&quot; weight=&quot;70&quot;&amp;gt;test&amp;lt;/input&amp;gt;
&amp;lt;input high=&quot;20&quot; weight=&quot;70&quot;&amp;gt;&lt;span&gt;
test
&lt;/span&gt;&amp;lt;/input&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　如果你并不需要获取某一个分组内的文本，那么就使用非捕获组，例如，使用 “(?:x)” 代替 “(X)” ，例如下面的例子：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        String text &lt;/span&gt;= &quot;&amp;lt;input high=\&quot;20\&quot; weight=\&quot;70\&quot;&amp;gt;test&amp;lt;/input&amp;gt;&quot;&lt;span&gt;;
        String reg &lt;/span&gt;= &quot;(?:&amp;lt;input.*?&amp;gt;)(.*?)(?:&amp;lt;/input&amp;gt;)&quot;&lt;span&gt;;
        Pattern p &lt;/span&gt;=&lt;span&gt; Pattern.compile(reg);
        Matcher m &lt;/span&gt;=&lt;span&gt; p.matcher(text);
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (m.find()) {
            System.out.println(m.group(&lt;/span&gt;0));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;整个匹配到的内容&lt;/span&gt;
            System.out.println(m.group(1));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(.*?)&lt;/span&gt;
&lt;span&gt;        }

    }
&lt;/span&gt;=====运行结果=====
&amp;lt;input high=&quot;20&quot; weight=&quot;70&quot;&amp;gt;test&amp;lt;/input&amp;gt;&lt;span&gt;
test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 29 Oct 2020 14:52:00 +0000</pubDate>
<dc:creator>码猿手</dc:creator>
<og:description>正则表达式</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/huangrenhui/p/13893903.html</dc:identifier>
</item>
<item>
<title>【Flutter 混合开发】添加 Flutter 到 Android Fragment - 老孟Flutter</title>
<link>http://www.cnblogs.com/mengqd/p/13899607.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mengqd/p/13899607.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202010/467322-20201029221809283-1917315759.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Flutter 混合开发系列 包含如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;嵌入原生View-Android&lt;/li&gt;
&lt;li&gt;嵌入原生View-iOS&lt;/li&gt;
&lt;li&gt;与原生通信-MethodChannel&lt;/li&gt;
&lt;li&gt;与原生通信-BasicMessageChannel&lt;/li&gt;
&lt;li&gt;与原生通信-EventChannel&lt;/li&gt;
&lt;li&gt;添加 Flutter 到 Android Activity&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;添加 Flutter 到 Android Fragment&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;添加 Flutter 到 iOS&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;每个工作日分享一篇，欢迎关注、点赞及转发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用新引擎创建-flutterfragment&quot;&gt;使用新引擎创建 FlutterFragment&lt;/h4&gt;
&lt;p&gt;添加 Flutter 到 Fragment 与添加 Activity 基本一样，如果添加到 Activity 满足需求，建议使用 Activity，因为 Activity 更加灵活和易于使用。&lt;/p&gt;
&lt;p&gt;添加到 Fragment 代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-kotlin&quot;&gt;class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val fragment = FlutterFragment.createDefault()
        supportFragmentManager
            .beginTransaction()
            .add(R.id.fragment_container, fragment)
            .commit()
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;activity_main&lt;/strong&gt; 布局文件修改如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    tools:context=&quot;.MainActivity&quot;&amp;gt;

    &amp;lt;FrameLayout
        android:id=&quot;@+id/fragment_container&quot;
        android:layout_width=&quot;0dp&quot;
        android:layout_height=&quot;0dp&quot;
        app:layout_constraintTop_toTopOf=&quot;parent&quot;
        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;
        app:layout_constraintRight_toRightOf=&quot;parent&quot;
        app:layout_constraintBottom_toTopOf=&quot;@+id/button&quot;/&amp;gt;
    &amp;lt;Button
        android:id=&quot;@+id/button&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:text=&quot;跳转&quot;
        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;
        app:layout_constraintRight_toRightOf=&quot;parent&quot;/&amp;gt;


&amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202010/467322-20201029221809766-1616375736.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;红色区域就是 FlutterFragment 部分，这里大部分是 Android 原生的知识。&lt;/p&gt;
&lt;p&gt;上面已经加载了 UI，但并不能一些交互和行为，通常情况下，需要将 Activity 的生命周期透传给 FlutterFragment：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-kotlin&quot;&gt;class MainActivity : AppCompatActivity() {
  override fun onPostResume() {
    super.onPostResume()
    flutterFragment!!.onPostResume()
  }

  override fun onNewIntent(@NonNull intent: Intent) {
    flutterFragment!!.onNewIntent(intent)
  }

  override fun onBackPressed() {
    flutterFragment!!.onBackPressed()
  }

  override fun onRequestPermissionsResult(
    requestCode: Int,
    permissions: Array&amp;lt;String?&amp;gt;,
    grantResults: IntArray
  ) {
    flutterFragment!!.onRequestPermissionsResult(
      requestCode,
      permissions,
      grantResults
    )
  }

  override fun onUserLeaveHint() {
    flutterFragment!!.onUserLeaveHint()
  }

  override fun onTrimMemory(level: Int) {
    super.onTrimMemory(level)
    flutterFragment!!.onTrimMemory(level)
  }
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;初始化新引擎路由&quot;&gt;初始化新引擎路由&lt;/h4&gt;
&lt;p&gt;指定引擎路由：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-kotlin&quot;&gt;val fragment = FlutterFragment
    .withNewEngine()
    .initialRoute(&quot;one_page&quot;)
    .build&amp;lt;FlutterFragment&amp;gt;()

supportFragmentManager
    .beginTransaction()
    .add(R.id.fragment_container, fragment)
    .commit()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202010/467322-20201029221809986-1710071019.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;使用缓存引擎创建-flutterfragment&quot;&gt;使用缓存引擎创建 FlutterFragment&lt;/h4&gt;
&lt;p&gt;上面的方式每一个 FlutterFragment 都会创建一个 FlutterEngine（Flutter 引擎），当然 FlutterFragment 也支持 缓存引擎，用法与 Activity 一样，在 MyApplication 启动引擎：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-kotlin&quot;&gt;class MyApplication : Application() {
    lateinit var flutterEngine: FlutterEngine

    override fun onCreate() {
        super.onCreate()
        flutterEngine = FlutterEngine(this)
        flutterEngine.dartExecutor.executeDartEntrypoint(
            DartExecutor.DartEntrypoint.createDefault()
        )
        FlutterEngineCache
            .getInstance()
            .put(&quot;engine_id&quot;, flutterEngine)


    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-kotlin&quot;&gt;val fragment = FlutterFragment
    .withCachedEngine(&quot;engine_id&quot;)
    .build&amp;lt;FlutterFragment&amp;gt;()

supportFragmentManager
    .beginTransaction()
    .add(R.id.fragment_container, fragment)
    .commit()
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;初始化缓存引擎路由&quot;&gt;初始化缓存引擎路由&lt;/h4&gt;
&lt;p&gt;初始化缓存引擎的路由：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-kotlin&quot;&gt;flutterEngine = FlutterEngine(this)

flutterEngine.navigationChannel.setInitialRoute(&quot;one_page&quot;)

flutterEngine.dartExecutor.executeDartEntrypoint(
    DartExecutor.DartEntrypoint.createDefault()
)
FlutterEngineCache
    .getInstance()
    .put(&quot;engine_id&quot;, flutterEngine)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202010/467322-20201029221810212-888979431.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;更改入门点&quot;&gt;更改入门点&lt;/h4&gt;
&lt;p&gt;默认情况下，FlutterFragment 的 entrypoint（入口点）是 &lt;strong&gt;main()&lt;/strong&gt; 函数，我们可以修改其 entrypoint，&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-kotlin&quot;&gt;val fragment = FlutterFragment
    .withNewEngine()
    .dartEntrypoint(&quot;newMain&quot;)
    .build&amp;lt;FlutterFragment&amp;gt;()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在 &lt;strong&gt;main.dart&lt;/strong&gt; 文件中添加 entrypoint（入口点）：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-dart&quot;&gt;void main() =&amp;gt; runApp(MyApp());

void newMain()=&amp;gt; runApp(NewApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(

        primarySwatch: Colors.blue,
      ),
      routes: {
        'one_page':(context){
          return OnePage();
        },
        'two_page':(context){
          return TwoPage();
        }
      },
      home: MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}


class NewApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(

        primarySwatch: Colors.blue,
      ),
      home: TwoPage()
    );
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;newMain&lt;/strong&gt; 即新的 entrypoint。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202010/467322-20201029221810375-2046780715.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;更改-flutterfragment-的渲染模式&quot;&gt;更改 FlutterFragment 的渲染模式&lt;/h4&gt;
&lt;p&gt;FlutterFragment 的渲染模式有两种：SurfaceView 和 TextureView，默认是 SurfaceView，SurfaceView 的性能比 TextureView 好，但其层次结构必须在最顶层或最底层，而且在 Android N之前的Android版本上，无法对 SurfaceView 进行动画处理，因为它们的布局和渲染与其他 View 层次结构不同步，因此要合理选择渲染模式，渲染模式设置方法如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-kotlin&quot;&gt;val fragment = FlutterFragment
    .withNewEngine()
    .renderMode(RenderMode.texture)
    .build&amp;lt;FlutterFragment&amp;gt;()
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;设置-flutterfragment-透明&quot;&gt;设置 FlutterFragment 透明&lt;/h4&gt;
&lt;p&gt;默认情况下，FlutterFragment 使用 SurfaceView 渲染不透明背景。对于Flutter未绘制的任何像素，背景均为黑色。由于性能原因，首选使用不透明背景进行渲染。 Android上具有透明的 Flutter 渲染会对性能产生负面影响。但是，有的时候需要其透明，显示其底下的 UI，因此，Flutter在 FlutterFragment 中支持设置为透明。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-kotlin&quot;&gt;val fragment = FlutterFragment
    .withNewEngine()
    .transparencyMode(TransparencyMode.transparent)
    .build&amp;lt;FlutterFragment&amp;gt;()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将按下放置在 FlutterFragment 的底下，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    tools:context=&quot;.MainActivity&quot;&amp;gt;

    &amp;lt;Button
        android:id=&quot;@+id/button&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:text=&quot;跳转&quot;
        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;
        app:layout_constraintRight_toRightOf=&quot;parent&quot;
        app:layout_constraintTop_toTopOf=&quot;parent&quot;/&amp;gt;


    &amp;lt;FrameLayout
        android:id=&quot;@+id/fragment_container&quot;
        android:layout_width=&quot;0dp&quot;
        android:layout_height=&quot;0dp&quot;
        app:layout_constraintTop_toTopOf=&quot;parent&quot;
        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;
        app:layout_constraintRight_toRightOf=&quot;parent&quot;
        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;/&amp;gt;


&amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时 FlutterFragment 的背景已经透明了，但运行时发现并没有透明，按钮也没有显示，这是因为 Flutter 本身没有设置透明，设置Flutter 透明：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-dart&quot;&gt;@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: Text(widget.title),
    ),
    backgroundColor: Colors.transparent,
    ...
  );
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202010/467322-20201029221810502-324834400.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;交流&quot;&gt;交流&lt;/h2&gt;
&lt;p&gt;老孟Flutter博客（330个控件用法+实战入门系列文章）：&lt;a href=&quot;http://laomengit.com&quot;&gt;http://laomengit.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎加入Flutter交流群（微信：laomengit）、关注公众号【老孟Flutter】：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th/&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202010/467322-20201029221811398-985169561.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202010/467322-20201029221811866-797659790.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Thu, 29 Oct 2020 14:18:00 +0000</pubDate>
<dc:creator>老孟Flutter</dc:creator>
<og:description>Flutter 混合开发系列 包含如下： 嵌入原生View-Android 嵌入原生View-iOS 与原生通信-MethodChannel 与原生通信-BasicMessageChannel 与原生</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/mengqd/p/13899607.html</dc:identifier>
</item>
</channel>
</rss>