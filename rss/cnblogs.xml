<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Kubernetes - 腾讯蓝鲸配置平台(CMDB)开源版部署 - 编程玩家</title>
<link>http://www.cnblogs.com/Erik_Xu/p/10092028.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Erik_Xu/p/10092028.html</guid>
<description>&lt;p&gt;　　蓝鲸配置平台（蓝鲸CMDB）是一个基于运维场景设计的企业配置管理服务。主要功能：&lt;/p&gt;
&lt;p&gt;　　1. 拓扑化的主机管理：主机基础属性、主机快照数据、主机归属关系管理&lt;/p&gt;
&lt;p&gt;　　2. 组织架构管理：可扩展的基于业务的组织架构管理&lt;/p&gt;
&lt;p&gt;　　3. 模型管理：既能管理业务、集群、主机等内置模型，也能自定义模型&lt;/p&gt;
&lt;p&gt;　　4. 进程管理：基于模块的主机进程管理&lt;/p&gt;
&lt;p&gt;　　5. 事件注册与推送：提供基于回调方式的事件注册与推送&lt;/p&gt;
&lt;p&gt;　　6. 通用权限管理：灵活的基于用户组的权限管理&lt;/p&gt;
&lt;p&gt;　　7. 操作审计：用户操作行为的审计与回溯&lt;/p&gt;

&lt;p&gt;　　官网地址：&lt;a href=&quot;http://bk.tencent.com/&quot; target=&quot;_blank&quot;&gt;http://bk.tencent.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　源码地址：&lt;a href=&quot;https://github.com/tencent/bk-cmdb&quot; target=&quot;_blank&quot;&gt;https://github.com/tencent/bk-cmdb&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181209165943476-1147155641.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　1. 资源层（store）：提供系统所需的资源存储、消息队列以及缓存系统服务&lt;/p&gt;
&lt;p&gt;　　2. 服务层(service layer)： 服务层划分为两大模块&lt;/p&gt;
&lt;p&gt;　　    a. 资源管理模块：&lt;/p&gt;
&lt;p&gt;　　　　在配置平台中我们把资源类型进行了抽象，目前划分为主机、进程、通用对象三大类，支持横向扩展，每一类资源由一类微服务进程来管理。&lt;/p&gt;
&lt;p&gt;　　    b. 业务场景模块：&lt;/p&gt;
&lt;p&gt;　　　　业务场景模块是基于资源管理模块的原子接口对应用场景的封装。&lt;/p&gt;
&lt;p&gt;　　　　基于操作的相关度，目前划分出admin、event、host、topo、process、datacollection几个微服务：&lt;/p&gt;
&lt;p&gt;　　    　　admin服务负责系统的配置刷新、初始化数据写入等操作；&lt;/p&gt;
&lt;p&gt;　　    　　event服务负责系统的事件订阅与推送服务；&lt;/p&gt;
&lt;p&gt;　　    　　process、topo、host分别负责系统进程、拓扑模型、主机数据的使用场景；&lt;/p&gt;
&lt;p&gt;　　    　　datacollection 服务负责系统快照数据的接收与写入。&lt;/p&gt;
&lt;p&gt;　　3. 接口层(api)： 这一层是系统的api服务网关。&lt;/p&gt;
&lt;p&gt;　　4. web层(web)： web层是系统提供的web服务。通过配置平台提供的web服务界面，用户可以进行资源的操作。&lt;/p&gt;


&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181209181505427-1803109669.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　1. Zookeeper作为配置中心，利用Admin Server推送配置到Zookeeper，Zookeeper再把配置同步到各个服务的本地。&lt;/p&gt;
&lt;p&gt;　　2. Zookeeper作为服务中心，服务启动时自上报IP端口到Zookeeper，Zookeeper把各个服务的访问地址同步到各个服务本地。&lt;/p&gt;
&lt;p&gt;　　3. Zookeeper Node Watch机制：配置或服务地址更新，都将同步到各个服务本地。&lt;/p&gt;
&lt;p&gt;　　4. Web只通过ajax与Web Server交互，Web Server与Api Server交互，Api Server和各个业务场景模块、资源管理模块交互。&lt;/p&gt;


&lt;p&gt;　　&lt;a href=&quot;http://cmdb.erikxu.net&quot; target=&quot;_blank&quot;&gt;http://cmdb.erikxu.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　当前的CMDB基于web pack打包的js文件比较大，第一次加载会比较慢。&lt;/p&gt;
&lt;p&gt;　　服务器在香港，有可能会稍有延迟。&lt;/p&gt;
&lt;p&gt;　　站点做了流量控制，一个ip每秒100次，一个ip每天100000次，如果接收到“Too Many Requests”的错误，请稍后再试。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181216023031260-237745694.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;图1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181216023200826-792327984.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　0. 环境准备&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;
&lt;td&gt;操作系统&lt;/td&gt;
&lt;td&gt;IP&lt;/td&gt;
&lt;td&gt;说明&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;master&lt;/td&gt;
&lt;td&gt;CentOS 7&lt;/td&gt;
&lt;td&gt;192.168.132.130&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;k8s master&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;node&lt;/td&gt;
&lt;td&gt;CentOS 7&lt;/td&gt;
&lt;td&gt;192.168.132.136&lt;/td&gt;
&lt;td&gt;k8s node&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;db&lt;/td&gt;
&lt;td&gt;CentOS 7&lt;/td&gt;
&lt;td&gt;192.168.132.139&lt;/td&gt;
&lt;td&gt;数据库服务器，安装mongodb、redis、zookeeper&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;registry&lt;/td&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;镜像仓库（可选），可使用公有云仓库，可自建仓库&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;







&lt;p&gt;　　1. 安装mongodb（db服务器，docker安装，版本4.0.4）&lt;/p&gt;
&lt;p&gt;　　docker pull mongo:4.0.4 &lt;/p&gt;
&lt;p&gt;　　mkdir -p /opt/mongo&lt;/p&gt;
&lt;p&gt;　　docker run --name mongo -v /opt/mongo:/data/db -d -p 27017:27017 mongo:4.0.4&lt;/p&gt;

&lt;p&gt;　　2. 安装redis（db服务器，docker安装，版本5.0.2）&lt;/p&gt;
&lt;p&gt;　　docker pull redis:5.0.2&lt;/p&gt;
&lt;p&gt;　　mkdir -p /opt/redis&lt;/p&gt;
&lt;p&gt;　　docker run --name redis -v /opt/redis:/data -d -p 6379:6379 redis:5.0.2 redis-server --requirepass cc&lt;/p&gt;

&lt;p&gt;　　3. 安装zookeeper（db服务器，docker安装，版本3.4.13）&lt;/p&gt;
&lt;p&gt;　　docker pull zookeeper:3.4.13&lt;/p&gt;
&lt;p&gt;　　mkdir -p /opt/zookeeper &lt;/p&gt;
&lt;p&gt;　　docker run --name zookeeper -v /opt/zookeeper:/data -d -p 2181:2181 zookeeper:3.4.13&lt;/p&gt;

&lt;p&gt;　　4. 配置mongodb（db服务器）&lt;/p&gt;
&lt;p&gt;　　docker exec -it mongo /bin/bash&lt;/p&gt;
&lt;p&gt;　　mongo&lt;/p&gt;
&lt;p&gt;　　use cmdb&lt;/p&gt;
&lt;p&gt;　　db.createUser({user: &quot;cc&quot;,pwd: &quot;cc&quot;,roles: [ { role: &quot;readWrite&quot;, db: &quot;cmdb&quot; } ]})&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181209192136589-1891292875.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　5. 源码编译&lt;/p&gt;
&lt;p&gt;　　可以按照&lt;a href=&quot;https://github.com/Tencent/bk-cmdb/blob/master/docs/overview/source_compile.md&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;进行编译，我这里直接使用&lt;a href=&quot;http://bkopen-1252002024.file.myqcloud.com/cmdb/cmdb.tar.gz&quot; rel=&quot;nofollow&quot;&gt;可执行文件（linux）&lt;/a&gt;，版本3.1.0&lt;/p&gt;

&lt;p&gt;　　6. 下载可执行文件，并解压到k8s的node节点上，在node节点上直接打docker镜像（单node，不使用镜像仓库）&lt;/p&gt;
&lt;p&gt;　　cd /root&lt;/p&gt;
&lt;p&gt;　　tar -zvxf cmdb.tar.gz -C /root&lt;/p&gt;

&lt;p&gt;　　7. 初始化配置文件（k8s node节点）&lt;/p&gt;
&lt;p&gt;　　cd /root/cmdb&lt;/p&gt;
&lt;p&gt;　　python init.py --discovery 192.168.132.139:2181 --database cmdb --redis_ip 192.168.132.139 --redis_port 6379 --redis_pass cc --mongo_ip 192.168.132.139 --mongo_port 27017 --mongo_user cc --mongo_pass cc --blueking_cmdb_url http://127.0.0.1:8083 --listen_port 8083&lt;/p&gt;
&lt;p&gt;　　上述指令根据实际填写&lt;/p&gt;

&lt;p&gt;　　8. 调整配置文件（k8s node节点）&lt;/p&gt;
&lt;p&gt;　　cd /root/cmdb/cmdb_adminserver/configures&lt;/p&gt;
&lt;p&gt;　　a. 修改html_root&lt;/p&gt;
&lt;p&gt;　　vi webserver.conf&lt;/p&gt;
&lt;p&gt;　　把html_root=/root/cmdb/web修改为html_root=/cmdb_webserver/web&lt;/p&gt;

&lt;p&gt;　　b. 修改mongo连接串支持mongo 3.6以上版本（可选）&lt;/p&gt;
&lt;p&gt;　　由于MongoDB 从3.6开始更改了默认加密方式，所以如果安装的MongoDB的版本大于等于3.6。&lt;/p&gt;
&lt;p&gt;　　需要手动将configures中&lt;span&gt;&lt;em&gt;&lt;strong&gt;每个配置文件中MongoDB的配置&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;项中增加mechanism=SCRAM-SHA-1&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181209212708346-1487113363.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　9. 启动Admin Server，并把配置文件写入Zookeeper（k8s node节点）&lt;/p&gt;
&lt;p&gt;　　cd /root/cmdb/cmdb_adminserver/&lt;/p&gt;
&lt;p&gt;　　chmod +x start.sh&lt;/p&gt;
&lt;p&gt;　　./start.sh&lt;/p&gt;
&lt;p&gt;　　curl -X POST -H 'Content-Type:application/json' -H 'BK_USER:migrate' -H 'HTTP_BLUEKING_SUPPLIER_ID:0' http://192.168.132.138:60004/migrate/v3/migrate/community/0&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181209213733430-1523474009.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　10. 拷贝web目录到cmdb_webserver目录（k8s node节点）&lt;/p&gt;
&lt;p&gt;　　cp -rf /root/cmdb/web /root/cmdb/cmdb_webserver/web&lt;/p&gt;

&lt;p&gt;　　11. 把可执行程序打包成docker镜像（k8s node节点）&lt;/p&gt;
&lt;p&gt;　　a. start.sh样例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#!/bin/&lt;span&gt;bash

set &lt;/span&gt;-&lt;span&gt;e

# get local IP.
localIp&lt;/span&gt;=&lt;span&gt;`python ip.py`

# get zookeeper path from environment variables 
zookeeperPath&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1:2181&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$ZOOKEEPER_PATH&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
    zookeeperPath&lt;/span&gt;=&lt;span&gt;$ZOOKEEPER_PATH
&lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;

# set execute 
&lt;/span&gt;&lt;span&gt;chmod&lt;/span&gt; +&lt;span&gt;x cmdb_apiserver
.&lt;/span&gt;/cmdb_apiserver --addrport=${localIp}:&lt;span&gt;8080&lt;/span&gt; --logtostderr=&lt;span&gt;true&lt;/span&gt; --v=&lt;span&gt;3&lt;/span&gt; --regdiscv=${zookeeperPath}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　b. Dockerfile样例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;FROM&lt;/span&gt; centos:7.6.1810
&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; . /cmdb_apiserver
&lt;/span&gt;&lt;span&gt;WORKDIR&lt;/span&gt;&lt;span&gt; /cmdb_apiserver
&lt;/span&gt;&lt;span&gt;EXPOSE&lt;/span&gt; 8080&lt;span&gt;/tcp
&lt;/span&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; chmod +x start.sh
&lt;/span&gt;&lt;span&gt;ENTRYPOINT&lt;/span&gt; ./start.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　在k8s的node节点上构建镜像&lt;/p&gt;
&lt;p&gt;　　docker build -t cmdb-apiserver:3.1.0 .&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181209233630119-1214299232.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　如果不想自己打镜像，可以直接使用打好的镜像：&lt;a href=&quot;https://console.cloud.tencent.com/tke/registry/qcloud/default?rid=1&quot; target=&quot;_blank&quot;&gt;https://console.cloud.tencent.com/tke/registry/qcloud/default?rid=1&lt;/a&gt;，搜索erik_xu/cmdb：&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181216011347405-779642119.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　12. 执行yaml脚本完成部署（k8s master节点）&lt;/p&gt;
&lt;p&gt;　　yaml样例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: cmdb-apiserver
  labels:
    app: cmdb-apiserver
  namespace: default
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: cmdb-apiserver
    spec:
      nodeSelector:
        kubernetes.io/role: node
      containers:
      - name: cmdb-apiserver
        image: cmdb-apiserver:3.1.0
        env:
        - name: ZOOKEEPER_PATH
          value: 192.168.132.139:2181
        ports:
        - containerPort: 8080

---

kind: Service
apiVersion: v1
metadata:
  name: cmdb-apiserver
  labels:
    app: cmdb-apiserver
  namespace: default
spec:
  selector:
    app: cmdb-apiserver
  ports:
  - name: cmdb-apiserver
    targetPort: 8080
    port: 8080
    protocol: TCP
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　把环境变量ZOOKEEPER_PATH的值改成对应的Zookeeper地址，执行脚本完成部署：&lt;/p&gt;
&lt;p&gt;　　kubectl create -f /root/yamls/all-in-one.yaml&lt;/p&gt;
&lt;p&gt;　　yaml地址：&lt;a href=&quot;https://github.com/ErikXu/bk-cmdb-kubernetes-deploy/blob/master/yamls/all-in-one.yaml&quot; target=&quot;_blank&quot;&gt;https://github.com/ErikXu/bk-cmdb-kubernetes-deploy/blob/master/yamls/all-in-one.yaml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181216023429127-1448244760.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181216023533849-91811824.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;em&gt;&lt;strong&gt;注：cmdb只有web server需要外部访问，因此，只有web server通过node port的方式映射到虚拟机上，yaml文件里的映射端口是30000，可以根据实际调整。&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt; 　　Zookeeper在CMDB充当了配置管理以及服务注册发现的重要角色，因此，我们有必要去了解它。&lt;/p&gt;

&lt;p&gt;　　使用zkCli连接容器中的Zookeeper&lt;/p&gt;
&lt;p&gt;　　docker run -it --rm --link zookeeper:zookeeper zookeeper:3.4.13 zkCli.sh -server zookeeper&lt;/p&gt;

&lt;p&gt;　　查看Zookeeper目录&lt;/p&gt;
&lt;p&gt;　　ls /&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181216053420268-1839002564.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　发现有一个目录cc，但是无权限查看&lt;/p&gt;
&lt;p&gt; 　　ls /cc&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181216053508958-663172983.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　查看Acl&lt;/p&gt;
&lt;p&gt;　　getAcl /cc&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181216053603857-1866033561.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　使用帐号密码认证，可以看到cc目录里的内容&lt;/p&gt;
&lt;p&gt;　　addauth digest cc:3.0#bkcc&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181216054418613-1613339135.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　帐号密码从CMDB的&lt;a href=&quot;https://github.com/Tencent/bk-cmdb/blob/master/src/common/zkclient/zkclient.go&quot; target=&quot;_blank&quot;&gt;源码&lt;/a&gt;取得&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181216055415143-851607795.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　找到配置文件的目录&lt;/p&gt;
&lt;p&gt;　　ls /cc/services/config&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181216054629143-1841005176.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　查看其中一个配置文件&lt;/p&gt;
&lt;p&gt;　　get /cc/services/config/webserver&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181216054800667-805823886.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　查看服务注册目录&lt;/p&gt;
&lt;p&gt;　　ls /cc/services/endpoints&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181216054917369-1341305704.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　查看其中一个服务注册内容，可以看到它自上报的ip及端口&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/182190/201812/182190-20181216055042850-2217743.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　&lt;a href=&quot;https://github.com/ErikXu/bk-cmdb-kubernetes-deploy&quot; target=&quot;_blank&quot;&gt;https://github.com/ErikXu/bk-cmdb-kubernetes-deploy&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 15 Dec 2018 22:05:00 +0000</pubDate>
<dc:creator>编程玩家</dc:creator>
<og:description>蓝鲸CMDB 蓝鲸配置平台（蓝鲸CMDB）是一个基于运维场景设计的企业配置管理服务。主要功能： 1. 拓扑化的主机管理：主机基础属性、主机快照数据、主机归属关系管理 2. 组织架构管理：可扩</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Erik_Xu/p/10092028.html</dc:identifier>
</item>
<item>
<title>Python Unittest - 根据不同测试环境跳过用例详解 - 深圳-逸遥</title>
<link>http://www.cnblogs.com/snailrunning/p/10125596.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/snailrunning/p/10125596.html</guid>
<description>&lt;p&gt;本文章会讲述以下几个内容：&lt;br/&gt;1、Unittest 如何跳过用例&lt;br/&gt;2、如何使用sys.argv&lt;br/&gt;3、自动化测试项目中如何一套代码多套环境运行&lt;/p&gt;

&lt;h3 id=&quot;一unittest跳过用例&quot;&gt;一、Unittest跳过用例&lt;/h3&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;@unittest.skip(reason) ， 直接跳过被装饰的用例 ，reason用于填写跳过用例的原因&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;@unittest.skipIf(condition, reason) ， condition 如果为真，跳过被装饰的用例，reason用于填写跳过用例的原因&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;@unittest.skipUnless(condition, reason) ， condition如果为假，跳过被装饰的用例，reason用于填写跳过用例的原因&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;test_case_skip.py&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# encoding:utf8

import unittest

class SkipExample(unittest.TestCase):

    @unittest.skip('用例 1 无条件跳过')
    def test_case_one(self):
        print('---用例 1 ---')

    @unittest.skipIf(2 &amp;gt; 1, '条件为True ，用例2 跳过')
    def test_case_two(self):
        print('---用例 2  ---')

    @unittest.skipUnless(2 &amp;lt; 1, '条件为False, 用例3 跳过')
    def test_case_three(self):
        print('---用例 3  ---')


if __name__ == '__main__':
    unittest.main(verbosity=2)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;test_case_one (__main__.SkipExample) ... skipped '用例 1 无条件跳过'
test_case_two (__main__.SkipExample) ... skipped '条件为True ，用例2 跳过'
test_case_three (__main__.SkipExample) ... skipped '条件为False, 用例3 跳过'&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;二如何使用sys.argv&quot;&gt;二、如何使用sys.argv&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;sys.argv 是一个数组 第一个元素是程序本身路径&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;sys.argv 实现从程序外部向程序传递参数。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;how_to_use_argv.py&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#encoding:utf8

from sys import argv
print('argv是一个数组：',argv)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用命令行运行上述脚本，外部传入参数：1 2 3 4&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python how_to_use_argv.py 1 2 3 4&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;argv是一个数组： ['how_to_use_argv.py', '1', '2', '3', '4']&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;小结&quot;&gt;小结：&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;sys.argv 实现从程序外部向程序传递参数&lt;/li&gt;
&lt;li&gt;传入的第一个参数为脚本文件名&lt;/li&gt;
&lt;li&gt;传入程序的每一个参数以空格 隔开&lt;/li&gt;
&lt;li&gt;传入程序的参数均以字符串的类型存储，命令行中不需要加引号&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;三自动化测试项目中如何一套代码多套环境运行&quot;&gt;三、自动化测试项目中如何一套代码多套环境运行&lt;/h3&gt;
&lt;h4 id=&quot;需求1一套代码可以测试多个环境不希望每次测试不同环境的时候都要去改代码里面的url希望把代码里面的url参数化&quot;&gt;需求1：一套代码可以测试多个环境，不希望每次测试不同环境的时候都要去改代码里面的URL，希望把代码里面的URL参数化&lt;/h4&gt;
&lt;p&gt;以UI自动化为例：&lt;/p&gt;
&lt;p&gt;test_multiple_env.py&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# encoding:utf8

from selenium import webdriver
from sys import argv
import unittest
from time import sleep


class TestEnv(unittest.TestCase):

    def setUp(self):
        self.url = argv[-1]
        print(self.url)
        self.driver = webdriver.Chrome()

    def test_load_page(self):
        self.driver.get(self.url)
        sleep(10)


if __name__ == '__main__':
    suit = unittest.TestSuite()
    suit.addTest(TestEnv('test_load_page'))
    runner = unittest.TextTestRunner()
    runner.run(suit)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行命令行：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python test_multiple_env.py https://www.baidu.com/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;打开浏览器，导航到百度页面&lt;br/&gt;&lt;img src=&quot;https://wx1.sinaimg.cn/mw690/6e01037bgy1fy813jjil2j20pi0oiq3t.jpg&quot; alt=&quot;百度首页&quot;/&gt;&lt;/p&gt;

&lt;h4 id=&quot;需求2有些用例不能在预发布环境或者生产环境运行怎么跳过该用例&quot;&gt;需求2：有些用例不能在预发布环境或者生产环境运行，怎么跳过该用例&lt;/h4&gt;
&lt;p&gt;UI自动化为例：&lt;/p&gt;
&lt;p&gt;test_multiple_env_skip.py&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# encoding:utf8

from selenium import webdriver
from sys import argv
import unittest
from time import sleep

URL = argv[-1]
print('argv[-1] : ', URL)


class TestEnv(unittest.TestCase):

    def setUp(self):
        self.driver = webdriver.Chrome()

    @unittest.skipIf(URL != 'https://www.baidu.com' ,'不是百度首页的URL，跳过用例test_load_page')
    def test_load_page(self):
        self.driver.get(URL)
        sleep(10)


if __name__ == '__main__':
    suit = unittest.TestSuite()
    suit.addTest(TestEnv('test_load_page'))
    runner = unittest.TextTestRunner(verbosity=2)
    runner.run(suit)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行命令行：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python test_multiple_env_skip.py www.testclass.com&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;argv[-1] : www.baidu.com
test_load_page (__main__.TestEnv) ... skipped '不是百度首页的URL，跳过用例test_load_page'

----------------------------------------------------------------------
Ran 1 test in 0.001s

OK (skipped=1)&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;小结-1&quot;&gt;小结&lt;/h4&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;从上面的例子可以了解，如何通过sys.argv传入环境参数，虽然上文是用百度首页作为例子，但同时引出，我们在做自动化测试时候，实现一套代码多环境运行思路&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;命令行带参数启动脚本，在Unittest中，可以实现不同的测试环境可以跳过用例&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;github-源码地址&quot;&gt;Github 源码地址:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SEtester/how_to_run_test_case&quot; class=&quot;uri&quot;&gt;https://github.com/SEtester/how_to_run_test_case&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 15 Dec 2018 19:26:00 +0000</pubDate>
<dc:creator>深圳-逸遥</dc:creator>
<og:description>本文章会讲述以下几个内容： 1、Unittest 如何跳过用例 2、如何使用sys.argv 3、自动化测试项目中如何一套代码多套环境运行 一、Unittest跳过用例 @unittest.skip(</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/snailrunning/p/10125596.html</dc:identifier>
</item>
<item>
<title>记一次SSM项目小结（一） - 段小辉</title>
<link>http://www.cnblogs.com/xiaohuiduan/p/10125571.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuiduan/p/10125571.html</guid>
<description>&lt;div class=&quot;preview html_preview&quot; readability=&quot;58.703393380813&quot;&gt;

&lt;p&gt;&lt;span class=&quot;tag blue label&quot;&gt;ssm框架&lt;/span&gt; &lt;span class=&quot;tag blue label&quot;&gt;环境配置&lt;/span&gt; &lt;span class=&quot;tag blue label&quot;&gt;服务器配置&lt;/span&gt; &lt;span class=&quot;tag blue label&quot;&gt;解决方法&lt;/span&gt; &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;拦截器重定向到localhost&lt;/li&gt;
&lt;li&gt;nginx和tomcat中session失效&lt;/li&gt;
&lt;li&gt;mybatis的xml文件不生效&lt;/li&gt;
&lt;li&gt;数据库用户创建、权限、及远程连接&lt;/li&gt;
&lt;li&gt;pagehelper配置报错&lt;/li&gt;
&lt;li&gt;百度情感倾向分析接口使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;拦截器重定向的问题，拦截器重定向到到了localhost&lt;/h3&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;当把代码上传到服务器后，登录拦截器进行重定向，然后重定向到了localhost&lt;/p&gt;
&lt;p&gt;解决办法：将重定向为绝对网址&lt;/p&gt;

&lt;div class=&quot;story_image_container story_block_image&quot;&gt;
&lt;div class=&quot;story_image&quot;&gt;&lt;img title=&quot;1544881869038&quot; src=&quot;https://img2018.cnblogs.com/blog/1439869/201812/1439869-20181216015545830-1649893354.png&quot; alt=&quot;1544881869038&quot; name=&quot;记一次SSM项目小结（一）/1.png&quot; data-src=&quot;%E8%AE%B0%E4%B8%80%E6%AC%A1SSM%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/1.png&quot;/&gt;&lt;p&gt;1544881869038&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;story_image_container story_block_image&quot;&gt;
&lt;div class=&quot;story_image&quot;&gt;&lt;img title=&quot;1544881921624&quot; src=&quot;https://img2018.cnblogs.com/blog/1439869/201812/1439869-20181216015546213-1278340416.png&quot; alt=&quot;1544881921624&quot; name=&quot;记一次SSM项目小结（一）/2.png&quot; data-src=&quot;%E8%AE%B0%E4%B8%80%E6%AC%A1SSM%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/2.png&quot;/&gt;&lt;p&gt;1544881921624&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;这样的话，拦截器进行重定向就不会重定向到localhost&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;nginx和tomcat之间session的问题&lt;/h3&gt;
&lt;p&gt;不进行session的nginx的文件配置，可以参考以前&lt;a href=&quot;https://www.cnblogs.com/xiaohuiduan/p/9961398.html&quot; target=&quot;_blank&quot;&gt;博客&lt;/a&gt;，如果仅仅进行这样配置，session会失效&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css hljs&quot; data-info=&quot;css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;server&lt;/span&gt; {
    listen 80;
    server_name 域名;
        // 文件地址
    root /usr/tomcat/apache-tomcat-8.5.35/webapps/xxx;
    charset utf-8;
    location / {
     // 转发地址
     proxy_pass &lt;span class=&quot;hljs-attribute&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;hljs-number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;/xxx/;
 }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于session的配置，我是参考这篇博主的&lt;a href=&quot;%22https://blog.csdn.net/joyous/article/details/79966593%22&quot; target=&quot;_blank&quot;&gt;博客&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css hljs&quot; data-info=&quot;css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;server&lt;/span&gt; {
    listen 80;
    server_name hole.weno.cc;
    root /usr/tomcat/apache-tomcat-8.5.35/webapps/yibanHole;
    charset utf-8;
    location / {
     proxy_pass &lt;span class=&quot;hljs-attribute&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;hljs-number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;/yibanHole/;
     proxy_cookie_path /yibanHole /;

 }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进行这样配置后，网站的session就没有问题了&lt;/p&gt;

&lt;h3&gt;mybatis中mapper的xml文件不生效的问题&lt;/h3&gt;
&lt;p&gt;这个问题真的是气死我了(ノ▼Д▼)ノ，当我将mapper的xml文件进行修改的时候，文件配置总是不生效，到后面才发现，在源文件中，xml文件进行了改变，但是在输出文件夹中，文件就没有进行改变，文件情况大概就是这样。&lt;/p&gt;

&lt;div class=&quot;story_image_container story_block_image&quot;&gt;
&lt;div class=&quot;story_image&quot;&gt;&lt;img title=&quot;1544885690933&quot; src=&quot;https://img2018.cnblogs.com/blog/1439869/201812/1439869-20181216015546900-1089520338.png&quot; alt=&quot;1544885690933&quot; name=&quot;记一次SSM项目小结（一）/3.png&quot; data-src=&quot;%E8%AE%B0%E4%B8%80%E6%AC%A1SSM%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/3.png&quot;/&gt;&lt;p&gt;1544885690933&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;这时候，就emm手动更新下吧。


&lt;h3&gt;数据库的用户的创建，权限的设定，以及远程连接的设置&lt;/h3&gt;
&lt;p&gt;个人对数据库不是很了解，所以就权当是记一份笔记了。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先，先是创建创建一个用户&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-mysql&quot; data-info=&quot;mysql&quot;&gt; CREATE USER 'username'@'host' IDENTIFIED BY 'password';
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;username：创建的用户名&lt;/li&gt;
&lt;li&gt;host：指令登录的主机：比如说&lt;code&gt;localhost&lt;/code&gt;,如果你想远程连接的话，可以使用通配符&lt;code&gt;%&lt;/code&gt;这样，就可以从任意主机登录了。&lt;/li&gt;
&lt;li&gt;password：登录密码，可以为空。&lt;/li&gt;
&lt;/ul&gt;&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;然后，进行权限的设置&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-mysql&quot; data-info=&quot;mysql&quot;&gt; GRANT privileges ON databasename.tablename TO 'username'@'host'
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;privileges：表示用户操作的权限：比如说select,insert，授予所有权限可以使用&lt;code&gt;ALL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;databasename：数据库的名字，可以使用通配符&lt;code&gt;*&lt;/code&gt;代表所有&lt;/li&gt;
&lt;li&gt;tablename：表名，可以使用通配符&lt;code&gt;*&lt;/code&gt;代表所有&lt;/li&gt;
&lt;li&gt;username和host：就是前面创建的。&lt;/li&gt;
&lt;/ul&gt;&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;最后，进行刷新&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;xiaoshujiang_code_container&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-mysql&quot; data-info=&quot;mysql&quot;&gt; flush privileges; 
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;关于mybatis分页的配置问题&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;pagehelper&lt;/code&gt;进行分页，但是报错如下&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java hljs&quot; data-info=&quot;java&quot;&gt;Bean must be of &lt;span class=&quot;hljs-string&quot;&gt;'org.apache.ibatis.plugin.Interceptor'&lt;/span&gt; type 
Inspection info:&lt;span class=&quot;hljs-function&quot;&gt;Checks value types &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; Spring &lt;span class=&quot;hljs-title&quot;&gt;injections&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(properties &amp;amp; constructor arguments)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;spring-mybatis.xml的部分文件配置如下，就是参考上一篇博客。&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml hljs&quot; data-info=&quot;xml&quot;&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;sqlSessionFactory&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataSource&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;mapperLocations&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;classpath:cc/weno/mapper/*.xml&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;

    
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.github.pagehelper.PageHelper&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;properties&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    
                        dialect=mysql
                        offsetAsPageNum=true
                        reasonable=true
                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;configuration&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.apache.ibatis.session.Configuration&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
            
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;mapUnderscoreToCamelCase&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
            
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;logImpl&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.apache.ibatis.logging.log4j.Log4jImpl&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决方法就是，emm，改变&lt;code&gt;pagehelper&lt;/code&gt;的版本。&lt;/p&gt;
&lt;p&gt;使用4.1.6的版本，5.1.2会出现这个错误【其他版本未知】。&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml hljs&quot; data-info=&quot;xml&quot;&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.pagehelper&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;pagehelper&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.1.6&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;百度情感倾向分析接口使用&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://ai.baidu.com/docs#/NLP-API/57b9b630&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，我使用的是一个HttpRequests的jar包进行开发的。&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml hljs&quot; data-info=&quot;xml&quot;&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.kevinsawicki&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;http-request&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;5.6&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发送数据关键的代码如下&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java hljs&quot; data-info=&quot;java&quot;&gt;JSONObject jsonObject = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JSONObject();
jsonObject.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt;,text);



HttpRequest request = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HttpRequest(BaiduApiMsg.TEXT_URI+BaiduApiMsg.BAIDU_TOKEN,&lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;);

request.contentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;GBK&quot;&lt;/span&gt;);

request.send(jsonObject.toJSONString());
String getResult = request.body();

&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里面，一定要发送&lt;code&gt;json格式&lt;/code&gt;的数据【被这个坑了几个小时，╮(╯▽╰)╭】，不然就会返回&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-json hljs&quot; data-info=&quot;json&quot;&gt;{
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;error_code&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;282004&lt;/span&gt;,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;error_msg&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;invalid parameter(s)&quot;&lt;/span&gt;,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;log_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3232131231&lt;/span&gt;
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这次主要是记一下开发项目遇到的比较坑的问题，以及要注意的地方。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如果只剩下最后的方法，那必然就是最好的方法&lt;/em&gt; &lt;em&gt;——《将夜》&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 15 Dec 2018 17:56:00 +0000</pubDate>
<dc:creator>段小辉</dc:creator>
<og:description>记一次SSM项目小结（一） ssm框架 环境配置 服务器配置 解决方法 拦截器重定向到localhost nginx和tomcat中session失效 mybatis的x</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuiduan/p/10125571.html</dc:identifier>
</item>
<item>
<title>数据结构学习-AVL平衡树 - cyrio</title>
<link>http://www.cnblogs.com/cyrio/p/10125546.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cyrio/p/10125546.html</guid>
<description>&lt;p&gt;&lt;span&gt;环境：C++ 11 + win10&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;IDE：Clion 2018.3&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;AVL平衡树是在BST二叉查找树的基础上添加了平衡机制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们把平衡的BST认为是任一节点的左子树和右子树的高度差为-1,0,1中的一种情况，即不存在相差两层及以上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所谓平衡机制就是BST在理想情况下搜索复杂度是o(logn)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是如果在（存在某一节点，该节点的左子树的高度与右子树的高度差&amp;gt;1）这种状况下，复杂度会超过o(logn)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;举个极端的例子如加入1,2,3,4，BST就退化为一个线性的链表，复杂度变成了o(n)&lt;/p&gt;
&lt;p&gt;为了避免这种情况，我们在BST中引入平衡操作（旋转操作），使得BST始终不存在左右子树超过1高度差的节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1523532/201812/1523532-20181216004628249-93320298.png&quot; alt=&quot;&quot; width=&quot;730&quot; height=&quot;225&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本次代码基于我的另一篇博客的基础之上，有需要可以翻看 https://www.cnblogs.com/cyrio/p/10118132.html&lt;/p&gt;
&lt;p&gt;平衡机制主要通过反转完成，经过归纳，可能出现以下四种不平衡的情况：LL、LR、RL、RR&lt;/p&gt;
&lt;p&gt;L=left     R=right&lt;/p&gt;
&lt;p&gt;我们将不平衡点设为X点，以LR为例，第一个L表示X点的左子树比右子树层数多（&amp;gt;1），第二个R表示多出的那部分在X点的左子树的右子树。（不管他是在X的左子树的右子树的左右哪边，都称为LR）&lt;/p&gt;

&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1523532/201812/1523532-20181216005320442-1097446022.png&quot; alt=&quot;&quot; width=&quot;1296&quot; height=&quot;212&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1523532/201812/1523532-20181216005352574-507568961.png&quot; alt=&quot;&quot; width=&quot;1297&quot; height=&quot;212&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 接下来我们以LL、LR、RR、RL四种情况讨论。&lt;/p&gt;
&lt;p&gt;1、LL：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1523532/201812/1523532-20181216005502619-1915039733.png&quot; alt=&quot;&quot; width=&quot;705&quot; height=&quot;228&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通俗的讲就是把K2从K1那扯下来，然后把Y移到K2的左子树，最后把K2移到K1的右子树。&lt;/p&gt;
&lt;p&gt;2、RR：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1523532/201812/1523532-20181216005657488-1348783217.png&quot; alt=&quot;&quot; width=&quot;703&quot; height=&quot;227&quot;/&gt;&lt;/p&gt;
&lt;p&gt;与LL同理，把K1先扯下来，再把Y接到K1的右侧，再把K1作为左子树接到K2。&lt;/p&gt;
&lt;p&gt; 3、LR：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1523532/201812/1523532-20181216005757581-1810012909.png&quot; alt=&quot;&quot; width=&quot;1203&quot; height=&quot;232&quot;/&gt;&lt;/p&gt;
&lt;p&gt;LR需要先做一次RR再做一次LL：&lt;/p&gt;
&lt;p&gt;先把K1从K2那扯下来，让K2和K3连，然后把B作为K1的右子树，再把K1连到K2的左子树上。&lt;/p&gt;
&lt;p&gt;然后再做LL，把K3从K2上面扯下来，让C作为K3的左子树，再把K3连到K2的右子树。&lt;/p&gt;
&lt;p&gt;4、RL：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1523532/201812/1523532-20181216010044378-872967818.png&quot; alt=&quot;&quot; width=&quot;1205&quot; height=&quot;232&quot;/&gt;&lt;/p&gt;
&lt;p&gt;先LL再RR，与LR同理。&lt;/p&gt;
&lt;p&gt;以上是主要思想的分析，除了旋转操作，我们还需要添加新的方法：&lt;/p&gt;
&lt;p&gt;1、求树的高度：height方法&lt;/p&gt;
&lt;p&gt;2、求某节点的左子树和右子树的高度差 ：Diff方法      &lt;/p&gt;
&lt;p&gt;3、一个对整个树进行判断，对里面的X节点进行对应操作：Balance方法&lt;/p&gt;
&lt;p&gt;同时AVL中的Insert（插入某一节点）的方法与BST中也略有不同，需要注意的是AVL种的__Insert（PS：带&quot;__&quot;的表示私有内部接口）的参数中第一个为bstNode&amp;lt;T&amp;gt; * &lt;span&gt;&amp;amp;&lt;/span&gt; root （&lt;span&gt;需要&amp;amp;引用&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;具体代码如下：（此代码为完整代码，可以直接复制进自己的项目查看效果）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;myBST.h&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#ifndef TEST1_MYBST_H
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; TEST1_MYBST_H&lt;span&gt;

#include &lt;/span&gt;&amp;lt;iomanip&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bstNode.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;vector&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;deque&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;iostream&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;algorithm&amp;gt;
&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;

template &lt;/span&gt;&amp;lt;typename T&amp;gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; myBST{
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
    bstNode&lt;/span&gt;&amp;lt;T&amp;gt; * root =&lt;span&gt; nullptr;
    bstNode&lt;/span&gt;&amp;lt;T&amp;gt; * __search(bstNode&amp;lt;T&amp;gt; * root , &lt;span&gt;const&lt;/span&gt; T &amp;amp;&lt;span&gt;key){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (nullptr ==&lt;span&gt; root)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nullptr;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (key == root-&amp;gt;&lt;span&gt;data)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; root;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (key &amp;lt; root-&amp;gt;&lt;span&gt;data)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; __search(root-&amp;gt;&lt;span&gt;left, key);
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; __search(root-&amp;gt;&lt;span&gt;right, key);
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找关键字是否存在&lt;/span&gt;
    bstNode&amp;lt;T&amp;gt; * __treeMin(bstNode&amp;lt;T&amp;gt; * root , bstNode&amp;lt;T&amp;gt; * &amp;amp;&lt;span&gt;parent){
        bstNode&lt;/span&gt;&amp;lt;T&amp;gt; * curr =&lt;span&gt; root;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(curr-&amp;gt;left!=&lt;span&gt; nullptr){
            parent &lt;/span&gt;=&lt;span&gt; curr;
            curr &lt;/span&gt;= curr-&amp;gt;&lt;span&gt;left;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;  curr;
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回最小节点（一路向左）&lt;/span&gt;
    bstNode&amp;lt;T&amp;gt; * __Insert(bstNode&amp;lt;T&amp;gt; * &amp;amp;root, &lt;span&gt;const&lt;/span&gt; T &amp;amp;&lt;span&gt;key){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (nullptr ==&lt;span&gt; root)
        {
            root &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; bstNode&amp;lt;T&amp;gt;&lt;span&gt;(key);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; root;
        }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;递归返回条件&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (key &amp;lt; root-&amp;gt;&lt;span&gt;data)
        {
            root&lt;/span&gt;-&amp;gt;left = __Insert(root-&amp;gt;left,key);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;递归左子树
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;balance operation&lt;/span&gt;
            root = __Balance(root);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;平衡操作包含了四种旋转&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (key&amp;gt;root-&amp;gt;&lt;span&gt;data)
        {
            root&lt;/span&gt;-&amp;gt;right = __Insert(root-&amp;gt;right,key);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;递归右子树
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;balance operation&lt;/span&gt;
            root = __Balance(root);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;平衡操作包含了四种旋转&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; root;
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;插入指定值&lt;/span&gt;
    &lt;span&gt;bool&lt;/span&gt; __Delete(&lt;span&gt;const&lt;/span&gt; T &amp;amp;&lt;span&gt;key){
        &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; found = &lt;span&gt;false&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储有没有找到key的变量&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(isEmpty()){
            cerr&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BST为空&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        bstNode&lt;/span&gt;&amp;lt;T&amp;gt; * curr =&lt;span&gt; root;
        bstNode&lt;/span&gt;&amp;lt;T&amp;gt; * parrent =&lt;span&gt; nullptr;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(curr!=&lt;span&gt; nullptr) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (key == curr-&amp;gt;&lt;span&gt;data) {
                found &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                parrent &lt;/span&gt;=&lt;span&gt; curr;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (key &amp;lt; curr-&amp;gt;data) curr = curr-&amp;gt;&lt;span&gt;left;
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; curr = curr-&amp;gt;&lt;span&gt;right;
            }
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;found){
            cerr&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;未找到key！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (parrent == nullptr){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除根节点&lt;/span&gt;
            root =&lt;span&gt; nullptr;
            &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(curr);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
         删除的节点有三种可能：
         1、叶子结点
         2、一个孩子的节点
         3、两个孩子的节点
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (__isLeaf(curr)){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除的点是叶子结点&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(parrent-&amp;gt;left==curr) parrent-&amp;gt;left=&lt;span&gt; nullptr;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; parrent-&amp;gt;right=&lt;span&gt; nullptr;
            &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(curr);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(__isNodeWithTwoChild(curr)){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;是两个孩子的节点
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以当前右子树中的最小值取代他&lt;/span&gt;
            bstNode&amp;lt;T&amp;gt; * parrent =&lt;span&gt; curr;
            bstNode&lt;/span&gt;&amp;lt;T&amp;gt; * tmp = __treeMin(curr-&amp;gt;&lt;span&gt;right,parrent);
            curr&lt;/span&gt;-&amp;gt;data = tmp-&amp;gt;&lt;span&gt;data;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(parrent-&amp;gt;right==&lt;span&gt;tmp)
                parrent&lt;/span&gt;-&amp;gt;right==&lt;span&gt; nullptr;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; parrent-&amp;gt;left==&lt;span&gt; nullptr;
            &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(tmp);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;{ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;只有一个孩子的节点&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(curr-&amp;gt;left!=&lt;span&gt; nullptr){
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(curr-&amp;gt;left ==&lt;span&gt; curr){
                    parrent&lt;/span&gt;-&amp;gt;left=curr-&amp;gt;&lt;span&gt;left;
                    &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(curr);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                    parrent&lt;/span&gt;-&amp;gt;right=curr-&amp;gt;&lt;span&gt;right;
                    &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(curr);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(curr-&amp;gt;right!=&lt;span&gt; nullptr){
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(curr-&amp;gt;left ==&lt;span&gt; curr){
                    parrent&lt;/span&gt;-&amp;gt;left=curr-&amp;gt;&lt;span&gt;left;
                    &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(curr);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                    parrent&lt;/span&gt;-&amp;gt;right=curr-&amp;gt;&lt;span&gt;right;
                    &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(curr);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除指定值&lt;/span&gt;
    &lt;span&gt;bool&lt;/span&gt; __isLeaf(bstNode&amp;lt;T&amp;gt; * &lt;span&gt;const&lt;/span&gt; &amp;amp;&lt;span&gt; root){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(root-&amp;gt;left== nullptr &amp;amp;&amp;amp; root-&amp;gt;right== nullptr) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是否是叶子节点&lt;/span&gt;
    &lt;span&gt;bool&lt;/span&gt; __isNodeWithTwoChild(bstNode&amp;lt;T&amp;gt; * &lt;span&gt;const&lt;/span&gt; &amp;amp;&lt;span&gt; root){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(root-&amp;gt;left!= nullptr &amp;amp;&amp;amp; root-&amp;gt;right!= nullptr) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是否有两个孩子&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; __InorderTraversal(bstNode&amp;lt;T&amp;gt; *root,std::vector&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span&gt;result){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(nullptr == root) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        __InorderTraversal(root&lt;/span&gt;-&amp;gt;&lt;span&gt;left,result);
        cout&lt;/span&gt;&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        result.push_back(root&lt;/span&gt;-&amp;gt;&lt;span&gt;data);
        __InorderTraversal(root&lt;/span&gt;-&amp;gt;&lt;span&gt;right,result);
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;中序遍历&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; __PreorderTraversal(bstNode&amp;lt;T&amp;gt; *root,std::vector&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span&gt;result){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(nullptr == root) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        cout&lt;/span&gt;&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        result.push_back(root&lt;/span&gt;-&amp;gt;&lt;span&gt;data);
        __InorderTraversal(root&lt;/span&gt;-&amp;gt;&lt;span&gt;left,result);
        __InorderTraversal(root&lt;/span&gt;-&amp;gt;&lt;span&gt;right,result);
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前序遍历&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; __PostorderTraversal(bstNode&amp;lt;T&amp;gt; *root,std::vector&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span&gt;result){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(nullptr == root) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        __InorderTraversal(root&lt;/span&gt;-&amp;gt;&lt;span&gt;left,result);
        __InorderTraversal(root&lt;/span&gt;-&amp;gt;&lt;span&gt;right,result);
        cout&lt;/span&gt;&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        result.push_back(root&lt;/span&gt;-&amp;gt;&lt;span&gt;data);
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后序遍历&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; __DeleteAllNodes(bstNode&amp;lt;T&amp;gt; *&lt;span&gt;root){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (root == nullptr) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        __DeleteAllNodes(root&lt;/span&gt;-&amp;gt;&lt;span&gt;left);
        __DeleteAllNodes(root&lt;/span&gt;-&amp;gt;&lt;span&gt;right);
        __Delete(root&lt;/span&gt;-&amp;gt;&lt;span&gt;data);
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除所有节点&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; __BFTraversal(vector&amp;lt;T&amp;gt;&amp;amp;&lt;span&gt;result) {
        deque&lt;/span&gt;&amp;lt;bstNode&amp;lt;T&amp;gt; *&amp;gt;&lt;span&gt; TQueue;
        bstNode&lt;/span&gt;&amp;lt;T&amp;gt; *pointer =&lt;span&gt; root;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pointer !=&lt;span&gt; nullptr) {
            TQueue.push_back(pointer);
        }
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;TQueue.empty()) {
            pointer &lt;/span&gt;=&lt;span&gt; TQueue.front();
            TQueue.pop_front();
            cout &lt;/span&gt;&amp;lt;&amp;lt; pointer-&amp;gt;data &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            result.push_back(pointer&lt;/span&gt;-&amp;gt;&lt;span&gt;data);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pointer-&amp;gt;left != nullptr) TQueue.push_back(pointer-&amp;gt;&lt;span&gt;left);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pointer-&amp;gt;right != nullptr) TQueue.push_back(pointer-&amp;gt;&lt;span&gt;right);
        }
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;广度搜索来进行周游&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; __Graph(&lt;span&gt;int&lt;/span&gt; indent,bstNode&amp;lt;T&amp;gt;*&lt;span&gt; root){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(root != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
            __Graph(indent &lt;/span&gt;+ &lt;span&gt;8&lt;/span&gt;, root-&amp;gt;&lt;span&gt;right);
            cout&lt;/span&gt;&amp;lt;&amp;lt;setw(indent)&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&lt;span&gt;endl;
            __Graph(indent &lt;/span&gt;+ &lt;span&gt;8&lt;/span&gt;, root-&amp;gt;&lt;span&gt;left);
        }
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;横着画图的内部接口&lt;/span&gt;
    bstNode&amp;lt;T&amp;gt; *&lt;span&gt; __GetRoot(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; root;
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回根节点的内部接口
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以下为AVL平衡树新加的方法&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; __height(&lt;span&gt;const&lt;/span&gt; bstNode&amp;lt;T&amp;gt;*&lt;span&gt; root){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(root ==&lt;span&gt; nullptr){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; max(__height(root-&amp;gt;left),__height(root-&amp;gt;right))+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;求树的高度&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; __diff(&lt;span&gt;const&lt;/span&gt; bstNode&amp;lt;T&amp;gt;*&lt;span&gt; root){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; __height(root-&amp;gt;left)-__height(root-&amp;gt;&lt;span&gt;right);
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;求节点的高度差（平衡因子）&lt;/span&gt;
    bstNode&amp;lt;T&amp;gt; * __ll__Rotation(bstNode&amp;lt;T&amp;gt; *&lt;span&gt; root){
        bstNode&lt;/span&gt;&amp;lt;T&amp;gt; *&lt;span&gt; tmp;
        tmp &lt;/span&gt;= root-&amp;gt;&lt;span&gt;left;
        root&lt;/span&gt;-&amp;gt;left = tmp-&amp;gt;&lt;span&gt;right;
        tmp&lt;/span&gt;-&amp;gt;right =&lt;span&gt; root;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; tmp;
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;单旋转-左左&lt;/span&gt;
    bstNode&amp;lt;T&amp;gt; * __rr__Rotation(bstNode&amp;lt;T&amp;gt; *&lt;span&gt; root){
        bstNode&lt;/span&gt;&amp;lt;T&amp;gt; *&lt;span&gt; tmp;
        tmp &lt;/span&gt;= root-&amp;gt;&lt;span&gt;right;
        root&lt;/span&gt;-&amp;gt;right = tmp-&amp;gt;&lt;span&gt;left;
        tmp&lt;/span&gt;-&amp;gt;left =&lt;span&gt; root;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; tmp;
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;单旋转-右右&lt;/span&gt;
    bstNode&amp;lt;T&amp;gt; * __lr__Rotation(bstNode&amp;lt;T&amp;gt; *&lt;span&gt; root){
        bstNode&lt;/span&gt;&amp;lt;T&amp;gt; *&lt;span&gt; tmp;
        tmp &lt;/span&gt;= root-&amp;gt;&lt;span&gt;left;
        root&lt;/span&gt;-&amp;gt;left =&lt;span&gt; __rr__Rotation(tmp);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; __ll__Rotation(root);
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;双旋转-左右型，先右后左转（注意此处相反）&lt;/span&gt;
    bstNode&amp;lt;T&amp;gt; * __rl__Rotation(bstNode&amp;lt;T&amp;gt; *&lt;span&gt; root){
        bstNode&lt;/span&gt;&amp;lt;T&amp;gt; *&lt;span&gt; tmp;
        tmp &lt;/span&gt;= root-&amp;gt;&lt;span&gt;right;
        root&lt;/span&gt;-&amp;gt;right =&lt;span&gt; __ll__Rotation(tmp);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; __rr__Rotation(root);
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;双旋转-右左型，先左后右转&lt;/span&gt;
    bstNode&amp;lt;T&amp;gt; * __Balance(bstNode&amp;lt;T&amp;gt; *&lt;span&gt; root){
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; balanceFactor = __diff(root);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;__diff用来计算平衡因子（左右子树高度差）&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (balanceFactor &amp;gt; &lt;span&gt;1&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左子树高于右子树&lt;/span&gt;
&lt;span&gt;        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (__diff(root-&amp;gt;left) &amp;gt; &lt;span&gt;0&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左左外侧&lt;/span&gt;
                root=&lt;span&gt;__ll__Rotation(root);
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左右内侧&lt;/span&gt;
                root=&lt;span&gt;__lr__Rotation(root);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (balanceFactor &amp;lt; -&lt;span&gt;1&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右子树高于左子树&lt;/span&gt;
&lt;span&gt;        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (__diff(root-&amp;gt;right) &amp;gt; &lt;span&gt;0&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右左内侧&lt;/span&gt;
                root=&lt;span&gt;__rl__Rotation(root);
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右右外侧&lt;/span&gt;
                root=&lt;span&gt;__rr__Rotation(root);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; root;
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;平衡的内部操作&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
    myBST(){
        root &lt;/span&gt;=&lt;span&gt; nullptr;
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认构造&lt;/span&gt;
    myBST(vector&amp;lt;T&amp;gt;&lt;span&gt; arr){
        root &lt;/span&gt;=&lt;span&gt; nullptr;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i =&lt;span&gt;0&lt;/span&gt;;i&amp;lt;(T)arr.size();i++&lt;span&gt;){
            Insert(arr[i]);
        }
    }
    myBST(T &lt;/span&gt;* arr,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; len){
        root &lt;/span&gt;=&lt;span&gt; nullptr;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i =&lt;span&gt;0&lt;/span&gt;;i&amp;lt;len;i++&lt;span&gt;){
            __Insert(&lt;/span&gt;*(arr+&lt;span&gt;i));
        }
    }
    &lt;/span&gt;~&lt;span&gt;myBST(){
        bstNode&lt;/span&gt;&amp;lt;T&amp;gt; * curr =&lt;span&gt; root;
        __DeleteAllNodes(curr);
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;析构&lt;/span&gt;
    &lt;span&gt;bool&lt;/span&gt; isEmpty() &lt;span&gt;const&lt;/span&gt;&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; root ==&lt;span&gt; nullptr;
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断树空&lt;/span&gt;
    &lt;span&gt;bool&lt;/span&gt; search(&lt;span&gt;const&lt;/span&gt; T &amp;amp;&lt;span&gt;key){
        bstNode&lt;/span&gt;&amp;lt;T&amp;gt; * temp =&lt;span&gt; __search(root, key);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (temp == nullptr) ? &lt;span&gt;false&lt;/span&gt; : &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找关键字是否存在的对外接口&lt;/span&gt;
    &lt;span&gt;bool&lt;/span&gt; Insert(&lt;span&gt;const&lt;/span&gt; T &amp;amp;&lt;span&gt;key){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; __Insert(root,key);
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;插入节点的外部接口&lt;/span&gt;
    &lt;span&gt;bool&lt;/span&gt; Delete(&lt;span&gt;const&lt;/span&gt; T &amp;amp;&lt;span&gt;key){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; __Delete(key);
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除节点的外部接口&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; InorderTraversal(vector&amp;lt;T&amp;gt;&amp;amp;&lt;span&gt;result){
        __InorderTraversal(root, result);
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;中序遍历的外部接口&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; PreorderTraversal(vector&amp;lt;T&amp;gt;&amp;amp;&lt;span&gt;result){
        __PreorderTraversal(root, result);
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前序遍历的外部接口&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; PostorderTraversal(vector&amp;lt;T&amp;gt;&amp;amp;&lt;span&gt;result){
        __PostorderTraversal(root, result);
    }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后序遍历的外部接口&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; BFTraversal(vector&amp;lt;T&amp;gt;&amp;amp;&lt;span&gt;result){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; __BFTraversal(result);
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;广度搜索外部接口&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; Graph(&lt;span&gt;int&lt;/span&gt; indent,bstNode&amp;lt;T&amp;gt;*&lt;span&gt; root){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; __Graph(indent,root);
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;横着画图的外部接口&lt;/span&gt;
    bstNode&amp;lt;T&amp;gt; *&lt;span&gt; GetRoot(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; __GetRoot();
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回根节点的外部接口&lt;/span&gt;
&lt;span&gt;};

&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;TEST1_MYBST_H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;bstNode.h&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#ifndef TEST1_BSTNODE_H
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; TEST1_BSTNODE_H&lt;span&gt;
template &lt;/span&gt;&amp;lt;typename T&amp;gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; bstNode{
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
    T data;
    bstNode&lt;/span&gt;*&lt;span&gt; left;
    bstNode&lt;/span&gt;*&lt;span&gt; right;
    bstNode(){
        data &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        left &lt;/span&gt;=&lt;span&gt; nullptr;
        right &lt;/span&gt;=&lt;span&gt; nullptr;
    }
    bstNode(T val){
        data &lt;/span&gt;=&lt;span&gt; val;
        left &lt;/span&gt;=&lt;span&gt; nullptr;
        right &lt;/span&gt;=&lt;span&gt; nullptr;
    }
};
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;TEST1_BSTNODE_H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;main.cpp&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
#include &amp;lt;iostream&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;vector&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myBST.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bstNode.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
    vector&lt;/span&gt;&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; &lt;span&gt;in&lt;/span&gt; = {&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;13&lt;/span&gt;,&lt;span&gt;17&lt;/span&gt;,&lt;span&gt;22&lt;/span&gt;,&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;};
    myBST&lt;/span&gt;&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; bst(&lt;span&gt;in&lt;/span&gt;&lt;span&gt;);
    bst.Delete(&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;);
    bst.Insert(&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; found = bst.search(&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;found)
        cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;not found!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;found!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
    vector&lt;/span&gt;&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; result;
    cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;InorderTravelsal:  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    bst.InorderTraversal(result);
    cout&lt;/span&gt;&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PreorderTravelsal:  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    bst.PreorderTraversal(result);
    cout&lt;/span&gt;&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PostorderTraversal:  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    bst.PostorderTraversal(result);
    cout&lt;/span&gt;&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BFTraversal:  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    bst.BFTraversal(result);
    cout&lt;/span&gt;&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Graph:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
    bstNode&lt;/span&gt;&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;* pointer =&lt;span&gt; bst.GetRoot();
    bst.Graph(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,pointer);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参考：https://blog.csdn.net/zhangxiao93/article/details/51459743&lt;/p&gt;
</description>
<pubDate>Sat, 15 Dec 2018 17:09:00 +0000</pubDate>
<dc:creator>cyrio</dc:creator>
<og:description>环境：C++ 11 + win10 IDE：Clion 2018.3 AVL平衡树是在BST二叉查找树的基础上添加了平衡机制。 我们把平衡的BST认为是任一节点的左子树和右子树的高度差为-1,0,1中</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cyrio/p/10125546.html</dc:identifier>
</item>
<item>
<title>Flask开发系列之初体验 - Yabea</title>
<link>http://www.cnblogs.com/ybjourney/p/10125532.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ybjourney/p/10125532.html</guid>
<description>&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;在日常开发中，如果需要开发一个小型应用或者Web接口，一般我是极力推崇Flask的，主要是因为其简洁、扩展性高。&lt;/p&gt;
&lt;p&gt;从这篇文章开始，我会写一个关于Flask的系列文章，通过多个实例，由浅入深，融入自己使用Flask的心得，希望能帮助更多朋友学习Flask。&lt;/p&gt;
&lt;p&gt;在此之前，建议你了解常见理论（包括视图、模板等），阅读Flask的官方文档，了解sqlalchemy，有一定的前端基础。&lt;/p&gt;
&lt;p&gt;开发环境：ubuntu + Python2.7X + mysql&lt;/p&gt;
&lt;p&gt;本系列文章代码将持续更新于 &lt;a href=&quot;https://github.com/Yabea/learn_flask&quot;&gt;my github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一个最简单的应用&quot;&gt;一个最简单的应用&lt;/h2&gt;
&lt;p&gt;首先介绍一个Flask中最简单的应用，创建app.py，编写：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello Flask!'

if __name__ == '__main__':
    app.run()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用命令python app.py，运行该脚本，就启动了该应用，在浏览器中输入应用地址（一般是127.0.0.1:5000），便可查看到&quot;Hello Flask&quot;。&lt;/p&gt;
&lt;p&gt;关于这部分代码的具体含义我不多做介绍，有疑问的朋友可参见&lt;a href=&quot;https://dormousehole.readthedocs.io/en/latest/quickstart.html#id2&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要说明的是，若开发简单应用（接口较少，不依赖数据库等），可以使用这种单文件模式生成的方式。当项目应用需求较大时，自然是不能使用单文件模式，因为这样显得笨重且不易维护，这时就需要考虑到项目结构了。&lt;/p&gt;
&lt;h2 id=&quot;项目结构&quot;&gt;项目结构&lt;/h2&gt;
&lt;p&gt;对于Web开发，很重要的一点就是创建项目结构，接下来给大家分享下我常用的项目结构：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;app
&lt;ul&gt;&lt;li&gt;app
&lt;ul&gt;&lt;li&gt;templates （MVC中的V，存放模板文件）&lt;/li&gt;
&lt;li&gt;static （存放静态文件，包括css和js文件等）&lt;/li&gt;
&lt;li&gt;models （映射数据库表结构）&lt;/li&gt;
&lt;li&gt;utils (通用功能模块)&lt;/li&gt;
&lt;li&gt;__init__.py （模块初始化文件）&lt;/li&gt;
&lt;li&gt;views.py （MVC中的C，存放视图函数）&lt;/li&gt;
&lt;li&gt;config.py （配置文件）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;manage.py （数据库迁移文件）&lt;/li&gt;
&lt;li&gt;serve.py （项目启动文件）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;着手开发&quot;&gt;着手开发&lt;/h2&gt;
&lt;h3 id=&quot;重要概念&quot;&gt;重要概念&lt;/h3&gt;
&lt;p&gt;开发之前呢，先简单介绍这篇文章中关于Flask很重要的几个概念。&lt;br/&gt;&lt;strong&gt;1. 路由：&lt;/strong&gt;所谓路由，就是处理URL和函数之间关系的程序，Flask中也是对URL规则进行统一管理的，使用@app.route修饰器将一个函数注册为路由。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 蓝图：&lt;/strong&gt; 编程讲究的是功能模块化，从而使代码看起来更加的优雅和顺畅， 在Flask中，&lt;strong&gt;蓝图&lt;/strong&gt;可以将各个应用组织成不同的组件，实现代码的模块化。比如一个系统有两种角色，一个是普通用户user，另一个是管理员admin，那么他们所拥有的权限和功能有很大差异，若将其放在同一个文件下，代码量相对较大且不易维护，若进行版本控制时，也很容易出现冲突，这时可以创建蓝图加以区分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. sqlalchemy：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SQLAlchemy是Python中最有名的的ORM框架，所谓的ORM（Object-Relational Mapping），就是将关系数据库的表结构映射到对象上（程序中的类），可以将数据库表中的一行记录与一个对象互相做自动转换。&lt;/p&gt;
&lt;p&gt;它支持多种数据库引擎，封装了各种数据库引擎（SQLite，MySQL，Postgresql，Oracle等），对于不同的数据库，只需要做简单的修改，工作量大大减少。&lt;/p&gt;
&lt;p&gt;在Flask中，可以使用Flask-SQLAlchemy管理数据库，使用命令安装：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pip install flask-sqlalchemy&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;v1.0&quot;&gt;V1.0&lt;/h3&gt;
&lt;p&gt;第一个版本V1.0将创建项目目录，介绍一个较为简单的应用：结构化Flask项目，并简单使用模板和静态文件进行前端展示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建蓝图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，在views.py中创建蓝图：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# coding:utf-8

from flask import Blueprint

views = Blueprint('views', __name__)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后，在__init__.py初始化应用，添加views蓝图：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# coding:utf-8

from flask import Flask
from views import views


def create_app():
    app = Flask(__name__)
    app.register_blueprint(views)

    return app&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;视图函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这样views蓝图被定义，使用views蓝图，打开views.py，编写视图函数定义路由，这里：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;@views.route('/')
def home():
    return &quot;Hello Flask!&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;启动脚本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编写项目启动脚本serve.py：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# coding:utf-8

from app import create_app

app = create_app()

if __name__ == &quot;__main__&quot;:
    app.run(debug=True)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用&quot;python serve.py&quot;命令运行该项目，便可在网页上显示&quot;Hello Flask&quot;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用模板和静态文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在web开发中，我们自然是需要使用模板（template）和静态文件（static）来生成更加丰富的网页。模板即是包含了程序页面的html文件，静态文件指的是需要在HTML文件中加载的CSS、JavaScript和图片等资源文件。那么具体如何使用呢？&lt;/p&gt;
&lt;p&gt;这里在上述实例的基础上，使用模板和静态文件在界面中加载出&quot;Hello Flask&quot;，如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在templates文件夹中创建home.html；&lt;/li&gt;
&lt;li&gt;在static文件夹中创建style.css，并在home.html中引用；&lt;/li&gt;
&lt;li&gt;在路由函数中，使用render_template引用模板，如下：&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# coding:utf-8

from flask import render_template, Blueprint

views = Blueprint('views', __name__)

@views.route('/')
def home():
    return render_template('home.html')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相应的，在templates文件夹中创建'home.html‘，运行&quot;python serve.py&quot;便可在网页中显示home.html中的内容Hello flask。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/771535/201812/771535-20181216004138352-431733524.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;v1.1&quot;&gt;V1.1&lt;/h3&gt;
&lt;p&gt;这部分将在上一版本的基础上，实现一个web应用中很常见的场景：提交表单与入库操作，当然这个场景最典型的是注册功能，那不妨以该功能举例。&lt;/p&gt;
&lt;p&gt;简单说来，这里我们的注册功能就是收集验证数据并存入数据库。当然，为了保证数据安全性，这里我们对用户密码进行加密。&lt;/p&gt;
&lt;h4 id=&quot;使用数据库&quot;&gt;使用数据库&lt;/h4&gt;
&lt;p&gt;下面将以mysql举例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置&lt;/strong&gt;&lt;br/&gt;首先，在config.py中配置数据库：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# coding:utf-8


class Config():
    SQLALCHEMY_DATABASE_URI = DATABASE_URL = &quot;mysql://root:pwd@localhost/learn_flask?charset=utf8&quot;
    SQLALCHEMY_TRACK_MODIFICATIONS = False&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，在models中创建数据库映射表，创建一个Users表，包括用户名，邮箱，密码三个字段：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# coding:utf-8
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()


class Users(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), unique=True)
    email = db.Column(db.String(128))
    password = db.Column(db.String(128))

    def __init__(self, name, email, password):
        self.name = name
        self.email = email
        self.password = password&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样，我们就完成了Users表的映射，那么接下来，需要完成数据库的初始化，以应用于该项目中，修改__init__.py文件：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def create_app(config='app.config.Config'):
    app = Flask(__name__)
    with app.app_context():
        app.config.from_object(config)

        from models import db, Users
        url = make_url(app.config['SQLALCHEMY_DATABASE_URI'])
        db.init_app(app)
        try:
            if not database_exists(url):
                create_database(url)
            db.create_all()
        except OperationalError:
            db.create_all()
        except ProgrammingError:
            pass
        else:
            db.create_all()
        app.db = db
    app.register_blueprint(views)
    return app&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这时，启动该项目，就会在mysql中创建数据库“learn_flask”，说明数据库配置正确。&lt;/p&gt;
&lt;h4 id=&quot;注册功能的实现&quot;&gt;注册功能的实现&lt;/h4&gt;
&lt;p&gt;准备工作完毕，接下来就着手实现注册功能。&lt;/p&gt;
&lt;p&gt;为了体现模块化思想，我们不妨来创建一个user蓝图，用来编写与用户相关的所有功能，创建蓝图与初始化在V1.0中已介绍，在此不再赘述，正好给大家一个练手的机会。&lt;/p&gt;
&lt;p&gt;接下来创建注册视图函数，并对传入的用户名、邮箱和密码进行验证：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@user.route('/register', methods=['POST', 'GET'])
def register():
    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        password = request.form['password']
        repassword = request.form['repassword']

        errors = judgemember(name, email)
        if password != repassword:
            errors.append('两次密码输入不一致')
        if len(errors) &amp;gt; 0:
            return render_template('register.html', errors=errors)
        else:
            user = Users(name, email, password)
            db.session.add(user)
            db.session.commit()
            db.session.close()
            return redirect(url_for('views.home'))
    else:
        return render_template('register.html')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关于前端文件，这里就不列出来了，不熟悉Jinja的可以看下其具体的用法，具体代码见 &lt;a href=&quot;https://github.com/Yabea/learn_flask&quot;&gt;my github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建调试完毕，打开浏览器，访问“/register”即可看到以下界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/771535/201812/771535-20181216004225099-84117225.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以上，就是本篇文章介绍的全部内容，欢迎探讨。&lt;/p&gt;
</description>
<pubDate>Sat, 15 Dec 2018 16:45:00 +0000</pubDate>
<dc:creator>Yabea</dc:creator>
<og:description>本文结合两个具体实例：1. 模板使用；2. 注册功能（操作表单并存入数据库）来介绍了基础的Flask开发。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ybjourney/p/10125532.html</dc:identifier>
</item>
<item>
<title>Linux 桌面玩家指南：15. 深度学习可以这样玩 - 京山游侠</title>
<link>http://www.cnblogs.com/youxia/p/LinuxDesktop015.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/youxia/p/LinuxDesktop015.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;特别说明：&lt;/strong&gt;要在我的随笔后写评论的小伙伴们请注意了，我的博客开启了 MathJax 数学公式支持，MathJax 使用&lt;code&gt;$&lt;/code&gt;标记数学公式的开始和结束。如果某条评论中出现了两个&lt;code&gt;$&lt;/code&gt;，MathJax 会将两个&lt;code&gt;$&lt;/code&gt;之间的内容按照数学公式进行排版，从而导致评论区格式混乱。如果大家的评论中用到了&lt;code&gt;$&lt;/code&gt;，但是又不是为了使用数学公式，就请使用&lt;code&gt;\$&lt;/code&gt;转义一下，谢谢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想从头阅读该系列吗？下面是传送门：&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;这一篇相当于是深度学习方面的一个 Hello World 吧。深度学习目前大火，吸引了无数人。但是很多时候，想了解深度学习的人总觉得云山雾罩，怎么也看不明白。如果要是有一个能运行的简单的深度学习的例子该多好啊。我这里就来玩一玩深度学习，来一个让大家摸得着、看得见的例子，揭开深度学习的神秘面纱。语言方面，当然是选择对科学计算极度友好的 Python 啦。我当然不会从头撸代码，肯定会使用现成的库的啦。目前最流行的深度学习框架是 Keras，在 Keras 中，它又使用了大名鼎鼎的 TensorFlow 作为后端。在 Python 中，安装这几个库真的是太方便了。最后说一句，我用的是 Python3。&lt;/p&gt;
&lt;p&gt;上一篇浮光掠影地讲了一下科学计算，并探讨了一下适合数值计算的语言需要什么样的特色。非常幸运，Python 正好具有这样的特色，准确地说，应该是 Python 中的 numpy 库正好具有这样的特色。上一篇的内容略有过时，比如 IPython Notebook，目前就已经改成 Jupyter Notebook 了。但是在这一篇中，我就不用什么 Notebook 了，我用 PyCharm。&lt;/p&gt;
&lt;p&gt;JetBrains 大家都知道啦，JetBrains 全家桶是广大程序员的福利啦。做科学计算，使用 PyCharm 的 Community 版就足够了，没必要下载 Professional 版啦，我更加是不鼓励大家用破解版的啦。&lt;/p&gt;
&lt;h2 id=&quot;环境安装&quot;&gt;环境安装&lt;/h2&gt;
&lt;p&gt;到 JetBrains 的官网下载最新的 PyCharm 2018.3，正如前面所说，Community 版就够了。解压，运行之，用它创建一个 Python 项目，选择使用虚拟环境，如下图：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201812/16576-20181202225051509-1142407429.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用虚拟环境的好处，是可以为这个项目单独安装依赖的库，不用担心为了学一个什么东西而把系统中的 Python 搞得乱七八糟。直接打开 PyCharm 中的 Terminal，就可以进入这个项目的虚拟环境，在这个 Terminal 中运行的命令，默认就在这个项目的虚拟环境中执行。我们可以在这个 Terminal 中运行&lt;code&gt;pip3 install&lt;/code&gt;命令安装所有需要的库。在 PyCharm 中使用&lt;code&gt;pip3 install&lt;/code&gt;命令时，有一个令人头痛的问题，那就是从国外的源下载的速度太慢，我们可以替换成国内的源。我太懒，都是使用临时替换，只需要添加&lt;code&gt;-i 源地址&lt;/code&gt;参数就可以了。例如，要安装 numpy，并且选择从阿里云下载，就使用&lt;code&gt;pip3 install numpy -i https://mirrors.aliyun.com/pypi/simple/&lt;/code&gt;命令。如下图：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201812/16576-20181202230253850-1667227047.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;常用的国内源有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;清华：https://pypi.tuna.tsinghua.edu.cn/simple&lt;/li&gt;
&lt;li&gt;阿里云：https://mirrors.aliyun.com/pypi/simple/&lt;/li&gt;
&lt;li&gt;中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/&lt;/li&gt;
&lt;li&gt;华中理工大学：http://pypi.hustunique.com/&lt;/li&gt;
&lt;li&gt;山东理工大学：http://pypi.sdutlinux.org/&lt;/li&gt;
&lt;li&gt;豆瓣：http://pypi.douban.com/simple/&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;新版 Ubuntu 要求使用 https 源，要注意。&lt;/p&gt;
&lt;p&gt;在这里，我们需要安装 numpy、keras、tensorflow、matplotlib 库，numpy 用来操作向量和矩阵，matplotlib 用来画图。为了能够读取和预处理图片，我还需要使用 PIL，可惜 PIL 不支持 Python 3，不过没关系，使用 Pillow 就好了。安装这几个库只需要如下几个命令：&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;pip3 install numpy -i https://mirrors.aliyun.com/pypi/simple/
pip3 install tensorflow -i https://mirrors.aliyun.com/pypi/simple/
pip3 install keras -i https://mirrors.aliyun.com/pypi/simple/
pip3 install matplotlib -i https://mirrors.aliyun.com/pypi/simple/
pip3 install Pillow -i https://mirrors.aliyun.com/pypi/simple/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这些库都直接安装到了我们的项目内，不会和系统中的 Python 起冲突。如下图：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201812/16576-20181202231151627-168943797.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;PyCharm 最大的优势当然是它的自动代码提示了。不管是写一个&lt;code&gt;.py&lt;/code&gt;文件，还是直接使用 PyCharm 中的 Python Console，就是有非常好的代码提示的。Python Console 还有一个非常棒的功能，就是可以观察每一个变量的值，真的是太方便了。如下图：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201812/16576-20181202234941110-1606369273.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而在系统的终端中直接运行 Python3，我们是得不到这么好的辅助功能的。如下图：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201812/16576-20181202235044428-2001243072.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;最简单的深度学习示例&quot;&gt;最简单的深度学习示例&lt;/h2&gt;
&lt;p&gt;首先，我们看一个最简单的深度学习示例，就是训练一个能够识别手写数字的密集连接神经网络。在这里，我们需要一个用于训练和测试的数据集，而这个数据集就是 MNIST 数据集，该数据集包含 60000 张用于训练的 28×28 像素的手写数字图片，以及 10000 张用于训练的 28×28 像素的手写数字图片。Keras 能够自动下载该数据集。训练这个神经网络的代码如下：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from keras.datasets import mnist
from keras import models
from keras import layers
from keras.utils import to_categorical

(train_images, train_labels),(test_images, test_labels) = mnist.load_data()

network = models.Sequential()
network.add(layers.Dense(512, activation='relu', input_shape=(28*28,)))
network.add(layers.Dense(10, activation='softmax'))

network.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])

train_images = train_images.reshape((60000, 28*28))
train_images = train_images.astype('float32') / 255

test_images = test_images.reshape(10000, 28*28)
test_images = test_images.astype('float32') / 255

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

network.fit(train_images, train_labels, epochs=5, batch_size=128)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;把以上这几行代码逐行输入到 PyCharm 的 Python 控制台，就可以看到效果了。当输入到&lt;code&gt;(train_images, train_labels),(test_images, test_labels) = mnist.load_data()&lt;/code&gt;这一行时，Keras 就会自动下载 MNIST 数据集，可惜的是，由于下载地址被墙的原因，经常会出现下载失败的情况。不过出现下载失败也不用着急，用搜索引擎找一下，很容易找到这个数据集的文件：&lt;code&gt;mnist.npz&lt;/code&gt;文件，大小才 11.5M，下载很快的。把下载的这个文件放到&lt;code&gt;~/.keras/datasets&lt;/code&gt;目录中即可。&lt;/p&gt;
&lt;p&gt;以上所有的代码都输入完成后，就开始了训练，在这个例子中，训练速度非常快，每个周期 4 秒多就完成了，总共 5 个周期。如下图：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201812/16576-20181213230942238-1524070028.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，这个神经网络达到了 98.9% 的精度。下面，我自己手写一个数字测试一下。先打开 Inkscape，自己随便写一个数字，如下图：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201812/16576-20181213231227078-1683176674.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;保存为&lt;code&gt;~/test.png&lt;/code&gt;。然后，用下面的代码把该图片读入内存，并更改大小为 28×28 像素，最后转化为灰度图像。这些操作都使用 PIL 完成。PIL 操作图像那是相当的方便。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from PIL import Image
image = Image.open('/home/youxia/test.png').resize((28,28)).convert('L')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后，将该图像转化为 numpy 的数组，并将其中的数据处理为 0 到 1 之间的浮点数。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import numpy as np
im = np.array(image)
im = 255 - im
im = im.astype('float32') / 255.0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以使用 matplotlib 查看一下该图像，代码如下：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import matplotlib.pyplot as plt
plt.imshow(im, cmap=plt.cm.binary)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是我们处理好之后的图像是下面这个效果，和 MNIST 自带的图像基本基本一致:&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201812/16576-20181213231824234-722267600.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面使用我们前面训练的神经网络来识别该图片，使用 predict 函数即可。识别时，需要将图像数据的 shape 更改为 (1,784):&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;network.predict(im.reshape(1,784))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回的值是一个包含是个数字的列表，代表该图片可能为数字 0-9 的概率，可以看到，其中第 6 项，也就是为数字 5 的概率最大，接近于 1:&lt;/p&gt;
&lt;pre class=&quot;nohighlight&quot;&gt;
&lt;code&gt;array([[2.19245143e-11, 7.56166017e-13, 2.06190620e-10, 3.12406366e-04,
        1.12510295e-13, 9.99686599e-01, 8.85503199e-11, 2.70172443e-11,
        2.85677032e-07, 7.55779013e-07]], dtype=float32)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果不想自己用眼睛去判断哪个概率值最大，可以使用 numpy 的 argmax 函数，如下：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;np.argmax(network.predict(im.reshape(1,784)))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回结果为几，就说明识别出的数字为几，如下：&lt;/p&gt;
&lt;pre class=&quot;nohighlight&quot;&gt;
&lt;code&gt;5&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;从密集连接神经网络到卷积神经网络&quot;&gt;从密集连接神经网络到卷积神经网络&lt;/h2&gt;
&lt;p&gt;前面的例子使用的是密集连接神经网络，每一幅图像都转化为一个以为向量进行处理。在对图像进行深度学习时，最常用的方法是二维卷积神经网络。卷积神经网络的优点一是学到的模式具有平移不变性，在图像某一个区域学习到的模式，如果模式出现在新位置，它仍然能够识别；二是卷积神经网络可以学到模式的空间层次结构。&lt;/p&gt;
&lt;p&gt;在 Keras 中，对卷积神经网络也提供了非常强大的支持。上一节的代码，只需要进行简单的修改，就可以构建一个二维卷积神经网络，代码如下：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from keras import layers
from keras import models
from keras.datasets import mnist
from keras.utils import to_categorical


model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(layers.MaxPooling2D(2, 2))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D(2, 2))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))

model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])

(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
train_images = train_images.reshape((60000, 28, 28, 1))
train_images = train_images.astype('float32') / 255
test_images = test_images.reshape(10000, 28, 28, 1)
test_images = test_images.astype('float32') / 255

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

model.fit(train_images, train_labels, epochs=5, batch_size=64)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;主要的改变体现在以下几个方面：一是使用 Conv2D 层、MaxPooling 层和 Flatten 层修改了深度学习框架的结构，二是修改了输入数组的形状。除此之外，该深度学习框架使用的激活函数、损失函数都和前面是一样的。训练该网络，发现它比前面的网络训练起来要慢一些，但是达到了 99.3%的准确度。&lt;/p&gt;
&lt;p&gt;使用如下代码进行验证：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import numpy as np
from PIL import Image

im = np.array(Image.open('/home/youxia/test.png').resize((28,28)).convert('L'))
im = 255 - im
im = im.astype('float32') / 255.0

print(np.argmax(model.predict(im.reshape(1, 28, 28, 1))))&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;关于深度学习的理论和实战&quot;&gt;关于深度学习的理论和实战&lt;/h2&gt;
&lt;p&gt;深度学习的理论相对来说比较难，所以我这篇随笔里面就没有怎么介绍。如果想全面了解深度学习的理论，可以阅读这本“圣经”：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201812/16576-20181215100436347-933767571.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是，光有理论而无实践，这么枯燥的知识是学不下去的。在实战方面，我觉得这本书不错：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201812/16576-20181215100721762-1500489965.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我这里的内容，就是参考了这本书。最后，再次对 Python 点赞，用 Python 写科学计算的代码，真的是太舒服了。&lt;/p&gt;
&lt;h2 id=&quot;求打赏&quot;&gt;求打赏&lt;/h2&gt;
&lt;p&gt;我对这次写的这个系列要求是非常高的：首先内容要有意义、够充实，信息量要足够丰富；其次是每一个知识点要讲透彻，不能模棱两可含糊不清；最后是包含丰富的截图，让那些不想装 Linux 系统的朋友们也可以领略到 Linux 桌面的风采。如果我的努力得到大家的认可，可以扫下面的二维码打赏一下：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/16576/201808/16576-20180831154735325-1276475036.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;版权申明&quot;&gt;版权申明&lt;/h2&gt;
&lt;p&gt;该随笔由京山游侠在2018年12月16日发布于博客园，引用请注明出处，转载或出版请联系博主。QQ邮箱：1841079@qq.com&lt;/p&gt;
</description>
<pubDate>Sat, 15 Dec 2018 16:33:00 +0000</pubDate>
<dc:creator>京山游侠</dc:creator>
<og:description>特别说明： 要在我的随笔后写评论的小伙伴们请注意了，我的博客开启了 MathJax 数学公式支持，MathJax 使用 标记数学公式的开始和结束。如果某条评论中出现了两个 ，MathJax 会将两个</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/youxia/p/LinuxDesktop015.html</dc:identifier>
</item>
<item>
<title>结束北漂之后的这半年 - 初一丶</title>
<link>http://www.cnblogs.com/wyl-0120/p/10125505.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wyl-0120/p/10125505.html</guid>
<description>&lt;p&gt;&lt;br/&gt;大多数年轻人带着一腔热血，怀着对大城市的憧憬拖着一个皮箱就开始了北漂，而我不一样。2014年9月培训机构到学校招人，大学在篮球、Dota、LOL中度过的我，那时候甚至从来没有去思考未来怎么办。在女朋友(现在是媳妇了)的逼迫下，和同校十几个同学踏上了开往北京的火车。在石景山苹果园度过了我前四个月的培训生活，那时候地铁还是两块钱随便坐。第一份工作在三元桥，也算开始了正式的北漂生活。&lt;/p&gt;
&lt;p&gt;工作第二年我和媳妇默默下定决心今年一定攒10W，年终的时候后离目标还剩12w。过着一人吃饱全家不饿的生活。来京三年换了一次工作，搬了四次房子，住过夏天没空调冬天没暖气的城中村，被黑中介坑过，也经历过合租中的种种无奈。或许每天上班、下班的路上，我们曾经在昌平线、5号线、15号线、10号线擦肩而过。&lt;/p&gt;
&lt;p&gt;这样一个超级大都市，让很多人心里充满憧憬，也让很多人内心纠结是去是留。每一个留在北京奋斗的人，他们心里一定有自己的梦想，当然离开的人也有自己的无奈。&lt;/p&gt;
&lt;p&gt;第一份工作不算实习期干的不够一年，当时用的技术还时候比较传统，前后端都需要自己写。后来去了望京一家互联网公司，工资也翻倍了，当时觉得我好牛逼啊，感觉走上了人生巅峰，现在想想不过是井底之蛙罢了。很幸运能够在这个团队里工作，刚去公司用到的技术之前都没接触过，老大和同事们对我都很照顾，平时各种互损、一起下楼抽烟、扯皮，偶尔周五聚个餐。可能这就是技术人的魅力所在，彼此之间相处就是这么纯粹，没有一点心机。在这个团队里是我技术增长最快的一段时期。虽然现在和曾经的同事已不在联系，但心里一直感谢你们！&lt;/p&gt;
&lt;p&gt;在小地方可能开车半个小时都感觉很远，但是在北京上班一个小时地铁都感觉很幸福。北京是个快节奏的城市，每天有很多人从城南到城北，从东边穿梭到西边，每天甚至五六个小时花费在路上。拥挤的地铁上，有时候连个站的地方都没有，有的人觉得很辛苦，但有的人觉得辛苦也值了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;北京是一个很神奇的城市，有时候对你温柔以待，又有时候让你感受到无比的压力。 及时交通拥堵，雾霾挥之不去，依然有那么多人涌入北京。于其说找罪受，不如说承载着心中的梦想。有来自全国各地的年轻人，他们白天出入繁华的CBD,高档的写字楼，精神抖擞，器宇轩昂。晚上拖着疲惫的身躯，挤进地铁回到了自己城中村的出租屋里，独自一人在热闹与寂静，繁华与偏僻的两级来回穿梭。孜身一人，三餐外卖。没有高档的名牌，只有逛不完的淘宝；没有36D也没有大长腿，只有开黑的基友；没有属于自己的一室一厅，只有合租的单间；没有米其林的大餐，只有楼下的烤串店和山西面馆。&lt;/p&gt;
&lt;p&gt;离开北京半年了，以前心里总是盼望着离开，可真正离开后，我却又有点怀念之前的生活了。一线城市好比是一个虚构的藏宝图，对于未来谁也说不清，逃离了北京的快节奏的同时也远离了北京的活力和多元化。看到小城市里平凡中年人平淡的日子，担心以后会不会也这样。比起大城市的重压我更怕的是一辈子平平淡淡，内心曾不止一次的告诉自己这不是我想要的生活，于是我在努力的去改变自己，哪怕再小的城市我也想要活的精彩。 有时候我厌倦了这样的工作，但我能怎么办呢？没有明确以后的方向，我只能去努力的让自己对当下的事情充满兴趣，如果不是生活所迫,谁xx愿意努力。&lt;/p&gt;
&lt;p&gt;朋友问过我，结束北漂之后感觉怎么样？ 感触最深的大概就是收到工资入账短信的时候心理落差比较大。除此之外就是这边朋友多了，有空的时候可以约约饭，打打球。生活上可以放心大胆的添置大件了，因为不在担心年年搬家的嫌麻烦了。选择北漂也好，选择结束也罢，选择本身哪有什么对错。有些东西只有自己经历过才能明白，感谢这三年多的青春，感谢那些懵懂的、迷茫的、亢奋的、无所适从的以及积极向上的正能量的岁月。这将是我最深的回忆，即使我只是北漂人群中的微不足道的一份子，但这里是我踏上社会征程的起点，生命的重要塑造者，她的雍容、多元和大器，曾经包容过，并且深刻地影响了我。&lt;/p&gt;
&lt;p&gt;如果你在北漂，或者其他城市努力拼搏。那就好好努力，让每天的匆忙时光都很充实。 即使生活艰难，买不起房，住在狭小的出租屋里，但是真正有一天离开了，才会醒悟这些经历多么重要。大城市资源丰富，努力总会有回报的。 哪有什么岁月静好，只不过之前有人替你扛，愿你在每个困难面前都足够坚强。&lt;/p&gt;
&lt;p&gt;因为90后不是垮掉的一代，他们能撑起这片天。&lt;/p&gt;

&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;blogpost-body&quot; readability=&quot;57&quot;&gt;

&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;欢迎关注我的个人公众号：&lt;strong&gt;程序员共成长&lt;/strong&gt;。给新来的小伙伴们准备了见面礼。包括但不限于：Java、Python、数据库、大数据、架构和各方向电子书回复【礼包】 可根据自己需求进行选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;clear&quot; readability=&quot;7&quot;&gt; 　　　　　　　　　　　　　　　　　　　　　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1457234/201812/1457234-20181216002250160-1053466601.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;

</description>
<pubDate>Sat, 15 Dec 2018 16:23:00 +0000</pubDate>
<dc:creator>初一丶</dc:creator>
<og:description>大多数年轻人带着一腔热血，怀着对大城市的憧憬拖着一个皮箱就开始了北漂，而我不一样。2014年9月培训机构到学校招人，大学在篮球、Dota、LOL中度过的我，那时候甚至从来没有去思考未来怎么办。在女朋友</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wyl-0120/p/10125505.html</dc:identifier>
</item>
<item>
<title>关于测试策略，测试方针，测试计划，测试方案的理解 - 善解女衣</title>
<link>http://www.cnblogs.com/chenwjia/p/10125495.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenwjia/p/10125495.html</guid>
<description>&lt;p&gt;一.什么是测试策略&lt;/p&gt;
&lt;p&gt;　简单来说就是，测什么，怎么测。&lt;/p&gt;
&lt;p&gt;    一般可以归纳为6个问题&lt;/p&gt;
&lt;p&gt;　　1）测试的对象和范围是什么？&lt;/p&gt;
&lt;p&gt;　　2）测试的目标是什么？&lt;/p&gt;
&lt;p&gt;　　3）测试的深度到哪里，广度又到哪里？&lt;/p&gt;
&lt;p&gt;　　4）测试的重点有什么？难点又有什么？&lt;/p&gt;
&lt;p&gt;　　5）如何安排测试活动&lt;/p&gt;
&lt;p&gt;　　6）如何评价，评审测试是否有效？&lt;/p&gt;
&lt;p&gt;二.什么是测试方针&lt;/p&gt;
&lt;p&gt;　　测试方针可以理解为测试活动中的一些通用的要求，原则。&lt;/p&gt;
&lt;p&gt;　　如：1）产品的缺陷修复率要达到90%以上才能发布。&lt;/p&gt;
&lt;p&gt;　　　　2）开发提交版本前，必须要先自测，比产出测试报告。&lt;/p&gt;
&lt;p&gt;　　　　3）对发布的版本，无论代码修改了多少，都要对基本功能进行回归测试。&lt;/p&gt;
&lt;p&gt;　　　　4）产品升级后，发型原有功能丢失或失效的，这类缺陷都定义为严重。&lt;/p&gt;
&lt;p&gt;三.什么是测试计划&lt;/p&gt;
&lt;p&gt;　　可以这样理解：通过测试策略确定的测试活动，而这些测试活动都在测试计划中被拆分为一个个任务。并且每个任务都确定工期，执行的先后顺序和责任人。&lt;/p&gt;
&lt;p&gt;　　如图所示&lt;/p&gt;
&lt;p&gt;　　测试策略　　　　　　　　测试计划　　　　　　　　　　　　　　　测试资源&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1104644/201812/1104644-20181215232256544-734903324.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　测试计划实例&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;center&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;任务名称　　&lt;/td&gt;
&lt;td&gt;　　　　责任人&lt;/td&gt;
&lt;td&gt;　　　　　　　　　　　　任务起止时间&lt;/td&gt;
&lt;td&gt;　　优先级&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;p&gt;测试任务1&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;           张三&lt;/td&gt;
&lt;td&gt;                             2018/8/5至2018/8/7&lt;/td&gt;
&lt;td&gt;       高&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;p&gt;测试任务2&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;           李四&lt;/td&gt;
&lt;td&gt;                             2018/8/8至2018/8/10&lt;/td&gt;
&lt;td&gt;       中&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;p&gt;测试任务3&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;           王五&lt;/td&gt;
&lt;td&gt;                             2018/8/11至2018/8/13&lt;/td&gt;
&lt;td&gt;       低&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;四.什么是测试方案&lt;/p&gt;
&lt;p&gt;　　测试方案主要是解决功能特性在测试执行方面的问题。&lt;/p&gt;
&lt;p&gt;　　要注意，测试策略要解决的是软件测试中的六大问题（一.测试策略中有说到），而这里测试方案则是解决对功能特性如何进行测试，以及如何安排这种测试的执行。&lt;/p&gt;
&lt;p&gt;　　具体包括：&lt;/p&gt;
&lt;p&gt;　　　　1）对功能特性的需求，场景，设计进行分析，提取出测试点&lt;/p&gt;
&lt;p&gt;　　　　2）对测试点选择合适的测试设计方法（如，等价类设计法，边界值设计法，场景流法，错误探测法，如何选择测试数据）&lt;/p&gt;
&lt;p&gt;　　　　3）是否需要进行性能测试或自动化测试，若有，则进行相关的设计，如提取性能需求，部署环境等等。&lt;/p&gt;
&lt;p&gt;　　　　4）测试执行时需要按照怎么的顺序来执行这些用例。&lt;/p&gt;

&lt;p&gt;　　举例如下:&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;1.测试方案模板（以一个功能特性为单位）：&lt;/p&gt;
&lt;p&gt;　　1.xxx特性的场景&lt;/p&gt;
&lt;p&gt;　　　　a)用户场景描述：&lt;/p&gt;
&lt;p&gt;　　　　　　　描述用户会如何使用这个功能特性。&lt;/p&gt;
&lt;p&gt;　　　　b)测试场景描述：&lt;/p&gt;
&lt;p&gt;　　　　　　　描述测试时会怎么模拟用户的使用，模拟和实际差别在哪里，是否会有风险。等等。&lt;/p&gt;
&lt;p&gt; 　　2.xxx特性设计分析：&lt;/p&gt;
&lt;p&gt;　　　　a）产品实现中的关键业务流程。&lt;/p&gt;
&lt;p&gt;　　　　b）重要的算法（或实现技术）的分析&lt;/p&gt;
&lt;p&gt;　　　　c）其他需要主要的内容分析。&lt;/p&gt;
&lt;p&gt;　　 3.xxx特性测试分析：&lt;/p&gt;
&lt;p&gt;　　　　a）测试类型分析&lt;/p&gt;
&lt;p&gt;　　　　b）功能交换分析。&lt;/p&gt;
&lt;p&gt;　　4.xxx特性测试设计：&lt;/p&gt;
&lt;p&gt;　　　　对测试点选择合适的测试设计方法，并得出测试用例&lt;/p&gt;
&lt;p&gt;　　　　为测试用例划分优先级&lt;/p&gt;
&lt;p&gt;　　5.xxx特性测试执行：&lt;/p&gt;
&lt;p&gt;　　　　那些用例需要进行手工测试。&lt;/p&gt;
&lt;p&gt;　　　　那些用例需要进行自动化测试。&lt;/p&gt;
&lt;p&gt;　　　　那些用例需要进行性能测试。&lt;/p&gt;
&lt;p&gt;　　　　测试用例是否需要考虑执行的顺序。&lt;/p&gt;
&lt;p&gt;　　　　是否还有些地方可以进行探索测试。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2.测试方案需要遵循的测试策略&lt;/p&gt;
&lt;p&gt;　　例如，该测试方案中的某些特性 需要遵循 测试策略中的测试深度和广度的要求。&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;特性&lt;/td&gt;
&lt;td&gt; 测试优先级（测试重点）&lt;/td&gt;
&lt;td&gt; 测试说明（测试深度和广度）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;特性A&lt;/td&gt;
&lt;td&gt; 高&lt;/td&gt;
&lt;td readability=&quot;7&quot;&gt;
&lt;p&gt; 1.需要进行全面，深入的功能测试&lt;/p&gt;
&lt;p&gt; 2.需要考虑各种测试类型，尤其是可靠性方面的测试&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;特性B&lt;/td&gt;
&lt;td&gt; 低&lt;/td&gt;
&lt;td&gt; 只需要进行基本功能验证测试即可&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt; 　　软件测试与产品的六大特性&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;11&quot;&gt;&lt;tr&gt;&lt;td&gt;产品&lt;/td&gt;
&lt;td&gt; 可靠性&lt;/td&gt;
&lt;td&gt; 可靠性测试&lt;/td&gt;
&lt;td&gt; 异常值测试&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 故障植入测试&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 稳定性测试&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 恢复测试&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;　　　　　　&lt;/td&gt;
&lt;td&gt; 功能性　　&lt;/td&gt;
&lt;td&gt; 功能测试&lt;/td&gt;
&lt;td&gt; 运行正确值输入&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 运行边界值输入&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 等价类测试法&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 场景测试&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 效率&lt;/td&gt;
&lt;td&gt; 性能测试&lt;/td&gt;
&lt;td&gt; 压力测试&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 负载测试&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 对指定的性能指标进行测试&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 可维护性&lt;/td&gt;
&lt;td&gt; 可维护性测试&lt;/td&gt;
&lt;td&gt; 检查产品是否可维护&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 升级测试，更新测试&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 下载链接测试，是否下载到最新版本&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 兼容性&lt;/td&gt;
&lt;td&gt; 兼容性测试&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt; 平台测试&lt;/p&gt;
&lt;p&gt;（检查产品是否能在各个平台运行，如app测试中，能运行在什么类型的手机）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 操作系统适应性测试，检查产品能运行在什么操作系统上&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 易用性&lt;/td&gt;
&lt;td&gt; 易用性测试&lt;/td&gt;
&lt;td&gt; 产品是否提供教程&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 产品中的功能控件是否简洁易用，不复杂&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td readability=&quot;11&quot;&gt;
&lt;p&gt; 产品中的下拉弹出窗口最多三层，如txt记事本，里面有一个【文件】按钮，点击&lt;/p&gt;
&lt;p&gt; 后会弹出第一层下拉窗口，然后在点击其中的【另存为】就会弹出第二层窗口，选&lt;/p&gt;
&lt;p&gt; 择地址，点击保存后就存储成功。整个操作最多展开了两层。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;                                           &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;     对于特性A，因为要进行全面测试，那我们需要覆盖六大特性中的所有内容&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　 对于特性B，因为只需要基本功能验证，所以我们可以选择功能测试中的内容。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;br/&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 15 Dec 2018 16:16:00 +0000</pubDate>
<dc:creator>善解女衣</dc:creator>
<og:description>一.什么是测试策略 简单来说就是，测什么，怎么测。 一般可以归纳为6个问题 1）测试的对象和范围是什么？ 2）测试的目标是什么？ 3）测试的深度到哪里，广度又到哪里？ 4）测试的重点有什么？难点又有什</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenwjia/p/10125495.html</dc:identifier>
</item>
<item>
<title>一文入门NodeJS - 鲲逸鹏</title>
<link>http://www.cnblogs.com/dotnetcrazy/p/10118756.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dotnetcrazy/p/10118756.html</guid>
<description>&lt;p&gt;PS：一般都是这么用的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;node
// {a, b} = {a:21,b=34,c=22} 只要对应即可解包，如果想取别名可以使用：{a:xx, b} = {...}
let { pathname, query } = url.parse(request.url, true);&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;3.前几个模块的综合案例&quot;&gt;3.前几个模块的综合案例&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/10118756.html#3.前几个模块的综合案例&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;结合上面的&lt;code&gt;HTTP模块&lt;/code&gt;，来个简单的&lt;code&gt;web服务器&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;node
const fs = require(&quot;fs&quot;);
const url = require(&quot;url&quot;);
const http = require(&quot;http&quot;);

// 创建服务
let server = http.createServer((request, response) =&amp;gt; {
    // 请求
    // {a, b} = {a:21,b=34,c=22} 只要对应即可解包，如果想取别名可以使用：{a:xx, b} = {...}
    let { pathname, query } = url.parse(request.url, true);
    console.log(query, pathname);

    // 读取对应文件
    fs.readFile(`www${pathname}`, (ex, data) =&amp;gt; {
        if (ex) {
            // 返回404状态码，并设置编码为UTF-8
            response.writeHeader(404, {
                &quot;Content-Type&quot;: &quot;text/html;charset=utf-8&quot;
            });
            // 提示需要在 writeHeader 之后，不然访问的是浏览器404页面
            response.write(&quot;&amp;lt;h1&amp;gt;访问的页面不存在～&amp;lt;/h1&amp;gt;&quot;);
        } else {
            response.write(data);
        }
        // 响应结束
        response.end();
    });
});
// 服务器启动并监听指定端口
server.listen(8080);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出：(&lt;code&gt;www&lt;/code&gt;目录就两个文件，一个&lt;code&gt;test.html&lt;/code&gt;,一个&lt;code&gt;test.png&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1127869/201812/1127869-20181214122914837-536774209.png&quot; alt=&quot;2.nodejs.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推荐写法&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;node
const fs = require(&quot;fs&quot;);
const url = require(&quot;url&quot;);
const http = require(&quot;http&quot;);

let server = http.createServer((request, response) =&amp;gt; {
    let { pathname } = url.parse(request.url, true);
    console.log(pathname);

    let rs = fs.createReadStream(`www${pathname}`);
    // `request`和`response`就是一个典型的读写流（`ReadStream`、`WriteStream`）
    rs.pipe(response);

    // 读取失败 ==&amp;gt; 404
    rs.on(&quot;error&quot;, ex =&amp;gt; {
        response.writeHeader(404);
        response.write(&quot;404 Not Found&quot;);
        response.end();
    });
});

server.listen(8080);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PS：&lt;strong&gt;&lt;code&gt;request&lt;/code&gt;和&lt;code&gt;response&lt;/code&gt;就是一个典型的读写流（&lt;code&gt;ReadStream&lt;/code&gt;、&lt;code&gt;WriteStream&lt;/code&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;2.4.zlib（常用）&quot;&gt;2.4.zlib（常用）&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/10118756.html#2.4.zlib（常用）&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;文档：&lt;code&gt;http://nodejs.cn/api/zlib.html&lt;/code&gt; or &lt;code&gt;https://nodejs.org/api/zlib.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;先看个案例：（&lt;code&gt;zlib&lt;/code&gt;是读写流）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;node
const fs = require(&quot;fs&quot;);
const zlib = require(&quot;zlib&quot;);

// 读写流
let gz = zlib.createGzip();
// 读流
let rs =fs.createReadStream(&quot;./www/jquery-2.1.1.js&quot;);
// 写流
let ws =fs.createWriteStream(&quot;test.js.gz&quot;);
// 可以这么理解：（gz是读写流）
// rs水龙头先传给了gz，gz又当一个水龙头传给了ws
rs.pipe(gz).pipe(ws);

ws.on(&quot;finish&quot;,()=&amp;gt;{
    console.log(&quot;写入完毕&quot;);
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;效果： &lt;img src=&quot;https://img2018.cnblogs.com/blog/1127869/201812/1127869-20181214234028423-1190004389.png&quot; alt=&quot;1.zlib.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;静态服务器&quot;&gt;静态服务器&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/10118756.html#静态服务器&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;结合上面再来个加强版：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;node
const fs = require(&quot;fs&quot;);
const zlib = require(&quot;zlib&quot;);
const http = require(&quot;http&quot;);

let server = http.createServer((request, response) =&amp;gt; {
    // let { pathname } = url.parse(request.url);
    console.log(request.url);
    let rs = fs.createReadStream(`www${request.url}`);
    let gz = zlib.createGzip();

    // 响应之前告诉浏览器是gzip的格式
    response.setHeader(&quot;Content-Encoding&quot;, &quot;gzip&quot;);
    // 返回gzip压缩后的文件
    rs.pipe(gz).pipe(response);

    // 读取失败，404错误
    rs.on(&quot;error&quot;, ex =&amp;gt; {
        response.removeHeader(&quot;Content-Encoding&quot;);
        // 返回404状态码，并设置编码为UTF-8
        response.writeHeader(404, {
            &quot;Content-Type&quot;: &quot;text/html;charset=utf-8&quot;
        });
        // 提示需要在 writeHeader 之后，不然访问的是浏览器404页面
        response.write(&quot;&amp;lt;h2&amp;gt;您访问的页面不存在～&amp;lt;/h2&amp;gt;&quot;);
        response.end();
    });
});

server.listen(8080, () =&amp;gt; {
    console.log(&quot;服务器启动成功，端口：8080&quot;);
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出对比： &lt;img src=&quot;https://img2018.cnblogs.com/blog/1127869/201812/1127869-20181215004614718-859741323.png&quot; alt=&quot;1.zlib2.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;2.5.path&quot;&gt;2.5.path&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/10118756.html#2.5.path&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;文档：&lt;code&gt;http://nodejs.cn/api/path.html&lt;/code&gt; or &lt;code&gt;https://nodejs.org/api/path.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个主要是针对路径的模块，看个案例：&lt;code&gt;path.parse()&lt;/code&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 15 Dec 2018 16:03:00 +0000</pubDate>
<dc:creator>鲲逸鹏</dc:creator>
<og:description>NodeJS¶ 1.环境配置¶ 之前讲ES6的时候有提过一部分Node的知识，简单回顾下：一文读懂ES6 1.1.NPM国内镜像¶ npm国内镜像：https://npm</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dotnetcrazy/p/10118756.html</dc:identifier>
</item>
<item>
<title>使用Tornado异步接入第三方(支付宝)支付 - Harvard_Fly</title>
<link>http://www.cnblogs.com/FG123/p/10062155.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/FG123/p/10062155.html</guid>
<description>&lt;p&gt;&lt;span&gt;目前国内比较流行的第三方支付主要有支付宝和微信支付，博主最近研究了下如何用Python接入支付宝支付，这里我以Tornado作为web框架，接入支付宝构造支付接口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用Tornado异步接入支付宝支付流程：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 进入蚂蚁金服开放平台填写开发者信息、应用信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 配置RSA256密钥，生成支付宝和应用的密钥&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3. 构造订单接口API，生成订单&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4. 构造支付接口&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;1. 进入蚂蚁金服开放平台填写开发者信息、应用信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里通过沙箱环境开发测试接口，蚂蚁金服开放平台--&amp;gt;开发者中心--&amp;gt;研发者服务--&amp;gt;沙箱应用，配置沙箱应用信息：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201812/739231-20181215155934205-291495668.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设置授权回调地址，注意：这个地址一定要是外网IP地址(我这里是我的阿里云服务器地址)，回调地址是自己支付完回调的api地址，可通过扫码下载沙箱板支付宝钱包进行支付测试：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201812/739231-20181215160134558-2069296831.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 设置沙箱账号，设置买家和买家的测试账号，支付宝会默认给买家账户99999元，可用来测试支付接口是否成功：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201812/739231-20181215161021249-1230987345.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2. 配置RSA256密钥，生成支付宝和应用的密钥&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 支付宝默认有两种加密算法生成密钥：RSA(SHA1)和RSA2(SHA256)，鉴于安全性支付宝推荐使用RSA2(SHA256)密钥。通过查看密钥生成文档https://docs.open.alipay.com/291/105971得知密钥生成方法，按文档提示下载密钥生成工具，解压后打开生成工具，选择密码格式(Python当然就是选择PKCS1了)和密码长度，生成公钥和私钥：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201812/739231-20181215163354032-527497939.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;生成后可在RSA密钥文件夹下查看应用的公钥和私钥，并将应用公钥上传到开放平台的开发者环境中：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201812/739231-20181215163848926-1791511615.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;3. 构造订单接口API，生成订单&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;查看支付接口文档:https://docs.open.alipay.com/270/alipay.trade.page.pay/可知：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201812/739231-20181215165345369-528219780.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 支付接口的必填参数有out_trade_no(订单号)、total_amount(订单金额)、subject(订单标题)，所以先构造订单接口，生成订单：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderSnHandler(BaseHandler):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    @authenticated
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     async &lt;span&gt;def&lt;/span&gt; post(self, *args, **&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        创建订单信息
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        :param request:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         res_data =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         req_data = self.request.body.decode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         req_data =&lt;span&gt; json.loads(req_data)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         post_script = req_data.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post_script&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         order_form =&lt;span&gt; TradeOrderSnForm.from_json(req_data)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; order_form.validate():
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 order_mount =&lt;span&gt; order_form.order_mount.data
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 orders_object =&lt;span&gt; await self.application.objects.create(
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                    OrderInfo,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     pay_status=OrderInfo.ORDER_STATUS[4&lt;span&gt;][0],
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     pay_time=&lt;span&gt;datetime.now(),
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     order_sn=&lt;span&gt;OrderInfo.generate_order_sn(),
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     user=&lt;span&gt;self.current_user,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     order_mount=&lt;span&gt;order_mount,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     post_script=&lt;span&gt;post_script
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                )
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 res_data[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; orders_object.id
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception:
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 self.set_status(400&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 res_data[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;订单创建失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             res_data[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; order_form.errors
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         self.finish(res_data)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201812/739231-20181215170223856-1539802379.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;4. 构造支付接口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(1) 构造支付接口类&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;流程：RSA导入公钥和私钥--&amp;gt;&lt;/span&gt;&lt;span&gt;构造请求参数biz_content--&amp;gt;构造支付宝公共请求参数--&amp;gt;&lt;/span&gt;&lt;span&gt;排序并拼接参数为规范字符串--&amp;gt;生成签名后的字符串--&amp;gt;请求支付宝接口--&amp;gt;&lt;/span&gt;&lt;span&gt;对支付宝接口返回的数据进行签名比对&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;85&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AliPay(object):
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;    支付宝支付接口
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, appid, app_notify_url, app_private_key_path,
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;                  alipay_public_key_path, return_url, debug=&lt;span&gt;False):
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;         self.appid =&lt;span&gt; appid
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;         self.app_notify_url =&lt;span&gt; app_notify_url
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;         self.app_private_key_path =&lt;span&gt; app_private_key_path
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;         self.app_private_key =&lt;span&gt; None
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;         self.return_url =&lt;span&gt; return_url
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;        with open(self.app_private_key_path) as fp:
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;             self.app_private_key =&lt;span&gt; RSA.importKey(fp.read())
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; 
&lt;span&gt; 16&lt;/span&gt;         self.alipay_public_key_path =&lt;span&gt; alipay_public_key_path
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;        with open(self.alipay_public_key_path) as fp:
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;             self.alipay_public_key =&lt;span&gt; RSA.import_key(fp.read())
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; debug &lt;span&gt;is&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;             self.&lt;span&gt;__gateway&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://openapi.alipaydev.com/gateway.do&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;             self.&lt;span&gt;__gateway&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://openapi.alipay.com/gateway.do&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; direct_pay(self, subject, out_trade_no, total_amount, **kwargs):  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; NOQA&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;        构造请求参数biz_content，
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;        并将其放入公共请求参数中，
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;        返回签名sign的data
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;        :param subject:
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;        :param out_trade_no:
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;        :param total_amount:
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;        :param kwargs:
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;         biz_content =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: subject,
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;out_trade_no&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: out_trade_no,
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;total_amount&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: total_amount,
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;product_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FAST_INSTANT_TRADE_PAY&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; 
&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;        biz_content.update(kwargs)
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         data =&lt;span&gt; self.build_body(
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alipay.trade.page.pay&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;            biz_content,
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;            self.return_url
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.sign_data(data)
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; 
&lt;span&gt; 51&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; build_body(self, method, biz_content, return_url=&lt;span&gt;None):
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;        构造公共请求参数
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;        :param method:
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;        :param biz_content:
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;        :param return_url:
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;         data =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: self.appid,
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: method,
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RSA2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timestamp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: datetime.now().strftime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Y-%m-%d %H:%M:%S&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;biz_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: biz_content
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; 
&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; return_url:
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;             data[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;notify_url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; self.app_notify_url
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;             data[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;return_url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; self.return_url
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; 
&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; sign_data(self, data):
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;        拼接排序后的data,以&amp;amp;连接成符合规范的字符串，并对字符串签名，
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;        将签名后的字符串通过quote_plus格式化，
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;        将请求参数中的url格式化为safe的，获得最终的订单信息字符串
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;        :param data:
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 签名中不能有sign字段&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; data:
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;             data.pop(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; 
&lt;span&gt; 87&lt;/span&gt;         unsigned_items =&lt;span&gt; self.ordered_data(data)
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         unsigned_string = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.join(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0}={1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(k, v) &lt;span&gt;for&lt;/span&gt; k, v &lt;span&gt;in&lt;/span&gt;&lt;span&gt; unsigned_items)
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;         sign = self.sign_string(unsigned_string.encode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;         quoted_string = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.join(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0}={1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(k, quote_plus(v)) &lt;span&gt;for&lt;/span&gt; k, v &lt;span&gt;in&lt;/span&gt;&lt;span&gt; unsigned_items)
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt;         signed_string = quoted_string + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;sign=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; quote_plus(sign)
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; signed_string
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; 
&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; ordered_data(self, data):
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;        将请求参数字典排序，
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;        支付宝接口要求是拼接的有序参数字符串
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;        :param data:
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;         complex_keys =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; key, value &lt;span&gt;in&lt;/span&gt;&lt;span&gt; data.items():
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; isinstance(value, dict):
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;                complex_keys.append(key)
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; complex_keys:
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;             data[key] = json.dumps(data[key], separators=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; 
&lt;span&gt;110&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; sorted([(k, v) &lt;span&gt;for&lt;/span&gt; k, v &lt;span&gt;in&lt;/span&gt;&lt;span&gt; data.items()])
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; 
&lt;span&gt;112&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; sign_string(self, unsigned_string):
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt; &lt;span&gt;        生成签名,并进行base64 编码，
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;        转换为unicode表示并去掉换行符
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;        :param unsigned_string:
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;         key =&lt;span&gt; self.app_private_key
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;         signer =&lt;span&gt; PKCS1_v1_5.new(key)
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;         signature =&lt;span&gt; signer.sign(SHA256.new(unsigned_string))
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;         sign = encodebytes(signature).decode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sign
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; 
&lt;span&gt;125&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; _verify(self, raw_content, signature):
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt; &lt;span&gt;        对支付宝接口返回的数据进行签名比对，
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;        验证是否来源于支付宝
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;        :param raw_content:
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;        :param signature:
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;         key =&lt;span&gt; self.alipay_public_key
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;         signer =&lt;span&gt; PKCS1_v1_5.new(key)
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;         digest =&lt;span&gt; SHA256.new()
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;         digest.update(raw_content.encode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; signer.verify(digest, decodebytes(signature.encode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))):
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; False
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt; 
&lt;span&gt;141&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; verify(self, data, signature):
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;143&lt;/span&gt; &lt;span&gt;        验证支付宝返回的数据，防止是伪造信息
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;        :param data:
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;        :param signature:
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; data:
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;             data.pop(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;         unsigned_items =&lt;span&gt; self.ordered_data(data)
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;         message = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.join(u&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}={}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(k, v) &lt;span&gt;for&lt;/span&gt; k, v &lt;span&gt;in&lt;/span&gt;&lt;span&gt; unsigned_items)
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; self._verify(message, signature)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; (2) 构造支付链接接口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过步骤3创建的订单信息生成支付链接，这里接口我采用协程+异步的方式，&lt;/span&gt;&lt;span&gt;authenticated是自定义的&lt;a href=&quot;https://www.cnblogs.com/FG123/p/10013564.html&quot; target=&quot;_blank&quot;&gt;JWT验证装饰器&lt;/a&gt;，&lt;/span&gt;&lt;span&gt;private_key_path和&lt;/span&gt;&lt;span&gt;ali_pub_key_path是前面生成的应用私钥和支付宝公钥文件地址&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GenPayLinkHandler(BaseHandler):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    @authenticated
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     async &lt;span&gt;def&lt;/span&gt; get(self, *args, **&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        通过订单生成支付链接
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        :param args:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        :param kwargs:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         res_data =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         order_id = get_int_or_none(self.get_argument(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, None))
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; order_id:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             self.set_status(400&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             self.write({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;缺少order_id参数&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             order_obj =&lt;span&gt; await self.application.objects.get(
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 OrderInfo, id=&lt;span&gt;order_id,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 pay_status=OrderInfo.ORDER_STATUS[4&lt;span&gt;][0]
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            )
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             out_trade_no =&lt;span&gt; order_obj.order_sn
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             order_mount =&lt;span&gt; order_obj.order_mount
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             subject =&lt;span&gt; order_obj.post_script
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             alipay =&lt;span&gt; AliPay(
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 appid=settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ALI_APPID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 app_notify_url=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}/alipay/return/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SITE_URL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]),
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 app_private_key_path=settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;private_key_path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 alipay_public_key_path=settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ali_pub_key_path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 debug=&lt;span&gt;True,
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 return_url=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}/alipay/return/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SITE_URL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            )
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             url =&lt;span&gt; alipay.direct_pay(
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 subject=&lt;span&gt;subject,
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 out_trade_no=&lt;span&gt;out_trade_no,
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 total_amount=&lt;span&gt;order_mount,
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 return_url=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}/alipay/return/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SITE_URL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            )
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             re_url = settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RETURN_URI&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].format(data=&lt;span&gt;url)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             res_data[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;re_url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; re_url
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; OrderInfo.DoesNotExist:
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             self.set_status(400&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             res_data[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;订单不存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;         self.finish(res_data)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;返回结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201812/739231-20181215234135573-985026949.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;打开支付链接可以看到：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201812/739231-20181215234405236-1977824498.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(3) 构造支付的回调接口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在支付完成后，支付宝会调用在开发者信息中配置的回调url，通过GET方法回调return_ul，通过POST方法发送notify主动通知商户返回服务器里指定的页面，这里分别实现return_ul和notify_url对应的接口，支付宝返回的notify_url是个异步的所以我这里也以异步的方式实现这个接口：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AlipayHandler(BaseHandler):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get(self, *args, **&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        处理支付宝的return_url返回
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        :param request:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         res_data =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         processed_dict =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         req_data =&lt;span&gt; self.request.arguments
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         req_data =&lt;span&gt; format_arguments(req_data)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; key, value &lt;span&gt;in&lt;/span&gt;&lt;span&gt; req_data.items():
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             processed_dict[key] =&lt;span&gt; value[0]
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;         sign = processed_dict.pop(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, None)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         alipay =&lt;span&gt; AliPay(
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             appid=settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ALI_APPID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             app_notify_url=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}/alipay/return/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SITE_URL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]),
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             app_private_key_path=settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;private_key_path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             alipay_public_key_path=settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ali_pub_key_path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             debug=&lt;span&gt;True,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             return_url=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}/alipay/return/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SITE_URL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         verify_re =&lt;span&gt; alipay.verify(processed_dict, sign)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; verify_re &lt;span&gt;is&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             res_data[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             res_data[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Failed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        self.finish(res_data)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     async &lt;span&gt;def&lt;/span&gt; post(self, *args, **&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        处理支付宝的notify_url
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        :param request:
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;         processed_dict =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         req_data =&lt;span&gt; self.request.body_arguments
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         req_data =&lt;span&gt; format_arguments(req_data)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; key, value &lt;span&gt;in&lt;/span&gt;&lt;span&gt; req_data.items():
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             processed_dict[key] =&lt;span&gt; value[0]
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;         sign = processed_dict.pop(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, None)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         alipay =&lt;span&gt; AliPay(
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             appid=settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ALI_APPID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             app_notify_url=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}/alipay/return/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SITE_URL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]),
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             app_private_key_path=settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;private_key_path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             alipay_public_key_path=settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ali_pub_key_path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             debug=&lt;span&gt;True, 
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;             return_url=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}/alipay/return/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(settings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SITE_URL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;         verify_re =&lt;span&gt; alipay.verify(processed_dict, sign)
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; verify_re &lt;span&gt;is&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;             order_sn = processed_dict.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;out_trade_no&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;             trade_no = processed_dict.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;trade_no&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;             trade_status = processed_dict.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;trade_status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; 
&lt;span&gt;63&lt;/span&gt;             orders_query =&lt;span&gt; OrderInfo.update(
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;                 pay_status=&lt;span&gt;trade_status,
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                 trade_no=&lt;span&gt;trade_no,
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;                 pay_time=&lt;span&gt;datetime.now()
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;            ).where(
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;                 OrderInfo.order_sn ==&lt;span&gt; order_sn
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;            )
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;            await self.application.objects.execute(
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;                orders_query
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;            )
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; 
&lt;span&gt;74&lt;/span&gt;         self.finish(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;测试支付结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201812/739231-20181215235736554-1764097801.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201812/739231-20181215235810054-162640027.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 15 Dec 2018 16:00:00 +0000</pubDate>
<dc:creator>Harvard_Fly</dc:creator>
<og:description>目前国内比较流行的第三方支付主要有支付宝和微信支付，博主最近研究了下如何用Python接入支付宝支付，这里我以Tornado作为web框架，接入支付宝构造支付接口。 使用Tornado异步接入支付宝支</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/FG123/p/10062155.html</dc:identifier>
</item>
</channel>
</rss>