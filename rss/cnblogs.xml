<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>springCloud学习4（Netflix Hystrix弹性客户端） - 烦嚣的人</title>
<link>http://www.cnblogs.com/wuyoucao/p/10282583.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuyoucao/p/10282583.html</guid>
<description>&lt;p&gt;镇博图&lt;br/&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FleyX/files/master/blogImg/springcloud%E5%AE%9E%E6%88%98/20190108162523.jpeg&quot; alt=&quot;三笠&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本篇原创发布于：&lt;/strong&gt;&lt;a href=&quot;http://www.cnblogs.com/wuyoucao/p/tapme.top/blog/detail/2019-01-03-19-19&quot;&gt;FleyX 的个人博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本篇中 Zuul 版本为 1.x，目前最新的是 2.x，二者在过滤器的使用上有较大区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超长警告&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  微服务架构将一个应用拆分为很多个微小应用，这样会导致之前不是问题的问题出现，比如：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;安全问题如何实现？&lt;/li&gt;
&lt;li&gt;日志记录如何实现？&lt;/li&gt;
&lt;li&gt;用户跟踪如何实现？&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;上面的问题在传统的单机应用很容易解决，只需要当作一个功能实现即可。但是在微服务中就行不通了，让每个服务都实现一份上述功能，那是相当不现实的，费时，费力还容易出问题。&lt;/p&gt;
&lt;p&gt;  为了解决这个问题，需要将这些横切关注点（分布式系统级别的横切关注点和 spring 中的基本一个意思）抽象成一个独立的且作为应用程序中所有微服务调用的过滤器和路由器的服务。这样的服务被称为——&lt;strong&gt;服务网管(service gateway)&lt;/strong&gt;，服务客户端不再直接调用服务。取而代之的是，服务网关作为单个策略执行点（Policy Enforcement Point,PEP) , 所有调用都通过服务网管进行路由，然后送到目的地。&lt;/p&gt;

&lt;h2 id=&quot;什么是服务网关&quot;&gt;1、什么是服务网关&lt;/h2&gt;
&lt;p&gt;  之前的几节中我们是通过 http 请求直接调用各个服务，通常在实际系统中不会直接调用。而是通过服务网关来进行服务调用。服务网关充当了服务客户端和被调用服务间的中介。服务客户端仅与服务网关管理的单个 url 进行对话。下图说了服务网关在一个系统中的作用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FleyX/files/master/blogImg/springcloud%E5%AE%9E%E6%88%98/20190107140451.png&quot; alt=&quot;服务网关&quot;/&gt;&lt;/p&gt;
&lt;p&gt;服务网关位于服务客户端和相应的服务实例之间。所有的服务调用（内部和外部）都应流经服务网关。&lt;/p&gt;
&lt;h2 id=&quot;功能&quot;&gt;2、功能&lt;/h2&gt;
&lt;p&gt;  由于服务网关代理了所有的服务调用，&lt;strong&gt;因此它还能充当服务调用的中央策略执行点（PEP）&lt;/strong&gt;，通俗的说就能能够在此实现横切关注点，不用在各个微服务中实现。主要有以下几个：&lt;/p&gt;
&lt;ul readability=&quot;4&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;静态路由&lt;/strong&gt;——服务网关将所有的服务调用放置在单个 URL 和 API 路由后，每个服务对应一个固定的服务端点，方便开发人员的服务调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;动态路由&lt;/strong&gt;——服务网关可以检测传入的请求，根据请求数据和请求者执行职能路由。比如将一部分的调用路由到特定的服务实例上，比如测试版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;验证和授权&lt;/strong&gt;——所有服务调用都经过服务网关，显然可以在此进行权限验证，确保系统安全。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;日志记录&lt;/strong&gt;——当服务调用经过服务网关时，可以使用服务网关来收集数据和日志信息（比如服务调用次数，服务响应时间等）。还能确保在用户请求上提供关键信息以确保日志统计（比如给每个用户请求加一个 url 参数，每个服务中可通过该参数将关键信息对应到某个用户请求）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;看到这儿可能会有这样的疑问：所有调用都通过服务网关，难道服务网关不是单点故障和潜在瓶颈吗？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;1. 在单独的服务器前，负载均衡器是很有用的。将负载均衡器放到多个服务网关前面是比较好的设计，确保服务网关可以实现伸缩。但是如果将负载均衡器置于所有服务前便不是一个好主意，会造成瓶颈。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2. 服务网关的代码应该是无状态的。有状态的应用实现伸缩性较为麻烦&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;3. 服务网关的代码应该轻量的。服务网关是服务调用的“阻塞点”,不易在服务网关处耽误较长的时间,比如进行同步数据库操作&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;  使用 Netflix Zuul 来构建服务网关，配合之前的代码，让服务网关来管理服务调用。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在生产环境中不建议使用 zuul，该组件性能较弱，且已经停止更新&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建-zuulsvr-项目&quot;&gt;1、创建 zuulsvr 项目&lt;/h2&gt;
&lt;p&gt;  详细过程不赘述，和之前一样（注意 spring cloud 版本要和之前一致），主要 pom 依赖如下：&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-zuul&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;配置-zuul&quot;&gt;2、配置 zuul&lt;/h2&gt;
&lt;p&gt;  首先在启动加入注解开启 zuul 并注册到 eureka 中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FleyX/files/master/blogImg/springcloud%E5%AE%9E%E6%88%98/20190107151043.png&quot; alt=&quot;开启zuul&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  然后编写配置文件：&lt;/p&gt;
&lt;pre class=&quot;yaml&quot;&gt;
&lt;code&gt;spring:
  application:
    name: zuulservice
#服务发现配置
eureka:
  instance:
    prefer-ip-address: true
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
server:
  port: 5555&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样便以默认配置启动了 zuul 服务网关。&lt;/p&gt;
&lt;h2 id=&quot;路由配置&quot;&gt;3、路由配置&lt;/h2&gt;
&lt;p&gt;  Zuul 核心就是一个反向代理。在微服务架构下，Zuul 从客户端接受微服务调用并将其转发给下游服务。要和下游服务进行沟通，Zuul 必须知道如何将进来的调用映射到下游路由中。Zuul 有一以下几种路由机制：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;通过服务发现自动映射路由&lt;/li&gt;
&lt;li&gt;通过服务发现手动映射路由&lt;/li&gt;
&lt;li&gt;使用静态 URL 手动映射&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;服务发现自动映射&quot;&gt;1)、服务发现自动映射&lt;/h3&gt;
&lt;p&gt;默认情况下，Zuul 根据服务 ID 来进行自动路由。先将组织服务中的延时去掉&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FleyX/files/master/blogImg/springcloud%E5%AE%9E%E6%88%98/20190107153839.png&quot; alt=&quot;注释延时代码&quot;/&gt;&lt;/p&gt;
&lt;p&gt;启动之前的所有服务实例，然后通过 postman 访问&lt;a href=&quot;localhost:5555/organizationservice/organization/12&quot; class=&quot;uri&quot;&gt;localhost:5555/organizationservice/organization/12&lt;/a&gt;,得到结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FleyX/files/master/blogImg/springcloud%E5%AE%9E%E6%88%98/20190107154005.png&quot; alt=&quot;访问结果&quot;/&gt;&lt;/p&gt;
&lt;p&gt;说明服务网关自动路由成功。&lt;/p&gt;
&lt;p&gt;  如果要查看 Zuul 服务器管理的路由，可以通过访问 Zuul 服务器上的/routes，返回结果如下：&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
  &quot;/confsvr/**&quot;: &quot;confsvr&quot;,
  &quot;/licensingservice/**&quot;: &quot;licensingservice&quot;,
  &quot;/organizationservice/**&quot;: &quot;organizationservice&quot;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;左边的路由由基于 Eureka 的服务 ID 自动创建的，右边为路由所有映射的 Eureka 服务 ID。&lt;/p&gt;
&lt;h3 id=&quot;服务发现手动手动&quot;&gt;2)、服务发现手动手动&lt;/h3&gt;
&lt;p&gt;  如果觉得自动路由不好用，我们还可以更细粒度地明确定义路由映射。例如想要缩短组织服务名称来简化路由，可在&lt;code&gt;application.yml&lt;/code&gt;配置中定义路由映射,在配置文件中加入如下配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;zuul:
  routes:
    organizationservice: /org/**&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  上面的配置将&lt;strong&gt;org&lt;/strong&gt;开头的路径映射到组织服务上了。重启服务器，访问&lt;a href=&quot;localhost:5555/org/organization/12&quot; class=&quot;uri&quot;&gt;localhost:5555/org/organization/12&lt;/a&gt;,仍然能够获取到数据。&lt;/p&gt;
&lt;p&gt;  现在访问&lt;code&gt;/routes&lt;/code&gt;端点可以看到如下结果：&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
  &quot;/org/**&quot;: &quot;organizationservice&quot;,
  &quot;/confsvr/**&quot;: &quot;confsvr&quot;,
  &quot;/licensingservice/**&quot;: &quot;licensingservice&quot;,
  &quot;/organizationservice/**&quot;: &quot;organizationservice&quot;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到不光有自定义的组织路由，自动映射的组织路由也存在，如果想要排除自动映射的路由可配置&lt;code&gt;ignored-services&lt;/code&gt;属性，用法如下：&lt;/p&gt;
&lt;pre class=&quot;yaml&quot;&gt;
&lt;code&gt;zuul:
  routes:
    organizationservice: /org/**
  # 使用&quot;,&quot;分隔，“*”表示全部忽略
  ignored-services: 'organizationservice'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  服务网关有一种常见模式是通过使用&lt;code&gt;/api&lt;/code&gt;之类的标记来为所有服务调用添加前缀，可通过配置&lt;code&gt;prefix&lt;/code&gt;属性来支持。用法如下：&lt;/p&gt;
&lt;pre class=&quot;yaml&quot;&gt;
&lt;code&gt;zuul:
  routes:
    organizationservice: /org/**
  # 使用&quot;,&quot;分隔，“*”表示全部忽略
  ignored-services: 'organizationservice'
  prefix: /api&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置后再次访问&lt;code&gt;/routes&lt;/code&gt;端点可以看到路径前都加上了&lt;code&gt;/api&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;静态-url-手动映射&quot;&gt;3)、静态 URL 手动映射&lt;/h3&gt;
&lt;p&gt;  如果系统系统中还存在一些不受 Eureka 管理的服务，可以建立 Zuul 直接路由到一个静态定义的 URL。假设许可证服务是其他语言编写的 web 项目，并且希望通过 Zuul 来代理，可这样配置：&lt;/p&gt;
&lt;pre class=&quot;yaml&quot;&gt;
&lt;code&gt;zuul:
  routes:
    #用于内部识别关键字
    licensestatic:
      path: /licensestatic/**
      url: http://localhost:8091&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置完成后重启 zuul 访问&lt;code&gt;/routes&lt;/code&gt;端点如下所示,静态路由已经加入：&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
  &quot;/api/licensestatic/**&quot;: &quot;http://localhost:8091&quot;,
  &quot;/api/org/**&quot;: &quot;organizationservice&quot;,
  &quot;/api/confsvr/**&quot;: &quot;confsvr&quot;,
  &quot;/api/licensingservice/**&quot;: &quot;licensingservice&quot;,
  &quot;/api/zuulservice/**&quot;: &quot;zuulservice&quot;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  licensestatic 端点不再使用 Eureka，直接将请求路由到&lt;code&gt;localhost:8091&lt;/code&gt;。但是这里存在一个问题，如果许可证服务有多个实例，该如何用到负载均衡？这里只能配置一条路径指向请求。这里又有一个配置项来禁用 Ribbon 与 Eureka 集成，然后列出许可证服务的所有实例，配置如下：&lt;/p&gt;
&lt;pre class=&quot;yaml&quot;&gt;
&lt;code&gt;#zuul配置
zuul:
  routes:
    #用于内部识别关键字
    licensestatic:
      path: /licensestatic/**
      serviceId: licensestatic
    organizationservice: /org/**
  # 使用&quot;,&quot;分隔，“*”表示全部忽略
  ignored-services: 'organizationservice'
  prefix: /api

ribbon:
  eureka:
    #禁用Eureka支持
    enabled: false

licensestatic:
  ribbon:
    #licensestatic服务将会路由到下列地址
    listOfServers: http://localhost:10011,http://localhost:10012&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置完毕后，访问&lt;code&gt;/routes&lt;/code&gt;端点发现&lt;code&gt;licensestatic/**&lt;/code&gt;映射到了 licensestatic 服务上，相当于 Zuul 模拟了一个服务出来。但是 Eureka 上是没有这个服务的，所以需要禁用掉 Ribbon 的 Eureka 支持，不然是无法访问成功的（Ribbon 向 Eureka 查询该服务不存在，报错)。现在 x=连续访问&lt;a href=&quot;localhost:5555//api/licensestatic/licensing/12&quot; class=&quot;uri&quot;&gt;localhost:5555//api/licensestatic/licensing/12&lt;/a&gt;,可以发现正常响应和 404 交替出现（10011 上能否访问成功，10012 报错 404），说明配置的多个地址生效了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;问题又来了&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;em&gt;虽然上面的配置能够操作成功，但是在 Ribbon 中禁用 Eureka 支持会造成一个问题，那就是服务网关代理的所有服务的 Ribbon 支持都没有了，Zuul 无法使用 Ribbon 来缓存服务的查找，每次请求都要调用 Eureka 查询服务实例,这样会对 Eureka 服务器造成巨大的压力，显然不可取的。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;  目前有两种办法来规避这个问题：&lt;/p&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;对于不能用 Eureka 管理的应用，可以建立一个单独的 Zuul 服务器来处理这些路由。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;建立一个 Spring Cloud Sidecar 实例。Spring Cloud Sidecar 允许开发使用 Eureka 实例注册非 JVM 服务，然后再通过 Zuul 代理，相当于&lt;strong&gt;曲线救国&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;动态重载路由&quot;&gt;4、动态重载路由&lt;/h2&gt;
&lt;p&gt;  zuul 还有一个动态加载路由的功能，也就是在不重启 zuul 服务的情况下刷新路由。&lt;/p&gt;
&lt;p&gt;  直接修改&lt;code&gt;application.yml&lt;/code&gt;将 prefix 从&lt;code&gt;/api&lt;/code&gt;改为&lt;code&gt;/apis&lt;/code&gt;。&lt;strong&gt;注意这里修改后要让修改生效需编译一次 application.yml 让修改替换到 target 文件中（idea 如此，eclipse 应该类似),或者直接到编译文件夹下修改 application.yml&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  然后访问&lt;code&gt;/refresh&lt;/code&gt;路径，可以看到如下返回值：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FleyX/files/master/blogImg/springcloud%E5%AE%9E%E6%88%98/20190108162102.png&quot; alt=&quot;动态刷新&quot;/&gt;&lt;/p&gt;
&lt;p&gt;响应表明更新 prefix。然后访问&lt;code&gt;/routes&lt;/code&gt;路径会发现前缀变成了&lt;strong&gt;apis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  这个功能与 spring cloud config 配合，用起来就是爽。&lt;/p&gt;
&lt;h2 id=&quot;服务超时&quot;&gt;5、服务超时&lt;/h2&gt;
&lt;p&gt;  Zuul 使用 Netflix 的 Hystrix 和 Ribbon 库来进行 http 请求。so 也是有超时机制存在的。配置方法和前面的一篇类似。但是只能通过配置文件来进行，无法通过注解（这是 Zuul 管理的没有地方给你写注解）。通过配置&lt;code&gt;hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds&lt;/code&gt;属性来实现。如果要为特定的服务配置只需将 default 替换为服务名就行了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;还要只有有另一个超时机制。虽然覆盖了 hystrix 的超时，但是 Ribbon 也会超时任何超过 5s 的调用。so 如果超时时间大于 5s 还要配置 Ribbon 的超时,配置方式如下：&lt;/p&gt;
&lt;pre class=&quot;yaml&quot;&gt;
&lt;code&gt;#对所有服务生效
ribbon.readTimeout: 7000
#对组织服务生效
licensingservice.ribbon.readTimeout: 7000&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;重点过滤器&quot;&gt;6、重点：过滤器&lt;/h2&gt;
&lt;p&gt;  这才是服务网关真正重要的东西。有了过滤器才能实现自定义的通用处理逻辑。可在此进行通用的&lt;strong&gt;安全验证&lt;/strong&gt;、&lt;strong&gt;日志&lt;/strong&gt;、&lt;strong&gt;服务跟踪&lt;/strong&gt;等操作。和 springboot 中的过滤器概念类似，这里就不做说明了。&lt;/p&gt;
&lt;p&gt;  Zuul 支持以下四种过滤器：&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;前置过滤器&lt;/strong&gt;——在将请求发送到目的地之前被调用。通常进行请求格式检查、身份验证等操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;后置过滤器&lt;/strong&gt;——在目标服务被调用被将响应发回调用者后被调用。通常用于记录从目标服务返回的响应、处理错误或审核敏感信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;路由过滤器&lt;/strong&gt;——在目标服务被调用之前拦截调用。通常用来做动态路由。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;错误过滤器&lt;/strong&gt;——在产生错误是调用，用于对错误进行统一处理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下图展示了在处理客户端请求时，各种过滤器时如何工作的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FleyX/files/master/blogImg/springcloud%E5%AE%9E%E6%88%98/20190108183131.png&quot; alt=&quot;过滤器&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面说说如何来使用这些过滤器：&lt;/p&gt;
&lt;h3 id=&quot;a前置过滤器&quot;&gt;a、前置过滤器&lt;/h3&gt;
&lt;p&gt;  这里我们来实现一个过滤器-IdFilter，对每个请求检查请求头中是否有一个关联 id，无 id 生成一个 id 加入到 header 中。代码如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Component
public class IdFilter extends ZuulFilter {

    private static final Logger LOGGER = LoggerFactory.getLogger(IdFilter.class);

    /**
     * 返回过滤器类型 ；pre:前置过滤器。post：后置过滤器。routing:路由过滤器。error：错误过滤器
     */
    @Override
    public String filterType() {
        return &quot;pre&quot;;
    }

    /**
     * 过滤器执行顺序
     */
    @Override
    public int filterOrder() {
        return 1;
    }

    /**
     * 是否启动此过滤器
     */
    @Override
    public boolean shouldFilter() {
        return true;
    }

    @Override
    public Object run() {
        RequestContext ctx = RequestContext.getCurrentContext();
        String id = ctx.getRequest().getHeader(&quot;id&quot;);
        //如果request找不到，再到zuul的方法中找id.request不允许直接修改response中的header，
        // 所以为了让后续的过滤器能够获取到id才有下面的语法
        if(id==null){
            id = ctx.getZuulRequestHeaders().get(&quot;id&quot;);
        }
        if (id == null) {
            id = UUID.randomUUID().toString();
            LOGGER.info(&quot;{} 无id，生成id:{}&quot;,ctx.getRequest().getRequestURI(), id);
            ctx.addZuulRequestHeader(&quot;id&quot;, id);
        } else {
            LOGGER.info(&quot;{}存在id：{}&quot;, ctx.getRequest().getRequestURI(), id);
        }
        return null;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要在 Zuul 中实现过滤器，必须拓展 ZuulFilter 类（2.x 版本中不是这样的），然后覆盖上述 4 个方法。&lt;/p&gt;
&lt;p&gt;  要给请求头加入一个 header 需要在&lt;code&gt;ctx.addZuulRequestHreader(&quot;&quot;,&quot;&quot;)&lt;/code&gt;(上面代码中的 RequestContext 是 zuul 重写的，在其中加入了一些方法)方法中操作，zuul 会在发出请求是把 header 加到请求头中。（因为 Zuul 本质是一个代理，它截取请求，然后自己再发送这个请求，所有不能也没有必要在原来的 request 上加 header。&lt;/p&gt;
&lt;p&gt;  重启项目 Zuul，访问&lt;code&gt;localhost:5555/apis/licensestatic/licensing/12&lt;/code&gt;，可以看到控制台有如下打印：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FleyX/files/master/blogImg/springcloud%E5%AE%9E%E6%88%98/20190108195505.png&quot; alt=&quot;前置过滤器&quot;/&gt;&lt;/p&gt;
&lt;p&gt;说明前置过滤器生效。&lt;/p&gt;
&lt;p&gt;  现在从 zuul 服务网关发往许可证服务的 http 请求已经携带了 id。&lt;/p&gt;
&lt;h3 id=&quot;b后置过滤器&quot;&gt;b、后置过滤器&lt;/h3&gt;
&lt;p&gt;  后置过滤器通常用于进行敏感信息过滤和响应记录。这里我们实现一个后置过滤器，将许可证服务请求的响应内容打印到控制台上同时把&lt;code&gt;id&lt;/code&gt;header 插入到服务客户端请求的 response 中。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Component
public class ResponseFilter extends ZuulFilter {

    private static final Logger LOGGER = LoggerFactory.getLogger(ResponseFilter.class);

    /**
     * 返回过滤器类型 ；pre:前置过滤器。post：后置过滤器。routing:路由过滤器。error：错误过滤器
     */
    @Override
    public String filterType() {
        return &quot;post&quot;;
    }

    /**
     * 过滤器执行顺序
     */
    @Override
    public int filterOrder() {
        return 1;
    }

    /**
     * 是否启动此过滤器
     */
    @Override
    public boolean shouldFilter() {
        return true;
    }

    @Override
    public Object run(){
        RequestContext ctx = RequestContext.getCurrentContext();
        String id = ctx.getZuulRequestHeaders().get(&quot;id&quot;);
        ctx.getResponse().addHeader(&quot;id&quot;, id);
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(ctx.getResponseDataStream()));
            String response = reader.readLine();
            LOGGER.info(&quot;响应为：{}&quot;, response);
            //写到输出流中,本来可以由zuul框架来操作，但是我们已经读取了输入流，zuul读不到数据了，所以要手动写响应到response
            ctx.getResponse().setHeader(&quot;Content-Type&quot;,&quot;application/json;charset=utf-8&quot;);
            ctx.getResponse().getWriter().write(response);
        } catch (Exception e) {
        }
        return null;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;经过这样一波操作，就能达到目的了。访问：&lt;a href=&quot;http://localhost:5555/apis/licensestatic/licensing/12&quot;&gt;localhost:5555/apis/licensestatic/licensing/12&lt;/a&gt;。控制台打印如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FleyX/files/master/blogImg/springcloud%E5%AE%9E%E6%88%98/20190108195505.png&quot; alt=&quot;控制台打印&quot;/&gt;&lt;/p&gt;
&lt;p&gt;请求响应如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/FleyX/files/master/blogImg/springcloud%E5%AE%9E%E6%88%98/pic2.png&quot; alt=&quot;请求响应&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;c路由过滤器&quot;&gt;c、路由过滤器&lt;/h3&gt;
&lt;p&gt;  路由过滤器用起来有点复杂，这里不写具体的实际代码，只是写一个思路。具体代码可以参考&lt;a href=&quot;https://github.com/carnellj/spmia-chapter6/blob/master/zuulsvr/src/main/java/com/thoughtmechanix/zuulsvr/filters/SpecialRoutesFilter.java&quot;&gt;spring 微服务&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;获取当前请求路径&lt;/li&gt;
&lt;li&gt;判断是否需要进行特殊路由&lt;/li&gt;
&lt;li&gt;如需要进行特殊路由，在此进行 http 调用&lt;/li&gt;
&lt;li&gt;将 http 调用的 response 写入到当前请求的 response 中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;  终于写完了，微服务的基础学习又近了一步，加油！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本篇原创发布于：&lt;/strong&gt;&lt;a href=&quot;http://www.cnblogs.com/wuyoucao/p/tapme.top/blog/detail/2019-01-03-19-19&quot;&gt;FleyX 的个人博客&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 17 Jan 2019 07:39:00 +0000</pubDate>
<dc:creator>烦嚣的人</dc:creator>
<og:description>继续学习，服务网关。像微服务这样的分布式架构中，需要确保跨多个服务调用的关键行为（如安全、日志记录、用户跟踪等）能够正常运行，这就需要一个服务网关来统一处理。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuyoucao/p/10282583.html</dc:identifier>
</item>
<item>
<title>Webdriver之API详解(2) - linux超</title>
<link>http://www.cnblogs.com/linuxchao/p/linuxchao-selenium-apitwo.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linuxchao/p/linuxchao-selenium-apitwo.html</guid>
<description>&lt;p&gt;前言：今天继续上一篇文章&lt;a href=&quot;https://www.cnblogs.com/linuxchao/p/linuxchao-selenium-apione.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/linuxchao/p/linuxchao-selenium-apione.html&lt;/a&gt;分享selenium' webdriver api的用法，&lt;/p&gt;
&lt;h2&gt;⑪判断页面元素是否可见&lt;/h2&gt;
&lt;p&gt; 用于测试的HTML代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;HTML中显示与隐藏元素&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;Content-Type&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;text/html&quot;&lt;/span&gt;&lt;span&gt;; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; showAndHidden1() {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; div1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;div1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; div2 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;div2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(div1.style.display&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) div1.style.display&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; div1.style.display&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(div2.style.display&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) div2.style.display&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; div2.style.display&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;

        }
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; showAndHidden2() {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; div3 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;div3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; div4 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;div4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(div3.style.visibility&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;visible&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) div3.style.visibility&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; div3.style.visibility&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;visible&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(div4.style.visibility&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;visible&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) div4.style.visibility&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; div4.style.visibility&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;visible&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        }
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;display:元素不占用页面位置&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;div1&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;display: block;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DIV 1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;div2&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;display: none;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DIV 2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;button1&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;showAndHidden1();&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;DIV切换&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;visibility:元素占用页面位置&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;div3&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;visibility: visible;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DIV 1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;div4&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;visibility: hidden;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DIV 2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;button2&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;showAndHidden2();&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;DIV切换&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用API实例代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2851952f-1dfc-4338-ada2-24bd3631e531')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2851952f-1dfc-4338-ada2-24bd3631e531&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2851952f-1dfc-4338-ada2-24bd3631e531&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2851952f-1dfc-4338-ada2-24bd3631e531',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2851952f-1dfc-4338-ada2-24bd3631e531&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; testElementIsDisplay(self):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         self.driver.get(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file:///C:/Users/v-xug/Desktop/isdisplay.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 找到div2元素&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         div2 = self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断div2元素是否可见&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; div2.is_displayed():
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div2 元素可见&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div2 元素不可见&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 点击第一个按钮&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         button1 = self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;button1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        button1.click()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 再次判断div2元素是否可见&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; div2.is_displayed():
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div2 元素可见&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div2 元素不可见&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;找到div4元素&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         div4 = self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断div4是否可见&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; div4.is_displayed():
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div4 元素可见&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div4 元素不可见&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 点击第二个按钮&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         button2 = self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;button2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        button2.click()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 再次判断div4元素是否可见&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; div4.is_displayed():
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div4 元素可见&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div4 元素不可见&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;判断元素是否可见&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8262557c-9ac0-4971-b564-4302fa89db94')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_8262557c-9ac0-4971-b564-4302fa89db94&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8262557c-9ac0-4971-b564-4302fa89db94&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8262557c-9ac0-4971-b564-4302fa89db94',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8262557c-9ac0-4971-b564-4302fa89db94&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;div2 元素不可见
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;div2 元素可见
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;div4 元素不可见
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;div4 元素可见
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;.
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; ----------------------------------------------------------------------
&lt;span&gt; 7&lt;/span&gt; Ran 1 test &lt;span&gt;in&lt;/span&gt; 9&lt;span&gt;.288s
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;OK
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; Process finished with exit code 0
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;输出&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;小结&lt;/p&gt;
&lt;p&gt;通过代码的运行和输出结果，我们可以知道即使页面看不到的元素，webdriver也是可以找到的。因为隐藏的元素也是存在DOM树种的。&lt;/p&gt;
&lt;h2&gt;⑫判断元素是否可操作&lt;/h2&gt;
&lt;p&gt;用于测试的HTML代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;Content-Type&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;text/html&quot;&lt;/span&gt;&lt;span&gt;; charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;HTML 中不可操作元素&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;input1&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; size&lt;/span&gt;&lt;span&gt;=&quot;40&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;可操作&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;input2&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; size&lt;/span&gt;&lt;span&gt;=&quot;40&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;不可用&quot;&lt;/span&gt;&lt;span&gt; disabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;input3&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; size&lt;/span&gt;&lt;span&gt;=&quot;40&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;只读&quot;&lt;/span&gt;&lt;span&gt; readonly&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 调用API实例代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6269cd33-2f16-4168-a6f1-bd066ebcb27f')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_6269cd33-2f16-4168-a6f1-bd066ebcb27f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6269cd33-2f16-4168-a6f1-bd066ebcb27f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6269cd33-2f16-4168-a6f1-bd066ebcb27f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6269cd33-2f16-4168-a6f1-bd066ebcb27f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; testElementIsEnable(self):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         self.driver.get(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file:///C:/Users/v-xug/Desktop/isenable.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         input1 = self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; input1.is_enabled():
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input1 可操作&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input1 不可操作&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         input2 = self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; input2.is_enabled():
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input2 可操作&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input2 不可操作&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         input3 = self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; input3.is_enabled():
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input3 可操作&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input3 不可操作&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;判断元素是否可操作&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d779f5f4-b0c9-4744-858e-43a7bb466c84')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_d779f5f4-b0c9-4744-858e-43a7bb466c84&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d779f5f4-b0c9-4744-858e-43a7bb466c84&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d779f5f4-b0c9-4744-858e-43a7bb466c84',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d779f5f4-b0c9-4744-858e-43a7bb466c84&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;input1 可操作
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;input2 不可操作
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;.
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; ----------------------------------------------------------------------
&lt;span&gt; 5&lt;/span&gt; Ran 1 test &lt;span&gt;in&lt;/span&gt; 15&lt;span&gt;.442s
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;OK
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;input3 可操作
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; Process finished with exit code 0
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;输出&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 小结&lt;/p&gt;
&lt;p&gt;从输出结果我们可以判断出，对元素添加了disabled属性后，元素将处于不可操作状态。&lt;/p&gt;
&lt;h2&gt;⑬获取页面元素的属性&lt;/h2&gt;
&lt;p&gt;用于测试的网址&lt;/p&gt;
&lt;p&gt;http://www.sogou.com&lt;/p&gt;
&lt;p&gt;调用APi实例代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('91c3d216-3809-4de5-a372-fa19c1951851')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_91c3d216-3809-4de5-a372-fa19c1951851&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_91c3d216-3809-4de5-a372-fa19c1951851&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('91c3d216-3809-4de5-a372-fa19c1951851',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_91c3d216-3809-4de5-a372-fa19c1951851&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; testGetAttribute(self):
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         self.driver.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.sogou.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         query = self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(query.get_attribute(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         query.send_keys(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;python&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(query.get_attribute(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;获取元素的属性值&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt; ⑭双击某个元素&lt;/h2&gt;
&lt;p&gt;模拟鼠标左键双击操作&lt;/p&gt;
&lt;p&gt;用于测试的HTML代码&lt;/p&gt;
&lt;p&gt;（当双击时，输入框会变成红色）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;模拟鼠标双击操作&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;inputBox&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; ondblclick&lt;/span&gt;&lt;span&gt;=&quot;javascript:this.style.background='red'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;请双击&lt;span&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 调用API实例代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5dabb61f-ce96-4238-84ad-83e25ffb512a')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_5dabb61f-ce96-4238-84ad-83e25ffb512a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5dabb61f-ce96-4238-84ad-83e25ffb512a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5dabb61f-ce96-4238-84ad-83e25ffb512a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5dabb61f-ce96-4238-84ad-83e25ffb512a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; testDoubleClick(self):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;from&lt;/span&gt; selenium.webdriver &lt;span&gt;import&lt;/span&gt; ActionChains &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 模拟鼠标操作事件包&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         self.driver.get(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file:///C:/Users/v-xug/Desktop/doubleclick.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 找到要操作的元素&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         time.sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         inputbox = self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;inputBox&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         action =&lt;span&gt; ActionChains(self.driver)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 模拟鼠标双击操作&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        action.double_click(inputbox).perform()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         time.sleep(3)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;模拟鼠标双击操作&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 小结&lt;/p&gt;
&lt;p&gt;selenium.webdriver.ActionChains 包是WebDriver针对Python语言提供的专门用于模拟鼠标操作事件的包，比如双击，悬浮，拖拽等，后面陆续介绍&lt;/p&gt;
&lt;h2&gt;⑮操作单选下拉列表&lt;/h2&gt;
&lt;p&gt;用于测试的HTML代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;操作下拉列表&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;fruit&quot;&lt;/span&gt;&lt;span&gt; size&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;peach&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;taozi&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;桃子&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;watermelon&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;xigua&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;西瓜&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;orange&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;juzi&quot;&lt;/span&gt;&lt;span&gt; selected&lt;/span&gt;&lt;span&gt;=&quot;selected&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;橘子&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;kiwifruit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;nihoutao&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;猕猴桃&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;maybush&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;shanzha&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;山楂&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;litchi&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;lizhi&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;荔枝&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 1.遍历所有选项并打印选项显示的文本和选项值&lt;/h3&gt;
&lt;p&gt;调用API实例代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('30a0690c-edce-457f-9a37-de05c182bc67')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_30a0690c-edce-457f-9a37-de05c182bc67&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_30a0690c-edce-457f-9a37-de05c182bc67&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('30a0690c-edce-457f-9a37-de05c182bc67',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_30a0690c-edce-457f-9a37-de05c182bc67&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 遍历下拉列表，获取下拉列表元素的所有显示值和value属性值&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; testSelect(self):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         self.driver.get(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file:///C:/Users/v-xug/Desktop/actionselect.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查找下拉列表元素&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         select = self.driver.find_element_by_name(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fruit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         elements = select.find_elements_by_xpath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//option&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; element &lt;span&gt;in&lt;/span&gt;&lt;span&gt; elements:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(element.text)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(element.get_attribute(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            element.click()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             time.sleep(1)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;遍历单选列表&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3f250180-ffff-4c76-aed2-1b0398e41d21')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_3f250180-ffff-4c76-aed2-1b0398e41d21&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3f250180-ffff-4c76-aed2-1b0398e41d21&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3f250180-ffff-4c76-aed2-1b0398e41d21',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3f250180-ffff-4c76-aed2-1b0398e41d21&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;桃子
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;taozi
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;西瓜
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;xigua
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;橘子
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;juzi
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;猕猴桃
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;nihoutao
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;山楂
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;shanzha
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;荔枝
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;lizhi
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;.
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; ----------------------------------------------------------------------
&lt;span&gt;15&lt;/span&gt; Ran 1 test &lt;span&gt;in&lt;/span&gt; 16&lt;span&gt;.693s
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;OK
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; Process finished with exit code 0
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;输出&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt; 2.选择下拉列表元素的三种方法&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('20e39d52-830c-492c-939a-76e50ce244e7')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_20e39d52-830c-492c-939a-76e50ce244e7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_20e39d52-830c-492c-939a-76e50ce244e7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('20e39d52-830c-492c-939a-76e50ce244e7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_20e39d52-830c-492c-939a-76e50ce244e7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; testSelectOption(self):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;from&lt;/span&gt; selenium.webdriver.support.ui &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Select
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         self.driver.get(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file:///C:/Users/v-xug/Desktop/actionselect.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         select_element = Select(self.driver.find_element_by_xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//select&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 打印默认选项&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(select_element.first_selected_option.text)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取所有下拉选项元素&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         all_options =&lt;span&gt; select_element.options
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 打印下拉选项的个数&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(len(all_options))
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果第二个选项可以操作且没有被选中，那么我们就选择这个选项&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; all_options[1].is_enabled() &lt;span&gt;and&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; all_options[1&lt;span&gt;].is_selected():
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第一个方法 通过序号选择选项 序号从0开始&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             select_element.select_by_index(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 打印选中选项的文本&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(select_element.all_selected_options[0].text)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         time.sleep(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第二种办法通过选项的文本选择选项&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         select_element.select_by_visible_text(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;猕猴桃&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 断言选中的选项是否为猕猴桃&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         self.assertEqual(select_element.all_selected_options[0].text, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;猕猴桃&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         time.sleep(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第三种方法，通过选项的value属性值选择选项&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         select_element.select_by_value(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;shanzha&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(select_element.all_selected_options[0].text)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         self.assertEqual(select_element.all_selected_options[0].text, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;山楂&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;选择下拉列表的3中方法&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9e370ef8-7864-4f72-a6c6-35552936eb84')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_9e370ef8-7864-4f72-a6c6-35552936eb84&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9e370ef8-7864-4f72-a6c6-35552936eb84&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9e370ef8-7864-4f72-a6c6-35552936eb84',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9e370ef8-7864-4f72-a6c6-35552936eb84&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;橘子
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 6
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;西瓜
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;山楂
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;.
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; ----------------------------------------------------------------------
&lt;span&gt; 7&lt;/span&gt; Ran 1 test &lt;span&gt;in&lt;/span&gt; 14&lt;span&gt;.531s
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;OK
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; Process finished with exit code 0
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;输出&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 小结：selenium'_element.all_selected_options 属性获取的是所有被选中项的对象组成的列表对象，由于本实例中是单选下拉列表，因此选中项只有一个，通过select_element.all_selected_options[0].text这句代码获取被选中项的文本内容&lt;/p&gt;
&lt;h3&gt; 3.断言单选列表的选项值&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a57e297f-6480-4754-a943-3b2edd3d68e4')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_a57e297f-6480-4754-a943-3b2edd3d68e4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a57e297f-6480-4754-a943-3b2edd3d68e4&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a57e297f-6480-4754-a943-3b2edd3d68e4',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a57e297f-6480-4754-a943-3b2edd3d68e4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; testAssertOptions(self):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;from&lt;/span&gt; selenium.webdriver.support.ui &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Select
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         self.driver.get(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file:///C:/Users/v-xug/Desktop/actionselect.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         select_element = Select(self.driver.find_element_by_xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//select&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 找到所有的下拉选项&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         actual_options =&lt;span&gt; select_element.options
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 期望列表&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         expect_optionslist = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;桃子&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;西瓜&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;橘子&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;猕猴桃&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;山楂&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;荔枝&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取所有的选项的文本值&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         actual_optionslist = [actual_options &lt;span&gt;for&lt;/span&gt; actual_options &lt;span&gt;in&lt;/span&gt;  map(&lt;span&gt;lambda&lt;/span&gt;&lt;span&gt; option:option.text, actual_options)]
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(actual_optionslist)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 断言&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         self.assertListEqual(expect_optionslist, actual_optionslist)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 总结&lt;/p&gt;
&lt;p&gt;　　今天就整理这些吧，后面还有挺多实例需要整理，也都是平时工作中会经常用到的API；文章中文字说明不是很多，代码比较多，大多数我都注释过了，因为我觉得只要有点基础的都能看的懂，搞太多文字反而没有用，按照我整理的实例，自己运行一下完全能明白！当然不明白的可以加我qq！&lt;/p&gt;
</description>
<pubDate>Thu, 17 Jan 2019 07:15:00 +0000</pubDate>
<dc:creator>linux超</dc:creator>
<og:description>前言：今天继续上一篇文章https://www.cnblogs.com/linuxchao/p/linuxchao-selenium-apione.html分享selenium' webdri</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/linuxchao/p/linuxchao-selenium-apitwo.html</dc:identifier>
</item>
<item>
<title>线性回归--原理 - AI_developer</title>
<link>http://www.cnblogs.com/ai-developer/p/10282120.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ai-developer/p/10282120.html</guid>
<description>&lt;p&gt;通常我们学习机器学习都是从线性回归模型开始的。线性回归模型形式简单、易于建模，但是我们可以从中学习到机器学习的一些重要的基本思想。&lt;/p&gt;
&lt;blockquote readability=&quot;24&quot;&gt;
&lt;p&gt;&lt;strong&gt;回归&lt;/strong&gt;一词的由来：&lt;/p&gt;
&lt;p&gt;这个术语是英国生物学家兼统计学家高尔顿在1886年左右提出来的。人们大概都注意到，子代的身高与其父母的身高有关。高尔顿以父母的平均身高X作为自变量，其一成年儿子的身高Y为因变量。他观察了1074对父母及其一成年儿子的身高，将所得(X, Y)值标在直角坐标系上，发现二者的关系近乎一条直线，总的趋势是X增加时Y倾向于增加，这是意料中的结果.有意思的是,高尔顿对所得数据做了深入一层的考察，而发现了某种有趣的现象。&lt;/p&gt;
&lt;p&gt;高尔顿算出这1074个X值的算术平均为68英寸(1英寸为2.54厘米)，而1074个Y值的算术平均为69英寸，子代身高平均增加了1英寸，这个趋势现今人们也已注意到。以此为据，人们可能会这样推想：如果父母平均身高为a英寸，则这些父母的子代平均身高应为a+1英寸，即比父代多1英寸。但高尔顿观察的结果与此不符，他发现：当父母平均身高为72英寸时，他们的子代身高平均只有71英寸,不仅达不到预计的72+1=73英寸，反而比父母平均身高小了。反之,若父母平均身高为64英寸，则观察数据显示子代平均身高为67英寸，比预计的64+1=65英寸要多。&lt;/p&gt;
&lt;p&gt;高尔顿对此的解释是：大自然有一种约束机制，使人类身高分布保持某种稳定形态而不作两极分化。这就是种使身高“回归于中心“的作用。例如，父母身高平均为72英寸，比他们这一代平均身高68英寸高出许多，“回归于中心”的力量把他们子代的身高拉回来些：其平均身高只有71英寸，反比父母平均身高小，但仍超过子代全体平均69英寸。反之，当父母平均身高只有64英寸，远低于他们这代的平均值68英寸时，“回归于中心”的力量将其子代身高拉回去一些，其平均值达到67英寸，增长了3英寸，但仍低于子代全体平均值69英寸。&lt;/p&gt;
&lt;p&gt;正是通过这个例子，高尔顿引人了“回归”这个名词。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线性回归的模型形如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190117124915507.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;线性回归得出的模型不一定是一条直线，在只有一个变量的时候，模型是平面中的一条直线；有两个变量的时候，模型是空间中的一个平面；有更多变量时，模型将是更高维的。&lt;/p&gt;
&lt;p&gt;线性回归模型有很好的可解释性，可以从权重W直接看出每个特征对结果的影响程度。&lt;/p&gt;
&lt;p&gt;线性回归适用于X和y之间存在线性关系的数据集，可以使用计算机辅助画出散点图来观察是否存在线性关系。例如我们假设房屋价格和房屋面积之间存在某种线性关系，画出散点图如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190117124929150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0NjcxOTQx,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看起来这些点分布在一条直线附近，我们尝试使用一条直线来拟合数据，使所有点到直线的距离之和最小。实际上，线性回归中通常使用&lt;strong&gt;残差平方和&lt;/strong&gt;，即点到直线的平行于y轴的距离而不用垂线距离，残差平方和除以样本量n就是&lt;strong&gt;均方误差&lt;/strong&gt;。均方误差作为线性回归模型的代价函数(cost function)。使所有点到直线的距离之和最小，就是使均方误差最小化，这个方法叫做&lt;strong&gt;最小二乘法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;代价函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190117125045101.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190117125013154.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面求使J最小的W和b：&lt;/p&gt;
&lt;h4 id=&quot;1&quot;&gt;1.偏导数法&lt;/h4&gt;
&lt;p&gt;偏导数法是非常麻烦的，需要一个一个地计算w。为了方便，这里以单变量线性回归为例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019011712500481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0NjcxOTQx,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;2&quot;&gt;2.正规方程法&lt;/h4&gt;
&lt;p&gt;正规方程使用矩阵运算，可以一次求出W向量。但是当变量(feature)个数大于数据个数时，会导致xTx不可逆，这时候就不能用此方法了。&lt;/p&gt;
&lt;p&gt;使用正规方程法，如果希望得到的模型带有偏置项b，就要先给数据集X增加全为1的一列，这样才会把b包含在W中；如果不添加，那么模型是强制过原点的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190117124952748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0NjcxOTQx,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;3&quot;&gt;3.梯度下降&lt;/h4&gt;
&lt;p&gt;这里的&lt;strong&gt;代价函数J&lt;/strong&gt;的&lt;strong&gt;海森矩阵H&lt;/strong&gt;是半正定的，因此J一定有全局最小值，所以也可以使用&lt;strong&gt;梯度下降法&lt;/strong&gt;来求解。梯度下降法是一种迭代解法，不仅可以求解最小二乘问题，也适用于其它代价函数的问题。但是需要设置学习率α，α设置的过大或过小，都不能很好地训练出模型，而且梯度下降法需要对数据集进行特征缩放。一般会在数据集特别大的时候或者xTx不可逆的时候使用梯度下降法，后面再做介绍。&lt;/p&gt;
&lt;h4 id=&quot;4&quot;&gt;4.其他&lt;/h4&gt;
&lt;p&gt;还有一些方法就不一一列举了。例如奇异值分解，QR分解，乔姆斯基分解等等。&lt;/p&gt;
&lt;p&gt;计算出的模型如下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019011712494383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0NjcxOTQx,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再放一个两个变量的情况的，如下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190117125202200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0NjcxOTQx,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;

&lt;div&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20181126175246136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0NjcxOTQx,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;400&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 17 Jan 2019 06:38:00 +0000</pubDate>
<dc:creator>AI_developer</dc:creator>
<og:description>线性回归--原理 线性回归--python实现(不使用框架) 线性回归--sklearn框架实现 通常我们学习机器学习都是从线性回归模型开始的。线性回归模型形式简单、易于建模，但是我们可以从中学习到机</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ai-developer/p/10282120.html</dc:identifier>
</item>
<item>
<title>C#使用CefSharp开源库开发Chrome 浏览器 - 可均可可</title>
<link>http://www.cnblogs.com/PatrickLiu/p/10281941.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PatrickLiu/p/10281941.html</guid>
<description>&lt;p&gt;   &lt;br/&gt;    &lt;span&gt;&lt;strong&gt;一、介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        这个东西我以前没有接触过，但是公司项目里面有用到这个东西，所以就顺便研究一下。今天只是做了 WinForm 的测试，有时间了在试试 WPF 是如何实现的。刚开始一塌糊涂，有点麻烦，慢慢的理清了，其实也不是很难。&lt;/p&gt;&lt;p&gt;&lt;span&gt;    &lt;strong&gt;二、开发步骤&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span&gt;&lt;strong&gt;1、下载和安装程序集&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;            当前程序集最新的版本是69.0.0，如果想直接下载程序集的 DLL ,可以通过该地址进行下载 https://www.nuget.org/packages/CefSharp.WinForms/69.0.0。说明一下，以后的版本有可能会变，具体的地址也有可能会变。可以通过nuget轻松获得所有的依赖库。如果的你的网络不好，可以先下载，然后再在项目中添加引用。 效果如图：&lt;/p&gt;&lt;p&gt;                &lt;img src=&quot;https://img2018.cnblogs.com/blog/1048776/201901/1048776-20190117140102927-1047607246.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;            如果是使用 Windows 操作系统，开发 WinForm 应用，我们可以使用 NuGet 程序包进行安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;             PM&amp;gt; Install-Package CefSharp.WinForms -Version &lt;span&gt;69.0&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;            NET CLI：
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt;             &amp;gt;dotnet add package CefSharp.WinForms --version &lt;span&gt;69.0&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;                 
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;            Paket CLI：
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; 
&lt;span&gt;9&lt;/span&gt;             &amp;gt;paket add CefSharp.WinForms --version &lt;span&gt;69.0&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;       &lt;strong&gt; &lt;span&gt;2、代码实现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;            &lt;strong&gt;&lt;span&gt;1）主窗体实现&lt;/span&gt;&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;                主窗体如图：&lt;br/&gt;                    &lt;br/&gt;                &lt;img src=&quot;https://img2018.cnblogs.com/blog/1048776/201901/1048776-20190117140618167-180855877.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;                主窗体代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt;&lt;span&gt; CefSharp.WinForms;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Windows.Forms;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ChromiumWebBrowserForWindowsForms
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; frmBrower : Form
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ChromiumWebBrowser webBrowser;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;                         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; frmBrower()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                            InitializeComponent();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                             &lt;span&gt;this&lt;/span&gt;.Load +=&lt;span&gt; Form1_Load;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;                         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Form1_Load(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, System.EventArgs e)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                             webBrowser = &lt;span&gt;new&lt;/span&gt; ChromiumWebBrowser(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;www.cnblog.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                             webBrowser.Dock =&lt;span&gt; DockStyle.Fill;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pnlContainer.Controls.Add(webBrowser);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                             webBrowser.Load(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;www.cnblogs.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;                         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; btnEnter_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, System.EventArgs e)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                             ChildForm child = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ChildForm(txtUrl.Text);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                            child.Show();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;            &lt;span&gt;&lt;strong&gt;2）子窗体实现：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                子窗体如图：&lt;/p&gt;&lt;p&gt;               &lt;img src=&quot;https://img2018.cnblogs.com/blog/1048776/201901/1048776-20190117140714304-1523033413.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;                代码实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt;&lt;span&gt; CefSharp.WinForms;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Windows.Forms;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ChromiumWebBrowserForWindowsForms
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ChildForm : Form
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ChromiumWebBrowser webBrowser;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; url;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ChildForm()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                            InitializeComponent();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                             &lt;span&gt;this&lt;/span&gt;.Load +=&lt;span&gt; ChildForm_Load;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;                         &lt;span&gt;public&lt;/span&gt; ChildForm(&lt;span&gt;string&lt;/span&gt; text):&lt;span&gt;this&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                             url =&lt;span&gt; text;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;                         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ChildForm_Load(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                             webBrowser = &lt;span&gt;new&lt;/span&gt; ChromiumWebBrowser(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                             webBrowser.Dock =&lt;span&gt; DockStyle.Fill;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Controls.Add(webBrowser);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                            webBrowser.Load(url);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 } 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;        &lt;span&gt;&lt;strong&gt;3、解决问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;           &lt;strong&gt; 1）、增加 AnyCPU 支持（CefSharp.Common does not work correctly on 'AnyCPU' platform. You need to specify platform (x86 / x64)。 这个错误其实是cefsharp的一个缺陷。cefsharpPic的项目团队说以后会把这个bug修补。我们暂时现在把这个问题解决。 ）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;               &lt;span&gt; [1]、您必须将&amp;lt;CefSharpAnyCpuSupport&amp;gt; true &amp;lt;/ CefSharpAnyCpuSupport&amp;gt;添加到项目中的第一个&amp;lt;PropertyGroup&amp;gt;配置节（例如.csproj文件）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
                    &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Project &lt;/span&gt;&lt;span&gt;ToolsVersion&lt;/span&gt;&lt;span&gt;=&quot;14.0&quot;&lt;/span&gt;&lt;span&gt; DefaultTargets&lt;/span&gt;&lt;span&gt;=&quot;Build&quot;&lt;/span&gt;&lt;span&gt; xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Import &lt;/span&gt;&lt;span&gt;Project&lt;/span&gt;&lt;span&gt;=&quot;..\packages\CefSharp.WinForms.69.0.0\build\CefSharp.WinForms.props&quot;&lt;/span&gt;&lt;span&gt; Condition&lt;/span&gt;&lt;span&gt;=&quot;Exists('..\packages\CefSharp.WinForms.69.0.0\build\CefSharp.WinForms.props')&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Import &lt;/span&gt;&lt;span&gt;Project&lt;/span&gt;&lt;span&gt;=&quot;..\packages\CefSharp.Common.69.0.0\build\CefSharp.Common.props&quot;&lt;/span&gt;&lt;span&gt; Condition&lt;/span&gt;&lt;span&gt;=&quot;Exists('..\packages\CefSharp.Common.69.0.0\build\CefSharp.Common.props')&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Import &lt;/span&gt;&lt;span&gt;Project&lt;/span&gt;&lt;span&gt;=&quot;..\packages\cef.redist.x86.3.3497.1841\build\cef.redist.x86.props&quot;&lt;/span&gt;&lt;span&gt; Condition&lt;/span&gt;&lt;span&gt;=&quot;Exists('..\packages\cef.redist.x86.3.3497.1841\build\cef.redist.x86.props')&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Import &lt;/span&gt;&lt;span&gt;Project&lt;/span&gt;&lt;span&gt;=&quot;..\packages\cef.redist.x64.3.3497.1841\build\cef.redist.x64.props&quot;&lt;/span&gt;&lt;span&gt; Condition&lt;/span&gt;&lt;span&gt;=&quot;Exists('..\packages\cef.redist.x64.3.3497.1841\build\cef.redist.x64.props')&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Import &lt;/span&gt;&lt;span&gt;Project&lt;/span&gt;&lt;span&gt;=&quot;$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props&quot;&lt;/span&gt;&lt;span&gt; Condition&lt;/span&gt;&lt;span&gt;=&quot;Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PropertyGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;CefSharpAnyCpuSupport&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;CefSharpAnyCpuSupport&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;                &lt;span&gt;[2]、增加 &amp;lt;probing privatePath=&quot;x86&quot;/&amp;gt; 去你的 app.config 配置文件。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;runtime&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;assemblyBinding &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;urn:schemas-microsoft-com:asm.v1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;strong&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;probing &lt;/span&gt;&lt;span&gt;privatePath&lt;/span&gt;&lt;span&gt;=&quot;x86&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;assemblyBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;runtime&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                &lt;span&gt;[3]、修改应用程序根目录下的 Program.cs 文件。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;                    [STAThread]
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;                     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Main()
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                         &lt;span&gt;var&lt;/span&gt; settings = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CefSettings();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                         settings.BrowserSubprocessPath = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;x86\CefSharp.BrowserSubprocess.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;                         Cef.Initialize(settings, performDependencyCheck: &lt;span&gt;false&lt;/span&gt;, browserProcessHandler: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;                         &lt;span&gt;var&lt;/span&gt; browser = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BrowserForm();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                        Application.Run(browser);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;            &lt;strong&gt;&lt;span&gt;2）、没有在程序启动的时候初始化 CefSharp 导致添加ChromiumWebBrowser控件显示一片灰色。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;                &lt;span&gt;[1]、要初始化 CefSharp 对象，否则就是什么都没有。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;                    [STAThread]
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;                     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Main()
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                         &lt;span&gt;var&lt;/span&gt; settings = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CefSettings();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                         settings.BrowserSubprocessPath = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;x86\CefSharp.BrowserSubprocess.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;                         Cef.Initialize(settings, performDependencyCheck: &lt;span&gt;false&lt;/span&gt;, browserProcessHandler: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;                         &lt;span&gt;var&lt;/span&gt; browser = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BrowserForm();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                        Application.Run(browser);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;          &lt;strong&gt;3）、bin目录下没有包含CefSharp.BrowserSubprocess.Core.dll、CefSharp.BrowserSubprocess.exe。关于这两个资源文件的作用，有兴趣可以了解浏览器的多进程架构机制原理。打开多个ChromiumWebBrowser控件显示网页就加载多个CefSharp.BrowserSubprocess.exe进程。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;    &lt;span&gt;&lt;strong&gt;三、总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        这算是一个一个小的进步吧，以前没有遇过的东西，现在懂了就是进步。如有需要在深入了解。不忘初心，继续努力。&lt;/p&gt;
</description>
<pubDate>Thu, 17 Jan 2019 06:13:00 +0000</pubDate>
<dc:creator>可均可可</dc:creator>
<og:description>一、介绍 这个东西我以前没有接触过，但是公司项目里面有用到这个东西，所以就顺便研究一下。今天只是做了 WinForm 的测试，有时间了在试试 WPF 是如何实现的。刚开始一塌糊涂，有点麻烦，慢慢的理清</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PatrickLiu/p/10281941.html</dc:identifier>
</item>
<item>
<title>Percona 数据库 - keme</title>
<link>http://www.cnblogs.com/keme/p/10239838.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/keme/p/10239838.html</guid>
<description>&lt;h3 id=&quot;1-percona介绍&quot;&gt;1. Percona介绍&lt;/h3&gt;
&lt;p&gt;Percona Server由领先的MySQL咨询公司Percona发布。 Percona Server是一款独立的数据库产品，其可以完全与MySQL兼容，可以在不更改代码的情况了下将存储引擎更换成XtraDB 。&lt;/p&gt;
&lt;p&gt;Percona团队的最终声明是“Percona Server是由Oracle发布的最接近官方MySQL Enterprise发行版的版本”，因此与其他更改了大量基本核心MySQL代码的分支有所区别。 Percona Server的一个缺点是他们自己管理代码，不接受外部开发人员的贡献，以这种方式确保他们对产品中所包含功能的控制。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;Percona提供了高性能XtraDB引擎，还提供PXC高可用解决方案，并且附带了perconatoolkit等DBA管理工具箱&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-percona-安装&quot;&gt;2. Percona 安装&lt;/h3&gt;
&lt;p&gt;我使用yum安装&lt;/p&gt;
&lt;ol start=&quot;1&quot;&gt;&lt;li&gt;
&lt;p&gt;首先安装yum源&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
yum -y  install https://www.percona.com/redir/downloads/percona-release/redhat/latest/percona-release-0.1-6.noarch.rpm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　  2. 安装percona server&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;yum install -y Percona-Server-server-57&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;查看/etc/my.cnf的配置信息：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
!includedir /etc/my.cnf.d/
!includedir /etc/percona-server.conf.d/
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　3. 初始化数据库：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
mysqld --initialize --user=mysql
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　4. 启动数据库&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
service mysqld start
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　5. 查看mysql进程&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
ps –ef|grep mysql
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　6. 获取root初始化密码：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; 在/var/log/mysqld.log中所有password关键词，获取初始化密码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108163551259-1747667438.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　7. 修改root 密码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108163728218-2124914661.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Percona 操作跟mysql 一模一样 命令也是一样&lt;/p&gt;
&lt;h3 id=&quot;3-percona存储引擎&quot;&gt;3. Percona存储引擎&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108163749451-429036209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; Percona XtraDB 是 InnoDB 存储引擎的增强版，被设计用来更好的使用更新计算机硬件系统的性能，同时还包含有一些在高性能环境下的新特性。 XtraDB 存储引擎是完全的向下兼容，在 MariaDB 中， XtraDB 存储引擎被标识为”ENGINE=InnoDB”，这个与 InnoDB 是一样的，所以你可以直接用XtraDB 替换掉 InnoDB而不会产生任何问题。 Percona XtraDB 包含有所有 InnoDB’s 健壮性，可依赖的 ACID 兼容设计和高级MVCC 架构。 XtraDB 在InnoDB 的坚实基础上构建，使 XtraDB 具有更多的特性，更好调用，更多的参数指标和更多的扩展。从实践的角度来看， XtraDB 被设计用来在多核心的条件下更有效的使用内存和更加方便，更加可用。新的特性被用来降低 InnoDB 的局限性。性能层面， XtraDB与内置的MySQL 5.1 InnoDB引擎相比，它每分钟可处理2.7倍的事务。&lt;/p&gt;
&lt;p&gt;这是以前的数据对比， 现在新版mysql 5.7.x 或者 mysql 8.x 的 Innodb 对比 ，处理已近差不多了。&lt;/p&gt;
&lt;h3 id=&quot;4-percona高可用架构&quot;&gt;4. Percona高可用架构&lt;/h3&gt;
&lt;p&gt;• MHA&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;• MMM&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;• ATLAS&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;• MyCAT&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;其配置方法也和MySQL一样&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-percona-xtradb-cluster-pxc架构&quot;&gt;5. Percona XtraDB Cluster (PXC)架构&lt;/h3&gt;
&lt;p&gt;Percona XtraDB Cluster是MySQL高可用性和可扩展性的解决方案.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;Percona XtraDB Cluster提供的特性有&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;1.同步复制，事务要么在所有节点提交或不提交。&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;&lt;code&gt;2.多主复制，可以在任意节点进行写操作。&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;&lt;code&gt;3.在从服务器上并行应用事件，真正意义上的并行复制。&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;&lt;code&gt;4.节点自动配置。&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;&lt;code&gt;5.数据一致性，不再是异步复制。&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;Percona XtraDB Cluster完全兼容MySQL和Percona Serve&lt;/span&gt;r&lt;/code&gt;，表现在：&lt;/p&gt;
&lt;div&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li&gt;
&lt;p&gt;数据的兼容性&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;应用程序的兼容性：无需更改应用程序&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;1.集群是有节点组成的，推荐配置至少3个节点，但是也可以运行在2个节点上。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;2.每个节点都是普通的mysql/percona服务器，可以将现有的数据库服务器组成集群，&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;br/&gt;从PXC机器群可以拆分成单独的服务器。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;3.每个节点都包含完整的数据副本。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;h4 id=&quot;51-pxc-优缺点&quot;&gt;5.1 PXC 优缺点&lt;/h4&gt;
&lt;p&gt;优点如下：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;1.当执行一个查询时，在本地节点上执行。因为所有数据都在本地，无需远程访问。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;2.无需集中管理。可以在任何时间点失去任何节点，但是集群将照常工作。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;3.良好的读负载扩展，任意节点都可以查询。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;缺点如下：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;1.加入新节点，开销大。需要复制完整的数据&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;2.不能有效的解决写缩放问题，所有的写操作都将发生在所有节点上。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;3.有多少个节点就有多少重复的数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Percona XtraDB Cluster基于XtraDB的Percona Server以及包含写复制集补丁。&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;code&gt;使用Galera 2.x library，事务型应用下的通用的多主同步复制插件&lt;/code&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;6-percona-xtradb-cluster-搭建&quot;&gt;6. Percona XtraDB Cluster 搭建&lt;/h3&gt;
&lt;p&gt;3个节点环境&lt;/p&gt;

&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;主机名&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;ip&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;数据库版本&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;percona1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.0.0.130&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;percona 5.7.23&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;percona2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.0.0.131&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;percona 5.7.23&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;percona3&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.0.0.132&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;percona 5.7.23&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;关闭了selinux ，防火墙 &lt;/p&gt;
&lt;p&gt;&lt;span&gt;各节点做好host解析&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
/etc/hosts 中添加
10.0.0.130 percona1
10.0.0.131 percona2
10.0.0.132 percona3
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;每个节点删除原本安装的percona server软件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
yum erase -y Percona-Server-server-57
yum erase -y Percona-Server-client-57
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;每个节点安装软件：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
yum install -y Percona-XtraDB-Cluster-57
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在log文件中找到root的临时密码：&lt;/p&gt;
&lt;p&gt;每个节点修改root密码：我这省略&lt;/p&gt;
&lt;p&gt;配置各个节点的/etc/percona-xtradb-cluster.conf.d/wsrep.cnf文件：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一个节点percona1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108165101754-136561908.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[mysqld]
wsrep_provider=/usr/lib64/galera3/libgalera_smm.so
wsrep_cluster_address=gcomm://10.0.0.130,10.0.0.131,10.0.0.132
binlog_format=ROW
default_storage_engine=InnoDB
wsrep_slave_threads= 8
wsrep_log_conflicts
innodb_autoinc_lock_mode=2
wsrep_node_address=10.0.0.130
wsrep_cluster_name=pxc-cluster
wsrep_node_name=percona1
pxc_strict_mode=ENFORCING
wsrep_sst_method=rsync
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;第一个节点启动必须用下面这种方式:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
systemctl start mysql@bootstrap.service
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;第二个节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108165402710-1023762629.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[mysqld]
wsrep_provider=/usr/lib64/galera3/libgalera_smm.so
wsrep_cluster_address=gcomm://10.0.0.130,10.0.0.131,10.0.0.132
binlog_format=ROW
default_storage_engine=InnoDB
wsrep_slave_threads= 8
wsrep_log_conflicts
innodb_autoinc_lock_mode=2
wsrep_node_address=10.0.0.131
wsrep_cluster_name=pxc-cluster
wsrep_node_name=percona2
pxc_strict_mode=ENFORCING
wsrep_sst_method=rsync
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; 其他节点启动percona&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
service mysql start
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;第三个节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108172524998-212100513.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[mysqld]
wsrep_provider=/usr/lib64/galera3/libgalera_smm.so
wsrep_cluster_address=gcomm://10.0.0.130,10.0.0.131,10.0.0.132
binlog_format=ROW
default_storage_engine=InnoDB
wsrep_slave_threads= 8
wsrep_log_conflicts
innodb_autoinc_lock_mode=2
wsrep_node_address=10.0.0.132
wsrep_cluster_name=pxc-cluster
wsrep_node_name=percona3
pxc_strict_mode=ENFORCING
wsrep_sst_method=rsync
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 第三个节点启动&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
service mysql start
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;查看所有的的pxc的状态&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
show status like 'wsrep_%';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108172615869-753338273.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; 两个节点上分别插入数据测试：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;第一个节点:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108172641518-1277455512.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;第二个节点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108172658715-463846353.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;关闭第一个节点，对外操作的也没影响&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108172716728-575935168.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;恢复第一节点&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;其他节点插入数据，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108172802880-862897543.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第一节点恢复启动，数据也是同步的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033265/201901/1033265-20190108172817783-770642171.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 17 Jan 2019 06:06:00 +0000</pubDate>
<dc:creator>keme</dc:creator>
<og:description>1. Percona介绍 Percona Server由领先的MySQL咨询公司Percona发布。 Percona Server是一款独立的数据库产品，其可以完全与MySQL兼容，可以在不更改代码的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/keme/p/10239838.html</dc:identifier>
</item>
<item>
<title>kubernetes实战(二十五)：kubeadm 安装 高可用 k8s v1.13.x - 杜先生的博客</title>
<link>http://www.cnblogs.com/dukuan/p/10278637.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dukuan/p/10278637.html</guid>
<description>&lt;p&gt;&lt;span&gt;1、系统环境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　使用kubeadm安装高可用k8s v.13.x较为简单，相比以往的版本省去了很多步骤。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　kubeadm安装高可用k8s v.11 和 v1.12 &lt;a href=&quot;https://www.cnblogs.com/dukuan/p/9856269.html&quot; target=&quot;_blank&quot;&gt;点我&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　主机信息&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;&lt;span&gt;主机名&lt;/span&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;span&gt;IP地址&lt;/span&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;span&gt;说明&lt;/span&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;span&gt;组件&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;k8s-master01 ~ 03&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;192.168.20.20 ~ 22&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;master节点 * 3&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;keepalived、nginx、etcd、kubelet、kube-apiserver&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;k8s-master-lb&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;192.168.20.10&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;keepalived虚拟IP&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;无&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;k8s-node01 ~ 08&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;192.168.20.30 ~ 37&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;worker节点 * 8&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;　　主机配置&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# &lt;span&gt;uname&lt;/span&gt; -&lt;span&gt;r
&lt;/span&gt;&lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.elrepo.x86_64
[root@k8s&lt;/span&gt;-master01 ~]# &lt;span&gt;uname&lt;/span&gt; -&lt;span&gt;a
Linux k8s&lt;/span&gt;-master01 &lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7.elrepo.x86_64 #&lt;span&gt;1&lt;/span&gt; SMP Thu Sep &lt;span&gt;20&lt;/span&gt; &lt;span&gt;09&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt;:&lt;span&gt;54&lt;/span&gt; EDT &lt;span&gt;2018&lt;/span&gt; x86_64 x86_64 x86_64 GNU/&lt;span&gt;Linux
[root@k8s&lt;/span&gt;-master01 ~]# &lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;
k8s&lt;/span&gt;-&lt;span&gt;master01
[root@k8s&lt;/span&gt;-master01 ~]# &lt;span&gt;free&lt;/span&gt; -&lt;span&gt;g
              total        used        &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;      shared  buff/&lt;span&gt;cache   available
Mem:              &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;           &lt;span&gt;1&lt;/span&gt;           &lt;span&gt;0&lt;/span&gt;           &lt;span&gt;0&lt;/span&gt;           &lt;span&gt;2&lt;/span&gt;           &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
Swap:             &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;           &lt;span&gt;0&lt;/span&gt;           &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
[root@k8s&lt;/span&gt;-master01 ~]# &lt;span&gt;cat&lt;/span&gt; /proc/cpuinfo | &lt;span&gt;grep&lt;/span&gt;&lt;span&gt; process
processor    : &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
processor    : &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
processor    : &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
processor    : &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[root@k8s&lt;/span&gt;-master01 ~]# &lt;span&gt;cat&lt;/span&gt; /etc/redhat-&lt;span&gt;release 
CentOS Linux release &lt;/span&gt;&lt;span&gt;7.5&lt;/span&gt;.&lt;span&gt;1804&lt;/span&gt; (Core)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　Docker和k8s版本&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~&lt;span&gt;]# docker version
Client:
 Version:      &lt;/span&gt;&lt;span&gt;17.09&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;ce
 API version:  &lt;/span&gt;&lt;span&gt;1.32&lt;/span&gt;&lt;span&gt;
 Go version:   go1.&lt;/span&gt;&lt;span&gt;8.3&lt;/span&gt;&lt;span&gt;
 Git commit:   19e2cf6
 Built:        Thu Dec  &lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt; &lt;span&gt;2017&lt;/span&gt;&lt;span&gt;
 OS&lt;/span&gt;/Arch:      linux/&lt;span&gt;amd64

Server:
 Version:      &lt;/span&gt;&lt;span&gt;17.09&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;ce
 API version:  &lt;/span&gt;&lt;span&gt;1.32&lt;/span&gt; (minimum version &lt;span&gt;1.12&lt;/span&gt;&lt;span&gt;)
 Go version:   go1.&lt;/span&gt;&lt;span&gt;8.3&lt;/span&gt;&lt;span&gt;
 Git commit:   19e2cf6
 Built:        Thu Dec  &lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;:&lt;span&gt;03&lt;/span&gt; &lt;span&gt;2017&lt;/span&gt;&lt;span&gt;
 OS&lt;/span&gt;/Arch:      linux/&lt;span&gt;amd64
 Experimental: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
[root@k8s&lt;/span&gt;-master01 ~&lt;span&gt;]# kubectl version
Client Version: version.Info{Major:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Minor:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, GitVersion:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v1.13.2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, GitCommit:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cff46ab41ff0bb44d8584413b598ad8360ec1def&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, GitTreeState:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clean&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, BuildDate:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2019-01-10T23:35:51Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, GoVersion:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;go1.11.4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Compiler:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Platform:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linux/amd64&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
Server Version: version.Info{Major:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Minor:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, GitVersion:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v1.13.2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, GitCommit:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cff46ab41ff0bb44d8584413b598ad8360ec1def&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, GitTreeState:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clean&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, BuildDate:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2019-01-10T23:28:14Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, GoVersion:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;go1.11.4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Compiler:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Platform:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linux/amd64&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、配置SSH互信&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所有节点配置hosts：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# cat /etc/hosts

192.168.20.20 k8s-master01
192.168.20.21 k8s-master02
192.168.20.22 k8s-master03
192.168.20.10 k8s-master-lb
192.168.20.30 k8s-node01
192.168.20.31 k8s-node02&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　在k8s-master01上执行：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# &lt;strong&gt;ssh-keygen -&lt;/strong&gt;&lt;strong&gt;t rsa&lt;/strong&gt;
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): 
Created directory '/root/.ssh'.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:TE0eRfhGNRXL3btmmMRq+awUTkR4RnWrMf6Q5oJaTn0 root@k8s-master01
The key's randomart image is:
+---[RSA 2048]----+
|          =*+oo+o|
|         =o+. o.=|
|        . =+ o +o|
|       o  . = = .|
|        S  + O . |
|          = B = .|
|         + O E = |
|        = o = o  |
|       . . ..o   |
+----[SHA256]-----+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for i in k8s-master01 k8s-master02 k8s-master03 k8s-node01 k8s-node02;do ssh-copy-id -i .ssh/id_rsa.pub $i;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点关闭防火墙和selinux&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# systemctl disable --now firewalld NetworkManager
Removed symlink /etc/systemd/system/multi-user.target.wants/NetworkManager.service.
Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.
Removed symlink /etc/systemd/system/dbus-org.freedesktop.NetworkManager.service.
Removed symlink /etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service.
Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.
[root@k8s-master01 ~]# setenforce 0
[root@k8s-master01 ~]# sed -ri '/^[^#]*SELINUX=/s#=.+$#=disabled#' /etc/selinux/config&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点关闭dnsmasq（如开启）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;systemctl disable --now dnsmasq&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点关闭swap&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# swapoff -a &amp;amp;&amp;amp; sysctl -w vm.swappiness=0
vm.swappiness = 0
[root@k8s-master01 ~]# sed -ri '/^[^#]*swap/s@^@#@' /etc/fstab&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点升级系统&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum install epel-release -y
yum install wget git  jq psmisc vim -y
yum update -y --exclude=kernel*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点同步时间&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
echo 'Asia/Shanghai' &amp;gt;/etc/timezone
ntpdate time2.aliyun.com&lt;br/&gt;# 加入到crontab&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点limit配置&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ulimit -SHn 65535&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　master01下载安装文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# git clone https://github.com/dotbalo/k8s-ha-install.git -b v1.13.x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点创建repo&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd /etc/yum.repos.d
mkdir bak
mv *.repo bak/
cp /root/k8s-ha-install/repo/* .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点升级系统并重启&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; &lt;span&gt;wget&lt;/span&gt; git  jq psmisc -&lt;span&gt;y
&lt;/span&gt;&lt;span&gt;yum&lt;/span&gt; update -y --exclude=kernel* &amp;amp;&amp;amp; reboot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　内核升级&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所有节点&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# rpm --import https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.elrepo.org/RPM-GPG-KEY-elrepo.org&lt;/span&gt;
[root@k8s-master01 ~]# rpm -Uvh http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm&lt;/span&gt;
Retrieving http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm&lt;/span&gt;
Retrieving http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm&lt;/span&gt;
Preparing...                          ################################# [&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;]
Updating &lt;/span&gt;/&lt;span&gt; installing...
   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;:elrepo-release-&lt;span&gt;7.0&lt;/span&gt;-&lt;span&gt;3&lt;/span&gt;.el7.elrepo  ################################# [&lt;span&gt;100&lt;/span&gt;%]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　master01下载内核文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;wget&lt;/span&gt; http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirror.rc.usf.edu/compute_lock/elrepo/kernel/el7/x86_64/RPMS/kernel-ml-devel-4.18.9-1.el7.elrepo.x86_64.rpm&lt;/span&gt;

&lt;span&gt;wget&lt;/span&gt; http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirror.rc.usf.edu/compute_lock/elrepo/kernel/el7/x86_64/RPMS/kernel-devel-4.18.9-1.el7.elrepo.x86_64.rpm&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　复制到其他节点&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; k8s-master01 k8s-master02 k8s-master03 k8s-node01 k8s-node02;&lt;span&gt;do&lt;/span&gt; &lt;span&gt;scp&lt;/span&gt; kernel-ml-&lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7.elrepo.x86_64.rpm kernel-ml-devel-&lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7.elrepo.x86_64.rpm $i:/root/ ; &lt;span&gt;done&lt;/span&gt;&lt;span&gt;
kernel&lt;/span&gt;-ml-&lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7.elrepo.x86_64.rpm                                               &lt;span&gt;100&lt;/span&gt;%   45MB &lt;span&gt;147&lt;/span&gt;.2MB/s   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;    
kernel&lt;/span&gt;-ml-devel-&lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7.elrepo.x86_64.rpm                                         &lt;span&gt;100&lt;/span&gt;%   12MB &lt;span&gt;149&lt;/span&gt;.1MB/s   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;    
kernel&lt;/span&gt;-ml-&lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7.elrepo.x86_64.rpm                                               &lt;span&gt;100&lt;/span&gt;%   45MB  &lt;span&gt;22&lt;/span&gt;.6MB/s   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;02&lt;/span&gt;&lt;span&gt;    
kernel&lt;/span&gt;-ml-devel-&lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7.elrepo.x86_64.rpm                                         &lt;span&gt;100&lt;/span&gt;%   12MB  &lt;span&gt;20&lt;/span&gt;.8MB/s   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;    
kernel&lt;/span&gt;-ml-&lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7.elrepo.x86_64.rpm                                               &lt;span&gt;100&lt;/span&gt;%   45MB  &lt;span&gt;15&lt;/span&gt;.1MB/s   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;03&lt;/span&gt;&lt;span&gt;    
kernel&lt;/span&gt;-ml-devel-&lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7.elrepo.x86_64.rpm                                         &lt;span&gt;100&lt;/span&gt;%   12MB  &lt;span&gt;11&lt;/span&gt;.9MB/s   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;01&lt;/span&gt;&lt;span&gt;    
kernel&lt;/span&gt;-ml-&lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7.elrepo.x86_64.rpm                                               &lt;span&gt;100&lt;/span&gt;%   45MB  &lt;span&gt;45&lt;/span&gt;.1MB/s   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;01&lt;/span&gt;&lt;span&gt;    
kernel&lt;/span&gt;-ml-devel-&lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7.elrepo.x86_64.rpm                                         &lt;span&gt;100&lt;/span&gt;%   12MB  &lt;span&gt;27&lt;/span&gt;.4MB/s   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;    
kernel&lt;/span&gt;-ml-&lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7.elrepo.x86_64.rpm                                               &lt;span&gt;100&lt;/span&gt;%   45MB  &lt;span&gt;45&lt;/span&gt;.1MB/s   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;01&lt;/span&gt;&lt;span&gt;    
kernel&lt;/span&gt;-ml-devel-&lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7.elrepo.x86_64.rpm                                         &lt;span&gt;100&lt;/span&gt;%   12MB  &lt;span&gt;30&lt;/span&gt;.0MB/s   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点安装内核&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;yum&lt;/span&gt; localinstall -y kernel-ml*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点修改内核启动顺序&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;grub2-set-default  &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; grub2-mkconfig -o /etc/grub2.cfg&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;grubby --args=&quot;user_namespace.enable=1&quot; --update-kernel=&quot;$(grubby --default-kernel)&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点重启&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　确认所有节点为新内核&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# &lt;span&gt;uname&lt;/span&gt; -&lt;span&gt;r
&lt;/span&gt;&lt;span&gt;4.18&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7.elrepo.x86_64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　确认能否加载nf_conntrack_ipv4，ipvs依赖此模块，需要确认能正常加载&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master02 ~]# &lt;span&gt;modprobe&lt;/span&gt;&lt;span&gt; nf_conntrack_ipv4
[root@k8s&lt;/span&gt;-master02 ~]# &lt;span&gt;lsmod&lt;/span&gt; | &lt;span&gt;grep&lt;/span&gt;&lt;span&gt; nf
nf_conntrack_ipv4      &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
nf_defrag_ipv4         &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;1&lt;/span&gt;&lt;span&gt; nf_conntrack_ipv4
nf_conntrack          &lt;/span&gt;&lt;span&gt;135168&lt;/span&gt;  &lt;span&gt;1&lt;/span&gt;&lt;span&gt; nf_conntrack_ipv4
libcrc32c              &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;2&lt;/span&gt; nf_conntrack,xfs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点安装ipvsadm&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; ipvsadm ipset sysstat conntrack libseccomp -y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点设置开启自动加载的模块&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# &lt;span&gt;cat&lt;/span&gt; /etc/modules-load.d/&lt;span&gt;ipvs.conf 
ip_vs
ip_vs_lc
ip_vs_wlc
ip_vs_rr
ip_vs_wrr
ip_vs_lblc
ip_vs_lblcr
ip_vs_dh
ip_vs_sh
ip_vs_fo
ip_vs_nq
ip_vs_sed
ip_vs_ftp&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# systemctl disable --now systemd-modules-&lt;span&gt;load.service

[root@k8s&lt;/span&gt;-master01 ~]# &lt;span&gt;lsmod&lt;/span&gt; |&lt;span&gt;grep&lt;/span&gt;&lt;span&gt; ip_vs
ip_vs_ftp              &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
nf_nat                 &lt;/span&gt;&lt;span&gt;32768&lt;/span&gt;  &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ip_vs_ftp
ip_vs_sed              &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
ip_vs_nq               &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
ip_vs_fo               &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
ip_vs_sh               &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
ip_vs_dh               &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
ip_vs_lblcr            &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
ip_vs_lblc             &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
ip_vs_wrr              &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
ip_vs_rr               &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
ip_vs_wlc              &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
ip_vs_lc               &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
ip_vs                 &lt;/span&gt;&lt;span&gt;151552&lt;/span&gt;  &lt;span&gt;24&lt;/span&gt;&lt;span&gt; ip_vs_wlc,ip_vs_rr,ip_vs_dh,ip_vs_lblcr,ip_vs_sh,ip_vs_fo,ip_vs_nq,ip_vs_lblc,ip_vs_wrrip_vs_lc,ip_vs_sed,ip_vs_ftp
nf_conntrack          &lt;/span&gt;&lt;span&gt;135168&lt;/span&gt;  &lt;span&gt;3&lt;/span&gt;&lt;span&gt; nf_conntrack_ipv4,nf_nat,ip_vs
libcrc32c              &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;  &lt;span&gt;4&lt;/span&gt; nf_conntrack,nf_nat,xfs,ip_vs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点配置k8s内核&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;cat&lt;/span&gt; &amp;lt;&amp;lt;EOF &amp;gt; /etc/sysctl.d/&lt;span&gt;k8s.conf
net.ipv4.ip_forward &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
net.bridge.bridge&lt;/span&gt;-nf-call-ip6tables = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
net.bridge.bridge&lt;/span&gt;-nf-call-iptables = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
fs.may_detach_mounts &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
vm.overcommit_memory&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
vm.panic_on_oom&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
fs.inotify.max_user_watches&lt;/span&gt;=&lt;span&gt;89100&lt;/span&gt;&lt;span&gt;
fs.&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;-max=&lt;span&gt;52706963&lt;/span&gt;&lt;span&gt;
fs.nr_open&lt;/span&gt;=&lt;span&gt;52706963&lt;/span&gt;&lt;span&gt;
net.netfilter.nf_conntrack_max&lt;/span&gt;=&lt;span&gt;2310720&lt;/span&gt;&lt;span&gt;
EOF

sysctl &lt;/span&gt;--system&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、k8s服务安装&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所有节点安装docker-ce&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;yum&lt;/span&gt; -y &lt;span&gt;install&lt;/span&gt; docker-ce-&lt;span&gt;17.09&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;.ce-&lt;span&gt;1&lt;/span&gt;.el7.centos&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点安装集群组件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; -y kubelet-&lt;span&gt;1.13&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;0&lt;/span&gt;.x86_64 kubeadm-&lt;span&gt;1.13&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;0&lt;/span&gt;.x86_64 kubectl-&lt;span&gt;1.13&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;0&lt;/span&gt;.x86_64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有节点启动docker和kubelet&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;systemctl enable docker &amp;amp;&amp;amp; systemctl start docker&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# DOCKER_CGROUPS=$(docker &lt;span&gt;info&lt;/span&gt; | &lt;span&gt;grep&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cgroup&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; | &lt;span&gt;cut&lt;/span&gt; -d&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt; -&lt;span&gt;f3)
[root@k8s&lt;/span&gt;-master01 ~]# &lt;span&gt;echo&lt;/span&gt;&lt;span&gt; $DOCKER_CGROUPS
cgroupfs
[root@k8s&lt;/span&gt;-master01 ~]# &lt;span&gt;cat&lt;/span&gt; &amp;gt;/etc/sysconfig/kubelet&amp;lt;&amp;lt;&lt;span&gt;EOF
&lt;/span&gt;&amp;gt; KUBELET_EXTRA_ARGS=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--cgroup-driver=$DOCKER_CGROUPS --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&amp;gt;&lt;span&gt; EOF
[root@k8s&lt;/span&gt;-master01 ~&lt;span&gt;]# 
[root@k8s&lt;/span&gt;-master01 ~]# systemctl daemon-&lt;span&gt;reload
[root@k8s&lt;/span&gt;-master01 ~]# systemctl enable kubelet &amp;amp;&amp;amp;&lt;span&gt; systemctl start kubelet
Created symlink from &lt;/span&gt;/etc/systemd/system/multi-user.target.wants/kubelet.service to /etc/systemd/system/&lt;span&gt;kubelet.service.
[root@k8s&lt;/span&gt;-master01 ~]#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　注意此时如果kubelet无法启动不用管&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在所有master节点安装并启动keepalived及docker-compose&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; -&lt;span&gt;y keepalived
systemctl enable keepalived &lt;/span&gt;&amp;amp;&amp;amp;&lt;span&gt; systemctl restart keepalived

#安装docker&lt;/span&gt;-&lt;span&gt;compose
&lt;/span&gt;&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; -y docker-compose&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、master01节点安装&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　以下操作在master01节点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　创建配置文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　修改对应的配置信息，注意nm-bond修改为服务器对应网卡名称&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# ./create-config.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt; 
create kubeadm&lt;/span&gt;-config.yaml files success. config/k8s-master01/kubeadm-&lt;span&gt;config.yaml
create kubeadm&lt;/span&gt;-config.yaml files success. config/k8s-master02/kubeadm-&lt;span&gt;config.yaml
create kubeadm&lt;/span&gt;-config.yaml files success. config/k8s-master03/kubeadm-&lt;span&gt;config.yaml
create keepalived files success. config&lt;/span&gt;/k8s-master01/keepalived/&lt;span&gt;
create keepalived files success. config&lt;/span&gt;/k8s-master02/keepalived/&lt;span&gt;
create keepalived files success. config&lt;/span&gt;/k8s-master03/keepalived/&lt;span&gt;
create nginx&lt;/span&gt;-lb files success. config/k8s-master01/nginx-lb/&lt;span&gt;
create nginx&lt;/span&gt;-lb files success. config/k8s-master02/nginx-lb/&lt;span&gt;
create nginx&lt;/span&gt;-lb files success. config/k8s-master03/nginx-lb/&lt;span&gt;
create calico.yaml &lt;/span&gt;&lt;span&gt;file&lt;/span&gt; success. calico/&lt;span&gt;calico.yaml
[root@k8s&lt;/span&gt;-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# &lt;span&gt;pwd&lt;/span&gt;
/root/k8s-ha-instal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　分发文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# export HOST1=k8s-&lt;span&gt;master01
[root@k8s&lt;/span&gt;-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# export HOST2=k8s-&lt;span&gt;master02
[root@k8s&lt;/span&gt;-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# export HOST3=k8s-&lt;span&gt;master03
[root@k8s&lt;/span&gt;-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# &lt;span&gt;scp&lt;/span&gt; -r config/$HOST1/kubeadm-config.yaml $HOST1:/root/&lt;span&gt;
kubeadm&lt;/span&gt;-config.yaml                                                                    &lt;span&gt;100&lt;/span&gt;%  &lt;span&gt;993&lt;/span&gt;     &lt;span&gt;1&lt;/span&gt;.9MB/s   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;    
[root@k8s&lt;/span&gt;-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# &lt;span&gt;scp&lt;/span&gt; -r config/$HOST2/kubeadm-config.yaml $HOST2:/root/&lt;span&gt;
kubeadm&lt;/span&gt;-config.yaml                                                                    &lt;span&gt;100&lt;/span&gt;% &lt;span&gt;1071&lt;/span&gt;    &lt;span&gt;63&lt;/span&gt;.8KB/s   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;    
[root@k8s&lt;/span&gt;-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# &lt;span&gt;scp&lt;/span&gt; -r config/$HOST3/kubeadm-config.yaml $HOST3:/root/&lt;span&gt;
kubeadm&lt;/span&gt;-config.yaml                                                                    &lt;span&gt;100&lt;/span&gt;% &lt;span&gt;1112&lt;/span&gt;    &lt;span&gt;27&lt;/span&gt;.6KB/s   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;    
[root@k8s&lt;/span&gt;-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# &lt;span&gt;scp&lt;/span&gt; -r config/$HOST1/keepalived&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; $HOST1:/etc/keepalived/
check_apiserver.sh                                                                     100%  471    36.4KB/s   00:00    
keepalived.conf                                                                        100%  558    69.9KB/s   00:00    
You have new mail in /var/spool/mail/root
[root@k8s-master01 k8s-ha-install]# scp -r config/$HOST2/keepalived/* $HOST2:/etc/keepalived/

check_apiserver.sh                                                                     100%  471    10.8KB/s   00:00    
keepalived.conf                                                                        100%  558   275.5KB/s   00:00    
[root@k8s-master01 k8s-ha-install]# scp -r config/$HOST3/keepalived/* $HOST3:/etc/keepalived/
check_apiserver.sh                                                                     100%  471    12.7KB/s   00:00    
keepalived.conf                                                                        100%  558     1.1MB/s   00:00    
[root@k8s-master01 k8s-ha-install]# scp -r config/$HOST1/nginx-lb $HOST1:/root/
docker-compose.yaml                                                                    100%  213   478.6KB/s   00:00    
nginx-lb.conf                                                                          100% 1036     2.6MB/s   00:00    
[root@k8s-master01 k8s-ha-install]# scp -r config/$HOST2/nginx-lb $HOST2:/root/

docker-compose.yaml                                                                    100%  213    12.5KB/s   00:00    
nginx-lb.conf                                                                          100% 1036    35.5KB/s   00:00    
[root@k8s-master01 k8s-ha-install]# scp -r config/$HOST3/nginx-lb $HOST3:/root/
docker-compose.yaml                                                                    100%  213    20.5KB/s   00:00    
nginx-lb.conf                                                                          100% 1036    94.3KB/s   00:00 &lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所有master节点启动nginx&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;启动nginx-lb，修改nginx-&lt;span&gt;lb下的nginx配置文件proxy_connect_timeout 60s;proxy_timeout 10m;
cd 
docker&lt;/span&gt;-compose --&lt;span&gt;file&lt;/span&gt;=/root/nginx-lb/docker-compose.yaml up -&lt;span&gt;d
docker&lt;/span&gt;-compose --&lt;span&gt;file&lt;/span&gt;=/root/nginx-lb/docker-compose.yaml &lt;span&gt;ps&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　重启keepalived&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;systemctl restart keepalived&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　提前下载镜像&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;kubeadm config images pull --config /root/kubeadm-config.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　集群初始化&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;span&gt;kubeadm init --config /root/kubeadm-config.yaml&lt;/span&gt;&lt;p&gt;&lt;span&gt;....&lt;/span&gt;&lt;br/&gt;&lt;span&gt;kubeadm join k8s-master-lb:16443 --token cxwr3f.2knnb1gj83ztdg9l --discovery-token-ca-cert-hash sha256:41718412b5d2ccdc8b7326fd440360bf186a21dac4a0769f460ca4bdaf5d2825&lt;/span&gt;&lt;br/&gt;&lt;span&gt;....&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# &lt;span&gt;cat&lt;/span&gt; &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; ~/&lt;span&gt;.bashrc
export KUBECONFIG&lt;/span&gt;=/etc/kubernetes/&lt;span&gt;admin.conf
EOF
[root@k8s&lt;/span&gt;-master01 ~]# source ~/&lt;span&gt;.bashrc
[root@k8s&lt;/span&gt;-master01 ~&lt;span&gt;]# kubectl get nodes
NAME           STATUS     ROLES    AGE     VERSION
k8s&lt;/span&gt;-master01   NotReady   master   2m11s   v1.&lt;span&gt;13.2&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　查看pods状态&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# kubectl get pods -n kube-system -&lt;span&gt;o wide
NAME                                   READY   STATUS              RESTARTS   AGE     IP              NODE           NOMINATED NODE   READINESS GATES
coredns&lt;/span&gt;-89cc84847-2h7r6                &lt;span&gt;0&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     ContainerCreating   &lt;span&gt;0&lt;/span&gt;          3m12s   &amp;lt;none&amp;gt;          k8s-master01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;&lt;span&gt;
coredns&lt;/span&gt;-89cc84847-fhwbr                &lt;span&gt;0&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     ContainerCreating   &lt;span&gt;0&lt;/span&gt;          3m12s   &amp;lt;none&amp;gt;          k8s-master01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;&lt;span&gt;
etcd&lt;/span&gt;-k8s-master01                      &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running             &lt;span&gt;0&lt;/span&gt;          2m31s   &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.20&lt;/span&gt;   k8s-master01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;&lt;span&gt;
kube&lt;/span&gt;-apiserver-k8s-master01            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running             &lt;span&gt;0&lt;/span&gt;          2m36s   &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.20&lt;/span&gt;   k8s-master01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;&lt;span&gt;
kube&lt;/span&gt;-controller-manager-k8s-master01   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running             &lt;span&gt;0&lt;/span&gt;          2m39s   &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.20&lt;/span&gt;   k8s-master01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;&lt;span&gt;
kube&lt;/span&gt;-proxy-kb95s                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running             &lt;span&gt;0&lt;/span&gt;          3m12s   &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.20&lt;/span&gt;   k8s-master01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;&lt;span&gt;
kube&lt;/span&gt;-scheduler-k8s-master01            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running             &lt;span&gt;0&lt;/span&gt;          2m46s   &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.20&lt;/span&gt;   k8s-master01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　此时CoreDNS状态为ContainerCreating，报错如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  Normal   Scheduled        2m51s                  default-scheduler      Successfully assigned kube-system/coredns-89cc84847-2h7r6 to k8s-&lt;span&gt;master01
  Warning  NetworkNotReady  2m3s (x25 over 2m51s)  kubelet, k8s&lt;/span&gt;-master01  network is not ready: [runtime network not ready: NetworkReady=&lt;span&gt;false&lt;/span&gt; reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　因为没有安装网络插件，暂时不用管&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　安装calico&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# kubectl create -f calico/&lt;span&gt;
configmap&lt;/span&gt;/calico-&lt;span&gt;config created
service&lt;/span&gt;/calico-&lt;span&gt;typha created
deployment.apps&lt;/span&gt;/calico-&lt;span&gt;typha created
poddisruptionbudget.policy&lt;/span&gt;/calico-&lt;span&gt;typha created
daemonset.extensions&lt;/span&gt;/calico-&lt;span&gt;node created
serviceaccount&lt;/span&gt;/calico-&lt;span&gt;node created
customresourcedefinition.apiextensions.k8s.io&lt;/span&gt;/&lt;span&gt;felixconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io&lt;/span&gt;/&lt;span&gt;bgppeers.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io&lt;/span&gt;/&lt;span&gt;bgpconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io&lt;/span&gt;/&lt;span&gt;ippools.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io&lt;/span&gt;/&lt;span&gt;hostendpoints.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io&lt;/span&gt;/&lt;span&gt;clusterinformations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io&lt;/span&gt;/&lt;span&gt;globalnetworkpolicies.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io&lt;/span&gt;/&lt;span&gt;globalnetworksets.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io&lt;/span&gt;/&lt;span&gt;networkpolicies.crd.projectcalico.org created
clusterrole.rbac.authorization.k8s.io&lt;/span&gt;/calico-&lt;span&gt;node created
clusterrolebinding.rbac.authorization.k8s.io&lt;/span&gt;/calico-node created&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　再次查看&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# kubectl get po -n kube-&lt;span&gt;system
NAME                                   READY   STATUS    RESTARTS   AGE
calico&lt;/span&gt;-node-tp2dz                      &lt;span&gt;2&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          42s
coredns&lt;/span&gt;-89cc84847-2djpl                &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          66s
coredns&lt;/span&gt;-89cc84847-vt6zq                &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          66s
etcd&lt;/span&gt;-k8s-master01                      &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          27s
kube&lt;/span&gt;-apiserver-k8s-master01            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          16s
kube&lt;/span&gt;-controller-manager-k8s-master01   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          34s
kube&lt;/span&gt;-proxy-x497d                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          66s
kube&lt;/span&gt;-scheduler-k8s-master01            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          17s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5、高可用配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　复制证书&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;USER=&lt;span&gt;root
CONTROL_PLANE_IPS&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;k8s-master02 k8s-master03&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; host &lt;span&gt;in&lt;/span&gt; $CONTROL_PLANE_IPS; &lt;span&gt;do&lt;/span&gt;
    &lt;span&gt;ssh&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${USER}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;@$host &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mkdir -p /etc/kubernetes/pki/etcd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;scp&lt;/span&gt; /etc/kubernetes/pki/ca.crt &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${USER}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;@$host:/etc/kubernetes/pki/&lt;span&gt;ca.crt
    &lt;/span&gt;&lt;span&gt;scp&lt;/span&gt; /etc/kubernetes/pki/ca.key &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${USER}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;@$host:/etc/kubernetes/pki/&lt;span&gt;ca.key
    &lt;/span&gt;&lt;span&gt;scp&lt;/span&gt; /etc/kubernetes/pki/sa.key &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${USER}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;@$host:/etc/kubernetes/pki/&lt;span&gt;sa.key
    &lt;/span&gt;&lt;span&gt;scp&lt;/span&gt; /etc/kubernetes/pki/sa.pub &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${USER}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;@$host:/etc/kubernetes/pki/&lt;span&gt;sa.pub
    &lt;/span&gt;&lt;span&gt;scp&lt;/span&gt; /etc/kubernetes/pki/front-proxy-ca.crt &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${USER}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;@$host:/etc/kubernetes/pki/front-proxy-&lt;span&gt;ca.crt
    &lt;/span&gt;&lt;span&gt;scp&lt;/span&gt; /etc/kubernetes/pki/front-proxy-ca.key &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${USER}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;@$host:/etc/kubernetes/pki/front-proxy-&lt;span&gt;ca.key
    &lt;/span&gt;&lt;span&gt;scp&lt;/span&gt; /etc/kubernetes/pki/etcd/ca.crt &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${USER}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;@$host:/etc/kubernetes/pki/etcd/&lt;span&gt;ca.crt
    &lt;/span&gt;&lt;span&gt;scp&lt;/span&gt; /etc/kubernetes/pki/etcd/ca.key &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${USER}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;@$host:/etc/kubernetes/pki/etcd/&lt;span&gt;ca.key
    &lt;/span&gt;&lt;span&gt;scp&lt;/span&gt; /etc/kubernetes/admin.conf &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${USER}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;@$host:/etc/kubernetes/&lt;span&gt;admin.conf
&lt;/span&gt;&lt;span&gt;done&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　以下操作在master02执行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　提前下载镜像&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;kubeadm config images pull --config /root/kubeadm-config.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　master02加入集群，与node节点相差的参数就是--experimental-control-plane&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;kubeadm join k8s-master-lb:16443 --token cxwr3f.2knnb1gj83ztdg9l --discovery-token-ca-cert-hash sha256:41718412b5d2ccdc8b7326fd440360bf186a21dac4a0769f460ca4bdaf5d2825 --experimental-control-plane&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;......

This node has joined the cluster and a new control plane instance was created:

&lt;/span&gt;*&lt;span&gt; Certificate signing request was sent to apiserver and approval was received.
&lt;/span&gt;*&lt;span&gt; The Kubelet was informed of the new secure connection details.
&lt;/span&gt;*&lt;span&gt; Master label and taint were applied to the new node.
&lt;/span&gt;*&lt;span&gt; The Kubernetes control plane instances scaled up.
&lt;/span&gt;* A new etcd member was added to the local/&lt;span&gt;stacked etcd cluster.

To start administering your cluster from this node, you need to run the following as a regular user:

    &lt;/span&gt;&lt;span&gt;mkdir&lt;/span&gt; -p $HOME/&lt;span&gt;.kube
    &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;cp&lt;/span&gt; -i /etc/kubernetes/admin.conf $HOME/.kube/&lt;span&gt;config
    &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;chown&lt;/span&gt; $(&lt;span&gt;id&lt;/span&gt; -u):$(&lt;span&gt;id&lt;/span&gt; -g) $HOME/.kube/&lt;span&gt;config

Run &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kubectl get nodes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; to see this node &lt;span&gt;join&lt;/span&gt; the cluster.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　master01查看状态&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;&lt;span&gt;]# kubectl get no
NAME           STATUS   ROLES    AGE     VERSION
k8s&lt;/span&gt;-master01   Ready    master   15m     v1.&lt;span&gt;13.2&lt;/span&gt;&lt;span&gt;
k8s&lt;/span&gt;-master02   Ready    master   9m55s   v1.&lt;span&gt;13.2&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　其他master节点类似&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　查看最终master状态&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~]# ipvsadm -&lt;span&gt;ln&lt;/span&gt;&lt;span&gt;
IP Virtual Server version &lt;/span&gt;&lt;span&gt;1.2&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; (size=&lt;span&gt;4096&lt;/span&gt;&lt;span&gt;)
Prot LocalAddress:Port Scheduler Flags
  &lt;/span&gt;-&amp;gt;&lt;span&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  &lt;/span&gt;&lt;span&gt;10.96&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;443&lt;/span&gt;&lt;span&gt; rr
  &lt;/span&gt;-&amp;gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.20&lt;/span&gt;:&lt;span&gt;6443&lt;/span&gt;           Masq    &lt;span&gt;1&lt;/span&gt;      &lt;span&gt;4&lt;/span&gt;          &lt;span&gt;0&lt;/span&gt;         
  -&amp;gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.21&lt;/span&gt;:&lt;span&gt;6443&lt;/span&gt;           Masq    &lt;span&gt;1&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;          &lt;span&gt;0&lt;/span&gt;         
  -&amp;gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.22&lt;/span&gt;:&lt;span&gt;6443&lt;/span&gt;           Masq    &lt;span&gt;1&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;          &lt;span&gt;0&lt;/span&gt;&lt;span&gt;         
TCP  &lt;/span&gt;&lt;span&gt;10.96&lt;/span&gt;.&lt;span&gt;0.10&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;&lt;span&gt; rr
  &lt;/span&gt;-&amp;gt; &lt;span&gt;172.168&lt;/span&gt;.&lt;span&gt;0.10&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;              Masq    &lt;span&gt;1&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;          &lt;span&gt;0&lt;/span&gt;         
  -&amp;gt; &lt;span&gt;172.168&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;              Masq    &lt;span&gt;1&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;          &lt;span&gt;0&lt;/span&gt;&lt;span&gt;         
TCP  &lt;/span&gt;&lt;span&gt;10.102&lt;/span&gt;.&lt;span&gt;221.48&lt;/span&gt;:&lt;span&gt;5473&lt;/span&gt;&lt;span&gt; rr
UDP  &lt;/span&gt;&lt;span&gt;10.96&lt;/span&gt;.&lt;span&gt;0.10&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;&lt;span&gt; rr
  &lt;/span&gt;-&amp;gt; &lt;span&gt;172.168&lt;/span&gt;.&lt;span&gt;0.10&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;              Masq    &lt;span&gt;1&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;          &lt;span&gt;0&lt;/span&gt;         
  -&amp;gt; &lt;span&gt;172.168&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;              Masq    &lt;span&gt;1&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;          &lt;span&gt;0&lt;/span&gt;&lt;span&gt;         
[root@k8s&lt;/span&gt;-master01 ~]# kubectl get po -n kube-&lt;span&gt;system
NAME                                   READY   STATUS    RESTARTS   AGE
calico&lt;/span&gt;-node-49dwr                      &lt;span&gt;2&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          26m
calico&lt;/span&gt;-node-kz2d4                      &lt;span&gt;2&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          22m
calico&lt;/span&gt;-node-zwnmq                      &lt;span&gt;2&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          4m6s
coredns&lt;/span&gt;-89cc84847-dgxlw                &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          27m
coredns&lt;/span&gt;-89cc84847-n77x6                &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          27m
etcd&lt;/span&gt;-k8s-master01                      &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          27m
etcd&lt;/span&gt;-k8s-master02                      &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          22m
etcd&lt;/span&gt;-k8s-master03                      &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          4m5s
kube&lt;/span&gt;-apiserver-k8s-master01            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          27m
kube&lt;/span&gt;-apiserver-k8s-master02            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          22m
kube&lt;/span&gt;-apiserver-k8s-master03            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;3&lt;/span&gt;&lt;span&gt;          4m6s
kube&lt;/span&gt;-controller-manager-k8s-master01   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;1&lt;/span&gt;&lt;span&gt;          27m
kube&lt;/span&gt;-controller-manager-k8s-master02   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          22m
kube&lt;/span&gt;-controller-manager-k8s-master03   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          4m6s
kube&lt;/span&gt;-proxy-f9qc5                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          27m
kube&lt;/span&gt;-proxy-k55bg                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          22m
kube&lt;/span&gt;-proxy-kbg9c                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          4m6s
kube&lt;/span&gt;-scheduler-k8s-master01            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;1&lt;/span&gt;&lt;span&gt;          27m
kube&lt;/span&gt;-scheduler-k8s-master02            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          22m
kube&lt;/span&gt;-scheduler-k8s-master03            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          4m6s
[root@k8s&lt;/span&gt;-master01 ~&lt;span&gt;]# kubectl get no
NAME           STATUS   ROLES    AGE     VERSION
k8s&lt;/span&gt;-master01   Ready    master   28m     v1.&lt;span&gt;13.2&lt;/span&gt;&lt;span&gt;
k8s&lt;/span&gt;-master02   Ready    master   22m     v1.&lt;span&gt;13.2&lt;/span&gt;&lt;span&gt;
k8s&lt;/span&gt;-master03   Ready    master   4m16s   v1.&lt;span&gt;13.2&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 ~&lt;span&gt;]# kubectl get csr
NAME                                                   AGE     REQUESTOR                  CONDITION
csr&lt;/span&gt;-6mqbv                                              28m     system:node:k8s-&lt;span&gt;master01   Approved,Issued
node&lt;/span&gt;-csr-GPLcR1G4Nchf-&lt;span&gt;zuB5DaTWncoluMuENUfKvWKs0j2GdQ   23m     system:bootstrap:9zp70m    Approved,Issued
node&lt;/span&gt;-csr-cxAxrkllyidkBuZ8fck6fwq-ht1_u6s0snbDErM8bIs   4m51s   system:bootstrap:9zp70m    Approved,Issued&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　在所有master节点上允许hpa通过接口采集数据&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;vi /etc/kubernetes/manifests/kube-controller-manager.yaml
    - --horizontal-pod-autoscaler-use-rest-clients=false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　在所有master上允许istio的自动注入，修改/etc/kubernetes/manifests/kube-apiserver.yaml&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;vi /etc/kubernetes/manifests/kube-apiserver.yaml
    - --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6、node节点加入集群&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;kubeadm &lt;span&gt;join&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.10&lt;/span&gt;:&lt;span&gt;16443&lt;/span&gt; --token ll4usb.qmplnofiv7z1j0an  --discovery-token-ca-cert-hash sha256:e88a29f62ab77a59bf88578abadbcd37e89455515f6ecf3ca371656dc65b1d6e&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;......
[kubelet&lt;/span&gt;-&lt;span&gt;start] Activating the kubelet service
[tlsbootstrap] Waiting &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; the kubelet to perform the TLS Bootstrap...
[patchnode] Uploading the CRI Socket information &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/run/dockershim.sock&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; to the Node API &lt;span&gt;object&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;k8s-node02&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; as an annotation

This node has joined the cluster:
&lt;/span&gt;*&lt;span&gt; Certificate signing request was sent to apiserver and a response was received.
&lt;/span&gt;*&lt;span&gt; The Kubelet was informed of the new secure connection details.

Run &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kubectl get nodes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; on the master to see this node &lt;span&gt;join&lt;/span&gt; the cluster.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　master节点查看&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# kubectl get po -n kube-&lt;span&gt;system
NAME                                   READY   STATUS    RESTARTS   AGE
calico&lt;/span&gt;-node-49dwr                      &lt;span&gt;2&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          13h
calico&lt;/span&gt;-node-9nmhb                      &lt;span&gt;2&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          11m
calico&lt;/span&gt;-node-k5nmt                      &lt;span&gt;2&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          11m
calico&lt;/span&gt;-node-kz2d4                      &lt;span&gt;2&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          13h
calico&lt;/span&gt;-node-zwnmq                      &lt;span&gt;2&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          13h
coredns&lt;/span&gt;-89cc84847-dgxlw                &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          13h
coredns&lt;/span&gt;-89cc84847-n77x6                &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          13h
etcd&lt;/span&gt;-k8s-master01                      &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          13h
etcd&lt;/span&gt;-k8s-master02                      &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          13h
etcd&lt;/span&gt;-k8s-master03                      &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          13h
kube&lt;/span&gt;-apiserver-k8s-master01            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          18m
kube&lt;/span&gt;-apiserver-k8s-master02            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          17m
kube&lt;/span&gt;-apiserver-k8s-master03            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          16m
kube&lt;/span&gt;-controller-manager-k8s-master01   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          19m
kube&lt;/span&gt;-controller-manager-k8s-master02   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;1&lt;/span&gt;&lt;span&gt;          19m
kube&lt;/span&gt;-controller-manager-k8s-master03   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          19m
kube&lt;/span&gt;-proxy-cl2zv                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          11m
kube&lt;/span&gt;-proxy-f9qc5                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          13h
kube&lt;/span&gt;-proxy-hkcq5                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          11m
kube&lt;/span&gt;-proxy-k55bg                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          13h
kube&lt;/span&gt;-proxy-kbg9c                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          13h
kube&lt;/span&gt;-scheduler-k8s-master01            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;1&lt;/span&gt;&lt;span&gt;          13h
kube&lt;/span&gt;-scheduler-k8s-master02            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          13h
kube&lt;/span&gt;-scheduler-k8s-master03            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          13h
You have new mail &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; /var/spool/mail/&lt;span&gt;root
[root@k8s&lt;/span&gt;-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;&lt;span&gt;]# kubectl get no
NAME           STATUS   ROLES    AGE   VERSION
k8s&lt;/span&gt;-master01   Ready    master   13h   v1.&lt;span&gt;13.2&lt;/span&gt;&lt;span&gt;
k8s&lt;/span&gt;-master02   Ready    master   13h   v1.&lt;span&gt;13.2&lt;/span&gt;&lt;span&gt;
k8s&lt;/span&gt;-master03   Ready    master   13h   v1.&lt;span&gt;13.2&lt;/span&gt;&lt;span&gt;
k8s&lt;/span&gt;-node01     Ready    &amp;lt;none&amp;gt;   11m   v1.&lt;span&gt;13.2&lt;/span&gt;&lt;span&gt;
k8s&lt;/span&gt;-node02     Ready    &amp;lt;none&amp;gt;   11m   v1.&lt;span&gt;13.2&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7、其他组件安装&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　部署metrics server 0.3.1/1.8+安装&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# kubectl create -f metrics-server/&lt;span&gt;
clusterrole.rbac.authorization.k8s.io&lt;/span&gt;/system:aggregated-metrics-&lt;span&gt;reader created
clusterrolebinding.rbac.authorization.k8s.io&lt;/span&gt;/metrics-server:system:auth-&lt;span&gt;delegator created
rolebinding.rbac.authorization.k8s.io&lt;/span&gt;/metrics-server-auth-&lt;span&gt;reader created
apiservice.apiregistration.k8s.io&lt;/span&gt;/&lt;span&gt;v1beta1.metrics.k8s.io created
serviceaccount&lt;/span&gt;/metrics-&lt;span&gt;server created
deployment.extensions&lt;/span&gt;/metrics-&lt;span&gt;server created
service&lt;/span&gt;/metrics-&lt;span&gt;server created
clusterrole.rbac.authorization.k8s.io&lt;/span&gt;/system:metrics-&lt;span&gt;server created
clusterrolebinding.rbac.authorization.k8s.io&lt;/span&gt;/system:metrics-&lt;span&gt;server created
[root@k8s&lt;/span&gt;-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# kubectl get po -n kube-&lt;span&gt;system
NAME                                   READY   STATUS    RESTARTS   AGE
calico&lt;/span&gt;-node-49dwr                      &lt;span&gt;2&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          14h
calico&lt;/span&gt;-node-9nmhb                      &lt;span&gt;2&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          69m
calico&lt;/span&gt;-node-k5nmt                      &lt;span&gt;2&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          69m
calico&lt;/span&gt;-node-kz2d4                      &lt;span&gt;2&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          14h
calico&lt;/span&gt;-node-zwnmq                      &lt;span&gt;2&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          14h
coredns&lt;/span&gt;-89cc84847-dgxlw                &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          14h
coredns&lt;/span&gt;-89cc84847-n77x6                &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          14h
etcd&lt;/span&gt;-k8s-master01                      &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          14h
etcd&lt;/span&gt;-k8s-master02                      &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          14h
etcd&lt;/span&gt;-k8s-master03                      &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          14h
kube&lt;/span&gt;-apiserver-k8s-master01            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          6m23s
kube&lt;/span&gt;-apiserver-k8s-master02            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;1&lt;/span&gt;&lt;span&gt;          4m41s
kube&lt;/span&gt;-apiserver-k8s-master03            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          4m34s
kube&lt;/span&gt;-controller-manager-k8s-master01   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          78m
kube&lt;/span&gt;-controller-manager-k8s-master02   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;1&lt;/span&gt;&lt;span&gt;          78m
kube&lt;/span&gt;-controller-manager-k8s-master03   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          77m
kube&lt;/span&gt;-proxy-cl2zv                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          69m
kube&lt;/span&gt;-proxy-f9qc5                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          14h
kube&lt;/span&gt;-proxy-hkcq5                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          69m
kube&lt;/span&gt;-proxy-k55bg                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          14h
kube&lt;/span&gt;-proxy-kbg9c                       &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          14h
kube&lt;/span&gt;-scheduler-k8s-master01            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;1&lt;/span&gt;&lt;span&gt;          14h
kube&lt;/span&gt;-scheduler-k8s-master02            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          14h
kube&lt;/span&gt;-scheduler-k8s-master03            &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          14h
metrics&lt;/span&gt;-server-7c5546c5c5-ms4nz        &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          25s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　过5分钟左右查看&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;&lt;span&gt;]# kubectl top nodes
NAME           CPU(cores)   CPU&lt;/span&gt;%   MEMORY(bytes)   MEMORY%&lt;span&gt;   
k8s&lt;/span&gt;-master01   155m         &lt;span&gt;3&lt;/span&gt;%     1716Mi          &lt;span&gt;44&lt;/span&gt;%&lt;span&gt;       
k8s&lt;/span&gt;-master02   337m         &lt;span&gt;8&lt;/span&gt;%     1385Mi          &lt;span&gt;36&lt;/span&gt;%&lt;span&gt;       
k8s&lt;/span&gt;-master03   450m         &lt;span&gt;11&lt;/span&gt;%    1180Mi          &lt;span&gt;30&lt;/span&gt;%&lt;span&gt;       
k8s&lt;/span&gt;-node01     153m         &lt;span&gt;3&lt;/span&gt;%     582Mi           &lt;span&gt;7&lt;/span&gt;%&lt;span&gt;        
k8s&lt;/span&gt;-node02     142m         &lt;span&gt;3&lt;/span&gt;%     601Mi           &lt;span&gt;7&lt;/span&gt;%&lt;span&gt;

[root@k8s&lt;/span&gt;-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# kubectl top pod -n kube-&lt;span&gt;system
NAME                                   CPU(cores)   MEMORY(bytes)   
calico&lt;/span&gt;-node-&lt;span&gt;49dwr                      15m          71Mi            
calico&lt;/span&gt;-node-&lt;span&gt;9nmhb                      47m          60Mi            
calico&lt;/span&gt;-node-&lt;span&gt;k5nmt                      46m          61Mi            
calico&lt;/span&gt;-node-&lt;span&gt;kz2d4                      18m          47Mi            
calico&lt;/span&gt;-node-&lt;span&gt;zwnmq                      16m          46Mi            
coredns&lt;/span&gt;-89cc84847-&lt;span&gt;dgxlw                2m           13Mi            
coredns&lt;/span&gt;-89cc84847-&lt;span&gt;n77x6                2m           13Mi            
etcd&lt;/span&gt;-k8s-&lt;span&gt;master01                      27m          126Mi           
etcd&lt;/span&gt;-k8s-&lt;span&gt;master02                      23m          117Mi           
etcd&lt;/span&gt;-k8s-&lt;span&gt;master03                      19m          112Mi           
kube&lt;/span&gt;-apiserver-k8s-&lt;span&gt;master01            29m          410Mi           
kube&lt;/span&gt;-apiserver-k8s-&lt;span&gt;master02            19m          343Mi           
kube&lt;/span&gt;-apiserver-k8s-&lt;span&gt;master03            13m          343Mi           
kube&lt;/span&gt;-controller-manager-k8s-&lt;span&gt;master01   23m          97Mi            
kube&lt;/span&gt;-controller-manager-k8s-&lt;span&gt;master02   1m           16Mi            
kube&lt;/span&gt;-controller-manager-k8s-&lt;span&gt;master03   1m           16Mi            
kube&lt;/span&gt;-proxy-&lt;span&gt;cl2zv                       18m          18Mi            
kube&lt;/span&gt;-proxy-&lt;span&gt;f9qc5                       8m           20Mi            
kube&lt;/span&gt;-proxy-&lt;span&gt;hkcq5                       30m          19Mi            
kube&lt;/span&gt;-proxy-&lt;span&gt;k55bg                       8m           20Mi            
kube&lt;/span&gt;-proxy-&lt;span&gt;kbg9c                       6m           20Mi            
kube&lt;/span&gt;-scheduler-k8s-&lt;span&gt;master01            7m           20Mi            
kube&lt;/span&gt;-scheduler-k8s-&lt;span&gt;master02            9m           19Mi            
kube&lt;/span&gt;-scheduler-k8s-&lt;span&gt;master03            7m           19Mi            
metrics&lt;/span&gt;-server-7c5546c5c5-ms4nz        3m           14Mi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　部署dashboard v1.10.0&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# kubectl create -f dashboard/&lt;span&gt;
secret&lt;/span&gt;/kubernetes-dashboard-&lt;span&gt;certs created
serviceaccount&lt;/span&gt;/kubernetes-&lt;span&gt;dashboard created
role.rbac.authorization.k8s.io&lt;/span&gt;/kubernetes-dashboard-&lt;span&gt;minimal created
rolebinding.rbac.authorization.k8s.io&lt;/span&gt;/kubernetes-dashboard-&lt;span&gt;minimal created
deployment.apps&lt;/span&gt;/kubernetes-&lt;span&gt;dashboard created
service&lt;/span&gt;/kubernetes-dashboard created&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　查看pod和svc&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# kubectl get svc -n kube-&lt;span&gt;system
NAME                   TYPE        CLUSTER&lt;/span&gt;-IP       EXTERNAL-&lt;span&gt;IP   PORT(S)         AGE
calico&lt;/span&gt;-typha           ClusterIP   &lt;span&gt;10.102&lt;/span&gt;.&lt;span&gt;221.48&lt;/span&gt;    &amp;lt;none&amp;gt;        &lt;span&gt;5473&lt;/span&gt;/&lt;span&gt;TCP        15h
kube&lt;/span&gt;-dns               ClusterIP   &lt;span&gt;10.96&lt;/span&gt;.&lt;span&gt;0.10&lt;/span&gt;       &amp;lt;none&amp;gt;        &lt;span&gt;53&lt;/span&gt;/UDP,&lt;span&gt;53&lt;/span&gt;/&lt;span&gt;TCP   15h
kubernetes&lt;/span&gt;-dashboard   NodePort    &lt;span&gt;10.105&lt;/span&gt;.&lt;span&gt;18.61&lt;/span&gt;     &amp;lt;none&amp;gt;        &lt;span&gt;443&lt;/span&gt;:&lt;span&gt;30000&lt;/span&gt;/&lt;span&gt;TCP   7s
metrics&lt;/span&gt;-server         ClusterIP   &lt;span&gt;10.101&lt;/span&gt;.&lt;span&gt;178.115&lt;/span&gt;   &amp;lt;none&amp;gt;        &lt;span&gt;443&lt;/span&gt;/&lt;span&gt;TCP         23m
[root@k8s&lt;/span&gt;-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# kubectl get po -n kube-system -l k8s-app=kubernetes-&lt;span&gt;dashboard
NAME                                    READY   STATUS    RESTARTS   AGE
kubernetes&lt;/span&gt;-dashboard-845b47dbfc-j4r48   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          7m14s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 　　访问：https://192.168.20.10:30000/#!/login&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1095387/201901/1095387-20190117113916434-862338605.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　查看令牌&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@k8s-master01 k8s-ha-&lt;span&gt;install&lt;/span&gt;]# kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | &lt;span&gt;grep&lt;/span&gt; admin-user | &lt;span&gt;awk&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{print $1}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Name:         admin&lt;/span&gt;-user-token-&lt;span&gt;455bd
Namespace:    kube&lt;/span&gt;-&lt;span&gt;system
Labels:       &lt;/span&gt;&amp;lt;none&amp;gt;&lt;span&gt;
Annotations:  kubernetes.io&lt;/span&gt;/service-account.name: admin-&lt;span&gt;user
              kubernetes.io&lt;/span&gt;/service-account.uid: e6effde6-1a0a-11e9-ae1a-&lt;span&gt;000c298bf023

Type:  kubernetes.io&lt;/span&gt;/service-account-&lt;span&gt;token

Data
&lt;/span&gt;====&lt;span&gt;
namespace:  &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt; bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTQ1NWJkIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJlNmVmZmRlNi0xYTBhLTExZTktYWUxYS0wMDBjMjk4YmYwMjMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.Lw8hErqRoEC3e4VrEsAkFraytQI13NWj2osm&lt;/span&gt;-3lhaFDfgLtj4DIadq3ef8VgxpmyViPRzPh5fhq7EejuGH6V9cPsqEVlNBjWG0Wzfn0QuPP0xkxoW2V7Lne14Pu0-bTDE4P4UcW4MGPJAHSvckO9DTfYSzYghE2YeNKzDfhhA4DuWXaWGdNqzth_QjG_zbHsAB9kT3yVNM6bMVj945wZYSzXdJixSPBB46y92PAnfO0kAWsQc_zUtG8U1bTo7FdJ8BXgvNhytUvP7-nYanSIcpUoVXZRinQDGB-_aVRuoHHpiBOKmZlEqWOOaUrDf0DQJvDzt9TL-&lt;span&gt;YHjimIstzv18A
ca.crt:     &lt;/span&gt;&lt;span&gt;1025&lt;/span&gt; bytes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1095387/201901/1095387-20190117115030984-606779972.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　Prometheus部署：&lt;a href=&quot;https://www.cnblogs.com/dukuan/p/10177757.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/dukuan/p/10177757.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1095387/201901/1095387-20190117135943171-959616485.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1095387/201901/1095387-20190117140002666-1511034192.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;赞助作者：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1095387/201812/1095387-20181226144423707-135651435.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 17 Jan 2019 05:48:00 +0000</pubDate>
<dc:creator>杜先生的博客</dc:creator>
<og:description>1、系统环境 使用kubeadm安装高可用k8s v.13.x较为简单，相比以往的版本省去了很多步骤。 kubeadm安装高可用k8s v.11 和 v1.12 点我 主机信息 主机配置 Docker</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dukuan/p/10278637.html</dc:identifier>
</item>
<item>
<title>hot load那点事 - -云-</title>
<link>http://www.cnblogs.com/cloud-/p/10281768.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cloud-/p/10281768.html</guid>
<description>&lt;p&gt;热加载，最初接触的时候是使用&lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;create-react-app&lt;/a&gt;的时候，创建一个项目出来，修改一点代码，页面自动刷新了，贫道当时就感叹，这是造福开发者的事情。&lt;br/&gt;再后来编写静态页面的时候使用 VS Code 的插件 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&quot;&gt;Liver Server&lt;/a&gt;, 也是及时刷新，平僧幸福感慢慢，什么单不单身，狗不狗的，都不重要了。&lt;/p&gt;
&lt;p&gt;有一天喝酒回家后，睡的特别好，醒来后突然脑袋一晃，出现一个念头，世界那么大。我想看看 hot load 是咋实现的。&lt;/p&gt;
&lt;p&gt;当然这里有两点应该是确认&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;肯定是监听文件变化&lt;/li&gt;
&lt;li&gt;WebSocket 监听服务端变化的通知，刷新文件&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;于是打开&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&quot;&gt;Liver Server&lt;/a&gt; 找到源码&lt;a href=&quot;https://github.com/ritwickdey/vscode-live-server&quot;&gt;ritwickdey/vscode-live-server&lt;/a&gt;,再通过 &lt;a href=&quot;https://github.com/ritwickdey/vscode-live-server/blob/master/lib/live-server/index.js&quot;&gt;lib/live-server/index.js&lt;/a&gt; 的标注&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;#!/usr/bin/env node

&quot;use strict&quot;;

/*
    Taken from https://github.com/tapio/live-server for modification
*/
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;找到&lt;a href=&quot;https://github.com/tapio/live-server&quot;&gt;live-server&lt;/a&gt;,就开始了奇妙的探索之旅。&lt;/p&gt;
&lt;p&gt;按照正常流程打开 index.js, 先略去非核心代码：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;    chokidar = require('chokidar');

    ......

    // Setup file watcher
    LiveServer.watcher = chokidar.watch(watchPaths, {
        ignored: ignored,
        ignoreInitial: true
    });
    function handleChange(changePath) {
        var cssChange = path.extname(changePath) === &quot;.css&quot; &amp;amp;&amp;amp; !noCssInject;
        if (LiveServer.logLevel &amp;gt;= 1) {
            if (cssChange)
                console.log(&quot;CSS change detected&quot;.magenta, changePath);
            else console.log(&quot;Change detected&quot;.cyan, changePath);
        }
        clients.forEach(function(ws) {
            if (ws)
                ws.send(cssChange ? 'refreshcss' : 'reload');
        });
    }
    LiveServer.watcher
        .on(&quot;change&quot;, handleChange)
        .on(&quot;add&quot;, handleChange)
        .on(&quot;unlink&quot;, handleChange)
        .on(&quot;addDir&quot;, handleChange)
        .on(&quot;unlinkDir&quot;, handleChange)
        .on(&quot;ready&quot;, function () {
            if (LiveServer.logLevel &amp;gt;= 1)
                console.log(&quot;Ready for changes&quot;.cyan);
        })
        .on(&quot;error&quot;, function (err) {
            console.log(&quot;ERROR:&quot;.red, err);
        });

    return server;
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上可以得知，通过 chokidar 监听文件或者目录，当 change|add|addDir 等等时调用 handleChange。&lt;br/&gt;handleChange 判断了一下变更的文件是不是 css，然后通过 socket 发送不通的事件。&lt;/p&gt;
&lt;p&gt;那么问题来了， 如果客服端要能接受事件，必然要创建 WebSocket 连接。当然有人说，可以轮询或者 SSE 等这种嘛。我就不这么认为。&lt;/p&gt;
&lt;p&gt;再看一段代码&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;
    es = require(&quot;event-stream&quot;)

    var INJECTED_CODE = fs.readFileSync(path.join(__dirname, &quot;injected.html&quot;), &quot;utf8&quot;);

......

        function inject(stream) {
            if (injectTag) {
                // We need to modify the length given to browser
                var len = INJECTED_CODE.length + res.getHeader('Content-Length');
                res.setHeader('Content-Length', len);
                var originalPipe = stream.pipe;
                stream.pipe = function(resp) {
                    originalPipe.call(stream, es.replace(new RegExp(injectTag, &quot;i&quot;), INJECTED_CODE + injectTag)).pipe(resp);
                };
            }
        }

        send(req, reqpath, { root: root })
            .on('error', error)
            .on('directory', directory)
            .on('file', file)
            .on('stream', inject)
            .pipe(res);
    };&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，如果需要注入，就会注入代码, 这里是直接更新了 stream。&lt;br/&gt;插曲， 这个 es 就是那个搞事情的 event-stream, 哈哈。&lt;/p&gt;
&lt;p&gt;我们再看看 INJECTED_CODE 的内容&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!-- Code injected by live-server --&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    // &amp;lt;![CDATA[  &amp;lt;-- For SVG support
    if (&quot;WebSocket&quot; in window) {
        (function() {
            function refreshCSS() {
                var sheets = [].slice.call(
                    document.getElementsByTagName(&quot;link&quot;)
                );
                var head = document.getElementsByTagName(&quot;head&quot;)[0];
                for (var i = 0; i &amp;lt; sheets.length; ++i) {
                    var elem = sheets[i];
                    head.removeChild(elem);
                    var rel = elem.rel;
                    if (
                        (elem.href &amp;amp;&amp;amp; typeof rel != &quot;string&quot;) ||
                        rel.length == 0 ||
                        rel.toLowerCase() == &quot;stylesheet&quot;
                    ) {
                        var url = elem.href.replace(
                            /(&amp;amp;|\?)_cacheOverride=\d+/,
                            &quot;&quot;
                        );
                        elem.href =
                            url +
                            (url.indexOf(&quot;?&quot;) &amp;gt;= 0 ? &quot;&amp;amp;&quot; : &quot;?&quot;) +
                            &quot;_cacheOverride=&quot; +
                            new Date().valueOf();
                    }
                    head.appendChild(elem);
                }
            }
            var protocol =
                window.location.protocol === &quot;http:&quot; ? &quot;ws://&quot; : &quot;wss://&quot;;
            var address =
                protocol +
                window.location.host +
                window.location.pathname +
                &quot;/ws&quot;;
            var socket = new WebSocket(address);
            socket.onmessage = function(msg) {
                if (msg.data == &quot;reload&quot;) window.location.reload();
                else if (msg.data == &quot;refreshcss&quot;) refreshCSS();
            };
            console.log(&quot;Live reload enabled.&quot;);
        })();
    }
    // ]]&amp;gt;
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;简单的来讲，如果是 refreshcss 就先删除原来的 css 标签 link, 然后插入新的，并更新&lt;br/&gt;_cacheOverride 的值， 强制刷新。&lt;br/&gt;否则就是 reload 整个页面。&lt;/p&gt;
&lt;p&gt;到达这里，基本的东西就完了。 我们要好奇心多一点。我们再多看看&lt;a href=&quot;https://github.com/paulmillr/chokidar&quot;&gt;chokidar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同理，先看 index.js&lt;br/&gt;这个add方法就是添加监听的方法。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var NodeFsHandler = require('./lib/nodefs-handler');
var FsEventsHandler = require('./lib/fsevents-handler');

......

FSWatcher.prototype.add = function(paths, _origAdd, _internal) {

    ......

  if (this.options.useFsEvents &amp;amp;&amp;amp; FsEventsHandler.canUse()) {
    if (!this._readyCount) this._readyCount = paths.length;
    if (this.options.persistent) this._readyCount *= 2;
    paths.forEach(this._addToFsEvents, this);
  } else {
    if (!this._readyCount) this._readyCount = 0;
    this._readyCount += paths.length;
    asyncEach(paths, function(path, next) {
      this._addToNodeFs(path, !_internal, 0, 0, _origAdd, function(err, res) {
        if (res) this._emitReady();
        next(err, res);
      }.bind(this));
    }.bind(this), function(error, results) {
      results.forEach(function(item) {
        if (!item || this.closed) return;
        this.add(sysPath.dirname(item), sysPath.basename(_origAdd || item));
      }, this);
    }.bind(this));
  }

  return this;
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到这里有两种handler,NodeFsHandler和FsEventsHandler。 还没没有得到是咋监听的，那么继续go on, 先看看NodeFsHandler._addToNodeFs。&lt;br/&gt;打开&lt;a href=&quot;https://github.com/paulmillr/chokidar&quot;&gt;chokidar/lib/nodefs-handler.js&lt;/a&gt;&lt;br/&gt;_addToNodeFs ==&amp;gt; _handleFile ==&amp;gt; _watchWithNodeFs ==&amp;gt; setFsWatchListener ==&amp;gt; createFsWatchInstance&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var fs = require('fs');

......

function createFsWatchInstance(path, options, listener, errHandler, emitRaw) {
  var handleEvent = function(rawEvent, evPath) {
    listener(path);
    emitRaw(rawEvent, evPath, {watchedPath: path});

    // emit based on events occurring for files from a directory's watcher in
    // case the file's watcher misses it (and rely on throttling to de-dupe)
    if (evPath &amp;amp;&amp;amp; path !== evPath) {
      fsWatchBroadcast(
        sysPath.resolve(path, evPath), 'listeners', sysPath.join(path, evPath)
      );
    }
  };
  try {
    return fs.watch(path, options, handleEvent);
  } catch (error) {
    errHandler(error);
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;调用的就是fs模块的&lt;a href=&quot;http://nodejs.cn/api/fs.html#fs_fs_watch_filename_options_listener&quot;&gt;watch&lt;/a&gt;。&lt;br/&gt;呵呵，感觉自己读书少，还是得多看文档。&lt;/p&gt;
&lt;p&gt;我们再看看FsEventsHandler&lt;br/&gt;_addToFsEvents ==&amp;gt;_watchWithFsEvents==&amp;gt; createFSEventsInstance==&amp;gt;setFSEventsListener&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;
try { fsevents = require('fsevents'); } catch (error) {
  if (process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR) console.error(error)
}

// Returns new fsevents instance
function createFSEventsInstance(path, callback) {
  return (new fsevents(path)).on('fsevent', callback).start();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那我们再接着看看fsevents&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;/* jshint node:true */
'use strict';

if (process.platform !== 'darwin') {
  throw new Error(`Module 'fsevents' is not compatible with platform '${process.platform}'`);
}

const { stat } = require('fs');
const Native = require('./fsevents.node');
const { EventEmitter } = require('events');

const native = new WeakMap();
class FSEvents {
  constructor(path, handler) {
    if ('string' !== typeof path) throw new TypeError('path must be a string');
    if ('function' !== typeof handler) throw new TypeError('function must be a function');
    Object.defineProperties(this, {
      path: { value: path },
      handler: { value: handler }
    });
  }
  start() {
    if (native.has(this)) return;
    const instance = Native.start(this.path, this.handler);
    native.set(this, instance);
    return this;
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;平台只支持darwin，这是嘛呢，我问node开发，告诉我大致是Mac OS吧，那我就相信吧。&lt;/li&gt;
&lt;li&gt;require('./fsevents.node') 引用的是c++扩展&lt;/li&gt;
&lt;li&gt;Native.start(this.path, this.handler) 就是监听，哦哦，原来是这样。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最后我们打开 &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; 的&lt;a href=&quot;https://github.com/webpack/webpack-dev-server/blob/master/lib/Server.js&quot;&gt;/lib/Server.js&lt;/a&gt; 文件。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;  const watcher = chokidar.watch(watchPath, options);

  watcher.on('change', () =&amp;gt; {
    this.sockWrite(this.sockets, 'content-changed');
  });
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也是这个chokidar, 那么我感觉我能做好多事情了。&lt;br/&gt;亲，你做一个修改后直接发布的应用吧，好歹，好歹。&lt;/p&gt;
&lt;p&gt;当然这里，只是弄明白监听和通知的大概。&lt;br/&gt;等有时间，好好研究一下webpack-dev-server.&lt;/p&gt;
</description>
<pubDate>Thu, 17 Jan 2019 05:43:00 +0000</pubDate>
<dc:creator>-云-</dc:creator>
<og:description>热加载，最初接触的时候是使用 'create react app' 的时候，创建一个项目出来，修改一点代码，页面自动刷新了，贫道当时就感叹，这是造福开发者的事情。 再后来编写静态页面的时候使用 VS</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cloud-/p/10281768.html</dc:identifier>
</item>
<item>
<title>SpringBoot系列——Spring-Data-JPA（究极进化版）  自动生成单表基础增、删、改、查接口 - huanzi-qch</title>
<link>http://www.cnblogs.com/huanzi-qch/p/10281773.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huanzi-qch/p/10281773.html</guid>
<description>&lt;h2&gt;　　前言&lt;/h2&gt;
&lt;p&gt;　　我们在之前的实现了springboot与data-jpa的增、删、改、查简单使用（请戳：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/huanzi-qch/p/9970545.html&quot;&gt;SpringBoot系列——Spring-Data-JPA&lt;/a&gt;），并实现了升级版（请戳：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/huanzi-qch/p/9984261.html&quot;&gt;SpringBoot系列——Spring-Data-JPA（升级版）&lt;/a&gt;），在基础版、升级版中，我们实现了单表的基础get、save（插入/更新）、list、page、delete接口，并写了一套通用common代码，每个单表去继承从而实现这套基础接口、同时，我们使用用Vo去接收、传输数据，实体负责与数据库表映射。&lt;/p&gt;
&lt;p&gt;　　但是，单表增、删、改、查基础功能相似，代码高度相似，我们新增一个单表操作的步骤：复制、粘贴、修改文件夹、文件名、类名、修改传参实体对象...，为了实现快速开发，我们在前面两个版本的基础上，使用代码自动生成一套单表的基础增、删、改、查接口&lt;/p&gt;

&lt;h2&gt; 　　代码编写&lt;/h2&gt;
&lt;p&gt;　　首先我们先创建一个新的工程项目，实现一套common代码，以便单表直接继承（&lt;span&gt;文末贴出完整代码&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117105154731-1858025745.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　CodeDOM.java是一个比较大的类，因为我把所有的东西都丢在了里面...，接下来我们拆分讲解一下步骤&lt;/p&gt;
&lt;h3&gt;　　查询表信息&lt;/h3&gt;
&lt;p&gt;　　首先要连接数据库，连接数据使用jdbc进行连接，这里封装一下：&lt;span&gt;想要生成其他表的代码，修改tableName即可&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 数据连接相关
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String URL = &quot;jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&amp;amp;characterEncoding=utf-8&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String USERNAME = &quot;root&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String PASSWORD = &quot;123456&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DRIVERCLASSNAME = &quot;com.mysql.jdbc.Driver&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String tableName = &quot;tb_user&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * JDBC连接数据库工具类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DBConnectionUtil {

        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、加载驱动&lt;/span&gt;
            &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                Class.forName(DRIVERCLASSNAME);
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ClassNotFoundException e) {
                e.printStackTrace();
            }
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 返回一个Connection连接
         *
         * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
         &lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Connection getConnection() {
            Connection conn &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、连接数据库&lt;/span&gt;
            &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                conn &lt;/span&gt;=&lt;span&gt; DriverManager.getConnection(URL, USERNAME, PASSWORD);
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
                e.printStackTrace();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; conn;
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 关闭Connection，Statement连接
         *
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; conn
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; stmt
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; close(Connection conn, Statement stmt) {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                conn.close();
                stmt.close();
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
                e.printStackTrace();
            }
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 关闭Connection，Statement，ResultSet连接
         *
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; conn
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; stmt
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; rs
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; close(Connection conn, Statement stmt, ResultSet rs) {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                close(conn, stmt);
                rs.close();
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
                e.printStackTrace();
            }
        }

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　获取数据表的表机构信息（本系列用的是MySQL数据库），通过查询 information_schema 表，SQL：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; column_name,data_type,column_comment,column_key,extra &lt;span&gt;from&lt;/span&gt; information_schema.columns &lt;span&gt;where&lt;/span&gt; table_name&lt;span&gt;=&lt;/span&gt;?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建一个表结构对象，然后封装一下方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 表结构行信息实体类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TableInfo {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String columnName;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String dataType;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String columnComment;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String columnKey;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String extra;

        TableInfo() {
        }

        String getColumnName() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; columnName;
        }

        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setColumnName(String columnName) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.columnName =&lt;span&gt; columnName;
        }

        String getDataType() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dataType;
        }

        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setDataType(String dataType) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dataType =&lt;span&gt; dataType;
        }

        String getColumnComment() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; columnComment;
        }

        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setColumnComment(String columnComment) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.columnComment =&lt;span&gt; columnComment;
        }

        String getColumnKey() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; columnKey;
        }

        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setColumnKey(String columnKey) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.columnKey =&lt;span&gt; columnKey;
        }

        String getExtra() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; extra;
        }

        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setExtra(String extra) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.extra =&lt;span&gt; extra;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获取表结构信息（MySQL）
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; tableName 表
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; list
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;TableInfo&amp;gt;&lt;span&gt; getTableInfo(String tableName) {
        Connection conn &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        PreparedStatement ps &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        ResultSet rs &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        ArrayList&lt;/span&gt;&amp;lt;TableInfo&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            conn &lt;/span&gt;=&lt;span&gt; DBConnectionUtil.getConnection();
            String sql &lt;/span&gt;= &quot;select column_name,data_type,column_comment,column_key,extra from information_schema.columns where table_name=?&quot;&lt;span&gt;;
            ps &lt;/span&gt;=&lt;span&gt; conn.prepareStatement(sql);
            ps.setString(&lt;/span&gt;1&lt;span&gt;, tableName);
            rs &lt;/span&gt;=&lt;span&gt; ps.executeQuery();
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (rs.next()) {
                TableInfo tableInfo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TableInfo();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;列名&lt;/span&gt;
                tableInfo.setColumnName(rs.getString(&quot;column_name&quot;&lt;span&gt;));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;列类型&lt;/span&gt;
                tableInfo.setDataType(rs.getString(&quot;data_type&quot;&lt;span&gt;));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;列注释&lt;/span&gt;
                tableInfo.setColumnComment(rs.getString(&quot;column_comment&quot;&lt;span&gt;));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主键&lt;/span&gt;
                tableInfo.setColumnKey(rs.getString(&quot;column_key&quot;&lt;span&gt;));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主键类型&lt;/span&gt;
                tableInfo.setExtra(rs.getString(&quot;extra&quot;&lt;span&gt;));
                list.add(tableInfo);
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
            e.printStackTrace();
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt; rs != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            DBConnectionUtil.close(conn, ps, rs);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　那么oracle应该怎么查呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;表结构信息&lt;/span&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; user_tab_columns &lt;span&gt;where&lt;/span&gt; table_name&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TB_USER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;表字段注释&lt;/span&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; user_col_comments  &lt;span&gt;where&lt;/span&gt; table_name&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TB_USER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;表注释&lt;/span&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; user_tab_comments  &lt;span&gt;where&lt;/span&gt; table_name&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TB_USER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们看一下系统都提供有哪些表，这...太多了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117112541385-1415474894.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;　　数据处理&lt;/h3&gt;
&lt;p&gt;　　数据处理，比如数据字段类型转成java类型、字段的下划线转驼峰等，我们封装一下工具类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 字符串处理工具类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StringUtil {
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 数据库类型-&amp;gt;JAVA类型
         *
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; dbType 数据库类型
         * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; JAVA类型
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String typeMapping(String dbType) {
            String javaType &lt;/span&gt;= &quot;&quot;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&quot;int|integer&quot;&lt;span&gt;.contains(dbType)) {
                javaType &lt;/span&gt;= &quot;Integer&quot;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&quot;float|double|decimal|real&quot;&lt;span&gt;.contains(dbType)) {
                javaType &lt;/span&gt;= &quot;Double&quot;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&quot;date|time|datetime|timestamp&quot;&lt;span&gt;.contains(dbType)) {
                javaType &lt;/span&gt;= &quot;Date&quot;&lt;span&gt;;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                javaType &lt;/span&gt;= &quot;String&quot;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; javaType;
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 驼峰转换为下划线
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String underscoreName(String camelCaseName) {
            StringBuilder result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (camelCaseName != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; camelCaseName.length() &amp;gt; 0&lt;span&gt;) {
                result.append(camelCaseName.substring(&lt;/span&gt;0, 1&lt;span&gt;).toLowerCase());
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 1; i &amp;lt; camelCaseName.length(); i++&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; ch =&lt;span&gt; camelCaseName.charAt(i);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (Character.isUpperCase(ch)) {
                        result.append(&lt;/span&gt;&quot;_&quot;&lt;span&gt;);
                        result.append(Character.toLowerCase(ch));
                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                        result.append(ch);
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result.toString();
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 首字母大写
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String captureName(String name) {
            &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;[] cs =&lt;span&gt; name.toCharArray();
            cs[&lt;/span&gt;0] -= 32&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; String.valueOf(cs);

        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 下划线转换为驼峰
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String camelCaseName(String underscoreName) {
            StringBuilder result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (underscoreName != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; underscoreName.length() &amp;gt; 0&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; underscoreName.length(); i++&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; ch =&lt;span&gt; underscoreName.charAt(i);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&quot;_&quot;.charAt(0) ==&lt;span&gt; ch) {
                        flag &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag) {
                            result.append(Character.toUpperCase(ch));
                            flag &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                            result.append(ch);
                        }
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result.toString();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;　　文件处理&lt;/h3&gt;
&lt;p&gt;　　文件处理比如创建文件夹、文件，将字符写入文件等，我们先获取一下基础路径，并封装一下文件工具类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 基础路径
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String basePackage_ = &quot;cn\\huanzi\\springbootjpa\\&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String package_ = basePackage_ + StringUtil.camelCaseName(tableName).toLowerCase() + &quot;\\&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * System.getProperty(&quot;user.dir&quot;) 获取的是项目所在路径
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String basePath = System.getProperty(&quot;user.dir&quot;) + &quot;\\src\\main\\java\\&quot; + package_;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * file工具类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FileUtil {
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 创建文件
         *
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; pathNameAndFileName 路径跟文件名
         * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; File对象
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; File createFile(String pathNameAndFileName) {
            File file &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(pathNameAndFileName);
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取父目录&lt;/span&gt;
                File fileParent =&lt;span&gt; file.getParentFile();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;fileParent.exists()) {
                    fileParent.mkdirs();
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建文件&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;file.exists()) {
                    file.createNewFile();
                }
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                file &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                System.err.println(&lt;/span&gt;&quot;新建文件操作出错&quot;&lt;span&gt;);
                e.printStackTrace();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; file;
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 字符流写入文件
         *
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; file         file对象
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; stringBuffer 要写入的数据
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; fileWriter(File file, StringBuffer stringBuffer) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字符流&lt;/span&gt;
            &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                FileWriter resultFile &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; FileWriter(file, &lt;span&gt;true&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true,则追加写入 false,则覆盖写入&lt;/span&gt;
                PrintWriter myFile = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PrintWriter(resultFile);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;写入&lt;/span&gt;
&lt;span&gt;                myFile.println(stringBuffer.toString());

                myFile.close();
                resultFile.close();
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                System.err.println(&lt;/span&gt;&quot;写入操作出错&quot;&lt;span&gt;);
                e.printStackTrace();
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;　　创建代码&lt;/h3&gt;
&lt;p&gt;　　根据我们项目的路径规范，代码编写规范，我们定义好文件的模板，并封装成对应的方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 创建pojo实体类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; createPojo(List&amp;lt;TableInfo&amp;gt;&lt;span&gt; tableInfos) {
        File file &lt;/span&gt;= FileUtil.createFile(basePath + &quot;pojo\\&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;.java&quot;&lt;span&gt;);
        StringBuffer stringBuffer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        stringBuffer.append(
                &lt;/span&gt;&quot;package &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;pojo;\n&quot; +
                        &quot;\n&quot; +
                        &quot;import lombok.Data;\n&quot; +
                        &quot;import javax.persistence.*;\n&quot; +
                        &quot;import java.io.Serializable;\n&quot; +
                        &quot;import java.util.Date;\n&quot; +
                        &quot;\n&quot; +
                        &quot;@Entity\n&quot; +
                        &quot;@Table(name = \&quot;&quot; + tableName + &quot;\&quot;)\n&quot; +
                        &quot;@Data\n&quot; +
                        &quot;public class &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot; implements Serializable {\n&quot;&lt;span&gt;
        );
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历设置属性&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TableInfo tableInfo : tableInfos) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主键&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&quot;PRI&quot;&lt;span&gt;.equals(tableInfo.getColumnKey())) {
                stringBuffer.append(&lt;/span&gt;&quot;   @Id\n&quot;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自增&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&quot;auto_increment&quot;&lt;span&gt;.equals(tableInfo.getExtra())) {
                stringBuffer.append(&lt;/span&gt;&quot;    @GeneratedValue(strategy= GenerationType.IDENTITY)\n&quot;&lt;span&gt;);
            }
            stringBuffer.append(&lt;/span&gt;&quot;    private &quot; + StringUtil.typeMapping(tableInfo.getDataType()) + &quot; &quot; + StringUtil.camelCaseName(tableInfo.getColumnName()) + &quot;;//&quot; + tableInfo.getColumnComment() + &quot;\n\n&quot;&lt;span&gt;);
        }
        stringBuffer.append(&lt;/span&gt;&quot;}&quot;&lt;span&gt;);
        FileUtil.fileWriter(file, stringBuffer);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 创建vo类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; createVo(List&amp;lt;TableInfo&amp;gt;&lt;span&gt; tableInfos) {
        File file &lt;/span&gt;= FileUtil.createFile(basePath + &quot;vo\\&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo.java&quot;&lt;span&gt;);
        StringBuffer stringBuffer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        stringBuffer.append(
                &lt;/span&gt;&quot;package &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;vo;\n&quot; +
                        &quot;\n&quot; +
                        &quot;import lombok.Data;\n&quot; +
                        &quot;import java.io.Serializable;\n&quot; +
                        &quot;import java.util.Date;\n&quot; +
                        &quot;\n&quot; +
                        &quot;@Data\n&quot; +
                        &quot;public class &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo extends PageCondition implements Serializable {\n&quot;&lt;span&gt;
        );
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历设置属性&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TableInfo tableInfo : tableInfos) {
            stringBuffer.append(&lt;/span&gt;&quot;    private &quot; + StringUtil.typeMapping(tableInfo.getDataType()) + &quot; &quot; + StringUtil.camelCaseName(tableInfo.getColumnName()) + &quot;;//&quot; + tableInfo.getColumnComment() + &quot;\n\n&quot;&lt;span&gt;);
        }
        stringBuffer.append(&lt;/span&gt;&quot;}&quot;&lt;span&gt;);
        FileUtil.fileWriter(file, stringBuffer);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 创建repository类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; createRepository(List&amp;lt;TableInfo&amp;gt;&lt;span&gt; tableInfos) {
        File file &lt;/span&gt;= FileUtil.createFile(basePath + &quot;repository\\&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Repository.java&quot;&lt;span&gt;);
        StringBuffer stringBuffer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        String t &lt;/span&gt;= &quot;String&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历属性&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TableInfo tableInfo : tableInfos) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主键&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&quot;PRI&quot;&lt;span&gt;.equals(tableInfo.getColumnKey())) {
                t &lt;/span&gt;=&lt;span&gt; StringUtil.typeMapping(tableInfo.getDataType());
            }
        }
        stringBuffer.append(
                &lt;/span&gt;&quot;package &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;repository;\n&quot; +
                        &quot;\n&quot; +
                        &quot;import &quot; + basePackage_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;common.repository.*;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;pojo.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;;\n&quot; +
                        &quot;import org.springframework.stereotype.Repository;\n&quot; +
                        &quot;\n&quot; +
                        &quot;@Repository\n&quot; +
                        &quot;public interface &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Repository extends CommonRepository&amp;lt;&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;, &quot; + t + &quot;&amp;gt; {&quot;&lt;span&gt;
        );
        stringBuffer.append(&lt;/span&gt;&quot;\n&quot;&lt;span&gt;);
        stringBuffer.append(&lt;/span&gt;&quot;}&quot;&lt;span&gt;);
        FileUtil.fileWriter(file, stringBuffer);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 创建service类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; createService(List&amp;lt;TableInfo&amp;gt;&lt;span&gt; tableInfos) {
        File file &lt;/span&gt;= FileUtil.createFile(basePath + &quot;service\\&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Service.java&quot;&lt;span&gt;);
        StringBuffer stringBuffer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        String t &lt;/span&gt;= &quot;String&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历属性&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TableInfo tableInfo : tableInfos) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主键&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&quot;PRI&quot;&lt;span&gt;.equals(tableInfo.getColumnKey())) {
                t &lt;/span&gt;=&lt;span&gt; StringUtil.typeMapping(tableInfo.getDataType());
            }
        }
        stringBuffer.append(
                &lt;/span&gt;&quot;package &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;service;\n&quot; +
                        &quot;\n&quot; +
                        &quot;import &quot; + basePackage_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;common.service.*;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;pojo.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;vo.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo;\n&quot; +
                        &quot;\n&quot; +
                        &quot;public interface &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Service extends CommonService&amp;lt;&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo, &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;, &quot; + t + &quot;&amp;gt; {&quot;&lt;span&gt;
        );
        stringBuffer.append(&lt;/span&gt;&quot;\n&quot;&lt;span&gt;);
        stringBuffer.append(&lt;/span&gt;&quot;}&quot;&lt;span&gt;);
        FileUtil.fileWriter(file, stringBuffer);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Impl&lt;/span&gt;
        File file1 = FileUtil.createFile(basePath + &quot;service\\&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;ServiceImpl.java&quot;&lt;span&gt;);
        StringBuffer stringBuffer1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        stringBuffer1.append(
                &lt;/span&gt;&quot;package &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;service;\n&quot; +
                        &quot;\n&quot; +
                        &quot;import &quot; + basePackage_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;common.service.*;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;pojo.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;vo.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;repository.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Repository;\n&quot; +
                        &quot;import org.springframework.beans.factory.annotation.Autowired;\n&quot; +
                        &quot;import org.springframework.stereotype.Service;\n&quot; +
                        &quot;import org.springframework.transaction.annotation.Transactional;\n&quot; +
                        &quot;import javax.persistence.EntityManager;\n&quot; +
                        &quot;import javax.persistence.PersistenceContext;\n&quot; +
                        &quot;\n&quot; +
                        &quot;@Service\n&quot; +
                        &quot;@Transactional\n&quot; +
                        &quot;public class &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;ServiceImpl extends CommonServiceImpl&amp;lt;&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo, &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;, &quot; + t + &quot;&amp;gt; implements &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Service{&quot;&lt;span&gt;
        );
        stringBuffer1.append(&lt;/span&gt;&quot;\n\n&quot;&lt;span&gt;);
        stringBuffer1.append(
                &lt;/span&gt;&quot;    @PersistenceContext\n&quot; +
                &quot;    private EntityManager em;\n&quot;&lt;span&gt;);

        stringBuffer1.append(&lt;/span&gt;&quot;&quot; +
                &quot;    @Autowired\n&quot; +
                &quot;    private &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Repository &quot; + StringUtil.camelCaseName(tableName) + &quot;Repository;\n&quot;&lt;span&gt;);
        stringBuffer1.append(&lt;/span&gt;&quot;}&quot;&lt;span&gt;);
        FileUtil.fileWriter(file1, stringBuffer1);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 创建controller类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; createController(List&amp;lt;TableInfo&amp;gt;&lt;span&gt; tableInfos) {
        File file &lt;/span&gt;= FileUtil.createFile(basePath + &quot;controller\\&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Controller.java&quot;&lt;span&gt;);
        StringBuffer stringBuffer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        String t &lt;/span&gt;= &quot;String&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历属性&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TableInfo tableInfo : tableInfos) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主键&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&quot;PRI&quot;&lt;span&gt;.equals(tableInfo.getColumnKey())) {
                t &lt;/span&gt;=&lt;span&gt; StringUtil.typeMapping(tableInfo.getDataType());
            }
        }
        stringBuffer.append(
                &lt;/span&gt;&quot;package &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;controller;\n&quot; +
                        &quot;\n&quot; +
                        &quot;import &quot; + basePackage_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;common.controller.*;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;pojo.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;vo.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;service.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Service;\n&quot; +
                        &quot;import org.springframework.beans.factory.annotation.Autowired;\n&quot; +
                        &quot;import org.springframework.web.bind.annotation.*;\n&quot; +
                        &quot;\n&quot; +
                        &quot;@RestController\n&quot; +
                        &quot;@RequestMapping(\&quot;/&quot; + StringUtil.camelCaseName(tableName) + &quot;/\&quot;)\n&quot; +
                        &quot;public class &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Controller extends CommonController&amp;lt;&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo, &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;, &quot; + t + &quot;&amp;gt; {&quot;&lt;span&gt;
        );
        stringBuffer.append(&lt;/span&gt;&quot;\n&quot;&lt;span&gt;);
        stringBuffer.append(&lt;/span&gt;&quot;&quot; +
                &quot;    @Autowired\n&quot; +
                &quot;    private TbUserService tbUserService;\n&quot;&lt;span&gt;);
        stringBuffer.append(&lt;/span&gt;&quot;}&quot;&lt;span&gt;);
        FileUtil.fileWriter(file, stringBuffer);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;　　效果演示&lt;/h2&gt;
&lt;p&gt;　　main方法运行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;TableInfo&amp;gt; tableInfo =&lt;span&gt; getTableInfo(tableName);
        createPojo(tableInfo);
        createVo(tableInfo);
        createRepository(tableInfo);
        createService(tableInfo);
        createController(tableInfo);
        System.out.println(&lt;/span&gt;&quot;代码生成完毕！&quot;&lt;span&gt;);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117122600517-127136101.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117122431097-1661939436.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 　　生成代码&lt;/h3&gt;
&lt;p&gt;　　我们查看一下生成的代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.pojo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.Data;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; javax.persistence.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;

@Entity
@Table(name &lt;/span&gt;= &quot;tb_user&quot;&lt;span&gt;)
@Data
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; TbUser &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable {
    @Id
    @GeneratedValue(strategy&lt;/span&gt;=&lt;span&gt; GenerationType.IDENTITY)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Integer id;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;表id&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; String username;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户名&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; String password;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;密码&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; Date created;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建时间&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; Integer descriptionId;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关联详情id&lt;/span&gt;
&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.vo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.Data;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;

@Data
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; TbUserVo &lt;span&gt;extends&lt;/span&gt; PageCondition &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Integer id;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;表id&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; String username;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户名&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; String password;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;密码&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; Date created;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建时间&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; Integer descriptionId;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关联详情id&lt;/span&gt;
&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.repository;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; cn.huanzi.springbootjpa.common.repository.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.pojo.TbUser;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Repository;

@Repository
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; TbUserRepository &lt;span&gt;extends&lt;/span&gt; CommonRepository&amp;lt;TbUser, Integer&amp;gt;&lt;span&gt; {
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; cn.huanzi.springbootjpa.common.service.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.pojo.TbUser;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.vo.TbUserVo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; TbUserService &lt;span&gt;extends&lt;/span&gt; CommonService&amp;lt;TbUserVo, TbUser, Integer&amp;gt;&lt;span&gt; {
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; cn.huanzi.springbootjpa.common.service.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.pojo.TbUser;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.vo.TbUserVo;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.repository.TbUserRepository;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.transaction.annotation.Transactional;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.persistence.EntityManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.persistence.PersistenceContext;

@Service
@Transactional
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; TbUserServiceImpl &lt;span&gt;extends&lt;/span&gt; CommonServiceImpl&amp;lt;TbUserVo, TbUser, Integer&amp;gt; &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; TbUserService{

    @PersistenceContext
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; EntityManager em;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; TbUserRepository tbUserRepository;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; cn.huanzi.springbootjpa.common.controller.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.pojo.TbUser;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.vo.TbUserVo;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.tbuser.service.TbUserService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.*&lt;span&gt;;

@RestController
@RequestMapping(&lt;/span&gt;&quot;/tbUser/&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; TbUserController &lt;span&gt;extends&lt;/span&gt; CommonController&amp;lt;TbUserVo, TbUser, Integer&amp;gt;&lt;span&gt; {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; TbUserService tbUserService;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们启动项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117122953765-329979330.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　依次访问基础接口：&lt;/p&gt;
&lt;h3&gt;　　get接口&lt;/h3&gt;
&lt;p&gt;　　http://localhost:10086/tbUser/get/1&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117131852058-1211991096.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　page接口&lt;/h3&gt;
&lt;p&gt;　　http://localhost:10086/tbUser/page?page=1&amp;amp;rows=10&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117132010288-182929651.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117131830326-1835278690.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 　　list接口&lt;/h3&gt;
&lt;p&gt;　　http://localhost:10086/tbUser/list&lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117131935603-1140779840.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117132108366-1226429010.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;　　save接口&lt;/h3&gt;
&lt;p&gt;　　（插入跟更新）&lt;/p&gt;
&lt;p&gt;　　没有id或id不存在，为插入，http://localhost:10086/tbUser/save?username=张麻子&amp;amp;password=123&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117132205904-678524783.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　id已存在，则为更新，&lt;span&gt;注意：这里的更新是你的字段是什么jpa就帮你存什么&lt;/span&gt;，如果想要实现只更新接参对象有值的字段，应该先用id去同步数据，再更新，&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117132418971-249352696.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　delete接口&lt;/h3&gt;
&lt;p&gt;　　http://localhost:10086/tbUser/delete/15&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117132513586-1532754190.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;　　扩展&lt;/h2&gt;
&lt;p&gt;　　1、有一些同学会发现，代码生成后idea并没有帮我们扫描出来，这时候我们可以手动去刷新一下，对着我们的项目右键，然后刷新&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117133058832-167645642.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2、个人觉得代码生成用groovy更加合适，只是我现在对它的语法使用还不熟悉，后面我们可以尝试一下使用groovy来生成代码，在idea里使用groovy生成代码：&lt;/p&gt;
&lt;p&gt;　　groovy文件的位置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117133403916-394454028.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　使用方法：用idea的datebase连接数据库后，对着表右击&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1353055/201901/1353055-20190117133525134-1958832617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;　　后记&lt;/h2&gt;
&lt;p&gt;　　一人挖井，全村喝水；有了这一套基础代码跟代码自动生成单表基础增、删、改、查接口，我们的开发效率大大提高&lt;/p&gt;

&lt;h2&gt;　　完整代码&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('49772485-9522-4bc1-9b02-be4eb133b250')&quot; readability=&quot;57.5&quot;&gt;&lt;img id=&quot;code_img_closed_49772485-9522-4bc1-9b02-be4eb133b250&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_49772485-9522-4bc1-9b02-be4eb133b250&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('49772485-9522-4bc1-9b02-be4eb133b250',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_49772485-9522-4bc1-9b02-be4eb133b250&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;110&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.huanzi.springbootjpa.util;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileWriter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.PrintWriter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.sql.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 自动生成代码
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CodeDOM {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 数据连接相关
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String URL = &quot;jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&amp;amp;characterEncoding=utf-8&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String USERNAME = &quot;root&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String PASSWORD = &quot;123456&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DRIVERCLASSNAME = &quot;com.mysql.jdbc.Driver&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String tableName = &quot;tb_user&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 基础路径
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String basePackage_ = &quot;cn\\huanzi\\springbootjpa\\&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String package_ = basePackage_ + StringUtil.camelCaseName(tableName).toLowerCase() + &quot;\\&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * System.getProperty(&quot;user.dir&quot;) 获取的是项目所在路径
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String basePath = System.getProperty(&quot;user.dir&quot;) + &quot;\\src\\main\\java\\&quot; +&lt;span&gt; package_;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 创建pojo实体类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; createPojo(List&amp;lt;TableInfo&amp;gt;&lt;span&gt; tableInfos) {
        File file &lt;/span&gt;= FileUtil.createFile(basePath + &quot;pojo\\&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;.java&quot;&lt;span&gt;);
        StringBuffer stringBuffer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        stringBuffer.append(
                &lt;/span&gt;&quot;package &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;pojo;\n&quot; +
                        &quot;\n&quot; +
                        &quot;import lombok.Data;\n&quot; +
                        &quot;import javax.persistence.*;\n&quot; +
                        &quot;import java.io.Serializable;\n&quot; +
                        &quot;import java.util.Date;\n&quot; +
                        &quot;\n&quot; +
                        &quot;@Entity\n&quot; +
                        &quot;@Table(name = \&quot;&quot; + tableName + &quot;\&quot;)\n&quot; +
                        &quot;@Data\n&quot; +
                        &quot;public class &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot; implements Serializable {\n&quot;&lt;span&gt;
        );
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历设置属性&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TableInfo tableInfo : tableInfos) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主键&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&quot;PRI&quot;&lt;span&gt;.equals(tableInfo.getColumnKey())) {
                stringBuffer.append(&lt;/span&gt;&quot;    @Id\n&quot;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自增&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&quot;auto_increment&quot;&lt;span&gt;.equals(tableInfo.getExtra())) {
                stringBuffer.append(&lt;/span&gt;&quot;    @GeneratedValue(strategy= GenerationType.IDENTITY)\n&quot;&lt;span&gt;);
            }
            stringBuffer.append(&lt;/span&gt;&quot;    private &quot; + StringUtil.typeMapping(tableInfo.getDataType()) + &quot; &quot; + StringUtil.camelCaseName(tableInfo.getColumnName()) + &quot;;//&quot; + tableInfo.getColumnComment() + &quot;\n\n&quot;&lt;span&gt;);
        }
        stringBuffer.append(&lt;/span&gt;&quot;}&quot;&lt;span&gt;);
        FileUtil.fileWriter(file, stringBuffer);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 创建vo类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; createVo(List&amp;lt;TableInfo&amp;gt;&lt;span&gt; tableInfos) {
        File file &lt;/span&gt;= FileUtil.createFile(basePath + &quot;vo\\&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo.java&quot;&lt;span&gt;);
        StringBuffer stringBuffer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        stringBuffer.append(
                &lt;/span&gt;&quot;package &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;vo;\n&quot; +
                        &quot;\n&quot; +
                        &quot;import lombok.Data;\n&quot; +
                        &quot;import java.io.Serializable;\n&quot; +
                        &quot;import java.util.Date;\n&quot; +
                        &quot;\n&quot; +
                        &quot;@Data\n&quot; +
                        &quot;public class &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo implements Serializable {\n&quot;&lt;span&gt;
        );
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历设置属性&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TableInfo tableInfo : tableInfos) {
            stringBuffer.append(&lt;/span&gt;&quot;    private &quot; + StringUtil.typeMapping(tableInfo.getDataType()) + &quot; &quot; + StringUtil.camelCaseName(tableInfo.getColumnName()) + &quot;;//&quot; + tableInfo.getColumnComment() + &quot;\n\n&quot;&lt;span&gt;);
        }
        stringBuffer.append(&lt;/span&gt;&quot;}&quot;&lt;span&gt;);
        FileUtil.fileWriter(file, stringBuffer);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 创建repository类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; createRepository(List&amp;lt;TableInfo&amp;gt;&lt;span&gt; tableInfos) {
        File file &lt;/span&gt;= FileUtil.createFile(basePath + &quot;repository\\&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Repository.java&quot;&lt;span&gt;);
        StringBuffer stringBuffer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        String t &lt;/span&gt;= &quot;String&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历属性&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TableInfo tableInfo : tableInfos) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主键&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&quot;PRI&quot;&lt;span&gt;.equals(tableInfo.getColumnKey())) {
                t &lt;/span&gt;=&lt;span&gt; StringUtil.typeMapping(tableInfo.getDataType());
            }
        }
        stringBuffer.append(
                &lt;/span&gt;&quot;package &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;repository;\n&quot; +
                        &quot;\n&quot; +
                        &quot;import &quot; + basePackage_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;common.repository.*;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;pojo.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;;\n&quot; +
                        &quot;import org.springframework.stereotype.Repository;\n&quot; +
                        &quot;\n&quot; +
                        &quot;@Repository\n&quot; +
                        &quot;public interface &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Repository extends CommonRepository&amp;lt;&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;, &quot; + t + &quot;&amp;gt; {&quot;&lt;span&gt;
        );
        stringBuffer.append(&lt;/span&gt;&quot;\n&quot;&lt;span&gt;);
        stringBuffer.append(&lt;/span&gt;&quot;}&quot;&lt;span&gt;);
        FileUtil.fileWriter(file, stringBuffer);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 创建service类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; createService(List&amp;lt;TableInfo&amp;gt;&lt;span&gt; tableInfos) {
        File file &lt;/span&gt;= FileUtil.createFile(basePath + &quot;service\\&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Service.java&quot;&lt;span&gt;);
        StringBuffer stringBuffer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        String t &lt;/span&gt;= &quot;String&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历属性&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TableInfo tableInfo : tableInfos) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主键&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&quot;PRI&quot;&lt;span&gt;.equals(tableInfo.getColumnKey())) {
                t &lt;/span&gt;=&lt;span&gt; StringUtil.typeMapping(tableInfo.getDataType());
            }
        }
        stringBuffer.append(
                &lt;/span&gt;&quot;package &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;service;\n&quot; +
                        &quot;\n&quot; +
                        &quot;import &quot; + basePackage_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;common.service.*;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;pojo.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;vo.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo;\n&quot; +
                        &quot;\n&quot; +
                        &quot;public interface &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Service extends CommonService&amp;lt;&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo, &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;, &quot; + t + &quot;&amp;gt; {&quot;&lt;span&gt;
        );
        stringBuffer.append(&lt;/span&gt;&quot;\n&quot;&lt;span&gt;);
        stringBuffer.append(&lt;/span&gt;&quot;}&quot;&lt;span&gt;);
        FileUtil.fileWriter(file, stringBuffer);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Impl&lt;/span&gt;
        File file1 = FileUtil.createFile(basePath + &quot;service\\&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;ServiceImpl.java&quot;&lt;span&gt;);
        StringBuffer stringBuffer1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        stringBuffer1.append(
                &lt;/span&gt;&quot;package &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;service;\n&quot; +
                        &quot;\n&quot; +
                        &quot;import &quot; + basePackage_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;common.service.*;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;pojo.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;vo.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;repository.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Repository;\n&quot; +
                        &quot;import org.springframework.beans.factory.annotation.Autowired;\n&quot; +
                        &quot;import org.springframework.stereotype.Service;\n&quot; +
                        &quot;import org.springframework.transaction.annotation.Transactional;\n&quot; +
                        &quot;import javax.persistence.EntityManager;\n&quot; +
                        &quot;import javax.persistence.PersistenceContext;\n&quot; +
                        &quot;\n&quot; +
                        &quot;@Service\n&quot; +
                        &quot;@Transactional\n&quot; +
                        &quot;public class &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;ServiceImpl extends CommonServiceImpl&amp;lt;&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo, &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;, &quot; + t + &quot;&amp;gt; implements &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Service{&quot;&lt;span&gt;
        );
        stringBuffer1.append(&lt;/span&gt;&quot;\n\n&quot;&lt;span&gt;);
        stringBuffer1.append(
                &lt;/span&gt;&quot;    @PersistenceContext\n&quot; +
                &quot;    private EntityManager em;\n&quot;&lt;span&gt;);

        stringBuffer1.append(&lt;/span&gt;&quot;&quot; +
                &quot;    @Autowired\n&quot; +
                &quot;    private &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Repository &quot; + StringUtil.camelCaseName(tableName) + &quot;Repository;\n&quot;&lt;span&gt;);
        stringBuffer1.append(&lt;/span&gt;&quot;}&quot;&lt;span&gt;);
        FileUtil.fileWriter(file1, stringBuffer1);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 创建controller类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; createController(List&amp;lt;TableInfo&amp;gt;&lt;span&gt; tableInfos) {
        File file &lt;/span&gt;= FileUtil.createFile(basePath + &quot;controller\\&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Controller.java&quot;&lt;span&gt;);
        StringBuffer stringBuffer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        String t &lt;/span&gt;= &quot;String&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历属性&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TableInfo tableInfo : tableInfos) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主键&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&quot;PRI&quot;&lt;span&gt;.equals(tableInfo.getColumnKey())) {
                t &lt;/span&gt;=&lt;span&gt; StringUtil.typeMapping(tableInfo.getDataType());
            }
        }
        stringBuffer.append(
                &lt;/span&gt;&quot;package &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;controller;\n&quot; +
                        &quot;\n&quot; +
                        &quot;import &quot; + basePackage_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;common.controller.*;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;pojo.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;vo.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo;\n&quot; +
                        &quot;import &quot; + package_.replaceAll(&quot;\\\\&quot;, &quot;.&quot;) + &quot;service.&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Service;\n&quot; +
                        &quot;import org.springframework.beans.factory.annotation.Autowired;\n&quot; +
                        &quot;import org.springframework.web.bind.annotation.*;\n&quot; +
                        &quot;\n&quot; +
                        &quot;@RestController\n&quot; +
                        &quot;@RequestMapping(\&quot;/&quot; + StringUtil.camelCaseName(tableName) + &quot;/\&quot;)\n&quot; +
                        &quot;public class &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Controller extends CommonController&amp;lt;&quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;Vo, &quot; + StringUtil.captureName(StringUtil.camelCaseName(tableName)) + &quot;, &quot; + t + &quot;&amp;gt; {&quot;&lt;span&gt;
        );
        stringBuffer.append(&lt;/span&gt;&quot;\n&quot;&lt;span&gt;);
        stringBuffer.append(&lt;/span&gt;&quot;&quot; +
                &quot;    @Autowired\n&quot; +
                &quot;    private TbUserService tbUserService;\n&quot;&lt;span&gt;);
        stringBuffer.append(&lt;/span&gt;&quot;}&quot;&lt;span&gt;);
        FileUtil.fileWriter(file, stringBuffer);
    }


    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获取表结构信息
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; tableName 表
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; list
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;TableInfo&amp;gt;&lt;span&gt; getTableInfo(String tableName) {
        Connection conn &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        PreparedStatement ps &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        ResultSet rs &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        ArrayList&lt;/span&gt;&amp;lt;TableInfo&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            conn &lt;/span&gt;=&lt;span&gt; DBConnectionUtil.getConnection();
            String sql &lt;/span&gt;= &quot;select column_name,data_type,column_comment,column_key,extra from information_schema.columns where table_name=?&quot;&lt;span&gt;;
            ps &lt;/span&gt;=&lt;span&gt; conn.prepareStatement(sql);
            ps.setString(&lt;/span&gt;1&lt;span&gt;, tableName);
            rs &lt;/span&gt;=&lt;span&gt; ps.executeQuery();
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (rs.next()) {
                TableInfo tableInfo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TableInfo();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;列名&lt;/span&gt;
                tableInfo.setColumnName(rs.getString(&quot;column_name&quot;&lt;span&gt;));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;列类型&lt;/span&gt;
                tableInfo.setDataType(rs.getString(&quot;data_type&quot;&lt;span&gt;));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;列注释&lt;/span&gt;
                tableInfo.setColumnComment(rs.getString(&quot;column_comment&quot;&lt;span&gt;));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主键&lt;/span&gt;
                tableInfo.setColumnKey(rs.getString(&quot;column_key&quot;&lt;span&gt;));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主键类型&lt;/span&gt;
                tableInfo.setExtra(rs.getString(&quot;extra&quot;&lt;span&gt;));
                list.add(tableInfo);
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
            e.printStackTrace();
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt; rs != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            DBConnectionUtil.close(conn, ps, rs);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * file工具类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FileUtil {
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 创建文件
         *
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; pathNameAndFileName 路径跟文件名
         * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; File对象
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; File createFile(String pathNameAndFileName) {
            File file &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(pathNameAndFileName);
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取父目录&lt;/span&gt;
                File fileParent =&lt;span&gt; file.getParentFile();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;fileParent.exists()) {
                    fileParent.mkdirs();
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建文件&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;file.exists()) {
                    file.createNewFile();
                }
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                file &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                System.err.println(&lt;/span&gt;&quot;新建文件操作出错&quot;&lt;span&gt;);
                e.printStackTrace();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; file;
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 字符流写入文件
         *
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; file         file对象
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; stringBuffer 要写入的数据
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; fileWriter(File file, StringBuffer stringBuffer) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字符流&lt;/span&gt;
            &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                FileWriter resultFile &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; FileWriter(file, &lt;span&gt;true&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true,则追加写入 false,则覆盖写入&lt;/span&gt;
                PrintWriter myFile = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PrintWriter(resultFile);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;写入&lt;/span&gt;
&lt;span&gt;                myFile.println(stringBuffer.toString());

                myFile.close();
                resultFile.close();
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                System.err.println(&lt;/span&gt;&quot;写入操作出错&quot;&lt;span&gt;);
                e.printStackTrace();
            }
        }
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 字符串处理工具类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StringUtil {
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 数据库类型-&amp;gt;JAVA类型
         *
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; dbType 数据库类型
         * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; JAVA类型
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String typeMapping(String dbType) {
            String javaType &lt;/span&gt;= &quot;&quot;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&quot;int|integer&quot;&lt;span&gt;.contains(dbType)) {
                javaType &lt;/span&gt;= &quot;Integer&quot;&lt;span&gt;;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&quot;float|double|decimal|real&quot;&lt;span&gt;.contains(dbType)) {
                javaType &lt;/span&gt;= &quot;Double&quot;&lt;span&gt;;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&quot;date|time|datetime|timestamp&quot;&lt;span&gt;.contains(dbType)) {
                javaType &lt;/span&gt;= &quot;Date&quot;&lt;span&gt;;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                javaType &lt;/span&gt;= &quot;String&quot;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; javaType;
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 驼峰转换为下划线
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String underscoreName(String camelCaseName) {
            StringBuilder result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (camelCaseName != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; camelCaseName.length() &amp;gt; 0&lt;span&gt;) {
                result.append(camelCaseName.substring(&lt;/span&gt;0, 1&lt;span&gt;).toLowerCase());
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 1; i &amp;lt; camelCaseName.length(); i++&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; ch =&lt;span&gt; camelCaseName.charAt(i);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (Character.isUpperCase(ch)) {
                        result.append(&lt;/span&gt;&quot;_&quot;&lt;span&gt;);
                        result.append(Character.toLowerCase(ch));
                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                        result.append(ch);
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result.toString();
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 首字母大写
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String captureName(String name) {
            &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;[] cs =&lt;span&gt; name.toCharArray();
            cs[&lt;/span&gt;0] -= 32&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; String.valueOf(cs);

        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 下划线转换为驼峰
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String camelCaseName(String underscoreName) {
            StringBuilder result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (underscoreName != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; underscoreName.length() &amp;gt; 0&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; underscoreName.length(); i++&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; ch =&lt;span&gt; underscoreName.charAt(i);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&quot;_&quot;.charAt(0) ==&lt;span&gt; ch) {
                        flag &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag) {
                            result.append(Character.toUpperCase(ch));
                            flag &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                            result.append(ch);
                        }
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result.toString();
        }
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * JDBC连接数据库工具类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DBConnectionUtil {

        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、加载驱动&lt;/span&gt;
            &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                Class.forName(DRIVERCLASSNAME);
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ClassNotFoundException e) {
                e.printStackTrace();
            }
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 返回一个Connection连接
         *
         * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
         &lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Connection getConnection() {
            Connection conn &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、连接数据库&lt;/span&gt;
            &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                conn &lt;/span&gt;=&lt;span&gt; DriverManager.getConnection(URL, USERNAME, PASSWORD);
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
                e.printStackTrace();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; conn;
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 关闭Connection，Statement连接
         *
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; conn
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; stmt
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; close(Connection conn, Statement stmt) {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                conn.close();
                stmt.close();
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
                e.printStackTrace();
            }
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 关闭Connection，Statement，ResultSet连接
         *
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; conn
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; stmt
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; rs
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; close(Connection conn, Statement stmt, ResultSet rs) {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                close(conn, stmt);
                rs.close();
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
                e.printStackTrace();
            }
        }

    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 表结构行信息实体类
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TableInfo {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String columnName;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String dataType;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String columnComment;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String columnKey;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String extra;

        TableInfo() {
        }

        String getColumnName() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; columnName;
        }

        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setColumnName(String columnName) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.columnName =&lt;span&gt; columnName;
        }

        String getDataType() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dataType;
        }

        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setDataType(String dataType) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dataType =&lt;span&gt; dataType;
        }

        String getColumnComment() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; columnComment;
        }

        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setColumnComment(String columnComment) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.columnComment =&lt;span&gt; columnComment;
        }

        String getColumnKey() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; columnKey;
        }

        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setColumnKey(String columnKey) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.columnKey =&lt;span&gt; columnKey;
        }

        String getExtra() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; extra;
        }

        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setExtra(String extra) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.extra =&lt;span&gt; extra;
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;TableInfo&amp;gt; tableInfo =&lt;span&gt; getTableInfo(tableName);
        createPojo(tableInfo);
        createVo(tableInfo);
        createRepository(tableInfo);
        createService(tableInfo);
        createController(tableInfo);
        System.out.println(&lt;/span&gt;&quot;代码生成完毕！&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 17 Jan 2019 05:40:00 +0000</pubDate>
<dc:creator>huanzi-qch</dc:creator>
<og:description>前言 我们在之前的实现了springboot与data-jpa的增、删、改、查简单使用（请戳：SpringBoot系列——Spring-Data-JPA），并实现了升级版（请戳：SpringBoot系</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huanzi-qch/p/10281773.html</dc:identifier>
</item>
<item>
<title>docker+springboot+elasticsearch+kibana+elasticsearch-head整合（详细说明 ,看这一篇就够了） - 陈扬天</title>
<link>http://www.cnblogs.com/fengwenzhee/p/10281733.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fengwenzhee/p/10281733.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一开始是没有打算写这一篇博客的，但是看见好多朋友问关于elasticsearch的坑，决定还是写一份详细的安装说明与简单的测试demo，只要大家跟着我的步骤一步步来，100%是可以测试成功的。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一.  docker安装&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;本人使用的是centos6，安装命令如下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.首先使用epel库安装docker&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
yum install -y http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.yun-idc.com/epel/6/i386/epel-release-6-8.noarch.rpm&lt;/span&gt;
yum install -y docker-io
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装完成后，使用命令 service docker start 启动docker&lt;/p&gt;
&lt;p&gt;控制台输入docker ，出现如下界面表示安装成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1167306/201901/1167306-20190117120748625-1011625706.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1167306/201901/1167306-20190117120801665-1320102482.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果提示检查软件失败什么的，是因为之前先装了docker，再装了docker-io，直接使用命令 yum remove docker 删除docker，再执行&lt;/p&gt;
&lt;pre readability=&quot;7&quot;&gt;
yum install -y docker-io 即可。&lt;p&gt;&lt;strong&gt;2.下载elasticsearch 镜像&lt;br/&gt;&lt;/strong&gt;在下载elasticsearch镜像之前，可以先改一下docker的镜像加速功能，我是用的阿里云的镜像加速，登录阿里云官网，产品--&amp;gt;云计算基础--&amp;gt;容器镜像服务， 进入管理控制台&lt;strong&gt;，如下图所示，复制加速器地址。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1167306/201901/1167306-20190117133018723-1873528836.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/strong&gt;
&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;进入虚拟机，vim /etc/sysconfig/docker,加入下面一行配置&lt;/p&gt;
&lt;p&gt;other_args=&quot;--registry-mirror=https://xxxx.aliyuncs.com&quot;&lt;/p&gt;
&lt;p&gt;:wq 保存退出&lt;/p&gt;
&lt;p&gt;service docker restart 重启docker服务&lt;/p&gt;
&lt;p&gt;ps -aux|grep docker 输入如下命令查看docker信息，出现如下信息则加速器配置成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1167306/201901/1167306-20190117124558195-1633007891.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;然后就可以快速pull镜像了。&lt;/p&gt;
&lt;p&gt;docker pull elasticsearch&lt;/p&gt;
&lt;p&gt;docker pull kibana&lt;/p&gt;
&lt;p&gt; docker pull mobz/elasticsearch-head:5&lt;/p&gt;
&lt;p&gt;将我们需要的三个镜像拉取下来&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir &lt;/span&gt;-p /opt/elasticsearch/&lt;span&gt;data&lt;br/&gt;vim /opt/elasticsearch/elasticsearch.yml&lt;p&gt;docker run &lt;/p&gt;&lt;/span&gt;--name elasticsearch -p &lt;span&gt;9200&lt;/span&gt;:&lt;span&gt;9200&lt;/span&gt; -p &lt;span&gt;9300&lt;/span&gt;:&lt;span&gt;9300&lt;/span&gt; -p &lt;span&gt;5601&lt;/span&gt;:&lt;span&gt;5601&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;discovery.type=single-node&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -v /opt/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /opt/elasticsearch/data:/usr/share/elasticsearch/data -d elasticsearch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;elasticsearch.yml 配置文件内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cluster.name: elasticsearch_cluster
node.name: node&lt;/span&gt;-&lt;span&gt;master
node.master: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
node.data: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
http.port: &lt;/span&gt;&lt;span&gt;9200&lt;/span&gt;&lt;span&gt;
network.host: &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
network.publish_host: &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;6.77&lt;/span&gt;&lt;span&gt;
discovery.zen.ping.unicast.hosts: [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.6.77&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.6.78&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
http.host: &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
http.cors.enabled: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
http.cors.allow&lt;/span&gt;-origin: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
bootstrap.memory_lock: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
bootstrap.system_call_filter: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
# Uncomment the following lines &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; a production cluster deployment
#transport.host: &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
discovery.zen.minimum_master_nodes: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意我的elasticsearch 是在两台服务器上的，所以集群部署的时候可以省略端口号，因为都是9300，如果你的集群是部署在同一台os上，则需要区分出来端口号。&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;cluster.name: elasticsearch_cluster 集群名字，所有集群统一。&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;node.name: node-&lt;span&gt;master 你的节点名称，所有集群必须区分开。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;http.cors.enabled: true&lt;span&gt;
http.cors.allow-origin: &quot;*&quot;  支持跨域&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;discovery.zen.minimum_master_nodes: 1 可被发现作为主节点的数量&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;network.publish_host: 192.168.6.77 对外公布服务的真实IP&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;network.host: 0.0.0.0 开发环境可以设置成0.0.0.0，真正的生产环境需要指定IP地址。&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;我们启动elasticsearch容器多加了一个端口映射 -p 5601:5601 目的是让kibana使用该容器的端口映射，无需指定kibana容器的映射了。&lt;/p&gt;
&lt;p&gt;启动kibana:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker run --name kibana -e ELASTICSEARCH_URL=http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:9200 --net=container:elasticsearch -d kibana&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;--net=container:elasticsearch 命令为指定使用elasticsearch的映射&lt;/p&gt;
&lt;p&gt;这个时候，一般elasticsearch是启动报错的，我们需要修改一下linux的文件配置，如文件描述符的大小等。&lt;/p&gt;
&lt;p&gt;需要修改的文件一共两个：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;切换到root用户    
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;、vi /etc/security/&lt;span&gt;limits.conf 修改如下配置
&lt;/span&gt;* soft nofile &lt;span&gt;65536&lt;/span&gt;
* hard nofile &lt;span&gt;131072&lt;/span&gt;
 
2、vi /etc/&lt;span&gt;sysctl.conf 添加配置
vm.max_map_count&lt;/span&gt;=&lt;span&gt;655360&lt;/span&gt;&lt;span&gt; 
运行命令 sysctl &lt;/span&gt;-p
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个时候配置完了输入命令&lt;/p&gt;
&lt;p&gt;ulimit -Sn&lt;/p&gt;
&lt;p&gt;ulimit -Hn &lt;/p&gt;
&lt;p&gt;出现如下信息即配置成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1167306/201901/1167306-20190117125828587-1084181128.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可是这个时候重启容器依然是报错的，没报错是你运气好，解决办法是重启一下docker就OK了。&lt;/p&gt;
&lt;p&gt;service docker restart&lt;/p&gt;
&lt;p&gt;然后重启elasticsearch 容器&lt;/p&gt;
&lt;p&gt;docker restart elasticsearch &lt;/p&gt;
&lt;p&gt;访问ip:9200 &lt;/p&gt;
&lt;p&gt;出现如下信息，则elasticsearch 启动成功&lt;/p&gt;
&lt;pre&gt;
{
  &quot;name&quot; : &quot;node-master&quot;,
  &quot;cluster_name&quot; : &quot;elasticsearch_cluster&quot;,
  &quot;cluster_uuid&quot; : &quot;QzD1rYUOSqmpoXPYQqolqQ&quot;,
  &quot;version&quot; : {
    &quot;number&quot; : &quot;5.6.12&quot;,
    &quot;build_hash&quot; : &quot;cfe3d9f&quot;,
    &quot;build_date&quot; : &quot;2018-09-10T20:12:43.732Z&quot;,
    &quot;build_snapshot&quot; : false,
    &quot;lucene_version&quot; : &quot;6.6.1&quot;
  },
  &quot;tagline&quot; : &quot;You Know, for Search&quot;
}&lt;br/&gt;接着同样的操作，在另外一台os上启动elasticsearch,两台不同的地方一是第二台我们不需要做-p 5601:5601的端口映射，第二是elasticsearch.yml配置文件的一些不同:
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cluster.name: elasticsearch_cluster
node.name: node&lt;/span&gt;-&lt;span&gt;slave
node.master: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
node.data: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
http.port: &lt;/span&gt;&lt;span&gt;9200&lt;/span&gt;&lt;span&gt;
network.host: &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
network.publish_host: &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;6.78&lt;/span&gt;&lt;span&gt;
discovery.zen.ping.unicast.hosts: [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.6.77:9300&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.6.78:9300&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
http.host: &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
http.cors.enabled: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
http.cors.allow&lt;/span&gt;-origin: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
bootstrap.memory_lock: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
bootstrap.system_call_filter: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
# Uncomment the following lines &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; a production cluster deployment
# #transport.host: &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
# #discovery.zen.minimum_master_nodes: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;两台os中的elasticsearch都启动成功后，便可以启动kibana和head了。&lt;/p&gt;

&lt;pre&gt;
&lt;br/&gt;重启kibana &lt;br/&gt;docker restart kibana&lt;br/&gt;访问http://ip:5601&lt;br/&gt;出现如下页面则kibana启动成功
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1167306/201901/1167306-20190117130649326-866326430.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;启动elasticsearch-head监控es服务&lt;/p&gt;
&lt;p&gt;docker run -d -p 9100:9100 mobz/elasticsearch-head:5&lt;/p&gt;
&lt;p&gt;访问ip:9100&lt;/p&gt;
&lt;p&gt;出现如下界面即启动head成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1167306/201901/1167306-20190117131303727-31484034.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;到此我们的准备工作算是完成了，接下来新建springboot项目，pom引入&lt;/p&gt;
&lt;p&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;br/&gt;&amp;lt;artifactId&amp;gt;spring-boot-starter-data-elasticsearch&amp;lt;/artifactId&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;其他mvc mybatis配置在此不再赘述，application.yml配置如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring:
  data:
   elasticsearch:
    cluster&lt;/span&gt;-nodes: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;6.77&lt;/span&gt;:&lt;span&gt;9300&lt;/span&gt;&lt;span&gt;
    repositories.enabled: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    cluster&lt;/span&gt;-name: elasticsearch_cluster
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编写仓库测试类 UserRepository：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.smkj.user.repository;

import org.springframework.data.elasticsearch.repository.ElasticsearchRepository;
import org.springframework.stereotype.Component;

import com.smkj.user.entity.XymApiUser;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * @author dalaoyang
 * @Description
 * @project springboot_learn
 * @package com.dalaoyang.repository
 * @email yangyang@dalaoyang.cn
 * @date 2018/5/4
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Component
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; UserRepository extends ElasticsearchRepository&amp;lt;XymApiUser,String&amp;gt;&lt;span&gt; {
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实体类中，加上如下注解：&lt;/p&gt;
&lt;p&gt;@SuppressWarnings(&quot;serial&quot;)&lt;br/&gt;@AllArgsConstructor&lt;br/&gt;@NoArgsConstructor&lt;br/&gt;@Data&lt;br/&gt;@Accessors(chain=true)&lt;br/&gt;@Document(indexName = &quot;testuser&quot;,type = &quot;XymApiUser&quot;)&lt;/p&gt;
&lt;p&gt;最后一个注解是使用elasticsearch必加的，类似数据库和数据表映射&lt;/p&gt;
&lt;p&gt;上边的几个就是贴出来给大家推荐一下lombok这个小东东，挺好用的，具体使用方法可以自行百度，不喜欢的同学可以直接删掉。&lt;/p&gt;
&lt;p&gt;然后编写controller：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.smkj.user.controller;

import java.util.List;

import org.elasticsearch.action.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;.GetResponse;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder;
import org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;
import org.springframework.data.elasticsearch.core.query.SearchQuery;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import com.google.common.collect.Lists;
import com.smkj.user.entity.XymApiUser;
import com.smkj.user.repository.UserRepository;
import com.smkj.user.service.UserService;

@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserController {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserRepository userRepository;
     @Autowired
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; TransportClient client;
@GetMapping(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user/{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; XymApiUser getUserById(@PathVariable String id) {
    XymApiUser apiuser &lt;/span&gt;=&lt;span&gt; userService.selectByPrimaryKey(id);
    userRepository.save(apiuser);
    System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(apiuser.toString());
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; apiuser;
        
    }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * @param title   搜索标题
 * @param pageable page = 第几页参数, value = 每页显示条数
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@GetMapping(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;get/{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ResponseEntity  search(@PathVariable String id,@PageableDefault(page = &lt;span&gt;1&lt;/span&gt;, value = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;) Pageable pageable){
       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (id.isEmpty()) {
           &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ResponseEntity(HttpStatus.NOT_FOUND);
       }
      
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过索引、类型、id向es进行查询数据&lt;/span&gt;
       GetResponse response = client.prepareGet(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testuser&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xymApiUser&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, id).&lt;span&gt;get&lt;/span&gt;&lt;span&gt;();
       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;response.isExists()) {
           &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ResponseEntity(HttpStatus.NOT_FOUND);
       }

       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回查询到的数据&lt;/span&gt;
       &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ResponseEntity(response.getSource(), HttpStatus.OK);
}


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 3、查   +++：分页、分数、分域（结果一个也不少）
 * @param page
 * @param size
 * @param q
 * @return 
 * @return
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@GetMapping(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/{page}/{size}/{q}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Page&amp;lt;XymApiUser&amp;gt;&lt;span&gt; searchCity(@PathVariable Integer page, @PathVariable Integer size, @PathVariable String q) {

    SearchQuery searchQuery &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NativeSearchQueryBuilder()
            .withQuery( QueryBuilders.prefixQuery(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cardNum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,q))
            .withPageable(PageRequest.of(page, size))
            .build();
    Page&lt;/span&gt;&amp;lt;XymApiUser&amp;gt; pagea =&lt;span&gt; userRepository.search(searchQuery);
    System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(pagea.getTotalPages()); 
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pagea;

}





}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;访问 http://localhost:8080/0/10/6212263602070571344&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1167306/201901/1167306-20190117132446612-176980577.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到此结束，不明白的朋友可以留言。&lt;/p&gt;

</description>
<pubDate>Thu, 17 Jan 2019 05:26:00 +0000</pubDate>
<dc:creator>陈扬天</dc:creator>
<og:description>一开始是没有打算写这一篇博客的，但是看见好多朋友问关于elasticsearch的坑，决定还是写一份详细的安装说明与简单的测试demo，只要大家跟着我的步骤一步步来，100%是可以测试成功的。 一.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fengwenzhee/p/10281733.html</dc:identifier>
</item>
<item>
<title>迟到的2018年总结，但不迟到的决心 - 自由早晚乱余生</title>
<link>http://www.cnblogs.com/operationhome/p/10281467.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/operationhome/p/10281467.html</guid>
<description>&lt;p&gt;2019年1月1号就已经着手写这篇文章了，但是断断续续，今天想着怎么也要把它完善掉。因为2019年已经过去两周半了，真快啊。&lt;/p&gt;
&lt;p&gt;本文的内容主要分为两部分，一就是对2018年的回顾和总结，二就是对2019年计划和期待。&lt;/p&gt;
&lt;h2 id=&quot;从业经历&quot;&gt;从业经历&lt;/h2&gt;
&lt;p&gt;    2018年是一个承上启下的一年吧，结束了我人生的一个不可或缺的阶段，我大学毕业了，意味着该是真正的社会人了。&lt;/p&gt;
&lt;p&gt;    从2017年7月份就出来，大学的最后一年没有校园的你侬我侬,没有校园的自由和放荡，有的更多是社会的艰辛(其实也没那么苦，熬熬就过去了)，2017年7月，我在深圳找了半个月工作，终于找到一家公司要我了，我入职了这家公司做运维。（那家公司是我决定面试的最后一家，我心想要是再面试不到，我就去培训。）入职的这家公司是深圳很多小公司的影子，但是它很年轻，都是20多岁的年轻人，我们部门的负责人也是公司的一个股东，他是技术入股的，管理着技术部门，我在那个公司学到了很多，因为之前在学校学的东西真是太基础了，它给我时间学习，我也认真地完成它的每一个任务，从那我接触了很多运维的东西，2017年下半年可能是现在回头看过去很充实的半年，公司离我住的地方很近（半个小时公交），我很多时候就算没事，也愿意在公司呆到10点左右才回去。&lt;/p&gt;
&lt;p&gt;    2018年初，公司的业绩在慢慢的下降，我们老大也在不停的找寻新的业务，我和他一起尝试着，他愿意带着我去接触这些，让我去做这些（虽然当时很不情愿）,里面很多东西没有太多技术性，更多的是服务类型，远程解决别人的问题。这种工作真的很心累。一直做着，直到6月底，找到了一条他觉得可以做下去的业务，但7月底，我听到了小道消息，老大要走了，要去广州自己做那个6月底找到的业务。因为他在广州买了房。但是老大一直没有提那件事，但是公司的服务器一直删，我心里知道这个公司要不行了，我不想成为被动者，不想去等着他给我发2个月工资让我走人，我在8月中旬就开始完善自己的简历找工作了。我发现我找工作有点拼，一天面试4家。出来的找工作的时候的想法是找一家能让自己技术能提升的公司，但是当时想到我一个同学找了3个月都没找到工作，我心里慌了，只要一家技术还不错，薪资也不错的公司我就去，不管那么多了。面试了有5家公司吧，一家外包，一家电商，一家智能家居，一个做OA系统的，一家做服务(elasticsearch)的。最终选择了去电商一是薪资二是上家公司也是电商做相关的好上手。&lt;/p&gt;
&lt;p&gt;    其实电商这家公司会要我，一大部分原因是我有阿里云的ACP(一个阿里云的云计算认证)，我在2018年7月份去考取的。这家电商公司急着要迁移服务器，他们需要对阿里云产品比较熟悉的人，而我有这个证，就看上我了。9月初入职的，一入职就跟我说这两周要把我们一个项目的服务器全部迁移。当时一听心里压力挺大的，因为这个公司的运维已经离职3个月了，而且没有任何交接文档，只有一堆服务器密码。然后又要迁移。最后在不停服的情况下把服务迁移好了，（迁移是一个要想到方方面面的事情，要有大局思想又要很细心）。11月初 我们的另外一个项目由于公司高层的决定，我们需要将服务器从阿里云迁移到aws ,对aws 一窍不通的我，竟然被告知要一周完成迁移。心想真心累，我来这公司就是为了迁移的吗？然后开始熟悉aws文档，找aws有哪些服务可以直接用，怎么省钱。想想都心累，最后将核心业务先迁移到aws ,然后一些其他的慢慢迁移。这次迁移停服了，然后是在凌晨1点开始迁移的。在12月份，其实还有一次迁移，就是业务不好，将一些到期服务器释放。&lt;/p&gt;
&lt;h2 id=&quot;年总结&quot;&gt;2018 年总结&lt;/h2&gt;
&lt;p&gt;总体经历讲完了，总结下吧：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;2018年做了啥 ：

    拿到毕业证了
    考取了一个阿里云ACP认证。
    入选了阿里云10月贡献者荣誉榜
    对阿里云产品更熟悉了
    更愿意写文档了。
    2018年博客园文章共75篇（大部分原创，小部分转载），文章有错误欢迎指正啊（我是菜鸟啊）
    2018年报了老男孩python周末班（还在学习中）
    换了个公司。
    更愿意去独立思考问题了。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;    2018年可能是由于心态的问题，自己去过几次医院，慢慢就发现，在工作的同时，你的身体也很重要，你的身体是支撑你走得更远的基石。我们多少次晚睡，其实并不仅仅是因为工作，更多的是因为手机，刷刷视频，玩玩游戏，一不小心就到了12点，你下班并没有那么晚，可是你依然还是在凌晨入睡。之前的我就是这样，和同学玩玩吃鸡，就到12点多，然后又睡不着，第二天又没精神，恶性循环。慢慢的身体就跨了。我现在尽量每天10.30左右上床，在床头放一本书，把手机放在手够不着的地方，安安静静看会书，这样你的心也就更容易静下来，你也更容易入睡。你的生活如何选择，你的未来会怎样，是你来选择。我们还该多运动，我要在2019年的每一周至少有一次4-5公里的跑步，每天50个仰卧起坐。这些都很简单，4-5公里只要30分钟，不过是你玩一把游戏的时间，50个仰卧起坐也就几分钟。一个视频的时间。&lt;/p&gt;
&lt;p&gt;对于感情，异地恋是很辛苦，很多次闹着要分手，很多次苦恼这份感情，但还是坚持下来了，多一份包容，多一份理解。2019年，我希望我们能更好。&lt;/p&gt;
&lt;p&gt;对于家庭，父母在家，相见也只能是逢年过节，不过他们换上智能机后，他们爱打视频电话了，也挺好的，争取2019年有假就常回去，不要想着以后再对他们好，你想对他们好就趁现在吧，希望今年高铁早早能通车，这样来回也方便了。&lt;/p&gt;
&lt;p&gt;对于职业发展方向：运维开发，会运维也会开发，正如我本人一样（又帅又可爱），然后docker,k8s.&lt;/p&gt;
&lt;h2 id=&quot;年展望&quot;&gt;2019年展望&lt;/h2&gt;
&lt;p&gt;对2019年的展望。上面其实已经写了很多2019的计划，我得在这边列列，让自己目标清晰点。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;学习： python ，docker,k8s，阿里云ACP安全证书
工作：认真完成工作目标。让自己的工作对得起这个薪资。
薪资：XXXXX
感情：多一份包容，多一份理解，换位思考。
家庭：没事多打打电话，多聊聊，想对他们的好，就立刻行动吧，不要等以后。
运动：一周长跑一次，每天晚上都做点适量运动（仰卧起坐50个）
看书：2019年真要多看看书，目标：15本书，最近在看浪潮之巅。
睡觉：一定要11点入睡，你6点起来也没有问题，早睡早起。
旅游：一定要去旅游一次&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你坚持做一件事，而且坚持下去，一年之后，你会感叹自己惊人的毅力和能力。你自己都不会想到你自己能够这么厉害，能够做出这么多事。因为，每年看数据的时候，我都会感慨我自己知识的输出，我从来没有想到过，我能写这么多东西。&lt;/p&gt;
</description>
<pubDate>Thu, 17 Jan 2019 03:59:00 +0000</pubDate>
<dc:creator>自由早晚乱余生</dc:creator>
<og:description>2019年1月1号就已经着手写这篇文章了，但是断断续续，今天想着怎么也要把它完善掉。因为2019年已经过去两周半了，真快啊。 本文的内容主要分为两部分，一就是对2018年的回顾和总结，二就是对2019</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/operationhome/p/10281467.html</dc:identifier>
</item>
</channel>
</rss>