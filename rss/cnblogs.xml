<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>NiftyNet开源平台使用 - 控球强迫症</title>
<link>http://www.cnblogs.com/XDU-Lakers/p/10634774.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/XDU-Lakers/p/10634774.html</guid>
<description>&lt;p&gt;&lt;span&gt;NiftyNet是一款开源的卷积神经网络平台，专门针对医学图像处理分析,上一篇博客已经详细介绍了这个平台，接下来让我简单介绍一下目前我了解到的使用方法。更详细的使用方法、以及配置过程请查看NiftyNet官方文档：&lt;a href=&quot;https://niftynet.readthedocs.io/en/latest/config_spec.html&quot; target=&quot;_blank&quot;&gt;https://niftynet.readthedocs.io/en/latest/config_spec.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;目录：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.NiftyNet层结构介绍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.运行NiftyNet demo所需的指令格式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.配置文件部分参数介绍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）[Input data source]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）[System]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）[NETWORK]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（4）[Volume-normalisation]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（5）[TRAINING]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（6）[Validation during training]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（7）[Data augmentation during traning]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（8）[INFERENCE]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（9）[EVALUATION]&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt; &lt;strong&gt;1.NiftyNet层结构介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;NiftyNet有很强的易用性,数据层,应用层,网络层等是完全独立的,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）&lt;span&gt;数据层(NiftyNet/niftynet/io)&lt;/span&gt;,负责医学图像的读取,目前读取器有以下几种:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;nibabel 支持 .nii医学文件格式&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;simpleith 支持 .dcm和 .mhd格式的医疗图像&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;opencv 支持 .jpg等常见图像读取，读取后通道顺序为BGR&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;skimage 支持 .jpg等常见图像读取&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;pillow 支持 .jpg等常见图像读取，通道顺序为RGB&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;（2）&lt;span&gt;应用层(NiftyNet/niftynet/application)&lt;/span&gt;,目前支持的应用有以下几种：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;分割 (segmentation_application.py)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;分类 (classification_application.py）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Autoencoder&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Gan生成网络&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;回归&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;（3）&lt;span&gt;网络层(NiftyNet/niftynet/network)，&lt;span&gt;这个里面包含了已经实现的一些网络,resnet,dense_vnet,等,我们可以创建自己的网络结构后放在这个文件夹&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179840/201904/1179840-20190401140201397-651289991.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt; 2.运行NiftyNet demo所需的指令格式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;（1） 运行以下格式的命令可以使NiftyNet工作：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;# command to run from git-cloned NiftyNet source code folde&lt;br/&gt;&lt;/span&gt;python net_run.py [train|inference|evaluation] -c &amp;lt;path_to/config.ini&amp;gt; -a &amp;lt;application&amp;gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;# command to run using pip-installed NiftyNet
net_run &lt;span class=&quot;o&quot;&gt;[train&lt;span class=&quot;p&quot;&gt;|inference&lt;span class=&quot;p&quot;&gt;|evaluation&lt;span class=&quot;o&quot;&gt;] -c &amp;lt;path_to/config.ini&amp;gt; -a &amp;lt;application&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;train：&lt;/span&gt;train指令表明想要使用提供的数据更新已存在的网络模型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;inference：&lt;/span&gt;inference将加载已存在的网络模型根据提供的数据生成响应&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;-c：&lt;/span&gt;后跟配置文件路径(有关配置文件的内容见第3个知识点)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;-a：&lt;/span&gt;跟将要import的应用种类&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（2）NiftyNet的应用层已经自带了5种应用，那么如何运行这些应用呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;图像分割&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; command&lt;/span&gt;
net_run -a niftynet.application.segmentation_application.SegmentationApplication -&lt;span&gt;c ...
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; alias(别名):&lt;/span&gt;
net_segment -c ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;图像回归&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; command&lt;/span&gt;
net_run -a niftynet.application.regression_application.RegressionApplication -&lt;span&gt;c ...
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; alias(别名):&lt;/span&gt;
net_regress -c ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;自动编码器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; command&lt;/span&gt;
net_run -a niftynet.application.autoencoder_application.AutoencoderApplication -&lt;span&gt;c ...
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; alias(别名):&lt;/span&gt;
net_autoencoder -c ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;生成对抗网络&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; command&lt;/span&gt;
net_run -a niftynet.application.gan_application.GANApplication -&lt;span&gt;c ...
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; alias(别名):&lt;/span&gt;
net_gan -c ...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.配置文件部分参数介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（1）每个网络想要运行必须包含一个config.ini配置文件，用来设置训练/测试所用的全部参数，详细如下：&lt;/strong&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每个配置文件中必须包含三个sections:  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;* [SYSTEM]  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;* [NETWORK]  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;* [APPLICATION] (自己定义.如[SEGMENTATION],[GAN],等)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果train行为被需要，则`[TRAINING]`和`[Input data source]`需要被定义，其中`[Input data source]`这个section可以自定义命名&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果inference行为被需要，则需要定义`[INFERENCE]`和`[Input data source]`，其中`[Input data source]`这个section可以自定义命名&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以NiftyNet自带的分割脑部Demo为例子，其运行指令和配置文件如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;运行指令：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
net_segment -c C:/niftynet/extensions/highres3dnet_brain_parcellation/highres3dnet_config_eval.ini 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;配置文件如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre readability=&quot;11&quot;&gt;
&lt;span&gt;[Modality0]
path_to_search &lt;/span&gt;= data/OASIS/&lt;span&gt;
filename_contains &lt;/span&gt;=&lt;span&gt; nii
spatial_window_size &lt;/span&gt;= (96, 96, 96&lt;span&gt;)
interp_order &lt;/span&gt;=&lt;span&gt; 0
pixdim &lt;/span&gt;= (1.0, 1.0, 1.0&lt;span&gt;)
axcodes &lt;/span&gt;=&lt;span&gt; (R, A, S)

[SYSTEM]
cuda_devices &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
model_dir &lt;/span&gt;= models/&lt;span&gt;highres3dnet_brain_parcellation

[NETWORK]
name &lt;/span&gt;=&lt;span&gt; highres3dnet
batch_size &lt;/span&gt;= 1&lt;span&gt;
activation_function &lt;/span&gt;=&lt;span&gt; relu
volume_padding_size &lt;/span&gt;= 10&lt;p&gt;&lt;span&gt;[Volume-normalisation]
whitening &lt;/span&gt;=&lt;span&gt; True
normalisation &lt;/span&gt;=&lt;span&gt; True
normalise_foreground_only&lt;/span&gt;=&lt;span&gt;True
foreground_type &lt;/span&gt;=&lt;span&gt; mean_plus
histogram_ref_file &lt;/span&gt;=&lt;span&gt; databrain_std_hist_models_otsu.txt
cutoff &lt;/span&gt;= (0.001, 0.999&lt;span&gt;)

[INFERENCE]
border &lt;/span&gt;= 2&lt;span&gt;
inference_iter &lt;/span&gt;= 33000&lt;span&gt;
save_seg_dir &lt;/span&gt;= ./&lt;span&gt;parcellation_output
output_interp_order &lt;/span&gt;=&lt;span&gt; 0
spatial_window_size &lt;/span&gt;= (128, 128, 128&lt;span&gt;)

[SEGMENTATION]
image &lt;/span&gt;=&lt;span&gt; Modality0
output_prob &lt;/span&gt;=&lt;span&gt; False
num_classes &lt;/span&gt;= 160
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;（2）接下来让我们看看每个部分的参数的含义&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; [Input data source]&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* csv_file:&lt;/span&gt;  输入图像路径 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* path_to_search:&lt;/span&gt; 搜索图像的单个或多个文件，如果有多个用逗号分开 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* filename_contains:&lt;/span&gt;  匹配文件名的关键词  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* filename_not_contains:&lt;/span&gt;  排除文件名的关键词  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* filename_removefromid:&lt;/span&gt;  从文件命中抽取主题id的正则表达式，被匹配的模式将从文件名中移除并生成主题id。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* interp_order: &lt;/span&gt; 插值法，当设定采样方法为resize时，需要该参数对图片进行上采样或下采样，0表示最近插值，1表示双线性插值，3表示三次样条插值，默认为3  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* pixdim：&lt;/span&gt;  如果被指定，输入volum在被喂给网络之前将被重采样成voxel尺寸  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;* axcodes：&lt;/span&gt;  如果被指定，输入volum在被喂给网络之前将被调整为坐标码(axes code) &lt;/span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* spatial_window_size:&lt;/span&gt;  输入到网络中的图片尺寸，需指明三个维度，第一个和第二个分别表示图片的长和宽，第三个如果为1表示使用2d卷积，否则使用3d卷积  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* loader：&lt;/span&gt;  图片读取器，默认值None将尝试所有可得到的读取器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;[System]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* cuda_devices: &lt;/span&gt; 设置tensorflow的CUDA_VISIBLE_DEVICES变量  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* num_threads: &lt;/span&gt; 设置训练的预处理线程数  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* num_gpus: &lt;/span&gt; 设置训练的GPU的数量  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* model_dir: &lt;/span&gt; 训练模型的保存和加载路径  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* dataset_split_file: &lt;/span&gt; 文件分配科目到子集  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* event_handler:&lt;/span&gt;  事件处理器 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;[NETWORK]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* name: &lt;/span&gt; niftynet/network中的网络类或用户自定义的模块  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* activation_function: &lt;/span&gt; 网络的激活函数集合  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* batch_size: &lt;/span&gt; 设置每次迭代图像窗口的数量  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* smaller_final_batch_mode: &lt;/span&gt; 当batch_size的窗口采样器总数是不可见的时支持最后的batch使用不同的模式  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　可选类型有：  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　drop:  终止剩余的batch  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　pad: 用-1填补最后更小的batch  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　dynamic: 直接输出剩余的batch &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* reg_type:&lt;/span&gt;  可训练的正规化参数的类型  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* decay:&lt;/span&gt;  正规化的强度，用于预防过拟合  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* volume_padding_size:&lt;/span&gt;  图片的填补值  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* window_sampling: &lt;/span&gt; 进入网络的图片的采样方法  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　uniform:  输出的图片保持原本大小  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　weighted:  对成比例的voxel的采样到累积直方图的似然  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　balanced:  每个标签都被采样的可能性同样  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　resize:  将进入网络的图片首先resize到spatial_window_size &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* queue_length: &lt;/span&gt; NiftyNet会设置两个队列，一个负责从数据集中读取数据并扰乱，另一个从前一个队列中读取batch_size张图片输入网络，这个参数是指第一个队列的长度，最小值为batch_size \* 2.5  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* keep_prob:&lt;/span&gt; 如果失活被网络支持的话，每个元素存活的可能性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;[Volume-normalisation]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;* normalisation: &lt;/span&gt; 指示直方图标准化是否应该被应用于数据  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* whitening: &lt;/span&gt; 只是被加载的图片是否应该被增白，如果是，输入I，返回(I - mean(I)) / std(I)  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* histogram_ref_file: &lt;/span&gt; 标准化参数的文件  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* norm_file:&lt;/span&gt;  基于直方图的标准化的直方图landmark类型  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* cutoff:&lt;/span&gt;  下级和上级的基于直方图的标准化的截断  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* normalise_foreground_only: &lt;/span&gt; 指示一个mask是否需要被基于前景或多样前景进行计算，如设置True，所有的标准化步骤都将被应用于生成前景区  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* foreground_type:&lt;/span&gt;  生成一个前景mask，并且它只用于前景  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* mutimod_foreground_type:&lt;/span&gt;  结合前景mask和多模态的策略  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　可选类型：  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　or:  可得到的masks的合集  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　and:  可得到的mask的交集  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　all:  mask从每个模态独立计算 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;[TRAINING]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* optimiser:&lt;/span&gt;  计算图梯度优化器的类型，支持adagrade，adam，gradientdescent，momentum，rmsprop，nesterov  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* sample_per_volume：&lt;/span&gt;每张图的采样次数  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* lr:&lt;/span&gt;  学习率  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* loss_type:&lt;/span&gt;  loss函数的类型，支持segmentation,regression,autoencoder,gan  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* starting_iter:&lt;/span&gt;  设置重新训练模型的迭代次数  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* save_every_n:&lt;/span&gt;  保存当前模型的频率，0为不保存  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* tensorboard_every_n: &lt;/span&gt; 计算图中的元素和写到tensorboard上的频率  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* max_iter:&lt;/span&gt;  最大训练迭代次数 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;[Validation during training]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* validation_every_n: &lt;/span&gt; 每n次迭代运行一次验证迭代  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* validation_max_iter: &lt;/span&gt; 验证迭代运行的次数  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* exclude_fraction_for_validation: &lt;/span&gt; 用于验证的数据集的比例  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* exclude_fraction_for_inference: &lt;/span&gt; 用于推断的数据集的比例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;[Data augmentation during traning] &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* rotation_angle: &lt;/span&gt; 指示输入的图片旋转一个随机的旋转  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* scaling_percentage: &lt;/span&gt; 指示一个随机的缩放比例(-50,50)  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* random_flipping_axes:&lt;/span&gt;  可以翻转增强数据的轴&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;[INFERENCE]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* spatial_window_size: &lt;/span&gt; 指示输入窗口的大小(int array)  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* border:&lt;/span&gt;  一个用于修剪输出窗口大小的边界值(int tuple)，如设置(3,3,3)，将把一个(64\*64\*64)的窗口修剪为(58\*58\*58)  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* inference_iter: &lt;/span&gt; 指定已训练的模型用于推测(integer)  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* save_seg_dir: &lt;/span&gt; 预测目录的名字  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* output_postfix: &lt;/span&gt; 向每一个输出文件的名称后添加后缀  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* output_interp_order: &lt;/span&gt; 网络输出的推断顺序  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* dataset_to_infer: &lt;/span&gt; 字符串指定计算推理的数据集（‘training’, ‘validation’, ‘inference’） &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;[EVALUATION]  &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* save_csv_dir:&lt;/span&gt;  存储输出的csv文件的路径  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* evaluations: &lt;/span&gt; 要计算的评价指标列表以逗号分隔的字符串表示，每个应用程序可能的评估指标列表可用于回归评估、分段评估和分类评估  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;* evaluation_units: &lt;/span&gt; 描述在分割的情况下应该如何进行评估，foreground:  只对一个标签 ，&lt;/span&gt;&lt;span&gt;label：对每一个标签度量，&lt;/span&gt;&lt;span&gt;cc:  对每个连接组件度量 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;参考：&lt;a href=&quot;https://blog.csdn.net/PKnotnull/article/details/80378824#inference&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/PKnotnull/article/details/80378824#inference&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;以上就是本次有关Niftynet的相关知识学习，欢迎交流！&lt;/p&gt;

</description>
<pubDate>Mon, 01 Apr 2019 07:37:00 +0000</pubDate>
<dc:creator>控球强迫症</dc:creator>
<og:description>NiftyNet是一款开源的卷积神经网络平台，专门针对医学图像处理分析,上一篇博客已经详细介绍了这个平台，接下来让我简单介绍一下目前我了解到的使用方法。更详细的使用方法、以及配置过程请查看NiftyN</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/XDU-Lakers/p/10634774.html</dc:identifier>
</item>
<item>
<title>浅谈StringBuffer - 夏天里的Jasmine</title>
<link>http://www.cnblogs.com/qianjinyan/p/10636739.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qianjinyan/p/10636739.html</guid>
<description>&lt;p&gt;&lt;span&gt;StringBuffer，由名字可以看出，是一个String的缓冲区，也就是说一个类似于String的字符串缓冲区，和String不同的是，它可以被修改，而且是线程安全的。StringBuffer在任意时刻都有一个特定的字符串序列，不过这个序列和它的长度可以通过一些函数调用进行修改。它的结构层次如下图：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1064427/201904/1064427-20190401151327834-1948864183.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;StringBuffer是线程安全的，因此如果有几个线程同时操作StringBuffer，对它来说也只是一个操作序列，所有操作串行发生。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每一个StringBuffer都有一个容量，如果内容的大小不超过容量，StringBuffer就不会分配更大容量的缓冲区；如果需要更大的容量，StringBuffer会自动增加容量。和StringBuffer类似的有StringBuilder，两者之间的操作相同，不过StringBuilder不是线程安全的。虽然如此，由于StringBuilder没有同步，所以它的速度更快一些。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1064427/201904/1064427-20190401151616116-577814969.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如上截图，StringBuffer是一个final 类【不能被继承，没有子类】，且继承了抽象类ABstracrStringBuilder并且实现了java io接口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意看一些类文件上面的标注，since jdk1.0 就有StringBuffer， 而在网上要注解，在jdk5，该类得到一个补充，也就是常用来比较的StringBuilder，单个线程，速度更快，不执行同步，建议优先使用StringBuilder 巴拉巴拉&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 01 Apr 2019 07:36:00 +0000</pubDate>
<dc:creator>夏天里的Jasmine</dc:creator>
<og:description>StringBuffer，由名字可以看出，是一个String的缓冲区，也就是说一个类似于String的字符串缓冲区，和String不同的是，它可以被修改，而且是线程安全的。StringBuffer在任</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qianjinyan/p/10636739.html</dc:identifier>
</item>
<item>
<title>迁移桌面程序到MS Store（7）——APPX + Service - 楼上那个蜀黍</title>
<link>http://www.cnblogs.com/manupstairs/p/10636732.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/manupstairs/p/10636732.html</guid>
<description>&lt;p&gt;本篇我们以一个Sample工程，来说明如何把一个常见结构的desktop application，转制成APPX并在MS Store提供下载。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/362529/201904/362529-20190401152649279-1425973433.png&quot; alt=&quot;&quot; width=&quot;394&quot; height=&quot;303&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之前的篇章中，我们已经介绍了一些内容，包括如何通过Visual Studio创建Packaging工程， 如何将Class Libraries转换到.NET Standard版本。至此，UI界面，以及部分DLL的迁移问题得到解决。但有时候我们的desktop application还包括一个本地的Background Service。那么目前微软推荐的策略，依然是通过创建一个WCF服务，然后host在Windows Service上，来提供给前端的APPX访问。&lt;/p&gt;
&lt;p&gt;可能有同学要问，为什么我们需要Windows Service。这是因为在前台程序中，一般不会要求admin权限，这在企业级软件中是较为常见的需求，用PowerPiont的普通员工，通常被认为即没有power也没有point，更不需要admin权限……（悲剧啊T_T）但我们可以把需要admin权限，访问硬件等相关操作，放到Service中，由IT统一部署到机器上，避免了没有admin权限无法正常运行程序的问题。&lt;/p&gt;
&lt;p&gt;在接下来的Sample中，我们试图通过代码启动一个Windows服务&quot;aspnet_state&quot;。这个工程非常的简单，我们要做的仅仅是在UWP project中调用一下Windonws Service上运行的WCF服务。工程结构如下图。因为工程主要想说明UI程序对WCF服务的引用，所以请不要在意使用UI程序是UWP还是WPF。实际使用中，对于Desktop Bridge的程序，非WCF的其他Background Service也是可以的，比如Named Pipes等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/362529/201904/362529-20190401153029611-1153322609.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们的UI部分非常的简单，仅是在MainPage.cs中调用WCF服务中提供的方法，这里我们可以看到传递了一个string类型的参数作为要启动的service name。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainPage : Page
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; serviceName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aspnet_state&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; LocalServiceClient client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LocalServiceClient();

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MainPage()
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.InitializeComponent();
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Button_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, RoutedEventArgs e)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; status = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; client.StartServiceAsync(serviceName);
            textBlockStatus.Text &lt;/span&gt;=&lt;span&gt; status.ToString();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何编写WCF服务这里就不赘述了，有兴趣的同学可以去MSDN上学习：&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/wcf/index&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/dotnet/framework/wcf/index&lt;/a&gt;&lt;br/&gt;同样直接给出如何将WCF服务host在Windows Service上的链接：&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/how-to-host-a-wcf-service-in-a-managed-windows-service&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/how-to-host-a-wcf-service-in-a-managed-windows-service&lt;/a&gt;&lt;br/&gt;在WCF service的代码里，我们通过ServiceController启动另一个系统的Windows Service，需要注意的是，我们测试用的&quot;aspnet_state&quot;默认是未开启的，而启动Windows Service要求程序具有admin权限。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/362529/201904/362529-20190401153224780-41812892.png&quot; alt=&quot;&quot; width=&quot;789&quot; height=&quot;450&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LocalServiceWrapper : ILocalService
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ServiceControllerStatus StartService(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name)
        {
            ServiceController controller &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServiceController(name);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (controller.Status ==&lt;span&gt; ServiceControllerStatus.Stopped)
            { 
                controller.Start();
                controller.WaitForStatus(ServiceControllerStatus.Running, TimeSpan.FromSeconds(&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;));
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; controller.Status;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你也可以试试Bluetooth Support Service，Service name是&quot;bthserv&quot;。通过程序开启蓝牙服务似乎更合理，但反复测试disable/enable蓝牙让我很烦躁。所以最终我换成了&quot;aspnet_state&quot;。&lt;br/&gt;把程序拆分成UI和WCF Service两部分的目的，是将需要admin权限等不符合MS Store审核要求的代码，从APPX中移出，已servcie的形式来调用。最终的结构图可以分为两种。&lt;br/&gt;第一种是采用Desktop Bridge的形式，APPX部分可以继续包含native C++ libraries，也可以调用任何形式的background service。唯一的问题是，在提交APPX到商店审核的时候，需要申请相应权限。企业级的软件通过审核的可能性很大，个人作品就不清楚了。审核通过后APPX获得微软的签名。此时用户可从商店下载APPX，然后手动安装Service部分。也可以由公司IT以Sideload的方式统一安装APPX+Service。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/362529/201904/362529-20190401153343193-441650060.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二种更为纯粹，由UWP+.NET Standard+WCF组成，相应也需要更多的改动，而Native C++ Libraries的部分则需要下沉到Service中。这种的好处在于迁移的更为彻底，对未来有着更好的适应。当然哪天某软翻脸不认账，抛弃UWP又回头去搞.NET Core的WPF的话，你就当我没说过……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/362529/201904/362529-20190401153418772-1578277168.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本篇讨论了如何将现有的desktop application，在维持已有架构的前提下，转制成APPX放到MS Store提供下载。&lt;br/&gt;当然你们会觉得多出来的Service部分简直不能忍。后续我会进一步介绍如何处理Service部分，不至于让强迫症患者在评论里骂我……&lt;br/&gt;本篇Sample工程的GitHub链接：&lt;br/&gt;&lt;a href=&quot;https://github.com/manupstairs/UWPWithWCFSample&quot; target=&quot;_blank&quot;&gt;https://github.com/manupstairs/UWPWithWCFSample&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 01 Apr 2019 07:35:00 +0000</pubDate>
<dc:creator>楼上那个蜀黍</dc:creator>
<og:description>本篇我们以一个Sample工程，来说明如何把一个常见结构的desktop application，转制成APPX并在MS Store提供下载。 之前的篇章中，我们已经介绍了一些内容，包括如何通过Vis</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/manupstairs/p/10636732.html</dc:identifier>
</item>
<item>
<title>循环神经网络RNN原理及公式推导 - tjpxiaoming</title>
<link>http://www.cnblogs.com/imzgmc/p/10632636.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imzgmc/p/10632636.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、循环神经网络简介&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　循环神经网络，英文全称:Recurrent Neural Network，或简单记为RNN。需要注意的是，递归神经网络(Recursive Neural Network)的简写也是RNN，但通常RNN指循环神经网络。循环神经网络是一类用于处理序列数据的神经网络。它与其他神经网络的不同是，RNN可以更好的去处理序列的信息，即认准了前后的输入之间存在关系。在NLP中，去理解一整句话，孤立的理解组成这句话的词显然是不够的，我们需要整体的处理由这些词连接起来的整个序列。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如：(1) 我饿了，我要去食堂___。(2)  我饭卡丢了，我要去食堂___。很显然，第一句话是想表明去食堂就餐，而第二句则很有可能因为刚吃过饭，发现饭卡不见了，去食堂寻找饭卡。而在此之前，我们常用的语言模型是N-Gram，无论何种语境，可能去食堂大概率匹配的是“吃饭”而不在乎之前的信息。RNN就解决了N-Gram的缺陷，它在理论上可以往前(后)看任意多个词。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　此文是我在学习RNN中所做的笔记，参考资料在文末提及。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、循环神经网络分类&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;span&gt;    a.简单的MLP神经网络&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1447831/201903/1447831-20190331183346645-485030898.png&quot; alt=&quot;&quot; width=&quot;190&quot; height=&quot;337&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　简单的MLP三层网络模型，x、o为向量，分别表示输入层、输出层的值；U、V为矩阵，U是输入层到隐藏层的权重矩阵，V是隐藏层到输出层的权重矩阵。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　 b.循环神经网络&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1447831/201903/1447831-20190331183805530-88182048.png&quot; alt=&quot;&quot; width=&quot;230&quot; height=&quot;338&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　与简单的MLP神经网络不容的是，循环神经网络的隐藏层的值s不仅取决于当前的这次输入x，还取决于上一次隐藏层的值s。权重就在W就是隐藏层上一次的值作为这一次输入的输入的权重。将上图展开:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1447831/201903/1447831-20190331185002670-832371645.png&quot; alt=&quot;&quot; width=&quot;923&quot; height=&quot;354&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　由上图可知以下公式，其中 &lt;em&gt;V&lt;/em&gt; 是输出层权重矩阵，&lt;em&gt;g&lt;/em&gt; 是激活函数；&lt;em&gt;U&lt;/em&gt; 是输入x的权重矩阵，&lt;em&gt;W&lt;/em&gt; 是上一次的值 &lt;em&gt;s&lt;/em&gt;&lt;sub&gt;&lt;em&gt;t-1&lt;/em&gt;&lt;/sub&gt;&lt;em&gt; &lt;/em&gt;作为这一次的输入的权重矩阵&lt;em&gt;，f&lt;/em&gt; 是激活函数&lt;em&gt;。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;         &lt;img src=&quot;https://img2018.cnblogs.com/blog/1447831/201903/1447831-20190331185102422-1744552323.png&quot; alt=&quot;&quot; width=&quot;221&quot; height=&quot;108&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　反复带入，即可得到：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1447831/201903/1447831-20190331185500550-197199723.png&quot; alt=&quot;&quot; width=&quot;469&quot; height=&quot;152&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　可见，循环神经网络的输出值 &lt;em&gt;o&lt;sub&gt;t&lt;/sub&gt;&lt;/em&gt;  受之前的输出值 &lt;em&gt;x&lt;sub&gt;t 、&lt;/sub&gt;x&lt;sub&gt;t-1、&lt;/sub&gt;x&lt;sub&gt;t-2&lt;/sub&gt;&lt;/em&gt; 所影响。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　c. 双向循环神经网络&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1447831/201903/1447831-20190331185806194-1911115696.png&quot; alt=&quot;&quot; width=&quot;682&quot; height=&quot;241&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　双向循环神经网络的计算方法:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1447831/201903/1447831-20190331185929422-239786811.png&quot; alt=&quot;&quot; width=&quot;320&quot; height=&quot;202&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　从上面三个公式可以看出: 正向计算时，隐藏层的值与 &lt;em&gt;s&lt;/em&gt;&lt;sub&gt;&lt;em&gt;t  和  &lt;/em&gt;&lt;/sub&gt;&lt;em&gt;s&lt;/em&gt;&lt;sub&gt;&lt;em&gt;t-1&lt;/em&gt;&lt;/sub&gt;&lt;em&gt;有关，而反向计算时，隐藏层的值与&lt;/em&gt;&lt;sub&gt;&lt;em&gt; &lt;/em&gt;&lt;/sub&gt;&lt;em&gt;  &lt;/em&gt;s'&lt;/span&gt;&lt;sub&gt;&lt;em&gt;t &lt;/em&gt;&lt;/sub&gt; 和 &lt;em&gt;s'&lt;/em&gt;&lt;sub&gt;&lt;em&gt;t+1 &lt;/em&gt;&lt;/sub&gt;有关；最终的输出取决于正向与反向计算的加和&lt;em&gt;&lt;sub&gt;&lt;em&gt;。&lt;/em&gt;&lt;/sub&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;　　&lt;/em&gt;&lt;/em&gt;d、深度循环神经网络&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1447831/201903/1447831-20190331193239577-1626817739.png&quot; alt=&quot;&quot; width=&quot;749&quot; height=&quot;423&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　此前介绍的循环神经网络只有一个输入层、一个循环层和一个输出层。与全连接神经网络以及卷积神经网络一样，可以把它推广到任意多个隐藏层的情况，得到深层循环神经网络。深度循环神经网络包含多个隐藏层(上图为了表示清楚，只列举了2层)，并且也继承了双向循环神经网络的特点。由之前的公式类推，我们可以得到深度循环神经网络的计算方式：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1447831/201903/1447831-20190331190641718-1725062349.png&quot; alt=&quot;&quot; width=&quot;408&quot; height=&quot;424&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　深层神经网络有3个方案：第一种叫做 Deep Input-to-Hidden Function，它在循环层之前加入多个普通的全连接层，将输入向量进行多层映射之后再送入循环层进行处理。第二种方案是 Deep Hidden-to-Hidden Transition，它使用多个循环层，这和前馈神经网络类似，唯一不同的是计算隐含层输出的时候需要利用本隐含层上一时刻的值。第三种方案是 Deep Hidden-to-Output Function，它在循环层到输出层之间加入多个全连接层，这与第一种情况类似。上面公式展示的应为第二种情况。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　由于循环层一般用 tanh 作为激活函数，层次过多之后会导致梯度消失问题。后面会提及。　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、网络的训练及BPTT&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;循环神经网络的输入是序列数据，每个训练样本是一个时间序列，包含多个相同维度的向量。网络的参数如何通过训练确定？这里就要使用解决循环神经网络训练问题的 Back Propagation Through Time 算法，简称BPTT。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　循环神经网络的每个训练样本是一个时间序列，同一个训练样本前后时刻的输入值之间有关联，每个样本的序列长度可能不相同。训练时先对这个序列中的每个时刻的输入值进行正向传播，再通过反向传播计算出参数的梯度值并更新参数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　它包含三个步骤：（1）正向计算每个神经元的输出值；（2）反向计算每个神经元的误差项 &lt;em&gt;δ&lt;sub&gt;j&lt;/sub&gt;&lt;/em&gt; ，它是误差函数 &lt;em&gt;E&lt;/em&gt; 对神经元 j 的加权输入 &lt;em&gt;net&lt;sub&gt;j&lt;/sub&gt;&lt;/em&gt; 的偏导数；（3）计算每个权重的梯度；（4）用随机梯度下降算法更新权重。具体的算法推导我会在&lt;a href=&quot;https://i.cnblogs.com/EditPosts.aspx?postid=10635593&quot; target=&quot;_blank&quot;&gt;之后的笔记&lt;/a&gt;整理中总结。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、梯度爆炸、梯度消失&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　循环神经网络在进行反向传播时也面临梯度消失或者梯度爆炸问题，这种问题表现在时间轴上。如果输入序列的长度很长，人们很难进行有效的参数更新。通常来说梯度爆炸更容易处理一些。因为梯度爆炸时，我们的程序会收到NaN的错误。我们也可以设置一个梯度阈值，当梯度超过这个阈值的时候可以直接截取。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　梯度消失更难检测，而且也更难处理一些。总的来说，我们有三种方法应对梯度消失问题：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（1）合理的初始化权重值。初始化权重，使每个神经元尽可能不要取极大或极小值，以多开梯度消失的区域。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（2） 使用 ReLu 代替 sigmoid 和 tanh 作为激活函数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（3） 使用其他结构的RNNs，比如长短时记忆网络（LTSM）和 门控循环单元 （GRU），这是最流行的做法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、练手项目&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　可以参考github上比较出名的&lt;a href=&quot;https://github.com/hzy46/Char-RNN-TensorFlow/tree/28c8c67694df328a573ad4210a78c71ca5cade01&quot; target=&quot;_blank&quot;&gt;char_RNN&lt;/a&gt;的代码来提高自己的兴趣。该项目就是通过训练语料来自己写诗、歌、文。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下图是我的训练结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（1） 一首诗，这首通过RNN训练写出的诗还是不错的。“秋”与“春”是对应的，描绘的是诗人在秋日，欣赏的山中风景。不禁感叹，自己的青春已去，自己也已经白首，吟唱着这首诗（编不下去了…）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1447831/201903/1447831-20190331193100082-984627434.png&quot; alt=&quot;&quot; width=&quot;224&quot; height=&quot;44&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（2） 通过自己找的《三体》全集，来训练出的小说片段。可以看到，只能模仿句式，不能有准确表达，所以逻辑不通的，但是形式是很像刘慈欣的写法了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1447831/201903/1447831-20190331193330842-1429224000.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Mon, 01 Apr 2019 07:28:00 +0000</pubDate>
<dc:creator>tjpxiaoming</dc:creator>
<og:description>一、循环神经网络简介 循环神经网络，英文全称:Recurrent Neural Network，或简单记为RNN。需要注意的是，递归神经网络(Recursive Neural Network)的简写也</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/imzgmc/p/10632636.html</dc:identifier>
</item>
<item>
<title>初识maven - Eric.Chen</title>
<link>http://www.cnblogs.com/lc-chenlong/p/10636462.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lc-chenlong/p/10636462.html</guid>
<description>&lt;hr/&gt;&lt;p&gt;Maven是一个项目管理和综合工具。Maven提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，Maven使用标准的目录结构和默认构建生命周期。 我们经常用的就是jar包的管理。&lt;/p&gt;


&lt;hr/&gt;&lt;p&gt;POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。&lt;/p&gt;
&lt;p&gt;在创建 POM 之前，我们首先需要描述项目组 (groupId), 项目的唯一ID。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns &lt;/span&gt;&lt;span&gt;= &quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi &lt;/span&gt;&lt;span&gt;= &quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation &lt;/span&gt;&lt;span&gt;= &quot;http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 模型版本 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.companyname.project-group&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;project&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 版本号 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th width=&quot;26&quot;&gt;节点&lt;/th&gt;
&lt;th width=&quot;464.3333333333333&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;6.5&quot;&gt;&lt;tr&gt;&lt;td width=&quot;60.33333333333333&quot;&gt;project&lt;/td&gt;
&lt;td width=&quot;462.3333333333333&quot;&gt;工程的根标签。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;26&quot;&gt;modelVersion&lt;/td&gt;
&lt;td width=&quot;463.3333333333333&quot;&gt;模型版本需要设置为 4.0。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;26&quot;&gt;groupId&lt;/td&gt;
&lt;td width=&quot;463.3333333333333&quot;&gt;这是工程组的标识。它在一个组织或者项目中通常是唯一的。例如，一个银行组织 com.companyname.project-group 拥有所有的和银行相关的项目。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;26&quot;&gt;artifactId&lt;/td&gt;
&lt;td width=&quot;463.3333333333333&quot;&gt;这是工程的标识。它通常是工程的名称。例如，消费者银行。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td width=&quot;26&quot;&gt;version&lt;/td&gt;
&lt;td width=&quot;462.3333333333333&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;com&lt;span&gt;.&lt;span&gt;company&lt;span&gt;.&lt;span&gt;bank&lt;span&gt;:&lt;span&gt;consumer&lt;span&gt;-&lt;span&gt;banking&lt;span&gt;:&lt;span&gt;1.0&lt;span&gt;&lt;br/&gt;com&lt;span&gt;.&lt;span&gt;company&lt;span&gt;.&lt;span&gt;bank&lt;span&gt;:&lt;span&gt;consumer&lt;span&gt;-&lt;span&gt;banking&lt;span&gt;:&lt;span&gt;1.1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;packaging&lt;/td&gt;
&lt;td rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;项目打包的类型，可以使jar、war、rar、ear、pom，默认是jar&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;dependencies和dependency&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　前者包含后者。前面说了，Maven的一个重要作用就是统一管理jar包，为了一个项目可以build或运行，项目中不可避免的，会依赖很多其他的jar包，在Maven中，这些依赖就被称为dependency。&lt;/p&gt;
&lt;p&gt;　　说到这里，就有一个本地仓库和远程仓库的概念了。本地仓库和远程仓库是这样的，Maven工程首先会从本地仓库中获取jar包，当无法获取指定jar包时，本地仓库会从远程仓库（中央仓库）中下载jar包，并放入本地仓库以备将来使用。本次仓库路径：c:\用户\{找到计算机用户}\.m2。远程仓库默认使用的是http://repo2.maven.org/maven2/，但是我们也可以修改。&lt;/p&gt;

&lt;p&gt;　　举个例子，比方说我的项目中用到了MyBatis，那么pom可以添加这段配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.2.5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;点击ctrl+s保存，Eclipse就会自动到远程仓库里下载mybatis的jar包到本地仓库，通过groupId、artifactId、version唯一标识一个Maven项目，有了这三个元素，我们就可以去远程仓库下载，如果本地仓库里已经有该jar包了，则不会到远程仓库下载。&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;properties是用来定义一些配置属性的，例如project.build.sourceEncoding（项目构建源码编码方式），可以设置为UTF-8，防止中文乱码，也可定义相关构建版本号，便于日后统一升级。通过${}可以在dependency引用该模块定义的属性。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mybatis&lt;/span&gt;&lt;span&gt;.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.2.5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mybatis.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${mybatis.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如上代码，我们在properties中定义了一个mybatis.version的属性，然后再下面的version里面就可以引用该属性了。&lt;/p&gt;

&lt;hr/&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Dcm4Che&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Dcm4Che&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://www.dcm4che.org/maven2/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;releases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;releases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;
&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;标签的含义如下：&lt;/p&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt; maven仓库的id（自定义）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt; maven仓库的名称（自定义）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;url&lt;/code&gt; maven仓库的url（可以替换为阿里的镜像仓库：http://maven.aliyun.com/nexus/content/groups/public/，可以是自己搭建的maven私服）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;releases&lt;/code&gt; maven仓库中版本为release的包&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;snapshots&lt;/code&gt; maven仓库中版本为snapshots的包&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;&lt;p&gt;一个典型的 Maven 构建（build）生命周期是由以下几个阶段的序列组成的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/340919/201904/340919-20190401145618513-1441626935.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;阶段&lt;/th&gt;
&lt;th&gt;处理&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;验证 validate&lt;/td&gt;
&lt;td&gt;验证项目&lt;/td&gt;
&lt;td&gt;验证项目是否正确且所有必须信息是可用的&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;编译 compile&lt;/td&gt;
&lt;td&gt;执行编译&lt;/td&gt;
&lt;td&gt;源代码编译在此阶段完成&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;测试 Test&lt;/td&gt;
&lt;td&gt;测试&lt;/td&gt;
&lt;td&gt;使用适当的单元测试框架（例如JUnit）运行测试。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;包装 package&lt;/td&gt;
&lt;td&gt;打包&lt;/td&gt;
&lt;td&gt;创建JAR/WAR包如在 pom.xml 中定义提及的包&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;检查 verify&lt;/td&gt;
&lt;td&gt;检查&lt;/td&gt;
&lt;td&gt;对集成测试的结果进行检查，以保证质量达标&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;安装 install&lt;/td&gt;
&lt;td&gt;安装&lt;/td&gt;
&lt;td&gt;安装打包的项目到本地仓库，以供其他项目使用&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;部署 deploy&lt;/td&gt;
&lt;td&gt;部署&lt;/td&gt;
&lt;td&gt;拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;常用的maven命令如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 编译源代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
mvn compile
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2. 运行测试:&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;3. 打包：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
mvn package
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4.打包到本地仓库(.m2路径下)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
mvn install
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;5.&lt;strong&gt;清除产生的项目(清楚target目录文件)&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;6.上传到私服&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
mvn deploy
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;7.组合命令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mvn clean install --清楚打包

mvn -Dtest package 跳过测试 只打包&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;文章参考&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;http://www.runoob.com/maven/maven-tutorial.html&lt;/p&gt;
&lt;p&gt;https://www.yiibai.com/maven&lt;/p&gt;
&lt;p&gt;https://www.cnblogs.com/hongwz/p/5456578.html&lt;/p&gt;

</description>
<pubDate>Mon, 01 Apr 2019 07:01:00 +0000</pubDate>
<dc:creator>Eric.Chen</dc:creator>
<og:description>Maven是什么？ Maven是一个项目管理和综合工具。Maven提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，Maven使用标准的目录结构和默认构建生命周期。 我</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lc-chenlong/p/10636462.html</dc:identifier>
</item>
<item>
<title>关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案 - Tom-shushu</title>
<link>http://www.cnblogs.com/Tom-shushu/p/10636382.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Tom-shushu/p/10636382.html</guid>
<description>&lt;h2&gt;&lt;strong&gt;1.&lt;/strong&gt;我们使用缓存时的业务流程大概为：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1398504/201904/1398504-20190401114015455-1702133502.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当我们查询一条数据时，先去查询缓存，如果缓存有就直接返回，如果没有就去查询数据库，然后返回。这种情况下就可能出现下面的一些现象。&lt;/p&gt;
&lt;h2&gt;2.缓存穿透&lt;/h2&gt;
&lt;h3&gt;2.1什么是缓存穿透&lt;/h3&gt;
&lt;p&gt;缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;2.2缓存穿透带来的问题&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;试想一下，如果有黑客对你的系统进行攻击，拿一个不存在的id去查询数据，会产生大量的请求到你的数据库去查询，可能会导致你的数据库由于压力过大而宕掉。&lt;/p&gt;
&lt;h3&gt;2.3解决的办法&lt;/h3&gt;
&lt;h4&gt;2.3.1缓存空值&lt;/h4&gt;
&lt;p&gt;之所以会发生穿透，就是因为缓存中没有储存这些空数据的key。从而导致每次查询都到数据库去了。&lt;/p&gt;
&lt;p&gt;那么我们就可以为这些key对应的值设置为null丢到缓存里面去。后面出现查询这个key的请求的时候直接返回null。&lt;/p&gt;
&lt;p&gt;这样就不用再到数据库中去走一圈了，但是别忘了设置过期时间。&lt;/p&gt;
&lt;p&gt;缓存空对象会有两个问题：&lt;/p&gt;
&lt;p&gt; 第一，空值做了缓存，意味着缓存层中存了更多的键，需要更多的内存空间 ( 如果是攻击，问题更严重 )，比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。&lt;/p&gt;
&lt;p&gt; 第二，缓存层和存储层的数据会有一段时间窗口的不一致，可能会对业务有一定影响。例如过期时间设置为 5分钟，如果此时存储层添加了这个数据，那此段时间就会出现缓存层和存储层数据的不一致，此时可以利用消息系统或者其他方式清除掉缓存层中的空对象。&lt;/p&gt;
&lt;h4&gt;2.3.2用布隆过滤器BloomFilter&lt;/h4&gt;
&lt;p&gt;BloomFilter类似于一个hbase set用来判断某个元素(key)是否存在于某个集合中。&lt;/p&gt;
&lt;p&gt;这种方式在大数据场景应用比较多，比如Hbase中使用它去判断数据是否在磁盘上。还有在爬虫场景判断url是否已经被爬取过。&lt;/p&gt;
&lt;p&gt;这种方案可以加在第一种方案中，在缓存之前加一层BloomFilter，在查询的时候先去BloomFilter去查询key是否存在，如果不存在就直接返回，存在再去查缓存--------&amp;gt;差数据库。&lt;/p&gt;
&lt;p&gt;流程图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1398504/201904/1398504-20190401122341182-845957975.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.4如何选择&lt;/h3&gt;
&lt;p&gt;针对于一些恶意攻击，攻击带来大量key是不存在的，那么我们采用第一种方案就会缓存大量不存在的数据。此时我们采用第一种方案就不合适了，我们完全可以先使用第二种方案过滤掉这些key。&lt;/p&gt;
&lt;p&gt;针对这些key异常多，请求多，重复率比较低的数据，我们就没有必要进行缓存，使用第二种方案直接过滤掉。&lt;/p&gt;
&lt;p&gt;而对于空数据的key有限的，重复率比较高的，我们则可以采用第一种方式进行缓存。&lt;/p&gt;
&lt;h2&gt;3.缓存击穿&lt;/h2&gt;
&lt;h3&gt;3.1什么是缓存击穿&lt;/h3&gt;
&lt;p&gt;缓存击穿是我们使用缓存可能遇到的第二个问题。&lt;/p&gt;
&lt;p&gt;在平时高并发的系统中，大量的请求同时查询一个key时，此时这个key正好失效了，就会导致大量的请求都打到数据库上面去，这种现象我们称为&lt;strong&gt;缓存击穿&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;3.2会带来什么问题&lt;/h3&gt;
&lt;p&gt;会造成某一时刻数据请求量过大，压力剧增。&lt;/p&gt;
&lt;h3&gt;3.3如何解决&lt;/h3&gt;
&lt;p&gt;上面现象是多个线程同时去查询数据库的这一条数据，那么我们可以在第一个查询数据的请求上使用一个互斥锁来锁住它。（如果是单机，可以用synchronized或者lock来处理，如果是分布式环境可以用分布式锁就可以了（分布式锁，可以用memcache的add, redis的setnx, zookeeper的添加节点操作））&lt;/p&gt;
&lt;p&gt;其他线程走到这一步拿不到锁就等着，等待第一个线程查询到了数据，然后做缓存。后面的线程进来发现已经有了缓存，就直接走缓存。&lt;/p&gt;
&lt;h2&gt;4.缓存雪崩&lt;/h2&gt;
&lt;h3&gt; 4.1什么是缓存雪崩&lt;/h3&gt;
&lt;p&gt;缓存雪崩的情况是指：当某一时刻发生大规模的缓存失效的情况，比如你的缓存服务宕机了，会有大量的请求进来直接打到数据库上面，结果就是数据库挂掉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1398504/201904/1398504-20190401144259513-1937500958.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;4.2解决办法&lt;/h3&gt;
&lt;h4&gt;4.2.1雪崩前：使用集群缓存，保证缓存服务的高可用&lt;/h4&gt;
&lt;p&gt;这种方案就是在发生雪崩前对缓存集群，实现高可用，如果是使用Redis，可以使用（主从  +  哨兵），Redis Cluster来避免Redis全盘崩溃的情况。&lt;/p&gt;
&lt;h4&gt;4.2.2雪崩中：ehcache本地缓存  +  Hystrix限流  &amp;amp;  降级，避免MySQl被打死&lt;/h4&gt;
&lt;p&gt;使用ehcache本地缓存的目的也是考虑Redis Cluster完全不可用的时候，ehcache本地缓存还能够支撑一阵。&lt;/p&gt;
&lt;p&gt;使用Hystrix进行限流 &amp;amp; 降级，比如一秒来了5000个请求，我们可以设置假设一秒只能有2000个请求可以通过这个组件，那么其他剩余的3000请求就会走限流逻辑。&lt;/p&gt;
&lt;p&gt;然后去调用我们自己开发的降级组件（降级）,比如设置的一些默认值等等之类的。以此来保护最后的MySQl不会被大量的请求打死。&lt;/p&gt;
&lt;h4&gt;4.2.3雪崩后：开启Redis持久化，尽快恢复缓存集群。&lt;/h4&gt;
&lt;h2&gt;5.解决热点数据集中失效问题&lt;/h2&gt;
&lt;p&gt;我们在设置缓存的时候，一般会给缓存设置一个失效的时间，过了这个时间，缓存就失效了。&lt;/p&gt;
&lt;p&gt;对于一些热点数据来说，当缓存失效后会存在大量的请求到数据库上来，从而可能导致数据库崩溃的情况。&lt;/p&gt;
&lt;h3&gt;5.1解决办法&lt;/h3&gt;
&lt;h4&gt;5.1.1设置不同的失效时间&lt;/h4&gt;
&lt;p&gt;为了避免这些热点数据集体失效，那么我们在设置缓存国企时间的时侯，让他们失效的时间错开。比如我们可以在原有的失效时间基础上增加一个随机值。&lt;/p&gt;
&lt;h4&gt;5..1.2互斥锁&lt;/h4&gt;
&lt;p&gt;结合上面的击穿情况，在第一个请求去查询数据库的时候对它加一个互斥锁，其余的查询请求都会被阻塞住，直到锁被释放，从而保护数据库。&lt;/p&gt;
&lt;p&gt;但是也是由于它会阻塞其他线程，此时系统的吞吐量会下降。需要结合实际业务去考虑。&lt;/p&gt;
&lt;h2&gt; 参考：&lt;/h2&gt;
&lt;p&gt;https://www.cnblogs.com/hadley/p/9535313.html&lt;/p&gt;
&lt;p&gt;http://www.imooc.com/article/283986&lt;/p&gt;





&lt;h3&gt; &lt;/h3&gt;
&lt;div readability=&quot;17&quot;&gt;
&lt;pre&gt;
当我们查询一条数据时，先去查询缓存，如果缓存有就直接返回，如果没有就去查询数据库，然后返回。这种情况下就可能会出现一些现象。
&lt;/pre&gt;
&lt;br/&gt;作者：石杉的架构笔记&lt;br/&gt;链接：http://www.imooc.com/article/283986%E9%BB%84%E6%9C%88%E5%88%9D%202019/3/29%2017:44:54%E6%B7%A1%20/%20%E6%9C%AB%20%202019/4/1%209:34:59%E6%B7%A1%20/%20%E6%9C%AB%20%202019/4/1%209:35:10%E5%B0%8F%E4%BC%99%E4%BC%B4%E4%BB%AC%20%E8%BF%99%E4%B8%AA%E6%80%8E%E4%B9%88%E4%B8%8B%E8%BD%BD%E4%B8%8D%E4%BA%86%E4%BA%86%EF%BC%9F%E5%BA%9E%202019/4/1%2011:12:57%E7%BE%A4%E6%96%87%E4%BB%B6%E4%B8%8D%E8%83%BD%E4%B8%8B%E8%BD%BD%E5%90%97%E6%B7%A1%20/%20%E6%9C%AB%20%202019/4/1%2011:13:40%E5%8F%AF%E4%BB%A5%20%E4%B8%8B%E8%BD%BD%E6%B7%A1%20/%20%E6%9C%AB%20%202019/4/1%2011:13:46%E4%BD%86%E6%98%AF%E9%87%8C%E9%9D%A2%E7%9A%84%20%E5%86%85%E5%AE%B9%20%E8%BF%87%E6%9C%9F%E4%BA%86%E5%BA%9E%202019/4/1%2011:13:53%E9%82%A3%E4%BD%A0%E9%97%AE%E8%80%81%E5%B8%88%E5%BA%9E%202019/4/1%2011:13:55@%E3%8A%A3%E9%BB%9E%E5%A9%B2%E4%BC%88%E9%AD%9C%E6%B7%A1%20/%20%E6%9C%AB%20%202019/4/1%2011:14:42%E5%A5%BD%E7%9A%84%E6%B7%A1%20/%20%E6%9C%AB%20%202019/4/1%2011:15:49@%E3%8A%A3%E9%BB%9E%E5%A9%B2%E4%BC%88%E9%AD%9C%20%E8%BF%99%E4%B8%AA%E6%98%AF%20%E8%80%81%E5%B8%88%E5%90%97%EF%BC%9F%E5%BA%9E%202019/4/1%2011:21:01%E6%98%AF%E7%9A%84%E5%BA%9E%202019/4/1%2011:21:09%E7%9C%8B%E5%88%B0%E4%BA%86%E4%BC%9A%E5%9B%9E%E5%A4%8D%E4%BD%A0%E7%9A%84&lt;br/&gt;来源：慕课网&lt;br/&gt;本文原创发布于慕课网 ，转载请注明出处，谢谢合作&lt;/div&gt;
</description>
<pubDate>Mon, 01 Apr 2019 06:49:00 +0000</pubDate>
<dc:creator>Tom-shushu</dc:creator>
<og:description>1.我们使用缓存时的业务流程大概为： 当我们查询一条数据时，先去查询缓存，如果缓存有就直接返回，如果没有就去查询数据库，然后返回。这种情况下就可能出现下面的一些现象。 2.缓存穿透 2.1什么是缓存穿</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Tom-shushu/p/10636382.html</dc:identifier>
</item>
<item>
<title>设计模式之代理模式 - 渡码</title>
<link>http://www.cnblogs.com/duma/p/10629302.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/duma/p/10629302.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;代理模式&lt;/strong&gt;&lt;/span&gt;为另一个对象提供一个替身以&lt;strong&gt;控制&lt;/strong&gt;对这个对象的&lt;strong&gt;访问&lt;/strong&gt;。从定义可以看出，1. 代理模式提供了一个替身，即代理对象 2. 代理对象是为了控制对另一个对象（真实对象）的访问，控制可以理解为做权限检查、可行性判断等。举个例子，代理对象 = 经纪人，真实对象 = 明星，如果某剧组想邀请明星出演电影，先将剧本给经纪人，经纪人先判断剧组的真实性以及剧本的价值，如果是无良剧组或者垃圾剧本直接怼回去，这便是控制。如果剧组和剧本靠谱便转交给明星处理，明星确定演不演把结果反馈给经纪人，经纪人再反馈结果给剧组，这个过程就可以理解为代理模式。代理模式有很多种，包括动态代理、远程代理、虚拟代理等等，本章我们详细介绍动态代理（Java版），简单介绍远程代理和虚拟代理。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;动态代理&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;之所以叫动态是因为运行是才将代理类创建出来， 运行时根据传入的接口创建代理类及对象。我们先由一个简单的需求引入动态代理技术，同时也会介绍面向对象设计原则。需求如下：在我们的业务当中，需要将某些数据写入本地磁盘做持久化，因此程序中需要封装一个写文件的类来满足业务需求。前期的业务很简单，我们只需要定义能够提供写入文件的方法即可。因此，首先定义一个 Writer 接口，包含不同的写方法，其次定义一个该接口的实现类，实现该接口定义的方法。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cnblogs.duma.dp.proxy.dynamic;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Writer {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; write(String fileName, String str);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; write(String fileName, &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] bs);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cnblogs.duma.dp.proxy.dynamic;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FileWriter &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Writer {
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; write(String fileName, String str) {
        System.out.println(&lt;/span&gt;&quot;call write str in FileWriter&quot;&lt;span&gt;);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; write(String fileName, &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] bs) {
        System.out.println(&lt;/span&gt;&quot;call write bytes in FileWriter&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;之后我们用 Writer writer = new FileWriter();  就可以完成向本地文件写数据的功能了。这里其实我们如果不定义接口也能实现这个功能，至于为什么要定义接口下文有解释。至此，我们的小需求完成了，也上线了并能正常运行。突然有一天运维小哥说了，为了保证 xxx ，需要在服务器预留 100G 磁盘空间， 也就是说我们的应用程序写磁盘的时候要判断已有的磁盘空间，如果快到了 100G 临界值，就不能再写了。因此，我们需要改代码，写之前加上一个判断当前可用磁盘空间的逻辑，本来我们可以直接改 FileWriter 的代码。但存在两个问题 1. 改现有代码风险高，可能改动过程中影响原有逻辑，并且要重新进行单元测试 2. 这个需求比较牵强，跟我们的实际业务无关，直接放在业务代码里面导致耦合度比较大，不利于维护。因此，我们可以考虑使用代理模式解决这个问题，即可以保证现有代码不动，又可以低耦合地实现目前的需求。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cnblogs.duma.dp.proxy.dynamic;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.InvocationHandler;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Method;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FileWriterInvocationHandler &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; InvocationHandler {
    Writer writer &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; FileWriterInvocationHandler(Writer writer) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.writer =&lt;span&gt; writer;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object invoke(Object proxy, Method method, Object[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; localNoSpace = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        System.out.println(&lt;/span&gt;&quot;check local filesystem space.&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;检测磁盘代码，返回值可以更新 localNoSpace 变量&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (localNoSpace) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&quot;no space.&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果空间不足，抛出空间不足的异常&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; method.invoke(writer, args); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用真实对象（FileWriter）的方法&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可以看到只增加了一个类，这个类有个特点 1. 它实现了 InvocationHandler 接口 2. 它的 invoke 方法实现了我们的需求。InvocationHandler 是 Java 动态代理定义的一个接口，接口中定义了一个 invoke 方法，我们调用代理对象的任何方法都会变成对 FileWriterInvocationHandler 对象的 invoke 方法的调用， 在 invoke 方法中完成代理的功能并控制对真实对象的调用。如果看到你觉得一头雾水，没关系继续向下看将豁然开朗。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;到目前为止我们只看到新增了一个 InvocationHandler 接口的实现类，并没有看到代理对象。之前说过之所以是动态代理是因为在运行时才创建代理类，因此我们需要编写一个驱动程序，动态创建代理对象，完成动态代理的后半部分。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cnblogs.duma.dp.proxy.dynamic;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Proxy;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DynamicProxyDriver {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * Proxy.newProxyInstance 包括三个参数
         * 第一个参数：定义代理类的 classloader，一般用被代理接口的 classloader
         * 第二个参数：需要被代理的接口列表
         * 第三个参数：实现了 InvocationHandler 接口的对象
         * 返回值：代理对象
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Writer writer &lt;/span&gt;=&lt;span&gt; (Writer) Proxy.newProxyInstance(
                Writer.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;.getClassLoader(),
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Class[]{Writer.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;},
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FileWriterInvocationHandler(&lt;span&gt;new&lt;/span&gt; FileWriter())); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这就是动态的原因，运行时才创建代理类&lt;/span&gt;

        &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            writer.write(&lt;/span&gt;&quot;file1.txt&quot;, &quot;text&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用代理对象的write方法&lt;/span&gt;
        } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
        }
        writer.write(&lt;/span&gt;&quot;file2.txt&quot;, &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[]{}); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用代理对象的write方法&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;最关的一步是 Proxy.newProxyInstance ，该调用会创建代理对象，该代理对象会将我们需要代理的接口（Writer）和 InvocationHandler 实现类关联起来。这样代理对象就会有 Writer 接口的 2 个方法，针对我们的业务逻辑调用过程为：调用代理对象 writer 的 write 方法写数据 -&amp;gt; 转到 FileWriterInvocationHandler 对象的 invoke 方法，判断磁盘空间是否够用 -&amp;gt; 抛出磁盘空间不足异常或调用 FileWriter 对象的 write 方法写数据。在这里动态代理涉及到了 Writer 接口及其实现类、InvocationHandler 接口及其实现类、代理类。动态代理 UML 类图如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1129006/201903/1129006-20190331114929960-916933375.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到代理类 &lt;strong&gt;Proxy&lt;/strong&gt; 实现了 Writer 接口，因此可以调用 write 方法，同时代理类关联 FileWriterInvocationHandler ，因此对 write 方法的调用会变成对 invoke 方法的调用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;至此，新的需求就完成了，我们结合代理模式谈谈此次需求变更我们用到了哪些好的设计原则。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 我们没有在原有 FileWrite 实现类中修改代码， 而是新增了 FileInvocationHandler 实现新需求，这符合设计原则中的开闭原则，即：对扩展开发对修改封闭。改动现有代码容易影响已有的正常代码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 我们增加代理之后只是把 Writer writer = new FileWriter() 改为 Writer writer = Proxy.newProxyInstance(...)，由于都继承了 Writer 接口，因此不需要修改 writer 的类型， 这符合面向接口的设计原则，让我们尽量少的改动现有代码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;动态代理还有一个&lt;strong&gt;重要的应用场景&lt;/strong&gt;，我们可以在 invoke 方法中把待调用的方法名（method）和参数（args）发送到远程服务器，在远程服务器中完成调用并返回一个结果，这其实就是 RPC （remote procedure call），即：远程过程调用。我在阅读 Hadoop 源码过程中发现 Hadoop RPC 将动态代理技术应用在上述场景中。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;远程代理 &lt;/h2&gt;
&lt;p&gt;&lt;span&gt;个人觉得上述动态代理第二个应用场景算是远程代理的一个特例，因为远程代理不一定非要动态创建代理对象。接下来我们以 Java RMI 为例， 简单看下远程代理。RMI（remote method invocation）即：远程方法调用，与 RPC 类似，可以让我们像调用 Java 本地方法一样，调用远程的方法。这里就需要一个代理对象，代理对象实现了本地的接口，其中序列化/反序列化以及网络传输都在代理对象中实现， 对我们透明，这也是控制了我们对远程对象的访问。代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.rmi.Remote;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.rmi.RemoteException;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 定义一个接口，接口中的方法要在远程调用
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; MyRemote &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Remote {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String sayHello() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; RemoteException;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.MalformedURLException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.rmi.Naming;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.rmi.RemoteException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.rmi.server.UnicastRemoteObject;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 定义一个接口的远程实现类
 * 为了让远程对象拥有 “远程的” 功能，需要继承 UnicastRemoteObject 类
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyRemoteImpl &lt;span&gt;extends&lt;/span&gt; UnicastRemoteObject &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; MyRemote {

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; MyRemoteImpl() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; RemoteException {
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 客户端通过 rmi 代理对象调用 sayHello 方法，将会进入到此方法
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; RemoteException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String sayHello() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; RemoteException {
        System.out.println(&lt;/span&gt;&quot;req from client.&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Server says, 'Hey'&quot;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 启动远程进程的 main 方法
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            MyRemote service &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyRemoteImpl();
            Naming.rebind(&lt;/span&gt;&quot;RemoteHello&quot;, service); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将服务名和对应的服务进行绑定，客户端会根据 RemoteHello 找到远程服务&lt;/span&gt;
        } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (RemoteException e) {
            e.printStackTrace();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (MalformedURLException e) {
            e.printStackTrace();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这样我们的远程服务已经写好了，还需要做以下 3 个工作来启动远程服务&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 生成客户端代理类，需要在 MyRemoteImpl.class 所在的目录中执行 rmic MyRemoteImpl 命令，将会生成 MyRemoteImpl_Stub.class 类。首先，rmic 命令是 jdk 自带命令，所在的目录与 java 和 javac 所在的目录一样；其次，我用的 Idea 创建的普通 Java 工程，我的 MyRemoteImpl.class 文件在“E:\backends\java-backends\java-ex\out\production\java-ex”目录中，以我的工程为例，路径以及命令执行如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
E:\backends\java-backends\java-ex\out\production\java-ex&amp;gt;rmic MyRemoteImpl
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2. 启动 rmiregistry，为了远程服务可以注册服务名，在我们的 class 所在的目录（“项目目录\out\production\java-ex”）中执行 rmiregistry 命令&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
E:\backends\java-backends\java-ex\out\production\java-ex&amp;gt;rmiregistry
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3. 运行 MyRemoteImpl 类，启动远程服务进程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;继续编写客户端访问代码，客户端代码主要是找到刚刚注册的 RemoteHello 远程服务，并获得代理对象，调用代理对象上的方法。我们可以在同一个工程下，创建 MyRemoteClient 类&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.MalformedURLException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.rmi.Naming;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.rmi.NotBoundException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.rmi.RemoteException;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyRemoteClient {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
             * 找到远程服务，并返回代理对象
             * 该代理对象就是 MyRemoteImpl_Stub 且实现了 MyRemote 接口
             &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            MyRemote service &lt;/span&gt;= (MyRemote) Naming.lookup(&quot;rmi://127.0.0.1/RemoteHello&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
             * 调用代理对象的 sayHello 方法，便会通过代理将调用发送到远程服务进程并返回结果
             &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            String ret &lt;/span&gt;=&lt;span&gt; service.sayHello();
            System.out.println(ret); 
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (RemoteException e) {
            e.printStackTrace();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (NotBoundException e) {
            e.printStackTrace();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (MalformedURLException e) {
            e.printStackTrace();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;我们可以直接运行 MyRemoteClient 类，可以看到在刚启动的 MyRemoteImpl 进程中，控制台打印了 &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
req from client.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在 MyRemoteClient 进程的控制台中打印了&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
Server says, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hey&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;至此我们的远程代理已经介绍完毕。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;虚拟代理&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;虚拟代理是作为创建开销大的对象的替身。举一个我们常见的例子，在 Web 开发或者移动端开发的时候经常会用到 Image 组件，Image 组件一般要传入一个 URL 参数，从网络上下载图片到本地展示。假设这个组件要等到图片下载完成才有显示，那如果图片较大或者网络较慢，给用户造成不好的体验。解决方法是我们可以先显示一个 loading 状态的默认的本地图片，当远程图片下载完成后重新渲染，替换掉当前的 laoding 状态的图片。用虚拟代理来实现这个技术就可以定义一个 ImageProxy 类型，在该类中初始时候先展示一个默认图片，启动线程创建 Image 对象，Image 对象创建完毕，再重新渲染，替换默认图片。虚拟代理也是控制了对 Image 对象的访问。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;本章主要介绍了代理模式，并且我们看到了代理模式常用的几种变形，同时也接触了面向对象的基本的设计原则&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;动态代理&lt;/strong&gt; - 程序运行时动态地创建代理对象，所有的对代理对象方法的调用都会变成对 InvocationHandler 的 invoke 方法的调用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;远程代理&lt;/strong&gt; - 本地调用代理对象访问远程的方法，无需关心网络通信细节，跟调用本地方法一样&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;虚拟代理&lt;/strong&gt; - 为了创建开销大的对象而存在&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到代理模式最核心就是&lt;strong&gt;控制&lt;/strong&gt;，代理对象的目的就是控制对真实对象的访问。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本章主要参考《Head First 设计模式》&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 01 Apr 2019 05:43:00 +0000</pubDate>
<dc:creator>渡码</dc:creator>
<og:description>代理模式为另一个对象提供一个替身以控制对这个对象的访问。从定义可以看出，1. 代理模式提供了一个替身，即代理对象 2. 代理对象是为了控制对另一个对象（真实对象）的访问，控制可以理解为做权限检查、可行</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/duma/p/10629302.html</dc:identifier>
</item>
<item>
<title>学懂grid布局：这篇就够了(译) - speanut</title>
<link>http://www.cnblogs.com/speanut/p/10635859.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/speanut/p/10635859.html</guid>
<description>&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;884eq-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;884eq-0-0&quot;&gt;----前言&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;Editable-styled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;ei5bt-0-0&quot;&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;ei5bt-0-0&quot;&gt;&lt;span data-offset-key=&quot;ei5bt-0-0&quot;&gt;上周发过一篇关于flex布局的文章，但发完之后我感觉我并没有写很多自己对flex布局的理解，因为原链接的作者的轮子实在是太强了，这里借用知乎大佬&lt;a class=&quot;Link ztext-link&quot; href=&quot;https://www.zhihu.com/question/26742539/answer/537971734&quot; target=&quot;_blank&quot; data-offset-key=&quot;ei5bt-1-0&quot; data-editable=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;ei5bt-1-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;牛岱&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-offset-key=&quot;ei5bt-2-0&quot;&gt;的话来说，当人家已经有足够好的轮子，你就不要试图，甚至是通过各种手段，试图去取代这个轮子的地位。我觉的很正确（偷偷diss某些学校的计算机专业仍然用某本书当做C语言入门，真的是从入门到放弃），所以说花生直接按照原文来翻译了(真的很棒)，若有翻译错误，欢迎指出！！！&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;98rf3-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;98rf3-0-0&quot;&gt;grid布局是CSS&lt;span data-offset-key=&quot;98rf3-0-1&quot;&gt;最强&lt;span data-offset-key=&quot;98rf3-0-2&quot;&gt;的布局方式，它是一种&lt;span data-offset-key=&quot;98rf3-0-3&quot;&gt;二维&lt;span data-offset-key=&quot;98rf3-0-4&quot;&gt;布局，它可以处理&lt;span data-offset-key=&quot;98rf3-0-5&quot;&gt;行&lt;span data-offset-key=&quot;98rf3-0-6&quot;&gt;与&lt;span data-offset-key=&quot;98rf3-0-7&quot;&gt;列&lt;span data-offset-key=&quot;98rf3-0-8&quot;&gt;，它不同于之前&lt;span data-offset-key=&quot;98rf3-0-9&quot;&gt;一维&lt;span data-offset-key=&quot;98rf3-0-10&quot;&gt;的flex布局。在grid布局中，父容器充当一个(Grid Container)，子元素充当(Grid Item)。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;85i0b-0-0&quot;&gt;注意！！长篇警告，但是很赚&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;6nhh4-0-0&quot;&gt;1.基本浏览器的支持&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-f4e1bbceec9d9f18b466592ad12767f8_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1202&quot; data-rawheight=&quot;351&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic1.zhimg.com/v2-f4e1bbceec9d9f18b466592ad12767f8_b.jpg&quot; data-watermark-src=&quot;https://pic1.zhimg.com/v2-52ba3542c0b506759ee55cedd8b75434_b.jpg&quot;/&gt;&lt;/div&gt;
1-浏览器支持&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;b9cpn-0-0&quot;&gt;2.grid布局的属性与属性值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;9dqb2-0-0&quot;&gt;2.1父容器的属性与属性值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;eus5t-0-0&quot;&gt;2-1-1 display&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;9evit-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;9evit-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;display&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;9evit-6-0&quot;&gt;grid | inline-grid&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;9evit-8-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;a0lm9-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;a0lm9-0-0&quot;&gt;将元素定义为网格容器，并为其内容建立新的&lt;span data-offset-key=&quot;a0lm9-0-1&quot;&gt;网格格式上下文&lt;span data-offset-key=&quot;a0lm9-0-2&quot;&gt;，对于grid来说，是产生一个块级的grid容器，而inline-grid就不用我说了吧&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;arp69-0-0&quot;&gt;2-1-2 grid-template-columns grid-template-rows&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;df02h-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;df02h-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-columns&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;df02h-6-0&quot;&gt;&amp;lt;track-size&amp;gt; ... | &amp;lt;line-name&amp;gt; &amp;lt;track-size&amp;gt; ...&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;df02h-8-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-rows&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;df02h-11-0&quot;&gt;&amp;lt;track-size&amp;gt; ... | &amp;lt;line-name&amp;gt; &amp;lt;track-size&amp;gt; ...&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;df02h-13-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;fg6mv-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;fg6mv-0-0&quot;&gt;这里track-size(&lt;span data-offset-key=&quot;fg6mv-0-1&quot;&gt;轨道尺寸&lt;span data-offset-key=&quot;fg6mv-0-2&quot;&gt;)的意思我觉的是一条&lt;span data-offset-key=&quot;fg6mv-0-3&quot;&gt;线段的长度&lt;span data-offset-key=&quot;fg6mv-0-4&quot;&gt;吧(就如图2-1的40px和50px)，line-name的意思是你可以给这条线段取个名字，track-size可以用px，%，fr（fraction）也就是分数的意思或者说&lt;span data-offset-key=&quot;fg6mv-0-5&quot;&gt;fr为单位的轨道中占的比例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;a9dvv-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;a9dvv-0-0&quot;&gt;举个栗子&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;52jdm-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;52jdm-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-columns&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;52jdm-6-0&quot;&gt;40px 50px auto 50px 40px&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;52jdm-8-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-rows&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;52jdm-11-0&quot;&gt;25% 100px auto&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;52jdm-13-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-5466589801814f4d85dcb0246236c3b2_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;503&quot; data-rawheight=&quot;399&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic3.zhimg.com/v2-5466589801814f4d85dcb0246236c3b2_b.jpg&quot; data-watermark-src=&quot;https://pic3.zhimg.com/v2-6d7c09038a3869bec473b175ce04f07a_b.jpg&quot;/&gt;&lt;/div&gt;
2-1&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;2d2fn-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;2d2fn-0-0&quot;&gt;里面的[1]，[2]...是track的名字(line-name) ，你也可以自己命名，如图2-2&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;fh209-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;fh209-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-columns&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;fh209-6-0&quot;&gt;[first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end]&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;fh209-8-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-rows&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;fh209-11-0&quot;&gt;[row1-start] 25% [row1-end] 100px [third-line] auto [last-line]&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;fh209-13-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic4.zhimg.com/v2-cd2d053bd6944ac80f00a6e84cc9d973_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;496&quot; data-rawheight=&quot;390&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic4.zhimg.com/v2-cd2d053bd6944ac80f00a6e84cc9d973_b.jpg&quot; data-watermark-src=&quot;https://pic4.zhimg.com/v2-f019d04434e2e635bf694cd8005371b3_b.jpg&quot;/&gt;&lt;/div&gt;
2-2&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;4ev6s-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;4ev6s-0-0&quot;&gt;注意:一条线也可以有&lt;span data-offset-key=&quot;4ev6s-0-1&quot;&gt;多个名字&lt;span data-offset-key=&quot;4ev6s-0-2&quot;&gt;，就比如说下面的例子&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;flt1a-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;flt1a-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-rows&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;flt1a-6-0&quot;&gt;[row1-start] 25% [row1-end row2-start] 25% [row2-end]&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;flt1a-8-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;ccvle-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;ccvle-0-0&quot;&gt;对于Grid布局来说你还可以用计算的方法来布局，你可以用&lt;span data-offset-key=&quot;ccvle-0-1&quot;&gt;repeat()&lt;span data-offset-key=&quot;ccvle-0-2&quot;&gt;，让我们看看下面代码&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;11m3q-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;11m3q-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-columns&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;11m3q-6-0&quot;&gt;&lt;span class=&quot;prism-token token function&quot;&gt;repeat&lt;span class=&quot;prism-token token punctuation&quot;&gt;(&lt;span data-offset-key=&quot;11m3q-9-0&quot;&gt;3, 20px [col-start]&lt;span class=&quot;prism-token token punctuation&quot;&gt;)&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;11m3q-12-0&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;ane98-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;ane98-0-0&quot;&gt;下面我就说说关于fr的计算&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;17b8j-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;17b8j-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-columns&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;17b8j-6-0&quot;&gt;1fr 1fr 1fr&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;17b8j-8-0&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;a85mg-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;a85mg-0-0&quot;&gt;上面那行的代码表示:每一个轨道占父容器的1/3，假如父容器是900px,就分成了（300px 300px 300px），而下面的就会这样计算(900-50)/3，然后平均分给每一个轨道，（283.3px 50px 283.3px 283.3px）&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;aoo64-0-0&quot;&gt;2-1-3 grid-template-areas&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;7qu7k-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;7qu7k-0-0&quot;&gt;通过使用grid-area属性指定&lt;span data-offset-key=&quot;7qu7k-0-1&quot;&gt;子元素具体在父容器的位置&lt;span data-offset-key=&quot;7qu7k-0-2&quot;&gt;，&lt;span data-offset-key=&quot;7qu7k-0-3&quot;&gt;.&lt;span data-offset-key=&quot;7qu7k-0-4&quot;&gt;(句号)表示空的单元格(grid-item:就像小学生的网格本里面的一个个格子)，我觉的这个属性太强了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;bt7nq-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;bt7nq-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-areas&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;bt7nq-6-0&quot;&gt;&lt;span class=&quot;prism-token token string&quot;&gt;&quot;&amp;lt;grid-area-name&amp;gt; | . | none | ...&quot; &lt;span data-offset-key=&quot;bt7nq-8-0&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;ecm4c-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;ecm4c-0-0&quot;&gt;举个栗子&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.item-a &lt;span data-offset-key=&quot;9m5dp-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;9m5dp-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-area&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;9m5dp-6-0&quot;&gt;header&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;9m5dp-8-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;} &lt;span data-offset-key=&quot;9m5dp-10-0&quot;&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.item-b &lt;span data-offset-key=&quot;9m5dp-12-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;9m5dp-14-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-area&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;9m5dp-17-0&quot;&gt;main&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;9m5dp-19-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;} &lt;span data-offset-key=&quot;9m5dp-21-0&quot;&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.item-c &lt;span data-offset-key=&quot;9m5dp-23-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;9m5dp-25-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-area&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;9m5dp-28-0&quot;&gt;sidebar&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;9m5dp-30-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;} &lt;span data-offset-key=&quot;9m5dp-32-0&quot;&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.item-d &lt;span data-offset-key=&quot;9m5dp-34-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;9m5dp-36-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-area&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;9m5dp-39-0&quot;&gt;footer&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;9m5dp-41-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;} &lt;span data-offset-key=&quot;9m5dp-43-0&quot;&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;9m5dp-45-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;9m5dp-47-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;display&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;9m5dp-50-0&quot;&gt;grid&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;9m5dp-52-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-columns&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;9m5dp-55-0&quot;&gt;50px 50px 50px 50px&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;9m5dp-57-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-rows&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;9m5dp-60-0&quot;&gt;auto&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;9m5dp-62-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-areas&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;9m5dp-65-0&quot;&gt;&lt;span class=&quot;prism-token token string&quot;&gt;&quot;header header header header&quot; &lt;span data-offset-key=&quot;9m5dp-67-0&quot;&gt;&lt;span class=&quot;prism-token token string&quot;&gt;&quot;main main . sidebar&quot; &lt;span data-offset-key=&quot;9m5dp-69-0&quot;&gt;&lt;span class=&quot;prism-token token string&quot;&gt;&quot;footer footer footer footer&quot;&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;9m5dp-72-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;abqtf-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;abqtf-0-0&quot;&gt;我觉的光是看上面父容器的&lt;span data-offset-key=&quot;abqtf-0-1&quot;&gt;grid-template-areas&lt;span data-offset-key=&quot;abqtf-0-2&quot;&gt;就知道具体的布局是怎样的吧&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-8e295fdeaf37418c674c73d04f0eba5a_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;495&quot; data-rawheight=&quot;343&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic3.zhimg.com/v2-8e295fdeaf37418c674c73d04f0eba5a_b.jpg&quot; data-watermark-src=&quot;https://pic2.zhimg.com/v2-29bfa1ee431954d9b38354b65ca3e191_b.jpg&quot;/&gt;&lt;/div&gt;
2-3&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;el9e5-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;el9e5-0-0&quot;&gt;声明中的每一行都需要&lt;span data-offset-key=&quot;el9e5-0-1&quot;&gt;相同数量的单元格&lt;span data-offset-key=&quot;el9e5-0-2&quot;&gt;，而且你可以用任意数量的&lt;span data-offset-key=&quot;el9e5-0-3&quot;&gt;句号&lt;span data-offset-key=&quot;el9e5-0-4&quot;&gt;来代表一个空单元格，只要它们之间没有空格，就代表一个单元格。&lt;span data-offset-key=&quot;el9e5-0-5&quot;&gt;注意&lt;span data-offset-key=&quot;el9e5-0-6&quot;&gt;，当使用&lt;span data-offset-key=&quot;el9e5-0-7&quot;&gt;area&lt;span data-offset-key=&quot;el9e5-0-8&quot;&gt;时浏览器会自动的为每一个区域两端的线条命名，若网格区域的名称为foo，则区域的起始行的名称为foo-start，最后一行为foo-end。这意味着某些行可能有多个名称。就像图2-3中父容器的最左边的那条线被三个子元素共享所以你懂得...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;24vqk-0-0&quot;&gt;2-1-4 grid-template&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;1to6p-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;1to6p-0-0&quot;&gt;这是grid-template-rows,grid-template-columns, 和grid-template-areas简写，&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;492lu-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;492lu-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;492lu-6-0&quot;&gt;none | &amp;lt;grid-template-rows&amp;gt; / &amp;lt;grid-template-columns&amp;gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;492lu-8-0&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;1t062-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;1t062-0-0&quot;&gt;举个例子&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;2de7i-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;2de7i-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;2de7i-6-0&quot;&gt;[row1-start] &lt;span class=&quot;prism-token token string&quot;&gt;&quot;header header header&quot; &lt;span data-offset-key=&quot;2de7i-8-0&quot;&gt;25px [row1-end] [row2-start] &lt;span class=&quot;prism-token token string&quot;&gt;&quot;footer footer footer&quot; &lt;span data-offset-key=&quot;2de7i-10-0&quot;&gt;25px [row2-end] / auto 50px auto&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;2de7i-12-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;} &lt;span data-offset-key=&quot;2de7i-14-0&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;3rri0-0-0&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;3rri0-0-0&quot;&gt;因为grid-template不会重置隐式网格属性(grid-auto-columns, grid-auto-rows, and grid-auto-flow)，这可能是你在大多数情况下要执行的操作，因此建议使用网格属性而不是网格模板&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;9mt9d-0-0&quot;&gt;2-1-5 grid-column-gap grid-row-gap grid-gap&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;4vv3t-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;4vv3t-0-0&quot;&gt;gap在英文中有间隔、缺口的意思，因此就是每个子元素之间的间隔&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;8i85-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;8i85-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-column-gap&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;8i85-6-0&quot;&gt;&amp;lt;line-size&amp;gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;8i85-8-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-row-gap&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;8i85-11-0&quot;&gt;&amp;lt;line-size&amp;gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;8i85-13-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;917tb-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;917tb-0-0&quot;&gt;举个栗子&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;8t7oe-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;8t7oe-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-columns&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;8t7oe-6-0&quot;&gt;100px 50px 100px&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;8t7oe-8-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-rows&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;8t7oe-11-0&quot;&gt;80px auto 80px&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;8t7oe-13-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-column-gap&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;8t7oe-16-0&quot;&gt;10px&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;8t7oe-18-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-row-gap&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;8t7oe-21-0&quot;&gt;15px&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;8t7oe-23-0&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic4.zhimg.com/v2-21796a282388d04da056ed7909336ddf_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;497&quot; data-rawheight=&quot;410&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic4.zhimg.com/v2-21796a282388d04da056ed7909336ddf_b.jpg&quot; data-watermark-src=&quot;https://pic2.zhimg.com/v2-c459f9460ea669ae1231f17dc99b2d89_b.jpg&quot;/&gt;&lt;/div&gt;
2-4&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;bo607-0-0&quot;&gt;2-1-5 justify-items align-item place-items&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;b416v-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;b416v-0-0&quot;&gt;这个属性和flex布局中的align-items有点像，但是还是有点区别，因为是二维布局所以在Grid中多了一个justify-items, align-item的例子和justify-items很像，一个横轴一个是纵轴&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;2i70q-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;2i70q-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;justify-items&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;2i70q-6-0&quot;&gt;start | end | center | stretch&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;2i70q-8-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;align-items&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;2i70q-11-0&quot;&gt;start | end | center | stretch&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;2i70q-13-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;place-items&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;2i70q-16-0&quot;&gt;&amp;lt;align-items&amp;gt; / &amp;lt;justify-items&amp;gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;1r6qn-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;1r6qn-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;justify-items&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;1r6qn-6-0&quot;&gt;start&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;1r6qn-8-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-d06dddfa3b4aa0dbd8c86b5d1971695c_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;494&quot; data-rawheight=&quot;190&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic1.zhimg.com/v2-d06dddfa3b4aa0dbd8c86b5d1971695c_b.jpg&quot; data-watermark-src=&quot;https://pic4.zhimg.com/v2-24b25dcf7a3682377a1c84e2daca0937_b.jpg&quot;/&gt;&lt;/div&gt;
2-5&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;63g43-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;63g43-0-0&quot;&gt;end和center看过之前的flex布局讲解想必大家都知道了吧&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;9di4i-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;9di4i-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;justify-items&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;9di4i-6-0&quot;&gt;stretch&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;9di4i-8-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-49e4ec67608f0d58aba6b49f00c561d8_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;511&quot; data-rawheight=&quot;197&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic1.zhimg.com/v2-49e4ec67608f0d58aba6b49f00c561d8_b.jpg&quot; data-watermark-src=&quot;https://pic1.zhimg.com/v2-c5d2e7945da82048eef0b852be5a7408_b.jpg&quot;/&gt;&lt;/div&gt;
2-6&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;9epp3-0-0&quot;&gt;2-1-6 justify-content align-content place-content&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;fvqnj-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;fvqnj-0-0&quot;&gt;是不是感觉很熟悉，没错就和flex中的布局方式相同的，给个图片就知道了&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;dmoth-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;dmoth-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;justify-content&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;dmoth-6-0&quot;&gt;start | end | center | stretch | space-around | space-between | space-evenly&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;dmoth-8-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;align-content&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;dmoth-11-0&quot;&gt;start | end | center | stretch | space-around | space-between | space-evenly&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;dmoth-13-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;place-content&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;dmoth-16-0&quot;&gt;&amp;lt;align-content&amp;gt; / &amp;lt;justify-content&amp;gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;fa69n-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;fa69n-0-0&quot;&gt;就举一个栗子哈～&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;7i5vk-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;7i5vk-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;justify-content&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;7i5vk-6-0&quot;&gt;start&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;7i5vk-8-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-05b1b86cd941c7e03f70da2f4826be7c_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;294&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic1.zhimg.com/v2-05b1b86cd941c7e03f70da2f4826be7c_b.jpg&quot; data-watermark-src=&quot;https://pic2.zhimg.com/v2-7fe93895c6a5af066b6939e6c6f9b769_b.jpg&quot;/&gt;&lt;/div&gt;
2-7&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;73l4n-0-0&quot;&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;73l4n-0-0&quot;&gt;&lt;span data-offset-key=&quot;73l4n-0-0&quot;&gt;align-content和justify-content同理，一个是横轴一个是纵轴，这个属性和flex的justify-content是相同道理的，如果不懂可以去看我之前的&lt;a class=&quot;Link ztext-link&quot; href=&quot;https://zhuanlan.zhihu.com/p/60190942&quot; target=&quot;_blank&quot; data-offset-key=&quot;73l4n-1-0&quot; data-editable=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;73l4n-1-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;flex文章&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-offset-key=&quot;73l4n-2-0&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;82je6-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;82je6-0-0&quot;&gt;2-1-7 grid-auto-columns grid-auto-rows&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;8dji0-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;8dji0-0-0&quot;&gt;当grid-item多余网格中的单元格或grid-item放置在显示网格之外，将创建隐式track&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;7acga-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;7acga-0-0&quot;&gt;举个栗子&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;9di1e-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;9di1e-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-auto-columns&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;9di1e-6-0&quot;&gt;&amp;lt;track-size&amp;gt; ...&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;9di1e-8-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-auto-rows&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;9di1e-11-0&quot;&gt;&amp;lt;track-size&amp;gt; ...&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;9di1e-13-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;} &lt;span data-offset-key=&quot;9di1e-15-0&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-1fe4a8f32797886eb3e67f3aa18b0b4a_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;367&quot; data-rawheight=&quot;472&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic3.zhimg.com/v2-1fe4a8f32797886eb3e67f3aa18b0b4a_b.jpg&quot; data-watermark-src=&quot;https://pic2.zhimg.com/v2-3559c7c6a387f4e9e5966baeeabd5a9d_b.jpg&quot;/&gt;&lt;/div&gt;
2-8&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-90a610252ed32a517756afbf9f13a188_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;482&quot; data-rawheight=&quot;372&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic1.zhimg.com/v2-90a610252ed32a517756afbf9f13a188_b.jpg&quot; data-watermark-src=&quot;https://pic1.zhimg.com/v2-676850099e80e359c16792c84326268c_b.jpg&quot;/&gt;&lt;/div&gt;
2-9&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;doic-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;doic-0-0&quot;&gt;grid-column和grid-row还是很好理解的，就是子元素处在父元素上的位置，由上图可知纵轴的第五条线和第六条线是不存在的，隐式track就会创建两个0线来填充此间隔，我们用grid-template-columns和grid-template-rows就可以指定隐式轨道的宽度&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;aq03i-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;aq03i-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-auto-columns&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;aq03i-6-0&quot;&gt;60px&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;aq03i-8-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic4.zhimg.com/v2-53b5938752e4cc1260c1671b9d4d3257_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;506&quot; data-rawheight=&quot;310&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic4.zhimg.com/v2-53b5938752e4cc1260c1671b9d4d3257_b.jpg&quot; data-watermark-src=&quot;https://pic4.zhimg.com/v2-e9363640e9ee932ab422411ddb5a720b_b.jpg&quot;/&gt;&lt;/div&gt;
2-10&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;an4f9-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;an4f9-0-0&quot;&gt;2-1-7 grid-auto-flow&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;ci45j-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;ci45j-0-0&quot;&gt;还记得我上篇文章提过的流布局吗，假如你没有明确子元素放置在网格上的网格项，则会根据自动放置算法来放置，也就可以通过自动的流来布局&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;aeoah-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;aeoah-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-auto-flow&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;aeoah-6-0&quot;&gt;row | column | row dense | column dense &lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;public-DraftStyleDefault-ul&quot; data-offset-key=&quot;82gtd-0-0&quot; readability=&quot;1&quot;&gt;&lt;li class=&quot;Editable-styled public-DraftStyleDefault-unorderedListItem public-DraftStyleDefault-reset public-DraftStyleDefault-depth0 public-DraftStyleDefault-listLTR&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;82gtd-0-0&quot; readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;82gtd-0-0&quot;&gt;row(默认):就是正常的流，从左到右的顺序&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;Editable-styled public-DraftStyleDefault-unorderedListItem public-DraftStyleDefault-depth0 public-DraftStyleDefault-listLTR&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;9vrq1-0-0&quot; readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;9vrq1-0-0&quot;&gt;column: 你们知道css还有writing-mode这个属性吗 设置为&lt;span data-offset-key=&quot;9vrq1-0-1&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;writing-mode: horizontal-tb;&lt;span data-offset-key=&quot;9vrq1-0-2&quot;&gt;流向就为从上到下了，此处同理是如此&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;Editable-styled public-DraftStyleDefault-unorderedListItem public-DraftStyleDefault-depth0 public-DraftStyleDefault-listLTR&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;3o21a-0-0&quot; readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;3o21a-0-0&quot;&gt;dense: 让稍后出现较小的子元素尝试填充网格中较早的洞，可能会导致子元素的可视顺序错乱，所以不仔细讨论&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;eocpa-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;eocpa-0-0&quot;&gt;举个栗子&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;lt;&lt;span class=&quot;prism-token token tag&quot;&gt;section &lt;span class=&quot;prism-token token tag&quot;&gt;&lt;span class=&quot;prism-token token attr-name&quot;&gt;class&lt;span class=&quot;prism-token token punctuation&quot;&gt;=&lt;span class=&quot;prism-token token punctuation&quot;&gt;&quot;&lt;span class=&quot;prism-token token attr-value&quot;&gt;container&lt;span class=&quot;prism-token token punctuation&quot;&gt;&quot;&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;gt; &lt;span data-offset-key=&quot;6l8bb-9-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;lt;&lt;span class=&quot;prism-token token tag&quot;&gt;div &lt;span class=&quot;prism-token token tag&quot;&gt;&lt;span class=&quot;prism-token token attr-name&quot;&gt;class&lt;span class=&quot;prism-token token punctuation&quot;&gt;=&lt;span class=&quot;prism-token token punctuation&quot;&gt;&quot;&lt;span class=&quot;prism-token token attr-value&quot;&gt;item-a&lt;span class=&quot;prism-token token punctuation&quot;&gt;&quot;&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;gt;&lt;span data-offset-key=&quot;6l8bb-19-0&quot;&gt;item-a&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;lt;/&lt;span class=&quot;prism-token token tag&quot;&gt;div&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;gt; &lt;span data-offset-key=&quot;6l8bb-23-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;lt;&lt;span class=&quot;prism-token token tag&quot;&gt;div &lt;span class=&quot;prism-token token tag&quot;&gt;&lt;span class=&quot;prism-token token attr-name&quot;&gt;class&lt;span class=&quot;prism-token token punctuation&quot;&gt;=&lt;span class=&quot;prism-token token punctuation&quot;&gt;&quot;&lt;span class=&quot;prism-token token attr-value&quot;&gt;item-b&lt;span class=&quot;prism-token token punctuation&quot;&gt;&quot;&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;gt;&lt;span data-offset-key=&quot;6l8bb-33-0&quot;&gt;item-b&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;lt;/&lt;span class=&quot;prism-token token tag&quot;&gt;div&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;gt; &lt;span data-offset-key=&quot;6l8bb-37-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;lt;&lt;span class=&quot;prism-token token tag&quot;&gt;div &lt;span class=&quot;prism-token token tag&quot;&gt;&lt;span class=&quot;prism-token token attr-name&quot;&gt;class&lt;span class=&quot;prism-token token punctuation&quot;&gt;=&lt;span class=&quot;prism-token token punctuation&quot;&gt;&quot;&lt;span class=&quot;prism-token token attr-value&quot;&gt;item-c&lt;span class=&quot;prism-token token punctuation&quot;&gt;&quot;&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;gt;&lt;span data-offset-key=&quot;6l8bb-47-0&quot;&gt;item-c&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;lt;/&lt;span class=&quot;prism-token token tag&quot;&gt;div&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;gt; &lt;span data-offset-key=&quot;6l8bb-51-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;lt;&lt;span class=&quot;prism-token token tag&quot;&gt;div &lt;span class=&quot;prism-token token tag&quot;&gt;&lt;span class=&quot;prism-token token attr-name&quot;&gt;class&lt;span class=&quot;prism-token token punctuation&quot;&gt;=&lt;span class=&quot;prism-token token punctuation&quot;&gt;&quot;&lt;span class=&quot;prism-token token attr-value&quot;&gt;item-d&lt;span class=&quot;prism-token token punctuation&quot;&gt;&quot;&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;gt;&lt;span data-offset-key=&quot;6l8bb-61-0&quot;&gt;item-d&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;lt;/&lt;span class=&quot;prism-token token tag&quot;&gt;div&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;gt; &lt;span data-offset-key=&quot;6l8bb-65-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;lt;&lt;span class=&quot;prism-token token tag&quot;&gt;div &lt;span class=&quot;prism-token token tag&quot;&gt;&lt;span class=&quot;prism-token token attr-name&quot;&gt;class&lt;span class=&quot;prism-token token punctuation&quot;&gt;=&lt;span class=&quot;prism-token token punctuation&quot;&gt;&quot;&lt;span class=&quot;prism-token token attr-value&quot;&gt;item-e&lt;span class=&quot;prism-token token punctuation&quot;&gt;&quot;&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;gt;&lt;span data-offset-key=&quot;6l8bb-75-0&quot;&gt;item-e&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;lt;/&lt;span class=&quot;prism-token token tag&quot;&gt;div&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;gt; &lt;span data-offset-key=&quot;6l8bb-79-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;lt;/&lt;span class=&quot;prism-token token tag&quot;&gt;section&lt;span class=&quot;prism-token token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;abesi-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;abesi-0-0&quot;&gt;设置父容器&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.container &lt;span data-offset-key=&quot;f622q-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;f622q-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;display&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;f622q-6-0&quot;&gt;grid&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;f622q-8-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-columns&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;f622q-11-0&quot;&gt;60px 60px 60px 60px 60px&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;f622q-13-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-template-rows&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;f622q-16-0&quot;&gt;30px 30px&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;f622q-18-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-auto-flow&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;f622q-21-0&quot;&gt;row&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;f622q-23-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;3ocva-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;3ocva-0-0&quot;&gt;只指定两个子元素的位置&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.item-a &lt;span data-offset-key=&quot;bahj8-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;bahj8-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-column&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;bahj8-6-0&quot;&gt;1&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;bahj8-8-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-row&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;bahj8-11-0&quot;&gt;1 / 3&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;bahj8-13-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;} &lt;span data-offset-key=&quot;bahj8-15-0&quot;&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.item-e &lt;span data-offset-key=&quot;bahj8-17-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;bahj8-19-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-column&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;bahj8-22-0&quot;&gt;5&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;bahj8-24-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-row&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;bahj8-27-0&quot;&gt;1 / 3&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;bahj8-29-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic4.zhimg.com/v2-1ac34cc1acf4ec4fc94befdd4128ae8b_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;505&quot; data-rawheight=&quot;169&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic4.zhimg.com/v2-1ac34cc1acf4ec4fc94befdd4128ae8b_b.jpg&quot; data-watermark-src=&quot;https://pic4.zhimg.com/v2-426e82c2f74b2ac6a1881e6dca7668ab_b.jpg&quot;/&gt;&lt;/div&gt;
2-11&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;c50j9-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;c50j9-0-0&quot;&gt;当设置父容器中&lt;span data-offset-key=&quot;c50j9-0-1&quot;&gt;grid-auto-flow: column&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-62dbcb4c560d15c65292d8dc45e9734c_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;503&quot; data-rawheight=&quot;158&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic1.zhimg.com/v2-62dbcb4c560d15c65292d8dc45e9734c_b.jpg&quot; data-watermark-src=&quot;https://pic3.zhimg.com/v2-fe7cb6a9d802c97e8928afb5e8c2b582_b.jpg&quot;/&gt;&lt;/div&gt;
2-12&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;56uhg-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;56uhg-0-0&quot;&gt;2-1-7 grid&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;4eohf-0-0&quot;&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;4eohf-0-0&quot;&gt;&lt;span data-offset-key=&quot;4eohf-0-0&quot;&gt;是grid-template-rows，grid-template-columns，grid-template-areas，grid-auto-flow的简写 详细的可以看&lt;a class=&quot;Link ztext-link&quot; href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout&quot; target=&quot;_blank&quot; data-offset-key=&quot;4eohf-1-0&quot; data-editable=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;4eohf-1-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;MDN&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-offset-key=&quot;4eohf-2-0&quot;&gt;官网&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;bvtg6-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;bvtg6-0-0&quot;&gt;以上就是Grid中父容器的属性与属性值啦！！相信各位小伙伴们看的也很累，我敲的也累哇！&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;an442-0-0&quot;&gt;2.2子元素的属性与属性值&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;953j3-0-0&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;953j3-0-0&quot;&gt;首先注意&lt;span data-offset-key=&quot;953j3-0-1&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;float&lt;span data-offset-key=&quot;953j3-0-2&quot;&gt;,&lt;span data-offset-key=&quot;953j3-0-3&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;display: inline-block&lt;span data-offset-key=&quot;953j3-0-4&quot;&gt;,&lt;span data-offset-key=&quot;953j3-0-5&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;display: table-cell&lt;span data-offset-key=&quot;953j3-0-6&quot;&gt;,&lt;span data-offset-key=&quot;953j3-0-7&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;vertical-align&lt;span data-offset-key=&quot;953j3-0-8&quot;&gt;and&lt;span data-offset-key=&quot;953j3-0-9&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;column-*&lt;span data-offset-key=&quot;953j3-0-10&quot;&gt;对子元素没有影响&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;c7mp9-0-0&quot;&gt;2-2-1 grid-column-start grid-column-end grid-row-start grid-row-end&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.item &lt;span data-offset-key=&quot;2sd56-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;2sd56-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-column-start&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;2sd56-6-0&quot;&gt;&amp;lt;number&amp;gt; | &amp;lt;name&amp;gt; | span &amp;lt;number&amp;gt; | span &amp;lt;name&amp;gt; | auto &lt;span class=&quot;prism-token token property&quot;&gt;grid-column-end&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;2sd56-9-0&quot;&gt;&amp;lt;number&amp;gt; | &amp;lt;name&amp;gt; | span &amp;lt;number&amp;gt; | span &amp;lt;name&amp;gt; | auto &lt;span class=&quot;prism-token token property&quot;&gt;grid-row-start&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;2sd56-12-0&quot;&gt;&amp;lt;number&amp;gt; | &amp;lt;name&amp;gt; | span &amp;lt;number&amp;gt; | span &amp;lt;name&amp;gt; | auto &lt;span class=&quot;prism-token token property&quot;&gt;grid-row-end&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;2sd56-15-0&quot;&gt;&amp;lt;number&amp;gt; | &amp;lt;name&amp;gt; | span &amp;lt;number&amp;gt; | span &amp;lt;name&amp;gt; | auto &lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;fcns0-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;fcns0-0-0&quot;&gt;相信大家接触过前面的grid-start和grid-end已经有了足够多的了解了吧！！&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.item-a &lt;span data-offset-key=&quot;2fabn-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;2fabn-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-column-start&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;2fabn-6-0&quot;&gt;2&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;2fabn-8-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-column-end&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;2fabn-11-0&quot;&gt;five&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;2fabn-13-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-row-start&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;2fabn-16-0&quot;&gt;row1-start &lt;span class=&quot;prism-token token property&quot;&gt;grid-row-end&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;2fabn-19-0&quot;&gt;3&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;2fabn-21-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic2.zhimg.com/v2-aecbc9880a602f42ba53f019adfff5e9_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;502&quot; data-rawheight=&quot;332&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic2.zhimg.com/v2-aecbc9880a602f42ba53f019adfff5e9_b.jpg&quot; data-watermark-src=&quot;https://pic3.zhimg.com/v2-8c77095889e640b14115071674ba8b86_b.jpg&quot;/&gt;&lt;/div&gt;
2-13&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;afvo7-0-0&quot;&gt;2-2-2 grid-area&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.item &lt;span data-offset-key=&quot;d90ta-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;d90ta-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;grid-area&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;d90ta-6-0&quot;&gt;&amp;lt;name&amp;gt; | &amp;lt;row-start&amp;gt; / &amp;lt;column-start&amp;gt; / &amp;lt;row-end&amp;gt; / &amp;lt;column-end&amp;gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;d90ta-8-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;cb717-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;cb717-0-0&quot;&gt;为子元素指定名称，以便可以使用grid-template-areas，或者可以作为grid-row-start + grid-column-start+grid-row-end+grid-column-end的简写&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;e99q-0-0&quot;&gt;.item-d { grid-area: header } /*或者*/&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-25a61caa024223a8c2437bf54797701a_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;520&quot; data-rawheight=&quot;335&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic3.zhimg.com/v2-25a61caa024223a8c2437bf54797701a_b.jpg&quot; data-watermark-src=&quot;https://pic1.zhimg.com/v2-a2b5bbe1d3e1cc7d8c5d7eff9d782374_b.jpg&quot;/&gt;&lt;/div&gt;
2-14&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;de71q-0-0&quot;&gt;2-2-3 justify-self align-self place-self&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.item &lt;span data-offset-key=&quot;98jg5-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;98jg5-3-0&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;bg7f3-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;bg7f3-0-0&quot;&gt;这个就和flex布局中的align-self很像了，就如前面的justify-content一样&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;prism-token token selector&quot;&gt;.item-a &lt;span data-offset-key=&quot;74ml8-1-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;{ &lt;span data-offset-key=&quot;74ml8-3-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;justify-self&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;74ml8-6-0&quot;&gt;start&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;74ml8-8-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;align-self&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;74ml8-11-0&quot;&gt;start&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;74ml8-13-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;place-self&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;74ml8-16-0&quot;&gt;center&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;74ml8-18-0&quot;&gt;&lt;span class=&quot;prism-token token property&quot;&gt;place-self&lt;span class=&quot;prism-token token punctuation&quot;&gt;: &lt;span data-offset-key=&quot;74ml8-21-0&quot;&gt;center stretch&lt;span class=&quot;prism-token token punctuation&quot;&gt;; &lt;span data-offset-key=&quot;74ml8-23-0&quot;&gt;&lt;span class=&quot;prism-token token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot; readability=&quot;7&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-ea669bf960d58bbc28a20cbb739d08a6_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;497&quot; data-rawheight=&quot;194&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic3.zhimg.com/v2-ea669bf960d58bbc28a20cbb739d08a6_b.jpg&quot; data-watermark-src=&quot;https://pic4.zhimg.com/v2-faae704251122abe4e86f1d222e8a92f_b.jpg&quot;/&gt;&lt;/div&gt;
2-15 justify-self: start;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot; readability=&quot;7&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-1ac049c1ac63ae777cce02bd8bc96d56_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;493&quot; data-rawheight=&quot;196&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic3.zhimg.com/v2-1ac049c1ac63ae777cce02bd8bc96d56_b.jpg&quot; data-watermark-src=&quot;https://pic3.zhimg.com/v2-d0c9c1b88bc60c46ead0ce19a99bb102_b.jpg&quot;/&gt;&lt;/div&gt;
2-16 align-self: stretch;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic4.zhimg.com/v2-836e46e99abd644c8672b933cdddd48f_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;201&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic4.zhimg.com/v2-836e46e99abd644c8672b933cdddd48f_b.jpg&quot; data-watermark-src=&quot;https://pic4.zhimg.com/v2-ea12d63f6d1cd5b88af1e5089b243dfb_b.jpg&quot;/&gt;&lt;/div&gt;
2-17 place-self: center;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Image-resizerContainer&quot; data-size=&quot;normal&quot;&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;Image-captionContainer&quot; data-size=&quot;normal&quot; readability=&quot;7&quot;&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-674c009b1dec27cd7120c0a1c4a71bb6_b.png&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;501&quot; data-rawheight=&quot;191&quot; data-watermark=&quot;original&quot; data-original-src=&quot;https://pic3.zhimg.com/v2-674c009b1dec27cd7120c0a1c4a71bb6_b.jpg&quot; data-watermark-src=&quot;https://pic2.zhimg.com/v2-0f726d618128904ce878d6f654a2b675_b.jpg&quot;/&gt;&lt;/div&gt;
2-18 place-self: center stretch;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;1mk5k-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;1mk5k-0-0&quot;&gt;以上就是本期的所有翻译了，写了一下午，相信大家看到这里也很累，但是我相信你们肯定有所收获，相信大家也对flex布局和grid布局有了一个清晰的认识了，是不是觉的很强大，如果对兼容性没有要求的话，可以考虑用用哟～，真的能够提高生产力，如果觉的不错，&lt;span data-offset-key=&quot;1mk5k-0-1&quot;&gt;请点个赞哟～～&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;9h0oq&quot; data-offset-key=&quot;cflqb-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;cflqb-0-0&quot;&gt;参考链接&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;https://css-tricks.com/snippets/css/complete-guide-grid/&lt;span class=&quot;LinkCard-meta&quot;&gt;​css-tricks.com&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Mon, 01 Apr 2019 05:31:00 +0000</pubDate>
<dc:creator>speanut</dc:creator>
<og:description>前言 前言 上周发过一篇关于flex布局的文章，但发完之后我感觉我并没有写很多自己对flex布局的理解，因为原链接的作者的轮子实在是太强了，这里借用知乎大佬牛岱的话来说，当人家已经有足够好的轮子，你就</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/speanut/p/10635859.html</dc:identifier>
</item>
<item>
<title>图像识别 - 提取验证码信息 - 架构与我</title>
<link>http://www.cnblogs.com/atcloud/p/10635837.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/atcloud/p/10635837.html</guid>
<description>&lt;h2 id=&quot;tess4j&quot;&gt;1、Tess4j&lt;/h2&gt;
&lt;p&gt;最近在GitHub上看到一个图像识别的开源框架&lt;a href=&quot;https://github.com/nguyenq/tess4j&quot;&gt;tess4j&lt;/a&gt;，而且是Java版的，为此利用此框架来识别验证码中的信息，利用它提供的字体库，来提取信息，对于没有什么干扰线的验证码准确率还是蛮高的，对于有一些干扰线的就差一些，不过也可以能通过训练字体库，从而可以提高准确率的。&lt;/p&gt;
&lt;p&gt;根据范例，写了一个简单的提取验证码信息的工具类VerificationCode：&lt;/p&gt;
&lt;p&gt;主要是用这个类的extract方法，这个方法有3个参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第1个参数是指定图片的路径&lt;/li&gt;
&lt;li&gt;第2个参数是指定字体库的，其中chi_sim表示中文简体，eng表示英文&lt;/li&gt;
&lt;li&gt;第3个参数是指定是否需要去除干扰线，true表示需要，false表示不需要&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package com.swnote.tess4j.test;

import java.awt.image.BufferedImage;
import java.io.File;

import javax.imageio.ImageIO;

import com.recognition.software.jdeskew.ImageDeskew;

import net.sourceforge.tess4j.ITesseract;
import net.sourceforge.tess4j.Tesseract;
import net.sourceforge.tess4j.util.ImageHelper;

/**
 * 识别验证码
 * 
 * @author lzj
 * @date [2019-03-03]
 */
public class VerificationCode {
    
    /**
     * 配置文件
     */
    private static String config_path = &quot;src/main/resources&quot;;
    
    /**
     * 调整倾斜度的阈值
     */
    private static double deskew_threshold = 0.05d;
    
    /**
     * 提取验证码图片中的文字
     * 
     * @param img_path
     * @param lang
     * @param clear
     * @return
     */
    public static String extract(String img_path, String lang, boolean clear) throws Exception {
        // 图片文件
        File img = new File(img_path);
        
        if (clear) {
            // 将去除干扰后的图片保存在同级目录下的ext目录下
            String ext_path = img.getParentFile().getPath() + &quot;/ext&quot;;
            
            // 去除干扰
            CleanImage.cleanLinesInImage(img, ext_path);
            
            // 处理后的图片
            img = new File(ext_path, img.getName());
        }
        
        // 设置语言库
        ITesseract instance = new Tesseract();
        File directory = new File(config_path);
        String course_file = directory.getCanonicalPath();
        instance.setDatapath(course_file + &quot;/tessdata&quot;);
        // chi_sim表示中文简体
        // eng表示英文
        instance.setLanguage(lang);
        
        BufferedImage buffer_img = ImageIO.read(img);
        ImageDeskew img_deskew = new ImageDeskew(buffer_img);
        double img_skew_angle = img_deskew.getSkewAngle(); 
        if ((img_skew_angle &amp;gt; deskew_threshold || img_skew_angle &amp;lt; -(deskew_threshold))) {
            buffer_img = ImageHelper.rotateImage(buffer_img, -img_skew_angle);
        }

        String result = instance.doOCR(buffer_img);
        
        return result;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中CleanImage类是用于清楚验证码干扰线的，这个类是我从网上找到的，加上这个类有一定的效果，但是不是特别理想，希望大家能够找到更好的去除干扰线方式。&lt;/p&gt;
&lt;p&gt;在此也贴一下CleanImage类的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package com.swnote.tess4j.test;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

/**
 * 网上找到清除图片干扰工具
 */
public class CleanImage {
    
    public static void cleanLinesInImage(File sfile, String destDir) throws IOException {
        File destF = new File(destDir);
        if (!destF.exists()) {
            destF.mkdirs();
        }

        BufferedImage bufferedImage = ImageIO.read(sfile);
        int h = bufferedImage.getHeight();
        int w = bufferedImage.getWidth();

        // 灰度化
        int[][] gray = new int[w][h];
        for (int x = 0; x &amp;lt; w; x++) {
            for (int y = 0; y &amp;lt; h; y++) {
                int argb = bufferedImage.getRGB(x, y);
                // 图像加亮（调整亮度识别率非常高）
                int r = (int) (((argb &amp;gt;&amp;gt; 16) &amp;amp; 0xFF) * 1.1 + 30);
                int g = (int) (((argb &amp;gt;&amp;gt; 8) &amp;amp; 0xFF) * 1.1 + 30);
                int b = (int) (((argb &amp;gt;&amp;gt; 0) &amp;amp; 0xFF) * 1.1 + 30);
                if (r &amp;gt;= 255) {
                    r = 255;
                }
                if (g &amp;gt;= 255) {
                    g = 255;
                }
                if (b &amp;gt;= 255) {
                    b = 255;
                }
                gray[x][y] = (int) Math.pow(
                        (Math.pow(r, 2.2) * 0.2973 + Math.pow(g, 2.2) * 0.6274 + Math.pow(b, 2.2) * 0.0753), 1 / 2.2);
            }
        }

        // 二值化
        int threshold = ostu(gray, w, h);
        BufferedImage binaryBufferedImage = new BufferedImage(w, h, BufferedImage.TYPE_BYTE_BINARY);
        for (int x = 0; x &amp;lt; w; x++) {
            for (int y = 0; y &amp;lt; h; y++) {
                if (gray[x][y] &amp;gt; threshold) {
                    gray[x][y] |= 0x00FFFF;
                } else {
                    gray[x][y] &amp;amp;= 0xFF0000;
                }
                binaryBufferedImage.setRGB(x, y, gray[x][y]);
            }
        }

        // 去除干扰线条
        for (int y = 1; y &amp;lt; h - 1; y++) {
            for (int x = 1; x &amp;lt; w - 1; x++) {
                boolean flag = false;
                if (isBlack(binaryBufferedImage.getRGB(x, y))) {
                    // 左右均为空时，去掉此点
                    if (isWhite(binaryBufferedImage.getRGB(x - 1, y))
                            &amp;amp;&amp;amp; isWhite(binaryBufferedImage.getRGB(x + 1, y))) {
                        flag = true;
                    }
                    // 上下均为空时，去掉此点
                    if (isWhite(binaryBufferedImage.getRGB(x, y + 1))
                            &amp;amp;&amp;amp; isWhite(binaryBufferedImage.getRGB(x, y - 1))) {
                        flag = true;
                    }
                    // 斜上下为空时，去掉此点
                    if (isWhite(binaryBufferedImage.getRGB(x - 1, y + 1))
                            &amp;amp;&amp;amp; isWhite(binaryBufferedImage.getRGB(x + 1, y - 1))) {
                        flag = true;
                    }
                    if (isWhite(binaryBufferedImage.getRGB(x + 1, y + 1))
                            &amp;amp;&amp;amp; isWhite(binaryBufferedImage.getRGB(x - 1, y - 1))) {
                        flag = true;
                    }
                    if (flag) {
                        binaryBufferedImage.setRGB(x, y, -1);
                    }
                }
            }
        }

        // 矩阵打印
//        for (int y = 0; y &amp;lt; h; y++) {
//            for (int x = 0; x &amp;lt; w; x++) {
//                if (isBlack(binaryBufferedImage.getRGB(x, y))) {
//                    System.out.print(&quot;*&quot;);
//                } else {
//                    System.out.print(&quot; &quot;);
//                }
//            }
//            System.out.println();
//        }

        ImageIO.write(binaryBufferedImage, &quot;jpg&quot;, new File(destDir, sfile.getName()));
    }

    public static boolean isBlack(int colorInt) {
        Color color = new Color(colorInt);
        if (color.getRed() + color.getGreen() + color.getBlue() &amp;lt;= 300) {
            return true;
        }
        return false;
    }

    public static boolean isWhite(int colorInt) {
        Color color = new Color(colorInt);
        if (color.getRed() + color.getGreen() + color.getBlue() &amp;gt; 300) {
            return true;
        }
        return false;
    }

    public static int isBlackOrWhite(int colorInt) {
        if (getColorBright(colorInt) &amp;lt; 30 || getColorBright(colorInt) &amp;gt; 730) {
            return 1;
        }
        return 0;
    }

    public static int getColorBright(int colorInt) {
        Color color = new Color(colorInt);
        return color.getRed() + color.getGreen() + color.getBlue();
    }

    public static int ostu(int[][] gray, int w, int h) {
        int[] histData = new int[w * h];
        // Calculate histogram
        for (int x = 0; x &amp;lt; w; x++) {
            for (int y = 0; y &amp;lt; h; y++) {
                int red = 0xFF &amp;amp; gray[x][y];
                histData[red]++;
            }
        }

        // Total number of pixels
        int total = w * h;

        float sum = 0;
        for (int t = 0; t &amp;lt; 256; t++)
            sum += t * histData[t];

        float sumB = 0;
        int wB = 0;
        int wF = 0;

        float varMax = 0;
        int threshold = 0;

        for (int t = 0; t &amp;lt; 256; t++) {
            wB += histData[t]; // Weight Background
            if (wB == 0)
                continue;

            wF = total - wB; // Weight Foreground
            if (wF == 0)
                break;

            sumB += (float) (t * histData[t]);

            float mB = sumB / wB; // Mean Background
            float mF = (sum - sumB) / wF; // Mean Foreground

            // Calculate Between Class Variance
            float varBetween = (float) wB * (float) wF * (mB - mF) * (mB - mF);

            // Check if new maximum found
            if (varBetween &amp;gt; varMax) {
                varMax = varBetween;
                threshold = t;
            }
        }

        return threshold;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;测试&quot;&gt;2、测试&lt;/h2&gt;
&lt;p&gt;首先测试一张没有干扰线的图片，即：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/840503/201904/840503-20190401132115813-1216300725.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后调用工具类，可以得到如下结果：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/840503/201904/840503-20190401132136721-1394291295.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;结果是正确的。&lt;/p&gt;
&lt;p&gt;再一测试一个中文的，同时具有干扰线的，即：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/840503/201904/840503-20190401132155574-1745927218.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;测试结果为：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/840503/201904/840503-20190401132228819-1046698910.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;中文内容是识别出来了，但是也识别了一些其它信息。&lt;/p&gt;
&lt;h2 id=&quot;关注我&quot;&gt;关注我&lt;/h2&gt;
&lt;p&gt;以你最方便的方式关注我：&lt;br/&gt;微信公众号：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/840503/201904/840503-20190401132315368-217373781.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 01 Apr 2019 05:24:00 +0000</pubDate>
<dc:creator>架构与我</dc:creator>
<og:description>1、Tess4j 最近在GitHub上看到一个图像识别的开源框架 'tess4j' ，而且是Java版的，为此利用此框架来识别验证码中的信息，利用它提供的字体库，来提取信息，对于没有什么干扰线的验证码</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/atcloud/p/10635837.html</dc:identifier>
</item>
<item>
<title>TS学习随笔（五)-&gt;函数 - 一只菜鸟攻城狮啊</title>
<link>http://www.cnblogs.com/suihang/p/10612853.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/suihang/p/10612853.html</guid>
<description>&lt;p&gt;这篇文章我们来看一下TS里面的函数&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;函数声明&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　在 JavaScript 中，有两种常见的定义函数的方式——函数声明（Function Declaration）和函数表达式（Function Expression）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 函数声明（Function Declaration）&lt;/span&gt;
&lt;span&gt;function sum(x, y) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x +&lt;span&gt; y;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 函数表达式（Function Expression）&lt;/span&gt;
let mySum =&lt;span&gt; function (x, y) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x +&lt;span&gt; y;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function sum(x:number,y:number):number{
       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x+&lt;span&gt;y  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意，输入多余的或者少于要求的参数，是不被允许的&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
sum(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
sum(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;函数表达式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;span&gt;如果要我们现在写一个对函数表达式（Function Expression）的定义，可能会写成这样&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
let mySun =&lt;span&gt; function(x:number,y:number):number{
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x +&lt;span&gt; y  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 &lt;code&gt;mySum&lt;/code&gt;，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给 &lt;code&gt;mySum&lt;/code&gt; 添加类型，则应该是这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
let mySum(x:number,y:number)=&amp;gt;number = &lt;span&gt;function(x:number,y:number):number{
　　&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x+y}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意不要混淆了 TypeScript 中的 &lt;code&gt;=&amp;gt;&lt;/code&gt; 和 ES6 中的 &lt;code&gt;=&amp;gt;&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在 TypeScript 的类型定义中，&lt;code&gt;=&amp;gt;&lt;/code&gt; 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 ES6 中，&lt;code&gt;=&amp;gt;&lt;/code&gt; 叫做箭头函数，应用十分广泛，&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;用接口定义函数的形状&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;我们也可以使用接口的方式来定义一个函数需要符合的形状：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; SearchFunc{
       （source:&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;,subString:&lt;span&gt;string&lt;/span&gt;&lt;span&gt;）:boolean
}    

let mySearch:SearchFunc;
mySearch &lt;/span&gt;= function(source: &lt;span&gt;string&lt;/span&gt;,subString:&lt;span&gt;string&lt;/span&gt;&lt;span&gt;){
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; source.search(subString) !== -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;可选参数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;前面提到，输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？&lt;/p&gt;
&lt;p&gt;与接口中的可选属性类似，我们用 &lt;code&gt;?&lt;/code&gt; 表示可选的参数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
function buildName(firstName: &lt;span&gt;string&lt;/span&gt;, lastName?: &lt;span&gt;string&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (lastName) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; firstName + &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt; +&lt;span&gt; lastName;
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; firstName;
    }
}
let tomcat &lt;/span&gt;= buildName(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
let tom &lt;/span&gt;= buildName(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意&lt;/span&gt;：可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必须参数了&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
function buildName(firstName?: &lt;span&gt;string&lt;/span&gt;, lastName: &lt;span&gt;string&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (firstName) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; firstName + &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt; +&lt;span&gt; lastName;
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lastName;
    }
}
let tomcat &lt;/span&gt;= buildName(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
let tom &lt;/span&gt;= buildName(undefined, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; index.ts(1,40): error TS1016: A required parameter cannot follow an optional parameter.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;参数默认值&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在 ES6 中，我们允许给函数的参数添加默认值，TypeScript 会将添加了默认值的参数识别为可选参数：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
function buildName(firstName:&lt;span&gt;string&lt;/span&gt;,lastName:&lt;span&gt;string&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; firstName + &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt; +&lt;span&gt; lastName;
}
let tomcat &lt;/span&gt;= buildName(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
let tom &lt;/span&gt;= buildName(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时就不受「可选参数必须接在必需参数后面」的限制了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
function buildName(firstName: &lt;span&gt;string&lt;/span&gt; = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, lastName: &lt;span&gt;string&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; firstName + &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt; +&lt;span&gt; lastName;
}
let tomcat &lt;/span&gt;= buildName(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
let cat &lt;/span&gt;= buildName(undefined, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;剩余参数&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;ES6 中，可以使用 &lt;code&gt;...rest&lt;/code&gt; 的方式获取函数中的剩余参数（rest 参数）：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function push(array,...items){
     items.forEach(function(item){
        array.push(item)
　　})  
}

let a &lt;/span&gt;=&lt;span&gt; [];
push(a,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;事实上，&lt;code&gt;items&lt;/code&gt; 是一个数组。所以我们可以用数组的类型来定义它：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; push(array:any[],...items:any[]){
     items.forEach(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(item){
         array.push(item);
    })  
}

let a &lt;/span&gt;=&lt;span&gt; []
push(a,&lt;/span&gt;1,2,3)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意:&lt;/span&gt;rest 参数只能是最后一个参数&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;重载:&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 比如，我们需要实现一个函数 &lt;code&gt;reverse&lt;/code&gt;，输入数字 &lt;code&gt;123&lt;/code&gt; 的时候，输出反转的数字 &lt;code&gt;321&lt;/code&gt;，输入字符串 &lt;code&gt;'hello'&lt;/code&gt; 的时候，输出反转的字符串 &lt;code&gt;'olleh'&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;利用联合类型，我们可以这么实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; reverse(x: number | string): number |&lt;span&gt; string {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; x === 'number'&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Number(x.toString().split('').reverse().join(''&lt;span&gt;));
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; x === 'string'&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x.split('').reverse().join(''&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。&lt;/p&gt;
&lt;p&gt;这时，我们可以使用重载定义多个 &lt;code&gt;reverse&lt;/code&gt; 的函数类型：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; reverse(x: number): number;
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; reverse(x: string): string;
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt; reverse(x: number | string): number |&lt;span&gt; string {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; x === 'number'&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Number(x.toString().split('').reverse().join(''&lt;span&gt;));
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; x === 'string'&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x.split('').reverse().join(''&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上例中，我们重复定义了多次函数 &lt;code&gt;reverse&lt;/code&gt;，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意:&lt;/span&gt;TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;原文链接：https://github.com/xcatliu/typescript-tutorial/blob/master/basics/type-of-function.md&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 01 Apr 2019 04:31:00 +0000</pubDate>
<dc:creator>一只菜鸟攻城狮啊</dc:creator>
<og:description>这篇文章我们来看一下TS里面的函数 函数声明 在 JavaScript 中，有两种常见的定义函数的方式——函数声明（Function Declaration）和函数表达式（Function Expre</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/suihang/p/10612853.html</dc:identifier>
</item>
</channel>
</rss>