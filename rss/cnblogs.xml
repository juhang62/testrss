<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Python档案袋（ Sys 与 Import 模块) - 东小东</title>
<link>http://www.cnblogs.com/dongxiaodong/p/10423600.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dongxiaodong/p/10423600.html</guid>
<description>&lt;h2&gt;Sys模块：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;获取Python有关的环境变量：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt;  sys
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;得到Python的一些相关路径，环境变量&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;其中site-packages目录存放的是一些第三方库&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;其中lib目录存放的是一些标准库&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(sys.path)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;命令行传递参数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt;  sys
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;整体以数组打印:sys.argv&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;参数个数：len(sys.argv)&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;脚本名：sys.argv[0]&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;第一个参数：sys.argv[1]&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如 Python3 ww.py x1 x2 x3&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(sys.argv) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出：['ww.py', 'x1', 'x2', 'x3']&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(len(sys.argv)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出：4&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(sys.argv[1])  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出：x1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;利用flush模拟进度条：&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201902/1485202-20190223174717957-9660916.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys,time
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(50&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     sys.stdout.write(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;标准输出&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     sys.stdout.flush() &lt;span&gt;#&lt;/span&gt;&lt;span&gt;强制写出，不等待缓冲区满&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     time.sleep(0.2) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;延时0.2s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;其他：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(sys.version) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;得到Python的版本信息&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(sys.platform) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;返回操作系统的名称，win32&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(sys.exit(0)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;退出程序&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Import导入模块：&lt;/h2&gt;
&lt;p&gt;导入模块时会在当前路径下和环境变量（lib或者site-packages目录）里寻找&lt;/p&gt;
&lt;p&gt;简单的导入模块&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;strong&gt;的使用：&lt;/strong&gt;&lt;br/&gt;将模块解释并把内容赋值到一个变量中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;jmodel为为自定义文件模板&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; jmodel
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;一次性导入多个&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;import imodel,time&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用变量和方法时需要使用模块名&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(jmodel.jva)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;from...inport....&lt;/strong&gt;&lt;strong&gt;的使用:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接将内容复制到导入处，并执行一次&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;直接导入模块里的所有变量和方法&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;from jmodel import  *&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;指定导入某个变量或方法&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; jmodel &lt;span&gt;import&lt;/span&gt;&lt;span&gt;  jva
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;导入并重命名&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;from jmodel import  jva as mmjva&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用是直接写变量名&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(jva)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;__import__&lt;/strong&gt;&lt;strong&gt;的使用：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;import time #直接导入&lt;/span&gt;
time=&lt;span&gt;__import__&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用字符串做参数导入&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(time.time()) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出当前时间戳&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;列：本地模板引用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201902/1485202-20190223175422659-411254487.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;必须输出内容&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---- this pydong/modelx ---------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;函数&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; modelxfun():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;***** *modelxfun to *****&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导入时使用方法一：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; pydong &lt;span&gt;import&lt;/span&gt;&lt;span&gt; modelx as modeldong
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;调用函数&lt;/span&gt;
modeldong.modelxfun()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导入使用方法二：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;此处的modeldong相当于pydong&lt;/span&gt;
modeldong=&lt;span&gt;__import__&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pydong.modelx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;调用函数&lt;/span&gt;
modeldong.modelx.modelxfun()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导入使用方法三：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt;  importlib
modeldong&lt;/span&gt;=importlib.import_module(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pydong.modelx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;调用函数&lt;/span&gt;
modeldong.modelxfun()
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;包的引用：&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;导入包时会自动寻找到__init__.py，并执行&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201902/1485202-20190223175613688-1629506659.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;__init__.py:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;------- init  ---------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义变量&lt;/span&gt;
jva=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;112233&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;导入当前包下的其他模块，执行方法需加模块名&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt;  modelx
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;modelx.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义函数&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; modelfun():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******  modelfun  *****&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;main.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;导入目录模块&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;输出：------- init  ---------&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pydong
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(pydong.jva) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出：112233&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;执行模块modelx下的modelfun()方法&lt;/span&gt;
pydong.modelx.modelfun()
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 15 Mar 2019 15:27:00 +0000</pubDate>
<dc:creator>东小东</dc:creator>
<og:description>Sys模块： 获取Python有关的环境变量： 命令行传递参数 利用flush模拟进度条： 其他： Import导入模块： 导入模块时会在当前路径下和环境变量（lib或者site-packages目录</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dongxiaodong/p/10423600.html</dc:identifier>
</item>
<item>
<title>Django实战(一)-----用户登录与注册系统7（邮件确认） - 秦广王</title>
<link>http://www.cnblogs.com/jinyuanliu/p/10540083.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jinyuanliu/p/10540083.html</guid>
<description>&lt;p&gt;通常而言，我们在用户注册成功，实际登陆之前，会发送一封电子邮件到对方的注册邮箱中，表示欢迎。进一步的还可能要求用户点击邮件中的链接，进行注册确认。&lt;/p&gt;
&lt;p&gt;下面就让我们先看看如何在Django中发送邮件吧。&lt;/p&gt;
&lt;h2 id=&quot;django&quot;&gt;一、在Django中发送邮件&lt;/h2&gt;
&lt;p&gt;其实在Python中已经内置了一个smtp邮件发送模块，Django在此基础上进行了简单地封装。&lt;/p&gt;
&lt;p&gt;首先，我们需要在项目的settings文件中配置邮件发送参数，分别如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.sina.com'
EMAIL_PORT = 25
EMAIL_HOST_USER = 'xxx@sina.com'
EMAIL_HOST_PASSWORD = 'xxxxxxxxxxx'
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;第一行指定发送邮件的后端模块，大多数情况下照抄！&lt;/li&gt;
&lt;li&gt;第二行，不用说，发送方的smtp服务器地址，建议使用新浪家的；&lt;/li&gt;
&lt;li&gt;第三行，smtp服务端口，默认为25；&lt;/li&gt;
&lt;li&gt;第四行，你在发送服务器的用户名；&lt;/li&gt;
&lt;li&gt;第五行，对应用户的密码。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;特别说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;某些邮件公司可能不开放smtp服务&lt;/li&gt;
&lt;li&gt;某些公司要求使用ssl安全机制&lt;/li&gt;
&lt;li&gt;某些smtp服务对主机名格式有要求&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这些都是前人踩过的坑。&lt;/p&gt;
&lt;p&gt;配置好了参数，就可以先测试一下邮件功能了。&lt;/p&gt;
&lt;p&gt;在项目根目录下新建一个&lt;code&gt;send_mail.py&lt;/code&gt;文件，然后写入下面的内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
import os
from django.core.mail import send_mail

os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'

if __name__ == '__main__':

    send_mail(
        '来自www.cnblogs.com的测试邮件',
        '欢迎访问，这里是博客园，本站专注于Python和Django技术的分享！',
        '1129719492@qq.com',
        ['1129719492@qq.com'],
    )
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于send_mail方法，第一个参数是邮件主题subject；第二个参数是邮件具体内容；第三个参数是邮件发送方，需要和你settings中的一致；第四个参数是接受方的邮件地址列表。请按你自己实际情况修改发送方和接收方的邮箱地址。&lt;/p&gt;
&lt;p&gt;另外，由于我们是单独运行&lt;code&gt;send_mail.py&lt;/code&gt;文件，所以无法使用Django环境，需要通过os模块对环境变量进行设置，也就是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行&lt;code&gt;send_mail.py&lt;/code&gt;文件，注意不是运行Django服务器。然后到你的目的地邮箱查看邮件是否收到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592208/201903/1592208-20190315214107351-2103273677.png&quot; alt=&quot;&quot; width=&quot;468&quot; height=&quot;130&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;html&quot;&gt;二、发送HTML格式的邮件&lt;/h2&gt;
&lt;p&gt;通常情况下，我们发送的邮件内容都是纯文本格式。但是很多情况下，我们需要发送带有HTML格式的内容，比如说超级链接。一般情况下，为了安全考虑，很多邮件服务提供商都会禁止使用HTML内容，幸运的是对于以&lt;code&gt;http&lt;/code&gt;和&lt;code&gt;https&lt;/code&gt;开头的链接还是可以点击的。&lt;/p&gt;
&lt;p&gt;下面是发送HTML格式的邮件例子。删除&lt;code&gt;send_mail.py&lt;/code&gt;文件内原来的所有内容，添加下面的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
import os
from django.core.mail import EmailMultiAlternatives

os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'

if __name__ == '__main__':

    subject, from_email, to = '来自www.cnblogs.com的测试邮件', '1129719492@qq.com', '1129719492@qq.com'
    text_content = '欢迎访问www.cnblogs.com，这里是刘江的博客和教程站点，专注于Python和Django技术的分享！'
    html_content = '&amp;lt;p&amp;gt;欢迎访问&amp;lt;a href=&quot;http://www.cnblogs.com&quot; target=blank&amp;gt;www.cnblogs.com&amp;lt;/a&amp;gt;，这里是博客园，专注于Python和Django技术的分享！&amp;lt;/p&amp;gt;'
    msg = EmailMultiAlternatives(subject, text_content, from_email, [to])
    msg.attach_alternative(html_content, &quot;text/html&quot;)
    msg.send()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中的&lt;code&gt;text_content&lt;/code&gt;是用于当HTML内容无效时的替代txt文本。&lt;/p&gt;
&lt;p&gt;打开测试用的接收邮箱，可以看到链接能够正常点击，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592208/201903/1592208-20190315214440003-2138602720.png&quot; alt=&quot;&quot; width=&quot;520&quot; height=&quot;149&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个&lt;code&gt;send_mail.py&lt;/code&gt;文件只是一个测试脚本，可以从项目里删除。&lt;/p&gt;
&lt;h2 id=&quot;_1&quot;&gt;三、 创建邮件确认模型&lt;/h2&gt;
&lt;p&gt;既然要区分通过和未通过邮件确认的用户，那么必须给用户添加一个是否进行过邮件确认的属性。&lt;/p&gt;
&lt;p&gt;另外，我们要创建一张新表，用于保存用户的确认码以及注册提交的时间。&lt;/p&gt;
&lt;p&gt;全新、完整的&lt;code&gt;/login/models.py&lt;/code&gt;文件如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;44&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
from django.db import models

# Create your models here.

class User(models.Model):

    gender = (
        ('male', &quot;男&quot;),
        ('female', &quot;女&quot;),
    )

    name = models.CharField(max_length=128, unique=True)
    password = models.CharField(max_length=256)
    email = models.EmailField(unique=True)
    sex = models.CharField(max_length=32, choices=gender, default=&quot;男&quot;)
    c_time = models.DateTimeField(auto_now_add=True)
    has_confirmed = models.BooleanField(default=False)

    def __str__(self):
        return self.name

    class Meta:
        ordering = [&quot;-c_time&quot;]
        verbose_name = &quot;用户&quot;
        verbose_name_plural = &quot;用户&quot;


class ConfirmString(models.Model):
    code = models.CharField(max_length=256)
    user = models.OneToOneField('User',on_delete=models.CASCADE,)
    c_time = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.user.name + &quot;:   &quot; + self.code

    class Meta:

        ordering = [&quot;-c_time&quot;]
        verbose_name = &quot;确认码&quot;
        verbose_name_plural = &quot;确认码&quot;　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;User模型新增了&lt;code&gt;has_confirmed&lt;/code&gt;字段，这是个布尔值，默认为False，也就是未进行邮件注册；&lt;/li&gt;
&lt;li&gt;ConfirmString模型保存了用户和注册码之间的关系，一对一的形式；&lt;/li&gt;
&lt;li&gt;code字段是哈希后的注册码；&lt;/li&gt;
&lt;li&gt;user是关联的一对一用户；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c_time&lt;/code&gt;是注册的提交时间。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这里有个问题可以讨论一下：是否需要创建ConfirmString新表，可否都放在User表里？我认为如果全都放在User中，不利于管理，查询速度慢，创建新表有利于区分已确认和未确认的用户。最终的选择可以根据你的实际情况具体分析。&lt;/p&gt;
&lt;p&gt;模型修改和创建完毕，需要执行migrate命令，一定不要忘了。&lt;/p&gt;
&lt;p&gt;顺便修改一下admin.py文件，方便我们在后台修改和观察数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
# login/admin.py

from django.contrib import admin

# Register your models here.

from . import models

admin.site.register(models.User)
admin.site.register(models.ConfirmString)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;_2&quot;&gt;四、修改视图&lt;/h2&gt;
&lt;p&gt;首先，要修改我们的&lt;code&gt;register()&lt;/code&gt;视图的逻辑：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
def register(request):
    if request.session.get('is_login', None):
        # 登录状态不允许注册。你可以修改这条原则！
        return redirect(&quot;/index/&quot;)
    if request.method == &quot;POST&quot;:
        register_form = forms.RegisterForm(request.POST)
        message = &quot;请检查填写的内容！&quot;
        if register_form.is_valid():  # 获取数据
            username = register_form.cleaned_data['username']
            password1 = register_form.cleaned_data['password1']
            password2 = register_form.cleaned_data['password2']
            email = register_form.cleaned_data['email']
            sex = register_form.cleaned_data['sex']
            if password1 != password2:  # 判断两次密码是否相同
                message = &quot;两次输入的密码不同！&quot;
                return render(request, 'login/register.html', locals())
            else:
                same_name_user = models.User.objects.filter(name=username)
                if same_name_user:  # 用户名唯一
                    message = '用户已经存在，请重新选择用户名！'
                    return render(request, 'login/register.html', locals())
                same_email_user = models.User.objects.filter(email=email)
                if same_email_user:  # 邮箱地址唯一
                    message = '该邮箱地址已被注册，请使用别的邮箱！'
                    return render(request, 'login/register.html', locals())

                # 当一切都OK的情况下，创建新用户

                new_user = models.User()
                new_user.name = username
                new_user.password = hash_code(password1)  # 使用加密密码
                new_user.email = email
                new_user.sex = sex
                new_user.save()

                code = make_confirm_string(new_user)
                send_email(email, code)

                message = '请前往注册邮箱，进行邮件确认！'
                return render(request, 'login/confirm.html', locals())  # 跳转到等待邮件确认页面。
    register_form = forms.RegisterForm()
    return render(request, 'login/register.html', locals())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关键是多了下面两行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
code = make_confirm_string(new_user)
send_email(email, code)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;make_confirm_string()&lt;/code&gt;是创建确认码对象的方法，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
def make_confirm_string(user):
    now = datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)
    code = hash_code(user.name, now)
    models.ConfirmString.objects.create(code=code, user=user,)
    return code
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在文件顶部要先导入&lt;code&gt;datetime&lt;/code&gt;模块。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make_confirm_string()&lt;/code&gt;方法接收一个用户对象作为参数。首先利用datetime模块生成一个当前时间的字符串now，再调用我们前面编写的&lt;code&gt;hash_code()&lt;/code&gt;方法以用户名为基础，now为‘盐’，生成一个独一无二的哈希值，再调用ConfirmString模型的create()方法，生成并保存一个确认码对象。最后返回这个哈希值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;send_email(email, code)&lt;/code&gt;方法接收两个参数，分别是注册的邮箱和前面生成的哈希值，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
def send_email(email, code):

    from django.core.mail import EmailMultiAlternatives

    subject = '来自www.cnblogs.com的注册确认邮件'

    text_content = '''感谢注册www.cnblogs.com，专注于Python和Django技术的分享！\
                    如果你看到这条消息，说明你的邮箱服务器不提供HTML链接功能，请联系管理员！'''

    html_content = '''
                    &amp;lt;p&amp;gt;感谢注册&amp;lt;a href=&quot;http://{}/confirm/?code={}&quot; target=blank&amp;gt;www.cnblogs.com&amp;lt;/a&amp;gt;，\
                    专注于Python和Django技术的分享！&amp;lt;/p&amp;gt;
                    &amp;lt;p&amp;gt;请点击站点链接完成注册确认！&amp;lt;/p&amp;gt;
                    &amp;lt;p&amp;gt;此链接有效期为{}天！&amp;lt;/p&amp;gt;
                    '''.format('127.0.0.1:8000', code, settings.CONFIRM_DAYS)

    msg = EmailMultiAlternatives(subject, text_content, settings.EMAIL_HOST_USER, [email])
    msg.attach_alternative(html_content, &quot;text/html&quot;)
    msg.send()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先我们需要导入settings配置文件&lt;code&gt;from django.conf import settings&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;邮件内容中的所有字符串都可以根据你的实际情况进行修改。其中关键在于&lt;code&gt;&amp;lt;a href=''&amp;gt;&lt;/code&gt;中链接地址的格式，我这里使用了硬编码的'127.0.0.1:8000'，请酌情修改，url里的参数名为&lt;code&gt;code&lt;/code&gt;，它保存了关键的注册确认码，最后的有效期天数为设置在settings中的&lt;code&gt;CONFIRM_DAYS&lt;/code&gt;。所有的这些都是可以定制的！&lt;/p&gt;
&lt;p&gt;下面是邮件相关的settings配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
# 邮件配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.sina.com'
EMAIL_PORT = 25
EMAIL_HOST_USER = 'xxx@sina.com'
EMAIL_HOST_PASSWORD = 'xxxxxx'

# 注册有效期天数
CONFIRM_DAYS = 7
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;_3&quot;&gt;五、处理邮件确认请求&lt;/h2&gt;
&lt;p&gt;首先，在根目录的&lt;code&gt;urls.py&lt;/code&gt;中添加一条url：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
url(r'^confirm/$', views.user_confirm),
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其次，在&lt;code&gt;login/views.py&lt;/code&gt;中添加一个&lt;code&gt;user_confirm&lt;/code&gt;视图。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
def user_confirm(request):
    code = request.GET.get('code', None)
    message = ''
    try:
        confirm = models.ConfirmString.objects.get(code=code)
    except:
        message = '无效的确认请求!'
        return render(request, 'login/confirm.html', locals())

    c_time = confirm.c_time
    now = datetime.datetime.now()
    if now &amp;gt; c_time + datetime.timedelta(settings.CONFIRM_DAYS):
        confirm.user.delete()
        message = '您的邮件已经过期！请重新注册!'
        return render(request, 'login/confirm.html', locals())
    else:
        confirm.user.has_confirmed = True
        confirm.user.save()
        confirm.delete()
        message = '感谢确认，请使用账户登录！'
        return render(request, 'login/confirm.html', locals())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;通过&lt;code&gt;request.GET.get('code', None)&lt;/code&gt;从请求的url地址中获取确认码;&lt;/li&gt;
&lt;li&gt;先去数据库内查询是否有对应的确认码;&lt;/li&gt;
&lt;li&gt;如果没有，返回&lt;code&gt;confirm.html&lt;/code&gt;页面，并提示;&lt;/li&gt;
&lt;li&gt;如果有，获取注册的时间&lt;code&gt;c_time&lt;/code&gt;，加上设置的过期天数，这里是7天，然后与现在时间点进行对比；&lt;/li&gt;
&lt;li&gt;如果时间已经超期，删除注册的用户，同时注册码也会一并删除，然后返回&lt;code&gt;confirm.html&lt;/code&gt;页面，并提示;&lt;/li&gt;
&lt;li&gt;如果未超期，修改用户的&lt;code&gt;has_confirmed&lt;/code&gt;字段为True，并保存，表示通过确认了。然后删除注册码，但不删除用户本身。最后返回&lt;code&gt;confirm.html&lt;/code&gt;页面，并提示。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这里需要一个&lt;code&gt;confirm.html&lt;/code&gt;页面，我们将它创建在&lt;code&gt;/login/templates/login/&lt;/code&gt;下面：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
{% extends 'base.html' %}
{% block title %}注册确认{% endblock %}
{% block content %}
    &amp;lt;div class=&quot;row&quot;&amp;gt;
        &amp;lt;h1 class=&quot;text-center&quot;&amp;gt;{{ message }}&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
        window.setTimeout(&quot;window.location='/login/'&quot;,2000);
    &amp;lt;/script&amp;gt;
{% endblock %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;页面中通过JS代码，设置2秒后自动跳转到登录页面。&lt;/p&gt;
&lt;h2 id=&quot;_4&quot;&gt;六、修改登录规则&lt;/h2&gt;
&lt;p&gt;既然未进行邮件确认的用户不能登录，那么我们就必须修改登录规则，如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
def login(request):
    if request.session.get('is_login', None):
        return redirect(&quot;/index/&quot;)
    if request.method == &quot;POST&quot;:
        login_form = forms.UserForm(request.POST)
        message = &quot;请检查填写的内容！&quot;
        if login_form.is_valid():
            username = login_form.cleaned_data['username']
            password = login_form.cleaned_data['password']
            try:
                user = models.User.objects.get(name=username)
                if not user.has_confirmed:
                    message = &quot;该用户还未通过邮件确认！&quot;
                    return render(request, 'login/login.html', locals())
                if user.password == hash_code(password):  # 哈希值和数据库内的值进行比对
                    request.session['is_login'] = True
                    request.session['user_id'] = user.id
                    request.session['user_name'] = user.name
                    return redirect('/index/')
                else:
                    message = &quot;密码不正确！&quot;
            except:
                message = &quot;用户不存在！&quot;
        return render(request, 'login/login.html', locals())

    login_form = forms.UserForm()
    return render(request, 'login/login.html', locals())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关键是下面的部分：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
if not user.has_confirmed:
    message = &quot;该用户还未通过邮件确认！&quot;
    return render(request, 'login/login.html', locals())
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;_5&quot;&gt;七、功能展示&lt;/h2&gt;
&lt;p&gt;首先，通过admin后台删除原来所有的用户。&lt;/p&gt;
&lt;p&gt;进入注册页面，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592208/201903/1592208-20190315224019360-611654865.png&quot; alt=&quot;&quot; width=&quot;422&quot; height=&quot;417&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击提交后，跳转到提示信息页面，2秒后再跳转到登录页面。&lt;/p&gt;
&lt;p&gt;进入admin后台，查看刚才建立的用户，可以看到其处于未确认状态，尝试登录也不通过：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1592208/201903/1592208-20190315225356403-138135277.png&quot; alt=&quot;&quot; width=&quot;357&quot; height=&quot;92&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592208/201903/1592208-20190315225437147-1620011661.png&quot; alt=&quot;&quot; width=&quot;446&quot; height=&quot;266&quot;/&gt;&lt;/p&gt;
&lt;p&gt;进入你的测试邮箱，查看注册邮件：&lt;/p&gt;
&lt;p&gt;点击确认后再进来，ok了。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1592208/201903/1592208-20190315225604370-1096457839.png&quot; alt=&quot;&quot; width=&quot;520&quot; height=&quot;275&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 15 Mar 2019 14:57:00 +0000</pubDate>
<dc:creator>秦广王</dc:creator>
<og:description>通常而言，我们在用户注册成功，实际登陆之前，会发送一封电子邮件到对方的注册邮箱中，表示欢迎。进一步的还可能要求用户点击邮件中的链接，进行注册确认。 下面就让我们先看看如何在Django中发送邮件吧。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jinyuanliu/p/10540083.html</dc:identifier>
</item>
<item>
<title>至曾经自学编程的十个月 - zhang_derek</title>
<link>http://www.cnblogs.com/derek1184405959/p/10540060.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/derek1184405959/p/10540060.html</guid>
<description>&lt;p&gt;今天星期五，下班路上没事就进自己的博客园逛了一下，发现半年没更新了。看着之前写的博客，感慨万千！&lt;/p&gt;
&lt;p&gt;很多通过我博客加我好友的人都会有这么一段聊天记录：&lt;/p&gt;
&lt;p&gt;xxx：“你是计算机专业的吗，你现在在做python开发工程师吗。”&lt;br/&gt;我：“我是机械专业，工作也跟编程毫不相干，学编程完全就是自学。”&lt;br/&gt;xxx：“自学都能学成这样，好厉害”。&lt;br/&gt;我：“没什么”&lt;br/&gt;上面的对话就当个引子，暂且放一边，先讲讲我学编程的经历吧（2017-10～2018-07）。&lt;/p&gt;
&lt;p&gt;我是一个大专生，90后，毕业了n多年，在A公司做B工作。稳定轻松，五天八小时，收入也过得去。因为做B工作也有三年多经验了，上班基本没有太大压力，每天朝九晚六，两点一线，好不自在。下班了看看电视，打打王者，周末了和朋友出去吃吃饭，看看电影，偶尔还会旅游。&lt;/p&gt;
&lt;p&gt;时间久了，开始讨厌这种无所事事的生活了？我还年轻，就这样每天得过且过吗？于是我开始给自己找麻烦了，利用业余时间自学编程。&lt;/p&gt;
&lt;p&gt;百度了很多，自学学什么语言好，现在什么语言最流行，最终决定python。在网上找了xxx的培训视频开始学习，于是走上了十个月的不归路。你永远不知道一个学机械的去自学编程有多难，除非你自己去尝试。我把我自学编程的历程分为四个阶段吧。&lt;/p&gt;
&lt;p&gt;一、放弃&lt;br/&gt;决定学编程的时候是九月底，计划国庆放假在家开始学。首先装环境，费了大半天时间，装好之后终于可以敲代码了。当屏幕出现：“hello world”的时候，别提多有成就感了。于是跟着视频往后面学，if,for,while,数据类型…。40分钟的视频学了两个小时，代码都是照着敲甚至直接复制，有的代码是什么意思都不懂，也没人问，只看到结果对就很高兴了。也许是学习新东西的初始新鲜感吧，就这样坚持了两三天。后面学到函数、面向对象那里之后，彻底蒙圈了，完全听不懂，连视频里面的代码实例也懒得跟着敲。开始怀疑自学是不可能学进去的。然后去他的，把教学视频一关，该干嘛干嘛去了。就这样一晃大半个月过去了，中间没有一天学习过编程。&lt;/p&gt;
&lt;p&gt;二、开始、放弃、开始、放弃…&lt;br/&gt;差不多到了十月月底的时候，某一天闲着无聊，又想起了学编程。于是在qq里面加了很多学python的编程群，想请教他们，正巧碰到群友C，也是自学编程的（那时候C通过自学已经学的很不错了），C跟我说了很多鼓励的话，使我信心大增。&lt;/p&gt;
&lt;p&gt;开始学吧，这次是看书（Python编程基础）加视频，果然看书再看视频效果比较好，起码能大概听得懂。就这样到了十一月中旬的样子把python基础部分的视频看完了。&lt;/p&gt;
&lt;p&gt;按照视频学习的进度，后面该到学习前端了。好吧，这又是一个全新的语言。先学html，能听懂。css大概懂，js，jq…跟不上。真烦，要学的东西那么多。于是把前端先跳过，学django项目部分去了，这个也一样跟不上。现实就是这么残酷，我越来越觉得自己不适合学编程了。中间又有半个月没摸过编程了。&lt;/p&gt;
&lt;p&gt;三、重新开始&lt;br/&gt;快到十二月中旬，这时候差不多已经自学了两个半月吧。有一天，看到qq消息，是群友C发的：&lt;br/&gt;C：“你编程自学的怎么样了”。&lt;br/&gt;我：“我觉得我不适合，放弃了”。&lt;br/&gt;C：此处省略两百字（一大堆的话）&lt;/p&gt;
&lt;p&gt;“自己真的足够努力吗？真的全力以赴了吗？”我开始反省，想一想前面学习的时候确实没有去认真的对待，敷衍了事，走马观花。我决定重新学，学完之后并写好博客。十二月中下旬到一月下旬这之间学的还算可以，主要是把前面所有学的重新再一遍，并写上博客。&lt;/p&gt;
&lt;p&gt;四、疯狂&lt;/p&gt;
&lt;p&gt;到了二月份，我开始进入了疯狂学习编程阶段。用疯狂一点都不夸张，你可以通过看二月份到六七月份的博客更新频率就可以看得出来。说下这段期间的概况吧：&lt;/p&gt;
&lt;p&gt;1.这几个月期间我最多只有三天没学习编程。&lt;br/&gt;2.平时每天晚上八点开始学，最少学到十二点。经常是到零点之后，最晚学到凌晨三点，第二天还要上班…&lt;br/&gt;3.周末从下午两点学到晚上零点，或者更晚，除去吃饭洗澡都是在学习。&lt;br/&gt;4.下班回家看视频，看完后写博客。上班的时候看电子书版编程书，整理博客，看别人的博客，看官方文档等等。&lt;br/&gt;5.看完了xxx培训班的整套视频，除了一两个项目没跟着做。看完了慕课网上大多数python教学视频，看完了网易云课堂上的几套视频。&lt;br/&gt;6.写了将近两百篇博客，建了一个学习群。&lt;/p&gt;
&lt;p&gt;五、不能说用放弃吧，我也不知道用什么词形容好&lt;/p&gt;
&lt;p&gt;有人会问为什么我后来不学编程了呢？&lt;br/&gt;1.我本来就是自学的，我的工作不是这方面。&lt;br/&gt;2.最主要的原因：&lt;strong&gt;我已经很满足了，最起码对自己交出了一个完美答卷（我不知道自己现在是什么编程水平，也不重要，对于我自己，我觉得够了）。&lt;/strong&gt;&lt;br/&gt;3.经过几个月的疯狂学习，身体也需要修养了。多花点时间去陪陪家人朋友&lt;br/&gt;4.当初确实也想过去做编程行业，投了简历发现并不可能。这个也不太重要，我觉得编程当成兴趣还是挺好的。当成工作挺累的，时时刻刻需要学习，家人第一。&lt;/p&gt;
&lt;h2 id=&quot;目标&quot;&gt;2019目标&lt;/h2&gt;
&lt;p&gt;今年我又给自己定了目标了。&lt;/p&gt;
&lt;p&gt;1.一个星期读一两本书，一年读80本书左右。&lt;br/&gt;2.读完每本书后写读书笔记（写在简书上面），不限字数，不限格式，想到什么就写什么，总之读完后有记录。&lt;br/&gt;3.每天背40个单词，一天都不能间断。&lt;/p&gt;
&lt;p&gt;我的座右铭：You got a dream, you gotta protect it. People can't do something themselves,they wanna tell you you can't do it.If you want something, go get it.&lt;/p&gt;
</description>
<pubDate>Fri, 15 Mar 2019 14:52:00 +0000</pubDate>
<dc:creator>zhang_derek</dc:creator>
<og:description>今天星期五，下班路上没事就进自己的博客园逛了一下，发现半年没更新了。看着之前写的博客，感慨万千！ 很多通过我博客加我好友的人都会有这么一段聊天记录： xxx：“你是计算机专业的吗，你现在在做pytho</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/derek1184405959/p/10540060.html</dc:identifier>
</item>
<item>
<title>开源WAF（mod_security）的搭建和分析 - yuleitest</title>
<link>http://www.cnblogs.com/yuleitest/p/10539998.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yuleitest/p/10539998.html</guid>
<description>&lt;h4&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;最近需要测试关于waf的工具，要知道waf是怎么回事，必须搭建waf环境，同时才能看懂关于绕过waf的一些技术。&lt;/p&gt;
&lt;p&gt;OWASP ModSecurity核心规则集（CRS）是一组用于ModSecurity或兼容的Web应用程序防火墙的通用攻击检测规则。CRS旨在保护Web应用程序免受各种攻击，包括OWASP十大攻击，并提供最少的虚假警报。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/SpiderLabs/owasp-modsecurity-crs&quot;&gt;https://github.com/SpiderLabs/owasp-modsecurity-crs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为经常使用kali,因此环境全是在kali上面搭建，也不会再重新下载别的系统。&lt;/p&gt;
&lt;p&gt;版本&lt;/p&gt;
&lt;p&gt;~# cat /proc/version&lt;/p&gt;
&lt;p&gt;Linux version 4.19.0-kali3-amd64 (devel@kali.org) (gcc version 8.2.0 (Debian 8.2.0-16)) #1 SMP Debian 4.19.20-1kali1 (2019-02-14)&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;安装modsecurity&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;apt-get install modsecurity-crs&lt;/p&gt;
&lt;p&gt;它会自动加载相关组件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233017023-610589858.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;配置modsecurity&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;修改/etc/modsecurity/下的modsecurity.conf&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;mv /etc/modsecurity/modsecurity.conf-recommended modsecurity.conf
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;将文件中
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;SecRuleEngine DetectionOnly修改为SecRuleEngine On&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233017931-320290475.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;测试SQL注入&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;在上面的配置启用之前也就是默认是仅检测（&lt;span&gt;DetectionOnly&lt;/span&gt;），我们先来看看效果&lt;/p&gt;
&lt;p&gt;使用DVWA中sql注入测试即可，可看到存在sql注入&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233018662-945956713.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;启用&lt;span&gt;安全规则引擎SecRuleEngine （SecRuleEngine On）之后，需重启apache2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233019226-1498109022.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显示403 Forbidden错误，可见waf已经生效。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;工作原理&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;我们回过头分析下它的一个配置&lt;/p&gt;
&lt;p&gt;1.首先我们安装了modsecurity-crs，它会自动安装apache2的库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233019875-1991151737.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;跟进这个文件，我们看到它包含了刚才我们配置的文件，并且和它自己的安装目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233020549-1130260838.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;跟进安装目录，又包含了owasp-crs.load这个文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233021042-74442556.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;继续跟进这个owasp-crs.load文件，它包含了自己目录下rules下的所有文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233021616-2126681952.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;规则文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233022288-1834061350.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由此可以看出： 规则文件一共有如下几类&lt;/p&gt;
&lt;p&gt;1. request 请求&lt;/p&gt;
&lt;p&gt;2. response 响应&lt;/p&gt;
&lt;p&gt;3.错误 有iis的 java的php的&lt;/p&gt;
&lt;p&gt;4.扫描类 sannner&lt;/p&gt;
&lt;p&gt;5.unix-shell类，也就是木马类&lt;/p&gt;
&lt;p&gt;我们重新梳理下刚才的逻辑，也就是调用过程：&lt;/p&gt;
&lt;p&gt;首选我们发了一个sql注入的请求给apache2 ，apach2发现库中又引用security2.conf这个配置，于是调用所有与mod-security相关的规则集。最后经过一些列处理，返回了403错误，这个mod-security就这样被调用起来了。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;规则分析&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;我们打开apache2的日志目录，在/var/log/apach2下&lt;/p&gt;
&lt;p&gt;发现存在一个mod-security的日志，这个就是waf审计的日志，它记录了了所有攻击日志&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233023366-1050196708.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们发起一个sql注入探测攻击之后，本应该返回给我们一个You have an error in your SQL syntax; check the manual tha…….等等的sql查询错误的，为什么返回给我们一个403呢&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233024439-1387494080.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们跟进下面的Pattern match，意思就是，它匹配到了如下规则目录中的一些信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233025236-1262712535.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到好多Pattern match，打开其中一个response的规则&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233026199-2144555973.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;根据显示第373行，我们打开该规则文件中的373行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233027179-1641411843.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可见，正是匹配到了该响应，它是由多个分隔符形成的，也就是它匹配到了规则其中的一个分隔符中的数据，所以才认为这是一个攻击行为。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/741432/201903/741432-20190315233027783-877288941.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看了几个规则文件和命名之后，至此，我们大概知道了它的一个检测过程，至少分为以下3步&lt;/p&gt;
&lt;p&gt;1.它首先会去检测请求头Request-Headers&lt;/p&gt;
&lt;p&gt;2.它会去检测请求Request&lt;/p&gt;
&lt;p&gt;3.检测响应response&lt;/p&gt;
&lt;p&gt;如果以上三步都没有问题，那么会认为这是一个正常访问，而非攻击，为了消除误报，它会逐个步骤匹配相关规则，达到一定条件那么它将会返回403错误。至于这个条件是什么以后再去查找相关资料深入研究。&lt;/p&gt;
</description>
<pubDate>Fri, 15 Mar 2019 14:37:00 +0000</pubDate>
<dc:creator>yuleitest</dc:creator>
<og:description>背景 最近需要测试关于waf的工具，要知道waf是怎么回事，必须搭建waf环境，同时才能看懂关于绕过waf的一些技术。 OWASP ModSecurity核心规则集（CRS）是一组用于ModSecur</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yuleitest/p/10539998.html</dc:identifier>
</item>
<item>
<title>一篇入门 — Gatling 性能测试手册 - 旻天clock</title>
<link>http://www.cnblogs.com/clockq/p/10539974.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/clockq/p/10539974.html</guid>
<description>&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;本篇博客，旨在记录视频学习的要点，所以格式随意， 方便本人日后自考和回忆，有兴趣的朋友可以评论讨论。&lt;br/&gt;原文地址：&lt;a href=&quot;https://www.cnblogs.com/clockq/p/10539974.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/clockq/p/10539974.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;性能测试时什么&quot;&gt;1.1 性能测试时什么？&lt;/h2&gt;
&lt;p&gt;==性能测试时通过自动化的测试工具模拟多种&lt;strong&gt;正常&lt;/strong&gt;、&lt;strong&gt;峰值&lt;/strong&gt;、以及&lt;strong&gt;异常负载&lt;/strong&gt;条件，以此来对系统的各项性能指标进行评测。==&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;性能测试 = 负载测试 + 压力测试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;通过负载测试，确定在各种工作负载下系统的性能，目的是测试系统的负载逐渐增加的情况下，系统的各项性能指标的变化情况。&lt;/li&gt;
&lt;li&gt;通过压力测试，确定一个系统的瓶颈或者不能接受的性能点，来获得系统所能提供的最大服务级别。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;性能测试的目的&quot;&gt;1.2 ==性能测试的目的==&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;评估系统的能力&lt;/li&gt;
&lt;li&gt;识别体系中的弱点&lt;/li&gt;
&lt;li&gt;系统调优&lt;/li&gt;
&lt;li&gt;检查软件中的问题&lt;/li&gt;
&lt;li&gt;验证系统稳定性&lt;/li&gt;
&lt;li&gt;验证系统可靠性&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;性能测试的常见观察指标&quot;&gt;1.3 性能测试的常见观察指标&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Avg Rps&lt;/strong&gt;: 平均每秒响应次数 = 总请求时间 / 秒数&lt;/li&gt;
&lt;li&gt;Avg time to last byte per terstion(mstes): 平均每秒业务脚本迭代次数&lt;/li&gt;
&lt;li&gt;Successful Rounds: 成功的请求&lt;/li&gt;
&lt;li&gt;Failed Hits: 失败的单击次数&lt;/li&gt;
&lt;li&gt;Hits Per Second: 每秒单击次数&lt;/li&gt;
&lt;li&gt;Successful Hits Per Second: 每秒成功的单击次数&lt;/li&gt;
&lt;li&gt;Failed Hist Per Second: 每秒失败的单击次数&lt;/li&gt;
&lt;li&gt;Attempted Connections: 尝试连接数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throughput&lt;/strong&gt;: 吞吐率&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;同时，对于服务端的CPU占有率，内存占有率，数据库连接池等也是需要观察的重点。&lt;/p&gt;
&lt;h2 id=&quot;性能测试的基本流程&quot;&gt;1.4 性能测试的基本流程&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;明确性能测试需求&lt;/li&gt;
&lt;li&gt;制定性能测试方案&lt;/li&gt;
&lt;li&gt;编写性能测试案例&lt;/li&gt;
&lt;li&gt;执行性能测试案例&lt;/li&gt;
&lt;li&gt;分析性能测试结果&lt;/li&gt;
&lt;li&gt;生成性能测试报告&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;安装gatling&quot;&gt;2.1 安装Gatling&lt;/h2&gt;
&lt;p&gt;获取安装包 &lt;a href=&quot;http://gatling.io.download/&quot; class=&quot;uri&quot;&gt;http://gatling.io.download/&lt;/a&gt;&lt;br/&gt;下载成功后解压即可 &lt;strong&gt;使用Gatling需要安装JDK&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用gatling&quot;&gt;2.2 使用Gatling&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;编写测试脚本（这块重点学习和讲解）或者使用自带的录制器（bin/recorder.sh)&lt;/li&gt;
&lt;li&gt;执行测试脚本(bin/gatling.sh)，在开启的窗口中选择要执行的脚本&lt;/li&gt;
&lt;li&gt;查看测试报告(报告默认在“result/”目录下)&lt;/li&gt;
&lt;li&gt;分析测试结果&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;导入依赖&quot;&gt;3.1 导入依赖&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;    &amp;lt;properties&amp;gt;
        &amp;lt;gatling.version&amp;gt;2.1.7&amp;lt;/gatling.version&amp;gt;
        &amp;lt;gatling-plugin.version&amp;gt;2.1.7&amp;lt;/gatling-plugin.version&amp;gt;
    &amp;lt;/properties&amp;gt;
    
    &amp;lt;!-- Gatling Module --&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;io.gatling.highcharts&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;gatling-charts-highcharts&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${gatling.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;导入插件&quot;&gt;3.2 导入插件&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;build&amp;gt;
    &amp;lt;sourceDirectory&amp;gt;src/test/scala&amp;lt;/sourceDirectory&amp;gt;
    &amp;lt;testSourceDirectory&amp;gt;src/test/scala&amp;lt;/testSourceDirectory&amp;gt;
    &amp;lt;plugins&amp;gt;
        &amp;lt;!-- Gatling Maven plugin that runs the load-simulation. --&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;io.gatling&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;gatling-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${gatling-plugin.version}&amp;lt;/version&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;configFolder&amp;gt;src/test/resources&amp;lt;/configFolder&amp;gt;
                &amp;lt;dataFolder&amp;gt;src/test/resources/data&amp;lt;/dataFolder&amp;gt;
                &amp;lt;resultsFolder&amp;gt;target/gatling/results&amp;lt;/resultsFolder&amp;gt;
                &amp;lt;runMultipleSimulations&amp;gt;true&amp;lt;/runMultipleSimulations&amp;gt;
                &amp;lt;simulationsFolder&amp;gt;src/test/scala/com/pharbers/gatling&amp;lt;/simulationsFolder&amp;gt;

                &amp;lt;simulationClass&amp;gt;com.pharbers.gatling.scenario.getHome&amp;lt;/simulationClass&amp;gt;

                &amp;lt;!--    &amp;lt;noReports&amp;gt;false&amp;lt;/noReports&amp;gt; --&amp;gt;
                &amp;lt;!--   &amp;lt;reportsOnly&amp;gt;directoryName&amp;lt;/reportsOnly&amp;gt; --&amp;gt;
                &amp;lt;!--   &amp;lt;simulationClass&amp;gt;foo.Bar&amp;lt;/simulationClass&amp;gt; --&amp;gt;
                &amp;lt;!--   &amp;lt;jvmArgs&amp;gt; --&amp;gt;
                &amp;lt;!--     &amp;lt;jvmArg&amp;gt;-DmyExtraParam=foo&amp;lt;/jvmArg&amp;gt; --&amp;gt;
                &amp;lt;!--   &amp;lt;/jvmArgs&amp;gt; --&amp;gt;
                &amp;lt;!--    &amp;lt;fork&amp;gt;true&amp;lt;/fork&amp;gt; --&amp;gt;
                &amp;lt;!--    &amp;lt;propagateSystemProperties&amp;gt;true&amp;lt;/propagateSystemProperties&amp;gt; --&amp;gt;
                &amp;lt;!--   &amp;lt;failOnError&amp;gt;true&amp;lt;/failOnError&amp;gt; --&amp;gt;
            &amp;lt;/configuration&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;编写脚本&quot;&gt;3.3 编写脚本&lt;/h2&gt;
&lt;p&gt;忽略&lt;br/&gt;注意： 脚本要写在 src/test/scala 下&lt;/p&gt;
&lt;h2 id=&quot;执行脚本&quot;&gt;3.4 执行脚本&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;mvn gatling:execute&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;分析报告&quot;&gt;3.5 分析报告&lt;/h2&gt;

&lt;p&gt;我们先以测试“博客园系统登录页”性能为例，讲解一次测试过程的几个步骤，和测试报告怎么分析。&lt;/p&gt;
&lt;h2 id=&quot;明确性能测试需求&quot;&gt;4.1 明确性能测试需求&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;好的开始是成功的一半&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;明确性能测试的需求是至关重要的，所以我们要先有一份测试需求实例&lt;/p&gt;
&lt;p&gt;测试需求名称： 博客园登录接口性能测试&lt;br/&gt;| 信息描述 | 描述内容 |&lt;br/&gt;| :--: | :--: |&lt;br/&gt;| 参与者 | 张三 |&lt;br/&gt;| 概述 | 测试博客园登录接口的最大并发量 |&lt;br/&gt;| 前置条件 | 博客园前端页面已经成功部署，并可以正常访问 |&lt;br/&gt;| 后置条件 | 无 |&lt;br/&gt;| 业务数据 | 测试登录账号 |&lt;br/&gt;| 不可测试原因 | 网络不可达 |&lt;br/&gt;| 流程规则 | 用户访问博客园登录页，滞留5s，之后调用登录接口 |&lt;br/&gt;| 业务规则 | 无 |&lt;br/&gt;| 页面规则 | 无 |&lt;br/&gt;| 特殊规则 | 无 |&lt;br/&gt;| 接口规则 | 无 |&lt;br/&gt;| 检查内容 | 检查当用户量达到多大时，会导致服务端阻塞，用户响应时间超过5s |&lt;/p&gt;
&lt;h2 id=&quot;编写性能测试案例&quot;&gt;4.2 编写性能测试案例&lt;/h2&gt;
&lt;p&gt;测试需求名称： 博客园登录接口性能测试&lt;br/&gt;| 测试步骤 | 步骤描述 | 预期结果 |&lt;br/&gt;| :--: | :--: | :--: |&lt;br/&gt;| 步骤 1 | 是否测试博客园登录接口最大并发量 | 确定性能测试登录接口的并发用户数量 |&lt;br/&gt;| 步骤 2 | 启动博客园的前端工程 | 前端工程启动成功 |&lt;br/&gt;| 步骤 3 | 准备性能测试脚本 | 性能测试脚本准备完成 |&lt;br/&gt;| 步骤 4 | 准备测试数据 | 无 |&lt;br/&gt;| 步骤 5 | 执行脚本，验证系统是否满足相关性能测试指标 平均响应时长&amp;lt;2s 95%响应时长&amp;lt;= 5s | 系统满足相关性能测试指标 |&lt;br/&gt;| 步骤 5 | 执行1小时压力测试 | 1. 系统满足相关性能测试指标 2. 1小时压力测试中脚本未报错 |&lt;/p&gt;
&lt;h2 id=&quot;执行性能测试案例&quot;&gt;4.3 执行性能测试案例&lt;/h2&gt;
&lt;p&gt;按照性能测试案例编写测试脚本&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package com.pharbers.gatling.base

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.http.config.HttpProtocolBuilder

object phHttpProtocol {
    implicit val noneWhiteList: io.gatling.core.filter.WhiteList = WhiteList()
    implicit val noneBlackList: io.gatling.core.filter.BlackList = BlackList()
    implicit val staticBlackList: io.gatling.core.filter.BlackList = BlackList(&quot;&quot;&quot;.*\.js&quot;&quot;&quot;, &quot;&quot;&quot;.*\.css&quot;&quot;&quot;, &quot;&quot;&quot;.*\.gif&quot;&quot;&quot;, &quot;&quot;&quot;.*\.jpeg&quot;&quot;&quot;, &quot;&quot;&quot;.*\.jpg&quot;&quot;&quot;, &quot;&quot;&quot;.*\.ico&quot;&quot;&quot;, &quot;&quot;&quot;.*\.woff&quot;&quot;&quot;, &quot;&quot;&quot;.*\.(t|o)tf&quot;&quot;&quot;, &quot;&quot;&quot;.*\.png&quot;&quot;&quot;)
    implicit val staticWhiteList: io.gatling.core.filter.WhiteList = WhiteList(&quot;&quot;&quot;.*\.js&quot;&quot;&quot;, &quot;&quot;&quot;.*\.css&quot;&quot;&quot;, &quot;&quot;&quot;.*\.gif&quot;&quot;&quot;, &quot;&quot;&quot;.*\.jpeg&quot;&quot;&quot;, &quot;&quot;&quot;.*\.jpg&quot;&quot;&quot;, &quot;&quot;&quot;.*\.ico&quot;&quot;&quot;, &quot;&quot;&quot;.*\.woff&quot;&quot;&quot;, &quot;&quot;&quot;.*\.(t|o)tf&quot;&quot;&quot;, &quot;&quot;&quot;.*\.png&quot;&quot;&quot;)

    def apply(host: String)
             (implicit blackLst: io.gatling.core.filter.BlackList, whiteLst: io.gatling.core.filter.WhiteList): HttpProtocolBuilder = { http
                .baseURL(host)
                .inferHtmlResources(blackLst, whiteLst)
                .acceptHeader(&quot;application/json, text/javascript, */*; q=0.01&quot;)
                .acceptEncodingHeader(&quot;gzip, deflate&quot;)
                .acceptLanguageHeader(&quot;zh-CN,zh;q=0.9,zh-TW;q=0.8&quot;)
                .doNotTrackHeader(&quot;1&quot;)
                .userAgentHeader(&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36&quot;)
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;package com.pharbers.gatling.base

object phHeaders {

    val headers_base = Map(
        &quot;Accept&quot; -&amp;gt; &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;,
        &quot;Upgrade-Insecure-Requests&quot; -&amp;gt; &quot;1&quot;)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;package com.pharbers.gatling.scenario

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.core.structure.ChainBuilder

import com.pharbers.gatling.base.phHeaders.headers_base

object getHome {
    val getHome: ChainBuilder = exec(http(&quot;home&quot;)
            .get(&quot;/&quot;)
            .headers(headers_base))
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;package com.pharbers.gatling.scenario

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.core.structure.ChainBuilder

import com.pharbers.gatling.base.phHeaders.headers_json

object userLogin {
    val feeder = csv(&quot;loginUser.csv&quot;).random
    println(feeder)

    val login: ChainBuilder = exec(http(&quot;login&quot;)
            .get(&quot;/api/user/login&quot;)
            .headers(headers_json)
            .body(StringBody(&quot;&quot;&quot;{ &quot;condition&quot; :  { &quot;email&quot; : &quot;nhwa&quot;, &quot;password&quot; : &quot;nhwa&quot; } }&quot;&quot;&quot;)).asJSON)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;package com.pharbers.gatling.simulation

import io.gatling.core.Predef._
import scala.concurrent.duration._

import com.pharbers.gatling.scenario._
import com.pharbers.gatling.base.phHttpProtocol

class userLogin extends Simulation {
    import com.pharbers.gatling.base.phHttpProtocol.{noneBlackList, noneWhiteList}

    val httpProtocol = phHttpProtocol(&quot;http://192.168.100.141:9000&quot;)

    val scn = scenario(&quot;user_login&quot;)
        .exec(
            getHome.getHome
                    .pause(5 seconds),
            userLogin.login
                    .pause(60 seconds)
        )

    setUp(scn.inject(rampUsers(1000) over (3 seconds))).protocols(httpProtocol)

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;并执行上述脚本&lt;/p&gt;
&lt;h2 id=&quot;分析性能测试结果&quot;&gt;4.4 分析性能测试结果&lt;/h2&gt;
&lt;p&gt;看下图，可以看到67% + 8%的请求可以在1.2s内完全，同时在1000用户的并发测试下，会有用户请求不到资源，也就是加载失败。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;其实，这个地方，可以通过修改gatling.conf来改变表格的渲染区间，使结果更符合我们的测试要求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/clockQ/FigureBed/blob/master/document/20180606/gatling%20global%20info.png?raw=true&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里，75th的总响应时间=1s，还是很快的，但95th的总响应时间&amp;gt;9s, 所以不符合我们的测试要求。&lt;br/&gt;&lt;img src=&quot;https://github.com/clockQ/FigureBed/blob/master/document/20180606/gatling%20statistics%20info.png?raw=true&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们使用递增的方式，在3s内逐渐增加用户并发量，并且用户会滞留5s + 60s,在下图中就得到了体现&lt;br/&gt;&lt;img src=&quot;https://github.com/clockQ/FigureBed/blob/master/document/20180606/gatling%20user%20along%20the%20Simulation.png?raw=true&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下图是本次测试，在每个时间点的请求情况，包含请求状态（成功，失败）和请求数量&lt;br/&gt;&lt;img src=&quot;https://github.com/clockQ/FigureBed/blob/master/document/20180606/gatling%20number%20of%20request%20per%20second.png?raw=true&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;还有更多图表，就不一一展示了，我们主要就是查看前两个图表，以此判断服务器所能承受的压力。&lt;/p&gt;
&lt;p&gt;当然，如果需要考查更多标准，就需要查看其它图表，比如延迟分布图，负载分布图等等。。。。&lt;/p&gt;
&lt;h2 id=&quot;生成性能测试报告&quot;&gt;4.5 生成性能测试报告&lt;/h2&gt;
&lt;p&gt;一份合格的性能测试报告，至少应该包含如下内容:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;测试基本信息： 包含： 测试目的，报告目标读者，术语定义，参考资料&lt;/li&gt;
&lt;li&gt;测试环境描述： 包含： 服务器软硬件环境，网络环境，测试工具，测试人员&lt;/li&gt;
&lt;li&gt;性能测试案例执行分析: 需要详细描述每个测试案例的执行情况，以及对对应测试结果进行分析&lt;/li&gt;
&lt;li&gt;测试结果综合分析及建议：对本次性能测试做综合分析，并给出测试结论和改进建议&lt;/li&gt;
&lt;li&gt;测试经验总结&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;6&quot;&gt;

&lt;h2 id=&quot;测试信息&quot;&gt;测试信息&lt;/h2&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;测试人员&lt;/td&gt;
&lt;td&gt;齐钟昱&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;测试目的&lt;/td&gt;
&lt;td&gt;检查当用户量达到多大时，会导致服务端阻塞，用户响应时间超过5s&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;术语定义&lt;/td&gt;
&lt;td&gt;50th，安装递增排序后，排在50%的请求的信息&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;术语定义&lt;/td&gt;
&lt;td&gt;95th，安装递增排序后，排在95%的请求的信息&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;参考资料&lt;/td&gt;
&lt;td&gt;零成本实现Web性能测试[电子工业出版社]&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;测试环境&quot;&gt;测试环境&lt;/h2&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;服务器系统&lt;/td&gt;
&lt;td&gt;CentOS Linux release 7.4.1708 (Core)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;服务器集群数量&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;服务器内存（台）&lt;/td&gt;
&lt;td&gt;16G&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;服务器CPU核心数（台）&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;服务器硬盘空间（台）&lt;/td&gt;
&lt;td&gt;256G SSD&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;JAVA版本&lt;/td&gt;
&lt;td&gt;1.8.121&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Scala版本&lt;/td&gt;
&lt;td&gt;2.11.8&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Play版本&lt;/td&gt;
&lt;td&gt;2.5.0-M2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Redis版本&lt;/td&gt;
&lt;td&gt;4.0.1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;MongoDB版本&lt;/td&gt;
&lt;td&gt;3.4.4&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Node.js&lt;/td&gt;
&lt;td&gt;8.11.2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Ember.js&lt;/td&gt;
&lt;td&gt;2.18.2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;网络环境&lt;/td&gt;
&lt;td&gt;公司局域网&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;测试工具&lt;/td&gt;
&lt;td&gt;Gatling 2.1.7&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;结果分析&quot;&gt;结果分析&lt;/h2&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;13.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;9&quot;&gt;&lt;td&gt;博客园系统登录页的最大访问量&lt;/td&gt;
&lt;td&gt;在当前环境下可以1000用户并发，不会造成用户请求失败&lt;/td&gt;
&lt;td&gt;在3s内逐渐提高并发量，当并发量在643时有三个资源请求失败，在并发量达到689时，有64个资源请求失败&lt;/td&gt;
&lt;td&gt;未通过，当前博客园系统登录页的最大访问量应小于643&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt;博客园系统登录接口的最大并发量&lt;/td&gt;
&lt;td&gt;在当前环境下可以1000用户并发，不会造成用户请求失败&lt;/td&gt;
&lt;td&gt;在3s内逐渐提高并发量，当并发量达到1000时，请求资源仍全部成功&lt;/td&gt;
&lt;td&gt;通过&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt;博客园登录页的响应时间&lt;/td&gt;
&lt;td&gt;在当前环境下用户平均响应时长&amp;lt;2s 95%响应时长&amp;lt;= 5s&lt;/td&gt;
&lt;td&gt;50th响应时间为1.6s，95th为22s&lt;/td&gt;
&lt;td&gt;未通过&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt;博客园登录接口的响应时间&lt;/td&gt;
&lt;td&gt;在当前环境下用户平均响应时长&amp;lt;2s 95%响应时长&amp;lt;= 5s&lt;/td&gt;
&lt;td&gt;50th响应时间 &amp;lt; 1s，95th &amp;lt; 1s&lt;/td&gt;
&lt;td&gt;通过&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;测试总结&quot;&gt;测试总结&lt;/h2&gt;
&lt;p&gt;根据上述分析报告，本次性能测试为通过制定要求，博客园系统登录功能的最大并发量应小于643，为保持性能，建议并发数小于500&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;并发量控制&quot;&gt;5.1 并发量控制&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;atOnceUsers(100)&lt;/code&gt; 使用100并发量测试目标服务器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rampUsers(100) over (10 seconds)&lt;/code&gt; 循序渐进的增大压力，在10s中内线性增加用户数达到最大压力100并发量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nothingFor(10 seconds)&lt;/code&gt; 等待10s&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constantUsersPerSec(rate) during(duration)&lt;/code&gt; 在指定duration内，以固定频率注入用户，每秒注入rate个用户，默认固定间隔&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constantUsersPerSec(rate) during(duration) randomized&lt;/code&gt; 与上面不同的是用户以随机间隔注入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rampUsersPerSec(rate1) to (rate2) during(duration)&lt;/code&gt; 在指定duration内，以递增频率注入用户，每秒注入 rate1 ~ rate2 个用户&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;用户行为控制&quot;&gt;5.2 用户行为控制&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;.exec()&lt;/code&gt; 实际的用户行为&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pause(20)&lt;/code&gt; 用户滞留20s，模拟用户思考或者浏览内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pause(min: Duration, max: Duration)&lt;/code&gt; 用户随机滞留，滞留时间在min ~ max 之间&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;流程控制&quot;&gt;5.3 流程控制&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;repeat(time, counterName)&lt;/code&gt; 内置循环器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreach(seq, elem, counterName)&lt;/code&gt; foreach循环器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;csv(&quot;file&quot;).random&lt;/code&gt; 创建填充器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doIf(&quot;&quot;, &quot;&quot;)&lt;/code&gt; 判断语句&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Fri, 15 Mar 2019 14:31:00 +0000</pubDate>
<dc:creator>旻天clock</dc:creator>
<og:description>介绍 本篇博客，旨在记录视频学习的要点，所以格式随意， 方便本人日后自考和回忆，有兴趣的朋友可以评论讨论。 原文地址： 'https://www.cnblogs.com/clockq/p/105399</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/clockq/p/10539974.html</dc:identifier>
</item>
<item>
<title>【线性代数】正交矩阵和格兰姆-施密特正交化 - shayue111</title>
<link>http://www.cnblogs.com/shayue/p/10539919.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shayue/p/10539919.html</guid>
<description>&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;一组线性无关的向量可以张成一个向量子空间，比如向量&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{e_1} = \left[ \begin{matrix} 1 \\ 2 \end{matrix} \right]\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{e_2} = \left[ \begin{matrix} 1 \\ 0 \end{matrix} \right]\)&lt;/span&gt;。它们线性无关，并且能张成一个二维平面。既然如此，那么为什么我们众所周知的二维坐标系是用&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{i} = \left[ \begin{matrix} 1 \\ 0 \end{matrix} \right]\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{j} = \left[ \begin{matrix} 0 \\ 1 \end{matrix} \right]\)&lt;/span&gt;表示，明明任意一组线性无关的2维向量都可以表示二维平面。这就引入了今天这篇笔记要讲的正交矩阵，得益于正交矩阵的性质，很多运算都可以被化简。&lt;/p&gt;
&lt;h2 id=&quot;正交矩阵&quot;&gt;正交矩阵&lt;/h2&gt;
&lt;p&gt;之前的笔记中已经提到过正交向量，比如在&lt;span class=&quot;math inline&quot;&gt;\(R^n\)&lt;/span&gt;空间中两个n维向量&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{e_1}、\overrightarrow{e_2}\)&lt;/span&gt;垂直，称这两个向量正交。而且显然，互为正交的一组向量(除去非零向量)必然线性无关，为此如果将一组n维正交向量放在一个矩阵中，比如&lt;span class=&quot;math display&quot;&gt;\[A= \begin{equation} \left[ \begin{matrix} e1 \ e2 \end{matrix} \right] \end{equation} \]&lt;/span&gt;&lt;br/&gt;那么很显然，对于矩阵A，它有如下性质：&lt;span class=&quot;math display&quot;&gt;\[ \begin{equation} A^TA=\left[ \begin{matrix} e1 \\ e2 \end{matrix} \right]\left[ \begin{matrix} e1 \ e2 \end{matrix} \right]=D \end{equation} \]&lt;/span&gt;&lt;br/&gt;矩阵&lt;span class=&quot;math inline&quot;&gt;\(D\)&lt;/span&gt;是一个对角矩阵，主对角线上的值分别对应着矩阵&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;中每一个列向量的模。那如果我们对矩阵A的要求更加严格一点，&lt;span&gt;要求矩阵&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;中每一个列向量都是单位向量&lt;/span&gt;，那么对于新的矩阵A，它有如下性质：&lt;span class=&quot;math display&quot;&gt;\[ \begin{equation} A^TA=I \end{equation} \]&lt;/span&gt;&lt;br/&gt;矩阵&lt;span class=&quot;math inline&quot;&gt;\(I\)&lt;/span&gt;是2维单位矩阵，注意，这里的矩阵&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;并不方阵。&lt;span&gt;既然提到方阵，我们对矩阵&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;的要求更加严格一些，即要求它为方阵，我们记为&lt;span class=&quot;math inline&quot;&gt;\(Q\)&lt;/span&gt;&lt;/span&gt;.对于&lt;span class=&quot;math inline&quot;&gt;\(Q\)&lt;/span&gt;：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \begin{equation} \left \{ \begin{array}{lr} Q^TQ=I \\ Q^T=Q^{-1} \end{array} \right. \end{equation} \]&lt;/span&gt;&lt;br/&gt;我们称(4)中的矩阵&lt;span class=&quot;math inline&quot;&gt;\(Q\)&lt;/span&gt;为&lt;span&gt;正交矩阵&lt;/span&gt;。&lt;strong&gt;它是一个方阵，并且列向量之间两两正交，每个列向量都是单位向量。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;正交矩阵举例&quot;&gt;正交矩阵举例&lt;/h4&gt;
&lt;p&gt;下面举几个正交矩阵的例子，&lt;span class=&quot;math display&quot;&gt;\[ \left[ \begin{matrix} 1 &amp;amp; 0 \\ 0 &amp;amp; 1 \end{matrix} \right] \]&lt;/span&gt;&lt;br/&gt;又或者&lt;span class=&quot;math display&quot;&gt;\[ \frac{1}{2}\left[ \begin{matrix} 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1\\ 1 &amp;amp; -1 &amp;amp; 1 &amp;amp; -1\\ 1 &amp;amp; 1 &amp;amp; -1 &amp;amp; -1\\ 1 &amp;amp; -1 &amp;amp; -1 &amp;amp; 1 \end{matrix} \right] \]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何获得一个正交矩阵&quot;&gt;如何获得一个正交矩阵&lt;/h2&gt;
&lt;p&gt;因为一些原因，我们通常希望能够获得一个正交矩阵，但是很不巧，我们只有那个矩阵的&quot;低级版本&quot;，所有我们应该做些什么工作来获得一个正交矩阵。&lt;/p&gt;
&lt;p&gt;将一个普通的方阵&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;转成正交矩阵，意味着要将&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;中的列向量变成线性无关的单位向量。所以主要流程就是两步：正交化和单位化&lt;/p&gt;
&lt;p&gt;比较好用的一种办法是格兰姆-施密特正交化，下面以一个例子来演示它的流程。&lt;/p&gt;
&lt;h3 id=&quot;二维空间&quot;&gt;二维空间&lt;/h3&gt;
&lt;p&gt;先来个简单点的情况，假设有一个2x2的矩阵&lt;span class=&quot;math display&quot;&gt;\[A= \left[ \begin{matrix} 3 &amp;amp; 2 \\ 4 &amp;amp; 1 \end{matrix} \right] \]&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;第一步正交化&quot;&gt;第一步：正交化&lt;/h4&gt;
&lt;p&gt;矩阵&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;中包含两个列向量，&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{e_1} = \left[ \begin{matrix} 3 \\ 4 \end{matrix} \right]\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{e_2} = \left[ \begin{matrix} 2 \\ 1 \end{matrix} \right]\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1531067/201903/1531067-20190315222016447-1862686928.jpg&quot; height=&quot;70%&quot; width=&quot;70%&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们希望转化后的2个列向量正交，那么我可以从原来的2个列向量中先任取一个向量比如&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{e_1} = \left[ \begin{matrix} 3 \\ 4 \end{matrix} \right]\)&lt;/span&gt;固定为&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{q_1}\)&lt;/span&gt;，那么剩下的目标就是将另外一个向量&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{e_2}\)&lt;/span&gt;转化为与&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{q_2}\)&lt;/span&gt;，令它与&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{q_1}\)&lt;/span&gt;正交。所以，我们先来写出正交化的第一步，即确定一个&quot;固定&quot;向量&lt;span class=&quot;math display&quot;&gt;\[ \begin{equation} \overrightarrow{q_1} = \overrightarrow{e_1} \end{equation} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;然后现在怎么得到一个&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{q_2}\)&lt;/span&gt;？其实图上已经画出来了，如果将向量&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{e_2}\)&lt;/span&gt;往向量&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{e_1}\)&lt;/span&gt;投影先得到一个向量&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{f}\)&lt;/span&gt;，那么向量&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{e_2} - \overrightarrow{f}\)&lt;/span&gt;是不是显然与&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{e_1}\)&lt;/span&gt;正交。那么第二步就是：&lt;span class=&quot;math display&quot;&gt;\[ \begin{equation} \overrightarrow{q_2} = \overrightarrow{e_2} - \overrightarrow{f},\ \ 其中\overrightarrow{f}为\overrightarrow{e_2}往\overrightarrow{q_1}的投影向量 \end{equation} \]&lt;/span&gt;&lt;br/&gt;相信这个已经十分熟悉了，忘记的话可以回顾&lt;code&gt;如何得到一个投影矩阵&lt;/code&gt;这篇笔记。&lt;span class=&quot;math display&quot;&gt;\[ \begin{equation} f = \frac{e_1^{\mathrm{T}}e_2}{e_1^{\mathrm{T}}e_1}e_1 \end{equation} \]&lt;/span&gt;&lt;br/&gt;由(6)、(7)可以确定向量&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{q_2}\)&lt;/span&gt;：&lt;span class=&quot;math display&quot;&gt;\[ \begin{equation} q_2 = e_2 - \frac{q_1^{\mathrm{T}}e_2}{q_1^{\mathrm{T}}q_1}q_1 \end{equation} \]&lt;/span&gt;&lt;br/&gt;正交化到这里就结束了，我们代入例子算一下，得到变化后的矩阵为：&lt;span class=&quot;math display&quot;&gt;\[ A' = \left[ \begin{matrix} 3 &amp;amp; \frac{4}{5} \\ 4 &amp;amp; \frac{-3}{5} \end{matrix} \right] \]&lt;/span&gt;&lt;br/&gt;可以验证两个列向量是正交的了。&lt;/p&gt;
&lt;h4 id=&quot;第二步单位化&quot;&gt;第二步：单位化&lt;/h4&gt;
&lt;p&gt;这步就是将每个列向量的模变为1，拿&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{q_1} = \left[ \begin{matrix} 3 \\ 4 \end{matrix} \right]\)&lt;/span&gt;举例，单位化后的向量为：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \frac{1}{\sqrt{3^2+4^2}}\left[ \begin{matrix} 3 \\ 4 \end{matrix} \right]=\left[ \begin{matrix} \frac{3}{5} \\ \frac{4}{5} \end{matrix} \right] \]&lt;/span&gt;&lt;br/&gt;而另一个向量&lt;span class=&quot;math inline&quot;&gt;\(\overrightarrow{q_2}\)&lt;/span&gt;已经是单位矩阵，所以不用单位化，因此通过格兰姆-施密特正交化最终得到的单位矩阵&lt;span class=&quot;math display&quot;&gt;\[ Q = \left[ \begin{matrix} \frac{3}{5} &amp;amp; \frac{4}{5} \\ \frac{4}{5} &amp;amp; \frac{-3}{5} \end{matrix} \right] \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正交化过程并不改变矩阵的对应的列空间，显然张成的平面仍是二维平面。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;三维空间&quot;&gt;三维空间&lt;/h3&gt;
&lt;p&gt;对于二维空间，确定1个固定的向量后，只要将另外一个向量往其上面投影再相减就能完成正交化过程了。但是在三维空间中，一共有3个列向量，应该怎么做？&lt;/p&gt;
&lt;h4 id=&quot;三维空间中的正交化过程&quot;&gt;三维空间中的正交化过程&lt;/h4&gt;
&lt;p&gt;其实流程也是异曲同工。假设需要单位正交化的矩阵为&lt;span class=&quot;math inline&quot;&gt;\(A = \left[ \begin{matrix} e_1 \ e_2 \ e_3 \end{matrix} \right]\)&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;第一步：固定一个向量&lt;span class=&quot;math inline&quot;&gt;\(q_1 = e_1\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;第二步：将第2个向量往&lt;span class=&quot;math inline&quot;&gt;\(q_1\)&lt;/span&gt;上投影，&lt;span class=&quot;math display&quot;&gt;\[q_2 = e_2 - \frac{q_1^{\mathrm{T}}e_2}{q_1^{\mathrm{T}}q_1}q_1\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;第三步：将第3个向量&lt;span class=&quot;math inline&quot;&gt;\(e_3\)&lt;/span&gt;减去&lt;span class=&quot;math inline&quot;&gt;\(q_1\)&lt;/span&gt;方向上的投影向量，再减去&lt;span class=&quot;math inline&quot;&gt;\(q_2\)&lt;/span&gt;方向上的投影向量，即&lt;span class=&quot;math display&quot;&gt;\[q_3=e_3 - \frac{q_1^{\mathrm{T}}e_3}{q_1^{\mathrm{T}}q_1}q_1 - \frac{q_2^{\mathrm{T}}e_3}{q_2^{\mathrm{T}}q_2}q_2\]&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;接下来单位化即可，不过多赘述。觉得第3步有些抽象的朋友可以找3只笔试一下，两只笔垂直放置在平面上，第3只笔与平面呈一定角度。这样减去两个方向的投影向量后，一定能得到垂直与平面的一个向量。而且也可以通过&lt;span class=&quot;math inline&quot;&gt;\(q_3^Tq_2=0\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(q_3^Tq_1=0\)&lt;/span&gt;来验证。&lt;/p&gt;
</description>
<pubDate>Fri, 15 Mar 2019 14:21:00 +0000</pubDate>
<dc:creator>shayue111</dc:creator>
<og:description>引言 一组线性无关的向量可以张成一个向量子空间，比如向量$\overrightarrow{e_1} = \left[ \begin{matrix} 1 \\ 2 \end{matrix} \right</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shayue/p/10539919.html</dc:identifier>
</item>
<item>
<title>如何快速掌握DDT数据驱动测试？ - linux超</title>
<link>http://www.cnblogs.com/linuxchao/p/linuxchao-ddt.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linuxchao/p/linuxchao-ddt.html</guid>
<description>&lt;h3&gt;1.前言&lt;/h3&gt;
&lt;p&gt;　　（网盗概念^-^）相同的测试脚本使用不同的测试数据来执行，测试数据和测试行为完全分离， 这样的测试脚本设计模式称为数据驱动。(网盗结束)当我们测试某个网站的登录功能时，我们往往会使用不同的用户名和密码来验证登录模块对系统的影响，那么如果我们每一条数据都编写一条测试用例，这无疑是增加了代码量，代码重复，且显得那么臃肿（谁不喜欢身材好的呢？你懂的），这时候我们可以使用不同数据驱动代码执行相同的用例测试不同的场景。&lt;/p&gt;
&lt;h3&gt;2.实施数据驱动步骤&lt;/h3&gt;
&lt;p&gt;　　我们再来说说实施数据驱动测试的步骤：&lt;/p&gt;
&lt;p&gt;　　1.创建/准备测试数据&lt;/p&gt;
&lt;p&gt;　　2.封装读取数据的方法，保留测试脚本调用的接口/属性（我们需要传递给脚本什么参数）&lt;/p&gt;
&lt;p&gt;　　3.编写自动化测试脚本&lt;/p&gt;
&lt;p&gt;　　4.脚本中调用封装好的处理数据文件的模块并引入测试数据&lt;/p&gt;
&lt;p&gt;　　5.执行测试脚本并分析测试结果&lt;/p&gt;
&lt;h3&gt;3.数据驱动测试环境准备&lt;/h3&gt;
&lt;p&gt;　　1.安装python3.x开发环境（能看到此文章的应该都有这个环境，没有的自行百度吧）&lt;/p&gt;
&lt;p&gt;　　2.安装数据驱动模块ddt&lt;/p&gt;
&lt;p&gt;　　　　安装方式1：cmd下执行命令 pip install ddt&lt;/p&gt;
&lt;p&gt;　　　　安装方式2：&lt;a href=&quot;https://pypi.org/simple/ddt/&quot; target=&quot;_blank&quot;&gt;https://pypi.org/simple/ddt/&lt;/a&gt; 下载 并解压任意目录，cmd 运行命令python setup.py install&lt;/p&gt;
&lt;p&gt;　　3.验证安装 pycharm 新建python文件并输入 import ddt 运行无报错信息既表示安装成功或者cmd 命令依次输入python回车 import ddt回车 无保存信息表示安装成功&lt;/p&gt;
&lt;p&gt;　　4.unittest框架和ddt进行数据驱动&lt;/p&gt;
&lt;h3&gt;4.测试步骤&lt;/h3&gt;
&lt;p&gt;　　1.访问地址：&lt;span&gt;https://mail.sohu.com/fe/#/login&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2.输入用户名和密码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3.点击登录按钮&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　4.判断是否登录成功&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;5.数据驱动测试方式&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;　　方式1：数据存在当前脚本中&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span&gt;　　1.1数据准备&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;span&gt;　　　　我们要实现的是用户登录的操作，所以用户名和密码是必须有的，期望结果可以有也可以没有。数据类型看源代码！&lt;/span&gt;&lt;/p&gt;
&lt;h5&gt;&lt;span&gt;　　1.2实例代码　&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8ed93f50-27dc-4ee4-a0ae-4d092fb9253e')&quot; readability=&quot;42&quot;&gt;&lt;img id=&quot;code_img_closed_8ed93f50-27dc-4ee4-a0ae-4d092fb9253e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8ed93f50-27dc-4ee4-a0ae-4d092fb9253e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8ed93f50-27dc-4ee4-a0ae-4d092fb9253e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8ed93f50-27dc-4ee4-a0ae-4d092fb9253e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; selenium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; ddt &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ddt, data, unpack
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; unittest
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; selenium.common.exceptions &lt;span&gt;import&lt;/span&gt;&lt;span&gt; NoSuchWindowException
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;简单数据驱动测试
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;@ddt
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ddtTest(unittest.TestCase):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据 可以是元祖， 列表， 字典（可迭代对象）&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     value = [[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;13691579846@sohu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xiaochao11520&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://mail.sohu.com/fe/#/homepage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;              [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;13691579844@sohu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xiaochao11520&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://mail.sohu.com/fe/#/homepage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]]
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; value = [{'uname':'******@sohu.com', 'password':'xiaochao11520','expected':'https://mail.sohu.com/fe/#/homepage'},&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;          {'uname':'******@sohu.com', 'password':'xiaochao11520','expected':'https://mail.sohu.com/fe/#/homepage'}]&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; setUp(self):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         self.testUrl = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://mail.sohu.com/fe/#/login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         self.driver =&lt;span&gt; webdriver.Firefox()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        self.driver.get(self.testUrl)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     @data(*value) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; * 解析数据&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     @unpack&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用来解包， 将每组数据的第一个数据传递给uname依次类推， 当数据为字典时，形参需和字段的key值相同&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_case1(self, uname, password, expected):
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             username = self.driver.find_element_by_xpath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//input[@placeholder='请输入您的邮箱']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            username.send_keys(uname)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             userpassword = self.driver.find_element_by_xpath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//input[@placeholder='请输入您的密码']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            userpassword.send_keys(password)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             self.driver.find_element_by_xpath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//input[@type='submit']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click()
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             time.sleep(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             currenturl =&lt;span&gt; self.driver.current_url
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             self.assertEqual(expected, currenturl,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;登录失败&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; NoSuchWindowException as e:
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(e)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;raise&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; AssertionError:
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;期望值是{}, 实际值是{}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(expected,currenturl))
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;raise&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception:
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;raise&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; tearDown(self):
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        self.driver.quit()
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; pass&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     unittest.main()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;简单数据驱动测试.py&lt;/span&gt;&lt;/div&gt;
&lt;h5&gt;　　1.3源码分析&lt;/h5&gt;
&lt;p&gt;　　　　1.@ddt来装饰测试类（ddt数据驱动的规范写法，记住就ok）&lt;/p&gt;
&lt;p&gt;　　　　2.@data（*value）装饰测试用例（也是一种规范，这边又涉及到装饰器，不懂的可以百度或者看我之前的文章又介绍，这边不再赘述，一句话两句话也说不清楚）记住：*value作用是打散数据，比如上面代码是用一个大列表存储两个小列表存放数据的，那么*value会得到两个小列表，每个小列表是一组测试数据&lt;/p&gt;
&lt;p&gt;　　　　3.@unpack 解析*value数据，会把两个小列表里面的每一个数据取出来分别传递给我们测试用例的形参&lt;/p&gt;
&lt;h5&gt;　　 1.4方式1缺点&lt;/h5&gt;
&lt;p&gt;　　　　存储大量数据时，需查看源代码，不利于脚本的维护　　　　&lt;/p&gt;
&lt;h4&gt; 　　方式2：json文件读取测试数据进行数据驱动测试&lt;/h4&gt;
&lt;h5&gt;　　 2.1数据准备&lt;/h5&gt;
&lt;p&gt;　　　　新建一个json文件（也可以是txt文件），将我们需要的两组测试数据以列表的形式写到json文件中，每组数据的每一项参数用相同的符号分割开（方便脚本读取数据）&lt;/p&gt;
&lt;h5&gt;　　2.2实例代码&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('35275274-7d4b-4c72-aa78-9706ce6f8c2e')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_35275274-7d4b-4c72-aa78-9706ce6f8c2e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_35275274-7d4b-4c72-aa78-9706ce6f8c2e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('35275274-7d4b-4c72-aa78-9706ce6f8c2e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_35275274-7d4b-4c72-aa78-9706ce6f8c2e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******@sohu.com||xiaochao11520||https://mail.sohu.com/fe/#/homepage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******@sohu.com||xiaochao11520||https://mail.sohu.com/fe/#/homepage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;test_data.json&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4bdda77f-a935-48bf-b569-fe0bd7e52116')&quot; readability=&quot;40.5&quot;&gt;&lt;img id=&quot;code_img_closed_4bdda77f-a935-48bf-b569-fe0bd7e52116&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4bdda77f-a935-48bf-b569-fe0bd7e52116&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4bdda77f-a935-48bf-b569-fe0bd7e52116',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4bdda77f-a935-48bf-b569-fe0bd7e52116&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; selenium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; ddt &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ddt, file_data
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; unittest, time
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; selenium.common.exceptions &lt;span&gt;import&lt;/span&gt;&lt;span&gt; NoSuchWindowException
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; HTMLTestRunner
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;从文件中读测试数据
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; @ddt &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ddt装饰测试类&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Testdata(unittest.TestCase):
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; setUp(self):
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         self.driver =&lt;span&gt; webdriver.Firefox()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         self.driver.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://mail.sohu.com/fe/#/login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     @file_data(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test_data.json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取文件的 文件中数据可以是一个列表，也可以是一个字典&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_data(self,value):
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         uname, password, expected = tuple(value.strip().split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; value是一个字符串&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(type(value),value)&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             username = self.driver.find_element_by_xpath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//input[@placeholder='请输入您的邮箱']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            username.send_keys(uname)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             userpassword = self.driver.find_element_by_xpath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//input[@placeholder='请输入您的密码']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            userpassword.send_keys(password)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             self.driver.find_element_by_xpath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//input[@type='submit']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             time.sleep(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             currenturl =&lt;span&gt; self.driver.current_url
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             self.assertEqual(expected, currenturl,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;登录失败&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; NoSuchWindowException as e:
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;raise&lt;/span&gt;&lt;span&gt; e
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; AssertionError:
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;期望值是{}, 实际值是{}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(expected,currenturl))
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;raise&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception:
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;raise&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; tearDown(self):
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        self.driver.quit()
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    unittest.main()
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; import os&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; from datetime import date&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; currentPath = os.path.dirname(os.path.abspath(__file__))# 获取当前文件目录&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; reportPath = os.path.join(currentPath,'report') # 创建一个report目录&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; if not os.path.exists(reportPath):&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     os.mkdir(reportPath) # 判断目录是否存在， 不存在就创建&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; reportName = os.path.join(reportPath, str(date.today())+'report.html') # 拼接html报告&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; with open(reportName,'wb') as f:&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     suite = unittest.TestLoader().loadTestsFromTestCase(Testdata)&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     runner = HTMLTestRunner.HTMLTestRunner(stream=f,verbosity=1, title='数据驱动测试报告', description='数据驱动')&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     runner.run(suite)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;使用数据文件驱动测试.py&lt;/span&gt;&lt;/div&gt;
&lt;h5&gt;　　2.3源码分析&lt;/h5&gt;
&lt;p&gt;　　　　1.相对上个实例，这里使用了@file_data(文件路径), 参数必须是一个文件,这里是一个json文件, 数据可以是一个列表，也可以是一个字典&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 列表形式&lt;br/&gt;[
  &lt;span&gt;&quot;*******&lt;span&gt;@sohu.com||xiaochao11520||https://mail.sohu.com/fe/#/homepage&lt;span&gt;&quot;&lt;span&gt;,
  &lt;span&gt;&quot;&lt;span&gt;&lt;span&gt;&lt;span&gt;*******&lt;/span&gt;&lt;/span&gt;@sohu.com||xiaochao11520||https://mail.sohu.com/fe/#/homepage&lt;span&gt;&quot;&lt;span&gt;
]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　2.测试用例接收的是一个字符串，需要对字符串进行处理，把用户名，密码，期望值解析出来&lt;/p&gt;
&lt;h5&gt; 　　2.4方式2优缺点&lt;/h5&gt;
&lt;p&gt;　　　　测试数据存在文件中，方便管理修改，添加数据，易于维护，缺点呢？emmm个人认为这种方式最好！&lt;/p&gt;
&lt;h4&gt;　　方式3：从xml读取数据进行数据驱动测试&lt;/h4&gt;
&lt;h5&gt;　　3.1数据准备&lt;/h5&gt;
&lt;p&gt;　　　　新建一个xml格式的文件，按照xml格式的语法需求，填写数据（xml文档我也不是很懂，简单的显示个文字啥的还可以^-^!）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('45d3e13d-3c65-440b-a4ee-59882ad057be')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_45d3e13d-3c65-440b-a4ee-59882ad057be&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_45d3e13d-3c65-440b-a4ee-59882ad057be&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('45d3e13d-3c65-440b-a4ee-59882ad057be',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_45d3e13d-3c65-440b-a4ee-59882ad057be&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bookList &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;technolog&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;book&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;uname&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;******@sohu.com&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;uname&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;xiaochao11520&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;expected&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;https://mail.sohu.com/fe/#/homepage&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;expected&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;book&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;book&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;uname&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;******@sohu.com&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;uname&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;xiaochao11520&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;expected&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;https://mail.sohu.com/fe/#/homepage&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;expected&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;book&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bookList&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;xmlData.xml&lt;/span&gt;&lt;/div&gt;
&lt;h5&gt; 　　3.2实例代码&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1fd5217e-74a7-4ab6-b910-ec782918bf95')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_1fd5217e-74a7-4ab6-b910-ec782918bf95&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1fd5217e-74a7-4ab6-b910-ec782918bf95&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1fd5217e-74a7-4ab6-b910-ec782918bf95',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1fd5217e-74a7-4ab6-b910-ec782918bf95&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; xml.etree &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ElementTree
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ParseXml(object):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, xmlpath):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         self.xmlpath =&lt;span&gt; xmlpath
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取根节点&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; getRoot(self):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         tree =&lt;span&gt; ElementTree.parse(self.xmlpath)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         root =&lt;span&gt; tree.getroot()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; root
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 根据根节点查找子节点&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; findNodeByName(self, parentNode, nodeName):
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         nodes =&lt;span&gt; parentNode.findall(nodeName)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; nodes
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; getNodeOfChildText(self, node):
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取节点node下所有子节点的节点名作为key&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 本节点作为value组成的字典对象&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         childrenTextDict =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; list(node.iter())[1:]: &lt;span&gt;#&lt;/span&gt;&lt;span&gt; node 节点下的所有节点组成的列表&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             childrenTextDict[i.tag] =&lt;span&gt; i.text
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(list(node.iter())[1:])&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; childrenTextDict
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取节点node下面的节点的所有数据&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; getDataFromXml(self, node):
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         root =&lt;span&gt; self.getRoot()
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         books =&lt;span&gt; self.findNodeByName(root, node)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         dataList=&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; book &lt;span&gt;in&lt;/span&gt;&lt;span&gt; books:
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             childrentext =&lt;span&gt; self.getNodeOfChildText(book)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            dataList.append(childrentext)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; dataList
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt;==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     xml = ParseXml(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./xmlData.xml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     root =&lt;span&gt; xml.getRoot()
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(root.tag)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     books = xml.findNodeByName(root, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;book&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查找所有的book节点&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; book &lt;span&gt;in&lt;/span&gt;&lt;span&gt; books:
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(book[0].tag, book[0].text)&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(xml.getNodeOfChildText(book))
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(xml.getDataFromXml(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;book&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;doXML.py&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('54f9a942-e68d-47c6-9ed6-8735f971923b')&quot; readability=&quot;38.5&quot;&gt;&lt;img id=&quot;code_img_closed_54f9a942-e68d-47c6-9ed6-8735f971923b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_54f9a942-e68d-47c6-9ed6-8735f971923b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('54f9a942-e68d-47c6-9ed6-8735f971923b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_54f9a942-e68d-47c6-9ed6-8735f971923b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; dataDdt.doXML &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ParseXml
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; selenium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; selenium.common.exceptions &lt;span&gt;import&lt;/span&gt;&lt;span&gt; NoSuchWindowException, TimeoutException
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; unittest
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; ddt &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ddt, data,unpack
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; selenium.webdriver.support &lt;span&gt;import&lt;/span&gt;&lt;span&gt; expected_conditions as EC
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; selenium.webdriver.support.ui &lt;span&gt;import&lt;/span&gt;&lt;span&gt; WebDriverWait
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; selenium.webdriver.common.by &lt;span&gt;import&lt;/span&gt;&lt;span&gt; By
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; values = ParseXml(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./xmlData.xml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;@ddt
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; xmltest(unittest.TestCase):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; setUp(self):
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         self.driver =&lt;span&gt; webdriver.Firefox()
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         self.driver.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://mail.sohu.com/fe/#/login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     @data(*values.getDataFromXml(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;book&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    @unpack
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_xml(self,uname, password, expected):
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             wait = WebDriverWait(self.driver,5&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             wait.until(EC.element_to_be_clickable((By.XPATH, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//input[@type='submit']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             username = self.driver.find_element_by_xpath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//input[@placeholder='请输入您的邮箱']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            username.send_keys(uname)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             userpassword = self.driver.find_element_by_xpath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//input[@placeholder='请输入您的密码']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            userpassword.send_keys(password)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             self.driver.find_element_by_xpath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//input[@type='submit']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click()
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             time.sleep(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             currenturl =&lt;span&gt; self.driver.current_url
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             self.assertEqual(expected, currenturl, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;登录失败&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; TimeoutException as e:
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;raise&lt;/span&gt;&lt;span&gt; e
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; NoSuchWindowException as e:
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;raise&lt;/span&gt;&lt;span&gt; e
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; AssertionError as e:
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;期望值是{}, 实际值是{}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(expected, currenturl))
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;raise&lt;/span&gt;&lt;span&gt; e
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception:
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;raise&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; tearDown(self):
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        self.driver.quit()
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt;==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     unittest.main()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;从xml文件读取数据驱动测试.py&lt;/span&gt;&lt;/div&gt;
&lt;h5&gt;　　3.3源码分析&lt;/h5&gt;
&lt;p&gt;　　1.xml文档编写（深入了解需百度）有点像html，但又有不同，xml中的节点可以是任意名称，每个节点同样是成双出现&lt;/p&gt;
&lt;p&gt;　　2.增加了doXML.py文档，用来解析xml文件，方便脚本获取数据（注释写的很详细，不懂的化可以慢慢调试，哪里不懂print哪里）&lt;/p&gt;
&lt;p&gt;　　3.测试脚本和上面的实例大致相同（不懂的加我qq直接问）&lt;/p&gt;
&lt;h5&gt;　　3.4方式3优缺点&lt;/h5&gt;
&lt;p&gt;　　　　优点是做到了数据与测试的分离，方便数据维护，缺点也比较明显，需要对xml文档有一定的了解&lt;/p&gt;
&lt;h3&gt;6.总结&lt;/h3&gt;
&lt;p&gt;　　上面的数据驱动测试步骤是我自己总结的，看了上面的实例对于步骤应该还算合理，下面是我在网上找到的数据驱动测试步骤（感觉比较官方！大家可以参考）&lt;/p&gt;
&lt;p&gt;　　1.编写测试脚本， 脚本需要支持从程序对象， 文件，或者数据库读入数据。（个人观点：如果脚本先编写完，测试数据还未准备，后期还要做修改）&lt;/p&gt;
&lt;p&gt;　　2.将测试脚本使用的测试数据存入程序对象，文件，或者数据库等外部介质中。（个人观点：这个阶段实为准备数据的阶段，也就是我们数据要存在哪里，理应放在第一步）&lt;/p&gt;
&lt;p&gt;　　3.运行脚本过程中，循环调用存储在外部介质中的测试数据。（个人观点：这里要考虑我们如何读取，使用数据）&lt;/p&gt;
&lt;p&gt;　　4.验证所有的测试结果是否符合预期结果&lt;/p&gt;
&lt;p&gt;ps：源码已经上传到我的git，地址：&lt;a href=&quot;https://github.com/13691579846/WebdriverAPI&quot; target=&quot;_blank&quot;&gt;https://github.com/13691579846/WebdriverAPI&lt;/a&gt; 欢迎交流讨论QQ交流群：878565760&lt;/p&gt;
</description>
<pubDate>Fri, 15 Mar 2019 14:20:00 +0000</pubDate>
<dc:creator>linux超</dc:creator>
<og:description>1.前言 （网盗概念^-^）相同的测试脚本使用不同的测试数据来执行，测试数据和测试行为完全分离， 这样的测试脚本设计模式称为数据驱动。(网盗结束)当我们测试某个网站的登录功能时，我们往往会使用不同的用</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/linuxchao/p/linuxchao-ddt.html</dc:identifier>
</item>
<item>
<title>SpringMVC框架01—使用IDEA搭建SpringMVC环境 - 老潘的博客</title>
<link>http://www.cnblogs.com/jpwz/p/10538635.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jpwz/p/10538635.html</guid>
<description>&lt;h2&gt;1.1、Spring MVC 简介&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;把Web应用程序分为三层，分别是：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;控制器（Controller）：负责接收并处理请求，响应客户端；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;模型（Model）：模型数据，业务逻辑；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;视图（View）：呈现模型，与用户进行交互；&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315175052136-746709871.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;目前最好的实现MVC设计模式的框架，是Spring框架的一个子模块，可以与Spring很好的结合使用，无需整合。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;1.2、SpringMVC核心组件&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;DispatcherServlet：前置控制器&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Handler：处理器，完成具体业务逻辑&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;HandlerMapping：将请求映射到Handler&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;HandlerInterceptor：处理器拦截器&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;HandlerExecutionChain：处理器执行链&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;HandlerAdapter：处理器适配器&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;ModelAndView：装载模型数据和视图信息&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;ViewResolver：视图解析器&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt; 1.3、SpringMVC工作流程&lt;/h2&gt;
&lt;p&gt;（1）客户端请求提交到DispatcherServlet；&lt;br/&gt;（2）由DispatcherServlet控制器寻找一个或多个HandlerMapping，找到处理请求的Controller；&lt;br/&gt;（3）DispatcherServlet将请求提交到Controller；&lt;br/&gt;（4）Controller调用业务逻辑处理后返回ModelAndView；&lt;br/&gt;（5）DispatcherServlet寻找一个或多个ViewResolver视图解析器，找到ModelAndView指定的视图；&lt;br/&gt;（6）视图负责将结果显示到客户端；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315175359693-1821318681.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;h2&gt;2.1、创建SpringMVC项目&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;实现步骤：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;打开IDEA工具，创建新项目，选择Maven工程，使用jdk1.8版本，勾选“Create from archetype”，选择maven-archetype-webapp的方式创建，点击Next&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315175506770-1452493182.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 配置项目信息，点击Next&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315202628883-1028601589.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置Maven信息，点击Next&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315202703417-1004845375.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 配置工作空间，点击Finish&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315202735205-501142532.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在控制台显示BUILD SUCCESS，项目创建完成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315202808579-1677416884.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;默认创建的项目目录，resource存放配置文件，webapp目录存放web页面和组件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315202906455-1223191649.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在main目录上右键，选择New--&amp;gt;Directory创建java目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315202935861-1221863915.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315202950976-535688027.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203006583-902446442.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在java目录上点击右键，选择Mark Directory as--&amp;gt;Sources Root，将java目录设置为资源目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203034228-336434340.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203050418-664311081.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在pom.xml中引入依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;junit测试依赖&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;SpringMVC依赖&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.1.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打开src--&amp;gt;main--&amp;gt;webapp--&amp;gt;WEB-INF--&amp;gt;web.xml，配置SpringMVC的Servlet：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;SpringMVC&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置springmvc.xml的路径&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:springmvc.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;SpringMVC&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2.2、基于XML配置SpringMVC&lt;/h2&gt;
&lt;p&gt;在src--&amp;gt;main--&amp;gt;resources目录上点击右键，选择New--&amp;gt;XML Configuration File--&amp;gt;Spring Config，创建springmvc.xml配置文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203355891-1109140833.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203409815-1524345005.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203425858-2118886640.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在java目录上创建MyHandler类，实现Controller接口，并重写handelRequest()方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203452078-1919335741.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果出现HttpServletRequest报红，原因是没有引入依赖&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203517766-230911017.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择File--&amp;gt;Project Structure&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203540658-214512403.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考图片依次选择Modules，点击右边+号，选择Library&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203621926-1036692094.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;添加Tomcat，点击Add Selected&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203648164-877228388.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;编辑模型视图代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.ModelAndView;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.mvc.Controller;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyHandler &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Controller {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ModelAndView handleRequest(httpServletRequest, httpServletResponse) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;装载模型数据和逻辑视图&lt;/span&gt;
        ModelAndView modelAndView = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndView();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加模型数据&lt;/span&gt;
        modelAndView.addObject(&quot;name&quot;,&quot;Tom&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加逻辑视图&lt;/span&gt;
        modelAndView.setViewName(&quot;show&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; modelAndView;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在webapp目录下创建show.jsp，使用EL表达式输出name&lt;br/&gt;如果使用EL表达式，必须配置isELIgnored=&quot;false&quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203757935-1561885822.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在springmvc.xml文件中配置Controller和HandlerMapping组件映射&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置HandlerMapping，将URL映射到Handler&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;handlerMapping&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置mapping&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;mappings&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置test请求对应的handler&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;prop &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;/test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;testHandler&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置handler&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;testHandler&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.springtest.MyHandler&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置视图解析器&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置前缀&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;prefix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置后缀&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;suffix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;.jsp&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置Tomcat&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203843829-1547742897.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203857951-1128269115.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203913641-500707452.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203927610-520818091.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203941274-857993047.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315203957510-1022082433.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完成以上步骤操作后，点击OK，在控制台处点击运行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315204028096-1806193959.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在浏览器中访问 localhost:8080/test，页面就会显示ModelAndView返回的值&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315204049950-61597224.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.3、基于注解配置SpringMVC&lt;/h2&gt;
&lt;p&gt; 使用注解配置SpringMVC，只需要修改springmvc.xml文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;将AnnotationHandler自动扫描到IOC容器中&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.springdemo.controller&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context:component-scan&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置视图解析器&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置前缀&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;prefix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置后缀&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;suffix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;.jsp&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;创建AnnotationHandler类，使用注解实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.ModelAndView;

@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AnnotationHandler {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 业务方法
     * 使用ModelAndView完成数据传递、视图解析
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @RequestMapping(&lt;/span&gt;&quot;/modelAndViewTest&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ModelAndView modelAndViewTest(){
        ModelAndView modelAndView &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndView();
        modelAndView.addObject(&lt;/span&gt;&quot;name&quot;,&quot;Jack&quot;&lt;span&gt;);
        modelAndView.setViewName(&lt;/span&gt;&quot;show&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; modelAndView;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动Tomcat&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315214535903-834229587.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;业务方法还可以使用以下两种方式实现：&lt;br/&gt;（1）使用Model传值，String解析视图&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 业务方法
 * 使用Model传值，String进行视图解析
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RequestMapping(&lt;/span&gt;&quot;/modelTest&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String modelTest(Model model){
    model.addAttribute(&lt;/span&gt;&quot;name&quot;,&quot;Lucy&quot;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;show&quot;&lt;span&gt; ;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动Tomcat&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315214634573-571173926.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）使用Map传值，String解析视图&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 业务方法
 * 使用Map传值，String解析视图
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RequestMapping(&lt;/span&gt;&quot;/mapTest&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String mapTest(Map&amp;lt;String,String&amp;gt;&lt;span&gt; map){
    map.put(&lt;/span&gt;&quot;name&quot;,&quot;Lilei&quot;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;show&quot;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动Tomcat&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/480452/201903/480452-20190315214720695-2061476543.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.4、解决客户端请求乱码问题&lt;/h2&gt;
&lt;p&gt;在web.xml中配置filter&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;处理中文乱码&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encodingFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;forceEncoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encodingFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2.5、配置静态资源访问&lt;/h2&gt;
&lt;p&gt;在web.xml中配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;设置访问静态资源&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;default&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*.css&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;default&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*.js&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;default&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*.jpg&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 15 Mar 2019 13:50:00 +0000</pubDate>
<dc:creator>老潘的博客</dc:creator>
<og:description>1、Spring MVC 入门 1.1、Spring MVC 简介 把Web应用程序分为三层，分别是： 控制器（Controller）：负责接收并处理请求，响应客户端； 模型（Model）：模型数据，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jpwz/p/10538635.html</dc:identifier>
</item>
<item>
<title>深入理解this关键字 - 冰湖一角</title>
<link>http://www.cnblogs.com/bingyimeiling/p/10533619.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bingyimeiling/p/10533619.html</guid>
<description>&lt;p&gt;Java提供了一个this关键字，&lt;span&gt;&lt;strong&gt;this关键字总是指向调用该方法的对象&lt;/strong&gt;&lt;/span&gt;。根据this出现的位置的不同，this作为对象的默认引用有两种情形。&lt;/p&gt;
&lt;p&gt;1）构造器中引用该构造器正在初始化的对象。&lt;/p&gt;
&lt;p&gt;2）在方法中引用调用该方法的对象。&lt;/p&gt;
&lt;p&gt;this关键字最大的作用就是让类中一个方法，访问该类里的另一个方法或者实例变量。假设定义了一个Person类，这个Person对象的eat()方法需要调用它的move()方法，则如何做呢？是否应该定义如下的Person类呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个move()方法&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; move(){
            System.out.println(&lt;/span&gt;&quot;正在执行move()方法&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个eat()方法，eat()方法需要借助move()方法&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; eat(){
            Person p &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Person();
            p.move();
            System.out.println(&lt;/span&gt;&quot;正在执行eat()方法&quot;&lt;span&gt;);
        }
        
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建Person对象&lt;/span&gt;
            Person p = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Person();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用Person的eat()方法&lt;/span&gt;
&lt;span&gt;            p.eat();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果为：&lt;/p&gt;
&lt;p&gt;正在执行move()方法&lt;br/&gt;正在执行eat()方法&lt;/p&gt;
&lt;p&gt;以上这种方式确实能够做到在eat()方法里调用move()方法，但从main()方法里的程序中可以看出，一共创建了两个对象：main()方法里创建一个对象；eat()方法里创建一个对象。可是真的需要创建两个对象吗？答案是否定的！因为当程序调用eat()方法时一定会提供一个Person对象，而不需要重新创建一个Person对象了。&lt;/p&gt;
&lt;p&gt;因此需要在eat()方法中获得调用该方法的对象，通过this关键字就可以满足这个需求。&lt;/p&gt;
&lt;p&gt;this可以代表任何对象，当this出现在某个方法体中时，它所代表的对象是不确定的，但它的类型是确定的，它所代表的类型只能是当前类：只有当这个方法被调用时，它所代表的对象才被确定下来：谁在调用这个方法，this就代表谁。&lt;/p&gt;
&lt;p&gt;将上面的Person类中的eat()方法改为一下这种方式更合适：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个eat()方法，eat()方法需要借助move()方法&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; eat(){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用this引用调用eat()方法的对象&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.move();
    System.out.println(&lt;/span&gt;&quot;正在执行eat()方法&quot;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述程序中eat()方法需要依赖于move()方法，现实中这种依赖情形非常常见，例如写字方法需要拿笔的方法，这种依赖都是同一个对象两个方法之间的依赖。因此，Java允许对象的的一个成员直接调用另一成员，可以省略this前缀。也就是说，上面的程序可以改为如下形式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; eat(){
    move();
    System.out.println(&lt;/span&gt;&quot;正在执行eat()方法&quot;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外一种情形是：this关键字可用于构造器中作为默认引用，由于构造器是直接使用new关键字来调用，而不是使用对象来调用的，所以this在构造器中代表该构造器正在初始化的对象。例如下面的程序：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个名为age的成员变量&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造器&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Person() {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在构造器里定义一个age变量&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; age = 0&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用this代表该构造器正在初始化的对象
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下面的代码将会把该构造器正在初始化的对象的age成员变量设为3&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.age = 3&lt;span&gt;;
        }


        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用new Person()创建的对象的age成员变量都将被设为3
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下面代码输出3&lt;/span&gt;
            System.out.println(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Person().age);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 与普通方法类似的是，大部分时候，在构造器中访问其它成员变量和方法时都可以省略this前缀，但如果构造器中有一个与成员变量同名的局部变量，又必须在构造器中访问这个被覆盖的成员变量，则必须使用this前缀。如上面程序所示。&lt;/p&gt;
&lt;p&gt;当this作为对象的默认引用使用时，程序可以像访问普通引用变量一样来访问这个this引用，甚至可以把this当成普通方法的返回值。请看下面程序：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;
        
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Person grow() {
            age &lt;/span&gt;++&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
            Person p &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Person();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以连续调用同一个方法&lt;/span&gt;
&lt;span&gt;            p.grow().grow().grow();
            System.out.println(&lt;/span&gt;&quot;p对象的age的值是：&quot;+&lt;span&gt;p.age);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果为：&lt;/p&gt;
&lt;p&gt;p对象的age的值是：3&lt;/p&gt;
&lt;p&gt;从上面的程序可以看出，如果在某个方法中把this作为返回值，则可以多次连续调用同一个方法，从而使得代码更加的简洁。但这种方式容易造成实际意义的模糊，例如上面的group()方法，用于表示对象的生长，即age变量的值加1，实际上不应该有返回值。&lt;/p&gt;
&lt;p&gt;最后需要强调一点：静态成员不能直接访问非静态成员，即static修饰的方法不能访问不适用static修饰的普通方法。对于static修饰的方法而言，可以使用类直接调用该方法，如果在static修饰的方法中使用this关键字，则这个关键字就无法指向合适的对象。所以，static修饰的方法中不能使用this引用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎关注微信公众号【Java典籍】，收看更多Java技术干货！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　 &lt;/strong&gt;▼微信扫一扫下图↓↓↓二维码关注&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1362965/201901/1362965-20190109201610986-215386546.jpg&quot; alt=&quot;&quot; width=&quot;164&quot; height=&quot;164&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 15 Mar 2019 13:36:00 +0000</pubDate>
<dc:creator>冰湖一角</dc:creator>
<og:description>Java提供了一个this关键字，this关键字总是指向调用该方法的对象。根据this出现的位置的不同，this作为对象的默认引用有两种情形。 1）构造器中引用该构造器正在初始化的对象。 2）在方法中</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bingyimeiling/p/10533619.html</dc:identifier>
</item>
<item>
<title>BP算法的矩阵推导 - XieMay</title>
<link>http://www.cnblogs.com/xiemaycherry/p/10539664.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiemaycherry/p/10539664.html</guid>
<description>&lt;h2 id=&quot;导数&quot;&gt;1.1 导数&lt;/h2&gt;
&lt;p&gt;对于一元函数，在导数存在的情况下，在某一点的导数，也就是该点的斜率。&lt;br/&gt;对于多元函数，对于某一点求导，则需要指明方向，两个特殊的方向，1. 偏导：在坐标轴方向的导数 2. 梯度的方向:总有一个方向是变化最快的。&lt;/p&gt;
&lt;h2 id=&quot;求导的链式法则&quot;&gt;1.2 求导的链式法则&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(x \in R\)&lt;/span&gt;, &lt;span class=&quot;math inline&quot;&gt;\(z=g(f(x))\)&lt;/span&gt;, &lt;span class=&quot;math inline&quot;&gt;\(y=f(x)\)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \frac{\partial z}{\partial x}=\frac{\partial z}{\partial y} \frac{\partial y}{\partial x}\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;$ x \in R^m $, &lt;span class=&quot;math inline&quot;&gt;\(f(x)\)&lt;/span&gt;是&lt;span class=&quot;math inline&quot;&gt;\(R^M\)&lt;/span&gt;到&lt;span class=&quot;math inline&quot;&gt;\(R^n\)&lt;/span&gt;的映射，&lt;span class=&quot;math inline&quot;&gt;\(g(f)\)&lt;/span&gt;是&lt;span class=&quot;math inline&quot;&gt;\(R^n\)&lt;/span&gt;到R的映射&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \frac{\partial g}{\partial x_i}=\sum_j^n \frac{\partial g}{\partial f_i} \frac{\partial f_i}{\partial x_i}\]&lt;/span&gt;&lt;br/&gt;如果使用向量表示&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \nabla_x^z=(\frac{\partial f}{\partial x})^T \nabla_y^z\]&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;梯度&quot;&gt;2.1 梯度&lt;/h2&gt;
&lt;p&gt;梯度其实本质也是一个向量，对于函数&lt;span class=&quot;math inline&quot;&gt;\(f(X,y)\)&lt;/span&gt;&lt;br/&gt;在&lt;span class=&quot;math inline&quot;&gt;\((W,y)\)&lt;/span&gt;这一点的梯度 $ (\frac{\partial f}{\partial X},\frac{\partial f}{\partial y})$&lt;br/&gt;梯度的几何意义：在该店变化增加最快的地方&lt;/p&gt;
&lt;h2 id=&quot;梯度算法的解释&quot;&gt;2.2 梯度算法的解释&lt;/h2&gt;
&lt;p&gt;图来自吴恩达的机器学习课程&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/963294/201903/963294-20190315213847425-924519885.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;颜色偏红(A)的地方开始，根据梯度的负方向通过9次更新，达到了最小值(B)。&lt;br/&gt;现在给定一个点&lt;span class=&quot;math inline&quot;&gt;\(A(\theta_0,\theta_1)\)&lt;/span&gt;,干嘛呢，我们想从A到B点（最小值点),类似人类下山，需要知道往那个方向吧、走大多一步呢？&lt;br/&gt;方向：梯度的负方向 &lt;span class=&quot;math inline&quot;&gt;\(\delta=(\frac{\partial L}{\partial \theta_0},\frac{\partial L}{\partial \theta_1}))\)&lt;/span&gt;&lt;br/&gt;步长：学习率（&lt;span class=&quot;math inline&quot;&gt;\(\alpha\)&lt;/span&gt;)&lt;br/&gt;因此，计算一次里目标更近了 &lt;span class=&quot;math inline&quot;&gt;\((\theta_0,\theta_1)=(\theta_0,\theta_1)-\alpha \dot (\delta)\)&lt;/span&gt;&lt;br/&gt;在重复上两步，直到满意为止。&lt;/p&gt;

&lt;h2 id=&quot;理论推导&quot;&gt;3.1 理论推导&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/963294/201903/963294-20190315213756314-81793156.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;符号说明&quot;&gt;3.1.1 符号说明&lt;/h3&gt;
&lt;p&gt;上图是一个L层的神经网络，输入层为第一层，隐藏层：2至&lt;span class=&quot;math inline&quot;&gt;\(L-1\)&lt;/span&gt;层，输出层L&lt;/p&gt;
&lt;p&gt;令 输入向量 &lt;span class=&quot;math inline&quot;&gt;\(\vec{X}\)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \vec{X} = (x_1,x_2,...,x_{m-1},x_m)\]&lt;/span&gt;&lt;br/&gt;输出向量 &lt;span class=&quot;math inline&quot;&gt;\(\vec{Y}\)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \vec{Y}=(y_1,y_2,...,y_{n-1},y_n)\]&lt;/span&gt;&lt;br/&gt;第j层隐藏层的输出向量 &lt;span class=&quot;math inline&quot;&gt;\(\vec{h^{(j)}}\)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[\vec{h^{(j)}}=(h_1^{(j)},h_2^{{j}},...,h_{t-1}^{(j)},h_tj^{(j)})\]&lt;/span&gt;&lt;br/&gt;其中，&lt;span class=&quot;math inline&quot;&gt;\(tj\)&lt;/span&gt;:表示第j的隐藏层个数&lt;br/&gt;第&lt;span class=&quot;math inline&quot;&gt;\((l-1)\)&lt;/span&gt;层的第i个神经元到第&lt;span class=&quot;math inline&quot;&gt;\(l\)&lt;/span&gt;层的第j个神经元的连接权重：&lt;span class=&quot;math inline&quot;&gt;\(w_{ij}^{(l)}\)&lt;/span&gt;，则第&lt;span class=&quot;math inline&quot;&gt;\((l-1)\)&lt;/span&gt;层神经元到第&lt;span class=&quot;math inline&quot;&gt;\(l\)&lt;/span&gt;层神经元的连接权重矩阵&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[W^{(l)}=\left( \begin{matrix}w_{11}^{(l)}&amp;amp; \cdots &amp;amp; w_{1(tj)}\\ &amp;amp; \dots &amp;amp;\\ w_{s(l-1)}^{l}&amp;amp;\cdots&amp;amp;w_{s(l-1)s(l)}^{l} \end{matrix}\right)\]&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;推导过程&quot;&gt;3.1.2 推导过程&lt;/h3&gt;
&lt;h4 id=&quot;误差&quot;&gt;3.1.2.1 误差&lt;/h4&gt;
&lt;p&gt;定义的误差函数,常见的衡量性指标见 &lt;a href=&quot;http://www.cnblogs.com/xiemaycherry/p/10539664.html#3.6&quot;&gt;戳我&lt;/a&gt;,这里选择的误差平方和最小&lt;br/&gt;第&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;个输出的误差,假设实际输出&lt;span class=&quot;math inline&quot;&gt;\((d(1),d(2),...,d(n))\)&lt;/span&gt;：,一个输入样本对应的误差&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[E(i)=\frac{1}{2}\sum_{k=1}^n(y(i)-d(i))^2=\frac{1}{2}||y-d||^2\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;所有训练样本(&lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;)的误差：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[E(i)=\frac{1}{2}\sum_{j=1}^{N}(\sum_{k=1}^n(y(i)-d(i))^2)=\frac{1}{2N}\sum_{j=1}^{N}(||y(i)-d(i)||^2)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;因此，&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ E = \frac{1}{2N}\sum_{i=1}^N(||y(i)-d(i)||^2)\]&lt;/span&gt;&lt;br/&gt;其实，神经网络的输出是关于节点的复合函数。代价函数是关于&lt;span class=&quot;math inline&quot;&gt;\(W\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt;的函数。&lt;/p&gt;
&lt;h4 id=&quot;正向传播&quot;&gt;3.1.2.2 正向传播&lt;/h4&gt;
&lt;p&gt;输入层&lt;span class=&quot;math inline&quot;&gt;\(\hat{X}\)&lt;/span&gt;：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ X =(x_1,x_2,x_3,...,x_m)\]&lt;/span&gt;&lt;br/&gt;当有&lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;个训练样本时，可用矩阵表示&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ X=\left( \begin{matrix} x_{11} &amp;amp;x_{12}&amp;amp;...&amp;amp;x_{1m}\\ x_{21} &amp;amp; x_{22}&amp;amp;...&amp;amp;x_{2m}\\ \vdots &amp;amp; \vdots&amp;amp;\dots&amp;amp;\vdots\\ x_{N1} &amp;amp; \vdots&amp;amp;\vdots&amp;amp;x_{Nm}\\ \end{matrix} \right)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第二层 &lt;span class=&quot;math inline&quot;&gt;\(h^{(2)}\)&lt;/span&gt;,一共&lt;span class=&quot;math inline&quot;&gt;\(s2\)&lt;/span&gt;个节点:&lt;br/&gt;第i个节点的计算&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[h^{(2)}(i)=f(\sum_{j=1}^{s2}x(j)*w_{ji}^{(l)}+b_i)=f(x*w(:,i)+b_i)\]&lt;/span&gt;&lt;br/&gt;矩阵表示&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ h^{(2)}=f(x*W^{(l)}+b^{(2)})\]&lt;/span&gt;&lt;br/&gt;第i层 矩阵形式&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ h^{(l)}=f(h^{(l-1)}*W^{(l)}+b)\]&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;反向传播&quot;&gt;3.1.2.3 反向传播&lt;/h4&gt;
&lt;p&gt;梯度下降法更新权重，不断迭代到最优解。&lt;br/&gt;对&lt;span class=&quot;math inline&quot;&gt;\(w_{ij}\)&lt;/span&gt;求导数可得,可更新&lt;span class=&quot;math inline&quot;&gt;\(w_{ij}\)&lt;/span&gt;更新公式：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ w_{ij}=w_{ij}-\alpha \frac{\partial E}{\partial w_{ij}}\]&lt;/span&gt;&lt;br/&gt;当然简单的情况下，可直接写出公式，当太复杂的时候，引入BP简化求导&lt;/p&gt;
&lt;p&gt;方便书写公式，对于第i的输入&lt;span class=&quot;math inline&quot;&gt;\(h^{(i-1)}*W^{(i)}+b^{(i)}\)&lt;/span&gt;记作&lt;span class=&quot;math inline&quot;&gt;\(net^{(i)}\)&lt;/span&gt;,其中，第&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;的输入和输出的关系，&lt;span class=&quot;math inline&quot;&gt;\(输入=f(输出)\)&lt;/span&gt;&lt;br/&gt;下面开始推导&lt;/p&gt;
&lt;p&gt;首先，对于&lt;span class=&quot;math inline&quot;&gt;\(L\)&lt;/span&gt;层，&lt;/p&gt;
&lt;p&gt;对于&lt;span class=&quot;math inline&quot;&gt;\(W^{(L)}\)&lt;/span&gt;，先看对&lt;span class=&quot;math inline&quot;&gt;\(W_{ij}^{(L)}\)&lt;/span&gt;求导，&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \frac{\partial E}{\partial W_{ij}^{(L)}} =\frac{\partial E}{\partial y(j)} * \frac{\partial y(i)}{\partial net_{j}^{L}} * \frac{\partial net_{j}^{L}}{\partial W_{ij}^{(L)}}\\ =(y(j)-d(j))*f(x)^{'}|_{x=net_j^{(L)}}h_i^{(L-1)}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;令&lt;span class=&quot;math inline&quot;&gt;\(\delta_i^{(L)}=y(i)-d(i)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;上述给出了单个分量的求偏导的结果，对于&lt;span class=&quot;math inline&quot;&gt;\(W^{(L)}\)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \frac{\partial E}{\partial W^{(L)}} =\left[\begin{matrix} \frac{\partial E}{\partial W_{11}^{(L)}} &amp;amp; \frac{\partial E}{\partial W_{12}^{(L)}}&amp;amp;\dots &amp;amp; \frac{\partial E}{\partial W_{1n}^{(L)}}\\ \frac{\partial E}{\partial W_{21}^{(L)}} &amp;amp; \frac{\partial E}{\partial W_{22}^{(L)}}&amp;amp;\dots&amp;amp; \frac{\partial E}{\partial W_{2n}^{(L)}}\\ \vdots&amp;amp; \dots&amp;amp; \dots&amp;amp; \dots\\ \frac{\partial E}{\partial W_{sL,1}^{(L)}} &amp;amp; \frac{\partial E}{\partial W_{sL,2}^{(L)}}&amp;amp;\dots&amp;amp; \frac{\partial E}{\partial W_{sL,n}^{(L)}} \end{matrix}\right] \\= \left[ \begin{matrix} h^{(L-1)}_1\\h^{(L-1)}_2\\ \dots\\h^{(L-1)}_n \end{matrix} \right] *\left[\begin{matrix} \delta_1^{(L)}f(x)^{'}|_{x=net_1^{(L)}}\\ \delta_2^{(L)}f(x)^{'}|_{x=net_2^{(L)}}\\ \dots\\ \delta_n^{(L)}f(x)^{'}|_{x=net_n^{(L)}} \end{matrix}\right] ^T =h^{(L-1)}S^{(L)} \]&lt;/span&gt;&lt;br/&gt;其中，&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ S^{(L)}=\left[\begin{matrix} \delta_1^{(L)}f(x)^{'}|_{x=net_1^{(L)}}\\ \delta_2^{(L)}f(x)^{'}|_{x=net_2^{(L)}}\\ \dots\\ \delta_n^{(L)}f(x)^{'}|_{x=net_n^{(L)}} \end{matrix}\right]^T \]&lt;/span&gt;&lt;br/&gt;同理可得，&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \frac{\partial E}{\partial b_k^{(L)}}=(y(j)-d(j))*f(x)^{'}|_{x=net_j^{(L)}} \]&lt;/span&gt;&lt;br/&gt;其次，对于隐含层&lt;span class=&quot;math inline&quot;&gt;\(L-1\)&lt;/span&gt;层，对&lt;span class=&quot;math inline&quot;&gt;\(W_{ij}^{(L)}\)&lt;/span&gt;求导&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \frac{\partial E}{\partial W_{ij}^{(L-1)}} =\sum_{k=1}^{n}\frac{\partial E}{\partial y(k)} * \frac{\partial y(k)}{\partial net_{k}^{L}} * \frac{\partial net_{k}^{L}}{\partial f(net_j^{(L-1)})}*\frac{\partial f(net_j^{(L-1)})}{\partial net_j^{(L-1)}}*\frac{\partial net_j^{(L-1)}}{\partial W_{ij}^{(L-1)}}\\ =\sum_{k=1}^{n} (y(j)-d(j))*f(x)^{'}|_{x=net_j^{(L)}}W_{kj}^{(L)}f(x)^{'}|_{x=net_j^{L-1}}h_i^{L-2}\\ =\sum_{k=1}^{n}S_i^{(L)}W_{kj}^{(L)}f(x)^{'}|_{x=net_j^{L-1}}h_i^{L-2}\\ \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;写出矩阵形式,对&lt;span class=&quot;math inline&quot;&gt;\(W^{(L-1)}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \frac{\partial E}{\partial W^{(L-1)}}=\left[\begin{matrix} h^{(L-2)}_1\\h^{(L-2)}_2\\\vdots\\h^{(L-2)}_{s(L-2)}\end{matrix}\right] \left[\begin{matrix} \delta_1^{(L)}f(x)^{'}|_{x=net_1^{(L)}}\\ \delta_2^{(L)}f(x)^{'}|_{x=net_2^{(L)}}\\ \dots\\ \delta_n^{(L)}f(x)^{'}|_{x=net_n^{(L)}} \end{matrix}\right]^T \left[\begin{matrix} W_{11}^{(L)} &amp;amp; W_{12}^{(L)}&amp;amp;\dots &amp;amp; W_{1n}^{(L)}\\ W_{21}^{(L)} &amp;amp; W_{22}^{(L)}&amp;amp;\dots&amp;amp; W_{2n}^{(L)}\\ \vdots&amp;amp; \dots&amp;amp; \dots&amp;amp; \dots\\ W_{s(L-1),1}^{(L)} &amp;amp; W_{s(L-1),2}^{(L)}&amp;amp;\dots&amp;amp; W_{s(L-1),n}^{(L)} \end{matrix}\right]^T \\ \left[ \begin{array}{ccc}{f^{'(L-1)}\left(net^{(L-1)}_{(1)}\right)} &amp;amp; {0} &amp;amp; {0}&amp;amp;{0} \\ {0} &amp;amp; {f^{'(L-1)}\left(net^{(L-1)}_{(2)}\right)} &amp;amp; {0} &amp;amp;{0}\\ 0 &amp;amp; \dots &amp;amp; \vdots &amp;amp; 0\\{0} &amp;amp; {0} &amp;amp; {0}&amp;amp;{f^{(L-1)}\left(ne t_{s(L-1)}^{(L-1)}\right)}\end{array}\right]\\ =h^{(L-2)}S^{(L-1)} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ S^{(L-1)}=\left(\left[\begin{matrix} f(x)^{'(L)}|_{x=net_1^{(L)}}&amp;amp;0&amp;amp; \dots&amp;amp; 0\\ 0&amp;amp;f(x)^{'}|_{x=net_2^{(L)}}0&amp;amp; \dots&amp;amp; 0\\ 0&amp;amp;\dots&amp;amp;\dots&amp;amp;0\\ 0&amp;amp;0&amp;amp;0&amp;amp;f(x)^{'(L)}|_{x=net_n^{(L)}} \end{matrix}\right]\left[\begin{matrix} \delta_1^{(L)}\\\delta_2^{(L)}\\\vdots\\\delta_n^{(L)}\end{matrix}\right] \right)^T\\ \left[\begin{matrix} W_{11}^{(L)} &amp;amp; W_{12}^{(L)}&amp;amp;\dots &amp;amp; W_{1n}^{(L)}\\ W_{21}^{(L)} &amp;amp; W_{22}^{(L)}&amp;amp;\dots&amp;amp; W_{2n}^{(L)}\\ \vdots&amp;amp; \dots&amp;amp; \dots&amp;amp; \dots\\ W_{s(L-1),1}^{(L)} &amp;amp; W_{s(L-1),2}^{(L)}&amp;amp;\dots&amp;amp; W_{s(L-1),n}^{(L)}* \end{matrix}\right]^T \left[ \begin{array}{ccc}{f^{'(L-1)}\left(net^{(L-1)}_{(1)}\right)} &amp;amp; {0} &amp;amp; {0}&amp;amp;{0} \\ {0} &amp;amp; {f^{'(L-1)}\left(net^{(L-1)}_{(2)}\right)} &amp;amp; {0} &amp;amp;{0}\\ 0 &amp;amp; \dots &amp;amp; \vdots &amp;amp; 0\\{0} &amp;amp; {0} &amp;amp; {0}&amp;amp;{f^{(L-1)}\left(ne t_{s(L-1)}^{(L-1)}\right)}\end{array}\right]\\ =S^{(L)}\left[\begin{matrix} W_{11}^{(L)} &amp;amp; W_{12}^{(L)}&amp;amp;\dots &amp;amp; W_{1n}^{(L)}\\ W_{21}^{(L)} &amp;amp; W_{22}^{(L)}&amp;amp;\dots&amp;amp; W_{2n}^{(L)}\\ \vdots&amp;amp; \dots&amp;amp; \dots&amp;amp; \dots\\ W_{s(L-1),1}^{(L)} &amp;amp; W_{s(L-1),2}^{(L)}&amp;amp;\dots&amp;amp; W_{s(L-1),n}^{(L)}* \end{matrix}\right]^T\left[ \begin{array}{ccc}{f^{'(L-1)}\left(net^{(L-1)}_{(1)}\right)} &amp;amp; {0} &amp;amp; {0}&amp;amp;{0} \\ {0} &amp;amp; {f^{'(L-1)}\left(net^{(L-1)}_{(2)}\right)} &amp;amp; {0} &amp;amp;{0}\\ 0 &amp;amp; \dots &amp;amp; \vdots &amp;amp; 0\\{0} &amp;amp; {0} &amp;amp; {0}&amp;amp;{f^{(L-1)}\left(ne t_{s(L-1)}^{(L-1)}\right)}\end{array}\right]*\\ \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;对&lt;span class=&quot;math inline&quot;&gt;\(1&amp;lt;l&amp;lt;L\)&lt;/span&gt;,求&lt;span class=&quot;math inline&quot;&gt;\(W^{(l)}\)&lt;/span&gt;的偏导,&lt;/p&gt;
&lt;p&gt;最后，根据上述的推导喔，很容易得出&lt;span class=&quot;math inline&quot;&gt;\(S^{(l)}\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(S^{(l+1)}\)&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ S^{(l)}=S^{(l+1)}W^{(l+1)^T}F^{'(l)}(net^{(l)})\\ S^{(L)}=(Y-\hat{Y})F^{'(L)}(net^{(L)}) \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \frac{\partial E}{\partial W^{(l)}}=\left[\begin{matrix}h^{(l-1)}_1\\h^{(l-1)}_2 \\\dots \\h^{(l-1)}_{sl}\end{matrix}\right]S^{(l+1)} \left[\begin{matrix}W_{11}^{(l+1)}&amp;amp;W_{12}^{(l+1)} &amp;amp;\dots&amp;amp; W_{2(sl+1)}^{(l+1)}\\ W_{21}^{(l+1)}&amp;amp;W_{22}^{(l+1)} &amp;amp;\dots&amp;amp; W_{2(sl+1)}^{(l+1)}\\ \dots&amp;amp;\dots&amp;amp;\dots&amp;amp;\dots\\ W_{sl1}^{(l+1)}&amp;amp;W_{sl2}^{(l+1)} &amp;amp;\dots&amp;amp; W_{sl(sl+1)}^{(l+1)}\\ \end{matrix} \right]^T\left[\begin{matrix} \partial f^{'(l)}(net_1^{l})&amp;amp;0&amp;amp;\dots &amp;amp; 0\\ 0\\0 &amp;amp;\partial f^{'(l)}(net_2^{l})&amp;amp;\dots&amp;amp;0\\ 0 &amp;amp; 0&amp;amp;\dots&amp;amp;0\\ 0&amp;amp;0&amp;amp;\dots&amp;amp;\partial f^{'(l)}(net_l^{l})\end{matrix}\right] \]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;bp算法的小结&quot;&gt;3.2 BP算法的小结&lt;/h2&gt;
&lt;p&gt;算法分为两个阶段：前向阶段和后向传播阶段&lt;/p&gt;
&lt;p&gt;后向阶段算法：&lt;/p&gt;
&lt;p&gt;Step 1: 计算&lt;span class=&quot;math inline&quot;&gt;\(\hat{y}^{(L)}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Step 2: for l =L:2&lt;/p&gt;
&lt;p&gt;​ 计算&lt;span class=&quot;math inline&quot;&gt;\(S^{(l)}=S^{(l+1)}W^{(l+1)}F'(net^{(l)})\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;​ 计算 $\Delta W^{(l)}=h^{(l-1)}S^{(l)} $&lt;/p&gt;
&lt;p&gt;​ 计算&lt;span class=&quot;math inline&quot;&gt;\(W^{(l)}=W^{(l)}-\delta \Delta W^{(l)}\)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;python实现&quot;&gt;3.3 Python实现&lt;/h2&gt;
&lt;h3 id=&quot;最简单三层网络&quot;&gt;3.3.1 最简单三层网络&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;'''
不用任何框架，自己写一个三层的神经网络
# input-3,hidden-4 output-1
'''
import numpy as np

np.random.seed(1)

# Input Matrix
X = np.array([[0, 0, 1],
              [0, 1, 1],
              [1, 0 ,1],
              [1, 1, 1],])

# Output Matrix
y = np.array([[0],
              [1],
              [1],
              [0]])
# Nonlinear function
def sigmoid(X,derive=False):
    if not derive:
        return 1 / (1 + np.exp(-X))
    else:
        return X*(1-X)
# relu
def relu(X,derive = False):
    if not derive:
        return np.maximum(0,X)
    else:
        return (X&amp;gt;0).astype(float)
        
# Weight bias
W1 = 2 * np.random.random((3, 4))-1
b1 = 0.1 * np.ones((4,))
 
W2 = 2 * np.random.random((4,1))-1
b2 = 0.1 * np.ones((1,))
 
rate = 0.1
noline = relu
# Training
train_times = 200
 
for time in range(train_times):
    # Layer one
    A1 = np.dot(X,W1)+b1
    Z1 = noline(A1)
    # Layer two 
    A2 = np.dot(Z1, W2)+b2
    Z2 = noline(A2)
    
    cost = -y+Z2
    
    # Calc deltas 
    S2= cost*noline(A2,True)
    delta_W2 = np.dot(Z1.T,S2)
    bias2 = S2.sum(axis=0)
    
    S1 = np.dot(S2, W2.T)*noline(A1,True)
    delta_W1= np.dot(X.T, S1)
    bias1 = S1.sum(axis=0)
    # update
    W1 = W1-rate*delta_W1
    b1 = b1-rate*bias1
    W2 = W2-rate*delta_W2
    b2 = b2-rate*bias2
    
    print('error',np.mean(((y-Z2)*(y-Z2))**2))

print(&quot;prediction&quot;,Z2)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;附录&quot;&gt;&lt;span&gt;3.4 附录&lt;/span&gt;：&lt;/h2&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Mean absolute percentage error&lt;/td&gt;
&lt;td&gt;MAPE&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Root mean squares percentage error&lt;/td&gt;
&lt;td&gt;RMSPE&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Mean absolute percentage error&lt;/td&gt;
&lt;td&gt;MAE&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Mean squares error&lt;/td&gt;
&lt;td&gt;MSE&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Index of agreement&lt;/td&gt;
&lt;td&gt;IA&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Theil U statistic 1&lt;/td&gt;
&lt;td&gt;U1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Theil U statistic 2&lt;/td&gt;
&lt;td&gt;U2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Correlation coefficient&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;MAPE = &lt;span class=&quot;math inline&quot;&gt;\(\frac{1}{n} \sum_{k=1}^{n}\left|\frac{x^{(0)}(k)-\hat{x}^{(0)}(k)}{x^{(0)}(k)}\right| \times 100\)&lt;/span&gt;&lt;br/&gt;RMSPE = &lt;span class=&quot;math inline&quot;&gt;\(\sqrt{\frac{1}{n} \sum_{k=1}^{n}\left(\frac{\hat{x}^{(0)}(k)-x^{(0)}(k)}{x^{(0)}(k)}\right)^{2}} \times 100\)&lt;/span&gt;&lt;br/&gt;MAE = &lt;span class=&quot;math inline&quot;&gt;\(\frac{1}{n} \sum_{k=1}^{n}\left|\hat{x}^{(0)}(k)-x^{(0)}(k)\right|\)&lt;/span&gt;&lt;br/&gt;MSE = &lt;span class=&quot;math inline&quot;&gt;\(\frac{1}{n} \sum_{k=1}^{n}\left(\hat{x}^{(0)}(k)-x^{(0)}(k)\right)^{2}\)&lt;/span&gt;&lt;br/&gt;IA = &lt;span class=&quot;math inline&quot;&gt;\(1-\frac{\sum_{k=1}^{n}\left(\hat{x}^{(0)}(k)-x^{(0)}(k)\right)^{2}}{\sum_{k=1}^{n} \left( \left| \hat{x}^{(0)}(k)-\overline{x} \right|+\left| x^{(0)}(k)-\overline{x}\right| \right)^{2}}\)&lt;/span&gt;&lt;br/&gt;U1 = &lt;span class=&quot;math inline&quot;&gt;\(\frac{\sqrt{\frac{1}{n} \sum_{k=1}^{n}\left(x^{(0)}(k)-x^{(0)}(k)\right)^{2}}}{\sqrt{\frac{1}{n} \sum_{k=1}^{n} x^{(0)}(k)^{2}}+\sqrt{\frac{1}{n} \sum_{k=1}^{n} x^{(0)}(k)^{2}}}\)&lt;/span&gt;&lt;br/&gt;U2 = &lt;span class=&quot;math inline&quot;&gt;\(\frac{\left[\sum_{k=1}^{n}\left(\hat{x}^{(0)}(k)-x^{(0)}(k)\right)^{2}\right]^{1 / 2}}{\left[\sum_{k=1}^{n} x^{(0)}(k)^{2}\right]^{1 / 2}}\)&lt;/span&gt;&lt;br/&gt;R = &lt;span class=&quot;math inline&quot;&gt;\(\frac{\operatorname{Cov}(\hat{x}^{(0)}, x^{(0)})}{\sqrt{\operatorname{Var}[\hat{x}^{(0)}] \operatorname{Var}[x^{(0)}]}}\)&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 15 Mar 2019 13:32:00 +0000</pubDate>
<dc:creator>XieMay</dc:creator>
<og:description>[TOC] 1. 需要的微积分知识 1.1 导数 对于一元函数，在导数存在的情况下，在某一点的导数，也就是该点的斜率。 对于多元函数，对于某一点求导，则需要指明方向，两个特殊的方向，1. 偏导：在坐标</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiemaycherry/p/10539664.html</dc:identifier>
</item>
</channel>
</rss>