<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Centos7+lnmp+zabbix+分离mysql实验 - 乐章</title>
<link>http://www.cnblogs.com/zhangxingeng/p/10414070.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangxingeng/p/10414070.html</guid>
<description>&lt;h2&gt;一、简介&lt;/h2&gt;
&lt;p&gt;　　&lt;strong&gt;1、什么是zabbix&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　zabbix是一个企业级的、开源的、分布式的监控套件。&lt;/p&gt;
&lt;p&gt;　　　　zabbix可以对网络和服务进行完整性，健康性的监控。zabbix利用灵活的告警机制，可以实验微信，短信和邮件自动报警，zabbix利用存储的监控数据提供监控报告及实现图形化显示。&lt;/p&gt;
&lt;p&gt;　　　　zabbix支持主动轮询和被动捕获，zabbix所有的报告、统计信息和配置参数都可以通过基于web的前端页面可以确保您从任何方面评估您的网络状态和服务器健康性&lt;/p&gt;
&lt;p&gt;　　　　重要的是zabbix还是免费的。　　　&lt;/p&gt;
&lt;p&gt;　&lt;strong&gt;　2、zabbix特性&lt;/strong&gt;　　　　&lt;/p&gt;
&lt;p&gt;　　　　zabbix是一个高度集成的网络监控套件，通过一个软件包即可提供如下特性&lt;/p&gt;
&lt;p&gt;　　　　　　数据收集&lt;/p&gt;
&lt;p&gt;　　　　　　　　可用性和性能检查&lt;/p&gt;
&lt;p&gt;　　　　　　　　支持SNMP（包括捕获和主动轮训），IPMI,JMX,VMware监控&lt;/p&gt;
&lt;p&gt;　　　　　　　　自定义检查&lt;/p&gt;
&lt;p&gt;　　　　　　　　按照自定义的间隔收集需要的数据&lt;/p&gt;
&lt;p&gt;　　　　　　灵活的阈值定义&lt;/p&gt;
&lt;p&gt;　　　　　　　　可以非常灵活的定义问题阈值，称之为触发器，触发器从后端数据库获取参考值&lt;/p&gt;
&lt;p&gt;　　　　　　高级告警配置&lt;/p&gt;
&lt;p&gt;　　　　　　　　可以根据升级计划，接收方和媒体类型来定制发送告警通知，使用宏变量可以是告警通知更有意义更高效，自动化动作包含执行远程命令&lt;/p&gt;
&lt;p&gt;　　　　　　实时绘图&lt;/p&gt;
&lt;p&gt;　　　　　　　　使用内置图表绘制功能可以将监控项的内容立即绘制成图表&lt;/p&gt;
&lt;p&gt;　　　　　　扩展的图形化显示&lt;/p&gt;
&lt;p&gt;　　　　　　　　能够自定义图形，图像中可将多个监控项组合在一个视图展示&lt;/p&gt;
&lt;p&gt;　　　　　　　　网络拓扑图&lt;/p&gt;
&lt;p&gt;　　　　　　　　以仪表盘的样式展现自定义的展现和幻灯片&lt;/p&gt;
&lt;p&gt;　　　　　　　　报告&lt;/p&gt;
&lt;p&gt;　　　　　　　　监控资源高级（业务）视图&lt;/p&gt;
&lt;p&gt;　　　　　　历史数据存储&lt;/p&gt;
&lt;p&gt;　　　　　　　　数据存储在数据库中&lt;/p&gt;
&lt;p&gt;　　　　　　　　可配置历史数据&lt;/p&gt;
&lt;p&gt;　　　　　　　　内置数据管理机制&lt;/p&gt;
&lt;p&gt;　　　　　　配置简单&lt;/p&gt;
&lt;p&gt;　　　　　　　　将被监控对象添加为主机&lt;/p&gt;
&lt;p&gt;　　　　　　　　主机被创建用于监控，在数据库中是唯一的&lt;/p&gt;
&lt;p&gt;　　　　　　　　应用模板来监控设备　　　&lt;/p&gt;
&lt;p&gt;　　　　　　模板使用&lt;/p&gt;
&lt;p&gt;　　　　　　　　在模板中分组检查&lt;/p&gt;
&lt;p&gt;　　　　　　　　模板可以关联其他模板&lt;/p&gt;
&lt;p&gt;　　　　　　网络自动发现&lt;/p&gt;
&lt;p&gt;　　　　　　　　自动发现网络设备&lt;/p&gt;
&lt;p&gt;　　　　　　　　监控代理自动注册&lt;/p&gt;
&lt;p&gt;　　　　　　　　发现文件系统，网络接口和snmp oid 值&lt;/p&gt;
&lt;p&gt;　　　　　　简介的web界面&lt;/p&gt;
&lt;p&gt;　　　　　　　　web前端基于php&lt;/p&gt;
&lt;p&gt;　　　　　　　　可从任何地方访问&lt;/p&gt;
&lt;p&gt;　　　　　　　　你可以定制自己的操作方式&lt;/p&gt;
&lt;p&gt;　　　　　　　　审核日志&lt;/p&gt;
&lt;p&gt;　　　　　　API&lt;/p&gt;
&lt;p&gt;　　　　　　　  提供了对外的可编程接口，用于批量操作，第三方软件集成和其他目的&lt;/p&gt;
&lt;p&gt;　　　　　　权限管理系统&lt;/p&gt;
&lt;p&gt;　　　　　　　　安全用户认证&lt;/p&gt;
&lt;p&gt;　　　　　　　　特定用户可以限制访问特定视图&lt;/p&gt;
&lt;p&gt;　　　　　　功能强大并易于扩展的监控代理&lt;/p&gt;
&lt;p&gt;　　　　　　　　部署在被监控对象上&lt;/p&gt;
&lt;p&gt;　　　　　　　　可以部署在linux和windows上&lt;/p&gt;
&lt;p&gt;　　　　　　二进制代码&lt;/p&gt;
&lt;p&gt;　　　　　　　　为了性能和更少内存的占用，用c语言编写&lt;/p&gt;
&lt;p&gt;　　　　　　　　便于移植&lt;/p&gt;
&lt;p&gt;　　　　　　为复杂环境准备&lt;/p&gt;
&lt;p&gt;　　　　　　　　使用zabbix proxy代理服务器，使得远程监控更简单&lt;/p&gt;


&lt;p&gt;　　&lt;strong&gt;3、zabbix监控组件及流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　&lt;/strong&gt;　主要由三大部分组成zabbix server，zabbix proxy，agent客户端&lt;/p&gt;
&lt;p&gt;　　　　zabbix server包括web GUI、database、zabbix server。&lt;/p&gt;
&lt;p&gt;　　　　监控组件图示如下：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190222111126928-1359800918.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　zabbix监控流程如下图：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190222115534741-974531015.jpg&quot; alt=&quot;&quot; width=&quot;901&quot; height=&quot;569&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　zabbix监控的完整流程，agent安装在被监控的主机上，agent负责定期收集客户端各项数据，并发送到zabbix server端，zabbix server收到数据，将数据存储到数据库中，用户基于zabbix web 可以看到数据在前端展现的图像。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、开始安装并配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　1、架构&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190221172954195-663148680.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;2、环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　zabbix server ：192.168.216.51&lt;/p&gt;
&lt;p&gt;　　zabbix mysql： 192.168.216.52&lt;/p&gt;
&lt;p&gt;　　zabbix agent： 192.168.216.53&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　3、web1安装软件，linux+nginx+php&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;配置好epel源，zabbix源及关闭selinux，firewall&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;wget&lt;/span&gt; -O /etc/&lt;span&gt;yum&lt;/span&gt;.repos.d/CentOS-Base.repo http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/repo/Centos-7.repo   #下载最新的base &lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; epel-release&lt;span&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　  #安装epel
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm #安装zabbix&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　各软件版本&lt;/p&gt;

&lt;p&gt;　　　　2.1、安装nginx&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　51 上部署nginx，zabbx，php-fpm&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;&lt;span&gt; nginx -y
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; yum install zabbix-server-mysql zabbix-web-mysql zabbix-get
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; -y php php-devel php-fpm php-mysql php-common php-devel php-gd libjpeg* php-imap php-&lt;br/&gt;ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-bcmath php-mhash libmcrypt libmcrypt-devel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　各软件版本&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@web1 &lt;span&gt;yum&lt;/span&gt;.repos.d]# rpm -qa |&lt;span&gt;grep&lt;/span&gt;&lt;span&gt; zabbix 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; zabbix-release-&lt;span&gt;4.0&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.noarch
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; zabbix-web-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.noarch
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; zabbix-web-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.noarch
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; zabbix-get-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; [root@web1 &lt;span&gt;yum&lt;/span&gt;.repos.d]# rpm -qa |&lt;span&gt;grep&lt;/span&gt;&lt;span&gt; zabbix
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; zabbix-release-&lt;span&gt;4.0&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.noarch
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; zabbix-web-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.noarch
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; zabbix-web-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.noarch
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; zabbix-get-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; [root@web1 &lt;span&gt;yum&lt;/span&gt;.repos.d]# rpm -qa |&lt;span&gt;grep&lt;/span&gt; php*
&lt;span&gt;14&lt;/span&gt; php-process-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; php-ldap-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; php-xml-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; hyphen-&lt;span&gt;2.8&lt;/span&gt;.&lt;span&gt;6&lt;/span&gt;-&lt;span&gt;5&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; php-mysql-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; php-mcrypt-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;7&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; libmspack-&lt;span&gt;0.5&lt;/span&gt;-&lt;span&gt;0.4&lt;/span&gt;&lt;span&gt;.alpha.el7.x86_64
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; php-gd-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; php-bcmath-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; php-pear-&lt;span&gt;1.9&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;21&lt;/span&gt;&lt;span&gt;.el7.noarch
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; plymouth-graphics-libs-&lt;span&gt;0.8&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;0.26&lt;/span&gt;.&lt;span&gt;20140113&lt;/span&gt;&lt;span&gt;.el7.centos.x86_64
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; php-mbstring-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; php-pdo-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; php-imap-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;7&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; php-xmlrpc-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; libreoffice-graphicfilter-&lt;span&gt;5.0&lt;/span&gt;.&lt;span&gt;6.2&lt;/span&gt;-&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; gvfs-gphoto2-&lt;span&gt;1.22&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; graphite2-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;6&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7_2.x86_64
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; php-common-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; php-odbc-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; php-fpm-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; libgphoto2-&lt;span&gt;2.5&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; php-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; php-devel-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; php-cli-&lt;span&gt;5.4&lt;/span&gt;.&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; python2-cryptography-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; hyphen-en-&lt;span&gt;2.8&lt;/span&gt;.&lt;span&gt;6&lt;/span&gt;-&lt;span&gt;5&lt;/span&gt;&lt;span&gt;.el7.noarch
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; [root@web1 &lt;span&gt;yum&lt;/span&gt;.repos.d]# 
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;Installed:
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   zabbix-get.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7  zabbix-server-mysql.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7  zabbix-web-mysql.noarch &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;Dependency Installed:
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;   OpenIPMI-libs.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;2.0&lt;/span&gt;.&lt;span&gt;23&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;.el7     OpenIPMI-modalias.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;2.0&lt;/span&gt;.&lt;span&gt;23&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;.el7     fping.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;3.10&lt;/span&gt;-&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.el7    
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;   iksemel.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;1.4&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;.el7.centos       zabbix-web.noarch &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7            
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; 
&lt;span&gt;8&lt;/span&gt; Complete!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;　　　2.2、部署数据库&lt;/p&gt;
&lt;p&gt;　　　　52 上部署&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;  -y mariadb-embedded mariadb-libs mariadb-bench mariadb mariadb-server
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;Installed:
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;   mariadb.x86_64 &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;5.5&lt;/span&gt;.&lt;span&gt;60&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7_5  mariadb-bench.x86_64 &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;5.5&lt;/span&gt;.&lt;span&gt;60&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el7_5  mariadb-embedded.x86_64 &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;5.5&lt;/span&gt;.&lt;span&gt;60&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7_5 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;Dependency Installed:
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;   &lt;span&gt;perl&lt;/span&gt;-Compress-Raw-Bzip2.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;2.061&lt;/span&gt;-&lt;span&gt;3&lt;/span&gt;.el7              &lt;span&gt;perl&lt;/span&gt;-Compress-Raw-Zlib.x86_64 &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;2.061&lt;/span&gt;-&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.el7             
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;   &lt;span&gt;perl&lt;/span&gt;-DBI.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;1.627&lt;/span&gt;-&lt;span&gt;4&lt;/span&gt;.el7                             &lt;span&gt;perl&lt;/span&gt;-Data-Dumper.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;2.145&lt;/span&gt;-&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.el7                   
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   &lt;span&gt;perl&lt;/span&gt;-GD.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;2.49&lt;/span&gt;-&lt;span&gt;3&lt;/span&gt;.el7                               &lt;span&gt;perl&lt;/span&gt;-IO-Compress.noarch &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;2.061&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.el7                   
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;perl&lt;/span&gt;-Net-Daemon.noarch &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;0.48&lt;/span&gt;-&lt;span&gt;5&lt;/span&gt;.el7                       &lt;span&gt;perl&lt;/span&gt;-PlRPC.noarch &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;0.2020&lt;/span&gt;-&lt;span&gt;14&lt;/span&gt;&lt;span&gt;.el7                       
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;Updated:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;   mariadb-libs.x86_64 &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;5.5&lt;/span&gt;.&lt;span&gt;60&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7_5                                                                              
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; Complete!
&lt;span&gt;14&lt;/span&gt; [root@web2 &lt;span&gt;yum&lt;/span&gt;.repos.d]# rpm -qa |&lt;span&gt;grep&lt;/span&gt;&lt;span&gt; mariadb
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; mariadb-libs-&lt;span&gt;5.5&lt;/span&gt;.&lt;span&gt;60&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7_5.x86_64
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; mariadb-embedded-&lt;span&gt;5.5&lt;/span&gt;.&lt;span&gt;60&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7_5.x86_64
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; mariadb-bench-&lt;span&gt;5.5&lt;/span&gt;.&lt;span&gt;60&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7_5.x86_64
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; mariadb-&lt;span&gt;5.5&lt;/span&gt;.&lt;span&gt;60&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7_5.x86_64
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; [root@web2 &lt;span&gt;yum&lt;/span&gt;.repos.d]# 
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;　　4、软件配置&lt;/p&gt;
&lt;p&gt;　　　1、配置nginx&lt;/p&gt;
&lt;p&gt;　　　　cat /etc/nginx/conf.d/default.conf &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@web1 &lt;span&gt;yum&lt;/span&gt;.repos.d]# &lt;span&gt;cat&lt;/span&gt; /etc/nginx/conf.d/&lt;span&gt;default.conf 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;server {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         listen &lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         server_name &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.51&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        index index.html index.htm index.php;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         charset utf-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;root /usr/share/nginx/html;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         location ~.*&lt;span&gt;\.php$ {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;fastcgi_pass unix:/dev/shm/php-fpm.sock;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                fastcgi_index index.php;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                include fastcgi_params;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 try_files $uri = &lt;span&gt;404&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;         location ~.*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp3|&lt;span&gt;wma)$ {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                expires 30d;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         location ~.*\.(js|&lt;span&gt;css)$ {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                expires 12h;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　2、配置php-fpm&lt;/p&gt;
&lt;p&gt;　　　　cat /etc/php-fpm.d/www.conf&lt;/p&gt;
&lt;p&gt;　　　　修改下面几项&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;listen = /dev/shm/php-fpm.sock
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; listen.owner =&lt;span&gt; nobody
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; listen.group =&lt;span&gt; nobody
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; user =&lt;span&gt; nginx
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; group = nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　启动nginx和php-fpm&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@web1 &lt;span&gt;yum&lt;/span&gt;&lt;span&gt;.repos.d]# systemctl start nginx 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; [root@web1 &lt;span&gt;yum&lt;/span&gt;.repos.d]# systemctl start php-&lt;span&gt;fpm
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@web1 &lt;span&gt;yum&lt;/span&gt;.repos.d]# netstat -untlp |&lt;span&gt;grep&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; tcp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;              &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;13408&lt;/span&gt;/&lt;span&gt;nginx: master 
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; tcp6       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; :::&lt;span&gt;80&lt;/span&gt;                   :::*                    LISTEN      &lt;span&gt;13408&lt;/span&gt;/&lt;span&gt;nginx: master 
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; [root@web1 &lt;span&gt;yum&lt;/span&gt;.repos.d]# netstat -untlp |&lt;span&gt;grep&lt;/span&gt; php*
&lt;span&gt; 7&lt;/span&gt; [root@web1 &lt;span&gt;yum&lt;/span&gt;.repos.d]# &lt;span&gt;ps&lt;/span&gt; -aux |&lt;span&gt;grep&lt;/span&gt; php*
&lt;span&gt; 8&lt;/span&gt; root      &lt;span&gt;14058&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.7&lt;/span&gt; &lt;span&gt;417184&lt;/span&gt; &lt;span&gt;13444&lt;/span&gt; ?        Ss   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; php-fpm: master process (/etc/php-&lt;span&gt;fpm.conf)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; nginx     &lt;span&gt;14060&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.3&lt;/span&gt; &lt;span&gt;419268&lt;/span&gt;  &lt;span&gt;6468&lt;/span&gt; ?        S    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; php-&lt;span&gt;fpm: pool www
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; nginx     &lt;span&gt;14061&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.3&lt;/span&gt; &lt;span&gt;419268&lt;/span&gt;  &lt;span&gt;6468&lt;/span&gt; ?        S    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; php-&lt;span&gt;fpm: pool www
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; nginx     &lt;span&gt;14062&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.3&lt;/span&gt; &lt;span&gt;419268&lt;/span&gt;  &lt;span&gt;6468&lt;/span&gt; ?        S    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; php-&lt;span&gt;fpm: pool www
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; nginx     &lt;span&gt;14063&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.3&lt;/span&gt; &lt;span&gt;419268&lt;/span&gt;  &lt;span&gt;6468&lt;/span&gt; ?        S    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; php-&lt;span&gt;fpm: pool www
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; nginx     &lt;span&gt;14064&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.3&lt;/span&gt; &lt;span&gt;419268&lt;/span&gt;  &lt;span&gt;6468&lt;/span&gt; ?        S    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; php-&lt;span&gt;fpm: pool www
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; root      &lt;span&gt;14223&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt; &lt;span&gt;112652&lt;/span&gt;   &lt;span&gt;968&lt;/span&gt; pts/&lt;span&gt;0&lt;/span&gt;    S+   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;18&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; &lt;span&gt;grep&lt;/span&gt; --color=auto php*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　最后记得开机自启&lt;/p&gt;
&lt;p&gt;　　　　systemctl enable nginx&lt;/p&gt;
&lt;p&gt;　　　　systemctl enable php-fpm&lt;/p&gt;
&lt;p&gt;　　　　测试一下php，添加index.php,访问一下192.168.216.51&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@web1 html]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; /usr/share/nginx/&lt;span&gt;html
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; [root@web1 html]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; index.php 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;        phpinfo();
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; ?&amp;gt;
&lt;span&gt;7&lt;/span&gt; 
&lt;span&gt;8&lt;/span&gt; [root@web1 html]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190222162811861-309769118.jpg&quot; alt=&quot;&quot; width=&quot;913&quot; height=&quot;483&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　没问题，进入下一步骤&lt;/p&gt;


&lt;p&gt;　　　3、配置数据库&lt;/p&gt;
&lt;p&gt;　　　　我们在52安装的数据库&lt;/p&gt;
&lt;p&gt;　　　　3.1、启动一下服务&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;1&lt;/span&gt;&lt;span&gt; Installed:
 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   mariadb-server.x86_64 &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;5.5&lt;/span&gt;.&lt;span&gt;60&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7_5                                                                            
 &lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
 &lt;span&gt;4&lt;/span&gt;&lt;span&gt; Dependency Installed:
 &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;   &lt;span&gt;perl&lt;/span&gt;-DBD-MySQL.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;4.023&lt;/span&gt;-&lt;span&gt;6&lt;/span&gt;&lt;span&gt;.el7                                                                               
 &lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 
 &lt;span&gt;7&lt;/span&gt; Complete!
 &lt;span&gt;8&lt;/span&gt; [root@web2 &lt;span&gt;yum&lt;/span&gt;&lt;span&gt;.repos.d]# systemctl start  mariadb
 &lt;/span&gt;&lt;span&gt;9&lt;/span&gt; [root@web2 &lt;span&gt;yum&lt;/span&gt;.repos.d]# netstat -untlp |&lt;span&gt;grep&lt;/span&gt; &lt;span&gt;3306&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; tcp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;3306&lt;/span&gt;            &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;5563&lt;/span&gt;/&lt;span&gt;mysqld         
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; [root@web2 &lt;span&gt;yum&lt;/span&gt;.repos.d]# systemctl enable mariadb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　3.2、创建zabbix database，zabbix账户，修改root密码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@web2 &lt;span&gt;yum&lt;/span&gt;&lt;span&gt;.repos.d]# &lt;span&gt;mysql&lt;/span&gt; 　　　　　　　　　　　　　　　　　　&lt;strong&gt;&lt;span&gt;#进入数据库
&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;Welcome to the MariaDB monitor.  Commands end with ; or \g.
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; Your MariaDB connection &lt;span&gt;id&lt;/span&gt; is &lt;span&gt;3&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; Server version: &lt;span&gt;5.5&lt;/span&gt;.&lt;span&gt;60&lt;/span&gt;-&lt;span&gt;MariaDB MariaDB Server
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; Copyright (c) &lt;span&gt;2000&lt;/span&gt;, &lt;span&gt;2018&lt;/span&gt;&lt;span&gt;, Oracle, MariaDB Corporation Ab and others.
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; Type &lt;span&gt;'&lt;/span&gt;&lt;span&gt;help;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; or &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; help. Type &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; to &lt;span&gt;clear&lt;/span&gt;&lt;span&gt; the current input statement.
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; MariaDB [(none)]&amp;gt;&lt;span&gt;&lt;span&gt; CREATE DATABASE zabbix character set utf8 collate utf8_bin;&lt;/span&gt;　&lt;strong&gt;&lt;span&gt;#创建database
&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; Query OK, &lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; MariaDB [(none)]&amp;gt; &lt;span&gt;GRANT all privileges ON *.* TO 'zabbix'@'%' IDENTIFIED BY 'admin123'&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt; &lt;strong&gt;&lt;span&gt;#建账户授权
&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; MariaDB [(none)]&amp;gt;&lt;span&gt;&lt;span&gt; flush privileges;　&lt;/span&gt;　　　　　　　　　　　&lt;strong&gt;&lt;span&gt;#刷新
&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; MariaDB [(none)]&amp;gt;&lt;span&gt;&lt;span&gt; use mysql;　　　&lt;/span&gt;　　　　　　　　　　　　　
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; Reading table information &lt;span&gt;for&lt;/span&gt;&lt;span&gt; completion of table and column names
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; You can turn off this feature to get a quicker startup with -&lt;span&gt;A
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;Database changed
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; MariaDB [mysql]&amp;gt; &lt;span&gt;update user set password=password('admin123') where user='root'&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt; 　&lt;strong&gt;&lt;span&gt;　#改root密码
&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; Query OK, &lt;span&gt;4&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; Rows matched: &lt;span&gt;4&lt;/span&gt;  Changed: &lt;span&gt;4&lt;/span&gt;  Warnings: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; MariaDB [mysql]&amp;gt;&lt;span&gt; flush privileges;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　3.3、51上测试连接数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@web1 html]# &lt;span&gt;mv&lt;/span&gt;&lt;span&gt; index.php index.php.phpinfo
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;[root@web1 html]# vim index.php 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         $link=mysql_connect(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;192.168.216.52&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;($link) &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;h1&amp;gt;The database connection was successful!&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;h1&amp;gt;The database connection was Fail!!&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;        mysql_close();
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; ?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190222170223856-1219761556.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　3.4、导入zabbix database 数据库脚本&lt;/p&gt;
&lt;p&gt;　　　　51上&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@web1 html]# rpm -ql zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; /etc/logrotate.d/zabbix-&lt;span&gt;server
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; /etc/zabbix/&lt;span&gt;zabbix_server.conf
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; /usr/lib/systemd/system/zabbix-&lt;span&gt;server.service
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; /usr/lib/tmpfiles.d/zabbix-&lt;span&gt;server.conf
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; /usr/lib/zabbix/&lt;span&gt;alertscripts
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; /usr/lib/zabbix/&lt;span&gt;externalscripts
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; /usr/sbin/&lt;span&gt;zabbix_server_mysql
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; /usr/share/doc/zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; /usr/share/doc/zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/&lt;span&gt;AUTHORS
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; /usr/share/doc/zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/&lt;span&gt;COPYING
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; /usr/share/doc/zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/&lt;span&gt;ChangeLog
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; /usr/share/doc/zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/&lt;span&gt;NEWS
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; /usr/share/doc/zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/&lt;span&gt;README
&lt;/span&gt;&lt;span&gt;15 /usr/share/doc/zabbix-server-mysql-4.0.4/create.sql.gz  #就是要找这个数据库脚本
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; /usr/share/&lt;span&gt;man&lt;/span&gt;/man8/zabbix_server.&lt;span&gt;8&lt;/span&gt;&lt;span&gt;.gz
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; /var/log/&lt;span&gt;zabbix
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; /var/run/zabbix
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@web1 zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;]# &lt;span&gt;gunzip create.sql.gz &lt;strong&gt;#解压缩
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; [root@web1 zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;]# ll 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; total &lt;span&gt;6736&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; -rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root      &lt;span&gt;98&lt;/span&gt; Feb  &lt;span&gt;4&lt;/span&gt; &lt;span&gt;17&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; AUTHORS
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; -rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;940849&lt;/span&gt; Feb  &lt;span&gt;4&lt;/span&gt; &lt;span&gt;17&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; ChangeLog
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; -rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root   &lt;span&gt;17990&lt;/span&gt; Feb  &lt;span&gt;4&lt;/span&gt; &lt;span&gt;17&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; COPYING
&lt;/span&gt;&lt;span&gt; 7 -rw-r--r-- 1 root root 5920915 Feb  4 18:02 create.sql
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; -rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root      &lt;span&gt;52&lt;/span&gt; Feb  &lt;span&gt;4&lt;/span&gt; &lt;span&gt;17&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; NEWS
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; -rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root    &lt;span&gt;1062&lt;/span&gt; Feb  &lt;span&gt;4&lt;/span&gt; &lt;span&gt;17&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; README
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; [root@web1 zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;]# &lt;span&gt;scp create.sql root@192.168.216.52:/   &lt;strong&gt;#发送到52上，数据库服务器&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　52上，导入zabbix database脚本&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; [root@web2 /]# mysql -uroot zabbix &amp;lt; /create.sql  -&lt;span&gt;p
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;Enter password: 
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; [root@web2 /]# mysql -uroot -&lt;span&gt;p
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;Enter password: 
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;Welcome to the MariaDB monitor.  Commands end with ; or \g.
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; Your MariaDB connection &lt;span&gt;id&lt;/span&gt; is &lt;span&gt;8&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt; Server version: &lt;span&gt;5.5&lt;/span&gt;.&lt;span&gt;60&lt;/span&gt;-&lt;span&gt;MariaDB MariaDB Server
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; Copyright (c) &lt;span&gt;2000&lt;/span&gt;, &lt;span&gt;2018&lt;/span&gt;&lt;span&gt;, Oracle, MariaDB Corporation Ab and others.
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt; Type &lt;span&gt;'&lt;/span&gt;&lt;span&gt;help;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; or &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; help. Type &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; to &lt;span&gt;clear&lt;/span&gt;&lt;span&gt; the current input statement.
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt; MariaDB [(none)]&amp;gt;&lt;span&gt; use zabbix;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; Reading table information &lt;span&gt;for&lt;/span&gt;&lt;span&gt; completion of table and column names
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; You can turn off this feature to get a quicker startup with -&lt;span&gt;A
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;Database changed
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; MariaDB [zabbix]&amp;gt;&lt;span&gt; show tables;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; +----------------------------+
&lt;span&gt; 20&lt;/span&gt; | Tables_in_zabbix           |
&lt;span&gt; 21&lt;/span&gt; +----------------------------+
&lt;span&gt; 22&lt;/span&gt; | acknowledges               |
&lt;span&gt; 23&lt;/span&gt; | actions                    |
&lt;span&gt; 24&lt;/span&gt; | alerts                     |
&lt;span&gt; 25&lt;/span&gt; | application_discovery      |
&lt;span&gt; 26&lt;/span&gt; | application_prototype      |
&lt;span&gt; 27&lt;/span&gt; | application_template       |
&lt;span&gt; 28&lt;/span&gt; | applications               |
&lt;span&gt; 29&lt;/span&gt; | auditlog                   |
&lt;span&gt; 30&lt;/span&gt; | auditlog_details           |
&lt;span&gt; 31&lt;/span&gt; | autoreg_host               |
&lt;span&gt; 32&lt;/span&gt; | conditions                 |
&lt;span&gt; 33&lt;/span&gt; | config                     |
&lt;span&gt; 34&lt;/span&gt; | corr_condition             |
&lt;span&gt; 35&lt;/span&gt; | corr_condition_group       |
&lt;span&gt; 36&lt;/span&gt; | corr_condition_tag         |
&lt;span&gt; 37&lt;/span&gt; | corr_condition_tagpair     |
&lt;span&gt; 38&lt;/span&gt; | corr_condition_tagvalue    |
&lt;span&gt; 39&lt;/span&gt; | corr_operation             |
&lt;span&gt; 40&lt;/span&gt; | correlation                |
&lt;span&gt; 41&lt;/span&gt; | dashboard                  |
&lt;span&gt; 42&lt;/span&gt; | dashboard_user             |
&lt;span&gt; 43&lt;/span&gt; | dashboard_usrgrp           |
&lt;span&gt; 44&lt;/span&gt; | dbversion                  |
&lt;span&gt; 45&lt;/span&gt; | dchecks                    |
&lt;span&gt; 46&lt;/span&gt; | dhosts                     |
&lt;span&gt; 47&lt;/span&gt; | drules                     |
&lt;span&gt; 48&lt;/span&gt; | dservices                  |
&lt;span&gt; 49&lt;/span&gt; | escalations                |
&lt;span&gt; 50&lt;/span&gt; | event_recovery             |
&lt;span&gt; 51&lt;/span&gt; | event_suppress             |
&lt;span&gt; 52&lt;/span&gt; | event_tag                  |
&lt;span&gt; 53&lt;/span&gt; | events                     |
&lt;span&gt; 54&lt;/span&gt; | expressions                |
&lt;span&gt; 55&lt;/span&gt; | functions                  |
&lt;span&gt; 56&lt;/span&gt; | globalmacro                |
&lt;span&gt; 57&lt;/span&gt; | globalvars                 |
&lt;span&gt; 58&lt;/span&gt; | graph_discovery            |
&lt;span&gt; 59&lt;/span&gt; | graph_theme                |
&lt;span&gt; 60&lt;/span&gt; | graphs                     |
&lt;span&gt; 61&lt;/span&gt; | graphs_items               |
&lt;span&gt; 62&lt;/span&gt; | group_discovery            |
&lt;span&gt; 63&lt;/span&gt; | group_prototype            |
&lt;span&gt; 64&lt;/span&gt; | history                    |
&lt;span&gt; 65&lt;/span&gt; | history_log                |
&lt;span&gt; 66&lt;/span&gt; | history_str                |
&lt;span&gt; 67&lt;/span&gt; | history_text               |
&lt;span&gt; 68&lt;/span&gt; | history_uint               |
&lt;span&gt; 69&lt;/span&gt; | host_discovery             |
&lt;span&gt; 70&lt;/span&gt; | host_inventory             |
&lt;span&gt; 71&lt;/span&gt; | hostmacro                  |
&lt;span&gt; 72&lt;/span&gt; | hosts                      |
&lt;span&gt; 73&lt;/span&gt; | hosts_groups               |
&lt;span&gt; 74&lt;/span&gt; | hosts_templates            |
&lt;span&gt; 75&lt;/span&gt; | housekeeper                |
&lt;span&gt; 76&lt;/span&gt; | hstgrp                     |
&lt;span&gt; 77&lt;/span&gt; | httpstep                   |
&lt;span&gt; 78&lt;/span&gt; | httpstep_field             |
&lt;span&gt; 79&lt;/span&gt; | httpstepitem               |
&lt;span&gt; 80&lt;/span&gt; | httptest                   |
&lt;span&gt; 81&lt;/span&gt; | httptest_field             |
&lt;span&gt; 82&lt;/span&gt; | httptestitem               |
&lt;span&gt; 83&lt;/span&gt; | icon_map                   |
&lt;span&gt; 84&lt;/span&gt; | icon_mapping               |
&lt;span&gt; 85&lt;/span&gt; | ids                        |
&lt;span&gt; 86&lt;/span&gt; | images                     |
&lt;span&gt; 87&lt;/span&gt; | interface                  |
&lt;span&gt; 88&lt;/span&gt; | interface_discovery        |
&lt;span&gt; 89&lt;/span&gt; | item_application_prototype |
&lt;span&gt; 90&lt;/span&gt; | item_condition             |
&lt;span&gt; 91&lt;/span&gt; | item_discovery             |
&lt;span&gt; 92&lt;/span&gt; | item_preproc               |
&lt;span&gt; 93&lt;/span&gt; | items                      |
&lt;span&gt; 94&lt;/span&gt; | items_applications         |
&lt;span&gt; 95&lt;/span&gt; | maintenance_tag            |
&lt;span&gt; 96&lt;/span&gt; | maintenances               |
&lt;span&gt; 97&lt;/span&gt; | maintenances_groups        |
&lt;span&gt; 98&lt;/span&gt; | maintenances_hosts         |
&lt;span&gt; 99&lt;/span&gt; | maintenances_windows       |
&lt;span&gt;100&lt;/span&gt; | mappings                   |
&lt;span&gt;101&lt;/span&gt; | media                      |
&lt;span&gt;102&lt;/span&gt; | media_type                 |
&lt;span&gt;103&lt;/span&gt; | opcommand                  |
&lt;span&gt;104&lt;/span&gt; | opcommand_grp              |
&lt;span&gt;105&lt;/span&gt; | opcommand_hst              |
&lt;span&gt;106&lt;/span&gt; | opconditions               |
&lt;span&gt;107&lt;/span&gt; | operations                 |
&lt;span&gt;108&lt;/span&gt; | opgroup                    |
&lt;span&gt;109&lt;/span&gt; | opinventory                |
&lt;span&gt;110&lt;/span&gt; | opmessage                  |
&lt;span&gt;111&lt;/span&gt; | opmessage_grp              |
&lt;span&gt;112&lt;/span&gt; | opmessage_usr              |
&lt;span&gt;113&lt;/span&gt; | optemplate                 |
&lt;span&gt;114&lt;/span&gt; | problem                    |
&lt;span&gt;115&lt;/span&gt; | problem_tag                |
&lt;span&gt;116&lt;/span&gt; | profiles                   |
&lt;span&gt;117&lt;/span&gt; | proxy_autoreg_host         |
&lt;span&gt;118&lt;/span&gt; | proxy_dhistory             |
&lt;span&gt;119&lt;/span&gt; | proxy_history              |
&lt;span&gt;120&lt;/span&gt; | regexps                    |
&lt;span&gt;121&lt;/span&gt; | rights                     |
&lt;span&gt;122&lt;/span&gt; | screen_user                |
&lt;span&gt;123&lt;/span&gt; | screen_usrgrp              |
&lt;span&gt;124&lt;/span&gt; | screens                    |
&lt;span&gt;125&lt;/span&gt; | screens_items              |
&lt;span&gt;126&lt;/span&gt; | scripts                    |
&lt;span&gt;127&lt;/span&gt; | service_alarms             |
&lt;span&gt;128&lt;/span&gt; | services                   |
&lt;span&gt;129&lt;/span&gt; | services_links             |
&lt;span&gt;130&lt;/span&gt; | services_times             |
&lt;span&gt;131&lt;/span&gt; | sessions                   |
&lt;span&gt;132&lt;/span&gt; | slides                     |
&lt;span&gt;133&lt;/span&gt; | slideshow_user             |
&lt;span&gt;134&lt;/span&gt; | slideshow_usrgrp           |
&lt;span&gt;135&lt;/span&gt; | slideshows                 |
&lt;span&gt;136&lt;/span&gt; | sysmap_element_trigger     |
&lt;span&gt;137&lt;/span&gt; | sysmap_element_url         |
&lt;span&gt;138&lt;/span&gt; | sysmap_shape               |
&lt;span&gt;139&lt;/span&gt; | sysmap_url                 |
&lt;span&gt;140&lt;/span&gt; | sysmap_user                |
&lt;span&gt;141&lt;/span&gt; | sysmap_usrgrp              |
&lt;span&gt;142&lt;/span&gt; | sysmaps                    |
&lt;span&gt;143&lt;/span&gt; | sysmaps_elements           |
&lt;span&gt;144&lt;/span&gt; | sysmaps_link_triggers      |
&lt;span&gt;145&lt;/span&gt; | sysmaps_links              |
&lt;span&gt;146&lt;/span&gt; | tag_filter                 |
&lt;span&gt;147&lt;/span&gt; | task                       |
&lt;span&gt;148&lt;/span&gt; | task_acknowledge           |
&lt;span&gt;149&lt;/span&gt; | task_check_now             |
&lt;span&gt;150&lt;/span&gt; | task_close_problem         |
&lt;span&gt;151&lt;/span&gt; | task_remote_command        |
&lt;span&gt;152&lt;/span&gt; | task_remote_command_result |
&lt;span&gt;153&lt;/span&gt; | timeperiods                |
&lt;span&gt;154&lt;/span&gt; | trends                     |
&lt;span&gt;155&lt;/span&gt; | trends_uint                |
&lt;span&gt;156&lt;/span&gt; | trigger_depends            |
&lt;span&gt;157&lt;/span&gt; | trigger_discovery          |
&lt;span&gt;158&lt;/span&gt; | trigger_tag                |
&lt;span&gt;159&lt;/span&gt; | triggers                   |
&lt;span&gt;160&lt;/span&gt; | users                      |
&lt;span&gt;161&lt;/span&gt; | users_groups               |
&lt;span&gt;162&lt;/span&gt; | usrgrp                     |
&lt;span&gt;163&lt;/span&gt; | valuemaps                  |
&lt;span&gt;164&lt;/span&gt; | widget                     |
&lt;span&gt;165&lt;/span&gt; | widget_field               |
&lt;span&gt;166&lt;/span&gt; +----------------------------+
&lt;span&gt;167&lt;/span&gt; &lt;span&gt;144&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; set (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　ok已经成功导入&lt;/p&gt;

&lt;p&gt;　　4、修改zabbix配置文件，设置权限&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　vim　/etc/zabbix/zabbix_server.conf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　ListenPort=10051&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　DBHost=192.168.216.52&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　DBName=zabbix&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　DBUser=zabbix&lt;/p&gt;
&lt;p&gt;　　　　DBPassword=admin123&lt;/p&gt;
&lt;p&gt;　　　　DBPort=3306&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　   修改这几项应该就可以了&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@web1 zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;]# systemctl restart zabbix-&lt;span&gt;server    
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; [root@web1 zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;]# ！net
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;bash: ！net: command not found...
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@web1 zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;]# !&lt;span&gt;net
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; netstat -&lt;span&gt;untlpo
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;Active Internet connections (only servers)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/&lt;span&gt;Program name     Timer
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; tcp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;111&lt;/span&gt;             &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;1&lt;/span&gt;/systemd            off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; tcp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;              &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;15347&lt;/span&gt;/nginx: master  off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; tcp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;122.1&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;        &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;2192&lt;/span&gt;/dnsmasq         off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; tcp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt;              &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;884&lt;/span&gt;/sshd             off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; tcp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;631&lt;/span&gt;           &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;882&lt;/span&gt;/cupsd            off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; tcp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;            &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;2010&lt;/span&gt;/master          off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; tcp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;10051&lt;/span&gt;           &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;15505&lt;/span&gt;/zabbix_server  off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; tcp6       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; :::&lt;span&gt;111&lt;/span&gt;                  :::*                    LISTEN      &lt;span&gt;1&lt;/span&gt;/systemd            off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; tcp6       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; :::&lt;span&gt;80&lt;/span&gt;                   :::*                    LISTEN      &lt;span&gt;15347&lt;/span&gt;/nginx: master  off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; tcp6       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; :::&lt;span&gt;22&lt;/span&gt;                   :::*                    LISTEN      &lt;span&gt;884&lt;/span&gt;/sshd             off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; tcp6       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; ::&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;631&lt;/span&gt;                 :::*                    LISTEN      &lt;span&gt;882&lt;/span&gt;/cupsd            off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; tcp6       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; ::&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;                  :::*                    LISTEN      &lt;span&gt;2010&lt;/span&gt;/master          off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; tcp6       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; :::&lt;span&gt;10051&lt;/span&gt;                :::*                    LISTEN      &lt;span&gt;15505&lt;/span&gt;/zabbix_server  off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; udp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;5353&lt;/span&gt;            &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*                           &lt;span&gt;592&lt;/span&gt;/avahi-daemon: r  off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; udp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;58177&lt;/span&gt;           &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*                           &lt;span&gt;592&lt;/span&gt;/avahi-daemon: r  off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; udp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;122.1&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;        &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*                           &lt;span&gt;2192&lt;/span&gt;/dnsmasq         off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; udp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;67&lt;/span&gt;              &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*                           &lt;span&gt;2192&lt;/span&gt;/dnsmasq         off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; udp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;177&lt;/span&gt;             &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*                           &lt;span&gt;897&lt;/span&gt;/lightdm          off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; udp6       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; :::&lt;span&gt;177&lt;/span&gt;                  :::*                                &lt;span&gt;897&lt;/span&gt;/lightdm          off (&lt;span&gt;0.00&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; [root@web1 zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　最后修改nginx配置文件&lt;/p&gt;
&lt;p&gt;　　　　51上&lt;/p&gt;
&lt;p&gt;　　　　cat /etc/nginx/conf.d/default.conf &lt;/p&gt;
&lt;p&gt;　　　　修改下面一项即可&lt;/p&gt;
&lt;p&gt;　　　　root /usr/share/zabbix;&lt;/p&gt;
&lt;p&gt;　　　　systemctl restart nginx&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;问题1、访问192.168.216.51 出错代码500&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　cat /var/log/nginx/error.log&lt;/p&gt;
&lt;p&gt;　　　　tail -5 /var/log/nginx/error.log&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  PHP Fatal error:  require_once(): Failed opening required &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/etc/zabbix/web/maintenance.inc.php&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; (include_path=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.:/usr/share/pear:/usr/share/php&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;in&lt;/span&gt; /usr/share/zabbix/include/classes/core/ZBase.php on line &lt;span&gt;276&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; while reading response header from upstream, client: 192.168.216.1, server: 192.168.216.51, request: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;GET /index.php HTTP/&lt;span&gt;1.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, upstream: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;fastcgi:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;unix:/dev/shm/php-fpm.sock:&quot;, host: &quot;192.168.216.51&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　修改权限&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;505&lt;/span&gt; &lt;span&gt;chown&lt;/span&gt; -R zabbix:zabbix /etc/&lt;span&gt;zabbix
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;506&lt;/span&gt; &lt;span&gt;chown&lt;/span&gt; -R zabbix:zabbix /usr/share/&lt;span&gt;zabbix
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;507&lt;/span&gt; &lt;span&gt;chown&lt;/span&gt; -R zabbix:zabbix /usr/lib/&lt;span&gt;zabbix
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;508&lt;/span&gt; &lt;span&gt;chmod&lt;/span&gt; -R &lt;span&gt;755&lt;/span&gt; /etc/zabbix/web
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　访问192.168.216.51&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190222185738936-1429145208.jpg&quot; alt=&quot;&quot; width=&quot;1001&quot; height=&quot;416&quot;/&gt;&lt;/p&gt;

&lt;p&gt;三、正式开始web界面配置安装配置zabbix&lt;/p&gt;

&lt;p&gt;　　　1、第一步welcome 点击下一步网页还是跳会第一步&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;问题2、无法进行第2步&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　有可能是php session没起作用&lt;/p&gt;
&lt;p&gt;　　　　修改php session 权限&lt;/p&gt;
&lt;p&gt;　　　　chmod -R 777 /var/lib/php/session/&lt;/p&gt;
&lt;p&gt;　　　2、第二步 check of pre-requisites&lt;/p&gt;
&lt;p&gt;　　　　　　检查先决条件&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190225100012651-1716551345.jpg&quot; alt=&quot;&quot; width=&quot;865&quot; height=&quot;473&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　　　&lt;span&gt;问题3、先把fail解决,修改php文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　vim /etc/php.ini&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; post_max_size =&lt;span&gt; 32M
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; max_execution_time = &lt;span&gt;300&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; max_input_time = &lt;span&gt;300&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;date&lt;/span&gt;.timezone = PRC
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　systemctl restart php-fpm&lt;/p&gt;
&lt;p&gt;　　　　　　访问一下，好了，进行下一步，点击next step&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190225100807176-1739482556.jpg&quot; alt=&quot;&quot; width=&quot;848&quot; height=&quot;601&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　 3、configure DB connection&lt;/p&gt;
&lt;p&gt;　　　　配置连接的数据库&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190225102522106-1733842809.jpg&quot; alt=&quot;&quot; width=&quot;876&quot; height=&quot;605&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;span&gt;问题4、点击nextstep 出错，上一篇也遇到了这个问题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190225105440803-1020920240.jpg&quot; alt=&quot;&quot; width=&quot;874&quot; height=&quot;204&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　查看nginx日志发现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@web1 share]# !&lt;span&gt;tail&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;tail&lt;/span&gt; -&lt;span&gt;5&lt;/span&gt; /var/log/nginx/&lt;span&gt;error.log
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;02&lt;/span&gt;/&lt;span&gt;25&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;28&lt;/span&gt;:&lt;span&gt;31&lt;/span&gt; [error] &lt;span&gt;98806&lt;/span&gt;#&lt;span&gt;0&lt;/span&gt;: *&lt;span&gt;1&lt;/span&gt; &lt;span&gt;upstream sent too big header while reading response header from upstream&lt;/span&gt;, client: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.1&lt;/span&gt;, server: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.51&lt;/span&gt;, request: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET /setup.php HTTP/1.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, upstream: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fastcgi://127.0.0.1:9000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, host: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.216.51&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;02&lt;/span&gt;/&lt;span&gt;25&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;28&lt;/span&gt;:&lt;span&gt;31&lt;/span&gt; [error] &lt;span&gt;98806&lt;/span&gt;#&lt;span&gt;0&lt;/span&gt;: *&lt;span&gt;1&lt;/span&gt; upstream sent too big header &lt;span&gt;while&lt;/span&gt; reading response header from upstream, client: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.1&lt;/span&gt;, server: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.51&lt;/span&gt;, request: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET /setup.php HTTP/1.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, upstream: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fastcgi://127.0.0.1:9000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, host: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.216.51&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;02&lt;/span&gt;/&lt;span&gt;25&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;28&lt;/span&gt;:&lt;span&gt;32&lt;/span&gt; [error] &lt;span&gt;98806&lt;/span&gt;#&lt;span&gt;0&lt;/span&gt;: *&lt;span&gt;1&lt;/span&gt; upstream sent too big header &lt;span&gt;while&lt;/span&gt; reading response header from upstream, client: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.1&lt;/span&gt;, server: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.51&lt;/span&gt;, request: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET /setup.php HTTP/1.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, upstream: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fastcgi://127.0.0.1:9000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, host: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.216.51&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;02&lt;/span&gt;/&lt;span&gt;25&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;28&lt;/span&gt;:&lt;span&gt;32&lt;/span&gt; [error] &lt;span&gt;98806&lt;/span&gt;#&lt;span&gt;0&lt;/span&gt;: *&lt;span&gt;1&lt;/span&gt; upstream sent too big header &lt;span&gt;while&lt;/span&gt; reading response header from upstream, client: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.1&lt;/span&gt;, server: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.51&lt;/span&gt;, request: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET /setup.php HTTP/1.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, upstream: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fastcgi://127.0.0.1:9000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, host: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.216.51&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;02&lt;/span&gt;/&lt;span&gt;25&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt; [error] &lt;span&gt;98804&lt;/span&gt;#&lt;span&gt;0&lt;/span&gt;: *&lt;span&gt;10&lt;/span&gt; upstream sent too big header &lt;span&gt;while&lt;/span&gt; reading response header from upstream, client: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.1&lt;/span&gt;, server: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.51&lt;/span&gt;, request: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET /setup.php HTTP/1.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, upstream: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fastcgi://127.0.0.1:9000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, host: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.216.51&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; [root@web1 share]# vim /etc/nginx/conf.d/default.conf 
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
　　　　&lt;strong&gt;&lt;span&gt;upstream sent too big header while reading response header from upstream&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;　　　　是这个问题导致，在网站找好多方法，都不行，最后看到是因为fastcgi缓冲区设置过小，其实是header过大
&lt;/pre&gt;
&lt;pre&gt;
　　　　添加缓存区解决，编辑nginx 配置文件，添加两项
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;　　　　fastcgi_buffers 8 16k;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;　　　　fastcgi_buffer_size 32k&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@web1 share]# vim /etc/nginx/conf.d/&lt;span&gt;default.conf 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;                
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;server {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         listen &lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         server_name &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.51&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        index index.html index.htm index.php;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         charset utf-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         root /usr/share/&lt;span&gt;zabbix;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         location /&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 #max_fails=&lt;span&gt;6&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 #fail_timeout=&lt;span&gt;60&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 root /usr/share/&lt;span&gt;zabbix;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         location ~.*&lt;span&gt;\.php$ {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 fastcgi_connect_timeout &lt;span&gt;300&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 root /usr/share/&lt;span&gt;zabbix;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 fastcgi_send_timeout &lt;span&gt;300&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 fastcgi_read_timeout &lt;span&gt;300&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21                &lt;strong&gt; fastcgi_buffers 8 16k;&lt;/strong&gt;
22                 &lt;strong&gt;fastcgi_buffer_size 32k;
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 #fastcgi_pass unix:/dev/shm/php-&lt;span&gt;fpm.sock;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 fastcgi_pass &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;9000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                fastcgi_index index.php;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                include fastcgi_params;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 try_files $uri = &lt;span&gt;404&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;         location ~.*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp3|&lt;span&gt;wma)$ {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                expires 30d;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         location ~.*\.(js|&lt;span&gt;css)$ {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                expires 12h;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　4、zabbix server details&lt;/p&gt;
&lt;p&gt;　　　　这个也可以默认配置，因为进入zabbix主页后是可以修改的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190225145014700-188426777.jpg&quot; alt=&quot;&quot; width=&quot;883&quot; height=&quot;661&quot;/&gt;　　&lt;/p&gt;

&lt;p&gt;　　 5、pre-installation summary &lt;/p&gt;
&lt;p&gt;　　　　就是安装配置的一个总结，检查看看有没有出错&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190225145146245-1235959018.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　 6、INSTALL　　&lt;/p&gt;
&lt;p&gt;　　　　最后就是报错配置了&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;问题5、Unable to create the configuration file.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　这里没来得及截图提示Unable to create the configuration file.&lt;/p&gt;
&lt;p&gt;　　　　/etc/zabbix/web没有权限导致，我选择&lt;span&gt;第一项下载zabbix.conf.php 然后上传到相应目录&lt;/span&gt;，在点一下，就是如下页面了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190225151430790-568906349.jpg&quot; alt=&quot;&quot; width=&quot;927&quot; height=&quot;338&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　  奇怪的是我点击login 然后用默认admin 密码zabbix 无法登陆&lt;/p&gt;
&lt;p&gt;　　  &lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190225153712536-1687684412.jpg&quot; alt=&quot;&quot; width=&quot;890&quot; height=&quot;537&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　其实zabbix 默认账户为Admin  密码zabbix，zabbix 的简单部署就到这里了，新的zabbix 监控页面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190225154247249-399833896.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;





&lt;h3&gt;&lt;strong&gt;转载请注明出处：&lt;/strong&gt;&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: Centos7+lnmp+zabbix-分离mysql实验&quot; href=&quot;https://www.cnblogs.com/zhangxingeng/p/10414070.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/zhangxingeng/p/10414070.html&lt;/a&gt; &lt;/h3&gt;

</description>
<pubDate>Mon, 25 Feb 2019 07:55:00 +0000</pubDate>
<dc:creator>乐章</dc:creator>
<og:description>一、简介 1、什么是zabbix zabbix是一个企业级的、开源的、分布式的监控套件。 zabbix可以对网络和服务进行完整性，健康性的监控。zabbix利用灵活的告警机制，可以实验微信，短信和邮件</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangxingeng/p/10414070.html</dc:identifier>
</item>
<item>
<title>一文看透浏览器架构 - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/10431325.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/10431325.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;本文由云+社区发表&lt;br/&gt;作者：廖彩明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在从事前端开发过程中，浏览器作为最重要的开发环境，浏览器基础是是前端开发人员必须掌握的基础知识点，它贯穿着前端的整个网络体系。对浏览器原理的了解，决定着编写前端代码性能的上限。浏览器作为JS的运行环境，学习总结下现代浏览器的相关知识&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;经常听说浏览器内核，浏览器内核究竟是什么，以及它做了什么。我们将来了解下浏览器的主要组成部分、现代浏览器的主要架构、浏览器内核、浏览器内部是如何工作的&lt;/p&gt;
&lt;h3 id=&quot;浏览器&quot;&gt;1 浏览器&lt;/h3&gt;
&lt;p&gt;现代浏览器结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1077260/l85b0oq8l9.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;The browser's main component&lt;/p&gt;
&lt;h4 id=&quot;the-user-interface&quot;&gt;The User Interface&lt;/h4&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;主要提供用户与Browser Engine交互的方法。其中包括：地址栏(address bar)、向前/退后按钮、书签菜单等等。浏览器除了渲染请求页面的窗口外的所有地方都属于The User Interface&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;the-browser-engine&quot;&gt;The Browser Engine&lt;/h4&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;协调（主控）UI和the Rendering Engine，在他们之间传输指令。 提供对The Rendering Engine的高级接口，一方面它提供初始化加载Url和其他高级的浏览器动作（如刷新、向前、退后等）方法。另一方面Browser Engine也为User Interface提供各种与错误、加载进度相关的消息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;the-rendering-engine&quot;&gt;The Rendering Engine&lt;/h4&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;为给定的URL提供可视化的展示。它解析JavaScript、Html、Xml，并且User Interface中展示的layout。其中关键的组件是Html解析器，它可以让Rendering Engine展示差乱的Html页面。 值得注意：不同的浏览器使用不同的Rendering Engine。例如IE使用Trident，Firefox使用Gecko，Safai使用Webkit。Chrome和Opera使用Webkit（以前是Blink）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;the-networking&quot;&gt;The Networking&lt;/h4&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;基于互联网HTTP和FTP协议，处理网络请求。网络模块负责Internet communication and security，character set translations and MIME type resolution。另外网络模块还提供获得到文档的缓存，以减少网络传输。为所有平台提供底层网络实现，其提供的接口与平台无关&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;the-javascript-interpreter&quot;&gt;The JavaScript Interpreter&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;解释和运行网站上的js代码，得到的结果传输到Rendering Engine来展示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;the-ui-backend&quot;&gt;The UI Backend&lt;/h4&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;用于绘制基本的窗口小部件，比如组合框和窗口。而在底层使用操作系统的用户界面方法，并公开与平台无关的接口。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;the-data-storage&quot;&gt;The Data Storage&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;管理用户数据，例如书签、cookie和偏好设置等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;主流浏览器的架构&quot;&gt;2 主流浏览器的架构&lt;/h3&gt;
&lt;h4 id=&quot;firefox&quot;&gt;2.1 FireFox&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1077260/eb354wxtlq.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;FireFox的架构&lt;/p&gt;
&lt;p&gt;可以看到火狐浏览器的渲染引擎（Rendering Engine）使用的是Gecko；XML Parser解析器是Expat；Java Script解释器是Spider-Monkey（c语言实现）&lt;/p&gt;
&lt;h4 id=&quot;chrome&quot;&gt;2.2 Chrome&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1077260/ygdotzz7xh.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;Chrome的架构&lt;/p&gt;
&lt;p&gt;渲染引擎Rendering Engine使用的是WebKit&lt;/p&gt;
&lt;p&gt;XML Parser： libXML解析XML，libXSLT处理XSLT&lt;/p&gt;
&lt;p&gt;JS解释器使用C++实现的V8引擎，&lt;/p&gt;
&lt;h4 id=&quot;ie&quot;&gt;2.3 IE&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1077260/fjkygbw7d8.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;IE的架构&lt;/p&gt;
&lt;p&gt;渲染引擎主要是Trident&lt;/p&gt;
&lt;p&gt;Scripting Engine有JScript和VBScript&lt;/p&gt;
&lt;h3 id=&quot;浏览器内核&quot;&gt;3 浏览器内核&lt;/h3&gt;
&lt;p&gt;浏览器最重要或者说核心的部分是“Rendering Engine”，可大概译为“渲染引擎”，不过我们一般习惯将之称为“浏览器内核”。主要包括以下线程：&lt;/p&gt;
&lt;h4 id=&quot;浏览器-gui-渲染线程主要包括&quot;&gt;3.1 浏览器 GUI 渲染线程，主要包括：&lt;/h4&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt; HTML Parser 解析HTML文档，将元素转换为树结构DOM节点，称之为Content Tree&lt;/p&gt;
&lt;p&gt; CSS Parser 解析Style数据，包括外部的CSS文件以及在HTML元素中的样式，用于创建另一棵树，调用“Render Tree”&lt;/p&gt;
&lt;p&gt; Layout过程 为每个节点计算出在屏幕中展示的准确坐标&lt;/p&gt;
&lt;p&gt; Painting 遍历Render Tree，调用UI Backend提供的接口绘制每个节点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;javascript-引擎线程&quot;&gt;3.2 JavaScript 引擎线程&lt;/h4&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;JS引擎线程负责解析Javascript脚本，运行代码 JS引擎一直等待着任务队列中任务的到来，然后加以处理，一个Tab页（renderer进程）中无论什么时候都只有一个JS线程在运行JS程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GUI渲染线程与JS引擎线程是互斥的，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a) 减少 JavaScript 加载对 DOM 渲染的影响（将 JavaScript 代码的加载逻辑放在 HTML 文件的尾部，减少对渲染引擎呈现工作的影响；
b) 避免重排，减少重绘（避免白屏，或者交互过程中的卡顿；
c) 减少 DOM 的层级（可以减少渲染引擎工作过程中的计算量；
d) 使用 requestAnimationFrame 来实现视觉变化（一般来说我们会使用 setTimeout 或 setInterval 来执行动画之类的视觉变化，但这种做法的问题是，回调将在帧中的某个时点运行，可能刚好在末尾，而这可能经常会使我们丢失帧，导致卡顿）&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;浏览器定时触发器线程&quot;&gt;3.3 浏览器定时触发器线程&lt;/h4&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;浏览器定时计数器并不是由 JavaScript 引擎计数的, 因为 JavaScript 引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;浏览器事件触发线程&quot;&gt;3.4 浏览器事件触发线程&lt;/h4&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待 JavaScript 引擎的处理。这些事件可以是当前执行的代码块如定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX 异步请求等，但由于 JavaScript 的单线程关系所有这些事件都得排队等待 JavaScript 引擎处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;浏览器-http-异步请求线程&quot;&gt;3.5 浏览器 http 异步请求线程&lt;/h4&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;在 XMLHttpRequest 在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript 引擎的处理队列中等待处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;以chrome浏览器为例演示浏览器内部如何工作&quot;&gt;4 以Chrome浏览器为例，演示浏览器内部如何工作&lt;/h3&gt;
&lt;p&gt;上面铺垫了这么多理论，下面结合Chrome讲解当用户在地址栏上输入URL后，浏览器内部都做了写什么&lt;/p&gt;
&lt;h4 id=&quot;chrome浏览器中的多进程&quot;&gt;4.1 Chrome浏览器中的多进程&lt;/h4&gt;
&lt;p&gt;打开Chrome 任务管理器，可以看到&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1077260/i1tl0y6a8q.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;Chrome运行的进程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1077260/88zyyteu0o.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;各个进程的功能&lt;/p&gt;
&lt;p&gt;• Browser进程&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;功能：Controls &quot;chrome&quot; part of the application including address bar, bookmarks, back and forward buttons. Also handles the invisible, privileged parts of a web browser such as network requests and file access.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;• GPU进程&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;功能：Handles GPU tasks in isolation from other processes. It is separated into different process because GPUs handles requests from multiple apps and draw them in the same surface.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;• 第三方插件进程&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;功能：Controls any plugins used by the website, for example, flash. 每个插件对应一个进程，当插件运行时创建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;• 浏览器渲染进程&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;功能：Controls anything inside of the tab where a website is displayed. 默认每个标签页创建一个渲染引擎实例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;• V8 Proxy resolver&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;关于V8 Proxy resolver可查看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/chromium/issues/detail?id=11746&quot;&gt;code.google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;group.google.com &lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/#&quot; class=&quot;uri&quot;&gt;https://groups.google.com/a/chromium.org/forum/#&lt;/a&gt;!topic/net-dev/73f9B5vFphI&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/1n5hr4KJhZl2A4MicTfmyiHPdiKp7kmUoWXnRBN8SrZE/edit#&quot;&gt;doc.google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chrome支持使用代理脚本为给定的网址选择代理服务器，包含使用操作系统提供的代理解析程序的多个平台的回退实现。但默认情况下（iOS除外），它使用内置的解析V8执行代理脚本（V8 pac）。今天（截至2015年1月），V8 pac在浏览器进程中运行。这意味着浏览器进程包含一个V8实例，这是一个潜在的安全漏洞。在浏览器进程中允许V8还需要浏览器进程允许写入 - 执行页面。&lt;/p&gt;
&lt;p&gt;我们关于将V8 pac迁移到单独进程的建议包括为解析器创建Mojo服务，从实用程序进程导出该服务，以及从浏览器进程创建/连接到该进程。&lt;/p&gt;
&lt;p&gt;浏览器进程之间主要通过IPC (Inter Process Communication)通信&lt;/p&gt;
&lt;h4 id=&quot;per-frame-renderer-processes---site-isolation&quot;&gt;4.2 Per-frame renderer processes - Site Isolation&lt;/h4&gt;
&lt;p&gt;Site Isolation is a recently introduced feature in Chrome that runs a separate renderer process for each cross-site iframe. We’ve been talking about one renderer process per tab model which allowed cross-site iframes to run in a single renderer process with sharing memory space between different sites. Running a.com and b.com in the same renderer process might seem okay. The Same Origin Policy is the core security model of the web; it makes sure one site cannot access data from other sites without consent. Bypassing this policy is a primary goal of security attacks. Process isolation is the most effective way to separate sites. With Meltdown and Spectre, it became even more apparent that we need to separate sites using processes. With Site Isolation enabled on desktop by default since Chrome 67, each cross-site iframe in a tab gets a separate renderer process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1077260/gaoj5vowqd.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;每个iframe是单独的渲染进程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此文已由腾讯云+社区在各渠道发布&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取更多新鲜技术干货，可以关注我们腾讯云技术社区-云加社区官方号及知乎机构号&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 25 Feb 2019 07:51:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<og:description>本文由云+社区发表 作者：廖彩明 在从事前端开发过程中，浏览器作为最重要的开发环境，浏览器基础是是前端开发人员必须掌握的基础知识点，它贯穿着前端的整个网络体系。对浏览器原理的了解，决定着编写前端代码性</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/10431325.html</dc:identifier>
</item>
<item>
<title>【学习笔记】node.js重构路由功能 - 唐吉sir</title>
<link>http://www.cnblogs.com/youma/p/10429040.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/youma/p/10429040.html</guid>
<description>&lt;p&gt;摘要：利用node.js模块化实现路由功能，将请求路径作为参数传递给一个route函数，这个函数会根据参数调用一个方法，最后输出浏览器响应内容&lt;/p&gt;
&lt;h3&gt;1.介绍&lt;/h3&gt;
&lt;p&gt;node.js是一个基于Chrome V8引擎的JaveScript运行环境，简单来说就是运行在服务端的JavaScript,是一个事件驱动、非阻塞式的I/O模型，速度快，性能好。前端的蓬勃发展除了各大框架的流行之外，还有因为node.js的兴起，这使得前台和后台的数据交互更加便捷更加轻松。由此也产生了一个新的概念——全栈工程师，一个全栈工程师可以完成前端页面架构还可以完美实现后台数据的交互，熟练掌握node.js已经成为每位前端工作者基本技能。&lt;/p&gt;
&lt;h3&gt;2.使用&lt;/h3&gt;
&lt;p&gt;与node.js打包下载的还有一个叫NPM的安装包管理工具，能解决node.js代码部署上很多问题。我们可以利用npm工具使用第三方包或命令行程序，也可以上传自己编写的包或命令行程序供别人使用。npm安装第三方包的过程也十分简便，windows系统用cmd打开命令行，输入npm install +（包的名称，例如webpack）就行。&lt;/p&gt;
&lt;h3&gt;3.模块化&lt;/h3&gt;
&lt;h4&gt;3.1模块的输入与输出&lt;/h4&gt;
&lt;p&gt;Node.js 的模块分为两类，一类为原生（核心）模块，一类为文件模块。原生模块在 Node.js 源代码编译的时候编译进了二进制执行文件，加载的速度最快。另一类文件模块是动态加载的，加载速度比原生模块慢。但是 Node.js 对原生模块和文件模块都进行了缓存，于是在第二次 require 时，是不会有重复开销的。其中原生模块都被定义在 lib 这个目录下面，文件模块则不定性。&lt;/p&gt;
&lt;p&gt;文件模块可以是JavaScript代码文件（.js作为文件后缀）、也可以是JSON格式文本文件（.json作为文件后缀）、还可以是编辑过的C/C++文件（.node作为文件后缀）。文件模块输入方式通过require('/文件名.后缀')，require('./文件名.后缀')，requrie('../文件名.后缀') ，文件后缀可以省略；以&quot;/&quot;开头是以绝对路径去加载，以&quot;./&quot;开头和以&quot;../&quot;开头表示以相对路径加载，而以&quot;./&quot;开头表示同级目录下文件。文件后缀可以省略，Nodejs尝试加载的优先级 js文件 &amp;gt; json文件 &amp;gt; node文件，下面给出nodeJS模块的加载顺序：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/900566/201902/900566-20190225143719319-1882901342.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;实际应用中我们经常使用.js文件作为一个模块进行输入输出，输出通过exprots或者module.exports，其中exports是一种简写形式，等于在文件开头有这样一行命令：var exports = module.exports，浏览器在编译的时候也会把它当成module.exports指令，注意我们在使用exports时不能对它进行赋值等操作，否则会切断与module.exports之间的联系，导致输出错误。&lt;/p&gt;
&lt;h4&gt;3.2 nodeJS重构路由功能&lt;/h4&gt;
&lt;p&gt;上面的内容主要介绍了nodeJs的作用、nodeJs的基本语法以及它的遵循规范，下面我们开始一个demo，实现路由功能：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//server.js&lt;br/&gt;var&lt;/span&gt; http = require('http') &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输入node.js核心模块&lt;/span&gt;

&lt;span&gt;function&lt;/span&gt;&lt;span&gt; startServer(route){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; onRequest = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res) {
        route(req.url) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;传入请求的路径&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; server =&lt;span&gt; http.createServer(onRequest)
server.listen(&lt;/span&gt;3000)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听一个端口&lt;/span&gt;
&lt;span&gt;}

module.exports.startServer &lt;/span&gt;= startServer;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出模块&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们新建一个server.js模块，在这个模块中，我们定义了一个startServer函数，这个函数监听了一个3000端口，函数执行的时候调用route方法。我们先将这个模块输出&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//index.js&lt;br/&gt;var&lt;/span&gt; server = require(&quot;./server&quot;&lt;span&gt;);  //输入./server模块
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; router = require('./router'&lt;span&gt;);  //输入./router模块
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; handler = require(&quot;./handler&quot;&lt;span&gt;)  //输入./handler模块
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; handle =&lt;span&gt; {};   
handle[&lt;/span&gt;&quot;/&quot;] =&lt;span&gt; handler.home;           
handle[&lt;/span&gt;&quot;/home&quot;] =&lt;span&gt; handler.home;
handle[&lt;/span&gt;&quot;/list&quot;] =&lt;span&gt; handler.list;
handle[&lt;/span&gt;&quot;/add&quot;] =&lt;span&gt; handler.add
server.startServer(router.route,handle)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;route()接收到了请求路径，我们希望它接收到不同的路径会调用不同的方法，因此我们可以先把要执行的方法作为属性值传给一个handle对象，它的键就等于route接收到的请求路径。于是我们分别把创建route.js和handler.js，在index.js中把请求路径和handle对象传给route函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
  //server.js
&lt;/pre&gt;
&lt;div readability=&quot;23&quot;&gt;
&lt;p&gt;var http = require('http') //引入node.js核心模块&lt;/p&gt;
&lt;p&gt;function startServer(route,handle){&lt;/p&gt;
&lt;p&gt;var onRequest = function(req,res) {&lt;/p&gt;
&lt;p&gt;route(req.url,handle,res) //传入请求的路径&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;var server = http.createServer(onRequest)&lt;/p&gt;
&lt;p&gt;server.listen(3000) //监听一个端口&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;module.exports.startServer = startServer; //输出模块&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;&lt;p&gt;//&lt;/p&gt;&lt;/span&gt;&lt;span&gt;route.js&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; route(pathname,handle，res){
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; handle[pathname] == &quot;function&quot;&lt;span&gt;){
     handle[pathname](res)
  }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
     res.end(&lt;/span&gt;&quot;404:connot find anything&quot;&lt;span&gt;) //未匹配到路径的时候，响应“404”页面
  }
}
module.exports.route &lt;/span&gt;=&lt;span&gt; route;


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;handler.js&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; home (res){
    res.end(&lt;/span&gt;&quot;home&quot;&lt;span&gt;)
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; list (res){
    res.end(&lt;/span&gt;&quot;list&quot;&lt;span&gt;)
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; add(res){
   res.end(&lt;/span&gt;&quot;add&quot;&lt;span&gt;)
}
module.exports &lt;/span&gt;=&lt;span&gt; {
    home:home,
    list: list,
    add:add
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为我们希望在地址栏输入路径的时候，页面会响应出响应的内容，所以我们要把响应参数res传递给route函数，它又会把这个参数传递给handler里的方法，这个我们就能很灵活地根据请求的地址响应我们想要的内容。&lt;/p&gt;
&lt;h3&gt;4.代码效果浏览&lt;/h3&gt;
&lt;p&gt;我们在nodeJS环境中执行index.js模块，先找到这个模块的位置，在终端输入：node index，浏览器打开3000端口。这里推荐一个nodemon插件，它可以自动同步模块的变化，不用每次保存后再输入node index。本次学习的效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/900566/201902/900566-20190225153605309-1159752556.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; PS:以上就是本次的学习心得，通过博客的方式让自己的知识点得到了很好的巩固，不仅要学会，还得知道怎么分享出来，喜欢互联网其中一大缘由是它的开源精神，学习分享优秀的作品真是一件快乐的事情。本人水平有限，文章不足之处烦请不吝赐教&lt;/p&gt;
</description>
<pubDate>Mon, 25 Feb 2019 07:43:00 +0000</pubDate>
<dc:creator>唐吉sir</dc:creator>
<og:description>摘要：利用node.js模块化实现路由功能，将请求路径作为参数传递给一个route函数，这个函数会根据参数调用一个方法，最后输出浏览器响应内容 1.介绍 node.js是一个基于Chrome V8引擎</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/youma/p/10429040.html</dc:identifier>
</item>
<item>
<title>使用Asp.Net Core MVC 开发项目实践[第四篇:基于EF Core的扩展2] - 喻平勇</title>
<link>http://www.cnblogs.com/51core/p/10431025.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/51core/p/10431025.html</guid>
<description>&lt;p&gt;上篇我们说到了基于EFCore的基础扩展,这篇我们讲解下基于实体结合拉姆达表达式的自定义更新以及删除数据.&lt;/p&gt;
&lt;p&gt;先说下原理:&lt;strong&gt;其实通过实体以及拉姆达表达式生成SQL语句去执行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一种更新扩展:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自定义更新字段以及自定义扩展条件,请看下面的代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 自定义更新扩展
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TEntity&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;context&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;fields&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;更新字段&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;predicate&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;更新条件&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; MangoUpdate&amp;lt;TEntity&amp;gt;(&lt;span&gt;this&lt;/span&gt; DbContext context, Expression&amp;lt;Func&amp;lt;TEntity, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; fields, Expression&amp;lt;Func&amp;lt;TEntity, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; predicate) &lt;span&gt;where&lt;/span&gt; TEntity : &lt;span&gt;class&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             TSqlAssembledResult result = TSqlAssembled.Update&amp;lt;TEntity&amp;gt;&lt;span&gt;(fields, predicate);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            context.Database.ExecuteSqlCommand(result.SqlStr);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; context.SaveChanges() &amp;gt; &lt;span&gt;0&lt;/span&gt; ? &lt;span&gt;true&lt;/span&gt; : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的方法中我们看到几个参数,第一个参数不必说,扩展方法第一个参数必须要的,我们重点讲清楚一下第二个和第三个参数.&lt;/p&gt;
&lt;p&gt;参数:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Expression&amp;lt;Func&amp;lt;TEntity, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; fields 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表示实体中需要更新的字段,这里的参数要求的是一个拉姆达表达式,如下面的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
m =&amp;gt; m.ClickCount == m.ClickCount + &lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里就是更新字段ClickCount+1的功能.&lt;/p&gt;
&lt;p&gt;参数:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Expression&amp;lt;Func&amp;lt;TEntity, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; predicate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表示更新条件,这个参数也是一个拉姆达表达式,如下面代码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
m =&amp;gt; m.NavigationId == navigationId
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里表示更新条件 NavigationId指定值的数据库记录.&lt;/p&gt;
&lt;p&gt;接下来我们看方法中的调用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 TSqlAssembled.Update&amp;lt;TEntity&amp;gt;(fields, predicate);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个方法表示将参数解析成SQL语句,我们看看这个方法的具体内容:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 更新语句组装
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TEntity&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;fields&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;predicate&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TSqlAssembledResult Update&amp;lt;TEntity&amp;gt;(Expression&amp;lt;Func&amp;lt;TEntity, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; fields, Expression&amp;lt;Func&amp;lt;TEntity, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; predicate) &lt;span&gt;where&lt;/span&gt; TEntity : &lt;span&gt;class&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 StringBuilder strBuilder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 strBuilder.Append(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TEntity).Name);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; set &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析需要更新的字段值&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;                 UpdateFieldBuilder updateFieldBuilder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UpdateFieldBuilder();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                strBuilder.Append(updateFieldBuilder.Translate(fields));
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析条件&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;                 ConditionBuilder conditionBuilder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConditionBuilder();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                strBuilder.Append(conditionBuilder.Translate(predicate));
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理结果返回&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                 TSqlAssembledResult result = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TSqlAssembledResult();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 result.SqlParameters = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 result.SqlStr =&lt;span&gt; strBuilder.ToString();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception ex)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PS：这个方法中用到的条件编译类以及字段编辑类我们将在文章底部贴出来.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二种更新扩展：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 自定义更新扩展
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TEntity&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;context&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;entity&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;更新实体&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;predicate&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;更新条件&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; MangoUpdate&amp;lt;TEntity&amp;gt;(&lt;span&gt;this&lt;/span&gt; DbContext context, TEntity entity, Expression&amp;lt;Func&amp;lt;TEntity, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; predicate) &lt;span&gt;where&lt;/span&gt; TEntity:&lt;span&gt;class&lt;/span&gt;,&lt;span&gt;new&lt;/span&gt;&lt;span&gt;()
        {
            TSqlAssembledResult result &lt;/span&gt;= TSqlAssembled.Update&amp;lt;TEntity&amp;gt;&lt;span&gt;(entity, predicate);
            context.Database.ExecuteSqlCommand(result.SqlStr, result.SqlParameters);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; context.SaveChanges() &amp;gt; &lt;span&gt;0&lt;/span&gt; ? &lt;span&gt;true&lt;/span&gt; : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数 TEntity entity表示需要更新的实体&lt;/p&gt;
&lt;p&gt;参数 Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; predicate 表示更新条件,示例如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
m =&amp;gt; m.NavigationId == navigationId
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TSqlAssembled.Update&amp;lt;TEntity&amp;gt;(entity, predicate) 这个方法表示将参数解析成SQL语句,我们看看这个方法的具体内容:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 更新语句组装
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TEntity&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;entity&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;predicate&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TSqlAssembledResult Update&amp;lt;TEntity&amp;gt;(TEntity entity, Expression&amp;lt;Func&amp;lt;TEntity, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; predicate) &lt;span&gt;where&lt;/span&gt; TEntity : &lt;span&gt;class&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt;()
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                StringBuilder strBuilder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
                strBuilder.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;                Type type =&lt;span&gt; entity.GetType();
                strBuilder.Append(type.Name);
                strBuilder.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; set &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理实体类属性&lt;/span&gt;
                PropertyInfo[] properties =&lt;span&gt; type.GetProperties();
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; index = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                List&lt;/span&gt;&amp;lt;SqlParameter&amp;gt; sqlParameter = &lt;span&gt;new&lt;/span&gt; List&amp;lt;SqlParameter&amp;gt;&lt;span&gt;();
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; property &lt;span&gt;in&lt;/span&gt;&lt;span&gt; properties)
                {
                    &lt;/span&gt;&lt;span&gt;object&lt;/span&gt; value = property.GetValue(entity, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (index != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                        {
                            strBuilder.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        }
                        strBuilder.Append(property.Name);
                        strBuilder.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        strBuilder.Append(property.Name);

                        sqlParameter.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlParameter(property.Name, value));
                        index&lt;/span&gt;++&lt;span&gt;;
                    }
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;编译条件&lt;/span&gt;
                ConditionBuilder conditionBuilder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConditionBuilder();
                strBuilder.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                strBuilder.Append(conditionBuilder.Translate(predicate));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理结果返回&lt;/span&gt;
                TSqlAssembledResult result = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TSqlAssembledResult();
                result.SqlParameters &lt;/span&gt;=&lt;span&gt; sqlParameter.ToArray();
                result.SqlStr &lt;/span&gt;=&lt;span&gt; strBuilder.ToString();
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PS：这里我们多了将实体反射获取需要更新的字段以及字段值.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三种删除扩展:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自定删除条件,代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 自定义删除扩展
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TEntity&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;context&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;predicate&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;删除条件&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; MangoRemove&amp;lt;TEntity&amp;gt;(&lt;span&gt;this&lt;/span&gt; DbContext context,Expression&amp;lt;Func&amp;lt;TEntity, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; predicate) &lt;span&gt;where&lt;/span&gt; TEntity : &lt;span&gt;class&lt;/span&gt;,&lt;span&gt;new&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             TSqlAssembledResult result = TSqlAssembled.Delete&amp;lt;TEntity&amp;gt;&lt;span&gt;(predicate);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            context.Database.ExecuteSqlCommand(result.SqlStr);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; context.SaveChanges() &amp;gt; &lt;span&gt;0&lt;/span&gt; ? &lt;span&gt;true&lt;/span&gt; : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; predicate表示为自定义条件,示例如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
_dbContext.MangoRemove&amp;lt;Entity.m_PostsAnswerRecords&amp;gt;(m =&amp;gt; m.AnswerId == model.AnswerId &amp;amp;&amp;amp; m.UserId == model.UserId);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PS:此段代码表示根据指定条件删除m_PostsAnswerRecords表中的记录&lt;/p&gt;
&lt;p&gt;TSqlAssembled.Delete&amp;lt;TEntity&amp;gt;(predicate)方法负责将指定条件编译成SQL语句,代码如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 删除语句组装
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TEntity&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;predicate&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TSqlAssembledResult Delete&amp;lt;TEntity&amp;gt;(Expression&amp;lt;Func&amp;lt;TEntity, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; predicate) &lt;span&gt;where&lt;/span&gt; TEntity:&lt;span&gt;class&lt;/span&gt;,&lt;span&gt;new&lt;/span&gt;&lt;span&gt;()
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; tableName = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TEntity).Name;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;条件编译&lt;/span&gt;
                ConditionBuilder conditionBuilder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConditionBuilder();
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; conditionStr =&lt;span&gt; conditionBuilder.Translate(predicate);
                StringBuilder strBuilder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
                strBuilder.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete from &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                strBuilder.Append(tableName);
                strBuilder.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                strBuilder.Append(conditionStr);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理结果返回&lt;/span&gt;
                TSqlAssembledResult result = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TSqlAssembledResult();
                result.SqlParameters &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                result.SqlStr &lt;/span&gt;=&lt;span&gt; strBuilder.ToString();
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception ex)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面我们贴出字段以及条件的拉姆达表达式解析类:&lt;/p&gt;
&lt;p&gt;条件解析类(ConditionBuilder)：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq.Expressions;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Reflection;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Mango.Framework.EFCore
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConditionBuilder : ExpressionVisitor
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;        StringBuilder strBuilder;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; 
&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ConditionBuilder()
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; 
&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Translate(Expression expression)
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.strBuilder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Visit(expression);
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.strBuilder.ToString();
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Expression StripQuotes(Expression e)
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (e.NodeType ==&lt;span&gt; ExpressionType.Quote)
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;                 e =&lt;span&gt; ((UnaryExpression)e).Operand;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; Expression VisitBinary(BinaryExpression b)
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;             strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Visit(b.Left);
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (b.NodeType)
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; ExpressionType.AndAlso:
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; and &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; ExpressionType.OrElse:
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; or &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; ExpressionType.Equal:
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; ExpressionType.NotEqual:
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &amp;lt;&amp;gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; ExpressionType.LessThan:
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &amp;lt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; ExpressionType.LessThanOrEqual:
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &amp;lt;= &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; ExpressionType.GreaterThan:
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &amp;gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; ExpressionType.GreaterThanOrEqual:
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &amp;gt;= &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;                 &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NotSupportedException(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;运算符{0}不支持&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, b.NodeType));
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (b.Right.NodeType != ExpressionType.Parameter&amp;amp;&amp;amp; b.Right.NodeType ==&lt;span&gt; ExpressionType.MemberAccess)
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;                 LambdaExpression lambda =&lt;span&gt; Expression.Lambda(b.Right);
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; fn =&lt;span&gt; lambda.Compile();
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.Visit(Expression.Constant(fn.DynamicInvoke(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;), b.Right.Type));
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;            { 
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Visit(b.Right);
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;             strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; 
&lt;span&gt; 81&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; Expression VisitConstant(ConstantExpression c)
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (Type.GetTypeCode(c.Value.GetType()))
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; TypeCode.Boolean:
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                     strBuilder.Append(((&lt;span&gt;bool&lt;/span&gt;)c.Value) ? &lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; TypeCode.String:
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;                    strBuilder.Append(c.Value);
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; TypeCode.Object:
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NotSupportedException(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;常量{0}不支持&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, c.Value));
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;                 &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;                    strBuilder.Append(c.Value);
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; c;
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; 
&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; Expression VisitMember(MemberExpression m)
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (m.Expression != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; m.Expression.NodeType ==&lt;span&gt; ExpressionType.Parameter)
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;                strBuilder.Append(m.Member.Name);
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m;
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (m.Expression != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; m.Expression.NodeType ==&lt;span&gt; ExpressionType.Constant)
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;                 LambdaExpression lambda =&lt;span&gt; Expression.Lambda(m);
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; fn =&lt;span&gt; lambda.Compile();
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.Visit(Expression.Constant(fn.DynamicInvoke(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;), m.Type));
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m;
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NotSupportedException(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;成员{0}不支持&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, m.Member.Name));
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更新字段解析类(UpdateFieldBuilder):&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq.Expressions;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Reflection;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Mango.Framework.EFCore
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UpdateFieldBuilder : ExpressionVisitor
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        StringBuilder strBuilder;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Translate(Expression expression)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.strBuilder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Visit(expression);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.strBuilder.ToString();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Expression StripQuotes(Expression e)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (e.NodeType ==&lt;span&gt; ExpressionType.Quote)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 e =&lt;span&gt; ((UnaryExpression)e).Operand;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; Expression VisitBinary(BinaryExpression b)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;strBuilder.Append(&quot;(&quot;);&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Visit(b.Left);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (b.NodeType)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; ExpressionType.Equal:
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; ExpressionType.AndAlso:
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; ExpressionType.Add:
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; ExpressionType.Subtract:
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                 &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NotSupportedException(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;运算符{0}不支持&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, b.NodeType));
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Visit(b.Right);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;strBuilder.Append(&quot;)&quot;);&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; Expression VisitConstant(ConstantExpression c)
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (Type.GetTypeCode(c.Value.GetType()))
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; TypeCode.Boolean:
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;                     strBuilder.Append(((&lt;span&gt;bool&lt;/span&gt;)c.Value) ? &lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; TypeCode.String:
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;                    strBuilder.Append(c.Value);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;                     strBuilder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; TypeCode.Object:
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NotSupportedException(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;常量{0}不支持&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, c.Value));
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;                 &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;                    strBuilder.Append(c.Value);
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; c;
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; 
&lt;span&gt;74&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; Expression VisitMember(MemberExpression m)
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (m.Expression != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; m.Expression.NodeType ==&lt;span&gt; ExpressionType.Parameter)
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt; &lt;span&gt;                strBuilder.Append(m.Member.Name);
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m;
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NotSupportedException(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;成员{0}不支持&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, m.Member.Name));
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到此本篇章完成,更详细的代码请下载源代码查看.&lt;/p&gt;
</description>
<pubDate>Mon, 25 Feb 2019 07:11:00 +0000</pubDate>
<dc:creator>喻平勇</dc:creator>
<og:description>上篇我们说到了基于EFCore的基础扩展,这篇我们讲解下基于实体结合拉姆达表达式的自定义更新以及删除数据. 先说下原理:其实通过实体以及拉姆达表达式生成SQL语句去执行 第一种更新扩展: 自定义更新字</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/51core/p/10431025.html</dc:identifier>
</item>
<item>
<title>Mybatis工作原理 - 江南入直</title>
<link>http://www.cnblogs.com/scuury/p/10371246.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/scuury/p/10371246.html</guid>
<description>&lt;p&gt;近来想写一个mybatis的分页插件，但是在写插件之前肯定要了解一下mybatis具体的工作原理吧，于是边参考别人的博客，边看源码就开干了。&lt;/p&gt;
&lt;p&gt;核心部件：&lt;/p&gt;
&lt;p&gt;SqlSession、Executor、StatementHandler、ParameterHandler、ResultSetHandler、TypeHandler、MappedStatement、Configuration&lt;/p&gt;
&lt;p&gt;在分析工作原理之前，首先看一下我的mybatis全局配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE configuration
PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 和spring整合后 environments配置将废除 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environments &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;=&quot;development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environment &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 使用jdbc事务管理 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;transactionManager &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;JDBC&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataSource &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;POOLED&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driver&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt;
                    value&lt;/span&gt;&lt;span&gt;=&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;123456&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dataSource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environments&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper  &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;sqlMapper/userMapper.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;第一步：创建一个&lt;strong&gt;&lt;span&gt;sqlSessionFactory&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在了解如何创建&lt;strong&gt;&lt;span&gt;sqlSessionFactory&lt;/span&gt;&lt;/strong&gt;之前，先看一下mybatis是如何加载全局配置文件，解析xml文件生成&lt;strong&gt;&lt;span&gt;Configuration&lt;/span&gt;&lt;/strong&gt;的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Configuration parse() {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (parsed) {
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BuilderException(&quot;Each XMLConfigBuilder can only be used once.&quot;&lt;span&gt;);
    }
    parsed &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    parseConfiguration(parser.evalNode(&lt;/span&gt;&quot;/configuration&quot;&lt;span&gt;));
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; configuration;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; parseConfiguration(XNode root) {
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      propertiesElement(root.evalNode(&lt;/span&gt;&quot;properties&quot;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;issue #117 read properties first&lt;/span&gt;
      typeAliasesElement(root.evalNode(&quot;typeAliases&quot;&lt;span&gt;));
      pluginElement(root.evalNode(&lt;/span&gt;&quot;plugins&quot;&lt;span&gt;));
      objectFactoryElement(root.evalNode(&lt;/span&gt;&quot;objectFactory&quot;&lt;span&gt;));
      objectWrapperFactoryElement(root.evalNode(&lt;/span&gt;&quot;objectWrapperFactory&quot;&lt;span&gt;));
      settingsElement(root.evalNode(&lt;/span&gt;&quot;settings&quot;&lt;span&gt;));
      environmentsElement(root.evalNode(&lt;/span&gt;&quot;environments&quot;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; read it after objectFactory and objectWrapperFactory issue #631&lt;/span&gt;
      databaseIdProviderElement(root.evalNode(&quot;databaseIdProvider&quot;&lt;span&gt;));
      typeHandlerElement(root.evalNode(&lt;/span&gt;&quot;typeHandlers&quot;&lt;span&gt;));
      mapperElement(root.evalNode(&lt;/span&gt;&quot;mappers&quot;&lt;span&gt;));
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BuilderException(&quot;Error parsing SQL Mapper Configuration. Cause: &quot; +&lt;span&gt; e, e);
    }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 在上面的第二段代码中有一句&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mapperElement(root.evalNode(&quot;mappers&quot;));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刚好我们的全局配置文件中有一个mapper的配置，由此可见，&lt;strong&gt;&lt;span&gt;mapperElemet()&lt;/span&gt;&lt;/strong&gt;方法是解析mapper映射文件的，具体代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; mapperElement(XNode parent) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (parent != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (XNode child : parent.getChildren()) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&quot;package&quot;&lt;span&gt;.equals(child.getName())) {
          String mapperPackage &lt;/span&gt;= child.getStringAttribute(&quot;name&quot;&lt;span&gt;);
          configuration.addMappers(mapperPackage);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
          String resource &lt;/span&gt;= child.getStringAttribute(&quot;resource&quot;&lt;span&gt;);
          String url &lt;/span&gt;= child.getStringAttribute(&quot;url&quot;&lt;span&gt;);
          String mapperClass &lt;/span&gt;= child.getStringAttribute(&quot;class&quot;&lt;span&gt;);
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (resource != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; url == &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; mapperClass == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {//&lt;span&gt;进入该判断&lt;/span&gt;
            ErrorContext.instance().resource(resource);
            InputStream inputStream &lt;/span&gt;=&lt;span&gt; Resources.getResourceAsStream(resource);
            XMLMapperBuilder mapperParser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XMLMapperBuilder(inputStream, configuration, resource, configuration.getSqlFragments());
            mapperParser.parse();
          } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (resource == &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; url != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; mapperClass == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            ErrorContext.instance().resource(url);
            InputStream inputStream &lt;/span&gt;=&lt;span&gt; Resources.getUrlAsStream(url);
            XMLMapperBuilder mapperParser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XMLMapperBuilder(inputStream, configuration, url, configuration.getSqlFragments());
            mapperParser.parse();
          } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (resource == &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; url == &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; mapperClass != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            Class&lt;/span&gt;&amp;lt;?&amp;gt; mapperInterface =&lt;span&gt; Resources.classForName(mapperClass);
            configuration.addMapper(mapperInterface);
          } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BuilderException(&quot;A mapper element may only specify a url, resource or class, but not more than one.&quot;&lt;span&gt;);
          }
        }
      }
    }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据以上代码可以分析，在写mapper映射文件的地址时不仅可以写成resource，还可以写成url和mapperClass的形式，由于我们用的是resource，所以直接进入第一个判断，最后解析mapper映射文件的方法是&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; configurationElement(XNode context) {
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      String namespace &lt;/span&gt;= context.getStringAttribute(&quot;namespace&quot;&lt;span&gt;);
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (namespace.equals(&quot;&quot;&lt;span&gt;)) {
          &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BuilderException(&quot;Mapper's namespace cannot be empty&quot;&lt;span&gt;);
      }
      builderAssistant.setCurrentNamespace(namespace);
      cacheRefElement(context.evalNode(&lt;/span&gt;&quot;cache-ref&quot;&lt;span&gt;));
      cacheElement(context.evalNode(&lt;/span&gt;&quot;cache&quot;&lt;span&gt;));
      parameterMapElement(context.evalNodes(&lt;/span&gt;&quot;/mapper/parameterMap&quot;&lt;span&gt;));
      resultMapElements(context.evalNodes(&lt;/span&gt;&quot;/mapper/resultMap&quot;&lt;span&gt;));
      sqlElement(context.evalNodes(&lt;/span&gt;&quot;/mapper/sql&quot;&lt;span&gt;));
      buildStatementFromContext(context.evalNodes(&lt;/span&gt;&quot;select|insert|update|delete&quot;&lt;span&gt;));
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BuilderException(&quot;Error parsing Mapper XML. Cause: &quot; +&lt;span&gt; e, e);
    }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中具体解析每一个sql语句节点的是&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
buildStatementFromContext(context.evalNodes(&quot;select|insert|update|delete&quot;));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进入这个方法一层层深究，最后到这里可以知道&lt;strong&gt;&lt;span&gt;MappedStatement&lt;/span&gt;&lt;/strong&gt;是由&lt;strong&gt;&lt;span&gt;builderAssistant&lt;/span&gt;&lt;/strong&gt;（即&lt;strong&gt;&lt;span&gt;MapperBuildAssistant&lt;/span&gt;&lt;/strong&gt;）创建的&lt;code&gt;。&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; parseStatementNode() {
    ...
    builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,
        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,
        resultSetTypeEnum, flushCache, useCache, resultOrdered, 
        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后进入方法&lt;strong&gt;&lt;span&gt;addMappedStatement&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;span&gt;mappedStatement&lt;/span&gt;&lt;/strong&gt;最后以id为键保存在了&lt;strong&gt;&lt;span&gt;Configuration&lt;/span&gt;&lt;/strong&gt;中的一个map变量&lt;strong&gt;&lt;span&gt;mappedStatements&lt;/span&gt;&lt;/strong&gt;中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MappedStatement addMappedStatement(
      String id,
      SqlSource sqlSource,
      StatementType statementType,
      SqlCommandType sqlCommandType,
      Integer fetchSize,
      Integer timeout,
      String parameterMap,
      Class&lt;/span&gt;&amp;lt;?&amp;gt;&lt;span&gt; parameterType,
      String resultMap,
      Class&lt;/span&gt;&amp;lt;?&amp;gt;&lt;span&gt; resultType,
      ResultSetType resultSetType,
      &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; flushCache,
      &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; useCache,
      &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; resultOrdered,
      KeyGenerator keyGenerator,
      String keyProperty,
      String keyColumn,
      String databaseId,
      LanguageDriver lang,
      String resultSets) {
    
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (unresolvedCacheRef) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IncompleteElementException(&quot;Cache-ref not yet resolved&quot;&lt;span&gt;);
    
    id &lt;/span&gt;= applyCurrentNamespace(id, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; isSelect = sqlCommandType ==&lt;span&gt; SqlCommandType.SELECT;

    MappedStatement.Builder statementBuilder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MappedStatement.Builder(configuration, id, sqlSource, sqlCommandType);
    statementBuilder.resource(resource);
    statementBuilder.fetchSize(fetchSize);
    statementBuilder.statementType(statementType);
    statementBuilder.keyGenerator(keyGenerator);
    statementBuilder.keyProperty(keyProperty);
    statementBuilder.keyColumn(keyColumn);
    statementBuilder.databaseId(databaseId);
    statementBuilder.lang(lang);
    statementBuilder.resultOrdered(resultOrdered);
    statementBuilder.resulSets(resultSets);
    setStatementTimeout(timeout, statementBuilder);

    setStatementParameterMap(parameterMap, parameterType, statementBuilder);
    setStatementResultMap(resultMap, resultType, resultSetType, statementBuilder);
    setStatementCache(isSelect, flushCache, useCache, currentCache, statementBuilder);

    MappedStatement statement &lt;/span&gt;=&lt;span&gt; statementBuilder.build();
    configuration.addMappedStatement(statement);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; statement;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 最后回到我们的创建&lt;strong&gt;&lt;span&gt;sqlSessionFactory&lt;/span&gt;&lt;/strong&gt;上，之前的一切都是为了生成一个&lt;strong&gt;&lt;span&gt;sqlSessionFactory&lt;/span&gt;&lt;/strong&gt;服务的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      XMLConfigBuilder parser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XMLConfigBuilder(inputStream, environment, properties);
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; build(parser.parse());
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; ExceptionFactory.wrapException(&quot;Error building SqlSession.&quot;&lt;span&gt;, e);
    } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
      ErrorContext.instance().reset();
      &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
        inputStream.close();
      } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Intentionally ignore. Prefer previous error.&lt;/span&gt;
&lt;span&gt;      }
    }
  }
    
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; SqlSessionFactory build(Configuration config) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultSqlSessionFactory(config);
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的代码可以看出最后是通过以&lt;span&gt;&lt;strong&gt;Configuration&lt;/strong&gt;&lt;/span&gt;为参数&lt;strong&gt;&lt;span&gt;build()&lt;/span&gt;&lt;/strong&gt;方法生成&lt;strong&gt;&lt;span&gt;DefautSqlSessionFactory&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;第二步：创建sqlSession&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SqlSession openSession() {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; openSessionFromDataSource(configuration.getDefaultExecutorType(), &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;private&lt;/span&gt; SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; autoCommit) {
    Transaction tx &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Environment environment =&lt;span&gt; configuration.getEnvironment();
      &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; TransactionFactory transactionFactory =&lt;span&gt; getTransactionFactoryFromEnvironment(environment);
      tx &lt;/span&gt;=&lt;span&gt; transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
      &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Executor executor =&lt;span&gt; configuration.newExecutor(tx, execType);
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultSqlSession(configuration, executor, autoCommit);
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
      closeTransaction(tx); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; may have fetched a connection so lets call close()&lt;/span&gt;
      &lt;span&gt;throw&lt;/span&gt; ExceptionFactory.wrapException(&quot;Error opening session.  Cause: &quot; +&lt;span&gt; e, e);
    } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
      ErrorContext.instance().reset();
    }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回一个SqlSession，默认使用DefaultSqlSession &lt;/span&gt;
 &lt;span&gt;public&lt;/span&gt; DefaultSqlSession(Configuration configuration, Executor executor, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; autoCommit) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.configuration =&lt;span&gt; configuration;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.executor =&lt;span&gt; executor;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dirty = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.autoCommit =&lt;span&gt; autoCommit;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;executor&lt;/span&gt;&lt;/strong&gt;在这一步得到创建，具体的使用在下一步。&lt;/p&gt;
&lt;h3&gt;第三步：执行具体的sql请求&lt;/h3&gt;
&lt;p&gt;在我的代码里执行的是&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
User user = sqlSession.selectOne(&quot;test.findUserById&quot;, 1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体到里面的方法就是&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &amp;lt;E&amp;gt; List&amp;lt;E&amp;gt;&lt;span&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.根据Statement Id，在mybatis 配置对象Configuration中查找和配置文件相对应的MappedStatement&lt;/span&gt;
      MappedStatement ms =&lt;span&gt; configuration.getMappedStatement(statement);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2. 将查询任务委托给MyBatis 的执行器 Executor&lt;/span&gt;
      List&amp;lt;E&amp;gt; result =&lt;span&gt; executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; ExceptionFactory.wrapException(&quot;Error querying database.  Cause: &quot; +&lt;span&gt; e, e);
    } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
      ErrorContext.instance().reset();
    }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里通过statementId拿到了我们在第一步存在map里面的MappedStatement。在这里引用参考博客的一句话：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;SqlSession&lt;/span&gt;&lt;/strong&gt;根据&lt;strong&gt;&lt;span&gt;Statement ID&lt;/span&gt;&lt;/strong&gt;, 在&lt;strong&gt;&lt;span&gt;mybatis&lt;/span&gt;&lt;/strong&gt;配置对象&lt;span&gt;&lt;span&gt;&lt;strong&gt;Configuration&lt;/strong&gt;中获取到对应的&lt;span&gt;&lt;strong&gt;&lt;span&gt;MappedStatement&lt;/span&gt;&lt;/strong&gt;对象，然后调用&lt;span&gt;&lt;strong&gt;&lt;span&gt;mybatis&lt;/span&gt;&lt;/strong&gt;执行器来执行具体的操作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;再继续看&lt;span&gt;&lt;strong&gt;query()&lt;/strong&gt;&lt;/span&gt;和&lt;span&gt;&lt;strong&gt;queryFromDatabase()&lt;/strong&gt;&lt;/span&gt;这两个方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
@SuppressWarnings(&quot;unchecked&quot;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;E&amp;gt; List&amp;lt;E&amp;gt; query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
    ErrorContext.instance().resource(ms.getResource()).activity(&lt;/span&gt;&quot;executing a query&quot;&lt;span&gt;).object(ms.getId());
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (closed) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ExecutorException(&quot;Executor was closed.&quot;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (queryStack == 0 &amp;amp;&amp;amp;&lt;span&gt; ms.isFlushCacheRequired()) {
      clearLocalCache();
    }
    List&lt;/span&gt;&amp;lt;E&amp;gt;&lt;span&gt; list;
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      queryStack&lt;/span&gt;++&lt;span&gt;;
      list &lt;/span&gt;= resultHandler == &lt;span&gt;null&lt;/span&gt; ? (List&amp;lt;E&amp;gt;) localCache.getObject(key) : &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (list != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        list &lt;/span&gt;=&lt;span&gt; queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);
      }
    } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
      queryStack&lt;/span&gt;--&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (queryStack == 0&lt;span&gt;) {
      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (DeferredLoad deferredLoad : deferredLoads) {
        deferredLoad.load();
      }
      deferredLoads.clear(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; issue #601&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt; (configuration.getLocalCacheScope() ==&lt;span&gt; LocalCacheScope.STATEMENT) {
        clearLocalCache(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; issue #482&lt;/span&gt;
&lt;span&gt;      }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;private&lt;/span&gt; &amp;lt;E&amp;gt; List&amp;lt;E&amp;gt; queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
    List&lt;/span&gt;&amp;lt;E&amp;gt;&lt;span&gt; list;
    localCache.putObject(key, EXECUTION_PLACEHOLDER);
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      list &lt;/span&gt;=&lt;span&gt; doQuery(ms, parameter, rowBounds, resultHandler, boundSql);
    } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
      localCache.removeObject(key);
    }
    localCache.putObject(key, list);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ms.getStatementType() ==&lt;span&gt; StatementType.CALLABLE) {
      localOutputParameterCache.putObject(key, parameter);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这两个方法里面会为当前的查询创建一个&lt;span&gt;缓存key&lt;/span&gt;，如果缓存中没有值，直接从数据库中读取，执行查询后将得到的list结果放入缓存之中。&lt;/p&gt;
&lt;p&gt;紧接着看&lt;strong&gt;&lt;span&gt;doQuer&lt;span&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;()&lt;/span&gt;在&lt;span&gt;&lt;strong&gt;SimpleExecutor&lt;/strong&gt;&lt;/span&gt;类中重写的方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &amp;lt;E&amp;gt; List&amp;lt;E&amp;gt; doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
    Statement stmt &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      Configuration configuration &lt;/span&gt;=&lt;span&gt; ms.getConfiguration();
      StatementHandler handler &lt;/span&gt;=&lt;span&gt; configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
      stmt &lt;/span&gt;=&lt;span&gt; prepareStatement(handler, ms.getStatementLog());
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; handler.&amp;lt;E&amp;gt;&lt;span&gt;query(stmt, resultHandler);
    } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
      closeStatement(stmt);
    }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Statement&lt;/span&gt;&lt;/strong&gt;连接对象就是在这里创建的，因此&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Executor&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;的作用之一就是创建&lt;strong&gt;&lt;span&gt;Statement&lt;/span&gt;&lt;/strong&gt;了，创建完后又把&lt;strong&gt;&lt;span&gt;Statement&lt;/span&gt;&lt;/strong&gt;丢给&lt;strong&gt;&lt;span&gt;StatementHandler&lt;/span&gt;&lt;/strong&gt;返回List查询结果。&lt;/p&gt;
&lt;p&gt;接下来再看一下这里的两个方法&lt;strong&gt;&lt;span&gt;&lt;span&gt;prepareStatement&lt;/span&gt;()&lt;/span&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;span&gt;query()&lt;/span&gt;&lt;/strong&gt;的具体实现&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;private&lt;/span&gt; Statement prepareStatement(StatementHandler handler, Log statementLog) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
    Statement stmt;
    Connection connection &lt;/span&gt;=&lt;span&gt; getConnection(statementLog);
    stmt &lt;/span&gt;=&lt;span&gt; handler.prepare(connection);
    handler.parameterize(stmt);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; stmt;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;public&lt;/span&gt; &amp;lt;E&amp;gt; List&amp;lt;E&amp;gt; query(Statement statement, ResultHandler resultHandler) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
    PreparedStatement ps &lt;/span&gt;=&lt;span&gt; (PreparedStatement) statement;
    ps.execute();
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; resultSetHandler.&amp;lt;E&amp;gt;&lt;span&gt; handleResultSets(ps);
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;prepareStatement()&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;是创建&lt;span&gt;&lt;strong&gt;Statement&lt;/strong&gt;&lt;/span&gt;的具体实现方法，&lt;span&gt;调用&lt;strong&gt;&lt;span&gt;parameterize()&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;方法再深入进去就是调用的方法具体赋值了&lt;/p&gt;
&lt;p&gt;这里的是调用了&lt;span&gt;&lt;strong&gt;ResultSetHandler&lt;/strong&gt;&lt;/span&gt;的&lt;strong&gt;&lt;span&gt;handleResultSets(Statem&lt;span&gt;e&lt;/span&gt;nt)&lt;/span&gt;&lt;/strong&gt; 方法。作用就是把&lt;strong&gt;&lt;span&gt;ResultSet&lt;/span&gt;&lt;/strong&gt;结果集对象转换成&lt;span&gt;List&lt;/span&gt;类型的集合。&lt;/p&gt;
&lt;p&gt;总结以上步骤就是：&lt;/p&gt;
&lt;p&gt;1.根据具体传入的参数，动态地生成需要执行的SQL语句，用&lt;span&gt;BoundSql&lt;/span&gt;对象表示&lt;/p&gt;
&lt;p&gt;2.为当前的查询创建一个缓存Key&lt;/p&gt;
&lt;p&gt;3.缓存中没有值，直接从数据库中读取数据&lt;/p&gt;
&lt;p&gt;4.执行查询，返回List 结果，然后 将查询的结果放入缓存之中&lt;/p&gt;
&lt;p&gt;5.根据既有的参数，创建&lt;span&gt;StatementHandler&lt;/span&gt;对象来执行查询操作&lt;/p&gt;
&lt;p&gt;6.将创建Statement传递给&lt;span&gt;StatementHandler&lt;/span&gt;对象,调用&lt;span&gt;parameterize()&lt;/span&gt;方法赋值&lt;/p&gt;
&lt;p&gt;7.调用&lt;span&gt;StatementHandler.query()&lt;/span&gt;方法，返回List结果集&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;以上三个步骤所有流程大体可以用一张图来总结&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1334873/201902/1334873-20190225140914208-1771974027.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这是本人第一次分析框架源码，感受颇深，另外肯定也有不足之处，望批评指正。&lt;/p&gt;
&lt;p&gt;最后本博客参考了以下博客：&lt;/p&gt;
&lt;p&gt;《深入理解mybatis原理》 MyBatis的架构设计以及实例分析.&lt;a href=&quot;https://blog.csdn.net/luanlouis/article/details/40422941&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/luanlouis/article/details/40422941&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;debug源码之mybatis.&lt;a href=&quot;https://blog.csdn.net/a412451848/article/details/82723754&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/a412451848/article/details/82723754&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 25 Feb 2019 06:20:00 +0000</pubDate>
<dc:creator>江南入直</dc:creator>
<og:description>近来想写一个mybatis的分页插件，但是在写插件之前肯定要了解一下mybatis具体的工作原理吧，于是边参考别人的博客，边看源码就开干了。 核心部件： SqlSession、Executor、Sta</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/scuury/p/10371246.html</dc:identifier>
</item>
<item>
<title>搞懂Linux下的几种文件类型 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/10430642.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/10430642.html</guid>
<description>&lt;p&gt;在Linux系统下，有七类文件类型：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;普通文件(-)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;目录(d)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;软链接(字符链接L)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;套接字文件(S)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;字符设备(S)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;块设备(B)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;管道文件(命名管道P)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;普通文件、目录、软链接无需多解释。&lt;/p&gt;
&lt;h2 id=&quot;管道文件&quot;&gt;管道文件&lt;/h2&gt;
&lt;p&gt;管道分为&lt;strong&gt;匿名管道和命名管道&lt;/strong&gt;。管道都是一端写入、另一端读取，它们是单方向数据传输的，它们的数据都是直接在内存中传输的，管道是进程间通信的一种方式，例如父进程写，子进程读。&lt;/p&gt;
&lt;p&gt;在shell中匿名管道就是一个管道符号&quot;|&quot;，例如&lt;code&gt;ls | grep xxx&lt;/code&gt;，其中ls对应的进程是这个独立进程组中的父进程，grep对应的进程是子进程，父进程写子进程读。&lt;/p&gt;
&lt;p&gt;在编程语言中，匿名管道是通过创建两个文件句柄或文件描述符(例如A、B)来实现的，一个文件句柄用于写数据(例如A写入端，数据写入A将自动推入B中)，另一个文件句柄用于读数据(即B)。&lt;/p&gt;
&lt;p&gt;对于命名管道，即有名称的管道，命名管道将文件保留在文件系统中，它也称为FIFO，也就是first in first out。虽然命名管道文件保留在文件系统中，但是这个文件只是使用命名管道的一个入口，在使用命名管道传输数据的时候，仍然是在内存中进行的，也就是说并不会因为保留在文件系统上命名管道的效率就低了。&lt;/p&gt;
&lt;p&gt;在shell中，可以使用&lt;code&gt;mknod&lt;/code&gt;命令或&lt;code&gt;mkfifo&lt;/code&gt;命令创建命名管道，在写某些特殊需求的shell脚本时，命名管道非常有用。实际上，在Bash 4之后就支持协程(使用coproc命令)的功能了(ksh和zsh老早就支持协程)，但是协程的需求都能通过命名管道来实现。&lt;/p&gt;
&lt;p&gt;一般的管道都是单向通信的，无法实现双向通信的功能，也就是只能一边写一边读，不能两边都能读、写。如果要实现双向通信，可以创建两根管道(这样就有4个文件句柄，两个读端，两个写端)，或者使用更方便的套接字。&lt;/p&gt;
&lt;h2 id=&quot;套接字socket&quot;&gt;套接字(Socket)&lt;/h2&gt;
&lt;p&gt;套接字用来实现两端通信，正如上面分析的，可以实现双向管道的进程间通信功能。不仅如此，套接字还能通过网络实现跨主机的进程间通信功能。&lt;/p&gt;
&lt;p&gt;套接字需要成对才有意义，也就是分为两端，每一端都有用于读、写的文件描述符(或文件句柄)，相当于两根双向通信的管道。&lt;/p&gt;
&lt;p&gt;套接字根据协议族的方式分为两大类：网络套接字(AF_INET类型，根据ipv4和ipv6分为inet4和inet6)和Unix Domain套接字(AF_UNIX类型)。当然，从协议族往下，套接字可细分为很多种类型，例如INET套接字可以分为TCP套接字、UDP套接字、链路层套接字、Raw套接字等等。其中网络套接字是网络编程的基础和核心。&lt;/p&gt;
&lt;h3 id=&quot;unix-domain套接字&quot;&gt;Unix Domain套接字&lt;/h3&gt;
&lt;p&gt;对于单机的进程间通信，使用Unix Domain套接字比Inet套接字更好，因为Unix Domain套接字没有网络通信组件，也就是少了很多网络功能，它更加轻量级。实际上，某些语言在某些操作系统平台上实现的管道功能就是通过Unix Domain来实现的，可想而知其高效率。&lt;/p&gt;
&lt;p&gt;Unix Domain套接字有两个文件句柄(例如A、B)，这两个文件句柄都是同时可读、可写的句柄。进程1向A写入数据，将自动推送到B上，进程2可从B上读取从A写入的数据，同理进程2向B中写入数据将自动推送到A上，进程1可从A上读取从B写入的数据。如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;进程1            进程2
------------------------
A   -----------&amp;gt;  B
B   -----------&amp;gt;  A&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在编程语言中，创建Unix Domain Socket自然有对应的函数轻松创建(可&lt;code&gt;man socketpair&lt;/code&gt;)。对于bash shell，可以通过&lt;code&gt;nc&lt;/code&gt;命令(NetCat)来创建，或者干脆使用两个命名管道来实现对应的功能。如有需要，可自行了解如何在bash shell中使用Unix Domain套接字。&lt;/p&gt;
&lt;h3 id=&quot;网络套接字&quot;&gt;网络套接字&lt;/h3&gt;
&lt;p&gt;对于跨网络的进程间通信，需要使用网络套接字。每个网络套接字都由5部分组成，它们称为套接字的5元组。格式如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{protocol, src_addr, src_port, dest_addr, dest_port}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;即协议、源地址、源端口、目标地址、目标端口。&lt;/p&gt;
&lt;p&gt;每端套接字在内核空间都有两个buffer(即一对socket有4个buffer)，每一端都有recv buffer和send buffer。进程1向自己的套接字的send buffer写入数据，将发送到对端的recv buffer中，然后对端的进程2就可以从recv buffer中读取数据，反之亦然。&lt;/p&gt;
&lt;p&gt;但是在真正可以读、写网络套接字之前，网路套接字还需要一些设置。服务端套接字创建(socket()函数，创建后就会有一个文件句柄或文件描述符供读、写操作)后，还要绑定地址(通过bind()函数)和监听端口(通过listen()函数)，客户端则只需要创建套接字后，直接使用connect()函数向服务端套接字发起连接请求即可。&lt;/p&gt;
&lt;p&gt;对于TCP套接字，客户端发起连接请求即表示要和服务端进行三次握手(内核完成，和用户空间进程无关)。将这三次握手的每一次进行细分，第一次客户端发送SYN请求，服务端接收到SYN后，内核将这个连接放进syn queue中并设置状态为syn-recv，然后发送ack+syn给客户端，当接收到客户端回复ack后，内核将连接从syn queue移到established queue（或accept queue）中并将连接的状态标记为established。最后等待用户空间的进程发起accept()系统调用让内核将其从accept queue中移除。被accept()后的连接表示已经建立好的连接，可以真正实现两端进程间的数据传输。&lt;/p&gt;
&lt;p&gt;更多关于TCP套接字的原理，参见我的另一篇文章：&lt;a href=&quot;https://www.cnblogs.com/f-ck-need-u/p/7623252.html&quot;&gt;不可不知的socket和TCP连接过程&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;块设备和字符设备&quot;&gt;块设备和字符设备&lt;/h2&gt;
&lt;p&gt;块设备是硬件设备，通过随机(不一定是顺序)访问固定大小的数据块(chunk)来区分。固定大小的chunk称为块(block)。&lt;strong&gt;最常见的块设备是硬盘&lt;/strong&gt;，但也存在许多其他块设备，如软盘驱动器、蓝光阅读器和闪存。注意，这些都是挂载文件系统的设备，文件系统就像是块设备的通用语言。&lt;/p&gt;
&lt;p&gt;字符设备通过连续的流数据访问，一个字节接着一个字节。&lt;strong&gt;典型的字符设备是终端(终端分多种，由物理的也有虚拟的)和键盘&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区分块设备和字符设备最简单的方法是看数据访问的方式。能随机访问获取数据的是块设备，必须按字节顺序访问的是字符设备&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果可以这里读一点数据，那里读一点数据，最后串成一整段连续的数据，那么这个就是块设备，就像硬盘上的数据是不连续的，有可能需要通过随机访问的方式获取一段数据。比如磁盘上一个稍大一点的文件，可能前10k数据是连续的数据块或在连续的扇区内，之后的10k数据在离它很远甚至在不同的柱面上。&lt;/p&gt;
&lt;p&gt;如果一段数据中的每个字节都跟访问时的字节顺序是一样的，即字节先后顺序从访问获取时到最后处理数据的过程中都是完全一致的，那么这个就是字符设备。换句话说，字符设备可以看作是流设备。就像键盘输入数据一样，连续敲两个字键，这两个键对应的字节数据在被接收的时候一定是先敲的在前面，后敲的在后面。同理终端设备也是以一样的，程序将数据输出到终端时，程序先输出字母a再输出数字3，那么显示在终端上时一定是a在前，3在后。&lt;/p&gt;
</description>
<pubDate>Mon, 25 Feb 2019 06:14:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<og:description>在Linux系统下，有七类文件类型： 普通文件( ) 目录(d) 软链接(字符链接L) 套接字文件(S) 字符设备(S) 块设备(B) 管道文件(命名管道P) 普通文件、目录、软链接无需多解释。 管道</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/10430642.html</dc:identifier>
</item>
<item>
<title>asp.net core系列 31 EF管理数据库架构--必备知识 反向工程 - 花阴偷移</title>
<link>http://www.cnblogs.com/MrHSR/p/10425437.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MrHSR/p/10425437.html</guid>
<description>&lt;h3&gt;一.   反向工程&lt;/h3&gt;
&lt;p&gt;　　反向工程是基于数据库架构，生成的实体类和DbContext类代码的过程，对于Visual Studio开发，建议使用PMC。对于其他开发环境，请选择.NET Core CLI工具(跨平台)。&lt;/p&gt;
&lt;p&gt;　　　　(1) 在程序包管理器控制台(PMC)工具中使用命令Scaffold-DbContext 来进行反向工程。&lt;/p&gt;
&lt;p&gt;　　　　(2) 在.NET 命令行接口 (CLI) 工具中使用dotnet ef dbcontext scaffold命令来进行反向工程。&lt;/p&gt;

&lt;p&gt; 　&lt;strong&gt;　1.1 &lt;code&gt;Scaffold-DbContext&lt;/code&gt;&lt;code&gt;介绍&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　&lt;/strong&gt;　使用Scaffold-DbContext命令生成实体类型时，数据库表必须具有主键，没有主键的表不会被反向工程。下面是PMC下的参数表格介绍，对于CLI的scaffold参数介绍&lt;a href=&quot;https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet#dotnet-ef-dbcontext-scaffold&quot; target=&quot;_blank&quot;&gt;参考官网&lt;/a&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; align=&quot;center&quot;&gt;&lt;tbody readability=&quot;10.5&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;172&quot;&gt;
&lt;p&gt;       &lt;strong&gt;  参数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;372&quot;&gt;
&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;172&quot;&gt;-Connection &amp;lt;String&amp;gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;372&quot;&gt;数据库的连接字符串。该参数，是必需的。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;172&quot;&gt;-Provider &amp;lt;String&amp;gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;372&quot;&gt;要使用的提供程序。通常，这是NuGet包的名称，例如：&lt;code&gt;Microsoft.EntityFrameworkCore.SqlServer&lt;/code&gt;。该参数，是必需的。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;172&quot;&gt;-OutputDir &amp;lt;String&amp;gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;372&quot;&gt;放入文件的目录。路径是相对于项目目录的。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;172&quot;&gt;-ContextDir &amp;lt;String&amp;gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;372&quot;&gt;放置&lt;code&gt;DbContext&lt;/code&gt;文件的目录。路径是相对于项目目录的。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;172&quot;&gt;-Context &amp;lt;String&amp;gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;372&quot;&gt;&lt;code&gt;DbContext&lt;/code&gt;要生成的类的名称。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;172&quot;&gt;-Schemas &amp;lt;String []&amp;gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;372&quot;&gt;用于生成实体类型的表的架构。如果省略此参数，则包括所有架构。例如在sqlserver上默认dbo架构&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;172&quot;&gt;-Tables &amp;lt;String []&amp;gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;372&quot;&gt;用于生成实体类型的表。如果省略此参数，则包括所有表。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;172&quot;&gt;-DataAnnotations&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;372&quot;&gt;使用属性配置模型（如果可能）。如果省略此参数，则仅使用fluent API。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;172&quot;&gt;
&lt;p&gt;-UseDatabaseNames&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;372&quot;&gt;使用与数据库中显示的完全相同的表和列名称。如果省略此参数，则更改数据库名称以更符合C＃名称样式约定。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;172&quot;&gt;-Force&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;372&quot;&gt;覆盖现有文件&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;二. 命令参数详解&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;2.1 必备参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　-Connection &amp;lt;String&amp;gt;是第一个参数是数据库的连接字符串。 工具将使用此连接字符串来读取数据库架构。-Provider &amp;lt;String&amp;gt;是提供程序名称。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　//&lt;/span&gt;&lt;span&gt; PowerShell&lt;/span&gt;
　　　　Scaffold-DbContext &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=Chinook&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  Microsoft.EntityFrameworkCore.SqlServer

　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; dotnet&lt;/span&gt;
　　　　dotnet ef dbcontext scaffold &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=Chinook&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Microsoft.EntityFrameworkCore.SqlServer
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt; 　　2.2 指定表和架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;默认情况下，数据库架构中的所有表都被反向工程到实体类型，可以限制哪些表是反向工程，处理通过指定架构和表。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;　　　　　　-Schemas&lt;/code&gt;在 PMC 中的参数和&lt;code&gt;—schema&lt;/code&gt; CLI 中的选项可用于包含在架构中的每个表。    &lt;/p&gt;
&lt;p&gt;　　　　　　&lt;code&gt;-Tables&lt;/code&gt; (PMC) 和&lt;code&gt;--table&lt;/code&gt;(CLI) 可用于包括特定的表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;若要在 PMC 中包含多个表，使用一个数组。若要在 CLI 中包含多个表，请多次指定选项。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　//&lt;/span&gt;&lt;span&gt; PowerShell&lt;/span&gt;
　　　　Scaffold-DbContext ... -&lt;span&gt;Tables Blog, Post

　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; dotnet&lt;/span&gt;
　　　　dotnet ef dbcontext scaffold ... --table Blog --table Post
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;　　2.3 &lt;span data-ttu-id=&quot;5b528-128&quot;&gt;保留名称&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　       默认情况下，数据库的表名称和列名称是固定的，以便更好地匹配实体名称和属性名称的.NET命名约定。在PMC中指定 &lt;code&gt;-UseDatabaseNames&lt;/code&gt;或在CLI中指定 &lt;code&gt;--use-database-names&lt;/code&gt;&lt;code&gt;，&lt;/code&gt;使数据模型中的实体名称和属性名称与数据库中显示的的表和列名称完全相同。如果省略此参数，则可能会更改名称以更符合C＃命名约定。&lt;/p&gt;

&lt;p&gt;&lt;span data-ttu-id=&quot;5b528-128&quot;&gt;　&lt;strong&gt;　2.4 &lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;Fluent API 或数据注释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　　　默认情况下，使用&lt;span lang=&quot;EN-US&quot;&gt;Fluent API配置实体类型。在&lt;span lang=&quot;EN-US&quot;&gt;PMC&lt;code&gt;中指定&lt;/code&gt;&lt;code&gt;&lt;span lang=&quot;EN-US&quot;&gt;-DataAnnotations&lt;/span&gt;&lt;/code&gt;或在&lt;span lang=&quot;EN-US&quot;&gt;CLI中指定 &lt;code&gt;&lt;span lang=&quot;EN-US&quot;&gt;--data-annotations&lt;/span&gt;&lt;/code&gt;的情况下使用数据注释。下面二个代码块， 一个是使用&lt;span lang=&quot;EN-US&quot;&gt;Fluent API配置的，一个是使用数据注释，二者实现功能上一样。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Fluent API配置&lt;/span&gt;
        entity.Property(e =&amp;gt;&lt;span&gt; e.Title)
            .IsRequired()
        .HasMaxLength(&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;&lt;span&gt;);

         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据注释&lt;/span&gt;
&lt;span&gt;        [Required]
        [StringLength(&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Title { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;strong&gt;2.5 DbContext 名称 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　　　默认情况下，DbContext 上下文名称是（数据库名+ Context后缀）&lt;em&gt;。&lt;/em&gt; 若要自定义一个DbContext 上下文名称，在PMC中指定 &lt;code&gt;-Context&lt;/code&gt;或在CLI中指定&lt;code&gt;--context&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;2.6 目录和命名空间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　　　默认情况下，实体类和DbContext类被搭建到项目的根目录中，并使用项目的默认命名空间。在PMC中指定&lt;code&gt;-OutputDir&lt;/code&gt;或在CLI中指定&lt;code&gt;--output-dir&lt;/code&gt;&lt;code&gt;将&lt;/code&gt;指定目录。命名空间将是根命名称+子目录的名称。&lt;/p&gt;
&lt;p&gt;              下面使用&lt;code&gt;-ContextDir&lt;/code&gt;(PMC) 和&lt;code&gt;--context-dir&lt;/code&gt;(CLI) 来创建到一个单独的目录（Models），存放实体类和DbContext 类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; PowerShell&lt;/span&gt;
        Scaffold-DbContext ... -ContextDir Data -&lt;span&gt;OutputDir Models&lt;br/&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; dotnet&lt;/span&gt;
         dotnet ef dbcontext scaffold ... --context-dir Data --output-dir Models
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　&lt;strong&gt;　2.7 更新模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　当更改数据库后，可能需要更新EF Core模型以反映这些更改。如果数据库更改很简单，则最简单的方法是手动对EF Core模型进行更改。例如，重命名表或列，删除列或更新列的类型是在代码中进行的微不足道的更改。如果，数据库更改动作大。一个常见的工作流程是使用&lt;code&gt;-Force&lt;/code&gt;（PMC）或&lt;code&gt;--force&lt;/code&gt;（CLI）再次从数据库对模型进行反向工程，以使用更新的模型覆盖现有模型。&lt;/p&gt;

&lt;h3&gt;三.演示&lt;/h3&gt;
&lt;p&gt; 　　&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.1 初始化反向工程&lt;/span&gt;　　&lt;/strong&gt;　　&lt;/p&gt;
&lt;p&gt;　　　　下面来演示一下，关于准备工作和反向工程注意事项这里不在说明，请参考“&lt;span lang=&quot;EN-US&quot;&gt;asp.net core 系列 &lt;span lang=&quot;EN-US&quot;&gt;21 EF现有数据库进行反向工程”。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　本篇使用Visual Studio开发,使用Package Manager Console工具来进行反向工程管理，用PowerShell脚本，并附带上跨平台管理 的dotnet命令，基于EFGetStarted.AspNetCore.NewDb数据库，包括：Blogs和Posts表来演示反向工程。如下图所示：&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/151560/201902/151560-20190225112000777-1733452894.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
PM&amp;gt; Scaffold-DbContext   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Data Source ={ip};Initial Catalog = EFGetStarted.AspNetCore.NewDb; User ID = hsr;Password =js*2015;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Microsoft.EntityFrameworkCore.SqlServer &lt;br/&gt;-OutputDir Models   -Tables Blogs -Context ReverseDbContext  -DataAnnotations  -UseDatabaseNames
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　上面的一串命令参数中，除了数据库的连接字符串、使用的提供程序、放入文件的目录，其它参数都是可选的。 命令执行成功后，将把DbContext 上下文和实体类(Blogs)存放到Models文件夹中。  使用了 -Context自定义DbContext 上下文、-DataAnnotations数据注释代替Fluent API配置、 -UseDatabaseNames与数据库中显示的的表和列名称完全相同。&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/151560/201902/151560-20190225112059089-1093405969.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　&lt;strong&gt;3.2 更新模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　下面将Blogs表的Url字段类型长度从Max改为400,新增了Address字段，使用&lt;code&gt;-Force&lt;/code&gt;&lt;code&gt;来覆盖现有文件。命令成功后，查看&lt;/code&gt;&lt;code&gt;Blogs&lt;/code&gt;&lt;code&gt;实体。&lt;/code&gt;　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
PM&amp;gt; Scaffold-DbContext   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Data Source =172.168.16.75;Initial Catalog = EFGetStarted.AspNetCore.NewDb; User ID = hsr;Password =js*2015;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Microsoft.EntityFrameworkCore.SqlServer   &lt;br/&gt;-OutputDir Models   -Tables Blogs -Context ReverseDbContext  -DataAnnotations  -UseDatabaseNames  -Force
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/151560/201902/151560-20190225112145554-934422572.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;四. 其它说明&lt;/h3&gt;
&lt;p&gt; 　　&lt;strong&gt;4.1 反向工程工作原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;                  (1) 反向工程开始时读取数据库架构。 它将读取有关表、 列、 约束和索引的信息。&lt;/p&gt;
&lt;p&gt;                  (2) 接下来，它使用的架构信息创建 EF Core 模型。 使用表来创建实体类型;使用列来创建属性;和外键用于创建关系。&lt;/p&gt;
&lt;p&gt;                  (3) 最后，该模型用于生成代码。 相应的实体类型的类、 Fluent API 和数据批注已搭建基架以重新创建相同的模型从您的应用程序中。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;4.2 反向工程哪些不起作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　(1) 并非所有关于模型的内容都可以使用数据库架构来表示。 例如：有关继承层次结构，拥有类型，表拆分等不存在于数据库架构中。 因此，这些构造将永远不能反向工程处理。&lt;/p&gt;
&lt;p&gt;此外，EF Core提供程序可能不支持某些列类型。这些列不会包含在模型中。&lt;/p&gt;
&lt;p&gt;　　　　(2) EF Core需要每个实体类型有一个主键。  表没有主键是会反向工程。&lt;/p&gt;
&lt;p&gt;　　　　(3) 您可以定义并发标记EF Core 模型以防止两个用户在同一时间更新同一实体中。 有些数据库可以代替这种并发冲突，例如SQL Server 中的行版本控制。但是这也不能反向工程处理。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;4.3 反向工程自定义模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　　　EF Core生成的代码可随意改变它。只有再次对同一模型进行反向工程时，才会重新生成它。Scaffold代码代表一个可用于访问数据库的模型，但它肯定不是唯一可以使用的模型。&lt;/p&gt;
&lt;p&gt;　　　　可以自定义实体类和DbContext类以满足您的需要。例如，可以选择重命名类型和属性，引入继承层次结构或将表拆分为多个实体。您还可以从模型中删除非唯一索引，未使用的序列和导航属性，可选标量属性和约束名称。还可以在单独的文件中使用另一个partial 类添加其他构造函数，方法，属性等。即使您打算再次对模型进行逆向工程，这种方法仍然有效。&lt;/p&gt;

&lt;p&gt;　　参考文献&lt;/p&gt;
&lt;p&gt;　　　　　&lt;a href=&quot;https://docs.microsoft.com/zh-cn/ef/core/managing-schemas/scaffolding&quot; target=&quot;_blank&quot;&gt;EF反向工程&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 25 Feb 2019 05:57:00 +0000</pubDate>
<dc:creator>花阴偷移</dc:creator>
<og:description>一. 反向工程 反向工程是基于数据库架构，生成的实体类和DbContext类代码的过程，对于Visual Studio开发，建议使用PMC。对于其他开发环境，请选择.NET Core CLI工具(跨平</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MrHSR/p/10425437.html</dc:identifier>
</item>
<item>
<title>大数据技术 - 学习之路（一） - 渡码</title>
<link>http://www.cnblogs.com/duma/p/10428700.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/duma/p/10428700.html</guid>
<description>&lt;h2&gt;缘起&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;大学的时候，记得班里好多同学学习Android、iOS开发，那时候客户端开发非常火，并且工作后工资也很高。但是我并没有心动，我觉得这么多人去学并不一定是件好事，很可能跟网站开发一样，一段时间市场饱和后就不会有那么大的需求量，现在看来这个判断是正确的。我想学习一门技术现在处于起步期，但是未来比较长的一段时间里发展前景比较好。那个时候是大四，正在跟同学做一个小创业项目，我在里面负责网站方面的建设，没事的时候经常上网，偶然发现大数据相关的文章。我觉得这可能是个新方向，移动互联网时代，我们上网的频率更高，时间更长，会有更多的数据产生，从而需要大数据技术做存储和计算。自从那以后就开始找大数据相关的资料，然后知道有 Hadoop 这么个东西，刚开始在网上找了几节入门级的免费视频，看完之后还是云里雾里，对大数据技术没有任何感知。并且那个时候（14年）大数据方面的工作机会比较小，小公司基本没有相关的技术，我还担心学了之后不好找工作。为了避免翻车，就买了付费的视频开始学习。每天睁开眼就开始学，一直学到半夜12点。坚持了俩月，最后找了大数据岗位的实习工作，算是正式上车了。到目前为止从事大数据相关的工作已经快4年了，技术方面接触了 Flume、Kafka、Hadoop、Spark、Hbase、Hive、Kylin 等框架，业务方面接触过定位数据、视频数据、搜索数据。觉得在大数据方面有一些积累，因此想做一个大数据技术方面的教程，供初学者参考。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;学习路线&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;现在关于大数据入门教程很多，如果时间比较充裕可以找一套视频慢慢跟着学，毕竟听别人讲比自己看书学的要快。现在比较知名的一些培训网站应该都有免费的入门视频，可以找找看。如果没有大块的时候，可以看书或者看博客。学习大数据一般是先学 Hadoop，Hadoop在大数据领域的地位就不用在强调了。有些人可能会说是不是 Hadoop 已经过时了，其实并没有。一方面，Hive、Kylin等框架计算层面对 Hadoop 有依赖，并且 Spark 等新兴的框架也是基于Hadoop 的思想；另一方面，目前不少企业数据存储用的是 HDFS，数据处理仍然用 MapReduce，对于一些实时性要求不高的任务，MapReduce跑起来还是很稳的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;学习Hadoop 核心在于学习分布式存储和计算。学习大数据技术一个比较高的门槛就是要理解分布式。以前我们写的程序都是单机的，最多也就是个多线程。但大数据框架都是分布式的，需要学习数据如何分布式存储、如何保证可靠、机器之间如何通信、数据如何分散到不同的机器计算等，这是思维方式的转变。初学者可以在网上先找一些评论比较高的入门资料，也可以跟着本教程学习，先整体理解分布式的概念。有了点基础之后再学习《Hadoop权威指南》，学完之后基本上对Hadoop框架有了深入理解，能够熟练的写 MapReduce 做数据处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;掌握 Hadoop 之后，再往下走有两个方向。一个方向是做实时计算，需要学习 Spark 和 Flink 等框架，这两个框架都是批流统一分布式计算框架。Spark 目前比较主流，社区也比较完善，但是开发语言用 Scala，并且分布式计算的思想在 Hadoop 之上又抽象了许多概念，因此入门有些门槛，一旦入门口后再开发就很顺手了。Spark的书可以看看《Spark技术内幕》。Flink 之前生态不如 Spark，但最近阿里将 Blink 贡献给 Flink 社区，相信以后 Flink 的发展会更好，社区会更强大。Flink 做更适合做硬实时的计算。&lt;/span&gt;&lt;span&gt;另一个方向就是数据仓库建设，用到 Hive、Kylin 等框架。基本上每个公司都有数仓建设团队，Hive 适合离线大数据计算，使用SQL语言开发。SQL语言门槛比较低，所有有些公司会培养业务人员或者产品经理写SQL，而程序员更专注数仓的建设。Kylin主要是满足交互式查询，适合做多维分析。多维分析的框架除了Kylin还有很多，大家可以自行上网查阅对比。这个方向更加侧重数据建模，相关的的书推荐《Hive权威指南》、《维度建模工具箱》、《阿里巴巴大数据之路》。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;工具以及技术掌握熟练之后，再往下走就是数据分析。数据最终是要提供决策，所以，数据分析的能力很重要。如果只是写个SQL、跑个数，长期下去并不利于我们的成长。我们要经常对数据作分析，培养数据的敏感度，能够通过数据对产品提出指导意见。这个过程可能会用到数据挖掘相关的技术。做大数据相关的工作跟其他的程序员还是有比较大的区别。 一方面我们能够掌握所有的数据，另一方面我们可以通过数据分析指导决策。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本章剩下的部分就从搭建 Hadoop 集群开始，学习 Hadoop 技术。搭建 Hadoop 集群一般用 Cloudera Manager 或者 HortonWorks，搭建起来很容易。我在之前的公司是用 Cloudera Manager 搭建 Hadoop 集群，并且公司经常需要到客户的服务器单独部署大数据计算服务，因此对 Cloudera 那套东西非常熟。熟到什么程度呢，通过搭建本地 Http 服务，基本上10分钟左右就能搭建一个集群。但我们现在是在学习 Hadoop 技术，所以还是自己亲子搭建集群更利于我们学习。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;准备&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;至少得是一台 8G 内存的电脑，我们做开发 CPU 基本上差不到哪儿去。安装VMware或者VirtualBox，搭建三台虚拟机。我的电脑 16G 内存，三台虚拟机配置如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
操作系统：Centos 7.3 64位&lt;span&gt;
内存：1GB
硬盘： 40G
CPU：1核
主机名与IP对应关系
&lt;/span&gt;192.168.29.132&lt;span&gt; hadoop0
&lt;/span&gt;192.168.29.133&lt;span&gt; hadoop1
&lt;/span&gt;192.168.29.134 hadoop2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;下载 JDK 和 稳定版的 Hadoop，我用JDK8 + Hadoop 2.9.2，对应的文件名为 jdk-8u151-linux-x64.tar.gz hadoop-2.9.2.tar.gz。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;配置hosts&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;首先，需要给每个虚拟机设置 hostname&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
hostnamectl set-hostname hadoop0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在 /etc/hosts文件中加入三台主机的IP和hostname的对应关系&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
192.168.29.132&lt;span&gt; hadoop0
&lt;/span&gt;192.168.29.133&lt;span&gt; hadoop1
&lt;/span&gt;192.168.29.134 hadoop2
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;关闭防火墙&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;打开防火墙不方便机器之前的通信，并且公司的 Hadoop 集群一般是再内网搭建，所以可以关闭防火墙。需要在这三台主机执行以下命令&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;systemctl stop firewalld.service    #关闭防火墙
systemctl disable firewalld.service #禁止开启启动&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;设置SSH免密码登录&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;我们可能需要在一台机器上启动集群其他主机的服务，就需要SSH登录到其他主机，这时候设置SSH免密码登录会比较方面。在三台机器上执行以下命令&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
ssh-keygen -t rsa
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;执行完毕后，会在 ~/.ssh 目录里发现 id_rsa.pub 文件。在主机 hadoop0 中执行以下命令&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;执行后，将其他两台主机的 ~/.ssh/id_rsa.pub 文件中的内容复制到 hadoop0 的 ~/.ssh/authorized_keys 文件中，然后执行以下命令&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
scp ~/.ssh/authorized_keys hadoop1:~/&lt;span&gt;.ssh
scp &lt;/span&gt;~/.ssh/authorized_keys hadoop2:~/.ssh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这样便可以实现在任意一台机器都可以通过SSH免密码登录到其他两台机器。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;安装JDK&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在三台主机中都要安装JDK，安装JDK直接解压 tar.gz 文件即可。将解压后的目录配置到环境变量中，环境变量可以在 /etc/profile 文件中配置，内容如下&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# /etc/profile
JAVA_HOME&lt;/span&gt;=/work/software/jdk1.8.0_151&lt;span&gt;
export PATH&lt;/span&gt;=$JAVA_HOME/bin:$PATH
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;修改文件后，直接 source /etc/profile 使配置生效，再通过 java -version 命令验证配置是否正确。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;安装并配置 Hadoop&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;安装 Hadoop 在 hadoop0 一台机器操作即可，安装 Hadoop 也是解压 tar.gz 文件，同时在 /etc/profile 中配置 HADOOP_HOME，文件内容如下&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# /etc/profile
JAVA_HOME&lt;/span&gt;=/work/software/jdk1.8.0_151&lt;span&gt;
HADOOP_HOME&lt;/span&gt;=/work/software/hadoop-2.9.2&lt;span&gt;
export PATH&lt;/span&gt;=$JAVA_HOME/bin:$HADOOP_HOME/bin:$PATH
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Hadoop的配置主要包括 hadoop-env.sh、core-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml 、slaves 文件。这些文件在 Hadoop 解压目录中 etc/hadoop 目录里。在进行配置之前，先简单看一下 hadoop 框架中几个组件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;HDFS NameNode：数据存储主节点，管理文件系统和命名空间，一般1个，可以两个做高可用
HDFS DataNode：数据存储从节点，主要是用来存储数据，一般跟集群机器节点个数一样
ResourceManager：资源管理的节点，接受任务并分配资源，一般1个，也可以2个做高可用
NodeManager：运行任务的容器，一般跟DataNode节点在一起
JobHistoryServer：管理历史任务&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;了解基本概念后， 接下来看看具体的配置。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;hadoop-env.sh&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;主要设置 JAVA_HOME，打开 hadoop-env.sh 文件，找到 JAVA_HOME 的赋值语句，修改如下&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
export JAVA_HOME=/work/software/jdk1.8.0_151
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;core-site.xml&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置hdfs namenode节点&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;fs.defaultFS&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hdfs://hadoop0:9000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;hdfs-site.xml&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;NameNode namespace等信息存储路径&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.namenode.name.dir&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/data/dfs/name&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;DataNode 存储数据的路径，需要在本地建立/data/dfs目录 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.datanode.data.dir&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/data/dfs/data&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置secondarynamnode节点&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.namenode.secondary.http-address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop1:50090&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;yarn-site.xml&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置resourcemanager节点&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.hostname&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;mapred-site.xml&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置资源管理框架&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mapreduce.framework.name&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置 jobhistory 节点&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mapreduce.jobhistory.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop2:10020&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mapreduce.jobhistory.webapp.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop2:19888&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;slaves&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;hadoop0
hadoop1
hadoop2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;配置完毕后，将 hadoop-2.9.2 目录，复制到另外两台机器中， 并配置这两台机器的 HADOOP_HOME，并建立 DataNode 存储数据的目录 /data/dfs&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
scp -r /work/software/hadoop-2.9.2&lt;span&gt; hadoop1:/work/software
scp -r /work/software/hadoop-&lt;/span&gt;2.9.2 hadoop2:/work/software
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;启动集群&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在主机 hadoop0 中，进入 /work/software/hadoop-2.9.2 目录中，执行以下命令&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;./sbin/start-dfs.sh
./sbin/start-yarn.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可以看到命令执行过程中打印的日志，会根据 slaves 文件到其他的机器启动相应的进程。可以在每台机器执行 jps 命令，看看启动了哪些进程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在 hadoop2 机器中，启动 jobhistoryserver 进程，同样进入到 /work/software/hadoop-2.9.2，执行以下命令&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./sbin/mr-jobhistory-daemon.sh --config etc/hadoop start historyserver
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;验证集群&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;可以通过 jps 命令，看看集群中的每台机器是不是启动了相应的服务。同时，可以通过web界面查看集群的状态以及配置，可以在物理机访问以下页面，需要在物理机配置hosts，否则需要用 IP 地址访问&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
NameNode web页面：　　　　　　　　hadoop0:50070&lt;span&gt;
ResourceManager web页面： 　　  hadoop0:&lt;/span&gt;8088&lt;span&gt;
HistoryServer web页面： 　　　　 hadoop2:&lt;/span&gt;19888
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;这篇文章主要介绍了大数据一些基本概念， 学习路线，最后动手搭建了 Hadoop 集群，希望能够对初学的同学有帮助。后续讲解 Hadoop 技术框架的细节。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 25 Feb 2019 05:49:00 +0000</pubDate>
<dc:creator>渡码</dc:creator>
<og:description>缘起 大学的时候，记得班里好多同学学习Android、iOS开发，那时候客户端开发非常火，并且工作后工资也很高。但是我并没有心动，我觉得这么多人去学并不一定是件好事，很可能跟网站开发一样，一段时间市场</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/duma/p/10428700.html</dc:identifier>
</item>
<item>
<title>[算法xio讲堂]点分治 - chhokmah</title>
<link>http://www.cnblogs.com/chhokmah/p/10430418.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chhokmah/p/10430418.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/02/25/k5QNvD.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;点分治&quot;&gt;点分治&lt;/h2&gt;
&lt;p&gt;感觉点分治不怎么难&lt;del&gt;可能是我太弱了&lt;/del&gt;，算了。不BB了。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;定义&quot;&gt;定义&lt;/h2&gt;
&lt;p&gt;所谓点分治，就是基于点来做分治。而分治是分而治之的意思，比如说我们有一群范围非常大的的问题，但是这些问题都有一些相似的特性，那么我们就按照这个特性来分掉这些问题，然后对于每一个问题都按照相似的处理方式，得到最小的答案，然后将小的答案按照某种方式算出整个问题的答案。像这种求解的方法就叫做分治。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;&lt;strong&gt;其实沃认为点分治更像是一种高级暴力（逃跑）&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;回归正题，那么在一棵树上也是同一个道理，将一棵树分成一棵棵的小树，然后对每一棵树进行操作。&lt;/p&gt;
&lt;p&gt;那么像这种方法求解树上的问题，一般都能至少降低一个&lt;span class=&quot;math inline&quot;&gt;\(log\)&lt;/span&gt;级别的复杂度，但是更多的都是将复杂度从&lt;span class=&quot;math inline&quot;&gt;\(O(n^3)\)&lt;/span&gt;降到&lt;span class=&quot;math inline&quot;&gt;\(O(n^2)\)&lt;/span&gt;，这样我们的程序就会避免遍历一些重复的状态，从而减少运算的次数。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;原理基于重心的分割&quot;&gt;原理（基于重心的分割）&lt;/h2&gt;
&lt;p&gt;首先点分治作为一种高效&lt;del&gt;搞笑&lt;/del&gt;算法，需要全面的考虑任何的退化情况。对于树上的特殊情况有三种：菊花图，链，和菊花链，这三种情况最有可能会让树上的算法退化时间复杂度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/02/25/k5Q68f.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/02/25/k5QgxS.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是对于点分治来说还是链的影响更大一点，那么我们想一下如何将分治掉这条链。&lt;/p&gt;
&lt;p&gt;非常明显，将这条链二分比较的好，但是对于一般的问题我们又应该怎么平均分呢？&lt;/p&gt;
&lt;p&gt;这个时候我们引入一个新的概念叫做&lt;strong&gt;重心&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所谓&lt;strong&gt;重心&lt;/strong&gt;，就是在这棵树中最重的地方，准确的定义是：最大的子树后辈节点个数最少的节点叫做重心。&lt;/p&gt;
&lt;p&gt;为什么要引入这个概念，因为树的重心能把一棵树尽可能地平均分配。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(ps.\)&lt;/span&gt;重心有一个比较神奇的性质：每一个子树的大小都不超过n/2&lt;/p&gt;
&lt;h3 id=&quot;关于重心性质的证明&quot;&gt;关于重心性质的证明&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1442599/201808/1442599-20180816201807961-11407560.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;考虑有如上这么一棵树，其中&lt;span class=&quot;math inline&quot;&gt;\(u\)&lt;/span&gt;是重心，&lt;span class=&quot;math inline&quot;&gt;\(son[u]\)&lt;/span&gt;表示&lt;span class=&quot;math inline&quot;&gt;\(u\)&lt;/span&gt;点的最大的子树的大小，&lt;span class=&quot;math inline&quot;&gt;\(v\)&lt;/span&gt;是点&lt;span class=&quot;math inline&quot;&gt;\(u\)&lt;/span&gt;的最大子树，且&lt;span class=&quot;math inline&quot;&gt;\(size[v]&amp;gt;\frac{size[u]}{2}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;因为&lt;span class=&quot;math inline&quot;&gt;\(size[v]&amp;gt;\frac{size[u]}{2}\)&lt;/span&gt;，其他子树加上点&lt;span class=&quot;math inline&quot;&gt;\(u\)&lt;/span&gt;的节点数小于&lt;span class=&quot;math inline&quot;&gt;\(\frac{size[u]}{2}\)&lt;/span&gt;，那么不难发现，我们选择点&lt;span class=&quot;math inline&quot;&gt;\(v\)&lt;/span&gt;作为重心，&lt;span class=&quot;math inline&quot;&gt;\(son[v]=size[v]−1&amp;lt;son[u]\)&lt;/span&gt;，那么很明显&lt;span class=&quot;math inline&quot;&gt;\(u\)&lt;/span&gt;不满足重心的定义。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;举一个例子：（(●'◡'●)）&lt;br/&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/02/25/k51tne.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;像这棵树的重心就是&lt;span class=&quot;math inline&quot;&gt;\(4\)&lt;/span&gt;号点，这棵树中&lt;span class=&quot;math inline&quot;&gt;\(4\)&lt;/span&gt;号点最大子树后辈节点个数为&lt;span class=&quot;math inline&quot;&gt;\(11\)&lt;/span&gt;，是整棵树上的所有节点中最小。也说明了这个节点能尽可能平均地分割这棵树。&lt;/p&gt;
&lt;h3 id=&quot;求解重心的代码&quot;&gt;求解重心的代码&lt;/h3&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;void getroot(int u,int fa){
    sz[u]=1; mxs[u]=0;//sz数组是子树的节点个数，mxs是maxson的缩写，表示的是最大的子树的节点数
    for(int e=H[u];e;e=E[e].nt){//前向型的遍历方式
        int v=E[e].to;
        if (v==fa) continue;//如果遇到了父亲那么就跳过
        getroot(v,u);//向下递归求解
        sz[u]+=sz[v];
        mxs[u]=max(mxs[u],sz[v]);//计算mxs
    }
    mxs[u]=max(mxs[u],sum-sz[u]);//这是另外一半的树，这也是这棵树的子树（整棵树被当作了无根树）
    if(mxs[u]&amp;lt;mxs[rt]||rt==0) rt=u;//判断是不是重心
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;有位大佬的博客上写了一些不同的看法：&lt;a href=&quot;http://liu-cheng-ao.blog.uoj.ac/blog/2969&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;分而治之的治操作&quot;&gt;“分而治之”的“治”操作&lt;/h2&gt;
&lt;p&gt;这个比较难讲清楚，我尝试一点一点来将问题讲清楚。&lt;/p&gt;
&lt;p&gt;我先贴出一个&lt;del&gt;伪代码&lt;/del&gt;，让大家了解一下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void divide
    计算当前全局的答案
    记录访问节点
    枚举子节点{
        如果访问过就跳过
        将局部重复解减去
        递归搜索子树重心
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;首先对于点分治的答案计算需要一点容斥原理的知识，我们以某谷的模板题为例：&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3806&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;void solve(int u){
    calc(u,1,0);//计算答案
    vis[u]=1;//标记已经访问过了
    for(int e=H[u];e;e=E[e].nt){
        int v=E[e].to;
        if(vis[v]) continue;//如果已经访问过了就不用访问了，也起到了不算父亲的情况
        calc(v,0,E[e].w);//容斥原理减去所有重复的状态
        MX=inf; sum=sz[v]; rt=0; getroot(v,-1);//算出子树的重心
        solve(rt);//递归求解
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一次看到别人blog的时候，我也是非常懵逼的？但是理解起来还是比较简单的，其核心是容斥原理：在扯一点题外话：所谓容斥原理就是在计算问题是有重复的部分，我们先将所有的部分全部都算出来，这样在将多出来的重复部分减去，保证答案的正确性。&lt;/p&gt;
&lt;p&gt;那么对于树上点分治有什么需要容斥原理的地方，很明显：假设我们要计算的答案是&lt;span class=&quot;math inline&quot;&gt;\(ans1=getans(rt-&amp;gt;u-&amp;gt;v1)\)&lt;/span&gt;，那么也会算出&lt;span class=&quot;math inline&quot;&gt;\(ans2=getans(rt-&amp;gt;u-&amp;gt;v2)\)&lt;/span&gt;，其中的&lt;span class=&quot;math inline&quot;&gt;\(v1\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(v2\)&lt;/span&gt;都是&lt;span class=&quot;math inline&quot;&gt;\(u\)&lt;/span&gt;的儿子，因为要保证答案的正确性，那么我们一定是要将&lt;span class=&quot;math inline&quot;&gt;\(ans1\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(ans2\)&lt;/span&gt;加起来，或者是其他的整合操作，但是这个时候我们需要考虑一个问题，整合时候&lt;span class=&quot;math inline&quot;&gt;\(rt-&amp;gt;u\)&lt;/span&gt;这一部分的答案是不是算了两边，也就是容斥原理中所说的重复部分。有人会问：为什么会重复？这个不是树上的操作？不是一般都不会有重复的吗？不然&lt;span class=&quot;math inline&quot;&gt;\(dfs\)&lt;/span&gt;暴力求解怎么做？有人这样问我。请在看一下我们的程序框架，我们是算出答案后在计算分治求解接下去的答案。&lt;/p&gt;
&lt;p&gt;那么为什么不能先递归下层节点，在计算答案？因为下层的答案是由上层的答案求出的，这和其他的树上操作有一点不一样，不然求出的答案就会只有部分解。&lt;/p&gt;
&lt;p&gt;那么回归正题，我们来举一个例子更生动地理解一下，再次清楚我们的的图片君，😊(●'◡'●)&lt;br/&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/02/25/k51tne.png&quot;/&gt;&lt;br/&gt;假设假设假设（先不管重心君），我们求&lt;span class=&quot;math inline&quot;&gt;\(1-2-4\)&lt;/span&gt;的答案，那么是不是又要求解&lt;span class=&quot;math inline&quot;&gt;\(1-2-5\)&lt;/span&gt;的答案，那么将两个答案整合后，就hi将&lt;span class=&quot;math inline&quot;&gt;\(1-2\)&lt;/span&gt;这一部分的答案计算两遍，那么我们就要减去这个重复的部分。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(Chhokmah\)&lt;/span&gt;（叹了一口气）：终于差不多讲完了，接下来就是题目。。。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;习题&quot;&gt;习题&lt;/h2&gt;
&lt;h3 id=&quot;洛谷模板3806&quot;&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3806&quot;&gt;洛谷模板3806&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;题目描述&lt;/h4&gt;
&lt;p&gt;给定一棵有n个点的树，询问树上距离为k的点对是否存在。&lt;/p&gt;
&lt;h4 id=&quot;解法&quot;&gt;解法&lt;/h4&gt;
&lt;p&gt;一次分治就将所有的答案都算出来，这也是可以做到的。&lt;br/&gt;上文已经讲的非常清楚了。&lt;/p&gt;
&lt;h4 id=&quot;ac代码&quot;&gt;ac代码&lt;/h4&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;#include&amp;lt;bits/stdc++.h&amp;gt;
#define N 100005
#define inf 0x3f3f3f3f
using namespace std;
struct edge{
    int to,nt,w;
}E[N&amp;lt;&amp;lt;1];
int H[N],ans[10000005],sz[N],mxs[N],S,vis[N],dis[N];
int n,m,sum,cnt,tot,rt,MX;
int read(){
    int w=0,x=0;char ch=0;
    while(!isdigit(ch))w|=ch=='-',ch=getchar();
    while(isdigit(ch))x=(x&amp;lt;&amp;lt;1)+(x&amp;lt;&amp;lt;3)+(ch^48),ch=getchar();
    return w?-x:x;
}
void addedge(int u,int v,int w){
    E[++cnt]=(edge){v,H[u],w}; H[u]=cnt;
}
void getroot(int u,int fa){
    sz[u]=1; mxs[u]=0;
    for(int e=H[u];e;e=E[e].nt){
        int v=E[e].to;
        if (v==fa||vis[v]) continue;
        getroot(v,u);
        sz[u]+=sz[v];
        mxs[u]=max(mxs[u],sz[v]);
    }
    mxs[u]=max(mxs[u],sum-sz[u]);
    if(mxs[u]&amp;lt;MX) rt=u,MX=mxs[u];
}
void getdis(int u,int fa,int dist){
    dis[++tot]=dist;
    for(int e=H[u];e;e=E[e].nt){
        int v=E[e].to;
        if(v==fa||vis[v]) continue;
        getdis(v,u,dist+E[e].w);
    }
}
void calc(int u,int fg,int len){
    tot=0;
    getdis(u,-1,len);
    for(int i=1;i&amp;lt;tot;i++){
        for(int j=i+1;j&amp;lt;=tot;j++){
            if(fg) ans[dis[i]+dis[j]]++;
            else ans[dis[i]+dis[j]]--;
        }
    }
}
void solve(int u){
    calc(u,1,0);
    vis[u]=1;
    for(int e=H[u];e;e=E[e].nt){
        int v=E[e].to;
        if(vis[v]) continue;
        calc(v,0,E[e].w);
        MX=inf; sum=sz[v]; rt=0; getroot(v,-1);
        solve(rt);
    }
}
int main(){
    n=read(),m=read();
    for(int i=1;i&amp;lt;n;i++){
        int u=read(),v=read(),w=read();
        addedge(u,v,w);
        addedge(v,u,w);
    }
    sum=n; MX=inf;
    getroot(1,-1);
    solve(rt);
    while(m--){
        int k=read();
        if(ans[k]&amp;gt;0) printf(&quot;AYE\n&quot;); else printf(&quot;NAY\n&quot;);
    }
    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;poj1741tree&quot;&gt;&lt;a href=&quot;https://vjudge.net/problem/POJ-1741&quot;&gt;[poj1741]Tree&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;题目描述-1&quot;&gt;题目描述&lt;/h4&gt;
&lt;p&gt;Give a tree with n vertices,each edge has a length(positive integer less than 1001).&lt;br/&gt;Define dist(u,v)=The min distance between node u and v.&lt;br/&gt;Give an integer k,for every pair (u,v) of vertices is called valid if and only if dist(u,v) not exceed k.&lt;br/&gt;Write a program that will count how many pairs which are valid for a given tree.&lt;/p&gt;
&lt;h4 id=&quot;题目大意&quot;&gt;题目大意&lt;/h4&gt;
&lt;p&gt;给一棵边带权树，问两点之间的距离小于等于K的点对有多少个。&lt;/p&gt;
&lt;h4 id=&quot;解法-1&quot;&gt;解法&lt;/h4&gt;
&lt;p&gt;暴力就是枚举点对，计算距离，但是一定T。&lt;/p&gt;
&lt;p&gt;我们就可以用点分治来解决这道题。&lt;/p&gt;
&lt;p&gt;如果我们已经知道了此时所有点到根的距离a[i]，a[x] + a[y] &amp;lt;= k的(x, y)对数就是结果，这个可以通过排序之后O(n)的复杂度求出。然后根据分治的思想，分别对所有的儿子求一遍即可，但是这会出现重复的——当前情况下两个点位于一颗子树中，那么应该将其减掉（显然这两个点是满足题意的，为什么减掉呢？因为在对子树进行求解的时候，会重新计算）。&lt;/p&gt;
&lt;p&gt;在进行分治时，为了避免树退化成一条链而导致时间复杂度变为O(N^2)，每次都找树的重心，这样，所有的子树规模就会变的很小了。时间复杂度O(Nlog^2N)。&lt;/p&gt;
&lt;h4 id=&quot;ac代码-1&quot;&gt;ac代码&lt;/h4&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;cstdio&amp;gt;
#include&amp;lt;cstring&amp;gt;
#include&amp;lt;algorithm&amp;gt;
#define inf 0x7fffffff
using namespace std;
int read(){
    int w=0,x=0;char ch=0;
    while(!isdigit(ch))w|=ch=='-',ch=getchar();
    while(isdigit(ch))x=(x&amp;lt;&amp;lt;1)+(x&amp;lt;&amp;lt;3)+(ch^48),ch=getchar();
    return w?-x:x;
}
int n,K,cnt,sum,ans,root;
int head[10005],deep[10005],d[10005],f[10005],son[10005];
bool vis[10005];
struct data{int to,next,v;}e[20005];
void ins(int u,int v,int w)
{e[++cnt].to=v;e[cnt].next=head[u];head[u]=cnt;e[cnt].v=w;}
void insert(int u,int v,int w)
{ins(u,v,w);ins(v,u,w);}
void getroot(int x,int fa)
{
    son[x]=1;f[x]=0;
    for(int i=head[x];i;i=e[i].next)
    {
        if(e[i].to==fa||vis[e[i].to])continue;
        getroot(e[i].to,x);
        son[x]+=son[e[i].to];
        f[x]=max(f[x],son[e[i].to]);
    }
    f[x]=max(f[x],sum-son[x]);
    if(f[x]&amp;lt;f[root])root=x;
}
void getdeep(int x,int fa)
{
    deep[++deep[0]]=d[x];
    for(int i=head[x];i;i=e[i].next)
    {
        if(e[i].to==fa||vis[e[i].to])continue;
        d[e[i].to]=d[x]+e[i].v;
        getdeep(e[i].to,x);
    }
}
int cal(int x,int now)
{
    d[x]=now;deep[0]=0;
    getdeep(x,0);
    sort(deep+1,deep+deep[0]+1);
    int t=0,l,r;
    for(l=1,r=deep[0];l&amp;lt;r;)
    {
        if(deep[l]+deep[r]&amp;lt;=K){t+=r-l;l++;}
        else r--;
    }
    return t;
}
void work(int x)
{
    ans+=cal(x,0);
    vis[x]=1;
    for(int i=head[x];i;i=e[i].next)
    {
        if(vis[e[i].to])continue;
        ans-=cal(e[i].to,e[i].v);
        sum=son[e[i].to];
        root=0;
        getroot(e[i].to,root);
        work(root);
    }
}
int main()
{
    while(1)
    {
        ans=0;root=0;cnt=0;
        memset(vis,0,sizeof(vis));
        memset(head,0,sizeof(head));
        n=read();K=read();
        if(n==0)break;
        for(int i=1;i&amp;lt;n;i++)
        {
            int u=read(),v=read(),w=read();
            insert(u,v,w);
        }
        sum=n;f[0]=inf;
        getroot(1,0);
        work(root);
        printf(&quot;%d\n&quot;,ans);
    }
    return 0;
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 25 Feb 2019 05:24:00 +0000</pubDate>
<dc:creator>chhokmah</dc:creator>
<og:description>点分治 感觉点分治不怎么难~~可能是我太弱了~~，算了。不BB了。 定义 所谓点分治，就是基于点来做分治。而分治是分而治之的意思，比如说我们有一群范围非常大的的问题，但是这些问题都有一些相似的特性，那</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chhokmah/p/10430418.html</dc:identifier>
</item>
<item>
<title>[CSS] css的background及多背景设置 - 月山</title>
<link>http://www.cnblogs.com/mybilibili/p/10430038.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mybilibili/p/10430038.html</guid>
<description>&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;首先是一个 div 块里需要一张背景，带文本和图案的那种，但是身为容器的 div 是能够随数据的改变而变化长度的，所以一张静态图片不免的会有拉伸和挤扁的状态，尤其是有图案和文本的情况下最为明显&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;      .bg {
        position: fixed;
        top: 0px;
        left: 0;
        width: 183px;
        height: 1106px;
        background: no-repeat center/183px 100% url(&quot;img/001.png&quot;);
      }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/easterCat/css/blob/master/background/img/004.png?raw=true&quot; alt=&quot;bg04&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当数据不够的时候就是一个扁扁的样子&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;      .bg {
        position: fixed;
        top: 0px;
        left: 0;
        width: 183px;
        height: 600px;
        background: no-repeat center/183px 100% url(&quot;img/001.png&quot;);
      }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/easterCat/css/blob/master/background/img/005.png?raw=true&quot; alt=&quot;bg05&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这时候就是想办法能够让图自适应且还能看的过去，于是就出现将头部变形比较明显的文字图案和底部颜色渐变分成，两个图的解决方法。这样头部文字不懂，颜色渐变进行拉伸就不那么明显了。于是分成两个 div，分别存放头部和底部，但是总感觉这方法有些繁琐，看了看文档发现 background 可以设置多背景&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//缩写形式
      .bg {
        position: fixed;
        top: 0px;
        left: 0;
        width: 175px;
        height: 600px;
        background: no-repeat center 114px/175px calc(100% - 114px) url(&quot;img/002.png&quot;), no-repeat center top/175px 114px url(&quot;img/003.png&quot;);
      }

//分写形式
      .bg {
        position: fixed;
        top: 0px;
        left: 0;
        width: 175px;
        height: 600px;
        /* background: no-repeat center 114px/175px calc(100% - 114px) url(&quot;img/002.png&quot;), no-repeat center top/175px 114px url(&quot;img/003.png&quot;); */
        background: url(&quot;img/002.png&quot;), url(&quot;img/003.png&quot;);
        background-repeat: no-repeat, no-repeat;
        background-position: center 114px, center top;
        background-size: 175px calc(100% - 114px), 175px 114px;
      }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/easterCat/css/blob/master/background/img/006.png?raw=true&quot; alt=&quot;bg06&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;IE8 及更早的浏览器版本不支持一个元素有多个背景图片&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;background-语法&quot;&gt;background 语法&lt;/h2&gt;
&lt;p&gt;背景缩写属性可以在一个声明中设置所有的背景属性&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;可以设置的属性分别是：background-color, background-position, background-size, background-repeat, background-origin, background-clip, background-attachment,和 background-image 中间有些值缺少一两个，并没有什么问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然也可以分开写属性，比如下列属性，个人更喜欢分写属性&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;background-color 指定要使用的背景颜色&lt;/li&gt;
&lt;li&gt;background-position 指定背景图像的位置&lt;/li&gt;
&lt;li&gt;background-size 指定背景图片的大小&lt;/li&gt;
&lt;li&gt;background-repeat 指定如何重复背景图像&lt;/li&gt;
&lt;li&gt;background-origin 指定背景图像的定位区域&lt;/li&gt;
&lt;li&gt;background-clip 指定背景图像的绘画区域&lt;/li&gt;
&lt;li&gt;background-attachment 设置背景图像是否固定或者随着页面的其余部分滚动&lt;/li&gt;
&lt;li&gt;background-image 指定要使用的一个或多个背景图像&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;background-position&quot;&gt;background-position&lt;/h2&gt;
&lt;p&gt;background-position 属性设置背景图像的起始位置&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;6.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;left top center bottom right&lt;/td&gt;
&lt;td&gt;如果仅指定一个关键字，其他值将会是&quot;center&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;x% y%&lt;/td&gt;
&lt;td&gt;第一个值是水平位置，第二个值是垂直。左上角是 0％0％。右下角是 100％100％。如果仅指定了一个值，其他值将是 50％。默认值为：0％0％&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;xpos ypos&lt;/td&gt;
&lt;td&gt;第一个值是水平位置，第二个值是垂直。左上角是 0。单位可以是像素（0px0px）或任何其他 CSS 单位。如果仅指定了一个值，其他值将是 50％。你可以混合使用％和 positions&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;inherit&lt;/td&gt;
&lt;td&gt;指定 background-position 属性设置应该从父元素继承&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;css3-的-calc-函数&quot;&gt;css3 的 calc 函数&lt;/h2&gt;
&lt;p&gt;calc() 函数用于动态计算长度值&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;运算符前后都需要保留一个空格，width: calc(100% - 10px)&lt;/li&gt;
&lt;li&gt;任何长度值都可以使用 calc()函数进行计算&lt;/li&gt;
&lt;li&gt;calc()函数支持 &quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot; 运算&lt;/li&gt;
&lt;li&gt;calc()函数使用标准的数学运算优先级规则&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/background&quot;&gt;MDN - CSS -backgound&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Backgrounds_and_Borders/Using_multiple_backgrounds&quot;&gt;MDN - CSS -backgound - 多重背景&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 25 Feb 2019 03:37:00 +0000</pubDate>
<dc:creator>月山</dc:creator>
<og:description>问题 首先是一个 div 块里需要一张背景，带文本和图案的那种，但是身为容器的 div 是能够随数据的改变而变化长度的，所以一张静态图片不免的会有拉伸和挤扁的状态，尤其是有图案和文本的情况下最为明显</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mybilibili/p/10430038.html</dc:identifier>
</item>
</channel>
</rss>