<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>react-navigation 3.x版本的push、navigate、goback、pop、dispatch等常用方法 - 南歌子</title>
<link>http://www.cnblogs.com/nangezi/p/10708282.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nangezi/p/10708282.html</guid>
<description>
&lt;h2&gt;一、方法简介&lt;/h2&gt;
&lt;p&gt;1. 应用中的每个页面组件都会自动提供 this.props.navigation&lt;/p&gt;
&lt;p&gt;this.props.navigation可以获取的一些方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;navigate&lt;/code&gt; &lt;/strong&gt;- 转到另一个页面, 计算出需要执行的操作　　（常用）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;goBack&lt;/code&gt; &lt;/strong&gt;- 关闭活动屏幕并在堆栈中向后移动　　（常用）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addListener&lt;/code&gt; - 订阅导航生命周期的更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isFocused&lt;/code&gt; - 函数返回 &lt;code&gt;true&lt;/code&gt; 如果屏幕焦点和 &lt;code&gt;false&lt;/code&gt; 否则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;state&lt;/code&gt; &lt;/strong&gt;- 当前状态/路由　　（常用）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;setParams&lt;/code&gt; &lt;/strong&gt;- 对路由的参数进行更改　　（常用）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;getParam&lt;/code&gt; &lt;/strong&gt;- 获取具有回退的特定参数　　（常用）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;dispatch&lt;/code&gt; &lt;/strong&gt;- 向路由发送 action　　（常用）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dangerouslyGetParent&lt;/code&gt; - 返回父级 navigator 的函数&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意： this.props.navigation并不是在所有页面（组件）中都可以使用，而是必须在StackNavigator、DrawerNavigator中声明的screen组件，才可以使用this.props.navigation&lt;/p&gt;
&lt;p&gt;也就是说，screen组件会自动获得这个props&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;this.props.navigation&lt;/code&gt; 上还有一些方法取决于当前 navigator 的附加函数（StackNavigator 和 DrawerNavigator）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2. 如果是StackNavigator，除了以上方法，this.props.navigation还提供如下的一些方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;push&lt;/code&gt; &lt;/strong&gt;- 推一个新的路由到堆栈　　（常用）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;pop&lt;/code&gt; &lt;/strong&gt;- 返回堆栈中的上一个页面　　（常用）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;popToTop&lt;/code&gt; &lt;/strong&gt;- 跳转到堆栈中最顶层的页面　　（常用）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace&lt;/code&gt; - 用新路由替换当前路由&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;reset&lt;/span&gt;&lt;/strong&gt;- 操作会擦除整个导航状态，并将其替换为多个操作的结果。　　（常用）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dismiss&lt;/code&gt; - 关闭当前堆栈&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3. 如果是DrawerNavigator，除了以上方法，this.props.navigation还提供如下的一些方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;openDrawer&lt;/code&gt; - 打开&lt;/li&gt;
&lt;li&gt;&lt;code&gt;closeDrawer&lt;/code&gt; - 关闭&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toggleDrawer&lt;/code&gt; - 切换，如果是打开则关闭，反之亦然&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;由于笔者没有使用过DrawerNavigator，在此就不做说明；&lt;/p&gt;
&lt;p&gt;以上内容均摘自react-navigation的官网，但是官网有点繁琐，写此以自用，有读者也是我的幸运。&lt;/p&gt;

&lt;h2&gt;二、以上方法的使用&lt;/h2&gt;
&lt;h3&gt;1. this.props.navigation.navigate()&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
onPress={() =&amp;gt; navigate('ProfileScreen', { title: 'Profile' })}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;功能：导航到某个路由 （即跳转页面）&lt;/p&gt;
&lt;p&gt;使用：this.props.navigation.navigate(routeName, params, action)&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;routeName（必需）表示需要导航到的目标路由（即跳转的目标页面），是在&lt;strong&gt;StackNavigator &lt;/strong&gt;中声明的screen页面的名称&lt;/li&gt;
&lt;li&gt;params（可选）表示跳转携带的参数，可以使用大括号携带多个，形式是key-value形式，在目标页面使用this.props.navigation.state.params.xxx来获取使用&lt;/li&gt;
&lt;li&gt;action（可选）不常用，此处不做解释&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意：3.x版本后，需要注意navigate和push的使用差别&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Push&lt;/code&gt; - 在堆栈顶部添加一条路由，并导航至该路由. 与&lt;code&gt;navigate&lt;/code&gt;的区别在于，如果有已经加载的页面，&lt;code&gt;navigate&lt;/code&gt;方法将跳转到已经加载的页面，而不会重新创建一个新的页面。 &lt;code&gt;push&lt;/code&gt; 总是会创建一个新的页面，所以一个页面可以被多次创建。--摘自官网&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;2. this.props.navigation.push()&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
onPress={() =&amp;gt; push('ProfileScreen', { title: 'Profile' })}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明： 功能作用完全同上，只是和navigate的区别需要注意&lt;/p&gt;
&lt;p&gt;类似于&lt;code&gt;navigate&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;将跳转到堆栈中的新的路由 与&lt;code&gt;navigate&lt;/code&gt;的区别在于，如果有已经加载的页面，&lt;code&gt;navigate&lt;/code&gt;方法将跳转到已经加载的页面，而不会重新创建一个新的页面。 &lt;code&gt;push&lt;/code&gt; 总是会创建一个新的页面，所以一个页面可以被多次创建。--摘自官网&lt;/p&gt;
&lt;p&gt;注意：与navigate相比较，push的使用范围无疑是更广的，它可以在相同的screen页面间跳转（只是页面routeName相同，而参数params不同），&lt;/p&gt;

&lt;h3&gt;3. this.props.navigation.goback()&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
onPress={() =&amp;gt; &lt;span&gt;this&lt;/span&gt;.props.navigation.goback()}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明： 可以返回堆栈的上一页面&lt;/p&gt;
&lt;p&gt;功能： 关闭当前页面并返回上一页面&lt;/p&gt;
&lt;p&gt;参数：可以是空（即表示仅仅返回上一个页面，并关闭当前页），&lt;/p&gt;
&lt;p&gt;　　    可以有参数，表示回到指定页面（关闭本页面和指定页面之间的所有页面）&lt;/p&gt;
&lt;p&gt;扩展：有参数情况的使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前已使用以下导航堆栈：&lt;/span&gt;
&lt;span&gt;navigation.navigate(SCREEN_KEY_A);
navigation.navigate(SCREEN_KEY_B);
navigation.navigate(SCREEN_KEY_C);
navigation.navigate(SCREEN_KEY_D);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;现在你在* screen D 上，并且想要回到 screen A *（销毁D、C和B）&lt;/span&gt;
navigation.goBack(SCREEN_KEY_D)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将从 screen D 跳转到 screen A&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果，* screen A * 在堆栈的顶部, 你可以使用 &lt;code&gt;navigation.popToTop()&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;gaoback()使用的参数，同navigate，应该是在&lt;strong&gt;StackNavigator &lt;/strong&gt;中声明的screen页面的名称&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. this.props.navigation.popToTop()&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
onPress={() =&amp;gt; &lt;span&gt;this&lt;/span&gt;.props.navigation.popToTop()}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明： 功能同上面的goback()，只是作用更单一，是回到堆栈的顶部&lt;/p&gt;
&lt;p&gt;功能： 调用该方法将直接跳转到堆栈最顶层的路由，销毁其它所有页面&lt;/p&gt;

&lt;h3&gt;5. this.props.navigation.pop()&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
onPress={() =&amp;gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.navigation.pop()}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;也可以携带参数，n表示在堆栈内返回几层&lt;/span&gt;
onPress={() =&amp;gt; &lt;span&gt;this&lt;/span&gt;.props.navigation.pop(n)}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：  功能同上面的goback()、popToTop()，只是参数是不同的&lt;/p&gt;
&lt;p&gt;功能： 返回到堆栈中的上一个页面，如果提供一个参数 &lt;code&gt;n&lt;/code&gt;，则指定在堆栈内返回几层。&lt;/p&gt;

&lt;h3&gt;6. this.props.navigation.reset()&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
import { NavigationActions } from 'react-navigation'&lt;span&gt;
navigation.reset([NavigationActions.navigate({ routeName: &lt;/span&gt;'HomeScreen' })], 0)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明： this.props.navigation.reset()是重置堆栈，并初始化到指定页面（HomeScreen），也就是清空堆栈，一般在退出登录的情况下操作&lt;/p&gt;
&lt;p&gt;功能： 操作会擦除整个导航状态，并将其替换为多个操作的结果。&lt;/p&gt;
&lt;p&gt;扩展：也可使用dispatch执行此操作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
import { StackActions, NavigationActions } from 'react-navigation'&lt;span&gt;;

const resetAction &lt;/span&gt;=&lt;span&gt; StackActions.reset({
  index: &lt;/span&gt;0&lt;span&gt;,
  actions: [NavigationActions.navigate({ routeName: &lt;/span&gt;'HomeScreen'&lt;span&gt; })],
});
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.props.navigation.dispatch(resetAction);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;index&lt;/code&gt; - * number *  - 必需 - &lt;code&gt;routes&lt;/code&gt;数组中&lt;code&gt;state&lt;/code&gt;的活动路由的索引。（此处0表示清空所以，从0开始）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;actions&lt;/code&gt; - &lt;em&gt;array&lt;/em&gt; - 必需 - 将取代导航状态的导航行为数组。（即初始化）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt; - &lt;em&gt;string or null&lt;/em&gt; - 可选 - 如果设置，具有给定 key 的导航器将重置。 如果为null，则根导航器将重置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;7. this.props.navigation.dispatch()&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
import { NavigationActions } from 'react-navigation'&lt;span&gt;;

const navigateAction &lt;/span&gt;=&lt;span&gt; NavigationActions.navigate({
  routeName: &lt;/span&gt;'ProfileScreen'&lt;span&gt;,
  params: {},
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; navigate can have a nested navigate action that will be run inside the child router （navigate 可以用有一个嵌套的navigate 操作）&lt;/span&gt;
  action: NavigationActions.navigate({ routeName: 'SubProfileRoute'&lt;span&gt; }),
});
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.props.navigation.dispatch(navigateAction);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明： dispatch() 可以重新定义任何导航操作（比如navigate，push，reset等），上面的reset()方法的扩展也是使用的dispatch&lt;/p&gt;
&lt;p&gt;功能： &lt;strong&gt;使用 &lt;code&gt;dispatch&lt;/code&gt; 将任何导航操作发送到路由后，该操作都将具有最高优先级。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参数： 就是你想重做的 NavigationActions 或者 StackActions中的方法及其参数&lt;/p&gt;

&lt;h3&gt;8. this.props.navigation.state&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 页面可以通过 this.props.navigation.state访问其路由。每一个都将返回一个对象, 其内容如下:&lt;/span&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;StackNavigator中声明的screen名称&lt;/span&gt;
  routeName: '&lt;span&gt;profileScreen,
  //用于路由排序的唯一标识，对于我们无用
  key: &lt;/span&gt;'xxx'&lt;span&gt;,
  //携带参数
  params: { name: &lt;/span&gt;'profile'&lt;span&gt; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明： state可以获取本页面路由下的数据，尤其是params （可以通过前一页面的跳转携带，也可在本页面通过setParams来设置）&lt;/p&gt;
&lt;p&gt;功能：页面可以通过 &lt;code&gt;this.props.navigation.state&lt;/code&gt;访问其路由，获取想要的东西，比如params等&lt;/p&gt;
&lt;p&gt;使用：this.props.navigation.state.params.title等&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过 navigation.state 获取参数 params&lt;/span&gt;
static  navigationOptions = ({navigation}) =&amp;gt;&lt;span&gt; ({
    headerTintColor: &lt;/span&gt;'#fff'&lt;span&gt;,
    headerTitle: navigation.state.params.title, &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这是从上一级跳转携带的&lt;/span&gt;
    headerRight: &amp;lt;View&amp;gt;
    　　　　　　　　　　&amp;lt;TouchableOpacity onPress={() =&amp;gt; {navigation.state.params.toOperate();}}&amp;gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此处必须通过添加参数的形式来调用方法&lt;/span&gt;
        　　　　　　　　　　&amp;lt;View&amp;gt;&amp;lt;Text style={{color: '#fff', marginRight: 20}}&amp;gt;下一步&amp;lt;/Text&amp;gt;&amp;lt;/View&amp;gt;
    　　　　　　　　　　&amp;lt;/TouchableOpacity &amp;gt;
　　　　　　　　　　&amp;lt;/View&amp;gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;9. this.props.navigation.setParams()&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;componentDidMount() {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; toOperate同上面的state.params&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.props.navigation.setParams({toOperate: () =&amp;gt;&lt;span&gt; {
        alert(&lt;/span&gt;'操作'&lt;span&gt;)
    }})
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明： setParams()可以设置参数，方便在页面的头部使用（即使用navigationOptions定义的头部，当需要本页面的数据时，必须通过setParams()传递，通过state.params去获取）&lt;/p&gt;
&lt;p&gt;功能： &lt;code&gt;setParams&lt;/code&gt;方法允许页面更改路由中的参数&lt;/p&gt;

&lt;h3&gt;10. this.props.navigation.getParam()&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用state.params获取&lt;/span&gt;
&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.navigation.state.params.title

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用getParam()获取&lt;/span&gt;
&lt;span&gt;this&lt;/span&gt;.props.navigation.getParam('title', 'profile');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明： 过去, 当 &lt;code&gt;params&lt;/code&gt; 未定义时, 你可能在获取 &lt;code&gt;params&lt;/code&gt; 时遇到问题。 现在，你不必直接访问参数，可以调用 &lt;code&gt;getParam&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;功能： 获取指定的参数，可以设置获取失败的返回值，比如上面的 title，当获取不到时，使用 profile 作为默认值&lt;/p&gt;

&lt;p&gt;三、&lt;/p&gt;
&lt;p&gt;最后说明：全文使用 &lt;a href=&quot;https://reactnavigation.org&quot; target=&quot;_blank&quot;&gt;react-navigation官网&lt;/a&gt; 的内容，仅为方便理解，添加了个人的删改和解释，如有问题，望见谅。&lt;/p&gt;
</description>
<pubDate>Sun, 14 Apr 2019 15:38:00 +0000</pubDate>
<dc:creator>南歌子</dc:creator>
<og:description>一、方法简介 1. 应用中的每个页面组件都会自动提供 this.props.navigation this.props.navigation可以获取的一些方法： navigate </og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nangezi/p/10708282.html</dc:identifier>
</item>
<item>
<title>『嗨威说』数据结构 - 第四章学习内容小结 - 嗨威er</title>
<link>http://www.cnblogs.com/WinniyGD/p/10708279.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/WinniyGD/p/10708279.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;　　一道天梯赛搞得全场人崩溃的题，几乎现场就没几个人AC，现在回头看看，真的很考细节耐心地题目。&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;-----------------------------题目-----------------------------&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;无论用户说什么，首先把对方说的话在一行中原样打印出来；&lt;/li&gt;
&lt;li&gt;消除原文中多余空格：把相邻单词间的多个空格换成 1 个空格，把行首尾的空格全部删掉，把标点符号前面的空格删掉；&lt;/li&gt;
&lt;li&gt;把原文中所有大写英文字母变成小写，除了 I；&lt;/li&gt;
&lt;li&gt;把原文中所有独立的 I 和 me 换成 you；&lt;/li&gt;
&lt;li&gt;把原文中所有的问号 ? 换成惊叹号 !；&lt;/li&gt;
&lt;li&gt;把原文中所有独立的 can you 换成 I can —— 这里“独立”是指被空格或标点符号分隔开的单词；&lt;/li&gt;
&lt;li&gt;在一行中输出替换后的句子作为 AI 的回答&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;-&quot;&gt;输入样例:&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;6&lt;/span&gt;&lt;span&gt;
Hello &lt;/span&gt;?&lt;span&gt;
 Good to chat   with you
can   you speak Chinese&lt;/span&gt;?&lt;span&gt;
Really&lt;/span&gt;?&lt;span&gt;
Could you show me &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;
What Is &lt;/span&gt;&lt;span&gt;this&lt;/span&gt; prime? I,don &lt;span&gt;'&lt;/span&gt;&lt;span&gt;t know&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;-&quot;&gt;输出样例:&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Hello ?&lt;span&gt;
AI: hello&lt;/span&gt;!&lt;span&gt;
 Good to chat   with you
AI: good to chat with you
can   you speak Chinese&lt;/span&gt;?&lt;span&gt;
AI: I can speak chinese&lt;/span&gt;!&lt;span&gt;
Really&lt;/span&gt;?&lt;span&gt;
AI: really&lt;/span&gt;!&lt;span&gt;
Could you show me &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;
AI: could you show you &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;
What Is &lt;/span&gt;&lt;span&gt;this&lt;/span&gt; prime? I,don &lt;span&gt;'&lt;/span&gt;&lt;span&gt;t know&lt;/span&gt;
AI: what Is &lt;span&gt;this&lt;/span&gt; prime! you,don&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t know&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-----------------------------题目-----------------------------&lt;/p&gt;


&lt;h2&gt;　　　　1* 函数原型声明：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteSymbolSpace();
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteSpace();
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; bigToSmall();
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; changePersonY();
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; changePersonI();
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; changeQ();
&lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; isIndenpend(&lt;span&gt;char&lt;/span&gt; temp);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　deleteSymbolSpace —— 删除符号前的空格&lt;/p&gt;
&lt;p&gt;　　　　　　deleteSpace —— 删除多余空格&lt;/p&gt;
&lt;p&gt;　　　　　　bigToSmall —— 将大写转小写&lt;/p&gt;
&lt;p&gt;　　　　　　changePersonY —— 改变人称You&lt;/p&gt;
&lt;p&gt;　　　　　　changePersonI —— 改变人称I me&lt;/p&gt;
&lt;p&gt;　　　　　　changeQ —— 问号改为感叹号&lt;/p&gt;
&lt;p&gt;　　　　　　isIndenpend —— 判断是否独立函数&lt;/p&gt;

&lt;h2&gt;　　　　2* 主函数框架构建：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;times);
    getchar();
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(times--&lt;span&gt;)
    {
        memset(temp,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(temp));
        memset(tMark,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(tMark));
        cin.getline(temp,&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
        puts(temp);
        changeQ();
        bigToSmall();
        deleteSpace();
        changePersonY();
        changePersonI();
        deleteSpace();
        deleteSymbolSpace();
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AI: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        puts(temp);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　抛开细节的实现方式，从大局角度思考程序的运行方式。&lt;/p&gt;


&lt;h2&gt;　　　　3*deleteSymbolSpace的实现：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteSymbolSpace()
{
    memset(dealing,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(dealing));
    count &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;strlen(temp);i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;32&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; flag = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;gt;=&lt;span&gt;33&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;lt;=&lt;span&gt;47&lt;/span&gt;) flag = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;gt;=&lt;span&gt;58&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;lt;=&lt;span&gt;64&lt;/span&gt;) flag = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;gt;=&lt;span&gt;91&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;lt;=&lt;span&gt;96&lt;/span&gt;) flag = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;gt;=&lt;span&gt;123&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;lt;=&lt;span&gt;126&lt;/span&gt;) flag = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(flag == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            {
                dealing[count] &lt;/span&gt;= temp[i+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
                count&lt;/span&gt;++&lt;span&gt;;
                i&lt;/span&gt;=i+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                dealing[count] &lt;/span&gt;=&lt;span&gt; temp[i];
                count&lt;/span&gt;++&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            dealing[count] &lt;/span&gt;=&lt;span&gt; temp[i];
            count&lt;/span&gt;++&lt;span&gt;;
        }
    }
    dealing[count] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    memset(temp,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(temp));
    strcpy(temp,dealing);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　因为刚开始不知道判断字母和数字的函数，所以干脆直接简单粗暴，ASCII扫独立。&lt;/p&gt;


&lt;h2&gt;　　　　4* deleteSpace函数的实现：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteSpace()
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; start = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; space = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    memset(dealing,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(dealing));
    count &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;strlen(temp);i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(start == &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; temp[i] == &lt;span&gt;32&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(start == &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; temp[i] != &lt;span&gt;32&lt;/span&gt;&lt;span&gt;)
        {
            start &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            dealing[count] &lt;/span&gt;=&lt;span&gt; temp[i];
            count&lt;/span&gt;++&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        }
        
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;32&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(space == &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tMark[i] == &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            space &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            dealing[count] &lt;/span&gt;= &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;
            count&lt;/span&gt;++&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            space &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            dealing[count] &lt;/span&gt;=&lt;span&gt; temp[i];
            count&lt;/span&gt;++&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(dealing[count-&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;32&lt;/span&gt;) dealing[count-&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; dealing[count] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    memset(temp,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(temp));
    strcpy(temp,dealing);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　核心思路很简单，就是拿一个新数组去存新的结果，通过打标记判断是否是句头空行。&lt;/p&gt;


&lt;h2&gt;　　　　5* bigToSmall函数的实现：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; bigToSmall()&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实际上可以用tolower代替 &lt;/span&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;strlen(temp);i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( temp[i] &amp;gt;= &lt;span&gt;65&lt;/span&gt; &amp;amp;&amp;amp; temp[i] &amp;lt;= &lt;span&gt;90&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            temp[i] &lt;/span&gt;= temp[i] + &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　这里也是因为不知道有tolower这个魔鬼函数，所以依旧简单粗暴，暴力用ASCII解决问题。&lt;/p&gt;


&lt;h2&gt;　　　　6* changePersonY函数的实现：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; changePersonY()
{
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;strlen(temp);i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; flag = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i != &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !isIndenpend(temp[i-&lt;span&gt;1&lt;/span&gt;])) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;2&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) flag = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;2&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;3&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;4&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) flag = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
        
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(flag != -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; mark = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i+flag]&amp;gt;=&lt;span&gt;32&lt;/span&gt; &amp;amp;&amp;amp; temp[i+flag]&amp;lt;=&lt;span&gt;47&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i+flag]&amp;gt;=&lt;span&gt;58&lt;/span&gt; &amp;amp;&amp;amp; temp[i+flag]&amp;lt;=&lt;span&gt;64&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i+flag]&amp;gt;=&lt;span&gt;91&lt;/span&gt; &amp;amp;&amp;amp; temp[i+flag]&amp;lt;=&lt;span&gt;96&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i+flag]&amp;gt;=&lt;span&gt;123&lt;/span&gt; &amp;amp;&amp;amp; temp[i+flag]&amp;lt;=&lt;span&gt;126&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(mark == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i+flag+mark] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+flag+mark+&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+flag+mark+&lt;span&gt;2&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i+flag+mark+&lt;span&gt;3&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; !isIndenpend(temp[i+flag+mark+&lt;span&gt;3&lt;/span&gt;])) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                    temp[i] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    tMark[i] &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                    temp[i&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;] = temp[i+&lt;span&gt;flag];
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(flag == &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
                    {
                        temp[i&lt;/span&gt;+&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        temp[i&lt;/span&gt;+&lt;span&gt;3&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        temp[i&lt;/span&gt;+&lt;span&gt;4&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(flag == &lt;span&gt;5&lt;/span&gt;&lt;span&gt;)
                    {
                        temp[i&lt;/span&gt;+&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        temp[i&lt;/span&gt;+&lt;span&gt;3&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        temp[i&lt;/span&gt;+&lt;span&gt;4&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        temp[i&lt;/span&gt;+&lt;span&gt;5&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        temp[i&lt;/span&gt;+&lt;span&gt;6&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    }
                    
                    temp[i &lt;/span&gt;+flag+&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    temp[i &lt;/span&gt;+flag+&lt;span&gt;3&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    tMark[i &lt;/span&gt;+flag+&lt;span&gt;2&lt;/span&gt;] = tMark[i +flag+&lt;span&gt;3&lt;/span&gt;] = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                    i &lt;/span&gt;= i +flag+&lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
                }
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　转换人称是所有限制条件最麻烦最难的地方，需要注意打上标记，因为对string还是有点小反感，虽然挺好用，但是习惯用char进行单个强行处理，所以这里一直是用char来处理的~ &lt;/p&gt;


&lt;h2&gt;　　　　7* changePersonI函数的实现：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; changePersonI()
{
    memset(dealing,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(dealing));
    count &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;strlen(temp);i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; isIndenpend(temp[i+&lt;span&gt;1&lt;/span&gt;]) &amp;amp;&amp;amp; tMark[i] == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i != &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !isIndenpend(temp[i-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;])) 
            {
                dealing[count] &lt;/span&gt;=&lt;span&gt; temp[i];
                count&lt;/span&gt;++&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            }
            dealing[count] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            dealing[count&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            dealing[count&lt;/span&gt;+&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            count &lt;/span&gt;+= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; isIndenpend(temp[i+&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]))
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i != &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !isIndenpend(temp[i-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]))
            {
                dealing[count] &lt;/span&gt;=&lt;span&gt; temp[i];
                count&lt;/span&gt;++&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            }
            dealing[count] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            dealing[count&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            dealing[count&lt;/span&gt;+&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            count &lt;/span&gt;+= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
            i &lt;/span&gt;= i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            dealing[count] &lt;/span&gt;=&lt;span&gt; temp[i];
            count&lt;/span&gt;++&lt;span&gt;;
        }
    }
    dealing[count] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    memset(temp,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(temp));
    strcpy(temp,dealing);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　这里尤其需要注意，不能把已经换过的人称再换一次，所以需要对标记进行判断。&lt;/p&gt;


&lt;h2&gt;　　　　8* changeQ的函数实现：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; changeQ()
{
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;strlen(temp);i++&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            temp[i] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　尽管函数简单，但尽量单独列出，使程序更加结构化。&lt;/p&gt;


&lt;h2&gt;　　　　9* isIndenpend函数的实现：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;bool&lt;/span&gt; isIndenpend(&lt;span&gt;char&lt;/span&gt;&lt;span&gt; temp)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; mark = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp&amp;gt;=&lt;span&gt;32&lt;/span&gt; &amp;amp;&amp;amp; temp&amp;lt;=&lt;span&gt;64&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp&amp;gt;=&lt;span&gt;91&lt;/span&gt; &amp;amp;&amp;amp; temp&amp;lt;=&lt;span&gt;96&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp&amp;gt;=&lt;span&gt;123&lt;/span&gt; &amp;amp;&amp;amp; temp&amp;lt;=&lt;span&gt;126&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; mark;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　暴力ASCII码解决，虽然不是最佳的处理方式。&lt;/p&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
#include&amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;iostream&amp;gt;
&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;------------------------&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteSymbolSpace();
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteSpace();
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; bigToSmall();
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; changePersonY();
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; changePersonI();
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; changeQ();
&lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; isIndenpend(&lt;span&gt;char&lt;/span&gt;&lt;span&gt; temp);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;------------------------&lt;/span&gt;

&lt;span&gt;int&lt;/span&gt;&lt;span&gt; times;
&lt;/span&gt;&lt;span&gt;char&lt;/span&gt; dealing[&lt;span&gt;1001&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; count;
&lt;/span&gt;&lt;span&gt;char&lt;/span&gt; temp[&lt;span&gt;1001&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; tMark[&lt;span&gt;1001&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;times);
    getchar();
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(times--&lt;span&gt;)
    {
        memset(temp,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(temp));
        memset(tMark,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(tMark));
        cin.getline(temp,&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
        puts(temp);
        changeQ();
        bigToSmall();
        deleteSpace();
        changePersonY();
        changePersonI();
        deleteSpace();
        deleteSymbolSpace();
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AI: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        puts(temp);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteSymbolSpace()
{
    memset(dealing,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(dealing));
    count &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;strlen(temp);i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;32&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; flag = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;gt;=&lt;span&gt;33&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;lt;=&lt;span&gt;47&lt;/span&gt;) flag = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;gt;=&lt;span&gt;58&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;lt;=&lt;span&gt;64&lt;/span&gt;) flag = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;gt;=&lt;span&gt;91&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;lt;=&lt;span&gt;96&lt;/span&gt;) flag = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;gt;=&lt;span&gt;123&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;1&lt;/span&gt;]&amp;lt;=&lt;span&gt;126&lt;/span&gt;) flag = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(flag == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            {
                dealing[count] &lt;/span&gt;= temp[i+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
                count&lt;/span&gt;++&lt;span&gt;;
                i&lt;/span&gt;=i+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                dealing[count] &lt;/span&gt;=&lt;span&gt; temp[i];
                count&lt;/span&gt;++&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            dealing[count] &lt;/span&gt;=&lt;span&gt; temp[i];
            count&lt;/span&gt;++&lt;span&gt;;
        }
    }
    dealing[count] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    memset(temp,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(temp));
    strcpy(temp,dealing);
}


&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteSpace()
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; start = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; space = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    memset(dealing,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(dealing));
    count &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;strlen(temp);i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(start == &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; temp[i] == &lt;span&gt;32&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(start == &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; temp[i] != &lt;span&gt;32&lt;/span&gt;&lt;span&gt;)
        {
            start &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            dealing[count] &lt;/span&gt;=&lt;span&gt; temp[i];
            count&lt;/span&gt;++&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        }
        
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;32&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(space == &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tMark[i] == &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            space &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            dealing[count] &lt;/span&gt;= &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;
            count&lt;/span&gt;++&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            space &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            dealing[count] &lt;/span&gt;=&lt;span&gt; temp[i];
            count&lt;/span&gt;++&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(dealing[count-&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;32&lt;/span&gt;) dealing[count-&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; dealing[count] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    memset(temp,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(temp));
    strcpy(temp,dealing);
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; bigToSmall()&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实际上可以用tolower代替 &lt;/span&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;strlen(temp);i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( temp[i] &amp;gt;= &lt;span&gt;65&lt;/span&gt; &amp;amp;&amp;amp; temp[i] &amp;lt;= &lt;span&gt;90&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            temp[i] &lt;/span&gt;= temp[i] + &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;
        }
    }
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; changePersonY()
{
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;strlen(temp);i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; flag = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i != &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !isIndenpend(temp[i-&lt;span&gt;1&lt;/span&gt;])) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;2&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) flag = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;2&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;3&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;4&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) flag = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
        
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(flag != -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; mark = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i+flag]&amp;gt;=&lt;span&gt;32&lt;/span&gt; &amp;amp;&amp;amp; temp[i+flag]&amp;lt;=&lt;span&gt;47&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i+flag]&amp;gt;=&lt;span&gt;58&lt;/span&gt; &amp;amp;&amp;amp; temp[i+flag]&amp;lt;=&lt;span&gt;64&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i+flag]&amp;gt;=&lt;span&gt;91&lt;/span&gt; &amp;amp;&amp;amp; temp[i+flag]&amp;lt;=&lt;span&gt;96&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i+flag]&amp;gt;=&lt;span&gt;123&lt;/span&gt; &amp;amp;&amp;amp; temp[i+flag]&amp;lt;=&lt;span&gt;126&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(mark == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i+flag+mark] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+flag+mark+&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+flag+mark+&lt;span&gt;2&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i+flag+mark+&lt;span&gt;3&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; !isIndenpend(temp[i+flag+mark+&lt;span&gt;3&lt;/span&gt;])) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                    temp[i] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    tMark[i] &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                    temp[i&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;] = temp[i+&lt;span&gt;flag];
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(flag == &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
                    {
                        temp[i&lt;/span&gt;+&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        temp[i&lt;/span&gt;+&lt;span&gt;3&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        temp[i&lt;/span&gt;+&lt;span&gt;4&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(flag == &lt;span&gt;5&lt;/span&gt;&lt;span&gt;)
                    {
                        temp[i&lt;/span&gt;+&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        temp[i&lt;/span&gt;+&lt;span&gt;3&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        temp[i&lt;/span&gt;+&lt;span&gt;4&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        temp[i&lt;/span&gt;+&lt;span&gt;5&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        temp[i&lt;/span&gt;+&lt;span&gt;6&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    }
                    
                    temp[i &lt;/span&gt;+flag+&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    temp[i &lt;/span&gt;+flag+&lt;span&gt;3&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    tMark[i &lt;/span&gt;+flag+&lt;span&gt;2&lt;/span&gt;] = tMark[i +flag+&lt;span&gt;3&lt;/span&gt;] = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                    i &lt;/span&gt;= i +flag+&lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
                }
            }
        }
    }
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; changePersonI()
{
    memset(dealing,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(dealing));
    count &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;strlen(temp);i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; isIndenpend(temp[i+&lt;span&gt;1&lt;/span&gt;]) &amp;amp;&amp;amp; tMark[i] == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i != &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !isIndenpend(temp[i-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;])) 
            {
                dealing[count] &lt;/span&gt;=&lt;span&gt; temp[i];
                count&lt;/span&gt;++&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            }
            dealing[count] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            dealing[count&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            dealing[count&lt;/span&gt;+&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            count &lt;/span&gt;+= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; temp[i+&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; isIndenpend(temp[i+&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]))
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i != &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !isIndenpend(temp[i-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]))
            {
                dealing[count] &lt;/span&gt;=&lt;span&gt; temp[i];
                count&lt;/span&gt;++&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            }
            dealing[count] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            dealing[count&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            dealing[count&lt;/span&gt;+&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            count &lt;/span&gt;+= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
            i &lt;/span&gt;= i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            dealing[count] &lt;/span&gt;=&lt;span&gt; temp[i];
            count&lt;/span&gt;++&lt;span&gt;;
        }
    }
    dealing[count] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    memset(temp,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(temp));
    strcpy(temp,dealing);
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; changeQ()
{
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;strlen(temp);i++&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp[i] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            temp[i] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; isIndenpend(&lt;span&gt;char&lt;/span&gt;&lt;span&gt; temp)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; mark = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(temp&amp;gt;=&lt;span&gt;32&lt;/span&gt; &amp;amp;&amp;amp; temp&amp;lt;=&lt;span&gt;64&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp&amp;gt;=&lt;span&gt;91&lt;/span&gt; &amp;amp;&amp;amp; temp&amp;lt;=&lt;span&gt;96&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp&amp;gt;=&lt;span&gt;123&lt;/span&gt; &amp;amp;&amp;amp; temp&amp;lt;=&lt;span&gt;126&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(temp == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) mark = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; mark;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;　　　　AI这道题还有待进一步优化和升级，还有一个bug没有发现，还会继续解决，重点想讲的是程序设计的架构：&lt;/p&gt;
&lt;p&gt;　　　　框架化的程序设计方法，是很早在Quanta冬令营中安卓JAVA的设计学习而得，由此类比过来的。我觉得，倘若要成为合格的程序设计师，出外工作的话，对框架的把握是非常重要的一个关卡，代码是否结构化明显，是否符合公司开发要求，是否易读都是程序设计过程中非常关键的地方。在安卓中，有分层WEB层、底层、数据层、素材动画层等等，选用合理的框架，能对团队的程序设计带来极大的效益，因此这个思想需要坚持并保留下来。&lt;/p&gt;
&lt;p&gt;　　　　接下来的学习历程吧：&lt;/p&gt;
&lt;p&gt;　　　　=》学习十字链表以及线性树、主席树、区间更新等ACM问题，为5月12日的广东省ACM省赛做准备&lt;/p&gt;
&lt;p&gt;　　　　=》学习统计学习方法，掌握模型评估、决策树、向量机等知识，为数据挖掘实验室——多模态情感分析项目组努力。&lt;/p&gt;
&lt;p&gt;　　　　=》前阵子七周都在英剧上花了不少时间，学习有些耽误，后续时间将慢慢追回学业，保证学业状态。&lt;/p&gt;
&lt;p&gt;　　　　哦对了，顺便附加ACM中的KMP模板吧，挺好用的，直接背下来用就好了~&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c4d6751f-d03d-43d1-ac49-6cb4427cbd3e')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_c4d6751f-d03d-43d1-ac49-6cb4427cbd3e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c4d6751f-d03d-43d1-ac49-6cb4427cbd3e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c4d6751f-d03d-43d1-ac49-6cb4427cbd3e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c4d6751f-d03d-43d1-ac49-6cb4427cbd3e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; KMP(&lt;span&gt;char&lt;/span&gt;* str,&lt;span&gt;char&lt;/span&gt;*&lt;span&gt; pat)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i,j,k;
    memset(fail,&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(fail));
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;1&lt;/span&gt;;pat[i];++&lt;span&gt;i)
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(k = fail[i-&lt;span&gt;1&lt;/span&gt;];k&amp;gt;=&lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; pat[i] != pat[k+&lt;span&gt;1&lt;/span&gt;];k =&lt;span&gt; fail[k]);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(pat[k+&lt;span&gt;1&lt;/span&gt;] == pat[i]) fail[i] = k + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    }
    i &lt;/span&gt;= j = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(str[i] &amp;amp;&amp;amp;&lt;span&gt; pat[j])
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(pat[j] == str[i]) ++i,++&lt;span&gt;j;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(j == &lt;span&gt;0&lt;/span&gt;) ++&lt;span&gt;i;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; j = fail[j-&lt;span&gt;1&lt;/span&gt;] + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(pat[j]) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; i-j+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 14 Apr 2019 15:37:00 +0000</pubDate>
<dc:creator>嗨威er</dc:creator>
<og:description>一道天梯赛搞得全场人崩溃的题，几乎现场就没几个人AC，现在回头看看，真的很考细节耐心地题目。 题目 输入样例: 输出样例: 题目 一、正式题解： 1* 函数原型声明： deleteSymbolSpac</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/WinniyGD/p/10708279.html</dc:identifier>
</item>
<item>
<title>STC15单片机最小系统DIY - lulipro</title>
<link>http://www.cnblogs.com/lulipro/p/10707441.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lulipro/p/10707441.html</guid>
<description>&lt;h2&gt;DIY计划简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;STC15F2K60S2简介：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;STC-Y5高速内核，工作频率可配置为1T（sysclk=mclk）&lt;/li&gt;
&lt;li&gt;2K RAM(256字节 idata + 1792字节 xdata) + 60K Flash ROM&lt;/li&gt;
&lt;li&gt;2个UART&lt;/li&gt;
&lt;li&gt;1个SPI&lt;/li&gt;
&lt;li&gt;38个IO（DIP封装）&lt;/li&gt;
&lt;li&gt;8通道10位ADC&lt;/li&gt;
&lt;li&gt;工作电压：3.8V~5.5V&lt;/li&gt;
&lt;li&gt;工作频率：5MHz~28MHz&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;DIY所需主要器件：&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;器件&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;数量&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;STC15F2K60S2 PDIP40 单片机 &lt;/td&gt;
&lt;td&gt;1      &lt;/td&gt;
&lt;td&gt;         &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;22.1184MHz晶振&lt;/td&gt;
&lt;td&gt;1       &lt;/td&gt;
&lt;td&gt; 主晶振&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;30pF电容&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1uF电容&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;100nF电容&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1K电阻&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt; LED限流&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3mm LED&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MicroUSB模块&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt; USB供电接口&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3pin拨动开关&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt; 电源开关&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;排针&lt;/td&gt;
&lt;td&gt;按需&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;排母&lt;/td&gt;
&lt;td&gt;按需&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;跳线&lt;/td&gt;
&lt;td&gt;按需&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9cmx15cm洞洞板&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt; 母版&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;最小系统原理图&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;为了保持原理图简单易懂，我没有画出IO引出排母/排针的电路，电源扩展引出电路。具体可以看下面的实物图。&lt;/li&gt;
&lt;li&gt;STC15F2K60S2内置RC震荡电路，可以省掉外部的晶振电路，但是我认为外部晶振比较精准一点，且受环境影响小。&lt;/li&gt;
&lt;li&gt;测试LED用于测试整个硬件/软件系统是否完好，有时候需要此LED来排错，比较实用。测试LED使用P5.5拉电流驱动。&lt;/li&gt;
&lt;li&gt;STC15F2K60S2内置了复位电路，其P5.4可以用来实现外部复位。我没有做外部复位电路，通过断电再上电来实现复位，这样P5.4就可以作为普通IO使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/858860/201904/858860-20190414222741732-1708925513.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;成品实物图&lt;/h2&gt;
&lt;p&gt;1、电源使用MicroUSB模块接入。&lt;/p&gt;
&lt;p&gt;2、用排母引出了GND和+5V电源接口。&lt;/p&gt;
&lt;p&gt;3、引出了所有的IO，每个IO使用了排母和排针两种连接器，方便使用杜邦线搭建电路。正面走了一根跳线，用热胶固定。&lt;/p&gt;
&lt;p&gt;4、LED使用的是3mm规格的，5mm的太大。&lt;/p&gt;
&lt;p&gt;5、蓝色LED为测试LED。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/858860/201904/858860-20190414220807547-1919599641.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/858860/201904/858860-20190414220909960-1067529309.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;问题总结&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;如何确定DIP封装的芯片引脚编号？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将芯片如下图摆放，最左下角为1脚，然后逆时针依次数下去就是2，3，4...40脚。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/858860/201904/858860-20190414230129075-1096284243.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如何给此最小系统下载程序？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常下载电路可以板载，也可以外置。由于我有ch340的USB-TTL模块，而且考虑到这种电路不好焊接，且为了保持简单，简洁，所以我没有板载下载电路。 可以使用下图的接法给单片机下载程序。&lt;/p&gt;
&lt;p&gt;下载步骤：闭合开关给单片机上电，然后使用STC-ISP软件选择好串口端口号，选择hex文件，点击【下载/编程】按钮，然后STC-ISP软件提示：【正在检测目标单片机 ...】时，就可以断开开关，再重新闭合开关上电，此时就开始了下载。 &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/858860/201904/858860-20190414225240257-160861074.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 14 Apr 2019 15:31:00 +0000</pubDate>
<dc:creator>lulipro</dc:creator>
<og:description>DIY计划简介 STC15F2K60S2简介： STC-Y5高速内核，工作频率可配置为1T（sysclk=mclk） 2K RAM(256字节 idata + 1792字节 xdata) + 60K</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lulipro/p/10707441.html</dc:identifier>
</item>
<item>
<title>http Content-Type 知多少 - 潇湘待雨</title>
<link>http://www.cnblogs.com/pqjwyn/p/10708204.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pqjwyn/p/10708204.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;作为前端开发，工作中少不了与接口请求打交道。对于常见的content-type，也能说上来几个，感觉还算了解。直到有一天，我要在查看google的批量接口合并时发现Content-Type: multipart/mixed以及Content-Type: application/http时，有点措手不及。赶紧深入研究下Content-Type相关内容来弥补下自己的不足，从前端的角度来看看Content-Type。&lt;/p&gt;
&lt;h2 id=&quot;content-type&quot;&gt;Content-Type&lt;/h2&gt;
&lt;p&gt;Content-Type:实体头部用于指示资源的MIME类型。如果未指定 ContentType，默认为text/html&lt;br/&gt;有两种场景：&lt;br/&gt;在请求中 (如POST 或 PUT)，客户端告诉服务器实际发送的数据类型。&lt;/p&gt;
&lt;p&gt;在响应中，Content-Type标头告诉客户端实际返回的内容的内容类型。浏览器会在某些情况下进行MIME查找，并不一定遵循此标题的值; 为了防止这种行为，可以将标题 X-Content-Type-Options 设置为 nosniff。&lt;/p&gt;
&lt;p&gt;简而言之就是标识资源或者所需资源的MIME类型。&lt;/p&gt;
&lt;p&gt;句法如下：&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;Content-Type: text/html; charset=utf-8
Content-Type: multipart/form-data; boundary=something&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数一般media-type、charset、boundary三种。&lt;br/&gt;我们的关注点在于media-type的取值以及其适用场景。&lt;/p&gt;
&lt;h3 id=&quot;media-type&quot;&gt;media-type&lt;/h3&gt;
&lt;p&gt;更多的是作为MIME type( Multipurpose Internet Mail Extensions)出现，即多用途Internet邮件扩展。&lt;br/&gt;其目的是用一种标准化的方式来标识文档的性质和格式。&lt;br/&gt;浏览器通常使用MIME类型（而不是文件扩展名）来确定如何处理文档；&lt;br/&gt;因此服务器设置正确以将正确的MIME类型附加到响应对象的头部是非常重要的。&lt;/p&gt;
&lt;h4 id=&quot;结构&quot;&gt;结构&lt;/h4&gt;
&lt;p&gt;MIME 组成结构如下：&lt;br/&gt;由类型与子类型两个字符串中间用'/'分隔而组成。不允许空格存在。对大小写不敏感，但传统都是小写。&lt;br/&gt;允许额外参数，如后面所示：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;type/subtype;parameter=value&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;type对应通用类目，例如：text/video等。&lt;/li&gt;
&lt;li&gt;subtype对应准确的子类，例如text下面细分为plain(纯文本)、html(html源码)、calendar（.ics）文件等。&lt;/li&gt;
&lt;li&gt;parameter可选一般是charset或者bundaary等。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;types&quot;&gt;Types&lt;/h3&gt;
&lt;p&gt;类目包括两种类型：独立类型和Multipart类型。&lt;/p&gt;
&lt;h4 id=&quot;独立类型&quot;&gt;独立类型&lt;/h4&gt;
&lt;p&gt;独立类型指只代表一个单独的文件或者媒体的类型，表明了对文件的分类。&lt;br/&gt;常见类型和实例如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;text&lt;br/&gt;文本数据包括一些人类可读的内容或者源码。例如：text/plain, text/csv, text/html.&lt;/li&gt;
&lt;li&gt;application&lt;br/&gt;数据为二进制的一种，例如application/octet-stream,application/pdf,application/pkcs8,application/zip.&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;audio&lt;br/&gt;音频或者音乐数据，例如audio/mpeg, audio/vorbis&lt;/li&gt;
&lt;li&gt;video&lt;br/&gt;视频数据或者文件，例如video/mp4&lt;/li&gt;
&lt;li&gt;image&lt;br/&gt;图像或图形数据，包括位图和矢量静止图像以及静止图像格式的动画版本。例如image/gif, image/png, image/jpeg, image/bmp, image/webp, image/x-icon&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;multipart类型&quot;&gt;Multipart类型&lt;/h4&gt;
&lt;p&gt;Multipart类型指明被分为几部分的一种文档的类目，且经常有不同的MIME类型。也可以用来表示属于相同事物的多个且独立的文件，这些独立的文件构成一个复杂的文档。在电子邮件场景中常见。&lt;br/&gt;有两种Multipart类型：message和multipart。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;message&lt;br/&gt;一个包括其他信息的消息，常用于下面的场景，例如指明一个邮件包含转发信息或者在多种信息的情况下，允许以chunk的形式发送数据量很大的信息。包括message/rfc822和message/partial&lt;/li&gt;
&lt;li&gt;multipart&lt;br/&gt;由多个不同MIME类型组件构成的数据，例如 multipart/form-data(使用FormData API生成的数据)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;看完了基本定义，下面看看常见的类型及使用场景。&lt;/p&gt;
&lt;h3 id=&quot;常见类型及使用场景&quot;&gt;常见类型及使用场景&lt;/h3&gt;
&lt;h4 id=&quot;静态资源图片媒体类&quot;&gt;静态资源、图片、媒体类&lt;/h4&gt;
&lt;p&gt;对于静态资源、图片和媒体类，也就是text、image、video等比较清晰明了，不再详细描述。&lt;/p&gt;
&lt;h4 id=&quot;application类&quot;&gt;application类&lt;/h4&gt;
&lt;ul readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;application/json&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;随着json这种轻量级的数据交互格式的流行，特别是和脚本交互的便利，使得在前后接口中，越来越多采用json格式。对于http协议来说，最终传输的还是字符。这里不再多进行描述。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;strong&gt;application/x-www-form-urlencoded&lt;/strong&gt;&lt;br/&gt;作为表单提交中默认的类型，其表明数据以标准的编码格式被编码为键值对。&lt;br/&gt;数据被编码成以 '&amp;amp;' 分隔的键-值对, 同时以 '=' 分隔键和值. 非字母或数字的字符会被 percent-encoding: 这也就是为什么这种类型不支持二进制数据的原因 (应使用 multipart/form-data 代替).&lt;br/&gt;我们以新浪为例，可以看到其请求报文(formdata那里选择，view source可以看得比较清楚)：&lt;br/&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/14/16a1c6f743d8b587?w=1600&amp;amp;h=468&amp;amp;f=jpeg&amp;amp;s=128274&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;multipart/form-data&lt;/strong&gt;&lt;br/&gt;这里为了对比，就也放到这里来说了。&lt;br/&gt;一般用于涉及文件的表单提交，用于post请求，其格式如下：&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;Content-Type: multipart/form-data; boundary=aBoundaryString&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中boundary指明了请求体中每部分的分割符(对于multipart的类目，都会存在该字段，以区分请求体中数据的分割)，其请求体中则是对应表单每部分的内容。每部分都会有自己的请求体和相关内容。&lt;br/&gt;例如如下的文档结构：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;  &amp;lt;form action=&quot;http://localhost:8000/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&amp;gt;
  &amp;lt;input type=&quot;text&quot; name=&quot;myTextField&quot;&amp;gt;
  &amp;lt;input type=&quot;checkbox&quot; name=&quot;myCheckBox&quot;&amp;gt;Check&amp;lt;/input&amp;gt;
  &amp;lt;input type=&quot;file&quot; name=&quot;myFile&quot;&amp;gt;
  &amp;lt;button&amp;gt;Send the file&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其请求信息如下：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;POST / HTTP/1.1
Host: localhost:8000
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: keep-alive
Upgrade-Insecure-Requests: 1
// 以 ---------------------------8721656041911415653955004498 作为分割符
Content-Type: multipart/form-data; boundary=---------------------------8721656041911415653955004498
Content-Length: 465

-----------------------------8721656041911415653955004498
// 分段一 文本相关信息
Content-Disposition: form-data; name=&quot;myTextField&quot;
// 对应value
Test
-----------------------------8721656041911415653955004498
// checkbox
Content-Disposition: form-data; name=&quot;myCheckBox&quot;

on
-----------------------------8721656041911415653955004498
// 文件
Content-Disposition: form-data; name=&quot;myFile&quot;; filename=&quot;test.txt&quot;
Content-Type: text/plain

Simple file.
-----------------------------8721656041911415653955004498--&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;3.4813167259786&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;application/javascript application/x-javascript text/javascript&lt;/strong&gt;&lt;br/&gt;对于js文件，常见MIME类型为text/javascript，但是前两种应该会有见到过。三者之间多少还是有点区别的。&lt;br/&gt;传统的js程序对应的MIME类型为text/javascript，其他的还有&quot;application/x-javascript&quot;（x前缀表示这是实验性类型）， 因为text/javascript是最常见的类型，所以RFC4329定义了“text/javascript”。不过，js文件实际上并不是真正的文本类型，因此推出了application/javascript类型，不过现行的支持性并不好，所以常常会用application/x-javascript来代替。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;application/zip application/gzip&lt;/strong&gt;&lt;br/&gt;zip 对应zip压缩文件，gzip是若干种文件压缩程序的简称，通常指GNU计划的实现，此处的gzip代表GNU zip。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.9634146341463&quot;&gt;
&lt;p&gt;&lt;strong&gt;application/http&lt;/strong&gt;&lt;br/&gt;这一种大家可能就不常见了，从类型可以知道，是http请求，但具体用途还是要翻下&lt;a href=&quot;https://www.iana.org/assignments/media-types/application/http&quot;&gt;规范&lt;/a&gt;才能找到的。&lt;br/&gt;此类型包含的http请求包含在binary消息体中，在邮件协议传输中需要指明Content-Transfer-Encoding。&lt;br/&gt;在批量处理请求时会遇到，其表现如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;--batch_0123456789
Content-Type: application/http
Content-ID: 
// 必须的字段，表明传送内容的编码格式 即二进制流
Content-Transfer-Encoding: binary

POST https://www.googleapis.com/analytics/v3/management/accounts/XXXXXX/webproperties/UA-XXXXXX-1/customDimensions
Content-Type: application/json
Content-Length: 68

{
 &quot;name&quot;: &quot;Campaign Group&quot;,
 &quot;scope&quot;: &quot;SESSION&quot;,
 &quot;active&quot;: true
} &lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;multipart类型-1&quot;&gt;multipart类型&lt;/h4&gt;
&lt;p&gt;正如上文所述，multipart一般对应单个消息头对应多个消息体。&lt;br/&gt;常见语法如下:&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;Content-Type: multipart/mixed; boundary=gc0p4Jq0M2Yt08jU534c0p&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中boundary字段是必须的，用于区分消息体中的数据边界，一般是两个'-'的格式作为该端的开头，例如：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;--gc0p4Jq0M2Yt08jU534c0p&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们主要关注的也就是下面几种：&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;multipart/form-data&lt;/strong&gt;&lt;br/&gt;见上面application部分。下面这几部分可能不是那么常见，不过还是可以了解一下，以免遇到的时候懵逼。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;multipart/mixed&lt;/strong&gt;&lt;br/&gt;该类型用于，消息体由多个独立的部分组成且想连续的展示。并且子数据类型有任一种无法被识别(此处指被浏览器直接识别的类型，例如text等)的类型时，都应该为mixed。&lt;br/&gt;概括而言就是该邮件有二进制内容，非可以直接识别的内容&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;POST /batch/farm/v1 HTTP/1.1
Authorization: Bearer your_auth_token
Host: www.googleapis.com
Content-Type: multipart/mixed; boundary=batch_foobarbaz
Content-Length: total_content_length

--batch_foobarbaz
// 子内容为http请求 不过是boundary编码过的
Content-Type: application/http
Content-ID: &amp;lt;item1:12930812@barnyard.example.com&amp;gt;

GET /farm/v1/animals/pony

--batch_foobarbaz
Content-Type: application/http
Content-ID: &amp;lt;item2:12930812@barnyard.example.com&amp;gt;

PUT /farm/v1/animals/sheep
Content-Type: application/json
Content-Length: part_content_length
If-Match: &quot;etag/sheep&quot;

{
  &quot;animalName&quot;: &quot;sheep&quot;,
  &quot;animalAge&quot;: &quot;5&quot;
  &quot;peltColor&quot;: &quot;green&quot;,
}

--batch_foobarbaz
Content-Type: application/http
Content-ID: &amp;lt;item3:12930812@barnyard.example.com&amp;gt;

GET /farm/v1/animals
If-None-Match: &quot;etag/animals&quot;

--batch_foobarbaz--&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里消息体中的内容就是http请求，在google批量接口协议中用使用。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;multipart/alternative&lt;/strong&gt;&lt;br/&gt;该类型与mixed的语法相同，但语义不同。其表明，消息体中的不同部分应该是相同信息的不同版本。即内容相同传输类型不同，以适应不同的接受者。&lt;br/&gt;还是举例：&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;From:  Nathaniel Borenstein &amp;lt;nsb@bellcore.com&amp;gt; 
To: Ned Freed &amp;lt;ned@innosoft.com&amp;gt; 
Subject: Formatted text mail 
MIME-Version: 1.0 
Content-Type: multipart/alternative; boundary=boundary42 


--boundary42 
Content-Type: text/plain; charset=us-ascii 

...plain text version of message goes here.... 

--boundary42 
Content-Type: text/richtext 

.... richtext version of same message goes here ... 
--boundary42 
Content-Type: text/x-whatever 

.... fanciest formatted version of same  message  goes  here 
... 
--boundary42-- &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;假如用户的系统可以识别 text/x-whatever 类型，那么其将会只看到这一部分。不同的用户看到什么内容取决于其系统支持何种类型。&lt;/p&gt;
&lt;h2 id=&quot;结束语&quot;&gt;结束语&lt;/h2&gt;
&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/drive/api/v3/batch?hl=zh-cn&quot; class=&quot;uri&quot;&gt;https://developers.google.com/drive/api/v3/batch?hl=zh-cn&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&quot; class=&quot;uri&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html&quot; class=&quot;uri&quot;&gt;https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;到这里常见的content-type就介绍完了，感谢以上参考文章，此外水平有限可能有错误之处欢迎指出。对于前端同学来说，网络请求也是我们需要关注的部分，提升深度的同时也要注意落款广度，希望对有需要的同学有所裨益。&lt;/p&gt;
</description>
<pubDate>Sun, 14 Apr 2019 15:23:00 +0000</pubDate>
<dc:creator>潇湘待雨</dc:creator>
<og:description>前言 作为前端开发，工作中少不了与接口请求打交道。对于常见的content type，也能说上来几个，感觉还算了解。直到有一天，我要在查看google的批量接口合并时发现Content Type: m</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pqjwyn/p/10708204.html</dc:identifier>
</item>
<item>
<title>基于Jenkins Pipeline的ASP.NET Core持续集成实践 - Edison Chou</title>
<link>http://www.cnblogs.com/edisonchou/p/edc_aspnetcore_jenkins_pipeline_introduction.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/edisonchou/p/edc_aspnetcore_jenkins_pipeline_introduction.html</guid>
<description>&lt;p&gt;最近在公司实践持续集成，使用到了Jenkins的Pipeline来提高团队基于ASP.NET Core API服务的集成与部署，因此这里总结一下。&lt;/p&gt;

&lt;h2&gt;1.1 持续集成相关概念&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/46653/201612/46653-20161230152143648-2113509642.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　互联网软件的开发和发布，已经形成了一套标准流程，最重要的组成部分就是持续集成(Continuous integration，简称 CI) 。 &lt;/p&gt;
&lt;p&gt;　　持续集成指的是，&lt;strong&gt;频繁地 (一天多次) 将代码集成到主干&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　它的好处主要有两个：&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;（1）&lt;strong&gt;快速发现错误&lt;/strong&gt;。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。&lt;/p&gt;
&lt;p&gt;（2）&lt;strong&gt;防止分支大幅偏离主干&lt;/strong&gt;。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　持续集成的目的，就是&lt;strong&gt;让产品可以快速迭代，同时还能保持高质量&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Martin Fowler&lt;/strong&gt;&lt;/em&gt; 说：“ 持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”　　&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　与持续集成相关的，还有持续交付和持续部署。&lt;/p&gt;
&lt;p&gt;　　持续交付指的是：&lt;strong&gt;频繁地将软件的新版本，交付给质量团队或者用户，以供评审&lt;/strong&gt;。如果评审通过，代码就进入生产阶段。它强调的是，&lt;strong&gt;不管怎么更新，软件是随时随地可以交付的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;CD&quot; src=&quot;https://images2015.cnblogs.com/blog/46653/201612/46653-20161230152159039-1261178652.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　持续部署是持续交付的下一步，指的是&lt;strong&gt;代码通过评审以后，自动部署到生产环境&lt;/strong&gt;。它强调的是&lt;strong&gt;代码在任何时刻都是可部署的，可以进入生产阶段&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;CD&quot; src=&quot;https://images2015.cnblogs.com/blog/46653/201612/46653-20161230152211445-454212849.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.2 Jenkins Pipeline&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201808/381412-20180808233203683-1020834546.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Jenkins 是一款流行的开源持续集成（CI）与持续部署（CD）工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。有关Jenkins的安装，可以参考我的这一篇&lt;a href=&quot;https://www.cnblogs.com/edisonchou/p/CD_foundation_based_on_jenkins_and_docker.html&quot; target=&quot;_blank&quot;&gt;文章&lt;/a&gt;进行安装。&lt;/p&gt;
&lt;p&gt;　　相信很多童鞋都已经在使用Jenkins或者计划使用Jenkins来代替传统的人工发布流程了，因此我们创建了很多自由风格（Free Style）的构建任务用于多个Job，而我们经常会听到说流水线任务，那么流水线是什么呢？&lt;/p&gt;
&lt;p&gt;　　流水线Pipeline是一套运行于Jenkins上的工作流框架，将原本独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的&lt;strong&gt;复杂流程编排与可视化&lt;/strong&gt;。下图是一个Jenkins Pipeline的实例效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190411221446969-1021990733.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Pipeline ：Build =&amp;gt; Test =&amp;gt; Deploy&lt;/p&gt;
&lt;p&gt;　　这里涉及到Pipeline中的几个重要概念，需要了解一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;&lt;strong&gt;Stage&lt;/strong&gt;&lt;/em&gt;: 阶段，一个Pipeline可以划分为若干个Stage，每个Stage代表一组操作。注意，Stage是一个逻辑分组的概念，可以跨多个Node。如上图所示，Build，Test和Deploy就是Stage，代表了三个不同的阶段：编译、测试和部署。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Node&lt;/strong&gt;&lt;/em&gt;: 节点，一个Node就是一个Jenkins节点，或者是Master，或者是Slave，是执行Step的具体运行期环境。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Step&lt;/strong&gt;&lt;/em&gt;: 步骤，Step是最基本的操作单元，小到创建一个目录，大到构建一个Docker镜像，由各类Jenkins Plugin提供。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2.1 安装Docker环境&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180726221105300-1650411740.png&quot; alt=&quot;&quot; width=&quot;334&quot; height=&quot;291&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以参考我的这一篇《&lt;a href=&quot;https://www.cnblogs.com/edisonchou/p/aspnetcore_on_docker_foundation.html&quot;&gt;.NET Core微服务之ASP.NET Core on Docker&lt;/a&gt;》来安装和配置Docker环境，建议在Linux环境下配置。&lt;/p&gt;
&lt;h2&gt;2.2 安装SFTP服务&lt;/h2&gt;
&lt;p&gt;　　在Linux下，SSH服务默认会安装，而在Windows Server下，需要单独安装，可以借助FreeSSHD这个免费工具来实现。由于我的物理机都是Windows Server，物理机上的VM是Linux（Docker运行环境），所以需要给物理机配置FreeSSHD，用来实现从CI服务器发布Release到物理服务器中的VM。&lt;/p&gt;
&lt;p&gt;　　至于如何安装配置FreeSSHD，可以参考这一篇《&lt;a href=&quot;https://www.cnblogs.com/Kevin00/p/6339925.html&quot;&gt;freeSSHD在windows环境下搭建SFTP服务器&lt;/a&gt;》。&lt;/p&gt;

&lt;h2&gt;3.1 总体目标&lt;/h2&gt;
&lt;p&gt;　　（1）持续集成：实现编译+单元测试的自动运行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190414223341375-100845605.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里我要实现的目标是：当有人push代码到git server中（这里我使用的git server是Gogs，需要给Gogs设置一个Webhook，如下图所示，需要注意的是设置的密钥文本要和在Pipeline中填写的一致，否则Jenkins无法正确接收Web钩子），git server会触发一个webhook发送一个post的请求给CI server，CI server会触发Pipeline任务的构建，一路pull代码+编译+单元测试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190414223825644-1797545720.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（2）持续发布：实现编译+发布到具体的测试环境&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190414224246145-1048664321.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　由于在开发阶段，我不需要每次Push都进行发布，因此我这里设置的是手动在Jenkins中触发发布任务来实现自动化发布。&lt;/p&gt;
&lt;h2&gt;3.2 全局设置&lt;/h2&gt;
&lt;p&gt;　　首先，肯定是Jenkins的插件安装了。&lt;/p&gt;
&lt;p&gt;　　（1）Generic WebHook Trigger =&amp;gt; 触发WebHook必备&lt;/p&gt;
&lt;p&gt;　　（2）Gogs Plugin =&amp;gt; 因为我使用的Git Server是Gogs搭建的&lt;/p&gt;
&lt;p&gt;　　（3）MSBuild Plugin =&amp;gt; 进行sln、csproj项目文件的编译&lt;/p&gt;
&lt;p&gt;　　（4）MSTest &amp;amp; xUnit =&amp;gt; 进行基于MSTest或基于xUnit的单元测试&lt;/p&gt;
&lt;p&gt;　　（5）Nuget Plugin =&amp;gt; 拉取Nuget包必备&lt;/p&gt;
&lt;p&gt;　　（6）Pipeline =&amp;gt; 实现Pipeline任务必备，建议将Pipeline相关插件都安装上&lt;/p&gt;
&lt;p&gt;　　（7）Powershell Plugin =&amp;gt; 如果你的CI服务器是基于Windows的，那么安装一下Powershell插件来执行命令吧&lt;/p&gt;
&lt;p&gt;　　（8）Publish Over SSH =&amp;gt; 远程发布Release必备&lt;/p&gt;
&lt;p&gt;　　（9）WallDisplay =&amp;gt; 电视投屏构建任务列表必备&lt;/p&gt;
&lt;p&gt;　　其次，为了提示邮件，也要Email插件（Email Extension）的支持，并进行以下配置：&lt;/p&gt;
&lt;p&gt;　　（1）第一处：Jenkins Location&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190414224530052-2111943239.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（2）第二处：Email扩展插件全局变量设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190414224825881-1087563711.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里主要是需要设置Subject和Content，就可以在各个Pipeline中使用了。因此，这里贴出我的Default Content内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${ENV, var=&quot;JOB_NAME&quot;}-第${BUILD_NUMBER}次构建日志&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;leftmargin&lt;/span&gt;&lt;span&gt;=&quot;8&quot;&lt;/span&gt;&lt;span&gt; marginwidth&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; topmargin&lt;/span&gt;&lt;span&gt;=&quot;8&quot;&lt;/span&gt;&lt;span&gt; marginheight&lt;/span&gt;&lt;span&gt;=&quot;4&quot;&lt;/span&gt;&lt;span&gt;  
    offset&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;=&quot;95%&quot;&lt;/span&gt;&lt;span&gt; cellpadding&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; cellspacing&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;  style&lt;/span&gt;&lt;span&gt;=&quot;font-size: 11pt; font-family: Microsoft YaHei, Tahoma, Arial, Helvetica&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;各位同事，大家好，以下为 ${PROJECT_NAME } 构建任务信息&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;b &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;font-weight:bold; color:#66cc00&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建信息&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;100%&quot;&lt;/span&gt;&lt;span&gt; align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;任务名称 ： ${PROJECT_NAME}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建编号 ： 第${BUILD_NUMBER}次构建&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;触发原因： ${CAUSE}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建状态： &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;font-weight:bold; color:#FF0000&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${BUILD_STATUS}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建日志： &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${BUILD_URL}console&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${BUILD_URL}console&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建  Url ： &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${BUILD_URL}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${BUILD_URL}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;工作目录 ： &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${PROJECT_URL}ws&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${PROJECT_URL}ws&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;项目  Url ： &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${PROJECT_URL}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${PROJECT_URL}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190414224703855-719999543.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　为了能够发给更多的人，建议勾选以上两个选项。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190414225033301-1709451843.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里是Email通知必填的SMTP服务器配置。&lt;/p&gt;
&lt;p&gt;　　最后，是SSH服务器的声明，指定可以进行SSH发布的服务器有哪些，IP又是多少：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190414230103829-1232685046.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.3 新增Pipeline脚本&lt;/h2&gt;
&lt;p&gt;　　（1）持续集成Pipeline&lt;/p&gt;
&lt;p&gt;　　首先，填写Webhook的密钥文本：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190414230855749-767949624.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　其次，Build Triggers的时机选择“Build when a change is pushed to Gogs”，即有人push代码到仓库就触发。当然，这里需要提前在Gogs设置Webhook。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190414225820854-501711250.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　其次，编写Pipeline脚本，各个Stage写清楚职责：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190414230213917-281363752.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　具体的Pipeline脚本在下边：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('13321a9b-a6a9-4dc9-b4b1-4fae22d9cc5c')&quot; readability=&quot;40&quot;&gt;&lt;img id=&quot;code_img_closed_13321a9b-a6a9-4dc9-b4b1-4fae22d9cc5c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_13321a9b-a6a9-4dc9-b4b1-4fae22d9cc5c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('13321a9b-a6a9-4dc9-b4b1-4fae22d9cc5c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_13321a9b-a6a9-4dc9-b4b1-4fae22d9cc5c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
&lt;span&gt;pipeline{
    agent any
    stages {
        stage('XDP Core Services Checkout') {
            steps{
             checkout([&lt;/span&gt;&lt;span&gt;$class&lt;/span&gt;: 'GitSCM', branches: [[name: '*/dev-xds']], doGenerateSubmoduleConfigurations: &lt;span&gt;false&lt;/span&gt;, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '35b9890b-2338-45e2-8a1a-78e9bbe1d3e2', url: 'http://192.168.18.150:3000/EDC.ITC.XDP.Core/&lt;span&gt;EDC.XDP.Core.git']]])
             echo 'Core Services Checkout Done' 
            }
        }
        stage('XDP Core Services Build') {
            steps{
              bat  '''cd &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\\Jenkins\\workspace\\XDS.Dev.CI.Pipeline\\src\\services\\EDC.XDP.Core\\&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
              dotnet build EDC.XDP.Core&lt;/span&gt;-&lt;span&gt;All.sln'''
              echo 'Core Services Build Done' 
            }
        }
        stage('Core Delivery Service Unit Test') {
            steps{
                bat  '''cd &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\\Jenkins\\workspace\\XDS.Dev.CI.Pipeline\\src\\services\\EDC.XDP.Core\\Services\\EDC.XDP.Core.Delivery.UnitTest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                dotnet test &lt;/span&gt;-v n --no-&lt;span&gt;build EDC.XDP.Core.Delivery.UnitTest.csproj'''
                echo 'Core Delivery Service Unit Test Done'  
            }
        }
        stage('XDS Delivery Service Checkout') {
            steps{
             checkout([&lt;/span&gt;&lt;span&gt;$class&lt;/span&gt;: 'GitSCM', branches: [[name: '*/dev-service']], doGenerateSubmoduleConfigurations: &lt;span&gt;false&lt;/span&gt;, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '35b9890b-2338-45e2-8a1a-78e9bbe1d3e2', url: 'http://192.168.18.150:3000/EDC.ITC.XDP.XDS/&lt;span&gt;EDC.XDP.XDS.git']]])
             echo 'Core Delivery Service Checkout Done' 
            }
        }
        stage('XDS Delivery Service Build') {
            steps{
               bat  '''cd &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\\Jenkins\\workspace\\XDS.Dev.CI.Pipeline\\src\\services\\EDC.XDP.XDS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
               dotnet build EDC.XDP.XDS.sln'''
               echo 'XDS Service Build Done' 
            }
        }
        stage('XDS Delivery Service Unit Test') {
            steps{
                bat  '''cd &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\\Jenkins\\workspace\\XDS.Dev.CI.Pipeline\\src\\services\\EDC.XDP.XDS\\EDC.XDP.XDS.Delivery.UnitTest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                dotnet test &lt;/span&gt;-v n --no-&lt;span&gt;build EDC.XDP.XDS.Delivery.UnitTest.csproj'''
                echo 'XDS Service Unit Test Done'  
            }
        } 
    }
    post{
        failure {
            emailext (
                subject: '&lt;/span&gt;&lt;span&gt;${DEFAULT_SUBJECT}&lt;/span&gt;&lt;span&gt;',
                body: '&lt;/span&gt;&lt;span&gt;${DEFAULT_CONTENT}&lt;/span&gt;&lt;span&gt;',
                to: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;edisonchou@qq.com,xxxxx@qq.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　（2）持续发布Pipeline&lt;/p&gt;
&lt;p&gt;　　持续发布Pipeline与持续集成Pipeline类似，只是在脚本处有所不同：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('bec6f76a-777d-4967-9deb-ccb029191197')&quot; readability=&quot;70.5&quot;&gt;&lt;img id=&quot;code_img_closed_bec6f76a-777d-4967-9deb-ccb029191197&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bec6f76a-777d-4967-9deb-ccb029191197&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('bec6f76a-777d-4967-9deb-ccb029191197',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bec6f76a-777d-4967-9deb-ccb029191197&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;136&quot;&gt;
&lt;pre&gt;
&lt;span&gt;pipeline{
    agent any
    stages {
        stage('Core Delivery Service Checkout') {
            steps{
             checkout([&lt;/span&gt;&lt;span&gt;$class&lt;/span&gt;: 'GitSCM', branches: [[name: '*/dev-xds']], doGenerateSubmoduleConfigurations: &lt;span&gt;false&lt;/span&gt;, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '35b9890b-2338-45e2-8a1a-78e9bbe1d3e2', url: 'http://192.168.18.150:3000/EDC.ITC.XDP.Core/&lt;span&gt;EDC.XDP.Core.git']]])
             echo 'Core Delivery Service Dev Branch Checkout Done' 
            }
        }
        stage('Core Delivery Service Build &lt;/span&gt;&amp;amp;&lt;span&gt; Publish') {
            steps{
              bat  '''cd &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\\Jenkins\\workspace\\XDS.API.Dev.CD.Pipeline\\src\\services\\EDC.XDP.Core&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
               dotnet build EDC.XDP.Core&lt;/span&gt;-&lt;span&gt;DataServices.sln
               dotnet publish &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%WORKSPACE%\\src\\services\\EDC.XDP.Core\\Services\\EDC.XDP.Core.Delivery.API\\EDC.XDP.Core.Delivery.API.csproj&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -o &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%WORKSPACE%\\EDC.XDP.Core.Delivery.API/publish&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; --framework netcoreapp2.1&lt;span&gt;
               '''
               echo 'Core Delivery Service Build &lt;/span&gt;&amp;amp;&lt;span&gt; Publish Done'
            }
        }
        stage('Core Delivery Service Deploy To &lt;/span&gt;190&lt;span&gt; Server') {
            steps{
            sshPublisher(publishers: [sshPublisherDesc(configName: 'XDP&lt;/span&gt;-DEV-Server', transfers: [sshTransfer(cleanRemote: &lt;span&gt;false&lt;/span&gt;, excludes: '', execCommand: '''docker stop xdp_core_deliveryservice; docker rm xdp_core_deliveryservice; docker run --ulimit core=0 --restart=always -v /etc/localtime:/etc/localtime -d -e ASPNETCORE_ENVIRONMENT=dev --privileged=&lt;span&gt;true&lt;/span&gt; --name=xdp_core_deliveryservice -p 8010:80 -v /XiLife/publish/EDC.XDP.Core.Delivery.API/:/app -w /app xdp_service_runtime:latest  dotnet EDC.XDP.Core.Delivery.API.dll''', execTimeout: 120000, flatten: &lt;span&gt;false&lt;/span&gt;, makeEmptyDirs: &lt;span&gt;false&lt;/span&gt;, noDefaultExcludes: &lt;span&gt;false&lt;/span&gt;, patternSeparator: '[, ]+', remoteDirectory: 'EDC.XDP.Core.Delivery.API/', remoteDirectorySDF: &lt;span&gt;false&lt;/span&gt;, removePrefix: 'EDC.XDP.Core.Delivery.API/publish/', sourceFiles: 'EDC.XDP.Core.Delivery.API/publish/**')], usePromotionTimestamp: &lt;span&gt;false&lt;/span&gt;, useWorkspaceInPromotion: &lt;span&gt;false&lt;/span&gt;, verbose: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)])
            echo 'Delivery Service Deploy To &lt;/span&gt;190&lt;span&gt; Done'    
            }
        }
        stage('Core Delivery Service Deploy To &lt;/span&gt;175&lt;span&gt; Server') {
            steps{
            sshPublisher(publishers: [sshPublisherDesc(configName: 'XDP&lt;/span&gt;-DEV-MT-Server', transfers: [sshTransfer(cleanRemote: &lt;span&gt;false&lt;/span&gt;, excludes: '', execCommand: '''docker stop xdp_core_deliveryservice; docker rm xdp_core_deliveryservice; docker run --ulimit core=0 --restart=always -v /etc/localtime:/etc/localtime -d -e ASPNETCORE_ENVIRONMENT=devmt --privileged=&lt;span&gt;true&lt;/span&gt; --name=xdp_core_deliveryservice -p 8010:80 -v /XiLife/publish/EDC.XDP.Core.Delivery.API/:/app -w /app xdp_service_runtime:latest  dotnet EDC.XDP.Core.Delivery.API.dll''', execTimeout: 120000, flatten: &lt;span&gt;false&lt;/span&gt;, makeEmptyDirs: &lt;span&gt;false&lt;/span&gt;, noDefaultExcludes: &lt;span&gt;false&lt;/span&gt;, patternSeparator: '[, ]+', remoteDirectory: 'EDC.XDP.Core.Delivery.API/', remoteDirectorySDF: &lt;span&gt;false&lt;/span&gt;, removePrefix: 'EDC.XDP.Core.Delivery.API/publish/', sourceFiles: 'EDC.XDP.Core.Delivery.API/publish/**')], usePromotionTimestamp: &lt;span&gt;false&lt;/span&gt;, useWorkspaceInPromotion: &lt;span&gt;false&lt;/span&gt;, verbose: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)])
            echo 'Delivery Service Deploy To &lt;/span&gt;175&lt;span&gt; Done'    
            }
        }
        stage('XDS Delivery Service Checkout') {
            steps{
             checkout([&lt;/span&gt;&lt;span&gt;$class&lt;/span&gt;: 'GitSCM', branches: [[name: '*/dev-service']], doGenerateSubmoduleConfigurations: &lt;span&gt;false&lt;/span&gt;, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '35b9890b-2338-45e2-8a1a-78e9bbe1d3e2', url: 'http://192.168.18.150:3000/EDC.ITC.XDP.XDS/&lt;span&gt;EDC.XDP.XDS.git']]])
             echo 'XDS Delivery Service Checkout Done' 
            }
        }
        stage('XDS Delivery Service Build &lt;/span&gt;&amp;amp;&lt;span&gt; Publish') {
            steps{
              bat  '''cd &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\\Jenkins\\workspace\\XDS.API.Dev.CD.Pipeline\\src\\services\\EDC.XDP.XDS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
               dotnet build EDC.XDP.XDS.sln
               dotnet publish &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%WORKSPACE%\\src\\services\\EDC.XDP.XDS\\EDC.XDP.XDS.Delivery.API\\EDC.XDP.XDS.Delivery.API.csproj&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -o &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%WORKSPACE%\\EDC.XDP.XDS.Delivery.API/publish&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; --framework netcoreapp2.1&lt;span&gt;
               '''
               echo 'XDS Delivery Service Build &lt;/span&gt;&amp;amp;&lt;span&gt; Publish Done' 
            }
        }
        stage('XDS Delivery Service Deploy To &lt;/span&gt;190&lt;span&gt; Server') {
            steps{
            sshPublisher(publishers: [sshPublisherDesc(configName: 'XDP&lt;/span&gt;-DEV-Server', transfers: [sshTransfer(cleanRemote: &lt;span&gt;false&lt;/span&gt;, excludes: '', execCommand: '''docker stop xdp_xds_delivery_service;docker rm xdp_xds_delivery_service; docker run --ulimit core=0 --restart=always -v /etc/localtime:/etc/localtime -d -e ASPNETCORE_ENVIRONMENT=dev --privileged=&lt;span&gt;true&lt;/span&gt; --name=xdp_xds_delivery_service -p 9020:80 -v /XiLife/publish/EDC.XDP.XDS.Delivery.API/:/app -w /app xdp_service_runtime:latest  dotnet EDC.XDP.XDS.Delivery.API.dll''', execTimeout: 120000, flatten: &lt;span&gt;false&lt;/span&gt;, makeEmptyDirs: &lt;span&gt;false&lt;/span&gt;, noDefaultExcludes: &lt;span&gt;false&lt;/span&gt;, patternSeparator: '[, ]+', remoteDirectory: 'EDC.XDP.XDS.Delivery.API/', remoteDirectorySDF: &lt;span&gt;false&lt;/span&gt;, removePrefix: 'EDC.XDP.XDS.Delivery.API/publish/', sourceFiles: 'EDC.XDP.XDS.Delivery.API/publish/**')], usePromotionTimestamp: &lt;span&gt;false&lt;/span&gt;, useWorkspaceInPromotion: &lt;span&gt;false&lt;/span&gt;, verbose: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)])
            echo 'XDS Delivery Service Deploy to &lt;/span&gt;190&lt;span&gt; Done'    
            }
        }
        stage('XDS Delivery Service Deploy To &lt;/span&gt;175&lt;span&gt; Server') {
            steps{
            sshPublisher(publishers: [sshPublisherDesc(configName: 'XDP&lt;/span&gt;-DEV-MT-Server', transfers: [sshTransfer(cleanRemote: &lt;span&gt;false&lt;/span&gt;, excludes: '', execCommand: '''docker stop xdp_xds_delivery_service;docker rm xdp_xds_delivery_service; docker run --ulimit core=0 --restart=always -v /etc/localtime:/etc/localtime -d -e ASPNETCORE_ENVIRONMENT=devmt --privileged=&lt;span&gt;true&lt;/span&gt; --name=xdp_xds_delivery_service -p 9020:80 -v /XiLife/publish/EDC.XDP.XDS.Delivery.API/:/app -w /app xdp_service_runtime:latest  dotnet EDC.XDP.XDS.Delivery.API.dll''', execTimeout: 120000, flatten: &lt;span&gt;false&lt;/span&gt;, makeEmptyDirs: &lt;span&gt;false&lt;/span&gt;, noDefaultExcludes: &lt;span&gt;false&lt;/span&gt;, patternSeparator: '[, ]+', remoteDirectory: 'EDC.XDP.XDS.Delivery.API/', remoteDirectorySDF: &lt;span&gt;false&lt;/span&gt;, removePrefix: 'EDC.XDP.XDS.Delivery.API/publish/', sourceFiles: 'EDC.XDP.XDS.Delivery.API/publish/**')], usePromotionTimestamp: &lt;span&gt;false&lt;/span&gt;, useWorkspaceInPromotion: &lt;span&gt;false&lt;/span&gt;, verbose: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)])
            echo 'XDS Delivery Service Deploy to &lt;/span&gt;175&lt;span&gt; Done'    
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　这里由于我的测试环境分为两个，一个是开发人员联调环境190，另一个是集成测试环境175，统一在一个Pipeline任务中进行发布。&lt;/p&gt;
&lt;p&gt;　　对于Master分支，我们还可以将Web系统的发布也集成到同一个Pipeline任务中，实现一个一条龙的发布流水线任务，由于各个Web系统的实现技术不一样，这里就不再贴脚本了。&lt;/p&gt;

&lt;p&gt;　　（1）持续集成示例&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190412171101885-121564805.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（2）持续发布示例&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190412171135938-265578859.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（3）构建失败告警&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190412171202704-189482496.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（4）构建大屏显示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190412171315266-338498862.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　再来一张投屏到工作区域电视屏幕中的效果，大家抬头就可以看到构建结果，是绿了还是红了？当然，我们都喜欢“绿”的，呼呼。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201904/381412-20190412172458230-952457504.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　借助持续集成和持续发布，我们开发人员可以节省很多质量保证和发布部署的时间，从而减少很多因为人为QA和Deploy造成的失误影响，从另一个层面上，它也可以使我们避免996（好吧，虽然关联有点牵强）。后续，我还会探索K8S，到时候希望能够分享一个ASP.NET Core on K8S的系列文章，敬请期待。&lt;/p&gt;

&lt;p&gt;大宝鱼，《&lt;a href=&quot;https://blog.csdn.net/diantun00/article/details/81075007&quot; target=&quot;_blank&quot;&gt;玩转Jenkins Pipeline&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;李志强，《&lt;a href=&quot;https://www.cnblogs.com/stulzq/p/10115583.html&quot;&gt;Jenkins高级用法 - Pipeline 安装&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;李志强，《&lt;a href=&quot;https://www.cnblogs.com/stulzq/p/10115589.html&quot;&gt;Jenkins高级用法 - Jenkinsfile 介绍及实战经验&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;三只松鼠，《&lt;a href=&quot;https://www.cnblogs.com/shenh/p/8963688.html&quot;&gt;jenkins + pipeline构建自动化部署&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;ofnhkb1，《&lt;a href=&quot;https://www.cnblogs.com/ofnhkb1/p/7801220.html&quot;&gt;.NET项目从CI到CD-Jenkins_Pipeline的应用&lt;/a&gt;》&lt;/p&gt;

&lt;div id=&quot;Copyright&quot; readability=&quot;8.2242990654206&quot;&gt;
&lt;p&gt;&lt;span&gt;作者：&lt;a title=&quot;author&quot; href=&quot;http://www.edisonchou.cn&quot; target=&quot;_blank&quot;&gt;周旭龙&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;出处：&lt;a title=&quot;from&quot; href=&quot;http://edisonchou.cnblogs.com&quot; target=&quot;_blank&quot;&gt;http://edisonchou.cnblogs.com&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 14 Apr 2019 15:19:00 +0000</pubDate>
<dc:creator>Edison Chou</dc:creator>
<og:description>最近在公司实践持续集成，使用到了Jenkins的Pipeline来提高团队基于ASP.NET Core API服务的集成与部署，因此这里总结一下。 一、关于持续集成与Jenkins Pipeline</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/edisonchou/p/edc_aspnetcore_jenkins_pipeline_introduction.html</dc:identifier>
</item>
<item>
<title>Python爬虫使用lxml模块爬取豆瓣读书排行榜并分析 - Berryguo</title>
<link>http://www.cnblogs.com/berryguotoshare/p/10708143.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/berryguotoshare/p/10708143.html</guid>
<description>&lt;p&gt;上次使用了BeautifulSoup库爬取电影排行榜，爬取相对来说有点麻烦，爬取的速度也较慢。本次使用的lxml库，我个人是最喜欢的，爬取的语法很简单，爬取速度也快。&lt;/p&gt;
&lt;p&gt;本次爬取的豆瓣书籍排行榜的首页地址是：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.douban.com/doulist/1264675/?start=0&amp;amp;sort=time&amp;amp;playable=0&amp;amp;sub_type=&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://www.douban.com/doulist/1264675/?start=0&amp;amp;sort=time&amp;amp;playable=0&amp;amp;sub_type=&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该排行榜一共有22页，且发现更改网址的 &lt;span&gt;start=0 &lt;span&gt;的  &lt;span&gt;&lt;strong&gt;0&lt;/strong&gt; &lt;span&gt;为25、50就可以跳到排行榜的第二、第三页，所以后面只需更改这个数字然后通过遍历就可以爬取整个排行榜的书籍信息。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本次爬取的内容有&lt;span&gt;书名&lt;/span&gt;、&lt;span&gt;评分&lt;/span&gt;、&lt;span&gt;评价数&lt;/span&gt;、&lt;/span&gt;&lt;span&gt;出版社&lt;/span&gt;、&lt;span&gt;出版年份&lt;/span&gt;以及&lt;span&gt;书籍封面图&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，封面图保存为图片，其他数据存为csv文件，方面后面读取分析。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本次的项目步骤：一、分析网页，确定爬取数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　　　　　　　二、使用lxml库爬取内容并保存&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　　　　　　　三、读取数据并选择部分内容进行分析&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;步骤一：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1526536/201904/1526536-20190414181848252-76832351.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;529&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;分析网页源代码可以看到，书籍信息在属性为 &lt;span&gt;&lt;span&gt;class&lt;/span&gt;=&quot;doulist-item&quot;&lt;/span&gt;的&lt;span&gt;div&lt;/span&gt;标签中,打开发现，我们需要爬取的信息都在标签内部，通过xpath语法我们可以很简便的爬取所需内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1526536/201904/1526536-20190414221438068-156055217.png&quot; alt=&quot;&quot;/&gt;(书籍各类信息所在标签）&lt;/p&gt;
&lt;p&gt;所需爬取的内容在 class为post、title、rating、abstract的div标签中。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;步骤二：&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;ol&gt;&lt;li&gt;先定义爬取函数，爬取所需内容&lt;/li&gt;
&lt;li&gt;执行函数，并存入csv文件&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;具体代码如下：　　&lt;span&gt;注：转载代码请标明出处&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; lxml &lt;span&gt;import&lt;/span&gt;&lt;span&gt; etree
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; csv
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;信息头&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; headers =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义爬取函数&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; douban_booksrank(url):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     res = requests.get(url, headers=&lt;span&gt;headers)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     selector =&lt;span&gt; etree.HTML(res.text)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     contents = selector.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//div[@class=&quot;article&quot;]/div[contains(@class,&quot;doulist-item&quot;)]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;循环点&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; content &lt;span&gt;in&lt;/span&gt;&lt;span&gt; contents:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             title = content.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div/div[2]/div[3]/a/text()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;书名&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             scores = content.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div/div[2]/div[4]/span[2]/text()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;评分&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             scores.append(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;9.0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;因为有一些书没有评分，导致列表为空，此处添加一个默认评分，若无评分则默认为9.0&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             score =&lt;span&gt; scores[0]
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             comments = content.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div/div[2]/div[4]/span[3]/text()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0] &lt;span&gt;#&lt;/span&gt;&lt;span&gt;评论数量&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             author = content.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div/div[2]/div[5]/text()[1]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0]    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;作者&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             publishment = content.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div/div[2]/div[5]/text()[2]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0]   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;出版社&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             pub_year = content.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div/div[2]/div[5]/text()[3]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;出版时间&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             img_url = content.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div/div[2]/div[2]/a/img/@src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;书本图片的网址&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             img = requests.get(img_url) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;解析图片网址，为下面下载图片&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             img_name_file = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:/Users/lenovo/Desktop/douban_books/{}.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format((title.strip())[:3])   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;图片存储位置，图片名只取前3&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;写入csv&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;             with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\lenovo\Desktop\\douban_books.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, newline=&lt;span&gt;''&lt;/span&gt;, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)as fp:   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;newline 使不隔行&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;                 writer =&lt;span&gt; csv.writer(fp)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                writer.writerow((title, score, comments, author, publishment, pub_year, img_url))
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;下载图片，为防止图片名导致格式错误，加入try...except&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 with open(img_name_file, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)as imgf:
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                    imgf.write(img.content)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;except&lt;/span&gt; FileNotFoundError &lt;span&gt;or&lt;/span&gt;&lt;span&gt; OSError:
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 &lt;span&gt;pass&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;             time.sleep(0.5) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;睡眠0.5s&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; IndexError:
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;pass&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行程序&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt;==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;爬取所以书本，共22页的内容&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;     urls = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.douban.com/doulist/1264675/?start={}&amp;amp;sort=time&amp;amp;playable=0&amp;amp;sub_type=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(str(i))&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(0,550,25&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;写csv首行&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;     with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\lenovo\Desktop\\douban_books.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, newline=&lt;span&gt;''&lt;/span&gt;, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)as f:
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         writer =&lt;span&gt; csv.writer(f)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         writer.writerow((&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;comment&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;author&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;publishment&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pub_year&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;img_url&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;遍历所有网页，执行爬取程序&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; url &lt;span&gt;in&lt;/span&gt;&lt;span&gt; urls:
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         douban_booksrank(url)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;爬取结果截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1526536/201904/1526536-20190414224034570-1254945812.png&quot; alt=&quot;保存csv格式的爬取数据&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1526536/201904/1526536-20190414224138066-1010440255.png&quot; alt=&quot;爬取的封面图片&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;步骤三：&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;本次使用Python常用的数据分析库pandas来提取所需内容。pandas的&lt;span&gt;read_csv()&lt;span&gt;函数可以读取csv文件并根据文件格式转换为Series、DataFrame或面板对象。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;此处我们提取的数据转变为DataFrame（数据帧）对象，然后通过Matplotlib绘图库来进行绘图。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;具体代码如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; matplotlib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pyplot as plt
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pandas as pd
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; re
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; plt.rcParams[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;font.sans-serif&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SimHei&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] &lt;span&gt;#&lt;/span&gt;&lt;span&gt;用来正常显示中文标签&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; plt.rcParams[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;axes.unicode_minus&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=False &lt;span&gt;#&lt;/span&gt;&lt;span&gt;用来正常显示负号&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; plt.subplots_adjust(hspace=0.5) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;调整subplot上下子图间的距离&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; pd.set_option(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;display.max_rows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, None) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;设置使dataframe 所有行都显示&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; df = pd.read_csv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\lenovo\Desktop\\douban_books.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;读取csv文件，并赋为dataframe对象&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; comment = re.findall(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\((.*?)人评价&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, str(df.comment), re.S)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用正则表达式获取评论人数&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将comment的元素化为整型&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; new_comment =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; comment:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    new_comment.append(int(i))
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; pub_year = re.findall(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d{4}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, str(df.pub_year),re.S)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取书籍出版年份&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;同上&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; new_pubyear =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; n &lt;span&gt;in&lt;/span&gt;&lt;span&gt; pub_year:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    new_pubyear.append(int(n))
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;绘图&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;1、绘制书籍评分范围的直方图&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; plt.subplot(2,2,1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; plt.hist(df.score, bins=16, edgecolor=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;black&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; plt.title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;豆瓣书籍排行榜评分分布&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, fontweight=700&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; plt.xlabel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scores&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; plt.ylabel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;numbers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;绘制书籍评论数量的直方分布图&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; plt.subplot(222&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; plt.hist(new_comment, bins=16, color=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, edgecolor=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;yellow&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; plt.title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;豆瓣书籍排行榜评价分布&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, fontweight=700&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; plt.xlabel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;评价数&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; plt.ylabel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;书籍数量（单位/本）&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;绘制书籍出版年份分布图&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; plt.subplot(2,2,3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; plt.hist(new_pubyear, bins=30, color=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;indigo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,edgecolor=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; plt.title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;书籍出版年份分布&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, fontweight=700&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; plt.xlabel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;出版年份/year&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; plt.ylabel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;书籍数量/本&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;寻找关系&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; plt.subplot(224&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; plt.bar(new_pubyear,new_comment, color=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, edgecolor=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; plt.title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;书籍出版年份与评论数量的关系&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, fontweight=700&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; plt.xlabel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;出版年份/year&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; plt.ylabel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;评论数&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt; plt.savefig(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\lenovo\Desktop\\douban_books_analysis.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   #保存图片
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; plt.show()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里需要注意的是，使用了&lt;span&gt;正则表达式&lt;/span&gt;来提取评论数和出版年份，将其中的符合和问题剔除。&lt;/p&gt;
&lt;p&gt;分析结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;豆瓣排行榜图书数据&quot; src=&quot;https://img2018.cnblogs.com/blog/1526536/201904/1526536-20190414225442490-1957197694.png&quot; alt=&quot;数据图像化的结果&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本次分析的内容也较为简单，从上面的几个图形中我们也能得出一些结论。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;这些高分书籍中绝大多数的评论数量都在50000以下；&lt;/li&gt;
&lt;li&gt;多数排行榜上的高分书籍都出版在2000年以后；&lt;/li&gt;
&lt;li&gt;出版年份在2000年后的书籍有更多的评论数量。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上数据也见解的说明了在进入二十世纪后我国的图书需求量更大了，网络更发达，更多人愿意发表自己的看法。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;本次的分享到此。若有错误，欢迎指正。有建议的话也可以留言。&lt;/p&gt;

</description>
<pubDate>Sun, 14 Apr 2019 15:10:00 +0000</pubDate>
<dc:creator>Berryguo</dc:creator>
<og:description>Python爬取豆瓣图书排行榜</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/berryguotoshare/p/10708143.html</dc:identifier>
</item>
<item>
<title>Python后台开发Django（会话控制） - 东小东</title>
<link>http://www.cnblogs.com/dongxiaodong/p/10496876.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dongxiaodong/p/10496876.html</guid>
<description>&lt;h2&gt;页面跳转&lt;/h2&gt;
&lt;p&gt;页面跳转的url中必须在最后会自动添加【\】，所以在urls.py的路由表中需要对应添加【\】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt; redirect &lt;span&gt;#&lt;/span&gt;&lt;span&gt;导入&lt;/span&gt;
&lt;span&gt;return&lt;/span&gt; redirect(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;本地页面跳转&lt;/span&gt;
&lt;span&gt;return&lt;/span&gt; redirect(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/dongxiaodong/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;其他网站跳转&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本地跳转需要参考urls.py的路由表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
urlpatterns =&lt;span&gt; [
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, admin.site.urls),
    path(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dong/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,views.homex),&lt;span&gt;#&lt;/span&gt;&lt;span&gt;添加URL对应关系&lt;/span&gt;
]
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span lang=&quot;EN-US&quot;&gt;Cookie&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;设置&lt;span lang=&quot;EN-US&quot;&gt;cookie&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 本地页面跳转&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt; redirect  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 导入&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; retx = redirect(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dong/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 返回文件,并匹配值&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt; render &lt;span&gt;#&lt;/span&gt;&lt;span&gt;导入&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; retx= render(requestx, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loginx.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dongkk1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;替换值1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dongkk2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;替换值2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}) 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;返回字符串&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; HttpResponse
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; retx=HttpResponse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;东小东【dongxiaodong】&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;设置cookie&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; retx.set_cookie(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dongxiaodong&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; retx.set_cookie(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dname2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dongxiaodongxx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,max_age=100)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;设置超时时间，单位为秒&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; retx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;获取cookie&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dnamex=requestx.COOKIES.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;删除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置cookie的超时时间为过去时间即可&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cookie加密&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
retx.set_signed_cookie(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dong3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dongxiaodong33&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,salt=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;任意字符串（密文）&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;cookie通过密文加密&lt;/span&gt;
dnamex3 = requestx.get_signed_cookie(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dong3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, salt=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;对应设置cookie时的密文&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取cookie&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Session&lt;/h2&gt;
&lt;p&gt;依赖于cookie的sessionid的随机字符串，默认超时时间为浏览器不退出情况下的两周或者浏览器退出就立即失效&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设置&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
requestx.session[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dongss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dongxiaodongsss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
requestx.session.set_expiry(&lt;/span&gt;60*60)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;设置超时时间，单位为秒&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;获取&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
dnamex = requestx.session[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dongss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
dnamex &lt;/span&gt;= requestx.session.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dongss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;无该键时程序不会报错&lt;/span&gt;
ssid = requestx.session.session_key &lt;span&gt;#&lt;/span&gt;&lt;span&gt;得到sessionid,值与cookie保存的相同&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;删除&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;del&lt;/span&gt; requestx.session[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dongss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
requestx.session.clear() &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;清空所有session&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;相关配置（setting.py）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; SESSION_COOKIE_NAME=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sessionid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; SESSION_COOKIE_PATH=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;                  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Session的cookie保存的路径（默认）&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; SESSION_COOKIE_DOMAIN = None             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Session的cookie保存的域名（默认）&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; SESSION_COOKIE_SECURE = False            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是否Https传输cookie（默认）&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; SESSION_COOKIE_HTTPONLY = True           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是否Session的cookie只支持http传输（默认）&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; SESSION_COOKIE_AGE = 1209600              &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Session的cookie失效日期（2周）（默认）&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; SESSION_EXPIRE_AT_BROWSER_CLOSE = False   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是否关闭浏览器使得Session过期（默认）&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是否每次请求都保存Session，默认修改之后才保存（默认）&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果SESSION_SAVE_EVERY_REQUEST = True时，可以配合requestx.session.set_expiry(60*60)，实现无操作一分钟后页面session清除，页面失效&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; SESSION_SAVE_EVERY_REQUEST = False
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;中间件&lt;/h2&gt;
&lt;p&gt;所有的请求都会先进入中间件处理，执行完所有中间件（MIDDLEWARE = [ ]）才会进入urls.py进行路由，然后进入对应的APP的views.py中执行逻辑处理，中间件可以获取到请求的任意数据，可以做一些IP黑名单等处理&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CSR保护&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Post提交数据时，Django自动会进行CSR验证，在POST提交数据端需要提交一条随机字符串，服务器会匹配其的内容&lt;/p&gt;
&lt;p&gt;设置是否需要全局csr保护&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;全局设置：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需要在setting.py设置MIDDLEWARE = [ ]，&lt;/p&gt;
&lt;p&gt;如果注释【'django.middleware.csrf.CsrfViewMiddleware',】则表示不用验证，反之&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;部分设置（优先级高）：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在APP对应views.py下添加函数装饰器即可实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.views.decorators.csrf &lt;span&gt;import&lt;/span&gt;&lt;span&gt; csrf_exempt,csrf_protect
@csrf_protect  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;强制添加保护&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; xx1(requestx):
   &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;&lt;span&gt;
@csrf_exempt   &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;强制取消保护&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; xx2(requestx):
   &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Form表单里的post请求：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% csrf_token %}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;xx&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;提交了&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ajax里的post请求，需要获取cookie的csrf值，并以请求头的方式发送到服务器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
headers:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;X-CSRFtoken&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:$.cookie(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;csrftoken&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)},
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;添加中间件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在工程下建立任意名字的文件夹，然后在文件夹中建立任意名字的python文件，如在工程同名目录下建立ruledong.py文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django.utils.deprecation &lt;span&gt;import&lt;/span&gt;&lt;span&gt; MiddlewareMixin
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;自定义中间件1&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Dong1(MiddlewareMixin):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; process_request(self,requestx):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dong1111111&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你的设备基本信息:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, requestx.environ.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HTTP_USER_AGENT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你的IP地址：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, requestx.environ.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REMOTE_ADDR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;自定义中间件2&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Dong2(MiddlewareMixin):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; process_request(self,requestx):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dong22222222&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; requestx.GET.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;idx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) != &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 返回字符串,以此为终点，中断所有&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; HttpResponse
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; HttpResponse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;东小东【请求失败】&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在setting的MIDDLEWARE = [ ]的最后添加，添加规则为前面的先被执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dongjg.ruledong.Dong1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dongjg.ruledong.Dong2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 14 Apr 2019 15:09:00 +0000</pubDate>
<dc:creator>东小东</dc:creator>
<og:description>页面跳转 页面跳转的url中必须在最后会自动添加【\】，所以在urls.py的路由表中需要对应添加【\】 本地跳转需要参考urls.py的路由表 Cookie 设置cookie 获取cookie 删除</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dongxiaodong/p/10496876.html</dc:identifier>
</item>
<item>
<title>F#周报2019年第15期 - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/10707413.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/10707413.html</guid>
<description>[unable to retrieve full-text content]新闻 &quot;Hedgehog新站点&quot; &quot;Bolero 0.4发布，增加远程认证&quot; &quot;FsToolkit.ErrorHandling与Cvdm.ErrorHandling合并了&quot; &quot;F 里的3D图形编程与游戏开发&quot; &quot;有趣的3D——浏览器里F 3D绘制&quot; &quot;F CNTK：变分自动编码器例子——从2D隐空间</description>
<pubDate>Sun, 14 Apr 2019 15:06:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<og:description>新闻 'Hedgehog新站点' 'Bolero 0.4发布，增加远程认证' 'FsToolkit.ErrorHandling与Cvdm.ErrorHandling合并了' 'F 里的3D图形编程与游</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/10707413.html</dc:identifier>
</item>
<item>
<title>结合JDK源码看设计模式——观察者模式 - 方块人</title>
<link>http://www.cnblogs.com/Cubemen/p/10708107.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Cubemen/p/10708107.html</guid>
<description>&lt;p&gt;　　现在我们生活中已经离不开微信，QQ等交流软件，这对于我们来说不仅是交流，更有在朋友圈中或空间中进行分享自己的生活，同时也可以通过这个渠道知道别人的生活。我们在看朋友圈的时候其实我们扮演的就是一个观察者，朋友圈或空间里的动态可以看作是主体对象。接下来我们就介绍一下观察者模式&lt;/p&gt;

&lt;p&gt;　　定义了对象之间的一对多依赖，让多个观察者对象同时监听某一个主体对象，当主体对象发生变化时，它的所有观察者都会收到通知并更新。&lt;/p&gt;

&lt;h4&gt;　　1、关联行为场景，建立一套触发机制&lt;/h4&gt;
&lt;p&gt;　　　　这里稍微理解一下，你有一个特别关心，这个特别关心发消息，发动态都会通知你，发消息是一个行为，通知你又是一个行为，我们可以在观察者模式中建立一套触发机制，当她发消息的时候就会通知你。这就是关联行为和触发机制。&lt;/p&gt;

&lt;p&gt;　　本来是想结合JDK来讲的，但是观察者模式在JDK中应用的更多是监听器，主要用来做C/S架构的，在实际中很少用。但是JDK中会提供Observable类作为抽象被观察者，而Observer作为抽象观察者接口。所以这里就自己动手写一下观察者模式。下面我们介绍观察者模式需要的角色：&lt;/p&gt;
&lt;h4&gt;　　1、抽象观察者角色：&lt;/h4&gt;
&lt;p&gt;　　　　为所有的具体观察者定义一个接口，在得到被观察者做出行为时通知更新自己。&lt;/p&gt;
&lt;h4&gt;　　2、具体观察者角色：&lt;/h4&gt;
&lt;p&gt;　　　　实现抽象观察者角色所需要的更新接口，并接受观察者的通知信息。&lt;/p&gt;
&lt;h4&gt;　　3、抽象被观察者角色：&lt;/h4&gt;
&lt;p&gt;　　　　它把所有对观察者对象的引用保存在一个集合中，每个主体都可以有任意数量的观察者。抽象主体提供一个接口，可以增加和删除观察者角色。一般用一个抽象类和接口来实现。&lt;/p&gt;
&lt;h4&gt;　　4、具体被观察者角色：&lt;/h4&gt;
&lt;p&gt;　　　　也就是一个具体的主体，在主体的内部状态改变时，向所有观察者发出通知。&lt;/p&gt;
&lt;p&gt;　　由于JDK中已经自带了两个抽象角色，所以就直接使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Observable {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; changed = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Vector&amp;lt;Observer&amp;gt;&lt;span&gt; obs;

  
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Observable() {
        obs &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Vector&amp;lt;&amp;gt;&lt;span&gt;();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addObserver(Observer o) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (o == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullPointerException();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;obs.contains(o)) {
            obs.addElement(o);
        }
    }

  
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteObserver(Observer o) {
        obs.removeElement(o);
    }

 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; notifyObservers() {
        notifyObservers(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }

    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; notifyObservers(Object arg) {
     
        Object[] arrLocal;

        &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;) {
           
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;changed)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            arrLocal &lt;/span&gt;=&lt;span&gt; obs.toArray();
            clearChanged();
        }

        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = arrLocal.length-1; i&amp;gt;=0; i--&lt;span&gt;)
            ((Observer)arrLocal[i]).update(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arg);
    }

 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteObservers() {
        obs.removeAllElements();
    }

   
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setChanged() {
        changed &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

   
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; clearChanged() {
        changed &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasChanged() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; changed;
    }

  
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; countObservers() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; obs.size();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面是抽象被观察者角色（不是抽象类或接口，但在这里我们就这样理解），可以看见这里面基本都是同步的容器，方法，obs主要是放观察者的。因为继承这个类的子类是被观察者，注意多个观察者是观察一个被观察者，但是一个观察者可以观察多个被观察对象。两个之间是多对多的关系，我们现在主要先实现多个观察者观察一个被观察对象的情况&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Observer {

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; update(Observable o, Object arg);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面是抽象观察者角色。里面的update方法的意思是当被观察者做出一定行为后，观察者就可以接受到一些消息。但需要我们去实现具体监听的方式。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Observable;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 扮演被观察者具体实现类
 *created by Mr.F on 2019/4/14
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Course &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Observable {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String courseName;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCourseName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; courseName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCourseName(String courseName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.courseName =&lt;span&gt; courseName;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; produceQuestion(Course course,Question question){
        System.out.println(question.getStudentName()&lt;/span&gt;+&quot;在&quot;+course.courseName+&quot;提了&quot;+&lt;span&gt;question.getQuestionContext());
        setChanged();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变被观察者的状态&lt;/span&gt;
&lt;span&gt;        notifyObservers(question);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;被悲观者中的具体内容&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Question {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String questionContext;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String studentName;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getStudentName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; studentName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setStudentName(String studentName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.studentName =&lt;span&gt; studentName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getQuestionContext() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; questionContext;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setQuestionContext(String questionContext) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.questionContext =&lt;span&gt; questionContext;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Observer;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 *观察者具体实现类
 * created by Mr.F on 2019/4/14
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Teacher &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Observer {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String teacherName;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getTeacherName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; teacherName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setTeacherName(String teacherName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.teacherName =&lt;span&gt; teacherName;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; update(java.util.Observable o, Object arg) {
        Course course&lt;/span&gt;= (Course) o;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;强转被观察者对象&lt;/span&gt;
        Question question=&lt;span&gt; (Question) arg;
        System.out.println(teacherName&lt;/span&gt;+&quot;收到了来自&quot;+course.getCourseName()+&quot;的&quot;+&lt;span&gt;question.getQuestionContext());

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的代码不多说，可以看注释，主要是一个Teacher类作为观察者，Course类作为被观察者。这里主要看Course中的produceQuestion方法和Teacher中的update方法。再去看上面抽象角色中的具体实现就能明白之间的调用，这里简单说一下，当将观察者添加进Observable中的obs数组的时候，每次调用produceQuestion方法，都能使得观察者中能得到信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * created by Mr.F on 2019/4/14
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Question question&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Question();
        question.setStudentName(&lt;/span&gt;&quot;方块人&quot;&lt;span&gt;);
        question.setQuestionContext(&lt;/span&gt;&quot;观察者模式怎么写？&quot;&lt;span&gt;);
        Course course &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Course();
        course.setCourseName(&lt;/span&gt;&quot;设计模式课堂&quot;&lt;span&gt;);
        Teacher teacher1&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Teacher();
        Teacher teacher2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Teacher();
        teacher1.setTeacherName(&lt;/span&gt;&quot;老师1&quot;&lt;span&gt;);
        teacher2.setTeacherName(&lt;/span&gt;&quot;老师2&quot;&lt;span&gt;);
        course.addObserver(teacher1);
        course.addObserver(teacher2);
        course.produceQuestion(course,question);


    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面是测试类代码。下面是输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1646058/201904/1646058-20190414224405833-576423018.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　其实每个观察者模式并不一定要像上面那样实现两个接口，而是有很多方式，不要学了模板，忘了原理。平常在做web项目的时候，做点赞系统，其实更多用的是观察者模式+生产者模式+消费者模式+异步队列。为什么会用到上面这么多模式呢，其实主要是考虑到并发的问题，上面的java中自带的Observable是用锁的方式，如果被观察者同时做了很多事情，这里我们可以用异步队列来进行处理后期的行为。&lt;span&gt;观察者模式核心就是当被观察者做出行为的时候，观察者一定会进行更新&lt;/span&gt;。一定要多看上面那两个接口是如何调用的。&lt;/p&gt;
</description>
<pubDate>Sun, 14 Apr 2019 15:04:00 +0000</pubDate>
<dc:creator>方块人</dc:creator>
<og:description>前言： 现在我们生活中已经离不开微信，QQ等交流软件，这对于我们来说不仅是交流，更有在朋友圈中或空间中进行分享自己的生活，同时也可以通过这个渠道知道别人的生活。我们在看朋友圈的时候其实我们扮演的就是一</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Cubemen/p/10708107.html</dc:identifier>
</item>
<item>
<title>最近学习了责任链模式 - 五月的仓颉</title>
<link>http://www.cnblogs.com/xrq730/p/10633761.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xrq730/p/10633761.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;来菜鸟这个大家庭10个月了，总得来说比较融入了环境，同时在忙碌的工作中也深感技术积累不够，在优秀的人身边工作必须更加花时间去提升自己的技术能力、技术视野，所以开一个系列文章，标题就轻松一点叫做最近学习了XXX吧，记录一下自己的学习心得。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由于最近想对系统进行一个小改造，想到使用责任链模式会非常适合，因此就系统地学习总结了一下责任链模式，分享给大家。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;责任链模式的定义与特点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;责任链模式的定义：&lt;span&gt;&lt;strong&gt;使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系，将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理他为止&lt;/strong&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;标准的责任链模式，个人总结下来有如下几个特点：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;链上的每个对象都有机会处理请求&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;链上的每个对象都持有下一个要处理对象的引用&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;链上的某个对象无法处理当前请求，那么它会把相同的请求传给下一个对象&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;用一张图表示以下使用了责任链模式之后的架构：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/801753/201904/801753-20190414171911634-504849462.png&quot; alt=&quot;&quot; width=&quot;756&quot; height=&quot;111&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;也就是说，&lt;span&gt;&lt;strong&gt;责任链模式满足了请求发送者与请求处理者之间的松耦合，抽象非核心的部分，以链式调用的方式对请求对象进行处理&lt;/strong&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这么说不明白？那么下面通过实际例子让你明白。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;不使用责任链模式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;为什么要使用责任链模式，那么我们得知道不使用责任链模式有什么坏处，然后通过使用责任链模式如何将代码优化。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;现在有一个场景：小明要去上学，妈妈给小明列了一些上学前需要做的清单（洗头、吃早饭、洗脸），小明必须按照妈妈的要求，把清单上打钩的事情做完了才可以上学。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;首先我们定义一个准备列表PreparationList：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PreparationList {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;     * 是否洗脸
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; washFace;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;     * 是否洗头
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; washHair;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;     * 是否吃早餐
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; haveBreakfast;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isWashFace() {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; washFace;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setWashFace(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; washFace) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.washFace =&lt;span&gt; washFace;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isWashHair() {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; washHair;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setWashHair(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; washHair) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.washHair =&lt;span&gt; washHair;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isHaveBreakfast() {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; haveBreakfast;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setHaveBreakfast(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; haveBreakfast) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.haveBreakfast =&lt;span&gt; haveBreakfast;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;ThingList [washFace=&quot; + washFace + &quot;, washHair=&quot; + washHair + &quot;, haveBreakfast=&quot; + haveBreakfast + &quot;]&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     
&lt;span&gt;47&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;定义了三件事情：洗头、洗脸、吃早餐。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接着定义一个学习类，按妈妈要求，把妈妈要求的事情做完了再去上学：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Study {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; study(PreparationList preparationList) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (preparationList.isWashHair()) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             System.out.println(&quot;洗脸&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (preparationList.isWashHair()) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             System.out.println(&quot;洗头&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (preparationList.isHaveBreakfast()) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             System.out.println(&quot;吃早餐&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         
&lt;span&gt;14&lt;/span&gt;         System.out.println(&quot;我可以去上学了！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     
&lt;span&gt;17&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这个例子实现了我们的需求，但是不够优雅，我们的主流程是学习，但是把要准备做的事情这些动作耦合在学习中，这样有两个问题：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;PreparationList中增加一件事情的时候，比如增加化妆、打扫房间，必须修改study方法进行适配&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;当这些事情的顺序需要发生变化的时候，必须修改study方法，比如先洗头再洗脸，那么7~9行的代码必须和4~6行的代码互换位置&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;最糟糕的写法，只是为了满足功能罢了，违背开闭原则，即当我们扩展功能的时候需要去修改主流程，无法做到对修改关闭、对扩展开放。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;使用责任链模式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接着看一下使用责任链模式的写法，既然责任链模式的特点是“链上的每个对象都持有下一个对象的引用”，那么我们就这么做。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先抽象出一个AbstractPrepareFilter：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AbstractPrepareFilter {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; AbstractPrepareFilter nextPrepareFilter;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; AbstractPrepareFilter(AbstractPrepareFilter nextPrepareFilter) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.nextPrepareFilter =&lt;span&gt; nextPrepareFilter;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doFilter(PreparationList preparationList, Study study) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        prepare(preparationList);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (nextPrepareFilter == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            study.study();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            nextPrepareFilter.doFilter(preparationList, study);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; prepare(PreparationList preparationList);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     
&lt;span&gt;21&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;留一个抽象方法prepare给子类去实现，在抽象类中持有下一个对象的引用nextPrepareFilter，如果有，则执行；如果没有表示链上所有对象都执行完毕，执行Study类的study()方法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Study {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; study() {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         System.out.println(&quot;学习&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;接着我们实现AbstractPrepareList，就比较简单了，首先是洗头：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; WashFaceFilter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractPrepareFilter {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; WashFaceFilter(AbstractPrepareFilter nextPrepareFilter) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(nextPrepareFilter);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; prepare(PreparationList preparationList) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (preparationList.isWashFace()) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             System.out.println(&quot;洗脸&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     
&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;接着洗脸：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; WashHairFilter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractPrepareFilter {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; WashHairFilter(AbstractPrepareFilter nextPrepareFilter) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(nextPrepareFilter);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; prepare(PreparationList preparationList) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (preparationList.isWashHair()) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             System.out.println(&quot;洗头&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     
&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;最后吃早餐：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HaveBreakfastFilter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractPrepareFilter {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; HaveBreakfastFilter(AbstractPrepareFilter nextPrepareFilter) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(nextPrepareFilter);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; prepare(PreparationList preparationList) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (preparationList.isHaveBreakfast()) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             System.out.println(&quot;吃早餐&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     
&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;最后我们看一下调用方如何编写：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Test
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testResponsibility() {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     PreparationList preparationList = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PreparationList();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     preparationList.setWashFace(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     preparationList.setWashHair(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     preparationList.setHaveBreakfast(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         
&lt;span&gt; 8&lt;/span&gt;     Study study = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Study();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         
&lt;span&gt;10&lt;/span&gt;     AbstractPrepareFilter haveBreakfastFilter = &lt;span&gt;new&lt;/span&gt; HaveBreakfastFilter(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     AbstractPrepareFilter washFaceFilter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WashFaceFilter(haveBreakfastFilter);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     AbstractPrepareFilter washHairFilter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WashHairFilter(washFaceFilter);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    washHairFilter.doFilter(preparationList, study);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;至此使用责任链模式修改这段逻辑完成，看到我们完成了学习与准备工作之间的解耦，即核心的事情我们是要学习，此时无论加多少准备工作，都不需要修改study方法，只需要修改调用方即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是这种写法好吗？个人认为这种写法虽然符合开闭原则，但是两个明显的缺点对客户端并不友好：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;增加、减少责任链对象，需要修改客户端代码，即比如我这边想要增加一个打扫屋子的操作，那么testResponsibility()方法需要改动&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;AbstractPrepareFilter washFaceFilter = new WashFaceFilter(haveBreakfastFilter)这种调用方式不够优雅，客户端需要思考一下，到底真正调用的时候调用三个Filter中的哪个Filter&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;为此，我们来个终极版的、升级版的责任链模式。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;升级版责任链模式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面我们写了一个责任链模式，这种是一种初级的符合责任链模式的写法，最后也写了，这种写法是有明显的缺点的，那么接着我们看一下升级版的责任链模式如何写，解决上述问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以下的写法也是Servlet的实现方式，首先还是抽象一个Filter：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; StudyPrepareFilter {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; void doFilter(PreparationList preparationList, FilterChain filterChain);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意这里多了一个FilterChain，也就是责任链，是用于串起所有的责任对象的，它也是StudyPrepareFilter的一个子类：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FilterChain &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; StudyPrepareFilter {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pos = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Study study;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; List&amp;lt;StudyPrepareFilter&amp;gt;&lt;span&gt; studyPrepareFilterList;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; FilterChain(Study study) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.study =&lt;span&gt; study;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addFilter(StudyPrepareFilter studyPrepareFilter) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (studyPrepareFilterList == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             studyPrepareFilterList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;StudyPrepareFilter&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        studyPrepareFilterList.add(studyPrepareFilter);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doFilter(PreparationList thingList, FilterChain filterChain) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 所有过滤器执行完毕&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (pos ==&lt;span&gt; studyPrepareFilterList.size()) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            study.study();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         
&lt;span&gt;28&lt;/span&gt;         studyPrepareFilterList.get(pos++&lt;span&gt;).doFilter(thingList, filterChain);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     
&lt;span&gt;31&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;即这里有一个计数器，假设所有的StudyPrepareFilter没有调用完毕，那么调用下一个，否则执行Study的study()方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接着就比较简单了，实现StudyPrepareFilter类即可，首先还是洗头：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; WashHairFilter &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; StudyPrepareFilter {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doFilter(PreparationList preparationList, FilterChain filterChain) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (preparationList.isWashHair()) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             System.out.println(&quot;洗完头发&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        filterChain.doFilter(preparationList, filterChain);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意，这里每个实现类需要显式地调用filterChain的doFilter方法。洗脸：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; WashFaceFilter &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; StudyPrepareFilter {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doFilter(PreparationList preparationList, FilterChain filterChain) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (preparationList.isWashFace()) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             System.out.println(&quot;洗完脸&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        filterChain.doFilter(preparationList, filterChain);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;吃早饭：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HaveBreakfastFilter &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; StudyPrepareFilter {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doFilter(PreparationList preparationList, FilterChain filterChain) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (preparationList.isHaveBreakfast()) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             System.out.println(&quot;吃完早饭&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        filterChain.doFilter(preparationList, filterChain);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;最后看一下调用方：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Test
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testResponsibilityAdvance() {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     PreparationList preparationList = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PreparationList();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     preparationList.setWashFace(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     preparationList.setWashHair(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     preparationList.setHaveBreakfast(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         
&lt;span&gt; 8&lt;/span&gt;     Study study = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Study();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         
&lt;span&gt;10&lt;/span&gt;     StudyPrepareFilter washFaceFilter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WashFaceFilter();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     StudyPrepareFilter washHairFilter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WashHairFilter();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     StudyPrepareFilter haveBreakfastFilter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HaveBreakfastFilter();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         
&lt;span&gt;14&lt;/span&gt;     FilterChain filterChain = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FilterChain(study);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    filterChain.addFilter(washFaceFilter);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    filterChain.addFilter(washHairFilter);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    filterChain.addFilter(haveBreakfastFilter);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    filterChain.doFilter(preparationList, filterChain);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;完美解决第一版责任链模式存在的问题，至此增加、修改责任对象客户端调用代码都不需要再改动。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有的人可能会问，你这个增加、减少责任对象，testResponsibilityAdvance()方法，不是还得addFilter，或者删除一行吗？我们回想一下，Servlet我们增加或减少Filter需要改动什么代码吗？不用，我们需要改动的只是web.xml而已。同样的道理，FilterChain里面有studyPrepareFilterList，我们完全可以把FilterChain做成一个Spring Bean，所有的Filter具体实现类也都是Spring Bean，注入studyPrepareFilterList就好了，伪代码为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;filterChain&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;xxx.xxx.xxx.FilterChain&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;studyPrepareFilterList&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ref &lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;=&quot;washFaceFilter&quot; &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ref &lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;=&quot;washHairFilter&quot; &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ref &lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;=&quot;haveBreakfastFilter&quot; &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这样是不是完美解决了问题？我们新增、减少Filter，或者修改Filter顺序，只需要修改.xml文件即可，不仅核心逻辑符合开闭原则，调用方也符合开闭原则。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;责任链模式的使用场景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个就不多说了，最典型的就是Servlet中的Filter，有了上面的分析，大家应该也可以理解Servlet中责任链模式的工作原理了，然后为什么一个一个的Filter需要配置在web.xml中。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;责任链模式的结构&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;想想看，好像责任链模式也没有什么太复杂的结构，将责任抽象，实现责任接口，客户端发起调用，网上找了一张图表示一下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/801753/201904/801753-20190414185615760-1653661300.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;责任链模式的优点及使用场景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后说说责任链模式的优点吧，大致有以下几点：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;实现了请求发送者与请求处理者之间的松耦合&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可动态添加责任对象、删除责任对象、改变责任对象顺序，非常灵活&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;每个责任对象专注于做自己的事情，职责明确&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;什么时候需要用责任链模式？这个问题我是这么想的：系统设计的时候，&lt;span&gt;&lt;strong&gt;注意区分主次就好，即哪部分是核心流程，哪部分是辅助流程，辅助流程是否有N多if...if...if...的场景&lt;/strong&gt;&lt;/span&gt;，如果是且每个if都有一个统一的抽象，那么抽象辅助流程，把每个if作为一个责任对象进行链式调用，优雅实现，易复用可扩展。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 14 Apr 2019 15:03:00 +0000</pubDate>
<dc:creator>五月的仓颉</dc:creator>
<og:description>前言 来菜鸟这个大家庭10个月了，总得来说比较融入了环境，同时在忙碌的工作中也深感技术积累不够，在优秀的人身边工作必须更加花时间去提升自己的技术能力、技术视野，所以开一个系列文章，标题就轻松一点叫做最</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xrq730/p/10633761.html</dc:identifier>
</item>
</channel>
</rss>