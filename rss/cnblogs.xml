<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>一键安装AutoHotkey自动化热键脚本语言编程环境 By BoAi - 晓亮的博客</title>
<link>http://www.cnblogs.com/delphixx/p/10413002.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/delphixx/p/10413002.html</guid>
<description>&lt;pre&gt;
&lt;strong&gt;&lt;span&gt;&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;AutoHotkey 版本: 1.x
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;操作系统:    WinXP
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;作者:        甲壳虫&amp;lt;jdchenjian@gmail.com&amp;gt;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;博客:        &lt;/span&gt;&lt;span&gt;http://hi.baidu.com/jdchenjian&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;脚本说明：   此工具用来修改 AutoHotkey 脚本的右键菜单关联，适用于 AutoHotkey 安装版、绿色版。
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;脚本版本：   2009-01-21
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;修改作者：    兔子
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;更新说明：
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;2010.01.09    之前某个时间，修改AHK路径、编辑器路径、编译器路径，默认全部在当前目录下寻找
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;2010.01.09    去掉默认在新建菜单的勾
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;2010.06.21    如果SCITE为默认编辑器，则复制个人配置文件“SciTEUser.properties”到%USERPROFILE%
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;2010.06.25    修正因#NoEnv使%USERPROFILE%变量直接引用无效
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;2016.04.18    删除“2010.06.21”的改动
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt; 
&lt;span&gt; 18&lt;/span&gt; ; --- &lt;span&gt;20190207&lt;/span&gt; 晓亮修改 ---
&lt;span&gt; 19&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;#NoEnv
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;#SingleInstance, force
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;SendMode Input
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; SetWorkingDir %A_ScriptDir%
&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;; 版本(仅用于显示）
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; Script_Version=v1.&lt;span&gt;0.3&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;; AutoHotkey 原版的相关信息写在注册表HKCR主键中，
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;; 尝试是当前用户否有权操作该键，如果无权操作HKCR键（受限用户），
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;; 可通过操作注册表HKCU键来实现仅当前用户关联AHK脚本。
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; IsLimitedUser:=&lt;span&gt;0&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;RegWrite, REG_SZ, HKCR, .test
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; ErrorLevel
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;     IsLimitedUser:=&lt;span&gt;1&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;RegDelete, HKCR, .test
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; ErrorLevel
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;     IsLimitedUser:=&lt;span&gt;1&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt; 
&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; IsLimitedUser=&lt;span&gt;0&lt;/span&gt;&lt;span&gt; ; 非受限用户操作HKCR键
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;     RootKey=&lt;span&gt;HKCR
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;     Subkey=
&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;else&lt;/span&gt;&lt;span&gt; ; 受限用户操作HKCU键
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;     RootKey=&lt;span&gt;HKCU
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;     Subkey=Software\Classes\ ; &amp;lt;--&lt;span&gt; 为简化后面的脚本，此子键须以“\”结尾
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; 
&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;; 检查是否存在AHK注册表项
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; RegRead, FileType, %RootKey%, %Subkey%&lt;span&gt;.ahk
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; FileType&amp;lt;&amp;gt;
&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;     RegRead, value, %RootKey%, %Subkey%%FileType%&lt;span&gt;\Shell\Open\Command ;AHK路径
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;     AHK_Path:=&lt;span&gt;PathGetPath(value)
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;     RegRead, value, %RootKey%, %Subkey%%FileType%&lt;span&gt;\Shell\Edit\Command ;编辑器路径
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;     Editor_Path:=&lt;span&gt;PathGetPath(value)
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;     RegRead, value, %RootKey%, %Subkey%%FileType%&lt;span&gt;\Shell\Compile\Command ;编译器路径
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;     Compiler_Path:=&lt;span&gt;PathGetPath(value)
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;     RegRead, Template_Name, %RootKey%, %Subkey%&lt;span&gt;.ahk\ShellNew, FileName ;模板文件名
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;     FileType=&lt;span&gt;AutoHotkeyScript
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; 
&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; AHK_Path=
&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;     IfExist, %A_ScriptDir%&lt;span&gt;\AutoHotkey.exe
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         AHK_path=%A_ScriptDir%&lt;span&gt;\AutoHotkey.exe
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; Editor_Path=
&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;     IfExist, %A_ScriptDir%&lt;span&gt;\SciTE\SciTE.exe
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;         Editor_Path=%A_ScriptDir%&lt;span&gt;\SciTE\SciTE.exe
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; 
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; Compiler_Path=
&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;     IfExist, %A_ScriptDir%&lt;span&gt;\Compiler\Ahk2Exe.exe
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;         Compiler_Path=%A_ScriptDir%&lt;span&gt;\Compiler\Ahk2Exe.exe
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; Template_Name=
&lt;span&gt; 84&lt;/span&gt;     Template_Name=&lt;span&gt;Template.ahk
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; 
&lt;span&gt; 86&lt;/span&gt; ; --- &lt;span&gt;20190207&lt;/span&gt; 晓亮修改 ---
&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;;设置AHK默认文件夹为D:\Program\AutoHotkey
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; AHK_path=&lt;span&gt;D:\Program\AutoHotkey\AutoHotkeyU32.exe
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; Editor_Path=&lt;span&gt;D:\Program\AutoHotkey\SciTE\SciTE.exe
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; Compiler_Path=&lt;span&gt;D:\Program\AutoHotkey\Compiler\Ahk2Exe.exe
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt; Gui, Add, Tab, x10 y10 w480 h250 Choose1, 设置|&lt;span&gt;说明
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;     Gui, Tab, &lt;span&gt;1&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;        Gui, Add, GroupBox, x20 y40 w460 h50 , “运行脚本”关联的 AutoHotkey
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;         Gui, Add, Edit, x35 y60 w340 h20 vAHK_Path, %AHK_path%
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;        Gui, Add, Button, x385 y60 w40 h20 gFind_AHK, 浏览
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; 
&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;        Gui, Add, GroupBox, x20 y100 w460 h50 , “编辑脚本”关联的编辑器
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;         Gui, Add, Edit, x35 y120 w340 h20 vEditor_Path, %Editor_Path%
&lt;span&gt;100&lt;/span&gt; &lt;span&gt;        Gui, Add, Button, x385 y120 w40 h20 gChoose_Editor, 浏览
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;        Gui, Add, Button, x430 y120 w40 h20 gDefault_Editor, 默认
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt; &lt;span&gt;        Gui, Add, GroupBox, x20 y160 w460 h50 , “编译脚本”关联的编译器
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         Gui, Add, Edit, x35 y180 w340 h20 vCompiler_Path, %Compiler_Path%
&lt;span&gt;105&lt;/span&gt; &lt;span&gt;        Gui, Add, Button, x385 y180 w40 h20 gChoose_Compiler, 浏览
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;        Gui, Add, Button, x430 y180 w40 h20 gDefault_Compiler, 默认
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;        Gui, Add, Checkbox, x35 y230 w270 h20 gNew_Script vNew_Script, 右键“新建”菜单中增加“AutoHotkey 脚本”
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;        Gui, Add, Button, x310 y230 w80 h20 vEdit_Template gEdit_Template, 编辑脚本模板
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;        Gui, Add, Button, x400 y230 w80 h20 vDelete_Template gDelete_Template, 删除脚本模板
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; 
&lt;span&gt;112&lt;/span&gt;     Gui, Tab, &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;        Gui, Font, bold
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;         Gui, Add, Text,, AutoHotkey 脚本关联工具  ScriptSetting %Script_Version%
&lt;span&gt;115&lt;/span&gt; &lt;span&gt;        Gui, Font
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;        Gui, Font, CBlue underline
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;         Gui, Add, Text, gWebsite, 作者：甲壳虫 &amp;lt;jdchenjian@gmail.com&amp;gt;`n`n博客：http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;hi.baidu.com/jdchenjian&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt; &lt;span&gt;        Gui, Font
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;        Gui, Add, Text, w450, 此工具用来修改 AutoHotkey 脚本的右键菜单关联，适用于 AutoHotkey 安装版、绿色版。
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;        Gui, Add, Text, w450, 您可以用它来修改默认脚本编辑器、编译器，修改默认的新建脚本模板。设置后，在右键菜单中添加“运行脚本”、“编辑脚本”、“编译脚本”和“新建 AutoHotkey 脚本”等选项。
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;        Gui, Add, Text, w450, 要取消脚本的系统关联，请按“卸载”。注意：卸载后您将无法通过双击来运行脚本，也不能通过右键菜单来启动脚本编辑器...
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; 
&lt;span&gt;123&lt;/span&gt; &lt;span&gt;Gui, Tab
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;Gui, Add, Button, x100 y270 w60 h20 Default gInstall, 设置
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;Gui, Add, Button, x200 y270 w60 h20 gUninstall, 卸载
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;Gui, Add, Button, x300 y270 w60 h20 gCancel, 取消
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; 
&lt;span&gt;128&lt;/span&gt; Gui, Show, x250 y200 h300 w500 CEnter, ScriptSetting %Script_Version%
&lt;span&gt;129&lt;/span&gt; &lt;span&gt;GuiControl, Disable, Edit_Template ; 使“编辑脚本模板”按钮无效
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; IfNotExist, %A_WinDir%\ShellNew\%Template_Name%
&lt;span&gt;131&lt;/span&gt; &lt;span&gt;    GuiControl, Disable, Delete_Template ; 使“删除脚本模板”按钮无效
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; 
&lt;span&gt;133&lt;/span&gt; &lt;span&gt;; 当鼠标指向链接时，指针变成手形
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; hCurs:=DllCall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LoadCursor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UInt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,NULL,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;32649&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UInt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) ;IDC_HAND
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; OnMessage(&lt;span&gt;0x200&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WM_MOUSEMOVE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; 
&lt;span&gt;137&lt;/span&gt; ; --- &lt;span&gt;20190207&lt;/span&gt; 晓亮修改 ---
&lt;span&gt;138&lt;/span&gt; &lt;span&gt;goto&lt;/span&gt;&lt;span&gt;,Install
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; 
&lt;span&gt;141&lt;/span&gt; &lt;span&gt;; 改变鼠标指针为手形
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;WM_MOUSEMOVE(wParam,lParam)
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;     &lt;span&gt;global&lt;/span&gt;&lt;span&gt; hCurs
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;    MouseGetPos,,,,ctrl
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ctrl &lt;span&gt;in&lt;/span&gt;&lt;span&gt; static2
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;         DllCall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SetCursor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UInt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,hCurs)
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt; 
&lt;span&gt;152&lt;/span&gt; &lt;span&gt;GuiClose:
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; &lt;span&gt;GuiEscape:
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;Cancel:
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;    ExitApp
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; 
&lt;span&gt;157&lt;/span&gt; &lt;span&gt;    ; 查找 AutoHotkey 主程序
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; &lt;span&gt;Find_AHK:
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;     Gui +&lt;span&gt;OwnDialogs
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;     FileSelectFile, AHK_Path, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;, , 查找 AutoHotkey.exe, AutoHotkey.exe
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; AHK_Path&amp;lt;&amp;gt;
&lt;span&gt;162&lt;/span&gt;         GuiControl,,AHK_Path, %AHK_Path%
&lt;span&gt;163&lt;/span&gt; &lt;span&gt;    gosub Default_Compiler
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt; 
&lt;span&gt;166&lt;/span&gt; &lt;span&gt;; 选择脚本编辑器
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt; &lt;span&gt;Choose_Editor:
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;     Gui +&lt;span&gt;OwnDialogs
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;     FileSelectFile, Editor_Path, &lt;span&gt;3&lt;/span&gt;, , 选择脚本编辑器, 程序(*&lt;span&gt;.exe)
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; Editor_Path&amp;lt;&amp;gt;
&lt;span&gt;171&lt;/span&gt;         GuiControl,,Editor_Path, %Editor_Path%
&lt;span&gt;172&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt; 
&lt;span&gt;174&lt;/span&gt; &lt;span&gt;; 默认脚本编辑器
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt; &lt;span&gt;Default_Editor:
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;     IfExist, %A_ScriptDir%&lt;span&gt;\SciTE\SciTE.exe
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;         Editor_Path=%A_ScriptDir%&lt;span&gt;\SciTE\SciTE.exe
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; ifExist, %A_WinDir%&lt;span&gt;\system32\notepad.exe
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;             Editor_Path=%A_WinDir%&lt;span&gt;\system32\notepad.exe
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;     GuiControl,, Editor_Path, %Editor_Path%
&lt;span&gt;181&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;182&lt;/span&gt; 
&lt;span&gt;183&lt;/span&gt; &lt;span&gt;; 选择脚本编译器
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt; &lt;span&gt;Choose_Compiler:
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;     Gui +&lt;span&gt;OwnDialogs
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;     FileSelectFile, Compiler_Path, &lt;span&gt;3&lt;/span&gt;, , 选择脚本编译器, 程序(*&lt;span&gt;.exe)
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; Compiler_Path&amp;lt;&amp;gt;
&lt;span&gt;188&lt;/span&gt;         GuiControl,,Compiler_Path, %Compiler_Path%
&lt;span&gt;189&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;190&lt;/span&gt; 
&lt;span&gt;191&lt;/span&gt; &lt;span&gt;; 默认脚本编译器
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt; &lt;span&gt;Default_Compiler:
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt; &lt;span&gt;    GuiControlGet, AHK_Path
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt; &lt;span&gt;    SplitPath, AHK_Path, ,AHK_Dir
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt;     IfExist, %AHK_Dir%&lt;span&gt;\Compiler\Ahk2Exe.exe
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;         Compiler_Path=%AHK_Dir%&lt;span&gt;\Compiler\Ahk2Exe.exe
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt;         GuiControl,, Compiler_Path, %Compiler_Path%
&lt;span&gt;199&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;201&lt;/span&gt; 
&lt;span&gt;202&lt;/span&gt; &lt;span&gt;; 设置
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt; &lt;span&gt;Install:
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt; &lt;span&gt;    Gui, Submit
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt;     IfNotExist, %AHK_Path%
&lt;span&gt;206&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt;         MsgBox, &lt;span&gt;16&lt;/span&gt;, ScriptSetting %Script_Version%&lt;span&gt;, AutoHotkey 路径错误 ！
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;209&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt; 
&lt;span&gt;211&lt;/span&gt;     IfNotExist, %Editor_Path%
&lt;span&gt;212&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt;         MsgBox, &lt;span&gt;16&lt;/span&gt;, ScriptSetting %Script_Version%&lt;span&gt;, 编辑器路径错误 ！
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;215&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt; 
&lt;span&gt;217&lt;/span&gt;     IfNotExist, %Compiler_Path%
&lt;span&gt;218&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt;         MsgBox, &lt;span&gt;16&lt;/span&gt;, ScriptSetting %Script_Version%&lt;span&gt;, 编译器路径错误 ！
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;221&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt; 
&lt;span&gt;223&lt;/span&gt; &lt;span&gt;    ; 写入注册表
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt;     RegWrite, REG_SZ, %RootKey%, %Subkey%.ahk,, %FileType%
&lt;span&gt;225&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; New_Script=&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;226&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt;         RegWrite, REG_SZ, %RootKey%, %Subkey%.ahk\ShellNew, FileName, %Template_Name%
&lt;span&gt;228&lt;/span&gt;         IfNotExist, %A_WinDir%\ShellNew\%Template_Name%
&lt;span&gt;229&lt;/span&gt; &lt;span&gt;            gosub Create_Template
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;232&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt;         ; --- &lt;span&gt;20190207&lt;/span&gt; 晓亮修改 ---
&lt;span&gt;234&lt;/span&gt;         ; ---&lt;span&gt; 此处不要删除右键新建ahk文件的菜单所以注释掉此代码
&lt;/span&gt;&lt;span&gt;235&lt;/span&gt;         ;RegDelete, %RootKey%, %Subkey%&lt;span&gt;.ahk\ShellNew
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt;         IfExist, %A_WinDir%\ShellNew\%Template_Name%
&lt;span&gt;237&lt;/span&gt; &lt;span&gt;            gosub Delete_Template
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt; 
&lt;span&gt;240&lt;/span&gt;     RegWrite, REG_SZ, %RootKey%, %Subkey%%FileType%&lt;span&gt;,, AutoHotkey 脚本
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt;     RegWrite, REG_SZ, %RootKey%, %Subkey%%FileType%\DefaultIcon,, %AHK_Path%`,&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;242&lt;/span&gt;     RegWrite, REG_SZ, %RootKey%, %Subkey%%FileType%&lt;span&gt;\Shell,, Open
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt;     RegWrite, REG_SZ, %RootKey%, %Subkey%%FileType%&lt;span&gt;\Shell\Open,, 运行脚本
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt;     RegWrite, REG_SZ, %RootKey%, %Subkey%%FileType%\Shell\Open\Command,, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%AHK_Path%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;`%1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; `%*
&lt;span&gt;245&lt;/span&gt;     RegWrite, REG_SZ, %RootKey%, %Subkey%%FileType%&lt;span&gt;\Shell\Edit,, 编辑脚本
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt;     RegWrite, REG_SZ, %RootKey%, %Subkey%%FileType%\Shell\Edit\Command,, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Editor_Path%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;`%1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;247&lt;/span&gt;     RegWrite, REG_SZ, %RootKey%, %Subkey%%FileType%&lt;span&gt;\Shell\Compile,, 编译脚本
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt; &lt;span&gt;    IfInString, Compiler_Path, Ahk2Exe.exe
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;         RegWrite, REG_SZ, %RootKey%, %Subkey%%FileType%\Shell\Compile\Command,, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Compiler_Path%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&lt;span&gt;in&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;`%1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;250&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;251&lt;/span&gt;         RegWrite, REG_SZ, %RootKey%, %Subkey%%FileType%\Shell\Compile\Command,, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Compiler_Path%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;`%1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;252&lt;/span&gt; 
&lt;span&gt;253&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;        新版的scite不需要将“SciTEUser.properties”放在“USERPROFILE”目录下了
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt; &lt;span&gt;if Editor_Path=%A_ScriptDir%\SciTE\SciTE.exe
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt; &lt;span&gt;EnvGet,USERPROFILE,USERPROFILE
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt; &lt;span&gt;FileCopy,%A_ScriptDir%\SciTE\SciTEUser.properties,%USERPROFILE%\SciTEUser.properties,1
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;260&lt;/span&gt; 
&lt;span&gt;261&lt;/span&gt;     ;MsgBox, &lt;span&gt;64&lt;/span&gt;, ScriptSetting %Script_Version%&lt;span&gt;, 设置完毕 ！
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt; &lt;span&gt;    ExitApp
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt; 
&lt;span&gt;264&lt;/span&gt; &lt;span&gt;    ; 卸载
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt; &lt;span&gt;Uninstall:
&lt;/span&gt;&lt;span&gt;266&lt;/span&gt;     ; --- &lt;span&gt;20190207&lt;/span&gt; 晓亮修改 ---
&lt;span&gt;267&lt;/span&gt;     ;MsgBox, &lt;span&gt;36&lt;/span&gt;, ScriptSetting %Script_Version%
&lt;span&gt;268&lt;/span&gt; &lt;span&gt;    ;, 注意：卸载后您将无法通过双击来运行脚本，也不能通过右键菜单来启动脚本编辑器...`n`n确定要取消 AHK 脚本的系统关联吗 ？
&lt;/span&gt;&lt;span&gt;269&lt;/span&gt; &lt;span&gt;    ;IfMsgBox, Yes
&lt;/span&gt;&lt;span&gt;270&lt;/span&gt; &lt;span&gt;    ;{
&lt;/span&gt;&lt;span&gt;271&lt;/span&gt;     ;RegDelete, %RootKey%, %Subkey%&lt;span&gt;.ahk
&lt;/span&gt;&lt;span&gt;272&lt;/span&gt;     ;RegDelete, %RootKey%, %Subkey%%FileType%
&lt;span&gt;273&lt;/span&gt; &lt;span&gt;    ;gosub Delete_Template
&lt;/span&gt;&lt;span&gt;274&lt;/span&gt; &lt;span&gt;    ;ExitApp
&lt;/span&gt;&lt;span&gt;275&lt;/span&gt; &lt;span&gt;    ;}
&lt;/span&gt;&lt;span&gt;276&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;277&lt;/span&gt; 
&lt;span&gt;278&lt;/span&gt; &lt;span&gt;; 编辑脚本模板
&lt;/span&gt;&lt;span&gt;279&lt;/span&gt; &lt;span&gt;Edit_Template:
&lt;/span&gt;&lt;span&gt;280&lt;/span&gt; &lt;span&gt;    GuiControlGet, Editor_Path
&lt;/span&gt;&lt;span&gt;281&lt;/span&gt;     IfNotExist, %Editor_Path%
&lt;span&gt;282&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;283&lt;/span&gt;         MsgBox, &lt;span&gt;64&lt;/span&gt;, ScriptSetting %Script_Version%&lt;span&gt;, 脚本编辑器路径错误 ！
&lt;/span&gt;&lt;span&gt;284&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;285&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;286&lt;/span&gt;     IfNotExist, %A_WinDir%\ShellNew\%Template_Name%
&lt;span&gt;287&lt;/span&gt; &lt;span&gt;        gosub Create_Template
&lt;/span&gt;&lt;span&gt;288&lt;/span&gt;     Run, %Editor_Path% %A_WinDir%\ShellNew\%Template_Name%
&lt;span&gt;289&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;290&lt;/span&gt; 
&lt;span&gt;291&lt;/span&gt; ; 使编辑脚本模板按钮有效/&lt;span&gt;无效
&lt;/span&gt;&lt;span&gt;292&lt;/span&gt; &lt;span&gt;New_Script:
&lt;/span&gt;&lt;span&gt;293&lt;/span&gt; &lt;span&gt;    GuiControlGet, New_Script
&lt;/span&gt;&lt;span&gt;294&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; New_Script=&lt;span&gt;0&lt;/span&gt;
&lt;span&gt;295&lt;/span&gt; &lt;span&gt;        GuiControl, Disable, Edit_Template
&lt;/span&gt;&lt;span&gt;296&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;297&lt;/span&gt; &lt;span&gt;        GuiControl, Enable, Edit_Template
&lt;/span&gt;&lt;span&gt;298&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;299&lt;/span&gt; 
&lt;span&gt;300&lt;/span&gt; &lt;span&gt;; 新建脚本模板
&lt;/span&gt;&lt;span&gt;301&lt;/span&gt; &lt;span&gt;Create_Template:
&lt;/span&gt;&lt;span&gt;302&lt;/span&gt; &lt;span&gt;    GuiControlGet, AHK_Path
&lt;/span&gt;&lt;span&gt;303&lt;/span&gt;     FileGetVersion, AHK_Ver, %AHK_Path%
&lt;span&gt;304&lt;/span&gt; 
&lt;span&gt;305&lt;/span&gt; &lt;span&gt;    FileAppend,
&lt;/span&gt;&lt;span&gt;306&lt;/span&gt; &lt;span&gt;    (
&lt;/span&gt;&lt;span&gt;307&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;308&lt;/span&gt; &lt;span&gt;AutoHotkey 版本: %AHK_Ver%
&lt;/span&gt;&lt;span&gt;309&lt;/span&gt; &lt;span&gt;操作系统:    %A_OSVersion%
&lt;/span&gt;&lt;span&gt;310&lt;/span&gt; &lt;span&gt;作者:        %A_UserName%
&lt;/span&gt;&lt;span&gt;311&lt;/span&gt; &lt;span&gt;网站:        &lt;/span&gt;&lt;span&gt;http://www.AutoHotkey.com&lt;/span&gt;
&lt;span&gt;312&lt;/span&gt; &lt;span&gt;脚本说明：
&lt;/span&gt;&lt;span&gt;313&lt;/span&gt; &lt;span&gt;脚本版本：   v1.0
&lt;/span&gt;&lt;span&gt;314&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;315&lt;/span&gt; 
&lt;span&gt;316&lt;/span&gt; &lt;span&gt;#NoEnv
&lt;/span&gt;&lt;span&gt;317&lt;/span&gt; &lt;span&gt;SendMode Input
&lt;/span&gt;&lt;span&gt;318&lt;/span&gt; SetWorkingDir `%A_ScriptDir`%
&lt;span&gt;319&lt;/span&gt; 
&lt;span&gt;320&lt;/span&gt;     ), %A_WinDir%\ShellNew\%Template_Name%
&lt;span&gt;321&lt;/span&gt; 
&lt;span&gt;322&lt;/span&gt; &lt;span&gt;    GuiControl, Enable, Delete_Template ; 使“删除脚本模板”按钮有效
&lt;/span&gt;&lt;span&gt;323&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;324&lt;/span&gt; 
&lt;span&gt;325&lt;/span&gt; &lt;span&gt;; 删除脚本模板
&lt;/span&gt;&lt;span&gt;326&lt;/span&gt; &lt;span&gt;Delete_Template:
&lt;/span&gt;&lt;span&gt;327&lt;/span&gt; 
&lt;span&gt;328&lt;/span&gt;     ; --- &lt;span&gt;20190207&lt;/span&gt; 晓亮修改 ---
&lt;span&gt;329&lt;/span&gt;     ;MsgBox, &lt;span&gt;36&lt;/span&gt;, ScriptSetting %Script_Version%
&lt;span&gt;330&lt;/span&gt; &lt;span&gt;    ;    , 要删除当前的 AHK 脚本模板吗 ？`n`n脚本模板被删除后，仍可通过本工具重建模板。
&lt;/span&gt;&lt;span&gt;331&lt;/span&gt; &lt;span&gt;    ;IfMsgBox, Yes
&lt;/span&gt;&lt;span&gt;332&lt;/span&gt;     ;FileDelete, %A_WinDir%\ShellNew\%Template_Name%
&lt;span&gt;333&lt;/span&gt; &lt;span&gt;    ;GuiControl, Disable, Delete_Template ; 使“删除脚本模板”按钮无效
&lt;/span&gt;&lt;span&gt;334&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;335&lt;/span&gt; 
&lt;span&gt;336&lt;/span&gt; &lt;span&gt;; 打开网站
&lt;/span&gt;&lt;span&gt;337&lt;/span&gt; &lt;span&gt;Website:
&lt;/span&gt;&lt;span&gt;338&lt;/span&gt;     Run, http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;hi.baidu.com/jdchenjian&lt;/span&gt;
&lt;span&gt;339&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;340&lt;/span&gt; 
&lt;span&gt;341&lt;/span&gt; &lt;span&gt;; 从注册表值字符串中提取路径
&lt;/span&gt;&lt;span&gt;342&lt;/span&gt; &lt;span&gt;PathGetPath(pSourceCmd)
&lt;/span&gt;&lt;span&gt;343&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;344&lt;/span&gt;     local Path, ArgsStartPos = &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;345&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (SubStr(pSourceCmd, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;) = &lt;span&gt;&quot;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;346&lt;/span&gt;         Path := SubStr(pSourceCmd, &lt;span&gt;2&lt;/span&gt;, InStr(pSourceCmd, &lt;span&gt;&quot;&quot;&quot;&quot;&lt;/span&gt;, False, &lt;span&gt;2&lt;/span&gt;) - &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;347&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;348&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;349&lt;/span&gt;         ArgsStartPos := InStr(pSourceCmd, &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;350&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; ArgsStartPos
&lt;/span&gt;&lt;span&gt;351&lt;/span&gt;             Path := SubStr(pSourceCmd, &lt;span&gt;1&lt;/span&gt;, ArgsStartPos - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;352&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;353&lt;/span&gt;             Path = %pSourceCmd%
&lt;span&gt;354&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;355&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Path
&lt;/span&gt;&lt;span&gt;356&lt;/span&gt; }&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 21 Feb 2019 07:42:00 +0000</pubDate>
<dc:creator>晓亮的博客</dc:creator>
<og:description>一键安装AutoHotkey自动化热键脚本语言编程环境 By BoAi 595076941@QQ.com 2019年02月21日 1 rem 一键安装AutoHotkey自动化热键脚本语言编程环境 2</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/delphixx/p/10413002.html</dc:identifier>
</item>
<item>
<title>SLAM+语音机器人DIY系列：（六）SLAM建图与自主避障导航——1.在机器人上使用传感器 - 小虎哥哥爱学习</title>
<link>http://www.cnblogs.com/hiram-zhang/p/10412509.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hiram-zhang/p/10412509.html</guid>
<description>&lt;p&gt;&lt;span&gt;通过前面的基础学习，本章进入最为激动的&lt;span&gt;机器人自主导航&lt;/span&gt;的学习。在前面的学习铺垫后，终于迎来了最大乐趣的时刻，就是赋予我们的&lt;/span&gt;miiboo&lt;span&gt;机器人能自由行走的生命。本章将围绕机器人&lt;/span&gt;&lt;span&gt;SLAM&lt;/span&gt;&lt;span&gt;建图、导航避障、巡航、监控等内容展开。&lt;/span&gt;&lt;span&gt;本章内容：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1.&lt;span&gt;在机器人上使用传感器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2.google-cartographer&lt;span&gt;机器人&lt;/span&gt;&lt;span&gt;SLAM&lt;/span&gt;&lt;span&gt;建图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3.ros-navigation&lt;span&gt;机器人自主避障导航&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4.&lt;span&gt;多目标点导航及任务调度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;5.&lt;span&gt;机器人巡航与现场监控&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;SLAM&lt;/span&gt;&lt;span&gt;&lt;span&gt;建图&lt;/span&gt;需要用到底盘、激光雷达和&lt;/span&gt;&lt;span&gt;IMU&lt;/span&gt;&lt;span&gt;，所以这里详细介绍如何在机器人上使用这些传感器。要使用这些传感器也很简单，就是在机器人上开启相应传感器的&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;驱动节点，在设置合适的可配参数就行了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;需要注意的是，&lt;span&gt;底盘&lt;/span&gt;、&lt;span&gt;激光雷达&lt;/span&gt;、&lt;/span&gt;&lt;span&gt;IMU&lt;/span&gt;&lt;span&gt;这三个传感器都使用串口与树莓派通信，为了防止每次开机这三个设备的串口号发生变动，需要将&lt;span&gt;串口号进行绑定与重映射&lt;/span&gt;，操作方法在前面已经介绍过了，如果还没有绑定直接前往前面&lt;a href=&quot;https://www.cnblogs.com/hiram-zhang/p/10410163.html&quot; target=&quot;_blank&quot;&gt;相关内容参考&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里将建立一个叫&lt;/span&gt;catkin_ws&lt;span&gt;的&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;工作空间，专门用于存放机器人传感器相关的&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;驱动功能包。关于创建&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;工作空间的操作，请参考前面&lt;a href=&quot;https://www.cnblogs.com/hiram-zhang/p/10387292.html&quot; target=&quot;_blank&quot;&gt;相应部分内容&lt;/a&gt;，这里就不做讲解。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1.1.&lt;span&gt;使用底盘                &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在机器人上只需要使用&lt;/span&gt;miiboo&lt;span&gt;这个驱动包就可以驱动底盘了。将&lt;/span&gt;&lt;span&gt;miiboo&lt;/span&gt;&lt;span&gt;这个驱动包拷贝到&lt;/span&gt;&lt;span&gt;~/catkin_ws/src/&lt;/span&gt;&lt;span&gt;中，编译后就可以使用了。&lt;/span&gt;&lt;span&gt;miiboo&lt;/span&gt;&lt;span&gt;驱动包文件结构，如图&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;miiboo&lt;/span&gt;&lt;span&gt;驱动包中含有两个&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;功能包&lt;/span&gt;&lt;span&gt;miiboo_bringup&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;miiboo_description&lt;/span&gt;&lt;span&gt;，驱动&lt;/span&gt;&lt;span&gt;miiboo&lt;/span&gt;&lt;span&gt;底盘、底盘&lt;/span&gt;&lt;span&gt;PID&lt;/span&gt;&lt;span&gt;整定、里程计标定这些功能包含在&lt;/span&gt;&lt;span&gt;miiboo_bringup&lt;/span&gt;&lt;span&gt;中，&lt;/span&gt;&lt;span&gt;miiboo&lt;/span&gt;&lt;span&gt;底盘&lt;/span&gt;&lt;span&gt;urdf&lt;/span&gt;&lt;span&gt;模型包含在&lt;/span&gt;&lt;span&gt;miiboo_description&lt;/span&gt;&lt;span&gt;中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221150415825-2038559855.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;1&lt;span&gt;）&lt;/span&gt;&lt;span&gt;miiboo&lt;/span&gt;&lt;span&gt;驱动包文件结构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;底盘控制可配参数：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于底盘控制可配参数都放在&lt;/span&gt;miiboo_bringup/launch/minimal.launch&lt;span&gt;中，如图&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数&lt;/span&gt;com_port&lt;span&gt;是底盘控制的串口号，由于前面已经做了绑定，所以直接填入绑定好的名称&lt;/span&gt;&lt;span&gt;/dev/miiboo&lt;/span&gt;&lt;span&gt;就行了；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数&lt;/span&gt;speed_ratio&lt;span&gt;是里程计走直线标定值，这个值通过标定得到。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数&lt;/span&gt;wheel_distance&lt;span&gt;是里程计转角标定值，这个值通过标定得到。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其余参数一般不需要修改，如有需要可以结合阅读源码来了解参数含有和做相应修改。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221150927500-225246196.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;2&lt;span&gt;）底盘控制可配参数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;&lt;span&gt;驱动&lt;/span&gt;miiboo&lt;span&gt;底盘：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;其实很简单，一条命令启动&lt;/span&gt;miiboo&lt;span&gt;底盘控制。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
roslaunch miiboo_bringup minimal.launch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;底盘&lt;/span&gt;PID&lt;span&gt;整定：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;我们的&lt;/span&gt;miiboo&lt;span&gt;机器人底盘的&lt;/span&gt;&lt;span&gt;stm32&lt;/span&gt;&lt;span&gt;控制板中已经内置了整定好的&lt;/span&gt;&lt;span&gt;PID&lt;/span&gt;&lt;span&gt;参数，如果选用我们提供的控制板和电机，一般情况下是不需要整定&lt;/span&gt;&lt;span&gt;PID&lt;/span&gt;&lt;span&gt;的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于想体验一下&lt;/span&gt;PID&lt;span&gt;参数整定过程或将我们的&lt;/span&gt;&lt;span&gt;miiboo&lt;/span&gt;&lt;span&gt;机器人底盘的&lt;/span&gt;&lt;span&gt;stm32&lt;/span&gt;&lt;span&gt;控制板应用到其他地方的朋友，这里给出了整定&lt;/span&gt;&lt;span&gt;PID&lt;/span&gt;&lt;span&gt;的整个操作过程和思路，方便大家学习和更深层次的研究。这里主要讲解&lt;/span&gt;&lt;span&gt;PID&lt;/span&gt;&lt;span&gt;整定的操作，关于原理性的东西可以参考前面相关内容进行了解。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;由于底盘&lt;/span&gt;PID&lt;span&gt;整定是非必须的功能，所以没有对底盘&lt;/span&gt;&lt;span&gt;PID&lt;/span&gt;&lt;span&gt;整定的串口（&lt;/span&gt;&lt;span&gt;DEBUG-uart1&lt;/span&gt;&lt;span&gt;）做绑定，需要先手动插入该串口到树莓派&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;，然后手动查看该串口的设备号，并修改该设备号的可读写权限。然后将该设备号填入&lt;/span&gt;&lt;span&gt;miiboo_bringup/launch/pid_set.launch&lt;/span&gt;&lt;span&gt;中的&lt;/span&gt;&lt;span&gt;com_port&lt;/span&gt;&lt;span&gt;参数中。然后，需要启动底盘控制节点、底盘调试节点、键盘控制节点。键盘控制节点&lt;/span&gt;&lt;span&gt;teleop_twist_keyboard&lt;/span&gt;&lt;span&gt;需要通过&lt;/span&gt;&lt;span&gt;apt-get&lt;/span&gt;&lt;span&gt;命令来安装，&lt;/span&gt;&lt;span&gt;rqt_plot&lt;/span&gt;&lt;span&gt;是&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;提供的绘图工具。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#打开终端，启动底盘控制节点
roslaunch miiboo_bringup minimal.launch 

#再打开一个终端，启动底盘调试节点，按提示输入命令
roslaunch miiboo_bringup pid_set.launch

#安装键盘控制工具
&lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; apt-get &lt;span&gt;install&lt;/span&gt; ros-kinetic-teleop-twist-&lt;span&gt;keyboard

#再打开一个终端，启动键盘控制节点,
source  &lt;/span&gt;~/&lt;span&gt;.bashrc
rosrun teleop_twist_keyboard teleop_twist_keyboard.py

#再打开一个终端，用rqt_plot对底盘速度曲线进行绘制，指定曲线数据来源的topic
rosrun rqt_plot rqt_plot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ROS&lt;span&gt;提供的绘图工具&lt;/span&gt;&lt;span&gt;rqt_plot&lt;/span&gt;&lt;span&gt;用法很简单，在&lt;/span&gt;&lt;span&gt;rqt_plot&lt;/span&gt;&lt;span&gt;界面中，在&lt;/span&gt;&lt;span&gt;Topic&lt;/span&gt;&lt;span&gt;栏输入曲线数据来源，我们这里为左、右轮速度，然后点击旁边的“&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;”将曲线加入绘制界面，人如图&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221151211793-503555790.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;3&lt;span&gt;）用&lt;/span&gt;&lt;span&gt;rqt_plot&lt;/span&gt;&lt;span&gt;显示速度曲线&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;然后，通过在启动&lt;/span&gt;teleop_twist_keyboard&lt;span&gt;节点的终端通过&lt;/span&gt;&lt;span&gt;I/&amp;lt;/J/L&lt;/span&gt;&lt;span&gt;四个按键来控制底盘前进&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;后退&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;左转&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;右转控制，并观察速度曲线的变化，根据&lt;/span&gt;&lt;span&gt;PID&lt;/span&gt;&lt;span&gt;整定规则对&lt;/span&gt;&lt;span&gt;PID&lt;/span&gt;&lt;span&gt;参数进行整定，在启动&lt;/span&gt; &lt;span&gt;pid_set.launch&lt;/span&gt;&lt;span&gt;的终端下按相应提示输入&lt;/span&gt;&lt;span&gt;PID&lt;/span&gt;&lt;span&gt;参数实现对整定参数的编辑。直到得到一个比较好的速度曲线，就可以结束整定过程了。实时速度曲线显示，如图&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221151327607-1249664662.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;4&lt;span&gt;）实时速度曲线显示&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;里程计标定：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;机器人底盘运行的精度是衡量底盘的重要指标。底盘精度受里程计的走直线误差和转角误差影响。因此，需要对里程计的走直线和转角进行标定，尽量减小误差。&lt;/span&gt;miiboo&lt;span&gt;机器人底盘的&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;驱动中已经写好了相应的标定程序，跟里程计标定有关的文件主要有：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;.../miiboo_bringup/launch/check_linear.launch&lt;span&gt;为里程计走直线标定启动文件&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;.../miiboo_bringup/launch/check_angular.launch&lt;span&gt;为里程计转角标定启动文件&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;.../miiboo_bringup/launch/minimal.launch&lt;span&gt;为设置标定参数及底盘控制启动文件&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;下面是标定步骤过程。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;由于标定过程在前面已经讲解过了，请直接前往相应内容参考。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;miiboo&lt;span&gt;底盘&lt;/span&gt;&lt;span&gt;urdf&lt;/span&gt;&lt;span&gt;模型：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;urdf&lt;span&gt;模型描述了机器人底盘的形状、传感器之间的安装关系、各个传感器在&lt;/span&gt;&lt;span&gt;tf tree&lt;/span&gt;&lt;span&gt;中的关系。其实，&lt;/span&gt;&lt;span&gt;miiboo&lt;/span&gt;&lt;span&gt;底盘&lt;/span&gt;&lt;span&gt;urdf&lt;/span&gt;&lt;span&gt;模型的主要作用是提供各个传感器在&lt;/span&gt;&lt;span&gt;tf tree&lt;/span&gt;&lt;span&gt;中的关系，这些关系将在&lt;/span&gt;&lt;span&gt;SLAM&lt;/span&gt;&lt;span&gt;和导航算法中被使用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221151548055-369512135.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;5&lt;span&gt;）&lt;/span&gt;&lt;span&gt;miiboo&lt;/span&gt;&lt;span&gt;机器人底盘中各个传感器&lt;/span&gt;&lt;span&gt;tf&lt;/span&gt;&lt;span&gt;关系&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;图&lt;/span&gt;5&lt;span&gt;是&lt;/span&gt;&lt;span&gt;miiboo&lt;/span&gt;&lt;span&gt;机器人底盘中各个传感器&lt;/span&gt;&lt;span&gt;tf&lt;/span&gt;&lt;span&gt;关系，&lt;/span&gt;&lt;span&gt;base_footprint&lt;/span&gt;&lt;span&gt;是底盘的运动中心，&lt;/span&gt;&lt;span&gt;base_laser_link&lt;/span&gt;&lt;span&gt;是激光雷达的中心，&lt;/span&gt;&lt;span&gt;imu_link&lt;/span&gt;&lt;span&gt;为&lt;/span&gt;&lt;span&gt;IMU&lt;/span&gt;&lt;span&gt;模块的中心。以&lt;/span&gt;&lt;span&gt;base_footprint&lt;/span&gt;&lt;span&gt;为原点，建立机器人底盘的坐标系，坐标系为标准右手系，即底盘正前方为&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;轴、正左方为&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;轴、正上方为&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;轴、以&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;轴起始逆时针方向为&lt;/span&gt;&lt;span&gt;theta&lt;/span&gt;&lt;span&gt;轴。以&lt;/span&gt;&lt;span&gt;base_footprint&lt;/span&gt;&lt;span&gt;为父坐标系，建立&lt;/span&gt;&lt;span&gt;base_footprint-&amp;gt;base_laser_link&lt;/span&gt;&lt;span&gt;关系，建立&lt;/span&gt;&lt;span&gt;base_footprint-&amp;gt;imu_link&lt;/span&gt;&lt;span&gt;关系，就实现了各个传感器&lt;/span&gt;&lt;span&gt;tf&lt;/span&gt;&lt;span&gt;关系的构建，构建的具体实现在&lt;/span&gt;&lt;span&gt;miiboo_description/urdf/miiboo.urdf&lt;/span&gt;&lt;span&gt;中完成。如图&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;，为&lt;/span&gt;&lt;span&gt;miiboo.urdf&lt;/span&gt;&lt;span&gt;的具体内容。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221151650046-1718076120.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;6&lt;span&gt;）&lt;/span&gt;&lt;span&gt;miiboo&lt;/span&gt;&lt;span&gt;底盘&lt;/span&gt;&lt;span&gt;urdf&lt;/span&gt;&lt;span&gt;模型描述文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;要使用这个&lt;/span&gt;urdf&lt;span&gt;模型就很简单了，直接一句命令启动。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
roslaunch miiboo_description miiboo_description.launch
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;1.2.&lt;span&gt;使用激光雷达            &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在机器人上只需要使用&lt;/span&gt;ydlidar&lt;span&gt;这个驱动包就可以驱动&lt;/span&gt;&lt;span&gt;ydlidar-x4&lt;/span&gt;&lt;span&gt;雷达了。将&lt;/span&gt;&lt;span&gt;ydlidar&lt;/span&gt;&lt;span&gt;这个驱动包拷贝到&lt;/span&gt;&lt;span&gt;~/catkin_ws/src/&lt;/span&gt;&lt;span&gt;中，编译后就可以使用了。&lt;/span&gt;&lt;span&gt;ydlidar&lt;/span&gt;&lt;span&gt;驱动包文件结构，如图&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;ydlidar&lt;/span&gt;&lt;span&gt;驱动包中的其他文件我们不需要关心，这些都是由雷达厂商提供的标准驱动，只需要设置我们自己建立的&lt;/span&gt;&lt;span&gt;ydlidar/launch/my_x4.launch&lt;/span&gt;&lt;span&gt;文件，这个用于启动雷达。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221151923653-1833233350.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;7&lt;span&gt;）&lt;/span&gt;&lt;span&gt;ydlidar&lt;/span&gt;&lt;span&gt;驱动包文件结构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;激光雷达数据可配参数：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于激光雷达数据可配参数都放在&lt;/span&gt;ydlidar/launch/my_x4.launch&lt;span&gt;中，如图&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数&lt;/span&gt;port&lt;span&gt;是&lt;/span&gt;&lt;span&gt;激光雷达&lt;/span&gt;&lt;span&gt;的串口号，由于前面已经做了绑定，所以直接填入绑定好的名称&lt;/span&gt;/dev/lidar&lt;span&gt;就行了；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数&lt;/span&gt;range_min&lt;span&gt;和&lt;/span&gt;&lt;span&gt;range_max&lt;/span&gt;&lt;span&gt;是设置激光雷达数据的有效值区间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其余参数一般不需要修改，如有需要可以结合阅读源码来了解参数含有和做相应修改。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221152243090-1045408930.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;8&lt;span&gt;）激光雷达数据可配参数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;&lt;span&gt;驱动&lt;/span&gt;ydlidar-x4&lt;span&gt;激光雷达：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其实很简单，一条命令启动&lt;/span&gt;ydlidar-x4&lt;span&gt;激光雷达。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
roslaunch ydlidar my_x4.launch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;激光雷达数据格式：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;激光雷达采用右手坐标系，雷达正前方为&lt;/span&gt;x&lt;span&gt;轴、正左方为&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;轴、正上方为&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;轴、以&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;轴起始逆时针方向为&lt;/span&gt;&lt;span&gt;theta&lt;/span&gt;&lt;span&gt;轴。激光雷达的扫描数据以极坐标的形式表示，雷达正前方是极坐标&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;度方向、雷达正左方是极坐标&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;&lt;span&gt;度方向，红色点为扫描到的数据点，如图&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;所示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221152401116-1818504743.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;9&lt;span&gt;）激光雷达数据格式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;激光雷达的数据在&lt;/span&gt;ROS&lt;span&gt;中是以&lt;/span&gt;&lt;span&gt;sensor_msgs/LaserScan&lt;/span&gt;&lt;span&gt;消息类型进行表示，如图&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;angle_increment&lt;/span&gt;&lt;span&gt;表示激光数据点的极坐标递增角度，&lt;/span&gt;&lt;span&gt;ranges&lt;/span&gt;&lt;span&gt;数组存放实际的极坐标点距离值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221152506551-647728205.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;10&lt;span&gt;）激光雷达数据&lt;/span&gt;&lt;span&gt;sensor_msgs/LaserScan&lt;/span&gt;&lt;span&gt;消息类型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1.3.&lt;span&gt;使用&lt;/span&gt;&lt;span&gt;IMU                                                  &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;在机器人上只需要使用&lt;/span&gt;miiboo_imu&lt;span&gt;这个驱动包就可以驱动&lt;/span&gt;&lt;span&gt;mpu9250&lt;/span&gt;&lt;span&gt;模块了。将&lt;/span&gt;&lt;span&gt;miiboo_imu&lt;/span&gt;&lt;span&gt;这个驱动包拷贝到&lt;/span&gt;&lt;span&gt;~/catkin_ws/src/&lt;/span&gt;&lt;span&gt;中，编译后就可以使用了。&lt;/span&gt;&lt;span&gt;miiboo_imu&lt;/span&gt;&lt;span&gt;驱动包文件结构，如图&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;ydlidar&lt;/span&gt;&lt;span&gt;驱动包中的其他文件我们不需要关心，只需要设置&lt;/span&gt;&lt;span&gt;ydlidar/launch/my_x4.launch&lt;/span&gt;&lt;span&gt;文件，这个用于启动&lt;/span&gt;&lt;span&gt;IMU&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221152633825-1874727900.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;11&lt;span&gt;）&lt;/span&gt;&lt;span&gt;miiboo_imu&lt;/span&gt;&lt;span&gt;驱动包文件结构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMU&lt;span&gt;数据可配参数：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于&lt;/span&gt;IMU&lt;span&gt;数据可配参数都放在&lt;/span&gt;&lt;span&gt;miiboo_imu/launch/imu.launch&lt;/span&gt;&lt;span&gt;中，如图&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数&lt;/span&gt;come_port&lt;span&gt;是&lt;/span&gt;&lt;span&gt;IMU&lt;/span&gt;&lt;span&gt;的串口号，由于前面已经做了绑定，所以直接填入绑定好的名称&lt;/span&gt;&lt;span&gt;/dev/imu&lt;/span&gt;&lt;span&gt;就行了；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其余参数一般不需要修改，如有需要可以结合阅读源码来了解参数含有和做相应修改。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221152743381-1300887356.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;12&lt;span&gt;）&lt;/span&gt;&lt;span&gt;IMU&lt;/span&gt;&lt;span&gt;数据可配参数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;驱动&lt;/span&gt;IMU&lt;span&gt;模块：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;其实很简单，一条命令启动&lt;/span&gt;IMU&lt;span&gt;模块。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
roslaunch miiboo_imu imu.launch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;IMU&lt;span&gt;数据格式：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IMU&lt;span&gt;模块采用右手坐标系，&lt;/span&gt;&lt;span&gt;IMU&lt;/span&gt;&lt;span&gt;模块正前方为&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;轴、正左方为&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;轴、正上方为&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;轴。&lt;/span&gt;&lt;span&gt;IMU&lt;/span&gt;&lt;span&gt;模块提供&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;轴加速度、&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;轴角速度、&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;轴磁力计、经数据融合后用欧拉角表示的姿态。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;IMU&lt;span&gt;数据在&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;中是以&lt;/span&gt;&lt;span&gt;sensor_msgs/Imu&lt;/span&gt;&lt;span&gt;消息类型进行表示，如图&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221152927630-306463928.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;13&lt;span&gt;）&lt;/span&gt;&lt;span&gt;IMU&lt;/span&gt;&lt;span&gt;数据&lt;/span&gt;&lt;span&gt;sensor_msgs/Imu&lt;/span&gt;&lt;span&gt;消息类型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1.4.&lt;span&gt;使用摄像头               &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;miiboo&lt;span&gt;机器人上使用的是&lt;/span&gt;&lt;span&gt;USB&lt;/span&gt;&lt;span&gt;摄像头，用&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;驱动&lt;/span&gt;&lt;span&gt;USB&lt;/span&gt;&lt;span&gt;摄像头可以采用以下&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;中方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;方法&lt;/span&gt;1&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用&lt;/span&gt;usb_cam&lt;span&gt;这个&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;包直接驱动&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;方法&lt;/span&gt;2&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用&lt;/span&gt;gscam&lt;span&gt;这个&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;包直接驱动&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;方法&lt;/span&gt;3&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自制&lt;/span&gt;OpenCV&lt;span&gt;，&lt;/span&gt;&lt;span&gt;cv_bridge&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;image_transport&lt;/span&gt;&lt;span&gt;驱动&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;包&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了方便起见，我采用的是方法&lt;/span&gt;1&lt;span&gt;，直接安装&lt;/span&gt;&lt;span&gt;usb_cam&lt;/span&gt;&lt;span&gt;这个&lt;/span&gt;&lt;span&gt;ROS&lt;/span&gt;&lt;span&gt;包直接驱动。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;usb_cam&lt;span&gt;摄像头驱动安装：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将&lt;/span&gt;usb_cam&lt;span&gt;下载到&lt;/span&gt;&lt;span&gt;~/catkin_ws/src/&lt;/span&gt;&lt;span&gt;中，直接编译就行了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
cd  ~/catkin_ws/src/&lt;span&gt;
git clone https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/ros-drivers/usb_cam.git&lt;/span&gt;
&lt;span&gt;
rosdep &lt;/span&gt;&lt;span&gt;install&lt;/span&gt;&lt;span&gt; usb_cam
cd  &lt;/span&gt;~/catkin_ws/&lt;span&gt;
catkin_make&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;摄像头数据可配参数：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于摄像头数据可配参数都放在&lt;/span&gt;usb_cam/launch/usb_cam.launch&lt;span&gt;中，如图&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数&lt;/span&gt;video_device&lt;span&gt;是摄像头的设备号，由于直插了一个&lt;/span&gt;&lt;span&gt;USB&lt;/span&gt;&lt;span&gt;摄像头，所以直接填入名称&lt;/span&gt;&lt;span&gt;/dev/video0&lt;/span&gt;&lt;span&gt;就行了；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其余参数一般不需要修改，如有需要可以结合阅读源码来了解参数含有和做相应修改。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221153138148-438436848.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;14&lt;span&gt;）摄像头数据可配参数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;驱动&lt;/span&gt;USB&lt;span&gt;摄像头：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其实很简单，一条命令启动&lt;/span&gt;USB&lt;span&gt;摄像头。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
roslaunch usb_cam usb_cam.launch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;摄像头远程显示：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;摄像头数据远程显示的方法有两种，方法一是在&lt;/span&gt;PC&lt;span&gt;端&lt;/span&gt;&lt;span&gt;rviz&lt;/span&gt;&lt;span&gt;中订阅摄像头发布的图像&lt;/span&gt;&lt;span&gt;topic&lt;/span&gt;&lt;span&gt;，方法二是用&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;手机上&lt;/span&gt;&lt;span&gt;miiboo&lt;/span&gt;&lt;span&gt;机器人&lt;/span&gt;&lt;span&gt;APP&lt;/span&gt;&lt;span&gt;直接显示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先说方法一，在&lt;/span&gt;PC&lt;span&gt;端打开&lt;/span&gt;&lt;span&gt;rviz&lt;/span&gt;&lt;span&gt;，在&lt;/span&gt;&lt;span&gt;rviz&lt;/span&gt;&lt;span&gt;中添加需要显示的&lt;/span&gt;&lt;span&gt;Topic&lt;/span&gt;&lt;span&gt;，这样就可以看到图像了。如图&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221153330935-1165433869.png&quot; alt=&quot;&quot; width=&quot;700&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;15&lt;span&gt;）在&lt;/span&gt;&lt;span&gt;rviz&lt;/span&gt;&lt;span&gt;中添加需要显示的图像&lt;/span&gt;&lt;span&gt;Topic&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221153418480-1269846968.png&quot; alt=&quot;&quot; width=&quot;700&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;16&lt;span&gt;）在&lt;/span&gt;&lt;span&gt;rviz&lt;/span&gt;&lt;span&gt;中显示图像&lt;/span&gt;&lt;span&gt;Topic&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;方法二，就很简单了，只要&lt;/span&gt;Android&lt;span&gt;手机上&lt;/span&gt;&lt;span&gt;miiboo&lt;/span&gt;&lt;span&gt;机器人&lt;/span&gt;&lt;span&gt;APP&lt;/span&gt;&lt;span&gt;连接到机器人端成功后，就能自动显示图像了。如图&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190221153525011-984298785.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;（图&lt;/span&gt;17&lt;span&gt;）在&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;手机的&lt;/span&gt;&lt;span&gt;miiboo&lt;/span&gt;&lt;span&gt;机器人&lt;/span&gt;&lt;span&gt;APP&lt;/span&gt;&lt;span&gt;中显示图像&lt;/span&gt;&lt;span&gt;Topic&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1.5.&lt;span&gt;局域网内广播机器人自己的&lt;/span&gt;&lt;span&gt;IP                 &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;这个很简单，由&lt;/span&gt;broadcast_ip&lt;span&gt;这个功能包实现，我已经写好放入&lt;/span&gt;&lt;span&gt;~/catkin_ws/src/&lt;/span&gt;&lt;span&gt;并编译了。只需要一句命令启动就行了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
roslaunch broadcast_ip broadcast_udp.launch
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果大家对博文的相关类容感兴趣，或有什么技术疑问，欢迎加入下面的《SLAM+语音机器人DIY》QQ技术交流群，一起讨论学习^_^&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204799/201902/1204799-20190220162438739-1654241751.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 21 Feb 2019 07:39:00 +0000</pubDate>
<dc:creator>小虎哥哥爱学习</dc:creator>
<og:description>摘要 通过前面的基础学习，本章进入最为激动的机器人自主导航的学习。在前面的学习铺垫后，终于迎来了最大乐趣的时刻，就是赋予我们的miiboo机器人能自由行走的生命。本章将围绕机器人SLAM建图、导航避障</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hiram-zhang/p/10412509.html</dc:identifier>
</item>
<item>
<title>Data Lake Analytics的Geospatial分析函数 - 阿里云云栖社区</title>
<link>http://www.cnblogs.com/yunqishequ/p/10412761.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yunqishequ/p/10412761.html</guid>
<description>&lt;h2 id=&quot;1&quot; data-spm-anchor-id=&quot;a2c4e.11153940.blogcont669048.i3.634a8596FDrVtT&quot;&gt;0. 简介&lt;/h2&gt;
&lt;p&gt;为满足部分客户在云上做Geometry数据的分析需求，阿里云Data Lake Analytics（以下简称：DLA）支持多种格式的地理空间数据处理函数，符合Open Geospatial Consortium’s (OGC) OpenGIS规范，支持的常用数据格式包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;WKT&lt;/li&gt;
&lt;li&gt;WKB&lt;/li&gt;
&lt;li&gt;GeoJson&lt;/li&gt;
&lt;li&gt;ESRI Geometry Object Json&lt;/li&gt;
&lt;li&gt;ESRI Shape&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;DLA采用4326坐标系标准，EPSG 4326使用经纬度坐标，属于地理坐标系。GPS采用的就是这个坐标系。&lt;/p&gt;
&lt;h2 id=&quot;2&quot;&gt;1. WKT数据&lt;/h2&gt;
&lt;p&gt;详细描述：&lt;br/&gt;https://en.wikipedia.org/wiki/Well-known_text&lt;br/&gt;http://www.opengeospatial.org/standards/wkt-crs&lt;/p&gt;
&lt;p&gt;支持类似如下的WKT相关字符串。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;POINT (0 0)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LINESTRING (0 0, 1 1, 1 2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MULTIPOINT (0 0, 1 2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MULTILINESTRING ((0 0, 1 1, 1 2), (2 3, 3 2, 5 4))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEOMETRYCOLLECTION (POINT (2 3), LINESTRING (2 3, 3 4))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;3&quot;&gt;2. WKB数据&lt;/h2&gt;
&lt;p&gt;详细描述：https://en.wikipedia.org/wiki/Well-known_text#Well-known_binary&lt;/p&gt;
&lt;p&gt;上述WKT数据和WKB的对应示例：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;WKT&lt;/th&gt;
&lt;th&gt;WKB&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;34&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;POINT (0 0)&lt;/td&gt;
&lt;td&gt;010100000000000000000000000000000000000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;LINESTRING (0 0, 1 1, 1 2)&lt;/td&gt;
&lt;td&gt;01020000000300000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F0000000000000040&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;16&quot;&gt;&lt;td&gt;POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1))&lt;/td&gt;
&lt;td&gt;01030000000200000005000000000000000000000000000000000000000000000000001040000000000000000000000000000010400000000000001040000000000000000000000000000010400000000000000000000000000000000005000000000000000000F03F000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;MULTIPOINT (0 0, 1 2)&lt;/td&gt;
&lt;td&gt;0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F0000000000000040&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11&quot;&gt;&lt;td&gt;MULTILINESTRING ((0 0, 1 1, 1 2), (2 3, 3 2, 5 4))&lt;/td&gt;
&lt;td&gt;01050000000200000001020000000300000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F0000000000000040010200000003000000000000000000004000000000000008400000000000000840000000000000004000000000000014400000000000001040&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;22&quot;&gt;&lt;td&gt;MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))&lt;/td&gt;
&lt;td&gtlt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;GEOMETRYCOLLECTION (POINT (2 3), LINESTRING (2 3, 3 4))&lt;/td&gt;
&lt;td&gt;0107000000020000000101000000000000000000004000000000000008400102000000020000000000000000000040000000000000084000000000000008400000000000001040&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;4&quot;&gt;3. GeoJson数据&lt;/h2&gt;
&lt;p&gt;GeoJson的详细描述：http://geojson.org/&lt;/p&gt;
&lt;h2 id=&quot;5&quot;&gt;4. ESRI Geometry Object Json数据&lt;/h2&gt;
&lt;p&gt;规范说明：http://resources.esri.com/help/9.3/arcgisserver/apis/REST/geometry.html&lt;/p&gt;
&lt;h2 id=&quot;6&quot;&gt;5. ESRI Shape二进制数据&lt;/h2&gt;
&lt;p&gt;规范说明：http://www.esri.com/LIBRARY/WHITEPAPERS/PDFS/SHAPEFILE.PDF&lt;/p&gt;
&lt;h2 id=&quot;7&quot;&gt;6. 函数列表&lt;/h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;67.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_asText&lt;/td&gt;
&lt;td&gt;将Geometry数据转成WKT格式的字符串数据。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_LineFromText&lt;/td&gt;
&lt;td&gt;输入WKT格式的Line字符串数据，生成Line的Geometry数据。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;ST_Point&lt;/td&gt;
&lt;td&gt;从坐标系的坐标值（X, Y），生成对应的Point的Geometry数据。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_Polygon&lt;/td&gt;
&lt;td&gt;输入WKT格式的Polygon字符串数据，生成Polygon的Geometry数据。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;ST_Area&lt;/td&gt;
&lt;td&gt;返回面或多面的面积。对于点、线，返回0.0。对于GeometryCollection，返回所有单个面积的和。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_GeometryFromText&lt;/td&gt;
&lt;td&gt;输入WKT格式的字符串数据，生成Geometry数据。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_Buffer&lt;/td&gt;
&lt;td&gt;获取几何对象和距离，然后返回表示围绕源对象的缓冲区的几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_Centroid&lt;/td&gt;
&lt;td&gt;获取几何对象的中心点。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_CoordDim&lt;/td&gt;
&lt;td&gt;返回几何对象的坐标值维度。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;ST_Dimension&lt;/td&gt;
&lt;td&gt;用于返回几何对象的维度。在这种情况下，维度是指长度和宽度。例如，点既没有长度也没有宽度，所以其维度为 0；而线只有长度却没有宽度，因此其维度为 1。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_IsClosed&lt;/td&gt;
&lt;td&gt;判断Line或者MultiLine是否闭合。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_IsEmpty&lt;/td&gt;
&lt;td&gt;判断几何对象是否为空。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_Length&lt;/td&gt;
&lt;td&gt;计算Line或者MultiLine的长度。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_XMax&lt;/td&gt;
&lt;td&gt;返回几何对象在坐标系中的最大X坐标值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_XMin&lt;/td&gt;
&lt;td&gt;返回几何对象在坐标系中的最小X坐标值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_YMax&lt;/td&gt;
&lt;td&gt;返回几何对象在坐标系中的最大Y坐标值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_YMin&lt;/td&gt;
&lt;td&gt;返回几何对象在坐标系中的最小Y坐标值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_NumInteriorRing&lt;/td&gt;
&lt;td&gt;以Polygon作为输入参数，并返回其内部环数。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_NumPoints&lt;/td&gt;
&lt;td&gt;用于返回几何对象中的点（折点）数。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_IsRing&lt;/td&gt;
&lt;td&gt;以Line作为输入参数，判断是否是环（如Line是闭合的）。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_StartPoint&lt;/td&gt;
&lt;td&gt;用于返回Line的第一个点。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_EndPoint&lt;/td&gt;
&lt;td&gt;用于返回Line的最后一个点。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ST_X&lt;/td&gt;
&lt;td&gt;返回Point的X坐标。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ST_Y&lt;/td&gt;
&lt;td&gt;返回Point的Y坐标。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_Boundary&lt;/td&gt;
&lt;td&gt;输入一个几何对象，然后以几何对象形式返回其组合边界。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_Envelope&lt;/td&gt;
&lt;td&gt;以多边形的形式返回几何对象的最小边界框。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_Difference&lt;/td&gt;
&lt;td&gt;输入两个几何对象，然后返回表示两个源对象之差的几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;ST_Distance&lt;/td&gt;
&lt;td&gt;用于返回两个几何对象之间的距离。这一距离是两个几何对象的最近折点之间的距离。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_ExteriorRing&lt;/td&gt;
&lt;td&gt;以Line形式返回面的外部环。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_Intersection&lt;/td&gt;
&lt;td&gt;以两个几何对象作为输入参数，然后以二维几何对象的形式返回交集。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_SymDifference&lt;/td&gt;
&lt;td&gt;返回表示两个几何对象间的点集对称差异的几何值对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_Contains&lt;/td&gt;
&lt;td&gt;输入两个几何对象，判断第一个对象是否完全包含第二个对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;ST_Crosses&lt;/td&gt;
&lt;td&gt;以两个几何对象作为输入，如果这两个对象的交集生成的几何对象的维度小于两个源对象中的最大维度，则返回 1。交集对象所包含的点必须在两个源几何的内部，并且不等于其中任何一个源对象。否则，返回 0。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_Disjoint&lt;/td&gt;
&lt;td&gt;输入两个几何对象，判断两个几何对象的交集是否为空集。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_Equals&lt;/td&gt;
&lt;td&gt;判断两个几何对象是否完全相同。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_Intersects&lt;/td&gt;
&lt;td&gt;判断两个几何对象的交集是否不生成空集。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;ST_Overlaps&lt;/td&gt;
&lt;td&gt;判断两个几何对象的交集生成的几何对象是否维度相同但不等于任一源对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;ST_Relate&lt;/td&gt;
&lt;td&gt;比较两个几何对象，判断是否满足“DE-9IM”模式（https://en.wikipedia.org/wiki/DE-9IM）矩阵字符串指定的条件。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_Touches&lt;/td&gt;
&lt;td&gt;判断两个几何对象的公共点是否都不与两个几何对象的内部相交。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_Within&lt;/td&gt;
&lt;td&gt;判断第一个几何对象是否完全位于第二个几何对象的范围内。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_asBinary&lt;/td&gt;
&lt;td&gt;输入一个几何对象，然后返回其可识别的二进制WKB数据。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;ST_GeometryFromWKBHexString&lt;/td&gt;
&lt;td&gt;输入WKB的HEX字符串数据，返回对应的几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_pointFromWKBHexString&lt;/td&gt;
&lt;td&gt;输入Point的WKB的HEX字符串数据，返回对应的Point几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_lineFromWKBHexString&lt;/td&gt;
&lt;td&gt;输入Line的WKB的HEX字符串数据，返回对应的Line几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_polyFromWKBHexString&lt;/td&gt;
&lt;td&gt;输入Polygon的WKB的HEX字符串数据，返回对应的Polygon几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;ST_MPointFromWKBHexString&lt;/td&gt;
&lt;td&gt;输入MultiPoint的WKB的HEX字符串数据，返回对应的MultiPoint几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_MLineFromWKBHexString&lt;/td&gt;
&lt;td&gt;输入MultiLine的WKB的HEX字符串数据，返回对应的MultiLine几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_MPolyFromWKBHexString&lt;/td&gt;
&lt;td&gt;输入MultiPolygon的WKB的HEX字符串数据，返回对应的MultiPolygon几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_GeometryFromWKB&lt;/td&gt;
&lt;td&gt;输入WKB数据，返回对应的几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_pointFromWKB&lt;/td&gt;
&lt;td&gt;输入Point的WKB数据，返回对应的Point几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_lineFromWKB&lt;/td&gt;
&lt;td&gt;输入Line的WKB数据，返回对应的Line几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_polyFromWKB&lt;/td&gt;
&lt;td&gt;输入Polygon的WKB数据，返回对应的Polygon几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_MPointFromWKB&lt;/td&gt;
&lt;td&gt;输入MultiPoint的WKB数据，返回对应的MultiPoint几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_MLineFromWKB&lt;/td&gt;
&lt;td&gt;输入MultiLine的WKB数据，返回对应的MultiLine几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_MPolyFromWKB&lt;/td&gt;
&lt;td&gt;输入MultiPolygon的WKB数据，返回对应的MultiPolygon几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_GeometryFromGeoJson&lt;/td&gt;
&lt;td&gt;输入GeoJson的字符串数据，返回对应的几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_GeometryFromJson&lt;/td&gt;
&lt;td&gt;输入ESRI Geometry Object Json的字符串数据，返回对应的几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_asGeoJson&lt;/td&gt;
&lt;td&gt;把几何对象转成GeoJson格式输出。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_asJson&lt;/td&gt;
&lt;td&gt;把几何对象转成ESRI Geometry Object Json格式输出。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ST_GeometryFromEsriShape&lt;/td&gt;
&lt;td&gt;输入ESRI Shape的二进制数据，返回对应的几何对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;UDF_SYS_GEO_IN_CYCLE&lt;/td&gt;
&lt;td&gt;仅适用于北半球：做基于地理位置的经纬度画圈&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;UDF_SYS_GEO_IN_RECTANGLE&lt;/td&gt;
&lt;td&gt;仅适用于北半球：用于做基于地理位置的经纬度画矩形&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;UDF_SYS_GEO_DISTANCE&lt;/td&gt;
&lt;td&gt;仅适用于北半球：用作一个经纬度列和一个固定的坐标点的距离计算&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;8&quot;&gt;7. 函数定义与示例&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_asText(GEOMETRY) -&amp;gt; VARCHAR&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将Geometry数据转成WKT格式的字符串数据。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_asText(ST_LineFromText(&lt;span class=&quot;hljs-string&quot;&gt;'LINESTRING (0 0, 1 1, 1 2)'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_LineFromText&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_LineFromText(VARCHAR) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入WKT格式的Line字符串数据，生成Line的Geometry数据。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_asText(ST_LineFromText(&lt;span class=&quot;hljs-string&quot;&gt;'LINESTRING (0 0, 1 1, 1 2)'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Point(DOUBLE, DOUBLE) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从坐标系的坐标值（X, Y），生成对应的Point的Geometry数据。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_asText(ST_Point(&lt;span class=&quot;hljs-number&quot;&gt;30.2741500000,&lt;span class=&quot;hljs-number&quot;&gt;120.1551500000));

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_Polygon&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Polygon(VARCHAR) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入WKT格式的Polygon字符串数据，生成Polygon的Geometry数据。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_asText(ST_Polygon(&lt;span class=&quot;hljs-string&quot;&gt;'POLYGON((0 0,4 0,4 4,0 4,0 0),(1 1, 2 1, 2 2, 1 2,1 1))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Area(Geometry) -&amp;gt; DOUBLE&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回面或多面的面积。对于点、线，返回0.0。对于GeometryCollection，返回所有单个面积的和。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_Area(ST_Polygon(&lt;span class=&quot;hljs-string&quot;&gt;'POLYGON((0 0,4 0,4 4,0 4,0 0),(1 1, 2 1, 2 2, 1 2,1 1))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_GeometryFromText&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_GeometryFromText(VARCHAR) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入WKT格式的字符串数据，生成Geometry数据。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Buffer(GEOMETRY, DOUBLE) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;获取几何对象和距离，然后返回表示围绕源对象的缓冲区的几何对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ST_Centroid&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Centroid(GEOMETRY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;获取几何对象的中心点。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_asText(ST_Centroid(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))')));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_CoordDim&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_CoordDim(GEOMETRY) -&amp;gt; BIGINT&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回几何对象的坐标值维度。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_CoordDim(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'POLYGON((0 0,4 0,4 4,0 4,0 0),(1 1, 2 1, 2 2, 1 2,1 1))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_Dimension&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Dimension(GEOMETRY) -&amp;gt; BIGINT&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用于返回几何对象的维度。在这种情况下，维度是指长度和宽度。例如，点既没有长度也没有宽度，所以其维度为 0；而线只有长度却没有宽度，因此其维度为 1。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_Dimension(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_IsClosed&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_IsClosed(GEOMETRY) -&amp;gt; BOOLEAN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;判断Line或者MultiLine是否闭合。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_IsClosed(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'LINESTRING (0 0, 1 1, 1 2)'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_IsEmpty&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_IsEmpty(GEOMETRY) -&amp;gt; BOOLEAN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;判断几何对象是否为空。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_IsEmpty(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'LINESTRING (0 0, 1 1, 1 2, 0 0)'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Length(GEOMETRY) -&amp;gt; DOUBLE&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;计算Line或者MultiLine的长度。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT ST_Length(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'LINESTRING (0 0, 1 1, 1 2, 0 0)'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_XMax(GEOMETRY) -&amp;gt; DOUBLE&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回几何对象在坐标系中的最大X坐标值。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT ST_XMax(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTILINESTRING ((0 0, 1 1, 1 2), (2 3, 3 2, 5 4))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_XMin(GEOMETRY) -&amp;gt; DOUBLE&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回几何对象在坐标系中的最小X坐标值。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT ST_XMin(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTILINESTRING ((0 0, 1 1, 1 2), (2 3, 3 2, 5 4))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_YMax(GEOMETRY) -&amp;gt; DOUBLE&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回几何对象在坐标系中的最大Y坐标值。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT ST_YMax(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTILINESTRING ((0 0, 1 1, 1 2), (2 3, 3 2, 5 4))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_YMin(GEOMETRY) -&amp;gt; DOUBLE&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回几何对象在坐标系中的最小Y坐标值。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT ST_YMin(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTILINESTRING ((0 0, 1 1, 1 2), (2 3, 3 2, 5 4))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_NumInteriorRing&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_NumInteriorRing(GEOMETRY) -&amp;gt; BIGINT&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以Polygon作为输入参数，并返回其内部环数。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT ST_NumInteriorRing(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'POLYGON((0 0,4 0,4 4,0 4,0 0),(1 1, 2 1, 2 2, 1 2,1 1))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_NumPoints&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_NumPoints(GEOMETRY) -&amp;gt; BIGINT&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用于返回几何对象中的点（折点）数。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT ST_NumPoints(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'POLYGON((0 0,4 0,4 4,0 4,0 0),(1 1, 2 1, 2 2, 1 2,1 1))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_IsRing(GEOMETRY) -&amp;gt; BOOLEAN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以Line作为输入参数，判断是否是环（如Line是闭合的）。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_IsRing(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'LINESTRING (0 0, 1 1, 1 2)'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_StartPoint&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_StartPoint(GEOMETRY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用于返回Line的第一个点。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_asText(ST_StartPoint(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'LINESTRING (0 0, 1 1, 1 2, 0 0)')));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_EndPoint&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_EndPoint(GEOMETRY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用于返回Line的最后一个点。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_asText(ST_EndPoint(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'LINESTRING (0 0, 1 1, 1 2)')));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_X(GEOMETRY) -&amp;gt; DOUBLE&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回Point的X坐标。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_X(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'POINT (0.5 1)'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Y(GEOMETRY) -&amp;gt; DOUBLE&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回Point的Y坐标。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_Y(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'POINT (0.5 1)'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_Boundary&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Boundary(GEOMETRY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入一个几何对象，然后以几何对象形式返回其组合边界。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_asText(ST_Boundary(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'POINT (0.5 1)')));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_Envelope&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Envelope(GEOMETRY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以多边形的形式返回几何对象的最小边界框。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_asText(ST_Envelope(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))')));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_Difference&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Difference(GEOMETRY, GEOMETRY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入两个几何对象，然后返回表示两个源对象之差的几何对象。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_asText(ST_Difference(
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'),
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTILINESTRING ((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 1 2, 2 2, 2 1, 1 1), (-1 -1, -2 -1, -2 -2, -1 -2, -1 -1))')));

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_Distance&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Distance(GEOMETRY, GEOMETRY) -&amp;gt; DOUBLE&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用于返回两个几何对象之间的距离。这一距离是两个几何对象的最近折点之间的距离。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_Distance(
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'),
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_ExteriorRing&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_ExteriorRing(GEOMETRY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以Line形式返回面的外部环。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_asText(ST_ExteriorRing(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'POLYGON((0 0,4 0,4 4,0 4,0 0),(1 1, 2 1, 2 2, 1 2,1 1))')));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_Intersection&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Intersection(GEOMETRY, GEOMETRY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以两个几何对象作为输入参数，然后以二维几何对象的形式返回交集。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_asText(ST_Intersection(
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'),
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))')));

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_SymDifference&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_SymDifference(GEOMETRY, GEOMETRY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;返回表示两个几何对象间的点集对称差异的几何值对象。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_asText(ST_SymDifference(
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'),
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))')));

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下图的阴影部分显示了对称差异的结果。对称差异为包括两个表面的多表面图形：其中一个表面包含位于正方形之内、圆形之外的所有点，另外一个表面包含位于圆形之内、正方形之外的所有点。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;image.png | left | 223x166&quot; src=&quot;https://cdn.yuque.com/lark/0/2018/png/32590/1529942494990-185db9b6-06ef-451c-839a-203890d2a102.png&quot; alt=&quot;image.png | left | 223x166&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ST_Contains&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Contains(GEOMETRY, GEOMETRY) -&amp;gt; BOOLEAN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入两个几何对象，判断第一个对象是否完全包含第二个对象。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_Contains(
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'),
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_Crosses&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Crosses(GEOMETRY, GEOMETRY) -&amp;gt; BOOLEAN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以两个几何对象作为输入，如果这两个对象的交集生成的几何对象的维度小于两个源对象中的最大维度，则返回 1。交集对象所包含的点必须在两个源几何的内部，并且不等于其中任何一个源对象。否则，返回 0。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_Crosses(
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'),
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_Disjoint&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Disjoint(GEOMETRY, GEOMETRY) -&amp;gt; BOOLEAN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入两个几何对象，判断两个几何对象的交集是否为空集。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_Disjoint(
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'),
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Equals(GEOMETRY, GEOMETRY) -&amp;gt; BOOLEAN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;判断两个几何对象是否完全相同。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_Equals(
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'),
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_Intersects&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Intersects(GEOMETRY, GEOMETRY) -&amp;gt; BOOLEAN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;判断两个几何对象的交集是否不生成空集。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_Intersects(
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'),
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_Overlaps&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Overlaps(GEOMETRY, GEOMETRY) -&amp;gt; BOOLEAN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;判断两个几何对象的交集生成的几何对象是否维度相同但不等于任一源对象。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_Overlaps(
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'),
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Relate(GEOMETRY, GEOMETRY, VARCHAR) -&amp;gt; BOOLEAN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;比较两个几何对象，判断是否满足“DE-9IM”模式（https://en.wikipedia.org/wiki/DE-9IM）矩阵字符串指定的条件。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_Relate(
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'),
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'),
  &lt;span class=&quot;hljs-string&quot;&gt;'102101FF2');

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_Touches&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Touches(GEOMETRY, GEOMETRY) -&amp;gt; BOOLEAN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;判断两个几何对象的公共点是否都不与两个几何对象的内部相交。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_Touches(
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'),
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_Within(GEOMETRY, GEOMETRY) -&amp;gt; BOOLEAN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;判断第一个几何对象是否完全位于第二个几何对象的范围内。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_Within(
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'),
  ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_asBinary&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_asBinary(GEOMETRY) -&amp;gt; VARBINARY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入一个几何对象，然后返回其可识别的二进制WKB数据。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ST_GeometryFromWKBHexString&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_GeometryFromWKBHexString(VARCHAR) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入WKB的HEX字符串数据，返回对应的几何对象。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_ASTEXT(ST_GeometryFromWKBHexString(&lt;span class=&quot;hljs-string&quot;&gt;'000000000140000000000000004010000000000000'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_pointFromWKBHexString&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_pointFromWKBHexString(VARCHAR) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入Point的WKB的HEX字符串数据，返回对应的Point几何对象。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_ASTEXT(ST_pointFromWKBHexString(&lt;span class=&quot;hljs-string&quot;&gt;'000000000140000000000000004010000000000000'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_lineFromWKBHexString&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_lineFromWKBHexString(VARCHAR) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入Line的WKB的HEX字符串数据，返回对应的Line几何对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ST_polyFromWKBHexString&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_polyFromWKBHexString(VARCHAR) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入Polygon的WKB的HEX字符串数据，返回对应的Polygon几何对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ST_MPointFromWKBHexString&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_MPointFromWKBHexString(VARCHAR) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入MultiPoint的WKB的HEX字符串数据，返回对应的MultiPoint几何对象。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT ST_asText(ST_MPointFromWKBHexString(&lt;span class=&quot;hljs-string&quot;&gt;'0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F0000000000000040'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_MLineFromWKBHexString&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_MLineFromWKBHexString(VARCHAR) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入MultiLine的WKB的HEX字符串数据，返回对应的MultiLine几何对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ST_MPolyFromWKBHexString&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_MPolyFromWKBHexString(VARCHAR) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入MultiPolygon的WKB的HEX字符串数据，返回对应的MultiPolygon几何对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ST_GeometryFromWKB&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_GeometryFromWKB(VARBINARY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入WKB数据，返回对应的几何对象。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_ASTEXT(ST_GeometryFromWKB(from_hex(&lt;span class=&quot;hljs-string&quot;&gt;'000000000140000000000000004010000000000000')));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_pointFromWKB&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_pointFromWKB(VARBINARY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入Point的WKB数据，返回对应的Point几何对象。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select ST_ASTEXT(ST_pointFromWKB(from_hex(&lt;span class=&quot;hljs-string&quot;&gt;'000000000140000000000000004010000000000000')));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_lineFromWKB&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_lineFromWKB(VARBINARY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入Line的WKB数据，返回对应的Line几何对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ST_polyFromWKB&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_polyFromWKB(VARBINARY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入Polygon的WKB数据，返回对应的Polygon几何对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ST_MPointFromWKB&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_MPointFromWKB(VARBINARY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入MultiPoint的WKB数据，返回对应的MultiPoint几何对象。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT ST_asText(ST_MPointFromWKB(from_hex(&lt;span class=&quot;hljs-string&quot;&gt;'0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F0000000000000040')));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_MLineFromWKB&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_MLineFromWKB(VARBINARY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入MultiLine的WKB数据，返回对应的MultiLine几何对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ST_MPolyFromWKB&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_MPolyFromWKB(VARBINARY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入MultiPolygon的WKB数据，返回对应的MultiPolygon几何对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ST_GeometryFromGeoJson&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_GeometryFromGeoJson(VARCHAR) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入GeoJson的字符串数据，返回对应的几何对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ST_GeometryFromJson&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_GeometryFromJson(VARCHAR) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入ESRI Geometry Object Json的字符串数据，返回对应的几何对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ST_asGeoJson&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_asGeoJson(GEOMETRY) -&amp;gt; VARCHAR&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;把几何对象转成GeoJson格式输出。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT ST_asGeoJson(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTILINESTRING ((0 0, 1 1, 1 2), (2 3, 3 2, 5 4))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_asJson(GEOMETRY) -&amp;gt; VARCHAR&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;把几何对象转成ESRI Geometry Object Json格式输出。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT ST_asJson(ST_GeometryFromText(&lt;span class=&quot;hljs-string&quot;&gt;'MULTILINESTRING ((0 0, 1 1, 1 2), (2 3, 3 2, 5 4))'));

+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ST_GeometryFromEsriShape&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;ST_GeometryFromEsriShape(VARBINARY) -&amp;gt; GEOMETRY&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入ESRI Shape的二进制数据，返回对应的几何对象。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT california_counties.name,
        &lt;span class=&quot;hljs-keyword&quot;&gt;COUNT(*) cnt
&lt;span class=&quot;hljs-keyword&quot;&gt;FROM california_counties
&lt;span class=&quot;hljs-keyword&quot;&gt;CROSS &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN earthquakes
&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE ST_CONTAINS (ST_GeometryFromesrishape(california_counties.boundaryshape), ST_POINT(earthquakes.longitude, earthquakes.latitude))
&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP &lt;span class=&quot;hljs-keyword&quot;&gt;BY  california_counties.name
&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER &lt;span class=&quot;hljs-keyword&quot;&gt;BY  cnt &lt;span class=&quot;hljs-keyword&quot;&gt;DESC, california_counties.name;

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;UDF_SYS_GEO_IN_CYCLE&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;UDF_SYS_GEO_IN_CYCLE(longitude, latitude, point, radius) -&amp;gt; BOOLEAN

第一个参数为经度列名称， 类型FLOAT/DOUBLE
第二个参数为纬度列名称， 类型FLOAT/DOUBLE
第三个参数为圆圈中心点的位置，格式=&amp;gt;'经度,维度', =&amp;gt;'120.85979,30.011984'
第四个参数为圆圈的半径，单位米&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;判断longitude、latitude的点是否在以中心点point为圆心，半径为radius的圆内。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT &lt;span class=&quot;hljs-keyword&quot;&gt;count(*) &lt;span class=&quot;hljs-keyword&quot;&gt;as cnt &lt;span class=&quot;hljs-keyword&quot;&gt;FROM earthquakes 
&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE UDF_SYS_GEO_IN_CYCLE(longitude,latitude, &lt;span class=&quot;hljs-string&quot;&gt;'120.85979,30.011984', &lt;span class=&quot;hljs-number&quot;&gt;5000000000000) = &lt;span class=&quot;hljs-literal&quot;&gt;true;

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;UDF_SYS_GEO_IN_RECTANGLE&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;UDF_SYS_GEO_IN_RECTANGLE(longitude, latitude, pointA, pointB) -&amp;gt; BOOLEAN

第一个参数为经度列名称， 类型FLOAT/DOUBLE
第二个参数为纬度列名称， 类型FLOAT/DOUBLE
第三个参数为矩形的左下角坐标，格式=&amp;gt;'经度,维度', =&amp;gt;'120.85979,30.011984'
第四个参数为矩形的右上角坐标，格式=&amp;gt;'经度,维度', =&amp;gt;'120.88450,31.21011'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;判断longitude、latitude的点是否在以2个斜角点构成的矩形内。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT &lt;span class=&quot;hljs-keyword&quot;&gt;count(*) &lt;span class=&quot;hljs-keyword&quot;&gt;as cnt &lt;span class=&quot;hljs-keyword&quot;&gt;FROM earthquakes 
&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE UDF_SYS_GEO_IN_RECTANGLE(longitude, latitude, &lt;span class=&quot;hljs-string&quot;&gt;'69.037,36.5759', &lt;span class=&quot;hljs-string&quot;&gt;'142.018,67.8713')=&lt;span class=&quot;hljs-literal&quot;&gt;true;

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;UDF_SYS_GEO_DISTANCE&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;UDF_SYS_GEO_DISTANCE(longitude, latitude, pointA) -&amp;gt; INTEGER

第一个参数为经度列名称， 类型FLOAT/DOUBLE
第二个参数为纬度列名称， 类型FLOAT/DOUBLE
第三个参数为固定坐标点的经纬度，格式=&amp;gt;'经度,维度', =&amp;gt;'120.85979,30.011984'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;求longitude、latitude的点和pointA点的距离，单位：米。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre data-spm-anchor-id=&quot;a2c4e.11153940.blogcont669048.i4.634a8596FDrVtT&quot;&gt;
&lt;code class=&quot;sql hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT &lt;span class=&quot;hljs-keyword&quot;&gt;count(*) &lt;span class=&quot;hljs-keyword&quot;&gt;as cnt &lt;span class=&quot;hljs-keyword&quot;&gt;FROM earthquakes 
&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE UDF_SYS_GEO_DISTANCE(longitude, latitude, &lt;span class=&quot;hljs-string&quot;&gt;'69.037,36.5759') &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;10000;

+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;br/&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/669048?utm_content=g_1000042401&quot; target=&quot;_blank&quot;&gt;原文链接&lt;/a&gt;&lt;br/&gt;本文为云栖社区原创内容，未经允许不得转载。&lt;/p&gt;
</description>
<pubDate>Thu, 21 Feb 2019 07:19:00 +0000</pubDate>
<dc:creator>阿里云云栖社区</dc:creator>
<og:description>0. 简介 为满足部分客户在云上做Geometry数据的分析需求，阿里云Data Lake Analytics（以下简称：DLA）支持多种格式的地理空间数据处理函数，符合Open Geospatial</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yunqishequ/p/10412761.html</dc:identifier>
</item>
<item>
<title>欧拉法求解微分方程 - Conmajia</title>
<link>http://www.cnblogs.com/conmajia/p/solve-differential-equation.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/conmajia/p/solve-differential-equation.html</guid>
<description>&lt;blockquote&gt;
&lt;p&gt;by Conmajia&lt;br/&gt;2014&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;alert with-icon&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;原文是我在2014年写的，用C# 完成，这里改成JavaScript了，&lt;em&gt;特基础&lt;/em&gt;。当然最方便的还是用数学库，或者Matlab、Mathematics这些数学软件（如果你只求值的话），或者可以换成C、Java、Go、Erlang任何其他的语言实现。欧拉（Euler）和中心差分逼近，是最朴素的想法，可惜代数精度太低了，而龙格库塔的稳定性又是个问题。总之只能用来计算普通的东西，高大上问题一般还是使用广义$\alpha$，Wilson-$\Theta$之类的，利用系数调节人工阻尼，让低频的部分少受算法影响，高频阻尼增大，增加微分方程的稳定性，又不影响算法的精度。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;alert with-icon&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;content&quot; readability=&quot;38&quot;&gt;Math.NET计划是用于.NET的数学运算库，包括了数值计算库Iridium.NET。这是&lt;strong&gt;非常古老&lt;/strong&gt;的的库，最近一次更新已经是10年前了。但是，&lt;strong&gt;数学的东西永远不会过时&lt;/strong&gt;，所以仔细研究一下，还是可以吃到很多干货的。
&lt;hr/&gt;&lt;p&gt;&lt;code&gt;$ git clone git://github.com/mathnet/mathnet-iridium.git&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;工程中有时候需要解微分方程，比如这种：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ y'=y-\cfrac{2x}{y} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(y(0)=1\)&lt;/span&gt;. 两边积分，得到：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \begin{align*} \int_{x_n}^{x_{n+1}}y'\mathrm{d} x&amp;amp;=\int_{x_n}^{x_{n+1}}\left(y-\cfrac{2x}{y}\right)\mathrm{d} x \\ y_{n+1}-y_n&amp;amp;=\int_{x_n}^{x_{n+1}}\left(y-\cfrac{2x}{y}\right)\mathrm{d}x \\ y&amp;amp;=\sqrt{1+2x} \end{align*} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;工程上只想要数值解，一般采用差分近似代替微分. 最简单最朴素的办法是用&lt;strong&gt;欧拉公式&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \tag{1} y_{n+1}=y_n+\Delta x f(x_n,y_n)\quad n=0,1,2,\cdots \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;推导很简单，对&lt;span class=&quot;math inline&quot;&gt;\(x_n\)&lt;/span&gt;，有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ y'_n=f(x_n,y_n). \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;对&lt;span class=&quot;math inline&quot;&gt;\(y'(x_n)\)&lt;/span&gt;有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \tag{2} y'_n\approx \cfrac{y_{n+1}-y_n}{\Delta x}. \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;式(2)左边叫&lt;strong&gt;微商&lt;/strong&gt;（不是喜提迪丽热巴的那个微商），右侧叫&lt;strong&gt;差商&lt;/strong&gt;（不是淘宝伪劣产品卖家），&lt;span class=&quot;math inline&quot;&gt;\(\Delta x=\left|x_{n+1}-x_n\right|\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;代回式(2)，有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \begin{align*} y'_n=f(x_n,y_n) \Rightarrow\cfrac{y_{n+1}-y_n}{\Delta x} &amp;amp;\approx f(x_n,y_n) \\ y_{n+1}-y_n &amp;amp;\approx \Delta x f(x_n,y_n) \\ y_{n+1} &amp;amp;\approx y(x_n)+\Delta x f(x_n,y_n). \end{align*} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;式(1)的欧拉公式成了：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \tag{3} y_{n+1}=y_n+\Delta x\left(y_n-\cfrac{2x_n}{y_n}\right). \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;假设用&lt;code&gt;myFn&lt;/code&gt;函数表示余项&lt;span class=&quot;math inline&quot;&gt;\(y_n-\dfrac{2x_n}{y_n}\)&lt;/span&gt;：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function myFn(x, y) {
  return y - 2 * x / y;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Euler可以这样实现：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function calculate(x0, y0, delta, xn) {
  var yn;
  while(x0 &amp;lt; xn) {
    yn = y0 + delta * myFn(x0, y0);
    y0 = yn;
    x0 = x0 + delta;
  }
  return yn;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在可以开始试验了。&lt;/p&gt;
&lt;p&gt;理论上：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ y=\sqrt{1+2x}\Rightarrow y(1)=\sqrt{3}\approx 1.7321 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(\sqrt{3}\)&lt;/span&gt;是方程的&lt;strong&gt;真值&lt;/strong&gt;，程序的目标是通过计算，得到&lt;em&gt;尽量接近真值&lt;/em&gt;的结果.&lt;/p&gt;
&lt;p&gt;取&lt;span class=&quot;math inline&quot;&gt;\(x_0=0\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(y_0=1\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(\Delta x=0.1\)&lt;/span&gt;，程序计算结果为：&lt;/p&gt;
&lt;pre class=&quot;plain&quot;&gt;
&lt;code&gt;ans = 1.784771&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;误差&lt;u&gt;3.04%&lt;/u&gt;. 减小&lt;span class=&quot;math inline&quot;&gt;\(\Delta x\)&lt;/span&gt;，比如&lt;span class=&quot;math inline&quot;&gt;\(\Delta x=0.0001\)&lt;/span&gt;，计算结果为：&lt;/p&gt;
&lt;pre class=&quot;plain&quot;&gt;
&lt;code&gt;ans = 1.732112&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;误差&lt;u&gt;0.0007%&lt;/u&gt;，&lt;strong&gt;十分接近&lt;/strong&gt;真值了.&lt;/p&gt;
&lt;p&gt;虽然这个方法可以求到比较精确的解，但是&lt;span class=&quot;math inline&quot;&gt;\(\Delta x\)&lt;/span&gt;太小的话，&lt;code&gt;while&lt;/code&gt;会执行很多次，效率低下.&lt;/p&gt;
&lt;p&gt;引入定积分的梯形公式：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \int_{x_n}^{x_{n+1}}f(x,y)\mathrm{d}x\approx\cfrac{\Delta x}{2}\left[f(x_n,y_n)+f(x_{n+1},y_{n+1})\right] \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;式(3)可以写成：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \tag{4} y_{n+1}\approx y_n+\cfrac{\Delta x}{2}\left[f(x_n,y_n)+f(x_{n+1},y_{n+1})\right]. \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;式(3)和式(4)的特点是，前者速度快，精度低；后者速度慢，精度高. 所以对于&lt;strong&gt;粗算&lt;/strong&gt;，可以使用：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ y'_{n+1}=y_n+\Delta x f(x_n,y_n) \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;精算，可以用：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ y_{n+1}=y_n+\cfrac{\Delta x}{2}\left[f(x_n,y_n)+f(x_{n+1},y'_{n+1})\right]. \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;结合起来，先通过粗算得到&lt;span class=&quot;math inline&quot;&gt;\(y'_{n+1}\)&lt;/span&gt;的近似值，再进行精算，得到高精度的最终解. 这样的话，既保证了计算结果的准确度，又没有消耗太多的计算资源，保证了计算效率. 下面是改进后的计算程序：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function calculate(x0, y0, delta, xn) {
  var yp, yc;
  while(x0 &amp;lt; xn) {
    yp = y0 + delta * myFn(x0, y0);
    yc = y0 + delta * myFn(x0 + delta, yp);
    y0 = 1 / 2 * (yp + yc);
    x0 = x0 + delta;
  }
  return y0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;取&lt;span class=&quot;math inline&quot;&gt;\(x_0=0\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(y_0=1\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(\Delta x=0.1\)&lt;/span&gt;，计算结果为：&lt;/p&gt;
&lt;pre class=&quot;plain&quot;&gt;
&lt;code&gt;ans = 1.737867&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;误差&lt;u&gt;0.33%&lt;/u&gt;.&lt;/p&gt;
&lt;p&gt;和最早版本（误差3.04%）相比，在&lt;span class=&quot;math inline&quot;&gt;\(\Delta x\)&lt;/span&gt;相同——意味着循环次数相近——的情况下，&lt;strong&gt;精度提高接近10倍&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;具体问题具体分析，手工求微分方程基本是这么个思路. 当然，对于《数值分析》和《工程数学》这些课程来说，我上面写的东西不过是小儿科了. 更多的时候，做个伸手党其实很不错的，大把的现成玩意儿可以用，我干嘛还要费那劲呢？&lt;/p&gt;
&lt;p&gt;The End. &lt;span class=&quot;math inline&quot;&gt;\(\Box\)&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 21 Feb 2019 07:19:00 +0000</pubDate>
<dc:creator>Conmajia</dc:creator>
<og:description>by Conmajia 2014 原文是我在2014年写的，用C 完成，这里改成JavaScript了，特基础。当然最方便的还是用数学库，或者Matlab、Mathematics这些数学软件（如果你只</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/conmajia/p/solve-differential-equation.html</dc:identifier>
</item>
<item>
<title>Springboot 系列（六）Spring Boot web 开发之拦截器和三大组件 - 雪漫士兵</title>
<link>http://www.cnblogs.com/niumoo/p/10411506.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/niumoo/p/10411506.html</guid>
<description>&lt;h2 id=&quot;拦截器&quot;&gt;1. 拦截器&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1202902/201902/1202902-20190221151148252-981036878.png&quot;/&gt;Springboot 中的 Interceptor 拦截器也就是 mvc 中的拦截器，只是省去了 xml 配置部分。并没有本质的不同，都是通过实现 HandlerInterceptor 中几个方法实现。几个方法的作用一一如下。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;preHandle&lt;/strong&gt;&lt;br/&gt;进入 Habdler 方法之前执行，一般用于身份认证授权等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;postHandle&lt;/strong&gt;&lt;br/&gt;进入 Handler 方法之后返回 modelAndView 之前执行，一般用于塞入公共模型数据等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;afterCompletion&lt;/strong&gt;&lt;br/&gt;最后处理，一般用于日志收集，统一后续处理等。&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;引入依赖&quot;&gt;1.1 引入依赖&lt;/h3&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt; &amp;lt;!-- Spring Boot web 开发整合 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;artifactId&amp;gt;spring-boot-starter-json&amp;lt;/artifactId&amp;gt;
                    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- 阿里 fastjson --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.2.47&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- Lombok 工具 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
            &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- 导入配置文件处理器，在配置springboot相关文件时候会有提示 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-configuration-processor&amp;lt;/artifactId&amp;gt;
            &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- 单元测试 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit-jupiter-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;RELEASE&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;编写拦截器&quot;&gt;1.2 编写拦截器&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package net.codingme.boot.config;

import lombok.extern.slf4j.Slf4j;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * &amp;lt;p&amp;gt;
 * 拦截器
 *
 * @Author niujinpeng
 * @Date 2019/1/6 16:54
 */
@Slf4j
public class LogHandlerInterceptor implements HandlerInterceptor {

    /**
     * 请求方法执行之前
     * 返回true则通过
     *
     * @param request
     * @param response
     * @param handler
     * @return
     */
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {
        StringBuffer requestURL = request.getRequestURL();
        log.info(&quot;preHandle请求URL：&quot; + requestURL.toString());
        return true;
    }

    /**
     * 返回modelAndView之前执行
     * @param request
     * @param response
     * @param handler
     * @param modelAndView
     */
    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) {
        log.info(&quot;postHandle返回modelAndView之前&quot;);
    }

    /**
     * 执行Handler完成执行此方法
     * @param request
     * @param response
     * @param handler
     * @param ex
     */
    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {
        log.info(&quot;afterCompletion执行完请求方法完全返回之后&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;配置拦截器&quot;&gt;1.3 配置拦截器&lt;/h3&gt;
&lt;p&gt;省去了 XML 中的拦截器配置部分后，使用 springboot 推荐的方式配置自定义拦截器。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package net.codingme.boot.config;


import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.support.config.FastJsonConfig;
import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import java.util.ArrayList;
import java.util.List;

/**
 * &amp;lt;p&amp;gt;
 * 1.使用FastJSON
 * 2.配置时间格式化
 * 3.解决中文乱码
 * 4.添加自定义拦截器
 *
 * @Author niujinpeng
 * @Date 2018/12/13 15:35
 */
@Configuration
public class WebMvcConfig implements WebMvcConfigurer {

    /**
     * 自定义JSON转换器
     *
     * @param converters
     */
    @Override
    public void configureMessageConverters(List&amp;lt;HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; converters) {
        FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();
        FastJsonConfig fastJsonConfig = new FastJsonConfig();
        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);
        //日期格式化
        fastJsonConfig.setDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
        //处理中文乱码问题
        List&amp;lt;MediaType&amp;gt; fastMediaTypes = new ArrayList&amp;lt;&amp;gt;();
        fastMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);

        converter.setSupportedMediaTypes(fastMediaTypes);
        converter.setFastJsonConfig(fastJsonConfig);
        converters.add(converter);
    }

    /**
     * 添加自定义拦截器
     * .addPathPatterns(&quot;/**&quot;)  拦截的请求路径
     * .excludePathPatterns(&quot;/user&quot;); 排除的请求路径
     *
     * @param registry
     */
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new LogHandlerInterceptor())
                .addPathPatterns(&quot;/**&quot;)
                .excludePathPatterns(&quot;/user&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;切面编程&quot;&gt;2 切面编程&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;AOP：面向切面（方面）编程，扩展功能不修改源代码实现&lt;/li&gt;
&lt;li&gt;AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码&lt;/li&gt;
&lt;li&gt;AOP底层使用动态代理实现
&lt;ul&gt;&lt;li&gt;有接口情况使用动态代理创建接口实现类代理对象&lt;/li&gt;
&lt;li&gt;没有接口情况使用动态代理创建类的子类代理对象&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;

/**
 * &amp;lt;p&amp;gt;
 * 使用AOP记录访问日志
 * 使用@Before在切入点开始处切入内容
 * 使用@After在切入点结尾处切入内容
 * 使用@AfterReturning在切入点return内容之后切入内容（可以用来对处理返回值做一些加工处理）
 * 使用@Around在切入点前后切入内容，并自己控制何时执行切入点自身的内容
 * 使用@AfterThrowing用来处理当切入内容部分抛出异常之后的处理逻辑
 * &amp;lt;p&amp;gt;
 * 注解：
 * Aspect:AOP
 * Component：Bean
 * Slf4j：可以直接使用log输出日志
 * Order：多个AOP切同一个方法时的优先级，越小优先级越高越大。
 * 在切入点前的操作，按order的值由小到大执行
 * 在切入点后的操作，按order的值由大到小执行
 *
 * @Author niujinpeng
 * @Date 2019/1/4 23:29
 */

@Aspect
@Component
@Slf4j
@Order(1)
public class LogAspect {
    /**
     * 线程存放信息
     */
    ThreadLocal&amp;lt;Long&amp;gt; startTime = new ThreadLocal&amp;lt;&amp;gt;();

    /**
     * 定义切入点
     * 第一个*：标识所有返回类型
     * 字母路径：包路径
     * 两个点..：当前包以及子包
     * 第二个*：所有的类
     * 第三个*：所有的方法
     * 最后的两个点：所有类型的参数
     */
    @Pointcut(&quot;execution(public * net.codingme.boot.controller..*.*(..))&quot;)
    public void webLog() {
    }

    /**
     * 在切入点开始处切入内容
     *
     * @param joinPoint
     */
    @Before(&quot;webLog()&quot;)
    public void doBefore(JoinPoint joinPoint) {
        // 记录请求时间
        startTime.set(System.currentTimeMillis());
        // 获取请求域
        ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();

        // 记录请求内容
        log.info(&quot;Aspect-URL: &quot; + request.getRequestURI().toLowerCase());
        log.info(&quot;Aspect-HTTP_METHOD: &quot; + request.getMethod());
        log.info(&quot;Aspect-IP: &quot; + request.getRemoteAddr());
        log.info(&quot;Aspect-REQUEST_METHOD: &quot; + joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName());
        log.info(&quot;Aspect-Args: &quot; + Arrays.toString(joinPoint.getArgs()));
    }

    /**
     * 在切入点之后处理内容
     */
    @After(&quot;webLog()&quot;)
    public void doAfter() {

    }

    /**
     * 在切入点return内容之后切入内容（可以用来对处理返回值做一些加工处理）
     */
    @AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;webLog()&quot;)
    public void doAfterReturning(Object ret) throws Throwable {
        log.info(&quot;Aspect-Response: &quot; + ret);
        Long endTime = System.currentTimeMillis();
        log.info(&quot;Aspect-SpeedTime: &quot; + (endTime - startTime.get()) + &quot;ms&quot;);
    }

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;访问查看拦截器和 AOP 的日志输出。&lt;/p&gt;
&lt;pre class=&quot;log&quot;&gt;
&lt;code&gt;09:57:15.408  INFO 2836 --- [nio-8080-exec-1] n.c.boot.config.LogHandlerInterceptor    : preHandle请求URL：http://localhost:8080/
09:57:15.413  INFO 2836 --- [nio-8080-exec-1] net.codingme.boot.config.LogAspect       : Aspect-URL: /
09:57:15.413  INFO 2836 --- [nio-8080-exec-1] net.codingme.boot.config.LogAspect       : Aspect-HTTP_METHOD: GET
09:57:15.413  INFO 2836 --- [nio-8080-exec-1] net.codingme.boot.config.LogAspect       : Aspect-IP: 0:0:0:0:0:0:0:1
09:57:15.414  INFO 2836 --- [nio-8080-exec-1] net.codingme.boot.config.LogAspect       : Aspect-REQUEST_METHOD: net.codingme.boot.controller.HelloController.index
09:57:15.415  INFO 2836 --- [nio-8080-exec-1] net.codingme.boot.config.LogAspect       : Aspect-Args: []
09:57:15.424  INFO 2836 --- [nio-8080-exec-1] net.codingme.boot.config.LogAspect       : Aspect-Response: Greetings from Spring Boot!SpringBoot是一个spring应用程序
09:57:15.425  INFO 2836 --- [nio-8080-exec-1] net.codingme.boot.config.LogAspect       : Aspect-SpeedTime: 12ms
09:57:15.436  INFO 2836 --- [nio-8080-exec-1] n.c.boot.config.LogHandlerInterceptor    : postHandle返回modelAndView之前
09:57:15.437  INFO 2836 --- [nio-8080-exec-1] n.c.boot.config.LogHandlerInterceptor    : afterCompletion执行完请求方法完全返回之后&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;servletfilterlistener&quot;&gt;3. Servlet,Filter,Listener&lt;/h2&gt;
&lt;p&gt;Servlet, Filter, Listener 是 Java web 的核心内容，那么在 Springboot 中如何使用呢？&lt;/p&gt;
&lt;h3 id=&quot;编写-servlet&quot;&gt;3.1 编写 Servlet&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package net.codingme.boot.servlet;

import lombok.extern.slf4j.Slf4j;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

/**
 * &amp;lt;p&amp;gt;
 * @WebServlet(urlPatterns = &quot;/myservlet&quot;) // 定义访问路径
 * @Author niujinpeng
 * @Date 2019/1/24 16:25
 */
@Slf4j
@WebServlet(urlPatterns = &quot;/myservlet&quot;)
public class MyServlet extends HttpServlet {

    @Override
    public void init() throws ServletException {
        log.info(&quot;Servlet 开始初始化&quot;);
        super.init();
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        log.info(&quot;Servlet 开始处理 GET 方法&quot;);
        PrintWriter writer = resp.getWriter();
        writer.println(&quot;Hello Servlet&quot;);
        writer.flush();
        writer.close();
    }

    @Override
    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        doGet(req, resp);
    }

    @Override
    public void destroy() {
        log.info(&quot;Servlet 开始销毁&quot;);
        super.destroy();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;编写-filter&quot;&gt;3.2 编写 Filter&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package net.codingme.boot.filter;

import lombok.extern.slf4j.Slf4j;

import javax.servlet.*;
import javax.servlet.annotation.WebFilter;
import java.io.IOException;

/**
 * &amp;lt;p&amp;gt;
 *
 * @Author niujinpeng
 * @Date 2019/1/24 16:35
 */
@Slf4j
@WebFilter(urlPatterns = &quot;/*&quot;)
public class MyFilter implements Filter {


    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {
        log.info(&quot;拦截器开始拦截&quot;);
        filterChain.doFilter(request, response);
    }

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;编写-listener&quot;&gt;3.3 编写 Listener&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package net.codingme.boot.listener;

import lombok.extern.slf4j.Slf4j;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;

/**
 * &amp;lt;p&amp;gt;
 *
 * @Author niujinpeng
 * @Date 2019/1/24 16:45
 */
@Slf4j
@WebListener
public class MyListener implements ServletContextListener {

    @Override
    public void contextInitialized(ServletContextEvent sce) {
        log.info(&quot;监听器开始初始化&quot;);
    }

    @Override
    public void contextDestroyed(ServletContextEvent sce) {
        log.info(&quot;监听器开始销毁&quot;);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;添加到容器&quot;&gt;3.4 添加到容器&lt;/h3&gt;
&lt;p&gt;添加到容器有两种方式，第一种使用注解扫描。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.servlet.ServletComponentScan;
import org.springframework.context.annotation.ComponentScan;

/**
 * @ServletComponentScan 扫描Servlet,Filter,Listener 添加到容器
 */
@SpringBootApplication
@ServletComponentScan
public class BootApplication {

    public static void main(String[] args) {
        SpringApplication.run(BootApplication.class, args);
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或者使用配置类想容器中添加。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * &amp;lt;p&amp;gt;
 * 在这里注册Servlet Filter Listener 或者使用 @ServletComponentScan
 *
 * @Author niujinpeng
 * @Date 2019/1/24 16:30
 */
@Configuration
public class WebCoreConfig {

    @Bean
    public ServletRegistrationBean myServlet() {
        return new ServletRegistrationBean&amp;lt;&amp;gt;(new MyServlet());
    }

    @Bean
    public FilterRegistrationBean myFitler() {
        return new FilterRegistrationBean&amp;lt;&amp;gt;(new MyFilter());
    }

    @Bean
    public ServletListenerRegistrationBean myListener() {
        return new ServletListenerRegistrationBean(new MyListener());
    }
    
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动可以在控制台看到监听器启动。&lt;/p&gt;
&lt;pre class=&quot;log&quot;&gt;
&lt;code&gt; 11:35:03.744  INFO 8616 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1364 ms
 11:35:03.798  INFO 8616 --- [           main] net.codingme.boot.listener.MyListener    : 监听器开始初始化
 11:35:03.892  INFO 8616 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
 11:35:04.055  INFO 8616 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;访问 Servlet 可以看到拦截器和 Servlet 生效。&lt;/p&gt;
&lt;pre class=&quot;log&quot;&gt;
&lt;code&gt; 11:36:55.552  INFO 3760 --- [nio-8080-exec-1] net.codingme.boot.servlet.MyServlet      : Servlet 开始初始化
 11:36:55.556  INFO 3760 --- [nio-8080-exec-1] net.codingme.boot.filter.MyFilter        : 拦截器开始拦截
 11:36:55.556  INFO 3760 --- [nio-8080-exec-1] net.codingme.boot.servlet.MyServlet      : Servlet 开始处理 GET 方法&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;文章代码已经上传到 GitHub &lt;a href=&quot;https://github.com/niumoo/springboot/tree/master/springboot-web-interceptor&quot;&gt;Spring Boot Web开发 - 拦截处理&lt;/a&gt;。&lt;br/&gt;文章代码已经上传到 GitHub &lt;a href=&quot;https://github.com/niumoo/springboot/tree/master/springboot-web-servlet-filter-listener&quot;&gt;Spring Boot Web开发 - Servlet,Filter,Listener&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&amp;lt;完&amp;gt;&lt;br/&gt;本文原发于个人博客：&lt;a href=&quot;https://www.codingme.net/&quot; class=&quot;uri&quot;&gt;https://www.codingme.net&lt;/a&gt; 转载请注明出处&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2626549-e1b06fdf782b78e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 21 Feb 2019 07:13:00 +0000</pubDate>
<dc:creator>雪漫士兵</dc:creator>
<og:description>1. 拦截器 Springboot 中的 Interceptor 拦截器也就是 mvc 中的拦截器，只是省去了 xml 配置部分。并没有本质的不同，都是通过实现 HandlerInterceptor</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/niumoo/p/10411506.html</dc:identifier>
</item>
<item>
<title>Centos7 nginx 虚拟主机、反向代理服务器及负载均衡，多台主机分离php-fpm实验，之强化篇，部署zabbix为例 - 乐章</title>
<link>http://www.cnblogs.com/zhangxingeng/p/10402917.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangxingeng/p/10402917.html</guid>
<description>&lt;h2&gt;一、简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;　　1、由于zabbix是php得，所有lnmp环境这里测试用的上一个实验环境，请查看&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: Centos7 nginx 虚拟主机、反向代理服务器及负载均衡，多台主机分离php-fpm实验&quot; href=&quot;https://www.cnblogs.com/zhangxingeng/p/10330735.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/zhangxingeng/p/10330735.html&lt;/a&gt; ；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　2、就是上一个例子得架构图加上zabbix，架构图如下；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190220154530991-791617526.jpg&quot; alt=&quot;&quot; width=&quot;878&quot; height=&quot;519&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;strong&gt;　3、系统环境CentOS Linux release 7.6.1810 (Core)；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　4、zabbix4，就zabbix3来说，安装起来还是很简单得，这次测试zabbix4.0+&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　5、添加zabbix源；&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
yum install http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;注意：如果不是使用这个源，出现如下这个报错那么请更换正确得源就能解决&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Error: Package: zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.x86_64 (zabbix)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;            &lt;span&gt;Requires: libiksemel.so.3()(64bit)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;二、开始部署（由于动静分离架构，稍微麻烦些）&lt;/h2&gt;

&lt;p&gt;　　&lt;strong&gt;1、web5-55-php-fpm 部署zabbix动态内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　安装依赖，zabbix没有单独得包，安装zabbix-server-mysql即可&lt;/p&gt;
&lt;p&gt;　　　zabbix-server-mysql    #主程序包及数据库文件&lt;/p&gt;
&lt;p&gt;　　    zabbix-web-mysql 　　#&lt;/p&gt;
&lt;p&gt;　　　zabbix-get　　#为了便于agent端发起测试采集数据请求用得&lt;/p&gt;
&lt;p&gt;　　　iksemel&lt;/p&gt;
&lt;p&gt;　　　libiksemel　　 Required for Jabber support.&lt;/p&gt;
&lt;p&gt;　　　fping　　Required for ICMP ping items.&lt;/p&gt;

&lt;p&gt;　　   yum install -y  zabbix-server-mysql zabbix-web-mysql &lt;/p&gt;
&lt;p&gt;　　　yum install zabbix-get&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;Installed:
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   zabbix-server-mysql.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7                                                                         
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;Dependency Installed:
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;   OpenIPMI-libs.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;2.0&lt;/span&gt;.&lt;span&gt;23&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;.el7  OpenIPMI-modalias.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;2.0&lt;/span&gt;.&lt;span&gt;23&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;.el7  iksemel.x86_64 &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;1.4&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.el7.centos 
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; Complete!
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@web5 &lt;span&gt;yum&lt;/span&gt;.repos.d]# rpm -qa |&lt;span&gt;grep&lt;/span&gt;&lt;span&gt; zabbix
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; zabbix-get-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; zabbix-release-&lt;span&gt;4.0&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el7.noarch
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; zabbix-web-mysql-&lt;span&gt;4.2&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.3alpha3.el7.noarch
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; zabbix-web-&lt;span&gt;4.2&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.3alpha3.el7.noarch
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; [root@web5 &lt;span&gt;yum&lt;/span&gt;.repos.d]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后看一下文档&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@web5 &lt;span&gt;yum&lt;/span&gt;.repos.d]# rpm -ql zabbix-server-&lt;span&gt;mysql 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; /etc/logrotate.d/zabbix-&lt;span&gt;server
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; /etc/zabbix/&lt;span&gt;zabbix_server.conf
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; /usr/lib/systemd/system/zabbix-&lt;span&gt;server.service
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; /usr/lib/tmpfiles.d/zabbix-&lt;span&gt;server.conf
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; /usr/lib/zabbix/&lt;span&gt;alertscripts
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; /usr/lib/zabbix/&lt;span&gt;externalscripts
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; /usr/sbin/&lt;span&gt;zabbix_server_mysql
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; /usr/share/doc/zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; /usr/share/doc/zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/&lt;span&gt;AUTHORS
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; /usr/share/doc/zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/&lt;span&gt;COPYING
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; /usr/share/doc/zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/&lt;span&gt;ChangeLog
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; /usr/share/doc/zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/&lt;span&gt;NEWS
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; /usr/share/doc/zabbix-server-mysql-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/&lt;span&gt;README
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;/usr/share/doc/zabbix-server-mysql-4.0.4/create.sql.gz #zabbix数据库sql脚本
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; /usr/share/&lt;span&gt;man&lt;/span&gt;/man8/zabbix_server.&lt;span&gt;8&lt;/span&gt;&lt;span&gt;.gz
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; /var/log/&lt;span&gt;zabbix
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; /var/run/zabbix
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;2、初始化数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　2.1、准备好数据库机器mysql1，ip-56&lt;/p&gt;
&lt;p&gt;　　　　关闭selinux，firewall，安装数据库&lt;/p&gt;
&lt;p&gt;　　　　yum install  mariadb-embedded mariadb-libs mariadb-bench mariadb mariadb-sever&lt;/p&gt;
&lt;p&gt;　　　　systemctl start mariadb&lt;/p&gt;
&lt;p&gt;　　　　systemctl enable mariadb&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@mysql1 /]# netstat -untlp | &lt;span&gt;grep&lt;/span&gt; &lt;span&gt;3306&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; tcp        &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;3306 &lt;/span&gt;           &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;37059&lt;/span&gt;/mysqld      
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　2.2、创建zabbix数据库及zabbix用户&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;CREATE DATABASE zabbix character set utf8 collate utf8_bin;　　　
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; GRANT all privileges ON *.* TO &lt;span&gt;'&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; IDENTIFIED BY &lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; MariaDB [mysql]&amp;gt; flush privileges;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　   2.3、修改数据库root密码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@mysql1 /&lt;span&gt;]# mysql
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;Welcome to the MariaDB monitor.  Commands end with ; or \g.
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; Your MariaDB connection &lt;span&gt;id&lt;/span&gt; is &lt;span&gt;2&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; Server version: &lt;span&gt;5.5&lt;/span&gt;.&lt;span&gt;60&lt;/span&gt;-&lt;span&gt;MariaDB MariaDB Server
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; Copyright (c) &lt;span&gt;2000&lt;/span&gt;, &lt;span&gt;2018&lt;/span&gt;&lt;span&gt;, Oracle, MariaDB Corporation Ab and others.
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; Type &lt;span&gt;'&lt;/span&gt;&lt;span&gt;help;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; or &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; help. Type &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; to &lt;span&gt;clear&lt;/span&gt;&lt;span&gt; the current input statement.
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; MariaDB [(none)]&amp;gt;&lt;span&gt; use mysql;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; Reading table information &lt;span&gt;for&lt;/span&gt;&lt;span&gt; completion of table and column names
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; You can turn off this feature to get a quicker startup with -&lt;span&gt;A
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;Database changed
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; MariaDB [mysql]&amp;gt; &lt;span&gt;update user set password=password('newpassword') where user='root';
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; Query OK, &lt;span&gt;4&lt;/span&gt; rows affected (&lt;span&gt;0.01&lt;/span&gt;&lt;span&gt; sec)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; Rows matched: &lt;span&gt;4&lt;/span&gt;  Changed: &lt;span&gt;4&lt;/span&gt;  Warnings: &lt;span&gt;0&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;br/&gt;MariaDB [mysql]&amp;gt; flush privileges;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　测试web5-55  测试连接数据库&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;[root@web5 web]# vim index.php 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; #&lt;span&gt;echo&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; $link=mysql_connect(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;192.168.216.56&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;($link) &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;h1&amp;gt;The database connection was successful!&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;h1&amp;gt;The database connection was Fail!!&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;mysql_close();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#       phpinfo();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; ?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190220154704345-129597994.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　2.4、解压缩zabbix数据库脚本，并发送到数据库服务器 &lt;/p&gt;
&lt;p&gt;　　　　gunzip /usr/share/doc/zabbix-server-mysql-4.0.4/create.sql.gz&lt;/p&gt;
&lt;p&gt;　　　　cd /usr/share/doc/zabbix-server-mysql-4.0.4/&lt;/p&gt;
&lt;p&gt;　　　　scp create.sql root@192.168.216.56:/&lt;/p&gt;
&lt;p&gt;　　　2.5、导入数据库&lt;/p&gt;
&lt;p&gt;　　　　mysql -uroot zabbix &amp;lt; /create.sql  -p&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　3、配置nginx&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　web2-52 -nginx，配置文件&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@web2 zabbix]# &lt;span&gt;cat&lt;/span&gt; /etc/nginx/conf.d/&lt;span&gt;default.conf 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; upstream php-&lt;span&gt;cluster {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         #server &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;9000&lt;/span&gt; max_fails=&lt;span&gt;3&lt;/span&gt; fail_timeout=&lt;span&gt;10s;　　　　　　　　#首先注释本地得php-fpm
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;server 192.168.216.55:9000 max_fails=3 fail_timeout=10s;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;server {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         listen &lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         server_name &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.52&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        index index.html index.htm index.phpi;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         root /usr/share/&lt;span&gt;zabbix;　　　　　　　　　　　　　　　　　　　　　　　　　　#更换web目，zabbix默认目录，测试无所事先用默认得吧&lt;br/&gt;&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         location /&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;                 root  /usr/share/nginx/html&lt;span&gt;;　　　　　　　　　　　　　　　　　　　　　　　　　　
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;         location ~.*&lt;span&gt;\.php$ {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;                 fastcgi_pass    php-&lt;span&gt;cluster;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                fastcgi_index   index.php;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                include         fastcgi_params;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　&lt;strong&gt;4、配置zabbix &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　web5-55 &lt;/p&gt;
&lt;p&gt;　　　　4.1、修改zabbix配置&lt;/p&gt;
&lt;p&gt;　　　　vim  /etc/zabbix/zabbix_server.conf &lt;/p&gt;
&lt;p&gt;　　　　修改下面几项即可&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;### Option: DBHost
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; DBHost=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.56&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;### Option: DBName
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; # DBName=
&lt;span&gt;5&lt;/span&gt; DBName=&lt;span&gt;zabbix
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; # DBUser=
&lt;span&gt;7&lt;/span&gt; DBUser=&lt;span&gt;zabbix
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;### Option: DBPassword
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; DBPassword=admin123
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　systemctl start zabbix-server　　　　&lt;/p&gt;

&lt;p&gt;　　　　4.2、解决error问题&lt;/p&gt;
&lt;p&gt;　　　　测试访问www.web1.com/index.php，报错500，网上查询说display_errors没配置得原因，这里可以设置成on&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;&lt;code&gt;&lt;span&gt;问题1、网页返回500错误码，修改display_errors&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　&lt;span&gt;web5-55&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　vim /etc/php.ini&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　display_errors = On&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　systemctl restart php-fpm&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;display_errors 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;错误回显，一般常用语开发模式，但是很多应用在正式环境中也忘记了关闭此选项。错误回显可以暴露出非常多的敏感信息，为攻击者下一步攻击提供便利。推荐关闭此选项。 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; display_errors =&lt;span&gt; On 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;开启状态下，若出现错误，则报错，出现错误提示 
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; dispaly_errors =&lt;span&gt; Off 
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 关闭状态下，若出现错误，则提示：服务器错误。但是不会出现错误提示 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;span&gt;问题2、269的warning，给权限&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　再次访问www.web1.com/index.php,发现是269得warning，因为是nginx启动得php-fpm我们可以给一下权限&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Warning: require_once(/etc/zabbix/web/maintenance.inc.php): failed to open stream: Permission denied &lt;span&gt;in&lt;/span&gt; /usr/share/zabbix/include/classes/core/ZBase.php on line &lt;span&gt;269&lt;/span&gt; Fatal error: require_once(): Failed opening required &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/etc/zabbix/web/maintenance.inc.php&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; (include_path=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;in&lt;/span&gt; /usr/share/zabbix/include/classes/core/ZBase.php on line &lt;span&gt;269&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　chown nginx:nginx -R /etc/zabbix&lt;/p&gt;
&lt;p&gt;　　　chown nginx:nginx -R /usr/share/zabbix&lt;/p&gt;
&lt;p&gt;　　　chmod 755 -R /etc/zabbix&lt;/p&gt;
&lt;p&gt;　　　chmod 755 -R /usr/share/zabbix&lt;/p&gt;

&lt;p&gt;　　　&lt;span&gt;问题3、没有图片效果，因为架构是动静分离，所以静态内容需要放到静态服务器上&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　　　先访问一下，什么鬼，文字模式，没有图片效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190221104218727-618897911.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　我们先用访问192.168.216.52/index.php,效果一样，也是文字模式，那我们看一下nginx的error.log&lt;/p&gt;
&lt;p&gt;　　　　tail -5  /var/log/nginx/error.log&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;em&gt;&lt;code&gt;　&lt;/code&gt;&lt;/em&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;02&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;18&lt;/span&gt;:&lt;span&gt;37&lt;/span&gt;:&lt;span&gt;45&lt;/span&gt; [error] &lt;span&gt;3595&lt;/span&gt;#&lt;span&gt;0&lt;/span&gt;: *&lt;span&gt;8&lt;/span&gt; open() &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/usr/share/zabbix/styles/blue-theme.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; failed (&lt;span&gt;2&lt;/span&gt;: No such &lt;span&gt;file&lt;/span&gt; or directory), client: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.1&lt;/span&gt;, server: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.52&lt;/span&gt;, request: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET /styles/blue-theme.css HTTP/1.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, host: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.216.52&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, referrer: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://192.168.216.52/setup.php&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;02&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;18&lt;/span&gt;:&lt;span&gt;37&lt;/span&gt;:&lt;span&gt;45&lt;/span&gt; [error] &lt;span&gt;3595&lt;/span&gt;#&lt;span&gt;0&lt;/span&gt;: *&lt;span&gt;9&lt;/span&gt; open() &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/usr/share/zabbix/js/browsers.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; failed (&lt;span&gt;2&lt;/span&gt;: No such &lt;span&gt;file&lt;/span&gt; or directory), client: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.1&lt;/span&gt;, server: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.52&lt;/span&gt;, request: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET /js/browsers.js HTTP/1.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, host: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.216.52&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, referrer: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://192.168.216.52/setup.php&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;02&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;18&lt;/span&gt;:&lt;span&gt;37&lt;/span&gt;:&lt;span&gt;47&lt;/span&gt; [error] &lt;span&gt;3595&lt;/span&gt;#&lt;span&gt;0&lt;/span&gt;: *&lt;span&gt;9&lt;/span&gt; open() &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/usr/share/zabbix/js/browsers.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; failed (&lt;span&gt;2&lt;/span&gt;: No such &lt;span&gt;file&lt;/span&gt; or directory), client: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.1&lt;/span&gt;, server: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.52&lt;/span&gt;, request: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET /js/browsers.js HTTP/1.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, host: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.216.52&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, referrer: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://192.168.216.52/setup.php&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;2019&lt;/span&gt;/&lt;span&gt;02&lt;/span&gt;/&lt;span&gt;20&lt;/span&gt; &lt;span&gt;18&lt;/span&gt;:&lt;span&gt;37&lt;/span&gt;:&lt;span&gt;47&lt;/span&gt; [error] &lt;span&gt;3594&lt;/span&gt;#&lt;span&gt;0&lt;/span&gt;: *&lt;span&gt;11&lt;/span&gt; open() &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/usr/share/zabbix/styles/blue-theme.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; failed (&lt;span&gt;2&lt;/span&gt;: No such &lt;span&gt;file&lt;/span&gt; or directory), client: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.1&lt;/span&gt;, server: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.52&lt;/span&gt;, request: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET /styles/blue-theme.css HTTP/1.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, host: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.216.52&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, referrer: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://192.168.216.52/setup.php&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　提示没有找到/usr/share/zabbix/styles,/usr/share/zabbix/js,提示找不到这两个目录，我们把目录复制过来，看看，为了方便可以先把所有目录一起复制过来&lt;/p&gt;
&lt;p&gt;　　web5&lt;/p&gt;
&lt;p&gt;　　cd /usr/share/&lt;/p&gt;
&lt;p&gt;　　tar -jcvf zabbix.tar.bz2 zabbix&lt;/p&gt;
&lt;p&gt;　　scp zabbix.tar.bz2 root@192.168.216.52:/&lt;/p&gt;
&lt;p&gt;　　web2&lt;/p&gt;
&lt;p&gt;　　cd /&lt;/p&gt;
&lt;p&gt;　　tar -jxvf zabbix.tar.bz2&lt;/p&gt;
&lt;p&gt;　　完成在访问一下，成功&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190221113101041-686682879.jpg&quot; alt=&quot;&quot; width=&quot;843&quot; height=&quot;580&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　那么放在  httpd服务器的效果那&lt;/p&gt;
&lt;p&gt;　　web5-55&lt;/p&gt;
&lt;p&gt;　　scp zabbix.tar.bz2 root@192.168.216.54:/&lt;/p&gt;
&lt;p&gt;　　web4-54&lt;/p&gt;
&lt;p&gt;　　cd /&lt;/p&gt;
&lt;p&gt;　　tar -jxvf zabbix.tar.bz2&lt;/p&gt;
&lt;p&gt;　　chown -R apache:apache zabbix&lt;/p&gt;
&lt;p&gt;　　vim /etc/httpd/conf/httpd.conf&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;DocumentRoot &quot;/zabbix&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;Directory &quot;/zabbix&quot;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;AllowOverride None
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;# Allow open access:
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;Require all granted
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &amp;lt;/Directory&amp;gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;Directory &quot;/zabbix&quot;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    #
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     # Possible values &lt;span&gt;for&lt;/span&gt; the Options directive are &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;None&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;All&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    # or any combination of:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    #
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     # Note that &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MultiViews&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; must be named *explicitly* --- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Options All&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     # doesn&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t give it to you.&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    #
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    # The Options directive is both complicated and important.  Please see
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     # http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;httpd.apache.org/docs/2.4/mod/core.html#options&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     # &lt;span&gt;for&lt;/span&gt; &lt;span&gt;more&lt;/span&gt;&lt;span&gt; information.
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    #
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    Options Indexes FollowSymLinks
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    #
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     # AllowOverride controls what directives may be placed &lt;span&gt;in&lt;/span&gt;&lt;span&gt; .htaccess files.
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     # It can be &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;All&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;None&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, or any combination of the keywords:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    #   Options FileInfo AuthConfig Limit
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    #
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    AllowOverride None
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    #
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     # Controls &lt;span&gt;who&lt;/span&gt;&lt;span&gt; can get stuff from this server.
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    #
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    Require all granted
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &amp;lt;/Directory&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　systemctl restart httpd&lt;/p&gt;

&lt;p&gt;　　访问一下www.web1.com/index.php&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190221114316746-1763711356.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;三、开始配置zabbix&lt;/h2&gt;
&lt;p&gt;　　&lt;strong&gt;1、welcome，进入zabbix界面我们开始部署，点next&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　  &lt;strong&gt; 2、check of pre-requisite&lt;/strong&gt;s&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190221115847625-1087694293.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　编辑解决这三个问题&lt;/p&gt;
&lt;p&gt;　　　　web5&lt;/p&gt;
&lt;p&gt;　　　　vim /etc/php.ini&lt;/p&gt;
&lt;p&gt;　　　　post_max_size = 16M         # PHP将接受的POST数据的最大大小&lt;/p&gt;
&lt;p&gt;　　　　max_execution_time = 300 #每个脚本最大执行时间&lt;/p&gt;
&lt;p&gt;　　　　max_input_time = 300        #每个脚本可能花费在解析请求数据上的最大时间&lt;/p&gt;
&lt;p&gt;　　　　systemctl restart php-fpm&lt;/p&gt;
&lt;p&gt;　　　　刷新网页&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201902/1464965-20190221121406617-1060827502.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;strong&gt;　3、configure  DB connect&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;4、zabbix server details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;5、pre-installation summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　&lt;strong&gt;　6、insatll&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;总结，这个例子主要是试试看的心态，并没有向下做下去，因为还有很多问题，需要很多精力，下一篇只对zabbix---》mysql做分离实验。并介绍一些用法。谢谢&lt;/p&gt;



&lt;h3&gt;&lt;strong&gt;转载请注明出处：&lt;/strong&gt;&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: Centos7+lnmp+zabbix4的安装&quot; href=&quot;https://www.cnblogs.com/zhangxingeng/p/10402917.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/zhangxingeng/p/10402917.html&lt;/a&gt; &lt;/h3&gt;

</description>
<pubDate>Thu, 21 Feb 2019 07:12:00 +0000</pubDate>
<dc:creator>乐章</dc:creator>
<og:description>一、简介 1、由于zabbix是php得，所有lnmp环境这里测试用的上一个实验环境，请查看https://www.cnblogs.com/zhangxingeng/p/10330735.html</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangxingeng/p/10402917.html</dc:identifier>
</item>
<item>
<title>30分钟玩转Net MVC 基于WebUploader的大文件分片上传、断网续传、秒传（文末附带demo下载） - 学习中的苦与乐</title>
<link>http://www.cnblogs.com/xiongze520/p/10412693.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiongze520/p/10412693.html</guid>
<description>&lt;p&gt;现在的项目开发基本上都用到了上传文件功能，或图片，或文档，或视频。我们常用的常规上传已经能够满足当前要求了，&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;然而有时会出现如下问题：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;文件过大（比如1G以上），超出服务端的请求大小限制；&lt;/li&gt;
&lt;li&gt;请求时间过长，请求超时；&lt;/li&gt;
&lt;li&gt;传输中断，必须重新上传导致前功尽弃；&lt;/li&gt;
&lt;li&gt;设置了webconfig和iis后还是不能上传成功；&lt;/li&gt;
&lt;li&gt;不想使用FTP，只想用http。&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;
&lt;p&gt;我们这里只讲分片上传，至于断网续传和秒传已经写好demo，下载路径放在文末，有兴趣的可以下载下来自己玩玩。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1osGyv2qYzTmtNIImqkcKvw&quot; target=&quot;_blank&quot;&gt;分片上传demo下载地址：https://pan.baidu.com/s/1osGyv2qYzTmtNIImqkcKvw&lt;/a&gt; 提取码：ie57&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1TuvGR6qUcKLMFjZGaQl5vg&quot; target=&quot;_blank&quot;&gt;分片上传、断网续传、秒传demo下载地址：https://pan.baidu.com/s/1TuvGR6qUcKLMFjZGaQl5vg&lt;/a&gt; 提取码：aej4&lt;/p&gt;
&lt;p&gt;http的网络请求中本身就已经具备了分片上传功能，那么什么是分片上传？我们来看看：&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;分片上传原理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;片上传支持将一个文件切割为一系列特定大小的数据片，分别将这些小数据片上传到服务端，全部上传完后再在服务端将这些数据片合并成为一个资源。&lt;/p&gt;
&lt;p&gt;分片上传引入了两个概念：&lt;strong&gt;块&lt;/strong&gt;（Block）和&lt;strong&gt;片&lt;/strong&gt;（Chunk）。每个&lt;strong&gt;块&lt;/strong&gt;由一到多个&lt;strong&gt;片&lt;/strong&gt;组成，而一个资源则由一到多个&lt;strong&gt;块&lt;/strong&gt;组成。他们之间的关系可以用下图表述：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1093832/201902/1093832-20190221144458478-1902464223.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;块&lt;/strong&gt;和&lt;strong&gt;片&lt;/strong&gt;是上传过程中作为临时存储的单位。服务端会以约七天为单位的周期清除上传后未被合并为块(文件)的数据片(块)。&lt;/p&gt;
&lt;p&gt;与分片上传相关的 API 有：创建块(mkblk)、上传片(bput)、创建文件(mkfile)。一个完整的分片上传流程可用下图表示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1093832/201902/1093832-20190221144809491-986539602.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中的关键点如下：&lt;/p&gt;
&lt;p&gt;将待上传的文件按预定义块大小切分为若干个块（每块大小不大于 4MB：块的大小可以自定义）。如果这个文件小于 4MB，就只有一个块。&lt;/p&gt;
&lt;p&gt;将每个块再按预定义的片大小切分为若干个片，先在服务端创建一个相应块（通过调用mkblk，并带上第一个片的内容），然后再循环将所有剩下的片全部上传（通过调用bput，从而完成一个块的上传）&lt;/p&gt;
&lt;p&gt;在所有块上传完成后，通过调用mkfile将这些上传完成的块信息再严格的按顺序组装出一个逻辑资源的元信息，从而完成整个资源的分片上传过程。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 在这个理论基础上，结合WebUploade插件（百度上传插件）和net mvc进行demo编写，老规矩，demo在文末，可以下载。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们看一下效果图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分片上传：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1093832/201902/1093832-20190221145135684-285356117.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　&lt;strong&gt;　&lt;span&gt;上传中（图一）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;         &lt;img src=&quot;https://img2018.cnblogs.com/blog/1093832/201902/1093832-20190221145219590-2041421580.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;span&gt;&lt;strong&gt;上传成功（图二）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt; &lt;strong&gt;分片、断网(暂停)、秒传：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1093832/201902/1093832-20190221145407315-1479951997.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;上传中（图一）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1093832/201902/1093832-20190221145443341-1617520442.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;上传成功（图二）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;代码展示：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下载webuploader插件后引入项目中，&lt;/p&gt;
&lt;p&gt;主要引用文件：&lt;/p&gt;
&lt;p&gt;&amp;lt;script src=&quot;~/Scripts/jquery-1.10.2.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&amp;lt;link href=&quot;~/Content/webuploader.css&quot; rel=&quot;stylesheet&quot; /&amp;gt;&lt;br/&gt;&amp;lt;script src=&quot;~/Scripts/webuploader.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&amp;lt;script src=&quot;~/Scripts/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;前端完整代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.w3.org/1999/xhtml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html; charset=utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Scripts/jquery-1.10.2.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Content/webuploader.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Scripts/webuploader.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Scripts/bootstrap.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uploader&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wu-example&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;!--用来存放文件信息--&amp;gt;
    &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;thelist&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uploader-list&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btns&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;picker&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;选择文件&amp;lt;/div&amp;gt;
        &amp;lt;input id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctlBtn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;开始上传&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn btn-default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
    &amp;lt;table width=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;50%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; border=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fileList_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;thead&amp;gt;
            &amp;lt;tr style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;background-color:#DADADA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;th&amp;gt;文件名称&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;类型&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;大小&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;进度&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;说明&amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;

        &amp;lt;tbody &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fileList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
          
        &amp;lt;/tbody&amp;gt;

    &amp;lt;/table&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;lt;script&amp;gt;
    &lt;span&gt;var&lt;/span&gt; applicationPath = window.applicationPath === &lt;span&gt;&quot;&quot;&lt;/span&gt; ? &lt;span&gt;&quot;&quot;&lt;/span&gt; : window.applicationPath || &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../../&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; GUID = WebUploader.Base.guid();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一个GUID&lt;/span&gt;
&lt;span&gt;    
    $(function () {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; $ =&lt;span&gt; jQuery;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; $list = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#thelist&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; uploader =&lt;span&gt; WebUploader.create({

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 选完文件后，是否自动上传。&lt;/span&gt;
            auto: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; swf文件路径&lt;/span&gt;
            swf: applicationPath + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;../Content/Uploader.swf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文件接收服务端。&lt;/span&gt;
            server: applicationPath + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Home/Upload&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 选择文件的按钮。可选。
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 内部根据当前运行是创建，可能是input元素，也可能是flash.&lt;/span&gt;
            pick: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#picker&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,

            chunked: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始分片上传&lt;/span&gt;
            chunkSize: &lt;span&gt;2048000&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每一片的大小&lt;/span&gt;
&lt;span&gt;            formData: {
                guid: GUID &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自定义参数，待会儿解释&lt;/span&gt;
&lt;span&gt;            },

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！&lt;/span&gt;
            resize: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
        });
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当有文件被添加进队列的时候&lt;/span&gt;
        uploader.on(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fileQueued&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function (file) {
            $list.append(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div id=&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + file.id + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot; class=&quot;item&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +
                &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;h4 class=&quot;info&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + file.name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +
                &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;p class=&quot;state&quot;&amp;gt;等待上传...&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +
                &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; name = file.name;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件名&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; type = fileType(file.name);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件类型，获取的是文件的后缀&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; volume = bytesToSize(file.size);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件大小格式化&lt;/span&gt;


            &lt;span&gt;var&lt;/span&gt; oTr = $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;tr&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;td&amp;gt;&amp;lt;cite title=&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/cite&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            str &lt;/span&gt;+= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + type + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            str &lt;/span&gt;+= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + volume + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            str &lt;/span&gt;+= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;td id=&quot;jintutiao&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            str &lt;/span&gt;+= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;span id=&quot;baifenbi&quot;&amp;gt;&amp;lt;/span&amp;gt;0%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            str &lt;/span&gt;+= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            str &lt;/span&gt;+= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;td id=&quot;uploding&quot;&amp;gt;等待上传&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.fileList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).html(str)
        });
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; aa = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文件上传过程中创建进度条实时显示。&lt;/span&gt;
        uploader.on(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;uploadProgress&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function (file, percentage) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; $li = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; file.id),
                $percent &lt;/span&gt;= $li.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.progress .progress-bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 避免重复创建&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;$percent.length) {
                $percent &lt;/span&gt;= $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div class=&quot;progress progress-striped active&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +
                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div class=&quot;progress-bar&quot; role=&quot;progressbar&quot; style=&quot;width: 0%&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +
                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +
                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).appendTo($li).find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.progress-bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            }

            $li.find(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;p.state&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).text(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;上传中&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#uploding&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;上传中&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            $percent.css(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, percentage * &lt;span&gt;100&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (percentage == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            {
                aa&lt;/span&gt;++&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (aa&amp;lt;=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; shuzi=percentage * &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
                $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#baifenbi&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(shuzi.toFixed(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;));
            }
        });

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文件上传成功，给item添加成功class, 用样式标记上传成功。&lt;/span&gt;
        uploader.on(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;uploadSuccess&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function (file, response) {
            $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + file.id).find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;p.state&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).text(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;已上传&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            $.post(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Home/Merge&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, { guid: GUID, fileName: file.name }, function (data) {
                $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#uploader .state&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;上传成功...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#uploding&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;上传成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            });
        });

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文件上传失败，显示上传出错。&lt;/span&gt;
        uploader.on(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;uploadError&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function (file) {
            $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + file.id).find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;p.state&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).text(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;上传出错&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        });

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 完成上传完了，成功或者失败，先删除进度条。&lt;/span&gt;
        uploader.on(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;uploadComplete&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function (file) {
            $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + file.id).find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.progress&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).fadeOut();
        });

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;所有文件上传完毕&lt;/span&gt;
        uploader.on(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uploadFinished&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, function () {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;提交表单&lt;/span&gt;&lt;span&gt;
        });
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始上传&lt;/span&gt;
        $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#ctlBtn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
            uploader.upload();
        });
    });

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字节大小转换，参数为b&lt;/span&gt;
&lt;span&gt;    function bytesToSize(bytes) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sizes = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Bytes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;KB&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;MB&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (bytes == &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;n/a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; i = parseInt(Math.floor(Math.log(bytes) / Math.log(&lt;span&gt;1024&lt;/span&gt;&lt;span&gt;)));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (bytes / Math.pow(&lt;span&gt;1024&lt;/span&gt;, i)).toFixed(&lt;span&gt;1&lt;/span&gt;) + &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt; +&lt;span&gt; sizes[i];
    };

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过文件名，返回文件的后缀名&lt;/span&gt;
&lt;span&gt;    function fileType(name) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; nameArr = name.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; nameArr[nameArr.length - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;].toLowerCase();
    }
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;后端控制器完整代码展示：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Mvc;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; BigFileUploader.Controllers
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HomeController : Controller
    {&lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; 文件上传&lt;span&gt;
        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Upload()
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; fileName = Request[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; fileRelName = fileName.Substring(&lt;span&gt;0&lt;/span&gt;, fileName.LastIndexOf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置临时存放文件夹名称&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; index = Convert.ToInt32(Request[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chunk&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前分块序号&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; guid = Request[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;guid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前端传来的GUID号&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; dir = Server.MapPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Upload&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件上传目录&lt;/span&gt;
            dir = Path.Combine(dir, fileRelName);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;临时保存分块的目录&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;System.IO.Directory.Exists(dir))
                System.IO.Directory.CreateDirectory(dir);
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; filePath = Path.Combine(dir, index.ToString());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;分块文件名为索引名，更严谨一些可以加上是否存在的判断，防止多线程时并发冲突&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; data = Request.Files[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;表单中取得分块文件&lt;/span&gt;
            &lt;span&gt;string&lt;/span&gt; extension = data.FileName.Substring(data.FileName.LastIndexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                (data.FileName.Length &lt;/span&gt;- data.FileName.LastIndexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) - &lt;span&gt;1&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取文件扩展名
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;if (data != null)&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为null可能是暂停的那一瞬间
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
            data.SaveAs(filePath +&lt;span&gt; fileName);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; Json(&lt;span&gt;new&lt;/span&gt; { erron = &lt;span&gt;0&lt;/span&gt; });&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Demo，随便返回了个值，请勿参考&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Merge()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; guid = Request[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;guid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;GUID&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; uploadDir = Server.MapPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Upload&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Upload 文件夹&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; fileName = Request[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fileName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件名&lt;/span&gt;
            &lt;span&gt;string&lt;/span&gt; fileRelName = fileName.Substring(&lt;span&gt;0&lt;/span&gt;, fileName.LastIndexOf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dir = Path.Combine(uploadDir, fileRelName);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;临时文件夹          &lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; files = System.IO.Directory.GetFiles(dir);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得下面的所有文件&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; finalPath = Path.Combine(uploadDir, fileName);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;最终的文件名（demo中保存的是它上传时候的文件名，实际操作肯定不能这样）&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; fs = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileStream(finalPath, FileMode.Create);
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; part &lt;span&gt;in&lt;/span&gt; files.OrderBy(x =&amp;gt; x.Length).ThenBy(x =&amp;gt; x))&lt;span&gt;//&lt;/span&gt;&lt;span&gt;排一下序，保证从0-N Write&lt;/span&gt;
&lt;span&gt;            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; bytes =&lt;span&gt; System.IO.File.ReadAllBytes(part);
                fs.Write(bytes, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, bytes.Length);
                bytes &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                System.IO.File.Delete(part);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除分块&lt;/span&gt;
&lt;span&gt;            }
            fs.Flush();
            fs.Close();
            System.IO.Directory.Delete(dir);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除文件夹&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; Json(&lt;span&gt;new&lt;/span&gt; { error = &lt;span&gt;0&lt;/span&gt; });&lt;span&gt;//&lt;/span&gt;&lt;span&gt;随便返回个值，实际中根据需要返回&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;以上说的是分片上传的demo，断网续传和秒传在下面，大家下载下来玩哇，个人感觉蛮不错的。&lt;br/&gt;我一直都主张功能点先写demo，有了成功的demo后引入项目中，demo可以存储起来做知识储备，保不定哪天又用到了。&lt;/p&gt;
&lt;p&gt;大家感觉小编搞得不错话关注一波，后续还有很多干货在等着你呢^_^&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1osGyv2qYzTmtNIImqkcKvw&quot; target=&quot;_blank&quot;&gt;分片上传demo下载地址：https://pan.baidu.com/s/1osGyv2qYzTmtNIImqkcKvw&lt;/a&gt; 提取码：ie57&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1TuvGR6qUcKLMFjZGaQl5vg&quot; target=&quot;_blank&quot;&gt;分片上传、断网续传、秒传demo下载地址：https://pan.baidu.com/s/1TuvGR6qUcKLMFjZGaQl5vg&lt;/a&gt; 提取码：aej4&lt;/p&gt;

</description>
<pubDate>Thu, 21 Feb 2019 07:10:00 +0000</pubDate>
<dc:creator>学习中的苦与乐</dc:creator>
<og:description>现在的项目开发基本上都用到了上传文件功能，或图片，或文档，或视频。我们常用的常规上传已经能够满足当前要求了， 然而有时会出现如下问题： 我们这里只讲分片上传，至于断网续传和秒传已经写好demo，下载路</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiongze520/p/10412693.html</dc:identifier>
</item>
<item>
<title>浅谈MySQL架构体系 - Alan_beijing</title>
<link>http://www.cnblogs.com/wangjiming/p/10410904.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangjiming/p/10410904.html</guid>
<description>&lt;p&gt;&lt;span&gt;一  数据库和数据库实例&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;      在MySQL的学习研究中，存在两个非常容易混淆的概念，即数据库和数据库实例。在MySQL中，数据库和数据库实例定义如下：&lt;/p&gt;
&lt;p&gt;      数据库：存储数据的集合；&lt;/p&gt;
&lt;p&gt;      数据库实例：操作数据库的集合。&lt;/p&gt;
&lt;p&gt;      如上定义很清楚了，数据库是用来存储数据的，数据库实例是用来操作数据的，从操作系统的角度，数据库实例表现为一个进程，对应多个线程，&lt;/p&gt;
&lt;p&gt;在非集群数据库架构中，数据库与数据库实例存在一 一对应关系，在数据库集群中，可能存在多个数据库实例操作一个数据库情况，即多对一关系。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二  MySQL基架&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;       对于MySQL来说，虽然经历了多个版本迭代（MySQL5.5,MySQL 5.6,MySQL 5.7,MySQL 8）,但每次的迭代，都是基于MySQL&lt;/p&gt;
&lt;p&gt;基架的，MySQL基架大致包括如下几大模块组件：&lt;/p&gt;
&lt;p&gt;     （1）MySQL向外提供的交互接口（Connectors）&lt;/p&gt;
&lt;p&gt;     （2）管理服务组件和工具组件(Management Service &amp;amp; Utilities)&lt;/p&gt;
&lt;p&gt;     （3）连接池组件(Connection Pool)&lt;/p&gt;
&lt;p&gt;     （4）SQL接口组件(SQL Interface)&lt;/p&gt;
&lt;p&gt;     （5）查询分析器组件(Parser)&lt;/p&gt;
&lt;p&gt;     （6）优化器组件（Optimizer）&lt;/p&gt;
&lt;p&gt;     （7）缓存主件（Caches &amp;amp; Buffers）&lt;/p&gt;
&lt;p&gt;     （8）插件式存储引擎（Pluggable Storage Engines）&lt;/p&gt;
&lt;p&gt;     （9）物理文件（File System）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201902/1066923-20190221103706946-1180917597.png&quot; alt=&quot;&quot; width=&quot;862&quot; height=&quot;567&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（一）MySQL向外提供的交互接口（Connectors）&lt;/p&gt;
&lt;p&gt;         Connectors组件，是MySQL向外提供的交互组件，如java,.net,php等语言可以通过该组件来操作SQL语句，实现与SQL的交互。&lt;/p&gt;
&lt;p&gt;（二）管理服务组件和工具组件(Management Service &amp;amp; Utilities)&lt;/p&gt;
&lt;p&gt;         提供对MySQL的集成管理，如备份(Backup),恢复(Recovery),安全管理(Security)等&lt;/p&gt;
&lt;p&gt;（三）连接池组件(Connection Pool)&lt;/p&gt;
&lt;p&gt;        负责监听对客户端向MySQL Server端的各种请求，接收请求，转发请求到目标模块。每个成功连接MySQL Server的客户请求都会被&lt;/p&gt;
&lt;p&gt;创建或分配一个线程，该线程负责客户端与MySQL Server端的通信，接收客户端发送的命令，传递服务端的结果信息等。&lt;/p&gt;
&lt;p&gt;（四）SQL接口组件(SQL Interface)&lt;/p&gt;
&lt;p&gt;       接收用户SQL命令，如DML,DDL和存储过程等，并将最终结果返回给用户。&lt;/p&gt;
&lt;p&gt;（五）查询分析器组件(Parser)&lt;/p&gt;
&lt;p&gt;      首先分析SQL命令语法的合法性，并尝试将SQL命令分解成数据结构，若分解失败，则提示SQL语句不合理。&lt;/p&gt;
&lt;p&gt;（六）优化器组件（Optimizer）&lt;/p&gt;
&lt;p&gt;     对SQL命令按照标准流程进行优化分析。&lt;/p&gt;
&lt;p&gt;（七）缓存主件（Caches &amp;amp; Buffers）&lt;/p&gt;
&lt;p&gt;     缓存和缓冲组件&lt;/p&gt;
&lt;p&gt;（八）MySQL存储引擎&lt;/p&gt;
&lt;p&gt;   1.什么是MySQL存储引擎&lt;/p&gt;
&lt;p&gt;       MySQL属于关系型数据库，而关系型数据库的存储是以表的形式进行的，对于表的创建，数据的存储，检索，更新等都是由MySQL&lt;/p&gt;
&lt;p&gt;存储引擎完成的，这也是MySQL存储引擎在MySQL中扮演的重要角色。&lt;/p&gt;
&lt;p&gt;      研究过SQL Server和Oracle的读者可能很清楚，这两种数据库的存储引擎只有一个，而MySQL的存储引擎种类比较多，如MyISAM存储&lt;/p&gt;
&lt;p&gt;引擎，InnoDB存储引擎和Memory存储引擎.&lt;/p&gt;
&lt;p&gt;       MySQL之所以有多种存储引擎，是因为MySQL的开源性决定的。MySQL存储引擎，从种类上来说，大致可归结为官方存储引擎和第三&lt;/p&gt;
&lt;p&gt;方存储引起。MySQL的开源性，允许第三方基于MySQL骨架，开发适合自己业务需求的存储引擎。&lt;/p&gt;
&lt;p&gt;   2.MySQL存储引擎作用&lt;/p&gt;
&lt;p&gt;       MySQL存储引擎在MySQL中扮演重要角色，其作比较重要作用，大致归结为如下两方面：&lt;/p&gt;
&lt;p&gt;        作用一：管理表创建，数据检索，索引创建等&lt;/p&gt;
&lt;p&gt;        作用二：满足自定义存储引擎开发。&lt;/p&gt;
&lt;p&gt;   3.MySQL引擎种类&lt;/p&gt;
&lt;p&gt;       不同种类的存储引擎，在存储表时的存储引擎表机制也有所不同，从MySQL存储引擎种类上来说，可以分为官方存储引擎和第三方存储引擎。&lt;/p&gt;
&lt;p&gt;       当前，也存在多种MySQL存储引擎，如MyISAM存储引擎，InnoDB存储引擎，NDB存储引擎，Archive存储引擎，Federated存储引擎，Memory&lt;/p&gt;
&lt;p&gt;存储引擎，Merge存储引擎，Parter存储引擎，Community存储引擎，Custom存储引擎和其他存储引擎。&lt;/p&gt;
&lt;p&gt;        其中，比较常用的存储引擎包括InnoDB存储引擎，MyISAM存储引擎和Momery存储引擎。&lt;/p&gt;
&lt;p&gt;   4.几种典型MySQL存储引擎比较&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201902/1066923-20190221110346340-983678201.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; （九）物理文件（File System）&lt;/p&gt;
&lt;p&gt;     实际存储MySQL 数据库文件和一些日志文件等的系统，如Linux，Unix,Windows等。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三 一个查询流程图&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201902/1066923-20190221143343748-1020795338.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四  参看文献&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 【01】MySQL权威指南  （美）Paul Dubois著    杨涛  杨晓云  王群  等译&lt;/p&gt;
&lt;p&gt;【02】MySQL技术内幕 InnoDB存储引擎   姜承尧著&lt;/p&gt;
&lt;p&gt;【03】SQL学习指南   （美）Alan Beaulieu 著&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 五 版权区&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;ul&gt;&lt;li&gt;   转载博客，必须注明博客出处&lt;/li&gt;
&lt;li&gt;   博主网址：http://www.cnblogs.com/wangjiming/&lt;/li&gt;
&lt;li&gt;   如您有新想法，欢迎提出，邮箱：2098469527@qq.com&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Thu, 21 Feb 2019 06:42:00 +0000</pubDate>
<dc:creator>Alan_beijing</dc:creator>
<og:description>一 数据库和数据库实例 在MySQL的学习研究中，存在两个非常容易混淆的概念，即数据库和数据库实例。在MySQL中，数据库和数据库实例定义如下： 数据库：存储数据的集合； 数据库实例：操作数据库的集合</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangjiming/p/10410904.html</dc:identifier>
</item>
<item>
<title>Spring Cloud Alibaba基础教程：Nacos的集群部署 - 程序猿DD</title>
<link>http://www.cnblogs.com/didispace/p/10412352.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/didispace/p/10412352.html</guid>
<description>&lt;p&gt;继续说说生产环境的Nacos搭建，通过上一篇&lt;a href=&quot;http://blog.didispace.com/spring-cloud-alibaba-4/&quot;&gt;《Spring Cloud Alibaba基础教程：Nacos的数据持久化》&lt;/a&gt;的介绍，我们已经知道Nacos对配置信息的存储原理，在集群搭建的时候，必须要使用集中化存储，比如：MySQL存储。下面顺着上一篇的内容，继续下一去。通过本文，我们将完成Nacos生产环境的搭建。&lt;/p&gt;
&lt;h2 id=&quot;集群搭建&quot;&gt;集群搭建&lt;/h2&gt;
&lt;p&gt;根据官方文档的介绍，Nacos的集群架构大致如下图所示（省略了集中化存储信息的MySQL）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/626506/201902/626506-20190221143211000-2016235997.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面我们就来一步步的介绍，我们每一步的搭建细节。&lt;/p&gt;
&lt;h4 id=&quot;mysql数据源配置&quot;&gt;MySQL数据源配置&lt;/h4&gt;
&lt;p&gt;对于数据源的修改，在上一篇&lt;a href=&quot;http://blog.didispace.com/spring-cloud-alibaba-4/&quot;&gt;《Nacos的数据持久》&lt;/a&gt;中已经说明缘由，如果还不了解的话，可以先读一下这篇再回来看这里。&lt;/p&gt;
&lt;p&gt;在进行集群配置之前，先完成对MySQL数据源的初始化和配置。主要分以下两步：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;第一步&lt;/strong&gt;：初始化MySQL数据库，数据库初始化文件：&lt;code&gt;nacos-mysql.sql&lt;/code&gt;，该文件可以在Nacos程序包下的conf目录下获得。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二步&lt;/strong&gt;：修改&lt;code&gt;conf/application.properties&lt;/code&gt;文件，增加支持MySQL数据源配置，添加（目前只支持mysql）数据源的url、用户名和密码。配置样例如下：&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;spring.datasource.platform=mysql

db.num=1
db.url.0=jdbc:mysql://localhost:3306/nacos?characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true
db.user=root
db.password=&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;3.1168831168831&quot;&gt;
&lt;p&gt;更多介绍与思考，可见查看上一篇&lt;a href=&quot;http://blog.didispace.com/spring-cloud-alibaba-4/&quot;&gt;《Nacos的数据持久化》&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;集群配置&quot;&gt;集群配置&lt;/h4&gt;
&lt;p&gt;在Nacos的&lt;code&gt;conf&lt;/code&gt;目录下有一个&lt;code&gt;cluster.conf.example&lt;/code&gt;，可以直接把&lt;code&gt;example&lt;/code&gt;扩展名去掉来使用，也可以单独创建一个&lt;code&gt;cluster.conf&lt;/code&gt;文件，然后打开将后续要部署的Nacos实例地址配置在这里。&lt;/p&gt;
&lt;p&gt;本文以在本地不同端点启动3个Nacos服务端为例，可以如下配置：&lt;/p&gt;
&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;127.0.0.1:8841
127.0.0.1:8842
127.0.0.1:8843&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;注意：这里的例子仅用于本地学习测试使用，实际生产环境必须部署在不同的节点上，才能起到高可用的效果。另外，Nacos的集群需要3个或3个以上的节点，并且确保这三个节点之间是可以互相访问的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;启动实例&quot;&gt;启动实例&lt;/h4&gt;
&lt;p&gt;在完成了上面的配置之后，我们就可以开始在各个节点上启动Nacos实例，以组建Nacos集群来使用了。&lt;/p&gt;
&lt;p&gt;由于本文中我们测试学习采用了本地启动多实例的情况，与真正生产部署会有一些差异，所以下面分两种情况说一下，如何启动各个Nacos实例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本地测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文中，在集群配置的时候，我们设定了3个Nacos的实例都在本地，只是以不同的端口区分，所以我们在启动Nacos的时候，需要修改不同的端口号。&lt;/p&gt;
&lt;p&gt;下面介绍一种方法来方便地启动Nacos的三个本地实例，我们可以将bin目录下的&lt;code&gt;startup.sh&lt;/code&gt;脚本复制三份，分别用来启动三个不同端口的Nacos实例，为了可以方便区分不同实例的启动脚本，我们可以把端口号加入到脚本的命名中，比如：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;startup-8841.sh&lt;/li&gt;
&lt;li&gt;startup-8842.sh&lt;/li&gt;
&lt;li&gt;startup-8843.sh&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;然后，分别修改这三个脚本中的参数，具体如下图的红色部分（端口号根据上面脚本命名分配）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/626506/201902/626506-20190221143224031-1159869864.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里我们通过&lt;code&gt;-Dserver.port&lt;/code&gt;的方式，在启动命令中，为Nacos指定具体的端口号，以实现在本机上启动三个不同的Nacos实例来组成集群。&lt;/p&gt;
&lt;p&gt;修改完3个脚本配置之后，分别执行下面的命令就可以在本地启动Nacos集群了：&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;sh startup-8841.sh
sh startup-8842.sh
sh startup-8843.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;生产环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在实际生产环境部署的时候，由于每个实例分布在不同的节点上，我们可以直接使用默认的启动脚本（除非要调整一些JVM参数等才需要修改）。只需要在各个节点的Nacos的&lt;code&gt;bin&lt;/code&gt;目录下执行&lt;code&gt;sh startup.sh&lt;/code&gt;命令即可。&lt;/p&gt;
&lt;h4 id=&quot;proxy配置&quot;&gt;Proxy配置&lt;/h4&gt;
&lt;p&gt;在Nacos的集群启动完毕之后，根据架构图所示，我们还需要提供一个统一的入口给我们用来维护以及给Spring Cloud应用访问。简单地说，就是我们需要为上面启动的的三个Nacos实例做一个可以为它们实现负载均衡的访问点。这个实现的方式非常多，这里就举个用Nginx来实现的简单例子吧。&lt;/p&gt;
&lt;p&gt;在Nginx配置文件的http段中，我们可以加入下面的配置内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/626506/201902/626506-20190221143240457-1083971518.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样，当我们访问：&lt;code&gt;http://localhost:8080/nacos/&lt;/code&gt;的时候，就会被负载均衡的代理到之前我们启动的三个Nacos实例上了。这里我们没有配置&lt;code&gt;upstream&lt;/code&gt;的具体策略，默认会使用线性轮训的方式，如果有需要，也可以配置上更为复杂的分发策略。这部分是Nginx的使用内容，这里就不作具体介绍了。&lt;/p&gt;
&lt;p&gt;这里提一下我在尝试搭建时候碰到的一个问题，如果您也遇到了，希望下面的说明可以帮您解决问题。&lt;/p&gt;
&lt;p&gt;错误信息如下：&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;2019-02-20 16:20:53,216 INFO The host [nacos_server] is not valid
 Note: further occurrences of request parsing errors will be logged at DEBUG level.

java.lang.IllegalArgumentException: The character [_] is never valid in a domain name.
    at org.apache.tomcat.util.http.parser.HttpParser$DomainParseState.next(HttpParser.java:926)
    at org.apache.tomcat.util.http.parser.HttpParser.readHostDomainName(HttpParser.java:822)
    at org.apache.tomcat.util.http.parser.Host.parse(Host.java:71)
    at org.apache.tomcat.util.http.parser.Host.parse(Host.java:45)
    at org.apache.coyote.AbstractProcessor.parseHost(AbstractProcessor.java:288)
    at org.apache.coyote.http11.Http11Processor.prepareRequest(Http11Processor.java:809)
    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
    at java.lang.Thread.run(Thread.java:748)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;主要原因是，一开始在配置&lt;code&gt;upstream&lt;/code&gt;的时候，用了&lt;code&gt;nacos_server&lt;/code&gt;作为名称，而在Nacos使用的Tomcat版本中不支持&lt;code&gt;_&lt;/code&gt;符号出现在域名位置，所以上面截图给出的&lt;code&gt;upstream&lt;/code&gt;的名称是&lt;code&gt;nacosserver&lt;/code&gt;，去掉了&lt;code&gt;_&lt;/code&gt;符号。&lt;/p&gt;
&lt;p&gt;到这里，Nacos的集群搭建就完成了！我们可以通过Nginx配置的代理地址：&lt;code&gt;http://localhost:8080/nacos/&lt;/code&gt;来访问Nacos，在Spring Cloud应用中也可以用这个地址来作为注册中心和配置中心的访问地址来配置。读者可以使用文末的代码示例来修改原来的Nacos地址来启动，看是否可以获取配置信息来验证集群的搭建是否成功。也可以故意的关闭某个实例，来验证Nacos集群是否还能正常服务。&lt;/p&gt;
&lt;h2 id=&quot;深入思考&quot;&gt;深入思考&lt;/h2&gt;
&lt;p&gt;在Nacos官方文档的指引下，Nacos的集群搭建总体上还是非常顺畅的，没有什么太大的难度。但是值得思考的一个问题跟在上一篇中讲数据持久化的思考类似，作为一个注册中心和配置中心，Nacos的架构是否显得太过于臃肿？除了Nacos自身之外，还需要依赖更多的中间件来完成整套生产环境的搭建，相较于其他的可以用于服务发现与配置的中间件来说，就不那么有优势了。尤其对于小团队来说，这样的复杂度与成本投入，也是在选型的时候需要去考虑的。&lt;/p&gt;
&lt;h2 id=&quot;代码示例&quot;&gt;代码示例&lt;/h2&gt;
&lt;p&gt;本文介绍内容的客户端代码，示例读者可以通过查看下面仓库中的&lt;code&gt;alibaba-nacos-config-client&lt;/code&gt;项目：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果您对这些感兴趣，欢迎star、follow、收藏、转发给予支持！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;前情回顾&quot;&gt;前情回顾：&lt;/h2&gt;
&lt;h2 id=&quot;以下专题教程也许您会有兴趣&quot;&gt;以下专题教程也许您会有兴趣&lt;/h2&gt;
</description>
<pubDate>Thu, 21 Feb 2019 06:33:00 +0000</pubDate>
<dc:creator>程序猿DD</dc:creator>
<og:description>继续说说生产环境的Nacos搭建，通过上一篇 '《Spring Cloud Alibaba基础教程：Nacos的数据持久化》' 的介绍，我们已经知道Nacos对配置信息的存储原理，在集群搭建的时候，必</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/didispace/p/10412352.html</dc:identifier>
</item>
<item>
<title>Django-restframework 源码分析之认证 - Eurekaa</title>
<link>http://www.cnblogs.com/zuanzuan/p/10412165.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zuanzuan/p/10412165.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近学习了 django 的一个 restframework 框架，对于里面的执行流程产生了兴趣，经过昨天一晚上初步搞清楚了执行流程（部分方法还不太清楚），于是想详细的总结一下当来一个请求时，在该框架里面是如何执行的？&lt;/p&gt;
&lt;h2 id=&quot;启动项目时&quot;&gt;启动项目时&lt;/h2&gt;
&lt;p&gt;昨天在调试django时，发现在 APIView 中打的断点没有断下来，而是打在 View 中的断点断下来了，调试了很多次，最后发现，在 django 项目启动时，会首先加载 urls 中的文件，执行 views 中类的 as_view方法，其实是继承自 APIView 的，APIView 继承自 django 原生 View 的as_view 方法。&lt;/p&gt;
&lt;p&gt;里面一个参数叫 pattern_name，对应的值是admin:auth_group_change，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcly1g0dqrtq01oj310m0cadjc.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;目前还不清楚这里面的具体流程是什么，但是并不妨碍阅读之后的源码，在这只要清楚一点，在 Django 项目启动时，路由所对应的CBV里面的相关方法的内存地址已经获取到。这样做的好处就是提高效率，坏处可能有一点点，会提升性能的消耗。&lt;/p&gt;
&lt;h2 id=&quot;具体路由和逻辑代码&quot;&gt;具体路由和逻辑代码&lt;/h2&gt;
&lt;p&gt;在这里假设来一个 GET 请求，urls 和 views里面的代码如下：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# urls.py

url(r'^book/(?P&amp;lt;id&amp;gt;\d+)/', views.Book.as_view()),&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# views.py
class Book(APIView):

    def dispatch(self, request, *args, **kwargs):
        return super().dispatch(request, *args, **kwargs)

    def get(self, request, id):

        response = {'status': 100, 'msg': None}

        book = models.Book.objects.filter(pk=id).first()
        book_ser = BookSerib(book, many=False)
        print('book_ser.data', book_ser.data)
        response['books'] = book_ser.data
        response['msg'] = '获取图书成功'
        print('response', response)
        return Response(response)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;urls 里面就是一个典型的 CBV 的路由配置，在 views 中一个是路由分发方法，一个是获取单本图书信息（通过 id）。&lt;/p&gt;
&lt;h2 id=&quot;as_view-具体执行流程&quot;&gt;as_view 具体执行流程&lt;/h2&gt;
&lt;p&gt;在项目启动时，相应的函数内存地址已经获取到，那么具体是怎么获取到的呢？&lt;/p&gt;
&lt;p&gt;在上面的代码中可以看到 &lt;code&gt;Book&lt;/code&gt;类是继承自&lt;code&gt;APIView&lt;/code&gt;类的，所以在路由配置里面执行的&lt;code&gt;as_view&lt;/code&gt;方法如果&lt;code&gt;Book&lt;/code&gt;类没有重写，那么执行的就是按照&lt;code&gt;mro&lt;/code&gt;列表顺序查找到的第一个方法，在这里执行的是&lt;code&gt;APIView&lt;/code&gt;类中的&lt;code&gt;as_view&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;查看该源码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcly1g0dr5k56eqj31kg0mwdop.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;APIView&lt;/code&gt;类的父类是&lt;code&gt;View&lt;/code&gt;类，查看该类的&lt;code&gt;as_view&lt;/code&gt;方法，源码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcly1g0dtkje60nj31b00u0k29.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;具体&lt;code&gt;as_view&lt;/code&gt;就是将&lt;code&gt;view&lt;/code&gt;函数的内存地址返回，以便请求来时直接调用。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;initkwargs&lt;/code&gt;这个参数应该是由 django 内部传的一些参数，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1g0ds6hb8o9j311w0bmn1o.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;请求到来时&quot;&gt;请求到来时&lt;/h2&gt;
&lt;p&gt;因为经过 django 先执行了&lt;code&gt;as_view&lt;/code&gt;返回&lt;code&gt;view&lt;/code&gt;的内存地址，所以会直接执行&lt;code&gt;view&lt;/code&gt;函数，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcly1g0dttrs9t9j31m8082dls.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这里该 self 由于是 继承自&lt;code&gt;APIView&lt;/code&gt;类的&lt;code&gt;Book&lt;/code&gt;类的对象，所以&lt;code&gt;dispatch&lt;/code&gt;方法首先去自身找，之后去父类找，在&lt;code&gt;APIView&lt;/code&gt;类中找到&lt;code&gt;dispatch&lt;/code&gt;方法，源码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1g0du0o9jnej31mg0tewsm.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;initialize_request方法&quot;&gt;initialize_request方法：&lt;/h3&gt;
&lt;p&gt;源码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1g0du2ggqlaj31gy0ein1a.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在实例化&lt;code&gt;Request&lt;/code&gt;对象时，&lt;code&gt;authenticators&lt;/code&gt;参数需要在认证时使用，所以先把这个参数的值找出来。步骤如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;调用 self.get_authenticators&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcly1g0du4kpwcij31la05iwh3.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;找到 self.authentication_classes&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcly1g0du79kijtj31gc0fmjyl.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;找到 api_settings,才能找到DEFAULT_AUTHENTICATION_CLASSES&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcly1g0du8ss6x4j31iw05atad.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;DEFAULT和IMPORT_STRINGS参数&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;DEFAULT参数&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1g0duhenrzgj31hy0rwakr.jpg&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;IMPORT_STRINGS参数&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcly1g0dulz5m9tj31fs0j2qa6.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;实例化 APISettings 对象&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcly1g0dv587iu9j31e40pugul.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;通过__getattr__方法获取值&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcly1g0dve7p0ntj31ko0nsqcj.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;执行perform_import方法&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1g0dvpmnf7ij31lm0c879s.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;执行import_from_string&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1g0dvul5mptj31jy0ceahi.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;执行import_module&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcly1g0dvx80nw0j31fa0iigra.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;执行_bootstrap._gcd_import&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1g0dw0ns9znj31h00cy43l.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;执行_sanity_check&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1g0dw3ij3ivj31fm0e043v.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;_sanity_check返回，执行_find_and_load方法&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcly1g0dw6pw2ghj31f60dq79n.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;所以通过__getattr__的到的是一个列表，里面是两个类，分别是[rest_framework_authentication_SessionAuthentication, rest_framework_authentication_BasicAuthentication]&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;到这里，initialize_request方法执行结束，得到一个经过 Request 类实例化的 request 对象，该对象里面含有原生 request 对象，可以通过&lt;code&gt;request._request&lt;/code&gt;取到。&lt;/p&gt;
&lt;h3 id=&quot;initial-方法&quot;&gt;initial 方法：&lt;/h3&gt;
&lt;p&gt;源码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1g0dwg9bl40j31f00i00zn.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里传入的&lt;code&gt;request&lt;/code&gt;参数是经过&lt;code&gt;Request&lt;/code&gt;封装后的参数&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;执行get_format_suffix&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcly1g0dxa7s5azj31bs06etbd.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;执行完这个方法，&lt;code&gt;self_format_kwarg = None&lt;/code&gt;，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;执行perform_content_negotiation&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1g0dxfetavbj31lq0ckq70.jpg&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;执行self.get_renders&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcly1g0dxq4mzrzj31ha05s0vq.jpg&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;执行self.get_content_negotiator&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcly1g0e02qiaoxj31hi07y0vv.jpg&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;执行 conneg.select_renderer方法&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1g0e0a0yqxyj315h0u0qhz.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;未完待续…...&lt;/p&gt;
</description>
<pubDate>Thu, 21 Feb 2019 06:11:00 +0000</pubDate>
<dc:creator>Eurekaa</dc:creator>
<og:description>Django restframework 源码分析之认证 前言 最近学习了 django 的一个 restframework 框架，对于里面的执行流程产生了兴趣，经过昨天一晚上初步搞清楚了执行流程（部</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zuanzuan/p/10412165.html</dc:identifier>
</item>
</channel>
</rss>