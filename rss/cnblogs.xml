<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>再见2018，你好2019 - 程序猿tx</title>
<link>http://www.cnblogs.com/taixiang/p/10229054.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/taixiang/p/10229054.html</guid>
<description>&lt;blockquote readability=&quot;1.171875&quot;&gt;
&lt;p&gt;文章链接：&lt;a href=&quot;https://mp.weixin.qq.com/s/MoZ2_3syo9PyCW-HN_4fbw&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s/MoZ2_3syo9PyCW-HN_4fbw&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/1/5/1681d3a4656d9296?w=960&amp;amp;h=480&amp;amp;f=png&amp;amp;s=23590&quot;/&gt;&lt;br/&gt;迟来的18年总结来了，趁着周末，写下总结。&lt;br/&gt;18年过去，19年来了，去年的现在，还没有习惯用文字记录这一年的得失，每到这个时候，各大新闻网站就开始盘点2018年大事记，各大app开始总结用户去年一年的行为，看完不禁感慨这一年发生了这么事。&lt;/p&gt;
&lt;p&gt;网上看过一个段子，说18年年初，定了目标要赚10万，年底一看发现自己离目标还差15万，笑归笑，再看看自己这一年，有得有失。&lt;/p&gt;
&lt;p&gt;个人最大的收获应该算做了自己的 &lt;a href=&quot;http://www.manjiexiang.cn/&quot;&gt;博客网站&lt;/a&gt;，到现在累计写了&lt;strong&gt;36&lt;/strong&gt; 篇博客了，博客也发布到了各大技术网站，主要会记录日常工作中用到的知识或者自己学习的过程，个人网站用的 &lt;code&gt;django&lt;/code&gt;搭建的，做网站的整个过程时间还是蛮长的，从前端样式到后台数据到服务器部署，一套流程下来，做完自己也学到了很多。而且&lt;code&gt;python&lt;/code&gt; 真的挺好用的，自己平常爬爬网站，弄弄数据还是挺方便的。&lt;/p&gt;
&lt;p&gt;小程序方面，难度上没那么大，比较容易上手。有了自己的后台，写写接口，自己也做了两个小程序。&lt;/p&gt;
&lt;p&gt;主业是android，18年尝试使用了组件化去开发，目前来看效果还可以。&lt;/p&gt;
&lt;p&gt;早前申请的微信公众号也用了起来，虽然并没有多少人关注的，个人在运营公众号能力方面也确实欠缺。据说现在新申请的公众号已经没了留言功能了，庆幸自己申请的早吧。&lt;/p&gt;
&lt;p&gt;18年比较遗憾的是没有花更多的时间去看书研究，1本技术类+2本理财类的，技术类的书看了对一些知识点没有加以运用，难以记住；理财类的实操上有点难度的，资金也没那么充足的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/1/5/1681d3b1bd8df270?w=720&amp;amp;h=480&amp;amp;f=jpeg&amp;amp;s=85153&quot;/&gt;&lt;/p&gt;
&lt;p&gt;19年的话，会继续坚持写博客，持续输出，记录学习的过程，另外还会往混合开发上发展，之前接触过&lt;code&gt;react-native&lt;/code&gt;，还可以再进一步的深入。前端方面，之前都是用的&lt;code&gt;jQuery&lt;/code&gt;，后续想学习下&lt;code&gt;vue&lt;/code&gt;做到前后端分离。&lt;/p&gt;
&lt;p&gt;阅读方面，19年会继续去啃技术类的书，非技术类的也会选择性的阅读。&lt;/p&gt;
&lt;p&gt;英语方面，慢慢养成英语听力的习惯。&lt;/p&gt;
&lt;p&gt;鉴于平常比较宅加之工作的一些原因，18年陪女朋友的时间很少，希望19年有所好转，当然我们也有自己的一个小目标！&lt;/p&gt;
&lt;p&gt;最后要提到运动方面，去健身房是不可能的，就连跑步的可能性都很小，只能每天坚持平板支撑了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2019，just do IT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/1/5/1681d3bc5124e1d7?w=805&amp;amp;h=480&amp;amp;f=jpeg&amp;amp;s=34898&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 06 Jan 2019 07:30:00 +0000</pubDate>
<dc:creator>程序猿tx</dc:creator>
<og:description>文章链接：</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/taixiang/p/10229054.html</dc:identifier>
</item>
<item>
<title>【webpack系列】从零搭建 webpack4+react 脚手架（一） - nianzhilian</title>
<link>http://www.cnblogs.com/nianzhilian/p/10229052.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nianzhilian/p/10229052.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;搭建一个React工程的方式有很多，官方也有自己的脚手架，如果你和我一样，喜欢刨根究底，从零开始自己一行一行代码创建一个React脚手架项目，那你就来对地方了。本教程是针对React新手，以及对webpack还不熟悉的用户，或者是想了解当前前端工程化方案的用户。我会在整个系列通过webpack4的配置，从生产和开发环境分别入手，包含代码压缩，大文件gz压缩，webpack4的code split，postcss等插件如何引入，css编译，如何让环境支持各种css预处理器，cssModule配置化，bundle结果分析，本地代理配置，React相关技术栈等等都有一个讲解。本系列教材由浅入深，将会从零开始一步步完善整个脚手架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;前提条件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;12.673745173745&quot;&gt;
&lt;p&gt;在开始之前，请确保安装了 Node.js 的最新版本。建议使用 Node.js 最新的长期支持版本(LTS - Long Term Support)。如果你使用旧版本，你可能遇到各种问题，因为它们可能缺少 本教程用到的相关的 package 包。&lt;/p&gt;
&lt;p&gt;执行以下命令可以查看你本机安装的node版本:&lt;br/&gt;&lt;code&gt;node -v &amp;amp;&amp;amp; npm -v&lt;/code&gt;&lt;br/&gt;如果你本机的node版本不是最新的，建议升级到新的node版本。node版本建议通过nvm进行管理，了解可以查看 &lt;a href=&quot;http://nvm.sh/&quot;&gt;http://nvm.sh&lt;/a&gt; 这里不再阐述。&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;通过本课程，你会学到什么？&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;学习完本系列教程，你将会了解（持续更新）：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ol&gt;&lt;li&gt;前端开发的框架，工程化的方式&lt;/li&gt;
&lt;li&gt;webpack4的基础配置以及常用的一些插件&lt;/li&gt;
&lt;li&gt;postcss的使用，以及常用的postcss插件&lt;/li&gt;
&lt;li&gt;开发环境和生产环境的脚本的不同&lt;/li&gt;
&lt;li&gt;如何让控制台输出编译结果更加高大上&lt;/li&gt;
&lt;li&gt;大文件如何进行gz压缩&lt;/li&gt;
&lt;li&gt;让css Module可配置化&lt;/li&gt;
&lt;li&gt;接口转发&lt;/li&gt;
&lt;li&gt;如何进行bundle分析&lt;/li&gt;
&lt;li&gt;如何规范代码，如何更好地整合eslint。&lt;/li&gt;
&lt;li&gt;如何测试React代码&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.从空文件夹开始&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;现在创建一个空的文件夹，用你的开发工具打开它。&lt;br/&gt;打开终端，确保你已经进入刚刚创建的目录，接下去执行：&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;

&lt;p&gt;终端会让你输入一些信息，比如名字，版本，描述，入口文件等等。 完成后，npm会自动在你的根目录生成 package.json 文件。package.json 文件不仅仅包含项目的配置信息（比如名称、版本、许可证等元数据），还会记录项目所需要的各种模块，以及项目运行的脚本等等。&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.安装webpack4&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div readability=&quot;74.5&quot;&gt;本教程使用webpack来管理react工程。&lt;br/&gt;执行以下命令，安装webpack
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install --save-dev webpack
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;npm安装的包会存放在一个叫node_modules文件夹。如果你用的npm版本是npm 5版本，你还会发现多了package-lock.json文件。package-lock.json文件是当 node_modules 或 package.json 发生变化时自动生成的文件，它的主要功能是确定当前安装的包的依赖，以便后续重新安装的时候生成相同的依赖，而忽略项目开发过程中有些依赖已经发生的更新（翻译自官方说明）。&lt;/p&gt;
&lt;p&gt;打开package.json，你会发现多了一个名为devDependencies的属性，通过--save-dev安装的包会记录在此属性下。后续我们还会使用--save去安装一个模块包，区别是通过--save安装的模块会记录在dependencies属性内，而不是devDependencies属性。通过字面意思，你应该也可以知道，一个是dev开发时候的依赖，一个是运行时的依赖。&lt;/p&gt;
&lt;p&gt;新建webpack配置文件。webpack 的配置文件，是导出一个对象的 JavaScript 文件。在根目录创建build文件夹，添加一个js文件，命名为webpack.base.conf.js。&lt;br/&gt;手动敲入以下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;const&lt;/span&gt; path = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; DIST_PATH = path.resolve(__dirname, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;../dist&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

        module.exports &lt;/span&gt;=&lt;span&gt; {
            entry: {
                app: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./app/index.js&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
            },
            output: {
                filename: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;js/bundle.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                path: DIST_PATH
            }
        };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;webpack 配置是标准的 Node.js CommonJS 模块，它通过require来引入其他模块，通过module.exports导出模块，由 webpack 根据对象定义的属性进行解析。&lt;/p&gt;
&lt;p&gt;这里定义了2个属性。当然，webpack的配置属性远远不止这2个，之后我会深入讲解更多属性的配置。回到我们定义的2个属性，entry定义了入口文件，output定义了编译后的输出。按照对这段代码的理解，它应该是告诉webpack，我这个项目入口文件是app目录下的index.js文件，你编译后，在根目录下创建dist文件夹（如果不存在），最后把编译后的文件输出到dist文件下，命名为bundle.js。&lt;/p&gt;
&lt;p&gt;webpack4.0还增加了mode属性，用来表示不同的环境。&lt;br/&gt;我们使用merge的方式来组织webpack基础配置和不同环境的配置。&lt;br/&gt;先安装webpack-merge：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install --save-dev webpack-merge
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在build文件夹中再添加一个js文件，命名为webpack.prod.conf.js，输入以下代码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;const&lt;/span&gt; merge = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;webpack-merge&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; baseWebpackConfig = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./webpack.base.conf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    module.exports &lt;/span&gt;=&lt;span&gt; merge(baseWebpackConfig, {
        mode: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;production&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在根目录下创建app目录，然后创建index.js文件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; element =document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    element.innerHTML &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello, world!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在根目录创建一个public文件夹，然后新建一个index.html文件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html lang=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;en&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;head&amp;gt;
          &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
          &amp;lt;title&amp;gt;从零开始搭建react工程&amp;lt;/title&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
      &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../dist/js/bundle.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
      &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你现在的文件路径应该看起来是这样：（显然我们引用的bundle.js并不存在）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
      |- /&lt;span&gt;app
        &lt;/span&gt;|-&lt;span&gt; index.js
      &lt;/span&gt;|- /&lt;span&gt;node_modules
      &lt;/span&gt;|- /&lt;span&gt;public&lt;/span&gt;
        |-&lt;span&gt; index.html
      &lt;/span&gt;|- /&lt;span&gt;build
        &lt;/span&gt;|- webpack.&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.conf.js
        &lt;/span&gt;|-&lt;span&gt; webpack.prod.conf.js
      &lt;/span&gt;|-&lt;span&gt; package.json
      &lt;/span&gt;|- package-&lt;span&gt;lock&lt;/span&gt;.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下去我们要通过执行webpack命令，来编译我们的代码，生成bundle.js。4.0版本之后的webpack，已经将webpack命令工具迁移到webpack-cli模块了。你需要安装webpack-cli。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install --save-dev webpack-cli
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装完成后，执行下面脚本进行编译：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
webpack --config build/webpack.prod.conf.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译完成后，刷新根目录，可以看到已经生成dist文件夹和bundle.js文件。&lt;br/&gt;用浏览器打开html文件，你会看到hello webpack。我们成功通过webpack编译了js文件，并且没有出现问题。&lt;br/&gt;webpack --config build/webpack.prod.conf.js命令，我们可以通过npm scripts管理起来。&lt;br/&gt;在package.json文件，我们为scripts属性配置一个build命令，其值为：webpack --config build/webpack.prod.conf.js，以下是scripts的相关代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scripts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;webpack --config build/webpack.prod.conf.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    },&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 然后在命令行输入：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
npm run build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以看到，webpack重新进行了编译，这和执行&lt;br/&gt;&lt;code&gt;webpack --config build/webpack.prod.conf.js&lt;/code&gt; 是一样的效果。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.安装react&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在终端输入以下命令：&lt;/p&gt;
&lt;div readability=&quot;16.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install --save react react-dom
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装成功后，我们在项目使用react，我们直接修改app目录下的index.js的代码，我们用react来插入这句hello world！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    import React &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;react&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    import ReactDom &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;react-dom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

    ReactDom.render(
        &lt;/span&gt;&amp;lt;h1&amp;gt;hello, world!&amp;lt;/h1&amp;gt;&lt;span&gt;,
        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，我们再编译试试看。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
npm run build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;失败了？对不对！首先，我告诉你这段代码没有任何问题，你需要思考下，它为什么会编译失败。下一小节，我们一起来了解下原因。&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;4.整合babel 7.0&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;为什么会失败？因为webpack只识别JavaScript文件，而且只能编译es5版本的JavaScript语法。实际上，我们使用ES2015，以及jsx的语法糖，webpack它根本不认识啊。怎么办？webpack 可以使用 loader 来预处理文件。它不仅仅可以处理JavaScript本身，还允许你打包任何的静态资源。&lt;br/&gt;其中，babel-loader，就是这样一个预处理插件，它加载 ES2015+ 代码，然后使用 Babel 转译为 ES5。我们来了解下如何在webpack配置babel-loader。&lt;br/&gt;首先安装babel相关的模块：&lt;/p&gt;
&lt;div readability=&quot;37.018489984592&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install --save-dev babel-loader @babel/preset-react @babel/preset-env @babel/core
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了babel-loader，我们还安装了好多的包，其中@babel/core是babel的核心模块，@babel/preset-env是转译ES2015+的语法，@babel/preset-react是转译react的JSX以及FLOW。了解详情可以移步 babel官方。&lt;br/&gt;第二步，你需要在根目录建立一个.babelrc的文件，配置相关的presets：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;presets&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
        [
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@babel/preset-env&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
          {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;targets&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
              &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;browsers&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt; 1%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;last 5 versions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ie &amp;gt;= 8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
              ]
            }
          }
        ],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@babel/preset-react&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      ]
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多关于babel的配置可以看下官方&lt;a href=&quot;http://babeljs.io/docs/en&quot; target=&quot;_blank&quot;&gt;http://babeljs.io/docs/en&lt;/a&gt;的说明，这里不再阐述。&lt;/p&gt;
&lt;p&gt;第三步，修改webpack.base.conf.js文件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;const&lt;/span&gt; path = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; APP_PATH = path.resolve(__dirname, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;../app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; DIST_PATH = path.resolve(__dirname, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;../dist&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    module.exports &lt;/span&gt;=&lt;span&gt; {
        entry: {
            app: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./app/index.js&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        },    
        output: {
            filename: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;js/bundle.js&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            path: DIST_PATH
        },
        module: {
            rules: [
                {
                    test: &lt;/span&gt;/\.js?$/&lt;span&gt;,
                    use: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;babel-loader&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    include: APP_PATH
                }
            ]
        }
    };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 webpack 配置中定义 loader 时，要定义在 module.rules 中。其中，test和use属性是必须的。include属性，定义了rules执行的范围。这告诉 webpack 编译器如下信息：&lt;br/&gt;嘿，webpack 编译器，你在编译文件过程中，如果这个是在app目录下的js文件，在你对它打包之前，先使用 babel-loader 转换一下。&lt;br/&gt;重新执行本地编译&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
npm run build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这次不再报错，编译成功。&lt;br/&gt;好了，再次打开public目录的index.html，页面成功显示了hello world。&lt;br/&gt;可能，你还有一些疑惑，html文件如何也同步到dist目录？bundle.js文件修改了，万一被浏览器缓存了怎么办？如何通过script标签把打包生成的js自动添加到html？react和业务代码如何分开打包？如何实现开发环境的热更新？&lt;/p&gt;
&lt;p&gt;下一章，我将针对这些问题，会一一进行讲解，并且持续优化我们的工程。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 06 Jan 2019 07:28:00 +0000</pubDate>
<dc:creator>nianzhilian</dc:creator>
<og:description>搭建一个React工程的方式有很多，官方也有自己的脚手架，如果你和我一样，喜欢刨根究底，从零开始自己一行一行代码创建一个React脚手架项目，那你就来对地方了。本教程是针对React新手，以及对web</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nianzhilian/p/10229052.html</dc:identifier>
</item>
<item>
<title>使用内存映射开发高性能进程间消息通信组件 - 漂亮的猫</title>
<link>http://www.cnblogs.com/lanxiaoke/p/10228355.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lanxiaoke/p/10228355.html</guid>
<description>&lt;h2&gt;一、背景&lt;/h2&gt;
&lt;p&gt;　　项目开发中免不了各模块或系统之间进行消息通信，目前热门的消息中间件有Redis、RabbitMQ、Kafka、RocketMQ等等。&lt;/p&gt;
&lt;p&gt;以上几种组件中Redis在消息队列方面表现还可以，但是如果涉及发布订阅功能，就不行了，最近项目就使用了redis的发布订阅，&lt;/p&gt;
&lt;p&gt;每秒只能发出几千条，虽然目前绰绰有余，但是瓶颈可以预期。&lt;/p&gt;
&lt;p&gt;　　其余的几种都是比较重量级的消息中间件，什么跨平台、分布式、集群、支持N种协议等等，很高大全，&lt;/p&gt;
&lt;p&gt;我们可能就只使用了其中1、2个功能。严格来说，项目中集成这几种MQ的工作量是不小的，对于中小型系统来说，可能维护MQ&lt;/p&gt;
&lt;p&gt;稳定的工作量都比项目还大，难度也高，所有功能用全了的程序员恐怕不多。&lt;/p&gt;
&lt;p&gt;　　从长远考虑出发，选择重量级MQ恐怕是板上钉钉的事，但是项目一开始就上这几种，我觉得那也是欠缺考虑的。如果项目&lt;/p&gt;
&lt;p&gt;根本不要求跨机器通信，那杀鸡就不要用牛刀了。比如，你只是在模块之间、线程之间、进程之间，或者是在同一主机的各种不同系统之间，&lt;/p&gt;
&lt;p&gt;其实都可以不用重量级MQ。当然你使用了也没事，看个人选择。&lt;/p&gt;
&lt;p&gt;　　最近的项目有这么个场景，采集近所有底层设备，每个设备有点3000个，总共20多万个点需要采集上来。刚开始使用了Redis的发布订阅，&lt;/p&gt;
&lt;p&gt;但是程序毫无疑问地挂了，根本带不起来；因为程序启动时每个点的值都是从0变成N，就需要发消息出来，那一开始消息是很多的，redis根本&lt;/p&gt;
&lt;p&gt;处理不完，而且有很高频率的超时断线。以至于想换RabbitMQ，后来想想还是算了，因为那样增加项目难度不说，后期维护也是个难题。&lt;/p&gt;
&lt;p&gt;说到底这是模块之间的通信，是主程序（Winform）调用采集C++的DLL类库，发出消息后主程序和web端订阅，在主程序与DLL这边，在DLL&lt;/p&gt;
&lt;p&gt;方法上增加一个回调函数就搞定了，完全不用走消息中间件，Web端要哪些点的实时值就先ASK，先请求需要看哪些点，如何在主程序这边&lt;/p&gt;
&lt;p&gt;发布那些点的实时值消息，这样发布订阅的数据量少了2、3个数量级不止。&lt;/p&gt;
&lt;h2&gt;二、需求&lt;/h2&gt;
&lt;p&gt;　　针对上边的业务场景，因为是模块之间的线程间通信，这样搞问题不大；如果是进程之间也要那么高频率的通信，那就不好办了，我们&lt;/p&gt;
&lt;p&gt;不想使用重量级MQ，又想高频率传输消息，怎么办呢？网上搜索了一番，貌似没看到有成熟的速度又快、体量又小，部署又简单的中间件。&lt;/p&gt;
&lt;p&gt;所以在下不才，针对这个问题抛砖引玉，做一个demo出来供大家讨论一下。&lt;/p&gt;
&lt;h2&gt;三、原理&lt;/h2&gt;
&lt;p&gt;　　应题，就是使用内存映射来做同一个机器下各种消息的通信，之前也写过一篇关于使用共享内存实现快速读写的文章，点击前往浏览&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lanxiaoke/p/8971301.html&quot; target=&quot;_blank&quot;&gt;“.net环境下跨进程、高频率读写数据”&lt;/a&gt;，但是内存映射比较适合做消息队列，因为消息可以持久化在本地，没读完下次进来还可以接着读。&lt;/p&gt;
&lt;p&gt;我预想是这样设计：&lt;/p&gt;
&lt;p&gt;1、发布订阅涉及到2个主要方法：Publish(string channel)、Subscribe(string channel, Callback callback);&lt;/p&gt;
&lt;p&gt;2、为每个channel生成一个文件：channel.db,默认每个db可以存储1000个同类型的结构体消息作为消息队列，从头部写入，尾部读出。&lt;/p&gt;
&lt;p&gt;　  每个db文件前面留一个索引区作为发布方与订阅方各自的读写位置。发布与订阅前，先读写这个索引区，因为是一对一读写，所以&lt;/p&gt;
&lt;p&gt;      可以&lt;span&gt;&lt;strong&gt;完美避开读写锁&lt;/strong&gt;&lt;/span&gt;，大大提高性能。&lt;/p&gt;
&lt;p&gt;3、针对一对多需求，单独设计一个config.db文件存储种channel与其相关订阅信息，大概原理图如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/254672/201901/254672-20190106132933521-220271792.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4、解决读写不加锁问题&lt;/p&gt;
&lt;p&gt;我们看结构体：SIndex有三个属性&lt;/p&gt;
&lt;p&gt;1) WriteIndex 记录发布方(Pubish)最后写入数据的位置&lt;/p&gt;
&lt;p&gt;2) ReadIndex 记录订阅方(Subscribe)最后读取数据的位置&lt;/p&gt;
&lt;p&gt;3) Over 表示WriteIndex已达到队列最大值，再WriteIndex小于等于队列最大值前，读写如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/254672/201901/254672-20190106140654141-1083229721.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;WriteIndex达到最大值后再往下写Over就要取反，如由False变为True。WriteIndex=0&lt;/p&gt;
&lt;p&gt;如果此时没有订阅方,那新消息就会被抛弃，因为已无空间存储。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/254672/201901/254672-20190106141002617-1471105586.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4) 如果ReadIndex数值到队列最大值，Over也取反，此时ReadIndex = 0,读写又变成图1所示&lt;/p&gt;
&lt;p&gt;5) 读写过程中并不存在互斥的情况，只要管理好读写位置，就可以避免加锁。&lt;/p&gt;
&lt;h2&gt;四、接口设计&lt;/h2&gt;
&lt;p&gt;4.1、主要参数定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
#define FM_MAX_CHANNEL              100             // 暂定最多100个不同频道
#define FM_MAX_SUBSCRIBE        3               // 暂定最多3个订阅用户
#define FM_MAX_ROWS                     1000    // 暂定最多队列大小为1000
#define FM_DISCONNECT_TIME  5000        // 超过5000毫秒无心跳更新视为订阅断开
#define FM_KEEP_CONN_CYCLE  1000        // 保持心跳连接的时间周期
#define FM_NOTHING                      -1              // 空白,数组为0等
#define FM_WORD_SIZE            sizeof(WORD)    // WORD长度
#define FM_INDEX_SIZE           sizeof(SIndex)  // SIndex长度　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.2、结构体&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('670e869d-2c82-46e3-ab4d-b39ae94dbe63')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_670e869d-2c82-46e3-ab4d-b39ae94dbe63&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_670e869d-2c82-46e3-ab4d-b39ae94dbe63&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('670e869d-2c82-46e3-ab4d-b39ae94dbe63',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_670e869d-2c82-46e3-ab4d-b39ae94dbe63&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 索引&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    WORD WriteIndex;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    WORD ReadIndex;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     WORD Over;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当W或R超过MAX一次，Over取反一次,Over默认为False&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;}SIndex;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 内存映射参数&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    HANDLE FileHandle;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    HANDLE FileMappingHandle;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    LPVOID MapViewOfFileHandle;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    UINT StructSize;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; FileName[&lt;span&gt;20&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    UINT SubscribeIndex;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    WORD Conned;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;}SDbConnInfo;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 频道&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; ChannelName[&lt;span&gt;20&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    UINT StructSize;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    DWORD Subscribe1LastTime;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    DWORD Subscribe2LastTime;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    DWORD Subscribe3LastTime;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;}SChannel;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 频道与订阅映射&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; ChannelName[&lt;span&gt;20&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    SDbConnInfo DbConnInfo[FM_MAX_SUBSCRIBE];
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; }SChannelMapDbConnInfo;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;4.3、主要方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
    // 发布信息
        template&amp;lt;typename T&amp;gt;
        int Publish(const char *channel, T* data);

        // 订阅信息
        template&amp;lt;typename T&amp;gt;
        void Subscribe(const char *channel, SubscribeCallBackHandle callback);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;五、代码实现&lt;/h2&gt;
&lt;p&gt;5.1 、FMDBManager，主要管理内存映射相关操作，因为是读写位置不一样，所以不需要加互斥量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0321bc1b-b6ac-4fb3-b270-adce8f38ab03')&quot; readability=&quot;52.5&quot;&gt;&lt;img id=&quot;code_img_closed_0321bc1b-b6ac-4fb3-b270-adce8f38ab03&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0321bc1b-b6ac-4fb3-b270-adce8f38ab03&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0321bc1b-b6ac-4fb3-b270-adce8f38ab03',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0321bc1b-b6ac-4fb3-b270-adce8f38ab03&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;100&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FMDBManager
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;    FMDBManager() {};
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;     ~&lt;span&gt;FMDBManager() {};
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Create(SDbConnInfo *&lt;span&gt;info)
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;         CString fileName(info-&amp;gt;&lt;span&gt;FileName);
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;         DWORD totalSize = (FM_MAX_ROWS * info-&amp;gt;StructSize) +&lt;span&gt; FM_INDEX_SIZE;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt;         info-&amp;gt;FileHandle = CreateFile(fileName, (GENERIC_READ | GENERIC_WRITE), (FILE_SHARE_READ |&lt;span&gt; FILE_SHARE_WRITE),
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;            NULL, OPEN_ALWAYS, FILE_FLAG_SEQUENTIAL_SCAN, NULL);
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; 
&lt;span&gt; 16&lt;/span&gt;         info-&amp;gt;FileMappingHandle = CreateFileMapping(info-&amp;gt;FileHandle, NULL, PAGE_READWRITE, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, totalSize, NULL);
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; 
&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(info-&amp;gt;FileMappingHandle == NULL || info-&amp;gt;FileMappingHandle ==&lt;span&gt; INVALID_HANDLE_VALUE) 
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;             Log(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;             CloseHandle(info-&amp;gt;&lt;span&gt;FileHandle);
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumFail;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(GetLastError() ==&lt;span&gt; ERROR_ALREADY_EXISTS) 
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;             Log(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumFail;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; init&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;         info-&amp;gt;MapViewOfFileHandle = MapViewOfFile(info-&amp;gt;FileMappingHandle, FILE_MAP_ALL_ACCESS, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, totalSize);
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(info-&amp;gt;MapViewOfFileHandle ==&lt;span&gt; NULL) 
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;             Log(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;             CloseHandle(info-&amp;gt;&lt;span&gt;FileMappingHandle);
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;             CloseHandle(info-&amp;gt;&lt;span&gt;FileHandle);
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumFail;
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumSuccess;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; 
&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; Write(&lt;span&gt;void&lt;/span&gt; *data, UINT order, SDbConnInfo *&lt;span&gt;info)
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(info-&amp;gt;MapViewOfFileHandle ==&lt;span&gt; NULL) 
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             Log(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumFail;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;             memcpy((&lt;span&gt;char&lt;/span&gt; *)info-&amp;gt;MapViewOfFileHandle + (order * info-&amp;gt;StructSize) + FM_INDEX_SIZE, data, info-&amp;gt;&lt;span&gt;StructSize);
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumSuccess;
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; Read(&lt;span&gt;void&lt;/span&gt; *data, UINT order, SDbConnInfo *&lt;span&gt;info)
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(info-&amp;gt;MapViewOfFileHandle ==&lt;span&gt; NULL) 
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;             Log(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumFail;
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;             memcpy(data, (&lt;span&gt;char&lt;/span&gt; *)info-&amp;gt;MapViewOfFileHandle + (order * info-&amp;gt;StructSize) + FM_INDEX_SIZE, info-&amp;gt;&lt;span&gt;StructSize);
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; 
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumSuccess;
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; Delete(UINT order, SDbConnInfo *&lt;span&gt;info)
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(info-&amp;gt;MapViewOfFileHandle ==&lt;span&gt; NULL) 
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;             Log(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumFail;
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;             memset((&lt;span&gt;char&lt;/span&gt; *)info-&amp;gt;MapViewOfFileHandle + (order * info-&amp;gt;StructSize) + FM_INDEX_SIZE, &lt;span&gt;0&lt;/span&gt;, info-&amp;gt;&lt;span&gt;StructSize);
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumSuccess;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; WriteConfig(&lt;span&gt;void&lt;/span&gt; *data, UINT order, UINT pos, UINT size, SDbConnInfo *&lt;span&gt;info)
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(info-&amp;gt;MapViewOfFileHandle ==&lt;span&gt; NULL) 
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;             Log(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumFail;
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;             memcpy((&lt;span&gt;char&lt;/span&gt; *)info-&amp;gt;MapViewOfFileHandle + (order * info-&amp;gt;StructSize) + FM_INDEX_SIZE +&lt;span&gt; pos, data, size);
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; 
&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumSuccess;
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; WriteIndex(&lt;span&gt;void&lt;/span&gt; *data, UINT pos, UINT size, SDbConnInfo *&lt;span&gt;info)
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(info-&amp;gt;MapViewOfFileHandle ==&lt;span&gt; NULL) 
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;             Log(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumFail;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;             memcpy((&lt;span&gt;char&lt;/span&gt; *)info-&amp;gt;MapViewOfFileHandle +&lt;span&gt; pos, data, size);
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; 
&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumSuccess;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; ReadIndex(SIndex *sIndex, SDbConnInfo *&lt;span&gt;info)
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(info-&amp;gt;MapViewOfFileHandle ==&lt;span&gt; NULL) 
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;             Log(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumFail;
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;             memcpy(sIndex, (&lt;span&gt;char&lt;/span&gt; *)info-&amp;gt;&lt;span&gt;MapViewOfFileHandle, FM_INDEX_SIZE);
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; 
&lt;span&gt;117&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumSuccess;
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; };
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;5.2、FMDBClient，内存映射客户端，主要封装Publish与Subscribe方法给前端调用，屏蔽复杂性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2c075d84-cbb4-41c8-8912-37bc59aa9bf1')&quot; readability=&quot;58&quot;&gt;&lt;img id=&quot;code_img_closed_2c075d84-cbb4-41c8-8912-37bc59aa9bf1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2c075d84-cbb4-41c8-8912-37bc59aa9bf1&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2c075d84-cbb4-41c8-8912-37bc59aa9bf1',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2c075d84-cbb4-41c8-8912-37bc59aa9bf1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;111&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FMDBClient : &lt;span&gt;public&lt;/span&gt;&lt;span&gt; FMDBManager
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;    mutable std::mutex mut;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;     SChannelMapDbConnInfo channelMapDbConnInfo = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt;     &lt;span&gt;bool&lt;/span&gt; CanWrite(SIndex *&lt;span&gt;sIndex)
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; nextWriteIndex = sIndex-&amp;gt;WriteIndex + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(nextWriteIndex &amp;gt; FM_MAX_ROWS) nextWriteIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; nextWriteIndex != sIndex-&amp;gt;&lt;span&gt;ReadIndex;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;     &lt;span&gt;bool&lt;/span&gt; CanRead(SIndex *&lt;span&gt;sIndex) {
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(sIndex-&amp;gt;Over) &lt;span&gt;return&lt;/span&gt; sIndex-&amp;gt;ReadIndex &amp;gt; sIndex-&amp;gt;&lt;span&gt;WriteIndex;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; sIndex-&amp;gt;ReadIndex + &lt;span&gt;1&lt;/span&gt; &amp;lt;= sIndex-&amp;gt;&lt;span&gt;WriteIndex;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; 
&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; GetDbConnInfo(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *channel, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size)
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; rest =&lt;span&gt; enumFail;
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; FM_MAX_CHANNEL; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;             &lt;span&gt;char&lt;/span&gt; channelNameTmp[&lt;span&gt;20&lt;/span&gt;] = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;             sprintf_s(channelNameTmp, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, channel);
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt; ==&lt;span&gt; strcmp(channelNameTmp, channelMapDbConnInfoArray[i].ChannelName))
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;                 channelMapDbConnInfo =&lt;span&gt; channelMapDbConnInfoArray[i];
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;                 rest =&lt;span&gt; enumSuccess;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; 
&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; rest;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; SetDbConnInfo(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *channel, UINT *subscribeIndex, SDbConnInfo *&lt;span&gt;dbConnInfo)
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         std::lock_guard&amp;lt;std::mutex&amp;gt;&lt;span&gt; lk(mut);
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; nextSubscribeIndex = fmdbConfig-&amp;gt;&lt;span&gt;GetNextSubscribeIndex(channel);
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(nextSubscribeIndex ==&lt;span&gt; FM_NOTHING)
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;             SChannel sChannel = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;             sprintf_s(sChannel.ChannelName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, channel);
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;             sChannel.Subscribe1LastTime =&lt;span&gt; GetTickCount();
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;             sChannel.StructSize = dbConnInfo-&amp;gt;&lt;span&gt;StructSize;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; 
&lt;span&gt; 50&lt;/span&gt;             sprintf_s(dbConnInfo-&amp;gt;FileName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s.1.db&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, channel);
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(!fmdbConfig-&amp;gt;IsFM_NOTHING(dbConnInfo-&amp;gt;FileName) &amp;amp;&amp;amp; dbConnInfo-&amp;gt;StructSize &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;                 dbConnInfo-&amp;gt;SubscribeIndex = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;                 *subscribeIndex = dbConnInfo-&amp;gt;&lt;span&gt;SubscribeIndex;
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(Create(dbConnInfo) == enumSuccess) &lt;span&gt;return&lt;/span&gt; fmdbConfig-&amp;gt;Insert(&amp;amp;&lt;span&gt;sChannel);
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; sprintf_s(dbConnInfo-&amp;gt;FileName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, channel); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;还原名称&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; 
&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(nextSubscribeIndex &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;             sprintf_s(dbConnInfo-&amp;gt;FileName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s.%d.db&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, channel, nextSubscribeIndex);
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(!fmdbConfig-&amp;gt;IsFM_NOTHING(dbConnInfo-&amp;gt;FileName) &amp;amp;&amp;amp; dbConnInfo-&amp;gt;StructSize &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;                 dbConnInfo-&amp;gt;SubscribeIndex =&lt;span&gt; nextSubscribeIndex;
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;                 *subscribeIndex =&lt;span&gt; nextSubscribeIndex;
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; 
&lt;span&gt; 69&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(Create(dbConnInfo) == enumSuccess) &lt;span&gt;return&lt;/span&gt; fmdbConfig-&amp;gt;&lt;span&gt;Save(channel, nextSubscribeIndex);
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; sprintf_s(dbConnInfo-&amp;gt;FileName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, channel); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;还原名称&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; 
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumFail;
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;     &lt;span&gt;bool&lt;/span&gt; SetSubscribeConned(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *channel, &lt;span&gt;int&lt;/span&gt; subscribeIndex, SDbConnInfo *&lt;span&gt;dbConnInfo)
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; rest =&lt;span&gt; enumFail;
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(subscribeIndex &amp;lt;= &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; rest;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; 
&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; FM_MAX_CHANNEL; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;             &lt;span&gt;char&lt;/span&gt; channelNameTmp[&lt;span&gt;20&lt;/span&gt;] = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;             sprintf_s(channelNameTmp, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, channel);
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; 
&lt;span&gt; 87&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt; ==&lt;span&gt; strcmp(channelNameTmp, channelMapDbConnInfoArray[i].ChannelName))
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;                 channelMapDbConnInfoArray[i].DbConnInfo[subscribeIndex - &lt;span&gt;1&lt;/span&gt;].SubscribeIndex = dbConnInfo-&amp;gt;&lt;span&gt;SubscribeIndex; 
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;                 channelMapDbConnInfoArray[i].DbConnInfo[subscribeIndex - &lt;span&gt;1&lt;/span&gt;].Conned = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;                 rest =&lt;span&gt; enumSuccess;
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; 
&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; rest;
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;     &lt;span&gt;bool&lt;/span&gt; IsConning(SDbConnInfo *dbConnInfo) { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;; };
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; 
&lt;span&gt;100&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;    FMDBClient()
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;(!fmdbConfigLoadFinish) { Sleep(&lt;span&gt;200&lt;/span&gt;&lt;span&gt;); }
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;     ~&lt;span&gt;FMDBClient() {};
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; failTimes = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; 
&lt;span&gt;110&lt;/span&gt;     template&amp;lt;typename T&amp;gt;
&lt;span&gt;111&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; Publish(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *channel, T*&lt;span&gt; data)
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; rest =&lt;span&gt; enumFail;
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; 
&lt;span&gt;115&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查找&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(GetDbConnInfo(channel, &lt;span&gt;sizeof&lt;/span&gt;(T)) ==&lt;span&gt; enumFail)
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;             printf_s(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;发布%s失败.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, channel);
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumFail;
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; 
&lt;span&gt;122&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; FM_MAX_SUBSCRIBE; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(channelMapDbConnInfo.DbConnInfo[i].FileHandle == NULL) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; 
&lt;span&gt;126&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt;(IsConning(&amp;amp;&lt;span&gt;channelMapDbConnInfo.DbConnInfo[i]))
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;                 SIndex sIndex = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(ReadIndex(&amp;amp;sIndex, &amp;amp;channelMapDbConnInfo.DbConnInfo[i]) ==&lt;span&gt; enumFail)
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;映射文件加载失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; 
&lt;span&gt;134&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(CanWrite(&amp;amp;&lt;span&gt;sIndex))
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;                     WORD writeIndex =&lt;span&gt; sIndex.WriteIndex;
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(Write(data, writeIndex, &amp;amp;channelMapDbConnInfo.DbConnInfo[i]) ==&lt;span&gt; enumSuccess)
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;                         writeIndex++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;(writeIndex &amp;gt;&lt;span&gt; FM_MAX_ROWS)
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;                             writeIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; 
&lt;span&gt;144&lt;/span&gt;                             WORD Over =&lt;span&gt; TRUE;
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;                             WriteIndex(&amp;amp;Over, (FM_WORD_SIZE * &lt;span&gt;2&lt;/span&gt;), FM_WORD_SIZE, &amp;amp;&lt;span&gt;channelMapDbConnInfo.DbConnInfo[i]);
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; 
&lt;span&gt;148&lt;/span&gt;                         rest = WriteIndex(&amp;amp;writeIndex, &lt;span&gt;0&lt;/span&gt;, FM_WORD_SIZE, &amp;amp;&lt;span&gt;channelMapDbConnInfo.DbConnInfo[i]);
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;153&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;                     failTimes++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; 
&lt;span&gt;159&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; rest;
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt; 
&lt;span&gt;162&lt;/span&gt;     template&amp;lt;typename T&amp;gt;
&lt;span&gt;163&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; Subscribe(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;channel, SubscribeCallBackHandle callback)
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;         SDbConnInfo dbConnInfo = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;         dbConnInfo.StructSize = &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(T);
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt; 
&lt;span&gt;168&lt;/span&gt;         UINT subscribeIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(SetDbConnInfo(channel, &amp;amp;subscribeIndex, &amp;amp;dbConnInfo) ==&lt;span&gt; enumFail)
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;             printf_s(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;订阅%s失败.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, channel);
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt; 
&lt;span&gt;175&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;(IsConning(&amp;amp;&lt;span&gt;dbConnInfo))
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;             SetSubscribeConned(channel, subscribeIndex, &amp;amp;&lt;span&gt;dbConnInfo);
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt; 
&lt;span&gt;179&lt;/span&gt;             SIndex sIndex = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(ReadIndex(&amp;amp;sIndex, &amp;amp;dbConnInfo) == enumFail) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;映射文件加载失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(!CanRead(&amp;amp;sIndex)) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; 
&lt;span&gt;183&lt;/span&gt;             T t = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; readIndex =&lt;span&gt; sIndex.ReadIndex;
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(Read(&amp;amp;t, readIndex, &amp;amp;dbConnInfo) ==&lt;span&gt; enumSuccess)
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt;                 readIndex++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(readIndex &amp;gt;&lt;span&gt; FM_MAX_ROWS)
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt;                     readIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt; 
&lt;span&gt;192&lt;/span&gt;                     WORD Over =&lt;span&gt; FALSE;
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt;                     WriteIndex(&amp;amp;Over, (FM_WORD_SIZE * &lt;span&gt;2&lt;/span&gt;), FM_WORD_SIZE, &amp;amp;&lt;span&gt;dbConnInfo);
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt; 
&lt;span&gt;196&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(WriteIndex(&amp;amp;readIndex, FM_WORD_SIZE, FM_WORD_SIZE, &amp;amp;dbConnInfo) ==&lt;span&gt; enumSuccess)
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(Delete(sIndex.ReadIndex, &amp;amp;dbConnInfo) ==&lt;span&gt; enumSuccess)
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;(callback(&amp;amp;t) == enumBreak) &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt; };
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 请注意上边控制读写的2个方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
    bool CanWrite(SIndex *sIndex)
        {
                int nextWriteIndex = sIndex-&amp;gt;WriteIndex + 1;
                if(nextWriteIndex &amp;gt; FM_MAX_ROWS) nextWriteIndex = 0;

                return nextWriteIndex != sIndex-&amp;gt;ReadIndex;
        }
        bool CanRead(SIndex *sIndex) 
        {
                if(sIndex-&amp;gt;Over) return sIndex-&amp;gt;ReadIndex &amp;gt; sIndex-&amp;gt;WriteIndex;
                else return sIndex-&amp;gt;ReadIndex + 1 &amp;lt;= sIndex-&amp;gt;WriteIndex;
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以分析一下，下一个WriteIndex值如果大于队列最大值 WriteIndex置0，下一个WriteIndex数值如果不等于&lt;/p&gt;
&lt;p&gt;正在读的位置ReadIndex就能写；如果WriteIndex没有超出最大值，只要ReadIndex小于等于WriteIndex就能读，&lt;/p&gt;
&lt;p&gt;如果超出，就判断ReadIndex大于WriteIndex就能读。WriteIndex与ReadIndex数值在Publish与Subscribe中维护&lt;/p&gt;
&lt;p&gt;5.3、建立新线程获取最新订阅的客户端信息，这个功能主要是动态地像多个Subscribe端发生消息，比如订阅发生在发布之后，&lt;/p&gt;
&lt;p&gt;也应该能收到消息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('052c832a-d476-4439-9385-ff89a791af99')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_052c832a-d476-4439-9385-ff89a791af99&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_052c832a-d476-4439-9385-ff89a791af99&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('052c832a-d476-4439-9385-ff89a791af99',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_052c832a-d476-4439-9385-ff89a791af99&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Update()
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(fmdbConfig-&amp;gt;GetChannelArray() ==&lt;span&gt; enumSuccess)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; FM_MAX_CHANNEL; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(fmdbConfig-&amp;gt;IsFM_NOTHING(channelMapDbConnInfoArray[i].ChannelName)) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; FM_MAX_SUBSCRIBE; j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(channelMapDbConnInfoArray[i].DbConnInfo[j].StructSize &amp;lt;= &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; KeepConned&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(channelMapDbConnInfoArray[i].DbConnInfo[j].Conned)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                         fmdbConfig-&amp;gt;&lt;span&gt;KeepConned(channelMapDbConnInfoArray[i].ChannelName,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                            channelMapDbConnInfoArray[i].DbConnInfo[j].SubscribeIndex);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;                         channelMapDbConnInfoArray[i].DbConnInfo[j].Conned = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;printf_s(&quot;%s.KeepConned.\n&quot;, channelDbParsArray[i].SDbPars[j].Channel);&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(!fmdbConfig-&amp;gt;&lt;span&gt;Exists(channelMapDbConnInfoArray[i].DbConnInfo[j].FileName))
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                         FMDBManager::Create(&amp;amp;&lt;span&gt;channelMapDbConnInfoArray[i].DbConnInfo[j]);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                         fmdbConfig-&amp;gt;&lt;span&gt;AddChannel(channelMapDbConnInfoArray[i].DbConnInfo[j].FileName);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;         fmdbConfigLoadFinish = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         Sleep(&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; thread th(Update);
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt; 六、Demo测试&lt;/h2&gt;
&lt;p&gt;6.1、Producer.cpp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pch.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../FMDB.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     FMClient * client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FMClient();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; times = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; index = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; total = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     UINT structSize = &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(SPerson);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     DWORD dwStartTmp =&lt;span&gt; GetTickCount();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(TRUE)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         times++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(index == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             dwStartTmp =&lt;span&gt; GetTickCount();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;         SPerson sPerson = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         sPerson.Idx =&lt;span&gt; index;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         sprintf_s(sPerson.Name, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Name.%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, index);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         sPerson.Age =&lt;span&gt; index;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(client-&amp;gt;Publish(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Person&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;sPerson) ==&lt;span&gt; enumSuccess)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(index % &lt;span&gt;2&lt;/span&gt; == &lt;span&gt;0&lt;/span&gt;) total = total +&lt;span&gt; sPerson.Idx;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; total = total -&lt;span&gt; sPerson.Idx;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;             index++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(index % &lt;span&gt;50000&lt;/span&gt; == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 printf_s(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;发送条数: %d, 耗时:%d \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, index, (GetTickCount() -&lt;span&gt; dwStartTmp));
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(index &amp;gt;= &lt;span&gt;2000000&lt;/span&gt;) &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;     printf_s(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;调用次数: %d, 成功条数: %d, 检验值: %d \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, times, index, total);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.2、Consumer.cpp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pch.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../FMDB.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; index = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; total = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; DWORD dwStartTmp =&lt;span&gt; GetTickCount();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; SubscribeCallback(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;msg)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     SPerson * person = (SPerson *&lt;span&gt;)msg;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(index == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         dwStartTmp =&lt;span&gt; GetTickCount();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(index % &lt;span&gt;2&lt;/span&gt; == &lt;span&gt;0&lt;/span&gt;) total = total + person-&amp;gt;&lt;span&gt;Idx;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; total = total - person-&amp;gt;&lt;span&gt;Idx;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     index++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(index % &lt;span&gt;50000&lt;/span&gt; == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;接收条数: %d, 耗时:%d, Idx:%d, Name:%s, Age:%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             index, (GetTickCount() - dwStartTmp), person-&amp;gt;Idx, person-&amp;gt;Name, person-&amp;gt;&lt;span&gt;Age);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(index &amp;gt;= &lt;span&gt;2000000&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumBreak;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; enumSuccess;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     FMClient * client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FMClient();
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     client-&amp;gt;Subscribe&amp;lt;SPerson&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Person&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, SubscribeCallback);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;接收条数: %d, 检验值: %d \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, index, total);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.3、运行，测试用例中使用了向队列发送200万条数据，消息大小128字节，订阅端也是接受到200万数据后退出，并且打印检验值。&lt;/p&gt;
&lt;p&gt;1) 检验值计算：0+1-2+3-4+ ---------  - 2000000 = -1000000，如果队列运行正常，那两边的检验值应该都是是 -1000000.&lt;/p&gt;
&lt;p&gt;2) 每5万条打印一次日志，运行情况如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/254672/201901/254672-20190106144913006-1682099640.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一对一方式运行三次，分别耗时(毫秒)：2886、2979、2871&lt;/p&gt;
&lt;p&gt;3) 一对二方式运行三次，分别耗时(毫秒)：4087、4009、4040&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/254672/201901/254672-20190106145606142-1203776522.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4)运行过程中产生的文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/254672/201901/254672-20190106150228216-633761286.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6.4、200万数据一对一耗时近3秒，貌似也不是非常快是不是？但是这就是最大速度了吗？&lt;/p&gt;
&lt;p&gt;当然不是哦，别忘了这是debug版本，我们切换到release版本看速度会不会有所提升。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/254672/201901/254672-20190106150823459-1941002408.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一对一运行三次耗时分别是：1224、1373、1326&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;厉害了，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SPerson结构体128字节，每秒可以处理180万数据，当然实际运用肯定达不到，因为处理其他业务逻辑也要耗时间。&lt;/p&gt;
&lt;p&gt;好了，为了这个demo脑壳都想疼了，思考模型，调试BUG，期间各种问题，实在茶壶煮饺子，有苦说不出。&lt;/p&gt;
&lt;p&gt;你看，又浪费我周末2天时间，期间就吃了一餐，今天的还没吃呢，等下去旁边山上走走，不然就要发霉了。拜拜。。。&lt;/p&gt;

</description>
<pubDate>Sun, 06 Jan 2019 07:24:00 +0000</pubDate>
<dc:creator>漂亮的猫</dc:creator>
<og:description>一、背景 项目开发中免不了各模块或系统之间进行消息通信，目前热门的消息中间件有Redis、RabbitMQ、Kafka、RocketMQ等等。 以上几种组件中Redis在消息队列方面表现还可以，但是如</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lanxiaoke/p/10228355.html</dc:identifier>
</item>
<item>
<title>Hive与Hbase整合 - Hongten</title>
<link>http://www.cnblogs.com/hongten/p/hongten_hive_with_hbase.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hongten/p/hongten_hive_with_hbase.html</guid>
<description>&lt;h2&gt;&lt;span&gt;1.文档&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　&lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/HBaseIntegration&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;strong&gt;Hive HBase Integration&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;2.拷贝jar文件&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;2.1.把Hbase的lib目录下面的jar文件全部拷贝到Hive的lib目录下面&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd &lt;span&gt;/&lt;/span&gt;home&lt;span&gt;/&lt;/span&gt;hbase&lt;span&gt;/&lt;/span&gt;&lt;span&gt;lib
cp .&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; /home/hive/lib&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2.2.把Hive的lib目录下面的hive-hbase-handler-0.13.1.jar拷贝到Hbase的lib目录下面&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cp &lt;span&gt;/&lt;/span&gt;home&lt;span&gt;/&lt;/span&gt;hive&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;hive&lt;span&gt;-&lt;/span&gt;hbase&lt;span&gt;-&lt;/span&gt;handler&lt;span&gt;-&lt;/span&gt;&lt;span&gt;0.13&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;.jar &lt;span&gt;/&lt;/span&gt;home&lt;span&gt;/&lt;/span&gt;hbase&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;3.修改Hive/conf目录下面的配置文件&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd /home/hive/conf
vi hive-site.xml

&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Hbase zookeeper quorum   &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hbase.zookeeper.quorum&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;node1,node2,node3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;4.在Hbase中创建表&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;在Hbase中创建表&lt;/span&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase_to_hive_t_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cf_user_info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

hbase(main):&lt;/span&gt;&lt;span&gt;010&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;desc&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase_to_hive_t_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;Table&lt;/span&gt; hbase_to_hive_t_user &lt;span&gt;is&lt;/span&gt;&lt;span&gt; ENABLED                                                      
&lt;/span&gt;&lt;span&gt;COLUMN&lt;/span&gt;&lt;span&gt; FAMILIES DESCRIPTION                                                                
{NAME &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cf_user_info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, DATA_BLOCK_ENCODING &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NONE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, BLOOMFILTER &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ROW&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, REPLICATION_S
COPE &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, VERSIONS &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, COMPRESSION &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NONE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, MIN_VERSIONS &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, TTL &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FOREVER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 KEEP_DELETED_CELLS &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FALSE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, BLOCKSIZE &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;65536&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, IN_MEMORY &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, BLOCKCACHE &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;
true&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}                                                                                     
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row(s) &lt;span&gt;in&lt;/span&gt; &lt;span&gt;0.0650&lt;/span&gt; seconds
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;5.在Hbase表中插入数据&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;插入数据&lt;/span&gt;
put &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase_to_hive_t_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cf_user_info:name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
put &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase_to_hive_t_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cf_user_info:age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;24&lt;/span&gt;&lt;span&gt;
put &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase_to_hive_t_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cf_user_info:name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;John&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
put &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase_to_hive_t_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cf_user_info:age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;18&lt;/span&gt;&lt;span&gt;
put &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase_to_hive_t_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cf_user_info:name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Steven&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
put &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase_to_hive_t_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cf_user_info:age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;38&lt;/span&gt;&lt;span&gt;


scan &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase_to_hive_t_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
hbase(main):&lt;/span&gt;&lt;span&gt;009&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; scan &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase_to_hive_t_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
ROW                     &lt;/span&gt;&lt;span&gt;COLUMN&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;CELL                                                        
 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;                      &lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;cf_user_info:age, &lt;span&gt;timestamp&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1546754368046&lt;/span&gt;, value&lt;span&gt;=&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         
 &lt;span&gt;1&lt;/span&gt;                      &lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;cf_user_info:name, &lt;span&gt;timestamp&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1546754367972&lt;/span&gt;, value&lt;span&gt;=&lt;/span&gt;&lt;span&gt;Tom       
 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;                      &lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;cf_user_info:age, &lt;span&gt;timestamp&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1546754368166&lt;/span&gt;, value&lt;span&gt;=&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         
 &lt;span&gt;2&lt;/span&gt;                      &lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;cf_user_info:name, &lt;span&gt;timestamp&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1546754368103&lt;/span&gt;, value&lt;span&gt;=&lt;/span&gt;&lt;span&gt;John      
 &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;                      &lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;cf_user_info:age, &lt;span&gt;timestamp&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1546754370447&lt;/span&gt;, value&lt;span&gt;=&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         
 &lt;span&gt;3&lt;/span&gt;                      &lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;cf_user_info:name, &lt;span&gt;timestamp&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1546754368211&lt;/span&gt;, value&lt;span&gt;=&lt;/span&gt;&lt;span&gt;Steven    
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; row(s) &lt;span&gt;in&lt;/span&gt; &lt;span&gt;0.1600&lt;/span&gt; seconds
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;6.在Hive中创建数据库表关联Hbase里面的表&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;如果你想要Hive去访问Hbase中已经存在的表，你可以创建外部表(CREATE EXTERNAL TABLE)&lt;/span&gt;

&lt;span&gt;CREATE&lt;/span&gt; EXTERNAL &lt;span&gt;TABLE&lt;/span&gt; hive_access_hbase_table_t_user (&lt;span&gt;key&lt;/span&gt; string, name string, age &lt;span&gt;int&lt;/span&gt;&lt;span&gt;)
STORED &lt;/span&gt;&lt;span&gt;BY&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;org.apache.hadoop.hive.hbase.HBaseStorageHandler&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;WITH&lt;/span&gt; SERDEPROPERTIES (&quot;hbase.columns.mapping&quot; &lt;span&gt;=&lt;/span&gt; &quot;:&lt;span&gt;key&lt;/span&gt;&lt;span&gt;,cf_user_info:name,cf_user_info:age&quot;)
TBLPROPERTIES (&quot;hbase.&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;.name&quot; &lt;span&gt;=&lt;/span&gt; &quot;hbase_to_hive_t_user&quot;);
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;6.1.在Hive中查询Hbase表里的数据&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; hive_access_hbase_table_t_user;

hive&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; hive_access_hbase_table_t_user;
OK
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;    Tom    &lt;span&gt;24&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;    John    &lt;span&gt;18&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;    Steven    &lt;span&gt;38&lt;/span&gt;&lt;span&gt;
Time taken: &lt;/span&gt;&lt;span&gt;0.325&lt;/span&gt; seconds, Fetched: &lt;span&gt;3&lt;/span&gt; row(s)
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;7.Reference&lt;/h2&gt;
&lt;p&gt;https://blog.csdn.net/qq_33689414/article/details/80328665&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/aaronhadoop/article/details/28398157&lt;/p&gt;

&lt;p&gt;========================================================&lt;/p&gt;
&lt;p&gt;More reading,and english is important.&lt;/p&gt;
&lt;p&gt;I'm Hongten&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/hongten/1017741/o_alipay_wecha1t.png&quot; alt=&quot;&quot; width=&quot;354&quot; height=&quot;353&quot;/&gt; &lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
&lt;strong&gt;大哥哥大姐姐，觉得有用打赏点哦！你的支持是我最大的动力。谢谢。&lt;br/&gt;Hongten博客排名在100名以内。粉丝过千。&lt;br/&gt;Hongten出品，必是精品。&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;E | hongtenzone@foxmail.com  B | &lt;a href=&quot;http://www.cnblogs.com/hongten&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/hongten&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;========================================================&lt;/p&gt;

</description>
<pubDate>Sun, 06 Jan 2019 07:17:00 +0000</pubDate>
<dc:creator>Hongten</dc:creator>
<og:description>Hive与Hbase整合 1.文档 　　Hive HBase Integration</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hongten/p/hongten_hive_with_hbase.html</dc:identifier>
</item>
<item>
<title>vue基于d2-admin的RBAC权限管理解决方案 - 若邪</title>
<link>http://www.cnblogs.com/jaycewu/p/10228936.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jaycewu/p/10228936.html</guid>
<description>&lt;p&gt;前两篇关于vue权限路由文章的填坑，说了一堆理论，是时候操作一波了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5b5bfd5b6fb9a04fdd7d687a&quot;&gt;vue权限路由实现方式总结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5c0b2130f265da615c5913d9&quot;&gt;vue权限路由实现方式总结二&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择&lt;a href=&quot;https://github.com/d2-projects/d2-admin&quot;&gt;d2-admin&lt;/a&gt;是因为element-ui的相关开源项目里，d2-admin的结构和代码是让我感到最舒服的,而且基于d2-admin实现RBAC权限管理也很方便，对d2-admin没有大的侵入性的改动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/1/5/1681e95158068d71?w=300&amp;amp;h=300&amp;amp;f=png&amp;amp;s=14234&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jaycewu.coding.me/d2-admin-pm/#/login&quot;&gt;预览地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wjkang/d2-admin-pm&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;相关概念&quot;&gt;相关概念&lt;/h3&gt;
&lt;p&gt;不了解RBAC,可以看这里&lt;a href=&quot;https://juejin.im/post/5b59c2956fb9a04faa79af6f&quot;&gt;企业管理系统前后端分离架构设计 系列一 权限模型篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/1/5/1681e9c96c0a6a6f?w=740&amp;amp;h=708&amp;amp;f=png&amp;amp;s=83989&quot; alt=&quot;权限模型&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;实现了RBAC模型权限控制&lt;/li&gt;
&lt;li&gt;菜单与路由独立管理，完全由后端返回&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;user&lt;/strong&gt;存储用户&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;admin&lt;/strong&gt;标识用户是否为系统管理员&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;role&lt;/strong&gt;存储角色信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;roleUser&lt;/strong&gt;存储用户与角色的关联关系&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;存储菜单信息，类型分为&lt;code&gt;菜单&lt;/code&gt;与&lt;code&gt;功能&lt;/code&gt;，一个菜单下可以有多个功能，&lt;code&gt;菜单&lt;/code&gt;类型的&lt;code&gt;permission&lt;/code&gt;字段标识访问这个菜单需要的功能权限，&lt;code&gt;功能&lt;/code&gt;类型的&lt;code&gt;permission&lt;/code&gt;字段相当于此功能的别称，所以&lt;code&gt;菜单&lt;/code&gt;类型的&lt;code&gt;permission&lt;/code&gt;字段为其某个&lt;code&gt;功能&lt;/code&gt;类型子节点的&lt;code&gt;permission&lt;/code&gt;值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;permission&lt;/strong&gt;存储角色与功能的关联关系&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;interface&lt;/strong&gt;存储接口信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;functionInterface&lt;/strong&gt;存储功能与接口关联关系，通过查找用户所属角色，再查找相关角色所具备的功能权限，再通过相关功能就可以查出用户所能访问的接口&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;route&lt;/strong&gt;存储前端路由信息，通过&lt;code&gt;permission&lt;/code&gt;字段过滤出用户所能访问的路由&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;运行流程及相关api&quot;&gt;运行流程及相关API&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;d2admin&lt;/code&gt;的原有登录逻辑，全局路由守卫中判断是否已经拉取权限信息，获取后标识为已获取。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const token = util.cookies.get('token')
    if (token &amp;amp;&amp;amp; token !== 'undefined') {
      //拉取权限信息
      if (!isFetchPermissionInfo) {
        await fetchPermissionInfo();
        isFetchPermissionInfo = true;
        next(to.path, true)
      } else {
        next()
      }
    } else {
      // 将当前预计打开的页面完整地址临时存储 登录后继续跳转
      // 这个 cookie(redirect) 会在登录后自动删除
      util.cookies.set('redirect', to.fullPath)
      // 没有登录的时候跳转到登录界面
      next({
        name: 'login'
      })
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;//标记是否已经拉取权限信息
let isFetchPermissionInfo = false

let fetchPermissionInfo = async () =&amp;gt; {
  //处理动态添加的路由
  const formatRoutes = function (routes) {
    routes.forEach(route =&amp;gt; {
      route.component = routerMapComponents[route.component]
      if (route.children) {
        formatRoutes(route.children)
      }
    })
  }
  try {
    let userPermissionInfo = await userService.getUserPermissionInfo()
    permissionMenu = userPermissionInfo.accessMenus
    permissionRouter = userPermissionInfo.accessRoutes
    permission.functions = userPermissionInfo.userPermissions
    permission.roles = userPermissionInfo.userRoles
    permission.interfaces = util.formatInterfaces(userPermissionInfo.accessInterfaces)
    permission.isAdmin = userPermissionInfo.isAdmin == 1
  } catch (ex) {
    console.log(ex)
  }
  formatRoutes(permissionRouter)
  let allMenuAside = [...menuAside, ...permissionMenu]
  let allMenuHeader = [...menuHeader, ...permissionMenu]
  //动态添加路由
  router.addRoutes(permissionRouter);
  // 处理路由 得到每一级的路由设置
  store.commit('d2admin/page/init', [...frameInRoutes, ...permissionRouter])
  // 设置顶栏菜单
  store.commit('d2admin/menu/headerSet', allMenuHeader)
  // 设置侧边栏菜单
  store.commit('d2admin/menu/fullAsideSet', allMenuAside)
  // 初始化菜单搜索功能
  store.commit('d2admin/search/init', allMenuHeader)
  // 设置权限信息
  store.commit('d2admin/permission/set', permission)
  // 加载上次退出时的多页列表
  store.dispatch('d2admin/page/openedLoad')
  await Promise.resolve()
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后端需要返回的权限信息包括权限过滤后的角色编码集合，功能编码集合，接口信息集合，菜单列表，路由列表，以及是否系统管理员标识。格式如下&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;{
  &quot;statusCode&quot;: 200,
  &quot;msg&quot;: &quot;&quot;,
  &quot;data&quot;: {
    &quot;userName&quot;: &quot;MenuManager&quot;,
    &quot;userRoles&quot;: [
      &quot;R_MENUADMIN&quot;
    ],
    &quot;userPermissions&quot;: [
      &quot;p_menu_view&quot;,
      &quot;p_menu_edit&quot;,
      &quot;p_menu_menu&quot;
    ],
    &quot;accessMenus&quot;: [
      {
        &quot;title&quot;: &quot;系统&quot;,
        &quot;path&quot;: &quot;/system&quot;,
        &quot;icon&quot;: &quot;cogs&quot;,
        &quot;children&quot;: [
          {
            &quot;title&quot;: &quot;系统设置&quot;,
            &quot;icon&quot;: &quot;cogs&quot;,
            &quot;children&quot;: [
              {
                &quot;title&quot;: &quot;菜单管理&quot;,
                &quot;path&quot;: &quot;/system/menu&quot;,
                &quot;icon&quot;: &quot;th-list&quot;
              }
            ]
          },
          {
            &quot;title&quot;: &quot;组织架构&quot;,
            &quot;icon&quot;: &quot;pie-chart&quot;,
            &quot;children&quot;: [
              {
                &quot;title&quot;: &quot;部门管理&quot;,
                &quot;icon&quot;: &quot;html5&quot;
              },
              {
                &quot;title&quot;: &quot;职位管理&quot;,
                &quot;icon&quot;: &quot;opencart&quot;
              }
            ]
          }
        ]
      }
    ],
    &quot;accessRoutes&quot;: [
      {
        &quot;name&quot;: &quot;System&quot;,
        &quot;path&quot;: &quot;/system&quot;,
        &quot;component&quot;: &quot;layoutHeaderAside&quot;,
        &quot;componentPath&quot;: &quot;layout/header-aside/layout&quot;,
        &quot;meta&quot;: {
          &quot;title&quot;: &quot;系统设置&quot;,
          &quot;cache&quot;: true
        },
        &quot;children&quot;: [
          {
            &quot;name&quot;: &quot;MenuPage&quot;,
            &quot;path&quot;: &quot;/system/menu&quot;,
            &quot;component&quot;: &quot;menu&quot;,
            &quot;componentPath&quot;: &quot;pages/sys/menu/index&quot;,
            &quot;meta&quot;: {
              &quot;title&quot;: &quot;菜单管理&quot;,
              &quot;cache&quot;: true
            }
          },
          {
            &quot;name&quot;: &quot;RoutePage&quot;,
            &quot;path&quot;: &quot;/system/route&quot;,
            &quot;component&quot;: &quot;route&quot;,
            &quot;componentPath&quot;: &quot;pages/sys/route/index&quot;,
            &quot;meta&quot;: {
              &quot;title&quot;: &quot;路由管理&quot;,
              &quot;cache&quot;: true
            }
          },
          {
            &quot;name&quot;: &quot;RolePage&quot;,
            &quot;path&quot;: &quot;/system/role&quot;,
            &quot;component&quot;: &quot;role&quot;,
            &quot;componentPath&quot;: &quot;pages/sys/role/index&quot;,
            &quot;meta&quot;: {
              &quot;title&quot;: &quot;角色管理&quot;,
              &quot;cache&quot;: true
            }
          },
          {
            &quot;name&quot;: &quot;UserPage&quot;,
            &quot;path&quot;: &quot;/system/user&quot;,
            &quot;component&quot;: &quot;user&quot;,
            &quot;componentPath&quot;: &quot;pages/sys/user/index&quot;,
            &quot;meta&quot;: {
              &quot;title&quot;: &quot;用户管理&quot;,
              &quot;cache&quot;: true
            }
          },
          {
            &quot;name&quot;: &quot;InterfacePage&quot;,
            &quot;path&quot;: &quot;/system/interface&quot;,
            &quot;component&quot;: &quot;interface&quot;,
            &quot;meta&quot;: {
              &quot;title&quot;: &quot;接口管理&quot;
            }
          }
        ]
      }
    ],
    &quot;accessInterfaces&quot;: [
      {
        &quot;path&quot;: &quot;/menu/:id&quot;,
        &quot;method&quot;: &quot;get&quot;
      },
      {
        &quot;path&quot;: &quot;/menu&quot;,
        &quot;method&quot;: &quot;get&quot;
      },
      {
        &quot;path&quot;: &quot;/menu/save&quot;,
        &quot;method&quot;: &quot;post&quot;
      },
      {
        &quot;path&quot;: &quot;/interface/paged&quot;,
        &quot;method&quot;: &quot;get&quot;
      }
    ],
    &quot;isAdmin&quot;: 0,
    &quot;avatarUrl&quot;: &quot;https://api.adorable.io/avatars/85/abott@adorable.png&quot;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;设置菜单&quot;&gt;设置菜单&lt;/h4&gt;
&lt;p&gt;将固定菜单(&lt;code&gt;/menu/header&lt;/code&gt;、&lt;code&gt;/menu/aside&lt;/code&gt;)与后端返回的权限菜单(&lt;code&gt;accessMenus&lt;/code&gt;)合并后，存入相应的vuex store模块中&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;...
let allMenuAside = [...menuAside, ...permissionMenu]
let allMenuHeader = [...menuHeader, ...permissionMenu]
...
// 设置顶栏菜单
store.commit('d2admin/menu/headerSet', allMenuHeader)
// 设置侧边栏菜单
store.commit('d2admin/menu/fullAsideSet', allMenuAside)
// 初始化菜单搜索功能
store.commit('d2admin/search/init', allMenuHeader)&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;处理路由&quot;&gt;处理路由&lt;/h4&gt;
&lt;p&gt;默认使用&lt;code&gt;routerMapComponents&lt;/code&gt; 的方式处理后端返回的权限路由&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;//处理动态添加的路由
const formatRoutes = function (routes) {
    routes.forEach(route =&amp;gt; {
        route.component = routerMapComponents[route.component]
        if (route.children) {
        formatRoutes(route.children)
        }
    })
}
...
formatRoutes(permissionRouter)
//动态添加路由
router.addRoutes(permissionRouter);
// 处理路由 得到每一级的路由设置
store.commit('d2admin/page/init', [...frameInRoutes, ...permissionRouter])&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;2.3913043478261&quot;&gt;
&lt;p&gt;路由处理方式及区别可看&lt;a href=&quot;https://juejin.im/post/5c0b2130f265da615c5913d9&quot;&gt;vue权限路由实现方式总结二&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;设置权限信息&quot;&gt;设置权限信息&lt;/h4&gt;
&lt;p&gt;将角色编码集合，功能编码集合，接口信息集合，以及是否系统管理员标识存入相应的vuex store模块中&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;...
permission.functions = userPermissionInfo.userPermissions
permission.roles = userPermissionInfo.userRoles
permission.interfaces = util.formatInterfaces(userPermissionInfo.accessInterfaces)
permission.isAdmin = userPermissionInfo.isAdmin == 1
...
// 设置权限信息
store.commit('d2admin/permission/set', permission)&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;接口权限控制以及loading配置&quot;&gt;接口权限控制以及loading配置&lt;/h4&gt;
&lt;p&gt;支持使用角色编码，功能编码以及接口权限进行控制，如下&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;export function getMenuList() {
    return request({
        url: '/menu',
        method: 'get',
        interfaceCheck: true,
        permission:[&quot;p_menu_view&quot;],
        loading: {
            type: 'loading',
            options: {
                fullscreen: true,
                lock: true,
                text: '加载中...',
                spinner: 'el-icon-loading',
                background: 'rgba(0, 0, 0, 0.8)'
            }
        },
        success: {
            type: 'message',
            options: {
                message: '加载菜单成功',
                type: 'success'
            }
        }
    })
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;interfaceCheck: true&lt;/code&gt;表示使用接口权限进行控制，如果vuex store中存储的接口信息与当前要请求的接口想匹配，则可发起请求，否则请求将被拦截。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;permission:[&quot;p_menu_view&quot;]&lt;/code&gt;表示使用角色编码和功能编码进行权限校验，如果vuex store中存储的角色编码或功能编码与当前表示的编码相匹配，则可发起请求，否则请求将被拦截。&lt;/p&gt;
&lt;p&gt;源码位置在&lt;code&gt;libs/permission.js&lt;/code&gt;，可根据自己需求进行修改&lt;/p&gt;
&lt;p&gt;&lt;code&gt;loading&lt;/code&gt;配置相关源码在&lt;code&gt;libs/loading.js&lt;/code&gt;，根据自己需求进行配置，&lt;code&gt;success&lt;/code&gt;也是如此，源码在&lt;code&gt;libs/loading.js&lt;/code&gt;。 照此思路可以自行配置其它功能，比如请求失败等。&lt;/p&gt;
&lt;h4 id=&quot;页面元素权限控制&quot;&gt;页面元素权限控制&lt;/h4&gt;
&lt;p&gt;使用指令&lt;code&gt;v-permission&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt; &amp;lt;el-button
    v-permission:function.all=&quot;['p_menu_edit']&quot;
    type=&quot;primary&quot;
    icon=&quot;el-icon-edit&quot;
    size=&quot;mini&quot;
    @click=&quot;batchEdit&quot;
    &amp;gt;批量编辑&amp;lt;/el-button&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数可为&lt;code&gt;function&lt;/code&gt;、&lt;code&gt;role&lt;/code&gt;，表明以功能编码或角色编码进行校验，为空则使用两者进行校验。&lt;/p&gt;
&lt;p&gt;修饰符&lt;code&gt;all&lt;/code&gt;，表示必须全部匹配指令值中所有的编码。&lt;/p&gt;
&lt;p&gt;源码位置在&lt;code&gt;plugin/permission/index.js&lt;/code&gt;，根据自己实际需求进行修改。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;v-if&lt;/code&gt;+全局方法：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;el-button
    v-if=&quot;canAdd&quot;
    type=&quot;primary&quot;
    icon=&quot;el-icon-circle-plus-outline&quot;
    size=&quot;mini&quot;
    @click=&quot;add&quot;
    &amp;gt;添加&amp;lt;/el-button&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;data() {
    return {
      canAdd: this.hasPermissions([&quot;p_menu_edit&quot;])
    };
  },&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;默认同时使用角色编码与功能编码进行校验，有一项匹配即可。&lt;/p&gt;
&lt;p&gt;类似的方法还要&lt;code&gt;hasFunctions&lt;/code&gt;，&lt;code&gt;hasRoles&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;源码位置在&lt;code&gt;plugin/permission/index.js&lt;/code&gt;，根据自己实际需求进行修改。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;不要使用&lt;code&gt;v-if=&quot;hasPermissions(['p_menu_edit'])&quot;&lt;/code&gt;这种方式，会导致方法多次执行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也可以直接在组件中从vuex store读取权限信息进行校验。&lt;/p&gt;
&lt;h3 id=&quot;开发建议&quot;&gt;开发建议&lt;/h3&gt;
&lt;ul readability=&quot;4&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;页面级别的组件放到&lt;code&gt;pages/&lt;/code&gt;目录下，并且在&lt;code&gt;routerMapCompnonents/index.js&lt;/code&gt;中以key-value的形式导出&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;不需要权限控制的固定菜单放到&lt;code&gt;menu/aside.js&lt;/code&gt;和&lt;code&gt;menu/header.js&lt;/code&gt;中&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;不需要权限控制的路由放到&lt;code&gt;router/routes.js&lt;/code&gt; &lt;code&gt;frameIn&lt;/code&gt;内&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;需要权限控制的菜单与路由通过界面的管理功能进行添加，确保菜单的&lt;code&gt;path&lt;/code&gt;与路由的&lt;code&gt;path&lt;/code&gt;相对应，路由的&lt;code&gt;name&lt;/code&gt;与页面组件的&lt;code&gt;name&lt;/code&gt;一致才能使&lt;code&gt;keep-alive&lt;/code&gt;生效，路由的&lt;code&gt;component&lt;/code&gt;在&lt;code&gt;routerMapCompnonents/index.js&lt;/code&gt;中能通过key匹配到。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;开发阶段菜单与路由的添加可由开发人员自行维护，并维护一份清单，上线后将清单交给相关的人去维护即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;如果觉得麻烦，不想菜单与路由由后端返回，可以在前端维护一份菜单和路由(路由中的&lt;code&gt;component&lt;/code&gt;还是使用字符串，参考&lt;code&gt;mock/permissionMenuAndRouter.js&lt;/code&gt;)，并且在菜单和路由上面维护相应的权限编码，一般都是使用功能编码。后端就不需要返回菜单和路由信息了，但是其他权限信息，比如角色编码，功能编码等还是需要的。通过后端返回的功能编码列表，在前端过滤出用户具备权限的菜单和路由，过滤处理后后的菜单与路由格式与之前由后端返回的格式一致，然后将处理后的菜单与路由当做后端返回的一样处理即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;数据mock与代码生成&quot;&gt;数据mock与代码生成&lt;/h3&gt;
&lt;p&gt;数据mock使用&lt;a href=&quot;https://github.com/wjkang/lazy-mock&quot;&gt;lazy-mock&lt;/a&gt;修改而来的&lt;a href=&quot;https://github.com/wjkang/d2-admin-server&quot;&gt;d2-admin-server&lt;/a&gt;，数据真实来源于后端，相比其他工具，支持数据持久化，存储使用的是json文件，不需要安装数据库。简单的配置即可自动生成增删改查的接口。&lt;/p&gt;
&lt;p&gt;后端使用中间件控制访问权限，比如：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt; .get('/menu', PermissionCheck(), controllers.menu.getMenuList)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;PermissionCheck&lt;/code&gt;默认使用接口进行校验，校验用户所能访问的API中是否匹配当前API，支持使用功能编码与角色编码进行校验&lt;code&gt;PermissionCheck([&quot;p_menu_edit&quot;],[&quot;r_menu_admin&quot;],true)&lt;/code&gt;,第一个参数为功能编码，第二个为角色编码，第三个为是否使用接口进行校验。&lt;/p&gt;
&lt;p&gt;更多详细用法可看&lt;a href=&quot;https://github.com/wjkang/lazy-mock&quot;&gt;lazy-mock文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前端代码生成还在开发中...&lt;/p&gt;
</description>
<pubDate>Sun, 06 Jan 2019 06:46:00 +0000</pubDate>
<dc:creator>若邪</dc:creator>
<og:description>前两篇关于vue权限路由文章的填坑，说了一堆理论，是时候操作一波了。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jaycewu/p/10228936.html</dc:identifier>
</item>
<item>
<title>机器学习与Tensorflow（5）——循环神经网络、长短时记忆网络 - 小伙郭</title>
<link>http://www.cnblogs.com/guoruxin/p/10228453.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guoruxin/p/10228453.html</guid>
<description>

&lt;ul&gt;&lt;li&gt;前馈神经网络能够用来建立数据之间的映射关系，但是不能用来分析过去信号的时间依赖关系，而且要求输入样本的长度固定&lt;/li&gt;
&lt;li&gt;循环神经网络是一种在前馈神经网络中增加了分亏链接的神经网络，能够产生对过去数据的记忆状态，所以可以用于对序列数据的处理，并建立不同时段数据之间的依赖关系&lt;/li&gt;
&lt;li&gt;循环神经网络是一类允许节点连接成有向环的人工神经网络。如下图：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1517322/201901/1517322-20190106132212284-1497726128.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;ul&gt;&lt;li&gt;从广义上说，递归神经网络可以分为结构递归神经网络和时间递归神经网络&lt;/li&gt;
&lt;li&gt;从狭义上说，递归神经网络可以通常就是指结构递归神经网络，而时间递归神经网络则被称为循环神经网络&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不妨设t时刻，网络的输入向量为x(t),隐含向量为h(t),网络的输出向量是o(t),用V表示输入层与隐含层之间的连接权值，U表示隐含层与隐含层之间的连接权值，W表示隐含层与输出层之间的连接权值，b和a表示隐含层的输出层的偏置&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Elman网络：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;网络结构如下图：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1517322/201901/1517322-20190106132329798-1018704382.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Elman网络包含从隐含节点到上下文节点的反馈链接，以及从上下文节点调到隐含节点的前馈链接，其中上下文节点的输入是隐含层上一时刻的输出&lt;/li&gt;
&lt;li&gt;Elman网络从0时刻到T时刻的计算过程可以描述为：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1517322/201901/1517322-20190106132350550-45921493.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;strong&gt;Jordan网络：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;网络结构如下图：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1517322/201901/1517322-20190106132430019-1000026306.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Jordan网络包含从输出节点到上下文节点的反馈，以及从上下文节点到隐含节点的前馈链接，其中上下文节点的输入是输出层上一时刻的输出。此外，Jordan网络的上下文节点允许自连接&lt;/li&gt;
&lt;li&gt;Jordan网络从0时刻到T时刻的计算过程可以描述为：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1517322/201901/1517322-20190106132523293-713591651.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;ul&gt;&lt;li&gt;长短时记忆网络(LSTM network)，又称为长短时记忆循环网络，是一种在经典循环神经网络的基础上发展起来的改进模型。&lt;/li&gt;
&lt;li&gt;LSTM网络的特点在于利用记忆模块代替普通的隐含节点，确保梯度在传递跨越很多时间步骤之后不消失或爆炸，从而能够克服传统循环神经网络训练中遇到的某些困难&lt;/li&gt;
&lt;li&gt;长短时记忆网络非常适合于从经验中学习分类，以及处理和预测那些在重要事件之间存在未知时长延迟的时间序列&lt;/li&gt;
&lt;li&gt;循环神经网络和长短时记忆网络之间的对应关系如下图所示：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1517322/201901/1517322-20190106132557525-1499243999.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;ul&gt;&lt;li&gt;传统记忆块有一个或者多个具有内部状态的记忆细胞（memory sell）、一个输入挤压单元（input squashing unit）、一个输入门控单元（input gating unit）、一个输入门单元（input gate unit）、一个输出门单元（output gate unit）、一个输出挤压单元（outnput squashing unit）、和一个输出门控单元（output gating unit）几部分组成。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1517322/201901/1517322-20190106132859963-693571486.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 06 Jan 2019 05:29:00 +0000</pubDate>
<dc:creator>小伙郭</dc:creator>
<og:description>1.循环神经网络的标准模型 前馈神经网络能够用来建立数据之间的映射关系，但是不能用来分析过去信号的时间依赖关系，而且要求输入样本的长度固定 循环神经网络是一种在前馈神经网络中增加了分亏链接的神经网络，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guoruxin/p/10228453.html</dc:identifier>
</item>
<item>
<title>ASP.NET Core 2.2 基础知识(九) 使用托管服务实现后台任务 - 热敷哥</title>
<link>http://www.cnblogs.com/refuge/p/10226911.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/refuge/p/10226911.html</guid>
<description>&lt;p&gt;在 ASP.NET Core 中,后台任务作为托管服务实现.托管服务是一个类,而且必须实现 IHostedService 接口,该接口定义了两个方法:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;StartAsync(CancellationToken cancellationToken)  该方法包含启动后台任务的逻辑,当启动服务器并触发 IApplicationLifetime.ApplicationStarted 后调用该方法.&lt;/li&gt;
&lt;li&gt;StopAsync(CancellationToken cancellationToken)主机正常关闭时触发,包含结束后台任务和处理任何非托管资源的逻辑.如果应用意外关闭,则可能不会调用.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;托管服务在应用启动时激活一次,在应用关闭时正常关闭.实现 IDisposable 时,可在处置服务容器时处理资源.如果在执行后台任务期间引发错误,即使未调用 StopAsync ,也应调用 Dispose.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;示例一:计时的后台任务&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TimedHostedService : IHostedService, IDisposable
    {

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ILogger _logger;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Timer _timer;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; TimedHostedService(ILogger&amp;lt;TimedHostedService&amp;gt;&lt;span&gt; logger)
        {
            _logger &lt;/span&gt;=&lt;span&gt; logger;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task StartAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Timed Background Service is starting.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; DateTime.Now);
            _timer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Timer(DoWork, &lt;span&gt;null&lt;/span&gt;, TimeSpan.Zero, TimeSpan.FromSeconds(&lt;span&gt;5&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;立即执行一次,每5秒执行一次&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Task.CompletedTask;
        }


        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; DoWork(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; state)
        {
            _logger.LogInformation(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Timed Background Service is working.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; DateTime.Now);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task StopAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Timed Background Service is stopping.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; DateTime.Now);
            _timer&lt;/span&gt;?.Change(Timeout.Infinite, &lt;span&gt;0&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不再执行&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Task.CompletedTask;
        }


        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Dispose()
        {
            _timer&lt;/span&gt;?&lt;span&gt;.Dispose();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注册该后台任务:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
            &lt;span&gt;services.AddHostedService&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;TimedHostedService&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;();&lt;/span&gt;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在控制台启动该项目,期间用 ctrl+C 结束应用.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1189148/201901/1189148-20190105233821623-803292905.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实官方帮我们封装了一个类来简化上述代码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
  &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Base class for implementing a long running &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;T:Microsoft.Extensions.Hosting.IHostedService&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;.
  &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BackgroundService : IHostedService, IDisposable
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因此上述代码可以修改成:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyBackGroundTask : BackgroundService
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ILogger _logger;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Timer _timer;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; MyBackGroundTask(ILogger&amp;lt;MyBackGroundTask&amp;gt;&lt;span&gt; logger)
        {
            _logger &lt;/span&gt;=&lt;span&gt; logger;
        }
        
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task ExecuteAsync(CancellationToken stoppingToken)
        {
            _logger.LogInformation($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; MyBackGroundTask is starting. {DateTime.Now}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;stoppingToken.IsCancellationRequested)
            {
                _logger.LogInformation($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; MyBackGroundTask is working. {DateTime.Now}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; Task.Delay(&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;, stoppingToken);
            }
            &lt;span&gt;_logger.LogInformation($&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot; MyBackGroundTask is stopping. {DateTime.Now}&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;);&lt;/span&gt;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;但是,我发现 &lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;_logger.LogInformation($&quot; MyBackGroundTask is stopping. {DateTime.Now}&quot;);&lt;br/&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;这句代码始终不执行.不知道是哪里没搞对.希望大神能帮个忙..&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;span&gt; 示例二:在后台任务中使用有作用域的服务&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;要使用有作用域的服务,需要先创建一个作用域.默认情况下,不会为托管服务创建作用域.&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IScopedProcessingService
    {
        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; DoWork();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ScopedProcessingService : IScopedProcessingService
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ILogger _logger;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ScopedProcessingService(ILogger&amp;lt;ScopedProcessingService&amp;gt;&lt;span&gt; logger)
        {
            _logger &lt;/span&gt;=&lt;span&gt; logger;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; DoWork()
        {
            _logger.LogInformation($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Scoped Processing Service is working. {DateTime.Now}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConsumeScopedServiceHostedService : IHostedService
    {

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ILogger _logger;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IServiceProvider Services { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ConsumeScopedServiceHostedService(IServiceProvider services, ILogger&amp;lt;ConsumeScopedServiceHostedService&amp;gt;&lt;span&gt; logger)
        {
            Services &lt;/span&gt;=&lt;span&gt; services;
            _logger &lt;/span&gt;=&lt;span&gt; logger;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task StartAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Consume Scoped Service Hosted Service is starting. {DateTime.Now}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            DoWork();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Task.CompletedTask;
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; DoWork()
        {
            _logger.LogInformation($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Consume Scoped Service Hosted Service is working. {DateTime.Now}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;using (IServiceScope scope = Services.CreateScope())//创建一个作用域.
            {
                IScopedProcessingService scopedProcessingService = scope.ServiceProvider.GetRequiredService&amp;lt;IScopedProcessingService&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;();
                scopedProcessingService.DoWork();
            }&lt;/span&gt;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task StopAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Consume Scoped Service Hosted Service is stopping. {DateTime.Now}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Task.CompletedTask;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;但是我真的没搞懂官方这个例子的作用.因为托管服务只会激活一次,有作用域又有什么价值呢?希望哪位大哥能解答一下.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;下面的在摘自网络:https://www.cnblogs.com/FlyLolo/p/ASPNETCore2_11.html&lt;/p&gt;
&lt;p&gt;经测试：&lt;/p&gt;
&lt;p&gt;　　1. 当IIS上部署的项目启动后，后台任务随之启动，任务执行相应的log正常输出。&lt;/p&gt;
&lt;p&gt;　　2. 手动回收对应的应用程序池，任务执行相应的log输出停止。&lt;/p&gt;
&lt;p&gt;　　3. 重新请求该网站，后台任务随之启动，任务执行相应的log重新开始输出。&lt;/p&gt;
&lt;p&gt;所以不建议在这样的后台任务中做一些需要固定定时执行的业务处理类的操作，但对于缓存刷新类的操作还是可以的，因为当应用程序池回收后再次运行的时候，后台任务会随着启动。&lt;/p&gt;
</description>
<pubDate>Sun, 06 Jan 2019 05:28:00 +0000</pubDate>
<dc:creator>热敷哥</dc:creator>
<og:description>在 ASP.NET Core 中,后台任务作为托管服务实现.托管服务是一个类,而且必须实现 IHostedService 接口,该接口定义了两个方法: StartAsync(CancellationT</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/refuge/p/10226911.html</dc:identifier>
</item>
<item>
<title>Redux在处理庞大Store并频繁进行更新操作时的性能 - 水果味的C</title>
<link>http://www.cnblogs.com/SyMind/p/10228359.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/SyMind/p/10228359.html</guid>
<description>&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;：当你拥有一个相当大的 SPA 拥有许多状态，因为有很多页面，模块，子模块和许多元素。所有子状态都关联 App 中不同的关注点，子状态由它们自己的 reducer 处理。但是当进行非常频繁的更新操作，所有的 reducer 都将被调用。&lt;/p&gt;
&lt;p&gt;当拥有一个如下的 store：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;store: {
  subStore1: {
    subSubstore1: {}
    ...
    subSubstore10: {}
  },
subStore2: {
    subSubstore1: {}
    ...
    subSubstore10: {}
  }
...
subStore10: {
    subSubstore1: {}
    ...
    subSubstore10: {}
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dispatch 一个更新 substore2: { subStore6 } 的 action。&lt;/p&gt;
&lt;p&gt;为什么不简单地复制指针 substore1、substore3、... substore9，而现在是调用其他子 store 的 reducer？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;：可以使用 redux-ignore &lt;a href=&quot;https://github.com/omnidan/redux-ignore&quot;&gt;https://github.com/omnidan/redux-ignore&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Redux Store 中只有一个 reducer 函数&lt;/span&gt;。你可以分解该函数，并根据你的需求来权衡便利、速度或其他因素。combineReducers 是处理此问题的常用方法，但并不是必需的。&lt;/p&gt;

&lt;p&gt;如何处理那些已订阅状态变化的组件？&lt;/p&gt;
&lt;p&gt;使用 react-redux。由 React-Redux 的 connect() 函数生成的包装组件会进行多次检查，以尽量减少实际组件重渲染（re-render)。这包括 shouldComponentUpdate 的默认实现，并对进入组件的 props 进行浅检查（包括从 mapStateToProps 返回的内容）。所以一般情况下，被 connect 的组件只有在状态值发生变化时才会重渲染。&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://github.com/reduxjs/redux/issues/1303&quot; target=&quot;_blank&quot;&gt;https://github.com/reduxjs/redux/issues/1303&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 06 Jan 2019 04:45:00 +0000</pubDate>
<dc:creator>水果味的C</dc:creator>
<og:description>Q：当你拥有一个相当大的 SPA 拥有许多状态，因为有很多页面，模块，子模块和许多元素。所有子状态都关联 App 中不同的关注点，子状态由它们自己的 reducer 处理。但是当进行非常频繁的更新操作</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/SyMind/p/10228359.html</dc:identifier>
</item>
<item>
<title>python爬虫常见面试题（二） - 天意凉</title>
<link>http://www.cnblogs.com/tianyiliang/p/10219034.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tianyiliang/p/10219034.html</guid>
<description>&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　之所以在这里写下python爬虫常见面试题及解答，一是用作笔记，方便日后回忆；二是给自己一个和大家交流的机会，互相学习、进步，希望不正之处大家能给予指正；三是我也是互联网寒潮下岗的那批人之一，为了找工作而做准备。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、题目部分&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、scrapy框架专题部分（很多面试都会涉及到这部分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）请简要介绍下scrapy框架。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）为什么要使用scrapy框架？scrapy框架有哪些优点？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）scrapy框架有哪几个组件/模块？简单说一下工作流程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;（4）scrapy如何实现分布式抓取？&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、其他常见问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）爬虫使用多线程好？还是多进程好？为什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）http和https的区别？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）数据结构之堆，栈和队列的理解和实现。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt;二、解答部分&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;1、scrapy框架专题部分&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;（1）请简要介绍下scrapy框架。&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;scrapy 是一个快速(fast)、高层次(high-level)的基于 python 的 web 爬虫构架，用于抓取web站点并从页面中提取结构化的数据。scrapy 使用了 &lt;code&gt;Twisted&lt;/code&gt;异步网络库来处理网络通讯。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）为什么要使用scrapy框架？scrapy框架有哪些优点？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;它更容易构建大规模的抓取项目&lt;/li&gt;
&lt;li&gt;它异步处理请求，速度非常快&lt;/li&gt;
&lt;li&gt;它可以使用自动调节机制自动调整爬行速度&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;（3）scrapy框架有哪几个组件/模块？简单说一下工作流程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Scrapy Engine: 这是引擎，负责Spiders、ItemPipeline、Downloader、Scheduler中间的通讯，信号、数据传递等等！（像不像人的身体？）&lt;/p&gt;
&lt;p&gt;Scheduler(调度器): 它负责接受引擎发送过来的requests请求，并按照一定的方式进行整理排列，入队、并等待Scrapy Engine(引擎)来请求时，交给引擎。&lt;/p&gt;
&lt;p&gt;Downloader（下载器）：负责下载Scrapy Engine(引擎)发送的所有Requests请求，并将其获取到的Responses交还给Scrapy Engine(引擎)，由引擎交给Spiders来处理，&lt;/p&gt;
&lt;p&gt;Spiders：它负责处理所有Responses,从中分析提取数据，获取Item字段需要的数据，并将需要跟进的URL提交给引擎，再次进入Scheduler(调度器)，&lt;/p&gt;
&lt;p&gt;Item Pipeline：它负责处理Spiders中获取到的Item，并进行处理，比如去重，持久化存储（存数据库，写入文件，总之就是保存数据用的）&lt;/p&gt;
&lt;p&gt;Downloader Middlewares（下载中间件）：你可以当作是一个可以自定义扩展下载功能的组件&lt;/p&gt;
&lt;p&gt;Spider Middlewares（Spider中间件）：你可以理解为是一个可以自定扩展和操作引擎和Spiders中间‘通信‘的功能组件（比如进入Spiders的Responses;和从Spiders出去的Requests）&lt;/p&gt;
&lt;p&gt; 整体架构如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1269458/201901/1269458-20190104115144974-1115150433.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;工作流程：&lt;/p&gt;
&lt;p&gt;数据在整个Scrapy的流向：&lt;/p&gt;
&lt;p&gt;程序运行的时候，&lt;/p&gt;
&lt;p&gt;引擎：Hi！Spider, 你要处理哪一个网站？&lt;/p&gt;
&lt;p&gt;Spiders：我要处理23wx.com&lt;/p&gt;
&lt;p&gt;引擎：你把第一个需要的处理的URL给我吧。&lt;/p&gt;
&lt;p&gt;Spiders：给你第一个URL是XXXXXXX.com&lt;/p&gt;
&lt;p&gt;引擎：Hi！调度器，我这有request你帮我排序入队一下。&lt;/p&gt;
&lt;p&gt;调度器：好的，正在处理你等一下。&lt;/p&gt;
&lt;p&gt;引擎：Hi！调度器，把你处理好的request给我，&lt;/p&gt;
&lt;p&gt;调度器：给你，这是我处理好的request&lt;/p&gt;
&lt;p&gt;引擎：Hi！下载器，你按照下载中间件的设置帮我下载一下这个request&lt;/p&gt;
&lt;p&gt;下载器：好的！给你，这是下载好的东西。（如果失败：不好意思，这个request下载失败，然后引擎告诉调度器，这个request下载失败了，你记录一下，我们待会儿再下载。）&lt;/p&gt;
&lt;p&gt;引擎：Hi！Spiders，这是下载好的东西，并且已经按照Spider中间件处理过了，你处理一下（注意！这儿responses默认是交给def parse这个函数处理的）&lt;/p&gt;
&lt;p&gt;Spiders：（处理完毕数据之后对于需要跟进的URL），Hi！引擎，这是我需要跟进的URL，将它的responses交给函数 def  xxxx(self, responses)处理。还有这是我获取到的Item。&lt;/p&gt;
&lt;p&gt;引擎：Hi ！Item Pipeline 我这儿有个item你帮我处理一下！调度器！这是我需要的URL你帮我处理下。然后从第四步开始循环，直到获取到你需要的信息，&lt;/p&gt;
&lt;p&gt;注意！只有当调度器中不存在任何request了，整个程序才会停止，（也就是说，对于下载失败的ＵＲＬ，Scrapy会重新下载。）&lt;/p&gt;
&lt;p&gt;以上就是Scrapy整个流程了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（4）scrapy如何实现分布式抓取？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以借助scrapy_redis类库来实现。&lt;/p&gt;
&lt;p&gt;在分布式爬取时，会有master机器和slave机器，其中，master为核心服务器，slave为具体的爬虫服务器。&lt;/p&gt;
&lt;p&gt;我们在master服务器上搭建一个redis数据库，并将要抓取的url存放到redis数据库中，所有的slave爬虫服务器在抓取的时候从redis数据库中去链接，由于scrapy_redis自身的队列机制，slave获取的url不会相互冲突，然后抓取的结果最后都存储到数据库中。master的redis数据库中还会将抓取过的url的指纹存储起来，用来去重。相关代码在dupefilter.py文件中的request_seen()方法中可以找到。&lt;/p&gt;
&lt;p&gt;去重问题： &lt;br/&gt;dupefilter.py 里面的源码： &lt;br/&gt;def request_seen(self, request): &lt;br/&gt;fp = request_fingerprint(request) &lt;br/&gt;added = self.server.sadd(self.key, fp) &lt;br/&gt;return not added &lt;br/&gt;去重是把 request 的 fingerprint 存在 redis 上，来实现的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、其他常见问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）爬虫使用多线程好？还是多进程好？为什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于IO密集型代码（文件处理，网络爬虫），多线程能够有效提升效率（单线程下有IO操作会进行IO等待，会造成不必要的时间等待，而开启多线程后，A线程等待时，会自动切换到线程B，可以不浪费CPU的资源，从而提升程序执行效率）。&lt;/p&gt;
&lt;p&gt;在实际的采集过程中，既考虑网速和相应的问题，也需要考虑自身机器硬件的情况，来设置多进程或者多线程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;（2）http和https的区别？&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A. http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。&lt;/p&gt;
&lt;p&gt;B. http适合于对传输速度、安全性要求不是很高，且需要快速开发的应用。如web应用，小的手机游戏等等。而https适用于任何场景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）数据结构之堆，栈和队列的理解和实现。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈（stacks）：栈的特点是后进先出。只能通过访问一端来实现数据的储存和检索的线性数据结构。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;队列（queue）：队列的特点是先进先出。元素的增加只能在一端，元素的删除只能在另一端。增加的一端称为队尾，删除的一端称为队首。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; stack = [1, 2, 3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; stack.append(4&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; stack.append(5&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(stack)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;stack.pop()
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;stack.pop()
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(stack)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [1, 2, 3, 4, 5&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; [1, 2, 3]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;队列：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; collections &lt;span&gt;import&lt;/span&gt;&lt;span&gt; deque
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; queue = deque([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Eric&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;John&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Michael&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; queue.append(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Terry&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; queue.append(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Graham&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(queue)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;queue.popleft()
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(queue)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; deque([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Eric&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;John&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Michael&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Terry&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Graham&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; deque([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;John&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Michael&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Terry&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Graham&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里还会有一个常见的问题，&lt;strong&gt;栈溢出的常见情况及解决方案。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是栈溢出？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为栈一般默认为1-2m，一旦出现死循环或者是大量的递归调用，在不断的压栈过程中，造成栈容量超过1m而导致溢出。&lt;/p&gt;
&lt;p&gt;栈溢出的几种情况？&lt;/p&gt;
&lt;p&gt;1、局部数组过大。当函数内部数组过大时，有可能导致堆栈溢出。&lt;/p&gt;
&lt;p&gt;2、递归调用层次太多。递归函数在运行时会执行压栈操作，当压栈次数太多时，也会导致堆栈溢出。&lt;/p&gt;
&lt;p&gt; 解决方法：&lt;/p&gt;
&lt;p&gt;1、用栈把递归转换成非递归。&lt;/p&gt;
&lt;p&gt;2、增大栈空间。&lt;/p&gt;
</description>
<pubDate>Sun, 06 Jan 2019 04:39:00 +0000</pubDate>
<dc:creator>天意凉</dc:creator>
<og:description>前言 之所以在这里写下python爬虫常见面试题及解答，一是用作笔记，方便日后回忆；二是给自己一个和大家交流的机会，互相学习、进步，希望不正之处大家能给予指正；三是我也是互联网寒潮下岗的那批人之一，为</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tianyiliang/p/10219034.html</dc:identifier>
</item>
<item>
<title>实验吧CTF天网管理系统 - Jaxjones</title>
<link>http://www.cnblogs.com/WhiteHatKevil/p/10228335.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/WhiteHatKevil/p/10228335.html</guid>
<description>&lt;p&gt;天网你敢来挑战嘛&lt;/p&gt;
&lt;div class=&quot;de_mle_p1&quot;&gt;
&lt;p&gt;格式：ctf{ }&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;de_mle_p2&quot;&gt;解题链接： http://ctf5.shiyanbar.com/10/web1/ &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545225/201901/1545225-20190106114810518-1273373914.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;打开链接后，嗯，光明正大的放出账号密码，肯定是登不进的，查看源代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545225/201901/1545225-20190106114950829-1805317105.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看来是和md5碰撞有关的了，&lt;/p&gt;
&lt;p&gt;PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，&lt;br/&gt;它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，&lt;br/&gt;其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。&lt;/p&gt;
&lt;p&gt;攻击者可以利用这一漏洞，&lt;br/&gt;通过输入一个经过哈希后以”0E”开头的字符串，即会被PHP解释为0，&lt;br/&gt;如果数据库中存在这种哈希值以”0E”开头的密码的话，他就可以以这个用户的身份登录进去，&lt;br/&gt;尽管并没有真正的密码。&lt;/p&gt;
&lt;p&gt;0e开头的md5和原值：&lt;br/&gt;（加密后值为0）&lt;/p&gt;
&lt;p&gt;s878926199a&lt;/p&gt;
&lt;p&gt;0e545993274517709034328855841020&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;s155964671a&lt;/p&gt;
&lt;p&gt;0e342768416822451524974117254469&lt;/p&gt;

&lt;p&gt; 我们随便选一个，将用户名改为s878926199a&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545225/201901/1545225-20190106115337813-433101261.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将url改为该地址，进入后审计代码&lt;/p&gt;
&lt;p&gt;$unserialize_str = $_POST['password'];  &lt;/p&gt;
&lt;p&gt;$data_unserialize = unserialize($unserialize_str);        #&lt;span class=&quot;function&quot;&gt;unserialize() 对单一的已序列化的变量进行操作，将其转换回 PHP 的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;if($data_unserialize['user'] == '???' &amp;amp;&amp;amp; $data_unserialize['pass']=='???') { print_r($flag); }&lt;/p&gt;
&lt;p&gt;伟大的科学家php方言道：成也布尔，败也布尔。 回去吧骚年&lt;/p&gt;

&lt;p&gt;1.需要构造序列化的password填入，代码意思是把post提交的password值经过&quot;反序列化&quot;得到一个数组，&lt;/p&gt;
&lt;p&gt;要求数组里的user和pass都等于某个值时就打印flag。&lt;/p&gt;
&lt;p&gt;2.bool类型的true跟任意字符串可以弱类型相等。因此我们可以构造bool类型的序列化数据 ，无论比较的值是什么，结果都为true。&lt;/p&gt;

&lt;div readability=&quot;13&quot;&gt;
&lt;p&gt;序列化与反序列化:&lt;/p&gt;
&lt;p&gt;把复杂的数据类型压缩到一个字符串中&lt;/p&gt;
&lt;p&gt;serialize() 把变量和它们的值编码成文本形式&lt;/p&gt;
&lt;p&gt;unserialize() 恢复原先变量&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;自己实践序列化函数&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545225/201901/1545225-20190106121847673-1105949358.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545225/201901/1545225-20190106121911138-1619686806.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;p&gt;从结果可以看出，要构造bool类型的序列化数据经过反序列化后为true，user和password的值应写成  &quot;a:2:{s:4:&quot;user&quot;;b:1;s:4:&quot;pass&quot;;b:1;}&quot;,&lt;/p&gt;
&lt;p&gt;最后我们将该值提交得到flag&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1545225/201901/1545225-20190106122130944-1549700178.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 06 Jan 2019 04:30:00 +0000</pubDate>
<dc:creator>Jaxjones</dc:creator>
<og:description>天网你敢来挑战嘛 格式：ctf{ } 格式：ctf{ } 解题链接： http://ctf5.shiyanbar.com/10/web1/ 打开链接后，嗯，光明正大的放出账号密码，肯定是登不</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/WhiteHatKevil/p/10228335.html</dc:identifier>
</item>
</channel>
</rss>