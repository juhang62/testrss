<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Shell脚本 | 安卓应用权限检查 - Shengjie</title>
<link>http://www.cnblogs.com/liushengchieh/p/10750701.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liushengchieh/p/10750701.html</guid>
<description>&lt;p&gt;现在 Google Play 对&lt;a href=&quot;https://play.google.com/intl/zh-CN_ALL/about/privacy-security-deception/permissions/&quot;&gt;应用权限的管理&lt;/a&gt;非常严格，之前公司内有个版本就是因为新增了四个权限导致停灰处理。所以，在每个版本发布之前很有必要检查一下是否有新增权限。&lt;/p&gt;
&lt;p&gt;安卓应用请求的所有权限可以通过 aapt 命令查看：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/999948/201904/999948-20190422155821676-372973140.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在拿到应用的权限列表后，即可对比两个版本的权限是否有变化，新增加或者新减少。&lt;/p&gt;
&lt;p&gt;脚本如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#!/usr/bin/env bash

#清空上次运行后产生的文件
if [[ -f permission_old.txt ]]; then
    rm permission_old.txt permission_new.txt
fi

#读取apk文件地址
read -p &quot;请输入上个版本apk文件存放地址：&quot; apk_old
read -p &quot;请输入最新版本apk文件存放地址：&quot; apk_new

#aapt命令解析apk,输出权限到文件
aapt d badging ${apk_old} | grep &quot;uses-permission:&quot; | awk -F &quot;'&quot; '{print $2}' &amp;gt; permission_old.txt
aapt d badging ${apk_new} | grep &quot;uses-permission:&quot; | awk -F &quot;'&quot; '{print $2}' &amp;gt; permission_new.txt

#遍历新版本权限列表，对比旧版本权限列表是否相同，不同则为新增
for x in $(cat permission_new.txt); do
    if cat permission_old.txt | grep ${x} &amp;gt; /dev/null; then
        echo &quot;hello, world&quot; &amp;gt; /dev/null
    else
        echo ${x} &amp;gt;&amp;gt; permission_increase.txt
    fi
done

#遍历旧版本权限列表，对比新版本权限列表是否相同，不同则为新减少
for y in $(cat permission_old.txt); do
    if cat permission_new.txt | grep ${y} &amp;gt; /dev/null; then
        echo &quot;hello, world&quot; &amp;gt; /dev/null
    else
        echo ${y} &amp;gt;&amp;gt; permission_decrease.txt
    fi
done

#判断permission_increase.txt是否存在：存在，输出新增权限提醒；不存在，输出无新增权限
if [[ ! -f permission_increase.txt ]]; then
    echo &quot;无新增权限&quot;
else
    echo &quot;新增权限：&quot;
    cat permission_increase.txt
    #删除新增权限文件
    rm permission_increase.txt
fi

#判断permission_decrease.txt是否存在：存在，输出新减少权限提醒；不存在，输出无新减少权限
if [[ ! -f permission_decrease.txt ]]; then
    echo &quot;无新减少权限&quot;
else
    echo &quot;新减少权限：&quot;
    cat permission_decrease.txt
    #删除新减少权限文件
    rm permission_decrease.txt
fi&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行示例：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/999948/201904/999948-20190422155842769-1064332980.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;欢迎关注微信公众号&quot;测试开发Stack&quot;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 22 Apr 2019 07:59:00 +0000</pubDate>
<dc:creator>Shengjie</dc:creator>
<og:description>现在 Google Play 对 '应用权限的管理' 非常严格，之前公司内有个版本就是因为新增了四个权限导致停灰处理。所以，在每个版本发布之前很有必要检查一下是否有新增权限。 安卓应用请求的所有权限可</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liushengchieh/p/10750701.html</dc:identifier>
</item>
<item>
<title>带着新人看java虚拟机04（多线程篇） - java小新人</title>
<link>http://www.cnblogs.com/wyq1995/p/10742713.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wyq1995/p/10742713.html</guid>
<description>&lt;p&gt;　　我记得最开始接触多进程，多线程这一块的时候我不是怎么理解，为什么要有多线程啊？多线程到底是个什么鬼啊？我一个程序好好的就可以运行为什么要用到多线程啊？反正我是十分费解，即使过了很长时间我还是不是很懂，听别人说过也自己试过，但总是没有理解透彻；&lt;/p&gt;
&lt;p&gt;　时间过了很久感觉现在对多线程有了一点新的理解，我们还是从最基本的开始，顺便看看从jvm的角度看看多线程在jvm中是怎么分配内存的，顺便和前面的几篇内容串一下；&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.现实中的多线程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　举个例子：假如你一个人在家，你现在听首歌5分钟，烧开水需要10分钟，玩一局游戏要20分钟，现在问题来了，你完成这三件事总共需要多少分钟？&lt;/p&gt;
&lt;p&gt;　　假如是小学生肯定会回答5+10+20=35分钟啊，但我们比小学生牛一点，稍微思考一下就知道是20分钟，因为三件事可以同时做嘛，玩游戏的同时可以听歌，顺便烧开水，一把游戏打完，歌听完了，水也烧开然后可以去泡茶了，舒服！&lt;/p&gt;
&lt;p&gt;　　我们用一个比较简陋的图看看这两种方式（这里先不考虑并发与并行的区别，方便理解）&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368608/201904/1368608-20190421101906188-142200785.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以粗略的看到如果是小学生的话，要一件事一件事的做，最后花的时间是三者时间总和；而我们比较聪明，由于三件事互不影响，我们可以三件事同时开始做，这样就大大减少了不必要的等待时间，最终三者花费的时间差不多就是最长的那一个。&lt;/p&gt;
&lt;p&gt;　　这里稍微提一下并发和并行的区别；&lt;/p&gt;
&lt;p&gt;　　并发：这个是在计算机单核CPU的前提之下，我们要清楚一个CPU在某一时刻只能做一件事，但是现在有三件事（听歌，烧开水，玩游戏）交给CPU做，CPU是个好人，任劳任怨，一下子去听歌，一下子去烧开水，一下子玩游戏，最终可以把三件事都给做完，但是假如同时有几百件事交给CPU做呢？emmmm，最后CPU就被累垮了，住院去了，于是我们计算机也卡死了；举个最贴近我们的例子：以前上学的时候作业太多，很多时候都是很多科目的作业都没有做完，那怎么办呢？只有早上去早点去抄一下同学的，但是各个课代表来收作业了，于是只能这个科目作业抄一点马上又把另外一个科目作业抄一点，玛德，最后终于在规定时间都抄完了，可是假如你有100个科目的作业没做完，你会怎么办？用命去抄也抄不完了，于是你就累病了。。。。&lt;/p&gt;
&lt;p&gt;　　并行：多核CPU的前提，现在一个电脑都有多个CPU，那么CPU同时就可以做多件事，即使事情再多，多个CPU进行切换最终花费的时间确实大大减少；还是说说上面抄作业的例子，假如你现在有10门科目的作业没做完，就靠你一个头脑一只手肯定来不及啊！于是这个时候你唤醒了前世的记忆，原来你是哪吒转世，特么的居然可以变成是三头六臂，这得可以同时抄多少份作业啊！！！一下子作业就做完了，舒服！但是这个时候作业科目太多的话你即使有三头六臂也不够用啊，而且相互之间的协调也就变成一个很重要的问题。&lt;/p&gt;
&lt;p&gt; 　　并发和并行就是这个意思，我们现在只关注并发，看看在单核CPU的计算机中一个程序是怎么运行的？&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.进程和线程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　想想什么叫做进程呢？我的理解就是程序进入了内存就是进程，比如我们电脑桌面双击QQ，优酷，java虚拟机等，操作系统就会把这些软件的内容加载到内存中去运行去了，然后就是运行某编程语言写的代码，转化为机器码调用操作系统的接口，然后操作系统的内核会那些硬件驱动程序发出一些指令，然后我们的电脑屏幕就出现变化了。。。我们简单画一画图，我们主要看JVM&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368608/201904/1368608-20190421121316993-870111467.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;  　我们再进入JVM中看看，其中线程1、2、3就是我们在java代码中要去实现的；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368608/201904/1368608-20190421210425434-414651301.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　进程：我们百度一下进程的定义，最重要的一点就是进程是操作系统资源分配的基本单位，因为每启动一个程序，一个进程就创建了，在操作系统堆内存空间上就开辟了一块空间，也就是分配了资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368608/201904/1368608-20190421122051639-1724228230.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　线程：现在再来看线程，百度一下线程定义，其实就是说：进程就是一个程序，这个程序之中可能会同时执行多个任务的代码，每一个任务就是一个线程，而且每一个线程都会在JVM中有自己独立的java栈，java堆，pc寄存器等内存空间，而且CPU只能切换线程，即使是不同程序的线程也可以相互切换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368608/201904/1368608-20190421121523799-955626415.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　这里就要说明一下，想比进程和线程，创建一个进程是要在操作系统内存中去开辟空间，会涉及到对操作系统一些函数的调用，而创建一个线程（比如在JVM中）只需要在jvm中个部分开辟空间，相比较之下，肯定是创建线程所耗费的操作系统资源比较少，但是也不可能无限制的创建很多线程，不然jvm也会出问题！&lt;/p&gt;
&lt;p&gt;　　我随便查了一下，一般的web服务器线程数最大不能超过CPU核数*50，如：8核 &amp;lt; 300，16核 &amp;lt; 800，根据实际情况还可以适当调一下。&lt;/p&gt;
&lt;p&gt;　　记得有句话叫做多个线程之间会竞争CPU资源这句话当初我可是很久都没有理解，这竞争CPU资源到底什么鬼？CPU的资源到底是什么啊？emmmm..&lt;/p&gt;
&lt;p&gt;　　记得以前家里比较穷，没有像现在一样手机电脑这么多，家里只有一个电视！但是有的时候家里人每个人喜欢看的节目都不一样，于是不可避免的相互之间就为了争这个遥控器而发生冲突，哈哈哈！这个时候遥控器就相当于CPU，我们每个人都相当于一个线程要完成自己的事情。但是遥控器就一个，就会相互抢遥控器，有的时候我抢过来遥控器看火影忍者没到一分钟，就被我姐抢去看美食节目，没过一会儿遥控器就被我爸抢去看新闻去了。。。。。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.java中的多线程用法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　java之中用多线程主要是3种方式：类，接口，线程池，接下来我们就随意看一下这三种方式&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;3.1.类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　这种方式主要是继承Thread类，实现run（）方法，run（）方法就是我们所需要做的任务的逻辑代码，然后将这个类实例化调用start（）方法，表示现在这个线程随时可以被CPU调用；&lt;/p&gt;
&lt;p&gt;　　　　我还是以上面玩游戏，烧开水和听歌为例，随意写个小例子：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368608/201904/1368608-20190421211903611-581580521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368608/201904/1368608-20190421212105470-344580203.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　注意：这里先不看GC，前台线程有四个线程，我们创建的三个，还有执行main方法的这个线程（这个也叫主线程），我们只能保证主线程最优先运行，至于这四个线程哪个先停止，随机。。。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;3.2.接口&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　这种方式也差不多，实现Runnable接口，实现其中的run（）方法，然后实例化这个对象并传入Thread类中，再调用start（）方法；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368608/201904/1368608-20190421213241950-1922773622.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368608/201904/1368608-20190421213302964-925409403.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　&lt;span&gt;&lt;strong&gt;3.3.线程池&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　什么是线程池呢？你看看我们上面写的创建线程的方法，都是用的时候就去创建，用完了就销毁，下次又要用就又去创建，这种做法很不好，因为每次创建和销毁线程都是很消耗jvm内部资源的，因为在jvm内部会进行申请空间，分配空间和释放空间各种操作，对jvm的性能会有一定的影响，而且假如某个特殊的情况下每个线程只会运行很短的时间就会结束，那么就会十分频繁的常见和销毁线程，导致在jvm中频繁的申请和释放内存，这极大的影响jvm的运行性能。&lt;/p&gt;
&lt;p&gt;　　但是啊，如果我们能在程序启动的时候，就先创建一定数量的线程放在一个池子里，我们要用的话就去拿，用完了就再放到池子里，这样就很好的避免了创建和销毁线程的过程，这种方式比较友好；其中这个存放线程的池子就叫做线程池，接下来我们随意看看线程池的用法：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368608/201904/1368608-20190421231904909-2055281980.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　顺便一提，利用线程池执行线程任务有两种方式，一种是我们用的pool.execute(xxxx)，另外一种是pool.submit(xxxx),用法和参数都一样，只是用submit（）提交内部还是调用execute（），而且还可以获取线程执行后的返回值，后面我们会分析到的；&lt;/p&gt;
&lt;p&gt; 　　线程池起到一个类似缓冲的作用，它可以对池子中的线程数目进行控制，想想，假如我们程序直接创建线程那可能会由于创建线程太多导致jvm崩溃，但是我们有一个确定容量的池子，我们不用担心这个池子会炸了，我们只需要从池子里拿就好了，至于拿不拿得到的问题后面我们会好好分析的； &lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;3.4.看看Callable接口&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　这个接口干嘛的呢？有了Runnable接口了，还要这个接口干嘛？&lt;/p&gt;
&lt;p&gt;　　不知道有没有注意到那个Runnable接口的run()方法是没有返回值的，也就是说我们只能把任务交给这个线程去做，但是做了之后有没有成功，线程是否异常我们都是不知道的，于是才有了Callable接口，这个接口就是对Runnable接口的一个补充，这个接口的实现类中没有run（）方法，却有一个call（）方法用于执行我们的任务逻辑，而且还能有返回值，并且能抛出异常等&lt;/p&gt;
&lt;p&gt;　　顺便一提，返回值已经被封装成一个Future&amp;lt;T&amp;gt;类型的了，我们只需要从这个Futrue中取到返回值就可以进行后续操作了，有兴趣的可以看看Futrue这个包装类中有哪些方法可以试试，反正我暂时是没什么兴趣的。。。。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368608/201904/1368608-20190422144758971-1844396984.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368608/201904/1368608-20190422144942982-1420913184.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 4.多线程下的jvm内存结构&lt;/p&gt;
&lt;p&gt;　　初学者学多线程其实最迷糊的一点就是多线程的程序中，jvm是什么样的啊？还是向以前那样分吗？到底多线程这个东西在jvm中是怎么样存在的呢？下面我们就来简单看看；&lt;/p&gt;
&lt;p&gt;　　我自己总结的一句话：一个线程一个栈，一个方法一个帧；&lt;/p&gt;
&lt;p&gt;　　这句话的意思就是每创建一个线程就会创建一个栈，每调用一个方法就会在栈中压入一个栈帧；&lt;/p&gt;
&lt;p&gt;　　其实java栈是一个动态的东西，不像我们前面看jvm内存结构就是一大块java栈，里面可以有很多块，一个线程一块，总共合起来叫做java栈，我继续来画一个丑陋的图看一看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368608/201904/1368608-20190422151636988-1388513965.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　其实可以看到在我们java程序中用多线程的话，那么每一个线程都会创建一个栈，同时每个线程都有自己的PC计数器，而且每个栈都是该线程私有的，别的线程不能访问；&lt;strong&gt;&lt;span&gt;但是在java堆和方法区中的数据，是所有线程共享的&lt;/span&gt;&lt;/strong&gt;，由于所有的线程都能够使用共享区的数据，假设一个线程拿到堆中的一个A对象进行修改但是需要的时间比较长，此时另一个线程也要拿到A对象进行判断然后做一些操作，这个时候就会出问题，因为前一个线程修改的数据还没有同步过来，后面线程拿到的是旧数据，这个问题就是多线程的同步问题，后面我们慢慢分析；&lt;/p&gt;

&lt;p&gt; 5.总结&lt;/p&gt;
&lt;p&gt;　　其实初学者觉得多线程比较难，主要是因为不理解多线程到底是什么？我们可以把多线程代码用这种奇葩的形式看是不是明显多了，其中主线程最开始执行并创建自己的栈和PC计数器，一直到创建其他的三个线程并把分别调用start（）方法的时候，这些线程会随机由CPU执行以及切换线程，并且各个线程都会创建自己的栈和PC计数器；而堆和方法区的数据是共享的，这会导致出现线程同步问题；&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;&lt;strong&gt;　&lt;span&gt;注意：千万不要觉得主线程比其他创建的线程要特殊，除了我们程序是由主线程开始之外，这些线程都是出于同一地位，很有可能首先是主线程执行完毕，然后再执行1、2、3这三个线程哦~~&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368608/201904/1368608-20190422154250407-1868558393.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 22 Apr 2019 07:55:00 +0000</pubDate>
<dc:creator>java小新人</dc:creator>
<og:description>我记得最开始接触多进程，多线程这一块的时候我不是怎么理解，为什么要有多线程啊？多线程到底是个什么鬼啊？我一个程序好好的就可以运行为什么要用到多线程啊？反正我是十分费解，即使过了很长时间我还是不是很懂，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wyq1995/p/10742713.html</dc:identifier>
</item>
<item>
<title>面向对象的程序设计-电梯调度系统的设计、优化与测试 - BXYMartin</title>
<link>http://www.cnblogs.com/bxymartin/p/oo_unit_two.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bxymartin/p/oo_unit_two.html</guid>
<description>&lt;h2&gt;&lt;strong&gt;I  对问题的初体验&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;在开始OO之旅前，对OO电梯早有耳闻。这一次终于轮到我自己实现OO电梯了。首先从顶层需求出发对电梯系统进行分析，对象包括电梯、任务和乘客。对于乘客而言，因为一个乘客由ID标识且仅会在一个生命周期中产生一个请求，因而可以和任务合并一体，作为一个输入线程实现。经过上述简化电梯调度模拟系统最核心的部分就落在了电梯模块和任务调度模块上。在每一次电梯作业的更迭里，慢慢寻找工程化和优化之间的微妙平衡。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;II&lt;/strong&gt; 三次的设计思路　　&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;A&lt;/strong&gt; 单电梯 FCFS 调度算法实现&lt;/h3&gt;
&lt;p&gt;　　可以说这个作业算是电梯系统的开始。其本意可能是让我们分析出这个问题的对象并且实现基本的线程思想。在这个任务中，我将主函数线程和输入轮询线程合并，赋予其初始化与轮询获取输入的功能。对与调度器我认为没有必要使其成为一个独立的线程，而应该让他成为一个共享对象在各个电梯之间共享。这一次的目的选层式的电梯设计，输入输出接口的简化以及连续的正数楼层给了我们充分的思考和准备时间，让我们更合理的设计电梯。在线程的安全性方面，电梯需要访问调度器中的任务队列完成任务的分配，且任务队列还需要接受输入线程的输入请求，因而在&lt;em&gt;每一次操作时都应加锁&lt;/em&gt;。&lt;/p&gt;
&lt;h3&gt;B 单电梯多楼层捎带调度算法实现&lt;/h3&gt;
&lt;p&gt;　　这一次的作业相较上一次，增加了调度算法的复杂度，也增加了地下楼层这一设定。在最开始就要牢记&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt;0层不能停 &lt;/strong&gt;&lt;/span&gt;的事实。对于捎带的实现，我使用一个任务队列存储所有当前上线的任务，并且定义了电梯内部正在执行的计划类。对于电梯内部的计划，包含电梯当前的运行方向，需要停靠的楼层，以及在每一个楼层上下电梯的乘客号。在电梯到达或经过每层时，会向调度器请求捎带任务。调度器负责过滤出可捎带任务，之后加入电梯计划中执行。在测试中发现很多时候因为评测样例喜欢在&lt;span&gt;0秒钟塞入成吨的数据&lt;/span&gt;，使得没有来得及读入的请求不能被很好的捎带。多线程间的协同体现在输入模块读取输入，电梯线程获取相关计划，和第一次作业类似，只需要对任务队列加速保护即可。&lt;/p&gt;
&lt;h3&gt;B+ 单电梯多楼层捎带调度算法优化&lt;/h3&gt;
&lt;p&gt;　　在优化中，我选择在每个任务到达的时候，调度器会首先将未分配的任务按照一定的规则组合成电梯计划，当电器请求时一并交给电梯执行，这样可以保证等待队列的顺序是贪心的最优解，提高算法的效率。但是在实际强测过程中因为时间间隔较短、评测用例较为规律化导致这种算法的效率不算很高，甚至有时会&lt;em&gt;弱于扫描算法&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;　　调度器组合请求的顺序根据一个性能函数来判断贪心最优解：对于每一个电梯计划的可插入位置，计算该电梯计划因为新添加的计划所导致的额外的开销。若某一处加入后的开销最小，且小于任务本身的开销时间，则选择在该位置插入任务。否则，将任务单独作为新的电梯任务插入。&lt;/p&gt;
&lt;p&gt;　　同时，在电梯运行过程中，也会不断查询调度队列寻找可以加入的新计划。新计划需满足：和当前电梯运行方向相同、电梯尚未到达起点楼层且计划间有楼层重叠。&lt;/p&gt;
&lt;p&gt;　　当电梯执行好一个计划后，优先选择调度器队列中距离最长的反向任务执行。（受电梯扫描算法启发）当当前任务执行完毕时，电梯可以偷窥下一个对应的任务的起始楼层是否和当前电梯所在楼层相同，若相同则可以省去一次开门的时间。&lt;/p&gt;
&lt;h3&gt;C 多电梯多楼层捎带调度算法实现&lt;/h3&gt;
&lt;p&gt;　　第三次作业从体量和内容上都比第二次作业增加了不少。其中还最大的不同还属于电梯能够停靠的层数发生变化，且一个请求可能需要多个电梯之间的协作完成。对于这个问题，为了提供一个统一的解决方案，我决定使用一张图来描述整个电梯系统的状况。图中的节点为电梯系统所有可以到达的楼层，楼层间的边则代表可以在两层间运行的电梯。对于一个请求，只需要在图中计算最短路即可得到拆分后的任务队列。&lt;/p&gt;
&lt;p&gt;　　在前两次作业的基础上，电梯类可以说完全沿用了第一次作业的设计。为了适配多电梯协作任务的完成，为计划队列增加待完成计划这个属性。从设计上来讲，我希望在调度队列中的所有任务均是待命状态，这就需要协同任务的后续请求需要在前序任务完成时出现在队列中。这样的设计可以极大地简化调度队列的维护和查询，提高代码简洁度。多线程之间的协同产生于输入线程为调度器提供输入，电梯向调度器请求任务执行。为了保证线程安全性，需要确保共享的调度器中的关键对象——调度队列在读写过程中加锁。&lt;/p&gt;
&lt;h3&gt;C+ 多电梯多楼层捎带调度算法优化&lt;/h3&gt;
&lt;p&gt;　　在完成基础图算法的基础上，开始探寻优化的空间。对于图算法，边权重的设计就值得考虑了。在优化版本中，我考虑为图的边赋予一定意义的数值。具体而言，对于可以直达的边，其时间开销为一次开门时间附加该电梯在两层之间的运行时间。对于不可达的边，其权值为中介可达路径的时间开销总和。此外，还需要额外附加电梯当前位置到任务起始位置的响应时间，以确保局部的贪心算法。这样，在图中运行 Floyd-Warshall 算法获得任意两点间权值最小的路径，即是在当前时刻最优的分配。&lt;/p&gt;
&lt;p&gt;　　值得注意的是，图算法仅能够提供当前多个电梯协同任务的第一段分配。其他分配过程需要根据该任务完成时的电梯状况而定，不应该提前划分。这种优化方式也带来了一些潜在的问题。其中之一就是，不同的任务在不同的时间点可能被分配给不同的电梯来执行，这就要求当电梯在空闲状态是需要以一定的时间间隔检查是否有可以执行的任务来执行，而不能用通知的方式来实现。但是鉴于电梯运行时间较长，所以间隔查询的时间也不需要很长，所以这个过程并不过分消耗CPU时间。&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;Bug&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　明明知道 &lt;span&gt;&lt;strong&gt;LinkedList 线程不安全&lt;/strong&gt;&lt;/span&gt;但是还是鬼使神差的在程序里用了，可能是哪天脑子抽风了写进去的吧...哭晕，又一次错惨了。&lt;/p&gt;

&lt;h2&gt;III 解决方案的评估&lt;/h2&gt;
&lt;h3&gt;A  自动化测试&lt;/h3&gt;
&lt;p&gt;　　这一次，鉴于不同作业要求的电梯输出和功能都略有差别，因而选择搭建一个较为灵活可变的框架实现三次电梯作业的自动化测试。多线程问题错误的出现&lt;strong&gt;不可复现，不便于调试&lt;/strong&gt;，因此选择随机生成测试集，利用测试系统的形式是使用终端脚本运行多个协同的程序并最后检查结果。自动化测试的文件结构如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.
├── README.md
├── start.&lt;/span&gt;&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;
└── test_elevator
    ├── clean.&lt;/span&gt;&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;
    ├── comm.py
    ├── elevator&lt;/span&gt;-input-hw3-&lt;span&gt;1.4&lt;/span&gt;-jar-with-&lt;span&gt;dependencies.jar
    ├── elevator_tester.jar
    ├── gen.py
    ├── test.&lt;/span&gt;&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;
    └── timable&lt;/span&gt;-output-&lt;span&gt;1.0&lt;/span&gt;-raw-jar-with-dependencies.jar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　自动化测试由命令 &lt;span class=&quot;cnblogs_code&quot;&gt;bash start.&lt;span&gt;sh&lt;/span&gt;&lt;/span&gt; 开始，执行目录 &lt;span class=&quot;cnblogs_code&quot;&gt;./test_elevator/test.&lt;span&gt;sh&lt;/span&gt;&lt;/span&gt; 脚本。该脚本负责运行主要的 Java-Shell 交互程序 comm.py，由 gen.py 生成随机数量、随机间隔的请求数据并由 Python 作为桥梁输入给待测试的 Java 电梯程序，捕获输出并交给 elevator_tester.jar 检查结果，最终将运行结果返回给 test.sh 脚本。&lt;/p&gt;
&lt;p&gt;　　为了方便不同参数下的自动测试，start.sh 被设计成可以将一些参数写入文件中作为 cache 的特性。在第一次指定必要参数后，之后的运行不必重复进行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d1583362-d78c-4a05-a03f-eb98735ce78c')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_d1583362-d78c-4a05-a03f-eb98735ce78c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d1583362-d78c-4a05-a03f-eb98735ce78c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d1583362-d78c-4a05-a03f-eb98735ce78c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d1583362-d78c-4a05-a03f-eb98735ce78c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #!/bin/&lt;span&gt;bash
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  &lt;span&gt;if&lt;/span&gt; [ ! -d &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test_elevator&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;      &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Dependency Directory test_elevator Not Found!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;      exit &lt;span&gt;1&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;  &lt;span&gt;if&lt;/span&gt; [ $# -gt &lt;span&gt;0&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;      &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Setting Cached Parameters: Test_Rounds Max_Requests Max_Interval Java_Main_Path Java_Package_Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;  
&lt;span&gt; 9&lt;/span&gt;      &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt; test_elevator/&lt;span&gt;num.cache
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt; [ $# -gt &lt;span&gt;1&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt; test_elevator/&lt;span&gt;request.cache
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;      &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt; [ $# -gt &lt;span&gt;2&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt; test_elevator/&lt;span&gt;interval.cache
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;      &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt; [ $# -gt &lt;span&gt;3&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt; test_elevator/&lt;span&gt;project.cache
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;      &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt; [ $# -gt &lt;span&gt;4&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt; test_elevator/&lt;span&gt;package.cache
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;      &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;  
&lt;span&gt;23&lt;/span&gt;      &lt;span&gt;uname&lt;/span&gt; &amp;gt; test_elevator/&lt;span&gt;system.cache
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;  &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt; [ ! -f &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test_elevator/num.cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Parameters Test_Rounds Unset!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Try Setting Parameters By:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t./start.sh Test_Rounds Max_Requests Max_Interval Java_Main_Path Java_Package_Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;          exit &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;      &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt; [ ! -f &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test_elevator/request.cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Parameters Max_Requests Unset!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Try Setting Parameters By:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t./start.sh Test_Rounds Max_Requests Max_Interval Java_Main_Path Java_Package_Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;          exit &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;      &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt; [ ! -f &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test_elevator/interval.cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Parameters Max_Interval Unset!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Try Setting Parameters By:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t./start.sh Test_Rounds Max_Requests Max_Interval Java_Main_Path Java_Package_Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;          exit &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;      &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt; [ ! -f &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test_elevator/project.cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Parameters Java_Main_Path Unset!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Try Setting Parameters By:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t./start.sh Test_Rounds Max_Requests Max_Interval Java_Main_Path Java_Package_Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;          exit &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;      &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt; [ ! -f &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test_elevator/project.cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Parameters Java_Package_Name Unset!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Try Setting Parameters By:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t./start.sh Test_Rounds Max_Requests Max_Interval Java_Main_Path Java_Package_Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;          exit &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;      &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;      &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Starting Elevator Autotest...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;     cd test_elevator
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;      num=`&lt;span&gt;cat&lt;/span&gt;&lt;span&gt; num.cache`
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;      request=`&lt;span&gt;cat&lt;/span&gt;&lt;span&gt; request.cache`
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;      interval=`&lt;span&gt;cat&lt;/span&gt;&lt;span&gt; interval.cache`
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;      project=`&lt;span&gt;cat&lt;/span&gt;&lt;span&gt; project.cache`
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;      package=`&lt;span&gt;cat&lt;/span&gt;&lt;span&gt; package.cache`
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;      &lt;span&gt;echo&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Current Parameters:\n\tRounds   :\t${num}\n\tRequests :\t${request}\n\tInterval :\t${interval}s\n\tMain     :                     \t\&quot;${project}\&quot;\n\tPackage  :\t${package}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt;      ./test.&lt;span&gt;sh&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;  &lt;span&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;查看 start.sh 代码&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./start.&lt;span&gt;sh&lt;/span&gt; Test_Rounds Max_Requests Max_Interval Java_Main_Path Java_Package_Name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　随机请求的产生程序 gen.py 的实现基于 Python，最重要的是在输出之后一定要清空缓冲区才可以正确的按时间输出给电梯进程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('028778a6-adf4-4fd9-ae6d-df6ec219b6da')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_028778a6-adf4-4fd9-ae6d-df6ec219b6da&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_028778a6-adf4-4fd9-ae6d-df6ec219b6da&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('028778a6-adf4-4fd9-ae6d-df6ec219b6da',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_028778a6-adf4-4fd9-ae6d-df6ec219b6da&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; random
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time, sys
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  &lt;span&gt;def&lt;/span&gt;&lt;span&gt; input_generator(testNum):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;          tests =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;          realNum = random.randint(int(testNum*0.8&lt;span&gt;), testNum)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;          &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(realNum):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                  fromFloor = random.randint(-3, 20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                  &lt;span&gt;while&lt;/span&gt; fromFloor ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                          fromFloor = random.randint(-3, 20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                  toFloor = random.randint(-3, 20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                  &lt;span&gt;while&lt;/span&gt; toFloor == 0 &lt;span&gt;or&lt;/span&gt; fromFloor ==&lt;span&gt; toFloor:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                          toFloor = random.randint(-3, 20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                  &lt;span&gt;if&lt;/span&gt; fromFloor !=&lt;span&gt; toFloor:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                          inputString = str(i+1) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-FROM-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(fromFloor) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-TO-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(toFloor);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                         tests.append(inputString)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;          &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tests
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;  
&lt;span&gt;18&lt;/span&gt;  with open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;interval.cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as file:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;          interval = int(file.readline().strip(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;  
&lt;span&gt;21&lt;/span&gt;  with open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;request.cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as file:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;          total = int(file.readline().strip(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;  
&lt;span&gt;24&lt;/span&gt;  tests =&lt;span&gt; input_generator(total)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;  &lt;span&gt;for&lt;/span&gt; each &lt;span&gt;in&lt;/span&gt;&lt;span&gt; tests:
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;          time.sleep(random.randint(0, 1000 * interval)/1000&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;          &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(each)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;          sys.stdout.flush()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;查看请求生成程序&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　该程序作为一个 Python 子程序在核心交互脚本中调用。这个脚本负责 Java 类的运行，输入输出记录和结果的返回。设计这个程序最复杂的一点就是如何在等待进程结束的过程中判断进程是否超过200秒的运行时间限制。经过查阅资料发现可以使用 os.WNOHANG 参数实现非阻塞的 wait 等待，加上轮询即可实现超时终止服务。具体代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('827eb7d8-ed2d-492f-833f-3d573dc17c7b')&quot; readability=&quot;48.5&quot;&gt;&lt;img id=&quot;code_img_closed_827eb7d8-ed2d-492f-833f-3d573dc17c7b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_827eb7d8-ed2d-492f-833f-3d573dc17c7b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('827eb7d8-ed2d-492f-833f-3d573dc17c7b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_827eb7d8-ed2d-492f-833f-3d573dc17c7b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;92&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;from&lt;/span&gt; subprocess &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Popen, PIPE
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  &lt;span&gt;import&lt;/span&gt;&lt;span&gt; signal
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;import&lt;/span&gt;&lt;span&gt; re
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  
&lt;span&gt; 7&lt;/span&gt;  talkpipe = Popen([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;python&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gen.py&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;      shell=False, stdout=&lt;span&gt;PIPE)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;  with open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;project.cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as file:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;      project = str(file.readline().strip(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  with open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;package.cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as file:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;      package = str(file.readline().strip(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  with open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;run.res&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) as out, open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;run.err&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) as err: &lt;span&gt;#&lt;/span&gt;&lt;span&gt; , open('comp.res',&quot;wb&quot;) as comp, open('comp.err',&quot;wb&quot;) as comperr:&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;      elevator_fast = Popen([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-classpath&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, project + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:elevator-input-hw3-1.4-jar-with-dependencies.jar:timable-output-1.0-raw-jar-with- dependencies.jar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, package], stdin=PIPE, stdout=out, stderr=err, shell=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;  start =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;  &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;      &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;          line =&lt;span&gt; talkpipe.stdout.readline()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;          &lt;span&gt;if&lt;/span&gt;&lt;span&gt; line:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;             elevator_fast.stdin.write(line)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;             elevator_fast.stdin.flush()
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;              with open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;run.check&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ab+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as check:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                  check.write(str.encode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[{:.1f}]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(time.time() -&lt;span&gt; start)))
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                 check.write(line)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;          &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;             elevator_fast.stdin.close()
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;              &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;          with open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;run.tst&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ab+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as test:
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;             test.write(line)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;  &lt;span&gt;except&lt;/span&gt;&lt;span&gt; KeyboardInterrupt:
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;      &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[!] ERROR:\t Terminating...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;     os.kill(talkpipe.pid, signal.SIGTERM)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;      timeout = 200
&lt;span&gt;36&lt;/span&gt;      t_beginning =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;      seconds_passed =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;      &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;          ef = os.wait4(elevator_fast.pid, os.WNOHANG)[2&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;          &lt;span&gt;if&lt;/span&gt; elevator_fast.poll() &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;              &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;          seconds_passed = time.time() -&lt;span&gt; t_beginning
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;          &lt;span&gt;if&lt;/span&gt; timeout &lt;span&gt;and&lt;/span&gt; seconds_passed &amp;gt;&lt;span&gt; timeout:
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;             elevator_fast.terminate()
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;              &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[!] ERROR:\t Elevator Running Timeout!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;              &lt;span&gt;raise&lt;/span&gt; TimeoutError(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Elapsed For &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(timeout) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Seconds&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;          time.sleep(0.1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;      elapsed = time.time() -&lt;span&gt; start
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;  &lt;span&gt;except&lt;/span&gt;&lt;span&gt; ChildProcessError:
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;      &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[!] WARNING:\t Real Time Limit Exceeded!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;     os._exit(0)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;  &lt;span&gt;except&lt;/span&gt;&lt;span&gt; KeyboardInterrupt:
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;      &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[!] ERROR:\t Terminating...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;     os.kill(elevator_fast.pid, signal.SIGTERM)
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;  &lt;span&gt;if&lt;/span&gt; elevator_fast.poll() !=&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;      &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[!] ERROR:\t Error Status On Exit Fast Elevator!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;  with open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;run.res&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as file:
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;      lines =&lt;span&gt; file.readlines()
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;      time_fast = float(re.search(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d+\.?\d*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, lines[-1&lt;span&gt;]).group())
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;  
&lt;span&gt;61&lt;/span&gt;  time_max = 200
&lt;span&gt;62&lt;/span&gt;  time_bse = 10
&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[i] Baseline Refer:\t Base :{0:&amp;gt;7.3f} | Upper:{1:&amp;gt;7.3f}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(time_bse, time_max))
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;  &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[i] Fast Scheduler:\t Total:{0:&amp;gt;7.3f} | CPU  :{1:&amp;gt;7.3f} | Kernel:{2:&amp;gt;7.3f}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(elapsed, ef.ru_utime, ef.ru_stime))
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;  &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[-] Time Ratio:\t {0:&amp;gt;7.3f}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format((time_max)/&lt;span&gt;(time_fast)))
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; 
&lt;span&gt;68&lt;/span&gt;  with open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;summary.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as log:
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;      log.write(str(time_fast) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;  &lt;span&gt;if&lt;/span&gt; (time_fast / time_max) &amp;gt; 1 &lt;span&gt;or&lt;/span&gt; ef.ru_utime+ef.ru_stime &amp;gt;&lt;span&gt; time_bse:
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;      with open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;run.check&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as test:
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;          &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[-] Bad Results:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;          &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt;&lt;span&gt; test.readlines():
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;              &lt;span&gt;print&lt;/span&gt;(line.strip(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;查看核心交互代码&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　在获取到程序输出后，还需要交还运行脚本来比对结果并在终端给予反馈：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #!/bin/&lt;span&gt;bash
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  num=`&lt;span&gt;cat&lt;/span&gt;&lt;span&gt; num.cache`
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  &lt;span&gt;for&lt;/span&gt; ((i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=num;i++&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  &lt;span&gt;do&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;      # current=`&lt;span&gt;date&lt;/span&gt; +%d%H%M%&lt;span&gt;S`
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;      test_file=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;run.tst&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;      result_file=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;run.res&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;      error_file=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;run.err&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;      catch1=$(&lt;span&gt;rm&lt;/span&gt; run.*&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;      # catch2=$(&lt;span&gt;rm&lt;/span&gt; comp.*&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;     python comm.py
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;      &lt;span&gt;cat&lt;/span&gt; $test_file &amp;gt;&amp;gt;&lt;span&gt; run.txt
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;      &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;END&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; run.txt
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;      &lt;span&gt;cat&lt;/span&gt; $result_file &amp;gt;&amp;gt;&lt;span&gt; run.txt
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;      &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;END&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; run.txt
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;      java_start_test=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java -jar elevator_tester.jar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;      success=$(&lt;span&gt;cat&lt;/span&gt; run.txt |&lt;span&gt; $java_start_test)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt; [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Success!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ];
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;      &lt;span&gt;then&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[*] SUCCESS:\t $i/$num&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;      &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[!] ERROR:\t Fast Scheduler Failure!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;         break
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;      &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;  &lt;span&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样就可以保证在程序运行出现问题时将后续的测试停止，保留错误的输入结果供检查。&lt;/p&gt;
&lt;p&gt;　　完整的工程可以参考 Github 仓库  &lt;span class=&quot;cnblogs_code&quot;&gt;https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/BXYMartin/Java-Elevator/tree/test_multi&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;h3&gt;B 度量评估&lt;/h3&gt;
&lt;h4&gt;a 类图绘制&lt;/h4&gt;
&lt;p&gt;　　这一次还是着重分析最后一次作业，基于 UML 度量工具进行类图的绘制：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1616168/201904/1616168-20190420114306707-1823990743.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从类图可以看出，这一次作业的体量和代码规模相较上一次的多项式作业有了显著的提升，尤其是多个对象共同享有的 Scheduler 调度者以及在多个电梯之间协同的 Plan、Route 类路径规划都是需要非常精心的构造和设计。我这种设计的优点在于，共享对象少，实现逻辑简单，代码出错的概率较低。但是同时也带来的缺点就是封锁粒度太大，某些时候将不得不采用轮询的方式为空闲的电梯分配最佳的任务，算是这种设计的缺陷吧。&lt;/p&gt;
&lt;h4&gt;b 经典度量分析&lt;/h4&gt;
&lt;p&gt;　　接下来分析经典的 OO 度量，分析 CK 度量组，基于类设计的六种度量：　　&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1616168/201904/1616168-20190420203356583-834493525.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看出，各个类的内聚程度较高，对象间的耦合度较低。部分类由于功能极为有限，仅仅用于输入输出，因而类的响应值较低，类内部的有权方法也较低。对于路径规划和电梯运行的类，对象的响应值和耦合程度都相对比较高。&lt;/p&gt;
&lt;p&gt;　　之后来分析类内部的复杂度： &lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1616168/201904/1616168-20190420204154025-1363945079.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　其中 Path 和 SmartElevator 类的平均类间、类内复杂度都较高，对其中的方法着重分析：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1616168/201904/1616168-20190420205039010-1521652619.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上表中省略了值较低或辅助功能的函数，仅保留复杂度较高的方法。着重分析复杂度，电梯的运行函数因为没有拆分成几个独立的阶段，所以内部复杂度较高，而对于调度器的分配函数，也有较高的方法间复杂度。再就是图中的规划路径函数具有较高的循环复杂度，也在情理之中。&lt;/p&gt;
&lt;p&gt;　　接下来对类与方法的代码规模进行统计：　　&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1616168/201904/1616168-20190421194948489-1253306071.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到对于核心的路径规划类，类代码规模和属性个数都比较多，对于其他功能简单的类而言则并不复杂。&lt;/p&gt;
&lt;p&gt;　　将上述数字可视化可以得到更直观的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1616168/201904/1616168-20190421235705570-369226956.png&quot; alt=&quot;&quot; width=&quot;1210&quot; height=&quot;508&quot;/&gt; &lt;/p&gt;
&lt;p&gt;　　对于电梯类其核心的 run 方法是代码量最大的，应该考虑将其划分为几个功能较为分散的小函数执行，提升扩展性。仅次于电梯运行函数的就是关于图的计算函数等，这些函数的复杂性因其功能的专一性而变得很高，个人感觉也较为合理。代码评价工具在分析函数名的过程中存在错误，已在 Github 提交 Pull Request 并在 master 的最新版本中修复。&lt;/p&gt;
&lt;h4&gt;c 线程协作图&lt;/h4&gt;
&lt;p&gt;　　绘制线程间的协作图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1616168/201904/1616168-20190421202615760-828481566.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到，各个模块之间的协作逻辑较为简单，Passenger 负责接受由标准输入读入的数据，经过 Plan 模块和 Elevator 模块的处理后输出结果。&lt;/p&gt;
&lt;h4&gt; d 设计原则检查&lt;/h4&gt;
&lt;p&gt;　　基于 &lt;strong&gt;S.O.L.I.D.&lt;/strong&gt; 原则&lt;strong&gt;（&lt;/strong&gt;SRP 单一责任原则、OCP 开放封闭原则、LSP 里氏替换原则、ISP 接口分离原则、DIP 依赖倒置原则）进行评估：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　1）SRP 原则：&lt;/strong&gt;每一个类都各司其职。在程序设计中，电梯只负责简单的运送，规划模块负责路线规划，调度部分负责任务调度，最大化的分割了任务，做到了SRP 原则。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;2) OCP 原则：&lt;/strong&gt;在这一次作业中，电梯模块从始至终都没有发生重构，可以说最大程度的满足了 OCP 原则。但是对于任务规划类而言，则不可避免的进行了多次重构，但是也通过模块化的手段尽可能简化了重构流程。&lt;/p&gt;
&lt;p&gt;　　3) LSP 原则：在本次作业中不涉及继承&lt;/p&gt;
&lt;p&gt;　　4) ISP 原则：在本次作业中不涉及接口&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;5) DIP 原则&lt;/strong&gt;：在这次作业中我抽象出多个交互类用来将复杂的信息抽象出本质，在不同类之间传递。我抽象了包括电梯计划（Plan），路径规划（Route）以及请求（Request）三类信息传递类用来简化模块和模块之间的耦合。但是对于路径规划类和电梯类，我还是硬编码了电梯的楼层信息，因为电梯和规划之间的实时通信限制了我对他们的抽象，应该维护一个公共的状态类去实现。&lt;/p&gt;

&lt;h2&gt;IV 总结&lt;/h2&gt;
&lt;p&gt;　　这一次电梯作业是一次代码量突飞猛进的增长，多线程的不可复现、不可调试的特性也让我在编码的过程中多加谨慎，遇到问题首先从顶层结构入手思考，而不是盲目调试，大幅度的降低了在修复漏洞阶段的时间，也让我认识到了架构设计对后期减轻返工次数的必要性。对于各种工具的使用也更加得心应手，是一次对自己的历练。&lt;/p&gt;
</description>
<pubDate>Mon, 22 Apr 2019 07:52:00 +0000</pubDate>
<dc:creator>BXYMartin</dc:creator>
<og:description>用 Java 编写的多线程电梯模拟调度程序总结和反思</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bxymartin/p/oo_unit_two.html</dc:identifier>
</item>
<item>
<title>Centos7+nginx+keepalived集群及双主架构案例 - 乐章</title>
<link>http://www.cnblogs.com/zhangxingeng/p/10721083.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangxingeng/p/10721083.html</guid>
<description>&lt;h2&gt;目录简介&lt;/h2&gt;
&lt;p&gt;　　　　一、简介&lt;/p&gt;
&lt;p&gt;　　　　二、部署nginx+keepalived 集群&lt;/p&gt;
&lt;p&gt;　　　　三、部署nginx+keepalived双主架构&lt;/p&gt;
&lt;p&gt;　　　　四、高可用之调用辅助脚本进行资源监控，并根据监控的结果状态实现动态调整&lt;/p&gt;
&lt;h2&gt;一、简介&lt;/h2&gt;
&lt;p&gt;　　&lt;strong&gt;1、用nginx做负载均衡，作为架构的最前端或中间层，随着日益增长的访问量，需要给负载均衡做高可用架构，利用keepalived解决单点风险，一旦 nginx宕机能快速切换到备份服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　2、keepalived原理请参考如下链接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 高可用实现KeepAlived原理简介&quot; href=&quot;https://www.cnblogs.com/zhangxingeng/p/10595058.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/zhangxingeng/p/10595058.html&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;3、nginx+keepalived单主架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190418145857051-1339313025.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;4、nginx+keepalived双主架构案例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190418153913007-1958896800.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;二、部署nginx+keepalived 集群&lt;/h2&gt;
&lt;p&gt;　　&lt;strong&gt;1、环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　注意：本次实验没有部署负载均衡和rs，只是部署keepalived+web，主要是为了实现效果，简化了很多配置&lt;/p&gt;
&lt;p&gt;　　　　1.1、节点部署&lt;/p&gt;

&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;caption&gt;&lt;strong&gt;nginx+keepalived架构，包含单主集群和双主集群&lt;/strong&gt;&lt;/caption&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;节点　&lt;/td&gt;
&lt;td&gt;地址&lt;/td&gt;
&lt;td&gt;服务&lt;/td&gt;
&lt;td&gt;单主实例VI_1&lt;/td&gt;
&lt;td&gt;双主实例VI_1&lt;/td&gt;
&lt;td&gt;双主实例VI_2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;web1&lt;/td&gt;
&lt;td&gt;192.168.216.51&lt;/td&gt;
&lt;td&gt;keepalived+web服务&lt;/td&gt;
&lt;td&gt;MASTER&lt;/td&gt;
&lt;td&gt;MASTER&lt;/td&gt;
&lt;td&gt;BAKCUP&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;web2&lt;/td&gt;
&lt;td&gt;192.168.216.52&lt;/td&gt;
&lt;td&gt;keepalived+web服务&lt;/td&gt;
&lt;td&gt;BACKUP&lt;/td&gt;
&lt;td&gt;BACKUP&lt;/td&gt;
&lt;td&gt;MASTER&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;clent　　&lt;/td&gt;
&lt;td&gt;物理机&lt;/td&gt;
&lt;td&gt;浏览器&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;





&lt;p&gt;　　　　1.2、部署前&lt;/p&gt;
&lt;p&gt; 　　　　　　1.2.1、各节点时间同步，可以是设置ntp或者手动同一时间，且不能超过1s的差距&lt;/p&gt;
&lt;p&gt;　　　　　　 1.2.2、关闭防火墙及selinux&lt;/p&gt;
&lt;p&gt;　　　　　　 1.2.3、节点名称对应ip地址写入hosts文件&lt;/p&gt;
&lt;p&gt;　　　　　　 1.2.4、节点间root可以基于密钥认证的ssh服务完成互相通信（非必需）&lt;/p&gt;
&lt;p&gt;　　　　1.3、keepalived的目录机构&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@web1 keepalived]# rpm -&lt;span&gt;ql keepalived
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; /etc/&lt;span&gt;keepalived
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; /etc/keepalived/&lt;span&gt;keepalived.conf　　　　&lt;span&gt;#主配置文件
&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; /etc/sysconfig/&lt;span&gt;keepalived
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; /usr/bin/&lt;span&gt;genhash
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; /usr/lib/systemd/system/&lt;span&gt;keepalived.service
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; /usr/libexec/&lt;span&gt;keepalived
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; /usr/sbin/&lt;span&gt;keepalived
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/&lt;span&gt;AUTHOR
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/&lt;span&gt;CONTRIBUTORS
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/&lt;span&gt;COPYING
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/&lt;span&gt;ChangeLog
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/&lt;span&gt;NOTE_vrrp_vmac.txt
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/&lt;span&gt;README
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/&lt;span&gt;TODO
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/&lt;span&gt;keepalived.conf.SYNOPSIS
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/&lt;span&gt;samples
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.HTTP_GET.port
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.IPv6
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.SMTP_CHECK
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.SSL_GET
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.fwmark
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.inhibit
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.misc_check
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.misc_check_arg
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.quorum
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.sample
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.status_code
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.track_interface
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.virtual_server_group
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.virtualhost
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.vrrp
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.vrrp.localcheck
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.vrrp.lvs_syncd
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.vrrp.routes
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.vrrp.rules
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.vrrp.scripts
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/&lt;span&gt;keepalived.conf.vrrp.static_ipaddress
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/keepalived.conf.vrrp.&lt;span&gt;sync&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; /usr/share/doc/keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/samples/sample.misccheck.smbcheck.&lt;span&gt;sh&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; /usr/share/&lt;span&gt;man&lt;/span&gt;/man1/genhash.&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.gz
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; /usr/share/&lt;span&gt;man&lt;/span&gt;/man5/keepalived.conf.&lt;span&gt;5&lt;/span&gt;&lt;span&gt;.gz
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; /usr/share/&lt;span&gt;man&lt;/span&gt;/man8/keepalived.&lt;span&gt;8&lt;/span&gt;&lt;span&gt;.gz
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; /usr/share/snmp/mibs/KEEPALIVED-&lt;span&gt;MIB.txt
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; /usr/share/snmp/mibs/VRRP-&lt;span&gt;MIB.txt
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; /usr/share/snmp/mibs/VRRPv3-&lt;span&gt;MIB.txt
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; [root@web1 keepalived]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　　　1.4、软件环境&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@web1 keepalived]# rpm -&lt;span&gt;qa nginx
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; nginx-&lt;span&gt;1.12&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; [root@web1 keepalived]# rpm -&lt;span&gt;qa keepalived
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; keepalived-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;.el7_6.x86_64 
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; [root@web1 keepalived]# &lt;span&gt;cat&lt;/span&gt; /etc/redhat-&lt;span&gt;release 
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; CentOS Linux release &lt;span&gt;7.3&lt;/span&gt;.&lt;span&gt;1611&lt;/span&gt;&lt;span&gt; (Core) 
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; [root@web1 keepalived]# 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　&lt;strong&gt;　2、安装软件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　　　yum install nginx keepalived pcre-devel  -y&lt;/p&gt;
&lt;p&gt;　　　　我这里已经安装了pcre所以具体依赖如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;Dependencies Resolved
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; ====================================================================================================================
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; Package                           Arch                 Version                         Repository             Size
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; ====================================================================================================================
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;Installing:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  keepalived                        x86_64               &lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;-&lt;span&gt;8&lt;/span&gt;.el7_6                   updates               &lt;span&gt;329&lt;/span&gt;&lt;span&gt; k
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; Installing &lt;span&gt;for&lt;/span&gt;&lt;span&gt; dependencies:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;  net-snmp-agent-libs               x86_64               &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;5.7&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;37&lt;/span&gt;.el7                  base                  &lt;span&gt;705&lt;/span&gt;&lt;span&gt; k
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; Updating &lt;span&gt;for&lt;/span&gt;&lt;span&gt; dependencies:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  net-snmp-libs                     x86_64               &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;5.7&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;37&lt;/span&gt;.el7                  base                  &lt;span&gt;749&lt;/span&gt;&lt;span&gt; k
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;Transaction Summary
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; ====================================================================================================================
&lt;span&gt;15&lt;/span&gt; Install  &lt;span&gt;1&lt;/span&gt; Package  (+&lt;span&gt;1&lt;/span&gt;&lt;span&gt; Dependent package)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; Upgrade             ( &lt;span&gt;1&lt;/span&gt; Dependent package)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;Dependencies Resolved
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; =============================================================================================================================================================================================================================================
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; Package                                                              Arch                                            Version                                                         Repository                                        Size
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; =============================================================================================================================================================================================================================================
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;Installing:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  nginx                                                                x86_64                                          &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;1.12&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;.el7                                                  epel                                             &lt;span&gt;530&lt;/span&gt;&lt;span&gt; k
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; Installing &lt;span&gt;for&lt;/span&gt;&lt;span&gt; dependencies:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;  nginx-all-modules                                                    noarch                                          &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;1.12&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;.el7                                                  epel                                              &lt;span&gt;16&lt;/span&gt;&lt;span&gt; k
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  nginx-filesystem                                                     noarch                                          &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;1.12&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;.el7                                                  epel                                              &lt;span&gt;17&lt;/span&gt;&lt;span&gt; k
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  nginx-mod-http-geoip                                                 x86_64                                          &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;1.12&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;.el7                                                  epel                                              &lt;span&gt;23&lt;/span&gt;&lt;span&gt; k
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;  nginx-mod-http-image-filter                                          x86_64                                          &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;1.12&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;.el7                                                  epel                                              &lt;span&gt;26&lt;/span&gt;&lt;span&gt; k
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  nginx-mod-http-&lt;span&gt;perl&lt;/span&gt;                                                  x86_64                                          &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;1.12&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;.el7                                                  epel                                              &lt;span&gt;36&lt;/span&gt;&lt;span&gt; k
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;  nginx-mod-http-xslt-filter                                           x86_64                                          &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;1.12&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;.el7                                                  epel                                              &lt;span&gt;26&lt;/span&gt;&lt;span&gt; k
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;  nginx-mod-mail                                                       x86_64                                          &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;1.12&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;.el7                                                  epel                                              &lt;span&gt;54&lt;/span&gt;&lt;span&gt; k
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;  nginx-mod-stream                                                     x86_64                                          &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;1.12&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;.el7                                                  epel                                              &lt;span&gt;76&lt;/span&gt;&lt;span&gt; k
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; Updating &lt;span&gt;for&lt;/span&gt;&lt;span&gt; dependencies:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;  openssl                                                              x86_64                                          &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;1.0&lt;/span&gt;.2k-&lt;span&gt;16&lt;/span&gt;.el7_6.&lt;span&gt;1&lt;/span&gt;                                             updates                                          &lt;span&gt;493&lt;/span&gt;&lt;span&gt; k
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;  openssl-libs                                                         x86_64                                          &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;1.0&lt;/span&gt;.2k-&lt;span&gt;16&lt;/span&gt;.el7_6.&lt;span&gt;1&lt;/span&gt;                                             updates                                          &lt;span&gt;1.2&lt;/span&gt;&lt;span&gt; M
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;Transaction Summary
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; =============================================================================================================================================================================================================================================
&lt;span&gt;23&lt;/span&gt; Install  &lt;span&gt;1&lt;/span&gt; Package  (+&lt;span&gt;8&lt;/span&gt;&lt;span&gt; Dependent packages)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; Upgrade             ( &lt;span&gt;2&lt;/span&gt; Dependent packages)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　&lt;strong&gt;　3、配置keepalived高可用，修改主配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　3.1、备份配置文件&lt;/p&gt;
&lt;p&gt;　　　　　　两台均备份&lt;/p&gt;
&lt;p&gt;　　　　cp /etc/keepalived/keepalived.conf keepalived.conf.bak&lt;/p&gt;
&lt;p&gt;　　　　3.2、配置keepalived-MASTER&lt;/p&gt;
&lt;p&gt;　　　　　　web1-51&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@web1 keepalived]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; keepalived.conf 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; ! Configuration File &lt;span&gt;for&lt;/span&gt;&lt;span&gt; keepalived
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;global_defs {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#   notification_email {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#     acassen@firewall.loc
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#     failover@firewall.loc
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#     sysadmin@firewall.loc
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#   }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#   notification_email_from Alexandre.Cassen@firewall.loc
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; #   smtp_server &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;200.1&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; #   smtp_connect_timeout &lt;span&gt;30&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#   router_id LVS_DEVEL
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#   vrrp_skip_check_adv_addr
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#   vrrp_strict
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;    vrrp_garp_interval &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;    vrrp_gna_interval &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#VIP1
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;vrrp_instance VI_1 {　　　 &lt;span&gt;#实例名称保持一致
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    state MASTER　　　　　　#主备配置为MASTER----BACKUP
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;&lt;span&gt;    interface ens33　&lt;/span&gt;　　　&lt;span&gt;#查看自己的网卡名称修改为它&lt;/span&gt;　　
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;virtual_router_id &lt;/span&gt;&lt;span&gt;&lt;span&gt;50&lt;/span&gt;　 &lt;span&gt;#vrid 路由标识符，主备保持一致　&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;priority 100　　　　　　#优先级值越大越高&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     advert_int &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    authentication {　　　　&lt;span&gt;#认证，默认即可，主备保持一致
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        auth_type PASS
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         auth_pass &lt;span&gt;1111&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    virtual_ipaddress {　　&lt;span&gt;#vip，主备一致，可以为多vip
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　把配置文件发送到52节点&lt;/p&gt;
&lt;p&gt;　　　　scp /etc/keepalived/keppalived.conf 192.168.216.52:/etc/keepalived/keepalived.conf&lt;/p&gt;

&lt;p&gt;　　　　web2-52&lt;/p&gt;
&lt;p&gt;　　　　　　只需要修改&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;state BACKUP 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; priority &lt;span&gt;90&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;　　&lt;strong&gt;4、配置nginx&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　web1&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@web1 keepalived]# &lt;span&gt;cat&lt;/span&gt; /usr/share/nginx/html/&lt;span&gt;index.html 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; this is web1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　web2&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@web2 keepalived]# &lt;span&gt;cat&lt;/span&gt; /usr/share/nginx/html/index.html &lt;br/&gt;2 thsi web2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;　5、启动服务并开机自启&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　systemctl start nginx&lt;/p&gt;
&lt;p&gt;　　　　systemctl start keepalived&lt;/p&gt;
&lt;p&gt;　　　　systemctl enable nginx&lt;/p&gt;
&lt;p&gt;　　　　systemctl enable keepalived&lt;/p&gt;

&lt;p&gt;　&lt;strong&gt;　6、测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　6.1、首先访问各站点&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190418155945162-720702069.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　没问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190418160011631-1321883093.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　没问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190418160157100-947662325.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　6.2、VIP也没有问题，在备服务器抓包看看，每1s 宣告一次，状态正常&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@web2 keepalived]# tcpdump -i ens33 host &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.51&lt;/span&gt; 
&lt;span&gt;2&lt;/span&gt; tcpdump: verbose output suppressed, use -v or -vv &lt;span&gt;for&lt;/span&gt;&lt;span&gt; full protocol decode
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; listening on ens33, link-type EN10MB (Ethernet), capture size &lt;span&gt;65535&lt;/span&gt;&lt;span&gt; bytes
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;:&lt;span&gt;58&lt;/span&gt;:&lt;span&gt;22.470521&lt;/span&gt; IP web1 &amp;gt; vrrp.mcast.net: VRRPv2, Advertisement, vrid &lt;span&gt;50&lt;/span&gt;, prio &lt;span&gt;100&lt;/span&gt;, authtype simple, intvl 1s, length &lt;span&gt;20&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;:&lt;span&gt;58&lt;/span&gt;:&lt;span&gt;23.472862&lt;/span&gt; IP web1 &amp;gt; vrrp.mcast.net: VRRPv2, Advertisement, vrid &lt;span&gt;50&lt;/span&gt;, prio &lt;span&gt;100&lt;/span&gt;, authtype simple, intvl 1s, length &lt;span&gt;20&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;:&lt;span&gt;58&lt;/span&gt;:&lt;span&gt;24.473482&lt;/span&gt; IP web1 &amp;gt; vrrp.mcast.net: VRRPv2, Advertisement, vrid &lt;span&gt;50&lt;/span&gt;, prio &lt;span&gt;100&lt;/span&gt;, authtype simple, intvl 1s, length &lt;span&gt;20&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;:&lt;span&gt;58&lt;/span&gt;:&lt;span&gt;25.475482&lt;/span&gt; IP web1 &amp;gt; vrrp.mcast.net: VRRPv2, Advertisement, vrid &lt;span&gt;50&lt;/span&gt;, prio &lt;span&gt;100&lt;/span&gt;, authtype simple, intvl 1s, length &lt;span&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　6.3、现在可以开始stop keepalived，测试主备切换&lt;/p&gt;
&lt;p&gt;　　　　　　[root@web1 keepalived]# systemctl stop keepalived&lt;/p&gt;
&lt;p&gt;　　　　　　刷新页面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190418160722286-1669700348.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　查看web2的ip信息，ifconfig看不到，可以使用ip addr list 命令查询&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;[root@web2 keepalived]# ip ad
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span&gt;65536&lt;/span&gt; qdisc noqueue state UNKNOWN qlen &lt;span&gt;1&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     link/loopback &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; brd &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     inet &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;&lt;span&gt; scope host lo
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     inet6 ::&lt;span&gt;1&lt;/span&gt;/&lt;span&gt;128&lt;/span&gt;&lt;span&gt; scope host 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;: ens33: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span&gt;1500&lt;/span&gt; qdisc pfifo_fast state UP qlen &lt;span&gt;1000&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     link/ether &lt;span&gt;00&lt;/span&gt;:0c:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;75&lt;/span&gt;:de:&lt;span&gt;46&lt;/span&gt;&lt;span&gt; brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     inet &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.52&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt; brd &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.255&lt;/span&gt;&lt;span&gt; scope global ens33
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;    &lt;span&gt; inet 192.168.216.200/32 scope global ens33  &lt;strong&gt; #vip已经漂移过来了
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     inet6 fe80::&lt;span&gt;9416&lt;/span&gt;:80e8:f210:1e24/&lt;span&gt;64&lt;/span&gt;&lt;span&gt; scope link 
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     inet6 fe80::&lt;span&gt;3409&lt;/span&gt;:e73d:1ef:2e1/&lt;span&gt;64&lt;/span&gt;&lt;span&gt; scope link tentative dadfailed 
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;: virbr0: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu &lt;span&gt;1500&lt;/span&gt; qdisc noqueue state DOWN qlen &lt;span&gt;1000&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     link/ether &lt;span&gt;52&lt;/span&gt;:&lt;span&gt;54&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;&lt;span&gt;:a5:7c brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     inet &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;122.1&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt; brd &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;122.255&lt;/span&gt;&lt;span&gt; scope global virbr0
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;: virbr0-nic: &amp;lt;BROADCAST,MULTICAST&amp;gt; mtu &lt;span&gt;1500&lt;/span&gt; qdisc pfifo_fast master virbr0 state DOWN qlen &lt;span&gt;1000&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     link/ether &lt;span&gt;52&lt;/span&gt;:&lt;span&gt;54&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;&lt;span&gt;:a5:7c brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; [root@web2 keepalived]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　[root@web1 keepalived]# systemctl restart keepalived 　刷新网页，发现切换回来了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190418163542818-977410658.jpg&quot; alt=&quot;&quot;/&gt;　&lt;/p&gt;

&lt;p&gt;　　　　6.4、实验环境为虚拟机，演示实验过程中一个问题&lt;/p&gt;
&lt;p&gt;　　　　　　注意：如果是禁用网卡的方式，最好是在虚拟机上断开连接的方式测试。&lt;/p&gt;
&lt;p&gt;　　　　　　因为在测试过程中，systemctl stop network 测试切换的时候出现不能切换，网络没有完全断开backup还能收到master的心跳，但是其他服务已经停用了下面演示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190418164320589-237117442.jpg&quot; alt=&quot;&quot; width=&quot;1355&quot; height=&quot;371&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　访问vip就变成如下状态，没有进行故障切换&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190418164346438-1612982419.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　应该这样测试如下：断开网络连接的方式比较彻底了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190418164445748-343188780.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;三、部署nginx+keepalived双主架构&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;　　1、环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　和上面一个实验一样的环境就是改成双主&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　2、安装软件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　同上&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;3、配置keepalived&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　web1配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@web1 keepalived]# &lt;span&gt;cat&lt;/span&gt; /etc/keepalived/&lt;span&gt;keepalived.conf 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; ! Configuration File &lt;span&gt;for&lt;/span&gt;&lt;span&gt; keepalived
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;global_defs {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#   notification_email {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#     acassen@firewall.loc
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#     failover@firewall.loc
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#     sysadmin@firewall.loc
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#   }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#   notification_email_from Alexandre.Cassen@firewall.loc
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; #   smtp_server &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;200.1&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; #   smtp_connect_timeout &lt;span&gt;30&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#   router_id LVS_DEVEL
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#   vrrp_skip_check_adv_addr
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#   vrrp_strict
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;    vrrp_garp_interval &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;    vrrp_gna_interval &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;#vrrp_script chk_nginx{
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; #       script &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/data/sh/check_nginx.sh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; #       interval &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; #       weight &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;#}
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#VIP1
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;vrrp_instance VI_1 {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    state MASTER
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    interface ens33
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     virtual_router_id &lt;span&gt;50&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     priority &lt;span&gt;100&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     advert_int &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    authentication {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        auth_type PASS
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         auth_pass &lt;span&gt;1111&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    virtual_ipaddress {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;#track_script {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;#       chk_nignx
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;#}
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;#VIP2，新增配置，新增一个实例VI_2
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;vrrp_instance VI_2 {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    state BAKCUP
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    interface ens33
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;virtual_router_id 51&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;priority 90&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;     advert_int &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    authentication {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        auth_type PASS
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         auth_pass &lt;span&gt;1111&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    virtual_ipaddress {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;192.168.216.210&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　web2配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  [root@web2 keepalived]# &lt;span&gt;cat&lt;/span&gt; /etc/keepalived/&lt;span&gt;keepalived.conf 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; ! Configuration File &lt;span&gt;for&lt;/span&gt;&lt;span&gt; keepalived
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;global_defs {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#   notification_email {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#     acassen@firewall.loc
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#     failover@firewall.loc
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#     sysadmin@firewall.loc
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#   }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#   notification_email_from Alexandre.Cassen@firewall.loc
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; #   smtp_server &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;200.1&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; #   smtp_connect_timeout &lt;span&gt;30&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#   router_id LVS_DEVEL
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#   vrrp_skip_check_adv_addr
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#   vrrp_strict
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;    vrrp_garp_interval &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;    vrrp_gna_interval &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;#vrrp_script chk_nginx{
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; #       script &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/data/sh/check_nginx.sh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; #       interval &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; #       weight &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;#}
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#VIP1
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;vrrp_instance VI_1 {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    state BACKUP
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    interface ens33
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     virtual_router_id &lt;span&gt;50&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     priority &lt;span&gt;90&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     advert_int &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    authentication {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        auth_type PASS
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         auth_pass &lt;span&gt;1111&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    virtual_ipaddress {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;#track_script {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;#       chk_nignx
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;#}
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;&lt;span&gt; #VIP2，新增的实例,VI_2
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;vrrp_instance VI_2 {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    state MASTER
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    interface ens33
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;virtual_router_id 51&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;priority 100&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     advert_int &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    authentication {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        auth_type PASS
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         auth_pass &lt;span&gt;1111&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    virtual_ipaddress {
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;192.168.216.210&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　这里附上两台节点的实例比较，请见下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190418175721885-1462316791.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;4、配置nginx,同上&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;5、重启服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　systemctl restart keepalived&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;6、测试验证&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　6.1、首先看一下抓包情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190419095013936-176233698.jpg&quot; alt=&quot;&quot; width=&quot;1625&quot; height=&quot;401&quot;/&gt;　&lt;/p&gt;
&lt;p&gt; 　　　　6.2、测试切换是否正常，这里测试就是以stop keepalived测试效果了&lt;/p&gt;
&lt;p&gt;　　　　　　[root@web1 keepalived]# systemctl stop keepalived   &lt;/p&gt;
&lt;p&gt;　　　　　　效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190419100537737-742624497.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　[root@web1 keepalived]# systemctl restart  keepalived&lt;/p&gt;
&lt;p&gt;　　　　　　切换回来&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190419100610154-541329862.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　在来测试web2&lt;/p&gt;
&lt;p&gt;　　　　[root@web2 keepalived]# systemctl stop keepalived&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190419101502571-1372497321.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　[root@web2 keepalived]# systemctl restart keepalived&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190419101539134-1686030205.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;四、高可用之调用辅助脚本进行资源监控，并根据监控的结果状态实现动态调整&lt;/h2&gt;
&lt;p&gt;　　1、动态调整keepalived&lt;/p&gt;
&lt;p&gt;　　　　检测keepalived主要是用在维护过程中，比如升级，停掉服务是非常不理想的，可以用vrrp脚本，实现不停服务地址来回转换的方法&lt;/p&gt;
&lt;p&gt;　　　　注意：其中定义脚本有两种方法：&lt;/p&gt;
&lt;p&gt;　　　　第一种：脚本放在目录里，配置文件指定脚本路径&lt;/p&gt;
&lt;p&gt;　　　　　　这种模式生效了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;[root@web1 keepalived]# vim keepalived.conf 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; ! Configuration File &lt;span&gt;for&lt;/span&gt;&lt;span&gt; keepalived
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;global_defs {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#   notification_email {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#     acassen@firewall.loc
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#     failover@firewall.loc
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#     sysadmin@firewall.loc
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#   }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#   notification_email_from Alexandre.Cassen@firewall.loc
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; #   smtp_server &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;200.1&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; #   smtp_connect_timeout &lt;span&gt;30&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;   router_id LVS_DEVEL
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#   vrrp_skip_check_adv_addr
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#   vrrp_strict
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; #   vrrp_garp_interval &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; #   vrrp_gna_interval &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;20 vrrp_script chk_maintanance {
21 
22         script &quot;/etc/keepalived/chkdown.sh&quot;　　#脚本路径
23         interval 1　　　　#间隔1s执行一次
24         weight -20　　　　#失败的权重减20&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#VIP1
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;vrrp_instance VI_1 {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    state MASTER
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    interface ens33
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     virtual_router_id &lt;span&gt;50&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     priority &lt;span&gt;100&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     advert_int &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    authentication {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        auth_type PASS
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         auth_pass &lt;span&gt;1111&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    virtual_ipaddress {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41     track_script {
42         chk_maintanance
43     }
44 }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;#VIP2
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;vrrp_instance VI_2 {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    state BAKCUP
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    interface ens33
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     virtual_router_id &lt;span&gt;51&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;     priority &lt;span&gt;90&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;     advert_int &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    authentication {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        auth_type PASS
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         auth_pass &lt;span&gt;1111&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    virtual_ipaddress {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.210&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;59     track_script {
60        chk_maintanance
61     }
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　脚本如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@web1 keepalived]# &lt;span&gt;cat&lt;/span&gt; chkdown.&lt;span&gt;sh&lt;/span&gt; 
&lt;span&gt;2&lt;/span&gt; #!/bin/&lt;span&gt;bash
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; [[ -f /etc/keepalived/down ]]&amp;amp;&amp;amp;exit &lt;span&gt;1&lt;/span&gt; || exit &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; [root@web1 keepalived]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; /etc/&lt;span&gt;keepalived
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; [root@web1 keepalived]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　验证：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;23 [root@web1 keepalived]# touch down&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;[root@web1 keepalived]# systemctl status keepalived
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; ● keepalived.service -&lt;span&gt; LVS and VRRP High Availability Monitor
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;    Loaded: loaded (/usr/lib/systemd/system/&lt;span&gt;keepalived.service; disabled; vendor preset: disabled)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;    Active: active (running) since Mon &lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;22&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;34&lt;/span&gt;&lt;span&gt; CST; 1h 25min ago
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;   Process: &lt;span&gt;40897&lt;/span&gt; ExecStart=/usr/sbin/keepalived $KEEPALIVED_OPTIONS (code=exited, status=&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;SUCCESS)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;  Main PID: &lt;span&gt;40898&lt;/span&gt;&lt;span&gt; (keepalived)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;    CGroup: /system.slice/&lt;span&gt;keepalived.service
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;            ├─&lt;span&gt;40898&lt;/span&gt; /usr/sbin/keepalived -&lt;span&gt;D
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;            ├─&lt;span&gt;40899&lt;/span&gt; /usr/sbin/keepalived -&lt;span&gt;D
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;            └─&lt;span&gt;40900&lt;/span&gt; /usr/sbin/keepalived -&lt;span&gt;D
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;07&lt;/span&gt;:&lt;span&gt;44&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;07&lt;/span&gt;:&lt;span&gt;44&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;07&lt;/span&gt;:&lt;span&gt;49&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;07&lt;/span&gt;:&lt;span&gt;49&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: VRRP_Instance(VI_1) Sending/queueing gratuitous ARPs on ens33 f...&lt;span&gt;6.200&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;07&lt;/span&gt;:&lt;span&gt;49&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;07&lt;/span&gt;:&lt;span&gt;49&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;07&lt;/span&gt;:&lt;span&gt;49&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;07&lt;/span&gt;:&lt;span&gt;49&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;08&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]:&lt;span&gt; /etc/keepalived/chkdown.sh exited with status 1      #改变状态为1，然后降低优先级，这里-l应该可以看到，下面又重新-l看了一下&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;08&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;&lt;span&gt;]: VRRP_Script(chk_maintanance) failed &lt;br/&gt;&lt;span&gt;45&lt;/span&gt; Hint: Some lines were ellipsized, use -l to show &lt;span&gt;in&lt;/span&gt;&lt;span&gt; full.&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;br/&gt;#之后重新收一下测试的状态&lt;/em&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;[root@web1 keepalived]# systemctl status keepalived -l ● keepalived.service - LVS and VRRP High Availability Monitor Loaded: loaded (/usr/lib/systemd/system/keepalived.service; disabled; vendor preset: disabled) Active: active (running) since Mon 2019-04-22 12:43:34 CST; 1h 33min ago Process: 40897 ExecStart=/usr/sbin/keepalived $KEEPALIVED_OPTIONS (code=exited, status=0/SUCCESS) Main PID: 40898 (keepalived) CGroup: /system.slice/keepalived.service ├─40898 /usr/sbin/keepalived -D ├─40899 /usr/sbin/keepalived -D └─40900 /usr/sbin/keepalived -D Apr 22 14:16:29 web1 Keepalived_vrrp[40900]: Sending gratuitous ARP on ens33 for 192.168.216.200 Apr 22 14:16:35 web1 Keepalived_vrrp[40900]: &lt;span&gt;/etc/keepalived/chkdown.sh exited with status 1&lt;/span&gt; Apr 22 14:16:35 web1 Keepalived_vrrp[40900]: VRRP_Script(chk_maintanance) failed Apr 22 14:16:36 web1 Keepalived_vrrp[40900]:&lt;span&gt; VRRP_Instance(VI_2) Changing effective priority from 90 to 70&lt;/span&gt; Apr 22 14:16:36 web1 Keepalived_vrrp[40900]: &lt;span&gt;VRRP_Instance(VI_1) Changing effective priority from 100 to 80&lt;/span&gt; Apr 22 14:16:36 web1 Keepalived_vrrp[40900]: /etc/keepalived/chkdown.sh exited with status 1 Apr 22 14:16:37 web1 Keepalived_vrrp[40900]: VRRP_Instance(VI_1) Received advert with higher priority 90, ours 80 Apr 22 14:16:37 web1 Keepalived_vrrp[40900]:&lt;span&gt; VRRP_Instance(VI_1) Entering BACKUP STATE&lt;/span&gt; Apr 22 14:16:37 web1 Keepalived_vrrp[40900]: VRRP_Instance(VI_1) removing protocol VIPs. Apr 22 14:16:37 web1 Keepalived_vrrp[40900]: /etc/keepalived/chkdown.sh exited with status 1&lt;/span&gt;&lt;span&gt;46 [root@web1 keepalived]# rm -&lt;/span&gt;&lt;span&gt;&lt;span&gt;rf down   &lt;/span&gt; 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　#   删除down文件，重新切换回来         
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;[root@web1 keepalived]# systemctl status keepalived
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; ● keepalived.service -&lt;span&gt; LVS and VRRP High Availability Monitor
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;    Loaded: loaded (/usr/lib/systemd/system/&lt;span&gt;keepalived.service; disabled; vendor preset: disabled)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;    Active: active (running) since Mon &lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;22&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;34&lt;/span&gt;&lt;span&gt; CST; 1h 25min ago
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;   Process: &lt;span&gt;40897&lt;/span&gt; ExecStart=/usr/sbin/keepalived $KEEPALIVED_OPTIONS (code=exited, status=&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;SUCCESS)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;  Main PID: &lt;span&gt;40898&lt;/span&gt;&lt;span&gt; (keepalived)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;    CGroup: /system.slice/&lt;span&gt;keepalived.service
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;            ├─&lt;span&gt;40898&lt;/span&gt; /usr/sbin/keepalived -&lt;span&gt;D
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;            ├─&lt;span&gt;40899&lt;/span&gt; /usr/sbin/keepalived -&lt;span&gt;D
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;            └─&lt;span&gt;40900&lt;/span&gt; /usr/sbin/keepalived -&lt;span&gt;D
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt;:&lt;span&gt;15&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: /etc/keepalived/chkdown.&lt;span&gt;sh&lt;/span&gt; exited with status &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: /etc/keepalived/chkdown.&lt;span&gt;sh&lt;/span&gt; exited with status &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt;:&lt;span&gt;17&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: /etc/keepalived/chkdown.&lt;span&gt;sh&lt;/span&gt; exited with status &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt;:&lt;span&gt;18&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: /etc/keepalived/chkdown.&lt;span&gt;sh&lt;/span&gt; exited with status &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: /etc/keepalived/chkdown.&lt;span&gt;sh&lt;/span&gt; exited with status &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt;:&lt;span&gt;20&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: /etc/keepalived/chkdown.&lt;span&gt;sh&lt;/span&gt; exited with status &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt;:&lt;span&gt;21&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;&lt;span&gt;]: VRRP_Script(chk_maintanance) succeeded　　　　　　　　　　&lt;span&gt;#检查成功，改变优先级，切换vi_1的实例为master
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: VRRP_Instance(VI_1) Changing effective priority from &lt;span&gt;80&lt;/span&gt; to &lt;span&gt;100&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;]: VRRP_Instance(VI_2) Changing effective priority from &lt;span&gt;70&lt;/span&gt; to &lt;span&gt;90&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;40900&lt;/span&gt;&lt;span&gt;]: VRRP_Instance(VI_1) forcing a new MASTER election
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; [root@web1 keepalived]# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;　　　　切换的时候可以观察前端切换的效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190422141605596-478024785.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190422142147387-1579138069.jpg&quot; alt=&quot;&quot; width=&quot;724&quot; height=&quot;314&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　　　第二种方法就是是直接写脚本，这里keepalived版本是keepalived-1.3.5-8.el7_6.x86_64，没有生效，具体不清楚为什么。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;[root@web2 keepalived]# vim keepalived.conf 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;         script &lt;span&gt;&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; ! Configuration File &lt;span&gt;for&lt;/span&gt;&lt;span&gt; keepalived
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;global_defs {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#   notification_email {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#     acassen@firewall.loc
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#     failover@firewall.loc
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#     sysadmin@firewall.loc
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#   }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#   notification_email_from Alexandre.Cassen@firewall.loc
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; #   smtp_server &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;200.1&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; #   smtp_connect_timeout &lt;span&gt;30&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;   router_id LVS_DEVEL1
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#   vrrp_skip_check_adv_addr
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;#   vrrp_strict
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;  #  vrrp_garp_interval &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;   # vrrp_gna_interval &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;21 vrrp_script chk_maintanance {
22         script &quot;[[ -f /etc/keepalived/down ]]&amp;amp;&amp;amp;exit 1 || exit 0&quot;
23         interval 1
24         weight -20
25 }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;#VIP1
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;vrrp_instance VI_1 {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    state BACKUP
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    interface ens33
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     virtual_router_id &lt;span&gt;50&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     priority &lt;span&gt;90&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     advert_int &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    authentication {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        auth_type PASS
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         auth_pass &lt;span&gt;1111&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    virtual_ipaddress {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43     track_script {
44         chk_maintanance
45     }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;#VIP2
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;vrrp_instance VI_2 {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    state MASTER
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    interface ens33
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     virtual_router_id &lt;span&gt;51&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;     priority &lt;span&gt;100&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;     advert_int &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    authentication {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;        auth_type PASS
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         auth_pass &lt;span&gt;1111&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    virtual_ipaddress {
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.210&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;61     track_script {
62         chk_maintanance
63    }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　2、检测nginx是否存活&lt;/p&gt;
&lt;p&gt; 　　　　配置web1/web2 都添加如下标红代码，并添加脚本&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;[root@web1 keepalived]# vim keepalived.conf 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#     acassen@firewall.loc
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#     failover@firewall.loc
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#     sysadmin@firewall.loc
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#   }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#   notification_email_from Alexandre.Cassen@firewall.loc
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; #   smtp_server &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;200.1&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; #   smtp_connect_timeout &lt;span&gt;30&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;   router_id LVS_DEVEL
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#   vrrp_skip_check_adv_addr
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#   vrrp_strict
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; #   vrrp_garp_interval &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; #   vrrp_gna_interval &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;vrrp_script chk_maintanance {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         script &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/etc/keepalived/chkdown.sh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         interval &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         weight -&lt;span&gt;20&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; vrrp_script chk_nginx {
23         script &quot;/etc/keepalived/chknginx.sh&quot;
24         interval 1
25         weight -20
26 }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;#VIP1
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;vrrp_instance VI_1 {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    state MASTER
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    interface ens33
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     virtual_router_id &lt;span&gt;50&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     priority &lt;span&gt;100&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     advert_int &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    authentication {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        auth_type PASS
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         auth_pass &lt;span&gt;1111&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    virtual_ipaddress {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    track_script {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        chk_maintanance
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;45     track_script {
46         chk_nginx
47     }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;#VIP2
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;vrrp_instance VI_2 {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    state BAKCUP
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    interface ens33
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     virtual_router_id &lt;span&gt;51&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;     priority &lt;span&gt;90&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;     advert_int &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    authentication {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;        auth_type PASS
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         auth_pass &lt;span&gt;1111&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;    virtual_ipaddress {
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.210&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;    track_script {
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;        chk_maintanance
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;66     track_script {
67         chk_nginx
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　脚本&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;[root@web1 keepalived]# ll 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; total &lt;span&gt;16&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; -rwxr-xr-x &lt;span&gt;1&lt;/span&gt; root root   &lt;span&gt;62&lt;/span&gt; Apr &lt;span&gt;19&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;45&lt;/span&gt; chkdown.&lt;span&gt;sh&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; -rwxr-xr-x &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;127&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;50&lt;/span&gt; chknginx.&lt;span&gt;sh&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; -rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;1251&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;59&lt;/span&gt;&lt;span&gt; keepalived.conf
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; -rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;494&lt;/span&gt; Apr &lt;span&gt;19&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt; notify.&lt;span&gt;sh&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; [root@web1 keepalived]# &lt;span&gt;cat&lt;/span&gt; chknginx.&lt;span&gt;sh&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; #!/bin/&lt;span&gt;bash
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#auto check nginx process
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; #&lt;span&gt;20190422&lt;/span&gt;&lt;span&gt; by zxg
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;killall&lt;/span&gt; -&lt;span&gt;0&lt;/span&gt;&lt;span&gt; nginx
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; [[ $? -ne &lt;span&gt;0&lt;/span&gt; ]];&lt;span&gt;then&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        systemctl keepalived stop
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; [root@web1 keepalived]# 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　监测，手动stop nginx&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;[root@web1 keepalived]# systemctl stop nginx
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; [root@web1 keepalived]# systemctl status keepalived -&lt;span&gt;l 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; ● keepalived.service -&lt;span&gt; LVS and VRRP High Availability Monitor
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;    Loaded: loaded (/usr/lib/systemd/system/&lt;span&gt;keepalived.service; disabled; vendor preset: disabled)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;    Active: active (running) since Mon &lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;59&lt;/span&gt;:&lt;span&gt;46&lt;/span&gt;&lt;span&gt; CST; 27min ago
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;   Process: &lt;span&gt;58761&lt;/span&gt; ExecStart=/usr/sbin/keepalived $KEEPALIVED_OPTIONS (code=exited, status=&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;SUCCESS)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  Main PID: &lt;span&gt;58762&lt;/span&gt;&lt;span&gt; (keepalived)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;    CGroup: /system.slice/&lt;span&gt;keepalived.service
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;            ├─&lt;span&gt;58762&lt;/span&gt; /usr/sbin/keepalived -&lt;span&gt;D
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;            ├─&lt;span&gt;58763&lt;/span&gt; /usr/sbin/keepalived -&lt;span&gt;D
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;            └─&lt;span&gt;58764&lt;/span&gt; /usr/sbin/keepalived -&lt;span&gt;D
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;27&lt;/span&gt;:&lt;span&gt;27&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;58764&lt;/span&gt;]: VRRP_Instance(VI_1) Sending/queueing gratuitous ARPs on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;27&lt;/span&gt;:&lt;span&gt;27&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;58764&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;27&lt;/span&gt;:&lt;span&gt;27&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;58764&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;27&lt;/span&gt;:&lt;span&gt;27&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;58764&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;27&lt;/span&gt;:&lt;span&gt;27&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;58764&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;18 Apr 22 15:27:36 web1 Keepalived_vrrp[58764]: /etc/keepalived/chknginx.sh exited with status 1
19 Apr 22 15:27:36 web1 Keepalived_vrrp[58764]: VRRP_Script(chk_nginx) failed
20 Apr 22 15:27:37 web1 Keepalived_vrrp[58764]: VRRP_Instance(VI_1) Changing effective priority from 100 to 80
21 Apr 22 15:27:37 web1 Keepalived_vrrp[58764]: VRRP_Instance(VI_2) Changing effective priority from 90 to 70
22 Apr 22 15:27:37 web1 Keepalived_vrrp[58764]: /etc/keepalived/chknginx.sh exited with status 1&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;[root@web1 keepalived]# systemctl start nginx          
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; [root@web1 keepalived]# systemctl status keepalived -&lt;span&gt;l 
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; ● keepalived.service -&lt;span&gt; LVS and VRRP High Availability Monitor
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;    Loaded: loaded (/usr/lib/systemd/system/&lt;span&gt;keepalived.service; disabled; vendor preset: disabled)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;    Active: active (running) since Mon &lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;22&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;59&lt;/span&gt;:&lt;span&gt;46&lt;/span&gt;&lt;span&gt; CST; 28min ago
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;   Process: &lt;span&gt;58761&lt;/span&gt; ExecStart=/usr/sbin/keepalived $KEEPALIVED_OPTIONS (code=exited, status=&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;SUCCESS)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;  Main PID: &lt;span&gt;58762&lt;/span&gt;&lt;span&gt; (keepalived)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;    CGroup: /system.slice/&lt;span&gt;keepalived.service
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;            ├─&lt;span&gt;58762&lt;/span&gt; /usr/sbin/keepalived -&lt;span&gt;D
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;            ├─&lt;span&gt;58763&lt;/span&gt; /usr/sbin/keepalived -&lt;span&gt;D
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;            └─&lt;span&gt;58764&lt;/span&gt; /usr/sbin/keepalived -&lt;span&gt;D
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37 Apr 22 15:28:12 web1 Keepalived_vrrp[58764]: VRRP_Instance(VI_1) forcing a new MASTER election
38 Apr 22 15:28:13 web1 Keepalived_vrrp[58764]: VRRP_Instance(VI_1) Transition to MASTER STATE
39 Apr 22 15:28:14 web1 Keepalived_vrrp[58764]: VRRP_Instance(VI_1) Entering MASTER STATE
40 Apr 22 15:28:14 web1 Keepalived_vrrp[58764]: VRRP_Instance(VI_1) setting protocol VIPs.
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;28&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;58764&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;28&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;58764&lt;/span&gt;]: VRRP_Instance(VI_1) Sending/queueing gratuitous ARPs on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;28&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;58764&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;28&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;58764&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;28&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;58764&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; Apr &lt;span&gt;22&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;28&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt; web1 Keepalived_vrrp[&lt;span&gt;58764&lt;/span&gt;]: Sending gratuitous ARP on ens33 &lt;span&gt;for&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;216.200&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; [root@web1 keepalived]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　网页效果同上，就是stop nginx时候观察是否切换到web2上&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464965/201904/1464965-20190422154653657-142420951.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;h3&gt;&lt;strong&gt;转载请注明出处：&lt;/strong&gt;&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: Centos7+nginx+keepalived集群及双主架构案例&quot; href=&quot;https://www.cnblogs.com/zhangxingeng/p/10721083.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/zhangxingeng/p/10721083.html&lt;/a&gt; &lt;/h3&gt;

</description>
<pubDate>Mon, 22 Apr 2019 07:49:00 +0000</pubDate>
<dc:creator>乐章</dc:creator>
<og:description>目录简介 一、简介 二、部署nginx+keepalived 集群 三、部署nginx+keepalived双主架构 四、高可用之调用辅助脚本进行资源监控，并根据监控的结果状态实现动态调整 一、简介</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangxingeng/p/10721083.html</dc:identifier>
</item>
<item>
<title>Tomcat 对 HTTP 协议的实现（下） - wskwbog</title>
<link>http://www.cnblogs.com/wskwbog/p/10743851.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wskwbog/p/10743851.html</guid>
<description>&lt;p&gt;在《Tomcat 对 HTTP 协议的实现（上）》一文中，对请求的解析进行了分析，接下来对 Tomcat 生成响应的设计和实现继续分析。本文首发于（微信公众号：&lt;strong&gt;顿悟源码&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;一般 Servlet 生成响应的代码是这样的：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;protected void service(HttpServletRequest req, HttpServletResponse resp) 
      throws ServletException, IOException {
  resp.setContentType(&quot;text/html&quot;);
  resp.setCharacterEncoding(&quot;utf-8&quot;);
  PrintWriter writer = resp.getWriter();
  writer.println(&quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Demo&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&quot;);
  writer.println(&quot;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;Hello World!&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&quot;);
  writer.println(&quot;&amp;lt;/html&amp;gt;&quot;);
  writer.flush();
  writer.close();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;像生成响应头和响应体并写入缓冲区，最后写入通道，这些都由 Tomcat 来做，来看下它是怎么设计的（可右键直接打开图片查看大图）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1424165/201904/1424165-20190419181223136-60755127.jpg&quot; alt=&quot;Tomcat HTTP 请求体解析类图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图大部分类都是相对的，可与请求处理分析中的描述对比理解。重点还是理解 ByteChunk，它内部有一个 byte[] 数组引用，用于输入时，引用的 InternalNioInputBuffer 内的数组，表示一个字节序列的视图；用于输出时，会 new 一个可扩容的数组对象，存储响应体数据。&lt;/p&gt;
&lt;p&gt;以上面的代码为例，分析一下，相关类的方法调用，上面的代码生成的是一种动态内容，会使用 chunked 传输编码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1424165/201904/1424165-20190422140130098-2146750157.jpg&quot; alt=&quot;Tomcat HTTP 写入响应方法调用&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;存储响应体数据&quot;&gt;1. 存储响应体数据&lt;/h2&gt;
&lt;p&gt;调用图中，ByteChunk 调用 append 方法后，为了直观理解，就直接写入了发送缓冲区，真实情况不是这样，只有内部缓冲区满了，或者主动调用 flush、close 才会实际写入和发送，来看下 append 方法的代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public void append( byte src[], int off, int len )
        throws IOException {
  makeSpace( len ); // 扩容，高版本已去掉
  // 写入长度超过最大容量，直接往底层数组写
  // 如果底层数组也超了，会直接往通道写
  if ( optimizedWrite &amp;amp;&amp;amp; len == limit &amp;amp;&amp;amp; end == start 
        &amp;amp;&amp;amp; out != null ) {
      out.realWriteBytes( src, off, len );
      return;
  }
  // 如果 len 小于剩余空间，直接写入
  if( len &amp;lt;= limit - end ) { 
    System.arraycopy( src, off, buff, end, len );
    end+=len;
    return;
  }
  // 否则就循环把长 len 的数据写入下层的缓冲区
  int avail=limit-end;
  System.arraycopy(src, off, buff, end, avail);
  end += avail;
  // 把现有数据写入下层缓冲区
  flushBuffer();
  // 循环写入 len 长的数据
  int remain = len - avail;
  while (remain &amp;gt; (limit - end)) {
    out.realWriteBytes( src, (off + len) - remain, limit - end );
    remain = remain - (limit - end);
  }
  System.arraycopy(src, (off + len) - remain, buff, end, remain);
  end += remain;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;逻辑就是，首先写入自己的缓冲区，满了或不足使用 realWriteBytes 再写入下层的缓冲区中，下层的缓冲区实际就是 NioChannel 中的 WriteBuffer，写入之前首先会把响应头写入 InternalNioInputBuffer 内部的 HeaderBuffer，再提交到 WriteBuffer 中，接着就会调用响应的编码处理器写入响应体，编码处理通常有两种：identity 和 chunked。&lt;/p&gt;
&lt;h2 id=&quot;identity-写入&quot;&gt;2. identity 写入&lt;/h2&gt;
&lt;p&gt;当明确知道要响应资源的大小，比如一个css文件，并且调用了 resp.setContentLength(1) 方法时，就会使用 identity 写入指定长度的内容，核心代码就是 IdentityOutputFilter 的 doWrite 方法，这里不在贴出，唯一值得注意的是，它内部的 buffer 引用是 InternalNioInputBuffer 内部的 SocketOutputBuffer。&lt;/p&gt;
&lt;h2 id=&quot;chunked-写入&quot;&gt;3. chunked 写入&lt;/h2&gt;
&lt;p&gt;当不确定长度时，会使用 chunked 传输编码，跟解析相反，就是要生成请求分析一文中介绍的 chunked 协议传输格式，写入逻辑如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public int doWrite(ByteChunk chunk, Response res)
  throws IOException {
  int result = chunk.getLength();
  if (result &amp;lt;= 0) {
      return 0;
  }
  // 生成 chunk-header
  // 从7开始，是因为chunkLength后面两位已经是\r\n了
  int pos = 7;
  // 比如 489 -&amp;gt; 1e9 -&amp;gt; ['1','e','9'] -&amp;gt; [0x31,0x65,0x39]
  // 生成 chunk-size 编码，将 int 转为16进制字符串的形式
  int current = result;
  while (current &amp;gt; 0) {
    int digit = current % 16;
    current = current / 16;
    chunkLength[pos--] = HexUtils.HEX[digit];
  }
  chunkHeader.setBytes(chunkLength, pos + 1, 9 - pos);
  // 写入 chunk-szie 包含 \r\n
  buffer.doWrite(chunkHeader, res);
  // 写入实际数据 chunk-data
  buffer.doWrite(chunk, res);
  chunkHeader.setBytes(chunkLength, 8, 2);
  // 写入 \r\n
  buffer.doWrite(chunkHeader, res);
  return result;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所有数据块写入完成后，最后再写入一个大小为0的 chunk，格式为 0\r\n\r\n。至此整个写入完毕。&lt;/p&gt;
&lt;h2 id=&quot;阻塞写入通道&quot;&gt;4. 阻塞写入通道&lt;/h2&gt;
&lt;p&gt;上层所有数据的实际写入，最后都是由 InternalNioInputBuffer 的 writeToSocket 方法完成，代码如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;private synchronized int writeToSocket(ByteBuffer bytebuffer, 
             boolean block, boolean flip) throws IOException {
  // 切换为读模式
  if ( flip ) bytebuffer.flip();
  int written = 0;// 写入的字节数
  NioEndpoint.KeyAttachment att = (NioEndpoint.KeyAttachment)
                                  socket.getAttachment(false);
  if ( att == null ) throw new IOException(&quot;Key must be cancelled&quot;);
  long writeTimeout = att.getTimeout();
  Selector selector = null;
  try { // 获取模拟阻塞使用的 Selector
    // 通常是单例的 NioBlockingSelector
    selector = getSelectorPool().get();
  } catch ( IOException ignore ) { }
  try {
    // 阻塞写入
    written = getSelectorPool().write(bytebuffer, socket, selector,
                                  writeTimeout, block,lastWrite);
    do {
      if (socket.flush(true,selector,writeTimeout,lastWrite)) break;
    }while ( true );
  }finally { 
    if ( selector != null ) getSelectorPool().put(selector);
  }
  if ( block ) bytebuffer.clear(); //only clear
  this.total = 0;
  return written;
} &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;模拟阻塞的具体实现，已在 Tomcat 对 NIO 模型实现一文中介绍，这里不再赘述。&lt;/p&gt;
&lt;h2 id=&quot;缓冲区设计&quot;&gt;5. 缓冲区设计&lt;/h2&gt;
&lt;p&gt;缓冲区直接关系到内存使用的大小，还影响着垃圾收集。在整个HTTP处理过程中，总共有以下几种缓冲区：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;NioChannel 中的读写 ByteBuffer&lt;/li&gt;
&lt;li&gt;NioInputBuffer 和 NioOutputBuffer 内部使用的消息头字节数组&lt;/li&gt;
&lt;li&gt;ByteChunk 用于写入响应体时内部使用的字节数组&lt;/li&gt;
&lt;li&gt;解析请求参数时，如果长度过小会使用内部缓存的一个 byte[] 数组，否则新建&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上缓冲区均可重复利用。&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;6. 小结&lt;/h2&gt;
&lt;p&gt;为了更好的理解HTTP的解析，尽可能的使用简洁的代码仿写了这部分功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;源码地址&lt;/strong&gt;：&lt;a href=&quot;https://github.com/tonwu/rxtomcat&quot; class=&quot;uri&quot;&gt;https://github.com/tonwu/rxtomcat&lt;/a&gt; 位于 &lt;strong&gt;rxtomcat-http&lt;/strong&gt; 模块&lt;/p&gt;
</description>
<pubDate>Mon, 22 Apr 2019 07:48:00 +0000</pubDate>
<dc:creator>wskwbog</dc:creator>
<og:description>在《Tomcat 对 HTTP 协议的实现（上）》一文中，对请求的解析进行了分析，接下来对 Tomcat 生成响应的设计和实现继续分析。本文首发于（微信公众号： 顿悟源码 ） 一般 Servlet 生</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wskwbog/p/10743851.html</dc:identifier>
</item>
<item>
<title>mysql优化二之锁机制 - huanglf714</title>
<link>http://www.cnblogs.com/huanglf714/p/10750520.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huanglf714/p/10750520.html</guid>
<description>&lt;h2 id=&quot;mysql优化二之锁机制&quot;&gt;mysql优化二之锁机制&lt;/h2&gt;
&lt;p&gt;mysql提供了锁机制和MVCC机制来保证并发操作的安全性，这里主要讨论锁机制，&lt;br/&gt;MVCC见下篇文章&lt;/p&gt;
&lt;p&gt;mysql的锁按照锁粒度可分为行锁与表锁，按照操作类型划分可读锁和写锁&lt;br/&gt;InnoDB存储引擎支持表锁和行锁，默认锁为行锁，MyIsam只支持表锁&lt;br/&gt;锁粒度越高则并发性越好&lt;/p&gt;
&lt;h3 id=&quot;表锁&quot;&gt;表锁&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;一、操作语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、 show open tables;查看数据库中哪些表加了锁&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433418/201904/1433418-20190422153329626-1123795497.png&quot;/&gt;&lt;br/&gt;in-use为0则表示未加锁&lt;/p&gt;
&lt;p&gt;2、 lock table (table_name) read(write)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433418/201904/1433418-20190422153420192-1503602376.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433418/201904/1433418-20190422153437263-1216736633.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、 unlock tables；解锁&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、 读锁&lt;br/&gt;开了两个mysql客户端，左边客户端中给mytest数据库中的test1表加了读锁&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433418/201904/1433418-20190422153655587-1200094166.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对于被锁住的表执行写操作&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433418/201904/1433418-20190422153711173-450833673.png&quot;/&gt;&lt;br/&gt;左客户端拒绝执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433418/201904/1433418-20190422153815250-733672178.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;右客户端阻塞住&lt;/p&gt;
&lt;p&gt;此时我们解锁&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433418/201904/1433418-20190422153843955-957660609.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到右客户端立即被释放并正确执行操作&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;2、 写锁&lt;br/&gt;给左客户端test1表加上写锁&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;行锁&quot;&gt;行锁&lt;/h3&gt;
&lt;p&gt;因为mysql默认的存储引擎是InnoDB，而InnoDB默认为行锁，我们要测试行锁首先需要把mysql的自动提交关闭&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433418/201904/1433418-20190422153925650-453487059.png&quot;/&gt;&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;行级锁读操作两个客户端互不影响&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;写操作如果操作的不是同一行，也不影响，若操作的是同一行则后一个客户端的请求被阻塞，直到前一个客户端的请求提交&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433418/201904/1433418-20190422153942154-471547845.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;注意点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、 间隙锁&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433418/201904/1433418-20190422153951815-1688123357.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们在左边客户端对id在（0,5]范围内的数据做写操作，但是由于数据表中没有id为4的数据行，按理说右边数据库插入一个id为4的数据行不会被锁住，但是事实表明它被锁住了。这既是mysql的间隙锁机制。因此我们在数据库操作时其实应该避免这种间隙的产生，我们可以在表里设置一个状态位，当要删除某一数据行时，可以选择将该状态位设置为无效而不是真正的删除。&lt;/p&gt;
&lt;p&gt;2、 索引失效&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433418/201904/1433418-20190422154050211-587092378.png&quot;/&gt;&lt;br/&gt;当左客户端在已经减了索引的loc列用int型来查找时，索引失效就会导致整张表被锁住&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行锁变表锁的原因：mysql的行锁是用索引实现的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3、 如何锁住一行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433418/201904/1433418-20190422154101450-736133244.png&quot;/&gt;&lt;br/&gt;&lt;strong&gt;在select语句找出某一行之后加一个for update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1433418/201904/1433418-20190422153236224-569946290.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 22 Apr 2019 07:47:00 +0000</pubDate>
<dc:creator>huanglf714</dc:creator>
<og:description>mysql优化二之锁机制 mysql提供了锁机制和MVCC机制来保证并发操作的安全性，这里主要讨论锁机制， MVCC见下篇文章 mysql的锁按照锁粒度可分为行锁与表锁，按照操作类型划分可读锁和写锁</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huanglf714/p/10750520.html</dc:identifier>
</item>
<item>
<title>基于GPS数据建立隐式马尔可夫模型预测目的地 - yoyoyayababy</title>
<link>http://www.cnblogs.com/yoyoyayababy/p/10750504.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yoyoyayababy/p/10750504.html</guid>
<description>&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Trip destination prediction based on multi-day GPS data&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;&lt;span&gt;——基于GPS数据预测目的地&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;span&gt;论文链接：&lt;a href=&quot;http:/www.zdoubleleaves.cn/paper/Trip%20destination%20prediction%20based%20on%20multi-day%20GP.pdf&quot; target=&quot;_blank&quot;&gt;http://www.zdoubleleaves.cn/paper/Trip%20destination%20prediction%20based%20on%20multi-day%20GP.pdf&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　这是一篇在2019年，由吉林交通大学团队发表在elsevier期刊上的一篇论文。在论文中，他们基于GPS数据，使用不同的方法建立了多个预测目的地的模型，进行对比试验，最终提高了正确率，取得了很好的效果。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;0. 概括&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　基于8周、10人的GPS数据，在隐式马尔可夫模型和习惯预测模型的基础上，作者建立了一个可以预测出行目的地的模型，该模型大大提高了预测的精度。最重要的他们发现，人们出行关于终点的选择不仅依赖于终点和起点的依赖关系，而是在连续多天、多周中出行的&lt;strong&gt;惯性&lt;/strong&gt;。他们对于这一点做了实验，最后证明了惯性，在周末是决定两个相邻的位置是否是终点的最重要因素，在工作日是决定连续多天出行的重要因素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 引言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    第二部分对于相关工作进行了介绍；第三部分介绍了GPS数据的预处理工作和关于终点选择的基本特征；第四部分介绍了这个使用马尔可夫链和基于喜好的pre-trip终点预测模型；第五部分他们介绍了隐式的马尔可夫模型，用于建立during-trip终点预测模型；第六部分对于文章内容做了总结，并进行了展望。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    在引言中提到了两类终点预测模型，pre-trip和during-trip，也就是在旅途前和在旅途中进行重点预测。前者可以用于拥挤位置预测与分析（crowded location forecasting and analyzing），后者可以用于GPS导航，可以自动为用户推荐一些地点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 研究现状&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    Ashbrook and Starner’s study [2]第一次提出使用马尔可夫模型基于GPS数据预测终点；Ashbrook et al.[3]提出了使用隐式的马尔可夫模型预测终点，结果大幅提高了精度。但是这篇文章中的精度并不稳定，从70%~94%都有。作者认为可能是由于没有考虑周末和工作日；Alvarez-Garcia et al.[1]也提出了一种基于隐式的马尔可夫链的预测模型，这个模型考虑进去了更多的特征例如支持点、访问频率等。Huang et al.[4]除了使用gps数据，还考虑了其他的因素例如地理、社会经济信息等，他建立了一Mixed-effects logit模型；还有一些研究者使用贝叶斯推理、使用相邻的道路推理、使用行程的特征推理等等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    根据统计的结果，作者将惯性定义为由以下三个与以往习惯相关的因素：相邻终点之间的惯性，相邻天之间的惯性，以及相邻周之间的惯性（主要是指，比如，每周一都要去超市买菜，每周日都要去教堂做礼拜之类的情景）。他利用这三个因素作为预测模型的三个变量，改善了pre-trip模型，除此之外，他利用支持点（the support points）用于during-trip预测，用于保存和继续调整模型。最后他将时间分为周末和工作日再次训练预测模型。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 数据处理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    数据来源：数据集来自2017年长春10位志愿者提供的连续8周的GPS数据。前六周的数据用于训练，后两周的模型用于测试结果。除此之外，还让10位志愿者填写了调查问卷，用于测试和训练结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    数据处理：首先，根据时间长度、速度、区域范围，对于GPS数据进行筛选；之后，确定经常访问的区域；最后将数据集根据工作日和周末再分开。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    分析区域的访问频率：这是数据处理的一个步骤，作者对于这一部分进行了详细说明。区域的访问频率，作者分为了三类：同一天内、一周内、多周内。对于同一天内的访问频率统计，作者将一天划分成了5个时段进行统计；对于同一周内的访问频率统计，作者将一周划分成工作日和周末两中情况，分别对这两种情况的每一天的相同时段的次数进行统计；对于多周之间的统计，统计不同周的相同星期的相同时间的访问次数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    确定支持点（the support points）：支持点是具有特殊的特征的GPS点，用于GPS数据处理，可以代表某一路线。某一直路线含有一到两个支持点，每条曲路线只有一个支持点。文章中给出了一种求支持点的方法。根据引用的文献[19,20]，由于道路网络中相邻交叉点的距离是500m，所以选择500m作为阈值。在计算直路线的支持点时，如果路线L(m,n)长度小于500米时，选择第(m+n)/2个点作为L(m,n)的支持点，如果长度大于500米，那么选择第m+3个点和第n-3个点作为这段路线的支持点。如果GPS数据点中超过连续四个点的步长小于30，那么说明这是一条曲路线。对于曲路线，选择相对于最后一个点，步长变化最大的一个点作为支持点。Fig.1 和Fig.2给出了两种求支持点路线的示意图。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1613314/201904/1613314-20190422153048595-1925341166.png&quot; alt=&quot;&quot; width=&quot;631&quot; height=&quot;310&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1613314/201904/1613314-20190422153115984-114359939.png&quot; alt=&quot;&quot; width=&quot;878&quot; height=&quot;348&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. pre-trip终点预测&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    通过之前的工作，得到了不同地区的访问频率，这样就可以检验作者上文中定义的惯性——相邻终点之间的惯性，相邻天之间的惯性，以及相邻周之间的惯性。在相邻终点中间的惯性使用马尔可夫链进行调整；在相邻天和相邻周之间的惯性可以用之前得到的不同种类的访问频率表示。基于多项式逻辑模型，对三个习惯相关因素的影响进行定量比较。然后，将通过考虑所有三个因素来预测出行前目的地。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    作者基于马尔可夫链和习惯模型（Habit-based model）完成了pre-trip终点预测。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    马尔可夫链：使用访问频率矩阵，矩阵规模是N*N，N表示该用户访问的终点个数，以及初始状态矩阵，矩阵规模也是N*N。前六周的GPS数据用于调整马尔可夫链，根据初始状态矩阵和在之前得到的访问频率较高的终点矩阵S（具体内容见论文4.1节，这里只是大致说一下）可以得到最终的结果，转移概率矩阵A。然后使用后两周的数据进行测试，工作日和周末的预测正确率是74%和63%，作者推测原因是人们在工作日的出行更具有规律。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    习惯模型：为了提高马尔可夫链的精度，加入用户之前的旅游习惯进行分析，不仅仅只考虑相邻区域之间的转移惯性，加入了相邻天和相邻周之间的惯性作为变量。使用多项式逻辑模型（MNL）完成上述工作。作者在MNL中加入马尔可夫转移概率和一周内、多周内的不同地点的访问频率作为参数进行训练。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.during-trip重点预测&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    为了实现实时的预测，作者使用隐式的马尔可夫模型（HMM）进行训练，根据之前统计的不同地区的访问频率和支持点，设置初始状态和参数，（具体过程见论文5.1节）可以让我们得到GPS数据序列的隐藏状态，也就是实时的终点。根据HMM的估计结果，频繁访问的目的地具有最大的转移概率被确定为下一个目的地。最终结果显示在工作日和周末的重点预测中，正确率分别是91%和85%，相比马尔可夫链模型有了显著的提高，这说明了引入支持点对于正确率有很大的效果。但是想比习惯模型，在工作日的预测正确率却没有显著的提高，作者认为，这说明了在工作日引入支持点和使用惯性进行预测的效果相同。所以，实验证明了，在周末这种经常进行不是很有规律的出行的情况下，引入支持点的效果比使用惯性进行预测的效果更好。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;6. 总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   作者将周末和工作日的数据分开，使用马尔可夫模型、MNL模型对于pre-trip终点预测进行了实现；使用隐式马尔可夫模型对于during-trip终点预测模型进行了实现。最终正确率相比之前的研究取得了很好的效果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   作者说，这篇论文的局限是没有考虑到可能影响出行目的地的因素选择，如交通状况和一些管理策略，如区域拥堵收费。实时交通状况和交通管理政策将是今后研究的重点之一。在除了预测出行目的地外，预测出行路线也非常重要，其中与习惯有关的因素也应该考虑。在未来的研究中，作者将尝试利用收集到的多日目的地选择数据在其他城市，对本文的结果进行验证。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 22 Apr 2019 07:40:00 +0000</pubDate>
<dc:creator>yoyoyayababy</dc:creator>
<og:description>Trip destination prediction based on multi-day GPS data ——基于GPS数据预测目的地 论文链接：http://www.zdoubleleaves</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yoyoyayababy/p/10750504.html</dc:identifier>
</item>
<item>
<title>Cortex-M 实现互斥操作的三种方法 - ba哥</title>
<link>http://www.cnblogs.com/miaoxiong/p/10749438.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/miaoxiong/p/10749438.html</guid>
<description>&lt;p&gt;注：本文仅针对Cortex-M3/4 系列进行讲述。&lt;/p&gt;
&lt;p&gt;在传统的ARM处理器架构中，常使用SWP指令来实现锁的读/写原子操作，但从ARM v6开始，读/写访问在独立的两条总线上进行，SWP指令已无法在此架构下保证读/写访问的原子操作，因此互斥访问指令应运而生。本文结合项目中运用的相关方法，总结Cortex-M芯片常用的互斥访问方法。&lt;/p&gt;


&lt;p&gt;ARM支持的互斥指令对有LDREX/STREX、LDREXB/STREXB 及 LDREXH/STREXH（专有的寄存器加载/存储指令），其分别支持字/字节/半字访问，本节以LDREX/STREX为例.&lt;/p&gt;

&lt;h2&gt;语法格式&lt;/h2&gt;
&lt;p&gt;LDREX{cond} Rt, [Rn {, #offset}]&lt;/p&gt;
&lt;p&gt;STREX{cond} Rd, Rt, [Rn {, #offset}] &lt;/p&gt;
&lt;p&gt;其中&lt;/p&gt;
&lt;p&gt;　cond: 可选状态码-若指令包含此状态码，则只有当APSR寄存器中的状态位满足状态码条件时，指令才会执行&lt;/p&gt;
&lt;p&gt;　Rd: 目的寄存器-指令执行后的返回状态，0执行成功，1执行失败&lt;/p&gt;
&lt;p&gt;　Rt: 待加载/存储的寄存器&lt;/p&gt;
&lt;p&gt;　Rn: 寄存器地址&lt;/p&gt;
&lt;p&gt;　offset: 可选的地址偏移&lt;/p&gt;

&lt;h2&gt;基本要求&lt;/h2&gt;
&lt;p&gt;使用互斥访问指令时，需满足以下基本要求，以防不可预期的结果出现。&lt;/p&gt;
&lt;p&gt;　1. LDREX/STREX必须成对出现&lt;/p&gt;
&lt;p&gt;　2. LDREX/STREX的Rn寄存器地址必须一致，操作的寄存器长度必须一致&lt;/p&gt;
&lt;p&gt;　3. LDREX/STREX之间不得使用PC指针，操作的寄存器不使用SP指针&lt;/p&gt;
&lt;p&gt;　4. LDREX/STREX之间的指令要尽可能的简短，offset需4字节对齐，范围在0～1020之间（不同的厂商设置范围不同） &lt;/p&gt;

&lt;h2&gt;互斥写失败情况&lt;/h2&gt;
&lt;p&gt;在满足基本要求后，互斥写不一定成功，如互斥操作中途遇到以下情况：&lt;/p&gt;
&lt;p&gt;　1. 调用CLREX指令清除互斥状态&lt;/p&gt;
&lt;p&gt;　2. 发生上下午切换（如中断）&lt;/p&gt;
&lt;p&gt;　3. 之前未执行过LDREX&lt;/p&gt;
&lt;p&gt;　4. 总线反馈的互斥错误&lt;/p&gt;

&lt;h2&gt;使用方法&lt;/h2&gt;
&lt;p&gt;以nRF52源码中的 &lt;strong&gt;nrf_atomic_internal_orr()&lt;/strong&gt; 函数为例，该函数实现了&lt;strong&gt;或运算&lt;/strong&gt;的原子操作，其中p_ptr为初始值，value为或运算因子，p_new为运算后的值，&lt;span&gt;函数返回原为子操作之前的p_ptr的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/501870/201904/501870-20190422103754925-1107176051.png&quot; alt=&quot;&quot; width=&quot;587&quot; height=&quot;289&quot;/&gt;&lt;/p&gt;
&lt;p&gt;先简单描述上述各行代码：&lt;/p&gt;
&lt;p&gt;89: r0/r1/r2分别存储的p_ptr/value/p_new的值&lt;/p&gt;
&lt;p&gt;94:将p_ptr地址付给r4&lt;/p&gt;

&lt;p&gt;97:将r4所指向的值赋给r0，r0获得了p_ptr此时的值&lt;/p&gt;
&lt;p&gt;98:对r0存储的值进行或运算，运算值赋给r5&lt;/p&gt;
&lt;p&gt;99:将r5的值存储给r4指向的地址，即更新p_ptr的值，同时将本条指令的执行结果赋给r3&lt;/p&gt;

&lt;p&gt;100/101:判断返回值r3，若不为0，重试 97～99的操作&lt;/p&gt;
&lt;p&gt;103/104/105:将运算值赋给r2指向的值，即得到新值&lt;/p&gt;

&lt;p&gt;&lt;span&gt;代码的关键在97行，需注意的是，当函数执行结束返回时，r0存储函数的返回值，因此此函数的返回值为原子操作之前的p_ptr值，而不是调用此函数时传入的p_ptr值（中途可能有变）&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;以实际场景为例，假若存在两个任务A和B，以及一个共享内存Mem，互斥变量Flag标记Mem是否正在被占用（0:空闲中，1:占用中），要如何实现呢？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;情况1. A/B先后访问Mem，则&lt;/h3&gt;
&lt;p&gt;　　1. A首先调用 &lt;strong&gt;nrf_atomic_internal_orr()&lt;/strong&gt; 函数（Flag=0），尝试原子操作，此时R0=0，执行结束后，由返回值R0可知，Flag成功由0-&amp;gt;1，A占用Mem成功&lt;/p&gt;
&lt;p&gt;　　2. 此时发生任务切换&lt;/p&gt;
&lt;p&gt;　　3. B调用 &lt;strong&gt;nrf_atomic_internal_orr()&lt;/strong&gt; 函数（Flag=1），尝试原子操作，此时R0=1，执行结束后，由返回值R0可知，Flag在置位之前已经是1，B占用Mem失败&lt;/p&gt;
&lt;p&gt;　　&lt;em&gt;注：因为只有A/B先后访问nrf_atomic_internal_orr()函数，因此各自只需要尝试一次原子操作即可成功。&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;情况2.A/B同时访问Mem，A在原子操作过程中被B抢占，则&lt;/h3&gt;
&lt;p&gt;　　1. A首先调用 &lt;strong&gt;nrf_atomic_internal_orr()&lt;/strong&gt; 函数（Flag=0），尝试第一次原子操作，此时R0=0，此时发生任务切换&lt;/p&gt;
&lt;p&gt;　　2. A被抢占，上下文切换退出&lt;/p&gt;
&lt;p&gt;　　3. B调用 &lt;strong&gt;nrf_atomic_internal_orr()&lt;/strong&gt; 函数（Flag=0），尝试第一次原子操作，此时R0=0，执行结束后，由返回值R0可知，Flag成功由0-&amp;gt;1，B占用Mem成功&lt;/p&gt;
&lt;p&gt;　　4. 此时发生任务切换&lt;/p&gt;
&lt;p&gt;　　5. A继续执行第一次原子操作，因在LDREX/STREX之间已发生上下文切换，此次原子操作STREX返回 1，执行失败&lt;/p&gt;
&lt;p&gt;　　6. A继续执行第二次原子操作，注意：此时R0重载，R0=1，执行结束后，由返回值R0可知，Flag在置位之前已经是1，A占用Mem失败&lt;/p&gt;

&lt;p&gt;因此本例中，调用&lt;strong&gt;nrf_atomic_internal_orr() &lt;/strong&gt;执行原子操作后，通过判断函数返回值可知，本次互斥操作是否抢占资源成功。&lt;/p&gt;


&lt;p&gt; 在支持 “locked transfers”或仅有单个总线主机的内存系统中，使用位带操作也可实现信号量操作。要实现互斥访问某个资源，操作过程中需遵循以下几点：&lt;/p&gt;
&lt;p&gt;　1. 系统为每个需互斥访问的任务分配一个位带bit位，&lt;/p&gt;
&lt;p&gt;　2. 任务仅能对自己的bit位进行读-修改-写操作。&lt;/p&gt;
&lt;p&gt;　2. 不能以常规的写方式来直接修改位带区域值，否则可能丢失已锁定的位信息&lt;/p&gt;

&lt;p&gt;具体操作过程直接上图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/501870/201904/501870-20190422130322823-2122583283.png&quot; alt=&quot;&quot; width=&quot;651&quot; height=&quot;485&quot;/&gt;&lt;/p&gt;
&lt;p&gt;优点：可使用C代码直接实现上述互斥访问逻辑。&lt;/p&gt;


&lt;p&gt;最为简单粗暴的互斥访问方法，FreeRTOS的信号量获取/释放操作便采用此方式进入临界区。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/501870/201904/501870-20190422144725806-1209544940.png&quot; alt=&quot;&quot; width=&quot;654&quot; height=&quot;412&quot;/&gt;&lt;/p&gt;

&lt;p&gt;关中断实现起来虽然简单，但也需根据具体场景来选择关总中断还是外设中断，否则可能降低系统的实时性甚至造成数据丢失。&lt;/p&gt;
&lt;p&gt;举例来说，在之前经历的一个项目中，有一款MCU既需要负责USB数据的收发，同时还得处理无线数据的转发，如在处理USB临界区数据时选择关总中断，则可能导致无线数据无法及时处理甚至导致丢包，在该场景下，若选择只关闭USB中断，则MCU依然能够在实现局部互斥操作的同时实时响应优先级更高的事件。&lt;/p&gt;



&lt;p&gt;TI 《Cortex-M3/M4F Instruction Set》&lt;/p&gt;
&lt;p&gt;宋岩 《Cortex -M3 权威指南》&lt;/p&gt;
&lt;p&gt;《The Definitive guild to the ARM Cortex-M3》Second Edition》&lt;/p&gt;
&lt;p&gt;《The Definitive guild to the ARM Cortex-M3 and Cortex-M4 Processors》Third Edition&lt;/p&gt;
</description>
<pubDate>Mon, 22 Apr 2019 07:10:00 +0000</pubDate>
<dc:creator>ba哥</dc:creator>
<og:description>注：本文仅针对Cortex-M3/4 系列进行讲述。 在传统的ARM处理器架构中，常使用SWP指令来实现锁的读/写原子操作，但从ARM v6开始，读/写访问在独立的两条总线上进行，SWP指令已无法在此</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/miaoxiong/p/10749438.html</dc:identifier>
</item>
<item>
<title>算法3：插入排序的套路 - 广州小程</title>
<link>http://www.cnblogs.com/freeself/p/10750210.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/freeself/p/10750210.html</guid>
<description>&lt;p&gt;坚持我之前的说法，学习算法设计关键是要学习算法套路。一些经典排序算法，很好的体现了一些重要的套路，值得想一想。&lt;strong&gt;本文介绍插入排序的算法套路，即重用与增量有序的思想。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://free-picture1.oss-cn-shenzhen.aliyuncs.com/%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/sort.jpeg&quot; alt=&quot;排出高低&quot;/&gt;&lt;/p&gt;
&lt;p&gt;先要注意，排序的结果一般都是升序的，也就是从小到大（与上图相反）。&lt;/p&gt;
&lt;p&gt;插入排序的算法很好理解，形式上，跟排扑克牌一样的操作：一开始，手是空的，然后拿一张牌开始插入排序，每一张新拿的牌都跟手中的牌进行比较，可以从小到大的比较（遇到大的就插在前面），也可以从大到小的比较（遇到小的就插在后面）。&lt;/p&gt;
&lt;p&gt;这个排扑克牌的操作，有两个特点，一个是对于每一张新牌都是一样的处理（重用），另一个是手中的牌始终是有序（增量有序）。类比于这两个特点，插入排序算法体现了两个重要的套路，就是&lt;strong&gt;重用&lt;/strong&gt;跟&lt;strong&gt;增量有序&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重用&lt;/strong&gt;，并不是插入排序算法特有的，很多算法都有这个表现，所以“重用”已经是一种基本的算法套路。&lt;/p&gt;
&lt;p&gt;什么是重用呢？&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;如何把大象装进一个关着门的冰箱？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先把冰箱打开门，再把大象装进去，最后关上门。这是解决办法，而且，把这个视为标准作业。&lt;/p&gt;
&lt;p&gt;那么：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;如何把大象装进一个开着门的冰箱？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决办法是，先把冰箱关上门，然后执行上面的标准作业。&lt;/p&gt;
&lt;p&gt;那么：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;如何把十只大象装进冰箱呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决办法是，找十台冰箱，先把门关上，然后执行标准作业。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;执行标准作业，就是在重用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那插入排序算法中的重用是什么表现呢？就是每一个元素，都跟之前的元素进行相同的比较定位与插入的操作，也就是说，如果把第i个元素的操作想清楚了（比如我把第3个元素怎么操作想清楚就好），那就所有元素的操作都想清楚了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为可以重用，所以思考的复杂度大幅下降。重用也是抽象的重要手段，有助于提取主干。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需要注意，边界并不是算法设计重点考虑的内容，如果不重要甚至可以忽略边界的处理。但是，写程序就要考虑清楚边界。写程序跟设计算法，是两个不同的话题，这个我之前已经介绍过了。&lt;/p&gt;
&lt;p&gt;总的来说，插入排序算法中的第i个元素的排序，是一个标准作业，可以&lt;strong&gt;反复重用&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;小白：如果地上有一支枪，你的敌人过来了，你怎么杀死敌人？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;小程：捡起枪，瞄准射击。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;小白：如果你手上拿着枪，你的敌人过来了，你怎么杀死敌人？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;小程：先把枪扔到地上，然后启用之前的操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上讲的是“重用”的套路，接着讲“增量有序”的套路。&lt;/p&gt;
&lt;p&gt;“增量有序”的表现，有点像清洗的工作，比如每一棵菜都要洗干净再放到锅里、每一个新入职的员工都要接受公司的价值观后才能开展工作，这样保证锅里的菜都是干净的、一起工作的人都是有相同价值观的。&lt;/p&gt;
&lt;p&gt;简单来说，增量有序，就是保证正在扩展的区域一定是有序的。&lt;/p&gt;
&lt;p&gt;插入排序算法中的“增量有序”，可以看下面这个图来表现：&lt;br/&gt;&lt;img src=&quot;https://free-picture1.oss-cn-shenzhen.aliyuncs.com/%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/%E5%A2%9E%E9%87%8F%E6%9C%89%E5%BA%8F.jpg&quot; alt=&quot;增量有序&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个扩展的区域可以是新的数组，也可以在原数组中进行。&lt;/p&gt;
&lt;p&gt;以上是增量有序的设计套路，至此，“重用”与“增量有序”这两个重要的算法套路就介绍完毕了。&lt;/p&gt;
&lt;p&gt;接下来，是小的方面，就是这个标准作业，即&lt;strong&gt;其中一个元素是怎么定位插入&lt;/strong&gt;的问题。在增量有序的情况下，任何一个元素，如何找到合适的位置，一般有三个办法。&lt;/p&gt;
&lt;p&gt;办法一是从高往低地跟有序队列的元素作比较（也就是从右往左地比较），遇到一个更小的值，就插在其后面。&lt;/p&gt;
&lt;p&gt;办法二是从低往高地跟有序队列的元素作比较（也就是从左往右地比较），遇到一个更大的值，就插在其前面。&lt;/p&gt;
&lt;p&gt;办法三是比较的时候，反复二分定位比较，最终定下位置的办法，这个办法可以减小比较的次数，但程序实现的复杂度高一些。&lt;/p&gt;
&lt;p&gt;这三个办法中，一般来说，办法一是最好的选择，一来可以使这个标准作业的思路简单而清晰，二来程序实现也相对便利。&lt;/p&gt;
&lt;p&gt;至此，插入排序的算法套路就介绍完毕了，&lt;strong&gt;简单来说，插入排序，就是，当前已经处理的数组总是有序的，然后就重用插入一个元素的操作，增加一个元素到已处理的数组中，至到所有元素都处理过。而对于插入一个元素，可以从小到大比较（遇大就进前面），也可以从大到小比较（遇小就进后面），也可以二分定位（这个复杂一点，不利于实现），整个算法就设计完了，并不复杂。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下的内容，是程序实现方面，这里做一个简单的演示，你如果想训练程序的编写能力的话，应该自己动手实现。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 多用一个临时数组
void insertsort(int* arr, int size) {
    int* tmparr=(int*)malloc(sizeof(int) * size);
    memcpy(tmparr, arr, size*sizeof(int));
    int count = 0;
    for (int i = 0; i &amp;lt; size; i ++) {
        int j=0;
        for (j = 0; j &amp;lt; count; j ++) {
            if (arr[i]&amp;lt;tmparr[j]) {
                memcpy(tmparr+j+1, tmparr+j, (size-j-1)*sizeof(int));
                tmparr[j]=arr[i];
                break;
            }
        }
        if (j==count) {
            tmparr[j]=arr[i];   
        }
        count ++;
    }
    memcpy(arr, tmparr, size*sizeof(int));
    free(tmparr);
}

// 就地insert
void insertsort2(int* arr, int size) {
    for (int i = 0; i &amp;lt; size; i ++) {
        for (int j = 0; j &amp;lt; i; j ++) {
            if (arr[i] &amp;lt; arr[j]) {
                int t = arr[i];
                memcpy(arr+j+1, arr+j, (i-j)*sizeof(int));
                arr[j]=t;
                break;
            }   
        }   
    }   
}

// 就地insert，另一个思路（办法一）：从右向左比较，边比较边移位，遇到更小的值为止
void insertsort3(int* arr, int size) {
    for (int i = 1; i &amp;lt; size; i ++) {
        int t = arr[i];
        int j = 0;
        for (j = i-1; j &amp;gt;= 0 ; j --) {
            if (arr[j] &amp;lt; t) {
                arr[j+1] = t;
                break;
            }
            else {
                arr[j+1] = arr[j];
            }
        }   
        if (j&amp;lt;0) {
            arr[0] = t;
        }
    }
}

int main(int argc, char *argv[])
{
    int arr[] = {5, 3, 6, 1, 2};
    int size = sizeof arr/sizeof *arr;
    insertsort3(arr, size);
    for (int i = 0; i &amp;lt; size; i ++) {
        printf(&quot;%d, &quot;, arr[i]);
    }
    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;写程序跟设计算法不一样，算法注重套路、主干，并且抽象（忽略不重要的细节），而写程序就要考虑一些细节（比如边界、异常之类）而且还有数据类型、模块化之类的考虑。&lt;/p&gt;
&lt;p&gt;写程序不是本文的重点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结一下，本文介绍了插入排序体现的算法套路，即重用与增量有序的设计思想，另外也介绍了任一元素如何完成插入排序这一标准作业，最后演示了代码实现。&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;https://free-picture1.oss-cn-shenzhen.aliyuncs.com/%E9%80%BB%E8%BE%91%E9%A2%98/%E9%80%BB18.png&quot; alt=&quot;singing&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 22 Apr 2019 07:06:00 +0000</pubDate>
<dc:creator>广州小程</dc:creator>
<og:description>坚持我之前的说法，学习算法设计关键是要学习算法套路。一些经典排序算法，很好的体现了一些重要的套路，值得想一想。 本文介绍插入排序的算法套路，即重用与增量有序的思想。 先要注意，排序的结果一般都是升序的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/freeself/p/10750210.html</dc:identifier>
</item>
<item>
<title>zk分布式任务管理 - Eric.Chen</title>
<link>http://www.cnblogs.com/lc-chenlong/p/10750185.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lc-chenlong/p/10750185.html</guid>
<description>&lt;p&gt;在我们的系统开发过程 中不可避免的会使用到定时任务的功能，而当我们在生产环境部署的服务超过1台时，就需要考虑任务调度的问题，防止两台或多台服务器上执行同一个任务，这个问题今天咱们就用zookeeper来解决。&lt;/p&gt;

&lt;p&gt;Zookeeper的数据存储采用的是结构化存储，结构化存储是没有文件和目录的概念，里边的目录和文件被抽象成了节点（node），zookeeper里可以称为znode。Znode的层次结构如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/340919/201904/340919-20190422142900208-302756983.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;每个子目录项如 NameService 都被称作为 znode(目录节点)，和文件系统一样，我们能够自由的增加、删除znode，在一个znode下增加、删除子znode，唯一的不同在于znode是可以存储数据的。&lt;/p&gt;

&lt;ul readability=&quot;6&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;PERSISTENT-持久化目录节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端与zookeeper断开连接后，该节点依旧存在&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;EPHEMERAL-临时目录节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端与zookeeper断开连接后，该节点被删除&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，zookeeper会通知客户端。基于这种监听，可以实现注册中心、分布式同步等功能。&lt;/p&gt;

&lt;p&gt;使用zookeeper的临时顺序节点，来实现分布式任务的调度功能，每一台服务启动的时候都向zookeepe指定的目录下注册一下临时顺序节点，并把该节点记录的系统里，每一次任务执行的时候，获取所有的有序节点，跟当前系统创爱你的节点对比，如果当前服务创建的节点是所有节点中最小的，则执行任务，否则不执行任务，如下如所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/340919/201904/340919-20190422144122664-1140468358.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、pom引用&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &amp;lt;zookeeper.version&amp;gt;3.4.8&amp;lt;/zookeeper.version&amp;gt;
&amp;lt;curator.version&amp;gt;2.11.1&amp;lt;/curator.version&amp;gt;

&amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.zookeeper&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;zookeeper&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${zookeeper.version}&amp;lt;/version&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;slf4j-log4j12&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;curator-recipes&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${curator.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2、ZkClient类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该类封装了zookeeper的操作类，服务启动的时候回向zk上注册有序临时节点，目录为：/demo1/task/n，例如：/demo1/task/n00000001，/demo1/task/n00000002，创建的节点路径保存到变量：curTaskNodeId&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.blogs.client;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Random;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.ExecutorService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.Executors;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.TimeUnit;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.RetryPolicy;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFramework;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFrameworkFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFrameworkFactory.Builder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.api.ACLProvider;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.recipes.cache.ChildData;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.recipes.cache.TreeCache;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.recipes.cache.TreeCacheListener;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.recipes.locks.InterProcessMutex;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.recipes.locks.InterProcessReadWriteLock;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.state.ConnectionState;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.state.ConnectionStateListener;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.retry.ExponentialBackoffRetry;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.CreateMode;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.ZooDefs;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.data.ACL;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.Data;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
@Data
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ZkClient {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; CuratorFramework client;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TreeCache cache;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录当前服务在zk上创建的nodeId&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; String curTaskNodeId=&quot;&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;private ZookeeperProperties zookeeperProperties;&lt;/span&gt;
    
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ZkClient(){
        init();
    }
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 初始化zookeeper
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; init(){
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始sleep时间 ,毫秒，&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; baseSleepTimeMs=1000&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;最大重试次数&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; maxRetries=3&lt;span&gt;;
            RetryPolicy retryPolicy &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ExponentialBackoffRetry(baseSleepTimeMs,maxRetries);
            Builder builder   &lt;/span&gt;=&lt;span&gt; CuratorFrameworkFactory.builder()
                    .connectString(&lt;/span&gt;&quot;127.0.0.1:2181&quot;&lt;span&gt;).retryPolicy(retryPolicy)
                    .sessionTimeoutMs( &lt;/span&gt;1000) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;会话超时时间，单位为毫秒，默认60000ms,连接断开后，其它客户端还能请到临时节点的时间&lt;/span&gt;
                    .connectionTimeoutMs( 6000)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接创建超时时间，单位为毫秒&lt;/span&gt;
                    .namespace( &quot;demo1&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;zk的根节点
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以下注释的为创建节点的用户名密码
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;builder.authorization(&quot;digest&quot;, &quot;rt:rt&quot;.getBytes(&quot;UTF-8&quot;));&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
             builder.aclProvider(new ACLProvider() {
                 @Override
                 public List&amp;lt;ACL&amp;gt; getDefaultAcl() {
                     return ZooDefs.Ids.CREATOR_ALL_ACL;
                 }

                 @Override
                 public List&amp;lt;ACL&amp;gt; getAclForPath(final String path) {
                     return ZooDefs.Ids.CREATOR_ALL_ACL;
                 }
             });&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
             client &lt;/span&gt;=&lt;span&gt; builder.build();
             client.start();
             
             client.getConnectionStateListenable().addListener(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConnectionStateListener() {
                    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; stateChanged(CuratorFramework client, ConnectionState state) {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (state ==&lt;span&gt; ConnectionState.LOST) {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接丢失&lt;/span&gt;
                            log.info(&quot;lost session with zookeeper&quot;&lt;span&gt;);
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (state ==&lt;span&gt; ConnectionState.CONNECTED) {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接新建&lt;/span&gt;
                            log.info(&quot;connected with zookeeper&quot;&lt;span&gt;);
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (state ==&lt;span&gt; ConnectionState.RECONNECTED) {
                            log.info(&lt;/span&gt;&quot;reconnected with zookeeper&quot;&lt;span&gt;);
                        }
                    }
                });
             System.out.println(&lt;/span&gt;&quot;zk初始化完成&quot;&lt;span&gt;);
             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前服务启动时创建的节点，临时有序节点，用作定时任务的执行&lt;/span&gt;
             curTaskNodeId=createNode(CreateMode.EPHEMERAL_SEQUENTIAL,&quot;/task/n&quot;,&quot;&quot;&lt;span&gt;);
            
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO: handle exception&lt;/span&gt;
&lt;span&gt;            e.printStackTrace();
        }
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; stop() {
        client.close();
    }
    
     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CuratorFramework getClient() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; client;
        }
     &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 创建节点
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; mode       节点类型
         * 1、PERSISTENT 持久化目录节点，存储的数据不会丢失。
         * 2、PERSISTENT_SEQUENTIAL顺序自动编号的持久化目录节点，存储的数据不会丢失
         * 3、EPHEMERAL临时目录节点，一旦创建这个节点的客户端与服务器端口也就是session 超时，这种节点会被自动删除
         *4、EPHEMERAL_SEQUENTIAL临时自动编号节点，一旦创建这个节点的客户端与服务器端口也就是session 超时，这种节点会被自动删除，并且根据当前已近存在的节点数自动加 1，然后返回给客户端已经成功创建的目录节点名。
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; path  节点名称
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; nodeData  节点数据
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String createNode(CreateMode mode, String path , String nodeData) {
            String nodepath&lt;/span&gt;=&quot;&quot;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用creatingParentContainersIfNeeded()之后Curator能够自动递归创建所有所需的父节点&lt;/span&gt;
                nodepath =  client.create().creatingParentsIfNeeded().withMode(mode).forPath(path,nodeData.getBytes(&quot;UTF-8&quot;&lt;span&gt;));
                System.out.println(nodepath);
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                log.error(&lt;/span&gt;&quot;注册出错&quot;&lt;span&gt;, e);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nodepath;
        }
        
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 创建节点
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; mode       节点类型
         *                   1、PERSISTENT 持久化目录节点，存储的数据不会丢失。
         *                   2、PERSISTENT_SEQUENTIAL顺序自动编号的持久化目录节点，存储的数据不会丢失
         *                   3、EPHEMERAL临时目录节点，一旦创建这个节点的客户端与服务器端口也就是session 超时，这种节点会被自动删除
         *                   4、EPHEMERAL_SEQUENTIAL临时自动编号节点，一旦创建这个节点的客户端与服务器端口也就是session 超时，这种节点会被自动删除，并且根据当前已近存在的节点数自动加 1，然后返回给客户端已经成功创建的目录节点名。
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; path  节点名称
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; createNode(CreateMode mode,String path ) {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用creatingParentContainersIfNeeded()之后Curator能够自动递归创建所有所需的父节点&lt;/span&gt;
&lt;span&gt;                client.create().creatingParentsIfNeeded().withMode(mode).forPath(path);
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                log.error(&lt;/span&gt;&quot;注册出错&quot;&lt;span&gt;, e);
            }
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 删除节点数据
         *
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; path
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; deleteNode(&lt;span&gt;final&lt;/span&gt;&lt;span&gt; String path) {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                deleteNode(path,&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex) {
                log.error(&lt;/span&gt;&quot;{}&quot;&lt;span&gt;,ex);
            }
        }


        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 删除节点数据
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; path
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; deleteChildre   是否删除子节点
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; deleteNode(&lt;span&gt;final&lt;/span&gt;&lt;span&gt; String path,Boolean deleteChildre){
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(deleteChildre){
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;guaranteed()删除一个节点，强制保证删除,
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 只要客户端会话有效，那么Curator会在后台持续进行删除操作，直到删除节点成功&lt;/span&gt;
&lt;span&gt;                    client.delete().guaranteed().deletingChildrenIfNeeded().forPath(path);
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                    client.delete().guaranteed().forPath(path);
                }
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                e.printStackTrace();
            }
        }


        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 设置指定节点的数据
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; path
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; datas
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setNodeData(String path, &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] datas){
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                client.setData().forPath(path, datas);
            }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex) {
                log.error(&lt;/span&gt;&quot;{}&quot;&lt;span&gt;,ex);
            }
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 获取指定节点的数据
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; path
         * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
         &lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] getNodeData(String path){
            Byte[] bytes &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(cache != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                    ChildData data &lt;/span&gt;=&lt;span&gt; cache.getCurrentData(path);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(data != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; data.getData();
                    }
                }
                client.getData().forPath(path);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; client.getData().forPath(path);
            }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex) {
                log.error(&lt;/span&gt;&quot;{}&quot;&lt;span&gt;,ex);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 获取数据时先同步
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; path
         * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
         &lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] synNodeData(String path){
            client.sync();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; getNodeData( path);
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 判断路径是否存在
         *
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; path
         * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
         &lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; isExistNode(&lt;span&gt;final&lt;/span&gt;&lt;span&gt; String path) {
            client.sync();
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; !=&lt;span&gt; client.checkExists().forPath(path);
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
        }


        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 获取节点的子节点
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; path
         * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
         &lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt;&lt;span&gt; getChildren(String path) {
            List&lt;/span&gt;&amp;lt;String&amp;gt; childrenList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                childrenList &lt;/span&gt;=&lt;span&gt; client.getChildren().forPath(path);
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                log.error(&lt;/span&gt;&quot;获取子节点出错&quot;&lt;span&gt;, e);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; childrenList;
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 随机读取一个path子路径, &quot;/&quot;为根节点对应该namespace
         * 先从cache中读取，如果没有，再从zookeeper中查询
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; path
         * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;
         * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getRandomData(String path)  {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                Map&lt;/span&gt;&amp;lt;String,ChildData&amp;gt; cacheMap =&lt;span&gt; cache.getCurrentChildren(path);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(cacheMap != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; cacheMap.size() &amp;gt; 0&lt;span&gt;) {
                    log.debug(&lt;/span&gt;&quot;get random value from cache,path=&quot;+&lt;span&gt;path);
                    Collection&lt;/span&gt;&amp;lt;ChildData&amp;gt; values =&lt;span&gt; cacheMap.values();
                    List&lt;/span&gt;&amp;lt;ChildData&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;(values);
                    Random rand &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
                    &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] b =&lt;span&gt; list.get(rand.nextInt(list.size())).getData();
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; String(b,&quot;utf-8&quot;&lt;span&gt;);
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(isExistNode(path)) {
                    log.debug(&lt;/span&gt;&quot;path [{}] is not exists,return null&quot;&lt;span&gt;,path);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    log.debug(&lt;/span&gt;&quot;read random from zookeeper,path=&quot;+&lt;span&gt;path);
                    List&lt;/span&gt;&amp;lt;String&amp;gt; list =&lt;span&gt; client.getChildren().forPath(path);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(list == &lt;span&gt;null&lt;/span&gt; || list.size() == 0&lt;span&gt;) {
                        log.debug(&lt;/span&gt;&quot;path [{}] has no children return null&quot;&lt;span&gt;,path);
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                    }
                    Random rand &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
                    String child &lt;/span&gt;=&lt;span&gt; list.get(rand.nextInt(list.size()));
                    path &lt;/span&gt;= path + &quot;/&quot; +&lt;span&gt; child;
                    &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] b =&lt;span&gt; client.getData().forPath(path);
                    String value &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(b,&quot;utf-8&quot;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
                }
            }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception e){
                log.error(&lt;/span&gt;&quot;{}&quot;&lt;span&gt;,e);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

        }

        

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 获取读写锁
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; path
         * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
         &lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; InterProcessReadWriteLock getReadWriteLock(String path){
            InterProcessReadWriteLock readWriteLock &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InterProcessReadWriteLock(client, path);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; readWriteLock;
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 在注册监听器的时候，如果传入此参数，当事件触发时，逻辑由线程池处理
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        ExecutorService pool &lt;/span&gt;= Executors.newFixedThreadPool(2&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 监听数据节点的变化情况
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; watchPath
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; listener
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; watchPath(String watchPath,TreeCacheListener listener){
         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   NodeCache nodeCache = new NodeCache(client, watchPath, false);&lt;/span&gt;
            TreeCache cache = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TreeCache(client, watchPath);
            cache.getListenable().addListener(listener,pool);
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                cache.start();
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                e.printStackTrace();
            }
        }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3、定时任务调用&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.blogs.client;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.time.LocalDateTime;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.scheduling.annotation.EnableScheduling;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.scheduling.annotation.Scheduled;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;

@Component
@EnableScheduling
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ScheduleTask {
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ZkClient zkClient;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加定时任务&lt;/span&gt;
    @Scheduled(cron = &quot;0/5 * * * * ?&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; configureTasks() {
        System.out.println(&lt;/span&gt;&quot;开始执行任务&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取所有节点&lt;/span&gt;
        List&amp;lt;String&amp;gt; taskNodes=zkClient.getChildren(&quot;/task&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找最小节点&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; minNodeNum=&lt;span&gt;Integer.MAX_VALUE;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; taskNodes.size(); i++&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;节点前面有一个n，把n替换掉，剩下的转换为数字&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; nodeNum=Integer.valueOf(taskNodes.get(i).replace(&quot;n&quot;, &quot;&quot;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(nodeNum &amp;lt;&lt;span&gt; minNodeNum){
                minNodeNum &lt;/span&gt;=&lt;span&gt; nodeNum;
            }
            System.out.println(&lt;/span&gt;&quot;节点：&quot;+&lt;span&gt;taskNodes.get(i));
        }
        System.out.println(&lt;/span&gt;&quot;当前节点：&quot;+&lt;span&gt;zkClient.getCurTaskNodeId());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果最小节点 等于该服务创建的节点，则执行任务&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; curNodeNum=Integer.valueOf(zkClient.getCurTaskNodeId().substring(zkClient.getCurTaskNodeId().lastIndexOf('/') + 2&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(minNodeNum - curNodeNum  == 0&lt;span&gt;){
            System.out.println(&lt;/span&gt;&quot;执行任务&quot;&lt;span&gt;);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            System.out.println(&lt;/span&gt;&quot;不执行任务&quot;&lt;span&gt;);
        }
        
        System.err.println(&lt;/span&gt;&quot;执行静态定时任务时间: &quot; +&lt;span&gt; LocalDateTime.now());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当前服务创建的服务为节点最小的，则执行服务，否则不执行服务&lt;/p&gt;

&lt;p&gt;把服务的端口分别修改为：8080,8081，模拟启动两个服务，查看定时任务的执行情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/340919/201904/340919-20190422145803100-220531240.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/340919/201904/340919-20190422145812606-1195245728.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当把两个服务的任何一个服务关闭，定时任务还可以正常执行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/340919/201904/340919-20190422150150480-569004498.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


</description>
<pubDate>Mon, 22 Apr 2019 07:03:00 +0000</pubDate>
<dc:creator>Eric.Chen</dc:creator>
<og:description>在我们的系统开发过程 中不可避免的会使用到定时任务的功能，而当我们在生产环境部署的服务超过1台时，就需要考虑任务调度的问题，防止两台或多台服务器上执行同一个任务，这个问题今天咱们就用zookeeper</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lc-chenlong/p/10750185.html</dc:identifier>
</item>
</channel>
</rss>