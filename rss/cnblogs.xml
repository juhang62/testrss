<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Django创建和配置文件 - 支楞</title>
<link>http://www.cnblogs.com/wanghaoren/p/10765739.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wanghaoren/p/10765739.html</guid>
<description>&lt;p&gt;首先我们随便找一个文件 shift+鼠标右键 点击打开 Powershell 窗口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1541920/201904/1541920-20190424230404875-49357281.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后输入命令  django-admin startproject 项目名字&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1541920/201904/1541920-20190424230656776-1520107792.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输入cd day   进入这个项目下&lt;/p&gt;
&lt;p&gt;然后在输入命令python manage.py startapp 子组件的名字   建立子组件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1541920/201904/1541920-20190424230923057-1374610942.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们就可以打开这个项目了&lt;/p&gt;
&lt;p&gt;在这里说明一下我个人用的打代码软甲那是Visual Studio Code&lt;/p&gt;
&lt;p&gt;我们打开settings.py文件   配置文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1541920/201904/1541920-20190424231224909-432088147.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这里输入你刚才建立的子组件名字&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1541920/201904/1541920-20190424231403256-726744092.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1541920/201904/1541920-20190424231622498-1137263745.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;template  在项目里建立一个用这个名字命名的文件夹     里面装的是html&lt;/p&gt;
&lt;p&gt;在往下有一个&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1541920/201904/1541920-20190424231807396-2037225232.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个是配置语言的，这个整不整都可以并不影响项目&lt;/p&gt;
&lt;p&gt;在最底下加上这段代码&lt;/p&gt;
&lt;p&gt;STATICFILES_DIRS = [&lt;/p&gt;
&lt;p&gt;　　os.path.join(BASE_DIR, 'static')&lt;/p&gt;
&lt;p&gt;]&lt;/p&gt;
&lt;p&gt; static 建立一个文件夹  里面装你要引用的html配置文件&lt;/p&gt;
&lt;p&gt;在项目中models中建立你要创建的表  Django项目是自带数据库的&lt;/p&gt;

&lt;p&gt;在 Powershell 窗口中输入命令&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
python manage.py migrate 
# 根据数据库迁移文件生成对应SQL语句并执行 # 初次执行是为了先把默认django需要的数据库创建出来 
python manage.py makemigrations 
# 创建数据库迁移文件 # 这次执行是为了创建APP中Weather模型类的迁移文件 
python manage.py migrate  
# 将新添加的模型类迁移文件生成对应SQL并执行，实际创建出对应的Weather表
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这是自动建表  &lt;/p&gt;

</description>
<pubDate>Wed, 24 Apr 2019 15:30:00 +0000</pubDate>
<dc:creator>支楞</dc:creator>
<og:description>首先我们随便找一个文件 shift+鼠标右键 点击打开 Powershell 窗口 然后输入命令 django-admin startproject 项目名字 输入cd day 进入这个项目下 然后在</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wanghaoren/p/10765739.html</dc:identifier>
</item>
<item>
<title>[开源]MasterChief  快速开发辅助类库 - MeetYan</title>
<link>http://www.cnblogs.com/MeetYan/p/10765721.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MeetYan/p/10765721.html</guid>
<description>&lt;blockquote readability=&quot;5.65625&quot;&gt;
&lt;p&gt;C# 开发辅助类库，和士官长一样身经百战且越战越勇的战争机器，能力无人能出其右。&lt;br/&gt;GitHub：&lt;a href=&quot;https://github.com/YanZhiwei/MasterChief&quot;&gt;MasterChief&lt;/a&gt; 欢迎Star，欢迎Issues；&lt;br/&gt;项目架构思维导图：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://9o7amq.dm.files.1drv.com/y4mvdeFkWkSFrsbowcTYmKLg5_xMkv2M9_7S3HwyQp1lmvOWURZQnzQN18sMDcB-sGNRf4ZS-WqImDuOKY_1huI90ubUT8uf1oaFk0ojztU9xjId0pvhTnu0B6DcMD9JdDYVOHEgBoUq3U23QntnItai4eIqrTvtHr5bkwdrQjDqHZKp2FBs0Fuv25LT-z_iSONM8mdzBCeEXzGVl6xsiLLFQ?width=1140&amp;amp;height=510&amp;amp;cropmode=none&quot; alt=&quot;设计&quot;/&gt;&lt;/p&gt;

&lt;h4 id=&quot;数据库访问&quot;&gt;1. 数据库访问&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;a. 支持Dapper和Entity Framework 两种ORM框架;&lt;/p&gt;
&lt;p&gt;b. 通过IOC可以很少代码在Dapper和Entity Framework切换；&lt;/p&gt;
&lt;p&gt;c. 实现Repository和UnitOfWork；&lt;/p&gt;
&lt;p&gt;d. CURD以及事务实现简单，很大程度关注业务实现即可；&lt;/p&gt;
&lt;p&gt;代码使用说明：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Create 添加&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public bool Create(EFSample samle)
{
    using (IDbContext dbcontext = _contextFactory.Create())
    {
        return dbcontext.Create&amp;lt;EFSample&amp;gt;(samle);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;Delete 删除&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public bool Delete(EFSample sample)
{
    using (IDbContext dbcontext = _contextFactory.Create())
    {
        return dbcontext.Delete(sample);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;Update 修改&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public bool Update(EFSample sample)
{
    using (IDbContext dbcontext = _contextFactory.Create())
    {
        return dbcontext.Update(sample);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;GetByKeyID 根据主键查询&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public EFSample GetByKeyID(Guid id)
{
    using (IDbContext dbcontext = _contextFactory.Create())
    {
        return dbcontext.GetByKeyID&amp;lt;EFSample&amp;gt;(id);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;GetList 条件查询集合&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public List&amp;lt;EFSample&amp;gt; GetList(Expression&amp;lt;Func&amp;lt;EFSample, bool&amp;gt;&amp;gt; predicate = null)
{
    using (IDbContext dbcontext = _contextFactory.Create())
    {
        return dbcontext.GetList&amp;lt;EFSample&amp;gt;(predicate);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;Exist 条件查询是否存在&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public bool Exist(Expression&amp;lt;Func&amp;lt;EFSample, bool&amp;gt;&amp;gt; predicate = null)
{
    using (IDbContext dbcontext = _contextFactory.Create())
    {
        return dbcontext.Exist&amp;lt;EFSample&amp;gt;(predicate);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;SqlQuery 执行Sql脚本&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public List&amp;lt;EFSample&amp;gt; SqlQuery(string sql, DbParameter[] parameter)
{
    using (IDbContext dbcontext = _contextFactory.Create())
    {
        return dbcontext.SqlQuery&amp;lt;EFSample&amp;gt;(sql, parameter)?.ToList();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;CreateWithTransaction 事务处理&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public bool CreateWithTransaction(EFSample sample, EFSample sample2)
{
    bool result = true;
    using (IDbContext dbcontext = _contextFactory.Create())
    {
        try
        {
            dbcontext.BeginTransaction();//开启事务
            dbcontext.Create(sample);
            dbcontext.Create(sample2);
            dbcontext.Commit();
        }
        catch (Exception)
        {
            dbcontext.Rollback();
            result = false;
        }
    }
 
    return result;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;GetFirstOrDefault 条件查询第一项或默认数据&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public EFSample GetFirstOrDefault(Expression&amp;lt;Func&amp;lt;EFSample, bool&amp;gt;&amp;gt; predicate = null)
{
    using (IDbContext dbcontext = _contextFactory.Create())
    {
        return dbcontext.GetFirstOrDefault&amp;lt;EFSample&amp;gt;(predicate);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;单元测试以及Sql Server脚本&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using MasterChief.DotNet.Core.DapperTests;
using MasterChief.DotNet.Core.DapperTests.Model;
using MasterChief.DotNet.Core.DapperTests.Service;
using MasterChief.DotNet4.Utilities.Common;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Ninject;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Data.SqlClient;
using System.Threading.Tasks;
 
namespace MasterChief.DotNet.Core.Dapper.Tests
{
    [TestClass()]
    public class SampleServiceTests
    {
        private IKernel _kernel = null;
        private ISampleService _sampleService = null;
        private readonly Guid _testID = &quot;2F6D3C43-C2C7-4398-AD2B-ED5E82D78888&quot;.ToGuidOrDefault(Guid.Empty);
        private readonly string _testName = &quot;DapperSample&quot;;
 
        [TestInitialize]
        public void SetUp()
        {
            _kernel = new StandardKernel(new ServiceModule());
            Assert.IsNotNull(_kernel);
 
            _sampleService = _kernel.Get&amp;lt;ISampleService&amp;gt;();
            if (!_sampleService.Exist(ent =&amp;gt; ent.ID == _testID))
            {
                _sampleService.Create(new EFSample() { UserName = _testName, ID = _testID });
            }
        }
 
        /// &amp;lt;summary&amp;gt;
        /// 创建测试
        /// &amp;lt;/summary&amp;gt;
        [TestMethod()]
        public void CreateTest()
        {
            bool actual = _sampleService.Create(new EFSample() { UserName = &quot;Dapper&quot; + DateTime.Now.ToString(&quot;MMddHHmmss&quot;) });
            Assert.IsTrue(actual);
        }
 
        [TestMethod()]
        public void GetFirstOrDefaultTest()
        {
            EFSample actual = _sampleService.GetFirstOrDefault(ent =&amp;gt; ent.ID == _testID);
            Assert.IsNotNull(actual);
        }
 
        [TestMethod()]
        public void GetByKeyIdTest()
        {
            EFSample actual = _sampleService.GetByKeyID(_testID);
            Assert.IsNotNull(actual);
        }
 
        [TestMethod()]
        public void DeleteTest()
        {
            bool actual = _sampleService.Delete(new EFSample() { ID = _testID });
            Assert.IsTrue(actual);
        }
 
        [TestMethod()]
        public void GetListTest()
        {
            List&amp;lt;EFSample&amp;gt; actual = _sampleService.GetList(ent =&amp;gt; ent.Available == true);
            Assert.IsNotNull(actual);
            CollectionAssert.AllItemsAreNotNull(actual);
        }
 
        [TestMethod()]
        public void UpdateTest()
        {
            EFSample sample = new EFSample
            {
                ID = _testID,
                ModifyTime = DateTime.Now,
                UserName = &quot;modify&quot;
            };
            bool actual = _sampleService.Update(sample);
            Assert.IsNotNull(actual);
        }
 
        [TestMethod()]
        public void TransactionSuccessTest()
        {
            EFSample sample = new EFSample
            {
                UserName = &quot;TransactionSuccess1&quot;
            };
 
            EFSample sample2 = new EFSample
            {
                UserName = &quot;TransactionSuccess2&quot;
            };
            bool actual = _sampleService.CreateWithTransaction(sample, sample2);
            Assert.IsTrue(actual);
        }
 
        [TestMethod()]
        public void TransactionFailTest()
        {
            EFSample sample3 = new EFSample
            {
                UserName = &quot;TransactionSuccess3&quot;
            };
 
            EFSample sample4 = new EFSample
            {
                UserName = null
            };
            bool actual = _sampleService.CreateWithTransaction(sample3, sample4);
            Assert.IsFalse(actual);
        }
 
        [TestMethod()]
        public void ExistTest()
        {
            bool actual = _sampleService.Exist(ent =&amp;gt; ent.ID == _testID);
            Assert.IsTrue(actual);
 
            actual = _sampleService.Exist(ent =&amp;gt; ent.UserName == _testName);
            Assert.IsTrue(actual);
 
            actual = _sampleService.Exist(ent =&amp;gt; ent.CreateTime &amp;gt;= DateTime.Now.AddDays(-1));
            Assert.IsTrue(actual);
 
            actual = _sampleService.Exist(ent =&amp;gt; ent.CreateTime &amp;lt;= DateTime.Now);
            Assert.IsTrue(actual);
 
            actual = _sampleService.Exist(ent =&amp;gt; ent.Available == true);
            Assert.IsTrue(actual);
 
            actual = _sampleService.Exist(ent =&amp;gt; ent.Available != true);
            Assert.IsFalse(actual);
        }
 
        [TestMethod()]
        public void SqlQueryTest()
        {
            string sql = @&quot;select * from [dbo].[EFSample]
where CreateTime&amp;gt;=@CreateTime
and Available=@Available
order by CreateTime desc&quot;;
            DbParameter[] parameter = {
                    new SqlParameter(){ ParameterName=&quot;@CreateTime&quot;, Value=DateTime.Now.AddDays(-1) },
                    new SqlParameter(){ ParameterName=&quot;@Available&quot;, Value=true }
                };
            List&amp;lt;EFSample&amp;gt; actual = _sampleService.SqlQuery(sql, parameter);
            Assert.IsNotNull(actual);
            CollectionAssert.AllItemsAreNotNull(actual);
        }
 
        /// &amp;lt;summary&amp;gt;
        /// 多线程测试
        /// &amp;lt;/summary&amp;gt;
        [TestMethod()]
        public void CreateTestThreadTest()
        {
            Task[] tasks = {
                                Task.Factory.StartNew(() =&amp;gt; CreateTest()),
                                Task.Factory.StartNew(() =&amp;gt; CreateTest()),
                                Task.Factory.StartNew(() =&amp;gt; CreateTest()),
                                Task.Factory.StartNew(() =&amp;gt; CreateTest()),
                                Task.Factory.StartNew(() =&amp;gt; CreateTest()),
                                Task.Factory.StartNew(() =&amp;gt; CreateTest()),
                                Task.Factory.StartNew(() =&amp;gt; CreateTest()),
                                Task.Factory.StartNew(() =&amp;gt; CreateTest()),
                                Task.Factory.StartNew(() =&amp;gt; CreateTest()),
                                Task.Factory.StartNew(() =&amp;gt; CreateTest()),
                            };
            Task.WaitAll(tasks);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;USE [Sample]
GO
 
/****** Object:  Table [dbo].[EFSample]    Script Date: 2019/3/9 22:04:45 ******/
SET ANSI_NULLS ON
GO
 
SET QUOTED_IDENTIFIER ON
GO
 
CREATE TABLE [dbo].[EFSample](
    [ID] [uniqueidentifier] NOT NULL,
    [CreateTime] [datetime] NOT NULL,
    [ModifyTime] [datetime] NOT NULL,
    [Available] [bit] NOT NULL,
    [UserName] [nvarchar](20) NOT NULL,
 CONSTRAINT [EFSamle_PK] PRIMARY KEY CLUSTERED 
(
    [ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
 
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EFSample', @level2type=N'COLUMN',@level2name=N'UserName'
GO&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;日志&quot;&gt;2. 日志&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;a. 目前实现基于Log4Net的本地文件日志以及Kafka ELK的日志；&lt;/p&gt;
&lt;p&gt;b. 基于接口ILogService可以很容易扩展其他日志显示；&lt;/p&gt;
&lt;p&gt;代码使用说明&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;配置依赖注入，日志实现方式，这里采用文件日志形式&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using MasterChief.DotNet.Core.Log;
using Ninject.Modules;
 
namespace MasterChief.DotNet.Core.LogTests
{
    public sealed class LogModule : NinjectModule
    {
        public override void Load()
        {
            Bind&amp;lt;ILogService&amp;gt;().To&amp;lt;FileLogService&amp;gt;().InSingletonScope();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;拷贝日志config文件到项目内，并设置属性“始终复制”到输出目录，您可以根据项目需求调整config内容&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;configSections&amp;gt;
    &amp;lt;section name=&quot;log4net&quot; type=&quot;log4net.Config.Log4NetConfigurationSectionHandler&quot; /&amp;gt;
  &amp;lt;/configSections&amp;gt;
  &amp;lt;log4net&amp;gt;
    &amp;lt;!-- FileLogger --&amp;gt;
    &amp;lt;logger name=&quot;FATAL_FileLogger&quot;&amp;gt;
      &amp;lt;level value=&quot;ALL&quot; /&amp;gt;
      &amp;lt;appender-ref ref=&quot;FATAL_FileAppender&quot; /&amp;gt;
    &amp;lt;/logger&amp;gt;
    &amp;lt;logger name=&quot;ERROR_FileLogger&quot;&amp;gt;
      &amp;lt;level value=&quot;ALL&quot; /&amp;gt;
      &amp;lt;appender-ref ref=&quot;ERROR_FileAppender&quot; /&amp;gt;
    &amp;lt;/logger&amp;gt;
    &amp;lt;logger name=&quot;WARN_FileLogger&quot;&amp;gt;
      &amp;lt;level value=&quot;ALL&quot; /&amp;gt;
      &amp;lt;appender-ref ref=&quot;WARN_FileAppender&quot; /&amp;gt;
    &amp;lt;/logger&amp;gt;
    &amp;lt;logger name=&quot;INFO_FileLogger&quot;&amp;gt;
      &amp;lt;level value=&quot;ALL&quot; /&amp;gt;
      &amp;lt;appender-ref ref=&quot;INFO_FileAppender&quot; /&amp;gt;
    &amp;lt;/logger&amp;gt;
    &amp;lt;logger name=&quot;DEBUG_FileLogger&quot;&amp;gt;
      &amp;lt;level value=&quot;ALL&quot; /&amp;gt;
      &amp;lt;appender-ref ref=&quot;DEBUG_FileAppender&quot; /&amp;gt;
    &amp;lt;/logger&amp;gt;
    &amp;lt;!-- AdoNetLogger --&amp;gt;
    &amp;lt;!--&amp;lt;logger name=&quot;AdoNetLogger&quot;&amp;gt;
      &amp;lt;level value=&quot;ALL&quot; /&amp;gt;
      &amp;lt;appender-ref ref=&quot;AdoNetAppender&quot; /&amp;gt;
    &amp;lt;/logger&amp;gt;--&amp;gt;
    &amp;lt;!-- ConsoleLogger --&amp;gt;
    &amp;lt;logger name=&quot;ConsoleLogger&quot;&amp;gt;
      &amp;lt;level value=&quot;ALL&quot; /&amp;gt;
      &amp;lt;appender-ref ref=&quot;ColoredConsoleAppender&quot; /&amp;gt;
    &amp;lt;/logger&amp;gt;
 
    &amp;lt;!--使用Rolling方式记录日志按照日来记录日志--&amp;gt;
    &amp;lt;appender name=&quot;FATAL_FileAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&amp;gt;
      &amp;lt;!--文件名,可以相对路径,也可以绝对路径,这里只给定了文件夹--&amp;gt;
      &amp;lt;file value=&quot;.\log\\FATAL\\&quot; /&amp;gt;
      &amp;lt;!--是否增加文件--&amp;gt;
      &amp;lt;appendToFile value=&quot;true&quot; /&amp;gt;
      &amp;lt;maxSizeRollBackups value=&quot;5&quot; /&amp;gt;
      &amp;lt;!--日志追加类型,Date为按日期增加文件,Size为按大小--&amp;gt;
      &amp;lt;rollingStyle value=&quot;Date&quot; /&amp;gt;
      &amp;lt;!--最小锁定模型以允许多个进程可以写入同一个文件,解决文件独占问题--&amp;gt;
      &amp;lt;lockingModel type=&quot;log4net.Appender.FileAppender+MinimalLock&quot; /&amp;gt;
      &amp;lt;!--最大文件大小--&amp;gt;
      &amp;lt;maximumFileSize value=&quot;10MB&quot; /&amp;gt;
      &amp;lt;!--文件命名格式,非日期参数化要进行转义,如自定义文件后缀--&amp;gt;
      &amp;lt;datePattern value=&quot;yyyyMM\\yyyy-MM-dd&amp;amp;quot;.log&amp;amp;quot;&quot; /&amp;gt;
      &amp;lt;!--是否固定文件名--&amp;gt;
      &amp;lt;staticLogFileName value=&quot;false&quot; /&amp;gt;
      &amp;lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&amp;gt;
        &amp;lt;conversionPattern value=&quot;---------------------------------------------------%newline发生时间：%date %newline事件级别：%-5level %newline事件来源：%logger%newline日志内容：%message%newline&quot; /&amp;gt;
      &amp;lt;/layout&amp;gt;
    &amp;lt;/appender&amp;gt;
    &amp;lt;appender name=&quot;ERROR_FileAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&amp;gt;
      &amp;lt;!--文件名,可以相对路径,也可以绝对路径,这里只给定了文件夹--&amp;gt;
      &amp;lt;file value=&quot;.\log\\ERROR\\&quot; /&amp;gt;
      &amp;lt;!--是否增加文件--&amp;gt;
      &amp;lt;appendToFile value=&quot;true&quot; /&amp;gt;
      &amp;lt;maxSizeRollBackups value=&quot;5&quot; /&amp;gt;
      &amp;lt;!--日志追加类型,Date为按日期增加文件,Size为按大小--&amp;gt;
      &amp;lt;rollingStyle value=&quot;Date&quot; /&amp;gt;
      &amp;lt;!--最小锁定模型以允许多个进程可以写入同一个文件,解决文件独占问题--&amp;gt;
      &amp;lt;lockingModel type=&quot;log4net.Appender.FileAppender+MinimalLock&quot; /&amp;gt;
      &amp;lt;!--最大文件大小--&amp;gt;
      &amp;lt;maximumFileSize value=&quot;10MB&quot; /&amp;gt;
      &amp;lt;!--文件命名格式,非日期参数化要进行转义,如自定义文件后缀--&amp;gt;
      &amp;lt;datePattern value=&quot;yyyyMM\\yyyy-MM-dd&amp;amp;quot;.log&amp;amp;quot;&quot; /&amp;gt;
      &amp;lt;!--是否固定文件名--&amp;gt;
      &amp;lt;staticLogFileName value=&quot;false&quot; /&amp;gt;
      &amp;lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&amp;gt;
        &amp;lt;conversionPattern value=&quot;---------------------------------------------------%newline发生时间：%date %newline事件级别：%-5level %newline事件来源：%logger%newline日志内容：%message%newline&quot; /&amp;gt;
      &amp;lt;/layout&amp;gt;
    &amp;lt;/appender&amp;gt;
    &amp;lt;appender name=&quot;WARN_FileAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&amp;gt;
      &amp;lt;!--文件名,可以相对路径,也可以绝对路径,这里只给定了文件夹--&amp;gt;
      &amp;lt;file value=&quot;.\log\\WARN\\&quot; /&amp;gt;
      &amp;lt;!--是否增加文件--&amp;gt;
      &amp;lt;appendToFile value=&quot;true&quot; /&amp;gt;
      &amp;lt;maxSizeRollBackups value=&quot;5&quot; /&amp;gt;
      &amp;lt;!--日志追加类型,Date为按日期增加文件,Size为按大小--&amp;gt;
      &amp;lt;rollingStyle value=&quot;Date&quot; /&amp;gt;
      &amp;lt;!--最小锁定模型以允许多个进程可以写入同一个文件,解决文件独占问题--&amp;gt;
      &amp;lt;lockingModel type=&quot;log4net.Appender.FileAppender+MinimalLock&quot; /&amp;gt;
      &amp;lt;!--最大文件大小--&amp;gt;
      &amp;lt;maximumFileSize value=&quot;10MB&quot; /&amp;gt;
      &amp;lt;!--文件命名格式,非日期参数化要进行转义,如自定义文件后缀--&amp;gt;
      &amp;lt;datePattern value=&quot;yyyyMM\\yyyy-MM-dd&amp;amp;quot;.log&amp;amp;quot;&quot; /&amp;gt;
      &amp;lt;!--是否固定文件名--&amp;gt;
      &amp;lt;staticLogFileName value=&quot;false&quot; /&amp;gt;
      &amp;lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&amp;gt;
        &amp;lt;conversionPattern value=&quot;---------------------------------------------------%newline发生时间：%date %newline事件级别：%-5level %newline事件来源：%logger%newline日志内容：%message%newline&quot; /&amp;gt;
      &amp;lt;/layout&amp;gt;
    &amp;lt;/appender&amp;gt;
    &amp;lt;appender name=&quot;INFO_FileAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&amp;gt;
      &amp;lt;!--文件名,可以相对路径,也可以绝对路径,这里只给定了文件夹--&amp;gt;
      &amp;lt;file value=&quot;.\log\\INFO\\&quot; /&amp;gt;
      &amp;lt;!--是否增加文件--&amp;gt;
      &amp;lt;appendToFile value=&quot;true&quot; /&amp;gt;
      &amp;lt;maxSizeRollBackups value=&quot;5&quot; /&amp;gt;
      &amp;lt;!--日志追加类型,Date为按日期增加文件,Size为按大小--&amp;gt;
      &amp;lt;rollingStyle value=&quot;Date&quot; /&amp;gt;
      &amp;lt;!--最小锁定模型以允许多个进程可以写入同一个文件,解决文件独占问题--&amp;gt;
      &amp;lt;lockingModel type=&quot;log4net.Appender.FileAppender+MinimalLock&quot; /&amp;gt;
      &amp;lt;!--最大文件大小--&amp;gt;
      &amp;lt;maximumFileSize value=&quot;10MB&quot; /&amp;gt;
      &amp;lt;!--文件命名格式,非日期参数化要进行转义,如自定义文件后缀--&amp;gt;
      &amp;lt;datePattern value=&quot;yyyyMM\\yyyy-MM-dd&amp;amp;quot;.log&amp;amp;quot;&quot; /&amp;gt;
      &amp;lt;!--是否固定文件名--&amp;gt;
      &amp;lt;staticLogFileName value=&quot;false&quot; /&amp;gt;
      &amp;lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&amp;gt;
        &amp;lt;conversionPattern value=&quot;---------------------------------------------------%newline发生时间：%date %newline事件级别：%-5level %newline事件来源：%logger%newline日志内容：%message%newline&quot; /&amp;gt;
      &amp;lt;/layout&amp;gt;
    &amp;lt;/appender&amp;gt;
    &amp;lt;appender name=&quot;DEBUG_FileAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&amp;gt;
      &amp;lt;!--文件名,可以相对路径,也可以绝对路径,这里只给定了文件夹--&amp;gt;
      &amp;lt;file value=&quot;.\log\\DEBUG\\&quot; /&amp;gt;
      &amp;lt;!--是否增加文件--&amp;gt;
      &amp;lt;appendToFile value=&quot;true&quot; /&amp;gt;
      &amp;lt;maxSizeRollBackups value=&quot;5&quot; /&amp;gt;
      &amp;lt;!--日志追加类型,Date为按日期增加文件,Size为按大小--&amp;gt;
      &amp;lt;rollingStyle value=&quot;Date&quot; /&amp;gt;
      &amp;lt;!--最小锁定模型以允许多个进程可以写入同一个文件,解决文件独占问题--&amp;gt;
      &amp;lt;lockingModel type=&quot;log4net.Appender.FileAppender+MinimalLock&quot; /&amp;gt;
      &amp;lt;!--最大文件大小--&amp;gt;
      &amp;lt;maximumFileSize value=&quot;10MB&quot; /&amp;gt;
      &amp;lt;!--文件命名格式,非日期参数化要进行转义,如自定义文件后缀--&amp;gt;
      &amp;lt;datePattern value=&quot;yyyyMM\\yyyy-MM-dd&amp;amp;quot;.log&amp;amp;quot;&quot; /&amp;gt;
      &amp;lt;!--是否固定文件名--&amp;gt;
      &amp;lt;staticLogFileName value=&quot;false&quot; /&amp;gt;
      &amp;lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&amp;gt;
        &amp;lt;conversionPattern value=&quot;---------------------------------------------------%newline发生时间：%date %newline事件级别：%-5level %newline事件来源：%logger%newline日志内容：%message%newline&quot; /&amp;gt;
      &amp;lt;/layout&amp;gt;
    &amp;lt;/appender&amp;gt;
    &amp;lt;!--使用AdoNetAppender方式记录日志按照日来记录日志--&amp;gt;
    &amp;lt;!--&amp;lt;appender name=&quot;AdoNetAppender&quot; type=&quot;log4net.Appender.AdoNetAppender&quot;&amp;gt;
      &amp;lt;bufferSize value=&quot;1&quot; /&amp;gt;
      &amp;lt;connectionType value=&quot;System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot; /&amp;gt;
      &amp;lt;connectionString value=&quot;DATABASE=Sample;SERVER=.\SQLEXPRESS;UID=sa;PWD=sasa;Connect Timeout=15;&quot; /&amp;gt;
      &amp;lt;commandText value=&quot;INSERT INTO [Log4Net] ([Date],[Host],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @host, @thread, @log_level, @logger, @message, @exception)&quot; /&amp;gt;
      &amp;lt;parameter&amp;gt;
        &amp;lt;parameterName value=&quot;@log_date&quot; /&amp;gt;
        &amp;lt;dbType value=&quot;DateTime&quot; /&amp;gt;
        &amp;lt;layout type=&quot;log4net.Layout.RawTimeStampLayout&quot; /&amp;gt;
      &amp;lt;/parameter&amp;gt;
      &amp;lt;parameter&amp;gt;
        &amp;lt;parameterName value=&quot;@thread&quot; /&amp;gt;
        &amp;lt;dbType value=&quot;String&quot; /&amp;gt;
        &amp;lt;size value=&quot;255&quot; /&amp;gt;
        &amp;lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&amp;gt;
          &amp;lt;conversionPattern value=&quot;%thread&quot; /&amp;gt;
        &amp;lt;/layout&amp;gt;
      &amp;lt;/parameter&amp;gt;
 
      &amp;lt;parameter&amp;gt;
        &amp;lt;parameterName value=&quot;@host&quot; /&amp;gt;
        &amp;lt;dbType value=&quot;String&quot; /&amp;gt;
        &amp;lt;size value=&quot;50&quot; /&amp;gt;
        &amp;lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&amp;gt;
          &amp;lt;conversionPattern value=&quot;%property{log4net:HostName}&quot; /&amp;gt;
        &amp;lt;/layout&amp;gt;
      &amp;lt;/parameter&amp;gt;
      &amp;lt;parameter&amp;gt;
        &amp;lt;parameterName value=&quot;@log_level&quot; /&amp;gt;
        &amp;lt;dbType value=&quot;String&quot; /&amp;gt;
        &amp;lt;size value=&quot;50&quot; /&amp;gt;
        &amp;lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&amp;gt;
          &amp;lt;conversionPattern value=&quot;%level&quot; /&amp;gt;
        &amp;lt;/layout&amp;gt;
      &amp;lt;/parameter&amp;gt;
      &amp;lt;parameter&amp;gt;
        &amp;lt;parameterName value=&quot;@logger&quot; /&amp;gt;
        &amp;lt;dbType value=&quot;String&quot; /&amp;gt;
        &amp;lt;size value=&quot;255&quot; /&amp;gt;
        &amp;lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&amp;gt;
          &amp;lt;conversionPattern value=&quot;%logger&quot; /&amp;gt;
        &amp;lt;/layout&amp;gt;
      &amp;lt;/parameter&amp;gt;
      &amp;lt;parameter&amp;gt;
        &amp;lt;parameterName value=&quot;@message&quot; /&amp;gt;
        &amp;lt;dbType value=&quot;String&quot; /&amp;gt;
        &amp;lt;size value=&quot;4000&quot; /&amp;gt;
        &amp;lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&amp;gt;
          &amp;lt;conversionPattern value=&quot;%message&quot; /&amp;gt;
        &amp;lt;/layout&amp;gt;
      &amp;lt;/parameter&amp;gt;
      &amp;lt;parameter&amp;gt;
        &amp;lt;parameterName value=&quot;@exception&quot; /&amp;gt;
        &amp;lt;dbType value=&quot;String&quot; /&amp;gt;
        &amp;lt;size value=&quot;4000&quot; /&amp;gt;
        &amp;lt;layout type=&quot;log4net.Layout.ExceptionLayout&quot; /&amp;gt;
      &amp;lt;/parameter&amp;gt;
    &amp;lt;/appender&amp;gt;--&amp;gt;
    &amp;lt;!--使用ConsoleAppender方式记录日志按照日来记录日志--&amp;gt;
    &amp;lt;appender name=&quot;ColoredConsoleAppender&quot; type=&quot;log4net.Appender.ColoredConsoleAppender&quot;&amp;gt;
      &amp;lt;mapping&amp;gt;
        &amp;lt;level value=&quot;INFO&quot; /&amp;gt;
        &amp;lt;foreColor value=&quot;White, HighIntensity&quot; /&amp;gt;
        &amp;lt;backColor value=&quot;Green&quot; /&amp;gt;
      &amp;lt;/mapping&amp;gt;
      &amp;lt;mapping&amp;gt;
        &amp;lt;level value=&quot;DEBUG&quot; /&amp;gt;
        &amp;lt;foreColor value=&quot;White, HighIntensity&quot; /&amp;gt;
        &amp;lt;backColor value=&quot;Blue&quot; /&amp;gt;
      &amp;lt;/mapping&amp;gt;
      &amp;lt;mapping&amp;gt;
        &amp;lt;level value=&quot;WARN&quot; /&amp;gt;
        &amp;lt;foreColor value=&quot;Yellow, HighIntensity&quot; /&amp;gt;
        &amp;lt;backColor value=&quot;Purple&quot; /&amp;gt;
      &amp;lt;/mapping&amp;gt;
      &amp;lt;mapping&amp;gt;
        &amp;lt;level value=&quot;ERROR&quot; /&amp;gt;
        &amp;lt;foreColor value=&quot;Yellow, HighIntensity&quot; /&amp;gt;
        &amp;lt;backColor value=&quot;Red&quot; /&amp;gt;
      &amp;lt;/mapping&amp;gt;
      &amp;lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&amp;gt;
        &amp;lt;conversionPattern value=&quot;---------------------------------------------------%newline发生时间：%date %newline事件级别：%-5level%newline事件来源：%logger%newline事件行号：%line%newline日志内容：%message%newline&quot; /&amp;gt;
      &amp;lt;/layout&amp;gt;
    &amp;lt;/appender&amp;gt;
    &amp;lt;appender name=&quot;UdpAppender&quot; type=&quot;log4net.Appender.UdpAppender&quot;&amp;gt;
      &amp;lt;remoteAddress value=&quot;127.0.0.1&quot; /&amp;gt;
      &amp;lt;remotePort value=&quot;7071&quot; /&amp;gt;
      &amp;lt;layout type=&quot;log4net.Layout.XmlLayoutSchemaLog4j&quot; /&amp;gt;
    &amp;lt;/appender&amp;gt;
    &amp;lt;root&amp;gt;
      &amp;lt;appender-ref ref=&quot;UdpAppender&quot; /&amp;gt;
    &amp;lt;/root&amp;gt;
  &amp;lt;/log4net&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;单元测试&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using MasterChief.DotNet.Core.LogTests;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Ninject;
 
namespace MasterChief.DotNet.Core.Log.Tests
{
    [TestClass()]
    public class FileLogServiceTests
    {
        private IKernel _kernel = null;
        private ILogService _logService = null;
 
        [TestInitialize]
        public void SetUp()
        {
            _kernel = new StandardKernel(new LogModule());
            Assert.IsNotNull(_kernel);
 
            _logService = _kernel.Get&amp;lt;ILogService&amp;gt;();
        }
 
        [TestMethod()]
        public void DebugTest()
        {
            _logService.Debug(&quot;DebugTest&quot;);
        }
 
        [TestMethod()]
        public void ErrorTest()
        {
            _logService.Error(&quot;ErrorTest&quot;);
        }
 
        [TestMethod()]
        public void FatalTest()
        {
            _logService.Fatal(&quot;FatalTest&quot;);
        }
 
        [TestMethod()]
        public void InfoTest()
        {
            _logService.Info(&quot;InfoTest&quot;);
        }
 
        [TestMethod()]
        public void WarnTest()
        {
            _logService.Warn(&quot;WarnTest&quot;);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;缓存&quot;&gt;3. 缓存&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;a. 支持本地内存缓存，HttpRequest请求缓存，Redis缓存；&lt;/p&gt;
&lt;p&gt;b. 基于ICacheProvider接口，可以很容易扩展其他缓存实现；&lt;/p&gt;
&lt;p&gt;代码使用说明：&lt;/p&gt;
&lt;ol readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;配置依赖注入，缓存实现方式，这里采用LocalCacheProvider缓存实现；&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using MasterChief.DotNet.Core.Cache;
using Ninject.Modules;

namespace MasterChief.DotNet.Core.CacheTests
{
    public sealed class CacheModule : NinjectModule
    {
        public override void Load()
        {
            Bind&amp;lt;ICacheProvider&amp;gt;().To&amp;lt;LocalCacheProvider&amp;gt;().InSingletonScope();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;单元测试&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using MasterChief.DotNet.Core.CacheTests;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Ninject;

namespace MasterChief.DotNet.Core.Cache.Tests
{
    [TestClass()]
    public class LocalCacheProviderTests
    {
        private IKernel _kernel = null;
        private ICacheProvider _cacheProvider = null;
        private readonly string _testCacheKey = &quot;sampleKey&quot;;
        private readonly string _testCache = &quot;sample&quot;;
        private readonly string _testKeyFormat = &quot;login_{0}&quot;;

        [TestInitialize]
        public void SetUp()
        {
            _kernel = new StandardKernel(new CacheModule());
            Assert.IsNotNull(_kernel);

            _cacheProvider = _kernel.Get&amp;lt;ICacheProvider&amp;gt;();
            _cacheProvider.Set(_testCacheKey, _testCache, 10);
        }

        [TestMethod()]
        public void GetTest()
        {
            string actual = _cacheProvider.Get&amp;lt;string&amp;gt;(_testCacheKey);
            Assert.AreEqual(_testCache, actual);
        }

        [TestMethod()]
        public void IsSetTest()
        {
            bool actual = _cacheProvider.IsSet(_testCacheKey);
            Assert.IsTrue(actual);
        }

        [TestMethod()]
        public void RemoveTest()
        {
            _cacheProvider.Remove(_testCacheKey);
            bool actual = _cacheProvider.IsSet(_testCacheKey);
            Assert.IsFalse(actual);
        }

        [TestMethod()]
        public void RemoveByPatternTest()
        {
            string _loginKey = string.Format(_testKeyFormat, &quot;123&quot;);
            _cacheProvider.Set(_loginKey, _testCache, 10);
            bool actual = _cacheProvider.IsSet(_loginKey);
            Assert.IsTrue(actual);
            _cacheProvider.RemoveByPattern(_testKeyFormat);
            actual = _cacheProvider.IsSet(_loginKey);
            Assert.IsFalse(actual);
            actual = _cacheProvider.IsSet(_testCacheKey);
            Assert.IsTrue(actual);
        }

        [TestMethod()]
        public void SetTest()
        {
            _cacheProvider.Set(&quot;sampleSetKey&quot;, &quot;sampleSetCache&quot;, 10);
            bool actual = _cacheProvider.IsSet(&quot;sampleSetKey&quot;);
            Assert.IsTrue(actual);
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;配置&quot;&gt;4. 配置&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;a. 目前支持配置文件本地持久化，并且支持配置文件缓存依赖减少读取文件次数；&lt;/p&gt;
&lt;p&gt;b. 基于IConfigProvider接口，可以很容易扩展其他配置实现；&lt;/p&gt;
&lt;p&gt;代码使用说明：&lt;/p&gt;
&lt;ol readability=&quot;15&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;配置依赖注入，配置实现方式，这里采用FileConfigProvider缓存实现；&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using MasterChief.DotNet.Core.Config;
using Ninject.Modules;

namespace MasterChief.DotNet.Core.ConfigTests
{
    public sealed class ConfigModule : NinjectModule
    {
        public override void Load()
        {
            Bind&amp;lt;IConfigProvider&amp;gt;().To&amp;lt;FileConfigService&amp;gt;().InSingletonScope();
            // Bind&amp;lt;ConfigContext&amp;gt;().ToSelf().InSingletonScope();
            Bind&amp;lt;ConfigContext&amp;gt;().To&amp;lt;CacheConfigContext&amp;gt;().InSingletonScope();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;扩展配置上下文基于文件依赖&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using MasterChief.DotNet.Core.Config;
using MasterChief.DotNet4.Utilities.WebForm.Core;
using System;
using System.Web.Caching;

namespace MasterChief.DotNet.Core.ConfigTests
{
    public sealed class CacheConfigContext : ConfigContext
    {
        public override T Get&amp;lt;T&amp;gt;(string index = null)
        {
            if (!(base.ConfigService is FileConfigService))
            {
                throw new NotSupportedException(&quot;CacheConfigContext&quot;);
            }
            string filePath = GetClusteredIndex&amp;lt;T&amp;gt;(index);
            string key = filePath;
            object cacheContent = CacheManger.Get(key);
            if (cacheContent != null)
            {
                return (T)cacheContent;
            }
            T value = base.Get&amp;lt;T&amp;gt;(index);
            CacheManger.Set(key, value, new CacheDependency(filePath));
            return value;
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;13&quot;&gt;
&lt;p&gt;单元测试&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using MasterChief.DotNet.Core.ConfigTests;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Ninject;
using System.Collections.Generic;

namespace MasterChief.DotNet.Core.Config.Tests
{
    [TestClass()]
    public class FileConfigServiceTests
    {
        private IKernel _kernel = null;
        private IConfigProvider _configProvider = null;
        public ConfigContext _configContext = null;

        [TestInitialize]
        public void SetUp()
        {
            _kernel = new StandardKernel(new ConfigModule());
            Assert.IsNotNull(_kernel);

            _configProvider = _kernel.Get&amp;lt;IConfigProvider&amp;gt;();
            _configContext = _kernel.Get&amp;lt;ConfigContext&amp;gt;();
        }

        [TestMethod()]
        public void SaveConfigTest()
        {
            RedisConfig redisConfig = new RedisConfig
            {
                AutoStart = true,
                LocalCacheTime = 10,
                MaxReadPoolSize = 1024,
                MaxWritePoolSize = 1024,
                ReadServerList = &quot;10&quot;,
                RecordeLog = true,
                WriteServerList = &quot;10&quot;
            };
            redisConfig.RedisItems = new List&amp;lt;RedisItemConfig&amp;gt;
            {
                new RedisItemConfig() { Text = &quot;MasterChief&quot; },
                new RedisItemConfig() { Text = &quot;Config.&quot; }
            };

            _configContext.Save(redisConfig, &quot;prod&quot;);
            _configContext.Save(redisConfig, &quot;alpha&quot;);

            RedisConfig prodRedisConfig = _configContext.Get&amp;lt;RedisConfig&amp;gt;(&quot;prod&quot;);
            Assert.IsNotNull(prodRedisConfig);

            prodRedisConfig = _configContext.Get&amp;lt;RedisConfig&amp;gt;(&quot;prod&quot;);//文件缓存测试
            Assert.IsNotNull(prodRedisConfig);

            RedisConfig alphaRedisConfig = _configContext.Get&amp;lt;RedisConfig&amp;gt;(&quot;alpha&quot;);
            Assert.IsNotNull(alphaRedisConfig);

            DaoConfig daoConfig = new DaoConfig
            {
                Log = &quot;server=localhost;database=Sample;uid=sa;pwd=sasa&quot;
            };
            _configContext.Save(daoConfig, &quot;prod&quot;);
            _configContext.Save(daoConfig, &quot;alpha&quot;);
            DaoConfig prodDaoConfig = _configContext.Get&amp;lt;DaoConfig&amp;gt;(&quot;prod&quot;);
            Assert.IsNotNull(prodDaoConfig);

            DaoConfig alphaDaoConfig = _configContext.Get&amp;lt;DaoConfig&amp;gt;(&quot;alpha&quot;);
            Assert.IsNotNull(alphaDaoConfig);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;本地配置会在程序根目录Config下，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://8y6yzw.dm.files.1drv.com/y4mibGGlIfda5MwK941vhcR5zHNBGgF1UEQAjozRAJHrcAF4wr6PpkKwY4uQyLVTYIjUTcEeje88BJzOhIdPACqtDMsfWQw22v6sxy8jU4tLLF3FOpe_oZlVol4ieeiRPa_wWUIfY_5TwRzQ1eOze0EpocLrxks30kcg73LZD8P-XJR5hH0fujGPqBP0cyw5KmG-s5maLn9a-ODDEZf-LxmmQ?width=607&amp;amp;height=147&amp;amp;cropmode=none&quot; alt=&quot;1552231625890&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;配置文件基于XML持久化存储，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://8y5n3a.dm.files.1drv.com/y4mqjcZUrUGGJzfE_S09gBfz-ZrWnH7vfrzxBbIb922zzqP7PU5ae5f7HgZk49_SfqZE8U3YY3H0Fn9WddI1oXRSAU9vBMcrlxX4FrXUzHBaJq9s5E8TEvaSsv-4ATHsLkHZfdttbF7h02Fo5451D2uwtxASSh8TPxrCAuJ9byRmD6qOeKYM1Kh9ZoV1HMaIVwdFF5MeS5KZ-LultAHCOvWFw?width=1155&amp;amp;height=235&amp;amp;cropmode=none&quot; alt=&quot;1552231725395&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;验证码&quot;&gt;5. 验证码&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;a. 派生实现ValidateCodeType抽象类，来自定义验证码样式；&lt;/p&gt;
&lt;p&gt;b. 派生实现VerifyCodeHandler抽象类，快速切换需要显示验证码；&lt;/p&gt;
&lt;p&gt;代码使用说明：&lt;/p&gt;
&lt;ol readability=&quot;7&quot;&gt;&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;Mvc 简单使用如下：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
///     处理生成Mvc 程序验证码
/// &amp;lt;/summary&amp;gt;
public sealed class MvcVerifyCodeHandler : VerifyCodeHandler
{
    public override void OnValidateCodeCreated(HttpContext context, string validateCode)
    {
        context.Session[&quot;validateCode&quot;] = validateCode;
    }

    public override byte[] CreateValidateCode(string style)
    {
        ValidateCodeType createCode;
        switch (style)
        {
            case &quot;type1&quot;:
                createCode = new ValidateCode_Style1();
                break;
            default:
                createCode = new ValidateCode_Style1();
                break;
        }

        var buffer = createCode.CreateImage(out var validateCode);
        OnValidateCodeCreated(HttpContext.Current, validateCode);
        return buffer;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;WebForm 简单使用如下：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
///     WebFormVerifyCodeHandler 的摘要说明
/// &amp;lt;/summary&amp;gt;
public class WebFormVerifyCodeHandler : VerifyCodeHandler, IHttpHandler, IRequiresSessionState
{
    public void ProcessRequest(HttpContext context)
    {
        var validateType = context.Request.Params[&quot;style&quot;];
        var buffer = CreateValidateCode(validateType);
        context.Response.ClearContent();
        context.Response.ContentType = MimeTypes.ImageGif;
        context.Response.BinaryWrite(buffer);
    }

    public bool IsReusable =&amp;gt; false;

    public override void OnValidateCodeCreated(HttpContext context, string validateCode)
    {
        context.Session[&quot;validateCode&quot;] = validateCode;
    }

    public override byte[] CreateValidateCode(string style)
    {
        style = style?.Trim();
        ValidateCodeType createCode;
        switch (style)
        {
            case &quot;type1&quot;:
                createCode = new ValidateCode_Style1();
                break;

            default:
                createCode = new ValidateCode_Style1();
                break;
        }

        var buffer = createCode.CreateImage(out var validateCode);
        OnValidateCodeCreated(HttpContext.Current, validateCode);
        return buffer;
    }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;序列化与反序列化&quot;&gt;6. 序列化与反序列化&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;a. 目前支持Json以及Protobuf两种方式的序列化与反序列化&lt;/p&gt;
&lt;p&gt;b. 可以通过实现接口ISerializer扩展实现其他方式；&lt;/p&gt;
&lt;p&gt;代码使用说明：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;private static void Main()
{
    SampleSerializer(new JsonSerializer());
    Console.WriteLine(Environment.NewLine);
    SampleSerializer(new ProtocolBufferSerializer());
    Console.ReadLine();
}
 
private static void SampleSerializer(ISerializer serializer)
{
    #region 单个对象序列化与反序列化
 
    var person = new Person();
    person.Age = 10;
    person.FirstName = &quot;yan&quot;;
    person.LastName = &quot;zhiwei&quot;;
    person.Remark = &quot;ISerializer Sample&quot;;
    var jsonText = serializer.Serialize(person);
    Console.WriteLine($&quot;{serializer.GetType().Name}-Serialize&quot; + jsonText);
 
 
    var getPerson = serializer.Deserialize&amp;lt;Person&amp;gt;(jsonText);
    Console.WriteLine($&quot;{serializer.GetType().Name}-Deserialize&quot; + getPerson);
 
    #endregion
 
    #region 集合序列化与反序列化
 
    var persons = new List&amp;lt;Person&amp;gt;();
    for (var i = 0; i &amp;lt; 10; i++)
        persons.Add(new Person
        {
            FirstName = &quot;Yan&quot;,
            Age = 20 + i,
            LastName = &quot;Zhiwei&quot;,
            Remark = DateTime.Now.ToString(CultureInfo.InvariantCulture)
        });
    jsonText = serializer.Serialize(persons);
    Console.WriteLine($&quot;{serializer.GetType().Name}-Serialize&quot; + jsonText);
 
    var getPersons = serializer.Deserialize&amp;lt;List&amp;lt;Person&amp;gt;&amp;gt;(jsonText);
    foreach (var item in getPersons)
        Console.WriteLine($&quot;{serializer.GetType().Name}-Deserialize&quot; + item);
 
    #endregion
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://846dvq.dm.files.1drv.com/y4mWYJTjMj8XnRRQEUW4U1zgKNRGIVbY_CKcJS0hUipY_ydHAEYW8pW-xc8Bkj0BnF6k4SdJDrPeSxDLx3UcNq-xliJk6N5OyJ3fTJ00nBFuf2wcg_esB8CggR2jwHYgBbvcYGappUbqG4aqi3-sd4e8PAKyRv6DkjmnjPo-B0xX7QaHgbV_kg0YLlhj5_BTHG83qwrk2TfVGkGROnDZMk1Zw?width=960&amp;amp;height=639&amp;amp;cropmode=none&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;excel导入导出&quot;&gt;7. EXCEL导入导出&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;a. 基于Npoi实现，可以基于接口IExcelManger扩展实现诸如MyXls等；&lt;/p&gt;
&lt;p&gt;b. 目前实现了将Excel导出DataTable和DataTable导出到Excel文件；&lt;/p&gt;
&lt;p&gt;c. 后续完善诸如整个Excel文件导入导出等；&lt;/p&gt;
&lt;p&gt;代码使用说明：&lt;/p&gt;
&lt;ol readability=&quot;10&quot;&gt;&lt;li readability=&quot;12&quot;&gt;
&lt;p&gt;将DataTable导出到Excel文件&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;private void BtnToExcel_Click(object sender, EventArgs e)
{
    var mockTable = BuilderExcelData();
    _mockExcelPath = $&quot;D:\\ExcelSample{DateTime.Now.FormatDate(12)}.xls&quot;;
    _excelManger.ToExcel(mockTable, &quot;员工信息汇总&quot;, &quot;员工列表&quot;, _mockExcelPath);
    Process.Start(_mockExcelPath);
}

private DataTable BuilderExcelData()
{
    var mockTable = new DataTable();
    mockTable.Columns.Add(new DataColumn {ColumnName = &quot;序号&quot;});
    mockTable.Columns.Add(new DataColumn {ColumnName = &quot;姓名&quot;});
    mockTable.Columns.Add(new DataColumn {ColumnName = &quot;工作单位&quot;});
    mockTable.Columns.Add(new DataColumn {ColumnName = &quot;性别&quot;});
    mockTable.Columns.Add(new DataColumn {ColumnName = &quot;入职时间&quot;});

    for (var i = 0; i &amp;lt; 100; i++)
        mockTable.Rows.Add(i.ToString(), $&quot;张{i}&quot;, $&quot;李{i}计算机公司&quot;, i % 2 == 0 ? &quot;男&quot; : &quot;女&quot;,
            DateTime.Now.AddDays(i));
    return mockTable;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://845n1a.dm.files.1drv.com/y4mfwfj5Ba0Y2KQLZoyW7I8f1mw5Z2m6KuAIyOiNPiVwzFMtqXPrHGQ2sCa3Ugl0OpcV-Tr0Y1Qbcf009TqtkwLQPcmaAg0Y7jM5guS7e9GYC_mbPLnBUgxxob4IbYrVoxxGh_Vfad2nwRX0wmI1clxx1cgFd4Xpoc_clXpOjJ8zZ1zj4Q_099E6Sk2ucuzpXJt3KRzYlo1TgCtotELq1roDg?width=745&amp;amp;height=982&amp;amp;cropmode=none&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;将Excel文件导出DataTable&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;private void BtnToDataTable_Click(object sender, EventArgs e)
{
    if (string.IsNullOrEmpty(_mockExcelPath))
    {
        MessageBox.Show(&quot;请生成模拟测试EXCEL文件&quot;);
        return;
    }

    var excleTable = _excelManger.ToDataTable(_mockExcelPath, 0, 1, 2);
    var jsonText = _jsonSerializer.Serialize(excleTable);
    MessageBox.Show(jsonText);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;文件下载&quot;&gt;8. 文件下载&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;a.支持下载文件加密；&lt;/p&gt;
&lt;p&gt;b.支持下载自定义限速；&lt;/p&gt;
&lt;p&gt;c.通过DownloadHandler抽象类实现扩展诸如在Asp.Net Mvc实现；&lt;/p&gt;
&lt;p&gt;代码使用说明：&lt;/p&gt;
&lt;ol readability=&quot;9&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;文件下载配置文件&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&amp;gt;
&amp;lt;DownloadConfig xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;
                FileNameEncryptorIv=&quot;0102030405060708090a0a0c0d010208&quot;
                FileNameEncryptorKey=&quot;DotnetDownloadConfig&quot;
                LimitDownloadSpeedKb=&quot;1024&quot;
                DownLoadMainDirectory=&quot;D:\OneDrive\软件\工具\&quot;&amp;gt;
&amp;lt;/DownloadConfig&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;11&quot;&gt;
&lt;p&gt;在WebForm实现DownloadHandler抽象类，迅速实现文件下载&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class FileDownloadHandler : DownloadHandler, IHttpHandler
{
    public void ProcessRequest(HttpContext context)
    {
        var fileName = context.Request[&quot;fileName&quot;];
        StartDownloading(context, fileName);
    }

    public bool IsReusable =&amp;gt; false;

    public override void OnDownloadFailed(HttpContext context, string fileName, string filePath, string ex)
    {
        context.Response.Write(ex);
    }

    public override void OnDownloadSucceed(HttpContext context, string fileName, string filePath)
    {
        var result = $&quot;文件[{fileName}]下载成功，映射路径：{filePath}&quot;;
        context.Response.Write(result);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;修改Web.Config 文件&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;  &amp;lt;system.web&amp;gt;
    &amp;lt;compilation debug=&quot;true&quot; targetFramework=&quot;4.5&quot;/&amp;gt;
    &amp;lt;httpRuntime targetFramework=&quot;4.5&quot;/&amp;gt;
    &amp;lt;httpHandlers&amp;gt;
      &amp;lt;add verb=&quot;*&quot; path=&quot;FileDownloadHandler.ashx&quot; type=&quot;MasterChief.DotNet.Framework.WbSample.BackHandler.FileDownloadHandler&quot; /&amp;gt;
    &amp;lt;/httpHandlers&amp;gt;
  &amp;lt;/system.web&amp;gt;
  &amp;lt;system.webServer&amp;gt;
    &amp;lt;modules runAllManagedModulesForAllRequests=&quot;true&quot; /&amp;gt;
  &amp;lt;/system.webServer&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Wed, 24 Apr 2019 15:26:00 +0000</pubDate>
<dc:creator>MeetYan</dc:creator>
<og:description>C 开发辅助类库，和士官长一样身经百战且越战越勇的战争机器，能力无人能出其右。 GitHub： 'MasterChief' 欢迎Star，欢迎Issues； 项目架构思维导图： 目录 ========</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MeetYan/p/10765721.html</dc:identifier>
</item>
<item>
<title>token:NLP之词形还原 - 编程匠心者</title>
<link>http://www.cnblogs.com/brooksj/p/10765648.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/brooksj/p/10765648.html</guid>
<description>&lt;p&gt;完整代码实现放在我的github上:&lt;a href=&quot;https://github.com/tracy-talent/curriculum/tree/master/NLP/token&quot;&gt;click me&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一任务描述&quot;&gt;一、任务描述&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;形态还原算法：
&lt;ol&gt;&lt;li&gt;输入一个单词&lt;/li&gt;
&lt;li&gt;如果词典里有该词，输出该词及其属性，转4，否则，转3&lt;/li&gt;
&lt;li&gt;如果有该词的还原规则，并且，词典里有还原后的词，则输出还原后的词及其属性，转4，否则，调用&amp;lt;未登录词模块&amp;gt;&lt;/li&gt;
&lt;li&gt;如果输入中还有单词，转(1)，否则，结束。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;二技术路线&quot;&gt;二、技术路线&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;加载dic_ec.txt词典，词典存储着英到汉的映射，对于输入的单词，如果dic_ec.txt词典中包含这个单词的映射则直接输出。下面给出dic_ec.txt内容的基本形式：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;//gbk编码，以\t分隔
homokaryosis    none.   同核性, 同核现象
homokaryotic    adj.    同核体的
homokurtic  none.   等峰态性
homolanthionine none.   高羊毛氨酸&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;考虑到有些单词本身就是原形，也是其它单词的形态变换，所以在设计时决定把所有可能的结果都输出。在完成词典映射后再检查该单词是否能通过变换规则转换得到。我们知道英文单词的形态变换存在有规律的和无规律的变换，首先看有规律的变换，动词的规律变换形式有下面4条规则：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;规则1.  *ves --&amp;gt; *f/*fe
规则2.  *ies --&amp;gt; *y
规则3.  *es  --&amp;gt; *
规则4.  *s   --&amp;gt; *&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;        名次的规律变换形式有下面9条规则：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//第三人称单数
规则5.  *ies --&amp;gt; *y
规则6.  *es --&amp;gt; *
规则7.  *s   --&amp;gt; *
//现在进行时
规则8.  *??ing --&amp;gt; *?   
规则9.  *ying --&amp;gt; *ie
规则10.  *ing  --&amp;gt; */*e
//过去时、过去分词
规则11.  *??ed --&amp;gt; *?
规则12.  *ied --&amp;gt; *y
规则13.  *ed  --&amp;gt; */*e&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;        通过在程序中写入这些规则来对单词形态进行还原，而无规则的形态变换只能通过预先建立好的词库来完成词形形态映射。在程序中通过加载irregualr nouns.txt对名词进行还原，加载irregualr verbs.txt对动词进行还原。下面分别给出这两文件中的内容形式：&lt;/p&gt;
&lt;p&gt;  irregular nouns.txt的内容形式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//gbk编码，每行的第一个词是原形，后面的是变换形态，以\t分隔
grief   griefs
roof    roofs
gulf    gulfs
grief   griefs&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;         irregualr verbs.txt的内容形式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//gbk编码，每行的第一个词是原形，后面的是变换形态，以\t分隔
bear    bore    borne   born
alight  alighted    alit    alighted    alit
arise   arose   arisen
awake   awoke   awaked  awoken  awoke   awaked&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;        如果找到了还原映射，则在dic_ec.txt词典中查找还原后的单词并输出结果。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;若最终该单词没有检索到结果则把他登记到单词缺失词典missing words.txt中。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;三数据说明&quot;&gt;三、数据说明&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;英汉词典dic_ec.txt，名词的不规律变换词典irregualr nouns.txt，动词的不规律变换词典irregualr verbs.txt，这几个数据词典的编码以及内容形式都已在技术路线中给出，此处不再赘述。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;四遇到的问题及解决方案&quot;&gt;四、遇到的问题及解决方案&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;程序实现过程中唯一遇到的问题就是文件编码和分隔符的问题，最后用vim把用到的3个数据词典统一设置成gbk编码，以\t进行分隔，方便程序统一读入处理。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;五性能分析&quot;&gt;五、性能分析&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;下面是性能单词查询的耗时截图，平均不超过0.001s：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tracy-talent/Notes/master/imgs/nlp_token_1.png&quot; alt=&quot;1541928466093&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;六运行环境&quot;&gt;六、运行环境&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;将token.exe与dic_ec.txt，irregualr nouns.txt，irregualr verbs.txt，missing words.txt放在同一个目录下，然后点击token.exe即可正确运行程序。&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Wed, 24 Apr 2019 15:08:00 +0000</pubDate>
<dc:creator>编程匠心者</dc:creator>
<og:description>完整代码实现放在我的github上: 'click me' 一、任务描述 形态还原算法： 1. 输入一个单词 2. 如果词典里有该词，输出该词及其属性，转4，否则，转3 3. 如果有该词的还原规则，并</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/brooksj/p/10765648.html</dc:identifier>
</item>
<item>
<title>Hive使用必知必会系列 - 王知无</title>
<link>http://www.cnblogs.com/importbigdata/p/10765543.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/importbigdata/p/10765543.html</guid>
<description>&lt;h2&gt;一、Hive的几种数据模型&lt;/h2&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;3&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;内部表 (Table 将数据保存到Hive 自己的数据仓库目录中：/usr/hive/warehouse)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;外部表 (External Table 相对于内部表，数据不在自己的数据仓库中，只保存数据的元信息)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;分区表 (Partition Table将数据按照设定的条件分开存储，提高查询效率，分区-----&amp;gt;  目录)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;桶表 (Bucket Table本质上也是一种分区表，类似 hash 分区   桶 ----&amp;gt; 文件)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;视图表 (视图表是一个虚表，不存储数据，用来简化复杂的查询)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;注意:内部表删除表后数据也会删除，外部表数据删除后不会从hdfs中删除&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;1. 内部表/管理表&lt;/h3&gt;

&lt;pre&gt;
&lt;code class=&quot;language-php hljs&quot;&gt;&lt;code class=&quot;php&quot;/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;外部表的使用场景&lt;/p&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;原始日志文件或同时被多个部门同时操作的数据集，需要使用外部表&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果不小心将meta data删除了，HDFS上的数据还在，可以恢复，增加了数据的安全性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;注意:使用insert插入数据时会产生临时表，重新连接后会表会小时，因此大批量插入数据时不建议用insert&lt;/code&gt;&lt;br/&gt;&lt;code&gt;tips1:在hdfs的hive路径下以.db结尾的其实都是实际的数据库&lt;/code&gt;&lt;br/&gt;&lt;code&gt;tips2:默认的default数据库就在hive的家目录&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt; &lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;3. 分区表&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;注意:分区表通常分为静态分区表和动态分区表，前者需要导入数据时静态指定分区，后者可以直接根据导入数据进行分区。分区的好处是可以让数据按照区域进行分类，避免了查询时的全表扫描。&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python hljs&quot;&gt;&lt;code class=&quot;python&quot;/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;注意:在外部分区表中，如果将表删除了，重建表后只需要将分区加载进来即可恢复历史相关分区的数据。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;多重分区的使用&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash hljs&quot;/&gt;
&lt;/pre&gt;

&lt;h2&gt;二、Hive的复杂数据类型的使用&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;注意:Hive之所以能在大数据领域比较受欢迎，很大一部分原因在于相比其他SQL类存储系统支持更加复杂的数据类型&lt;/code&gt;&lt;/p&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;7.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;map: (key1, value1, key2, value2, ...) 一些列的k/v对 map&amp;lt;int,string...&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;struct: (var1,var2,var3...) 不同类型的值的组合 struct&amp;lt;abc:string,def:int...&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;array: (var1,var2,var3...) 一种类型的值的组合 array&amp;lt;string...&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;uniontype: (string,map&amp;lt;&amp;gt;,struct&amp;lt;&amp;gt;,array&amp;lt;&amp;gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;注意:在创建hive表时可根据需要导入的数据进行类型识别并创建适合的数据类型&lt;/code&gt;&lt;br/&gt;hive数据类型数据识别标识:&lt;/p&gt;
&lt;div class=&quot;table-box&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;字段分割标识&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;FIELDS TERMINATED BY&lt;/td&gt;
&lt;td&gt;表示字段与字段之间的分隔符&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;COLLECTION ITEMS TERMINATED BY&lt;/td&gt;
&lt;td&gt;表示一个字段中各个item之间的分隔符[可用于array和struct类型]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;MAP KEYS TERMINATED BY&lt;/td&gt;
&lt;td&gt;表示map类型中的key/value的分隔符[可用于map类型]&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code class=&quot;language-ruby hljs&quot;&gt;&lt;code class=&quot;ruby&quot;/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;1. array类型的使用&lt;/h3&gt;
&lt;h4&gt;1.1 array类型的基本使用&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;类型结构:&lt;/code&gt; array&amp;lt;struct&amp;gt; 例如:array&amp;lt;string&amp;gt;,array&amp;lt;int&amp;gt;&lt;br/&gt;&lt;code&gt;数据表示:&lt;/code&gt; 例如:[string1,string2],[int1,int2]&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash hljs&quot;/&gt;
&lt;/pre&gt;
&lt;h4&gt;1.2 array&amp;lt;struct&amp;gt;类型数据转换处理&lt;/h4&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;背景:&lt;br/&gt;使用array结构时，一个字段中通常会有多个值，这个时候通常情况下是需要对某个值进行过滤的，一般情况下会使用&lt;code&gt;lateral view结合UDTF(User-Defined Table-Generating Functions)进行过滤&lt;/code&gt;。而UDTF为了解决一行输出多行的需求，典型的就是explode()函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;lateral view语法结构&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-php hljs&quot;&gt;&lt;code class=&quot;php&quot;&gt;lateralView: LATERAL VIEW udtf(expression) tableAlias &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;AS columnAlias (&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;',' columnAlias)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;array&amp;lt;struct&amp;gt;转字符串&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cpp hljs&quot;&gt;&lt;code class=&quot;cpp&quot;&gt;# 借用split函数将&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;array&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&amp;gt;结构内容转换为以&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;分割的字符串&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;select &lt;span class=&quot;hljs-title&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;split&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;&amp;gt;,&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;','&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;) from tablename&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;hive使用explode()函数进行&lt;code&gt;行转列&lt;/code&gt;&lt;br/&gt;&lt;code&gt;语法:lateral view explode(col3) col3 as name&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-css hljs&quot;&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;hive&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;select &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;ip,&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;appname &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;from &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;appinfo &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;LATERAL &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;VIEW &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;explode(&lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;ips) &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;tmpappinfo  &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;AS &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;ip &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;limit 2;&lt;br/&gt;10&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;span class=&quot;hljs-selector-class&quot;&gt;.212 &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;bmpjob&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;10&lt;span class=&quot;hljs-selector-class&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;span class=&quot;hljs-selector-class&quot;&gt;.225 &lt;span class=&quot;hljs-selector-tag&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;bmpjob&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;hive使用concat_ws()函数进行&lt;code&gt;列转行&lt;/code&gt;&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;hljs objectivec&quot;&gt;
&lt;code class=&quot;objectivec hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;# 借用concat_ws()和collect_set()函数进行相同列的重复数据转换&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;# collect_set()函数可以将相关列合并成array&lt;span class=&quot;hljs-meta-string&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;span class=&quot;hljs-meta-string&quot;&gt;&amp;lt;&amp;gt;&lt;span class=&quot;hljs-meta&quot;&gt;类型；concat_ws()函数会将array&lt;span class=&quot;hljs-meta-string&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;span class=&quot;hljs-meta-string&quot;&gt;&amp;lt;&amp;gt;&lt;span class=&quot;hljs-meta&quot;&gt;类型根据指定的分隔符进行合并&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;## 示例数据&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hive&amp;gt; select * from tmp_jiangzl_test;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;tmp_jiangzl_test.col1   tmp_jiangzl_test.col2   tmp_jiangzl_test.col3&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;a       b       &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;1&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;a       b       &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;2&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;a       b       &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;3&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;c       d       &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;4&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;c       d       &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;5&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;c       d       &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;6&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;## 对于以上数据，我们可以将col3列根据列col1和col2进行合并&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;hive&amp;gt; select col1,col2,concat_ws(&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;','&lt;span class=&quot;hljs-meta&quot;&gt;,collect_set(col3)) from tmp_jiangzl_test group by col1,col2;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;col1    col2    _c2&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;a       b       &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;1&lt;span class=&quot;hljs-meta&quot;&gt;,&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;2&lt;span class=&quot;hljs-meta&quot;&gt;,&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;3&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;c       d       &lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;4&lt;span class=&quot;hljs-meta&quot;&gt;,&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;5&lt;span class=&quot;hljs-meta&quot;&gt;,&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;2. struct&amp;lt;&amp;gt;类型的使用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;数据定义:&lt;/code&gt; struct&amp;lt;name:STRING, age:INT&amp;gt;&lt;br/&gt;&lt;code&gt;数据表示:&lt;/code&gt; biaoge:18&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash hljs&quot;/&gt;
&lt;/pre&gt;
&lt;h3&gt;3. map&amp;lt;&amp;gt;类型的使用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;数据定义:&lt;/code&gt; map&amp;lt;string,int&amp;gt;&lt;br/&gt;&lt;code&gt;数据表示:&lt;/code&gt; key:value,key:value...&lt;br/&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python hljs&quot;&gt;&lt;code class=&quot;python&quot;/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;三、Hive的常用函数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;注意:使用show functions可以查看hive支持的相关函数&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;1. hive常用函数列表&lt;/h3&gt;
&lt;p&gt;标准函数使用:&lt;/p&gt;
&lt;div class=&quot;table-box&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th width=&quot;24&quot;&gt;函数名&lt;/th&gt;
&lt;th width=&quot;400&quot;&gt;作用描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;112&quot;&gt;round()/floor()&lt;/td&gt;
&lt;td width=&quot;400&quot;&gt;可以将double类型转换为bigint类型&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;24&quot;&gt;abs()&lt;/td&gt;
&lt;td width=&quot;400&quot;&gt;返回数值的绝对值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;24&quot;&gt;ucase()&lt;/td&gt;
&lt;td width=&quot;400&quot;&gt;将字符串转换成全是大写字母&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;24&quot;&gt;reverse()&lt;/td&gt;
&lt;td width=&quot;400&quot;&gt;将字符串进行翻转&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;24&quot;&gt;concat()&lt;/td&gt;
&lt;td width=&quot;400&quot;&gt;将输入的多个字符串当做一个字符串输出concat('&lt;img class=&quot;math-inline&quot; src=&quot;https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_svg/I1YzhXxW8YC0zJIYJ3ibAGXSTIjKchicib82NNulxl8nmlUsqQzTxSwTct0Gn93PBZsD0ibcrasuUv1tdOF8iaE92vOy8l9SGyfzX/640?wx_fmt=other&quot; alt=&quot;640?wx_fmt=other&quot;/&gt;171&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;聚合函数使用:&lt;/p&gt;
&lt;div class=&quot;table-box&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th width=&quot;35&quot;&gt;函数名&lt;/th&gt;
&lt;th width=&quot;221&quot;&gt;作用描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;114&quot;&gt;sum()&lt;/td&gt;
&lt;td width=&quot;223&quot;&gt;返回所有输入求和后的值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;35&quot;&gt;avg()&lt;/td&gt;
&lt;td width=&quot;228&quot;&gt;计算所有输入值的平均值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;35&quot;&gt;min()/max()&lt;/td&gt;
&lt;td width=&quot;226&quot;&gt;计算输入值的最大和最小值&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;注意:聚合方法通常需要和group by语句组合使用&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;表生成函数:&lt;br/&gt;表生成函数接收零个或者多个输入，然后产生多列或多行输出.&lt;/p&gt;
&lt;div class=&quot;table-box&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th width=&quot;56&quot;&gt;函数名&lt;/th&gt;
&lt;th width=&quot;351&quot;&gt;作用描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;56&quot;&gt;array()&lt;/td&gt;
&lt;td width=&quot;348&quot;&gt;将函数内容转换成一个array&amp;lt;&amp;gt;类型&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;56&quot;&gt;split(array,split)&lt;/td&gt;
&lt;td width=&quot;351&quot;&gt;将array&amp;lt;&amp;gt;类型按照split分割符进行分割成字符串(转义时使用\进行转义)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;165&quot;&gt;explode()&lt;/td&gt;
&lt;td width=&quot;350&quot;&gt;array数据类型作为输入，对数组中数据进行迭代，返回多行结果&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;164&quot;&gt;collect_set()&lt;/td&gt;
&lt;td width=&quot;349&quot;&gt;将某字段的值进行去重汇总，产生Array类型字段&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;56&quot;&gt;collect_list()&lt;/td&gt;
&lt;td width=&quot;351&quot;&gt;同collect_set()，但是不会对字段进行去重&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;56&quot;&gt;concat_ws(split,struct)&lt;/td&gt;
&lt;td width=&quot;351&quot;&gt;将struct类型的字段按照split进行分割成字符串(struct仅支持string和array&amp;lt;&amp;gt;类型)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;56&quot;&gt;cast(column as type)&lt;/td&gt;
&lt;td width=&quot;351&quot;&gt;转换数据类型(column列转换为type类型)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;注意:当split被包含在&quot;&quot;之中的时候需要使用四个\进行转义[比如在hive -e &quot;&quot;中执行split函数]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python hljs&quot;&gt;&lt;code class=&quot;python&quot;/&gt;&lt;code class=&quot;python&quot;/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;2.常用的条件判断以及数据清洗函数&lt;/h3&gt;
&lt;p&gt;在使用hive处理数据过程中，通常我们需要对相关数据进行清洗转换，此时我们可能会使用一些条件判断以及默认值处理函数。&lt;/p&gt;
&lt;div class=&quot;table-box&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;函数名&lt;/th&gt;
&lt;th&gt;作用描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;IF( Test Condition, True Value, False Value )&lt;/td&gt;
&lt;td&gt;判断条件，满足即为True值，不满足即为False值&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CASE Statement&lt;/td&gt;
&lt;td&gt;多条件判断&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;parse_url()&lt;/td&gt;
&lt;td&gt;通常用于清洗url相关函数，提供了常用的url解析功能&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;parse_url_tuple()&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;regexp_replace()&lt;/td&gt;
&lt;td&gt;正则表达式替换&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;regexp_extract()&lt;/td&gt;
&lt;td&gt;正则表达式解析&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;COALESCE(column,'')&lt;/td&gt;
&lt;td&gt;hive中的空值转换(hive中的空值为NULL，而存储到hdfs中会以\N来存储)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-ruby hljs&quot;&gt;&lt;code class=&quot;ruby&quot;/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;3. hive高级函数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;row_number() over()&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;三、hive常用的环境变量&lt;/h2&gt;

&lt;div class=&quot;table-box&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;环境变量&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;11.5&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;set hive.cli.print.header=true&lt;/td&gt;
&lt;td&gt;设置查询时显示表头&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;set hive.exec.dynamic.partition=true&lt;/td&gt;
&lt;td&gt;开启动态分区&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;set hive.exec.dynamic.partition.mode=nonstrict&lt;/td&gt;
&lt;td&gt;设置动态分区模式为非严格&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;set hive.exec.max.dynamic.partitions.pernode = 1000&lt;/td&gt;
&lt;td&gt;设置每个执行MR的节点上最大分区数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;set hive.exec.max.dynamic.partitions=1000&lt;/td&gt;
&lt;td&gt;设置所有MR节点上最大总分区数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;SET SERDEPROPERTIES('serialization.null.format' = '\N')&lt;/td&gt;
&lt;td&gt;设置hive空值存储方式为'\N'(此时存储在HDFS中时'\N',查询显示为NULL)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;rich_pages&quot; src=&quot;https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/UdK9ByfMT2NZSOY21trjlOtCxGBVOiblpNh7MXIhL14LpfbJdT2skqK2KnlAR0YbjWBiae9swibQof1tpicTBOE1Mw/640?wx_fmt=jpeg&quot; alt=&quot;640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;点赞和转发是最大的支持~&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 24 Apr 2019 14:51:00 +0000</pubDate>
<dc:creator>王知无</dc:creator>
<og:description>一、Hive的几种数据模型 内部表 (Table 将数据保存到Hive 自己的数据仓库目录中：/usr/hive/warehouse) 外部表 (External Table 相对</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/importbigdata/p/10765543.html</dc:identifier>
</item>
<item>
<title>「拥抱开源, 又见 .NET」系列第三次线下活动简报 - .NET西安社区</title>
<link>http://www.cnblogs.com/xiandnc/p/10765346.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiandnc/p/10765346.html</guid>
<description>
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424220906904-1553581417.png&quot; alt=&quot;&quot; width=&quot;674&quot; height=&quot;164&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;「拥抱开源, 又见 .NET」&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;随着 .NET Core的发布和开源，.NET又重新回到人们的视野。 自2016年 .NET Core 1.0 发布以来，其强大的生命力让越来越多技术爱好者对她的未来满怀憧憬，越来越多的平台、框架热衷于为.NET Core不断更新的版本提供最有力的支持，如基于.NET Core开源API网关开发库 Ocelot，基于.NET Standard的ABP框架。 2019年4月20日 .NET西安社区第三次线下分享交流会如期举行并取得圆满成功；以下是活动本次活动的精彩内容。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;strong&gt;&lt;span&gt;活动全家福&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424221224562-778919965.png&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;296&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424221443635-211129264.png&quot; alt=&quot;&quot; width=&quot;279&quot; height=&quot;218&quot;/&gt;          &lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424221453375-1195205005.png&quot; alt=&quot;&quot; width=&quot;279&quot; height=&quot;218&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424221541555-1026981553.png&quot; alt=&quot;&quot; width=&quot;279&quot; height=&quot;218&quot;/&gt;          &lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424221549124-828320315.png&quot; alt=&quot;&quot; width=&quot;279&quot; height=&quot;218&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;明星讲师&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424222338637-972006609.png&quot; alt=&quot;&quot; width=&quot;120&quot; height=&quot;120&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 刘毅&lt;/p&gt;
&lt;p&gt;曾长期参与财务管理系统的架构设计和开发，拥有多年.NET开发经验，擅长分析解决软件系统的性能问题，对DDD有自己的理解，持续关注和改进软件开发中的最佳实践。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424222406790-400729852.png&quot; alt=&quot;&quot; width=&quot;120&quot; height=&quot;120&quot;/&gt;&lt;/p&gt;
&lt;p&gt;王健&lt;br/&gt;热爱技术的90后大叔， .NET西安社区联系人，有着多年电商行业开发经验，热衷于研究学习优秀开源项目。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424222429889-969082961.png&quot; alt=&quot;&quot; width=&quot;120&quot; height=&quot;120&quot;/&gt;&lt;/p&gt;
&lt;p&gt;张思楚&lt;br/&gt;海外业务部，大型团队 TechnicalPrinciple, 拥有超过10年软件开发及项目管理经验，多项Web专利技术发明人，畅销Web产品SpreadWeb架构师。&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;话题简介&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;话题一：深入浅出 ABP Framework&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分享人：刘毅&lt;br/&gt;话题简介：ASP.NET Boilerplate（ABP）是一个开源且文档齐全的应用程序框架。 它不仅仅是一个框架，它还提供了一个基于领域驱动设计的强大架构模型，并考虑了所有最佳实践。本话题围绕ABP为ABP.NET Web开发者带来的便捷强大的开箱即用功能展开，并以其中几个feature切入来详细讲解其中的工作原理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;话题二：基于Ocelot + IdentityServer4构建.NET Core微服务网关&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分享人：王健&lt;br/&gt;话题简介：网关作为微服务间交互的中间人，它承载着服务的统一认证授权，请求限流，路由转发等重要职责。Ocelot是基于.NET Core实现的轻量级开源网关实现，它具有非常强的易用性和扩展性，能够很容易的实现定制化需求。本次我将结合IdentityServer4来实现网关的统一认证服务。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;话题三：Verifying Microservice by Contract Test in .NET Core PACT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分享人：张思楚&lt;br/&gt;话题简介：微服务架构的系统中，存在着大量的服务，每个服务开放出接口（作为provider），接口可以被很多其他服务调用（consume）。接口API是服务提供者和服务消费者之间的契约，理论上，只要测试了双方的实现都完全符合API，就可以保证它们能够正常的集成到一起；但在现实场景中，对API难以给出非常精确的定义，覆盖测试完整API的工作量也会非常巨大，再加上随着API的演进，要验证兼容性更是很麻烦。消费者驱动契约（Consumer Driven Contract）测试试图解决这个问题。它从接口的消费者出发，记录下消费者使用接口的各种场景，以此作为契约，验证接口的提供者是否符合。本次话题将剖析契约测试在微服务中起到的API质量保障功效，比较单元测试，集成测试，E2E测试，找出使用场景和痛点，并在.NET Core下实践落地契约测试。&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;活动反馈&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;整体满意度&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424222652889-1843484931.png&quot; alt=&quot;&quot; width=&quot;594&quot; height=&quot;216&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;话题一：深入浅出 ABP Framework&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424222732529-1768850687.png&quot; alt=&quot;&quot; width=&quot;594&quot; height=&quot;216&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;话题二：基于Ocelot + IdentityServer4构建.NET Core微服务网关&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424222821309-23225980.png&quot; alt=&quot;&quot; width=&quot;594&quot; height=&quot;216&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;话题三：Verifying Microservice by Contract Test in .NET Core PACT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424222916648-1226535424.png&quot; alt=&quot;&quot; width=&quot;594&quot; height=&quot;216&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;了解到了新技术，ABP框架等 ；学习到了看待问题的新思想，业务拆分、code逻辑分层设计 ；&lt;/li&gt;
&lt;li&gt;结识一群好伙伴&lt;/li&gt;
&lt;li&gt;学习到了abp 网关 授权 测试等方面的知识&lt;/li&gt;
&lt;li&gt;新的测试方法，abp框架更深入的细节流程，深入理解 .net core网&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;特别鸣谢&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;感谢刘毅、王健和张思楚三位讲师&lt;/li&gt;
&lt;li&gt;感谢Marketing &amp;amp; Admin对「拥抱开源, 又见 .NET」第三次线下分享交流活动的大力支持&lt;/li&gt;
&lt;li&gt;感谢张思楚、张阳、罗磊、李胤龙和王健组织本次活动&lt;/li&gt;
&lt;li&gt;感谢阿布、何疆乐、刘文龙、董磊、杨婕、庞抗等志愿者协助社区布置活动现场，维护活动内外场秩序。&lt;/li&gt;
&lt;li&gt;非常感谢大家的鼎力支持，是你们的支持和付出，促成了 .NET西安社区的成立，也促成了西安地区第三次 .NET线下分享交流会的圆满成功！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后的最后，期待大家对 .NET西安社区持续关注，更期待大家线上、线下分享，以下是 .NET西安社区公众号及博客：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424223149885-143616948.png&quot; alt=&quot;&quot;/&gt;                                         &lt;img src=&quot;https://img2018.cnblogs.com/blog/1413706/201904/1413706-20190424223158333-1226490091.png&quot; alt=&quot;&quot; width=&quot;297&quot; height=&quot;232&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 24 Apr 2019 14:37:00 +0000</pubDate>
<dc:creator>.NET西安社区</dc:creator>
<og:description>「拥抱开源, 又见 .NET」 随着 .NET Core的发布和开源，.NET又重新回到人们的视野。 自2016年 .NET Core 1.0 发布以来，其强大的生命力让越来越多技术爱好者对她的未来满</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiandnc/p/10765346.html</dc:identifier>
</item>
<item>
<title>请给你的短信验证码接口加上SSL双向验证 - jiulang</title>
<link>http://www.cnblogs.com/kewei/p/10765421.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kewei/p/10765421.html</guid>
<description>&lt;h3 id=&quot;序言&quot;&gt;序言&lt;/h3&gt;
&lt;p&gt;去年年底闲来几天，有位同事专门在网上找一些注册型的app和网站，研究其短信接口是否安全，半天下来找到30来家，一些短信接口由于分析难度原因，没有继续深入，但差不多挖掘到20来个，可以肆意被调用，虽然不能控制短信内容，但可以被恶意消耗，或者用于狂发信息给那些不喜欢的人。&lt;/p&gt;
&lt;h3 id=&quot;漏洞分析&quot;&gt;漏洞分析&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;短信接收方无法约束&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于是注册型接口，接收方往往都是平台内不存在的手机号，所以无法约束。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;接口请求方无法约束&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于是http(s)接口，任何人都可以请求，只要简单分析你的接口。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;调用频次无法约束&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般的，接口开发者可能会想到通过抓取接口请求者的ip，进行频次约束，但实现是，他们拿到只是请求者的公网ip，有可能一个体量很大的局域网用户，接口开发者抓取到的都是他们的同一个公网ip，所以通过ip约束在很多场景下是不能使用的。&lt;/p&gt;
&lt;h3 id=&quot;漏洞原因&quot;&gt;漏洞原因&lt;/h3&gt;
&lt;p&gt;原因其实很简单，接口开发者无法知道哪些请求是合理的，有些请求是不合理或恶意的，因为所有请求者都没有身份信息。&lt;/p&gt;
&lt;h3 id=&quot;漏洞填补&quot;&gt;漏洞填补&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;如果你的注册功能是web页面，最好加上验证码功能，但使用便利性会打折。&lt;/li&gt;
&lt;li&gt;如果你的注册功能是手机端，那就上SSL双向验证，中间人既无法分析你的接口，也无法发起请求连接到你接口服务，更不用说请求你的接口。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;ssltls双向验证&quot;&gt;SSL/TLS双向验证&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;单向验证&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们平时浏览器请求的https网页，其实是SSL/TLS单向的客户端验证服务端的证书，也就是服务端不要求客户端有公认的证书，但客户端是要求服务端必须提供受信任的数字证书颁发机构证书。中间传输的数据是加密安全的，但服务端是无法得到能代表客户端的身份信息的，而且，客户端的请求加密数据是可以间接被拦截、解析、重构数据包再发送到服务端的（你可以了解Fiddler是怎么做到分析https接口的）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;双向验证&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;双向验证是指在单向验证的基础上，服务端也需要验证客户端的证书，只有客户端持有服务端认定的指定证书，服务端才允许客户端通过SSL握手，否则直接关闭tcp连接。对于需要双向验证的https接口，Fiddler也是无能为力，因为它自己也连接到不到服务端。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;客户端证书&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;客户端证书我们不需要花钱去购买，使用openssl tools来自颁发就可以，服务端一般验证其thumdata是否满足就可以了。&lt;/p&gt;
&lt;h3 id=&quot;安全的asp.net-core短信接口&quot;&gt;安全的&lt;code&gt;asp.net core&lt;/code&gt;短信接口&lt;/h3&gt;
&lt;p&gt;回到实际干活撸代码阶段，我们可以把短信接口独立出来，做单独一个服务，其提供的只有短信功能的接口，接口必须双向证书验证，使用 kestrel ，我们很容易加入验证客户端的代码逻辑。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static IWebHostBuilder CreateWebHostBuilder(string[] args)
{
    return WebHost.CreateDefaultBuilder(args)
        .UseKestrel((context, options) =&amp;gt;
        {
            var port = context.Configuration.GetValue&amp;lt;int&amp;gt;(&quot;SSL:Port&quot;);
            var serverCertFile = context.Configuration.GetValue&amp;lt;string&amp;gt;(&quot;SSL:ServerCertFile&quot;);
            var serverCertPassword = context.Configuration.GetValue&amp;lt;string&amp;gt;(&quot;SSL:ServerCertPassword&quot;);
                    
            options.Listen(IPAddress.Any, port, listenOptions =&amp;gt;
            {
                var httpsConnectionAdapterOptions = new HttpsConnectionAdapterOptions()
                {
                    ServerCertificate = new X509Certificate2(serverCertFile, serverCertPassword),
                    ClientCertificateMode = ClientCertificateMode.RequireCertificate,
                    ClientCertificateValidation = (cer, chain, error) =&amp;gt;
                    {
                        // 你的验证逻辑
                    },
                };
                listenOptions.UseHttps(httpsConnectionAdapterOptions);
            });
        })
        .UseStartup&amp;lt;Startup&amp;gt;();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Openssl生成cer、key和pfx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;openssl genrsa -out openssl.key 1024
openssl req -new -x509 -key openssl.key -out openssl.cer -days 3650 -subj /CN=localhost
openssl pkcs12 -export -out openssl.pfx -inkey openssl.key -in openssl.cer&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你在Postman请求，设置cer和key文件到postman即可，如果在.net环境请求这些接口，你需要使用pfx，你可以简单理解pfx就是前两者使用一个可选的密码进行打包的得到单一文件。关于证书本身的内容非常庞大，本文不作任何解读。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;.net的客户端怎么设置证书&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里先卖个关子，使用&lt;a href=&quot;https://github.com/dotnetcore/WebApiClient&quot;&gt;WebApiClient&lt;/a&gt;库，可以轻松完成你想要的。&lt;/p&gt;
</description>
<pubDate>Wed, 24 Apr 2019 14:28:00 +0000</pubDate>
<dc:creator>jiulang</dc:creator>
<og:description>序言 去年年底闲来几天，有位同事专门在网上找一些注册型的app和网站，研究其短信接口是否安全，半天下来找到30来家，一些短信接口由于分析难度原因，没有继续深入，但差不多挖掘到20来个，可以肆意被调用，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kewei/p/10765421.html</dc:identifier>
</item>
<item>
<title>通过模拟JDK中的动态代理,由浅入深讲解动态代理思想. - 炭烧生蚝</title>
<link>http://www.cnblogs.com/tanshaoshenghao/p/10765360.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tanshaoshenghao/p/10765360.html</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;个人认为动态代理在设计模式中算是比较难的, 本篇文章将从无到有, 从一个简单代码示例开始迭代, 逐步深入讲解动态代理思想.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;&lt;li&gt;假设现在有一个坦克类, 它实现了&lt;code&gt;Moveable&lt;/code&gt;接口, 里面有一个&lt;code&gt;move()&lt;/code&gt;移动的方法. 代码如下:&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class Tank implements Moveable{
    @Override
    public void move(){
        System.out.println(&quot;坦克开始移动...&quot;);
        try {
            Thread.sleep((long) (Math.random() * 5000));
            System.out.println(&quot;坦克移动结束...&quot;);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

interface Moveable{
    public void move();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;为了能计算坦克移动所花费的时间我们打算在坦克的&lt;code&gt;move()&lt;/code&gt;方法的前后添加一些代码, 用于记录坦克&lt;code&gt;move()&lt;/code&gt;方法的执行时间.&lt;/li&gt;
&lt;li&gt;我们将使用代理类, 并在代理类中执行上述操作, 首先展示的是以&lt;code&gt;继承&lt;/code&gt;的方式进行代理.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class MoveTimeProxy1 extends Tank{
    @Override
    public void move() {
        long start = System.currentTimeMillis();//开始时间
        super.move();//调用坦克的move()方法
        long end = System.currentTimeMillis();//结束时间
        System.out.println(&quot;执行该方法用了&quot; + (end - start) + &quot;毫秒&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;接着我们展示另外一种通过&lt;code&gt;聚合&lt;/code&gt;实现代理的方式&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class MoveTimeProxy2 implements Moveable{
    Tank tank;

    public MoveTimeProxy2(Tank tank){
        this.tank = tank;
    }

    @Override
    public void move() {
        long start = System.currentTimeMillis();//开始时间
        tank.move();//调用坦克的move()方法
        long end = System.currentTimeMillis();//结束时间
        System.out.println(&quot;执行该方法用了&quot; + (end - start) + &quot;毫秒&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;以上两种均为实现代理的方式, 如果要分个优劣的话, &lt;code&gt;继承&lt;/code&gt;方式的代理会差一些. 想想看, 如果现在除了记录时间, 还要记录日志的话, 则要创建一个新的&lt;code&gt;继承&lt;/code&gt;代理类并重写&lt;code&gt;move()&lt;/code&gt;方法. 如果需求变更, 需要先记录日志, 再记录时间的话, 又要创建一个新的&lt;code&gt;继承&lt;/code&gt;代理类. 如此下去, 代理类的创建将没完没了.&lt;/li&gt;
&lt;li&gt;相比之下, &lt;code&gt;聚合&lt;/code&gt;实现的代理类则灵活得多. 每一个&lt;code&gt;聚合&lt;/code&gt;代理类能够实现一种代理, 并且代理的顺序是可以替换的. 请看代码(&lt;code&gt;聚合&lt;/code&gt;代理类的代码有所修改)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class ProxyTest {

    public static void main(String[] args) {
        TimeProxy tp = new TimeProxy(new Tank());
        LogProxy lp = new LogProxy(tp);
        lp.move();
    }
}

class TimeProxy implements Moveable{//记录时间的代理
    Moveable m;//不再持有Tank引用, 而是持有Moveable接口引用

    public TimeProxy(Moveable m){
        this.m = m;
    }

    @Override
    public void move() {
        long start = System.currentTimeMillis();//开始时间
        m.move();//调用move()方法
        long end = System.currentTimeMillis();//结束时间
        System.out.println(&quot;执行该方法用了&quot; + (end - start) + &quot;毫秒&quot;);
    }
}

class LogProxy implements Moveable{//打印日志的代理
    Moveable m;

    public LogProxy(Moveable m){
        this.m = m;
    }

    @Override
    public void move() {
        System.out.println(&quot;日志: 开始测试坦克移动...&quot;);
        m.move();
        System.out.println(&quot;日志: 坦克移动结束...&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;


&lt;ul&gt;&lt;li&gt;看完上面的例子, 大家应该对&lt;code&gt;代理&lt;/code&gt;一词有更深刻的理解. 但是上面的代码中, 为坦克生成的代理类&lt;code&gt;TimeProxy&lt;/code&gt;是我们在代码中写死的, 所以这顶多算个静态代理, 如何通过动态的方式产生代理呢?&lt;/li&gt;
&lt;li&gt;在讲解动态代理之前我们需要明确的是, 上面的&lt;code&gt;聚合&lt;/code&gt;代理方式通过持有某个接口的引用完成代理, 所以我们是针对某个接口产生代理, 而不是对某个具体的对象产生代理.&lt;/li&gt;
&lt;li&gt;为了模拟&lt;code&gt;Java&lt;/code&gt;中的实现, 我们创建一个&lt;code&gt;Proxy&lt;/code&gt;类, 里面提供一个&lt;code&gt;newProxyInstance()&lt;/code&gt;方法, 用于返回一个代理. 我们希望通过如下代码就能动态生成一个代理.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static void main(String[] args) {
    Tank tank = new Tank();
    Moveable m = (Moveable)Proxy.newProxyInstance();//动态获得一个代理
    m.move();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;从上面的代码可以看到我们甚至都不需要知道代理类的名字就可以动态的获取一个代理. 我们以上述的记录时间的代理为例子, 获取一个时间代理类.&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;newProxyInstance()&lt;/code&gt;方法中, 我们先把原来&lt;code&gt;TimeProxy&lt;/code&gt;的源代码以字符串的方式存放, 再通过写入文件的方式创建出&lt;code&gt;TimeProxy.java&lt;/code&gt;文件. 然后通过Java原生的编译api将&lt;code&gt;TimeProxy.java&lt;/code&gt;编译成&lt;code&gt;TimeProxy.class&lt;/code&gt;文件. 最后把该class文件加载到内存中, 并调用其构造方法创建对象, 返回该代理对象.&lt;/li&gt;
&lt;li&gt;温馨提示: 本段代码不是专门教大家如何动态生成类, 因为有很多开源工具比如CGLib, ASM等可以更专业地完成这件事情, 这里仅使用Java原生API完成, 主要为了展现动态生成一个代理对象背后的过程.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class Proxy{
    public static Object newProxyInstance() throws Exception {
        //把整个TimeProxy类的实现写入字符串, 通过编译这一字符串得到TimeProxy对象
        String src = &quot;package designPattern.proxy;\n&quot; +
                &quot;\n&quot; +
                &quot;class TimeProxy implements Moveable{\n&quot; +
                &quot;    Moveable m;//不再持有Tank引用, 而是持有Moveable接口引用\n&quot; +
                &quot;\n&quot; +
                &quot;    public TimeProxy(Moveable m){\n&quot; +
                &quot;        this.m = m;\n&quot; +
                &quot;    }\n&quot; +
                &quot;\n&quot; +
                &quot;    @Override\n&quot; +
                &quot;    public void move() {\n&quot; +
                &quot;        long start = System.currentTimeMillis();//开始时间\n&quot; +
                &quot;        m.move();//调用坦克的move()方法\n&quot; +
                &quot;        long end = System.currentTimeMillis();//结束时间\n&quot; +
                &quot;        System.out.println(\&quot;执行该方法用了\&quot; + (end - start) + \&quot;毫秒\&quot;);\n&quot; +
                &quot;    }\n&quot; +
                &quot;}&quot;;
        String filename = System.getProperty(&quot;user.dir&quot;)
                + &quot;/src/main/java/designPattern/proxy/TimeProxy.java&quot;;//文件名(生成类的路径)
        File f = new File(filename);
        FileWriter fw = new FileWriter(f);
        fw.write(src);
        fw.flush();
        fw.close();

        //编译
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();//拿到系统当前默认的编译器, 即Javac
        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);
        Iterable units = fileManager.getJavaFileObjects(filename);//得到文件对象
        JavaCompiler.CompilationTask t = compiler.getTask(null, fileManager, null, null, null, units);
        t.call();//进行编译
        fileManager.close();

        //把class文件加载进内存并创建对象
        URL[] urls = new URL[]{new URL(&quot;file:/&quot; + System.getProperty(&quot;user.dir&quot;) + &quot;/src&quot;)};
        URLClassLoader ul = new URLClassLoader(urls);
        Class c = ul.loadClass(&quot;designPattern.proxy.TimeProxy&quot;);//拿到class对象

        Constructor ctr = c.getConstructor(Moveable.class);//拿到参数为Moveable的构造方法
        Moveable m = (Moveable)ctr.newInstance(new Tank());//创建代理对象
        return m;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;我们继续对上面的代码进行优化, 目前代码中指定生成的是实现了&lt;code&gt;moveable&lt;/code&gt;接口的代理对象. 而上面我们提到过动态代理是基于某个接口的(聚合型代理), 所以我们希望能够动态地指定接口, 并生成相应的代理类.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class ProxyTest {

    public static void main(String[] args) throws Exception {
        Tank tank = new Tank();
        Moveable m = (Moveable)Proxy.newProxyInstance(Moveable.class);//传入接口参数动态获得一个代理
        m.move();
    }
}

class Proxy{
    public static Object newProxyInstance(Class intfce) throws Exception {
        //把整个TimeProxy类的实现写入字符串, 通过编译这一字符串得到TimeProxy对象
        String methodStr = &quot;&quot;;
        String n = &quot;\n&quot;;

        Method[] methods = intfce.getMethods();//拿到接口中的所有方法
        for(Method m : methods){//拼接方法
            methodStr += &quot;    @Override\n&quot; +
                    &quot;    public void &quot; + m.getName() + &quot;() {\n&quot; +
                    &quot;        long start = System.currentTimeMillis();//开始时间\n&quot; +
                    &quot;        m.move();//调用坦克的move()方法\n&quot; +
                    &quot;        long end = System.currentTimeMillis();//结束时间\n&quot; +
                    &quot;        System.out.println(\&quot;执行该方法用了\&quot; + (end - start) + \&quot;毫秒\&quot;);\n&quot; +
                    &quot;    }\n&quot;;
        }
        //拼接出整个类
        String src = &quot;package designPattern.proxy;\n&quot; +
                &quot;\n&quot; +
                &quot;class TimeProxy implements &quot; + intfce.getName() + &quot;{\n&quot; +
                &quot;    Moveable m;//不再持有Tank引用, 而是持有Moveable接口引用\n&quot; +
                &quot;\n&quot; +
                &quot;    public TimeProxy(Moveable m){\n&quot; +
                &quot;        this.m = m;\n&quot; +
                &quot;    }\n&quot; +
                &quot;\n&quot; + methodStr +
                &quot;}&quot;;

        String filename = System.getProperty(&quot;user.dir&quot;)
                + &quot;/src/main/java/designPattern/proxy/TimeProxy.java&quot;;//文件名(生成类的路径)
        File f = new File(filename);
        FileWriter fw = new FileWriter(f);
        fw.write(src);
        fw.flush();
        fw.close();

        //编译
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();//拿到系统当前默认的编译器, 即Javac
        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);
        Iterable units = fileManager.getJavaFileObjects(filename);//得到文件对象
        JavaCompiler.CompilationTask t = compiler.getTask(null, fileManager, null, null, null, units);
        t.call();//进行编译
        fileManager.close();

        //把class文件加载进内存并创建对象
        URL[] urls = new URL[]{new URL(&quot;file:/&quot; + System.getProperty(&quot;user.dir&quot;) + &quot;/src&quot;)};
        URLClassLoader ul = new URLClassLoader(urls);
        Class c = ul.loadClass(&quot;designPattern.proxy.TimeProxy&quot;);//拿到class对象

        Constructor ctr = c.getConstructor(Moveable.class);//拿到参数为Moveable的构造方法
        Object m = ctr.newInstance(new Tank());//创建代理对象
        return m;
    }
}&lt;/code&gt;
&lt;/pre&gt;


&lt;ul&gt;&lt;li&gt;在上一个版本中我们已经能够动态地生成一个代理对象了, 但是还有一个最重要的也是最难的点没有实现. 在上面的代码中我们对被代理对象进行的操作是记录方法的运行时间, 是在代码里面写死的. 我们希望可以让用户自定义增强手段, 比如说记录时间(&lt;code&gt;TimeProxy&lt;/code&gt;), 输出日志(&lt;code&gt;LogProxy&lt;/code&gt;), 事务操作等等.&lt;/li&gt;
&lt;li&gt;对于这种在被代理对象前后进行增强的操作, 我们定义一个&lt;code&gt;InvocationHandler&lt;/code&gt;接口, 并在它的实现类中给出具体的操作. 我们以初始的记录时间操作为例.&lt;/li&gt;
&lt;li&gt;下面给出完整的代码, 如果看不懂可以结合代码后面的总结来看.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class ProxyTest {

    public static void main(String[] args) throws Exception {
        Tank tank = new Tank();
        InvocationHandler h = new TimeHandler(tank);
        Moveable m = (Moveable)Proxy.newProxyInstance(Moveable.class, h);//动态获得一个代理
        m.move();
    }
}

interface InvocationHandler{
    public void invoke(Object o, Method m);//参数o指定执行对象(代理对象, 可能会用到), m指定执行的方法
}

class TimeHandler implements InvocationHandler{
    private Object target;

    public TimeHandler(Object target){
        this.target = target;
    }

    @Override
    public void invoke(Object o, Method m) {
        long start = System.currentTimeMillis();//这行是用户自己加的增强代码
        try{
            m.invoke(target);
        } catch (Exception e) {
            e.printStackTrace();
        }
        long end = System.currentTimeMillis();//这行是用户自己加的增强代码
        System.out.println(&quot;执行该方法用了&quot; + (end - start) + &quot;毫秒&quot;);//这行是用户自己加的增强代码
    }
}

class Proxy{
    public static Object newProxyInstance(Class intfce, InvocationHandler h) throws Exception {
        //把整个TimeProxy类的实现写入字符串, 通过编译这一字符串得到TimeProxy对象
        String methodStr = &quot;&quot;;

        Method[] methods = intfce.getMethods();//拿到接口中的所有方法
        for(Method m : methods){//拼接方法
            methodStr += &quot;    @Override\n&quot; +
                    &quot;    public void &quot; + m.getName() + &quot;() {\n&quot; +
                    &quot;        try{\n&quot; +
                    &quot;        Method md = &quot; + intfce.getName() + &quot;.class.getMethod(\&quot;&quot; + m.getName() + &quot;\&quot;);\n&quot; +
                    &quot;        h.invoke(this, md);\n&quot; +
                    &quot;        }catch(Exception e){e.printStackTrace();}\n&quot; +
                    &quot;    }\n&quot;;
        }
        //拼接出整个类
        String src = &quot;package designPattern.proxy;\n&quot; +
                &quot;import java.lang.reflect.Method;\n&quot; +
                &quot;\n&quot; +
                &quot;class $Proxy1 implements &quot; + intfce.getName() + &quot;{\n&quot; +
                &quot;    designPattern.proxy.InvocationHandler h;\n&quot; +
                &quot;\n&quot; +
                &quot;    public $Proxy1(InvocationHandler h){\n&quot; +
                &quot;        this.h = h;\n&quot; +
                &quot;    }\n&quot; +
                &quot;\n&quot; + methodStr +
                &quot;}&quot;;

        String filename = System.getProperty(&quot;user.dir&quot;)
                + &quot;/src/main/java/designPattern/proxy/$Proxy1.java&quot;;//文件名(生成类的路径)
        File f = new File(filename);
        FileWriter fw = new FileWriter(f);
        fw.write(src);
        fw.flush();
        fw.close();

        //编译
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();//拿到系统当前默认的编译器, 即Javac
        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);
        Iterable units = fileManager.getJavaFileObjects(filename);//得到文件对象
        JavaCompiler.CompilationTask t = compiler.getTask(null, fileManager, null, null, null, units);
        t.call();//进行编译
        fileManager.close();

        //把class文件加载进内存并创建对象
        URL[] urls = new URL[]{new URL(&quot;file:/&quot; + System.getProperty(&quot;user.dir&quot;) + &quot;/src&quot;)};
        URLClassLoader ul = new URLClassLoader(urls);
        Class c = ul.loadClass(&quot;designPattern.proxy.$Proxy1&quot;);//拿到class对象

        Constructor ctr = c.getConstructor(InvocationHandler.class);//拿到参数为Moveable的构造方法
        Object m = ctr.newInstance(h);//创建代理对象
        return m;
    }
}

class Tank implements Moveable{
    @Override
    public void move(){
        System.out.println(&quot;坦克开始移动...&quot;);
        try {
            Thread.sleep((long) (Math.random() * 5000));
            System.out.println(&quot;坦克移动结束...&quot;);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

//输出结果
坦克开始移动...
坦克移动结束...
执行该方法用了4302毫秒&lt;/code&gt;
&lt;/pre&gt;


&lt;ul&gt;&lt;li&gt;在这里有必要对上面整个动态代理的实现总结一下.&lt;/li&gt;
&lt;li&gt;首先要明确我们是基于一个接口进行代理, 比如本文中给出了一个&lt;code&gt;Moveable&lt;/code&gt;接口, 而&lt;code&gt;Tank&lt;/code&gt;坦克类实现了&lt;code&gt;Moveable&lt;/code&gt;接口, 并实现了&lt;code&gt;move()&lt;/code&gt;方法.&lt;/li&gt;
&lt;li&gt;现在我们想对&lt;code&gt;move()&lt;/code&gt;方法进行增强, 比如说记录这个方法的执行时间, 我们需要动态地获得一个代理类.&lt;/li&gt;
&lt;li&gt;而且为了让增强具有可扩展性, 我们创建了&lt;code&gt;InvocationHandler&lt;/code&gt;接口, 里面有一个&lt;code&gt;invoke(Object o, Method m)&lt;/code&gt;方法. 调用&lt;code&gt;invoke()&lt;/code&gt;方法时, 需要传递两个参数, 一个是代理对象的引用&lt;code&gt;o&lt;/code&gt;(可能会用上), 另一个是需要被增强的方法, 本例中是&lt;code&gt;move()&lt;/code&gt;方法.&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;invoke()&lt;/code&gt;方法中我们可以在被增强方法的前后添加增强代码.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public void invoke(Object o, Method m) {
    long start = System.currentTimeMillis();//这行是用户自己加的增强代码
    try{
        m.invoke(target);//执行被增强的方法, 例子中的move()
    } catch (Exception e) {
        e.printStackTrace();
    }
    long end = System.currentTimeMillis();//这行是用户自己加的增强代码
    System.out.println(&quot;执行该方法用了&quot; + (end - start) + &quot;毫秒&quot;);//这行是用户自己加的增强代码
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;补充一点, 要创建&lt;code&gt;InvocationHandler&lt;/code&gt;的具体对象, 比如这里的&lt;code&gt;TimeHander&lt;/code&gt;, 需要传入被增强的对象, 这里是&lt;code&gt;tank&lt;/code&gt;, 因为被增强方法&lt;code&gt;move()&lt;/code&gt;需要由被增强对象执行.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;搞定&lt;code&gt;InvocationHandler&lt;/code&gt;后, 回头看为我们动态产生代理的&lt;code&gt;Proxy&lt;/code&gt;类, 这个类需要有一个属性字段&lt;code&gt;InvocationHandler h&lt;/code&gt;, 因为在进行增强时, 调用的是&lt;code&gt;InvocationHandler&lt;/code&gt;实现类中的&lt;code&gt;invoke()&lt;/code&gt;方法. 在&lt;code&gt;动态代理进阶&lt;/code&gt;一节的最后版本代码中, 我们动态生成的代理类源码是这样的:&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class $Proxy1 implements designPattern.proxy.Moveable{
    designPattern.proxy.InvocationHandler h;

    public $Proxy1(InvocationHandler h){
        this.h = h;
    }

    @Override
    public void move() {
        try{
            Method md = designPattern.proxy.Moveable.class.getMethod(&quot;move&quot;);
            h.invoke(this, md);
        }catch(Exception e){e.printStackTrace();}
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;由源码可以看到当调用代理类的&lt;code&gt;move()&lt;/code&gt;方法进行增强时, 会调用&lt;code&gt;InvocaitonHandler&lt;/code&gt;的实现类中的&lt;code&gt;invoke()&lt;/code&gt;方法, 传入代理类自身和被增强的方法, 这样就可以使用自定义的增强代码进行增强了.&lt;/li&gt;
&lt;/ul&gt;&lt;img src=&quot;https://www.cnblogs.com/images/cnblogs_com/tanshaoshenghao/1426602/o_%e5%8a%a8%e6%80%81%e4%bb%a3%e7%90%86.png&quot;/&gt;
&lt;ul&gt;&lt;li&gt;动态代理有什么好处?&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;对于任意一个实现了某个接口的类, 我们都可以对其实现的接口中定义的方法进行增强.&lt;/li&gt;
&lt;li&gt;可以在被增强方法前后自定义增强的逻辑.&lt;/li&gt;
&lt;li&gt;可以进行多层嵌套代理.&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Wed, 24 Apr 2019 14:17:00 +0000</pubDate>
<dc:creator>炭烧生蚝</dc:creator>
<og:description>[TOC] 个人认为动态代理在设计模式中算是比较难的, 本篇文章将从无到有, 从一个简单代码示例开始迭代, 逐步深入讲解动态代理思想. 场景引入 假设现在有一个坦克类, 它实现了 接口, 里面有一个</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tanshaoshenghao/p/10765360.html</dc:identifier>
</item>
<item>
<title>SpringBoot + Spring Security 学习笔记（五）实现短信验证码+登录功能 - 木鲸鱼</title>
<link>http://www.cnblogs.com/mujingyu/p/10765098.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mujingyu/p/10765098.html</guid>
<description>&lt;p&gt;在 Spring Security 中基于表单的认证模式，默认就是密码帐号登录认证，那么对于短信验证码+登录的方式，Spring Security 没有现成的接口可以使用，所以需要自己的封装一个类似的认证过滤器和认证处理器实现短信认证。&lt;/p&gt;
&lt;h2 id=&quot;短信验证码认证&quot;&gt;短信验证码认证&lt;/h2&gt;
&lt;h3 id=&quot;验证码对象类设计&quot;&gt;验证码对象类设计&lt;/h3&gt;
&lt;p&gt;和图片验证码一样，需要自己封装一个验证码对象，用来生成手机验证码并发送给手机。因为图片验证码和手机验证码对象的区别就在于前者多了个图片对象，所以两者共同部分抽象出来可以设计成一个&lt;code&gt;ValidateCode&lt;/code&gt;类，这个类里面只存放验证码和过期时间，短信验证码直接使用这个类即可：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import java.time.LocalDateTime;

import lombok.Data;

@Data
public class ValidateCode {

    private String code;

    private LocalDateTime expireTime;

    public ValidateCode(String code, int expireIn){
        this.code = code;
        this.expireTime = LocalDateTime.now().plusSeconds(expireIn);
    }
    
    public boolean isExpried() {
        return LocalDateTime.now().isAfter(getExpireTime());
    }

    public ValidateCode(String code, LocalDateTime expireTime) {
        super();
        this.code = code;
        this.expireTime = expireTime;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;图片验证码承继此类：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import java.awt.image.BufferedImage;
import java.time.LocalDateTime;

import org.woodwhales.king.validate.code.ValidateCode;

import lombok.Data;
import lombok.EqualsAndHashCode;

@Data
@EqualsAndHashCode(callSuper=false)
public class ImageCode extends ValidateCode {

    private BufferedImage image;

    public ImageCode(BufferedImage image, String code, int expireId) {
        super(code, LocalDateTime.now().plusSeconds(expireId));
        this.image = image;
    }

    public ImageCode(BufferedImage image, String code, LocalDateTime localDateTime) {
        super(code, localDateTime);
        this.image = image;
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;验证码生成类设计&quot;&gt;验证码生成类设计&lt;/h3&gt;
&lt;p&gt;由于图片和短信类均可以生成相应的验证码，所以直接设计一个验证码生成接口，具体实现类根据业务进行实现：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import org.springframework.web.context.request.ServletWebRequest;

public interface ValidateCodeGenerator {

    ValidateCode generate(ServletWebRequest request);

}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;这里的传参设计成了&lt;code&gt;ServletWebRequest&lt;/code&gt;是能够根据前端请求中的参数进行不同的业务实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目前实现累只有图片生成器和验证码生成器：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 图片验证码生成器
@Component(&quot;imageCodeGenerator&quot;)
public class ImageCodeGenerator implements ValidateCodeGenerator {

    /**
     * 生成图形验证码
     * @param request
     * @return
     */
    @Override
    public ValidateCode generate(ServletWebRequest request) {
        
        ……

        return new ImageCode(image, sRand, SecurityConstants.EXPIRE_SECOND);

    }
}

// 短信验证码生成器
@Component(&quot;smsCodeGenerator&quot;)
public class SmsCodeGenerator implements ValidateCodeGenerator {

    @Override
    public ValidateCode generate(ServletWebRequest request) {
        String code = RandomStringUtils.randomNumeric(SecurityConstants.SMS_RANDOM_SIZE);
        return new ValidateCode(code, SecurityConstants.SMS_EXPIRE_SECOND);
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;短信验证码发送接口设计&quot;&gt;短信验证码发送接口设计&lt;/h3&gt;
&lt;p&gt;短信验证码生成之后，需要设计接口依赖短信服务提供商进行验证码发送，因此至少设计一个统一的接口，供短信服务提供商生成发送短信服务：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public interface SmsCodeSender {
    //　至少需要手机号和验证码
    void send(String mobile, String code);

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了演示，设计一个虚拟的默认短信发送器，只在日志文件中打印一行log：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import org.springframework.stereotype.Service;

import lombok.extern.slf4j.Slf4j;

/**
 * 短信发送模拟
 * @author Administrator
 *
 */
@Slf4j
@Service
public class DefaultSmsCodeSender implements SmsCodeSender {

    @Override
    public void send(String mobile, String code) {
        log.debug(&quot;send to mobile ：{}, code : {}&quot;, mobile, code);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;短信验证码请求controller&quot;&gt;短信验证码请求Controller&lt;/h3&gt;
&lt;p&gt;所有验证码的请求都在统一的&lt;code&gt;ValidateCodeController&lt;/code&gt;里，这里注入了两个验证码生成器&lt;code&gt;ValidateCodeGenerator&lt;/code&gt;，后期可以利用 spring 的&lt;strong&gt;依赖查找/搜索&lt;/strong&gt;技巧来重构代码，另外所有的请求也是可以做成动态配置，这里临时全部 hardCode 在代码里：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import java.io.IOException;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.social.connect.web.SessionStrategy;
import org.springframework.web.bind.ServletRequestBindingException;
import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.ServletWebRequest;
import org.woodwhales.king.core.commons.SecurityConstants;
import org.woodwhales.king.validate.code.ValidateCode;
import org.woodwhales.king.validate.code.ValidateCodeGenerator;
import org.woodwhales.king.validate.code.image.ImageCode;
import org.woodwhales.king.validate.code.sms.DefaultSmsCodeSender;

@RestController
public class ValidateCodeController {
    
    @Autowired
    private SessionStrategy sessionStrategy;

    @Autowired
    private ValidateCodeGenerator imageCodeGenerator;
    
    @Autowired
    private ValidateCodeGenerator smsCodeGenerator;
    
    @Autowired
    private DefaultSmsCodeSender defaultSmsCodeSender;
    
    @GetMapping(&quot;code/image&quot;)
    public void createImageCode(HttpServletRequest request, HttpServletResponse response) throws IOException {
        ImageCode imageCode = (ImageCode)imageCodeGenerator.generate(new ServletWebRequest(request));
        sessionStrategy.setAttribute(new ServletWebRequest(request), SecurityConstants.SESSION_KEY, imageCode);
        ImageIO.write(imageCode.getImage(), &quot;JPEG&quot;, response.getOutputStream());
    }
    
    @GetMapping(&quot;code/sms&quot;)
    public void createSmsCode(HttpServletRequest request, HttpServletResponse response) throws ServletRequestBindingException {
        ValidateCode smsCode = smsCodeGenerator.generate(new ServletWebRequest(request));
        sessionStrategy.setAttribute(new ServletWebRequest(request), SecurityConstants.SESSION_KEY, smsCode);
        String mobile = ServletRequestUtils.getStringParameter(request, &quot;mobile&quot;);
        defaultSmsCodeSender.send(mobile, smsCode.getCode());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上述代码中可以看出图片验证码和短信验证码的生成请求逻辑是相似的：首先调用验证码生成接口生成验证码，然后将验证码放入 session 中，最后将验证码返回给前端或者用户。因此这个套路流程可以抽象成一个模板方法，以增强代码的可维护性和可扩展性。&lt;/p&gt;
&lt;p&gt;用一张图来表述重构后的代码结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pqeh4k41f.bkt.clouddn.com/spring-security-1-%E9%AA%8C%E8%AF%81%E7%A0%81%E5%A4%84%E7%90%86%E5%99%A8%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;随机验证码过滤器设计&quot;&gt;随机验证码过滤器设计&lt;/h3&gt;
&lt;p&gt;由于图片和手机都会产生验证码，后期还可以通过邮件发送随机验证码的方式进行随机验证码登录验证，因此将随机验证码的认证可以独立封装在一个随机验证码过滤器中，并且这个过滤器在整个 spring security 过滤器链的最前端（它是第一道认证墙）。&lt;/p&gt;
&lt;p&gt;随机验证码过滤器只要继承 spring 框架中的&lt;code&gt;OncePerRequestFilter&lt;/code&gt;即可保证这个过滤器在请求来的时候只被调用一次，具体代码实现参见文末源码。&lt;/p&gt;
&lt;p&gt;这里重点解释一下如何将随机验证码过滤器配置到 spring security 过滤器认证最前端，需要重写&lt;code&gt;SecurityConfigurerAdapter&lt;/code&gt;的&lt;code&gt;configure()&lt;/code&gt;方法，并将自定义的过滤器放到&lt;code&gt;AbstractPreAuthenticatedProcessingFilter&lt;/code&gt;过滤器之前即可：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.config.annotation.SecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.DefaultSecurityFilterChain;
import org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;
import org.springframework.stereotype.Component;

import javax.servlet.Filter;


@Component
public class ValidateCodeSecurityConfig extends SecurityConfigurerAdapter&amp;lt;DefaultSecurityFilterChain, HttpSecurity&amp;gt; {

    @Autowired
    private Filter validateCodeFilter;

    @Override
    public void configure(HttpSecurity http) throws Exception {
        super.configure(http);
        http.addFilterBefore(validateCodeFilter, AbstractPreAuthenticatedProcessingFilter.class);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;短信验证码认证-1&quot;&gt;短信验证码认证&lt;/h2&gt;
&lt;p&gt;在自定义短信登录认证流程之前，建议可以移步到之前的文章：&lt;a href=&quot;https://juejin.im/post/5cb3416ee51d456e63760454&quot;&gt;SpringBoot + Spring Security 学习笔记（二）安全认证流程源码详解&lt;/a&gt;，了解清除用户密码的认证流程才能更容易理解下面这张经典的流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pqeh4k41f.bkt.clouddn.com/spring-security-2-%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;左侧是用户+密码的认证流程，整体的流程就是经过用户名+密码认证过滤器认证，将请求封装成 token 并注入到 AutheticationMananger 中，之后由默认的认证校验器进行校验，在校验的过程中会调用 UserDetailsService 接口进行 token 校验，当校验成功之后，就会将已经认证的 token 放到 SecurityContextHolder 中。&lt;/p&gt;
&lt;p&gt;同理，由于短信登录方式只需要使用随机验证码进行校验而不需要密码登录功能，当校验成功之后就认为用户认证成功了，因此需要仿造左侧的流程开发自定义的短信登录认证 token，这个 token 只需要存放手机号即可，在token 校验的过程中，不能使用默认的校验器了，需要自己开发校验当前自定义 token 的校验器，最后将自定义的过滤器和校验器配置到 spring security 框架中即可。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注意：短信随机验证码的验证过程是在 SmsCodeAuthticationFIlter 之前就已经完成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;短信登录认证token&quot;&gt;短信登录认证Token&lt;/h3&gt;
&lt;p&gt;仿造&lt;code&gt;UsernamePasswordAuthenticationToken&lt;/code&gt;设计一个属于短信验证的认证 token 对象，为什么要自定义一个短信验证的 token，spring security 框架不只提供了用户名+密码的验证方式，用户认证是否成功，最终看的就是&lt;code&gt;SecurityContextHolder&lt;/code&gt;对象中是否有对应的&lt;code&gt;AuthenticationToken&lt;/code&gt;，因此要设计一个认证对象，当认证成功之后，将其设置到&lt;code&gt;SecurityContextHolder&lt;/code&gt;即可。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import java.util.Collection;

import org.springframework.security.authentication.AbstractAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.SpringSecurityCoreVersion;

public class SmsCodeAuthenticationToken extends AbstractAuthenticationToken {

    private static final long serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID;

    private final Object principal;

    public SmsCodeAuthenticationToken(Object mobile) {
        super(null);
        this.principal = mobile;
        setAuthenticated(false);
    }

    public SmsCodeAuthenticationToken(Object mobile, Collection&amp;lt;? extends GrantedAuthority&amp;gt; authorities) {
        super(authorities);
        this.principal = mobile;
        super.setAuthenticated(true); // must use super, as we override
    }

    public Object getPrincipal() {
        return this.principal;
    }
    
    public Object getCredentials() {
        return null;
    }

    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {
        if (isAuthenticated) {
            throw new IllegalArgumentException(&quot;Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead&quot;);
        }

        super.setAuthenticated(false);
    }

    @Override
    public void eraseCredentials() {
        super.eraseCredentials();
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从&lt;code&gt;AuthenticationToken&lt;/code&gt;接口可以看到，现在框架中有我们自己定义短信登录的 token 了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pqeh4k41f.bkt.clouddn.com/spring-security-3-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AF%B9%E8%B1%A1.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;短信登录认证过滤器&quot;&gt;短信登录认证过滤器&lt;/h3&gt;
&lt;p&gt;短信验证码的过滤器设计思路同理，仿造&lt;code&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;过滤器，这里再次提醒，短信随机验证码&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import java.util.Objects;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.util.Assert;
import org.woodwhales.core.constants.SecurityConstants;

public class SmsCodeAuthenticationFilter extends AbstractAuthenticationProcessingFilter {

    /**
     * 请求中的参数
     */
    private String mobileParameter = SecurityConstants.DEFAULT_PARAMETER_NAME_MOBILE;
    
    private boolean postOnly = true;

    public SmsCodeAuthenticationFilter() {
        super(new AntPathRequestMatcher(SecurityConstants.DEFAULT_LOGIN_PROCESSING_URL_MOBILE, &quot;POST&quot;));
    }

    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {
        if (postOnly &amp;amp;&amp;amp; !request.getMethod().equals(&quot;POST&quot;)) {
            throw new AuthenticationServiceException(&quot;Authentication method not supported: &quot; + request.getMethod());
        }

        // 获取请求中的参数值
        String mobile = obtainMobile(request);

        if (Objects.isNull(mobile)) {
            mobile = &quot;&quot;;
        }

        mobile = mobile.trim();
        
        SmsCodeAuthenticationToken authRequest = new SmsCodeAuthenticationToken(mobile);

        // Allow subclasses to set the &quot;details&quot; property
        setDetails(request, authRequest);

        return this.getAuthenticationManager().authenticate(authRequest);
    }

    /**
     * 获取手机号
     */
    protected String obtainMobile(HttpServletRequest request) {
        return request.getParameter(mobileParameter);
    }

    protected void setDetails(HttpServletRequest request, SmsCodeAuthenticationToken authRequest) {
        authRequest.setDetails(authenticationDetailsSource.buildDetails(request));
    }

    public void setMobileParameter(String mobileParameter) {
        Assert.hasText(mobileParameter, &quot;Mobile parameter must not be empty or null&quot;);
        this.mobileParameter = mobileParameter;
    }

    public void setPostOnly(boolean postOnly) {
        this.postOnly = postOnly;
    }

    public final String getMobileParameter() {
        return mobileParameter;
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;短信验证码过滤器也成为了&lt;code&gt;AbstractAuthenticationProcessingFilter&lt;/code&gt;其中一个子类，后期需要注册到安全配置中，让它成为安全认证过滤链中的一环：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pqeh4k41f.bkt.clouddn.com/spring-security-4-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E8%BF%87%E6%BB%A4%E5%99%A8.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;短信登录认证校验器&quot;&gt;短信登录认证校验器&lt;/h3&gt;
&lt;p&gt;短信登录认证校验器的作用就是调用&lt;code&gt;UserDetailsService&lt;/code&gt;的&lt;code&gt;loadUserByUsername()&lt;/code&gt;方法对 authenticationToken 进行校验，所有校验器的根接口为：&lt;code&gt;AuthenticationProvider&lt;/code&gt;，因此自定义的短信登录认证校验器实现这个接口，重写&lt;code&gt;authenticate()&lt;/code&gt;即可：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import java.util.Objects;

import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.InternalAuthenticationServiceException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;

import lombok.Data;

@Data
public class SmsCodeAuthenticationProvider implements AuthenticationProvider {

    private UserDetailsService userDetailsService;
    
    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {

        SmsCodeAuthenticationToken authenticationToken = (SmsCodeAuthenticationToken) authentication;

        /**
         * 调用 {@link UserDetailsService}
         */
        UserDetails user = userDetailsService.loadUserByUsername((String)authenticationToken.getPrincipal());

        if (Objects.isNull(user)) {
            throw new InternalAuthenticationServiceException(&quot;无法获取用户信息&quot;);
        }

        SmsCodeAuthenticationToken authenticationResult = new SmsCodeAuthenticationToken(user, user.getAuthorities());

        authenticationResult.setDetails(authenticationToken.getDetails());

        return authenticationResult;
    }

    @Override
    public boolean supports(Class&amp;lt;?&amp;gt; authentication) {
        return SmsCodeAuthenticationToken.class.isAssignableFrom(authentication);
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意，这里使用&lt;code&gt;@Data&lt;/code&gt;注解生成 setter 和 getter 方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pqeh4k41f.bkt.clouddn.com/spring-security-5-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9F%AD%E4%BF%A1%E6%A0%A1%E9%AA%8C%E5%99%A8.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;短信登录认证安全配置设计&quot;&gt;短信登录认证安全配置设计&lt;/h3&gt;
&lt;p&gt;设计一个封装好的短信登录认证配置类，以供外部调用者直接调用：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.SecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.DefaultSecurityFilterChain;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.stereotype.Component;

@Component
public class SmsCodeAuthenticationSecurityConfig extends SecurityConfigurerAdapter&amp;lt;DefaultSecurityFilterChain, HttpSecurity&amp;gt; {

    @Autowired
    private AuthenticationSuccessHandler myAuthenticationSuccessHandler;

    @Autowired
    private AuthenticationFailureHandler myAuthenticationFailureHandler;

    @Autowired
    private UserDetailsService userDetailsService;

    @Override
    public void configure(HttpSecurity http) throws Exception {

        SmsCodeAuthenticationFilter smsCodeAuthenticationFilter = new SmsCodeAuthenticationFilter();
        smsCodeAuthenticationFilter.setAuthenticationManager(http.getSharedObject(AuthenticationManager.class));
        smsCodeAuthenticationFilter.setAuthenticationSuccessHandler(myAuthenticationSuccessHandler);
        smsCodeAuthenticationFilter.setAuthenticationFailureHandler(myAuthenticationFailureHandler);

        // 获取验证码提供者
        SmsCodeAuthenticationProvider smsCodeAuthenticationProvider = new SmsCodeAuthenticationProvider();
        smsCodeAuthenticationProvider.setUserDetailsService(userDetailsService);

        // 将短信验证码校验器注册到 HttpSecurity， 并将短信验证码过滤器添加在 UsernamePasswordAuthenticationFilter 之前
        http.authenticationProvider(smsCodeAuthenticationProvider).addFilterAfter(smsCodeAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当外部想要引用这个封装好的配置，只需要在自定义的&lt;code&gt;AbstractChannelSecurityConfig&lt;/code&gt;安全认证配置中添加进去即可，注意这个配置对象使用了&lt;code&gt;@Component&lt;/code&gt;注解，注册到了spring 中，所以可以直接通过&lt;code&gt;@Autowired&lt;/code&gt;引用，如：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;
import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;
import org.springframework.stereotype.Component;
import org.woodwhales.core.authentication.sms.AbstractChannelSecurityConfig;
import org.woodwhales.core.authentication.sms.SmsCodeAuthenticationSecurityConfig;
import org.woodwhales.core.validate.code.config.ValidateCodeSecurityConfig;

@Component
public class BrowserSecurityConfig extends AbstractChannelSecurityConfig {

    @Autowired
    private SmsCodeAuthenticationSecurityConfig smsCodeAuthenticationSecurityConfig;

    @Autowired
    private ValidateCodeSecurityConfig validateCodeSecurityConfig;
    
    @Autowired
    protected AuthenticationSuccessHandler authenticationSuccessHandler;

    @Autowired
    protected AuthenticationFailureHandler authenticationFailureHandler;
    
    @Autowired
    private UserDetailsService userDetailsService;
    
    @Autowired
    private DataSource dataSource;

    @Override
    protected void configure(HttpSecurity http) throws Exception {

        http.formLogin()
            .loginPage(&quot;/authentication/require&quot;) // 登录页面回调
            .successHandler(authenticationSuccessHandler)// 认证成功回调
            .failureHandler(authenticationFailureHandler)
        
            // 以下验证码的校验配置
            .and()
            .apply(validateCodeSecurityConfig) 
    
            // 以下短信登录认证的配置
            .and()
            .apply(smsCodeAuthenticationSecurityConfig)
                
            // 记住我的配置
            .and()
            .rememberMe()
            .tokenRepository(persistentTokenRepository())
            .tokenValiditySeconds(3600) // 设置记住我的过期时间
            .userDetailsService(userDetailsService)
            
            .and()
            // 请求做授权配置
            .authorizeRequests() 
            // 以下请求路径不需要认证
            .antMatchers(&quot;/authentication/require&quot;,
                    &quot;/authentication/mobile&quot;,
                    &quot;/login&quot;,
                    &quot;/code/*&quot;,
                    &quot;/&quot;)
            .permitAll() 
            .anyRequest() // 任何请求
            .authenticated() // 都需要身份认证
            
            // 暂时将防护跨站请求伪造的功能置为不可用
            .and()
            .csrf().disable();
    }
    
    /**
     * 配置TokenRepository
     * @return
     */
    @Bean
    public PersistentTokenRepository persistentTokenRepository() {
        JdbcTokenRepositoryImpl jdbcTokenRepository = new JdbcTokenRepositoryImpl();
        jdbcTokenRepository.setDataSource(dataSource);
        // 初始化记住我的数据库表，建议通过看源码直接创建出来
        // jdbcTokenRepository.setCreateTableOnStartup(true);
        return jdbcTokenRepository;
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的配置中有些代码出现了冗余配置，可以全部封装成抽象模板，完成一些基础的配置。&lt;/p&gt;
&lt;p&gt;项目源码：&lt;a href=&quot;https://github.com/woodwhales/spring-security&quot; class=&quot;uri&quot;&gt;https://github.com/woodwhales/spring-security&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考源码：&lt;a href=&quot;https://github.com/imooc-java/security&quot; class=&quot;uri&quot;&gt;https://github.com/imooc-java/security&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 24 Apr 2019 13:31:00 +0000</pubDate>
<dc:creator>木鲸鱼</dc:creator>
<og:description>在 Spring Security 中基于表单的认证模式，默认就是密码帐号登录认证，那么对于短信验证码+登录的方式，Spring Security 没有现成的接口可以使用，所以需要自己的封装一个类似的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mujingyu/p/10765098.html</dc:identifier>
</item>
<item>
<title>基于springboot搭建的web系统架构 - Oven5217</title>
<link>http://www.cnblogs.com/Oven5217/p/10765052.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Oven5217/p/10765052.html</guid>
<description>&lt;p&gt;　　从接触springboot开始，便深深的被它的简洁性深深的折服了，精简的配置，方便的集成，使我再也不想用传统的ssm框架来搭建项目，一大堆的配置文件，维护起来很不方便，集成的时候也要费力不少。从第一次使用springboot开始，一个简单的main方法，甚至一个配置文件也不需要（当然我是指的没有任何数据交互，没有任何组件集成的情况），就可以把一个web项目启动起来，下面总结一下自从使用springboot依赖，慢慢完善的自己的一个web系统的架构，肯定不是最好的，但平时自己用着很舒服。&lt;/p&gt;
&lt;h3&gt;1. 配置信息放到数据库里边&lt;/h3&gt;
&lt;p&gt;　　个人比较不喜欢配置文件，因此有一个原则，配置文件能不用就不用，配置信息能少些就少些，配置内容能用代码写坚决不用xml，因此我第一个想到的就是，能不能把springboot的配置信息写到数据库里，在springboot启动的时候自动去加载，而在application.properties里边只写一个数据源。最终找到了方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1062633/201904/1062633-20190424205812027-2006703161.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注意图中箭头指向的两行，构造了一个properties对象，然后将这个对象放到了springboot的启动对象application中，properties是一个类似map的key-value容器，springboot可以将其中的东西当做成原来application.properties中的内容一样，因此在properties对象的内容也就相当于写在了application.properties文件中。知道了这个之后就简单了，我们将原本需要写在application.properties中的所有配置信息写在数据库中，在springboot启动的时候从数据库中读取出来放到properties对象中，然后再将这个对象set到application中即可。上图中PropertyConfig.loadProperties()方法就是进行了这样的操作，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('de3a1ce8-b8d9-4c34-931f-121afbd00d5f')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_de3a1ce8-b8d9-4c34-931f-121afbd00d5f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_de3a1ce8-b8d9-4c34-931f-121afbd00d5f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('de3a1ce8-b8d9-4c34-931f-121afbd00d5f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_de3a1ce8-b8d9-4c34-931f-121afbd00d5f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PropertyConfig {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;     * 生成Properties对象
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Properties loadProperties() {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         Properties properties = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Properties();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        loadPropertiesFromDb(properties);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; properties;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;     * 从数据库中加载配置信息
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; loadPropertiesFromDb(Properties properties) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         InputStream in = PropertyConfig.&lt;span&gt;class&lt;/span&gt;.getClassLoader().getResourceAsStream(&quot;application.properties&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            properties.load(in);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         String profile = properties.getProperty(&quot;profile&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         String driverClassName = properties.getProperty(&quot;spring.datasource.driver-class-name&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         String url = properties.getProperty(&quot;spring.datasource.url&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         String userName = properties.getProperty(&quot;spring.datasource.username&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         String password = properties.getProperty(&quot;spring.datasource.password&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         Connection conn = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         PreparedStatement pstmt = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         ResultSet rs = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            Class.forName(driverClassName);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             String tableName = &quot;t_config_dev&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&quot;pro&quot;&lt;span&gt;.equals(profile)) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 tableName = &quot;t_config_pro&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             String sql = &quot;select * from &quot; +&lt;span&gt; tableName;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             conn =&lt;span&gt; DriverManager.getConnection(url, userName, password);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             pstmt =&lt;span&gt; conn.prepareStatement(sql);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             rs =&lt;span&gt; pstmt.executeQuery();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt;&lt;span&gt; (rs.next()) {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                 String key = rs.getString(&quot;key&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                 String value = rs.getString(&quot;value&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;                properties.put(key, value);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (conn != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                    conn.close();
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (pstmt != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;                    pstmt.close();
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (rs != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;                    rs.close();
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;                e.printStackTrace();
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; 
&lt;span&gt;65&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;PropertyConfig.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　代码中，首先使用古老的jdbc技术，读取数据库t_config表，将表中的key-value加载到properties中，代码中profile是为了区分开发环境和生产环境，以便于确定从那张表中加载配置文件，数据库中的配置信息如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1062633/201904/1062633-20190424210053616-644932664.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这样以后，application.properties中就不用再写很多的配置信息，而且，如果将这些配置信息放到数据库中之后，如果起多个应用可是公用这一张表，这样也可以做到配置信息的公用的效果，这样修改以后，配置文件中就只有数据源的信息了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1062633/201904/1062633-20190424210115966-932012845.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　profile代表使用哪个环境，代码中可以根据这个信息来从开发表中加载配置信息还是从生产表中加载配置信息。&lt;/p&gt;
&lt;h3&gt;2. 统一返回结果&lt;/h3&gt;
&lt;p&gt;　　一般web项目中，大多数都是接口，以返回json数据为主，因此统一一个返回格式很必要。在本示例中，建了一个BaseController，所有的Controller都需要继承这个类，在这个BaseController中定义了成功的返回和失败的返回，在其他业务的Controller中，返回的时候，只需要return super.success(xxx)或者return super.fail(xxx, xxx)即可，例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1062633/201904/1062633-20190424210223226-1785940239.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　说到这里，返回给前台的状态码，建议也是封装成一个枚举类型，不建议直接返回200、400之类的，不方便维护也不方便查询。那么BaseController里做了什么呢？如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1062633/201904/1062633-20190424210250817-1162627235.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　定义一个ResultInfo类，该类只有两个属性，一个是Integer类型的状态码，一个是泛型，用于成功时返回给前台的数据，和失败时返回给前台的提示信息。&lt;/p&gt;
&lt;h3&gt;3. 统一异常捕获&lt;/h3&gt;
&lt;p&gt;　　在上一步中的Controller代码中看到抛出了一个自定义的异常，在Controller中，属于最外层的代码了，这个时候如果有异常就不能直接抛出去了，这里再抛出去就没有人处理了，服务器只能返回给前台一个错误，用户体验不好。因此，建议所有的Controller代码都用try-catch包裹，捕获到异常后统一进行处理，然后再给前台一个合理的提示信息。在上一步中抛出了一个自定义异常：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; MyException(ResultEnum.DELETE_ERROR.getCode(), &quot;删除员工出错，请联系网站管理人员。&quot;, e);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　该自定义异常有三个属性，分别是异常状态码，异常提示信息，以及捕获到的异常对象，接下来定义一个全局的异常捕获，统一对异常进行处理：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Slf4j
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;@ResponseBody
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;@ControllerAdvice
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GlobalExceptionHandle {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;     * 处理捕获的异常
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     @ExceptionHandler(value = Exception.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Object handleException(Exception e, HttpServletRequest request, HttpServletResponse resp) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         log.error(AppConst.ERROR_LOG_PREFIX + &quot;请求地址：&quot; +&lt;span&gt; request.getRequestURL().toString());
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         log.error(AppConst.ERROR_LOG_PREFIX + &quot;请求方法：&quot; +&lt;span&gt; request.getMethod());
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         log.error(AppConst.ERROR_LOG_PREFIX + &quot;请求者IP：&quot; +&lt;span&gt; request.getRemoteAddr());
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         log.error(AppConst.ERROR_LOG_PREFIX + &quot;请求参数：&quot; +&lt;span&gt; ParametersUtils.getParameters(request));
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; MyException) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             MyException myException =&lt;span&gt; (MyException) e;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             log.error(AppConst.ERROR_LOG_PREFIX +&lt;span&gt; myException.getMsg(), myException.getE());
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (myException.getCode().equals(ResultEnum.SEARCH_PAGE_ERROR.getCode())) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 JSONObject result = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JSONObject();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 result.put(&quot;code&quot;&lt;span&gt;, myException.getCode());
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 result.put(&quot;msg&quot;&lt;span&gt;, myException.getMsg());
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (myException.getCode().equals(ResultEnum.ERROR_PAGE.getCode())) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 resp.sendRedirect(&quot;/err&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResultInfo&amp;lt;&amp;gt;&lt;span&gt;(myException.getCode(), myException.getMsg());
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; UnauthorizedException) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             resp.sendRedirect(&quot;/noauth&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             log.error(AppConst.ERROR_LOG_PREFIX + &quot;错误信息：&quot;&lt;span&gt;, e);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         resp.sendRedirect(&quot;/err&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　统一捕获异常之后，可以进行相应的处理，我这里没有进行特殊的处理，只是进行了一下区分，获取数据的接口抛出的异常，前台肯定是使用的ajax请求，因此返回前台一个json格式的信息，提示出错误内容。如果是跳转页面抛出的异常，类似404之类的，直接跳转到自定义的404页面。补充一点，springboot项目默认是有/error路由的，返回的就是error页面，所以，如果你在你的项目中定义一个error.html的页面，如果报404错误，会自动跳转到该页面。&lt;br/&gt;　　补充，统一异常处理类中使用了一个注解@Slf4j，该注解是lombok包中的，项目中加入了该依赖后，再也不用写繁琐的get、set等代码，当然类似的像上边的声明log对象的代码也不用写了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1062633/201904/1062633-20190424210553797-1566927452.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;4. 日志配置文件区分环境&lt;/h3&gt;
&lt;p&gt;　　本示例使用的是logback日志框架。需要在resources目录中添加logback.xml配置文件，这是一个比较头疼的地方，我本来想一个配置文件也没有的，奈何我也不知道怎么讲这个日志的配置文件放到数据库中，所以暂时先这么着了，好在几乎没有需要改动它的时候。&lt;/p&gt;
&lt;p&gt;　　我在项目中添加了两个日志的配置文件，分别是logback-dev.xml和logback-pro.xml可以根据不同的环境决定使用哪个配置文件，在数据库配置表中（相当于写在了application.properties中）添加一条配置logging.config=classpath:logback-dev.xml来区分使用哪个文件作为日志的配置文件，配置文件内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('cf426e7e-2b8f-4d9e-8b9e-20af77d4da6c')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_cf426e7e-2b8f-4d9e-8b9e-20af77d4da6c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cf426e7e-2b8f-4d9e-8b9e-20af77d4da6c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('cf426e7e-2b8f-4d9e-8b9e-20af77d4da6c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cf426e7e-2b8f-4d9e-8b9e-20af77d4da6c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;LOG_HOME&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/Users/oven/log/demo&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; INFO日志定义 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;INFO&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;File&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${LOG_HOME}/demo.info.log&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;File&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rollingPolicy &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;FileNamePattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${LOG_HOME}/demo.info.%d{yyyy-MM-dd}.log&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;FileNamePattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;maxHistory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;180&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;maxHistory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rollingPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appender&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; ERROR日志定义 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;ERROR&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;File&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${LOG_HOME}/demo.error.log&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;File&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rollingPolicy &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;FileNamePattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${LOG_HOME}/demo.error.%d{yyyy-MM-dd}.log&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;FileNamePattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;maxHistory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;180&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;maxHistory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rollingPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appender&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; DEBUG日志定义 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;DEBUG&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;File&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${LOG_HOME}/demo.debug.log&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;File&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rollingPolicy &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;FileNamePattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${LOG_HOME}/demo.debug.%d{yyyy-MM-dd}.log&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;FileNamePattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;maxHistory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;180&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;maxHistory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rollingPolicy&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appender&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 定义控制台日志信息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;STDOUT&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appender&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;root &lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;=&quot;INFO&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender-ref &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;STDOUT&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;logger &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;com.oven.controller&quot;&lt;/span&gt;&lt;span&gt; level&lt;/span&gt;&lt;span&gt;=&quot;ERROR&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender-ref &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;ERROR&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;logger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;logger &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;com.oven.exception&quot;&lt;/span&gt;&lt;span&gt; level&lt;/span&gt;&lt;span&gt;=&quot;ERROR&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender-ref &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;ERROR&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;logger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;logger &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;com.oven.mapper&quot;&lt;/span&gt;&lt;span&gt; level&lt;/span&gt;&lt;span&gt;=&quot;DEBUG&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender-ref &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;DEBUG&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;logger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;logger &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;com.oven.aop&quot;&lt;/span&gt;&lt;span&gt; level&lt;/span&gt;&lt;span&gt;=&quot;INFO&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender-ref &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;INFO&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;logger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt; 
&lt;span&gt;67&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;logback.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　在配置文件中，定义了三个级别的日志，info、debug和error分别输出到三个文件中，便于查看。在生成日志文件的时候，进行了按照日志进行拆分的配置，每一个级别的日志每一天都会重新生成一个，根据日期进行命名，超过180天的日志将自动会删除。当然你还可以按照日志大小进行拆分，我这里没有进行这项的配置。&lt;/p&gt;
&lt;h3&gt;5. 全局接口请求记录&lt;/h3&gt;
&lt;p&gt;　　进行全局的接口请求记录，可以记录接口的别调用情况，然后进行一些统计和分析，在本示例中，只是将全局的接口调用情况记录到了info日志中，没有进行相应的分析操作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Slf4j
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;@Aspect
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WebLogAspect {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     @Pointcut(&quot;execution(public * com.oven.controller.*.*(..))&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; webLog() {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     @Before(&quot;webLog()&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doBefore() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取请求&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         ServletRequestAttributes attributes =&lt;span&gt; (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         @SuppressWarnings(&quot;ConstantConditions&quot;) HttpServletRequest request =&lt;span&gt; attributes.getRequest();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 记录请求内容&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         log.info(AppConst.INFO_LOG_PREFIX + &quot;请求地址：&quot; +&lt;span&gt; request.getRequestURL().toString());
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         log.info(AppConst.INFO_LOG_PREFIX + &quot;请求方法：&quot; +&lt;span&gt; request.getMethod());
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         log.info(AppConst.INFO_LOG_PREFIX + &quot;请求者IP：&quot; +&lt;span&gt; request.getRemoteAddr());
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         log.info(AppConst.INFO_LOG_PREFIX + &quot;请求参数：&quot; +&lt;span&gt; ParametersUtils.getParameters(request));
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     @AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;webLog()&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doAfterReturning(Object ret) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 请求返回的内容&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (ret &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; ResultInfo) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             log.info(AppConst.INFO_LOG_PREFIX + &quot;返回结果：&quot; +&lt;span&gt; ((ResultInfo) ret).getCode().toString());
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;6. 集成shiro实现权限校验&lt;/h3&gt;
&lt;p&gt;　　集成shirl，轻松的实现了权限的管理，如果对shiro不熟悉朋友，还需要先把shiro入门一下才好，shiro的集成一般都需要自定义一个realm，来进行身份认证和授权，因此先来一个自定义realm：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('92956d98-5e97-4a62-accb-80beab1f6b2d')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_92956d98-5e97-4a62-accb-80beab1f6b2d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_92956d98-5e97-4a62-accb-80beab1f6b2d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('92956d98-5e97-4a62-accb-80beab1f6b2d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_92956d98-5e97-4a62-accb-80beab1f6b2d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyShiroRealm &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AuthorizingRealm {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    @Resource
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; MenuService menuService;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    @Resource
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;     * 授权
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         SimpleAuthorizationInfo authorizationInfo = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleAuthorizationInfo();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         User user =&lt;span&gt; (User) principals.getPrimaryPrincipal();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         List&amp;lt;String&amp;gt; permissions =&lt;span&gt; menuService.getAllMenuCodeByUserId(user.getId());
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        authorizationInfo.addStringPermissions(permissions);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; authorizationInfo;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;     * 身份认证
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AuthenticationException {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         UsernamePasswordToken token =&lt;span&gt; (UsernamePasswordToken) authenticationToken;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         String userName =&lt;span&gt; String.valueOf(token.getUsername());
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从数据库获取对应用户名的用户&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         User user =&lt;span&gt; userService.getByUserName(userName);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 账号不存在&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UnknownAccountException(ResultEnum.NO_THIS_USER.getValue());
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;         Md5Hash md5 = &lt;span&gt;new&lt;/span&gt; Md5Hash(token.getPassword(), AppConst.MD5_SALT, 2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 密码错误&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;md5.toString().equals(user.getPassword())) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IncorrectCredentialsException(ResultEnum.PASSWORD_WRONG.getValue());
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 账号锁定&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (user.getStatus().equals(1&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LockedAccountException(ResultEnum.USER_DISABLE.getValue());
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         ByteSource salt =&lt;span&gt; ByteSource.Util.bytes(AppConst.MD5_SALT);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleAuthenticationInfo(user, user.getPassword(), salt, getName());
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;MyShiroRealm.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　自定义完realm后需要一个配置文件但自定义的realm配置到shiro里：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('99649a2a-4cde-4b7f-87fb-a547e5f49c7a')&quot; readability=&quot;38&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_99649a2a-4cde-4b7f-87fb-a547e5f49c7a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_99649a2a-4cde-4b7f-87fb-a547e5f49c7a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('99649a2a-4cde-4b7f-87fb-a547e5f49c7a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_99649a2a-4cde-4b7f-87fb-a547e5f49c7a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Configuration
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ShiroConfig {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ShiroFilterFactoryBean shirFilter(SecurityManager securityManager) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         ShiroFilterFactoryBean shiroFilterFactoryBean = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ShiroFilterFactoryBean();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        shiroFilterFactoryBean.setSecurityManager(securityManager);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         Map&amp;lt;String, String&amp;gt; filterChainDefinitionMap = &lt;span&gt;new&lt;/span&gt; LinkedHashMap&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         filterChainDefinitionMap.put(&quot;/static/**&quot;, &quot;anon&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         filterChainDefinitionMap.put(&quot;/css/**&quot;, &quot;anon&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         filterChainDefinitionMap.put(&quot;/font/**&quot;, &quot;anon&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         filterChainDefinitionMap.put(&quot;/js/**&quot;, &quot;anon&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         filterChainDefinitionMap.put(&quot;/*.js&quot;, &quot;anon&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         filterChainDefinitionMap.put(&quot;/login&quot;, &quot;anon&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         filterChainDefinitionMap.put(&quot;/doLogin&quot;, &quot;anon&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         filterChainDefinitionMap.put(&quot;/**&quot;, &quot;authc&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         shiroFilterFactoryBean.setSuccessUrl(&quot;/&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/noauth&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; shiroFilterFactoryBean;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;     * 凭证匹配器
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; HashedCredentialsMatcher hashedCredentialsMatcher() {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         HashedCredentialsMatcher hashedCredentialsMatcher = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HashedCredentialsMatcher();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         hashedCredentialsMatcher.setHashAlgorithmName(&quot;MD5&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         hashedCredentialsMatcher.setHashIterations(2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; hashedCredentialsMatcher;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MyShiroRealm myShiroRealm() {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         MyShiroRealm myShiroRealm = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyShiroRealm();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        myShiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; myShiroRealm;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SecurityManager securityManager() {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         DefaultWebSecurityManager securityManager = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultWebSecurityManager();
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        securityManager.setRealm(myShiroRealm());
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; securityManager;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;     * 开启shiro aop注解
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager) {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthorizationAttributeSourceAdvisor();
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; authorizationAttributeSourceAdvisor;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt;     @Bean(name = &quot;simpleMappingExceptionResolver&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SimpleMappingExceptionResolver
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;    createSimpleMappingExceptionResolver() {
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         SimpleMappingExceptionResolver r = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleMappingExceptionResolver();
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;         Properties mappings = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Properties();
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;         mappings.setProperty(&quot;DatabaseException&quot;, &quot;databaseError&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;         mappings.setProperty(&quot;UnauthorizedException&quot;, &quot;403&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;        r.setExceptionMappings(mappings);
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         r.setDefaultErrorView(&quot;error&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;         r.setExceptionAttribute(&quot;ex&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; r;
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ShiroConfig.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　身份认证如果简单的理解的话，你可以理解为登录的过程。授权就是授予你权利，代表你在这个系统中有权限做什么动作，具体shiro的内容小伙伴们自行去学习吧。&lt;/p&gt;
&lt;h3&gt;7. 登录校验，安全拦截&lt;/h3&gt;
&lt;p&gt;　　在集成了shiro之后，登录操作就需要使用到自定义的realm了，具体的登录代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f701c596-ea55-4418-b96e-6114cabb17e5')&quot; readability=&quot;47&quot;&gt;&lt;img id=&quot;code_img_closed_f701c596-ea55-4418-b96e-6114cabb17e5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f701c596-ea55-4418-b96e-6114cabb17e5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f701c596-ea55-4418-b96e-6114cabb17e5',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f701c596-ea55-4418-b96e-6114cabb17e5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;89&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;     * 登录操作
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userName 用户名
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; pwd      密码
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     @RequestMapping(&quot;/doLogin&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Object doLogin(String userName, String pwd, HttpServletRequest req) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; MyException {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             Subject subject =&lt;span&gt; SecurityUtils.getSubject();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             UsernamePasswordToken token = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UsernamePasswordToken(userName, pwd);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            subject.login(token);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;             User userInDb =&lt;span&gt; userService.getByUserName(userName);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 登录成功后放入application，防止同一个账户多人登录&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             ServletContext application =&lt;span&gt; req.getServletContext();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             @SuppressWarnings(&quot;unchecked&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             Map&amp;lt;String, String&amp;gt; loginedMap = (Map&amp;lt;String, String&amp;gt;&lt;span&gt;) application.getAttribute(AppConst.LOGINEDUSERS);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (loginedMap == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 loginedMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                application.setAttribute(AppConst.LOGINEDUSERS, loginedMap);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            loginedMap.put(userInDb.getUserName(), req.getSession().getId());
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 登录成功后放入session中&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            req.getSession().setAttribute(AppConst.CURRENT_USER, userInDb);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             logService.addLog(&quot;登录系统！&quot;, &quot;成功！&quot;&lt;span&gt;, userInDb.getId(), userInDb.getNickName(), IPUtils.getClientIPAddr(req));
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;.success(&quot;登录成功！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             User userInDb =&lt;span&gt; userService.getByUserName(userName);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; UnknownAccountException) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 logService.addLog(&quot;登录系统！&quot;, &quot;失败[&quot; + ResultEnum.NO_THIS_USER.getValue() + &quot;]&quot;, 0, &quot;&quot;&lt;span&gt;, IPUtils.getClientIPAddr(req));
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.fail(ResultEnum.NO_THIS_USER.getCode(), ResultEnum.NO_THIS_USER.getValue());
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; IncorrectCredentialsException) {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 logService.addLog(&quot;登录系统！&quot;, &quot;失败[&quot; + ResultEnum.PASSWORD_WRONG.getValue() + &quot;]&quot;&lt;span&gt;, userInDb.getId(), userInDb.getNickName(), IPUtils.getClientIPAddr(req));
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.fail(ResultEnum.PASSWORD_WRONG.getCode(), ResultEnum.PASSWORD_WRONG.getValue());
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; LockedAccountException) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                 logService.addLog(&quot;登录系统！&quot;, &quot;失败[&quot; + ResultEnum.USER_DISABLE.getValue() + &quot;]&quot;&lt;span&gt;, userInDb.getId(), userInDb.getNickName(), IPUtils.getClientIPAddr(req));
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.fail(ResultEnum.USER_DISABLE.getCode(), ResultEnum.USER_DISABLE.getValue());
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; MyException(ResultEnum.UNKNOW_ERROR.getCode(), &quot;登录操作出错，请联系网站管理人员。&quot;&lt;span&gt;, e);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;doLogin&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　身份认证的操作交给了shiro，利用用户名和密码构造一个身份的令牌，调用shiro的login方法，这个时候就会进入自定义reaml的身份认证方法中，也就是上一步中的doGetAuthenticationInfo方法，具体的认证操作看上一步的代码，无非就是账号密码的校验等。身份认证的时候，通过抛出异常的方式给登录操作返回信息，从而在登录方法中判断身份认证失败后的信息，从而返回给前台进行提示。&lt;br/&gt;　　在身份认证通过后，拿到当前登录用户的信息，首先放到session中，便于后续的使用。其次在放到application对象中，防止同一个账号的多次登录。&lt;br/&gt;　　有了身份任何和授权自然就少不了安全校验，在本示例中使用了一个拦截器来实现安全校验的工作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5e211ad3-c149-460d-9568-0d11d8f8d33a')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_5e211ad3-c149-460d-9568-0d11d8f8d33a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5e211ad3-c149-460d-9568-0d11d8f8d33a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5e211ad3-c149-460d-9568-0d11d8f8d33a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5e211ad3-c149-460d-9568-0d11d8f8d33a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SecurityInterceptor &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; HandlerInterceptorAdapter {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; preHandle(HttpServletRequest req, HttpServletResponse resp, Object handler) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         resp.setContentType(&quot;text/plain;charset=UTF-8&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         String servletPath =&lt;span&gt; req.getServletPath();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 放行的请求&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (servletPath.startsWith(&quot;/login&quot;) || servletPath.startsWith(&quot;/doLogin&quot;) || servletPath.equals(&quot;/err&quot;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (servletPath.startsWith(&quot;/error&quot;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             resp.sendRedirect(&quot;/err&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取当前登录用户&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         User user =&lt;span&gt; (User) req.getSession().getAttribute(AppConst.CURRENT_USER);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 没有登录状态下访问系统主页面，都跳转到登录页，不提示任何信息&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (servletPath.startsWith(&quot;/&quot;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 resp.sendRedirect(getDomain(req) + &quot;/login&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 未登录或会话超时&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             String requestType = req.getHeader(&quot;X-Requested-With&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&quot;XMLHttpRequest&quot;.equals(requestType)) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ajax请求&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;                 ResultInfo&amp;lt;Object&amp;gt; resultInfo = &lt;span&gt;new&lt;/span&gt; ResultInfo&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                resultInfo.setCode(ResultEnum.SESSION_TIMEOUT.getCode());
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                resultInfo.setData(ResultEnum.SESSION_TIMEOUT.getValue());
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                resp.getWriter().write(JSONObject.toJSONString(resultInfo));
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             String param = URLEncoder.encode(ResultEnum.SESSION_TIMEOUT.getValue(), &quot;UTF-8&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             resp.sendRedirect(getDomain(req) + &quot;/login?errorMsg=&quot; +&lt;span&gt; param);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查是否被其他人挤出去&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;         ServletContext application =&lt;span&gt; req.getServletContext();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         @SuppressWarnings(&quot;unchecked&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         Map&amp;lt;String, String&amp;gt; loginedMap = (Map&amp;lt;String, String&amp;gt;&lt;span&gt;) application.getAttribute(AppConst.LOGINEDUSERS);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (loginedMap == &lt;span&gt;null&lt;/span&gt;) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可能是掉线了&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;             String requestType = req.getHeader(&quot;X-Requested-With&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&quot;XMLHttpRequest&quot;.equals(requestType)) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ajax请求&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;                 ResultInfo&amp;lt;Object&amp;gt; resultInfo = &lt;span&gt;new&lt;/span&gt; ResultInfo&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                resultInfo.setCode(ResultEnum.LOSE_LOGIN.getCode());
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;                resultInfo.setData(ResultEnum.LOSE_LOGIN.getValue());
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;                resp.getWriter().write(JSONObject.toJSONString(resultInfo));
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;             String param = URLEncoder.encode(ResultEnum.LOSE_LOGIN.getValue(), &quot;UTF-8&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;             resp.sendRedirect(getDomain(req) + &quot;/login?errorMsg=&quot; +&lt;span&gt; param);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         String loginedUserSessionId =&lt;span&gt; loginedMap.get(user.getUserName());
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         String mySessionId =&lt;span&gt; req.getSession().getId();
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; 
&lt;span&gt;63&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;mySessionId.equals(loginedUserSessionId)) {
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;             String requestType = req.getHeader(&quot;X-Requested-With&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&quot;XMLHttpRequest&quot;.equals(requestType)) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ajax请求&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt;                 ResultInfo&amp;lt;Object&amp;gt; resultInfo = &lt;span&gt;new&lt;/span&gt; ResultInfo&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;                resultInfo.setCode(ResultEnum.OTHER_LOGINED.getCode());
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;                resultInfo.setData(ResultEnum.OTHER_LOGINED.getValue());
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;                resp.getWriter().write(JSONObject.toJSONString(resultInfo));
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;             String param = URLEncoder.encode(ResultEnum.OTHER_LOGINED.getValue(), &quot;UTF-8&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;             resp.sendRedirect(getDomain(req) + &quot;/login?errorMsg=&quot; +&lt;span&gt; param);
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt; 
&lt;span&gt;79&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;80&lt;/span&gt; &lt;span&gt;     * 获得域名
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;82&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String getDomain(HttpServletRequest request) {
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt;         String path =&lt;span&gt; request.getContextPath();
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort() +&lt;span&gt; path;
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; 
&lt;span&gt;87&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;SecurityInterceptor.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　在拦截器中，首先对一些不需要校验的请求进行放行，例如登录动作、登录页面请求以及错误页面等。然后获取当前登录的用户，如果没有登录则自动跳转到登录页面。在返回前台的时候，判断请求属于同步请求还是异步请求，如果是同步请求，直接进行页面的跳转，跳转到登录页面。如果是异步请求，则返回前台一个json数据，提示前台登录信息失效。这里补充一点，前台可以使用ajaxhook进行异步请求的捕获，相当于一个前端的全局拦截器，拦截所有的异步请求，可以监视所有异步请求的返回结果，如果返回的是登录失效，则进行跳转到登录页面的操作。具体ajaxhook的使用方法请自行学习，本示例中暂时没有使用。&lt;br/&gt;　　下面是判断同一个账号有没有多次登录，具体方法就是使用当前的sessionId，将当前登录用户和请求sissionId作为一个key-value放到了application中，如果该用户的sessionId发生了变化，说明又有一个人登录了该账号，然后就进行相应的提示操作。&lt;/p&gt;
&lt;h3&gt;8. 配置虚拟路径&lt;/h3&gt;
&lt;p&gt;　　web项目中免不了并上传的操作，图片或者文件，如果上传的是图片，一般还要进行回显的操作，我们不想将上传的文件直接存放在项目的目录中，而是放在一个自定义的目录，同时项目还可以访问：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1062633/201904/1062633-20190424211707268-784612166.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这样在进行上传操作的时候，就可以将上传的文件放到项目以外的目录中，然后外部访问的时候，通过虚拟路径进行映射访问。&lt;/p&gt;
&lt;h3&gt;9. 集成redis缓存&lt;/h3&gt;
&lt;p&gt;　　springboot的强悍就是集成一个东西太方便了，如果你不想做任何配置，只需要加入redis的依赖，然后在配置文件（本示例中配置是在数据库中）中添加redis的链接信息，就可以在项目中使用redis了。&lt;/p&gt;
&lt;p&gt;　　本示例中使用redis做缓存，首先写了一个缓存的类，代码有些长不做展示。然后在service层进行缓存的操作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1062633/201904/1062633-20190424211753413-883794052.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　代码中使用了double check的骚操作，防止高并发下缓存失效的问题（虽然我的示例不可能有高并发，哈哈）。另外就是缓存更新的问题，网上说的有很多，先更新数据再更新缓存，先更新缓存再更新数据库等等，具体要看你是做什么，本示例中没有什么需要特殊注意的地方，因此就先更新数据库，然后再移除缓存：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1062633/201904/1062633-20190424211814238-1253970305.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;10. 项目代码和依赖以及静态资源分别打包&lt;/h3&gt;
&lt;p&gt;　　之前遇到一个问题，springboot打包之后是一个jar文件，如果将所有依赖也打到这个jar包中的话，那么这个jar包动辄几十兆，来回传输不说，如果想改动其中的一个配置内容，还异常的繁琐，因此，将项目代码，就是自己写的代码打成一个jar包（一般只有几百k），然后将所有的依赖打包到一个lib目录，然后再将所有的配置信息以及静态文件打包到resources目录，这样，静态文件可以直接进行修改，浏览器清理缓存刷新即可出现改动效果，而且打包出来的项目代码也小了很多，至于依赖，一般都是不变的，所以也没必要每次都打包它。具体操作就是在pom.xml中增加一个插件即可，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
代码太长，不做展示
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;11. 项目启动&lt;/h3&gt;
&lt;p&gt;　　到现在都没有贴一个项目的目录结构，先来一张。目录中项目跟目录下的demo.sh就是启动脚本，当时从网上抄袭改装过来的，源代码出自那位大师之手我就不知道了，先行谢过。在部署到服务器的时候，如果服务器上安装好了jdk、maven、git，每次修改完代码，直接git pull下来，然后mvn package打包，然后直接./demo.sh start就可以启动项目，方便快速。慢着，忘记了，如果你提交到github中的application.properties中的数据源配置信息是开发环境的话，那么你在打包之后，target/resources中的application.properties中的数据源需要改成开发环境才可以启动。当然如果你嫌麻烦，可以直接将开发环境的数据源配置push到github中，安不安全就要你自己考虑了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1062633/201904/1062633-20190424212100084-1180884398.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;12. 总结&lt;/h3&gt;
&lt;p&gt;示例中可能还有一些细节没有说到，总之这个项目是慢慢的添砖添瓦弄出来的，自己在写很多其他的项目的时候，都是以此项目为模板进行改造出来的，个人感觉很实用很方便，用着也很舒服。github地址：&lt;a href=&quot;https://github.com/503612012/demo&quot; target=&quot;_blank&quot;&gt;https://github.com/503612012/demo&lt;/a&gt;欢迎收藏。&lt;/p&gt;
</description>
<pubDate>Wed, 24 Apr 2019 13:23:00 +0000</pubDate>
<dc:creator>Oven5217</dc:creator>
<og:description>从接触springboot开始，便深深的被它的简洁性深深的折服了，精简的配置，方便的集成，使我再也不想用传统的ssm框架来搭建项目，一大堆的配置文件，维护起来很不方便，集成的时候也要费力不少。从第一次</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Oven5217/p/10765052.html</dc:identifier>
</item>
<item>
<title>深度学习之卷积神经网络(CNN)的应用-验证码的生成与识别 - w_x_w1985</title>
<link>http://www.cnblogs.com/further-further-further/p/10755361.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/further-further-further/p/10755361.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np  
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; captcha.image &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ImageCaptcha
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np  
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib.pyplot as plt  
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; PIL &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Image  
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; random   
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; number = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]  
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; alphabet = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;j&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; ALPHABET = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;F&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;H&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;J&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;K&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;M&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;O&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;P&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;R&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;U&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;V&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;W&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;X&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; random_captcha_text(char_set=number+alphabet+ALPHABET, captcha_size=4&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;def random_captcha_text(char_set=number, captcha_size=4):&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;     captcha_text =&lt;span&gt; []  
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(captcha_size):  
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;         c =&lt;span&gt; random.choice(char_set)  
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;        captcha_text.append(c)  
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; captcha_text  
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;    
&lt;span&gt; 21&lt;/span&gt; 
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; gen_captcha_text_and_image(i =&lt;span&gt; 0):
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建图像实例对象&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;     image =&lt;span&gt; ImageCaptcha()  
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 随机选择4个字符&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;     captcha_text =&lt;span&gt; random_captcha_text()
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; array 转化为 string&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;     captcha_text = &lt;span&gt;''&lt;/span&gt;&lt;span&gt;.join(captcha_text)  
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成验证码&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;     captcha =&lt;span&gt; image.generate(captcha_text)
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; i%100 ==&lt;span&gt; 0 :
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;         image.write(captcha_text, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;./generateImage/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + captcha_text + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;    
&lt;span&gt; 34&lt;/span&gt;     captcha_image =&lt;span&gt; Image.open(captcha)  
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;     captcha_image =&lt;span&gt; np.array(captcha_image)  
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; captcha_text, captcha_image  
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; 
&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; convert2gray(img):  
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; len(img.shape) &amp;gt; 2&lt;span&gt;:  
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         gray = np.mean(img, -1&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 上面的转法较快，正规转法如下  &lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; r, g, b = img[:,:,0], img[:,:,1], img[:,:,2]  &lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; gray = 0.2989 * r + 0.5870 * g + 0.1140 * b  &lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; gray  
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:  
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; img  
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; 
&lt;span&gt; 48&lt;/span&gt;    
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 文本转向量&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; text2vec(text):  
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;     text_len =&lt;span&gt; len(text)  
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; text_len &amp;gt;&lt;span&gt; MAX_CAPTCHA:  
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;raise&lt;/span&gt; ValueError(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;验证码最长4个字符&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;    
&lt;span&gt; 55&lt;/span&gt;     vector = np.zeros(MAX_CAPTCHA*&lt;span&gt;CHAR_SET_LEN)  
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; char2pos(c):  
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; c ==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:  
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;             k = 62  
&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; k  
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;         k = ord(c)-48  
&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; k &amp;gt; 9&lt;span&gt;:  
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;             k = ord(c) - 55  
&lt;span&gt; 64&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; k &amp;gt; 35&lt;span&gt;:  
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;                 k = ord(c) - 61  
&lt;span&gt; 66&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; k &amp;gt; 61&lt;span&gt;:  
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;                     &lt;span&gt;raise&lt;/span&gt; ValueError(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;No Map&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; k  
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; 
&lt;span&gt; 70&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i, c &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(text):  
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;idx = i * CHAR_SET_LEN + int(c)&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;         idx = i * CHAR_SET_LEN +&lt;span&gt; char2pos(c)
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;         vector[idx] = 1  
&lt;span&gt; 74&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; vector  
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 向量转回文本  &lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; vec2text(vec):
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;     char_pos =&lt;span&gt; vec[0]
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;     text=&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i, c &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(char_pos):  
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;         char_at_pos = i &lt;span&gt;#&lt;/span&gt;&lt;span&gt;c/63  &lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;         char_idx = c %&lt;span&gt; CHAR_SET_LEN  
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; char_idx &amp;lt; 10&lt;span&gt;:  
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;             char_code = char_idx + ord(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;         &lt;span&gt;elif&lt;/span&gt; char_idx &amp;lt;36&lt;span&gt;:  
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;             char_code = char_idx - 10 + ord(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;elif&lt;/span&gt; char_idx &amp;lt; 62&lt;span&gt;:  
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;             char_code = char_idx-  36 + ord(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;elif&lt;/span&gt; char_idx == 62&lt;span&gt;:  
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             char_code = ord(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:  
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;             &lt;span&gt;raise&lt;/span&gt; ValueError(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;        text.append(chr(char_code)) 
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;    text=[]
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;    char_pos = vec.nonzero()[0]
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;    for i, c in enumerate(char_pos):  
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;        number = i % 10
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;        text.append(str(number)) 
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;.join(text)  
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;    
&lt;span&gt;102&lt;/span&gt; &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt; &lt;span&gt;#向量（大小MAX_CAPTCHA*CHAR_SET_LEN）用0,1编码 每63个编码一个字符，这样顺利有，字符也有 
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;vec = text2vec(&quot;F5Sd&quot;) 
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;text = vec2text(vec) 
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;print(text)  # F5Sd 
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;vec = text2vec(&quot;SFd5&quot;) 
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;text = vec2text(vec) 
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;print(text)  # SFd5 
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;  
&lt;span&gt;111&lt;/span&gt;    
&lt;span&gt;112&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成一个训练batch  &lt;/span&gt;
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; get_next_batch(batch_size=128&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;     batch_x = np.zeros([batch_size, IMAGE_HEIGHT*&lt;span&gt;IMAGE_WIDTH])  
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;     batch_y = np.zeros([batch_size, MAX_CAPTCHA*&lt;span&gt;CHAR_SET_LEN])  
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;    
&lt;span&gt;117&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 有时生成图像大小不是(60, 160, 3)  &lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrap_gen_captcha_text_and_image(i):
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:  
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;             text, image =&lt;span&gt; gen_captcha_text_and_image(i)
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; image.shape == (60, 160, 3&lt;span&gt;):  
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; text, image  
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;    
&lt;span&gt;124&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(batch_size):  
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;         text, image =&lt;span&gt; wrap_gen_captcha_text_and_image(i)
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;         image =&lt;span&gt; convert2gray(image)  
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;    
&lt;span&gt;128&lt;/span&gt;         batch_x[i,:] = image.flatten() / 255 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; (image.flatten()-128)/128  mean为0  &lt;/span&gt;
&lt;span&gt;129&lt;/span&gt;         batch_y[i,:] =&lt;span&gt; text2vec(text)  
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;    
&lt;span&gt;131&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; batch_x, batch_y  
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;    
&lt;span&gt;133&lt;/span&gt; 
&lt;span&gt;134&lt;/span&gt;    
&lt;span&gt;135&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 定义CNN  &lt;/span&gt;
&lt;span&gt;136&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; crack_captcha_cnn(w_alpha=0.01, b_alpha=0.1&lt;span&gt;):  
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;     x = tf.reshape(X, shape=[-1, IMAGE_HEIGHT, IMAGE_WIDTH, 1&lt;span&gt;])  
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;    
&lt;span&gt;139&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;w_c1_alpha = np.sqrt(2.0/(IMAGE_HEIGHT*IMAGE_WIDTH)) #  &lt;/span&gt;
&lt;span&gt;140&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;w_c2_alpha = np.sqrt(2.0/(3*3*32))   &lt;/span&gt;
&lt;span&gt;141&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;w_c3_alpha = np.sqrt(2.0/(3*3*64))   &lt;/span&gt;
&lt;span&gt;142&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;w_d1_alpha = np.sqrt(2.0/(8*32*64))  &lt;/span&gt;
&lt;span&gt;143&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;out_alpha = np.sqrt(2.0/1024)  &lt;/span&gt;
&lt;span&gt;144&lt;/span&gt;    
&lt;span&gt;145&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 3 conv layer  &lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;     w_c1 = tf.Variable(w_alpha*tf.random_normal([3, 3, 1, 32&lt;span&gt;]))  
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;     b_c1 = tf.Variable(b_alpha*tf.random_normal([32&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 卷积 + Relu激活函数&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt;     conv1 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(x, w_c1, strides=[1, 1, 1, 1], padding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;), b_c1))  
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 池化&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt;     conv1 = tf.nn.max_pool(conv1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; dropout 防止过拟合&lt;/span&gt;
&lt;span&gt;153&lt;/span&gt;     conv1 = tf.nn.dropout(conv1, rate = 1 -&lt;span&gt; keep_prob)
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;    
&lt;span&gt;155&lt;/span&gt;     w_c2 = tf.Variable(w_alpha*tf.random_normal([3, 3, 32, 64&lt;span&gt;]))  
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;     b_c2 = tf.Variable(b_alpha*tf.random_normal([64&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 卷积 + Relu激活函数&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt;     conv2 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv1, w_c2, strides=[1, 1, 1, 1], padding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;), b_c2))
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 池化&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt;     conv2 = tf.nn.max_pool(conv2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; dropout 防止过拟合&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt;     conv2 = tf.nn.dropout(conv2, rate = 1 -&lt;span&gt; keep_prob)
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;    
&lt;span&gt;164&lt;/span&gt;     w_c3 = tf.Variable(w_alpha*tf.random_normal([3, 3, 64, 64&lt;span&gt;]))  
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;     b_c3 = tf.Variable(b_alpha*tf.random_normal([64&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 卷积 + Relu激活函数&lt;/span&gt;
&lt;span&gt;167&lt;/span&gt;     conv3 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv2, w_c3, strides=[1, 1, 1, 1], padding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;), b_c3))
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 池化&lt;/span&gt;
&lt;span&gt;169&lt;/span&gt;     conv3 = tf.nn.max_pool(conv3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; dropout 防止过拟合&lt;/span&gt;
&lt;span&gt;171&lt;/span&gt;     conv3 = tf.nn.dropout(conv3, rate = 1 -&lt;span&gt; keep_prob)
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;    
&lt;span&gt;173&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Fully connected layer  &lt;/span&gt;
&lt;span&gt;174&lt;/span&gt;     w_d = tf.Variable(w_alpha*tf.random_normal([8*20*64, 1024&lt;span&gt;]))  
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;     b_d = tf.Variable(b_alpha*tf.random_normal([1024&lt;span&gt;]))  
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;     dense = tf.reshape(conv3, [-1&lt;span&gt;, w_d.get_shape().as_list()[0]])
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 全连接 + Relu&lt;/span&gt;
&lt;span&gt;178&lt;/span&gt;     dense =&lt;span&gt; tf.nn.relu(tf.add(tf.matmul(dense, w_d), b_d))  
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;     dense = tf.nn.dropout(dense, rate = 1 -&lt;span&gt; keep_prob)
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;    
&lt;span&gt;181&lt;/span&gt;     w_out = tf.Variable(w_alpha*tf.random_normal([1024, MAX_CAPTCHA*&lt;span&gt;CHAR_SET_LEN]))  
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt;     b_out = tf.Variable(b_alpha*tf.random_normal([MAX_CAPTCHA*&lt;span&gt;CHAR_SET_LEN]))
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 全连接&lt;/span&gt;
&lt;span&gt;184&lt;/span&gt;     out =&lt;span&gt; tf.add(tf.matmul(dense, w_out), b_out)   
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; out  
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;    
&lt;span&gt;187&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 训练  &lt;/span&gt;
&lt;span&gt;188&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; train_crack_captcha_cnn():  
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;     output =&lt;span&gt; crack_captcha_cnn()
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算损失&lt;/span&gt;
&lt;span&gt;191&lt;/span&gt;     loss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits= output, labels=&lt;span&gt; Y))
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算梯度&lt;/span&gt;
&lt;span&gt;193&lt;/span&gt;     optimizer = tf.train.AdamOptimizer(learning_rate=0.001&lt;span&gt;).minimize(loss)
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 目标预测&lt;/span&gt;
&lt;span&gt;195&lt;/span&gt;     predict = tf.reshape(output, [-1&lt;span&gt;, MAX_CAPTCHA, CHAR_SET_LEN])
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 目标预测最大值&lt;/span&gt;
&lt;span&gt;197&lt;/span&gt;     max_idx_p = tf.argmax(predict, 2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 真实标签最大值&lt;/span&gt;
&lt;span&gt;199&lt;/span&gt;     max_idx_l = tf.argmax(tf.reshape(Y, [-1, MAX_CAPTCHA, CHAR_SET_LEN]), 2&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;     correct_pred =&lt;span&gt; tf.equal(max_idx_p, max_idx_l)
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 准确率&lt;/span&gt;
&lt;span&gt;202&lt;/span&gt;     accuracy =&lt;span&gt; tf.reduce_mean(tf.cast(correct_pred, tf.float32))  
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt;    
&lt;span&gt;204&lt;/span&gt;     saver =&lt;span&gt; tf.train.Saver()  
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt; &lt;span&gt;    with tf.Session() as sess:
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 打印tensorboard流程图&lt;/span&gt;
&lt;span&gt;207&lt;/span&gt;         tf.summary.FileWriter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;./tensorboard/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, sess.graph)
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt; &lt;span&gt;        sess.run(tf.global_variables_initializer())  
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt;    
&lt;span&gt;210&lt;/span&gt;         step =&lt;span&gt; 0  
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:  
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt;             batch_x, batch_y = get_next_batch(64&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt;             _, loss_ = sess.run([optimizer, loss], feed_dict={X: batch_x, Y: batch_y, keep_prob: 0.75&lt;span&gt;})  
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(step, loss_)  
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt;               
&lt;span&gt;216&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 每100 step计算一次准确率  &lt;/span&gt;
&lt;span&gt;217&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; step % 100 ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt;                 batch_x_test, batch_y_test = get_next_batch(100&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt;                 acc = sess.run(accuracy, feed_dict={X: batch_x_test, Y: batch_y_test, keep_prob: 1&lt;span&gt;.})  
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(step, acc)  
&lt;/span&gt;&lt;span&gt;221&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果准确率大于80%,保存模型,完成训练&lt;/span&gt;
&lt;span&gt;222&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; acc &amp;gt; 0.90&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt;                     saver.save(sess, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;./model/crack_capcha.model99&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, global_step=&lt;span&gt;step)
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;225&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; acc &amp;gt; 0.80&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt;                     saver.save(sess, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;./model/crack_capcha.model88&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, global_step=&lt;span&gt;step)
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt; 
&lt;span&gt;228&lt;/span&gt;             step += 1  
&lt;span&gt;229&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; crack_captcha(captcha_image, output):
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; 
&lt;span&gt;231&lt;/span&gt;     saver =&lt;span&gt; tf.train.Saver()
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt; 
&lt;span&gt;233&lt;/span&gt; &lt;span&gt;    with tf.Session() as sess:
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt; &lt;span&gt;        sess.run(tf.initialize_all_variables())
&lt;/span&gt;&lt;span&gt;235&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取训练后的参数&lt;/span&gt;
&lt;span&gt;236&lt;/span&gt;         checkpoint = tf.train.get_checkpoint_state(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;model&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; checkpoint &lt;span&gt;and&lt;/span&gt;&lt;span&gt; checkpoint.model_checkpoint_path:
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt; &lt;span&gt;           saver.restore(sess, checkpoint.model_checkpoint_path)
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt;            &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Successfully loaded:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, checkpoint.model_checkpoint_path)
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt;            &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Could not find old network weights&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt; 
&lt;span&gt;243&lt;/span&gt;         predict = tf.argmax(tf.reshape(output, [-1, MAX_CAPTCHA, CHAR_SET_LEN]), 2&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt;         text_list = sess.run(predict, feed_dict={X: [captcha_image], keep_prob: 1&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;text = text_list[0].tolist()&lt;/span&gt;
&lt;span&gt;246&lt;/span&gt;         text =&lt;span&gt; vec2text(text_list)
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; text 
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;     train = 0  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 0: 训练  1: 预测&lt;/span&gt;
&lt;span&gt;250&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; train ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt;         number = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]  
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt;         alphabet = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;j&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt;         ALPHABET = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;F&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;H&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;J&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;K&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;M&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;O&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;P&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;R&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;U&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;V&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;W&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;X&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt;         
&lt;span&gt;255&lt;/span&gt;         text, image =&lt;span&gt; gen_captcha_text_and_image()  
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;验证码图像channel:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, image.shape)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; (60, 160, 3)  &lt;/span&gt;
&lt;span&gt;257&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 图像大小  &lt;/span&gt;
&lt;span&gt;258&lt;/span&gt;         IMAGE_HEIGHT = 60  
&lt;span&gt;259&lt;/span&gt;         IMAGE_WIDTH = 160  
&lt;span&gt;260&lt;/span&gt;         MAX_CAPTCHA =&lt;span&gt; len(text)  
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;验证码文本最长字符数&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, MAX_CAPTCHA)
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 文本转向量  &lt;/span&gt;
&lt;span&gt;263&lt;/span&gt;         char_set = number + alphabet + ALPHABET + [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果验证码长度小于4, '_'用来补齐&lt;/span&gt;
&lt;span&gt;264&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;char_set = number&lt;/span&gt;
&lt;span&gt;265&lt;/span&gt;         CHAR_SET_LEN =&lt;span&gt; len(char_set)
&lt;/span&gt;&lt;span&gt;266&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; placeholder占位符，作用域：整个页面，不需要声明时初始化&lt;/span&gt;
&lt;span&gt;267&lt;/span&gt;         X = tf.placeholder(tf.float32, [None, IMAGE_HEIGHT*&lt;span&gt;IMAGE_WIDTH])
&lt;/span&gt;&lt;span&gt;268&lt;/span&gt;         Y = tf.placeholder(tf.float32, [None, MAX_CAPTCHA*&lt;span&gt;CHAR_SET_LEN])  
&lt;/span&gt;&lt;span&gt;269&lt;/span&gt;         keep_prob = tf.placeholder(tf.float32) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; dropout &lt;/span&gt;
&lt;span&gt;270&lt;/span&gt;         
&lt;span&gt;271&lt;/span&gt; &lt;span&gt;        train_crack_captcha_cnn()
&lt;/span&gt;&lt;span&gt;272&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 预测时需要将训练的变量初始化，且只能初始化一次。&lt;/span&gt;
&lt;span&gt;273&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; train == 1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;274&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自然计数&lt;/span&gt;
&lt;span&gt;275&lt;/span&gt;         step =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;276&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 正确预测计数&lt;/span&gt;
&lt;span&gt;277&lt;/span&gt;         rightCnt =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;278&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置测试次数&lt;/span&gt;
&lt;span&gt;279&lt;/span&gt;         count = 100
&lt;span&gt;280&lt;/span&gt;         number = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;281&lt;/span&gt;         alphabet = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;j&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;282&lt;/span&gt;         ALPHABET = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;F&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;H&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;J&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;K&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;M&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;O&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;P&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;R&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;U&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;V&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;W&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;X&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;283&lt;/span&gt; 
&lt;span&gt;284&lt;/span&gt;         IMAGE_HEIGHT = 60
&lt;span&gt;285&lt;/span&gt;         IMAGE_WIDTH = 160
&lt;span&gt;286&lt;/span&gt; 
&lt;span&gt;287&lt;/span&gt;         char_set = number + alphabet + ALPHABET + [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;288&lt;/span&gt;         CHAR_SET_LEN =&lt;span&gt; len(char_set)
&lt;/span&gt;&lt;span&gt;289&lt;/span&gt;         MAX_CAPTCHA = 4  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; len(text)&lt;/span&gt;
&lt;span&gt;290&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; placeholder占位符，作用域：整个页面，不需要声明时初始化&lt;/span&gt;
&lt;span&gt;291&lt;/span&gt;         X = tf.placeholder(tf.float32, [None, IMAGE_HEIGHT*&lt;span&gt;IMAGE_WIDTH])
&lt;/span&gt;&lt;span&gt;292&lt;/span&gt;         Y = tf.placeholder(tf.float32, [None, MAX_CAPTCHA*&lt;span&gt;CHAR_SET_LEN])
&lt;/span&gt;&lt;span&gt;293&lt;/span&gt;         keep_prob = tf.placeholder(tf.float32) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; dropout&lt;/span&gt;
&lt;span&gt;294&lt;/span&gt;         output =&lt;span&gt; crack_captcha_cnn()
&lt;/span&gt;&lt;span&gt;295&lt;/span&gt; 
&lt;span&gt;296&lt;/span&gt;         saver =&lt;span&gt; tf.train.Saver()
&lt;/span&gt;&lt;span&gt;297&lt;/span&gt; &lt;span&gt;        with tf.Session() as sess:
&lt;/span&gt;&lt;span&gt;298&lt;/span&gt; &lt;span&gt;            sess.run(tf.global_variables_initializer())
&lt;/span&gt;&lt;span&gt;299&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取训练后参数路径&lt;/span&gt;
&lt;span&gt;300&lt;/span&gt;             checkpoint = tf.train.get_checkpoint_state(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;model&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;301&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; checkpoint &lt;span&gt;and&lt;/span&gt;&lt;span&gt; checkpoint.model_checkpoint_path:
&lt;/span&gt;&lt;span&gt;302&lt;/span&gt; &lt;span&gt;                saver.restore(sess, checkpoint.model_checkpoint_path)
&lt;/span&gt;&lt;span&gt;303&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Successfully loaded:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, checkpoint.model_checkpoint_path)
&lt;/span&gt;&lt;span&gt;304&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;305&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Could not find old network weights.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;306&lt;/span&gt; 
&lt;span&gt;307&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;308&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; image = Image.open(&quot;D:/Project/python/myProject/CNN/tensorflow/captchaIdentify/11/0sHB.jpg&quot;)&lt;/span&gt;
&lt;span&gt;309&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; image = np.array(image)&lt;/span&gt;
&lt;span&gt;310&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; text = '0sHB'&lt;/span&gt;
&lt;span&gt;311&lt;/span&gt;                 text, image =&lt;span&gt; gen_captcha_text_and_image()
&lt;/span&gt;&lt;span&gt;312&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; f = plt.figure()&lt;/span&gt;
&lt;span&gt;313&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ax = f.add_subplot(111)&lt;/span&gt;
&lt;span&gt;314&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ax.text(0.1, 0.9,text, ha='center', va='center', transform=ax.transAxes)&lt;/span&gt;
&lt;span&gt;315&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; plt.imshow(image)&lt;/span&gt;
&lt;span&gt;316&lt;/span&gt;                 &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;317&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; plt.show()&lt;/span&gt;
&lt;span&gt;318&lt;/span&gt; 
&lt;span&gt;319&lt;/span&gt;                 image =&lt;span&gt; convert2gray(image)
&lt;/span&gt;&lt;span&gt;320&lt;/span&gt;                 image = image.flatten() / 255
&lt;span&gt;321&lt;/span&gt;                 predict = tf.math.argmax(tf.reshape(output, [-1, MAX_CAPTCHA, CHAR_SET_LEN]), 2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;322&lt;/span&gt;                 text_list = sess.run(predict, feed_dict= { X: [image], keep_prob : 1&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;323&lt;/span&gt;                 predict_text =&lt;span&gt; vec2text(text_list)
&lt;/span&gt;&lt;span&gt;324&lt;/span&gt;                 predict_text =&lt;span&gt; crack_captcha(image, output)
&lt;/span&gt;&lt;span&gt;325&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; predict_text_list = [str(x) for x in predict_text]&lt;/span&gt;
&lt;span&gt;326&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; predict_text_new = ''.join(predict_text_list)&lt;/span&gt;
&lt;span&gt;327&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;step:{} 真实值: {}  预测: {}  预测结果: {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(str(step), text, predict_text, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正确&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; text.lower()==predict_text.lower() &lt;span&gt;else&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;错误&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;328&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; text.lower()==&lt;span&gt;predict_text.lower():
&lt;/span&gt;&lt;span&gt;329&lt;/span&gt;                     rightCnt += 1
&lt;span&gt;330&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; step == count - 1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;331&lt;/span&gt;                     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;测试总数: {} 测试准确率: {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(str(count), str(rightCnt/&lt;span&gt;count)))
&lt;/span&gt;&lt;span&gt;332&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;333&lt;/span&gt;                 step += 1
&lt;span&gt;334&lt;/span&gt;     
&lt;span&gt;335&lt;/span&gt;     
&lt;span&gt;336&lt;/span&gt;     
&lt;span&gt;337&lt;/span&gt;     
&lt;/pre&gt;</description>
<pubDate>Wed, 24 Apr 2019 12:31:00 +0000</pubDate>
<dc:creator>w_x_w1985</dc:creator>
<og:description>验证码的生成与识别 本文系作者原创，转载请注明出处:https://www.cnblogs.com/further-further-further/p/10755361.html 目录 1.验证码的制</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/further-further-further/p/10755361.html</dc:identifier>
</item>
</channel>
</rss>