<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>类的双亲委派机制 - HotSpot-Researcher</title>
<link>http://www.cnblogs.com/mazhimazhi/p/13338549.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mazhimazhi/p/13338549.html</guid>
<description>&lt;p&gt;前一篇介绍了3种类加载器，每种类加载器都加载指定路径下的类库，它们在具体使用时并不是相互独立的，而是相互配合对类进行加载。另外如果有必要，还可以编写自定义的类加载器。这些类加载器的的关系一般如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1236123/202007/1236123-20200705223317721-1894328195.png&quot; alt=&quot;&quot; width=&quot;407&quot; height=&quot;330&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;
&lt;p&gt;需要提示的是，上图的双亲委派模型中的各个类加载器之间并不表示继承关系，而是表示工作过程，具体说就是，对于一个加载类的具体请求，首先要委派给自己的父类去加载，只有当父类无法完成加载请求时，子类自己才会去尝试加载。具体的委派逻辑实现在java.lang.ClassLoader类的loadClass()方法中。loadClass()方法的实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:false;&quot;&gt;
源代码位置：java/lang/ClassLoader.java
protected Class&amp;lt;?&amp;gt; loadClass(Stringname,boolean resolve)  
       throws ClassNotFoundException  
{  
       synchronized (getClassLoadingLock(name)) {  
           // 首先从jvm缓存查找该类
           Class c = findLoadedClass(name); // (1)
           if (c ==null) {  
               try {  //然后委托给父类加载器进行加载
                   if (parent !=null) {  
                       c = parent.loadClass(name,false);  (2)
                   } else {  //如果父类加载器为null,则委托给启动类加载器加载
                       c = findBootstrapClassOrNull(name);  (3)
                   }  
               } catch (ClassNotFoundException) {  
                   // 如果父类加载器抛出ClassNotFoundException异常，
                   // 表明父类无法完成加载请求
               }  

               if (c ==null) {  
                   // 若仍然没有找到则调用findClass()方法查找
                   c = findClass(name);  (4)
                   ...  
               }  
           }  
           if (resolve) {  
               resolveClass(c);  //（5）
           }  
           return c;  
       }  
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类的加载流程如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1236123/202007/1236123-20200708072417366-1683596874.png&quot; alt=&quot;&quot; width=&quot;514&quot; height=&quot;383&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;
&lt;p&gt;代码首先通过调用findLoadedClass()方法查找此类是否已经被加载过了，如果没有，则需要优先调用父类加载器去加载。除了用C++实现的引导类加载器需要通过调用findBootstrapClassOrNull()方法外，其它用Java实现的类加载器都有parent字段，因为这些类都继承了ClassLoader这个基类（这个类中有对parent字段的定义），如实现了扩展类加载器的ExtClassLoader类和实现了应用类加载器/系统类加载器的AppClassLoader类的继承关系如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1236123/202007/1236123-20200705223425039-607437042.png&quot; alt=&quot;&quot; width=&quot;295&quot; height=&quot;254&quot; loading=&quot;lazy&quot;/&gt; &lt;/p&gt;
&lt;p&gt;当父类无法实现加载请求时，也就是c为null时，当前类加载器调用findClass()方法尝试自己完成加载请求。&lt;/p&gt;
&lt;p&gt;编写一个自定义的类加载器，如下：&lt;/p&gt;
&lt;p&gt;实例1&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:false;&quot;&gt;
package com.jvm;

import java.net.URL;
import java.net.URLClassLoader;

public class UserClassLoader extends URLClassLoader {
         
    public UserClassloader(URL[] urls) {
        super(urls);
    }
 
    @Override
    protected Class&amp;lt;?&amp;gt; loadClass(String name, boolean resolve) throws ClassNotFoundException {
        return super.loadClass(name, resolve);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到UserClassLoader继承了URLClassLoader类并覆写了loadClass()方法，调用super.loadClass()方法其实就是在调用ClassLoader类中实现的loadClass()方法。&lt;/p&gt;
&lt;p&gt;实例1（续）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:false;&quot;&gt;
package com.jvm;

public class Student { }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实例1（续）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:false;&quot;&gt;
package com.jvm;

import java.net.URL;

public class TestClassLoader {
        public static void main(String[] args) throws Exception {
                URL url[] = new URL[1];
                url[0] = Thread.currentThread().getContextClassLoader().getResource(&quot;&quot;);

                UserClassLoader ucl = new UserClassLoader(url);
                Class clazz = ucl.loadClass(&quot;com.jvm.Student&quot;);

                Object obj = clazz.newInstance();
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过UserClassLoader类加载器加载Student类并通过调用Class.newInstance()方法获取Student对象。&lt;/p&gt;
&lt;p&gt;下面详细介绍loadClass()方法中调用的findLoaderClass()、findBootstrapClassOrNull()与findClass()方法的实现。&lt;/p&gt;
&lt;h3 class=&quot;17&quot;&gt;1．findLoadedClass()方法&lt;/h3&gt;
&lt;p&gt;调用的findLoadedClass()方法的实现如下： &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
protected final Class&amp;lt;?&amp;gt; findLoadedClass(String name) {
        return findLoadedClass0(name);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用本地方法findLoadedClass0()方法，这个方法的实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:false;&quot;&gt;
源代码位置：hotspot/src/share/vm/prims/jvm.cpp
JVM_ENTRY(jclass, JVM_FindLoadedClass(JNIEnv *env, jobject loader, jstring name))
  JVMWrapper(&quot;JVM_FindLoadedClass&quot;);
  // THREAD表示当前线程
  ResourceMark rm(THREAD);
 
  Handle h_name (THREAD, JNIHandles::resolve_non_null(name));
  // 获取类名对应的Handle
  Handle string = java_lang_String::internalize_classname(h_name, CHECK_NULL);
 
  // 检查是否为空
  const char* str   = java_lang_String::as_utf8_string(string());
  if (str == NULL) return NULL;
 
  // 判断类名是否超长
  const int str_len = (int)strlen(str);
  if (str_len &amp;gt; Symbol::max_length()) {
    return NULL;
  }
  // 创建一个临时的Symbol
  TempNewSymbol klass_name = SymbolTable::new_symbol(str, str_len, CHECK_NULL);
 
  // 获取类加载器对应的Handle
  Handle h_loader(THREAD, JNIHandles::resolve(loader));
  // 查找目标类是否存在
  Klass* k = SystemDictionary::find_instance_or_array_klass(klass_name,
                                                              h_loader,
                                                              Handle(),
                                                          CHECK_NULL);
  // 将Klass转换成jclass                                                         
  return (k == NULL) ? NULL :
                 (jclass) JNIHandles::make_local(env, k-&amp;gt;java_mirror());
JVM_END
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JVM_ENTRY是宏定义，用于处理JNI调用的预处理，如获取当前线程的JavaThread指针。由于还会涉及到JNI实现的一些相关规则，如JNIHandles::resolve_non_null()、JNIHandles::resolve()与JNIHandles::mark_local()，主要就是JNI函数不能直接访问Klass、oop对象只能借助jobject、jclass等来访问，为GC的处理提供便利，后面在介绍JNI时会详细介绍。&lt;/p&gt;
&lt;p&gt;调用的find_instance_or_array_klass()函数的实现如下： &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
// Look for a loaded instance or array klass by name.  Do not do any loading.
// return NULL in case of error.
Klass* SystemDictionary::find_instance_or_array_klass(Symbol* class_name,
                                                      Handle class_loader,
                                                      Handle protection_domain,
                                                      TRAPS) {

  Klass* k = NULL;

  assert(class_name != NULL, &quot;class name must be non NULL&quot;);

  if (FieldType::is_array(class_name)) {
    // The name refers to an array.  Parse the name.
    // dimension and object_key in FieldArrayInfo are assigned as a
    // side-effect of this call
    FieldArrayInfo fd;
    BasicType t = FieldType::get_array_info(class_name, fd, CHECK_(NULL));
    if (t != T_OBJECT) {
      k = Universe::typeArrayKlassObj(t);
    } else {
      k = SystemDictionary::find(fd.object_key(), class_loader, protection_domain, THREAD);
    }
    if (k != NULL) {
      k = k-&amp;gt;array_klass_or_null(fd.dimension());
    }
  } else {
    k = find(class_name, class_loader, protection_domain, THREAD);
  }
  return k;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中有对数组和类的查询逻辑，方法并不涉及类的加载。对于数组的查找来说，首先要找到组成数组的基本元素的类型t，如果是基本类型，则调用Universe::typeArrayKlassObj()找到表示基本类型的Klass对象，在后面的类加载时会详细介绍；对于元素类型是对象来说，调用SystemDictionary::find()方法。SystemDictionary类中的find()方法的实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:false;&quot;&gt;
源代码位置：hotspot/src/share/vm/classfile/systemDictionary.cpp
Klass* SystemDictionary::find(Symbol* class_name,
                              Handle class_loader,
                              Handle protection_domain,
                              TRAPS) {

  ...
  class_loader = Handle(THREAD, java_lang_ClassLoader::non_reflection_class_loader(class_loader()));
  ClassLoaderData* loader_data = ClassLoaderData::class_loader_data_or_null(class_loader());

  ...
  unsigned int d_hash = dictionary()-&amp;gt;compute_hash(class_name, loader_data);
  int d_index = dictionary()-&amp;gt;hash_to_index(d_hash);

  {
    ... 
    return dictionary()-&amp;gt;find(d_index, d_hash, class_name, loader_data,protection_domain, THREAD);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将已经加载的类存储在Dictionary中，为了加快查找采用了hash存储。只有类加载器和类才能确定唯一的表示Java类的Klass实例，所以在计算d_hash时必须传入class_name和loader_data这两个参数。计算出具体索引d_index后，就可以调用Dictionary类的find()方法进行查找了。调用的Dictionary::find()函数的实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;44&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
源代码位置：hotspot/src/share/vm/classfile/dictionary.cpp
Klass* Dictionary::find(int index, unsigned int hash, Symbol* name,
                          ClassLoaderData* loader_data, Handle protection_domain, TRAPS) {
  //根据类名和类加载器计算对应的klass在map里面对应的key
  DictionaryEntry* entry = get_entry(index, hash, name, loader_data);
  //存在，并且验证通过则返回
  if (entry != NULL &amp;amp;&amp;amp; entry-&amp;gt;is_valid_protection_domain(protection_domain)) {
    return entry-&amp;gt;klass();
  } else {
     //否者返回null,说明不存在
    return NULL;
  }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2．findBootstrapClassOrNull()方法&lt;/h3&gt;
&lt;p&gt;调用findBootstrapClassOrNull()方法请求引导类加载器完成加载请求，这个方法会调用本地方法findBootstrapClass()方法，源代码如下： &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
private Class&amp;lt;?&amp;gt; findBootstrapClassOrNull(String name){
    return findBootstrapClass(name);
}

// return null if not found
private native Class&amp;lt;?&amp;gt; findBootstrapClass(String name);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个本地方法的实现如下： &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
源代码位置：/src/share/native/java/lang/ClassLoader.c 
JNIEXPORT jclass JNICALL
Java_java_lang_ClassLoader_findBootstrapClass(JNIEnv *env, jobject loader,
                                              jstring classname)
{
    jclass cls = 0;
    // ...
    cls = JVM_FindClassFromBootLoader(env, clname);
    // ...
    return cls;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用JVM_FindClassFromBootLoader()函数查找启动类加载器加载的类，如果没有查找到，方法会返回NULL。函数的实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:false;&quot;&gt;
源代码位置：hotspot/src/share/vm/prims/jvm.cpp
JVM_ENTRY(jclass, JVM_FindClassFromBootLoader(JNIEnv* env,const char* name))
  JVMWrapper2(&quot;JVM_FindClassFromBootLoader %s&quot;, name);
 
  // 检查类名是否合法
  if (name == NULL || (int)strlen(name) &amp;gt; Symbol::max_length()) {
    return NULL;
  }
 
  // 调用SystemDictionary解析目标类，如果未找到返回null
  TempNewSymbol h_name = SymbolTable::new_symbol(name, CHECK_NULL);
  Klass* k = SystemDictionary::resolve_or_null(h_name, CHECK_NULL);
  if (k == NULL) {
    return NULL;
  }
  // 将Klass转换成java中Class
  return (jclass) JNIHandles::make_local(env, k-&amp;gt;java_mirror());
JVM_END
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;17&quot;&gt;调用的SystemDictionary::resolve_or_null()函数的实现如下： &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;53&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
Klass* SystemDictionary::resolve_or_null(Symbol* class_name, TRAPS) {
  return resolve_or_null(class_name, Handle(), Handle(), THREAD);
}

Klass* SystemDictionary::resolve_or_null(Symbol* class_name, Handle class_loader, Handle protection_domain, TRAPS) {
  // 数组，通过签名的格式来判断
  if (FieldType::is_array(class_name)) {
    return resolve_array_class_or_null(class_name, class_loader, protection_domain, CHECK_NULL);
  }
  // 普通类，通过签名的格式来判断
  else if (FieldType::is_obj(class_name)) {
    ResourceMark rm(THREAD);
    // Ignore wrapping L and ;.
    TempNewSymbol name = SymbolTable::new_symbol(class_name-&amp;gt;as_C_string() + 1,
                                                 class_name-&amp;gt;utf8_length() - 2,
                                                 CHECK_NULL);
    return resolve_instance_class_or_null(name, class_loader, protection_domain, CHECK_NULL);
  }
  else {
    return resolve_instance_class_or_null(class_name, class_loader, protection_domain, CHECK_NULL);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用resolve_array_class_or_null()方法查找数组时，如果组成数组元素的基本类型为引用类型，同样会调用resolve_instance_class_or_null()方法来查找类对应的Klass实例。方法的实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;46&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
Klass* SystemDictionary::resolve_array_class_or_null(Symbol* class_name,
                                                       Handle class_loader,
                                                       Handle protection_domain,
                                                       TRAPS) {
  assert(FieldType::is_array(class_name), &quot;must be array&quot;);
  Klass* k = NULL;
  FieldArrayInfo fd;
  // dimension and object_key in FieldArrayInfo are assigned as a side-effect
  // of this call
  BasicType t = FieldType::get_array_info(class_name, fd, CHECK_NULL);
  if (t == T_OBJECT) {
    // naked oop &quot;k&quot; is OK here -- we assign back into it
        Symbol* sb = fd.object_key();
    k = SystemDictionary::resolve_instance_class_or_null(sb,
                                                         class_loader,
                                                         protection_domain,
                                                         CHECK_NULL);
    if (k != NULL) {
      k = k-&amp;gt;array_klass(fd.dimension(), CHECK_NULL);
    }
  } else {
    k = Universe::typeArrayKlassObj(t);
    k = TypeArrayKlass::cast(k)-&amp;gt;array_klass(fd.dimension(), CHECK_NULL);
  }
  return k;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;包含对元素类型为引用类型和元素类型为基本类型的Klass实例的查找。基本类型的查找和find_instance_or_array_klass()方法的实现基本类似。下面看调用的resolve_instance_class_or_null()方法对引用类型的查找，实现如下： &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
Klass* SystemDictionary::resolve_instance_class_or_null(Symbol* name,
                                                        Handle class_loader,
                                                        Handle protection_domain,
                                                        TRAPS ){
//  assert(name != NULL &amp;amp;&amp;amp; !FieldType::is_array(name) &amp;amp;&amp;amp;
//         !FieldType::is_obj(name), &quot;invalid class name&quot;);

  // UseNewReflection
  // Fix for 4474172; see evaluation for more details
  class_loader = Handle(THREAD, java_lang_ClassLoader::non_reflection_class_loader(class_loader()));
  ClassLoaderData *loader_data = register_loader(class_loader, CHECK_NULL);

  // Do lookup to see if class already exist and the protection domain has the right access
  // This call uses find which checks protection domain already matches
  // All subsequent calls use find_class, and set has_loaded_class so that
  // before we return a result we call out to java to check for valid protection domain
  // to allow returning the Klass* and add it to the pd_set if it is valid
  // 在变量SystemDictionary::_dictionary中查找是否类已经加载，如果加载就直接返回
  Dictionary* dic = dictionary();
  // 通过类名和类加载器计算hash值，class_loader是Handle类型，而Handle._value的类型是oop*。而loader_data是ClassLoaderData*类型
  unsigned int d_hash = dic-&amp;gt;compute_hash(name, loader_data);
  // 计算在hash中的索引位置
  int d_index = dic-&amp;gt;hash_to_index(d_hash);
  // 根据hash和index 查到对应的klassOop
  Klass* probe = dic-&amp;gt;find(d_index, d_hash, name, loader_data,protection_domain, THREAD);
  if (probe != NULL){
          return probe; // 如果直接找到的话,则返回
  }
  // ...  省略其它查找的逻辑
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果类还没有加载，那么当前的方法还需要负责加载类。在实现的过程中考虑的因素比较多，比如解决并行加载、触发父类的加载、域权限的验证等，不过这些都不是我们要讨论的重点，我们仅看加载的过程，resolve_instance_class_or_null()方法中有如下调用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
// Do actual loading
k = load_instance_class(name, class_loader, THREAD);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用的方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;58&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
// 体现出“双亲委派”机制，只要涉及到类的加载，都会调用这个函数
instanceKlassHandle SystemDictionary::load_instance_class(Symbol* class_name, Handle class_loader, TRAPS) {
  instanceKlassHandle nh = instanceKlassHandle(); // null Handle
  if (class_loader.is_null()) { // 使用引导类加载器来加载类

    // Search the shared system dictionary for classes preloaded into the shared spaces.
    // 在共享系统字典中搜索预加载到共享空间中的类，默认不使用共享空间，所以查找的结果为NULL
    instanceKlassHandle k;
    {
      k = load_shared_class(class_name, class_loader, THREAD);
    }

    if (k.is_null()) {
      // Use VM class loader，也就是系统类加载器进行类加载
      k = ClassLoader::load_classfile(class_name, CHECK_(nh));
    }
    // find_or_define_instance_class may return a different InstanceKlass
    // 调用SystemDictionary::find_or_define_instance_class-&amp;gt;SystemDictionary::update_dictionary-&amp;gt; Dictionary::add_klass()将
    // 生成的Klass对象存起来。Dictionary是个hash表实现，使用的也是开链法解决hash冲突。
    if (!k.is_null()) {
      // 支持并行加载，也就是允许同一个类加载器同时加载多个类
      k = find_or_define_instance_class(class_name, class_loader, k, CHECK_(nh)); 
    }
    return k;
  } else { // 使用指定的类加载器加载，最终会调用java.lang.ClassLoader()这个Java方法去执行类加载
    // Use user specified class loader to load class. Call loadClass operation on class_loader.
    ResourceMark rm(THREAD);

    JavaThread* jt = (JavaThread*) THREAD;

    Handle s = java_lang_String::create_from_symbol(class_name, CHECK_(nh));
    // Translate to external class name format, i.e., convert '/' chars to '.'
    Handle string = java_lang_String::externalize_classname(s, CHECK_(nh));

    JavaValue result(T_OBJECT);

    KlassHandle spec_klass (THREAD, SystemDictionary::ClassLoader_klass());
    // 调用java.lang.ClassLoader类中的loadClass()方法进行类加载
    JavaCalls::call_virtual(&amp;amp;result,
                              class_loader,
                              spec_klass,
                              vmSymbols::loadClass_name(),
                              vmSymbols::string_class_signature(),
                              string,
                              CHECK_(nh));
//    assert(result.get_type() == T_OBJECT, &quot;just checking&quot;);
    oop obj = (oop) result.get_jobject(); // 获取调用loadClass()方法返回的Class对象

    // Primitive classes return null since forName() can not be
    // used to obtain any of the Class objects representing primitives or void
    if ((obj != NULL) &amp;amp;&amp;amp; !(java_lang_Class::is_primitive(obj))) {
      // 获取Class对象表示的Java类，也就是获取表示Java类的instanceKlass对象
      instanceKlassHandle k = instanceKlassHandle(THREAD, java_lang_Class::as_Klass(obj));

      // For user defined Java class loaders, check that the name returned is
      // the same as that requested.  This check is done for the bootstrap
      // loader when parsing the class file.
      if (class_name == k-&amp;gt;name()) {
        return k;
      }
    }
    // Class is not found or has the wrong name, return NULL
    return nh;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当class_loader为NULL时，表示使用启动类加载器加载类，调用ClassLoader::load_classfile()方法加载类；当class_loader不为NULL时，会调用java.lang.ClassLoader类中的loadClass()方法，这在前面详细介绍过，这里不再介绍。&lt;/p&gt;
&lt;p&gt;ClassLoader::load_classfile()方法的实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
instanceKlassHandle ClassLoader::load_classfile(Symbol* h_name, TRAPS) {
  ResourceMark rm(THREAD);

  // Lookup stream for parsing .class file
  ClassFileStream* stream = NULL;
  int classpath_index = 0;
  {
    ClassPathEntry* e = _first_entry;
    while (e != NULL) {
      stream = e-&amp;gt;open_stream(name, CHECK_NULL);
      if (stream != NULL) {
        break;
      }
      e = e-&amp;gt;next();
      ++classpath_index;
    }
  }

  instanceKlassHandle h;
  if (stream != NULL) {
    // class file found, parse it
    ClassFileParser parser(stream);
    ClassLoaderData* loader_data = ClassLoaderData::the_null_class_loader_data();
    Handle protection_domain;
    TempNewSymbol parsed_name = NULL;&lt;br/&gt;//  解析Class文件
    instanceKlassHandle result = parser.parseClassFile(h_name,loader_data,protection_domain,parsed_name,false,CHECK_(h));
    // add to package table
    if (add_package(name, classpath_index, THREAD)) {
      h = result;
    }
  }

  return h;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法首先从启动类加载器应该查找的路径下查找名称为name的Class文件，如果找到，调用parser.parseClassFile()方法解析Class文件，这个方法非常重要，后面在介绍解析Class文件的过程时会详细介绍。方法最后返回表示Java类的instanceKlass对象。 &lt;/p&gt;
&lt;p&gt;调用SystemDictionary::find_or_define_instance_class()方法可以支持并行加载，这个方法会调用SystemDictionary::update_dictionary()函数将已经加载的类添加到系统词典Map里面，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
源代码位置：hotspot/src/share/vm/classfile/systemDictionary.cpp
void SystemDictionary::update_dictionary(int d_index, unsigned int d_hash,
                                         int p_index, unsigned int p_hash,
                                         instanceKlassHandle k,
                                         Handle class_loader,
                                         TRAPS) {
  // Compile_lock prevents systemDictionary updates during compilations
  assert_locked_or_safepoint(Compile_lock);
  Symbol*  name  = k-&amp;gt;name();
  ClassLoaderData *loader_data = class_loader_data(class_loader);

  {
  MutexLocker mu1(SystemDictionary_lock, THREAD);
  ...
  // 当前对象已经存在了？
  Klass* sd_check = find_class(d_index, d_hash, name, loader_data);
  //不存在则添加
  if (sd_check == NULL) {
      //添加kclass到系统词典
    dictionary()-&amp;gt;add_klass(name, loader_data, k);
    notice_modification();
  }
  ...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中key使用类的包路径+类名，类加载器两者确定，value则为具体加载的类对应的instanceKlassHandle对象，其中维护这kclass对象。也就是系统词典里面使用类加载器和类的包路径类名唯一确定一个类。这也验证了在Java中同一个类使用两个类加载器进行加载后，加载的两个类是不一样的，是不能相互赋值的。 &lt;/p&gt;
&lt;h3 class=&quot;17&quot;&gt;3．findClass()方法&lt;/h3&gt;
&lt;p&gt;调用findClass()方法完成类的加载请求，这个方法会调用本地函数defineClass1()，实现如下： &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
static native Class&amp;lt;?&amp;gt; defineClass1(ClassLoader loader, String name, byte[] b, int off, int len,
                                    ProtectionDomain pd, String source); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;definClass1()对应的JNI方法为 Java_java_lang_ClassLoader_defineClass1()，实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
JNIEXPORT jclass JNICALL
Java_java_lang_ClassLoader_defineClass1(JNIEnv *env,
                                        jclass cls,
                                        jobject loader,
                                        jstring name,
                                        jbyteArray data,
                                        jint offset,
                                        jint length,
                                        jobject pd,
                                        jstring source)
{
    ......
    result = JVM_DefineClassWithSource(env, utfName, loader, body, length, pd, utfSource);
    ......
    return result;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Java_java_lang_ClassLoader_defineClass1()函数主要是调用了JVM_DefineClassWithSource()加载类，最终调用的是 jvm.cpp 中的 jvm_define_class_common()函数。核心的实现逻辑如下： &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;56&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
static jclass jvm_define_class_common(JNIEnv *env, const char *name,
                                      jobject loader, const jbyte *buf,
                                      jsize len, jobject pd, const char *source,
                                      jboolean verify, TRAPS) {
  JavaThread* jt = (JavaThread*) THREAD;

  // Since exceptions can be thrown, class initialization can take place
  // if name is NULL no check for class name in .class stream has to be made.
  TempNewSymbol class_name = NULL;
  if (name != NULL) {
    const int str_len = (int)strlen(name);
    class_name = SymbolTable::new_symbol(name, str_len, CHECK_NULL);
  }

  ResourceMark rm(THREAD);

  ClassFileStream st((u1*) buf, len, (char *)source);
  Handle  class_loader (THREAD, JNIHandles::resolve(loader));

  Handle protection_domain (THREAD, JNIHandles::resolve(pd));
  Klass*  k = SystemDictionary::resolve_from_stream(class_name, class_loader, // 加载Java主类
                                                     protection_domain, &amp;amp;st,
                                                     verify != 0,
                                                     CHECK_NULL);

  return (jclass) JNIHandles::make_local(env, k-&amp;gt;java_mirror());
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这段逻辑主要就是利用 ClassFileStream 将要加载的Class文件转成文件流，然后调用SystemDictionary::resolve_from_stream()函数生成 Class 在 HotSpot 中的表示Klass。resolve_from_stream()函数的实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:false;&quot;&gt;
// Add a klass to the system from a stream (called by jni_DefineClass and
// JVM_DefineClass).
// Note: class_name can be NULL. In that case we do not know the name of
// the class until we have parsed the stream.
Klass* SystemDictionary::resolve_from_stream(Symbol* class_name,
                                             Handle class_loader,
                                             Handle protection_domain,
                                             ClassFileStream* st,
                                             bool verify,
                                             TRAPS) {

  // ...
  // 解析文件流，生成 InstanceKlass
  ClassFileParser cfp = ClassFileParser(st);
  instanceKlassHandle k = cfp.parseClassFile(class_name,
                                                                                         loader_data,
                                                                                         protection_domain,
                                                                                         parsed_name,
                                                                                         verify,
                                                                                         THREAD);

  // ...
  if (!HAS_PENDING_EXCEPTION) {
    // Add class just loaded
    // If a class loader supports parallel classloading handle parallel define requests
    // find_or_define_instance_class may return a different InstanceKlass
    // 利用SystemDictionary注册生成的 Klass
    // SystemDictionary 是用来帮助保存 ClassLoader 加载过的类信息的。准确点说，SystemDictionary
    // 并不是一个容器，真正用来保存类信息的容器是 Dictionary，每个ClassLoaderData 中都保存着一个私有的
    // Dictionary，而 SystemDictionary 只是一个拥有很多静态方法的工具类而已。
    if (is_parallelCapable(class_loader)) {
      k = find_or_define_instance_class(class_name, class_loader, k, THREAD);
    } else {
      // 如果禁止了并行加载，那么直接利用SystemDictionary将 InstanceKlass
      // 注册到 ClassLoader的 Dictionary 中即可
      define_instance_class(k, THREAD);
    }
  }

  return k();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用parseClassFile()完成类的解析，然后调用find_or_define_instance_class()或define_instance_class()方法完成在SystemDictionary中的注册。 &lt;/p&gt;
&lt;p&gt;实例2&lt;/p&gt;
&lt;p&gt;更改实例1中的UserClassLoader类的loadClass()方法的实现，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:false;&quot;&gt;
@Override
protected Class&amp;lt;?&amp;gt; loadClass(String name, boolean resolve) throws ClassNotFoundException {
    if (name.startsWith(&quot;com.jvm&quot;)) {
        return findClass(name);
    }
    return super.loadClass(name, resolve);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样像Student这样的在com.jvm包下的类就会由用户自定义的类加载器UserClassLoader类来加载了。&lt;/p&gt;
&lt;p&gt;更改实例1中TestClassLoader类的实现，使用Student类型来接收clazz.newInstance()获取到的Student对象，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:false;&quot;&gt;
Student obj = (Student)clazz.newInstance();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实例运行后，抛出的异常的简要信息如下：&lt;/p&gt;
&lt;p&gt;Exception in thread &quot;main&quot; java.lang.ClassCastException: com.jvm.Student cannot be cast to com.jvm.Student&lt;/p&gt;
&lt;p&gt;因为实例化的Student对象所属的InstanceKlass是由UserClassLoader加载生成的，而我们要强转的类型Student对应的InstanceKlass是由系统默认的ClassLoader生成的，所以本质上它们就是两个毫无关联的InstanceKlass，当然不能强转。&lt;/p&gt;
&lt;p&gt;相关文章的链接如下：&lt;/p&gt;
&lt;p&gt;1、&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/mazhimazhi/p/13215548.html&quot; target=&quot;_blank&quot;&gt;在Ubuntu 16.04上编译OpenJDK8的源代码&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;2、&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/mazhimazhi/p/13217159.html&quot; target=&quot;_blank&quot;&gt;调试HotSpot源代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/mazhimazhi/p/13222664.html&quot; target=&quot;_blank&quot;&gt;HotSpot项目结构&lt;/a&gt;　&lt;/p&gt;
&lt;p&gt;4、&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/mazhimazhi/p/13228157.html&quot; target=&quot;_blank&quot;&gt;HotSpot的启动过程&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;5、&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/mazhimazhi/p/13233607.html&quot; target=&quot;_blank&quot;&gt;HotSpot二分模型（1）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6、&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/mazhimazhi/p/13237631.html&quot; target=&quot;_blank&quot;&gt;HotSpot的类模型（2）&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;7、&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/mazhimazhi/p/13252983.html&quot; target=&quot;_blank&quot;&gt;HotSpot的类模型（3） &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;8、&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2 vertical-middle&quot; href=&quot;https://www.cnblogs.com/mazhimazhi/p/13272865.html&quot;&gt;HotSpot的类模型（4）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;9、&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/mazhimazhi/p/13289686.html&quot; target=&quot;_blank&quot;&gt;HotSpot的对象模型（5） &lt;/a&gt; &lt;/p&gt;
&lt;p&gt;10、&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/mazhimazhi/p/13291427.html&quot; target=&quot;_blank&quot;&gt;HotSpot的对象模型（6）&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;11、&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/mazhimazhi/p/13297034.html&quot; target=&quot;_blank&quot;&gt;操作句柄Handle（7）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;12、&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/mazhimazhi/p/13303505.html&quot; target=&quot;_blank&quot;&gt;句柄Handle的释放（8）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;13、&lt;a class=&quot;entry&quot; href=&quot;https://www.cnblogs.com/mazhimazhi/p/13320889.html&quot; target=&quot;_blank&quot;&gt;类加载器&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作者持续维护的个人博客&lt;a href=&quot;http://classloading.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;classloading.com&lt;/strong&gt;&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关注公众号，有HotSpot源码剖析系列文章！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1236123/202006/1236123-20200630200021532-955264784.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;　 &lt;/p&gt;

</description>
<pubDate>Sat, 18 Jul 2020 23:38:00 +0000</pubDate>
<dc:creator>HotSpot-Researcher</dc:creator>
<og:description>前一篇介绍了3种类加载器，每种类加载器都加载指定路径下的类库，它们在具体使用时并不是相互独立的，而是相互配合对类进行加载。另外如果有必要，还可以编写自定义的类加载器。这些类加载器的的关系一般如下图所示</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/mazhimazhi/p/13338549.html</dc:identifier>
</item>
<item>
<title>常用的电脑使用技巧（肝货二） - 余月七</title>
<link>http://www.cnblogs.com/unleashed/p/13338368.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/unleashed/p/13338368.html</guid>
<description>&lt;h2 id=&quot;常用的电脑使用技巧（肝货二）&quot;&gt;常用的电脑使用技巧（肝货二）&lt;/h2&gt;

&lt;p&gt;虽然我暂且是一名大学生，而且可能接触计算机的时间也不算是很长，顶多就是个两年，而且一年的时间还是混过来的那种，直到我自学Java开始，我才发现我需要了解的知识实在是太多太多了！所以说，悬崖勒马，还不迟，抓紧学吧！&lt;br/&gt;在这短暂的时间里，我也可以算是渐渐的熟悉了计算机以及win操作系统，虽然没有到那种可以更改系统运行库的级别，但也算是可以让电脑顺手用一点吧。&lt;br/&gt;就我感觉还是有很多的东西是比较有用的，不管是对学编程的人来说还是用电脑的小白，可能有一部分学计算机的人是觉得这些东西是没太多用的，毕竟学计算机这方面接触Linux也不在少数，所以很多学计算机的可能对win有点抵触。但总归在我们有生之年，可能还要有一大部分时间是要和win来打交道的，此外，我们尚且也不知Linux到底最终是否可以完全的代替win这种操作系统！还有呢，就是我也希望非计算机专业的人也就是一些接触电脑不太长时间的人，也能够熟练运用你手上的Windows系统进行学习与办公，毕竟这是一个信息化时代！&lt;br/&gt;这里要说的是，这篇电脑技巧仅仅基于win操作系统，虽然有的人用的Mac系统或者Linux系统，但是用win操作系统的人还是有很多的，所以还是围绕win操作系统的使用姿势。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2031154/202007/2031154-20200719003544605-844025291.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;有兴趣的话，一起跟我往下看，一点点掌握这些技巧吧&quot;&gt;&lt;strong&gt;有兴趣的话，一起跟我往下看，一点点掌握这些技巧吧!&lt;/strong&gt;&lt;/h2&gt;


&lt;hr/&gt;&lt;h4 id=&quot;请记住-----打了--对号-的快捷键&quot;&gt;&lt;strong&gt;请记住 打了 “对号” 的快捷键&lt;/strong&gt;&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;Windows + E&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;打开文件资源管理器&lt;/strong&gt; ☑&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;18.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Windows+ I&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;快速打开设置（win10）&lt;/strong&gt; ☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Windows + M&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;返回桌面&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Windows+ Pause&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看系统属性&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Windows + V&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看剪贴板内容&lt;/strong&gt; ☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Windows + X&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;打开 开始菜单&lt;/strong&gt; ☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Windows + R&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;运行系统环境变量中存在路径的程序☑&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Windows + D&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;最小化所有窗口，再按一次Win+D可回到最小化前的窗口&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Windows + M&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;最小化所有窗口，但再按一次无法回到最小化前的窗口&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Windows + S&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;打开搜索框&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Windows + L&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;快速锁定屏幕&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Windows + Tab&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;快速的切换任务视图&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Windows + PrtScn&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;保存截图&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Windows+Shift +S&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;进行自定义截图（win10）&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;strong&gt;Ctrl+C Ctrl+V&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;分别是我们最常用的 复制、粘贴 ；请记住这位曾是计算机图形界面的研发者之一的 拉里.泰斯勒 ☑&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ctrl + A&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;全选&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ctrl +X&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;剪切&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ctrl + Z&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;撤销&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Ctrl+ 鼠标滚轮&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;会在一些程序中进行放大和缩小的操作&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Ctrl + F&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;在文件或者文本中快速打开搜索，进行搜索你想要的东西&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Ctrl+Esc= Windows&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;这两个键等同于 打开 “开始 ”菜单&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Ctrl + Alt + Del&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;打开安全选项（其中有任务管理器）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Ctrl + Shift +Esc&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;进入 任务管理器（有时候电脑卡顿，可强制关闭一些运行程序）&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Ctrl + Shift&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;按住这个键，然后进行拖动，可以创建文件“快捷方式”&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Ctrl+ Home&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;将游标移至文字编辑区的开始始(Home单用：移至列首&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Shift+F10&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;可以 打开 “鼠标 “所在位置，所选项目的 “右键菜单”&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Alt + Tab&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;快速切换我们的工作窗口&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Alt + F4&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;关闭当前视窗（若是点一下桌面再按则为关机）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;hr/&gt;&lt;h3 id=&quot;-2&quot;/&gt;

&lt;h2 id=&quot;1、运行命令&quot;&gt;1、运行命令&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;Windows + R 唤出 运行命令&lt;/strong&gt;，&lt;strong&gt;然后输入以下内容&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Ping 1.1.1.1 -t&lt;/th&gt;
&lt;th&gt;可以简略的查看你当前网络是否畅通 &lt;strong&gt;☑&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;cmd dos（或者直接是cmd）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;唤出命令行 ☑&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;gpedit.msc&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;打开计算机组策略&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Nslookup&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;打开IP地址侦测器 ☑&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;explorer&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;打开资源管理器&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;logoff&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;注销命令 ☑&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;services.msc&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;本地服务配置&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;slmgr.vbs -xpr&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看你的计算机系统是否激活 ☑&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;cleanmgr&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;进行简单的磁盘清理&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;calc&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;启动计算器 ☑&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;devmgmt.msc&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;启动设备管理器&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;regedit&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;注册表管理器☑&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;msconfig&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;系统配置实用程序&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;perfmon.msc&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;计算机性能检测程序&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;winver&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;检查windows版本&lt;/strong&gt;** ☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;strong&gt;Rundll32 netplwiz.dll,UsersRunDll&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;更改、添加用户名&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;write&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;打开写字板&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;notepad&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;打开记事本&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;mspaint&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;打开画图板&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;hr/&gt;&lt;h4 id=&quot;-3&quot;/&gt;
&lt;h2 id=&quot;2、dos命令&quot;&gt;2、Dos命令&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;利用快捷键 Windows + R ，然后输入 cmd 进入命令行&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;dir&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;查看当前文件夹目录&lt;/strong&gt;☑&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;32.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;cd ..&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;返回上级目录（cd 与英文点之间有空格）&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;cd +&quot;&quot;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;直接返回至根目录下&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;strong&gt;盘符+&quot;：&quot;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;比如 &quot;C:&quot; ,回车之后直接进入c盘（这个命令就是切换盘符的）&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;net user&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看计算机有哪些用户&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;net user 用户名&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看该用户名的属性&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;net start&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看计算机开启了哪些服务&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;net start 服务名&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;开启某个服务&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;net stop 服务名&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;关闭某个服务&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;ipconfig&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看本机IP地址&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;ipconfig&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看本机IP地址（全部参数）&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;netstat -a&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看开启了哪些端口（也可用netstat -an）&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;netstat -n&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看端口的网络连接情况&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;netstat -v&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看正在进行的工作&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;netstat -p 协议名&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看某协议的使用情况&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;netstat -s&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看当前所有协议的使用情况&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;tracert ip地址&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;跟踪路由，查看我们数据包经过了哪些地方&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;strong&gt;ping ip(或域名)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看网络是否畅通；参数：“-l[空格]数据包大小”；“-n发送数据次数”；“-t”指一直ping。&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;strong&gt;arp -a&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;查看和处理ARP缓存，ARP是名字解析的意思，负责把一个IP解析成一个物理性的MAC地址。arp -a将显示出全部信息&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;echo 输入内容&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;在屏幕上显示出信息&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;set 指定环境变量名称=要指派给变量的字符&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;设置环境变量&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;set&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;显示当前所有的环境变量&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;set p(或其它字符)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;显示出当前以字符p(或其它字符)开头的所有环境变量&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;echo 信息 &amp;gt;&amp;gt; pass.txt&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;将&quot;信息&quot;保存到pass.txt文件中&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;title 标题名字&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;更改CMD窗口标题名字&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;strong&gt;color 颜色值&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;设置cmd控制台前景和背景颜色；可以先输入 color help 查看颜色值；设置之后，可以输入color恢复原来颜色&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;md 文件名&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;创建目录&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;cd 文件夹名&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;进入到文件夹下&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;diskpart&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;进入磁盘管理工具；然后输入下一行表格命令&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;strong&gt;list disk&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;注意：两者间有空格；查看当前磁盘信息；或者可先输入list，查看命令摘要；接着输入下面命令&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;select disk 盘符数字&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;注意：0和1两个中有一个系统盘，请慎重选择；继续输入下一行命令&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;clean&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;清除磁盘；慎重！！！！！ 继续下一行&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;creat partition primary&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;创建主分区&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;strong&gt;format 盘符 /FS:类型 :FAT、FAT32、NTFS&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;格式化磁盘；例：Format D: /FS:NTFS&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;tree&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;以树形结构显示出目录&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;type 文本文件名&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;显示出文本文件内容（中文有可能出来是乱码）&lt;/strong&gt;☑&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;hr/&gt;&lt;h3 id=&quot;-4&quot;/&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2031154/202007/2031154-20200719004530256-391321097.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;如何提升电脑速度，想必还是有很多人比较关心这种简单直接的吧，我在这里也做一个小小的建议，仅供参考！&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、先拿软件下手&quot;&gt;1、先拿软件下手&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;首先我们进行设定 &lt;strong&gt;虚拟内存&lt;/strong&gt;&lt;br/&gt;　我们计算机的硬盘中有一个很宠大的&lt;strong&gt;数据交换文件&lt;/strong&gt;，它是系统预留给虚拟内存作暂存的地方，很多应用程序都经常会使用到，所以系统需要经常对主存储器作大量的数据存取，因此存取这个档案的速度便构成影响计算机快慢的非常重要因素！&lt;br/&gt;一般Windows预设的是由系统自行管理虚拟内存，它会因应不同程序所需而自动调校交换档的大小，但这样的变大缩小会给系统带来额外的负担，令系统运作变慢！由此可见，用户最好自定虚拟内存的最小值和最大值，避免经常变换大小。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;要设定虚拟内存，在“我的电脑”上按右键选择“属性”，在“高级”选项里的“性能”的对话框中，对“虚拟内存”进行设置。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;接着往下看&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;是否是应用软件或者驱动程序引起问题？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;　　有些程序在电脑系统启动会时使系统变慢。如果要是这方面的原因，我们可以从“安全模式”启动。因为这是原始启动，“安全模式”运行的要比正常运行时要慢。但是，如果你用“安全模式”启动发现电脑启动速度比正常启动时速度要快，那可能某个程序是导致系统启动速度变慢的原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;是否因为没彻底删除程序？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;3.06&quot;&gt;
&lt;p&gt;　&lt;em&gt;&lt;strong&gt;　可以利用我上一篇所推荐的软件：&lt;/strong&gt;&lt;/em&gt;&lt;a href=&quot;https://www.cnblogs.com/unleashed/p/13326786.html&quot;&gt;https://www.cnblogs.com/unleashed/p/13326786.htm&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/unleashed/p/13326786.html&quot;&gt;l&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;是否因为自启动程序过多？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;何谓随机启动程序呢？随机启动程序就是在开机时加载的程序。随机启动程序不但拖慢开机时的速度，而且更快地消耗计算机资源以及内存，一般来说，如果想删除随机启动程序，可去“启动”清单中删除，但如果想详细些，例如是QQ、popkiller 之类的软件，是不能在“启动”清单中删除的，要去“附属应用程序”，然后去“系统工具”，再去“系统信息”，进去后，按上方工具列的“工具”，再按“系统组态编辑程序”，进去后，在“启动”的对话框中，就会详细列出在启动电脑时加载的随机启动程序了！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;其实我们还可以打开&lt;/strong&gt;&lt;/em&gt;&lt;em&gt;&lt;strong&gt;任务管理器&lt;/strong&gt;&lt;/em&gt;&lt;em&gt;&lt;strong&gt;，在 “&lt;/strong&gt;&lt;/em&gt;&lt;em&gt;&lt;strong&gt;启动&lt;/strong&gt;&lt;/em&gt;***” 中禁止一些不需要开机自启的程序 ***&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;或者利用我上一篇所推荐的卸载软件（其中的软件大多也是收费的，但是聪明的你总能找到注册码的）&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;是否因为桌面图标太多？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;桌面上有太多图标也会降低系统启动速度。Windows每次启动并显示桌面时，都需要逐个查找桌面快捷方式的图标并加载它们，图标越多，所花费的时间当然就越多。同时有些杀毒软件提供了系统启动扫描功能，这将会耗费非常多的时间，其实如果你已经打开了杀毒软件的实时监视功能，那么启动时扫描系统就显得有些多余，还是将这项功能禁止吧！ 建议大家将不常用的桌面图标放到一个专门的文件夹中或者干脆删除！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;字体也会影响电脑速度的！&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;虽然微软声称Windows操作系统可以安装1000～1500种字体，但实际上当你安装的字体超过500 种时，就会出现问题，比如：字体从应用程序的字体列表中消失以及Windows的启动速度大幅下降。在此建议最好将用不到或者不常用的字体删除，为避免删除后发生意外，可先进行必要的备份&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;关于这点，在这里说说我的看法，其实像一些字体，比如：&lt;/strong&gt;&lt;em&gt;&lt;strong&gt;思源宋体、微软雅黑、Consolas、M&lt;/strong&gt;&lt;/em&gt;&lt;em&gt;&lt;strong&gt;onospaced、&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;今年新出的**** &lt;em&gt;&lt;strong&gt;&lt;strong&gt;Cascadia Code PL，&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;又或者是&lt;/strong&gt;&lt;em&gt;&lt;strong&gt;JetBrainsMono&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;字体&lt;/strong&gt;&lt;em&gt;&lt;strong&gt;，&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;有了这六款字体其实就够了！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么电脑还是会越用越慢？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;与DOS系统相比，Windows过于庞大，而且随着你每天的操作，安装新软件、加载运行库、添加新游戏等等使得它变得更加庞大，而更为重要的是变大的不仅仅是它的目录，还有它的注册表和运行库。因为即使删除了某个程序，可是它使用的DLL文件仍然会存在，因而随着使用日久，Windows的启动和退出时需要加载的DLL动态链接库文件越来越大，自然系统运行速度也就越来越慢了。这时我们就需要使用一些彻底删除DLL的程序，它们可以使Windows恢复苗条的身材。&lt;br/&gt;怎么办？你只能隔一段时间重装一次系统！&lt;br/&gt;当然这只针对像我这样的穷学生，哈哈哈哈！还是建议一般人不要瞎搞，电脑顶多用个四五年有条件的就可以换台电脑了。&lt;br/&gt;突然想到，其实最好的电脑使用技巧就是买台配置贼好的电脑！哈哈哈哈，在这里开个玩笑，毕竟和我一样的“穷学生”还是没有自己的经济实力的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;**在这里多余提一个东西 **&lt;em&gt;&lt;strong&gt;Win.ini&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;在这里我引用了一段话，具体内容你可以参考这篇博文：&lt;/strong&gt;&lt;/em&gt;&lt;a href=&quot;https://www.cnblogs.com/weiyinfu/p/10961872.html&quot;&gt;https://www.cnblogs.com/weiyinfu/p/10961872.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;在windows操作系统家族中，system.ini和win.ini这两个文件包含了操作系统所有的控制功能和应用程序的信息，system.ini管理计算机硬件而win.ini管理桌面和应用程序。所有驱动、字体、设置和参数会保存在.ini文件中，任何新程序都会被记录在.ini文件中。这些记录会在程序代码中被引用。因为受win.ini和system.ini文件大小的限制，程序员添加辅助的.INI文件以用来控制更多的应用程序。举例来说，微软的Excel有一个office excel.ini文件，它包含着选项、设置、缺省参数和其他关系到Excel运行正常的信息。在system.ini和win.ini中只需要指出excel.ini的路径和文件名即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;利用快捷键Win + R，然后输入 Win.ini ，进行编辑（一般人不要乱改！！）&lt;/strong&gt;&lt;/em&gt;&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2031154/202007/2031154-20200719004714126-1330591873.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;2、再拿硬件下手&quot;&gt;2、再拿硬件下手&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;这里我想要说一句话，虽然我是计算机专业，但我是真的接触硬件的地方少，所以下面要建议的东西，都基本是我感觉还可以说出来的东西，也有许多是我看了很多网上的内容，所集合出来的资料。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;那就接着往下看吧！&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;是否是因为磁盘进行了压缩？&lt;/strong&gt;&lt;br/&gt;这里要提醒的是，“磁盘压缩”这种操作可能会使电脑性能急剧下降，从而造成系统速度的变慢。&lt;br/&gt;所以这时候你应该去检查一下是否使用了“&lt;strong&gt;磁盘压缩&lt;/strong&gt;”，如何查看呢？&lt;/p&gt;
&lt;p&gt;这里推荐一篇知乎上的文章：&lt;a href=&quot;https://www.reneelab.com.cn/m/compress-the-drive-to-save-disk-space.html&quot;&gt;https://www.reneelab.com.cn/m/compress-the-drive-to-save-disk-space.html&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;里面也提到了缺点！&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于硬件驱动&lt;/strong&gt;&lt;br/&gt;很多人都是对电脑接触不太久的，甚至可以说是小白；所以这导致对于硬件的驱动认识根本可以说是没有，而一般人装系统时不知道安装驱动程序，然后怪系统和电脑，而系统也只能说是“哑巴吃黄连，有苦说不出啊”，并不能发挥出硬件的性能，这样真的是白白的浪费了资源。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;也许有的人是知道的，相同的硬件搭配不同版本的驱动程序或者是不同厂家的驱动程序常常都会造成性能上的差异极大，更何况是没有安装驱动程序呢！声音、色彩、处理速度等等，表现不出来，系统也很难受啊！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Windows操作系统所带来的优点之一就是多线性、多任务，系统可以利用CPU来进行分时操作，以便你同时做许多事情。但事情有利自然有弊，多任务操作也会对你的机器提出更高的要求。朋友们都知道即使是一个最常用的WORD软件也要求最好有20MB左右的内存，而运行如Photo Shop等大型软件时，1024MB的内存也不够用。所以此时系统就会自动采用硬盘空间来虚拟主内存，用于运行程序和储存交换文件以及各种临时文件。由于硬盘是机械结构，而内存是电子结构，它们两者之间的速度相差好几个数量级，因而使用硬盘来虚拟主内存将导致程序运行的速度大幅度降低&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;要不买个内存条吧！&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;硬盘空间不足&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;使用Windows系统平台的缺点之一就是对文件的管理不清楚，你有时根本就不知道这个文件对系统是否有用，因而Windows目录下的文件数目越来越多，容量也越来越庞大，加之现在的软件都喜欢越做越大，再加上一些系统产生的临时文件、交换文件，所有这些都会使得硬盘可用空间变小。当硬盘的可用空间小到一定程度时，就会造成系统的交换文件、临时文件缺乏可用空间，降低了系统的运行效率。更为重要的是由于我们平时频繁在硬盘上储存、删除各种软件，使得硬盘的可用空间变得支离破碎，因此系统在存储文件时常常没有按连续的顺序存放，这将导致系统存储和读取文件时频繁移动磁头，极大地降低了系统的运行速度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;这里要提醒的是关于分区的问题，关于分几个区的问题，有兴趣的可以看看这篇博文，虽然时间长了，但也可以做个参考&lt;/strong&gt;&lt;/em&gt;&lt;em&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;/em&gt;&lt;a href=&quot;https://www.cnblogs.com/personnel/p/4583310.html&quot;&gt;https://www.cnblogs.com/personnel/p/4583310.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;以下是了解性的内容&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;因为下面的这些内容基本都和台式电脑有关，而且涉及到硬件上要动手的事，所以小白还是不要轻易尝试&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10.5&quot;&gt;
&lt;p&gt;&lt;strong&gt;CPU 和风扇是否正常运转并足够制冷&lt;/strong&gt;&lt;br/&gt;　当CPU风扇转速变慢时，CPU本身的温度就会升高，为了保护CPU的安全，CPU就会自动降低运行频率，从而导致计算机运行速度变慢。有两个方法检测CPU的温度。你可以用“手指测法”用手指试一下处理器的温度是否烫手，但是要注意的是采用这种方法必须先拔掉电源插头，然后接一根接地线来防止身上带的静电击穿CPU以至损坏。另一个比较科学的方法是用带感温器的万用表来检测处理器的温度。&lt;br/&gt;　因为处理器的种类和型号不同，合理温度也各不相同。但是总的来说，温度应该低于 110 度。如果你发现处理器的测试高于这处温度，检查一下机箱内的风扇是否正常运转。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;USB和扫描仪造成的影响&lt;/strong&gt;&lt;br/&gt;由于Windows 启动时会对各个驱动器（包括光驱）进行检测，因此如果光驱中放置了光盘，也会延长电脑的启动时间。所以如果电脑安装了扫描仪等设备，或在启动时已经连接了USB硬盘，那么不妨试试先将它们断开，看看启动速度是不是有变化。一般来说，由于USB接口速度较慢，因此相应设备会对电脑启动速度有较明显的影响，应该尽量在启动后再连接USB设备。如果没有USB设备，那么建议直接在BIOS设置中将USB功能关闭。&lt;br/&gt;&lt;strong&gt;网卡造成的影响&lt;/strong&gt;&lt;br/&gt;只要设置不当，网卡也会明显影响系统启动速度，你的电脑如果连接在局域网内，安装好网卡驱动程序后，默认情况下系统会自动通过DHCP来获得IP地址，但大多数公司的局域网并没有DHCP服务器，因此如果用户设置成“自动获得IP地址”，系统在启动时就会不断在网络中搜索DHCP 服务器，直到获得IP 地址或超时，自然就影响了启动时间，因此局域网用户最好为自己的电脑指定固定IP地址。&lt;br/&gt;&lt;strong&gt;系统配件配置不当&lt;/strong&gt;&lt;br/&gt;一些用户在组装机器时往往忽略一些小东西，从而造成计算机整体配件搭配不当，存在着速度上的瓶颈。比如有些朋友选的CPU档次很高，可声卡等却买了普通的便宜货，其实这样做往往是得不偿失。因为这样一来计算机在运行游戏、播放影碟时由于声卡占用CPU资源较高且其数据传输速度较慢，或者其根本无硬件解码而需要采用软件解码方式，常常会引起声音的停顿，甚至导致程序的运行断断续续。又如有些朋友的机器是升了级的，过去老机器上的一些部件如内存条舍不得抛弃，装在新机器上照用，可是由于老内存的速度限制，往往使新机器必须降低速度来迁就它，从而降低了整机的性能，极大地影响了整体的运行速度。&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2031154/202007/2031154-20200719004902585-1473293818.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;其实写完之后，我就突然又想到：其实上面这些东西仅仅对和IT行业有关的人或者一些对电脑感兴趣的人有点小用，对普通人，我发现其实没必要记住这些技巧。像一般人，我感觉平时不乱给电脑下载软件，就用电脑追追剧，写写文档，做做表，还有一系列和学习办公有关的事，电脑是基本不会出现大问题的；而且我敢保证在这个时代，你身边真的不乏学计算机的同学或者朋友或者认识的专业人士，其实一些问题完全可以由他们来帮你解决；还有就是也想起身边很多人说的”电脑一般的死故障，重装系统可以解决99%的问题“，其实这句话也可以算正确的，毕竟现在有各种系统供我们选择！如果感兴趣也可以下去学一下装系统，毕竟这个时代88%的人都会装系统（哈哈哈哈，调侃一下）。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 18 Jul 2020 17:04:00 +0000</pubDate>
<dc:creator>余月七</dc:creator>
<og:description>常用的电脑使用技巧（肝货二） 前言 虽然我暂且是一名大学生，而且可能接触计算机的时间也不算是很长，顶多就是个两年，而且一年的时间还是混过来的那种，直到我自学Java开始，我才发现我需要了解的知识实在是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/unleashed/p/13338368.html</dc:identifier>
</item>
<item>
<title>从一次故障聊聊前端 UI 自动化测试 - 格子熊</title>
<link>http://www.cnblogs.com/karthuslorin/p/13338353.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/karthuslorin/p/13338353.html</guid>
<description>&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;事件的起因在于老板最近的两次“故障”，一次去年的，一次最近。共同原因都是脚手架在发布平台发布打包时出错，导致线上应用白屏不可用。&lt;/p&gt;
&lt;p&gt;最神奇的是，事后多次 Code Review，结果还是没有发现任何能够导致该问题的 bug，最后推测有可能是服务器在发布打包的时候出了问题。&lt;/p&gt;
&lt;p&gt;当老板第 N + 1 次吐槽因为他写的工程化工具领来的天外飞锅，我突然思考起来，如何才能避免这种天外飞锅。&lt;/p&gt;
&lt;p&gt;归根结底，导致这类线上故障的原因都是在于打包上线的代码没有经过验证。针对这个问题，有两种方法可以解决：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;治本，由于请求地址不同，预发（测试）版本不可直接发线上，而线上版本缺少了上线之前的验证过程。所以，可以通过在发布系统的预发和线上之间，新增一个 beta 发布，beta 发布使用线上发布的打包流程，不同的是，只允许内网访问，专门用于内部测试。有人可能会问，哪怕添加了 beta 发布，依然无法保证线上发布重新打包的时候不出错呀？重点来了，这种解决方案的核心就在于，beta 发布测试通过后，直接将 beta 发布的打包产物进行线上发布，因为不需要二次打包，所以避免了打包过程中产生新的问题。由于添加 beta 发布需要不同岗位，比如运维、后端、移动端的协作，所以实施难度较大。&lt;/li&gt;
&lt;li&gt;治标，既然线上版本上线之前验证不了，那么上线之后立刻回归验证，如果发现问题，立刻手动回滚。正所谓没有人发现的故障就不是故障，perfect！&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;正如之前所说的，治本的方法实施难度较大，所以，我们重点关注治标的方法，即上线之后进行回归验证。&lt;/p&gt;
&lt;p&gt;说到这里，问大家一个问题，需求上线之后，作为前端，大家会主动进行回归验证而不是等测试进行验证吗？&lt;/p&gt;
&lt;p&gt;不管你们会不会，反正我是不会[doge]。&lt;/p&gt;
&lt;p&gt;在这种情况下，前端 UI 自动化测试闪亮登场。&lt;/p&gt;
&lt;h2 id=&quot;什么是前端-ui-自动化测试&quot;&gt;什么是前端 UI 自动化测试&lt;/h2&gt;
&lt;p&gt;众所周知，测试是一个很重要的环节，由于它的重要性，甚至软件工程中出现了 TDD 这种说法。&lt;/p&gt;
&lt;p&gt;在之前，所谓的前端测试，更多的是在页面上点点点，进行人肉测试，毫无疑问，效率低下。&lt;/p&gt;
&lt;p&gt;所以，有了前端自动化测试，使用机器代替人工。一般来说，前端自动化测试分为两种：单元测试以及 e2e 测试（UI 自动化测试）。&lt;/p&gt;
&lt;p&gt;单元测试本质上是一种白盒测试，是对程序中的最小可测试单元进行测试。&lt;/p&gt;
&lt;p&gt;e2e 测试本质上是一种黑盒测试，相当于模拟用户访问应用程序，主要检查界面或功能是否正确。&lt;/p&gt;
&lt;p&gt;相比于单元测试，UI 自动化测试更多的是站在用户角度，从用户的角度发现问题。但是，由于它其实是一种黑盒测试，所以效率相对于白盒测试要低一些。&lt;/p&gt;
&lt;h2 id=&quot;前端-ui-自动化测试框架对比&quot;&gt;前端 UI 自动化测试框架对比&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SeleniumHQ/selenium&quot;&gt;Selenium&lt;/a&gt;：e2e 测试鼻祖级的框架，有多种编程语言的版本，如果你去问问你们公司的测试，那么你一定会发现，他们正在用 Python 版本的 Selenium 写自动化测试脚本。值得一提的是，它是基于 webdriver 而不是 webkit 内核实现的，所以，Selenium 的浏览器兼容性相对于其他浏览器要好很多。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ariya/phantomjs&quot;&gt;PhantomJS&lt;/a&gt;：开创性的 headless（无头）测试框架，何为 headless？即没有 UI 界面的浏览器。headless 最大好处在于可以像单元测试一样，在命令行中跑 e2e 测试。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/segmentio/nightmare&quot;&gt;nightmare&lt;/a&gt;：一句话——加强版的 PhantomJS，相对于 PhantomJS，无论是开发还是运行效率都得到了很大的提升。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;tips：nightmare 还有个优点——它提供了一个 Chrome 插件 &lt;a href=&quot;https://github.com/segmentio/daydream&quot;&gt;daydream&lt;/a&gt;，该插件可以通过录制屏幕，自动化生成测试代码，懒人福音。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nightwatchjs/nightwatch&quot;&gt;nightwatch&lt;/a&gt;：名字和 nightmare 很像，但是完全不一样的一个 e2e 框架，使用 Node 调用 webdriver 实现。相对于 Selenium，开发和运行效率更高，最重要的是，迭代很活跃，这点，用开源产品的用户懂得都懂。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress&quot;&gt;cypress&lt;/a&gt;：我接触的第一个 e2e 测试框架，测试界面和文档做到极致的一个产品，推荐大家可以试一试。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot;&gt;puppeteer&lt;/a&gt;：e2e 测试框架的集大成者，默认以 headless 模式运行，但是也可以通过配置变为 Chromium 运行。开发效率以及运行效率一流，最重要的是，它像 nightmare 一样，提供了测试代码生成插件——&lt;a href=&quot;https://github.com/checkly/puppeteer-recorder&quot;&gt;puppeteer-recorder&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;综上所述，如果考虑浏览器兼容性，使用 &lt;a href=&quot;https://github.com/nightwatchjs/nightwatch&quot;&gt;nightwatch&lt;/a&gt;，反之，选择 &lt;a href=&quot;https://github.com/cypress-io/cypress&quot;&gt;cypress&lt;/a&gt; 或者 &lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot;&gt;puppeteer&lt;/a&gt;，如果需要 headless 或者自动化生成代码的功能，那就使用 &lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot;&gt;puppeteer&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;使用前端-ui-自动化测试的价值&quot;&gt;使用前端 UI 自动化测试的价值&lt;/h2&gt;
&lt;p&gt;从自动化测试的收益来说，自动化测试有个公式：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;pre&gt;
&lt;code&gt;自动化的收益 = 迭代次数 * 全手动执行成本 - 首次自动化成本 - 维护次数 * 维护成本
&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;简而言之，迭代越频繁，维护成本越高的项目，添加自动化测试的价值越高。在基建项目或频繁迭代项目中引入前端 UI 自动化测试，可以大大减少每次迭代后手动测试的时间。比起手动测试，前端 UI 自动化测试测试的更快也更彻底。&lt;/p&gt;
&lt;p&gt;另一个方面，随着前端技术的高速发展，各个公司的前端开发、监控体系已经很完善了，但是缺少前端在测试方向上的延伸。而前端 UI 自动化测试最大的价值，就是在前端部分，弥补开发和监控之间的空白区域，形成一个完整的闭环，三管齐下，极大地保障了项目的质量。&lt;/p&gt;
&lt;h2 id=&quot;未来的展望&quot;&gt;未来的展望&lt;/h2&gt;
&lt;p&gt;针对前端 UI 自动化测试，我思考了很久，个人认为主要有两大方向：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;针对单个项目，进行一系列关键功能的测试，不过如果需要追求测试覆盖率的话，比较耗费时间，算是一种比较常规、精细的测试方案，所以比较适合一些长期维护的基建项目或者大型业务项目，缺点在于活动页基本覆盖不了。&lt;/li&gt;
&lt;li&gt;针对所有项目，添加一个自动化测试的脚手架（或者平台化），能够通过配置项，自动访问目标页面，并进行一系列的 e2e 测试，根据不同的结果采取截图、生成 pdf、报警等不同处理方案。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;第二个方案，即通用化方案也是我最近开发的重点方向，接下来我应该会专门写一篇文章，大概介绍下该方案的设计以及具体实现（如果我没有懒癌发作的话[doge]）。&lt;/p&gt;
&lt;p&gt;如果有不同想法的同学，欢迎一起交流~&lt;/p&gt;
&lt;p&gt;我的 github：&lt;a href=&quot;https://github.com/KarthusLorin/blog&quot;&gt;https://github.com/KarthusLorin/blog&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 18 Jul 2020 16:43:00 +0000</pubDate>
<dc:creator>格子熊</dc:creator>
<og:description>背景 事件的起因在于老板最近的两次“故障”，一次去年的，一次最近。共同原因都是脚手架在发布平台发布打包时出错，导致线上应用白屏不可用。 最神奇的是，事后多次 Code Review，结果还是没有发现任</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/karthuslorin/p/13338353.html</dc:identifier>
</item>
<item>
<title>Vue开发者必会的基础知识盘点 - 小羽羽</title>
<link>http://www.cnblogs.com/dingxingxing/p/13338330.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dingxingxing/p/13338330.html</guid>
<description>
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Vue中的数据和DOM已经被关联起来，所有的东西都是响应式的。注意我们不再和HTML直接交互。一个Vue应用会将其挂载到DOM元素上然后对齐进行完全的控制，那个HTML是我们的入口，但是其他的都会发生在新创建的Vue实例内部。详情可见&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://github.com/dingxingxing/Storage-of-record-documents/tree/master/Vue&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;MVVM原理极其实现&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;md-plain&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Vue实例&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;1、实例声明周期钩子函数&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;8个声明周期函数&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-plain md-expand&quot;&gt;模板语法&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;1、插值&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;①、 &lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/api/#v-once&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;v-once 指令&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;md-plain&quot;&gt;，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;②、可以使用js表达式但是不能使用语句和流控制(if判断语句)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1 {{ ok ? 'YES' : 'NO' }}
2  {{ message.split('').reverse().join('') }}
3  ​
4  &lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 这是语句，不是表达式 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;
5  {{ var a = 1 }}
6  &lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 流控制也不会生效，请使用三元表达式 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;
7  {{ if (ok) { return message } }}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;2、指令&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;①、动态参数 -2.60新增&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;可以使用动态参数为一个动态的事件名绑定处理函数：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;约束：为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。会触发警告。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;v-on:[eventName]&lt;/span&gt;&lt;span&gt;=&quot;doSomething&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; ... &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;当 eventName 的值为 &quot;focus&quot; 时，v-on:[eventName] 将等价于 v-on:focus&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;3、修饰符&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在移动端最好的应用就是&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;①、 .stop 阻止事件冒泡&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;②、 .prevent （@touchmove.prevent 禁止底层页面滑动）&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;计算属性和侦听器&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;模板中不应该放入过多的逻辑，会让模板过重且难以维护，所以对于任何复杂逻辑，都应该使用&lt;span&gt;&lt;strong&gt;计算属性&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;基础例子&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;div id=&quot;example&quot;&amp;gt;
&lt;span&gt; 2&lt;/span&gt;    &amp;lt;p&amp;gt;Original message: &quot;{{ message }}&quot;&amp;lt;/p&amp;gt;
&lt;span&gt; 3&lt;/span&gt;    &amp;lt;p&amp;gt;Computed reversed message: &quot;{{ reversedMessage }}&quot;&amp;lt;/p&amp;gt;
&lt;span&gt; 4&lt;/span&gt;  &amp;lt;/div&amp;gt;
&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;var&lt;/span&gt; vm = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;    el: '#example'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;   data: {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;      message: 'Hello'
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;   },
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;   computed: {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 计算属性的 getter&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;      reversedMessage: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; `this` 指向 vm 实例&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.message.split('').reverse().join(''&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;   }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt; })
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Original message: &quot;Hello&quot;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Computed reversed message: &quot;olleH&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;我们声明了一个计算属性 reversedMessage。Vue 知道 &lt;span&gt;&lt;code&gt;vm.reversedMessage&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;依赖于 &lt;span&gt;&lt;code&gt;vm.message&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;，因此当 vm.message 发生改变时，，所有依赖 &lt;span&gt;&lt;code&gt;vm.reversedMessage&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;的绑定也会更新。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;计算属性缓存 vs 方法&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;我们通过表达式中调用方法可以同样达到效果：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &amp;lt;p&amp;gt;Reversed message: &quot;{{ reversedMessage() }}&quot;&amp;lt;/p&amp;gt;
&lt;span&gt;2&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在组件中&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt; methods: {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;    reversedMessage: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.message.split('').reverse().join(''&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;   }
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;两种方式的最终结果确实是完全相同的。然而，不同的是&lt;span&gt;&lt;strong&gt;计算属性是基于它们的响应式依赖进行缓存&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;。只在相关响应依赖发生改变时它们才会重新计算求值。这就意思只要message还没有改变，多次访问reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;注：这也同样意味着下面的计算属性将不再更新，因为 &lt;span&gt;&lt;code&gt;Date.now()&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;不是响应式依赖：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;computed: {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;    now: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;      &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Date.now()
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;   }
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;如你不希望有缓存，请用方法来替代。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;计算属性 vs 侦听属性&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：&lt;span&gt;&lt;strong&gt;侦听属性&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;但是有些时候可以使用computed代替watch&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;计算属性的 setter&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;计算属性默认只有 getter，不过在需要时你也可以提供一个 setter：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt; computed: {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;   fullName: {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; getter&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;      get: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.firstName + ' ' + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.lastName
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;     },
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; setter&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;      set: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (newValue) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;        &lt;span&gt;var&lt;/span&gt; names = newValue.split(' '&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;        &lt;span&gt;this&lt;/span&gt;.firstName = names[0&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;        &lt;span&gt;this&lt;/span&gt;.lastName = names[names.length - 1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;   }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;现在再运行 &lt;span&gt;&lt;code&gt;vm.fullName = 'John Doe'&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;时，setter 会被调用，&lt;span&gt;&lt;code&gt;vm.firstName&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;和 &lt;span&gt;&lt;code&gt;vm.lastName&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;也会相应地被更新。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;侦听器&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;当数据变化要执行异步或者开销较大的操作，watch 是最有用的选择。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Class于Style绑定&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;绑定HTML Class&lt;/span&gt;&lt;/h3&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;对象语法&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;①、我们可以传给 &lt;span&gt;&lt;code&gt;v-bind:class&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;一个对象，以动态地切换 class：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;lt;div v-bind:class=&quot;{ active: isActive }&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;是否渲染取决于isActive是 true或false&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;②、你可以在对象中传入更多字段来动态切换多个 class。此外，&lt;span&gt;&lt;code&gt;v-bind:class&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;指令也可以与普通的 class attribute 共存。当有如下模板：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &amp;lt;&lt;span&gt;div
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;    class=&quot;static&quot;
&lt;span&gt; 3&lt;/span&gt;    v-bind:class=&quot;{ active: isActive, 'text-danger': hasError }&quot;
&lt;span&gt; 4&lt;/span&gt;  &amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; data定义如下&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; data: {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;    isActive: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;    hasError: &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt; }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 渲染结果&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &amp;lt;div class=&quot;static active&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;③、绑定的数据对象不必内联定义在模板里：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;lt;div v-bind:class=&quot;classObject&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt; data: {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;   classObject: {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;      active: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;      'text-danger': &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;   }
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;④、这是一个常用且强大的模式，我们也可以在这里绑定一个返回对象的&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/computed.html&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;计算属性&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;md-plain&quot;&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
 &amp;lt;div v-bind:class=&quot;classObject&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt; data: {
   isActive: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
   error: &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;
 },
 computed: {
   classObject: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
       active: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.isActive &amp;amp;&amp;amp; !&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.error,
       &lt;/span&gt;'text-danger': &lt;span&gt;this&lt;/span&gt;.error &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;.error.type === 'fatal'&lt;span&gt;
     }
   }
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;数组语法&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;①、我们可以把一个数组传给 &lt;span&gt;&lt;code&gt;v-bind:class&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;，以应用一个 class 列表：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &amp;lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt; data: {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;    activeClass: 'active'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;    errorClass: 'text-danger'
&lt;span&gt;5&lt;/span&gt; &lt;span&gt; }
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 渲染为：&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &amp;lt;div class=&quot;active text-danger&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;②、 数组语法中也可以使用对象语法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &amp;lt;div v-bind:class=&quot;[{ active: isActive }, errorClass]&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;用在组件上&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;当在一个自定义组件上使用 &lt;span&gt;&lt;code&gt;class&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;时，这些 class 将被添加到该组件的根元素上面。这个元素上已经存在的 class 不会被覆盖。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;你声明了这个组件：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Vue.component('my-component'&lt;span&gt;, {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;    template: '&amp;lt;p class=&quot;foo bar&quot;&amp;gt;Hi&amp;lt;/p&amp;gt;'
&lt;span&gt;3&lt;/span&gt; &lt;span&gt; })
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;  &amp;lt;!-- 在使用它的时候添加一些 class： --&amp;gt;
&lt;span&gt;5&lt;/span&gt;  &amp;lt;my-component class=&quot;baz boo&quot;&amp;gt;&amp;lt;/my-component&amp;gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;  &amp;lt;!-- HTML 将被渲染为： --&amp;gt;
&lt;span&gt;8&lt;/span&gt;  &amp;lt;p class=&quot;foo bar baz boo&quot;&amp;gt;Hi&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;绑定内联样式&lt;/span&gt;&lt;/h3&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;对象语法&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;code&gt;v-bind:style&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;div v-bind:style=&quot;{ color: activeColor, fontSize: fontSize + 'px' }&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  &amp;lt;!-- 直接绑定到一个样式对象通常更好，这会让模板更清晰： --&amp;gt;
&lt;span&gt; 4&lt;/span&gt;  &amp;lt;div v-bind:style=&quot;styleObject&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; data: {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;    activeColor: 'red'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;    fontSize: 30
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绑定对象&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt; data: {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;   styleObject: {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;      color: 'red'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;      fontSize: '13px'
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;   }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;同样的，对象语法常常结合返回对象的计算属性使用。&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;多重值&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;从 2.3.0 起你可以为 &lt;span&gt;&lt;code&gt;style&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;绑定中的 property 提供一个包含多个值的数组，常用于提供多个带前缀的值，例如：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &amp;lt;div :style=&quot;{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;条件渲染&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在&lt;span class=&quot;md-tag md-raw-inline&quot;&gt;&amp;lt;template&amp;gt;&lt;span class=&quot;md-plain&quot;&gt;元素上使用v-if条件渲染分组&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;因为 &lt;span&gt;&lt;code&gt;v-if&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 &lt;span&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;元素当做不可见的包裹元素，并在上面使用 &lt;span&gt;&lt;code&gt;v-if&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;。最终的渲染结果将不包含 &lt;span&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;元素。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &amp;lt;template v-&lt;span&gt;if&lt;/span&gt;=&quot;ok&quot;&amp;gt;
&lt;span&gt;2&lt;/span&gt;    &amp;lt;h1&amp;gt;Title&amp;lt;/h1&amp;gt;
&lt;span&gt;3&lt;/span&gt;    &amp;lt;p&amp;gt;Paragraph 1&amp;lt;/p&amp;gt;
&lt;span&gt;4&lt;/span&gt;    &amp;lt;p&amp;gt;Paragraph 2&amp;lt;/p&amp;gt;
&lt;span&gt;5&lt;/span&gt;  &amp;lt;/template&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;v-else-if v-else&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;类似于 &lt;span&gt;&lt;code&gt;v-else&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;，&lt;span&gt;&lt;code&gt;v-else-if&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;也必须紧跟在带 &lt;span&gt;&lt;code&gt;v-if&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;或者 &lt;span&gt;&lt;code&gt;v-else-if&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;的元素之后。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;用key可以管理可复用的元素&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。例如，如果你允许用户在不同的登录方式之间切换：&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;template v-&lt;span&gt;if&lt;/span&gt;=&quot;loginType === 'username'&quot;&amp;gt;
   &amp;lt;label&amp;gt;Username&amp;lt;/label&amp;gt;
   &amp;lt;input placeholder=&quot;Enter your username&quot;&amp;gt;
 &amp;lt;/template&amp;gt;
 &amp;lt;template v-&lt;span&gt;else&lt;/span&gt;&amp;gt;
   &amp;lt;label&amp;gt;Email&amp;lt;/label&amp;gt;
   &amp;lt;input placeholder=&quot;Enter your email address&quot;&amp;gt;
 &amp;lt;/template&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;那么在上面的代码中切换 &lt;span&gt;&lt;code&gt;loginType&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，&lt;span&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;不会被替换掉——仅仅是替换了它的 &lt;span&gt;&lt;code&gt;placeholder&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;这样也不总是符合实际需求，所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 &lt;span&gt;&lt;code&gt;key&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;attribute 即可：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;template v-&lt;span&gt;if&lt;/span&gt;=&quot;loginType === 'username'&quot;&amp;gt;
   &amp;lt;label&amp;gt;Username&amp;lt;/label&amp;gt;
   &amp;lt;input placeholder=&quot;Enter your username&quot; key=&quot;username-input&quot;&amp;gt;
 &amp;lt;/template&amp;gt;
 &amp;lt;template v-&lt;span&gt;else&lt;/span&gt;&amp;gt;
   &amp;lt;label&amp;gt;Email&amp;lt;/label&amp;gt;
   &amp;lt;input placeholder=&quot;Enter your email address&quot; key=&quot;email-input&quot;&amp;gt;
 &amp;lt;/template&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;现在，每次切换时，输入框都将被重新渲染。&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;v-for和v-if&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-plain&quot;&gt;永远不要把 &lt;span&gt;&lt;code&gt;v-if&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;和 &lt;span&gt;&lt;code&gt;v-for&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;同时用在同一个元素上。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;一般我们在两种常见的情况下会倾向于这样做：&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;0.5&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;1&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;为了过滤一个列表中的项目 (比如 &lt;span&gt;&lt;code&gt;v-for=&quot;user in users&quot; v-if=&quot;user.isActive&quot;&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;)。在这种情形下，请将 &lt;span&gt;&lt;code&gt;users&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;替换为一个计算属性 (比如 &lt;span&gt;&lt;code&gt;activeUsers&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;)，让其返回过滤后的列表。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;为了避免渲染本应该被隐藏的列表 (比如 &lt;span&gt;&lt;code&gt;v-for=&quot;user in users&quot; v-if=&quot;shouldShowUsers&quot;&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;)。这种情形下，请将 &lt;span&gt;&lt;code&gt;v-if&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;移动至容器元素上 (比如 &lt;span&gt;&lt;code&gt;ul&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;、&lt;span&gt;&lt;code&gt;ol&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;)。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &amp;lt;ul&amp;gt;
&lt;span&gt;2&lt;/span&gt;    &amp;lt;&lt;span&gt;li
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;      v-&lt;span&gt;for&lt;/span&gt;=&quot;user in users&quot;
&lt;span&gt;4&lt;/span&gt;      v-&lt;span&gt;if&lt;/span&gt;=&quot;user.isActive&quot;
&lt;span&gt;5&lt;/span&gt;      :key=&quot;user.id&quot;
&lt;span&gt;6&lt;/span&gt;    &amp;gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;     {{ user.name }}
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;    &amp;lt;/li&amp;gt;
&lt;span&gt;9&lt;/span&gt;  &amp;lt;/ul&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;当 Vue 处理指令时&lt;span&gt;&lt;code&gt;v-for&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;比 &lt;span&gt;&lt;code&gt;v-if&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;具有更高的优先级，哪怕我们只渲染出一小部分用户数据的元素，也得在每次重新渲染的时候遍历整个列表，不论活跃用户是否发生变化，应该使用计算属性&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;列表渲染&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;v-for&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在v-for中，既可以使用数组也可以使用对象&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;状态维护&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;当Vue正在更新使用v-for渲染列表时，它默认使用“就地更新策略”。如果数据项的顺序被改变，Vue将不会移动DOM元素来匹配数据项的顺序，而是就地更新每一个元素，并确保它们在每个位置索引位置正确渲染。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;不要使用对象或数组之类的非基本类型值作为v-for的key。请用字符串或数值型的值。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;key的特殊主要用在Vue的虚拟DOM算法，在新旧nodes对比时辨识VNodes。如果不使用key，Vue会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。而使用key时，它会基于key的变化重新排列元素顺序，并且会移除key不存在的元素&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;事件处理&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;内联处理器的方法&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;有时也需要在内联语句处理器中访问原始的DOM事件。可以使用特殊变量$event把它传入方法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
 &amp;lt;button v-on:click=&quot;warn('Form cannot be submitted yet.', $event)&quot;&amp;gt;&lt;span&gt;
   Submit
 &lt;/span&gt;&amp;lt;/button&amp;gt;
 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
&lt;span&gt; methods: {
   warn: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (message, event) {
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 现在我们可以访问原生事件对象&lt;/span&gt;
     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (event) {
       event.preventDefault()
     }
     alert(message)
   }
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;事件修饰符&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;以上方法虽然可以实现，但是更好的方式是：&lt;span&gt;&lt;strong&gt;方法只有纯粹的数据逻辑，而不是去处理DOM事件细节&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;。为了解决这个问题，Vue提供了事件修饰符。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 &lt;span&gt;.&lt;span class=&quot;cm-variable&quot;&gt;stop  &lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 &lt;span&gt;.&lt;span class=&quot;cm-variable&quot;&gt;passive&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;【浏览器只有等内核线程执行到事件监听器对应的JavaScript代码时，才能知道内部是否会调用preventDefault函数来阻止事件的默认行为，所以浏览器本身是没有办法对这种场景进行优化的。这种场景下，用户的手势事件无法快速产生，会导致页面无法快速执行滑动逻辑，从而让用户感觉到页面卡顿。】&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;通俗点说就是每次事件产生，浏览器都会去查询一下是否有preventDefault阻止该次事件的默认动作。我们加上passive就是为了告诉浏览器，不用查询了，我们没用preventDefault阻止默认动作。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;表单输入绑定&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;修饰符&lt;/span&gt;&lt;/h3&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;.lazy&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;在默认情况下，&lt;span&gt;&lt;code&gt;v-model&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;在每次 &lt;span&gt;&lt;code&gt;input&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;事件触发后将输入框的值与数据进行同步 。你可以添加 &lt;span&gt;&lt;code&gt;lazy&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;修饰符，从而转为在 &lt;span&gt;&lt;code&gt;change&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;事件&lt;span&gt;&lt;em&gt;之后&lt;/em&gt;&lt;span class=&quot;md-plain&quot;&gt;进行同步：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 &lt;span/&gt;
&lt;/pre&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;number&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;可以自动将用户输入的值转换成数值类型：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;只有这个值无法被 parsenFloat()解析，则会返回原始的值&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &amp;lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;.trim&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;过滤用户输入的收尾空白字符：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model.trim&lt;/span&gt;&lt;span&gt;=&quot;msg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;组件基础&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;通过Prop向子组件传递数据&lt;/span&gt;&lt;/h3&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;传入一个对象的所有property&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;如果想将一个对象的所有property都作为prop传入，可以不用每个参数分别使用v-bind&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;post: {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;    id: 1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;    title: 'My Journey with Vue'
&lt;span&gt;4&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;下面的模板&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;blog-post &lt;/span&gt;&lt;span&gt;v-bind&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;blog-post&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 等价于 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;blog-post
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;    &lt;span&gt;v-bind:id&lt;/span&gt;&lt;span&gt;=&quot;post.id&quot;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;   v-bind:title&lt;/span&gt;&lt;span&gt;=&quot;post.title&quot;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;  &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;blog-post&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;单向数据流&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;所有的prop传值都让父子prop之间形成一个&lt;span&gt;&lt;strong&gt;单行下行绑定&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;。每次父组件发生变更时，子组件中所有的prop都将会刷新为最新的值，这说明你不应该在子组件内部改prop（强行做，Vue会有警告）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;注：JavaScript中数组和对象是通过引用传入的，对于一个数组或对象类型的prop来说，在子组件中改变变更这个对象的本身将会影响父组件的状态&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Prop验证&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  Vue.component('my-component'&lt;span&gt;, {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;     props: {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 基础的类型检查（'null' 和 'undefined'会通过任何类型的验证&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;         propA: Number,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 多个类型&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;         propB: [Number, String]
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 必填字符串&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;         propC: [
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;             type: String,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;              required: &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;         ]
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  })
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;自定义事件&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span&gt;&lt;strong&gt;始终使用 kebab-case 的事件名&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;插槽&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;编译作用域&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/components-slots.html#%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;具名插槽&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/components-slots.html#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;作用域插槽&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;混入&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/mixins.html#%E5%9F%BA%E7%A1%80&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;基础&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;混入(mixin)提供了一种非常灵活的方式，来分发Vue组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/mixins.html#%E9%80%89%E9%A1%B9%E5%90%88%E5%B9%B6&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;选项合并&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;当组件和混入对象有同名选项是， &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;数据对象在内部会进行递归合并，并且在发生冲突时以组件数据优先&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; mixin =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;     data() {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;          &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;              message: 'hello'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;              foo: 'abc'
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;     mixin: [mixin],
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     data() {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;          &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;              message: 'goodbye'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;              bar: 'def'
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;     },
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;     created() {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;          console.log(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$data)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; =&amp;gt; {message: 'goodbye', foo:'adc', bar: 'def'}&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;  })
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;同名钩子函数将合并为一个数组，因此都将被调用。只是混入对象的钩子将在组件自身钩子&lt;span&gt;&lt;strong&gt;之前&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;调用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;值为对象的选项，例如methods、components和directives，将别合并成同一个对象。&lt;span&gt;&lt;strong&gt;两个对象键名冲突时，取组件对象的键值对&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;自定义选项合并策略&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;自定义选项将使用默认策略，即简单地覆盖已有值。如果想要自定义选项以自定义逻辑合并，可以向 &lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;Vue.config.optionMergeStrategies&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;添加一个函数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;自定义指令&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;钩子函数&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;钩子函数参数&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/custom-directive.html#%E5%8A%A8%E6%80%81%E6%8C%87%E4%BB%A4%E5%8F%82%E6%95%B0&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;动态指令参数&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;对象字面量&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;如果指令需要多个值，可以传入一个JavaScript对象字面量。指令函数可以接受所有合法的JavaScript表达式&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &amp;lt;div v-demo=&quot;{ color: 'white', text: 'hello!' }&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;2&lt;/span&gt;  Vue.directive('demo', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (el, binding) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;    console.log(binding.value.color) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; =&amp;gt; &quot;white&quot;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;    console.log(binding.value.text)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; =&amp;gt; &quot;hello!&quot;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;  })
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;渲染函数 &amp;amp; JSX&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;看懂百分之30%，过段时间再看&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;路由&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;编程式导航和声明式导航&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  声明式&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;  &amp;lt;router-link :to=&quot;....&quot;&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 编程式&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; router.push(...)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ex:       &lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 字符串&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;  router.push('home'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对象&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;  router.push({ path: 'home'&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 命名的路由&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;  router.push({ name: 'user', params: { userId: '123'&lt;span&gt; }})
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 带查询参数，变成 /register?plan=private&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;  router.push({ path: 'register', query: { plan: 'private' }})
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;导航守卫&lt;/span&gt;&lt;/h3&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://router.vuejs.org/zh/guide/advanced/navigation-guards.html&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;全局前置守卫&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;router.beforeEach&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://router.vuejs.org/zh/guide/advanced/navigation-guards.html&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;全局解析守卫&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;router.beforeResolve&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://router.vuejs.org/zh/guide/advanced/navigation-guards.html&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;全局后置钩子&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 &lt;span&gt;&lt;span class=&quot;cm-variable&quot;&gt;router.&lt;span class=&quot;cm-property&quot;&gt;afterEach((&lt;span class=&quot;cm-def&quot;&gt;to, &lt;span class=&quot;cm-def&quot;&gt;from) &lt;span class=&quot;cm-operator&quot;&gt;=&amp;gt; {&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;路由独享守卫&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 &lt;span&gt; &lt;span class=&quot;cm-variable&quot;&gt;beforeEnter: (&lt;span class=&quot;cm-def&quot;&gt;to, &lt;span class=&quot;cm-def&quot;&gt;from, &lt;span class=&quot;cm-def&quot;&gt;next) &lt;span class=&quot;cm-operator&quot;&gt;=&amp;gt; {&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;组件内的守卫&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;① beforeRouteEnter&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;② beforeRouteUpdate&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;③ beforeRouteLeave&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt; beforeRouteEnter (to, from, next) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在渲染该组件的对应路由被 confirm 前调用&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不！能！获取组件实例 `this`&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 因为当守卫执行前，组件实例还没被创建。&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;       next(vm =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过`vm`访问组件实例&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;      })
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;   },
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;   beforeRouteUpdate (to, from, next) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在当前路由改变，但是该组件被复用时调用&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转       的时候，&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调       用。&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可以访问组件实例 `this`&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;   },
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;   beforeRouteLeave (to, from, next) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 导航离开该组件的对应路由时调用&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可以访问组件实例 `this`&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;    }
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;完整的导航解析流程&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;1.导航被触发。 &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;2.在失活的组件里调用 &lt;span&gt;&lt;code&gt;beforeRouterLeave&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;守卫。 &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;3.调用全局的 &lt;span&gt;&lt;code&gt;beforeEach&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;守卫。 &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;4.在重用的组件里调用 &lt;span&gt;&lt;code&gt;beforeRouterUpdate&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;守卫。 &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;5.在路由配置里调用 &lt;span&gt;&lt;code&gt;beforeEnter&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;。 &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;6.解析异步路由组件。 &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;7.在被激活的组件里调用 &lt;span&gt;&lt;code&gt;beforeRouterEnter&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;。 &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;8.调用全局的 &lt;span&gt;&lt;code&gt;beforeResolve&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;守卫。 &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;9.导航被确认。 &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;10.调用全局 &lt;span&gt;&lt;code&gt;afterEach&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;钩子。 &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;11.触发DOM更新。 &lt;span class=&quot;md-softbreak&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;12.用创建好的实例调用 &lt;span&gt;&lt;code&gt;beforeRouteEnter&lt;/code&gt; &lt;span class=&quot;md-plain&quot;&gt;守卫中传给 &lt;span&gt;&lt;code&gt;next&lt;/code&gt;&lt;span class=&quot;md-plain&quot;&gt;的回调函数。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Vuex&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;State&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;state 提供唯一的公共数据源。所有共享的数据要统一放到Store的State中进行储存&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;组件访问State中数据的第一种方式：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;this&lt;/span&gt;.$store.state.全局数据名称
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;组件访问State中数据的第二种方式：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.从Vuex中按需导入`mapState`函数&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  import { mapState } from 'vuex'
&lt;span&gt;3&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.将全局数据，映射为当前组件的计算属性&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt; computed: {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;      ...mapState(['count'&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Mutation&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Mutation用于变更Store中的数据。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;① 只能通过muntation变更Store数据，不可以直接操作Store中的数据。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;② 通过这种方式虽然操作起来稍微繁琐一些，但是可以集中监控所有数据的变化。&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义motation&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; mutations: {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;     add(state) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 变更状态&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;          state.count++
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;     }，
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 传参&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;     addN(state,n) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;          state.count+=&lt;span&gt;n
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;组件中触发mutation&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt; methods: {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;     handle() {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 触发mutations 的第一种方式&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;          &lt;span&gt;this&lt;/span&gt;.$store.commit('add'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 触发mutations传参&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;          &lt;span&gt;this&lt;/span&gt;.$store.commit('addN', 3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;this.$store.commit()是触发mutations的第一种方式，触发mutations的&lt;span&gt;&lt;strong&gt;第二种方式&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.从vuex中按需导入`mapMutations`函数&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  import { mapMutations } from 'vuex'
&lt;span&gt;3&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.将指定的 mutations函数，映射为当前组件的 methods函数&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt; methods: {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;      ...mapMutations(['add','addN'&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Action&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Action用于处理异步任务。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;如果通过异步变更数据，必须通过Action，而不能使用Mutation，但是在Action中还是要通过触发Mutation的方式间接变更数据。&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义Action&lt;/span&gt;
&lt;span&gt; actions: {
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; context 第一个形参可以理解为当前new 的实例&lt;/span&gt;
&lt;span&gt;     addAsync(context,n) {
         setTimeout(() &lt;/span&gt;=&amp;gt;&lt;span&gt; {
             context.commit(&lt;/span&gt;'addN'&lt;span&gt;,n)
         },&lt;/span&gt;1000&lt;span&gt;)
     }
 }
 ​
 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 触发Action&lt;/span&gt;
&lt;span&gt; methods: {
     handle: {
         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 触发actions 的第一种方式&lt;/span&gt;
         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 携带参数&lt;/span&gt;
         &lt;span&gt;this&lt;/span&gt;.$store.dispath('addAsync', 5&lt;span&gt;)
     }
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;this.$store.dispatch()是触发actions的第一种方式，触发actions的&lt;span&gt;&lt;strong&gt;第二种方式&lt;/strong&gt;&lt;span class=&quot;md-plain&quot;&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.从vuex中按需导入`mapActions`函数&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  import { mapActions } from 'vuex'
&lt;span&gt;3&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.将指定的actions函数，映射为当前组件的methods函数&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt; methods: {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;      ...mapActions(['addAsync', 'addNAsync'&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Getter&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;Getter用于对Store中的数据进行加工处理形成新的数据。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;① Getter可以对Store中已有的数据加工处理之后形成新的数据，类似Vue的计算属性&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;② Store中数据发生变化，Getter的数据也会跟着变化。&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义Getter&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;  const strore = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vuex.Store({
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;     state: {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;          count: 0
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;     },
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;     getters: {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;          showNum: state =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;              &lt;span&gt;return&lt;/span&gt; '当前最新的数量是【'+ state.count +'】'
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  })
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;使用getters的第一种方式：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.$store.getters.名称
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;使用getters的第二种方式：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded&quot;&gt;
 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; import { MapGetters } from 'vuex'
&lt;span&gt;2&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt; computed: {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;      ...mapGetters(['showNum'&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;namespaced&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;这个属性是用来解决不同模块命名冲突的问题：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不同页面引入getter、actions、mutations时，要加上模块名&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ex&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;  ...mapGetters('BadInfo', ['DialogDate'&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt; ​
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第二种写法&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;  &lt;span&gt;this&lt;/span&gt;.$store.commit('XXX/SETXXX'&lt;span&gt;,sth);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;  &lt;span&gt;this&lt;/span&gt;.$store.getters['XXX/getXXX'];
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Sat, 18 Jul 2020 16:34:00 +0000</pubDate>
<dc:creator>小羽羽</dc:creator>
<og:description>下面是Vue的一些基本知识点相关学习跟应用，差缺补漏吧。Vue.js官网好好看一遍还是很香的。 Vue中的数据和DOM已经被关联起来，所有的东西都是响应式的。注意我们不再和HTML直接交互。一个Vue</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/dingxingxing/p/13338330.html</dc:identifier>
</item>
<item>
<title>服务注册与发现【Eureka】- Eureka简介 - 糖油包子</title>
<link>http://www.cnblogs.com/y3blogs/p/13338211.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/y3blogs/p/13338211.html</guid>
<description>&lt;h2&gt;什么是服务治理&lt;/h2&gt;
&lt;p&gt;　　SpringCloud 封装了 Netflix 公司开发的 Eureka 模块来 实现服务治理。&lt;/p&gt;
&lt;p&gt;　　在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务与服务之间的依赖关系，可以实现服务调用、负载均衡、容错 等，实现服务发现与注册。&lt;/p&gt;
&lt;h2&gt;什么是服务注册与发现&lt;/h2&gt;
&lt;p&gt;　　Eureka 采用了 CS 的设计架构， &lt;span&gt;Eureka Server&lt;/span&gt; 作为&lt;strong&gt;&lt;span&gt;服务注册&lt;/span&gt;&lt;/strong&gt;功能的服务器，它是服务注册中心。而系统中的其他微服务，使用Eureka 的客户端连接到 Eureka Server 并维持心跳连接。这样系统的维护人员就可以通过Eureka Server 来监控系统中各个微服务是否正常运行。&lt;/p&gt;
&lt;p&gt;　　在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息，比如 服务地址、通讯地址 等以别名方式注册到注册中心上，另一方（消费者/服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系（服务治理概念）。在任何RPC远程框架中，都会有一个注册中心（存放服务地址相关信息(接口地址)）&lt;/p&gt;
&lt;h3&gt;　　Eureka 系统架构：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/966359/202007/966359-20200718232501861-1105042027.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h2&gt; Eureka 的两个组件&lt;/h2&gt;
&lt;h3&gt;　　&lt;span&gt;Eureka Server 和 Eureka Client&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;Eureka Server 提供服务注册服务&lt;/h4&gt;
&lt;p&gt;　　各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储书友可用服务节点的信息，服务节点的信息可以在界面中直观看到。&lt;/p&gt;
&lt;h4&gt;Eureka Client 通过注册中心进行访问&lt;/h4&gt;
&lt;p&gt;　　是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询（round-robin）负载算法的负载均衡器。在应用启动后，会将向EurekaServer 发送心跳（默认周期是30秒）。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server会从服务注册表中把这个服务节点移除（默认90秒）&lt;/p&gt;

&lt;p&gt;服务注册中心就相当于一栋写字楼的物业公司，而各个服务提供者就相当于是在这栋写字楼中的公司，这些公司提供不同的服务（房产中介服务、软件开发服务、家政服务...），服务消费者就相当于是找这些公司提供服务的人。首先需要有一个物业公司，这些其他公司就通过定期给物业公司交房租、物业费的方式（心跳），驻扎在这栋写字楼里面。物业公司那里就有在这栋楼里面驻扎的所有公司的名单。然后如果你想要买房子，就可以去物业中心问，这里找谁可以买房子，物业中心就把他们这栋楼中能提供房产中介服务的公司推荐给你，中介公司就可以为你服务了。&lt;/p&gt;

</description>
<pubDate>Sat, 18 Jul 2020 15:44:00 +0000</pubDate>
<dc:creator>糖油包子</dc:creator>
<og:description>什么是服务治理 SpringCloud 封装了 Netflix 公司开发的 Eureka 模块来 实现服务治理。 在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/y3blogs/p/13338211.html</dc:identifier>
</item>
<item>
<title>kubernetes+Azure DevOps实现.Net Core项目的自动化部署&amp;均衡负载 - 宝树呐</title>
<link>http://www.cnblogs.com/baoshu/p/13338115.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/baoshu/p/13338115.html</guid>
<description>&lt;h2 id=&quot;1-前言&quot;&gt;&lt;span id=&quot;head1&quot;&gt;1. 前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;前前后后学习kubernetes也有一个来月了，关于kubernetes的博客也写了有十多篇。但是技术如果无法落地到实际的应用场景终归是纸上谈兵，所以就有了这一出：通过结合&lt;code&gt;kubernetes&lt;/code&gt;和&lt;code&gt;azure devops&lt;/code&gt;实现项目的&lt;code&gt;CI/CD&lt;/code&gt;以及均衡负载&lt;/p&gt;
&lt;p&gt;写完这篇后&lt;code&gt;kubernetes&lt;/code&gt;的相关学习也暂时告一段落了，有种终于闯关成功了啊的感觉，当然这是题外话了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注1&lt;/strong&gt;：&lt;strong&gt;以下只是以Net Core项目为例，实际运用场景中，除了dockfile的编写有差别，剩下整个自动化部署链条中的技术也好，工具也好，都可以复用，与语言和语言框架本身无关。&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;注2&lt;/strong&gt;：&lt;strong&gt;本文演示的也只是其中一种简便的方式，具体的自动化流程中，由于自由度非常高，所以实际的流程可能会更加复杂，这里就不做赘述了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下场景需要用到的工具或者技术：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;部署的应用本身&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;作为代码仓库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/&quot;&gt;kubernetes&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;docker&lt;/li&gt;
&lt;li&gt;helm【kubernetes的包管理工具】&lt;/li&gt;
&lt;li&gt;ingress【使用ingress绑定域名和https证书，实现域名访问】&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.azure.com/&quot;&gt;Azure DevOps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;p&gt;作为CI/CD的工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：以下所有的相关部署代码，都在下面这个仓库&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;仓库内容只是我自己用的一个小工具，当然具体是什么内容不重要，这篇只是演示部署相关的&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lzw5399/TocGenerator&quot;&gt;https://github.com/lzw5399/TocGenerator&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;h2 id=&quot;2-net-core项目本身的准备&quot;&gt;&lt;span id=&quot;head2&quot;&gt;2. Net Core项目本身的准备&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;21-dockerfile&quot;&gt;&lt;span id=&quot;head3&quot;&gt;2.1 dockerfile&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;你需要一个&lt;code&gt;dockerfile&lt;/code&gt;来构建一个&lt;code&gt;docker image&lt;/code&gt;, 如果是&lt;code&gt;.Net Core&lt;/code&gt;项目，vs提供了傻瓜式生成&lt;code&gt;dockerfile&lt;/code&gt;的功能，可以免去初学时编写&lt;code&gt;dockerfile&lt;/code&gt;的烦恼&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;本示例dockerfile路径和内容&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ggvh3hxjjxj30ok0j4q5d.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;22-创建kubernetes用于helm的chart包&quot;&gt;&lt;span id=&quot;head4&quot;&gt;2.2 创建kubernetes用于helm的chart包&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;221-说明&quot;&gt;&lt;span id=&quot;head5&quot;&gt;2.2.1 说明&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;这一部分需要有helm相关的知识，说白了就是将你的如果熟悉k8s但不熟悉helm，可以参照：&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/baoshu/p/13296659.html&quot;&gt;kubernetes系列(十六) - Helm安装和入门&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;222-chart文件目录和文件组成&quot;&gt;&lt;span id=&quot;head6&quot;&gt;2.2.2 chart文件目录和文件组成&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;自定义的chart包，位于以下路径&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lzw5399/TocGenerator/tree/master/kubernetes&quot;&gt;https://github.com/lzw5399/TocGenerator/tree/master/kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ggvgcbyvl7j318e0cv75t.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图可以看出是一个很经典的自定义chart包的文件目录，即：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;.
├── Chart.yaml           【chart的name和version等信息】
├── templates            【k8s的资源清单模板，可以引用values.yaml的变量】
|   ├── deployment.yaml
|   └── service.yaml
├── values.yaml          【定义变量，供template/下的yaml使用，实现动态替换yaml内容】
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;3-azure-devops创建仓库的pipeline&quot;&gt;&lt;span id=&quot;head7&quot;&gt;3. Azure Devops创建仓库的pipeline&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;31-前言&quot;&gt;&lt;span id=&quot;head8&quot;&gt;3.1 前言&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Azure DevOps&lt;/code&gt;是微软出品的&lt;code&gt;DevOps&lt;/code&gt;平台，里面包含了&lt;code&gt;Pipelines&lt;/code&gt;工具链，对个人免费，可以用于项目的&lt;code&gt;CI/CD&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com&quot;&gt;https://dev.azure.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;32-使用azure-devops准备操作&quot;&gt;&lt;span id=&quot;head9&quot;&gt;3.2 使用azure devops准备操作&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;如果之前使用过&lt;code&gt;azure devops&lt;/code&gt;，这几步可以视情况跳过。&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;进入&lt;code&gt;azure devops&lt;/code&gt;注册账号&lt;/li&gt;
&lt;li&gt;之后按照引导新建一个&lt;code&gt;organization&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再新建一个&lt;code&gt;project&lt;/code&gt;&lt;br/&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ggvhl8guzhj30v50f83z5.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;进入&lt;code&gt;project&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;33-创建service-connections&quot;&gt;&lt;span id=&quot;head10&quot;&gt;3.3 创建service connections&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;这里要创建一个service connections，用于之后pipeline访问k8s的master服务器&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;点击peject setting&lt;br/&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ggvi4z24nsj307t0kvwf9.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;这里点击&lt;code&gt;service connections&lt;/code&gt;来创建一个连接，&lt;strong&gt;用于访问k8s的master服务器&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ggvi8xaz5fj31gu0mq795.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;然后填写具体的凭证，之后的pipeline上需要&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;34-新建pipeline流水线&quot;&gt;&lt;span id=&quot;head11&quot;&gt;3.4 新建pipeline流水线&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;新建&lt;code&gt;pipeline&lt;/code&gt;流水线用于自定义部署流程&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;点击&lt;code&gt;pipelines&lt;/code&gt;，然后点击&lt;code&gt;create pipelines&lt;/code&gt;，新建一条流水线来部署我们的应用&lt;br/&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ggvhp1mr1fj31ad0mwn08.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;选择代码仓库位置，选github&lt;br/&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ggvhqcdfjaj30sk0iewgv.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;然后会跳到github进行授权，授权完成后会显示github的repo列表，选择具体的仓库&lt;/li&gt;
&lt;li&gt;选择完仓库后，会自动按照你当前项目的语言，在github仓库的根目录生成一个默认的&lt;code&gt;azure-pipelines.yml&lt;/code&gt;文件，&lt;/li&gt;
&lt;li&gt;替换文件的内容，我们最终使用的yaml文件步骤大概如下
&lt;ul&gt;&lt;li&gt;第一步：构建docker镜像&lt;/li&gt;
&lt;li&gt;第二步：将自定义的chart包拷贝到master服务器上&lt;/li&gt;
&lt;li&gt;第三步：执行&lt;code&gt;deploy.sh&lt;/code&gt;脚本，完成部署&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-yaml&quot;&gt;# 哪条分支会触发构建
trigger:
- master

resources:
- repo: self

# 定义变量
variables:
- name: appName
  value: tocgenerator

- name: tag
  value: $(Build.BuildNumber)

- name: imageNameWithoutTag
  value: $(dockerid)/$(appName)

- name: imageNameWithTag
  value: $(imageNameWithoutTag):$(tag)

- name: serverChartLocation
  value: /root/helm-chart-folder/toc

stages:
- stage: Build
  jobs:  
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
  
    # 这下面是每个我们要具体执行的任务
    steps:
    # build docker images并且push到仓库
    - task: Docker@2
      displayName: docker build and push
      inputs:
        containerRegistry: 'my_docker_hub'
        repository: '$(imageNameWithoutTag)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        buildContext: '.'
        tags: $(tag)
        addPipelineData: false

    # 将kubernetes文件夹，即chart包拷贝到k8s的master服务器
    - task: CopyFilesOverSSH@0
      displayName: copy helm chart to server
      inputs:
        # 这个endpoint就是我们刚刚创建的service connection的名字
        sshEndpoint: 'my_server'
        sourceFolder: 'kubernetes'
        contents: '**'
        targetFolder: $(serverChartLocation)
        readyTimeout: '20000'
  
    # 在k8s的master服务器上运行我们github仓库的根目录的deploy.sh，进行部署操作
    - task: SSH@0
      displayName: run deploy shell on server
      inputs:
        # 这个endpoint就是我们刚刚创建的service connection的名字
        sshEndpoint: 'my_server'
        runOptions: 'script'
        scriptPath: 'deploy.sh'
        args: '$(tag) $(serverChartLocation)'
        readyTimeout: '20000'
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;35-创建部署shell脚本&quot;&gt;&lt;span id=&quot;head12&quot;&gt;3.5 创建部署shell脚本&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;部署脚本的位置&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lzw5399/TocGenerator/blob/master/deploy.sh&quot;&gt;https://github.com/lzw5399/TocGenerator/blob/master/deploy.sh&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;几点说明&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;echo纯粹是为了记录log使用的，下面的示例把echo部分删除了&lt;/li&gt;
&lt;li&gt;$1 and $2 代表外部传入的参数&lt;/li&gt;
&lt;li&gt;$1是image的tag，$2是k8s的master服务器上我们自定义的chart的目录&lt;/li&gt;
&lt;li&gt;移除没有tag的悬挂docker image，纯粹为了节省服务器空间，为可选项&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;#!/bin/bash

# 出现错误退出脚本执行
set -o errexit

# $1 and $2 代表外部传入的参数
# $1是image的tag，$2是k8s的master服务器上我们自定义的chart的目录
buildNumber=$1
serverChartLocation=$2
cd $serverChartLocation

# 安装或者升级我们的helm release
# 即如果查询到了有release存在就upgrade，没有则install
if test -z &quot;$(helm ls | grep toc-release)&quot;; then
  helm install -f values.yaml --set env.buildnumber=$buildNumber --set image.tag=$buildNumber toc-release .
else
  helm upgrade -f values.yaml --set env.buildnumber=$buildNumber --set image.tag=$buildNumber toc-release .
fi

# 移除没有tag的悬挂docker image（可选）
danglings=$(sudo docker images -f &quot;dangling=true&quot; -q)
if test -n &quot;$danglings&quot;; then
  sudo docker rmi $(sudo docker images -f &quot;dangling=true&quot; -q) &amp;gt;&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
  if [[ $? != 0 ]]; then
    exit $?
  fi
fi

exit 0
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;4-触发pipeline部署流水线&quot;&gt;&lt;span id=&quot;head13&quot;&gt;4. 触发pipeline部署流水线&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;这里有两种办法，&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;点击我们刚刚创建的pipeline手动run一个&lt;/li&gt;
&lt;li&gt;通过push代码到仓库的指定分支(&lt;code&gt;我们设置的master&lt;/code&gt;)触发构建&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ggviwgsdagj31gx0go77x.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显示构建成功之后就可以查看了！&lt;/p&gt;
&lt;h2 id=&quot;5-关于均衡负载&quot;&gt;&lt;span id=&quot;head14&quot;&gt;5. 关于均衡负载&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;均衡负载是kubernetes自带的基础功能之一，这里只是做了一个试验可以更加直观地感受到而已&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如下&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;定义一个&lt;strong&gt;静态的&lt;/strong&gt;guid&lt;br/&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ggvj3duxkaj30o605r0tn.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;li&gt;在/version 路由下输出guid&lt;br/&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ggvj4k0n9yj30p8062q3s.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;则如果有2个实例，且均衡负载成功的话，每次刷新这个界面，会随机显示这两个guid&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;deployment的replicas实例数需要设置2以上&lt;br/&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ggvj7j7jmej30th0dmjsl.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最后均衡负载试验的地址，也是本次实例项目的线上地址&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://toc.codepie.fun/version&quot;&gt;https://toc.codepie.fun/version&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;如下，会出现两个不同的guid&lt;br/&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ggvj8rdni2j30gr06k3ym.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ggvj97bqydj30hq05qt8t.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 18 Jul 2020 15:24:00 +0000</pubDate>
<dc:creator>宝树呐</dc:creator>
<og:description>1. 前言 2. Net Core项目本身的准备 2.1 dockerfile 2.2 创建kubernetes用于helm的chart包 2.2.1 说明 2.2.2 chart文件目录和文件组成</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/baoshu/p/13338115.html</dc:identifier>
</item>
<item>
<title>Lua骚操作——三元条件运算符 - Oberon</title>
<link>http://www.cnblogs.com/oberon-zjt0806/p/13337577.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/oberon-zjt0806/p/13337577.html</guid>
<description>&lt;blockquote readability=&quot;1.5979381443299&quot;&gt;
&lt;p&gt;本文地址：&lt;a href=&quot;https://www.cnblogs.com/oberon-zjt0806/p/13337577.html&quot;&gt;https://www.cnblogs.com/oberon-zjt0806/p/13337577.html&lt;/a&gt;&lt;br/&gt;本文参考了&lt;a href=&quot;https://www.runoob.com/w3cnote/trinocular-operators-in-lua.html&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;（如果您已经了解什么是三元运算符，请大胆第前往下一个章节）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我知道有一元运算符（逻辑非，位反转，负号），二元运算符（加减乘除等），这三元运算符是？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嗯，是的，很多编程语言是支持一种特定的&lt;strong&gt;三元运算符&lt;/strong&gt;（Ternary Operator）的，不过我先不打算用代码的方式来解释这个运算符。我们先以代数的方式来介绍这种运算符。（如果您已经了解什么是三元运算符，请大胆第前往下一个章节）&lt;/p&gt;
&lt;p&gt;从代数上来说，我们可以把一个N元运算符（算子）定义为一个N元函数的形式，那么我们假定这个三元运算符叫做&lt;span class=&quot;math inline&quot;&gt;\(\Xi_3\)&lt;/span&gt;，那么实际上，这个三元算子可以被表述为这样一个函数：&lt;/p&gt;
&lt;p&gt;\[\Xi_3 \left( o_1,o_2,o_3 \right) = \begin{cases} o_2 &amp;amp;,\mathop{\bf{1}} \left( o_1 \right)=1 \\ o_3 &amp;amp;,\mathop{\bf{1}} \left( o_1 \right)=0 \\ \end{cases} \]&lt;/p&gt;
&lt;p&gt;这里面的&lt;span class=&quot;math inline&quot;&gt;\(o_1\)&lt;/span&gt;到&lt;span class=&quot;math inline&quot;&gt;\(o_3\)&lt;/span&gt;就是三个运算元，&lt;span class=&quot;math inline&quot;&gt;\(\mathop{\bf{1}} (x)\)&lt;/span&gt;叫做&lt;strong&gt;逻辑幺函数&lt;/strong&gt;，这个函数采取任意形式的&lt;span class=&quot;math inline&quot;&gt;\(o_1\)&lt;/span&gt;，若&lt;span class=&quot;math inline&quot;&gt;\(o_1\)&lt;/span&gt;能被解释为&lt;span class=&quot;math inline&quot;&gt;\(F\)&lt;/span&gt;（逻辑0，逻辑矛盾式）则该函数都输出&lt;span class=&quot;math inline&quot;&gt;\(0\)&lt;/span&gt;，否则总输出&lt;span class=&quot;math inline&quot;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;换言之，上面的三元运算&lt;span class=&quot;math inline&quot;&gt;\(\Xi_3\)&lt;/span&gt;就表示了这样的含义：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;若&lt;span class=&quot;math inline&quot;&gt;\(o_1\)&lt;/span&gt;不能被解释为逻辑0，则&lt;span class=&quot;math inline&quot;&gt;\(\Xi_3\)&lt;/span&gt;返回&lt;span class=&quot;math inline&quot;&gt;\(o_2\)&lt;/span&gt;，否则&lt;span class=&quot;math inline&quot;&gt;\(\Xi_3\)&lt;/span&gt;返回&lt;span class=&quot;math inline&quot;&gt;\(o_3\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过这样一种运算符可以进行一个很便利的条件选择，很多程序语言中也都提供了这样的运算符，考虑到我们写程序的代码是线性排版的（排在一行里），因此如果不使用函数而是使用运算符构成中缀表达式挤在运算元中间时，我们会发现：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot;&gt;op1 _ op2 _ op3
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;是的，与二元运算符不同，使用运算符区分三个运算元时需要至少两个字符，放在两个空挡处，因此很多程序语言提供给的是这个运算符&lt;code&gt;?:&lt;/code&gt;，也就是：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot;&gt;op1 ? op2 : op3
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用起来非常优雅简洁，可以让我们节省大量的代码行数，少些若干肥肥的if语句，尽管大量嵌套的话可读性会下降，不过尽量避免这一点就好。&lt;/p&gt;

&lt;p&gt;非常遗憾，翻遍整个Lua的参考文档，Lua并没有提供这个东西……&lt;/p&gt;
&lt;p&gt;就在听过这个令人沮丧的消息后，我无意中看到了一个这样的解决方法，可以说骚断了我的腰……&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-lua&quot;&gt;(a and {b} or {c})[1]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这种方案使用了一个&lt;code&gt;and&lt;/code&gt;和一个&lt;code&gt;or&lt;/code&gt;运算符，号称完成了三元运算符的功能，起初我8太相信，但是看到Lua里关于逻辑运算的描述，我终于看懂了……&lt;/p&gt;
&lt;h2 id=&quot;为什么会这样&quot;&gt;为什么会这样&lt;/h2&gt;
&lt;p&gt;Lua可以说是一个步伐六亲不认，不走寻常路的鬼才语言，虽然目前官网上一片死寂。&lt;/p&gt;
&lt;p&gt;其中一个不寻常就是，&lt;strong&gt;Lua里只有&lt;code&gt;nil&lt;/code&gt;和&lt;code&gt;false&lt;/code&gt;可以被解释为逻辑&lt;code&gt;false&lt;/code&gt;，其余包括&lt;code&gt;0&lt;/code&gt;和&lt;code&gt;[[]]&lt;/code&gt;（空字符串）在内的所有内容全是&lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而第二个不寻常的玩法就是，Lua的逻辑运算符&lt;code&gt;and&lt;/code&gt;和&lt;code&gt;or&lt;/code&gt;并不一定返回&lt;code&gt;true&lt;/code&gt;或&lt;code&gt;false&lt;/code&gt;，它的返回值满足某种吸收原则，这种吸收原则用一句话表示就是：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;若表达式针对当前的逻辑运算符可短路求值，则进行左吸收，否则发生右吸收。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分解到这两个运算符身上就是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;对于&lt;code&gt;and&lt;/code&gt;运算符，表达式&lt;code&gt;a and b&lt;/code&gt;会在&lt;code&gt;a&lt;/code&gt;解释为&lt;code&gt;false&lt;/code&gt;时返回&lt;code&gt;a&lt;/code&gt;（左吸收），否则返回&lt;code&gt;b&lt;/code&gt;（右吸收）&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;or&lt;/code&gt;运算符，表达式&lt;code&gt;a or b&lt;/code&gt;会在&lt;code&gt;a&lt;/code&gt;解释为&lt;code&gt;true&lt;/code&gt;时返回&lt;code&gt;a&lt;/code&gt;（左吸收），否则返回&lt;code&gt;b&lt;/code&gt;（右吸收）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这样一来我们回到这个情形：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot;&gt;op1 _1 op2 _2 op3
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们当然是希望&lt;code&gt;op1&lt;/code&gt;被解释为&lt;code&gt;true&lt;/code&gt;时得到&lt;code&gt;op2&lt;/code&gt;，否则得到&lt;code&gt;op3&lt;/code&gt;。那我们就具体考虑一下当&lt;code&gt;op1&lt;/code&gt;被解释为&lt;code&gt;true&lt;/code&gt;时应当怎样，要返回&lt;code&gt;op2&lt;/code&gt;，则对于前部&lt;code&gt;op1 _1 op2&lt;/code&gt;而言需要发生右吸收，对照上面的吸收规则，那么&lt;code&gt;_1&lt;/code&gt;就应当是&lt;code&gt;and&lt;/code&gt;。依然考虑&lt;code&gt;op1&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;，第一次吸收后表达式变成了&lt;code&gt;op2 _2 op3&lt;/code&gt;，此时我们希望左吸收，不过这里有个问题，op2被解释为&lt;code&gt;true&lt;/code&gt;或&lt;code&gt;false&lt;/code&gt;又是两种情况，我们先考虑&lt;code&gt;op2&lt;/code&gt;解释为&lt;code&gt;true&lt;/code&gt;的情况，此时要完成左吸收，则个根据吸收规则，&lt;code&gt;_2&lt;/code&gt;应当使用&lt;code&gt;or&lt;/code&gt;运算符，于是整个表达式变成了&lt;code&gt;op1 and op2 or op3&lt;/code&gt;，这个表达式可以解决绝大部分情况。&lt;/p&gt;
&lt;p&gt;但是，就如前面所担忧的，这种做法并不能处理&lt;code&gt;op1 and false or op3&lt;/code&gt;的情况，因为&lt;code&gt;op1 and false&lt;/code&gt;部分会被恒定地置为&lt;code&gt;false&lt;/code&gt;，而左&lt;code&gt;false&lt;/code&gt;对&lt;code&gt;or&lt;/code&gt;运算符无法进行左吸收（因为不能短路求值），这种情况下无论&lt;code&gt;op1&lt;/code&gt;是多少都只能返回&lt;code&gt;op3&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;既然如此，那么我们就需要对&lt;code&gt;op2&lt;/code&gt;和&lt;code&gt;op3&lt;/code&gt;进行包装，Lua第三个不寻常的地方就是那个妖娆的&lt;code&gt;table&lt;/code&gt;，&lt;code&gt;table&lt;/code&gt;简直就是个万金油数据结构，什么都能往里塞，而且无论装不装东西，&lt;code&gt;table&lt;/code&gt;总能被解释为true，这就不会引发&lt;code&gt;op1 and op2&lt;/code&gt;总返回&lt;code&gt;false&lt;/code&gt;的情况，从而避免了&lt;code&gt;or&lt;/code&gt;的右吸收，于是我们就考虑把&lt;code&gt;op2&lt;/code&gt;和&lt;code&gt;op3&lt;/code&gt;用两个&lt;code&gt;table&lt;/code&gt;分别包装起来。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-lua&quot;&gt;a and {b} or {c}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然而我们希望返回的结果是表里的元素，而非这张表，因此我们取下元素：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-lua&quot;&gt;(a and {b} or {c})[1] --Lua里下标从1开始
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;大功告成！&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;我还能说什么呢？？太™马叉虫了！！！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 18 Jul 2020 14:14:00 +0000</pubDate>
<dc:creator>Oberon</dc:creator>
<og:description>本文地址：https://www.cnblogs.com/oberon-zjt0806/p/13337577.html 本文参考了这篇文章 三元运算符 （如果您已经了解什么是三元运算符，请大胆第前往下</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/oberon-zjt0806/p/13337577.html</dc:identifier>
</item>
<item>
<title>我和ABP vNext 的故事 - 张善友</title>
<link>http://www.cnblogs.com/shanyou/p/13337713.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shanyou/p/13337713.html</guid>
<description>&lt;p&gt;Abp VNext是Abp的.NET Core 版本，但它不仅仅只是代码重写了。Abp团队在过去多年社区和商业版本的反馈上做了很多的改进。包括性能、底层的框架设计，它融合了更多优雅的设计实践。不管你是自己需要快速上手项目、或者是公司的研发团队没有足够的能力去完整地开发一套稳定且功能全面的快速开发框架；对于.NET 系的开发者和公司来说，Abp目前就是你目前最好的选择。2020年7月15日和腾飞Jesse、计节做了一次《我和ABP vNext的故事》直播，期间我分享时间超时，占用了25分钟，也就是这次直播分享时间超过我们预定的一小时。直播回看地址：&lt;a title=&quot;https://wxc2160346e3bc5861.h5.xiaoe-tech.com/v1/course/video/v_5f0f9c39e4b04349896c2370?type=2&quot; href=&quot;https://wxc2160346e3bc5861.h5.xiaoe-tech.com/v1/course/video/v_5f0f9c39e4b04349896c2370?type=2&quot;&gt;https://wxc2160346e3bc5861.h5.xiaoe-tech.com/v1/course/video/v_5f0f9c39e4b04349896c2370?type=2&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;2018年我从腾讯离职开始创业至今，马上就满2年时间了，在这两年时间里我一直在伴随ABP vNext这个项目成长，我的分享主题就是下面这三点，这三点也是大家非常关心的为什么我要选择ABP vNext。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2020.cnblogs.com/blog/510/202007/510-20200718215451103-908033546.png&quot;&gt;&lt;img width=&quot;579&quot; height=&quot;327&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://img2020.cnblogs.com/blog/510/202007/510-20200718215451732-1030338857.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ABP vNext 的前身是aspnetboilerplate， 2017年开始基于.NET Core 进行重构，新的框架名称定义为ABP，目前已经发布3.0.4 版本。在国内ABP ，很多人可能对这个ABP vNext不太了解，很多人使用过的abp更多是老版本的aspnetboilerplate ，老版本的aspnetboilerplate 其实我也没有深入使用过，我只用它做过一个简单Demo，来自国内社区的使用体验是臃肿复杂，性能差。 ABP vNext 我从0.5版本开始使用，2018年底我就在一家外企项目中导入了ABP vNext，后面还有好几个客户项目也是导入了ABP vNext。ABP vNext 采用敏捷的开发模式，每个月发布一个版本。 最初的0.5版本时，底层的模块化等基础框架已经具备可用性，所以那时候采用的ABP vNext的模式和腾飞后面给大家介绍的使用方式是一致的。 2019年11月在上海举办的首届中国dotnet开发者峰会上也预约了2位讲师介绍ABP vNext相关内容，其中土牛（土耳其大牛）简单介绍Abp.io,分享对.NET Core和ABP框架的看法值得大家回顾一下：&lt;/p&gt;

&lt;p&gt;还有另外一位讲师粱士伟讲的《下一代ASP.NET Core开源应用程序框架》，现在他是全职开发ABP vNext的国内开发者，在国内远程工作，拿美元工资。目前在国内有两位全职的ABP vNext开源开发者。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2020.cnblogs.com/blog/510/202007/510-20200718215452309-737560276.png&quot;&gt;&lt;img width=&quot;594&quot; height=&quot;336&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://img2020.cnblogs.com/blog/510/202007/510-20200718215452987-1045507491.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说起ABP vNext就不得不和老的aspnetboilerplate 进行比较。 ABP vNext 和 aspnetboilerplate  关系类似.NET Core和 .NET Framework的关系，ABP vNext是在aspnetboilerplate 项目多年经验的基础上针对.NET Core的特性重写的聚焦于微服务的模块化框架。在我开始使用ABP vNext项目之前，我也在github上创建了一个整合.NET 社区开源项目的胶水代码项目NanoFabric，后面我再具体介绍这个项目的具体情况。2018年底我离职创业后不久我就发现了ABP vNext这个项目，他们还有一个专业的团队在开发，我也就融入了这个ABP vNext社区， ABP vNext 在模块化软件开发方面达到了新的层次，非常类似于乐高这样搭积木体系， 我现在开发的大量项目都是才作用这种模块化的搭积木体系来进行，可以单体也可以微服务，非常的灵活，重用性方面也非常好，结合ABP vNext的商业版，可以做到从前端到后端的模块化重用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2020.cnblogs.com/blog/510/202007/510-20200718215453537-18913072.png&quot;&gt;&lt;img width=&quot;593&quot; height=&quot;335&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://img2020.cnblogs.com/blog/510/202007/510-20200718215453985-467352279.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们开发软件的时候都希望能够使用快速开发框架来帮我们加快开发速度，也就是可重用的应用程序开发框架，对于这样的一个可重用的应用程序框架并不简单，从开发体验方面，开发框架的不断保持更新，完善的文档支持，开发人员的培训支持等方面都需要做出非常大努力。ABP vNext 也是这样的一个可重用的应用程序框架。 在.NET社区里一直有声音是期望有一个Spring Boot这样的项目，现在我可以告诉大家ABP vNext 可以媲美Spring Boot这样的项目， ABP vNext 融合了大量.NET社区的开源项目，让你在开发项目的过程中选择不同的开源项目组合起来，大大降低你使用相关开源项目的门槛，最明显的例子就是IdentityServer4， IdentityServer4是一个OpenID Connect 规范实现的开源框架，它还无法做到开箱即用这样的一个层度，那么ABP vNext 将IdentityServer4封装成一个IdentityServer模块，你就可以做到开箱即用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2020.cnblogs.com/blog/510/202007/510-20200718215454525-156164380.png&quot;&gt;&lt;img width=&quot;602&quot; height=&quot;343&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://img2020.cnblogs.com/blog/510/202007/510-20200718215455267-903640506.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面给大家介绍ABP 是什么，前面也提到了aspnetboilerplate 体验也并不好，为什么我选择使用ABP vNext。大家都在寻找一个好用的业务开发框架，这种开源业务开发框架也很多，大家都知道我们国内开发者一起组织发展的&lt;a title=&quot;https://github.com/dotnetcore&quot; href=&quot;https://github.com/dotnetcore&quot;&gt;https://github.com/dotnetcore&lt;/a&gt; ，在这个社区里已经有好几个功能完善的应用开发框架，比如&lt;a title=&quot;https://github.com/dotnetcore/Util&quot; href=&quot;https://github.com/dotnetcore/Util&quot;&gt;https://github.com/dotnetcore/Util&lt;/a&gt;，&lt;a title=&quot;https://github.com/dotnetcore/OSharp&quot; href=&quot;https://github.com/dotnetcore/OSharp&quot;&gt;https://github.com/dotnetcore/OSharp&lt;/a&gt;，&lt;a title=&quot;https://github.com/dotnetcore/WTM&quot; href=&quot;https://github.com/dotnetcore/WTM&quot;&gt;https://github.com/dotnetcore/WTM&lt;/a&gt;。这些开发框架我都没有选择的原因在于我的关注点在于微服务开发框架，基于k8s 的云原生应用开发是未来的趋势，去年我也一直在推广.NET Core在k8s 运行， 我们的很多公司的团队都很小，有的只有3-4个人，大的有几百号人。我们要以云原生的方式来开发应用，如何在不同规模的团队之间平衡，如何在小团队时采用单体架构，当团队规模扩大后优雅的拆分成微服务架构，还有SaaS 在云原生环境下的架构挑战等。这几个方面ABP vNext 都很好的解决了，上面提到几个框架没有很好的解决微服务场景下的应用开发框架，只做到了单体开发的模块化。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2020.cnblogs.com/blog/510/202007/510-20200718215455753-2096525956.png&quot;&gt;&lt;img width=&quot;602&quot; height=&quot;340&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://img2020.cnblogs.com/blog/510/202007/510-20200718215456201-1632930674.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大家看到了ppt上这个项目NanoFabric，这个项目始于2017.2.2，这期间我有做过一次简单分享，2018年10月份我就把它设置为只读状态，后面我就没有继续更新了，从此之后我就把这个项目的相关内容转为使用ABP vNext，可以看到这个项目的star还在增长，说明有很多同学还在关注这个项目，有很多同学私下找我聊的时候我都是推荐他们使用ABP vNext，今年年出又发现了一新的组织&lt;a title=&quot;https://github.com/easyabp&quot; href=&quot;https://github.com/easyabp&quot;&gt;https://github.com/easyabp&lt;/a&gt; ，因此我也加入了这一组织，现在我们有6位同学，主要是ABP 官方之外的使用ABP 的同学组成，大部分是国内使用ABP vNext的同学，也有国外社区，欢迎大家参与这个组织的发展，目标是帮助大家更容易的使用ABP vNext。今年年初的时候ABP vNext已经发布了2.0版本，已经比较成熟了，因此我也特意在这个项目的介绍上留下了这么一段话，推荐大家转到使用ABP vNext。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2020.cnblogs.com/blog/510/202007/510-20200718215456693-1414955972.png&quot;&gt;&lt;img width=&quot;600&quot; height=&quot;344&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://img2020.cnblogs.com/blog/510/202007/510-20200718215457222-500831006.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;br/&gt;我已经使用ABP vNext将近2年时间，ABP vNext 目前在github的star 也超过了4000， ABP vNext相对于aspnetboilerplate  使用门槛相对提高，同时ABP Zero也很成熟，对应的就是ABP商业版 &lt;a href=&quot;https://commercial.abp.io/&quot;&gt;https://commercial.abp.io/&lt;/a&gt;， 粱桐铭同学搞的52ABP 也是有声有色。 类似于52ABP的ABP的本地化内容也是我们Easyabp 社区组织让大家更好的使用，比如对微信，支付宝，阿里云，腾讯云等本地资源的适配，在easyabp 里有一个仓库 &lt;a title=&quot;https://github.com/EasyAbp/awesome-abp&quot; href=&quot;https://github.com/EasyAbp/awesome-abp&quot;&gt;https://github.com/EasyAbp/awesome-abp&lt;/a&gt; 汇集了abp的相关资源。 同时Easyabp 提供了类似于ABP 商业版的Abp suite工具，辅助我们快速开发应用。ABP vNext 现在也是我公司的应用开发框架，我公司网站上也有一个专门介绍ABP vNext的页面 &lt;a title=&quot;http://www.weyhd.com/abpvnext&quot; href=&quot;http://www.weyhd.com/abpvnext&quot;&gt;http://www.weyhd.com/abpvnext&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今年年初我给腾飞介绍ABP vNext， 他开始接触 Abp VNext的时候，就被它优雅的模块化和组件化设计吸引了。以前的Abp给人的感觉臃肿，现在Abp提供的多个功能你都可以在使用的时候自己选择组合。基于横切关注点的设计思路，可以很好的使用Abp所提供的一些基础模块 。上半年腾飞给一些企业做过关于Abp的培训，所接触到的一些中小企业，包括我现在所在的企业研发团队在80人以内都很难有足够的能力去研发一套如何功能完整且稳定快速开发框架。与其自己投入大量的人力和时间造轮子，为什么不选择一套成熟稳定的开源产品呢？ 因此他还特意录制一个系列的视频课程，放在dotnet课堂，欢迎大家一起来评估学习。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2020.cnblogs.com/blog/510/202007/510-20200718215457669-699334610.png&quot;&gt;&lt;img width=&quot;213&quot; height=&quot;329&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://img2020.cnblogs.com/blog/510/202007/510-20200718215458177-137597054.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 18 Jul 2020 13:55:00 +0000</pubDate>
<dc:creator>张善友</dc:creator>
<og:description>Abp VNext是Abp的.NET Core 版本，但它不仅仅只是代码重写了。Abp团队在过去多年社区和商业版本的反馈上做了很多的改进。包括性能、底层的框架设计，它融合了更多优雅的设计实践。不管你是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/shanyou/p/13337713.html</dc:identifier>
</item>
<item>
<title>Java常用开源库 - 请叫我头头哥</title>
<link>http://www.cnblogs.com/toutou/p/java_open_source.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/toutou/p/java_open_source.html</guid>
<description>&lt;div class=&quot;bodyCustomClass&quot; readability=&quot;32.5&quot;&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Java的经久不衰，很大程度上得益于Java的生态好。在日常开发中，我们也会经常使用到各种开源库和工具类，为了避免重复造轮子，本文将贴出工作及学习中会用到的部分开源库和工具类。Java的生态实在太大，这里只能列举一部分。如果你对此感兴趣，不妨去读读他们的源码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;h2 id=&quot;_nav_0&quot; class=&quot;blogCustomTitleStyle&quot;&gt;&lt;span class=&quot;blogCustomTitleIco&quot;&gt;v&lt;/span&gt;HTML解析器jsoup&lt;/h2&gt;
&lt;p&gt;1.1 介绍&lt;/p&gt;
&lt;p&gt;jsoup(&lt;a href=&quot;https://github.com/jhy/jsoup&quot; target=&quot;_blank&quot;&gt;GitHub地址&lt;/a&gt;、&lt;a href=&quot;https://www.open-open.com/jsoup/&quot; target=&quot;_blank&quot;&gt;中文文档&lt;/a&gt;)是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。&lt;/p&gt;
&lt;p&gt;1.2 示例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
            Document document = Jsoup.connect(&quot;https://www.cnblogs.com/toutou/&quot;&lt;span&gt;)
                    .userAgent(&lt;/span&gt;&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36&quot;&lt;span&gt;)
                    .get();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  System.out.println(document);&lt;/span&gt;
            Elements elements = document.select(&quot;div.box.item&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(Element element : elements)
            {
                Elements eleUrl &lt;/span&gt;= element.select(&quot;div.box-aw a&quot;&lt;span&gt;);
                String strPrjUrl &lt;/span&gt;= eleUrl.attr(&quot;href&quot;&lt;span&gt;);
                setProjUrls.add(strPrjUrl);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  System.out.println(strPrjUrl);&lt;/span&gt;
                Elements eleTitle = eleUrl.select(&quot;.title&quot;&lt;span&gt;);
                String strTitle &lt;/span&gt;=&lt;span&gt; eleTitle.text();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; System.out.println(strTitle);&lt;/span&gt;
                Elements eleSummary = eleUrl.select(&quot;.summary&quot;&lt;span&gt;);
                String strSummary &lt;/span&gt;=&lt;span&gt; eleSummary.text();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  System.out.println(strSummary);&lt;/span&gt;
            }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;_nav_1&quot; class=&quot;blogCustomTitleStyle&quot;&gt;&lt;span class=&quot;blogCustomTitleIco&quot;&gt;v&lt;/span&gt;Java 8 Stream&lt;/h2&gt;
&lt;p&gt;2.1 介绍&lt;/p&gt;
&lt;p&gt;Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据。Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。&lt;/p&gt;
&lt;p&gt;2.2 示例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
List&amp;lt;Integer&amp;gt; transactionsIds =&lt;span&gt; 
widgets.stream()
             .filter(b &lt;/span&gt;-&amp;gt; b.getColor() ==&lt;span&gt; RED)
             .sorted((x,y) &lt;/span&gt;-&amp;gt; x.getWeight() -&lt;span&gt; y.getWeight())
             .mapToInt(Widget::getWeight)
             .sum();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;_nav_2&quot; class=&quot;blogCustomTitleStyle&quot;&gt;&lt;span class=&quot;blogCustomTitleIco&quot;&gt;v&lt;/span&gt;Apache Commons&lt;/h2&gt;
&lt;p&gt;3.1 介绍&lt;/p&gt;
&lt;p&gt;Apache Commons是一个非常强大、非常全面的工具包，包含了很多开源的工具。下面就罗列一下一些相对常用的工具。&lt;/p&gt;
&lt;p&gt;3.2 分支&lt;/p&gt;
&lt;p&gt;&lt;span&gt;BeanUtils&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Commons-BeanUtils 提供对 Java 反射和自省API的包装&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Chain&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Chain 提供实现组织复杂的处理流程的“责任链模式”.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CLI&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;CLI 提供针对命令行参数，选项，选项组，强制选项等的简单API.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Codec&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Codec 包含一些通用的编码解码算法。包括一些语音编码器， Hex, Base64, 以及URL encoder.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Collections&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Commons-Collections 提供一个类包来扩展和增加标准的 Java Collection框架&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Configuration&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Commons-Configuration 工具对各种各式的配置和参考文件提供读取帮助.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;DBCP&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Commons-DBCP 提供数据库连接池服务&lt;/p&gt;
&lt;p&gt;&lt;span&gt;DbUtils&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;DbUtils 是一个 JDBC helper 类库，完成数据库任务的简单的资源清除代码.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Discovery&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Commons-Discovery 提供工具来定位资源 (包括类) ，通过使用各种模式来映射服务/引用名称和资源名称.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;HttpClient&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Commons-HttpClient 提供了可以工作于HTTP协议客户端的一个框架.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;IO&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;IO 是一个 I/O 工具集&lt;/p&gt;
&lt;p&gt;&lt;span&gt;JXPath&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Commons-JXPath 提供了使用Xpath语法操纵符合Java类命名规范的 JavaBeans的工具。也支持 maps, DOM 和其他对象模型.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Lang&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Commons-Lang 提供了许多许多通用的工具类集，提供了一些java.lang中类的扩展功能&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Launcher&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Launcher 组件是一个交叉平台的Java 应用载入器。 Commons-launcher 消除了需要批处理或者Shell脚本来载入Java 类。.原始的 Java 类来自于Jakarta Tomcat 4.0 项目&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Logging&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Commons-Logging 是一个各种 logging API实现的包裹类.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Math&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Math 是一个轻量的，自包含的数学和统计组件，解决了许多非常通用但没有及时出现在Java标准语言中的实践问题.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Net&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Net 是一个网络工具集，基于 NetComponents 代码，包括 FTP 客户端等等。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Pool&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Commons-Pool 提供了通用对象池接口，一个用于创建模块化对象池的工具包，以及通常的对象池实现.&lt;/p&gt;
&lt;p&gt;Apache Commons优秀的分支工具还有很多，感兴趣的可以在&lt;a href=&quot;http://commons.apache.org/components.html&quot; target=&quot;_blank&quot;&gt;Apache Commons – Components&lt;/a&gt;查看。&lt;/p&gt;
&lt;p&gt;3.3 示例&lt;/p&gt;
&lt;p&gt;Apache Commons太大，这里也简单来几个示例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符串判空操作&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
boolean isEmpty = StringUtils.isEmpty(value);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;获取类的全名称&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ClassUtils.getName(String.&lt;span&gt;class&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;判断集合是否为空&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
boolean isNotEmpty = CollectionUtils.isNotEmpty(list);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;反射获取某个类的所有 Field&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Field[] fields = FieldUtils.getAllFields(User.&lt;span&gt;class&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/506684/202007/506684-20200708112509300-32630405.png&quot; alt=&quot;https://www.cnblogs.com/toutou/p/java_open_source.html Java常用开源库&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;_nav_3&quot; class=&quot;blogCustomTitleStyle&quot;&gt;&lt;span class=&quot;blogCustomTitleIco&quot;&gt;v&lt;/span&gt;JSON&lt;/h2&gt;
&lt;p&gt;4.1 介绍&lt;/p&gt;
&lt;p&gt;JSON已经成为最广泛使用的一种数据传输格式，因此程序中对JSON的处理也正变得越来越多。本文主要介绍下Jackson和Google Gson。&lt;/p&gt;
&lt;p&gt;4.2 Jackson&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/FasterXML/jackson&quot; target=&quot;_blank&quot;&gt;Jackson&lt;/a&gt;是一个多用途的Java库，用于处理JSON数据。使用它可以很方便地在JSON数据和Java对象之间进行转换。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
   ObjectMapper mapper = &lt;span&gt;new&lt;/span&gt; ObjectMapper(); 
   User user = mapper.readValue(&lt;span&gt;new&lt;/span&gt; File(&quot;user.json&quot;), User.&lt;span&gt;class&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.3 Google Gson&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/gsonGoogle&quot; target=&quot;_blank&quot;&gt;Gson&lt;/a&gt;是Google发布的一个用于序列化和反序列化Json的工具库，可以非常轻松的实现Json到Java Object的转变，也同样非常简单的可以将一个Java实例序列化为Json。Gson包中主要的类有Gson, GsonBuilder, JsonParser等等。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
   Gson gson = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Gson();
   String[] strings &lt;/span&gt;= {&quot;123&quot;, &quot;456&quot;, &quot;789&quot;&lt;span&gt;};
   gson.toJson(strings);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ==&amp;gt; [&quot;123&quot;, &quot;456&quot;, &quot;789&quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;_nav_4&quot; class=&quot;blogCustomTitleStyle&quot;&gt;&lt;span class=&quot;blogCustomTitleIco&quot;&gt;v&lt;/span&gt;日志&lt;/h2&gt;
&lt;p&gt;JAVA中也包含了日志记录功能，但它在处理日志分级，日志的存储，以及日志的备份、归档方面都不够出色，因此在项目中我们一般都会使用第三方日志库来处理日志。&lt;/p&gt;
&lt;p&gt;5.1 SLF4J&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/qos-ch/slf4j&quot; target=&quot;_blank&quot;&gt;SLF4J&lt;/a&gt;是为各种loging APIs提供一个简单统一的接口，从而使得最终用户能够在部署的时候配置自己希望的loging APIs实现。 Logging API实现既可以选择直接实现SLF4J接的loging APIs如： NLOG4J、SimpleLogger。也可以通过SLF4J提供的API实现来开发相应的适配器如Log4jLoggerAdapter、JDK14LoggerAdapter。&lt;/p&gt;
&lt;p&gt;5.2 Apache Log4j&lt;/p&gt;
&lt;p&gt;Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。&lt;/p&gt;
&lt;p&gt;5.3 Logback&lt;/p&gt;
&lt;p&gt;Logback是由log4j创始人设计的又一个开源日志组件。logback当前分成三个模块：logback-core,logback- classic和logback-access。logback-core是其它两个模块的基础模块。logback-classic是log4j的一个 改良版本。此外logback-classic完整实现SLF4J API使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging。logback-access访问模块与Servlet容器集成提供通过Http来访问日志的功能。官方网站： http://logback.qos.ch。&lt;/p&gt;
&lt;h2 id=&quot;_nav_5&quot; class=&quot;blogCustomTitleStyle&quot;&gt;&lt;span class=&quot;blogCustomTitleIco&quot;&gt;v&lt;/span&gt;JUnit&lt;/h2&gt;
&lt;p&gt;6.1 介绍&lt;/p&gt;
&lt;p&gt;Junit测试是程序员测试，即所谓白盒测试，因为程序员知道被测试的软件如何（How）完成功能和完成什么样（What）的功能。Junit是一套框架，继承TestCase类，就可以用Junit进行自动测试了。&lt;/p&gt;
&lt;p&gt;6.2 示例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; org.junit.Assert.assertEquals;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestJunit {

   String message &lt;/span&gt;= &quot;Hello World&quot;&lt;span&gt;;  
   MessageUtil messageUtil &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MessageUtil(message);

   @Test
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testPrintMessage() {
      assertEquals(message,messageUtil.printMessage());
   }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;_nav_6&quot; class=&quot;blogCustomTitleStyle&quot;&gt;&lt;span class=&quot;blogCustomTitleIco&quot;&gt;v&lt;/span&gt;LeetCodeAnimation&lt;/h2&gt;
&lt;p&gt;7.1 介绍&lt;/p&gt;
&lt;p&gt;网上可以搜到很多“刷题笔记”、“刷 LeetCode 的正确姿势”等分享。但是，还是有一些算法题，文字仍无法帮助同学们 get 到正确的方法或解决问题的逻辑，此时又该怎么办？有什么好的解决方法呢？今天，营长要特别为大家介绍一个名为&lt;a href=&quot;https://github.com/MisterBooo/LeetCodeAnimation&quot; target=&quot;_blank&quot;&gt;LeetCodeAnimation&lt;/a&gt;的开源项目。在这个项目中，文字解读并不是主要的，作者把一些 LeetCode 题目或算法原理用非常生动、形象的动画形式展现出来。&lt;/p&gt;
&lt;h2 id=&quot;_nav_7&quot; class=&quot;blogCustomTitleStyle&quot;&gt;&lt;span class=&quot;blogCustomTitleIco&quot;&gt;v&lt;/span&gt;JavaGuide&lt;/h2&gt;
&lt;p&gt;8.1 介绍&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Snailclimb/JavaGuide&quot; target=&quot;_blank&quot;&gt;JavaGuide&lt;/a&gt;涵盖大部分Java程序员所需要掌握的核心知识&lt;/p&gt;
&lt;h2 id=&quot;_nav_8&quot; class=&quot;blogCustomTitleStyle&quot;&gt;&lt;span class=&quot;blogCustomTitleIco&quot;&gt;v&lt;/span&gt;源码地址&lt;/h2&gt;
&lt;p&gt;&lt;a title=&quot;请叫我头头哥&quot; href=&quot;https://github.com/toutouge/javademosecond&quot; target=&quot;_blank&quot;&gt;https://github.com/toutouge/javademosecond&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他参考资料：&lt;/p&gt;
&lt;div id=&quot;MySignature&quot; readability=&quot;9.0030211480363&quot;&gt;
&lt;p id=&quot;PSignature&quot;&gt;&lt;br/&gt;作　　者：&lt;strong&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/toutou/&quot; target=&quot;_blank&quot;&gt;请叫我头头哥&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;出　　处：&lt;a href=&quot;http://www.cnblogs.com/toutou/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/toutou/&lt;/a&gt;&lt;br/&gt;关于作者：专注于基础平台的项目开发。如有问题或建议，请多多赐教！&lt;br/&gt;版权声明：本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;br/&gt;特此声明：所有评论和私信都会在第一时间回复。也欢迎园子的大大们指正错误，共同进步。或者&lt;a href=&quot;http://msg.cnblogs.com/msg/send/%E8%AF%B7%E5%8F%AB%E6%88%91%E5%A4%B4%E5%A4%B4%E5%93%A5&quot;&gt;直接私信&lt;/a&gt;我&lt;br/&gt;声援博主：如果您觉得文章对您有帮助，可以点击文章右下角&lt;strong&gt;&lt;span&gt;【&lt;a id=&quot;post-up&quot;&gt;推荐&lt;/a&gt;】&lt;/span&gt;&lt;/strong&gt;一下。您的鼓励是作者坚持原创和持续写作的最大动力！&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 18 Jul 2020 13:50:00 +0000</pubDate>
<dc:creator>请叫我头头哥</dc:creator>
<og:description>Java的经久不衰，很大程度上得益于Java的生态好。在日常开发中，我们也会经常使用到各种开源库和工具类，为了避免重复造轮子，本文将贴出工作及学习中会用到的部分开源库和工具类。Java的生态实在太大，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/toutou/p/java_open_source.html</dc:identifier>
</item>
<item>
<title>JAVA各种OOM代码样例及解决方法 - 黄青石</title>
<link>http://www.cnblogs.com/huangqingshi/p/13336648.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangqingshi/p/13336648.html</guid>
<description>&lt;p&gt;　　周末了，觉得我还有很多作业没有写，针对目前大家对OOM的类型不太熟悉，那么我们来总结一下各种OOM出现的情况以及解决方法。&lt;/p&gt;
&lt;p&gt;　　我们把各种OOM的情况列出来，然后逐一进行代码编写复现和提供解决方法。&lt;/p&gt;
&lt;p&gt;　　1. 堆溢出-java.lang.OutOfMemoryError: Java heap space。&lt;/p&gt;
&lt;p&gt;　　2. 栈溢出-java.lang.OutOfMemorryError。&lt;/p&gt;
&lt;p&gt;　　3. 栈溢出-java.lang.StackOverFlowError。&lt;/p&gt;
&lt;p&gt;　　4. 元信息溢出-java.lang.OutOfMemoryError: Metaspace。&lt;/p&gt;
&lt;p&gt;　　5. 直接内存溢出-java.lang.OutOfMemoryError: Direct buffer memory。&lt;/p&gt;
&lt;p&gt;　　6. GC超限-java.lang.OutOfMemoryError: GC overhead &lt;span class=&quot;hljs-built_in&quot;&gt;limit exceeded。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;　　第一种，堆溢出异常，相信大家很常见。即堆内对象不能进行回收了，堆内存持续增大，这样达到了堆内存的最大值，数据满了，所以就出来了。我们直接放溢出的代码样例。我们需要设置好idea的VM Options: -Xmx100m，这样我们设置为最大堆内存，这样运行起来就很快就出来错误了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; oom;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.TimeUnit;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; huangqingshi
 * @Date 2020-07-18
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HeapOOM {

    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OOMObject {
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
        List&lt;/span&gt;&amp;lt;OOMObject&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();

        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            TimeUnit.MILLISECONDS.sleep(1);&lt;/span&gt;
            list.add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; OOMObject());
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行的异常如下，代码直接就出来我们看到的异常了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/bin/java -Xmx100m -Dfile.encoding=UTF-8 -classpath /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/tools.jar:/Users/huangqingshi/Downloads/flink-project/target/classes:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-java/1.7.2/flink-java-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-core/1.7.2/flink-core-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-annotations/1.7.2/flink-annotations-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-metrics-core/1.7.2/flink-metrics-core-1.7.2.jar:/Users/huangqingshi/.m2/repository/com/esotericsoftware/kryo/kryo/2.24.0/kryo-2.24.0.jar:/Users/huangqingshi/.m2/repository/com/esotericsoftware/minlog/minlog/1.2/minlog-1.2.jar:/Users/huangqingshi/.m2/repository/org/objenesis/objenesis/2.1/objenesis-2.1.jar:/Users/huangqingshi/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-compress/1.18/commons-compress-1.18.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-asm/5.0.4-5.0/flink-shaded-asm-5.0.4-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-lang3/3.3.2/commons-lang3-3.3.2.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-math3/3.5/commons-math3-3.5.jar:/Users/huangqingshi/.m2/repository/org/slf4j/slf4j-api/1.7.15/slf4j-api-1.7.15.jar:/Users/huangqingshi/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/force-shading/1.7.2/force-shading-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-streaming-java_2.11/1.7.2/flink-streaming-java_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-runtime_2.11/1.7.2/flink-runtime_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-queryable-state-client-java_2.11/1.7.2/flink-queryable-state-client-java_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-hadoop-fs/1.7.2/flink-hadoop-fs-1.7.2.jar:/Users/huangqingshi/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-netty/4.1.24.Final-5.0/flink-shaded-netty-4.1.24.Final-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-jackson/2.7.9-5.0/flink-shaded-jackson-2.7.9-5.0.jar:/Users/huangqingshi/.m2/repository/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar:/Users/huangqingshi/.m2/repository/org/javassist/javassist/3.19.0-GA/javassist-3.19.0-GA.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/scala-library/2.11.12/scala-library-2.11.12.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-actor_2.11/2.4.20/akka-actor_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/com/typesafe/config/1.3.0/config-1.3.0.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/modules/scala-java8-compat_2.11/0.7.0/scala-java8-compat_2.11-0.7.0.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-stream_2.11/2.4.20/akka-stream_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/org/reactivestreams/reactive-streams/1.0.0/reactive-streams-1.0.0.jar:/Users/huangqingshi/.m2/repository/com/typesafe/ssl-config-core_2.11/0.2.1/ssl-config-core_2.11-0.2.1.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/modules/scala-parser-combinators_2.11/1.0.4/scala-parser-combinators_2.11-1.0.4.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-protobuf_2.11/2.4.20/akka-protobuf_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-slf4j_2.11/2.4.20/akka-slf4j_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/org/clapper/grizzled-slf4j_2.11/1.3.2/grizzled-slf4j_2.11-1.3.2.jar:/Users/huangqingshi/.m2/repository/com/github/scopt/scopt_2.11/3.5.0/scopt_2.11-3.5.0.jar:/Users/huangqingshi/.m2/repository/org/xerial/snappy/snappy-java/1.1.4/snappy-java-1.1.4.jar:/Users/huangqingshi/.m2/repository/com/twitter/chill_2.11/0.7.6/chill_2.11-0.7.6.jar:/Users/huangqingshi/.m2/repository/com/twitter/chill-java/0.7.6/chill-java-0.7.6.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-clients_2.11/1.7.2/flink-clients_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-optimizer_2.11/1.7.2/flink-optimizer_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-guava/18.0-5.0/flink-shaded-guava-18.0-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-0.10_2.11/1.7.2/flink-connector-kafka-0.10_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-0.9_2.11/1.7.2/flink-connector-kafka-0.9_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-base_2.11/1.7.2/flink-connector-kafka-base_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/kafka/kafka-clients/0.10.2.1/kafka-clients-0.10.2.1.jar:/Users/huangqingshi/.m2/repository/net/jpountz/lz4/lz4/1.3.0/lz4-1.3.0.jar:/Users/huangqingshi/.m2/repository/org/slf4j/slf4j-log4j12/1.7.7/slf4j-log4j12-1.7.7.jar:/Users/huangqingshi/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/Users/huangqingshi/.m2/repository/com/alibaba/fastjson/1.2.62/fastjson-1.2.62.jar:/Users/huangqingshi/.m2/repository/com/google/guava/guava/28.1-jre/guava-28.1-jre.jar:/Users/huangqingshi/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/Users/huangqingshi/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/Users/huangqingshi/.m2/repository/org/checkerframework/checker-qual/2.8.1/checker-qual-2.8.1.jar:/Users/huangqingshi/.m2/repository/com/google/errorprone/error_prone_annotations/2.3.2/error_prone_annotations-2.3.2.jar:/Users/huangqingshi/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/Users/huangqingshi/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.18/animal-sniffer-annotations-1.18.jar:/Users/huangqingshi/.m2/repository/redis/clients/jedis/3.1.0/jedis-3.1.0.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-pool2/2.6.2/commons-pool2-2.6.2.jar:/Users/huangqingshi/.m2/repository/mysql/mysql-connector-java/8.0.16/mysql-connector-java-8.0.16.jar:/Users/huangqingshi/.m2/repository/com/google/protobuf/protobuf-java/3.6.1/protobuf-java-3.6.1.jar:/Users/huangqingshi/.m2/repository/com/alibaba/druid/1.1.20/druid-1.1.20&lt;span&gt;.jar oom.HeapOOM
Exception in thread &lt;/span&gt;&quot;main&quot;&lt;span&gt; java.lang.OutOfMemoryError: Java heap space
    at java.util.Arrays.copyOf(Arrays.java:&lt;/span&gt;3210&lt;span&gt;)
    at java.util.Arrays.copyOf(Arrays.java:&lt;/span&gt;3181&lt;span&gt;)
    at java.util.ArrayList.grow(ArrayList.java:&lt;/span&gt;261&lt;span&gt;)
    at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:&lt;/span&gt;235&lt;span&gt;)
    at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:&lt;/span&gt;227&lt;span&gt;)
    at java.util.ArrayList.add(ArrayList.java:&lt;/span&gt;458&lt;span&gt;)
    at oom.HeapOOM.main(HeapOOM.java:&lt;/span&gt;21&lt;span&gt;)

Process finished with exit code &lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　细心的同学可以发现我在里边设置了一个休眠，目的是我们看一下堆内存的结构和数据图。我们将休眠代码打开，然后打开JDK自带的jconsole命令，连接上之后我们看一下概览图，通过下图我们发现堆内存持续不断的增长。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1236784/202007/1236784-20200718170353282-1647763195.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　我们打开内存界面，看一下内存，然后点一下GC按钮，这个时候会有一些类进行回收，但是还是会继续增长，看一下下面的图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1236784/202007/1236784-20200718170535169-893277111.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1236784/202007/1236784-20200718170817075-1681029338.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 点开信息标签看一下。经过几次GC回收之后，类的数据量还是变化不大，说明没有进行回收。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1236784/202007/1236784-20200718170928228-1061214651.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;　　&lt;/p&gt;
&lt;p&gt;　　以上这种情况的解决方法就是找到问题点，分析哪个地方是否存储了大量类没有被回收的情况，通过JMAP命令将线上的堆内存导出来后进行分析。&lt;/p&gt;
&lt;p&gt;　　第二种情况，我们看一下栈溢出的情况，“上菜”，下面的代码就是无限的创建线程，直到没法再创建线程。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; oom;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.TimeUnit;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; huangqingshi
 * @Date 2020-07-18
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StackOOM {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; infiniteRun() {
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
            Thread thread &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Thread(() -&amp;gt;&lt;span&gt; {

                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                        TimeUnit.HOURS.sleep(&lt;/span&gt;1&lt;span&gt;);
                    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                        e.printStackTrace();
                    }
                }

            });
            thread.start();
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        infiniteRun();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　抛出来的异常如下，如果真的需要创建线程，我们需要调整帧栈的大小-Xss512k，默认帧栈大小为1M，如果设置小了，可以创建更多线程。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/bin/java -Xss512k -Dfile.encoding=UTF-8 -classpath /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/tools.jar:/Users/huangqingshi/Downloads/flink-project/target/classes:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-java/1.7.2/flink-java-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-core/1.7.2/flink-core-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-annotations/1.7.2/flink-annotations-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-metrics-core/1.7.2/flink-metrics-core-1.7.2.jar:/Users/huangqingshi/.m2/repository/com/esotericsoftware/kryo/kryo/2.24.0/kryo-2.24.0.jar:/Users/huangqingshi/.m2/repository/com/esotericsoftware/minlog/minlog/1.2/minlog-1.2.jar:/Users/huangqingshi/.m2/repository/org/objenesis/objenesis/2.1/objenesis-2.1.jar:/Users/huangqingshi/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-compress/1.18/commons-compress-1.18.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-asm/5.0.4-5.0/flink-shaded-asm-5.0.4-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-lang3/3.3.2/commons-lang3-3.3.2.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-math3/3.5/commons-math3-3.5.jar:/Users/huangqingshi/.m2/repository/org/slf4j/slf4j-api/1.7.15/slf4j-api-1.7.15.jar:/Users/huangqingshi/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/force-shading/1.7.2/force-shading-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-streaming-java_2.11/1.7.2/flink-streaming-java_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-runtime_2.11/1.7.2/flink-runtime_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-queryable-state-client-java_2.11/1.7.2/flink-queryable-state-client-java_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-hadoop-fs/1.7.2/flink-hadoop-fs-1.7.2.jar:/Users/huangqingshi/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-netty/4.1.24.Final-5.0/flink-shaded-netty-4.1.24.Final-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-jackson/2.7.9-5.0/flink-shaded-jackson-2.7.9-5.0.jar:/Users/huangqingshi/.m2/repository/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar:/Users/huangqingshi/.m2/repository/org/javassist/javassist/3.19.0-GA/javassist-3.19.0-GA.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/scala-library/2.11.12/scala-library-2.11.12.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-actor_2.11/2.4.20/akka-actor_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/com/typesafe/config/1.3.0/config-1.3.0.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/modules/scala-java8-compat_2.11/0.7.0/scala-java8-compat_2.11-0.7.0.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-stream_2.11/2.4.20/akka-stream_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/org/reactivestreams/reactive-streams/1.0.0/reactive-streams-1.0.0.jar:/Users/huangqingshi/.m2/repository/com/typesafe/ssl-config-core_2.11/0.2.1/ssl-config-core_2.11-0.2.1.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/modules/scala-parser-combinators_2.11/1.0.4/scala-parser-combinators_2.11-1.0.4.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-protobuf_2.11/2.4.20/akka-protobuf_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-slf4j_2.11/2.4.20/akka-slf4j_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/org/clapper/grizzled-slf4j_2.11/1.3.2/grizzled-slf4j_2.11-1.3.2.jar:/Users/huangqingshi/.m2/repository/com/github/scopt/scopt_2.11/3.5.0/scopt_2.11-3.5.0.jar:/Users/huangqingshi/.m2/repository/org/xerial/snappy/snappy-java/1.1.4/snappy-java-1.1.4.jar:/Users/huangqingshi/.m2/repository/com/twitter/chill_2.11/0.7.6/chill_2.11-0.7.6.jar:/Users/huangqingshi/.m2/repository/com/twitter/chill-java/0.7.6/chill-java-0.7.6.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-clients_2.11/1.7.2/flink-clients_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-optimizer_2.11/1.7.2/flink-optimizer_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-guava/18.0-5.0/flink-shaded-guava-18.0-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-0.10_2.11/1.7.2/flink-connector-kafka-0.10_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-0.9_2.11/1.7.2/flink-connector-kafka-0.9_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-base_2.11/1.7.2/flink-connector-kafka-base_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/kafka/kafka-clients/0.10.2.1/kafka-clients-0.10.2.1.jar:/Users/huangqingshi/.m2/repository/net/jpountz/lz4/lz4/1.3.0/lz4-1.3.0.jar:/Users/huangqingshi/.m2/repository/org/slf4j/slf4j-log4j12/1.7.7/slf4j-log4j12-1.7.7.jar:/Users/huangqingshi/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/Users/huangqingshi/.m2/repository/com/alibaba/fastjson/1.2.62/fastjson-1.2.62.jar:/Users/huangqingshi/.m2/repository/com/google/guava/guava/28.1-jre/guava-28.1-jre.jar:/Users/huangqingshi/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/Users/huangqingshi/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/Users/huangqingshi/.m2/repository/org/checkerframework/checker-qual/2.8.1/checker-qual-2.8.1.jar:/Users/huangqingshi/.m2/repository/com/google/errorprone/error_prone_annotations/2.3.2/error_prone_annotations-2.3.2.jar:/Users/huangqingshi/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/Users/huangqingshi/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.18/animal-sniffer-annotations-1.18.jar:/Users/huangqingshi/.m2/repository/redis/clients/jedis/3.1.0/jedis-3.1.0.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-pool2/2.6.2/commons-pool2-2.6.2.jar:/Users/huangqingshi/.m2/repository/mysql/mysql-connector-java/8.0.16/mysql-connector-java-8.0.16.jar:/Users/huangqingshi/.m2/repository/com/google/protobuf/protobuf-java/3.6.1/protobuf-java-3.6.1.jar:/Users/huangqingshi/.m2/repository/com/alibaba/druid/1.1.20/druid-1.1.20&lt;span&gt;.jar oom.StackOOM
Exception in thread &lt;/span&gt;&quot;main&quot; java.lang.OutOfMemoryError: unable to create &lt;span&gt;new&lt;/span&gt; &lt;span&gt;native&lt;/span&gt;&lt;span&gt; thread
    at java.lang.Thread.start0(Native Method)
    at java.lang.Thread.start(Thread.java:&lt;/span&gt;717&lt;span&gt;)
    at oom.StackOOM.infiniteRun(StackOOM.java:&lt;/span&gt;24&lt;span&gt;)
    at oom.StackOOM.main(StackOOM.java:&lt;/span&gt;29&lt;span&gt;)

Process finished with exit code &lt;/span&gt;130 (interrupted by signal 2: SIGINT)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　以上这种情况是帧栈不够用了，如果出现了这种情况，我们需要了解什么地方创建了很多线程，线上程序需要用jstack命令，将当前线程的状态导出来放到文件里边，然后将文件上传到fastthread.io网站上进行分析。&lt;/p&gt;
&lt;p&gt;　　第三种情况，我们看一下栈溢出的另一种情况，这就是栈的StackOverFlow的情况。下面就是一个死循环递归调用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; oom;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; huangqingshi
 * @Date 2020-07-18
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StackOFE {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; stackOverFlowErrorMethod() {
        stackOverFlowErrorMethod();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        stackOverFlowErrorMethod();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　运行之后出现的错误如下，程序每次递归的时候，程序会把数据结果压入栈，包括里边的指针等，这个时候就需要帧栈大一些才能承受住更多的递归调用。通过-Xss进行设置，上边的例子需要设置小一些，以分配更多的帧栈，这次是一个帧栈需要记录程序数据，所以需要更大的值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/bin/java -Xss2m -Dfile.encoding=UTF-8 -classpath /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/tools.jar:/Users/huangqingshi/Downloads/flink-project/target/classes:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-java/1.7.2/flink-java-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-core/1.7.2/flink-core-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-annotations/1.7.2/flink-annotations-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-metrics-core/1.7.2/flink-metrics-core-1.7.2.jar:/Users/huangqingshi/.m2/repository/com/esotericsoftware/kryo/kryo/2.24.0/kryo-2.24.0.jar:/Users/huangqingshi/.m2/repository/com/esotericsoftware/minlog/minlog/1.2/minlog-1.2.jar:/Users/huangqingshi/.m2/repository/org/objenesis/objenesis/2.1/objenesis-2.1.jar:/Users/huangqingshi/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-compress/1.18/commons-compress-1.18.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-asm/5.0.4-5.0/flink-shaded-asm-5.0.4-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-lang3/3.3.2/commons-lang3-3.3.2.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-math3/3.5/commons-math3-3.5.jar:/Users/huangqingshi/.m2/repository/org/slf4j/slf4j-api/1.7.15/slf4j-api-1.7.15.jar:/Users/huangqingshi/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/force-shading/1.7.2/force-shading-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-streaming-java_2.11/1.7.2/flink-streaming-java_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-runtime_2.11/1.7.2/flink-runtime_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-queryable-state-client-java_2.11/1.7.2/flink-queryable-state-client-java_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-hadoop-fs/1.7.2/flink-hadoop-fs-1.7.2.jar:/Users/huangqingshi/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-netty/4.1.24.Final-5.0/flink-shaded-netty-4.1.24.Final-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-jackson/2.7.9-5.0/flink-shaded-jackson-2.7.9-5.0.jar:/Users/huangqingshi/.m2/repository/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar:/Users/huangqingshi/.m2/repository/org/javassist/javassist/3.19.0-GA/javassist-3.19.0-GA.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/scala-library/2.11.12/scala-library-2.11.12.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-actor_2.11/2.4.20/akka-actor_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/com/typesafe/config/1.3.0/config-1.3.0.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/modules/scala-java8-compat_2.11/0.7.0/scala-java8-compat_2.11-0.7.0.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-stream_2.11/2.4.20/akka-stream_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/org/reactivestreams/reactive-streams/1.0.0/reactive-streams-1.0.0.jar:/Users/huangqingshi/.m2/repository/com/typesafe/ssl-config-core_2.11/0.2.1/ssl-config-core_2.11-0.2.1.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/modules/scala-parser-combinators_2.11/1.0.4/scala-parser-combinators_2.11-1.0.4.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-protobuf_2.11/2.4.20/akka-protobuf_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-slf4j_2.11/2.4.20/akka-slf4j_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/org/clapper/grizzled-slf4j_2.11/1.3.2/grizzled-slf4j_2.11-1.3.2.jar:/Users/huangqingshi/.m2/repository/com/github/scopt/scopt_2.11/3.5.0/scopt_2.11-3.5.0.jar:/Users/huangqingshi/.m2/repository/org/xerial/snappy/snappy-java/1.1.4/snappy-java-1.1.4.jar:/Users/huangqingshi/.m2/repository/com/twitter/chill_2.11/0.7.6/chill_2.11-0.7.6.jar:/Users/huangqingshi/.m2/repository/com/twitter/chill-java/0.7.6/chill-java-0.7.6.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-clients_2.11/1.7.2/flink-clients_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-optimizer_2.11/1.7.2/flink-optimizer_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-guava/18.0-5.0/flink-shaded-guava-18.0-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-0.10_2.11/1.7.2/flink-connector-kafka-0.10_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-0.9_2.11/1.7.2/flink-connector-kafka-0.9_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-base_2.11/1.7.2/flink-connector-kafka-base_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/kafka/kafka-clients/0.10.2.1/kafka-clients-0.10.2.1.jar:/Users/huangqingshi/.m2/repository/net/jpountz/lz4/lz4/1.3.0/lz4-1.3.0.jar:/Users/huangqingshi/.m2/repository/org/slf4j/slf4j-log4j12/1.7.7/slf4j-log4j12-1.7.7.jar:/Users/huangqingshi/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/Users/huangqingshi/.m2/repository/com/alibaba/fastjson/1.2.62/fastjson-1.2.62.jar:/Users/huangqingshi/.m2/repository/com/google/guava/guava/28.1-jre/guava-28.1-jre.jar:/Users/huangqingshi/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/Users/huangqingshi/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/Users/huangqingshi/.m2/repository/org/checkerframework/checker-qual/2.8.1/checker-qual-2.8.1.jar:/Users/huangqingshi/.m2/repository/com/google/errorprone/error_prone_annotations/2.3.2/error_prone_annotations-2.3.2.jar:/Users/huangqingshi/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/Users/huangqingshi/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.18/animal-sniffer-annotations-1.18.jar:/Users/huangqingshi/.m2/repository/redis/clients/jedis/3.1.0/jedis-3.1.0.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-pool2/2.6.2/commons-pool2-2.6.2.jar:/Users/huangqingshi/.m2/repository/mysql/mysql-connector-java/8.0.16/mysql-connector-java-8.0.16.jar:/Users/huangqingshi/.m2/repository/com/google/protobuf/protobuf-java/3.6.1/protobuf-java-3.6.1.jar:/Users/huangqingshi/.m2/repository/com/alibaba/druid/1.1.20/druid-1.1.20&lt;span&gt;.jar oom.StackOFE
Exception in thread &lt;/span&gt;&quot;main&quot;&lt;span&gt; java.lang.StackOverflowError
    at oom.StackOFE.stackOverFlowErrorMethod(StackOFE.java:&lt;/span&gt;10&lt;span&gt;)
    at oom.StackOFE.stackOverFlowErrorMethod(StackOFE.java:&lt;/span&gt;10&lt;span&gt;)
    at oom.StackOFE.stackOverFlowErrorMethod(StackOFE.java:&lt;/span&gt;10&lt;span&gt;)
    at oom.StackOFE.stackOverFlowErrorMethod(StackOFE.java:&lt;/span&gt;10&lt;span&gt;)
    at oom.StackOFE.stackOverFlowErrorMethod(StackOFE.java:&lt;/span&gt;10&lt;span&gt;)
    at oom.StackOFE.stackOverFlowErrorMethod(StackOFE.java:&lt;/span&gt;10)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　遇到上面的情况下，那么就需要通过jstack将线程数据导到文件进行分析。找到递归的点，如果程序就是需要递归的次数的话，那么这个时候就需要增大帧栈的大小以适应程序。&lt;/p&gt;
&lt;p&gt;　　第四种情况，元数据区域溢出，元数据区域也成为方法区，存储着类的相关信息，常量池，方法描述符，字段描述符，运行时产生大量的类就会造成这个区域的溢出。我们运行的时候指定一下元数据区域的大小，设置到idea的VM options里边：-XX:MetaspaceSize=10M -XX:MaxMetaspaceSize=30M。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; oom;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; net.sf.cglib.proxy.Enhancer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; net.sf.cglib.proxy.MethodInterceptor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; net.sf.cglib.proxy.MethodProxy;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Method;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; huangqingshi
 * @Date 2020-07-18
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MetaspaceOOM {

    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OOMObject{}

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
            Enhancer enhancer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Enhancer();
            enhancer.setSuperclass(OOMObject.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
            enhancer.setUseCache(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            enhancer.setCallback(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MethodInterceptor() {
                &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object intercept(Object obj, Method method,
                                        Object[] args, MethodProxy proxy) &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; proxy.invokeSuper(obj, args);
                }
            });
            enhancer.create();
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行的结果如下，元数据信息溢出了。这种情况产生的原因有： 通过CBLIG大量生成类，导致Meta信息满了；JDK7的时候使用String.intern()不当，会产生大量常量数据；加载大量的jsp以及动态生成jsp文件。我们需要调整元数据空间的大小，如果调大了之后还出现了这种异常，我们需要分析哪里出现的溢出并fix掉。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/bin/java -XX:MetaspaceSize=10M -XX:MaxMetaspaceSize=30M -Dfile.encoding=UTF-8 -classpath /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/tools.jar:/Users/huangqingshi/Downloads/flink-project/target/classes:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-java/1.7.2/flink-java-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-core/1.7.2/flink-core-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-annotations/1.7.2/flink-annotations-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-metrics-core/1.7.2/flink-metrics-core-1.7.2.jar:/Users/huangqingshi/.m2/repository/com/esotericsoftware/kryo/kryo/2.24.0/kryo-2.24.0.jar:/Users/huangqingshi/.m2/repository/com/esotericsoftware/minlog/minlog/1.2/minlog-1.2.jar:/Users/huangqingshi/.m2/repository/org/objenesis/objenesis/2.1/objenesis-2.1.jar:/Users/huangqingshi/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-compress/1.18/commons-compress-1.18.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-asm/5.0.4-5.0/flink-shaded-asm-5.0.4-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-lang3/3.3.2/commons-lang3-3.3.2.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-math3/3.5/commons-math3-3.5.jar:/Users/huangqingshi/.m2/repository/org/slf4j/slf4j-api/1.7.15/slf4j-api-1.7.15.jar:/Users/huangqingshi/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/force-shading/1.7.2/force-shading-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-streaming-java_2.11/1.7.2/flink-streaming-java_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-runtime_2.11/1.7.2/flink-runtime_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-queryable-state-client-java_2.11/1.7.2/flink-queryable-state-client-java_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-hadoop-fs/1.7.2/flink-hadoop-fs-1.7.2.jar:/Users/huangqingshi/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-netty/4.1.24.Final-5.0/flink-shaded-netty-4.1.24.Final-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-jackson/2.7.9-5.0/flink-shaded-jackson-2.7.9-5.0.jar:/Users/huangqingshi/.m2/repository/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar:/Users/huangqingshi/.m2/repository/org/javassist/javassist/3.19.0-GA/javassist-3.19.0-GA.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/scala-library/2.11.12/scala-library-2.11.12.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-actor_2.11/2.4.20/akka-actor_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/com/typesafe/config/1.3.0/config-1.3.0.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/modules/scala-java8-compat_2.11/0.7.0/scala-java8-compat_2.11-0.7.0.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-stream_2.11/2.4.20/akka-stream_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/org/reactivestreams/reactive-streams/1.0.0/reactive-streams-1.0.0.jar:/Users/huangqingshi/.m2/repository/com/typesafe/ssl-config-core_2.11/0.2.1/ssl-config-core_2.11-0.2.1.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/modules/scala-parser-combinators_2.11/1.0.4/scala-parser-combinators_2.11-1.0.4.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-protobuf_2.11/2.4.20/akka-protobuf_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-slf4j_2.11/2.4.20/akka-slf4j_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/org/clapper/grizzled-slf4j_2.11/1.3.2/grizzled-slf4j_2.11-1.3.2.jar:/Users/huangqingshi/.m2/repository/com/github/scopt/scopt_2.11/3.5.0/scopt_2.11-3.5.0.jar:/Users/huangqingshi/.m2/repository/org/xerial/snappy/snappy-java/1.1.4/snappy-java-1.1.4.jar:/Users/huangqingshi/.m2/repository/com/twitter/chill_2.11/0.7.6/chill_2.11-0.7.6.jar:/Users/huangqingshi/.m2/repository/com/twitter/chill-java/0.7.6/chill-java-0.7.6.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-clients_2.11/1.7.2/flink-clients_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-optimizer_2.11/1.7.2/flink-optimizer_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-guava/18.0-5.0/flink-shaded-guava-18.0-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-0.10_2.11/1.7.2/flink-connector-kafka-0.10_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-0.9_2.11/1.7.2/flink-connector-kafka-0.9_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-base_2.11/1.7.2/flink-connector-kafka-base_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/kafka/kafka-clients/0.10.2.1/kafka-clients-0.10.2.1.jar:/Users/huangqingshi/.m2/repository/net/jpountz/lz4/lz4/1.3.0/lz4-1.3.0.jar:/Users/huangqingshi/.m2/repository/org/slf4j/slf4j-log4j12/1.7.7/slf4j-log4j12-1.7.7.jar:/Users/huangqingshi/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/Users/huangqingshi/.m2/repository/com/alibaba/fastjson/1.2.62/fastjson-1.2.62.jar:/Users/huangqingshi/.m2/repository/com/google/guava/guava/28.1-jre/guava-28.1-jre.jar:/Users/huangqingshi/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/Users/huangqingshi/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/Users/huangqingshi/.m2/repository/org/checkerframework/checker-qual/2.8.1/checker-qual-2.8.1.jar:/Users/huangqingshi/.m2/repository/com/google/errorprone/error_prone_annotations/2.3.2/error_prone_annotations-2.3.2.jar:/Users/huangqingshi/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/Users/huangqingshi/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.18/animal-sniffer-annotations-1.18.jar:/Users/huangqingshi/.m2/repository/redis/clients/jedis/3.1.0/jedis-3.1.0.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-pool2/2.6.2/commons-pool2-2.6.2.jar:/Users/huangqingshi/.m2/repository/mysql/mysql-connector-java/8.0.16/mysql-connector-java-8.0.16.jar:/Users/huangqingshi/.m2/repository/com/google/protobuf/protobuf-java/3.6.1/protobuf-java-3.6.1.jar:/Users/huangqingshi/.m2/repository/com/alibaba/druid/1.1.20/druid-1.1.20.jar:/Users/huangqingshi/.m2/repository/cglib/cglib/3.2.5/cglib-3.2.5.jar:/Users/huangqingshi/.m2/repository/org/ow2/asm/asm/5.2/asm-5.2.jar:/Users/huangqingshi/.m2/repository/org/apache/ant/ant/1.9.6/ant-1.9.6.jar:/Users/huangqingshi/.m2/repository/org/apache/ant/ant-launcher/1.9.6/ant-launcher-1.9.6&lt;span&gt;.jar oom.MetaspaceOOM
Exception in thread &lt;/span&gt;&quot;main&quot;&lt;span&gt; java.lang.OutOfMemoryError: Metaspace
    at net.sf.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:&lt;/span&gt;345&lt;span&gt;)
    at net.sf.cglib.proxy.Enhancer.generate(Enhancer.java:&lt;/span&gt;492&lt;span&gt;)
    at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:&lt;/span&gt;114&lt;span&gt;)
    at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:&lt;/span&gt;291&lt;span&gt;)
    at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:&lt;/span&gt;480&lt;span&gt;)
    at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:&lt;/span&gt;305&lt;span&gt;)
    at oom.MetaspaceOOM.main(MetaspaceOOM.java:&lt;/span&gt;28&lt;span&gt;)

Process finished with exit code &lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第五种情况，直接内存溢出，我们除了使用堆内存外，我们还可能用直接内存，即堆外内存。NIO为了提高性能，避免在Java Heap和native Heap中切换，所以使用直接内存，默认情况下，直接内存的大小和对内存大小一致。堆外内存不受JVM的限制，但是受制于机器整体内存的大小限制。如下代码设置堆最大内存为128m，直接内存为100m，然后我们每次分配1M放到list里边。　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
-Xmx128m -XX:MaxDirectMemorySize=&lt;span&gt;100M

&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt; oom;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.nio.ByteBuffer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; huangqingshi
 * @Date 2020-07-18
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DirectBufferOOM {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; _1M = 1024 * 1024 * 1&lt;span&gt;;
        List&lt;/span&gt;&amp;lt;ByteBuffer&amp;gt; buffers = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; count = 1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
            ByteBuffer byteBuffer &lt;/span&gt;=&lt;span&gt; ByteBuffer.allocateDirect(_1M);
            buffers.add(byteBuffer);
            System.out.println(count&lt;/span&gt;++&lt;span&gt;);
        }

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个时候，当输出100次的时候，下次再分配的时候会报OOM-Direct buffer memory。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/bin/java -Xmx128m -XX:MaxDirectMemorySize=100M -Dfile.encoding=UTF-8 -classpath /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/tools.jar:/Users/huangqingshi/Downloads/flink-project/target/classes:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-java/1.7.2/flink-java-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-core/1.7.2/flink-core-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-annotations/1.7.2/flink-annotations-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-metrics-core/1.7.2/flink-metrics-core-1.7.2.jar:/Users/huangqingshi/.m2/repository/com/esotericsoftware/kryo/kryo/2.24.0/kryo-2.24.0.jar:/Users/huangqingshi/.m2/repository/com/esotericsoftware/minlog/minlog/1.2/minlog-1.2.jar:/Users/huangqingshi/.m2/repository/org/objenesis/objenesis/2.1/objenesis-2.1.jar:/Users/huangqingshi/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-compress/1.18/commons-compress-1.18.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-asm/5.0.4-5.0/flink-shaded-asm-5.0.4-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-lang3/3.3.2/commons-lang3-3.3.2.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-math3/3.5/commons-math3-3.5.jar:/Users/huangqingshi/.m2/repository/org/slf4j/slf4j-api/1.7.15/slf4j-api-1.7.15.jar:/Users/huangqingshi/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/force-shading/1.7.2/force-shading-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-streaming-java_2.11/1.7.2/flink-streaming-java_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-runtime_2.11/1.7.2/flink-runtime_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-queryable-state-client-java_2.11/1.7.2/flink-queryable-state-client-java_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-hadoop-fs/1.7.2/flink-hadoop-fs-1.7.2.jar:/Users/huangqingshi/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-netty/4.1.24.Final-5.0/flink-shaded-netty-4.1.24.Final-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-jackson/2.7.9-5.0/flink-shaded-jackson-2.7.9-5.0.jar:/Users/huangqingshi/.m2/repository/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar:/Users/huangqingshi/.m2/repository/org/javassist/javassist/3.19.0-GA/javassist-3.19.0-GA.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/scala-library/2.11.12/scala-library-2.11.12.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-actor_2.11/2.4.20/akka-actor_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/com/typesafe/config/1.3.0/config-1.3.0.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/modules/scala-java8-compat_2.11/0.7.0/scala-java8-compat_2.11-0.7.0.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-stream_2.11/2.4.20/akka-stream_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/org/reactivestreams/reactive-streams/1.0.0/reactive-streams-1.0.0.jar:/Users/huangqingshi/.m2/repository/com/typesafe/ssl-config-core_2.11/0.2.1/ssl-config-core_2.11-0.2.1.jar:/Users/huangqingshi/.m2/repository/org/scala-lang/modules/scala-parser-combinators_2.11/1.0.4/scala-parser-combinators_2.11-1.0.4.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-protobuf_2.11/2.4.20/akka-protobuf_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/com/typesafe/akka/akka-slf4j_2.11/2.4.20/akka-slf4j_2.11-2.4.20.jar:/Users/huangqingshi/.m2/repository/org/clapper/grizzled-slf4j_2.11/1.3.2/grizzled-slf4j_2.11-1.3.2.jar:/Users/huangqingshi/.m2/repository/com/github/scopt/scopt_2.11/3.5.0/scopt_2.11-3.5.0.jar:/Users/huangqingshi/.m2/repository/org/xerial/snappy/snappy-java/1.1.4/snappy-java-1.1.4.jar:/Users/huangqingshi/.m2/repository/com/twitter/chill_2.11/0.7.6/chill_2.11-0.7.6.jar:/Users/huangqingshi/.m2/repository/com/twitter/chill-java/0.7.6/chill-java-0.7.6.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-clients_2.11/1.7.2/flink-clients_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-optimizer_2.11/1.7.2/flink-optimizer_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-shaded-guava/18.0-5.0/flink-shaded-guava-18.0-5.0.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-0.10_2.11/1.7.2/flink-connector-kafka-0.10_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-0.9_2.11/1.7.2/flink-connector-kafka-0.9_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/flink/flink-connector-kafka-base_2.11/1.7.2/flink-connector-kafka-base_2.11-1.7.2.jar:/Users/huangqingshi/.m2/repository/org/apache/kafka/kafka-clients/0.10.2.1/kafka-clients-0.10.2.1.jar:/Users/huangqingshi/.m2/repository/net/jpountz/lz4/lz4/1.3.0/lz4-1.3.0.jar:/Users/huangqingshi/.m2/repository/org/slf4j/slf4j-log4j12/1.7.7/slf4j-log4j12-1.7.7.jar:/Users/huangqingshi/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/Users/huangqingshi/.m2/repository/com/alibaba/fastjson/1.2.62/fastjson-1.2.62.jar:/Users/huangqingshi/.m2/repository/com/google/guava/guava/28.1-jre/guava-28.1-jre.jar:/Users/huangqingshi/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/Users/huangqingshi/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/Users/huangqingshi/.m2/repository/org/checkerframework/checker-qual/2.8.1/checker-qual-2.8.1.jar:/Users/huangqingshi/.m2/repository/com/google/errorprone/error_prone_annotations/2.3.2/error_prone_annotations-2.3.2.jar:/Users/huangqingshi/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/Users/huangqingshi/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.18/animal-sniffer-annotations-1.18.jar:/Users/huangqingshi/.m2/repository/redis/clients/jedis/3.1.0/jedis-3.1.0.jar:/Users/huangqingshi/.m2/repository/org/apache/commons/commons-pool2/2.6.2/commons-pool2-2.6.2.jar:/Users/huangqingshi/.m2/repository/mysql/mysql-connector-java/8.0.16/mysql-connector-java-8.0.16.jar:/Users/huangqingshi/.m2/repository/com/google/protobuf/protobuf-java/3.6.1/protobuf-java-3.6.1.jar:/Users/huangqingshi/.m2/repository/com/alibaba/druid/1.1.20/druid-1.1.20.jar:/Users/huangqingshi/.m2/repository/cglib/cglib/3.2.5/cglib-3.2.5.jar:/Users/huangqingshi/.m2/repository/org/ow2/asm/asm/5.2/asm-5.2.jar:/Users/huangqingshi/.m2/repository/org/apache/ant/ant/1.9.6/ant-1.9.6.jar:/Users/huangqingshi/.m2/repository/org/apache/ant/ant-launcher/1.9.6/ant-launcher-1.9.6&lt;span&gt;.jar oom.DirectBufferOOM
&lt;/span&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100&lt;span&gt;
Exception in thread &lt;/span&gt;&quot;main&quot;&lt;span&gt; java.lang.OutOfMemoryError: Direct buffer memory
    at java.nio.Bits.reserveMemory(Bits.java:&lt;/span&gt;694&lt;span&gt;)
    at java.nio.DirectByteBuffer.&lt;/span&gt;&amp;lt;init&amp;gt;(DirectByteBuffer.java:123&lt;span&gt;)
    at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:&lt;/span&gt;311&lt;span&gt;)
    at oom.DirectBufferOOM.main(DirectBufferOOM.java:&lt;/span&gt;18&lt;span&gt;)

Process finished with exit code &lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这种情况是我们使用直接内存造成溢出，这个时候我们需要检查一下程序里边是否使用的NIO及NIO，比如Netty，里边的直接内存的配置。&lt;/p&gt;
&lt;p&gt;　　第6种情况，JDK1.6之后新增了一个错误类型，如果堆内存太小的时候会报这个错误。如果98%的GC的时候回收不到2%的时候会报这个错误，也就是最小最大内存出现了问题的时候会报这个错误。如果代码配置了最小最大堆内存都为10m。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
-Xmx10m -&lt;span&gt;Xms10m

&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt; oom;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.ExecutorService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.Executors;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; huangqingshi
 * @Date 2020-07-18
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GCOverheadOOM {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        ExecutorService executor &lt;/span&gt;= Executors.newFixedThreadPool(5&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; Integer.MAX_VALUE; i++&lt;span&gt;) {
            executor.execute(() &lt;/span&gt;-&amp;gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    Thread.sleep(&lt;/span&gt;10000&lt;span&gt;);
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;do nothing&lt;/span&gt;
&lt;span&gt;                }
            });
        }

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个我们创建了一个线程池，如果线程池执行的时候如果核心线程处理不过来的时候会把数据放到LinkedBlockingQueue里边，也就是堆内存当中。这个时候我们需要检查-Xms -Xmx最小最大堆配置是否合理。再一个dump出现当前内存来分析一下是否使用了大量的循环或使用大量内存代码。&lt;/p&gt;
&lt;p&gt;　　以上就是我们经常遇到的情况，我们需要针对出现的不行情况进行分析和处理。&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;　　&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 18 Jul 2020 13:41:00 +0000</pubDate>
<dc:creator>黄青石</dc:creator>
<og:description>周末了，觉得我还有很多作业没有写，针对目前大家对OOM的类型不太熟悉，那么我们来总结一下各种OOM出现的情况以及解决方法。 我们把各种OOM的情况列出来，然后逐一进行代码编写复现和提供解决方法。 1.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/huangqingshi/p/13336648.html</dc:identifier>
</item>
</channel>
</rss>