<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>.NET Core 3.0-preview3 发布 - 张善友</title>
<link>http://www.cnblogs.com/shanyou/p/10493654.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shanyou/p/10493654.html</guid>
<description>&lt;p&gt;.NET Core 3.0 Preview 3已经发布，框架和ASP.NET Core有许多有趣的更新。这是最重要的更新列表。 下载地址 :&lt;a href=&quot;https://aka.ms/netcore3download&quot;&gt;https://aka.ms/netcore3download&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/&quot;&gt;.NET Core 3.0的更新&lt;/a&gt;：&lt;/p&gt;
&lt;ul readability=&quot;4&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;C＃中对索引和范围的更多支持&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;支持&lt;/strong&gt;.NET Standard 2.1。&lt;/strong&gt;以.NET Standard项目文件为目标，并将netstandard2.1指定为目标框架。完整的.NET Framework不支持.NET Standard 2.1。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;F＃4.6和dotnet fsi命令。&lt;/strong&gt;可以使用F＃4.6和dotnet fsi命令的预览。FSI代表F＃互动。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;AssemblyDependencyResolver和resolver事件。&lt;/strong&gt;从给定路径加载依赖程序集（之前不可能），解析程序事件可帮助我们更好地处理动态加载的本机依赖项。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Windows Forms应用程序的高DPI。&lt;/strong&gt;最后，微软将Windows Forms应用程序推向了当今时代。96DPI不再适用，并且可以构建高DP Windows窗体应用程序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-0-preview-3/&quot;&gt;ASP.NET Core 3.0的更新&lt;/a&gt;：&lt;/p&gt;
&lt;ul readability=&quot;9&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Razor组件的改进。&lt;/strong&gt;现在2个项目合并成单个项目模板，Razor组件支持端点路由和预渲染，Razor组件可以托管在Razor类库中。还改进了事件处理和表单和验证支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;运行时编译。&lt;/strong&gt;它在ASP.NET Core 3.0模板中被禁用，但现在可以通过向项目添加特殊的NuGet包来打开它。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Worker Service&lt;/strong&gt; 模板。&lt;/strong&gt;需要编写Windows服务还是Linux守护进程？现在我们有了&lt;strong&gt;Worker Service&lt;/strong&gt; 模板。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;gRPC模板。&lt;/strong&gt;与谷歌一起构建的gRPC是一种流行的远程过程调用（RPC）框架。此版本的ASP.NET Core在ASP.NET Core上引入了第一等的gRPC支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Angular模板使用Angular 7.&lt;/strong&gt; Angular SPA模板现在使用Angular 7，在第一次稳定释放之前，它将被Angular 8替换。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;SPA-s的身份验证。&lt;/strong&gt;Microsoft通过此预览为单页应用程序添加了现成的身份验证支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;SignalR与端点路由集成。&lt;/strong&gt;小变化 - 现在使用端点路由定义SingalR路由。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;SignalR Java客户端支持长轮询。&lt;/strong&gt;即使在不支持或不允许WebSocket的环境中，SignalR Java客户端现在也可以使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于Entity Framework Core 3.0的消息并不多，但我们可以期待.NET Core的下一个预览版本的更新。&lt;/p&gt;
</description>
<pubDate>Thu, 07 Mar 2019 23:47:00 +0000</pubDate>
<dc:creator>张善友</dc:creator>
<og:description>.NET Core 3.0 Preview 3已经发布，框架和ASP.NET Core有许多有趣的更新。这是最重要的更新列表。 下载地址 :https://aka.ms/netcore3downloa</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shanyou/p/10493654.html</dc:identifier>
</item>
<item>
<title>特征选择： 卡方检验、F 检验和互信息 - massquantity</title>
<link>http://www.cnblogs.com/massquantity/p/10486904.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/massquantity/p/10486904.html</guid>
<description>&lt;p&gt;特征选择是特征工程中的重要一环，其主要目的是从所有特征中选出相关特征 (&lt;em&gt;relevant feature&lt;/em&gt;)，或者说在不引起重要信息丢失的前提下去除掉无关特征 (&lt;em&gt;irrelevant feature&lt;/em&gt;) 和冗余特征 (&lt;em&gt;redundant feature&lt;/em&gt;)。进行特征选择的好处主要有以下几种：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;降低过拟合风险，提升模型效果&lt;/li&gt;
&lt;li&gt;提高训练速度，降低运算开销&lt;/li&gt;
&lt;li&gt;更少的特征通常意味着更好的可解释性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不同的模型对于无关特征的容忍度不同，下图来自&lt;a href=&quot;http://appliedpredictivemodeling.com/&quot;&gt;《 &lt;span&gt;&lt;em&gt;Applied Predictive Modeling&lt;/em&gt;&lt;/span&gt; 》&lt;/a&gt; (P489)，显示了逐渐增加无关特征后不同模型的RMSE的变化。树模型普遍表现较好，而神经网络因其模型的复杂性则很容易过拟合。Lasso 因其可以产生稀疏特征因而也有较好的表现。&lt;/p&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;特征选择的方法主要分为三大类：过滤式方法 (&lt;em&gt;Filter Methods&lt;/em&gt;)，包裹式方法 (&lt;em&gt;Wrapper Methods&lt;/em&gt;) 和嵌入式方法 (&lt;em&gt;Embedded Methods&lt;/em&gt;)。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;过滤式方法运用统计指标来为每个特征打分并筛选特征，其聚焦于数据本身的特点。其优点是计算快，不依赖于具体的模型，缺点是选择的统计指标不是为特定模型定制的，因而最后的准确率可能不高。而且因为进行的是单变量统计检验，没有考虑特征间的相互关系。&lt;/li&gt;
&lt;li&gt;包裹式方法使用模型来筛选特征，通过不断地增加或删除特征，在验证集上测试模型准确率，寻找最优的特征子集。包裹式方法因为有模型的直接参与，因而通常准确性较高，但是因为每变动一个特征都要重新训练模型，因而计算开销大，其另一个缺点是容易过拟合。&lt;/li&gt;
&lt;li&gt;嵌入式方法利用了模型本身的特性，将特征选择嵌入到模型的构建过程中。典型的如 Lasso 和树模型等。准确率较高，计算复杂度介于过滤式和包裹式方法之间，但缺点是只有部分模型有这个功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面这张图总结地更加全面，来自 &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.108.3429&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;《&lt;span&gt;&lt;em&gt;A review of feature selection techniques in bioinformatics&lt;/em&gt;&lt;/span&gt; 》&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;本文接下来主要考察过滤式方法中常用的几个方法：卡方检验、F 检验和互信息，并探讨它们用于特征选择的内在机理。&lt;/p&gt;

&lt;center&gt;

&lt;/center&gt;
&lt;hr/&gt;&lt;p&gt;既然特征选择的目的是去除无关特征，那么什么是无关特征？ 对于分类问题，在过滤式方法中一般假设与标签独立的特征为无关特征，而卡方检验恰好可以进行&lt;strong&gt;独立性检验&lt;/strong&gt;，所以其适用于特征选择。如果检验结果是某个特征与标签独立，则可以去除该特征。说到卡方检验自然会用到卡方分布，其定义如下：&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;设随机变量 &lt;span class=&quot;math inline&quot;&gt;\(x_1, x_2 ... x_n \,,\quad \text{i.i.d} \sim N(0,1)\)&lt;/span&gt; ，即独立同分布于标准正态分布，那么这 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个随机变量的平方和：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ X = \sum\limits_{i=1}^n x_i^2 \]&lt;/span&gt;&lt;br/&gt;构成一个新的随机变量，其服从自由度为 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 的卡方分布 ( &lt;span class=&quot;math inline&quot;&gt;\(\chi^2\)&lt;/span&gt; 分布) ，记为 &lt;span class=&quot;math inline&quot;&gt;\(X \sim \chi^2_n\)&lt;/span&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下图显示不同自由度下卡方分布的概率密度曲线，可以看到自由度越大，卡方分布就越接近正态分布：&lt;/p&gt;
&lt;center&gt;

&lt;/center&gt;

&lt;p&gt;下面举个例子看卡方检验的一般流程：&lt;/p&gt;
&lt;p&gt;假设我想检验一个男人有特殊着装癖好与其变态与否的关系，如果检验的结果是二者不独立，那下次在街上看见女装大佬我可能就要绕着走了。。。 所以该独立性检验的假设如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;center&gt;零假设 ($H_0$)：着装偏好与变态倾向独立&lt;/center&gt;
&lt;center&gt;备选假设 ($H_1$) ：着装偏好与变态倾向不独立&lt;/center&gt;
&lt;/blockquote&gt;

&lt;p&gt;卡方检验一般需要先建立列联表，表中每个格子是观察频数，表示实际观测到的同时满足两个条件的数量：&lt;/p&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;同时需要计算每个格子的期望频数，因为零假设是两个变量独立，因此依独立性的定义：&lt;span class=&quot;math inline&quot;&gt;\(P(A,B) = P(A)\, P(B)\)&lt;/span&gt;，于是上表中每个格子的期望频数为 &lt;span class=&quot;math inline&quot;&gt;\(N \times P(A,B) = N \times P(A) \times P(B)\)&lt;/span&gt; ，其中 &lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt; 为总数量，那么第一个格子的期望频数为 &lt;span class=&quot;math inline&quot;&gt;\(3100 \times \frac{750}{3100} \times \frac{500}{3100} = 121\)&lt;/span&gt; 。因此总体期望频数表为：&lt;/p&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;有了这两个列联表后，就可以计算检验统计量 &lt;span class=&quot;math inline&quot;&gt;\(\chi^2\)&lt;/span&gt; ( &lt;span class=&quot;math inline&quot;&gt;\(\chi^2\)&lt;/span&gt; 表示卡方值) ，&lt;span class=&quot;math inline&quot;&gt;\(\chi^2\)&lt;/span&gt; 越大，表示观测值和理论值相差越大，当 &lt;span class=&quot;math inline&quot;&gt;\(\chi^2\)&lt;/span&gt; 大于某一个临界值时，就能获得统计显著性的结论：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \chi^2 = \sum\frac{(观测频数 - 期望频数)^2}{期望频数}= \sum_{i=1}^{r} \sum_{j=1}^{c} {(O_{i,j} - E_{i,j})^2 \over E_{i,j}} \tag{1} \]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;其中 &lt;span class=&quot;math inline&quot;&gt;\(O_{ij}\)&lt;/span&gt; 为观测频数表中单元格的数值，&lt;span class=&quot;math inline&quot;&gt;\(E_{ij}\)&lt;/span&gt; 为期望频数表中单元格的数值，&lt;span class=&quot;math inline&quot;&gt;\(r\)&lt;/span&gt; 为行数，&lt;span class=&quot;math inline&quot;&gt;\(c\)&lt;/span&gt; 为列数，自由度 &lt;span class=&quot;math inline&quot;&gt;\(df\)&lt;/span&gt; 为 &lt;span class=&quot;math inline&quot;&gt;\((2-1)\times(3-1) = 2\)&lt;/span&gt; ，&lt;span class=&quot;math inline&quot;&gt;\(\chi^2\)&lt;/span&gt; 服从卡方分布，则查卡方分布表：&lt;/p&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;得 &lt;span class=&quot;math inline&quot;&gt;\(P(\chi^2 &amp;gt; 13.82) &amp;lt; 0.001\)&lt;/span&gt; ，而实际计算出的 &lt;span class=&quot;math inline&quot;&gt;\(\chi^2\)&lt;/span&gt; 为 26.99，显著性很高，意味着零假设成立的情况下样本结果出现的概率小于 &lt;span class=&quot;math inline&quot;&gt;\(0.1\%\)&lt;/span&gt;，因而可以拒绝零假设，接受备选假设。这意味着男性的特殊着装偏好与变态倾向具有相关性。当然这里得说明两点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;本数据纯属虚构。&lt;/li&gt;
&lt;li&gt;相关性不代表因果性，完全可能是第三个变量 (如：国籍) 同时导致了女装和变态，致使这两个变量产生了某种相关性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再回到特征选择的问题，从严格的统计学角度来看，使用卡方检验进行特征选择可能会产生一些问题。假设选择的显著性水平 &lt;span class=&quot;math inline&quot;&gt;\(\alpha\)&lt;/span&gt; 为 0.05，这说明犯&lt;a href=&quot;https://en.wikipedia.org/wiki/Type_I_and_type_II_errors&quot;&gt;&lt;span&gt;第一类错误&lt;/span&gt;&lt;/a&gt; (&lt;span class=&quot;math inline&quot;&gt;\(\text{type} \, \text{I} \, \text{error}\)&lt;/span&gt;，两个变量实际独立却被判为相关) 的概率为 5%，若进行了 1000 次卡方检验，则平均有 &lt;span class=&quot;math inline&quot;&gt;\(1000 \times 0.05 = 50\)&lt;/span&gt; 次会选择与标签不相关的特征。机器学习问题中动辄就有几千至上百万的特征，那么这里面漏过的特征可能会相当多。不过好在搞机器学习并不是在搞统计，我们实际上比较关心的是特征的相对重要性。依上面的卡方分布表，检验统计量 &lt;span class=&quot;math inline&quot;&gt;\(\chi^2\)&lt;/span&gt;越大，越有信心拒绝零假设，接受两个变量不独立 的事实，因而可以按每个特征 &lt;span class=&quot;math inline&quot;&gt;\(\chi^2\)&lt;/span&gt; 值的大小进行排序，去除 &lt;span class=&quot;math inline&quot;&gt;\(\chi^2\)&lt;/span&gt; 值小的特征。&lt;/p&gt;

&lt;p&gt;以上就是卡方检验用于特征选择的一般流程，而我看到在大部分资料中举的例子都是离散型特征的，如下图：&lt;/p&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;这其中有几个值得注意的点：&lt;/p&gt;
&lt;p&gt;(1) 上面举的卡方检验例子是判别 &lt;code&gt;着装癖好&lt;/code&gt;与 &lt;code&gt;变态倾向&lt;/code&gt; 具有相关性，然而 &lt;code&gt;着装癖好&lt;/code&gt; 是离散型特征，而大部分机器学习模型是无法直接处理离散型特征的，如果按通常的作法进行 one-hot 转换 (&lt;strong&gt;如下图&lt;/strong&gt;)，就不能确定其中单个的特征 (如 &lt;code&gt;着装癖好_女装&lt;/code&gt; ) 是否仍与 &lt;code&gt;变态倾向&lt;/code&gt; 有相关性。&lt;/p&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;(2) 上面这一点也可以反过来看，假设卡方检验的结果是 &lt;code&gt;着装癖好&lt;/code&gt;与 &lt;code&gt;变态倾向&lt;/code&gt; 独立，也并不代表单个的特征 (如&lt;code&gt;着装癖好_不定装&lt;/code&gt; )与&lt;code&gt;变态倾向&lt;/code&gt; 独立。所以综合这两点，应该先将离散型特征进行转换，再对每个特征进行卡方检验，而不是像这些资料中那样直接对一个离散型特征作检验。&lt;/p&gt;
&lt;p&gt;(3) 如果是对 one-hot 转换后的每个特征构建列联表进行卡方检验，那将会是个巨大的工程，因为one-hot 转换通常会使特征维数成倍增加。因此我们需要一个快速计算 &lt;span class=&quot;math inline&quot;&gt;\(\chi^2\)&lt;/span&gt; 的方法，而不是繁琐地对每个特征计算列联表频数，所幸 &lt;code&gt;scikit-learn&lt;/code&gt; 中就提供了这样的快捷方法，同时也将看到这个方法也为连续型变量的应用打开了一扇大门。下面来看 &lt;a href=&quot;http://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.chi2.html#sklearn.feature_selection.chi2&quot;&gt;&lt;span&gt;&lt;code&gt;feature_selection.chi2&lt;/code&gt;&lt;/span&gt;&lt;/a&gt; 的&lt;a href=&quot;https://github.com/scikit-learn/scikit-learn/blob/7b136e9/sklearn/feature_selection/univariate_selection.py#L172&quot;&gt;&lt;span&gt;源码&lt;/span&gt;&lt;/a&gt; (有省略)：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def chi2(X, y):
    Y = LabelBinarizer().fit_transform(y)           # (1)
    if Y.shape[1] == 1:
        Y = np.append(1 - Y, Y, axis=1)
        
    observed = safe_sparse_dot(Y.T, X)              # (2)
    
    feature_count = X.sum(axis=0).reshape(1, -1)    # (3)
    class_prob = Y.mean(axis=0).reshape(1, -1)      # (4)
    expected = np.dot(class_prob.T, feature_count)  # (5)
    return _chisquare(observed, expected)

def _chisquare(f_obs, f_exp):
    f_obs = np.asarray(f_obs, dtype=np.float64)
    k = len(f_obs)
    
    chisq = f_obs
    chisq -= f_exp
    chisq **= 2
    with np.errstate(invalid=&quot;ignore&quot;):
        chisq /= f_exp
    chisq = chisq.sum(axis=0)
    return chisq, special.chdtrc(k - 1, chisq)&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;这个实现并不是传统意义上的通过计算频数构建列联表，而是将属于每一个标签类别的特征取值总和作为列联表单元格的观测值，即第 (2) 步 (需要先在第 (1) 步将标签离散化)。而对于列联表单元格的期望值的计算，则是基于这样的假设：如果标签与特征独立，则每个标签类别为均匀分布，即第 (4) 步中的 &lt;span class=&quot;math inline&quot;&gt;\(\rm{class\_prob} \Longrightarrow p\)&lt;/span&gt;，则第 (5) 步中每个单元格期望值的计算就与传统意义上期望值类似了： &lt;span class=&quot;math inline&quot;&gt;\(\mathbb{E}[x] = \sum_i p_i x_i\)&lt;/span&gt; 。接下来的&lt;code&gt;_chisuqare()&lt;/code&gt; 方法则是按照公式 &lt;span class=&quot;math inline&quot;&gt;\((1)\)&lt;/span&gt; 计算 &lt;span class=&quot;math inline&quot;&gt;\(\chi^2\)&lt;/span&gt; 值。&lt;/p&gt;
&lt;p&gt;这样实现的一大好处是可以通过矩阵相乘快速得出所有特征的观测值和期望值，在计算出各特征的 &lt;span class=&quot;math inline&quot;&gt;\(\chi^2\)&lt;/span&gt; 值后，如上文所述，可以按每个特征的 &lt;span class=&quot;math inline&quot;&gt;\(\chi^2\)&lt;/span&gt; 值大小进行排序，方便地进行特征选择。另一个好处是扩大了 &lt;code&gt;chi2&lt;/code&gt; 的适用范围，观察上面的代码，对于原始特征的唯一处理就是第 (3) 步中的 &lt;code&gt;sum&lt;/code&gt; ，而不是原来的计算频数，这样一些连续型特征也可以使用该方法进行特征选择了。&lt;/p&gt;

&lt;center&gt;

&lt;/center&gt;
&lt;hr/&gt;&lt;p&gt;F 检验是一类建立在 F 分布基础上的假设检验方法，服从 F 分布的随机变量与上文中卡方分布的关系如下：&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ F = \frac{X_1 / d_1}{X_2 / d_2} \tag{2} \]&lt;/span&gt;&lt;br/&gt;其中 &lt;span class=&quot;math inline&quot;&gt;\(X_1\)&lt;/span&gt; 和 &lt;span class=&quot;math inline&quot;&gt;\(X_2\)&lt;/span&gt; 分别服从自由度为 &lt;span class=&quot;math inline&quot;&gt;\(d_1\)&lt;/span&gt; 和 &lt;span class=&quot;math inline&quot;&gt;\(d_2\)&lt;/span&gt; 的卡方分布，即 &lt;span class=&quot;math inline&quot;&gt;\(X_1 \sim \chi^2(d_1), \;X_2 \sim \chi^2(d_2)\)&lt;/span&gt; ，且 &lt;span class=&quot;math inline&quot;&gt;\(X_1\)&lt;/span&gt; 与 &lt;span class=&quot;math inline&quot;&gt;\(X_2\)&lt;/span&gt; 独立，则随机变量 &lt;span class=&quot;math inline&quot;&gt;\(F\)&lt;/span&gt; 服从自由度为 &lt;span class=&quot;math inline&quot;&gt;\((d_1, d_2)\)&lt;/span&gt; 的F分布，记为 &lt;span class=&quot;math inline&quot;&gt;\(F \sim \text{F}(d_1, d_2)\)&lt;/span&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下图显示不同自由度下F分布的概率密度曲线：&lt;/p&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;&lt;code&gt;scikit-learn&lt;/code&gt; 中提供了两种F检验方法 —— 适用于分类的 &lt;a href=&quot;https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.f_classif.html#sklearn.feature_selection.f_classif&quot;&gt;&lt;span&gt;&lt;code&gt;f_classif&lt;/code&gt;&lt;/span&gt;&lt;/a&gt; 和适用于回归的 &lt;a href=&quot;https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.f_regression.html#sklearn.feature_selection.f_regression&quot;&gt;&lt;span&gt;&lt;code&gt;f_regression&lt;/code&gt;&lt;/span&gt;&lt;/a&gt; ，分别对应&lt;strong&gt;单因素方差分析&lt;/strong&gt;和&lt;strong&gt;线性相关分析&lt;/strong&gt;，下面分别介绍。&lt;/p&gt;

&lt;h3 id=&quot;方差分析&quot;&gt;(1) 方差分析&lt;/h3&gt;
&lt;p&gt;在卡方检验中我们要测试的是被检验的特征与类别是否独立，若拒绝零假设，则特征与类别相关。而在方差分析中则采用了不同的思路： 按照不同的标签类别将特征划分为不同的总体，我们想要检验的是不同总体之间均值是否相同 (或者是否有显著性差异)。下面承接上文的例子，类别为变态与否，因为方差分析只适用于连续型特征，所以这里采用了 “身高” 这个特征：&lt;/p&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;上图中红框和篮框中的特征值对应于两个类别区分出的两个不同的总体。方差分析用于特征选择的逻辑是这样： 如果样本中是变态的平均身高为 1.7 米，非变态的平均身高也为 1.7 米，凭身高无法判定一个人变态与否，那么说明身高这个特征对于类别没有区分度，则可以去除。反之，若前者的平均身高为 1.6 米，后者的平均身高为 1.9 米，那么我们有理由认为身高很能区分变态与否。因此将问题形式化为假设检验问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;center&gt;零假设 ($H_0$)： $\mu_1 = \mu_2 = \cdots = \mu_k$&lt;/center&gt;
&lt;center&gt;备选假设 ($H_1$) ： $k$ 个总体的均值不全相等&lt;/center&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面阐述方差分析的原理。设共有 &lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt; 个类别，总样本数为 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; ，第 &lt;span class=&quot;math inline&quot;&gt;\(j\)&lt;/span&gt; 个类别的样本数为 &lt;span class=&quot;math inline&quot;&gt;\(n_j\)&lt;/span&gt; ，&lt;span class=&quot;math inline&quot;&gt;\(x_{ij}\)&lt;/span&gt; 表示第 &lt;span class=&quot;math inline&quot;&gt;\(j\)&lt;/span&gt; 个类别的第 &lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt; 个样本，&lt;span class=&quot;math inline&quot;&gt;\(\bar{x_j}\)&lt;/span&gt; 表示第 &lt;span class=&quot;math inline&quot;&gt;\(j\)&lt;/span&gt; 个类别的样本均值，即 &lt;span class=&quot;math inline&quot;&gt;\(\bar{x_j} = \frac{\sum_{i=1}^{n_j} x_{ij}}{n_j}\)&lt;/span&gt; ，&lt;span class=&quot;math inline&quot;&gt;\(\bar{x}\)&lt;/span&gt; 为总样本均值 &lt;span class=&quot;math inline&quot;&gt;\(\bar{x} = \frac{\sum_{j=1}^k \sum_{i=1}^{n_j}x_{ij}}{n}\)&lt;/span&gt; ，那么样本的总体变异为：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ SST = \sum\limits_{j=1}^k \sum\limits_{i=1}^{n_j} (x_{ij} - \bar{x})^2 \]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math inline&quot;&gt;\(SST\)&lt;/span&gt; 可以分解为两部分 —— 类别内差异 &lt;span class=&quot;math inline&quot;&gt;\(SSE\)&lt;/span&gt; 和类别间差异 &lt;span class=&quot;math inline&quot;&gt;\(SSB\)&lt;/span&gt; ：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \begin{array} &amp;amp; SSE = \sum\limits_{j=1}^k \sum\limits_{i=1}^{n_j} (x_{ij} - \bar{x_j})^2 \\ SSB = SST - SSE = \sum\limits_{j=1}^k n_j (\bar{x_j} - \bar{x})^2 \end{array} \]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math inline&quot;&gt;\(SSE\)&lt;/span&gt; 衡量每个类别内部样本之间的差异，可以认为是随机误差。&lt;span class=&quot;math inline&quot;&gt;\(SSB\)&lt;/span&gt; 则衡量不同类别之间的差异。方差分析的基本思想是将不同类别之间的变异与随机误差作比较，如果二者之比大于某一临界值，则可拒绝零假设接受备选假设，即不同类别间样本均值不全相等，这也意味着样本特征对于类别有一定的区分度。&lt;/p&gt;

&lt;p&gt;而对于如何确定临界值，则终于要用到传说中的 F 分布了。在 &lt;span class=&quot;math inline&quot;&gt;\((2)\)&lt;/span&gt; 式中已经定义了服从F分布的随机变量，注意到分子分母都要除以自由度，而 &lt;span class=&quot;math inline&quot;&gt;\(SSE\)&lt;/span&gt; 和 &lt;span class=&quot;math inline&quot;&gt;\(SSB\)&lt;/span&gt; 的自由度分别为 &lt;span class=&quot;math inline&quot;&gt;\(k-1\)&lt;/span&gt; 和 &lt;span class=&quot;math inline&quot;&gt;\(n-k\)&lt;/span&gt; ，因而统计检验量 &lt;span class=&quot;math inline&quot;&gt;\(F\)&lt;/span&gt; ：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ F = \frac{类别间方差}{类别内方差} = \frac{MSB}{MSE} = \frac{SSB \,/\, (k-1)}{SSE\, / \, (n-k)} \]&lt;/span&gt;&lt;br/&gt;服从分子自由度为 &lt;span class=&quot;math inline&quot;&gt;\(k-1\)&lt;/span&gt;，分母自由度为 &lt;span class=&quot;math inline&quot;&gt;\(n-k\)&lt;/span&gt; 为的 F 分布，即 &lt;span class=&quot;math inline&quot;&gt;\(\frac{MSB}{MSE} \sim F(k-1, \,n-k)\)&lt;/span&gt; 。看到这里，敏感的同学可能已经注意到了，方差分析的思想和线性判别分析 (Linear Discriminant Analysis，LDA) 非常类似 ( LDA 的思想可大致概括为 “投影后类内方差最小，类间方差最大”)。没错～，这两个方法都是由英国大统计学家和生物学家 &lt;a href=&quot;https://en.wikipedia.org/wiki/Ronald_Fisher#Recognition&quot;&gt;&lt;span&gt;Ronald Fisher&lt;/span&gt;&lt;/a&gt; 爵士所创立。&lt;/p&gt;

&lt;p&gt;于是按假设检验的套路，零假设成立的情况下算出 F 值，查 F 分布表，若p值小于0.05 (或0.01)，则拒绝零假设接受备选假设，不同类别间均值不相等。在现实中使用软件包可以方便地输出方差分析表，这里使用 python 里的统计包 &lt;code&gt;statsmodels&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import statsmodels
import statsmodels.api as sm
from statsmodels.formula.api import ols

lm = ols('标签 ~ 身高', data=data).fit()
table = sm.stats.anova_lm(lm, typ=1)
print(table)

#######################################################
           df    sum_sq   mean_sq         F     P(&amp;gt;F)
身高        1.0  0.188034  0.188034  0.622642  0.460102
Residual   6.0  1.811966  0.301994       NaN       NaN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上表可以看出 &lt;span class=&quot;math inline&quot;&gt;\(p\)&lt;/span&gt; 值为0.46，所以不能拒绝零假设，即身高这个特征无法区分变态与否。&lt;/p&gt;

&lt;p&gt;方差分析可用于控制一个或多个自变量来检验其与因变量的关系，进而检测某种实验效果，因而与实验设计有着千丝万缕的关系，不过这里面的水颇深。。。 甚至有很多专著，如 &lt;a href=&quot;https://book.douban.com/subject/1776234/&quot;&gt;《 &lt;span&gt;&lt;em&gt;Design and Analysis of Experiments&lt;/em&gt;&lt;/span&gt; 》&lt;/a&gt; 等。 就一般的特征选择问题而言，和卡方检验一样，我们依然比较关心的是特征的相对重要性，所以可以按每个特征 F 值的大小进行排序，去除F值小的特征。&lt;/p&gt;
&lt;p&gt;上面的例子中检验身高与标签之间的关系，因为只有身高一个因素，所以被称为单因素方差分析。当然其他还有双因素方差分析，可以同时检验两个特征与标签的关系，以及两个特征之间的相互关系，缺点是计算繁琐，复杂度比单因素高。&lt;/p&gt;

&lt;p&gt;单因素方差分析 (F检验) 与统计学中另一大假设检验方法 —— &lt;a href=&quot;https://en.wikipedia.org/wiki/Student%27s_t-test#Unequal_variances&quot;&gt;&lt;span&gt;&lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt; 检验&lt;/span&gt;&lt;/a&gt;也颇有渊源，检验统计量 F 与 t 检验中的检验统计量 t 的关系为： &lt;span class=&quot;math inline&quot;&gt;\(F = t^2\)&lt;/span&gt; ，所以对于只有两个类别来说，F 检验和 t 检验会得出相同的结论，但对于多个类别的情况，t检验只能两两进行比较，这会带来一些问题：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;多个类别之间两两比较，计算复杂度较高，如果有10个类别，则有 &lt;span class=&quot;math inline&quot;&gt;\(C_{10}^2 = 45\)&lt;/span&gt; 种组合。&lt;/li&gt;
&lt;li&gt;对原始资料的利用率低，每次只能用到全部实验数据的几分之一。&lt;/li&gt;
&lt;li&gt;会增大假阳性 (即第一类错误) 的概率，假设显著性水平 &lt;span class=&quot;math inline&quot;&gt;\(\alpha = 0.05\)&lt;/span&gt; ，则犯第一类错误的概率为0.05，那么不犯第一类错误的概率为 &lt;span class=&quot;math inline&quot;&gt;\(1-0.05=0.95\)&lt;/span&gt;。对于有5个类别，10个组合的两两比较问题，至少犯一次第一类错误的概率上升到 &lt;span class=&quot;math inline&quot;&gt;\(1-0.95^{10} \approx 0.4\)&lt;/span&gt; ，这样就降低了统计推断的可靠性。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;所以对于多个类别的比较，方差分析是首选，其相当于是 t 检验对于多类别的扩展，我想 &lt;code&gt;scikit-learn&lt;/code&gt; 的特征选择模块中使用 F 检验而不是 t 检验是有这方面考虑的。&lt;/p&gt;

&lt;h3 id=&quot;线性相关分析&quot;&gt;(2) 线性相关分析&lt;/h3&gt;
&lt;p&gt;对于特征和标签皆为连续值的回归问题，要检测二者的相关性，最直接的做法就是求相关系数 &lt;span class=&quot;math inline&quot;&gt;\(r_{xy}\)&lt;/span&gt;：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ r_{xy} = \frac{cov(x,y)}{\sigma_x \sigma_y} =\frac{\sum_{i=1}^n (x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\sum_{i=1}^n(x_i - \bar{x})^2} \sqrt{\sum_{i=1}^n (y_i - \bar{y})^2}} \]&lt;/span&gt;&lt;br/&gt;但 &lt;code&gt;scikit-learn&lt;/code&gt; 中的 &lt;code&gt;f_regression&lt;/code&gt; 采用的是先计算相关系数，然后转化为F值。这又是个神奇的操作，究竟是如何转换的？在线性回归中常使用判定系数 &lt;span class=&quot;math inline&quot;&gt;\(R^2\)&lt;/span&gt; 作为回归方程拟合数据点的程度，或者说是因变量的总体方差能被自变量解释的比例。&lt;span class=&quot;math inline&quot;&gt;\(R^2\)&lt;/span&gt; 的定义以及和相关系数 &lt;span class=&quot;math inline&quot;&gt;\(r_{xy}\)&lt;/span&gt; 的关系如下：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ R^2 = \frac{SSR}{SST} = 1- \frac{SSE}{SST} = r_{xy}^2 \]&lt;/span&gt;&lt;br/&gt;其中 &lt;span class=&quot;math inline&quot;&gt;\(SSE\)&lt;/span&gt; 为误差平方和：&lt;span class=&quot;math inline&quot;&gt;\(SSE = \sum_{i=1}^n (y_i - \hat{y}_i)^2\)&lt;/span&gt; ，&lt;span class=&quot;math inline&quot;&gt;\(SSR\)&lt;/span&gt; 为回归平方和：&lt;span class=&quot;math inline&quot;&gt;\(SSR = \sum_{i=1}^n (\hat{y}_i - \bar{y})^2\)&lt;/span&gt; ，&lt;span class=&quot;math inline&quot;&gt;\(SST\)&lt;/span&gt; 为总体平方和：&lt;span class=&quot;math inline&quot;&gt;\(SST = \sum_{i=1}^n (y_i - \bar{y})^2\)&lt;/span&gt; 。可以看到这些式子与方差分析中的式子非常类似，不过注意这里计算的是都是标签值 &lt;span class=&quot;math inline&quot;&gt;\(y\)&lt;/span&gt;，而不是方差分析中的 &lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt; 。这其中的原理都是相通的，我们同样可以用 &lt;span class=&quot;math inline&quot;&gt;\(SSR\)&lt;/span&gt; 和 &lt;span class=&quot;math inline&quot;&gt;\(SSE\)&lt;/span&gt; 来计算检验统计量 &lt;span class=&quot;math inline&quot;&gt;\(F\)&lt;/span&gt; (&lt;span class=&quot;math inline&quot;&gt;\(SSR\)&lt;/span&gt; 和 &lt;span class=&quot;math inline&quot;&gt;\(SSE\)&lt;/span&gt; 的自由度分别为1和 n-2 )：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ F = \frac{MSR}{MSE} = \frac{SSR \,/\, 1}{SSE \,/\, (n-2)} = \frac{SSR / SST}{SSE / SST} \times (n-2) = \frac{r_{xy}^2}{1-r_{xy}^2} \times (n-2) \]&lt;/span&gt;&lt;br/&gt;即 &lt;span class=&quot;math inline&quot;&gt;\(\frac{MSR}{MSE} \sim F(1, \,n-2)\)&lt;/span&gt; 。这样就可以方便地将相关系数转化为 F 值了，接下来的步骤与之前的假设检验一样。该方法的缺点是只能检测线性相关关系，但不相关不代表独立，可能是非线性相关关系。&lt;/p&gt;

&lt;center&gt;

&lt;/center&gt;
&lt;hr/&gt;&lt;p&gt;互信息 (&lt;em&gt;mutual information&lt;/em&gt;) 用于特征选择，可以从两个角度进行解释：(1)、基于 KL 散度和 (2)、基于信息增益。对于离散型随机变量 &lt;span class=&quot;math inline&quot;&gt;\(X, \,Y\)&lt;/span&gt;，互信息的计算公式如下：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ I(X;Y) = \sum\limits_{y \in \mathcal{Y}}\sum\limits_{x \in \mathcal{X}} p(x,y) \,\text{log}\left(\frac{p(x,y)}{p(x)p(y)}\right) \tag{3.1} \]&lt;/span&gt;&lt;br/&gt;对于连续型变量：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ I(X;Y) = \int_{\mathcal{Y}}\int_{\mathcal{X}} p(x,y) \,\text{log}\left(\frac{p(x,y)}{p(x)p(y)}\right) dxdy \tag{3.2} \]&lt;/span&gt;&lt;br/&gt;可以看到连续型变量互信息的需要计算积分比较麻烦，通常先要进行离散化，所以这里主要讨论离散型变量的情况。互信息可以方便地转换为 KL 散度的形式：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ I(X;Y) = \sum\limits_{y \in \mathcal{Y}}\sum\limits_{x \in \mathcal{X}} p(x,y) \,\text{log}\left(\frac{p(x,y)}{p(x)p(y)}\right) = D_{KL}(p(x,y) || p(x)p(y)) \tag{3.3} \]&lt;/span&gt;&lt;br/&gt;我们知道 KL 散度可以用来衡量两个概率分布之间的差异，而如果 &lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt; 和 &lt;span class=&quot;math inline&quot;&gt;\(y\)&lt;/span&gt; 是相互独立的随机变量，则 &lt;span class=&quot;math inline&quot;&gt;\(p(x,y) = p(x)\,p(y)\)&lt;/span&gt; ，那么 &lt;span class=&quot;math inline&quot;&gt;\((3.3)\)&lt;/span&gt; 式为 &lt;span class=&quot;math inline&quot;&gt;\(\huge{0}\)&lt;/span&gt;。因此若 &lt;span class=&quot;math inline&quot;&gt;\(I(X;Y)\)&lt;/span&gt; 越大，则表示两个变量相关性越大，于是就可以用互信息来筛选特征。&lt;/p&gt;

&lt;p&gt;而从信息增益的角度来看，互信息表示由于 &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; 的引入而使 &lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt; 的不确定性减少的量。信息增益越大，意味着特征 &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; 包含的有助于将 &lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt; 分类的信息越多 (即 &lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt; 的不确定性越小)。决策树就是一个典型的应用例子，其学习的主要过程就是利用信息增益来选择最优划分特征，表示由于特征 &lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt; 而使得对数据集 &lt;span class=&quot;math inline&quot;&gt;\(D\)&lt;/span&gt; 的分类不确定性减少的程度，信息增益大的特征具有更强的分类能力。其计算公式为：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \begin{align} I(D\,;A) &amp;amp; = H(D) - H(D|A) = H(D) - \sum\limits_{v=1}^\mathcal{V}\frac{|D^v|}{|D|} H(D^v) \tag{3.4} \\ &amp;amp; = -\sum\limits_{k=1}^\mathcal{K}\frac{|C_k|}{|D|}\,\text{log}\frac{|C_k|}{|D|} -\left(\sum\limits_{v=1}^\mathcal{V} \frac{|D^v|}{|D|}\sum\limits_{k=1}^\mathcal{K}\frac{|D_{k}^v|}{|D^v|}\,\text{log}\frac{|D_{k}^v|}{|D^v|}\right) \tag{3.5} \end{align} \]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math inline&quot;&gt;\((3.4)\)&lt;/span&gt; 式中 &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{V}\)&lt;/span&gt; 表示特征 &lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt; 有 &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{V}\)&lt;/span&gt; 个可能的取值，&lt;span class=&quot;math inline&quot;&gt;\(|D^v|\)&lt;/span&gt; 表示第 &lt;span class=&quot;math inline&quot;&gt;\(v\)&lt;/span&gt; 个取值上的样本数量。 &lt;span class=&quot;math inline&quot;&gt;\((3.5)\)&lt;/span&gt; 式中设总共有 &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{K}\)&lt;/span&gt; 个类别，&lt;span class=&quot;math inline&quot;&gt;\(|C_k|\)&lt;/span&gt; 表示属于第 &lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt; 类的样本数量，&lt;span class=&quot;math inline&quot;&gt;\(\sum_{k=1}^\mathcal{K}|C_k| = |D|\)&lt;/span&gt;。 &lt;span class=&quot;math inline&quot;&gt;\(|D_k^v|\)&lt;/span&gt; 表示特征 &lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt; 的取值为 &lt;span class=&quot;math inline&quot;&gt;\(v\)&lt;/span&gt; 且类别为 &lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt; 的样本数量。&lt;/p&gt;

&lt;p&gt;互信息和信息增益，二者是等价的，下面我们来看表示互信息的 &lt;span class=&quot;math inline&quot;&gt;\((3.1)\)&lt;/span&gt; 式是如何推导出表示信息增益的 &lt;span class=&quot;math inline&quot;&gt;\((3.4)\)&lt;/span&gt; 和 &lt;span class=&quot;math inline&quot;&gt;\((3.5)\)&lt;/span&gt; 式的：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \begin{align*} I(X;Y) = I(Y;X)&amp;amp;= \sum\limits_{y \in \mathcal{Y}}\sum\limits_{x \in \mathcal{X}} p(x,y) \,\text{log}\left(\frac{p(x,y)}{p(x)p(y)}\right) \\ &amp;amp; = -\sum\limits_y\sum\limits_x p(x,y)\,\text{log}\,p(y) + \sum\limits_x\sum\limits_y p(x,y)\text{log} \left(\frac{p(x,y)}{p(x)}\right) \\ &amp;amp; = -\sum\limits_y p(y)\,\text{log}\,p(y) + \sum\limits_x\sum\limits_y p(x)p(y|x)\text{log}\, p(y|x) \\ &amp;amp; = -\sum\limits_y p(y)\,\text{log}\,p(y) + \sum\limits_x p(x) \sum\limits_y p(y|x)\text{log}\, p(y|x) \tag{a} \\ &amp;amp; = H(Y) - \sum\limits_x p(x)H(Y|X=x) \tag{b}\\ &amp;amp; = H(Y) - H(Y|X) \end{align*} \]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;上面的 &lt;span class=&quot;math inline&quot;&gt;\((a)\)&lt;/span&gt; 式就对应着 &lt;span class=&quot;math inline&quot;&gt;\((3.5)\)&lt;/span&gt; 式，而 &lt;span class=&quot;math inline&quot;&gt;\((b)\)&lt;/span&gt; 式对应 &lt;span class=&quot;math inline&quot;&gt;\((3.4)\)&lt;/span&gt; 式， &lt;span class=&quot;math inline&quot;&gt;\(p(y) \simeq \frac{|C_k|}{|D|}\;,\; p(x) \simeq \frac{|D^v|}{|D|}\;,\; p(y|x) \simeq \frac{|D_{k}^v|}{|D^v|}\)&lt;/span&gt; 。由此可以看到决策树的学习过程也是一种依赖于训练数据的极大似然估计。&lt;/p&gt;

&lt;p&gt;再来探究下 &lt;span class=&quot;math inline&quot;&gt;\((b)\)&lt;/span&gt; 式，&lt;span class=&quot;math inline&quot;&gt;\(H(Y)\)&lt;/span&gt; 为熵，表示随机变量 &lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt; 的不确定性。&lt;span class=&quot;math inline&quot;&gt;\(H(Y|X)=\sum\limits_{x}p(x) H(Y|X=x)\)&lt;/span&gt; 为条件熵 (&lt;em&gt;conditional entropy&lt;/em&gt;)，表示在随机变量 &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; 已知的情况下随机变量 &lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt; 的不确定性。那么二者的差 &lt;span class=&quot;math inline&quot;&gt;\(I(X;Y) = H(Y) - H(Y|X)\)&lt;/span&gt; 就表示由于 &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; 的引入而使 &lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt; 的不确定性减少的量，维基里有一张形象的图：&lt;/p&gt;
&lt;center&gt;

&lt;/center&gt;

&lt;p&gt;放在特征选择的语境下，我们希望 &lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt; 的不确定越小越好，这样越有助于分类，那么互信息越大，则特征 &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; 使得 &lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt; 的不确定性减少地也越多，即 &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; 中包含的关于 &lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt; 的信息越多。因而策略还是和上文一样，计算每个特征与类别的互信息值，排序后去除互信息小的特征。&lt;/p&gt;

&lt;p&gt;互信息的一大优点是其能检测出多种变量之间的关系，而相较而言 F 检验只能表示线性相关关系。&lt;code&gt;Scikit-learn&lt;/code&gt; 的这个例子 (&lt;a href=&quot;https://scikit-learn.org/stable/auto_examples/feature_selection/plot_f_test_vs_mi.html#sphx-glr-auto-examples-feature-selection-plot-f-test-vs-mi-py&quot;&gt;&lt;span&gt;&lt;em&gt;Comparison of F-test and mutual information&lt;/em&gt;&lt;/span&gt;&lt;/a&gt;) 中显示了这一点，互信息能很好展现 &lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt; 和 &lt;span class=&quot;math inline&quot;&gt;\(y\)&lt;/span&gt; 之间的非线性关系：&lt;/p&gt;
&lt;center&gt;

&lt;/center&gt;

&lt;p&gt;/&lt;/p&gt;
</description>
<pubDate>Thu, 07 Mar 2019 22:45:00 +0000</pubDate>
<dc:creator>massquantity</dc:creator>
<og:description>特征选择是特征工程中的重要一环，其主要目的是从所有特征中选出相关特征 ( relevant feature )，或者说在不引起重要信息丢失的前提下去除掉无关特征 ( irrelevant featur</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/massquantity/p/10486904.html</dc:identifier>
</item>
<item>
<title>浅谈SpringMVC执行过程 - Alan_beijing</title>
<link>http://www.cnblogs.com/wangjiming/p/10487832.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangjiming/p/10487832.html</guid>
<description>&lt;p&gt;       通过深入分析Spring源码，我们知道Spring框架包括大致六大模块， 如Web模块，数据库访问技术模块，面向切面模块，基础设施模块，核心容器模块和模块，&lt;/p&gt;
&lt;p&gt;其中，在Spring框架的Web模块中，又包含很多前端技术，如SpringMVC,Spring WebSocket,Spring WebPortlet等，在本篇文章中，我们主要分析SpringMVC模块，&lt;/p&gt;
&lt;p&gt;在分析SpringMVC技术时，本篇文章将通过解读SpringMVC源码，并通过编译器断点调试追踪，研究Spring核心类的UML图，来深入剖析SpringMVC的执行过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一  Spring核心模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下图为Spring核心模块，其中SpringMVC模块位于Spring框架的Web模块部分&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201903/1066923-20190307172308277-62474723.png&quot; alt=&quot;&quot; width=&quot;666&quot; height=&quot;478&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二  SpringMVC执行原理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。&lt;/p&gt;
&lt;p&gt;简要分析执行流程：&lt;/p&gt;
&lt;p&gt;1.DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求，&lt;/p&gt;
&lt;p&gt;我们假设请求的url为:&lt;/p&gt;
&lt;p&gt;http://localhost:9999/SpringMVC/input-product&lt;/p&gt;
&lt;p&gt;如上url拆分成三部分：&lt;/p&gt;
&lt;p&gt;(1)http://localhost:9999 服务器域名&lt;/p&gt;
&lt;p&gt;(2)SpringMVC部署在服务器(http://localhost:9999)上的web站点&lt;/p&gt;
&lt;p&gt;(3)input-product表示控制器&lt;/p&gt;
&lt;p&gt;通过分析，如上url表示为：请求位于服务器localhost:9999上的SpringMVC站点的input-product控制器&lt;/p&gt;
&lt;p&gt;2.HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler&lt;/p&gt;
&lt;p&gt;3.HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：input-product&lt;/p&gt;
&lt;p&gt;4.HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等&lt;/p&gt;
&lt;p&gt;5.HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler&lt;/p&gt;
&lt;p&gt;6.Handler让具体的Controller执行&lt;/p&gt;
&lt;p&gt;7.Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView&lt;/p&gt;
&lt;p&gt;8.HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet&lt;/p&gt;
&lt;p&gt;9.DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名&lt;/p&gt;
&lt;p&gt;10.视图解析器将解析的逻辑视图名传给DispatcherServlet&lt;/p&gt;
&lt;p&gt;11.DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图&lt;/p&gt;
&lt;p&gt;12.最终视图呈现给用户。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201903/1066923-20190307172453210-409890354.png&quot; alt=&quot;&quot; width=&quot;804&quot; height=&quot;421&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三  SpringMVC核心组件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; （一）DispatcherServlet&lt;/p&gt;
&lt;p&gt;DispatcherServlet就是所谓的SpringMVC前端控制器，作为整个SpringMVC的控制中心,，其相关UML如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201903/1066923-20190307181328225-1500109594.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; （二）HandlerMapping&lt;/p&gt;
&lt;p&gt;HandlerMapping主要用来解析请求url，解析出控制器，从而映射控制器，其相关类有16个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201903/1066923-20190308011205111-1334862023.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如下为HandlerMapping的UML图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201903/1066923-20190308012521101-1794489256.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; （三）HandlerAdapter&lt;/p&gt;
&lt;p&gt;HandlerAdapter主要是调度Controller来处理业务逻辑等，想相关类有6个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201903/1066923-20190308012247068-188786650.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如下为HandlerAdapter的UML：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201903/1066923-20190308012201932-690732571.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; （四）ViewResolver&lt;/p&gt;
&lt;p&gt;ViewResolver接口主要作用是解析DispatcherServlet传递的逻辑视图名，并将解析结果传回给DispatcherServlet。实现该接口的相关类或接口共有19个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201903/1066923-20190308012737248-1101227503.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 如下为ViewResolver主要的UML:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1066923/201903/1066923-20190308015607265-1155748156.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 四   版权区&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;   转载博客，必须注明博客出处&lt;/li&gt;
&lt;li&gt;   博主网址：http://www.cnblogs.com/wangjiming/&lt;/li&gt;
&lt;li&gt;   如您有新想法，欢迎提出，邮箱：2098469527@qq.com&lt;/li&gt;
&lt;li&gt;  专业.NET之家技术QQ群：490539956&lt;/li&gt;
&lt;li&gt;  专业化Java之家QQ群：924412846&lt;/li&gt;
&lt;li&gt;  有问必答QQ群：2098469527&lt;/li&gt;
&lt;li&gt;  一对一技术辅导QQ：2098469527&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Thu, 07 Mar 2019 18:09:00 +0000</pubDate>
<dc:creator>Alan_beijing</dc:creator>
<og:description>通过深入分析Spring源码，我们知道Spring框架包括大致六大模块， 如Web模块，数据库访问技术模块，面向切面模块，基础设施模块，核心容器模块和模块， 其中，在Spring框架的Web模块中，又</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangjiming/p/10487832.html</dc:identifier>
</item>
<item>
<title>Django的rest_framework的权限组件和频率组件源码分析 - bainianminguo</title>
<link>http://www.cnblogs.com/bainianminguo/p/10493582.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bainianminguo/p/10493582.html</guid>
<description>&lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;　　Django的rest_framework一共有三大组件，分别为认证组件&lt;strong&gt;&lt;span&gt;perform_authentication，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;权限组件&lt;/span&gt;&lt;strong&gt;&lt;span&gt;check_throttles&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我在前面的博客中已经梳理了认证组件，不知道大家有没有看懂；在这里我把认证的组件的博客地址在贴出来，不清楚的人可以看下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;局部设置认证组件的博客：https://www.cnblogs.com/bainianminguo/p/10480887.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;全局设置认证组件的博客：https://www.cnblogs.com/bainianminguo/p/10487059.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果大家能看懂我上面的博客，今天学习权限组件和频率组件就很简单了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;今天的博客主要分为四部分，分别是局部设置权限组件，全局设置权限组件，局部设置频率组件，全局设置频率组件&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;一、局部设置权限组件&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1、一个请求过来，首先进入urls文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
    url(r'^book_cbv/', views.Book_cbv.as_view(),name=&quot;test3&quot;),
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、进入Book_cbv这个类，寻找as_view方法，这个类是我们自己的定义的，我们根本就没有写as_view方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
class Book_cbv(APIView):

    def get(self,request):
        query_list = models.Book.objects.all()
        # bs = book_serializers(query_list,many=True)
        bs = bookmodelserializer(query_list,many=True,context={'request': request})


        return Response(bs.data)
    def post(self,request):
        bs = bookmodelserializer(data=request.data)
        print(request.data)
        if bs.is_valid():
            print(bs.validated_data)
            bs.save()
            return Response(bs.data)
        else:
            return Response(bs.errors)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;3、进入父类寻找as_view方法，父类为APIView，父类的as_view方法实际是执行APIView类的父类的view方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
    @classmethod
    def as_view(cls, **initkwargs):
        &quot;&quot;&quot;
        Store the original class on the view function.

        This allows us to discover information about the view when we do URL
        reverse lookups.  Used for breadcrumb generation.
        &quot;&quot;&quot;
        if isinstance(getattr(cls, 'queryset', None), models.query.QuerySet):
            def force_evaluation():
                raise RuntimeError(
                    'Do not evaluate the `.queryset` attribute directly, '
                    'as the result will be cached and reused between requests. '
                    'Use `.all()` or call `.get_queryset()` instead.'
                )
            cls.queryset._fetch_all = force_evaluation

        view = super(APIView, cls).as_view(**initkwargs)
        view.cls = cls
        view.initkwargs = initkwargs
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;4、进入APIView类的父类View类，看下as_view方法干了什么,实际执行View类的as_view方法，就是执行APIView类的dispatch方法，这里如果不清楚，可以看我前言中备注的博客&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
   @classonlymethod
    def as_view(cls, **initkwargs):
        &quot;&quot;&quot;
        Main entry point for a request-response process.
        &quot;&quot;&quot;
        for key in initkwargs:
            if key in cls.http_method_names:
                raise TypeError(&quot;You tried to pass in the %s method name as a &quot;
                                &quot;keyword argument to %s(). Don't do that.&quot;
                                % (key, cls.__name__))
            if not hasattr(cls, key):
                raise TypeError(&quot;%s() received an invalid keyword %r. as_view &quot;
                                &quot;only accepts arguments that are already &quot;
                                &quot;attributes of the class.&quot; % (cls.__name__, key))

        def view(request, *args, **kwargs):
            self = cls(**initkwargs)
            if hasattr(self, 'get') and not hasattr(self, 'head'):
                self.head = self.get
            self.request = request
            self.args = args
            self.kwargs = kwargs
            return self.dispatch(request, *args, **kwargs)
        view.view_class = cls
        view.view_initkwargs = initkwargs

        # take name and docstring from class
        update_wrapper(view, cls, updated=())

        # and possible attributes set by decorators
        # like csrf_exempt from dispatch
        update_wrapper(view, cls.dispatch, assigned=())
        return view
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;5、进入APIView类的dispatch方法，其实，我们这里需要关注的是initial方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;52&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
    def dispatch(self, request, *args, **kwargs):
        &quot;&quot;&quot;
        `.dispatch()` is pretty much the same as Django's regular dispatch,
        but with extra hooks for startup, finalize, and exception handling.
        &quot;&quot;&quot;
        self.args = args
        self.kwargs = kwargs
        request = self.initialize_request(request, *args, **kwargs)
        self.request = request
        self.headers = self.default_response_headers  # deprecate?

        try:
            self.initial(request, *args, **kwargs)

            # Get the appropriate handler method
            if request.method.lower() in self.http_method_names:
                handler = getattr(self, request.method.lower(),
                                  self.http_method_not_allowed)
            else:
                handler = self.http_method_not_allowed

            response = handler(request, *args, **kwargs)

        except Exception as exc:
            response = self.handle_exception(exc)

        self.response = self.finalize_response(request, response, *args, **kwargs)
        return self.response
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;6、进入initial方法，这里就到了我们的权限组件，check_permissions&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
    def initial(self, request, *args, **kwargs):
        &quot;&quot;&quot;
        Runs anything that needs to occur prior to calling the method handler.
        &quot;&quot;&quot;
        self.format_kwarg = self.get_format_suffix(**kwargs)

        # Perform content negotiation and store the accepted info on the request
        neg = self.perform_content_negotiation(request)
        request.accepted_renderer, request.accepted_media_type = neg

        # Determine the API version, if versioning is in use.
        version, scheme = self.determine_version(request, *args, **kwargs)
        request.version, request.versioning_scheme = version, scheme

        # Ensure that the incoming request is permitted
        self.perform_authentication(request)
        self.check_permissions(request)
        self.check_throttles(request)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;7、进入check_permissions方法，这里需要重点看下self.get_permissions这个方法干了什么，知道这个方法了什么，我们在回到这个这个方法往下看&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
    def check_permissions(self, request):
        &quot;&quot;&quot;
        Check if the request should be permitted.
        Raises an appropriate exception if the request is not permitted.
        &quot;&quot;&quot;
        for permission in self.get_permissions():
            if not permission.has_permission(request, self):
                self.permission_denied(
                    request, message=getattr(permission, 'message', None)
                )
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;8、进入self.get_permissions方法，这里是不是很熟悉，和我们前面讲的认证组件是不是很类似，我们需要在我们自己的配置的视图类中定义个permission_classes的列表，而这个列表的内容是就是每个控制权限的类的实例对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
    def get_permissions(self):
        &quot;&quot;&quot;
        Instantiates and returns the list of permissions that this view requires.
        &quot;&quot;&quot;
        return [permission() for permission in self.permission_classes]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;9、下面在回到步骤7，往下看，就知道我们该如何配置这个权限类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201903/1101486-20190308011026333-550396467.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 10、下面我们就按照上面的分析定义我们自己的权限类&lt;/p&gt;
&lt;p&gt;具体什么逻辑为权限允许，就是我们自己设置了&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
class SVIPpermission(object):
    message = &quot;只有超级用户才能访问&quot;
    def has_permission(self,request,view):
        user_name = request.user
        user_type = models.User.objects.filter(name=user_name).first().user_type
        if user_type == 1:
            return True
        else:
            return False
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在视图类中使用权限类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201903/1101486-20190308011301984-774824767.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;二、全局设置权限组件&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;这个全局设置，我就简单的说一下吧，如果不清楚，可以继续到我前面的博客看一下&lt;/p&gt;
&lt;p&gt;1、确定默认的权限控制的类的名称&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201903/1101486-20190308011456214-1977638512.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2、把我们的权限控制的类放在一个单独文件中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201903/1101486-20190308011552873-507055389.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 3、进入settings中配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
REST_FRAMEWORK = {
    &quot;DEFAULT_AUTHENTICATION_CLASSES&quot;:(
        &quot;app1.utils.Book_auther&quot;,
    ),
    &quot;DEFAULT_PERMISSION_CLASSES_CLASSES&quot;: (
        &quot;app1.utils.SVIPpermission&quot;,
    )
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201903/1101486-20190308011722809-1487413312.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;三、局部设置频率组件&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;1、从局部设置权限组件的第六步开始继续讲解&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201903/1101486-20190308011849705-2144674841.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 2、进入check_throttles方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
    def check_throttles(self, request):
        &quot;&quot;&quot;
        Check if request should be throttled.
        Raises an appropriate exception if the request is throttled.
        &quot;&quot;&quot;
        for throttle in self.get_throttles():
            if not throttle.allow_request(request, self):
                self.throttled(request, throttle.wait())
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3、下面看下get_throttles方法，看到这里我们是不是很清楚了，我们需要在视图类中定义了一个throttle_classe的列表，列表的内容是每个频率组件类的实例对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
    def get_throttles(self):
        &quot;&quot;&quot;
        Instantiates and returns the list of throttles that this view uses.
        &quot;&quot;&quot;
        return [throttle() for throttle in self.throttle_classes]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 4、频率组件必须要有allow_request的方法，如果这个方法返回true，则通过频率认证，如果返回false，则没有通过频率组件，这里的频率说的意思是某个用户在单位时间内访问网页的次数，我们这里就先简单的实现就可以了，判断频率的逻辑不是这里的重点&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
class throttlerate(object):
    def allow_request(self,request,view):
        return True
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;5、在视图类中使用频率组件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
class Book_cbv(APIView):
    authentication_classes = []
    permission_classes = [SVIPpermission(),]
    throttle_classes = [throttlerate(),]
    def get(self,request):
        query_list = models.Book.objects.all()
        # bs = book_serializers(query_list,many=True)
        bs = bookmodelserializer(query_list,many=True,context={'request': request})
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;四、全局设置频率组件&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; 1、全局设置频率组件和全局设置权限组件也几乎是一样的，把频率组件放在一个单独的文件中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201903/1101486-20190308012444164-615040761.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 2、确定k值&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201903/1101486-20190308012521914-696526947.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 3、在settings中引入配置的频率组件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
REST_FRAMEWORK = {
    &quot;DEFAULT_AUTHENTICATION_CLASSES&quot;:(
        &quot;app1.utils.Book_auther&quot;,
    ),
    &quot;DEFAULT_PERMISSION_CLASSES_CLASSES&quot;: (
        &quot;app1.utils.SVIPpermission&quot;,
    ),
    &quot;DEFAULT_DEFAULT_THROTTLE_CLASSES_CLASSES&quot;: (
        &quot;app1.utils.throttlerate&quot;,
    )
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1101486/201903/1101486-20190308012647813-175371402.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;总结：至此，rest_framework的三大组件都已经完成，如果有不清楚可以留言，感谢大家查阅！&lt;/p&gt;
</description>
<pubDate>Thu, 07 Mar 2019 17:28:00 +0000</pubDate>
<dc:creator>bainianminguo</dc:creator>
<og:description>前言： Django的rest_framework一共有三大组件，分别为认证组件perform_authentication，权限组件check_throttles； 我在前面的博客中已经梳理了认证组</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bainianminguo/p/10493582.html</dc:identifier>
</item>
<item>
<title>Asp.Net Core基于JWT认证的数据接口网关Demo - 如兹</title>
<link>http://www.cnblogs.com/ruzi/p/10493501.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ruzi/p/10493501.html</guid>
<description>&lt;p&gt;近日，应一位朋友的邀请写了个Asp.Net Core基于JWT认证的数据接口网关Demo。朋友自己开了个公司，接到的一个升级项目，客户要求用Aps.Net Core做数据网关服务且基于JWT认证实现对前后端分离的数据服务支持，于是想到我一直做.Net开发，问我是否对.Net Core有所了解？能不能做个简单Demo出来看看？我说，分道扬镳之后我不是调用别人的接口就是提供接口给别人调用，于是便有了以下示例代码。&lt;/p&gt;
&lt;p&gt;示例要求能演示获取Token及如何使用该Token访问数据资源，在Demo中实现了JWT的颁发及验证以及重写一个ActionAuthorizeAttribute实现对具体数据接口的调用权限控制，先看一下项目截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1563651/201903/1563651-20190307213517737-1956768216.png&quot; alt=&quot;项目截图&quot;/&gt;&lt;span&gt;[项目截图]&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;项目文件介绍&lt;/h2&gt;
&lt;p&gt;解决方案下只有一个项目，项目名称就叫&lt;strong&gt;Jwt.Gateway&lt;/strong&gt;，包含主要文件有：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;Controllers&lt;/span&gt;目录下的&lt;strong&gt;ApiActionFilterAttribute.cs&lt;/strong&gt;文件，继承&lt;strong&gt;Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute&lt;/strong&gt;，用于校验接口调用者对具体接口的访问权限。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Controllers&lt;/span&gt;目录下的&lt;strong&gt;ApiBase.cs&lt;/strong&gt;文件，继承&lt;strong&gt;Microsoft.AspNetCore.Mvc.Controller&lt;/strong&gt;，具有&lt;strong&gt;Microsoft.AspNetCore.Authorization.Authorize&lt;/strong&gt;特性引用，用于让所有数据接口用途的控制器继承，定义有CurrentAppKey属性(来访应用程序的身份标识)并在&lt;strong&gt;OnActionExecuting&lt;/strong&gt;事件中统一分析Claims并赋值。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Controllers&lt;/span&gt;目录下的&lt;strong&gt;TokenController.cs&lt;/strong&gt;控制器文件，用于对调用方应用程序获取及注销Token。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Controllers&lt;/span&gt;目录下的&lt;strong&gt;UsersController.cs&lt;/strong&gt;控制器文件，继承&lt;strong&gt;ApiBase.cs&lt;/strong&gt;，作为数据调用示例。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;MiddleWares&lt;/span&gt;目录下的&lt;strong&gt;ApiCustomException.cs&lt;/strong&gt;文件，是一个数据接口的统一异常处理中间件。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Models&lt;/span&gt;目录下的&lt;strong&gt;ApiResponse.cs&lt;/strong&gt;文件，用于做数据接口的统一数据及错误信息输出实体模型。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Models&lt;/span&gt;目录下的&lt;strong&gt;User.cs&lt;/strong&gt;文件，示例数据实体模型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Program.cs&lt;/strong&gt;及&lt;strong&gt;Startup.cs&lt;/strong&gt;文件就不介绍了，随便建个空项目都有。&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;项目文件代码&lt;/h2&gt;
&lt;h3&gt;ApiActionFilterAttribute.cs&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Controllers&lt;/span&gt;目录下的&lt;strong&gt;ApiActionFilterAttribute.cs&lt;/strong&gt;文件，继承&lt;strong&gt;Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute&lt;/strong&gt;，用于校验接口调用者对具体接口的访问权限。&lt;/p&gt;
&lt;p&gt;设想每一个到访的请求都是一个应用程序，每一个应用程序都分配有基本的Key和Password，每一个应用程序具有不同的接口访问权限，所以在具体的数据接口上应该声明该接口所要求的权限值，比如修改用户信息的接口应该在接口方法上声明需要具有“&lt;strong&gt;修改用户&lt;/strong&gt;”的权限，用例：&lt;span&gt;[ApiActionFilter(&quot;用户修改&quot;)]&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;大部分情况下一个接口(方法)对应一个操作，这样基本上就能应付了，但是不排除有时候可能需要多个权限组合进行验证，所以该文件中有一个对多个权限值进行校验的“&lt;strong&gt;与&lt;/strong&gt;”和“&lt;strong&gt;和&lt;/strong&gt;”枚举，用例：&lt;span&gt;[ApiActionFilter(new string[] { &quot;用户修改&quot;, &quot;用户录入&quot;, &quot;用户删除&quot; },ApiActionFilterAttributeOption.AND)]&lt;span&gt;，这样好像就差不多了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;由于在一个接口调用之后可能需要将该接口所声明需要的权限值记入日志等需求，因此权限值集合将被写入到HttpContext.Items[&quot;Permissions&quot;]中以方便可能的后续操作访问，看代码：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;&lt;img id=&quot;code_img_closed_d5482402-7df8-4132-b0a0-771fcb0de5d7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d5482402-7df8-4132-b0a0-771fcb0de5d7&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d5482402-7df8-4132-b0a0-771fcb0de5d7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc.Filters;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Jwt.Gateway.Controllers
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; ApiActionFilterAttributeOption
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        OR,AND
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ApiActionFilterAttribute : Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; Permissions = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         ApiActionFilterAttributeOption Option =&lt;span&gt; ApiActionFilterAttributeOption.AND;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; ApiActionFilterAttribute(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; permission)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            Permissions.Add(permission);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; ApiActionFilterAttribute(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] permissions, ApiActionFilterAttributeOption option)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; permission &lt;span&gt;in&lt;/span&gt;&lt;span&gt; permissions) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (Permissions.Contains(permission))
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                     &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                Permissions.Add(permission);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             Option =&lt;span&gt; option;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnActionExecuting(ActionExecutingContext context)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; key =&lt;span&gt; GetAppKey(context);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; keyPermissions =&lt;span&gt; GetAppKeyPermissions(key);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; isAnd = Option ==&lt;span&gt; ApiActionFilterAttributeOption.AND;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; permissionsCount =&lt;span&gt; Permissions.Count;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; keyPermissionsCount =&lt;span&gt; keyPermissions.Count;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; permissionsCount; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                 &lt;span&gt;bool&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; keyPermissions.Count; j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (flag = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Equals(Permissions[i], keyPermissions[j], StringComparison.OrdinalIgnoreCase))
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                     &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isAnd)
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;应用“&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + key + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;”缺少“&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + Permissions[i] + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;”的权限&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt;             context.HttpContext.Items.Add(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Permissions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Permissions);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; 
&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnActionExecuting(context);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; 
&lt;span&gt;65&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetAppKey(ActionExecutingContext context)
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; claims =&lt;span&gt; context.HttpContext.User.Claims;
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (claims == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;未能获取到应用标识&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; claimKey = claims.ToList().Find(o =&amp;gt; &lt;span&gt;string&lt;/span&gt;.Equals(o.Type, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AppKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase));
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (claimKey == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;未能获取到应用标识&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; 
&lt;span&gt;78&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; claimKey.Value;
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; GetAppKeyPermissions(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; appKey)
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;             List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; li = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;83&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户明细&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户列表&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户录入&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户修改&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户删除&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;85&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; li;
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; 
&lt;span&gt;89&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ApiActionAuthorizeAttribute.cs&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;ApiBase.cs&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Controllers&lt;/span&gt;目录下的&lt;strong&gt;ApiBase.cs&lt;/strong&gt;文件，继承&lt;strong&gt;Microsoft.AspNetCore.Mvc.Controller&lt;/strong&gt;，具有&lt;strong&gt;Microsoft.AspNetCore.Authorization.Authorize&lt;/strong&gt;特性引用，用于让所有数据接口用途的控制器继承，定义有CurrentAppKey属性(来访应用程序的身份标识)并在&lt;strong&gt;OnActionExecuting&lt;/strong&gt;事件中统一分析Claims并赋值。&lt;/p&gt;
&lt;p&gt;通过验证之后，Aps.Net Core会在HttpContext.User.Claims中将将来访者的身份信息记录下来，我们可以通过该集合得到来访者的身份信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_9b998d43-406a-4397-8f5d-29bf2d4f7eab&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9b998d43-406a-4397-8f5d-29bf2d4f7eab&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9b998d43-406a-4397-8f5d-29bf2d4f7eab&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Http;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc.Filters;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Jwt.Gateway.Controllers
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    [Microsoft.AspNetCore.Authorization.Authorize]
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ApiBase : Microsoft.AspNetCore.Mvc.Controller
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; _CurrentAppKey = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; CurrentAppKey { &lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _CurrentAppKey; } }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnActionExecuting(ActionExecutingContext context)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; claims =&lt;span&gt; context.HttpContext.User.Claims.ToList();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; claim = claims.Find(o =&amp;gt; o.Type == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (claim == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;未通过认证&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; appKey =&lt;span&gt; claim.Value;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(appKey))
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appKey不合法&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;             _CurrentAppKey =&lt;span&gt; appKey;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnActionExecuting(context);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ApiBase.cs&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;TokenController.cs&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Controllers&lt;/span&gt;目录下的&lt;strong&gt;TokenController.cs&lt;/strong&gt;控制器文件，用于对调用方应用程序获取及注销Token。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;&lt;img id=&quot;code_img_closed_3c359145-b71b-4302-b9ec-3c30ac652609&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3c359145-b71b-4302-b9ec-3c30ac652609&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3c359145-b71b-4302-b9ec-3c30ac652609&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Http;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Jwt.Gateway.Controllers
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     [Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/[controller]/[action]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TokenController : Controller
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Configuration.IConfiguration _configuration;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; TokenController(Microsoft.Extensions.Configuration.IConfiguration configuration)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             _configuration =&lt;span&gt; configuration;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; /api/token/get&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; IActionResult Get(&lt;span&gt;string&lt;/span&gt; appKey, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; appPassword)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(appKey))
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;缺少appKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(appKey))
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;缺少appPassword&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (appKey != &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp;&amp;amp; appPassword != &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myPassword&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;固定的appKey及appPassword，实际项目中应该来自数据库或配置文件&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;配置不存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; key = &lt;span&gt;new&lt;/span&gt; Microsoft.IdentityModel.Tokens.SymmetricSecurityKey(System.Text.Encoding.UTF8.GetBytes(_configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JwtSecurityKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]));
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; creds = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Microsoft.IdentityModel.Tokens.SigningCredentials(key, Microsoft.IdentityModel.Tokens.SecurityAlgorithms.HmacSha256);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; claims = &lt;span&gt;new&lt;/span&gt; List&amp;lt;System.Security.Claims.Claim&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                 claims.Add(&lt;span&gt;new&lt;/span&gt; System.Security.Claims.Claim(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, appKey));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;仅在Token中记录appKey&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; token = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; System.IdentityModel.Tokens.Jwt.JwtSecurityToken(
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                         issuer: _configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JwtTokenIssuer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                         audience: _configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JwtTokenAudience&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                        claims: claims,
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                         expires: DateTime.Now.AddMinutes(&lt;span&gt;30&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                        signingCredentials: creds);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; Ok(&lt;span&gt;new&lt;/span&gt; Models.ApiResponse { status = &lt;span&gt;1&lt;/span&gt;, message = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, data = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler().WriteToken(token) });
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception ex)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; Ok(&lt;span&gt;new&lt;/span&gt; Models.ApiResponse { status = &lt;span&gt;0&lt;/span&gt;, message = ex.Message, data = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         
&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; /api/token/delete&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; IActionResult Delete(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; token)
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;code: 加入黑名单，使其无效&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt; 
&lt;span&gt;63&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Ok(&lt;span&gt;new&lt;/span&gt; Models.ApiResponse { status = &lt;span&gt;1&lt;/span&gt;, message = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, data = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt; 
&lt;span&gt;67&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;TokenController.cs&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;UsersController.cs&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Controllers&lt;/span&gt;目录下的&lt;strong&gt;UsersController.cs&lt;/strong&gt;控制器文件，继承&lt;strong&gt;ApiBase.cs&lt;/strong&gt;，作为数据调用示例。&lt;/p&gt;
&lt;p&gt;该控制器定义了对User对象常规的 &lt;span&gt;明细&lt;/span&gt;、&lt;span&gt;列表&lt;/span&gt;、&lt;span&gt;录入&lt;/span&gt;、&lt;span&gt;修改&lt;/span&gt;、&lt;span&gt;删除 &lt;/span&gt;&lt;span&gt;等操作。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41.5&quot;&gt;&lt;img id=&quot;code_img_closed_05dea5b2-3083-4b04-9e97-d8d194232208&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_05dea5b2-3083-4b04-9e97-d8d194232208&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_05dea5b2-3083-4b04-9e97-d8d194232208&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Jwt.Gateway.Controllers
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;     [Produces(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;     [Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/[controller]/[action]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersController : ApiBase
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt; 
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;         * 1.要访问访问该控制器提供的接口请先通过&quot;/api/token/get&quot;获取token
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;         * 2.访问该控制器提供的接口http请求头必须具有值为&quot;Bearer+空格+token&quot;的Authorization键，格式参考：
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;         *   &quot;Authorization&quot;=&quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiQXBwIiwiYXBwS2V5IjoibXlLZXkiLCJleHAiOjE1NTE3ODc2MDMsImlzcyI6IkdhdGV3YXkiLCJhdWQiOiJhdWRpZW5jZSJ9.gQ9_Q7HUT31oFyfl533T-bNO5IWD2drl0NmD1JwQkMI&quot;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;         &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt; 
&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 临时用户测试数据，实际项目中应该来自数据库等媒介
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;static&lt;/span&gt; List&amp;lt;Models.User&amp;gt; _Users = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;static&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; _Lock = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; UsersController()
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (_Users == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;                 &lt;span&gt;lock&lt;/span&gt;&lt;span&gt; (_Lock)
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (_Users == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;                         _Users = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Models.User&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;                         &lt;span&gt;var&lt;/span&gt; now =&lt;span&gt; DateTime.Now;
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;                         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;10&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt; num = i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;                             _Users.Add(&lt;span&gt;new&lt;/span&gt; Models.User { UserId = num, UserName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+num, UserPassword = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+num, UserJoinTime =&lt;span&gt; now });
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; /api/users/detail&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;         [ApiActionFilter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户明细&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; IActionResult Detail(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; userId)
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;            //获取appKey(在ApiBase中写入)
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;            var appKey = CurrentAppKey;
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;            //获取使用的权限(在ApiActionAuthorizeAttribute中写入)
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;            var permissions = HttpContext.Items[&quot;Permissions&quot;];
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;             &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt; 
&lt;span&gt; 55&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; user = _Users.Find(o =&amp;gt; o.UserId ==&lt;span&gt; userId);
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户不存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; 
&lt;span&gt; 61&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Ok(&lt;span&gt;new&lt;/span&gt; Models.ApiResponse { data = user, status = &lt;span&gt;1&lt;/span&gt;, message = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; /api/users/list&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;         [ApiActionFilter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户列表&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; IActionResult List(&lt;span&gt;int&lt;/span&gt; page, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size)
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;             page = page &amp;lt; &lt;span&gt;1&lt;/span&gt; ? &lt;span&gt;1&lt;/span&gt;&lt;span&gt; : page;
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;             size = size &amp;lt; &lt;span&gt;1&lt;/span&gt; ? &lt;span&gt;1&lt;/span&gt;&lt;span&gt; : size;
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; total =&lt;span&gt; _Users.Count();
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; pages = total % size == &lt;span&gt;0&lt;/span&gt; ? total / size : ((&lt;span&gt;long&lt;/span&gt;)Math.Floor((&lt;span&gt;double&lt;/span&gt;)total / size + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (page &amp;gt;&lt;span&gt; pages)
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; Ok(&lt;span&gt;new&lt;/span&gt; Models.ApiResponse { data = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Models.User&amp;gt;(), status = &lt;span&gt;1&lt;/span&gt;, message = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, total =&lt;span&gt; total });
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; li = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Models.User&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; startIndex = page * size -&lt;span&gt; size;
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; endIndex = startIndex + size - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (endIndex &amp;gt; total - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;                 endIndex = total - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(; startIndex &amp;lt;= endIndex; startIndex++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;                li.Add(_Users[startIndex]);
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Ok(&lt;span&gt;new&lt;/span&gt; Models.ApiResponse { data = li, status = &lt;span&gt;1&lt;/span&gt;, message = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, total =&lt;span&gt; total });
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; 
&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; /api/users/add&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;         [ApiActionFilter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户录入&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; IActionResult Add()
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Ok(&lt;span&gt;new&lt;/span&gt; Models.ApiResponse { status = &lt;span&gt;1&lt;/span&gt;, message = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; 
&lt;span&gt; 97&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; /api/users/update&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;         [ApiActionFilter(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;[] { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户修改&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户录入&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户删除&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },ApiActionFilterAttributeOption.AND)]
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; IActionResult Update()
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Ok(&lt;span&gt;new&lt;/span&gt; Models.ApiResponse { status = &lt;span&gt;1&lt;/span&gt;, message = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; 
&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; /api/users/delete&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;         [ApiActionFilter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户删除&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; IActionResult Delete()
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Ok(&lt;span&gt;new&lt;/span&gt; Models.ApiResponse { status = &lt;span&gt;1&lt;/span&gt;, message = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UsersController.cs&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;ApiCustomException.cs&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;MiddleWares&lt;/span&gt;目录下的&lt;strong&gt;ApiCustomException.cs&lt;/strong&gt;文件，是一个数据接口的统一异常处理中间件。&lt;/p&gt;
&lt;p&gt;该文件整理并抄袭自：https://www.cnblogs.com/ShenNan/p/10197231.html&lt;/p&gt;
&lt;p&gt;在此特别感谢一下作者的先行贡献，并请原谅我无耻的抄袭。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;&lt;img id=&quot;code_img_closed_d01140fa-5065-4da7-b3d6-4a8e13d54e5a&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d01140fa-5065-4da7-b3d6-4a8e13d54e5a&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d01140fa-5065-4da7-b3d6-4a8e13d54e5a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;85&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Http;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Builder;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.DependencyInjection;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Jwt.Gateway.MiddleWares
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参考： &lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/ShenNan/p/10197231.html&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; ApiCustomExceptionHandleType
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;         JsonHandle = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;         PageHandle = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;         Both = &lt;span&gt;2&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ApiCustomExceptionMiddleWareOption
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ApiCustomExceptionMiddleWareOption(
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;             ApiCustomExceptionHandleType handleType =&lt;span&gt; ApiCustomExceptionHandleType.JsonHandle,
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;             IList&amp;lt;PathString&amp;gt; jsonHandleUrlKeys = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; errorHandingPath = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;             HandleType =&lt;span&gt; handleType;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;             JsonHandleUrlKeys =&lt;span&gt; jsonHandleUrlKeys;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;             ErrorHandingPath =&lt;span&gt; errorHandingPath;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; ApiCustomExceptionHandleType HandleType { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; IList&amp;lt;PathString&amp;gt; JsonHandleUrlKeys { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; PathString ErrorHandingPath { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ApiCustomExceptionMiddleWare
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; RequestDelegate _next;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ApiCustomExceptionMiddleWareOption _option;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; IDictionary&amp;lt;&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; _exceptionStatusCodeDic;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ApiCustomExceptionMiddleWare(RequestDelegate next, ApiCustomExceptionMiddleWareOption option)
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;             _next =&lt;span&gt; next;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;             _option =&lt;span&gt; option;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;             _exceptionStatusCodeDic = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;                 { &lt;span&gt;401&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;未授权的请求&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;                 { &lt;span&gt;404&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;找不到该页面&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;                 { &lt;span&gt;403&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;访问被拒绝&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;                 { &lt;span&gt;500&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;服务器发生意外的错误&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;其余状态自行扩展&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; 
&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task Invoke(HttpContext context)
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;             Exception exception = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;                 &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _next(context);
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;                context.Response.Clear();
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;                 context.Response.StatusCode = &lt;span&gt;200&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;手动设置状态码(总是成功)&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;                 exception =&lt;span&gt; ex;
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;             &lt;span&gt;finally&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (_exceptionStatusCodeDic.ContainsKey(context.Response.StatusCode) &amp;amp;&amp;amp;
&lt;span&gt; 70&lt;/span&gt;                     !context.Items.ContainsKey(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExceptionHandled&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; errorMsg = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (context.Response.StatusCode == &lt;span&gt;500&lt;/span&gt; &amp;amp;&amp;amp; exception != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;                         errorMsg = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{_exceptionStatusCodeDic[context.Response.StatusCode]}\r\n{(exception.InnerException != null ? exception.InnerException.Message : exception.Message)}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;                         errorMsg =&lt;span&gt; _exceptionStatusCodeDic[context.Response.StatusCode];
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;                     exception = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Exception(errorMsg);
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (exception != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; handleType =&lt;span&gt; _option.HandleType;
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (handleType ==&lt;span&gt; ApiCustomExceptionHandleType.Both)
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;                         &lt;span&gt;var&lt;/span&gt; requestPath =&lt;span&gt; context.Request.Path;
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;                         handleType = _option.JsonHandleUrlKeys != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; _option.JsonHandleUrlKeys.Count(
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;                             k =&amp;gt; requestPath.StartsWithSegments(k, StringComparison.CurrentCultureIgnoreCase)) &amp;gt; &lt;span&gt;0&lt;/span&gt; ?
&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;                            ApiCustomExceptionHandleType.JsonHandle :
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;                            ApiCustomExceptionHandleType.PageHandle;
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; 
&lt;span&gt; 95&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (handleType ==&lt;span&gt; ApiCustomExceptionHandleType.JsonHandle)
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;                         &lt;span&gt;await&lt;/span&gt;&lt;span&gt; JsonHandle(context, exception);
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;                         &lt;span&gt;await&lt;/span&gt;&lt;span&gt; PageHandle(context, exception, _option.ErrorHandingPath);
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Jwt.Gateway.Models.ApiResponse GetApiResponse(Exception ex)
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Jwt.Gateway.Models.ApiResponse() { status = &lt;span&gt;0&lt;/span&gt;, message =&lt;span&gt; ex.Message };
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task JsonHandle(HttpContext context, Exception ex)
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; apiResponse =&lt;span&gt; GetApiResponse(ex);
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; serialzeStr =&lt;span&gt; Newtonsoft.Json.JsonConvert.SerializeObject(apiResponse);
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;             context.Response.ContentType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;             &lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.Response.WriteAsync(serialzeStr, System.Text.Encoding.UTF8);
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task PageHandle(HttpContext context, Exception ex, PathString path)
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;             context.Items.Add(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Exception&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ex);
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; originPath =&lt;span&gt; context.Request.Path;
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;             context.Request.Path =&lt;span&gt; path;
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;                 &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _next(context);
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; { }
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;             &lt;span&gt;finally&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;                 context.Request.Path =&lt;span&gt; originPath;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ApiCustomExceptionMiddleWareExtensions
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IApplicationBuilder UseApiCustomException(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; IApplicationBuilder app, ApiCustomExceptionMiddleWareOption option)
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; app.UseMiddleware&amp;lt;ApiCustomExceptionMiddleWare&amp;gt;&lt;span&gt;(option);
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ApiCustomException.cs&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;配置相关&lt;/h3&gt;
&lt;h4&gt;appsettings.json&lt;/h4&gt;
&lt;p&gt;算法'HS256'要求SecurityKey.KeySize大于'128'位，所以JwtSecurityKey可不要太短了哦。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_dd706d8e-3bfe-460c-adda-326828f8f84f&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dd706d8e-3bfe-460c-adda-326828f8f84f&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dd706d8e-3bfe-460c-adda-326828f8f84f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Urls&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:60000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AllowedHosts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JwtSecurityKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;areyouokhhhhhhhhhhhhhhhhhhhhhhhhhhh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JwtTokenIssuer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jwt.Gateway&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JwtTokenAudience&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;appsettings.json&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;Startup.cs&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;关于JWT的配置可以在通过JwtBearerOptions加入一些自己的事件处理逻辑，共有4个事件可供调用：&lt;span&gt;OnAuthenticationFailed&lt;/span&gt;,&lt;span&gt;OnMessageReceived&lt;/span&gt;,&lt;span&gt;OnTokenValidated&lt;/span&gt;,&lt;span&gt;OnChallenge&lt;/span&gt;, 本示例中是在&lt;span&gt;OnTokenValidated&lt;/span&gt;中插入&lt;span&gt;Token黑名单&lt;/span&gt;的校验逻辑。黑名单应该是Jwt应用场景中主动使Token过期的主流做法了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_8b419a5a-a251-4aa0-a334-47fb23b2f6ee&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8b419a5a-a251-4aa0-a334-47fb23b2f6ee&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8b419a5a-a251-4aa0-a334-47fb23b2f6ee&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Builder;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Hosting;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Http;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Jwt.Gateway.MiddleWares;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.DependencyInjection;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Jwt.Gateway
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Startup
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Configuration.IConfiguration _configuration;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Startup(Microsoft.Extensions.Configuration.IConfiguration configuration)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             _configuration =&lt;span&gt; configuration;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            services.AddAuthentication(Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 .AddJwtBearer(options =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                     options.Events = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerEvents
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;OnMessageReceived = context =&amp;gt;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                            context.Token = context.Request.Query[&quot;access_token&quot;];
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                            return Task.CompletedTask;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                        },&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;                         OnTokenValidated = context =&amp;gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt; token =&lt;span&gt; ((System.IdentityModel.Tokens.Jwt.JwtSecurityToken)context.SecurityToken).RawData;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (InBlacklist(token))
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                            {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                                 context.Fail(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token in blacklist&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Task.CompletedTask;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                    };
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                     options.TokenValidationParameters = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Microsoft.IdentityModel.Tokens.TokenValidationParameters
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                         ValidateIssuer = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                         ValidateAudience = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                         ValidateLifetime = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                         ValidateIssuerSigningKey = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                         ValidAudience = _configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JwtTokenAudience&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                         ValidIssuer = _configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JwtTokenIssuer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                         IssuerSigningKey = &lt;span&gt;new&lt;/span&gt; Microsoft.IdentityModel.Tokens.SymmetricSecurityKey(System.Text.Encoding.UTF8.GetBytes(_configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JwtSecurityKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;                    };
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;                });
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;             services.AddMvc().AddJsonOptions(option=&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;                 option.SerializerSettings.DateFormatString = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyy-MM-dd HH:mm:ss.fff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configure(IApplicationBuilder app, IHostingEnvironment env)
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (env.IsDevelopment())
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;                app.UseDeveloperExceptionPage();
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt;             app.UseApiCustomException(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ApiCustomExceptionMiddleWareOption(
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;                     handleType: ApiCustomExceptionHandleType.Both,
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;                      jsonHandleUrlKeys: &lt;span&gt;new&lt;/span&gt; PathString[] { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/api&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;                      errorHandingPath: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/home/error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; 
&lt;span&gt;71&lt;/span&gt; &lt;span&gt;            app.UseAuthentication();
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt; &lt;span&gt;            app.UseMvc();
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; 
&lt;span&gt;76&lt;/span&gt; 
&lt;span&gt;77&lt;/span&gt; 
&lt;span&gt;78&lt;/span&gt;         &lt;span&gt;bool&lt;/span&gt; InBlacklist(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; token)
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;code: 实际项目中应该查询数据库或配置文件进行比对&lt;/span&gt;
&lt;span&gt;81&lt;/span&gt; 
&lt;span&gt;82&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; 
&lt;span&gt;85&lt;/span&gt; 
&lt;span&gt;86&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Startup.cs&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;Program.cs&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_a68d9bf1-fe11-430e-9c48-dc33110ff874&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a68d9bf1-fe11-430e-9c48-dc33110ff874&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a68d9bf1-fe11-430e-9c48-dc33110ff874&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Hosting;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Configuration;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Logging;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Jwt.Gateway
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            BuildWebHost(args).Run();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IWebHost BuildWebHost(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; config = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConfigurationBuilder()
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                .SetBasePath(Directory.GetCurrentDirectory())
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 .AddJsonFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appsettings.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, optional: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                .Build();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; WebHost.CreateDefaultBuilder(args)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                .UseKestrel()
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                .UseConfiguration(config)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 .UseStartup&amp;lt;Startup&amp;gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                .Build();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Program.cs&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;运行截图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1563651/201903/1563651-20190307234511305-1870202987.png&quot; alt=&quot;运行截图-获取Token&quot;/&gt;&lt;span&gt;[运行截图-获取Token]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1563651/201903/1563651-20190308000156226-1840303944.png&quot; alt=&quot;运行截图-配置Fiddler调用接口获取数据&quot;/&gt;&lt;span&gt;[运行截图-配置Fiddler调用接口获取数据]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1563651/201903/1563651-20190308000226558-419698161.png&quot; alt=&quot;运行截图-获取到数据&quot;/&gt;&lt;span&gt;[运行截图-获取到数据]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果Token校验失败将会返回401错误！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 如果你发现有错误，请善意指出，谢谢！&lt;/p&gt;

</description>
<pubDate>Thu, 07 Mar 2019 16:19:00 +0000</pubDate>
<dc:creator>如兹</dc:creator>
<og:description>近日，应一位朋友的邀请写了个Asp.Net Core基于JWT认证的数据接口网关Demo。朋友自己开了个公司，接到的一个升级项目，客户要求用Aps.Net Core做数据网关服务且基于JWT认证实现对</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ruzi/p/10493501.html</dc:identifier>
</item>
<item>
<title>我们为什么要搞长沙.NET技术社区（4） - 溪源More</title>
<link>http://www.cnblogs.com/xiyuanMore/p/10493331.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiyuanMore/p/10493331.html</guid>
<description>&lt;p align=&quot;right&quot;&gt;邹溪源，2019年3月7日&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;Ps:文中的.NET 包括且不限定于传统.NET Framework技术和.NET Core技术。&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;1.    楔子&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;　&lt;span&gt;　昨天（2019年3月6日）晚餐时间，有幸得到长沙技术圈资深.NET开发者出生的企业家、湖南华邦互联有限公司董事长赵总的赞助，同时他也亲自从河东过来，对我们的社区建设提供支持和鼓励，让我们了解到我们未来可以奋斗的方向，也体会到自己的责任和不足，相信有了赵总以及以赵总为代表的长沙IT企业家们的大力支持，我们的社区将迎来新的发展契机。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;2.        2019年，DotNET转折之年&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;　　2019年的今天，对.NET技术而言，是一个充满了挑战和机遇的新的时代。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　曾经，这是个最好的时代。不到20年前今天，微软推出.NET技术，席卷全球，在信息化转型升级过程中，实现了大跨越式的发展，.NET的春风吹遍大江南北，激励了包括著名MVP汪宇杰等在内的无数开发者，加入行列之中，为了实现自己的梦想而奋斗。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　今天，这是个最差的时代。信息化时代的辉煌，在十年前开始逐渐没落，随着互联网和移动互联网两波浪潮的兴起，让故步自封的.NET技术以及使用.NET技术构建的应用逐渐成为遗留应用，更让那些坚守.NET技术的企业成为了封闭的象征。尤其是随着大中专院校和培训机构不再开设.NET课程，更是让市场面临釜底抽薪青黄不接的窘迫，也有不少企业面临了生存的困难。不少企业为了减少招人难造成的损失，不得不转到其他语言，让.NET技术体系遭遇了雪上加霜。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　对于.NET而已，难道还有比现在更加悲惨的时代吗？&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　然而，危机向来与机遇并存，只有真正的勇敢者，才敢于在风口浪尖中保持冷静。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　或许大家有许多人依然记得几年前的故事，一场3Q大战，两家优秀的互联网企业互相撕逼，上演了一出绝无仅有的闹剧，并最终以被工信部各打三十大板收场。当时，对于腾讯来说，大概是最难受的时候了吧？然而，腾讯化危机为机遇，用更加开放的态度去对待他的用户和市场，也让其成为中国互联网市场的一座顶梁支柱。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　对于.NET开发者来说，我们现在就是面临的，正是这样的机遇。2019年对于.NET来说，更是一个非常重要的转折之年，如果说过去若干年，大家以为付出全靠微软，那么大家此刻应该明白，是微软+企业+所有开发者的力量，共同成就了今天的.NET，三者每一环都同样重要，都缺一不可。&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;3.    我们想做什么&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;那么多宏大的商界故事，或许远非我们所能掌控，而此刻的我们，能掌控的，大概只有我们自己。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　或许我们曾经想过去改变世界的一万种办法，但是那些宏大的目标，只会让我们觉得自己更加卑微且疲惫。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　作为草根出生的我们，看似只是历史蓝图中的微不足道，却依然是自己的主人。借助互联网为媒介，以互联网之精神，可以让我们更加珍惜此刻的不容易，也让我们有办法去影响自己的周围，并或许最终有办法改变世界，那就是我们应该做的是那些我们愿意做、且最擅长做的事情。例如，写代码，并写更加优雅的代码等等，这些也许看似微小的事情，让我们成长至今，并受益颇多。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　例如，多写一些博客并坚持写博客，实现自己技术沉淀的同时，也能为他人提供帮助。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　例如，多参与开源项目，做一些大家需要的好轮子，也可以提高自己对于技能的领悟能力。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　例如，翻译书籍，甚至出版书籍，既是对自己的工作经验的归纳总结，更是为后人留下宝贵的财富。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　例如，多参与社区活动，并为大家积极分享你遇到的问题和解决问题的思路，看起来简单，却非常有价值的分享，往往会给大家打开了新的窗口。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　诸如此类，我们可以做的事情很多很多。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　历史之车轮滚滚向前，互联网的价值理念已经深入人心，我们都是一群有梦想的年轻人，不管生活多么困难，都改变不了我们对于梦想的追求。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;strong&gt;　　我们每个人渴望创造价值，我们都渴望创造每个人自己的品牌。这就是我们社区的期待。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;4.    三个问题&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;我们为什么选择IT？我们未来可以干什么？我们现在该怎么做？&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　当敲下这个系列文章的第一篇第一个字的时候，我就在思考这三个问题。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　我们为什么选择IT，有人为的是自己的梦想，更多的人是为了让改变自己的生活。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　难道有一天，脱离了这个行业，我们还有其他更多选择的余地么？&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　在这个浮躁的时代，我们曾经或许想过干到35岁就不再干IT，去找一个别的工作干一干，然而，这显然是不太现实的。在互联网时代岗位逐渐细分的今天，我们其实已经如同我们的父辈们一般，在IT这个新兴产业中成为了一颗颗螺丝钉。而且我相信我们的未来若干年都将围绕IT而生存。IT首先改变了我们的生活方式，其次改变了我们的一生。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　我们认为，既然选择了她，就应该把她当作终身事业去奋斗。不管我们以前做过什么，我们都可以去尝试改变自己的生活方式。&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;5.    那些我们认为的关键&lt;/h2&gt;
&lt;h3&gt;1)     贵在坚持&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;前几天跟长沙互联网社区领袖唐胡子交流，他说做一个社区不难，最难的是坚持。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　在中国，最常见的一些活动，都是运动式的活动。例如，三月份的学习雷锋日，有一种说法是，“雷锋叔叔没户口，三月来了四月走”，讽刺的就是这种热了几天就没有的活动。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　作为一个由草根自发组成而来的小社区，如何让参与者都能获得收获，发展壮大，并持之以恒，是最困难也最有价值的事情。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;2)   贵在团结一致&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;打造一个开放的技术社区，不局限于一家公司，一种语言，一种业务形态，用开放的心态去包容和团结一切可以团结的人，所有的开发者，或者其他从业人员。每个人都可以成为社区的参与者，并作出贡献。大家齐心协力，总有办法改变小气候，进而影响大环境。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3)   贵在有产出&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;如果只是单纯的拉人做活动，固然维系了线下的关系，但是却容易进入交际疲劳，往往活动的参与者只能是那几个爱好者。我们认为这样的社区，并没有太多意义。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;strong&gt;　　关键依然是要有产出，要有持续的产出。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　例如，一年产生了很多位MVP，多出了许多位出教程的开发者，做出了许多超过百星乃至千星的开源组件或产品，那么这个社区的影响力将无与伦比。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　如果是三年内，出版了三本书？那更是无比的荣耀了。&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;6.    展望&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;在中部崛起的大战略方针中，长沙是产业互联网的先锋力量，而长沙本土数以百计的IT企业，正有望成为时代的焦点，而作为企业重要参与者和创造力来源的开发者们，你们正是这个时代最为重要的弄潮儿，让我们一起努力共建和谐美好开放共赢的互联网时代新型技术社区，一起去迎接未来美好的朝阳。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　我们要做社区，不是喊口号，不是做文案，最终能否成功，依然取决于此刻做决定的每一位开发者和以及你心中的执着追求。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　社区，不能是几位理想主义者们闭门造车的独嗨，而是大家齐心参与的快乐。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　加油吧，新时代的健儿们！&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;7.    社区现在在做什么&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;我们计划本周日（2019年3月10日）举办第一次技术交流活动，之后将开始筹备四月份的开幕仪式大会，除此之外还有一系列社区活动和兴趣小组，我们将需要每一位优秀开发者的积极参与，只有大家都来参与，这样的社区，才能称为真正的社区。&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;8.    《互联网时代的弄潮儿》&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;也许你没听到，&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;或者你没看到。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;或许你甚至没感觉到。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;但是她已经来了。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;如同一道洒满大地清晨的曙光。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;又如一缕吹彻云霄清风。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;也许，她只是一位匆匆而来的访客。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;从九十年代，跨越20年。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;从泡沫，到泡沫。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;也许曾经非常熟稔，&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;从四十年代，启蒙之光埃尼阿克的诞生。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;到引领时代的浪潮。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;她终于成为时代的宠儿。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;每一次呼唤。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;都带来一阵脉动。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;每一次震颤。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;都带来一场革命。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;从电商平台而始。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;到金融领域而始。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;到物流行业。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;到零售行业。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;都以为她将烟消云散。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;如20年前一般。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;匆匆而来，似水中泡沫。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;然而，她将永久屹立不倒。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;大势，如滔滔江水。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;逆流者将一无所有。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;她才是时代的脉搏。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;互联网滚滚浪潮。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;奔流不息。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;看时代的弄潮儿，&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt; 迎难而上。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;看这苍茫之大地，&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;谁主沉浮！！！&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;作者溪源，本诗最早载于湖南银河电气内刊《思索》杂志。&lt;/strong&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　关注公众号【MoreDotNetCore】了解更多社区资讯，查看社区活动详情，请查看&lt;a href=&quot;https://github.com/china-net-community/changsha-community-huodong&quot;&gt;https://github.com/china-net-community/changsha-community-huodong&lt;/a&gt;。&lt;/p&gt;
</description>
<pubDate>Thu, 07 Mar 2019 15:29:00 +0000</pubDate>
<dc:creator>溪源More</dc:creator>
<og:description>我们为什么要搞长沙.NET技术社区（4） 邹溪源，2019年3月7日 Ps:文中的.NET 包括且不限定于传统.NET Framework技术和.NET Core技术。 1. 楔子 昨天（2019年3</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiyuanMore/p/10493331.html</dc:identifier>
</item>
<item>
<title>进阶篇 第6章 函数 - 牧牛人</title>
<link>http://www.cnblogs.com/ooo888ooo/p/10360650.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ooo888ooo/p/10360650.html</guid>
<description>&lt;h2&gt; 6.1函数的创建和调用&lt;/h2&gt;
&lt;p&gt;提到函数，大家会想到数学函数吧，函数是数学最重要的一个模块，贯穿整个数学学习过程。在Python中，函数的应用非常广泛。在前面我们已经多次接触过函数。例如，用于输出的print() 函数、用于输出的input() 函数及用于生成一系列整数的range() 函数，这些都是Python内置的标志函数，可以直接使用。除了可以直接使用的标准函数外，Python还支持自定义函数。即通过将一段有规律的，重复的代码定义为函数，来达到一次编写、多次调用的目的。使用函数可以提高代码的重复利用率。&lt;/p&gt;
&lt;h3&gt;6.1.1 创建一个函数&lt;/h3&gt;
&lt;p&gt; 创建函数也称为定义函数，可以理解为创建一个具有某种用途的工具。使用def 关键字实现，具体的语法格式如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; functionname([parameterlist]):
    [&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;comments&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;]
    [functionbody]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;functionname：函数名称，在调用函数时使用。&lt;/li&gt;
&lt;li&gt;parameterlist：可选参数，用于指定向函数中传递的参数。如果有多个参数，各参数间使用逗号“,”分隔。如果不指定，则表示该函数没有参数，在调用时也不指定参数。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意：即使函数没有参数，也必须保留一对空的“()”，否则将显示下图所示错误提示对话框。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1372012/201902/1372012-20190227231320358-475042014.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;语法错误对话框&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;'''comments'''：可选参数，表示为函数指定注释，注释的内容通常是说明该函数的功能、要传递的参数的作用等，可以为用户提供友好提示和帮助的内容。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;说明：……&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;functionbody：可选参数，用于指定函数体，即该函数被调用后，要执行的功能代码。如果函数有返回值，可以使用return语句返回。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意：函数体“functionbody”和注释“'''comments'''”相对于def关键字必须保持一定的缩进。&lt;/p&gt;
&lt;p&gt;说明：如果想定义一个什么也不做的空函数，可以使用pass语句作为占位符。&lt;/p&gt;
&lt;p&gt;例如，定义一个过滤危险函数filterchar()，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; filterchar(string):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;功能：过滤危险字符（如黑客），并将过滤后的结果输出
    about：要过滤的字符串
    没有返回值
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;import&lt;/span&gt; re                               &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 导入Python的re模块&lt;/span&gt;
    pattern = r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(黑客)|(抓包)|(监听)|(Trojan)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 模式字符串&lt;/span&gt;
    sub = re.sub(pattern,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@_@&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,string)          &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 进行模式替换&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(sub)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行上面的代码，将不显示任何内容，也不会抛出异常，因为filterchar() 函数还没有被调用。&lt;/p&gt;
&lt;h3&gt;6.1.2 调用函数&lt;/h3&gt;
&lt;p&gt;调用函数也就是执行函数。如果把创建的函数理解为创建一个具有某种用途的工具，那么调用函数就相当于使用该工具。调用函数的基本语法格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
functionname([parametersvalue])
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;functionname：函数名称，要调用的函数名称必须是已经创建好的。&lt;/li&gt;
&lt;li&gt;parametersvalue：可选参数，用于指定各个参数的值。如果需要传递多个参数值，则各个参数间使用逗号“,” 分隔。如果该函数没有参数，则直接写一对小括号即可。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如，调用在6.1.1 小节创建的filterchar() 函数，可以使用下面的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;p&gt;def filterchar(string):&lt;br/&gt;'''功能：过滤危险字符（如黑客），并将过滤后的结果输出&lt;br/&gt;about：要过滤的字符串&lt;br/&gt;没有返回值&lt;br/&gt;'''&lt;br/&gt;import re # 导入Python的re模块&lt;br/&gt;pattern = r'(黑客)|(抓包)|(监听)|(Trojan)' # 模式字符串&lt;br/&gt;sub = re.sub(pattern,'@_@',string) # 进行模式替换&lt;br/&gt;print(sub)&lt;br/&gt;about = '我是一名程序员，喜欢看黑客方面的图书，想研究一个Trojan。'&lt;br/&gt;filterchar(about)&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;调用filterchar() 函数后，将显示如下结果。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
我是一名程序员，喜欢看@_@方面的图书，想研究一个@_@。
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;场景模拟：第4章的实例01实现了每日一贴功能，但是这段代码只能执行一次，如果想要再次输出，还需要再重新写一遍。如果把这段代码定义为一个函数，那么就可以多次显示每日一贴了。&lt;/p&gt;
&lt;p&gt;实例01：输出每日一贴（共享版）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function_tips():
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;功能：每天输出一条励志文字
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;import&lt;/span&gt; datetime                                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 导入日期时间类&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 定义一个列表&lt;/span&gt;
    mot = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天星期一:\n人生充满了不确定，和惊喜。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天星期二:\n人生亦可燃烧，亦可腐败，我愿燃烧，耗尽所有的光芒。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天星期三:\n毅力和耐性在某种程度上将决定一个人会成为什么样的人。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天星期四:\n微笑拥抱每一天，做像向日葵般温暖的女子。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天星期五:\n志在峰巅的攀登者，不会陶醉在沿途的某个脚印之中。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天星期六:\n别小看任何人，越不起眼的人。往往会做些让人想不到的事。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天星期日:\n我们可以失望，但不能盲目。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
    day &lt;/span&gt;= datetime.datetime.now().weekday()         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取当期星期&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(mot[day])                                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 输出每日一贴&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;*******************调用函数************************#&lt;/span&gt;
function_tips()          &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调用函数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;今天星期六:
别小看任何人，越不起眼的人。往往会做些让人想不到的事。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;6.2 参数传递&lt;/h2&gt;
&lt;p&gt;在调用函数时，大多数情况下，主要函数和被调用函数之间有数据传递关系，这就是有参数的函数形式。函数参数的作用是传递数据给函数使用，函数利用接收的数据进行具体的操作处理。&lt;/p&gt;
&lt;p&gt;函数参数在定义函数时放在函数名称的后面的一对小括号中。&lt;/p&gt;
&lt;h3&gt;6.2.1 了解形式参数和实际参数&lt;/h3&gt;
&lt;p&gt;在使用函数时，经常会用到形式参数和实际参数，二者都叫作参数，它们的区别将通过形式参数与实际参数的作用来进行讲解，再通过一个比喻和实例进行深入探讨。&lt;/p&gt;
&lt;h4&gt;1.通过作用理解&lt;/h4&gt;
&lt;p&gt;形式参数和实际参数在作用上的区别如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;形式参数：在定义函数时，函数名后面括号中的参数为“形式参数”。&lt;/li&gt;
&lt;li&gt;实际参数：在调用一个函数时，函数名后面括号中的参数为“实际参数”，也就是将函数的调用者提供给函数的参数称为实际参数。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;根据实际参数的类型不同，可以分为将实际参数的值传递给形式参数和将实际参数的引用传递给形式参数两种情况。其中，当实际参数为不可变对象时，进行值传递；当实际参数为可变对象时，进行的是引用传递。实际上，值传递和引用传递的基本区别就是，进行值传递后，改变形式参数的值，实际参数的值不变；而进行引用传递后，改变形式参数的值，实际参数的值也一同改变。&lt;/p&gt;
&lt;p&gt;例如，定义一个名称为demo 的函数，然后为demo() 函数传递一个字符串类型的变量作为参数（代表值传递），并在函数调用前后分别输出该字符串变量，再为demo() 函数传递以下列表类型的变量作为参数（代表引用传递），并在函数调用前后分别输出该列表。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 定义函数&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; demo(obj):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;原值:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,obj)
    obj &lt;/span&gt;+=&lt;span&gt; obj
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调用函数&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;==========值传递==========&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
mot &lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;唯有在被追赶的时候，你才能真正地奔跑。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;函数调用后：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,mot)
demo(mot)                           &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 采用不可变对象——字符串&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;函数调用后:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,mot)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;==========引用传递===========&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
list1 &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;李白&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;杜甫&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;白居易&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;李清照&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;函数调用前:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,list1)
demo(list1)                         &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 采用可变对象——列表&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;函数调用后:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,list1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面代码的执行结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
==========值传递==========&lt;span&gt;
函数调用后： 唯有在被追赶的时候，你才能真正地奔跑。
原值: 唯有在被追赶的时候，你才能真正地奔跑。
函数调用后: 唯有在被追赶的时候，你才能真正地奔跑。
&lt;/span&gt;==========引用传递===========&lt;span&gt;
函数调用前: [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;李白&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;杜甫&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;白居易&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;李清照&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
原值: [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;李白&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;杜甫&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;白居易&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;李清照&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
函数调用后: [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;李白&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;杜甫&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;白居易&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;李清照&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;李白&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;杜甫&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;白居易&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;李清照&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;从上面的执行结果中可以看出，在进行值传递时，改变形式参数的值后，实际参数的值不改变；在进行引用传递时，改变形式参数的值后，实际参数的值也发生改变。&lt;/p&gt;
&lt;h4&gt; 2. 通过一个比喻来理解形式参数和实际参数&lt;/h4&gt;
&lt;p&gt;函数定义时参数列表中的参数就是形式参数，而函数调用时传递进来的参数就是实际参数。就像剧本选主角一样，剧本的角色相当于形式参数，而演角色的演员就相当于实际参数。&lt;/p&gt;
&lt;p&gt;实例02：根据身高、体重计算BMI 指数（共享版）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; fun_bmi(person,height,weight):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;功能：根据身高和体重计算BMI指数
        person：姓名
        height：身高，单位：米
        weight：体重，单位：千克
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
                     
    &lt;span&gt;print&lt;/span&gt;(person + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;的身高:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(height) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;米\t体重:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(weight) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;千克&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    bmi&lt;/span&gt;=weight/(height*height)                  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用于计算BMI指数，公式为：BMI=体重/身高的平方&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(person + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;的BMI指数为:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+str(bmi))     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 输出BMI指数&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断身材是否合理&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; bmi&amp;lt;18.5&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您的BMI指数为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+str(bmi))       &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 输出BMI指数&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;体重过轻 ～@_@～&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; bmi&amp;gt;=18.5 &lt;span&gt;and&lt;/span&gt; bmi&amp;lt;24.9&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您的BMI指数为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+str(bmi))       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出BMI指数&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正常范围，注意保持(－＿－)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; bmi&amp;gt;=24.9 &lt;span&gt;and&lt;/span&gt; bmi&amp;lt;29.9&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您的BMI指数为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+str(bmi))       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出BMI指数&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;体重过重 ～@＿@～&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; bmi&amp;gt;=29.9&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您的BMI指数为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+str(bmi))       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出BMI指数&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;肥胖^@＿@^&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; **********************************调用函数************************************* #&lt;/span&gt;
fun_bmi(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;路人甲&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,1.83,60)                       &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算路人甲的BMI指数&lt;/span&gt;
fun_bmi(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;路人乙&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,1.60,50)                       &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算路人乙的BMI指数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果如下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
路人甲的身高:1&lt;span&gt;.83米    体重:60千克
路人甲的BMI指数为:&lt;/span&gt;17.916330735465376&lt;span&gt;
您的BMI指数为：&lt;/span&gt;17.916330735465376&lt;span&gt;
体重过轻 ～@_@～
路人乙的身高:&lt;/span&gt;1&lt;span&gt;.6米    体重:50千克
路人乙的BMI指数为:&lt;/span&gt;19.531249999999996&lt;span&gt;
您的BMI指数为：&lt;/span&gt;19.531249999999996&lt;span&gt;
正常范围，注意保持(－＿－)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;从该实例代码和运行结果可以看出：&lt;/p&gt;
&lt;p&gt;（1）定义一个根据身高、体重计算BMI指数的函数fun_bmi()，在定义函数时指定的变量person、height和weight称为形式参数。&lt;/p&gt;
&lt;p&gt;（2）在函数fun_bmi()中根据形式参数的值计算BMI指数，并输出相应的信息。&lt;/p&gt;
&lt;p&gt;（3）在调用fun_bmi()函数时，指定的“路人甲”、1.83和60等都是实际参数，在函数执行时，这些值将被传递给对应的形式参数。&lt;/p&gt;
&lt;h3&gt;6.2.2 位置参数&lt;/h3&gt;
&lt;p&gt;位置参数也称必备参数，是必须按照正确的顺序传到函数中，即调用时的数量和位置必须和定义时是一样的。&lt;/p&gt;
&lt;h4&gt;1. 数量必须与定义时一致&lt;/h4&gt;
&lt;p&gt;在调用函数时，指定的实际参数的数量必须与形式参数的数量一致，否则将抛出TypeError异常，提示缺少必要的位置参数。&lt;/p&gt;
&lt;h4&gt;2. 位置必须与定义时一致&lt;/h4&gt;
&lt;p&gt;在调用函数时，指定的实际参数的位置必须与形式参数的位置一致，否则将产生以下两种结果。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;抛出TypeError异常&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;抛出异常的情况主要是因为实际参数的类型与形式参数的类型不一致，并且在函数中，这两种类型还不能正常转换。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;产生的结果与预期不符&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在调用函数时，如果指定的实际参数与形式参数的位置不一致，但是它们的数据类型一致，那么就不会抛出异常，而是产生结果与预期不符的问题。&lt;/p&gt;
&lt;p&gt;说明：由于调用函数时，传递的实际参数的位置与形式参数的位置不一致时，并不会总是抛出异常，所以在调用函数时一定要确定好位置，否则产生Bug，还不容易被发现。&lt;/p&gt;
&lt;h3&gt;6.2.3 关键字参数&lt;/h3&gt;
&lt;p&gt;关键字参数是指使用形式参数的名字来确定输入的参数值。通过该方式指定实际参数时，不再需要与形式参数的位置完全一致。只要将参数名字写正确即可。这样可以避免用户需要牢记的参数位置的麻烦，适当函数的调用和参数传递更急灵活方便。&lt;/p&gt;
&lt;h3&gt;6.2.4 为参数设置默认值&lt;/h3&gt;
&lt;p&gt;调用函数时，如果没有指定某个参数将抛出异常，为了解决这个问题，我们可以为参数设置默认值，即在定义函数时，直接指定形式参数的默认值。这样，当没有传入参数时，则直接使用定义函数时设置的默认值。定义带有默认值参数的函数的语法格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt; functionname(...,[parameter1 =&lt;span&gt; defaultvalue1]):
    [functionbody]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;functionname：函数名称，在调用函数时使用。&lt;/li&gt;
&lt;li&gt;parameter = defaultvalue1：可选参数，用于指定向函数中传递的参数，并且为该参数设置默认值为defaultvalue1。&lt;/li&gt;
&lt;li&gt;functionbody：可选参数，用于指定函数体，即该函数被调用后，要执行的功能代码。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意：在定义函数时，指定默认的形式参数必须在所有参数的最后，否则将产生语法错误。&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h3&gt;6.2.5 可变参数&lt;/h3&gt;
&lt;p&gt; 在Python中，还可以定义可变参数。可变参数也称不定长参数，即传入函数中的实际参数可以是任意多个。&lt;/p&gt;
&lt;p&gt;定义可变参数时，主要有两种形式：一种是*parameter，另一种是**parameter。&lt;/p&gt;
&lt;h4&gt;1. *parameter&lt;/h4&gt;
&lt;p&gt;这种形式表示接收任意多个实际参数并将其放到一个元组中。例如，定义一个函数，让其可以接收任意多个实际参数，代码如下：&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h4&gt;2. **parameter&lt;/h4&gt;
&lt;p&gt;这种形式表示接收任意多个类似关键参数一样显示赋值的实际参数，并将其放到一个字典中。例如，定义一个函数，让其可以接收任意多个显示赋值的实际参数，代码如下：&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h2&gt;6.3 返回值&lt;/h2&gt;
&lt;p&gt;到目前为止，我们创建的函数都只是为我们做一些事，做完了就结束。但实际上，有时还需要对事情的结果进行获取。这类似于主管向下级职员下达命令，职员去做，最后需要将结果报告给主管。为函数设置返回值的作用就是将函数的处理结果返回给调用它的程序。&lt;/p&gt;
&lt;p&gt;在Python中，可以在函数体内使用return语句为函数指定返回值，该返回值可以是任意类型，并且无论return语句出现在函数的什么位置，只要得到执行，就会直接结束函数的执行。&lt;/p&gt;
&lt;p&gt;return语句的语法格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt; [value]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;value：可选参数，用于指定要返回的值，可以返回一个值，也可以返回多个值。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;为函数指定返回值后，在掉用函数时，可以把它赋给一个变量（如result），用于保存函数的返回结果。如果返回一个值，那么result中保存的就是返回的一个值，该值可以为任意类型。如果返回多个值，那么result 中保存的是一个元组。&lt;/p&gt;
&lt;p&gt;说明：当函数中没有return 语句时，或者省略了return 语句的参数时，将返回None，即返回空值。&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h2&gt;6.4 变量的作用域&lt;/h2&gt;
&lt;p&gt;变量的作用域是指程序代码能够访问该变量的区域，如果超出该区域，在访问时就会出现错误。在程序中，一般会根据变量的“有效范围”将变量分为“全局变量”和“局部变量”。&lt;/p&gt;
&lt;h3&gt;6.4.1 局部变量&lt;/h3&gt;
&lt;p&gt;局部变量是指在函数内部定义并使用的变量，它只在函数内部有效。即函数内部的名字只在函数运行时才会创建，在函数运行之前或者运行完毕之后，所有的名字就都不存在了。所以，如果在函数外部用函数内部定义的变量，就会出现抛出NameError异常。&lt;/p&gt;
&lt;h3&gt;6.4.2 全局变量&lt;/h3&gt;
&lt;p&gt;与局部变量对应，全局变量为能过作用于函数内外的变量。全局变量主要有以下两种情况：&lt;/p&gt;
&lt;p&gt;（1）如果一个变量，在函数外定义，那么不仅在函数外可以访问函数，在该函数内输出全局变量message 的值，代码如下：&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;说明：当局部变量与全局变量重名时，对函数体的变量进行赋值后，不影响函数体外的变量。&lt;/p&gt;
&lt;p&gt;（2）在函数体内定义，并且使用global关键字修饰后，该变量也就变为全局变量。在函数体外也可以访问到该变量，并且在函数体内还可以对其进行修改。&lt;/p&gt;
&lt;p&gt;注意：尽管Python允许全局变量和局部变量重名，但是在实际开发时，不建议这么做，因为这样容易让代码乱，很难分清哪些是全局变量，哪些是局部变量。&lt;/p&gt;
&lt;h2&gt;6.5 匿名函数（lambda）&lt;/h2&gt;
&lt;p&gt;匿名函数是指没有名字的函数，应用在需要一个函数，但是有不想费神去命名这个函数的场合。通常情况下，这样的函数只有使用一次。在Python中，使用lambda表达式创建匿名函数，其语法格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
result = &lt;span&gt;lambda&lt;/span&gt; [arg1 [,arg2,......,argn]]:expression
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;result：用于调用lambda表达式。&lt;/li&gt;
&lt;li&gt;[arg1[,arg2,......,argn]]：可选参数，用于指定传递的参数列表，多个参数间使用逗号“，”分隔。&lt;/li&gt;
&lt;li&gt;expression：必选参数，用于指定一个实现具体功能的表达式。如果有参数，那么在该表达式中将应用这些参数。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意：使用lambda表达式时，参数可以有多个，用逗号“，”分隔，但是表达式只能有一个，即只能返回一个值。而且也不能出现其他非表达式语句（如for 或 while）。&lt;/p&gt;

</description>
<pubDate>Thu, 07 Mar 2019 15:07:00 +0000</pubDate>
<dc:creator>牧牛人</dc:creator>
<og:description>第6章 函数 6.1函数的创建和调用 提到函数，大家会想到数学函数吧，函数是数学最重要的一个模块，贯穿整个数学学习过程。在Python中，函数的应用非常广泛。在前面我们已经多次接触过函数。例如，用于输</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ooo888ooo/p/10360650.html</dc:identifier>
</item>
<item>
<title>聊聊OSM - 轩脉刃</title>
<link>http://www.cnblogs.com/yjf512/p/10492737.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yjf512/p/10492737.html</guid>
<description>&lt;p&gt;做路网的同学一定对OSM并不陌生，OSM是一个由英国人Steve Coast创立的一个项目，这个项目的目标是创建一个内容自由，且能让所有人编辑的世界地图。类似于维基百科的概念。和它对标的是谷歌的google map。google map是谷歌提出的电子地图服务。它是收费的。且并不提供友善的可以提供给所有人编辑的地图服务。&lt;/p&gt;
&lt;p&gt;OSM最值得称道的是它的语义结构，设计的非常简单，但是却非常通用，我们可以很方便的使用这个语义结构来定义我们需要的路网。&lt;/p&gt;

&lt;p&gt;OSM 仅仅定义了四个语义结构，node, way, relation, tag。 基本思想是一个路网是可以使用点和线来进行划分的。如果有更为宏观的信息需要展示，就使用 relation 来进行展示。而每种元素的属性都可以使用tag进行无限延生。&lt;/p&gt;
&lt;p&gt;node表示的最重要的属性是地理位置坐标。它表示的是一个点。&lt;/p&gt;
&lt;p&gt;way是由一系列有序的node组成的，它可以表示三种结构（非闭合线，闭合线，区域）。非闭合线，通常用来表示道路，河流，铁路等。闭合线，通常可以用来表示环形的东西，比如地铁等。区域，表示一个真实闭合的区域。&lt;/p&gt;
&lt;p&gt;relation 是由一系列的node，way，和其他的relation组合而成。它的作用其实比较大，比如，在路网里面，我用node和way画了一个路网，现在我想要画公交车121的路线，那么就可以使用relation来进行绘画。当然，如果你要表示的地图并不想有这样的信息，这个relation是可以不画的。&lt;/p&gt;
&lt;p&gt;node, way, relation就相当于是地图世界中的三原色，使用这三个元素理论上能绘制出所有你需要的地图。当然，这三个元素也有对应的属性，比如你这个way叫做“后厂村路”。那么这个名字就是一个属性。这里OSM抽象出了tag 概念，tag是key, value的组合。所以它可以无限延展。&lt;/p&gt;
&lt;p&gt;三原色也有一些公用的属性。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;user 最后修改/创建这个对象的用户&lt;/li&gt;
&lt;li&gt;uid 最后修改/创建这个对象的用户id&lt;/li&gt;
&lt;li&gt;timestamp 最后修改/创建这个对象的时间&lt;/li&gt;
&lt;li&gt;visible 这个对象是否要在地图中显示出来&lt;/li&gt;
&lt;li&gt;version 最后修改/创建这个对象的版本号&lt;/li&gt;
&lt;li&gt;changeset 这个节点的最后修改/创建这个对象的所在的changeList ID，这个和version不一样，version是每个对象自带的，changeset是全局的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果你使用过git，那么这个和git就很像了。当地图在开放的时间，一些人补充上了一些变动，如果平台每天收集，那么这些变动就会生成一个changeset。&lt;a href=&quot;https://www.openstreetmap.org/history&quot; class=&quot;uri&quot;&gt;https://www.openstreetmap.org/history&lt;/a&gt; 这个地址告知了你指定的区域有哪些changeset。&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;osm version=&quot;0.6&quot; generator=&quot;CGImap 0.0.2&quot;&amp;gt;
 &amp;lt;bounds minlat=&quot;54.0889580&quot; minlon=&quot;12.2487570&quot; maxlat=&quot;54.0913900&quot; maxlon=&quot;12.2524800&quot;/&amp;gt;
 &amp;lt;node id=&quot;298884269&quot; lat=&quot;54.0901746&quot; lon=&quot;12.2482632&quot; user=&quot;SvenHRO&quot; uid=&quot;46882&quot; visible=&quot;true&quot; version=&quot;1&quot; changeset=&quot;676636&quot; timestamp=&quot;2008-09-21T21:37:45Z&quot;/&amp;gt;
 &amp;lt;node id=&quot;261728686&quot; lat=&quot;54.0906309&quot; lon=&quot;12.2441924&quot; user=&quot;PikoWinter&quot; uid=&quot;36744&quot; visible=&quot;true&quot; version=&quot;1&quot; changeset=&quot;323878&quot; timestamp=&quot;2008-05-03T13:39:23Z&quot;/&amp;gt;
 &amp;lt;node id=&quot;1831881213&quot; version=&quot;1&quot; changeset=&quot;12370172&quot; lat=&quot;54.0900666&quot; lon=&quot;12.2539381&quot; user=&quot;lafkor&quot; uid=&quot;75625&quot; visible=&quot;true&quot; timestamp=&quot;2012-07-20T09:43:19Z&quot;&amp;gt;
  &amp;lt;tag k=&quot;name&quot; v=&quot;Neu Broderstorf&quot;/&amp;gt;
  &amp;lt;tag k=&quot;traffic_sign&quot; v=&quot;city_limit&quot;/&amp;gt;
 &amp;lt;/node&amp;gt;
 ...
 &amp;lt;node id=&quot;298884272&quot; lat=&quot;54.0901447&quot; lon=&quot;12.2516513&quot; user=&quot;SvenHRO&quot; uid=&quot;46882&quot; visible=&quot;true&quot; version=&quot;1&quot; changeset=&quot;676636&quot; timestamp=&quot;2008-09-21T21:37:45Z&quot;/&amp;gt;
 &amp;lt;way id=&quot;26659127&quot; user=&quot;Masch&quot; uid=&quot;55988&quot; visible=&quot;true&quot; version=&quot;5&quot; changeset=&quot;4142606&quot; timestamp=&quot;2010-03-16T11:47:08Z&quot;&amp;gt;
  &amp;lt;nd ref=&quot;292403538&quot;/&amp;gt;
  &amp;lt;nd ref=&quot;298884289&quot;/&amp;gt;
  ...
  &amp;lt;nd ref=&quot;261728686&quot;/&amp;gt;
  &amp;lt;tag k=&quot;highway&quot; v=&quot;unclassified&quot;/&amp;gt;
  &amp;lt;tag k=&quot;name&quot; v=&quot;Pastower Straße&quot;/&amp;gt;
 &amp;lt;/way&amp;gt;
 &amp;lt;relation id=&quot;56688&quot; user=&quot;kmvar&quot; uid=&quot;56190&quot; visible=&quot;true&quot; version=&quot;28&quot; changeset=&quot;6947637&quot; timestamp=&quot;2011-01-12T14:23:49Z&quot;&amp;gt;
  &amp;lt;member type=&quot;node&quot; ref=&quot;294942404&quot; role=&quot;&quot;/&amp;gt;
  ...
  &amp;lt;member type=&quot;node&quot; ref=&quot;364933006&quot; role=&quot;&quot;/&amp;gt;
  &amp;lt;member type=&quot;way&quot; ref=&quot;4579143&quot; role=&quot;&quot;/&amp;gt;
  ...
  &amp;lt;member type=&quot;node&quot; ref=&quot;249673494&quot; role=&quot;&quot;/&amp;gt;
  &amp;lt;tag k=&quot;name&quot; v=&quot;Küstenbus Linie 123&quot;/&amp;gt;
  &amp;lt;tag k=&quot;network&quot; v=&quot;VVW&quot;/&amp;gt;
  &amp;lt;tag k=&quot;operator&quot; v=&quot;Regionalverkehr Küste&quot;/&amp;gt;
  &amp;lt;tag k=&quot;ref&quot; v=&quot;123&quot;/&amp;gt;
  &amp;lt;tag k=&quot;route&quot; v=&quot;bus&quot;/&amp;gt;
  &amp;lt;tag k=&quot;type&quot; v=&quot;route&quot;/&amp;gt;
 &amp;lt;/relation&amp;gt;
 ...
&amp;lt;/osm&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个是&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/OSM_XML&quot;&gt;osm wiki&lt;/a&gt;上摘抄出来的例子。我们可以看到，这个例子已经包含了所有的定义。它表达了在&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;bounds minlat=&quot;54.0889580&quot; minlon=&quot;12.2487570&quot; maxlat=&quot;54.0913900&quot; maxlon=&quot;12.2524800&quot;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个矩形框范围内的4个node，一个way, 还有一个relation。这个relation表达的就是&lt;code&gt;Küstenbus Linie 123&lt;/code&gt;公交交通工具的线路。&lt;/p&gt;
&lt;p&gt;我们从上面例子也看出，OSM描述自己的语言是选择XML，XML是一种清晰且易于人类解读的结构。OSM输出的XML文件通常以.osm后缀。这个文件现在已经被多种工具所适配。OSM的schema如下：&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/API_v0.6/XSD&quot; class=&quot;uri&quot;&gt;https://wiki.openstreetmap.org/wiki/API_v0.6/XSD&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比如最常用的qgis 和 arcgis 都支持直接使用osm文件导入进行编辑的功能。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_912917507/article/details/81736041&quot;&gt;OSM（openstreetmap）矢量数据下载方法（路网，水系，铁路，建筑物）&lt;/a&gt;这篇文章展示了各种用osm绘制的地图。&lt;/p&gt;
&lt;p&gt;当然，OSM只是描述了地图的路网，而在绘制地图的时候，地图的底图需要使用地图底图提供商的服务，比如mapbox。&lt;/p&gt;
&lt;p&gt;OSM的生态也非常好，比如&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37370059&quot;&gt;不用百度API也能计算驾驶距离——OSMnx计算多点驾车距离&lt;/a&gt; 使用的是OSM的数据，以及python的osmnx包，直接提供了计算最短路径的服务。&lt;/p&gt;
&lt;p&gt;OSM存储在数据库中一般使用POSTGIS（&lt;a href=&quot;http://blog.geoserver.org/2009/01/30/geoserver-and-openstreetmap/%EF%BC%89%E5%AE%83%E4%BC%9A%E5%88%9B%E5%BB%BA%E5%87%A0%E5%BC%A0%E8%A1%A8&quot; class=&quot;uri&quot;&gt;http://blog.geoserver.org/2009/01/30/geoserver-and-openstreetmap/）它会创建几张表&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;planet_osm_line&lt;/li&gt;
&lt;li&gt;planet_osm_point&lt;/li&gt;
&lt;li&gt;planet_osm_polygon&lt;/li&gt;
&lt;li&gt;planet_osm_roads&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Thu, 07 Mar 2019 14:00:00 +0000</pubDate>
<dc:creator>轩脉刃</dc:creator>
<og:description>聊聊OSM 做路网的同学一定对OSM并不陌生，OSM是一个由英国人Steve Coast创立的一个项目，这个项目的目标是创建一个内容自由，且能让所有人编辑的世界地图。类似于维基百科的概念。和它对标的是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yjf512/p/10492737.html</dc:identifier>
</item>
<item>
<title>利用C# CefSharp Python采集某网站简历并自动发送邀请短信 - ROTA</title>
<link>http://www.cnblogs.com/imes/p/10452212.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imes/p/10452212.html</guid>
<description>&lt;p&gt;以往爬虫没怎么研究过，最近有个需求，要从某网站采集敏感信息，稍稍考虑了一下，决定利用C# Winform和Python一起来解决这个事件。&lt;/p&gt;
&lt;p&gt;整个解决方案不复杂：C#编写WinForm窗体，进行数据分析和采集, Python本来不想用的，一下子没找到C#下Woff字体转Xml的方案，而网上Python的则有很多，所以就加了一个Python项目，虽然就1个脚本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1484894/201903/1484894-20190307210219087-1759972377.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;一、几个步骤：&lt;/p&gt;
&lt;p&gt;　　首先要模拟登录，登录完了进入简历采集，然后模拟下载，下载完了以后就可以看到求职者的电话了。&lt;/p&gt;
&lt;p&gt;　　这个电话号码是使用动态生成的Base64字体，所以直接提取文字是无法成功的。&lt;/p&gt;
&lt;p&gt;　　1、先将Base64转成Woff字体，这个可以用C#完成（这其中的iso-8859-1编码是个坑，一般用Default会出现惊喜）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
            SetMainStatus(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在生成WOFF...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] fontBytes =&lt;span&gt; Convert.FromBase64String(CurFont);
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; fontStr = Encoding.GetEncoding(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;iso-8859-1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).GetString(fontBytes).TrimEnd(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            StreamWriter sw2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; StreamWriter(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;R58.woff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, Encoding.GetEncoding(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;iso-8859-1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            sw2.Write(fontStr);
            sw2.Close();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、再将已经生成的Woff转成XML（WoffDec.exe是我用Python打包的Exe,其实有点小题大做了，为了这一个转化专门打了一个包，有时间还是整一个C#下面的好） &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用python exe 生成xml文件&lt;/span&gt;
            ProcessStartInfo info = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ProcessStartInfo
            {
                FileName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WoffDec.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                WindowStyle &lt;/span&gt;=&lt;span&gt; ProcessWindowStyle.Hidden
            };
            Process.Start(info).WaitForExit(&lt;/span&gt;&lt;span&gt;2000&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在2秒内等待返回&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;整个WoffDec.py的代码就3行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt;&lt;span&gt; fontTools.ttLib import TTFont
font &lt;/span&gt;= TTFont(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;R12.woff&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
font.saveXML(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;R12.xml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个打包是有点意思的，先试了py2exe，不成功，换pyinstaller, 成了，连EXE一起有11M，也不是很大。&lt;/p&gt;
&lt;p&gt;https://github.com/pyinstaller/pyinstaller 下载，或者在VS2017 Python环境下搜索PyInstaller直接安装。&lt;/p&gt;
&lt;p&gt;右键使用“打开此处的命令提示符”；输入pyinstaller /path/to/yourscript.py即可打包成一个exe文件。&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;在Winform应用调用时，应该整个文件夹都拷贝过去。&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　3、XML文件有了以后，以上面的Woff文件为基准准备为一个数据字典存储起来（这个地方有点绕，先找一个网站把Woff显示成文字和编码，然后根据编码在XML中查找它的字体定位点，我取的X和Y组成唯一值（X，Y就代表一个字），当然也可以取更多;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; DicChar = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;()
        {
            {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;91,744&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
            {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;570,0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
            {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;853,1143&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
            {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;143,259&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
            。。。。。。
        };        &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4、上面这一步是要花点时间的，基准字典有了以后，就可以按每次生成的XML文件来进行匹配真实文字了。&lt;/p&gt;
&lt;p&gt;　　5、真实文字取出后面的就简单了，直接采集到数据库，再连上短信发送业务，就可以自动群发了。&lt;/p&gt;
&lt;p&gt;二、使用场景&lt;/p&gt;
&lt;p&gt;　　上班后开启采集服务即不用再理会，由系统每间隔一段时间自动下载简历，并自动推送面试邀请短信。只要有新人发布对口的求职信息，系统就会马上给他发送邀请，实为抢人利器。&lt;/p&gt;

&lt;p&gt;BTW：网页模拟操作使用的CEFSharp将另开一章。&lt;/p&gt;
</description>
<pubDate>Thu, 07 Mar 2019 13:35:00 +0000</pubDate>
<dc:creator>ROTA</dc:creator>
<og:description>以往爬虫没怎么研究过，最近有个需求，要从某网站采集敏感信息，稍稍考虑了一下，决定利用C# Winform和Python一起来解决这个事件。 整个解决方案不复杂：C#编写WinForm窗体，进行数据分析</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/imes/p/10452212.html</dc:identifier>
</item>
<item>
<title>如何更优雅地写Django REST framework - luozx207</title>
<link>http://www.cnblogs.com/luozx207/p/10491920.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/luozx207/p/10491920.html</guid>
<description>&lt;p&gt;DRF（Django REST framework）是一个高度封装的框架，这导致想完成一件事情可以通过重写父类函数的方式从DRF的各个层次来写，都能够实现目的。&lt;/p&gt;
&lt;p&gt;比如写视图函数，可以用继承APIView的方式或者继承Viewsets的方式，甚至直接写视图函数&lt;/p&gt;
&lt;p&gt;但是想要更加干净简洁的代码，还是需要找到实现的最佳方式&lt;/p&gt;
&lt;p&gt;以下是我的一些个人总结，欢迎讨论&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;models.py&quot;&gt;models.py&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.PositiveSmallIntegerField&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Positive对应unsigned&lt;/li&gt;
&lt;li&gt;Small对应smallint(5)&lt;/li&gt;
&lt;li&gt;对于一些数据量较小的系统可以使用这个Field作为id&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2、字段定义中verbose_name定义的是django自带接口ui的字段说明，help_text定义的是swagger的字段说明&lt;/p&gt;
&lt;p&gt;3、tag = models.ForeignKey(Tag, related_name=&quot;project_tag&quot;)&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;定义一个外键会在数据库中生成一个名为tag_id的字段&lt;/li&gt;
&lt;li&gt;但是在模型实例中，tag是Tag模型的实例&lt;/li&gt;
&lt;li&gt;也就是说，Django的ORM会把tag.id=tag_id的Tag模型实例取出来放到tag字段&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;4、user = models.ForeignKey(User, unique=True)&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;相当于user = models.OneToOneField(User)&lt;/li&gt;
&lt;li&gt;外键 on_delete = models.CASCADE 级联删除是默认的选项&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;5、ImageField和FileField实际上是CharFields&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;serializers.py&quot;&gt;serializers.py&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、serializers中对字段做出的限制只会影响前端传到后端的数据，而不会影响后端传到前端的数据&lt;/p&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;class MySerializer(serializers.ModelSerializer):
    TYPE = (
        # (0, &quot;级别一&quot;), #在model中这行没有注释掉
        (1, &quot;级别二&quot;),
        (2, &quot;级别三&quot;)
    )
    # 这样可以限制前端不能传my_type=0的数据，但是my_type=0的数据可以在前端接收到
    my_type = ChoiceField(choices=TYPE,required=True)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、一般来说，update和create的操作都会在serializers中实现&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;很多刚开始接触DRF的同学会习惯在view中写update和create，其实，在serializers中实现是一种更好的方法，&lt;br/&gt;因为，这样你的代码不用绕来绕去。不用费劲获取serializer的值再费劲存到serializer里，直接在serializer中实现就行了。&lt;br/&gt;别看create和update函数的源码那么长，其实不用管它们，整个重写就好了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;update与create函数框架&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def create(self, validated_data):
    ...
    return instance
    
def update(self, instance, validated_data):
    ...
    return instance&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;validated_data是经过验证的前端数据，instance是用id获取的对应数据库数据的模型实例&lt;br/&gt;它们都要返回一个模型实例，作为返回前端的数据&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;update和create方法由serializer.save()函数调用&lt;/li&gt;
&lt;li&gt;在serializer中&lt;code&gt;self.context[&quot;request&quot;]&lt;/code&gt;相当于view中的&lt;code&gt;self.request&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在Model.objects的创建或筛选中，可以直接拿一个模型实例赋值给外键字段或相比较，比如&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;Model1.objects.create(user=self.context[&quot;request&quot;].user,
                       foreign_key=foreign_key_instance)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;如果要用一个已有的模型实例的数据创建一条新数据，我曾用过一个不优雅的写法&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;for key in update_data:
    setattr(instance, key, update_data[key])
# 把对象转为字典，作为新建数据的参数
dic = instance.__dict__
del dic['id']
del dic['_state']
new_instance = Model1.objects.create(**dic)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;先把更新后的实例对象转为字典，再删掉id等在数据表插入新数据时不该传的数据，再将字典作为objects.create的参数&lt;/p&gt;
&lt;p&gt;其实有一个更巧妙的方法&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;instance.id = None
for attr, value in update_data.items():
    setattr(instance, attr, value)
instance.save()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;instance.save()之后，instance将会变成新插入数据的模型实例&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;某些情况需要父类函数的写法，不需要复制代码，用super就可以了&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;super(Model1Serializer, self).update(instance, validated_data)&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;views.py&quot;&gt;views.py&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、perform_create中的serializer.save()语句可以带参数，比如&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;user_id = self.request.user.id
serializer.save(user=User.objects.get(id=user_id))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实现从request中获取user的值，而不是从表单&lt;/p&gt;
&lt;p&gt;2、尽量使用objects.filter而不是get&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;filter返回一个数组，get返回一个数据库实例&lt;/li&gt;
&lt;li&gt;如果get()中的过滤条件没有匹配出数据，&lt;code&gt;get().delete()&lt;/code&gt;会报错，filter则会取出一个空数组，不会报错&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3、过滤器的使用&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;应避免在get_queryset()中使用复杂的逻辑，比如&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def get_queryset(self):
    key_1 = self.request.key1
    key_2 = self.request.key2
    my_type = self.request.query_params.get('type', None)
    if my_type == 1:
        return Model.objects.filter(foreign_key_1=key_1)
    elif my_type == 2:
        return Model.objects.filter(foreign_key_2=key_2)
    # 默认情况，返回所有
    return Model.objects.all()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实这就是一个根据查询参数过滤的过程，完全可以使用过滤器实现，这样在Django自带ui中也会有过滤器的说明&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;要使用过滤器，首先安装库&lt;br/&gt;&lt;code&gt;pip install django-filter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;python2要特别指定django-filter==1.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;然后在settings的&lt;code&gt;INSTALLED_APPS&lt;/code&gt;中加上&lt;code&gt;django_filters&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新建一个名为filters.py的文件，定义一个过滤器&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;class MyFilter(django_filters.rest_framework.FilterSet):
    MY_TYPE = (
        (1, &quot;类别一&quot;),
        (2, &quot;类别二&quot;)
    )
    
    type = django_filters.ChoiceFilter(help_text=&quot;类型&quot;,
                                       label=&quot;类型&quot;,
                                       choices=MY_TYPE,
                                       method=&quot;type_filter&quot;
                                       )

    def type_filter(self,queryset,name,value):
        key_1 = self.request.key1
        key_2 = self.request.key2
        if value == 1:
            return queryset.filter(foreign_key_1=key_1)
        elif value == 2:
            return queryset.filter(foreign_key_2=key_2)

    class Meta:
        model = Tag
        fields = ['type']&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;在viewset中加上&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;filter_backends = (DjangoFilterBackend, )
filter_class = MyFilter&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而get_queryset函数只需要一句&lt;code&gt;return Model.objects.all()&lt;/code&gt;就好&lt;/p&gt;
&lt;p&gt;注意type_filter的queryset就是get_queryset所返回的&lt;/p&gt;
</description>
<pubDate>Thu, 07 Mar 2019 12:07:00 +0000</pubDate>
<dc:creator>luozx207</dc:creator>
<og:description>DRF（Django REST framework）是一个高度封装的框架，这导致想完成一件事情可以通过重写父类函数的方式从DRF的各个层次来写，都能够实现目的。 比如写视图函数，可以用继承APIVie</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/luozx207/p/10491920.html</dc:identifier>
</item>
</channel>
</rss>