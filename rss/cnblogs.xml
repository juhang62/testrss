<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>MySQL（InnoDB）是如何处理死锁的 - LastSun</title>
<link>http://www.cnblogs.com/wdy1184/p/10703832.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wdy1184/p/10703832.html</guid>
<description>&lt;h2 id=&quot;一什么是死锁&quot;&gt;一、什么是死锁&lt;/h2&gt;
&lt;p&gt;官方定义如下：两个事务都持有对方需要的锁，并且在等待对方释放，并且双方都不会释放自己的锁。&lt;/p&gt;
&lt;p&gt;这个就好比你有一个人质，对方有一个人质，你们俩去谈判说换人。你让对面放人，对面让你放人。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/713751/201904/713751-20190414015018303-1880886128.png&quot; alt=&quot;死锁的形成&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;二为什么会形成死锁&quot;&gt;二、为什么会形成死锁&lt;/h2&gt;
&lt;p&gt;看到这里，也许你会有这样的疑问，事务和谈判不一样，为什么事务不能使用完锁之后立马释放呢？居然还要操作完了之后一直持有锁？这就涉及到 MySQL 的并发控制了。&lt;/p&gt;
&lt;p&gt;MySQL的并发控制有两种方式，一个是 MVCC，一个是两阶段锁协议。那么为什么要并发控制呢？是因为多个用户同时操作 MySQL 的时候，为了提高并发性能并且要求如同多个用户的请求过来之后如同串行执行的一样（&lt;code&gt;可串行化调度&lt;/code&gt;）。具体的并发控制这里不再展开。咱们继续深入讨论两阶段锁协议。&lt;/p&gt;
&lt;h3 id=&quot;两阶段锁协议2pl&quot;&gt;两阶段锁协议（2PL）&lt;/h3&gt;
&lt;p&gt;官方定义：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;两阶段锁协议是指所有事务必须分两个阶段对数据加锁和解锁，在对任何数据进行读、写操作之前，事务首先要获得对该数据的封锁；在释放一个封锁之后，事务不再申请和获得任何其他封锁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对应到 MySQL 上分为两个阶段：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;扩展阶段（事务开始后，commit 之前）：获取锁&lt;/li&gt;
&lt;li&gt;收缩阶段（commit 之后）：释放锁&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;就是说呢，只有遵循两段锁协议，才能实现 &lt;code&gt;可串行化调度&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但是两阶段锁协议不要求事务必须一次将所有需要使用的数据加锁，并且在加锁阶段没有顺序要求，所以这种并发控制方式会形成死锁。&lt;/p&gt;
&lt;h2 id=&quot;三mysql-如何处理死锁&quot;&gt;三、MySQL 如何处理死锁？&lt;/h2&gt;
&lt;p&gt;MySQL有两种死锁处理方式：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;等待，直到超时（innodb_lock_wait_timeout=50s）。&lt;/li&gt;
&lt;li&gt;发起死锁检测，主动回滚一条事务，让其他事务继续执行（innodb_deadlock_detect=on）。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;由于性能原因，一般都是使用死锁检测来进行处理死锁。&lt;/p&gt;
&lt;h3 id=&quot;死锁检测&quot;&gt;死锁检测&lt;/h3&gt;
&lt;p&gt;死锁检测的原理是构建一个以事务为顶点、锁为边的有向图，判断有向图是否存在环，存在即有死锁。&lt;/p&gt;
&lt;h3 id=&quot;回滚&quot;&gt;回滚&lt;/h3&gt;
&lt;p&gt;检测到死锁之后，选择插入更新或者删除的行数最少的事务回滚，基于 INFORMATION_SCHEMA.INNODB_TRX 表中的 trx_weight 字段来判断。&lt;/p&gt;
&lt;h2 id=&quot;四如何避免发生死锁&quot;&gt;四、如何避免发生死锁&lt;/h2&gt;
&lt;h3 id=&quot;收集死锁信息&quot;&gt;收集死锁信息：&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;利用命令 &lt;code&gt;SHOW ENGINE INNODB STATUS&lt;/code&gt;查看死锁原因。&lt;/li&gt;
&lt;li&gt;调试阶段开启 innodb_print_all_deadlocks，收集所有死锁日志。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;减少死锁&quot;&gt;减少死锁：&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;使用事务，不使用 &lt;code&gt;lock tables&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;保证没有长事务。&lt;/li&gt;
&lt;li&gt;操作完之后立即提交事务，特别是在交互式命令行中。&lt;/li&gt;
&lt;li&gt;如果在用 &lt;code&gt;(SELECT ... FOR UPDATE or SELECT ... LOCK IN SHARE MODE)&lt;/code&gt;，尝试降低隔离级别。&lt;/li&gt;
&lt;li&gt;修改多个表或者多个行的时候，&lt;code&gt;将修改的顺序保持一致&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;创建索引，可以使创建的锁更少。&lt;/li&gt;
&lt;li&gt;最好不要用 &lt;code&gt;(SELECT ... FOR UPDATE or SELECT ... LOCK IN SHARE MODE)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果上述都无法解决问题，那么尝试使用 &lt;code&gt;lock tables t1, t2, t3&lt;/code&gt; 锁多张表&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sat, 13 Apr 2019 17:52:00 +0000</pubDate>
<dc:creator>LastSun</dc:creator>
<og:description>MySQL（InnoDB）是如何处理死锁的 一、什么是死锁 官方定义如下：两个事务都持有对方需要的锁，并且在等待对方释放，并且双方都不会释放自己的锁。 这个就好比你有一个人质，对方有一个人质，你们俩去</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wdy1184/p/10703832.html</dc:identifier>
</item>
<item>
<title>手撕coreML之yolov2 object detection物体检测（含源代码） - 一度逍遥</title>
<link>http://www.cnblogs.com/riddick/p/10703787.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/riddick/p/10703787.html</guid>
<description>&lt;p&gt;&lt;strong&gt;一些闲话：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　前面我有篇博客 &lt;a href=&quot;https://www.cnblogs.com/riddick/p/10434339.html&quot;&gt;https://www.cnblogs.com/riddick/p/10434339.html&lt;/a&gt; ，大致说了下如何将pytorch训练的.pth模型转换为mlmodel，部署在IOS端进行前向预测。只是介绍了下类接口，并没有示例，因此有可能会陷入没有demo你说个p的境地。因此，今天就拿实际的模型来说上一说。&lt;/p&gt;
&lt;p&gt;　　其实coreML的demo，github上有很多，但是大部分都是用swift写的，而对于从C/C++语言过来的同学来说，Objective-C或许会更容易看懂一些。所以这次就以yolov2实现的object detection为例，创建Objective-C工程并用真机调试，来实现前向预测（并且附源代码）。&lt;/p&gt;
&lt;p&gt;　　当然，为了偷懒起见，模型并不是我训练的，模型来自这里：&lt;a href=&quot;https://github.com/syshen/YOLO-CoreML&quot;&gt;https://github.com/syshen/YOLO-CoreML&lt;/a&gt; 。该仓库使用swift实现的，有兴趣的可以对比着看。yolov2的mlmodel模型文件，请看上面仓库的readMe中这句话： &lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
execute download.&lt;span&gt;sh&lt;/span&gt; to download the pre-trained model % &lt;span&gt;sh&lt;/span&gt; download.&lt;span&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;闲话少说，进入正题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一、创建xcode工程，选择编程语言为Objective-C。将模型添加到xcode工程中，我将模型名字改为yoloModel，并且量化到了16bit。当然使用原始模型200多MB也完全OK。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1138496/201904/1138496-20190413234659713-412523247.png&quot; alt=&quot;&quot; width=&quot;595&quot; height=&quot;461&quot;/&gt;&lt;/p&gt;
&lt;p&gt;二、模型添加到工程后，会自动生成yoloModel类头文件，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('69defb6e-4f1a-45eb-b858-1daebd7cf00f')&quot; readability=&quot;49&quot;&gt;&lt;img id=&quot;code_img_closed_69defb6e-4f1a-45eb-b858-1daebd7cf00f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_69defb6e-4f1a-45eb-b858-1daebd7cf00f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('69defb6e-4f1a-45eb-b858-1daebd7cf00f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_69defb6e-4f1a-45eb-b858-1daebd7cf00f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;93&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; yoloModel.h
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This file was automatically generated and should not be edited.
&lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;
&lt;span&gt;#import&lt;/span&gt; &amp;lt;Foundation/Foundation.h&amp;gt;
&lt;span&gt;#import&lt;/span&gt; &amp;lt;CoreML/CoreML.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdint.h&amp;gt;&lt;span&gt;

NS_ASSUME_NONNULL_BEGIN


&lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; Model Prediction Input Type&lt;/span&gt;
API_AVAILABLE(macos(&lt;span&gt;10.13&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;), ios(&lt;span&gt;11.2&lt;/span&gt;), watchos(&lt;span&gt;4.2&lt;/span&gt;), tvos(&lt;span&gt;11.2&lt;/span&gt;)) __attribute__((visibility(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;@interface&lt;/span&gt; yoloModelInput : NSObject&amp;lt;MLFeatureProvider&amp;gt;

&lt;span&gt;///&lt;/span&gt;&lt;span&gt; input__0 as color (kCVPixelFormatType_32BGRA) image buffer, 608 pixels wide by 608 pixels high&lt;/span&gt;
&lt;span&gt;@property (readwrite, nonatomic) CVPixelBufferRef input__0;
&lt;/span&gt;-&lt;span&gt; (instancetype)init NS_UNAVAILABLE;
&lt;/span&gt;-&lt;span&gt; (instancetype)initWithInput__0:(CVPixelBufferRef)input__0;
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;


&lt;span&gt;///&lt;/span&gt;&lt;span&gt; Model Prediction Output Type&lt;/span&gt;
API_AVAILABLE(macos(&lt;span&gt;10.13&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;), ios(&lt;span&gt;11.2&lt;/span&gt;), watchos(&lt;span&gt;4.2&lt;/span&gt;), tvos(&lt;span&gt;11.2&lt;/span&gt;)) __attribute__((visibility(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;@interface&lt;/span&gt; yoloModelOutput : NSObject&amp;lt;MLFeatureProvider&amp;gt;

&lt;span&gt;///&lt;/span&gt;&lt;span&gt; output__0 as 425 x 19 x 19 3-dimensional array of doubles&lt;/span&gt;
@property (readwrite, nonatomic, strong) MLMultiArray *&lt;span&gt; output__0;
&lt;/span&gt;-&lt;span&gt; (instancetype)init NS_UNAVAILABLE;
&lt;/span&gt;- (instancetype)initWithOutput__0:(MLMultiArray *&lt;span&gt;)output__0;
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;


&lt;span&gt;///&lt;/span&gt;&lt;span&gt; Class for model loading and prediction&lt;/span&gt;
API_AVAILABLE(macos(&lt;span&gt;10.13&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;), ios(&lt;span&gt;11.2&lt;/span&gt;), watchos(&lt;span&gt;4.2&lt;/span&gt;), tvos(&lt;span&gt;11.2&lt;/span&gt;)) __attribute__((visibility(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;@interface&lt;/span&gt;&lt;span&gt; yoloModel : NSObject
@property (&lt;/span&gt;&lt;span&gt;readonly&lt;/span&gt;, nonatomic, nullable) MLModel *&lt;span&gt; model;
&lt;/span&gt;-&lt;span&gt; (nullable instancetype)init;
&lt;/span&gt;- (nullable instancetype)initWithContentsOfURL:(NSURL *)url error:(NSError * _Nullable *&lt;span&gt; _Nullable)error;
&lt;/span&gt;- (nullable instancetype)initWithConfiguration:(MLModelConfiguration *)configuration error:(NSError * _Nullable * _Nullable)error API_AVAILABLE(macos(&lt;span&gt;10.14&lt;/span&gt;), ios(&lt;span&gt;12.0&lt;/span&gt;), watchos(&lt;span&gt;5.0&lt;/span&gt;), tvos(&lt;span&gt;12.0&lt;/span&gt;)) __attribute__((visibility(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)));
&lt;/span&gt;- (nullable instancetype)initWithContentsOfURL:(NSURL *)url configuration:(MLModelConfiguration *)configuration error:(NSError * _Nullable * _Nullable)error API_AVAILABLE(macos(&lt;span&gt;10.14&lt;/span&gt;), ios(&lt;span&gt;12.0&lt;/span&gt;), watchos(&lt;span&gt;5.0&lt;/span&gt;), tvos(&lt;span&gt;12.0&lt;/span&gt;)) __attribute__((visibility(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)));

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    Make a prediction using the standard interface
    @param input an instance of yoloModelInput to predict from
    @param error If an error occurs, upon return contains an NSError object that describes the problem. If you are not interested in possible errors, pass in NULL.
    @return the prediction as yoloModelOutput
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
- (nullable yoloModelOutput *)predictionFromFeatures:(yoloModelInput *)input error:(NSError * _Nullable *&lt;span&gt; _Nullable)error;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    Make a prediction using the standard interface
    @param input an instance of yoloModelInput to predict from
    @param options prediction options
    @param error If an error occurs, upon return contains an NSError object that describes the problem. If you are not interested in possible errors, pass in NULL.
    @return the prediction as yoloModelOutput
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
- (nullable yoloModelOutput *)predictionFromFeatures:(yoloModelInput *)input options:(MLPredictionOptions *)options error:(NSError * _Nullable *&lt;span&gt; _Nullable)error;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    Make a prediction using the convenience interface
    @param input__0 as color (kCVPixelFormatType_32BGRA) image buffer, 608 pixels wide by 608 pixels high:
    @param error If an error occurs, upon return contains an NSError object that describes the problem. If you are not interested in possible errors, pass in NULL.
    @return the prediction as yoloModelOutput
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
- (nullable yoloModelOutput *)predictionFromInput__0:(CVPixelBufferRef)input__0 error:(NSError * _Nullable *&lt;span&gt; _Nullable)error;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    Batch prediction
    @param inputArray array of yoloModelInput instances to obtain predictions from
    @param options prediction options
    @param error If an error occurs, upon return contains an NSError object that describes the problem. If you are not interested in possible errors, pass in NULL.
    @return the predictions as NSArray&amp;lt;yoloModelOutput *&amp;gt;
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
- (nullable NSArray&amp;lt;yoloModelOutput *&amp;gt; *)predictionsFromInputs:(NSArray&amp;lt;yoloModelInput*&amp;gt; *)inputArray options:(MLPredictionOptions *)options error:(NSError * _Nullable * _Nullable)error API_AVAILABLE(macos(&lt;span&gt;10.14&lt;/span&gt;), ios(&lt;span&gt;12.0&lt;/span&gt;), watchos(&lt;span&gt;5.0&lt;/span&gt;), tvos(&lt;span&gt;12.0&lt;/span&gt;)) __attribute__((visibility(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)));
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;&lt;span&gt;

NS_ASSUME_NONNULL_END&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　模型名称为yoloModel，那么自动生成的类头文件就是&quot;yoloModel.h&quot;，生成的类名也叫 yoloModel。&lt;/p&gt;
&lt;p&gt;　　模型的输入名称为input_0，输出为output_0。那么自动生成的API接口就会带有input_0, output_0字段：举个栗子如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
- (nullable yoloModelOutput *)predictionFrom&lt;strong&gt;Input__0&lt;/strong&gt;:(CVPixelBufferRef)input__0 error:(NSError * _Nullable * _Nullable)error;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;三、在viewDidLoad里面写调用的demo。当然，从调用demo和自动生成的yoloModel类之间还有很多工作要做，比如说，图像的预处理，比如说得到预测output之后还要对其进行解析得到矩形框信息等，所以我中间封装了一层，这是后话：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)viewDidLoad {
    [super viewDidLoad];
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Do any additional setup after loading the view, typically from a nib.
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;load image&lt;/span&gt;
    NSString* imagePath_=[[NSBundle mainBundle] pathForResource:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;dog416&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ofType:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    std::&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; imgPath = std::&lt;span&gt;string&lt;/span&gt;&lt;span&gt;([imagePath_ UTF8String]);
    cv::Mat image &lt;/span&gt;=&lt;span&gt; cv::imread(imgPath);
    cv::cvtColor(image, image, CV_BGR2RGBA);
    
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;set classtxt path&lt;/span&gt;
    NSString* classtxtPath_ = [ [NSBundle mainBundle] pathForResource:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;classtxt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ofType:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    std::&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; classtxtPath = std::&lt;span&gt;string&lt;/span&gt;&lt;span&gt;([classtxtPath_ UTF8String]);
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;init Detection&lt;/span&gt;
    &lt;span&gt;bool&lt;/span&gt; useCpuOny = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    MLComputeUnits computeUnit &lt;/span&gt;=&lt;span&gt; MLComputeUnitsAll;
    cv::Size scaleSize(&lt;/span&gt;&lt;span&gt;608&lt;/span&gt;, &lt;span&gt;608&lt;/span&gt;&lt;span&gt;);
    &lt;strong&gt;CDetectObject objectDetection;
    objectDetection.init(useCpuOny, computeUnit, classtxtPath, scaleSize);

    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;run detection&lt;/span&gt;
    std::vector&amp;lt;DetectionInfo&amp;gt;&lt;span&gt; detectionResults;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;
    objectDetection.implDetection(image, detectionResults);
    
    &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;draw rectangles&lt;/span&gt;
&lt;span&gt;    cv::Mat showImage;
    cv::resize(image, showImage, scaleSize);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;detectionResults.size();i++&lt;span&gt;)
    {
        cv::rectangle(showImage,detectionResults[i].box, cv::Scalar(&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;), &lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
    }
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;show in iphone&lt;/span&gt;
&lt;span&gt;    cv::cvtColor(showImage, showImage, cv::COLOR_RGBA2BGRA);
    [self showUIImage:showImage];
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　上面加粗的地方就是自己封装的类CDetectObject，该类暴露的两个接口是init和implDetection。&lt;/p&gt;
&lt;p&gt;　　init接收设置的计算设备信息、类别标签文件的路径，以及模型接收的图像尺寸大小。&lt;/p&gt;
&lt;p&gt;　　implDetection接收输入的图像（RGBA格式），输出检测结果结构体信息，里面包含每个目标属于的类别名、置信度、以及矩形框信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; DetectionInfo {
    std::&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; confidence;
    cv::Rect2d box;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;四、来让我们看看都要做哪些初始化init操作&lt;/p&gt;
&lt;p&gt;　　包括计算设备的设置、模型初始化、一些基本参数的初始化、和加载标签文件信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;init model&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; CDetectObject::init(&lt;span&gt;const&lt;/span&gt; BOOL useCpuOnly, &lt;span&gt;const&lt;/span&gt; MLComputeUnits computeUnit, &lt;span&gt;const&lt;/span&gt; std::&lt;span&gt;string&lt;/span&gt;&amp;amp; classtxtPath, &lt;span&gt;const&lt;/span&gt; cv::Size&amp;amp;&lt;span&gt; scaleSize){
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;init configuration&lt;/span&gt;
    option =&lt;span&gt; [[MLPredictionOptions alloc] init];
    option.usesCPUOnly &lt;/span&gt;=&lt;span&gt; useCpuOnly;
              
    config &lt;/span&gt;=&lt;span&gt; [ [MLModelConfiguration alloc] init];
    config.computeUnits &lt;/span&gt;=&lt;span&gt; computeUnit;
    
    NSError&lt;/span&gt;*&lt;span&gt; err;
    Model &lt;/span&gt;= [[yoloModel alloc] initWithConfiguration:config error:&amp;amp;&lt;span&gt;err];
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;init paramss&lt;/span&gt;
    inputSize =&lt;span&gt; scaleSize;
    maxBoundingBoxes &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
    confidenceThreshold &lt;/span&gt;= &lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;;
    nmsThreshold &lt;/span&gt;= &lt;span&gt;0.6&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; anchor boxes&lt;/span&gt;
    anchors = {&lt;span&gt;0.57273&lt;/span&gt;, &lt;span&gt;0.677385&lt;/span&gt;, &lt;span&gt;1.87446&lt;/span&gt;, &lt;span&gt;2.06253&lt;/span&gt;, &lt;span&gt;3.33843&lt;/span&gt;, &lt;span&gt;5.47434&lt;/span&gt;, &lt;span&gt;7.88282&lt;/span&gt;, &lt;span&gt;3.52778&lt;/span&gt;, &lt;span&gt;9.77052&lt;/span&gt;, &lt;span&gt;9.16828&lt;/span&gt;&lt;span&gt;};
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;load labels&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; ret =&lt;span&gt; loadClasstxt(classtxtPath, classes);
    
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;五、再来看看执行预测时要做些什么：&lt;/p&gt;
&lt;p&gt;　　首先，对图像预处理，包括resize到模型要求的尺寸等。&lt;/p&gt;
&lt;p&gt;　　其次，将预处理后的结果送给prediction，得到预测结果。调用coreML自动生成的类预测接口就在这里了。&lt;/p&gt;
&lt;p&gt;　　然后，将预测得到的结果进行解析，根据yolov2模型的输出feature结构来解析出上面DetectionInfo里面的信息。&lt;/p&gt;
&lt;p&gt;　　最后，解析出来后会有大量矩形框，为了去除重复的矩形框信息，需要做一个nmsBox来除去重复量高的矩形框，得到最终结果。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; CDetectObject::implDetection(&lt;span&gt;const&lt;/span&gt; cv::Mat&amp;amp; image, std::vector&amp;lt;DetectionInfo&amp;gt;&amp;amp;&lt;span&gt; detectionResults){
    
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(image.empty()){
        NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;Error! image is empty!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    }
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;preprocessing&lt;/span&gt;
&lt;span&gt;    cv::Mat inputImage;
    &lt;strong&gt;preprocessImage(image,  inputImage);
    
    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;prediction&lt;/span&gt;
    &lt;strong&gt;MLMultiArray* outFeature =&lt;span&gt; predictImageScene(inputImage);
    
    &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;analyze the output&lt;/span&gt;
    std::vector&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; idxList;
    std::vector&lt;/span&gt;&amp;lt;&lt;span&gt;float&lt;/span&gt;&amp;gt;&lt;span&gt; confidenceList;
    std::vector&lt;/span&gt;&amp;lt;cv::Rect&amp;gt;&lt;span&gt; boxesList;
    &lt;strong&gt;parseFeature(outFeature, idxList, confidenceList, boxesList);
    
    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;nms box&lt;/span&gt;
    std::vector&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; indices;
    &lt;strong&gt;cv::dnn::NMSBoxes(boxesList, confidenceList, confidenceThreshold, nmsThreshold, indices);
    
    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;get result&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;indices.size(); i++&lt;span&gt;){
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; idx =&lt;span&gt; indices[i];
        DetectionInfo objectInfo;
        objectInfo.name &lt;/span&gt;=&lt;span&gt; classes[idxList[idx]];
        objectInfo.confidence &lt;/span&gt;=&lt;span&gt; confidenceList[idx];
        objectInfo.box &lt;/span&gt;=&lt;span&gt; boxesList[idx];
        detectionResults.push_back(objectInfo);
    }
    
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　预测函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
MLMultiArray* CDetectObject::predictImageScene(&lt;span&gt;const&lt;/span&gt; cv::Mat&amp;amp;&lt;span&gt; imgTensor) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;preprocess image
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;convert to cvPixelbuffer&lt;/span&gt;
&lt;span&gt;    ins::PixelBufferPool mat2pixelbuffer;
    CVPixelBufferRef buffer &lt;/span&gt;=&lt;span&gt; mat2pixelbuffer.GetPixelBuffer(imgTensor);
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;predict from image&lt;/span&gt;
    NSError *&lt;span&gt;error;
    yoloModelInput  &lt;/span&gt;*input =&lt;span&gt; [[yoloModelInput alloc] initWithInput__0:buffer];
    
    yoloModelOutput &lt;/span&gt;*output = [Model predictionFromFeatures:input options:option error:&amp;amp;&lt;span&gt;error];
    
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; output.output__0;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　解析feature函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; CDetectObject::parseFeature(MLMultiArray* feature, std::vector&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;amp; ids, std::vector&amp;lt;&lt;span&gt;float&lt;/span&gt;&amp;gt;&amp;amp; confidences, std::vector&amp;lt;cv::Rect&amp;gt;&amp;amp;&lt;span&gt; boxes){
    
    NSArray&lt;/span&gt;&amp;lt;NSNumber*&amp;gt;* featureShape =&lt;span&gt; feature.shape;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; d0 = [[featureShape objectAtIndex:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] intValue];
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; d1 = [[featureShape objectAtIndex:&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] intValue];
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; d2 = [[featureShape objectAtIndex:&lt;span&gt;2&lt;/span&gt;&lt;span&gt;] intValue];
    
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; stride0 = [feature.strides[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] intValue];
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; stride1 = [feature.strides[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] intValue];
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; stride2 = [feature.strides[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;] intValue];
    
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; blockSize = &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; gridHeight =&lt;span&gt; d1;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; gridWidth =&lt;span&gt; d2;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; boxesPerCell = &lt;span&gt;5&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Int(anchors.count/5)&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; numClasses = (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)classes.size();
    
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;* pdata = (&lt;span&gt;double&lt;/span&gt;*&lt;span&gt;)feature.dataPointer;
    
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; cy =&lt;span&gt;0&lt;/span&gt;; cy&amp;lt; gridHeight; cy++&lt;span&gt;){
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; cx =&lt;span&gt;0&lt;/span&gt;; cx&amp;lt; gridWidth; cx++&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; b=&lt;span&gt;0&lt;/span&gt;; b&amp;lt;boxesPerCell; b++&lt;span&gt;){
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; channel = b*(numClasses + &lt;span&gt;5&lt;/span&gt;&lt;span&gt;);
                
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; laterId= cx*stride2+cy*&lt;span&gt;stride1;
                &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; tx = (&lt;span&gt;float&lt;/span&gt;)pdata[channel*stride0 +&lt;span&gt; laterId];
                &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; ty = (&lt;span&gt;float&lt;/span&gt;)pdata[(channel+&lt;span&gt;1&lt;/span&gt;)*stride0 +&lt;span&gt; laterId];
                &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; tw = (&lt;span&gt;float&lt;/span&gt;)pdata[(channel+&lt;span&gt;2&lt;/span&gt;)*stride0 +&lt;span&gt; laterId];
                &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; th = (&lt;span&gt;float&lt;/span&gt;)pdata[(channel+&lt;span&gt;3&lt;/span&gt;)*stride0 +&lt;span&gt; laterId];
                &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; tc = (&lt;span&gt;float&lt;/span&gt;)pdata[(channel+&lt;span&gt;4&lt;/span&gt;)*stride0 +&lt;span&gt; laterId];
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The predicted tx and ty coordinates are relative to the location
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; of the grid cell; we use the logistic sigmoid to constrain these
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; coordinates to the range 0 - 1. Then we add the cell coordinates
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; (0-12) and multiply by the number of pixels per grid cell (32).
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Now x and y represent center of the bounding box in the original
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 608x608 image space.&lt;/span&gt;
                &lt;span&gt;float&lt;/span&gt; x = (&lt;span&gt;float&lt;/span&gt;(cx) + sigmoid(tx)) *&lt;span&gt; blockSize;
                &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; y = (&lt;span&gt;float&lt;/span&gt;(cy) + sigmoid(ty)) *&lt;span&gt; blockSize;
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The size of the bounding box, tw and th, is predicted relative to
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; the size of an &quot;anchor&quot; box. Here we also transform the width and
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; height into the original 608x608 image space.&lt;/span&gt;
                &lt;span&gt;float&lt;/span&gt; w = exp(tw) * anchors[&lt;span&gt;2&lt;/span&gt;*b] *&lt;span&gt; blockSize;
                &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; h = exp(th) * anchors[&lt;span&gt;2&lt;/span&gt;*b + &lt;span&gt;1&lt;/span&gt;] *&lt;span&gt; blockSize;
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The confidence value for the bounding box is given by tc. We use
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; the logistic sigmoid to turn this into a percentage.&lt;/span&gt;
                &lt;span&gt;float&lt;/span&gt; confidence =&lt;span&gt; sigmoid(tc);
                std::vector&lt;/span&gt;&amp;lt;&lt;span&gt;float&lt;/span&gt;&amp;gt;&lt;span&gt; classesProb(numClasses);
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; numClasses; ++&lt;span&gt;i) {
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; offset = (channel+&lt;span&gt;5&lt;/span&gt;+i)*stride0 +&lt;span&gt; laterId;
                    classesProb[i] &lt;/span&gt;=  (&lt;span&gt;float&lt;/span&gt;&lt;span&gt;)pdata[offset];
                }
                softmax(classesProb);
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Find the index of the class with the largest score.&lt;/span&gt;
                auto max_itr =&lt;span&gt; std::max_element(classesProb.begin(), classesProb.end());
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; index = &lt;span&gt;int&lt;/span&gt;(max_itr -&lt;span&gt; classesProb.begin());

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Combine the confidence score for the bounding box, which tells us
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; how likely it is that there is an object in this box (but not what
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; kind of object it is), with the largest class prediction, which
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; tells us what kind of object it detected (but not where).&lt;/span&gt;
                &lt;span&gt;float&lt;/span&gt; confidenceInClass = classesProb[index] *&lt;span&gt; confidence;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(confidence&amp;gt;&lt;span&gt;confidenceThreshold){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Since we compute 19x19x5 = 1805 bounding boxes, we only want to
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; keep the ones whose combined score is over a certain threshold.
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;if (confidenceInClass &amp;gt; confidenceThreshold){&lt;/span&gt;
                    cv::Rect2d rect =cv::Rect2d(&lt;span&gt;float&lt;/span&gt;(x-w*&lt;span&gt;0.5&lt;/span&gt;), &lt;span&gt;float&lt;/span&gt;(y-h*&lt;span&gt;0.5&lt;/span&gt;), &lt;span&gt;float&lt;/span&gt;(w), &lt;span&gt;float&lt;/span&gt;&lt;span&gt;(h));
                    ids.push_back(index);
                    confidences.push_back(confidenceInClass);
                    boxes.push_back(rect);
                }
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;六、来看看预测结果如何：&lt;/p&gt;
&lt;p&gt;　　开发环境：MacOS  Mojave (10.14.3)， Xcode10.2 ,  Iphone XS (IOS 12.2), opencv2framework.&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1138496/201904/1138496-20190414005000676-1017151245.png&quot; alt=&quot;&quot; width=&quot;496&quot; height=&quot;496&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1138496/201904/1138496-20190414005156059-1222000121.png&quot; alt=&quot;&quot; width=&quot;507&quot; height=&quot;504&quot;/&gt;&lt;/p&gt;

&lt;p&gt;上面代码我放在码云git上：&lt;a href=&quot;https://gitee.com/rxdj/yolov2_object_detection.git&quot; target=&quot;_blank&quot;&gt;https://gitee.com/rxdj/yolov2_object_detection.git&lt;/a&gt;  。&lt;/p&gt;
&lt;p&gt;仅供参考，如有错误，望不吝赐教。&lt;/p&gt;

</description>
<pubDate>Sat, 13 Apr 2019 17:38:00 +0000</pubDate>
<dc:creator>一度逍遥</dc:creator>
<og:description>一些闲话： 前面我有篇博客 https://www.cnblogs.com/riddick/p/10434339.html ，大致说了下如何将pytorch训练的.pth模型转换为</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/riddick/p/10703787.html</dc:identifier>
</item>
<item>
<title>NET 泛型，详细介绍 - 乐途</title>
<link>http://www.cnblogs.com/szlblog/p/10703770.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/szlblog/p/10703770.html</guid>
<description>&lt;p&gt;今天的文章是因为再给一个朋友讲这个的时候随手记录下整理出来的。说白了就是把前辈们曾经给我吹过的我又吹了出去。&lt;/p&gt;

&lt;p&gt;　　泛型：是C# FrameWork 2.0 时代 加入进来的，可以说对与Net开发人员来说泛型是无处不再的，喜欢看源码的同学，可能会有发现，包括MVC里面基本上也是有很多发泛型，还有很多设计模式也需要搭配泛型来实现，包括项目架构&lt;/p&gt;
&lt;p&gt;泛型的存在，是代码利用率复用性都大大的提升了，有时候Object 也是可以起到相同的作用，为什么使用泛型 为什么不是用Obj ,我们来看一下：&lt;/p&gt;
&lt;p&gt;　　下面我们列出两个最基础的方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 返回int
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;I&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ShowInt(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; I)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; I;
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 返回String
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;I&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;  ShowString (&lt;span&gt;string&lt;/span&gt;&lt;span&gt; I)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; I;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的两个方法自从参数 进来到参数出去的这一个过程中我们没有进行参数方面的转换，也就是说单纯的针对的参数类型上面我们程序代码是没有损失任何的性能的。一位没有存在拆箱装箱的过程。&lt;/p&gt;
&lt;p&gt;　　我们在看两个方法：我们使用了在C# 1.0 时代就存在的一个类型 是Object&lt;br/&gt;　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 返回int
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;I&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ShowString(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; I)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Convert.ToInt32(I);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 返回String
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;I&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ShowString(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; I)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; I.ToString();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　这里我们使用的阐述类型是Obj ,Object 是引用类型，也是所有类型的父类，可以包容所有的类型，但是就单说处理参数类型的时候我们需要去转换一下才能进行使用，在这个转换的过程中我们已经损失了性能，但是使用Obj 的时候我们可以和成一个方法减少代码量，提升了代码的复用率。&lt;/p&gt;
&lt;p&gt;　　比如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 返回object
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;I&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; ShowType(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; I)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; I;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　现在简写成为这样后，我们是一个公用的方法：虽然说内部不用去转换了但是，在调用后，还是需要类型的转换同样的需要损失性能。中间性能之所以会损失是因为Obj是引用类型，存放在堆上的，假如说我们传的参数是int或其他的值类型来使用我们的公共方法，就会进行一次包装的过程，把存放在栈里面的值类型移动包装成为引用类型存放到堆里面，使参数符合当前方法的类型，这个过成也就是&lt;strong&gt;装箱&lt;/strong&gt;（需要重新分配内存），但是我们在使用的时候，又需要把他拿出来进行一下装换转换为值类型，这个过程又称为&lt;strong&gt;拆箱&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;　　我们在来使用一个方法：使用 2.0时代出现的泛型：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 返回 T
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;Parameter&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; T Show&amp;lt;s&amp;gt;&lt;span&gt;(T Parameter)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Parameter;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　为什么会使用泛型 是因为泛型方法再调用的时候有延时声明的功能这里的延时声明式只参数，泛型里面的 T ，其实咱们也可以理解为 占位符具体为谁占位的，等到调用的时候才会知道。&lt;/p&gt;
&lt;p&gt;　　如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;int&lt;/span&gt; parameter = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在调用的时候声明参数类型&lt;/span&gt;
    parameter = &lt;span&gt;new&lt;/span&gt; Common().Show&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;(parameter);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果调用的时候不去声明的话，JIT编译的时候野会帮我们自动计算&lt;/span&gt;
    parameter = &lt;span&gt;new&lt;/span&gt; Common().Show(parameter);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个时候不会损耗什么性能。延时声明也是咱们在进行框架设计的时候常用的一种思想，提高框架的性能。泛型不只是可以声明泛型方法：&lt;/p&gt;
&lt;p&gt;　　泛型类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; CURD 操作类
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;T&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ConmonClass&amp;lt;T&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Add(T s) { };
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Update(T s) { };
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Del(T s) { };
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Select(T s) { }; 
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样使用的话，在咱们真正的项目，我们可以把某些基础的操作用一个类去搞定，使用的时候调用就是了，减少代码的冗余，增加复用性，重用率。&lt;/p&gt;
&lt;p&gt;　　泛型接口：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; CURD 操作接口类
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;T&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; ConmonInterface&amp;lt;T&amp;gt;&lt;span&gt;
    {
        T Add(T s);
        T Update(T s);
        T Del(T s);
        T Select(T s);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　泛型委托：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;泛型委托&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;delegate&lt;/span&gt; T GetHandler&amp;lt;T&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我想以上的操作在我们开发项目的时候会经常见到，或使用到&lt;/p&gt;
&lt;p&gt;　　以上代码需要我们注意的时候，泛型类不能被继承，如果想要继承的话需要在继承的时候，给我们的不确定参数确定下参数类型。包括泛型接口也是一样的。&lt;/p&gt;
&lt;p&gt;　　如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Son : ConmonClass&amp;lt;Common&amp;gt;&lt;span&gt;
    {};
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 实现泛型接口
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SonInterface : ConmonInterface&amp;lt;Common&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Common Add(Common s)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Common Del(Common s)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Common Select(Common s)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Common Update(Common s)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }
     }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;strong&gt;如果说不指定泛型类型的参数类型式其实我们一样是可以继承的。需用继承者同样是泛型的&lt;/strong&gt;。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;strong&gt;建议：&lt;/strong&gt;长期使用Net的同学我想我们需要加强一下泛型的认识了，因为在NetCore中常常会使用依赖注入，在使用&lt;strong&gt;泛型类&lt;/strong&gt;的时候我们可能会多少有点麻烦的，泛型方法相对来说要简单的，如果说要想让我们的框架实现高度的内聚，大家需要多多理解。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　泛型的约束，多重约束相当重要，代表我们是否能很好的利用泛型。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　泛型的约束类型大概分为如下几种：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;179&quot;&gt;
&lt;p align=&quot;left&quot;&gt;引用类型约束：&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;374&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;表明泛型参数只能是引用类型的：&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;179&quot;&gt;
&lt;p align=&quot;left&quot;&gt;值类型约束：&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;374&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;表明泛型参数只能是值类型的：&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;179&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;无参数构造函数约束：&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;374&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;泛型是可以实例化的。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;179&quot;&gt;
&lt;p align=&quot;left&quot;&gt;基类约束&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;374&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;必须满足基类中的某些属性&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;179&quot;&gt;
&lt;p align=&quot;left&quot;&gt;接口约束&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;374&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;必须满足接口中的某些属性&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p align=&quot;left&quot;&gt;　　&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;具体的就不代码了。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;有不足之处&lt;/strong&gt; &lt;span&gt;&lt;strong&gt;希望大家指出相互学习，&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;            本文&lt;span&gt;&lt;strong&gt;原创：&lt;/strong&gt;转载请注明出处 谢谢！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 13 Apr 2019 16:46:00 +0000</pubDate>
<dc:creator>乐途</dc:creator>
<og:description>今天的文章是因为再给一个朋友讲这个的时候随手记录下整理出来的。说白了就是把前辈们曾经给我吹过的我又吹了出去。 泛型：是C# FrameWork 2.0 时代 加入进来的，可以说对与Net开发人员来说泛</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/szlblog/p/10703770.html</dc:identifier>
</item>
<item>
<title>自定义 highcharts 图例之 symbol - Fine-YT</title>
<link>http://www.cnblogs.com/Fine-YT/p/10703769.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Fine-YT/p/10703769.html</guid>
<description>&lt;p&gt;最近接到个需求，需要自定义 highcharts 的图例（legend）的symbol（标签前的小图标）,于是立刻去 highcharts 官网 api 查找，发现并没有自定图标的属性。最后 goole 了一番，查找到了两种方法实现，在此记录一下，防止以后用到。&lt;/p&gt;
&lt;p&gt;话不多说，先上效果图&lt;br/&gt;也可以直接访问示例代码 &lt;a href=&quot;https://jshare.com.cn/columns/JEOAzo&quot; class=&quot;uri&quot; title=&quot;自定义 highcharts 图例之 legend&quot;&gt;https://jshare.com.cn/columns/JEOAzo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1334479/201904/1334479-20190414010806711-732418281.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;原理：&lt;br/&gt;  将图例原来的图标隐藏或不显示，由于在 highcharts 中，图例的 label 是可以格式化的，所以借此来自定义图标样式&lt;br/&gt;步骤：&lt;br/&gt;1、在 legend 中设置 symbol 的大小为 0.01（使其不显示，接近 none 的效果，不能设置为0, 0 是没有效果的）&lt;br/&gt;2、设置 legend 的 labelFormatter，在格式化函数中自定义显示内容&lt;/p&gt;
&lt;p&gt;代码如下：&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;br/&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;br/&gt;legend: {&lt;br/&gt;useHTML: true, // 设置允许使用 html&lt;br/&gt;// 使 legend 自带的 symbol 显示为 none 效果&lt;br/&gt;symbolWidth: 0.001,&lt;br/&gt;symbolHeight: 0.001,&lt;br/&gt;symbolRadius: 0.001,&lt;br/&gt;// 格式化 legend 的 label&lt;br/&gt;labelFormatter() {&lt;br/&gt;// 这里的内容根据需求自行编写&lt;br/&gt;let img = '&amp;lt;img \src = &quot;图片地址&quot; width=&quot;14px&quot; height=&quot;14px&quot;&amp;gt;'&lt;br/&gt;return img + ' ' + this.name&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;br/&gt;&lt;/pre&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;备注:&lt;/span&gt;&lt;/strong&gt; 此方法适用于任何图形,扩展性高，并且可以使用 html 进行自定义（需设置 useHTML:true）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;原理：&lt;br/&gt;  在数据为null的情况下，marker 的 symbol 样式跟图例的 symbol 是一致的，所以此方法采取了取巧的方式&lt;br/&gt;步骤：&lt;br/&gt;1、在 sries 中构造 n组（原始series的长度） null 数据，设置 market 的 symbol 属性，使用图片&lt;br/&gt;2、设置原始数据的 showInLegend 为 false,不显示真正数据的 legend&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;br/&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;br/&gt;series: [{&lt;br/&gt;name: '小张',&lt;br/&gt;data: [5, 3, 4, 7, 2],&lt;br/&gt;showInLegend: false&lt;br/&gt;}, {&lt;br/&gt;name: '小张（构造的null数据）',&lt;br/&gt;data: null,&lt;br/&gt;marker: {&lt;br/&gt;symbol: 'url(&lt;a href=&quot;https://www.highcharts.com/samples/graphics/sun.png&quot; class=&quot;uri&quot;&gt;https://www.highcharts.com/samples/graphics/sun.png&lt;/a&gt;)'&lt;br/&gt;}&lt;br/&gt;}]&lt;br/&gt;&lt;/code&gt;&lt;br/&gt;&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;备注:&lt;/span&gt;&lt;/strong&gt; 由于该方法对图形类型具有局限性（这里只试了 column 和 line 类型），所以不推荐使用，只作为扩展备用。&lt;br/&gt;1、该方法需要该图有 market 属性（column图没有该属性，则不生效）&lt;br/&gt;2、在 line 图中，需在 legend 中设置 symbolWidth: 0.001（去掉 legend symbol 中的横线）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;该方法可能有更多图形类型不支持，故建议使用第一种方法&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 13 Apr 2019 16:45:00 +0000</pubDate>
<dc:creator>Fine-YT</dc:creator>
<og:description>最近接到个需求，需要自定义 highcharts 的图例（legend）的symbol（标签前的小图标）,于是立刻去 highcharts 官网 api 查找，发现并没有自定图标的属性。最后 gool</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Fine-YT/p/10703769.html</dc:identifier>
</item>
<item>
<title>Golang之路 - 孔辉</title>
<link>http://www.cnblogs.com/konghui/p/10703660.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/konghui/p/10703660.html</guid>
<description>[unable to retrieve full-text content][TOC] Golang之路 &quot;Golang(一) 开篇必须吹牛逼&quot; &quot;Golang(二) 第一个go程序和基本语法&quot; &quot;Golang(三) 函数&quot; &quot;Golang(四) 流程控制&quot; &quot;Golang(五) 复合类型&quot; &quot;Golang(六) 面对&quot;对象&quot;&quot; &quot;Golang(七) 处理字符串&quot; &quot;Gol</description>
<pubDate>Sat, 13 Apr 2019 15:58:00 +0000</pubDate>
<dc:creator>孔辉</dc:creator>
<og:description>[TOC] Golang之路 'Golang(一) 开篇必须吹牛逼' 'Golang(二) 第一个go程序和基本语法' 'Golang(三) 函数' 'Golang(四) 流程控制' 'Golang(</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/konghui/p/10703660.html</dc:identifier>
</item>
<item>
<title>WebService连接winfrom简单实例 - 今天你努力了吗？</title>
<link>http://www.cnblogs.com/debugnotes/p/10703656.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/debugnotes/p/10703656.html</guid>
<description>

















&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/Brambling/p/6815565.html&quot;&gt;C# 创建、部署和调用WebService的简单示例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;webservice 可以用于分布式应用程序之间的交互，和不同程序之间的交互。&lt;/p&gt;
&lt;p&gt;具体详细用法可去查询资料。下面开始创建一个简单的webservice的例子。这里我用的是Visual Studio 2013开发工具。&lt;/p&gt;
&lt;p&gt;首先创建一个空的Web应用程序。(只是测试demo，我把webservice和winfrom创建在一个项目下了。)创建用4.5的！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413233927228-1937494225.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234033453-1247228702.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234043157-2005675051.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择Web服务，点击添加。一个简单的webservice就创建完成了，接下来编写两个简单的方法。&lt;/p&gt;
&lt;p&gt;然后在这里类里面加入下面的方法&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;using System;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;using System.Collections.Generic;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;using System.Linq;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;using System.Web;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;using System.Web.Services;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;using System.Data.SqlClient;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;using System.Data;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;namespace WebServiceDemo&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;{&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    /// &amp;lt;summary&amp;gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    /// WebServiceDemo1 的摘要说明&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    /// &amp;lt;/summary&amp;gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    [WebService(Namespace = &quot;http://tempuri.org/&quot;)]&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    [System.ComponentModel.ToolboxItem(false)]&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    // 若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消注释以下行。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    // [System.Web.Script.Services.ScriptService]&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    public class WebServiceDemo1 : System.Web.Services.WebService&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        [WebMethod]&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        public string HelloWorld()&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            return &quot;Hello World&quot;;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        //如果方法需要通过webservice的地址进行调用，那就必须在方法上面打上 [WebMethod] 的特性标签，否则是无法通过webservice访问到的。Description 是方法的描述。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        [WebMethod(Description = &quot;求和方法&quot;)]&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        public int add(string a, string b)&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            int sum = 0;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            sum = Convert.ToInt32(a) + Convert.ToInt32(b);&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            return sum;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        //定义数据库连接对象&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        private SqlConnection con;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        [WebMethod]&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        public DataSet GetInfo(string strSql)&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            string sqlConnect = &quot;initial catalog =Northwind; server =127.0.0.1; uid = sa; pwd =sa&quot;;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            con = new SqlConnection(sqlConnect);&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            con.Open();&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            SqlDataAdapter da = new SqlDataAdapter(strSql, con);&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            DataSet ds = new DataSet();&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            da.Fill(ds);&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            return ds;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        [WebMethod]&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        public bool testConnect()&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            try&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;                //数据库连接，定义连接对象和连接字符串并打开&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;                string sqlConnect = &quot;initial catalog =Northwind; server =127.0.0.1; uid = sa; pwd =sa&quot;;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;                con = new SqlConnection(sqlConnect);&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;                con.Open();&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;                return true;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            catch&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;                return false;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    }&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;PS：如果方法需要通过webservice的地址进行调用，那就必须在方法上面打上 [WebMethod] 的特性标签，否则是无法通过webservice访问到的。Description 是方法的描述。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234106641-2092107098.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234113984-1658244304.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后运行一下，就可以看到上图的方法了，访问 webservice 就可以根据地址栏里的地址进行调用 webservice 的方法了。&lt;/p&gt;

&lt;p&gt;但是这样如何让其他应用程序通过网络进行访问呢？那就需要部署到服务器了。&lt;/p&gt;
&lt;p&gt;下面的演示我是部署在本机的，不过服务器部署也是一样的。网站部署需要用到 IIS，而我这里是已经开启的，如果没有开启的话，可以通过 开始菜单 &amp;gt; 控制面板 &amp;gt; 程序 &amp;gt; 启用或关闭 windows 功能 开启。具体的可以网上搜索一下，这里就不做过多的介绍。&lt;/p&gt;

&lt;p&gt;开启 IIS 之后，先把刚才的 webservice 发布之后，然后打开 IIS 管理器。&lt;/p&gt;
&lt;p&gt;如果出现各种报错，自行查资料！！！。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234125554-1254322183.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234131388-1002635717.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234137792-1450547843.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;设置不用改，继续下一步。然后点击发布。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234148840-1717495315.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;这样就发布完成了，现在打开 IIS 管理器，(运行输入 inetmgr  如果打不开证明ISS没有开启)然后选择网站，点击添加网站。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234224033-1914165740.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234242759-1539381197.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;输入网站的名称、IP地址（本机可以不输入IP地址）和端口，选择文件的路径，然后点击确定，网站就创建完成了。&lt;/p&gt;

&lt;p&gt;当然，并不一定就立马可以使用了，这之中会出现很多的错误，下面是我碰到的一些错误和一些解决方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234302335-2004999273.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;这个错误是因为文件的访问权限不够的问题。解决方法就是点击编辑权限。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234315132-1340867395.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后选择安全栏，点击编辑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234326922-86630192.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234337310-225472463.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后点击添加一个用户，把权限设置为允许。或者使用下面这种方法：&lt;/p&gt;
&lt;p&gt;选择网站，然后选中身份验证，点击基本设置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234452558-2081447680.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;选择连接为。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234503965-2090993587.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234511724-1698500709.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后选择特定用户，点击设置，输入本机的用户名和密码，点击确定就可以了。然后可以点击测试设置看看效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234526970-655978204.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;这个错误的原因是在安装Framework v4.0之后，再启用IIS，导致Framework没有完全安装。&lt;/p&gt;
&lt;p&gt;解决方法就是：开始菜单 &amp;gt; 命令提示符（管理员），然后输入并执行   %windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_regiis.exe -i   命令行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234903336-100283043.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;这个问题的是因为，应用程序池设置的原因，开始新建网站的时候没有选择应用程序池，默认为v2.0的版本，不支持 Framework 4.5。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234913969-2064472934.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;解决方法就是选择应用程序池，然后改为v4.0的版本，管道模式设置为集成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234949275-442209096.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个错误的原因是由于系统目录下的Temp目录无相应的权限所致。&lt;/p&gt;
&lt;p&gt;解决方法就是进入 C盘 windows 目录下的 Temp 目录，右键属性 &amp;gt;  安全栏 &amp;gt; 编辑 &amp;gt; IIS_IUSRS 的权限设置为完全控制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413234959551-2123590368.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413235006601-818305744.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413235011689-493762864.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个错误的原因是因为没有配置网站的默认文档。&lt;/p&gt;
&lt;p&gt;解决方法就是选中网站，点击默认文档，然后添加一个默认的页面，即应用程序的起始页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413235022967-12293347.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413235038682-310389060.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后，处理了众多问题之后，总算是部署成功了。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413235049469-2007317833.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413235123239-1863416264.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413235128704-1008821458.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413235134174-514409650.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;在URL栏输入部署的网站地址，然后点击转到，就可以看到下面的方法内容了，然后输入web引用名称，点击添加引用。&lt;/p&gt;
&lt;p&gt;引用添加完成，下面就开始调用webservice。&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;using System;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;using System.Collections.Generic;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;using System.ComponentModel;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;using System.Data;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;using System.Drawing;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;using System.Linq;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;using System.Text;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;using System.Threading.Tasks;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;using System.Windows.Forms;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;namespace MyWebService&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;{&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    public partial class Form1 : Form&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        public Form1()&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            InitializeComponent();&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;         //初始化webservice&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        WebReference.WebServiceDemo local_S = new WebReference.WebServiceDemo();&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        //调用webservice连接数据库的方法&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        private void button1_Click(object sender, EventArgs e)&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            if (local_S.testConnect())&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;                MessageBox.Show(&quot;连接成功&quot;);&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            else&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;                MessageBox.Show(&quot;连接失败&quot;);&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        private void Form1_Load(object sender, EventArgs e)&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        //调用webservice查询数据的方法&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        private void button2_Click(object sender, EventArgs e)&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            string strsql = &quot;select * from Customer&quot;;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            DataSet ds = local_S.GetInfo(strsql);&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            dataGridView1.DataSource = ds.Tables[0];&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;    }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;}&lt;/p&gt;


&lt;p&gt;重新发布webservice，发布之后之前添加的默认文档可能会删除。重新按照之前的步骤加入即可。然后删除之前的webservice服务应用。重新引用webservice服务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413235202627-72779897.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;     两个按钮事件&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;  public Form1()&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            InitializeComponent();&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;         //初始化webservice&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        WebReference.WebServiceDemo local_S = new WebReference.WebServiceDemo();&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        //调用webservice连接数据库的方法&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        private void button1_Click(object sender, EventArgs e)&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            if (local_S.testConnect())&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;                MessageBox.Show(&quot;连接成功&quot;);&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            }&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            else&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;                MessageBox.Show(&quot;连接失败&quot;);&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            }&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;


&lt;p align=&quot;left&quot;&gt;        //调用webservice查询数据的方法&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        private void button2_Click(object sender, EventArgs e)&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        {&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            string strsql = &quot;select * from Customer&quot;;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            DataSet ds = local_S.GetInfo(strsql);&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;            dataGridView1.DataSource = ds.Tables[0];&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413235238794-1437705077.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1204449/201904/1204449-20190413235244300-1226733612.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;表自己建一个&lt;/p&gt;


&lt;p&gt;简单的webserver在winfrom中的使用到这里就结束了。&lt;/p&gt;
&lt;p&gt;联系QQ同微信 78474580&lt;/p&gt;
</description>
<pubDate>Sat, 13 Apr 2019 15:55:00 +0000</pubDate>
<dc:creator>今天你努力了吗？</dc:creator>
<og:description>C# 创建、部署和调用WebService的简单示例 webservice 可以用于分布式应用程序之间的交互，和不同程序之间的交互。 具体详细用法可去查询资料。下面开始创建一个简单的webservic</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/debugnotes/p/10703656.html</dc:identifier>
</item>
<item>
<title>harris角点检测的简要总结 - charlee44</title>
<link>http://www.cnblogs.com/charlee44/p/10703600.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/charlee44/p/10703600.html</guid>
<description>&lt;p&gt;harris角点检测是一种特征提取的方法，而特征提取正是计算机视觉的一种重要手段。尽管它看起来很复杂，其实也是基于数学原理和简单的图像处理来实现的。&lt;br/&gt;本文之前可以参看笔者写的几篇图像处理的文章，将会有助于更深入了解harris角点检测的实现。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/charlee44/p/10582216.html&quot;&gt;图像的卷积(滤波)运算(一)——图像梯度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/charlee44/p/10592588.html&quot;&gt;图像的卷积(滤波)运算(二)——高斯滤波&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/charlee44/p/10633890.html&quot;&gt;图像的膨胀与腐蚀——OpenCV与C++的具体实现&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;算法思想&quot;&gt;1) 算法思想&lt;/h2&gt;
&lt;p&gt;为了判断图像的角点，可以利用卷积窗口滑动的思想，让以该点为中心的窗口在附近滑动。如下图是所有描述角点文章的初始图例，它表征的正是这一特性：当滑动窗口在所有方向移动时，窗口内的像素灰度出现了较大的变化，就可能是角点。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1000410/201904/1000410-20190413234011073-923693055.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;数学模型&quot;&gt;2) 数学模型&lt;/h2&gt;
&lt;p&gt;根据上述的算法思想，可以构建数学模型，图像窗口平移[u,v]产生灰度变化E(u,v)为：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1000410/201904/1000410-20190413234028730-1904572180.jpg&quot;/&gt;&lt;br/&gt;其中w(x,y)是一种加权函数，几乎所有的应用都把它设为高斯函数。由上述公式，进行推导如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1000410/201904/1000410-20190413234050609-1982440560.jpg&quot;/&gt;&lt;br/&gt;最后得到的公式(6)，在几何意义上表征的是一个椭圆。椭圆的长短轴分别沿着矩阵M的两个特征向量的方向，而两个与之对应的特征值分别是半长轴和半短轴的长度的平方的倒数。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1000410/201904/1000410-20190413234113254-1933630592.png&quot;/&gt;&lt;br/&gt;那么根据矩阵M的两个特征值λ1和λ2，可以将图像上的像素点分类成直线、平面与角点：当λ1和λ2 都比较大，且近似相等时，可以认为是角点。如下图所示：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1000410/201904/1000410-20190413234128729-1223382652.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;优化推导&quot;&gt;3) 优化推导&lt;/h2&gt;
&lt;p&gt;而上述表达不太方便使用，又定义了一个角点响应函数R，通过R的大小来判断像素是否为角点：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1000410/201904/1000410-20190413234142242-1608571289.png&quot;/&gt;&lt;br/&gt;式中，detM为矩阵M的行列式，traceM为矩阵M的直迹。α为经常常数，取值范围为0.04~0.06。对于R公式，有推导如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1000410/201904/1000410-20190413234153679-1522387983.jpg&quot;/&gt;&lt;br/&gt;可以知道，角点响应值R仍然表征了矩阵M两个特征值λ1和λ2，同样可以进行上述分类：当R为大数值正数的时候，表示为角点。如下图所示：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1000410/201904/1000410-20190413234207558-1035636035.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在OpenCV中，已经提供了Harris角点检测函数cornerHarris()。为了更好地理解Harris角点提取的原理，这里参考了网上代码，自己实现了其算法，不过也调用了OpenCV中一些基本函数。&lt;br/&gt;根据上述原理，Harris图像角点检测算法的关键是计算M矩阵，M矩阵是图像I(x,y)的偏导数矩阵，也就是要先求出图像的梯度。&lt;/p&gt;
&lt;h2 id=&quot;详细步骤&quot;&gt;1) 详细步骤&lt;/h2&gt;
&lt;p&gt;1.计算图像I(x,y)在X，Y方向的梯度。在这里是通过卷积函数filter2D实现的，具体原理可以看(1)中提到的相关文章。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Mat gray;
imgSrc.convertTo(gray, CV_64F);

Mat xKernel = (Mat_&amp;lt;double&amp;gt;(1, 3) &amp;lt;&amp;lt; -1, 0, 1);
Mat yKernel = xKernel.t();

Mat Ix, Iy;
filter2D(gray, Ix, CV_64F, xKernel);
filter2D(gray, Iy, CV_64F, yKernel);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.计算图像两个方向梯度的乘积。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Mat Ix2, Iy2, Ixy;
Ix2 = Ix.mul(Ix);
Iy2 = Iy.mul(Iy);
Ixy = Ix.mul(Iy);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.对Ix2、Iy2和Ixy进行高斯滤波，生成矩阵M的元素A、B和C。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Mat gaussKernel = getGaussianKernel(7, 1);
filter2D(Ix2, Ix2, CV_64F, gaussKernel);
filter2D(Iy2, Iy2, CV_64F, gaussKernel);
filter2D(Ixy, Ixy, CV_64F, gaussKernel);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4.根据公式计算每个像素的Harris响应值R，得到图像对应的响应值矩阵。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Mat cornerStrength(gray.size(), gray.type());
for (int i = 0; i &amp;lt; gray.rows; i++)
{
    for (int j = 0; j &amp;lt; gray.cols; j++)
    {
        double det_m = Ix2.at&amp;lt;double&amp;gt;(i, j) * Iy2.at&amp;lt;double&amp;gt;(i, j) - Ixy.at&amp;lt;double&amp;gt;(i, j) * Ixy.at&amp;lt;double&amp;gt;(i, j);
        double trace_m = Ix2.at&amp;lt;double&amp;gt;(i, j) + Iy2.at&amp;lt;double&amp;gt;(i, j);
        cornerStrength.at&amp;lt;double&amp;gt;(i, j) = det_m - alpha * trace_m *trace_m;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5.在3×3的邻域内进行非最大值抑制，找到局部最大值点，即为图像中的角点。在这里非最大值抑制是通过图像膨胀的实现的。比较膨胀前后的响应值矩阵，得到局部最大值。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//在3×3的邻域内进行非最大值抑制，找到局部最大值点，即为图像中的角点
double maxStrength;
minMaxLoc(cornerStrength, NULL, &amp;amp;maxStrength, NULL, NULL);
Mat dilated;
Mat localMax;
dilate(cornerStrength, dilated, Mat());             //膨胀
compare(cornerStrength, dilated, localMax, CMP_EQ);      //比较保留最大值的点

//得到角点的位置
Mat cornerMap;
double qualityLevel = 0.01;
double thresh = qualityLevel * maxStrength;   
cornerMap = cornerStrength &amp;gt; thresh;                //小于阈值t的R置为零。
bitwise_and(cornerMap, localMax, cornerMap);            //位与运算，有0则为0, 全为1则为1

imgDst = cornerMap.clone();&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;最终实现&quot;&gt;2) 最终实现&lt;/h2&gt;
&lt;p&gt;合并以上步骤，传入参数，最终的实现代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;opencv2\opencv.hpp&amp;gt;

using namespace cv;
using namespace std;

void detectHarrisCorners(const Mat&amp;amp; imgSrc, Mat&amp;amp; imgDst, double alpha)
{
    //
    Mat gray;
    imgSrc.convertTo(gray, CV_64F);

    //计算图像I(x,y)在X，Y方向的梯度
    Mat xKernel = (Mat_&amp;lt;double&amp;gt;(1, 3) &amp;lt;&amp;lt; -1, 0, 1);
    Mat yKernel = xKernel.t();

    Mat Ix, Iy;
    filter2D(gray, Ix, CV_64F, xKernel);
    filter2D(gray, Iy, CV_64F, yKernel);

    //计算图像两个方向梯度的乘积。
    Mat Ix2, Iy2, Ixy;
    Ix2 = Ix.mul(Ix);
    Iy2 = Iy.mul(Iy);
    Ixy = Ix.mul(Iy);

    //对Ix2、Iy2和Ixy进行高斯滤波，生成矩阵M的元素A、B和C。
    Mat gaussKernel = getGaussianKernel(7, 1);
    filter2D(Ix2, Ix2, CV_64F, gaussKernel);
    filter2D(Iy2, Iy2, CV_64F, gaussKernel);
    filter2D(Ixy, Ixy, CV_64F, gaussKernel);

    //根据公式计算每个像素的Harris响应值R，得到图像对应的响应值矩阵。
    Mat cornerStrength(gray.size(), gray.type());
    for (int i = 0; i &amp;lt; gray.rows; i++)
    {
        for (int j = 0; j &amp;lt; gray.cols; j++)
        {
            double det_m = Ix2.at&amp;lt;double&amp;gt;(i, j) * Iy2.at&amp;lt;double&amp;gt;(i, j) - Ixy.at&amp;lt;double&amp;gt;(i, j) * Ixy.at&amp;lt;double&amp;gt;(i, j);
            double trace_m = Ix2.at&amp;lt;double&amp;gt;(i, j) + Iy2.at&amp;lt;double&amp;gt;(i, j);
            cornerStrength.at&amp;lt;double&amp;gt;(i, j) = det_m - alpha * trace_m *trace_m;
        }
    }

    //在3×3的邻域内进行非最大值抑制，找到局部最大值点，即为图像中的角点
    double maxStrength;
    minMaxLoc(cornerStrength, NULL, &amp;amp;maxStrength, NULL, NULL);
    Mat dilated;
    Mat localMax;
    dilate(cornerStrength, dilated, Mat());             //膨胀
    compare(cornerStrength, dilated, localMax, CMP_EQ);      //比较保留最大值的点
    
    //得到角点的位置
    Mat cornerMap;
    double qualityLevel = 0.01;
    double thresh = qualityLevel * maxStrength;   
    cornerMap = cornerStrength &amp;gt; thresh;                //小于阈值t的R置为零。
    bitwise_and(cornerMap, localMax, cornerMap);            //位与运算，有0则为0, 全为1则为1

    imgDst = cornerMap.clone();
}

//在角点位置绘制标记
void drawCornerOnImage(Mat&amp;amp; image, const Mat&amp;amp;binary)
{
    Mat_&amp;lt;uchar&amp;gt;::const_iterator it = binary.begin&amp;lt;uchar&amp;gt;();
    Mat_&amp;lt;uchar&amp;gt;::const_iterator itd = binary.end&amp;lt;uchar&amp;gt;();
    for (int i = 0; it != itd; it++, i++)
    {
        if (*it)
            circle(image, Point(i%image.cols, i / image.cols), 3, Scalar(0, 255, 0), 1);
    }
}

int main()
{
    //从文件中读取成灰度图像
    const char* imagename = &quot;D:\\Data\\imgDemo\\whdx.jpg&quot;;
    Mat img = imread(imagename, IMREAD_GRAYSCALE);
    if (img.empty())
    {
        fprintf(stderr, &quot;Can not load image %s\n&quot;, imagename);
        return -1;
    }

    //
    Mat imgDst;
    double alpha = 0.05;    
    detectHarrisCorners(img, imgDst, alpha);
    
    //在角点位置绘制标记
    drawCornerOnImage(img, imgDst);

    //
    imshow(&quot;Harris角点检测&quot;, img);
    waitKey();
    
    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其运行结果为：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1000410/201904/1000410-20190413234226216-594779792.png&quot;/&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/ronny/p/4009425.html&quot;&gt;Harris角点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/polly333/p/5416172.html&quot;&gt;Harris角点算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/47033644&quot;&gt;矩阵特征值和椭圆长短轴的关系？-Eathen的回答&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sat, 13 Apr 2019 15:45:00 +0000</pubDate>
<dc:creator>charlee44</dc:creator>
<og:description>简要介绍了harris角点检测的原理与具体的实现过程。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/charlee44/p/10703600.html</dc:identifier>
</item>
<item>
<title>大数据技术之_17_Storm学习_Storm 概述+Storm 基础知识+Storm 集群搭建+Storm 常用 API+Storm 分组策略和并发度 - 黑泽君</title>
<link>http://www.cnblogs.com/chenmingjun/p/10703594.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenmingjun/p/10703594.html</guid>
<description>&lt;p id=&quot;tocid_0&quot; class=&quot;toc&quot;&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#hstorm&quot;&gt;一 Storm 概述&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h11&quot;&gt;1.1 离线计算是什么？&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h12&quot;&gt;1.2 流式计算是什么&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h13storm&quot;&gt;1.3 Storm 是什么？&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h14stormhadoop&quot;&gt;1.4 Storm 与 Hadoop 的区别&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h15storm&quot;&gt;1.5 Storm 应用场景及行业案例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h151&quot;&gt;1.5.1 运用场景&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h152&quot;&gt;1.5.2 典型案列&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h16storm&quot;&gt;1.6 Storm 特点&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#hstorm-1&quot;&gt;二 Storm 基础知识&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h21storm&quot;&gt;2.1 Storm 编程模型&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h211tuple&quot;&gt;2.1.1 元组（Tuple）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h212stream&quot;&gt;2.1.2 流（Stream）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h213spout&quot;&gt;2.1.3 水龙头（Spout）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h214bolt&quot;&gt;2.1.4 转接头（Bolt）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h215topology&quot;&gt;2.1.5 拓扑（Topology）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h22storm&quot;&gt;2.2 Storm 核心组件&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h221&quot;&gt;2.2.1 主控节点与工作节点&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h222nimbussupervisor&quot;&gt;2.2.2 Nimbus 进程与 Supervisor 进程&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h223streamgrouping&quot;&gt;2.2.3 流分组（Stream Grouping）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h224worker&quot;&gt;2.2.4 工作进程（Worker）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h225executor&quot;&gt;2.2.5 执行器（Executor）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h226task&quot;&gt;2.2.6 任务（Task）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h23&quot;&gt;2.3 实时流计算常见架构图&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#hstorm-2&quot;&gt;三 Storm 集群搭建&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h31&quot;&gt;3.1 环境准备&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h311&quot;&gt;3.1.1 集群规划&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h312jar&quot;&gt;3.1.2 jar 包下载&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h313&quot;&gt;3.1.3 虚拟机准备&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h314jdk&quot;&gt;3.1.4 安装 jdk&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h315zookeeper&quot;&gt;3.1.5 安装 Zookeeper&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h32storm&quot;&gt;3.2 Storm 集群部署&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h321&quot;&gt;3.2.1 配置集群&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h322storm&quot;&gt;3.2.2 Storm 日志信息查看&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h323storm&quot;&gt;3.2.3 Storm 命令行操作&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#hstormapi&quot;&gt;四 Storm 常用 API&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h41api&quot;&gt;4.1 API 简介&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h411component&quot;&gt;4.1.1 Component 组件&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h412spout&quot;&gt;4.1.2 Spout 水龙头&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h413bolt&quot;&gt;4.1.3 Bolt 转接头&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h414spouttail&quot;&gt;4.1.4 Spout 的 tail 特性&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h42&quot;&gt;4.2 网站日志处理案例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h421&quot;&gt;4.2.1 实操环境准备&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h4221id&quot;&gt;4.2.2 需求1：将接收到日志的会话 id 打印在控制台&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h4232tail&quot;&gt;4.2.3 需求2：动态增加日志，查看控制台打印信息（tail特性）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#hstorm-3&quot;&gt;五 Storm 分组策略和并发度&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h51&quot;&gt;5.1 读取文件案例思考&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h52streamgrouping&quot;&gt;5.2 分组策略（Stream Grouping）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h53&quot;&gt;5.3 并发度&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h531&quot;&gt;5.3.1 场景分析&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h532&quot;&gt;5.3.2 并发度&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h54&quot;&gt;5.4 实操案例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h541&quot;&gt;5.4.1 实时单词统计案例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h542pv&quot;&gt;5.4.2 实时计算网站 PV 案例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/chenmingjun/p/10703594.html#h543uv&quot;&gt;5.4.3 实时计算网站 UV 去重案例&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;hstorm&quot;&gt;&lt;span&gt;&lt;strong&gt;一 Storm 概述&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h11&quot;&gt;&lt;span&gt;&lt;strong&gt;1.1 离线计算是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  离线计算：批量获取数据、批量传输数据、&lt;code&gt;周期性&lt;/code&gt;批量计算数据、数据展示。&lt;br/&gt;  代表技术：Sqoop 批量导入数据、HDFS 批量存储数据、MapReduce 批量计算数据、Hive 批量计算数据。&lt;/p&gt;
&lt;h3 id=&quot;h12&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2 流式计算是什么&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  流式计算：数据实时产生、数据实时传输、数据实时计算、实时展示。&lt;br/&gt;  代表技术：Flume 实时获取数据、Kafka 实时数据存储、Storm(阿帕奇)/JStorm(淘宝) 实时数据计算、Redis 实时结果缓存、Mysql 持久化存储。&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;离线计算与实时计算最大的区别：实时收集、实时计算、实时展示。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;公司整个后台系统架构图解&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzyj0.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h13storm&quot;&gt;&lt;span&gt;&lt;strong&gt;1.3 Storm 是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  Storm 是一个分布式计算框架，主要使用 Clojure 与 Java 语言编写，最初是由Nathan Marz 带领 Backtype 公司团队创建，在 Backtype 公司被 Twitter 公司收购后进行开源。最初的版本是在 2011 年 9 月 17 日发行，版本号 0.5.0。&lt;/p&gt;
&lt;p&gt;  2013 年9 月，Apache 基金会开始接管并孵化 Storm 项目。Apache Storm 是在Eclipse Public License下进行开发的，它提供给大多数企业使用。经过 1 年多时间，2014 年 9 月，Storm 项目成为 Apache 的顶级项目。目前，Storm 的最新版本：Storm 1.2.2 Released (04 Jun 2018)。&lt;/p&gt;
&lt;p&gt;  Storm 是一个免费开源的分布式实时计算系统。Storm 能轻松可靠地处理无界的数据流，就像 Hadoop 对数据进行批处理。&lt;/p&gt;
&lt;h3 id=&quot;h14stormhadoop&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4 Storm 与 Hadoop 的区别&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  1）Storm 用于实时计算；Hadoop 用于离线计算。&lt;br/&gt;  2）Storm 处理的数据保存在内存中，源源不断；Hadoop 处理的数据保存在文件系统中，一批一批处理。&lt;br/&gt;  3）Storm 的数据通过网络传输进来；Hadoop 的数据保存在磁盘中。&lt;br/&gt;  4）Storm 与 Hadoop 的编程模型相似。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzscq.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;strong&gt;（1）Hadoop 相关名称&lt;/strong&gt;&lt;br/&gt;  Job：任务名称&lt;br/&gt;  JobTracker：项目经理（&lt;code&gt;JobTracker 对应于 NameNode&lt;/code&gt;；JobTracker 是一个 master 服务，软件启动之后 JobTracker 接收 Job，负责调度 Job 的每一个子任务 task 运行于 TaskTracker 上，并监控它们，如果发现有失败的 task 就重新运行它）&lt;br/&gt;  TaskTracker：开发组长（&lt;code&gt;TaskTracker 对应于 DataNode&lt;/code&gt;；TaskTracker 是运行在多个节点上的 slaver 服务。TaskTracker 主动与 JobTracker 通信，接收作业，并负责直接执行每一个任务）&lt;br/&gt;  Child：负责开发的人员&lt;br/&gt;  Mapper/Reduce：开发人员中的两种角色，一种是服务器开发、一种是客户端开发&lt;br/&gt;&lt;strong&gt;（2）Storm 相关名称&lt;/strong&gt;&lt;br/&gt;  Topology(拓扑)：任务名称&lt;br/&gt;  Nimbus：项目经理&lt;br/&gt;  Supervisor：开发组长&lt;br/&gt;  Worker：开发人员&lt;br/&gt;  Spout(水龙头)/Bolt(转接头)：开发人员中的两种角色，一种是服务器开发、一种是客户端开发
&lt;h3 id=&quot;h15storm&quot;&gt;&lt;span&gt;&lt;strong&gt;1.5 Storm 应用场景及行业案例&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  Storm 用来实时计算源源不断产生的数据，如同流水线生产。&lt;/p&gt;
&lt;h4 id=&quot;h151&quot;&gt;&lt;span&gt;&lt;strong&gt;1.5.1 运用场景&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  Storm 能用到很多场景中，包括：实时分析、在线机器学习、连续计算等。&lt;br/&gt;  1）推荐系统：实时推荐，根据下单或加入购物车推荐相关商品。&lt;br/&gt;  2）金融系统：实时分析股票信息数据。&lt;br/&gt;  3）预警系统：根据实时采集数据，判断是否到了预警阈值。&lt;br/&gt;  4）网站统计：实时销量、流量统计，如淘宝双11效果图。&lt;/p&gt;
&lt;h4 id=&quot;h152&quot;&gt;&lt;span&gt;&lt;strong&gt;1.5.2 典型案列&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1）京东-实时分析系统：实时分析用户的属性，并反馈给搜索引擎&lt;/strong&gt;&lt;br/&gt;  最初，用户属性分析是通过每天在云上定时运行的 MR job 来完成的。为了满足实时性的要求，希望能够实时分析用户的行为日志，将最新的用户属性反馈给搜索引擎，能够为用户展现最贴近其当前需求的结果。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzgBT.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;strong&gt;2）携程-网站性能监控：实时分析系统监控携程网的网站性能&lt;/strong&gt;&lt;br/&gt;  利用 HTML5 提供的 performance 标准获得可用的指标，并记录日志。Storm 集群实时分析日志和入库。使用 DRPC 聚合成报表，通过历史数据对比等判断规则，触发预警事件。&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzfN4.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;strong&gt;3）淘宝双十一：实时统计销售总额&lt;/strong&gt;&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzcuV.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h16storm&quot;&gt;&lt;span&gt;&lt;strong&gt;1.6 Storm 特点&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  1）适用场景广泛：Storm 可以适用实时处理消息、更新数据库、持续计算等场景。&lt;br/&gt;  2）可伸缩性高：Storm 的可伸缩性可以让 Storm 每秒处理的消息量达到很高。&lt;code&gt;扩展一个实时计算任务，你所需要做的就是加机器并且提高这个计算任务的并行度&lt;/code&gt;。Storm 使用 Zookeeper 来协调机器内的各种配置使得 Storm 的集群可以很容易的扩展。&lt;br/&gt;  3）保证无数据丢失：Storm 保证所有的数据都被处理。&lt;br/&gt;  4）异常健壮：Storm 集群非常容易管理，轮流重启节点不影响应用。&lt;br/&gt;  5）容错性好：在消息处理过程中出现异常，Storm 会进行重试。&lt;/p&gt;
&lt;h2 id=&quot;hstorm-1&quot;&gt;&lt;span&gt;&lt;strong&gt;二 Storm 基础知识&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h21storm&quot;&gt;&lt;span&gt;&lt;strong&gt;2.1 Storm 编程模型&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzWEF.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h211tuple&quot;&gt;&lt;span&gt;&lt;strong&gt;2.1.1 元组（Tuple）&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  元组（Tuple），是消息传递的基本单元，是一个命名的值列表，元组中的字段可以是任何类型的对象。Storm 使用元组作为其数据模型，元组支持所有的基本类型、字符串和字节数组作为字段值，只要实现类型的序列化接口就可以使用该类型的对象。元组本来应该是一个 key-value 的 Map，但是由于各个组件间传递的元组的字段名称已经事先定义好，所以只要按序把元组填入各个 value 即可，所以元组是一个 value 的 List。&lt;/p&gt;
&lt;h4 id=&quot;h212stream&quot;&gt;&lt;span&gt;&lt;strong&gt;2.1.2 流（Stream）&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  流是 Storm 的核心抽象，是一个无界的元组系列。源源不断传递的元组就组成了流，在分布式环境中并行地进行创建和处理。&lt;/p&gt;
&lt;h4 id=&quot;h213spout&quot;&gt;&lt;span&gt;&lt;strong&gt;2.1.3 水龙头（Spout）&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  Spout 是拓扑的流的来源，是一个拓扑中产生源数据流的组件。通常情况下，Spout 会从外部数据源中读取数据，然后转换为拓扑内部的源数据。&lt;br/&gt;  Spout 可以是可靠的，也可以是不可靠的。如果 Storm 处理元组失败，可靠的 Spout 能够重新发射，而不可靠的 Spout 就尽快忘记发出的元组。&lt;br/&gt;  Spout 可以发出超过一个流。&lt;br/&gt;  Spout 的主要方法是 nextTuple()。NextTuple() 会发出一个新的 Tuple 到拓扑，如果没有新的元组发出，则简单返回。&lt;br/&gt;  Spout 的其他方法是 ack() 和 fail()。当 Storm 检测到一个元组从 Spout 发出时，ack() 和 fail() 会被调用，要么成功完成通过拓扑，要么未能完成。ack() 和 fail() 仅被可靠的 Spout 调用。&lt;br/&gt;  IRichSpout 是 Spout 必须实现的接口。&lt;/p&gt;
&lt;h4 id=&quot;h214bolt&quot;&gt;&lt;span&gt;2.1.4 转接头（Bolt）&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  在拓扑中所有处理都在 Bolt 中完成，Bolt 是流的处理节点，从一个拓扑接收数据，然后执行进行处理的组件。Bolt 可以完成过滤、业务处理、连接运算、连接与访问数据库等任何操作。&lt;br/&gt;  Bolt 是一个被动的角色，其接口中有一个 execute() 方法，在接收到消息后会调用此方法，用户可以在其中执行自己希望的操作。&lt;br/&gt;  Bolt 可以完成简单的流的转换，而完成复杂的流的转换通常需要多个步骤，因此需要多个 Bolt。&lt;/p&gt;
&lt;h4 id=&quot;h215topology&quot;&gt;&lt;span&gt;&lt;strong&gt;2.1.5 拓扑（Topology）&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  拓扑（Topology）是 Storm 中运行的一个实时应用程序，因为各个组件间的消息流动而形成逻辑上的拓扑结构。&lt;br/&gt;  把实时应用程序的运行逻辑打成 jar 包后提交到 Storm 的拓扑（Topology）。Storm 的拓扑类似于 MapReduce 的作业（Job）。其主要的区别是，MapReduce 的作业最终会完成，而一个拓扑永远都在运行直到它被杀死。一个拓扑是一个图的 Spout 和 Bolt 的连接流分组。&lt;/p&gt;
&lt;h3 id=&quot;h22storm&quot;&gt;&lt;span&gt;&lt;strong&gt;2.2 Storm 核心组件&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALz2HU.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;  Nimbus 是整个集群的控管核心，负责 Topology 的提交、运行状态监控、任务重新分配等工作。&lt;br/&gt;  Zookeeper 就是一个管理者，监控者。&lt;br/&gt;  总体描述：Nimbus下命令（分配任务），Zookeeper 监督执行（心跳监控，Worker、Supurvisor的心跳都归它管），Supervisor领旨（下载代码），招募人马（创建Worker和线程等），Worker、Executor就给我干活！Task 就是具体要干的活。&lt;/p&gt;
&lt;h4 id=&quot;h221&quot;&gt;&lt;span&gt;&lt;strong&gt;2.2.1 主控节点与工作节点&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  Storm 集群中有两类节点：主控节点（Master Node）和工作节点（Worker Node）。其中，主控节点只有一个，而工作节点可以有多个。&lt;/p&gt;
&lt;h4 id=&quot;h222nimbussupervisor&quot;&gt;&lt;span&gt;&lt;strong&gt;2.2.2 Nimbus 进程与 Supervisor 进程&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  主控节点运行一个称为 Nimbus 的守护进程类似于 Hadoop 的 JobTracker。Nimbus 负责在集群中分发代码、对节点分配任务、并监视主机故障。&lt;br/&gt;  每个工作节点运行一个称为 Supervisor 的守护进程。Supervisor 监听其主机上已经分配的主机的作业、启动和停止 Nimbus 已经分配的工作进程。&lt;/p&gt;
&lt;h4 id=&quot;h223streamgrouping&quot;&gt;&lt;span&gt;&lt;strong&gt;2.2.3 流分组（Stream Grouping）&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  流分组，是拓扑定义中的一部分，为每个 Bolt 指定应该接收哪个流作为输入。流分组定义了流/元组如何在 Bolt 的任务之间进行分发。&lt;br/&gt;  Storm 内置了 8 种流分组方式。&lt;/p&gt;
&lt;h4 id=&quot;h224worker&quot;&gt;&lt;span&gt;&lt;strong&gt;2.2.4 工作进程（Worker）&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  Worker 是 Spout/Bolt 中运行具体处理逻辑的进程。一个 Worker 就是一个进程，进程里面包含一个或多个线程。&lt;/p&gt;
&lt;h4 id=&quot;h225executor&quot;&gt;&lt;span&gt;&lt;strong&gt;2.2.5 执行器（Executor）&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  一个线程就是一个 Executor，一个线程会处理一个或多个任务。&lt;/p&gt;
&lt;h4 id=&quot;h226task&quot;&gt;&lt;span&gt;&lt;strong&gt;2.2.6 任务（Task）&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  一个任务就是一个 Task。&lt;/p&gt;
&lt;h3 id=&quot;h23&quot;&gt;&lt;span&gt;&lt;strong&gt;2.3 实时流计算常见架构图&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzI3R.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;  1）Flume 获取数据。&lt;br/&gt;  2）Kafka 临时保存数据。&lt;br/&gt;  3）Strom 计算数据。&lt;br/&gt;  4）Redis 是个内存数据库，用来保存数据。
&lt;h2 id=&quot;hstorm-2&quot;&gt;&lt;span&gt;&lt;strong&gt;三 Storm 集群搭建&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h31&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1 环境准备&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h311&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1.1 集群规划&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;hadoop102&lt;/span&gt;       hadoop103       hadoop104&lt;br/&gt;zk              zk              zk&lt;br/&gt;storm           storm           storm&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h312jar&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1.2 jar 包下载&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;（1）官方网址：&lt;a href=&quot;http://storm.apache.org/&quot; target=&quot;_blank&quot;&gt;http://storm.apache.org/&lt;/a&gt;&lt;br/&gt;&lt;code&gt;注意&lt;/code&gt;：本次学习演示，本博主使用版本 &lt;code&gt;Storm 1.1.1 Released (1 Aug 2018)&lt;/code&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzh4J.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;（2）安装集群步骤：&lt;br/&gt;  官方文档地址：&lt;a href=&quot;http://storm.apache.org/releases/1.1.1/Setting-up-a-Storm-cluster.html&quot; target=&quot;_blank&quot;&gt;http://storm.apache.org/releases/1.1.1/Setting-up-a-Storm-cluster.html&lt;/a&gt;
&lt;h4 id=&quot;h313&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1.3 虚拟机准备&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1）准备3台虚拟机&lt;br/&gt;2）配置ip地址、配置主机名称、3台主机分别关闭防火墙&lt;br/&gt;参考链接地址：&lt;a href=&quot;https://www.cnblogs.com/chenmingjun/p/10335265.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/chenmingjun/p/10335265.html&lt;/a&gt;&lt;br/&gt;参考链接地址：&lt;a href=&quot;https://www.cnblogs.com/chenmingjun/p/10349717.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/chenmingjun/p/10349717.html&lt;/a&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALz5C9.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h314jdk&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1.4 安装 jdk&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;参考链接地址：&lt;a href=&quot;https://www.cnblogs.com/chenmingjun/p/9931593.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/chenmingjun/p/9931593.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;h315zookeeper&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1.5 安装 Zookeeper&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;0）集群规划&lt;br/&gt;在 hadoop102、hadoop103 和 hadoop104 三个节点上部署 Zookeeper。&lt;br/&gt;1）解压安装&lt;br/&gt;（1）解压 zookeeper 安装包到 /opt/module/ 目录下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 software]$ tar -zxvf zookeeper-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;.tar.gz -C /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）在 /opt/module/zookeeper-3.4.10/ 这个目录下创建目录 zkData&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;mkdir&lt;/span&gt; -p zkData&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）重命名 /opt/module/zookeeper-3.4.10/conf 这个目录下的 zoo_sample.cfg 为 zoo.cfg&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;zoo_sample&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.cfg&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;zoo&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.cfg&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2）配置 zoo.cfg 文件&lt;br/&gt;（1）具体配置&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;dataDir=/opt/&lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;/zookeeper&lt;span class=&quot;hljs-number&quot;&gt;-3.4&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.10&lt;/span&gt;/zkData&lt;p&gt;增加如下配置&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）配置参数解读&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;hljs vbscript&quot; readability=&quot;4&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;server&lt;/span&gt;.A=B:C:D。&lt;br/&gt;A 是一个数字，表示这个是第几号服务器；&lt;br/&gt;B 是这个服务器的ip地址；&lt;br/&gt;C 是这个服务器与集群中的 Leader 服务器交换信息的端口；&lt;br/&gt;D 是万一集群中的 Leader 服务器挂了，需要一个端口来重新进行选举，选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。&lt;p&gt;集群模式下配置一个文件 myid，这个文件在 zkData 目录下，这个文件里面有一个数据就是 A 的值，Zookeeper 启动时读取此文件，拿到里面的数据与 zoo.cfg 里面的配置信息比较从而判断到底是哪个 &lt;span class=&quot;hljs-built_in&quot;&gt;server&lt;/span&gt;。&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3）集群操作&lt;br/&gt;（1）在 /opt/module/zookeeper-3.4.10/zkData 目录下创建一个 myid 的文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;touch&lt;/span&gt; myid&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加 myid 文件，注意一定要在 linux 里面创建，在 notepad++ 里面很可能乱码。&lt;br/&gt;（2）编辑 myid 文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;vim&lt;/span&gt; myid&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在文件中添加与 server 对应的编号：如 2&lt;br/&gt;（3）拷贝配置好的 zookeeper 到其他机器上 或者执行配置分发的脚本&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;scp -r &lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/zookeeper-3.4.10/&lt;/span&gt; root@hadoop103:&lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/&lt;/span&gt;&lt;br/&gt;scp -r &lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/zookeeper-3.4.10/&lt;/span&gt; root@hadoop104:&lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/&lt;/span&gt;&lt;br/&gt;并分别修改 myid 文件中内容为 &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;、&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）分别启动 zookeeper 或者 使用群起脚本启动&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@hadoop102 zookeeper&lt;span class=&quot;hljs-number&quot;&gt;-3.4&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.10&lt;/span&gt;]&lt;br/&gt;[root@hadoop103 zookeeper&lt;span class=&quot;hljs-number&quot;&gt;-3.4&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.10&lt;/span&gt;]&lt;br/&gt;[root@hadoop104 zookeeper&lt;span class=&quot;hljs-number&quot;&gt;-3.4&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.10&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）查看状态 或者 使用脚本查看状态&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@hadoop102 zookeeper&lt;span class=&quot;hljs-number&quot;&gt;-3.4&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.10&lt;/span&gt;]&lt;br/&gt;JMX enabled &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;&lt;br/&gt;Using config: &lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/zookeeper-3.4.10/bin/&lt;/span&gt;../conf/zoo.cfg&lt;br/&gt;Mode: follower&lt;br/&gt;[root@hadoop103 zookeeper&lt;span class=&quot;hljs-number&quot;&gt;-3.4&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.10&lt;/span&gt;]&lt;br/&gt;JMX enabled &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;&lt;br/&gt;Using config: &lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/zookeeper-3.4.10/bin/&lt;/span&gt;../conf/zoo.cfg&lt;br/&gt;Mode: leader&lt;br/&gt;[root@hadoop104 zookeeper&lt;span class=&quot;hljs-number&quot;&gt;-3.4&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.5&lt;/span&gt;]&lt;br/&gt;JMX enabled &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;&lt;br/&gt;Using config: &lt;span class=&quot;hljs-regexp&quot;&gt;/opt/module/zookeeper-3.4.10/bin/&lt;/span&gt;../conf/zoo.cfg&lt;br/&gt;Mode: follower&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h32storm&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2 Storm 集群部署&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h321&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2.1 配置集群&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1）拷贝 jar 包到 hadoop102 的 /opt/software/ 目录下&lt;br/&gt;2）解压 jar 包到 /opt/module 目录下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 software]$ tar -zxvf apache-storm-&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;.tar.gz -C /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3）修改解压后的 apache-storm-1.1.1.tar.gz 文件名称为 storm，为了方便&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;]$ &lt;span class=&quot;hljs-title&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;apache&lt;/span&gt;-&lt;span class=&quot;hljs-title&quot;&gt;storm&lt;/span&gt;-1.1.1/ &lt;span class=&quot;hljs-title&quot;&gt;storm&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4）在 /opt/module/storm/ 目录下创建 data 文件夹&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs perl&quot;&gt;[atguigu@hadoop102 storm]$ &lt;span class=&quot;hljs-keyword&quot;&gt;mkdir&lt;/span&gt; data&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5）修改配置文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 conf]$ pwd&lt;br/&gt;/opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;storm&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;conf&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;[atguigu@hadoop102 conf]$ vim storm.yaml&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改内容如下：&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;code class=&quot;hljs makefile&quot; readability=&quot;6&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;storm.zookeeper.servers:&lt;/span&gt;&lt;br/&gt;- &lt;span class=&quot;hljs-string&quot;&gt;&quot;hadoop102&quot;&lt;/span&gt;&lt;br/&gt;- &lt;span class=&quot;hljs-string&quot;&gt;&quot;hadoop103&quot;&lt;/span&gt;&lt;br/&gt;- &lt;span class=&quot;hljs-string&quot;&gt;&quot;hadoop104&quot;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;nimbus.seeds: [&quot;hadoop102&quot;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;storm.local.dir: &quot;/opt/module/storm/data&quot;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;supervisor.slots.ports:&lt;/span&gt;&lt;br/&gt;- 6700&lt;br/&gt;- 6701&lt;br/&gt;- 6702&lt;br/&gt;- 6703&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6）以 root 用户，配置环境变量&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;hljs bash&quot; readability=&quot;2&quot;&gt;[root@hadoop102 storm]&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;export&lt;/span&gt; STORM_HOME=/opt/module/storm&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;export&lt;/span&gt; PATH=&lt;span class=&quot;hljs-variable&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;hljs-variable&quot;&gt;$STORM_HOME&lt;/span&gt;/bin&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使配置文件生效&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@hadoop102 storm]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7）分发配置好的 storm 安装包&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 storm]$ xsync storm/&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;8）启动 Storm 集群&lt;br/&gt;（1）后台启动 Nimbus&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 storm]$ bin/storm nimbus &amp;amp;&lt;br/&gt;[atguigu@hadoop103 storm]$ bin/storm nimbus &amp;amp;&lt;br/&gt;[atguigu@hadoop104 storm]$ bin/storm nimbus &amp;amp;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）后台启动 Supervisor&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 storm]$ bin/storm supervisor &amp;amp;&lt;br/&gt;[atguigu@hadoop102 storm]$ bin/storm supervisor &amp;amp;&lt;br/&gt;[atguigu@hadoop102 storm]$ bin/storm supervisor &amp;amp;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;拓展&lt;/code&gt;：fg 命令 表示将放在后台的进程放到前台。&lt;br/&gt;（3）启动 Storm UI&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 storm]$ bin/storm ui&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;9）通过浏览器查看集群状态&lt;br/&gt;地址：http://hadoop102:8080/index.html&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzHu6.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h322storm&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2.2 Storm 日志信息查看&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1）查看 Nimbus 的日志信息&lt;br/&gt;在 Nimbus 的服务器上&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;cd /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;storm&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;logs&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;tail -&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;f /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;storm&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;logs&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;nimbus&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2）查看 ui 运行日志信息&lt;br/&gt;在 ui 的服务器上，一般和 Nimbus 在一个服务器上&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;cd /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;storm&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;logs&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;tail -&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;f /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;storm&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;logs&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;ui&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3）查看 Supervisor 运行日志信息&lt;br/&gt;在 Supervisor 服务 上&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;cd /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;storm&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;logs&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;tail -&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;f /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;storm&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;logs&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;supervisor&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4）查看 Supervisor 上 Worker 运行日志信息&lt;br/&gt;在 supervisor 服务上&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;cd /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;storm&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;logs&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;tail -&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;f /opt/&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;storm&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;logs&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;worker&lt;/span&gt;-6702.&lt;span class=&quot;hljs-title&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5）logviewer，可以在 web 页面点击相应的端口号即可查看日志&lt;br/&gt;分别在 Supervisor 节点上执行：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[atguigu@hadoop102 storm]$ bin/storm logviewer &amp;amp;&lt;br/&gt;[atguigu@hadoop103 storm]$ bin/storm logviewer &amp;amp;&lt;br/&gt;[atguigu@hadoop104 storm]$ bin/storm logviewer &amp;amp;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;浏览器截图如下&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzog1.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h323storm&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2.3 Storm 命令行操作&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1）Nimbus：启动 Nimbus 守护进程。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;storm&lt;/span&gt; nimbus&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2）Supervisor：启动 Supervisor 守护进程。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;storm&lt;/span&gt; supervisor&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3）ui：启动UI守护进程。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;storm&lt;/span&gt; ui&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4）list：列出正在运行的拓扑及其状态。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;storm &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5）logviewer：Logviewer 提供一个 web 接口查看 Storm 日志文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;storm&lt;/span&gt; logviewer&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6）jar：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;storm&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;hljs-selector-attr&quot;&gt;[jar路径]&lt;/span&gt; &lt;span class=&quot;hljs-selector-attr&quot;&gt;[拓扑包名.拓扑类名]&lt;/span&gt; &lt;span class=&quot;hljs-selector-attr&quot;&gt;[拓扑名称]&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7）kill：杀死名为 topology-name 的拓扑。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs sql&quot;&gt;storm &lt;span class=&quot;hljs-keyword&quot;&gt;kill&lt;/span&gt; topology-&lt;span class=&quot;hljs-keyword&quot;&gt;name&lt;/span&gt; [-w &lt;span class=&quot;hljs-keyword&quot;&gt;wait&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;time&lt;/span&gt;-secs]&lt;br/&gt;-w：等待多久后杀死拓扑&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;8）active：激活指定的拓扑 Spout。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;storm&lt;/span&gt; activate topology-name&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;9）deactivate：禁用指定的拓扑 Spout。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;storm&lt;/span&gt; deactivate topology-name &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;10）help：打印一条帮助消息或者可用命令的列表。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;&gt;storm &lt;span class=&quot;hljs-built_in&quot;&gt;help&lt;/span&gt;&lt;br/&gt;storm &lt;span class=&quot;hljs-built_in&quot;&gt;help&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;command&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;hstormapi&quot;&gt;&lt;span&gt;&lt;strong&gt;四 Storm 常用 API&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h41api&quot;&gt;&lt;span&gt;&lt;strong&gt;4.1 API 简介&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h411component&quot;&gt;&lt;span&gt;&lt;strong&gt;4.1.1 Component 组件&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1）基本接口&lt;br/&gt;  （1）IComponent 接口&lt;br/&gt;  （2）ISpout 接口&lt;br/&gt;  （3）&lt;code&gt;IRichSpout 接口&lt;/code&gt;&lt;br/&gt;  （4）IStateSpout 接口&lt;br/&gt;  （5）IRichStateSpout 接口&lt;br/&gt;  （6）IBolt 接口&lt;br/&gt;  （7）&lt;code&gt;IRichBolt 接口&lt;/code&gt;&lt;br/&gt;  （8）IBasicBolt 接口&lt;br/&gt;2）基本抽象类&lt;br/&gt;  （1）BaseComponent 抽象类&lt;br/&gt;  （2）&lt;code&gt;BaseRichSpout 抽象类&lt;/code&gt;&lt;br/&gt;  （3）&lt;code&gt;BaseRichBolt 抽象类&lt;/code&gt;&lt;br/&gt;  （4）BaseTransactionalBolt 抽象类&lt;br/&gt;  （5）BaseBasicBolt 抽象类&lt;/p&gt;
&lt;h4 id=&quot;h412spout&quot;&gt;&lt;span&gt;&lt;strong&gt;4.1.2 Spout 水龙头&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;Spout 的最顶层抽象是 ISpout 接口。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzbDK.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;（1）open()&lt;br/&gt;  是初始化方法。&lt;br/&gt;（2）close()&lt;br/&gt;  在该 Spout 关闭前执行，但是并不能得到保证其一定被执行，kill -9 时不执行，Storm kill {topoName} 时执行。&lt;br/&gt;（3）activate()&lt;br/&gt;  当 Spout 已经从失效模式中激活时被调用。该 Spout 的 nextTuple() 方法很快就会被调用。&lt;br/&gt;（4）deactivate ()&lt;br/&gt;  当 Spout 已经失效时被调用。在 Spout 失效期间，nextTuple 不会被调用。Spout 将来可能会也可能不会被重新激活。&lt;br/&gt;（5）nextTuple()&lt;br/&gt;  当调用 nextTuple() 方法时，Storm 要求 Spout 发射元组到输出收集器（OutputCollecctor）。&lt;br/&gt;  nextTuple() 方法应该是非阻塞的，所以，如果 Spout 没有元组可以发射，该方法应该返回。&lt;br/&gt;  nextTuple()、ack() 和 fail() 方法都在 Spout 任务的单一线程内紧密循环被调用。&lt;br/&gt;  当没有元组可以发射时，可以让 nextTuple 去 sleep 很短的时间，例如1毫秒，这样就不会浪费太多的 CPU 资源。&lt;br/&gt;（6）ack()&lt;br/&gt;  成功处理 Tuple 回调方法。&lt;br/&gt;（7）fail()&lt;br/&gt;  处理失败 Tuple 回调方法。&lt;br/&gt;  原则：通常情况下（Shell 和事务型的除外），实现一个 Spout，可以直接实现接口 &lt;code&gt;IRichSpout&lt;/code&gt;，如果不想写多余的代码，可以直接继承 &lt;code&gt;BaseRichSpout&lt;/code&gt;。
&lt;h4 id=&quot;h413bolt&quot;&gt;&lt;span&gt;&lt;strong&gt;4.1.3 Bolt 转接头&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;Bolt 的最顶层抽象是 IBolt 接口。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzXUe.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;（1）prepare()&lt;br/&gt;  prepare() 方法在集群的工作进程内被初始化时被调用，提供了 Bolt 执行所需要的环境。&lt;br/&gt;（2）execute()&lt;br/&gt;  接受一个 Tuple 进行处理，也可 emit 数据到下一级组件。&lt;br/&gt;（3）cleanup()&lt;br/&gt;  cleanup方法当一个 IBolt 即将关闭时被调用。不能保证 cleanup() 方法一定会被调用，因为 Supervisor 可以对集群的工作进程使用 kill -9 命令强制杀死进程命令。&lt;br/&gt;  如果在本地模式下运行 Storm，当拓扑被杀死的时候，可以保证 cleanup() 方法一定会被调用。&lt;br/&gt;  实现一个 Bolt，可以实现 &lt;code&gt;IRichBolt&lt;/code&gt; 接口或继承 &lt;code&gt;BaseRichBolt&lt;/code&gt;，如果不想自己处理结果反馈，可以实现 &lt;code&gt;IBasicBolt&lt;/code&gt; 接口或继承 &lt;code&gt;BaseBasicBolt&lt;/code&gt;，它实际上相当于自动做了 prepare 方法和 collector.emit.ack(inputTuple)。
&lt;h4 id=&quot;h414spouttail&quot;&gt;&lt;span&gt;&lt;strong&gt;4.1.4 Spout 的 tail 特性&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;Storm 可以实时监测文件数据，当文件数据变化时，Storm 自动读取。&lt;/p&gt;
&lt;h3 id=&quot;h42&quot;&gt;&lt;span&gt;&lt;strong&gt;4.2 网站日志处理案例&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h421&quot;&gt;&lt;span&gt;&lt;strong&gt;4.2.1 实操环境准备&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  1）打开 eclipse，创建一个 java 工程&lt;br/&gt;  2）在工程目录中创建 lib 文件夹&lt;br/&gt;  3）解压 apache-storm-1.1.1，并把解压后 lib 包下的文件复制到 java 工程的 lib 文件夹中，然后执行 build path。&lt;/p&gt;
&lt;h4 id=&quot;h4221id&quot;&gt;&lt;span&gt;&lt;strong&gt;4.2.2 需求1：将接收到日志的会话 id 打印在控制台&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1）需求：&lt;br/&gt;  （1）模拟访问网站的日志信息，包括：网站名称、会话 id、访问网站时间等。&lt;br/&gt;  （2）将接收到日志的会话 id 打印到控制台。&lt;br/&gt;2）分析：&lt;br/&gt;  （1）创建网站访问日志工具类。&lt;br/&gt;  （2）在 spout 中读取日志文件，并一行一行发射出去。&lt;br/&gt;  （3）在 bolt 中将获取到的一行一行数据的会话 id 获取到，并打印到控制台。&lt;br/&gt;  （4）main 方法负责拼接 spout 和 bolt 的拓扑。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzxCd.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;3）案例实操：&lt;br/&gt;（1）创建网站访问日志&lt;br/&gt;示例代码如下：
&lt;pre readability=&quot;19.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;33&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.weblog;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.File;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileNotFoundException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileOutputStream;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Random;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GenerateData&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;File logFile = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d:/temp/storm/website.log&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String[] hosts = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;www.atguigu.com&quot;&lt;/span&gt; };&lt;br/&gt;String[] session_id = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;ABYH6Y4V4SCVXTG6DPB4VH9U123&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;XXYH6YCGFJYERTT834R52FDXV9U34&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;BBYH61456FGHHJ7JL89RG5VV9UYU7&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;CYYH6Y2345GHI899OFG4V9U567&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;VVVYH6Y4V4SFXZ56JIPDPB4V678&quot;&lt;/span&gt; };&lt;br/&gt;String[] time = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 08:40:50&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 08:40:51&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 08:40:52&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 08:40:53&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 09:40:49&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 10:40:49&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 11:40:49&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 12:40:49&quot;&lt;/span&gt; };&lt;/p&gt;&lt;p&gt;&lt;br/&gt;StringBuffer sb = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuffer();&lt;br/&gt;Random random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;; i++) {&lt;br/&gt;sb.append(hosts[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\t&quot;&lt;/span&gt; + session_id[random.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\t&quot;&lt;/span&gt; + time[random.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;)] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!logFile.exists()) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;logFile.createNewFile();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Create logFile fail !&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[] b = (sb.toString()).getBytes();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;FileOutputStream fileOutputStream = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;fileOutputStream = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; FileOutputStream(logFile);&lt;br/&gt;fileOutputStream.write(b);&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Generate data over !&quot;&lt;/span&gt;);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (FileNotFoundException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;fileOutputStream.close();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）创建 spout&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;26&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;46&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.weblog;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.BufferedReader;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileInputStream;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.InputStreamReader;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.UnsupportedEncodingException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileNotFoundException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.spout.SpoutOutputCollector;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.TopologyContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.IRichSpout;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.OutputFieldsDeclarer;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Fields;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Values;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WebLogSpout&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IRichSpout&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; BufferedReader bufferedReader = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; SpoutOutputCollector collector = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String str = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map conf, TopologyContext context, SpoutOutputCollector collector)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.collector = collector;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.bufferedReader = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d:/temp/storm/website.log&quot;&lt;/span&gt;),&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;));&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (FileNotFoundException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (UnsupportedEncodingException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;nextTuple&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((str = bufferedReader.readLine()) != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;collector.emit(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Values(str));&lt;br/&gt;Thread.sleep(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException | InterruptedException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;declarer.declare(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;hljs-string&quot;&gt;&quot;log&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object msgId)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object msgId)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getComponentConfiguration&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）创建 bolt&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;18&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;30&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.weblog;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.OutputCollector;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.TopologyContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.IRichBolt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.OutputFieldsDeclarer;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Fields;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Tuple;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WebLogBolt&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IRichBolt&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; OutputCollector collector = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String valueString = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map stormConf, TopologyContext context, OutputCollector collector)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.collector = collector;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Tuple input)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;valueString = input.getStringByField(&lt;span class=&quot;hljs-string&quot;&gt;&quot;log&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (valueString != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;num++;&lt;br/&gt;System.err.println(Thread.currentThread().getName() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;  lines:&quot;&lt;/span&gt; + num + &lt;span class=&quot;hljs-string&quot;&gt;&quot;  session_id:&quot;&lt;/span&gt; + valueString.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\t&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);&lt;br/&gt;}&lt;br/&gt;collector.ack(input);&lt;br/&gt;Thread.sleep(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;collector.fail(input);&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;declarer.declare(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getComponentConfiguration&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）创建main&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;14&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;22&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.weblog;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.Config;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.LocalCluster;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.StormSubmitter;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.TopologyBuilder;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WebLogMain&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;TopologyBuilder builder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TopologyBuilder();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;builder.setSpout(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogspout&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebLogSpout(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;builder.setBolt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogbolt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebLogBolt(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).shuffleGrouping(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogspout&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Config conf = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Config();&lt;br/&gt;conf.setNumWorkers(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (args.length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;StormSubmitter.submitTopology(args[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], conf, builder.createTopology());&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;LocalCluster localCluster = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; LocalCluster();&lt;br/&gt;localCluster.submitTopology(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogtopology&quot;&lt;/span&gt;, conf, builder.createTopology());&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  session_id:XXYH6YCGFJYERTT834R52FDXV9U34&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  session_id:BBYH61456FGHHJ7JL89RG5VV9UYU7&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  session_id:BBYH61456FGHHJ7JL89RG5VV9UYU7&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  session_id:XXYH6YCGFJYERTT834R52FDXV9U34&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  session_id:CYYH6Y2345GHI899OFG4V9U567&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  session_id:ABYH6Y4V4SCVXTG6DPB4VH9U123&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  session_id:VVVYH6Y4V4SFXZ56JIPDPB4V678&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  session_id:XXYH6YCGFJYERTT834R52FDXV9U34&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;  session_id:BBYH61456FGHHJ7JL89RG5VV9UYU7&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;  session_id:BBYH61456FGHHJ7JL89RG5VV9UYU7&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;  session_id:XXYH6YCGFJYERTT834R52FDXV9U34&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;  session_id:XXYH6YCGFJYERTT834R52FDXV9U34&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;  session_id:XXYH6YCGFJYERTT834R52FDXV9U34&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;  session_id:ABYH6Y4V4SCVXTG6DPB4VH9U123&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;  session_id:VVVYH6Y4V4SFXZ56JIPDPB4V678&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;  session_id:CYYH6Y2345GHI899OFG4V9U567&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;  session_id:BBYH61456FGHHJ7JL89RG5VV9UYU7&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;  session_id:BBYH61456FGHHJ7JL89RG5VV9UYU7&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;  session_id:CYYH6Y2345GHI899OFG4V9U567&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;  session_id:BBYH61456FGHHJ7JL89RG5VV9UYU7&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;  session_id:XXYH6YCGFJYERTT834R52FDXV9U34&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;  session_id:ABYH6Y4V4SCVXTG6DPB4VH9U123&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;  session_id:VVVYH6Y4V4SFXZ56JIPDPB4V678&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;  session_id:ABYH6Y4V4SCVXTG6DPB4VH9U123&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;  session_id:BBYH61456FGHHJ7JL89RG5VV9UYU7&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;  session_id:ABYH6Y4V4SCVXTG6DPB4VH9U123&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;  session_id:CYYH6Y2345GHI899OFG4V9U567&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;  session_id:XXYH6YCGFJYERTT834R52FDXV9U34&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;  session_id:XXYH6YCGFJYERTT834R52FDXV9U34&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;  session_id:ABYH6Y4V4SCVXTG6DPB4VH9U123&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h4232tail&quot;&gt;&lt;span&gt;&lt;strong&gt;4.2.3 需求2：动态增加日志，查看控制台打印信息（tail特性）&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1）在需求1基础上，运行程序。&lt;br/&gt;2）打开 website.log 日志文件，增加日志调试并保存。&lt;br/&gt;3）观察控制台打印的信息。&lt;br/&gt;结论：Storm 可以动态实时监测文件的增加信息，并把信息读取到再处理。&lt;/p&gt;
&lt;h2 id=&quot;hstorm-3&quot;&gt;&lt;span&gt;&lt;strong&gt;五 Storm 分组策略和并发度&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h51&quot;&gt;&lt;span&gt;&lt;strong&gt;5.1 读取文件案例思考&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1）spout 数据源：数据库、文件、MQ（比如：Kafka）&lt;br/&gt;2）数据源是数据库：只适合读取数据库的配置文件&lt;br/&gt;3）数据源是文件：只适合测试、讲课用（因为集群是分布式集群）&lt;br/&gt;4）企业产生的 log 文件处理步骤：&lt;br/&gt;  （1）读出内容写 入MQ&lt;br/&gt;  （2）Storm 再处理&lt;/p&gt;
&lt;h3 id=&quot;h52streamgrouping&quot;&gt;&lt;span&gt;&lt;strong&gt;5.2 分组策略（Stream Grouping）&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;stream grouping 用来定义一个 stream 应该如何分配给 Bolts 上面的多个 Executors（&lt;code&gt;多线程、多并发&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;Storm 里面有 7 种类型的 stream grouping，详情如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1）Shuffle Grouping: 随机分组，轮询，平均分配&lt;/code&gt;。随机派发 stream 里面的 tuple，保证每个 bolt 接收到的 tuple 数目大致相同。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;2）Fields Grouping：按字段分组&lt;/code&gt;，比如按 userid 来分组，具有同样 userid 的 tuple 会被分到相同的 bolts 里的一个 task，而不同的 userid 则会被分配到不同的 bolts 里的 task。&lt;/p&gt;
&lt;p&gt;3）All Grouping：广播发送，对于每一个 tuple，所有的 bolts 都会收到。&lt;/p&gt;
&lt;p&gt;4）Global Grouping：全局分组，这个 tuple 被分配到 storm 中的一个 bolt 的其中一个 task。再具体一点就是分配给 id 值最低的那个 task。&lt;/p&gt;
&lt;p&gt;5）None Grouping：不分组，这个分组的意思是说 stream 不关心到底谁会收到它的 tuple。目前这种分组和 Shuffle Grouping 是一样的效果。在多线程情况下不平均分配。&lt;/p&gt;
&lt;p&gt;6）Direct Grouping：直接分组，这是一种比较特别的分组方法，用这种分组意味着消息的发送者指定由消息接收者的哪个 task 处理这个消息。只有被声明为 Direct Stream 的消息流可以声明这种分组方法。而且这种消息 tuple 必须使用 emitDirect 方法来发射。消息处理者可以通过 TopologyContext 来获取处理它的消息的 task 的 id （OutputCollector.emit 方法也会返回 task 的 id）。&lt;/p&gt;
&lt;p&gt;7）Local or Shuffle Grouping：如果目标 bolt 有一个或者多个 task 在同一个工作进程中，tuple 将会被随机发送给这些 tasks。否则，和普通的 Shuffle Grouping 行为一致。&lt;/p&gt;
&lt;p&gt;8）测试&lt;br/&gt;  （1）spout 并发度修改为 2，bolt 并发度修改为 1，Shuffle Grouping 模式&lt;/p&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;8&quot;&gt;&lt;br/&gt;builder.setSpout(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogspout&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebLogSpout(), &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;br/&gt;builder.setBolt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogbolt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebLogBolt(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).shuffleGrouping(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogspout&quot;&lt;/span&gt;);&lt;p&gt;spout 开两个线程会对数据读取两份，打印出来就是 &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 份。如果数据源是消息队列，就不会出来读取两份的数据（统一消费者组，只能有一个消费者）。&lt;/p&gt;&lt;p&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  session_id:XXYH6YCGFJYERTT834R52FDXV9U34&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  session_id:XXYH6YCGFJYERTT834R52FDXV9U34&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  session_id:BBYH61456FGHHJ7JL89RG5VV9UYU7&lt;br/&gt;Thread-&lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;-weblogbolt-executor[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  lines:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  session_id:BBYH61456FGHHJ7JL89RG5VV9UYU7&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （2）spout 并发度修改为 1，bolt 并发度修改为 2，None Grouping 模式&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;2&quot;&gt;&lt;br/&gt;builder.setSpout(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogspout&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebLogSpout(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;builder.setBolt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogbolt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebLogBolt(), &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).noneGrouping(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogspout&quot;&lt;/span&gt;);&lt;p&gt;每个 bolt 接收到的数据不同。&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （3）spout 并发度修改为 1，bolt 并发度修改为 2，Fields Grouping 模式&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;2&quot;&gt;&lt;br/&gt;builder.setSpout(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogspout&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebLogSpout(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;builder.setBolt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogbolt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebLogBolt(), &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).fieldsGrouping(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogspout&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;hljs-string&quot;&gt;&quot;log&quot;&lt;/span&gt;));&lt;p&gt;基于 web 案例效果不明显，后续案例效果比较明显。&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （4）spout 并发度修改为 1，bolt 并发度修改为 2，All Grouping 模式&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;2&quot;&gt;&lt;br/&gt;builder.setSpout(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogspout&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebLogSpout(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;builder.setBolt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogbolt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebLogBolt(), &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).allGrouping(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogspout&quot;&lt;/span&gt;);&lt;p&gt;每一个 bolt 获取到的数据都是一样的。&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （5）spout 并发度修改为 1，bolt 并发度修改为 2，Global Grouping 模式&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;2&quot;&gt;&lt;br/&gt;builder.setSpout(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogspout&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebLogSpout(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;builder.setBolt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogbolt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebLogBolt(), &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).globalGrouping(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weblogspout&quot;&lt;/span&gt;);&lt;p&gt;task 的 id 最低的 bolt 获取到了所有数据。&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h53&quot;&gt;&lt;span&gt;&lt;strong&gt;5.3 并发度&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h531&quot;&gt;&lt;span&gt;&lt;strong&gt;5.3.1 场景分析&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1）单线程下：加减乘除、全局&lt;code&gt;汇总&lt;/code&gt;&lt;br/&gt;2）多线程下：&lt;code&gt;局部&lt;/code&gt;加减乘除、持久化DB等&lt;br/&gt;  （1）思考：如何计算：word 总数和 word 个数？并且在高并发下完成&lt;br/&gt;  前者是统计总行数，后者是去重 word 个数。&lt;br/&gt;  类似企业场景：计算网站 PV 和 UV&lt;br/&gt;  （2）网站最常用的两个指标：&lt;br/&gt;  PV(page views)：count(session_id) 即页面浏览量。&lt;br/&gt;  UV(user views)：count(distinct session_id) 即独立访客数。&lt;br/&gt;  a）用 ip 地址分析&lt;br/&gt;  指访问某个站点或点击某个网页的不同 ip 地址的人数。在同一天内，UV 只记录第一次进入网站的具有独立 IP 的访问者，在同一天内再次访问该网站则不计数。&lt;br/&gt;  b）用 Cookie 分析 UV 值&lt;br/&gt;  当客户端第一次访问某个网站服务器的时候，网站服务器会给这个客户端的电脑发出一个 Cookie，通常放在这个客户端电脑的 C 盘当中。在这个 Cookie 中会分配一个独一无二的编号，这其中会记录一些访问服务器的信息，如访问时间、访问了哪些页面等等。当你下次再访问这个服务器的时候，服务器就可以直接从你的电脑中找到上一次放进去的 Cookie 文件，并且对其进行一些更新，但那个独一无二的编号是不会变的。&lt;br/&gt;  实时处理的业务场景主要包括：汇总型（如网站 PV、销售额、订单数）、去重型（如网站 UV、顾客数、销售商品数）&lt;/p&gt;
&lt;h4 id=&quot;h532&quot;&gt;&lt;span&gt;&lt;strong&gt;5.3.2 并发度&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  并发度：用户指定一个任务，可以被多个线程执行，&lt;code&gt;并发度的数量等于线程 executor 的数量&lt;/code&gt;。&lt;br/&gt;  task 就是具体的处理逻辑对象，一个 executor 线程可以执行一个或多个 tasks，但一般默认每个 executor 只执行一个 task，所以我们往往认为 task 就是执行线程，其实不是。&lt;br/&gt;  &lt;code&gt;task 代表最大并发度&lt;/code&gt;，一个 component 的 task 数是不会改变的，但是一个 componet 的 executer 数目是会发生变化的（storm rebalance 命令），task 数 &amp;gt;= executor 数，&lt;code&gt;executor 数代表实际并发数&lt;/code&gt;。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzqHO.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h54&quot;&gt;&lt;span&gt;&lt;strong&gt;5.4 实操案例&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h541&quot;&gt;&lt;span&gt;&lt;strong&gt;5.4.1 实时单词统计案例&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1）需求&lt;br/&gt;  实时统计发射到 Storm 框架中单词的总数。&lt;/p&gt;
&lt;p&gt;2）分析&lt;br/&gt;  设计一个 topology，来实现对文档里面的单词出现的频率进行统计。&lt;br/&gt;整个 topology 分为三个部分：&lt;br/&gt;  （1）WordCountSpout：数据源，在已知的英文句子中，随机发送一条句子出去。&lt;br/&gt;  （2）WordCountSplitBolt：负责将单行文本记录（句子）切分成单词。&lt;br/&gt;  （3）WordCountBolt：负责对单词的频率进行累加。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzOED.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;3）实操&lt;br/&gt;  （1）创建 spout&lt;/p&gt;
&lt;pre readability=&quot;13.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;21&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.wordcount;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.spout.SpoutOutputCollector;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.TopologyContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.OutputFieldsDeclarer;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.base.BaseRichSpout;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Fields;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Values;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WordCountSpout&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BaseRichSpout&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; SpoutOutputCollector collector = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map conf, TopologyContext context, SpoutOutputCollector collector)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.collector = collector;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;nextTuple&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;collector.emit(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Values(&lt;span class=&quot;hljs-string&quot;&gt;&quot;i am ximen love jinlian&quot;&lt;/span&gt;));&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;Thread.sleep(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;declarer.declare(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;hljs-string&quot;&gt;&quot;love&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （2）创建切割单词的 bolt&lt;/p&gt;
&lt;pre readability=&quot;15&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;24&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.wordcount;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.OutputCollector;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.TopologyContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.OutputFieldsDeclarer;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.base.BaseRichBolt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Fields;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Tuple;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Values;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WordCountSplitBolt&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BaseRichBolt&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; OutputCollector collector = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map stormConf, TopologyContext context, OutputCollector collector)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.collector = collector;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Tuple input)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;String line = input.getString(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br/&gt;String[] arrWords = line.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String word : arrWords) {&lt;br/&gt;collector.emit(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Values(word, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;declarer.declare(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;hljs-string&quot;&gt;&quot;word&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;num&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （3）创建汇总单词个数的 bolt&lt;/p&gt;
&lt;pre readability=&quot;16.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;27&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.wordcount;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.OutputCollector;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.TopologyContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.OutputFieldsDeclarer;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.base.BaseRichBolt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Tuple;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WordCountBolt&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BaseRichBolt&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, Integer&amp;gt; map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map stormConf, TopologyContext context, OutputCollector collector)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Tuple input)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;String word = input.getString(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); &lt;br/&gt;Integer num = input.getInteger(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (map.containsKey(word)) {&lt;br/&gt;Integer count = map.get(word);&lt;br/&gt;count = count + num;&lt;br/&gt;map.put(word, count);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;map.put(word, num);&lt;br/&gt;}&lt;br/&gt;System.err.println(Thread.currentThread().getId() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;  word:&quot;&lt;/span&gt; + word + &lt;span class=&quot;hljs-string&quot;&gt;&quot;  num:&quot;&lt;/span&gt; + map.get(word));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （4）创建程序的拓扑 main&lt;/p&gt;
&lt;pre readability=&quot;12.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;19&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.wordcount;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.Config;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.LocalCluster;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.StormSubmitter;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.TopologyBuilder;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Fields;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WordCountMain&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;TopologyBuilder builder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TopologyBuilder();&lt;br/&gt;builder.setSpout(&lt;span class=&quot;hljs-string&quot;&gt;&quot;WordCountSpout&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WordCountSpout(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;builder.setBolt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;WordCountSplitBolt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WordCountSplitBolt(), &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;).shuffleGrouping(&lt;span class=&quot;hljs-string&quot;&gt;&quot;WordCountSpout&quot;&lt;/span&gt;);&lt;br/&gt;builder.setBolt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;WordCountBolt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WordCountBolt(), &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).fieldsGrouping(&lt;span class=&quot;hljs-string&quot;&gt;&quot;WordCountSplitBolt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;hljs-string&quot;&gt;&quot;word&quot;&lt;/span&gt;));&lt;br/&gt;Config conf = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Config();&lt;br/&gt;conf.setNumWorkers(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (args.length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;StormSubmitter.submitTopology(args[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], conf, builder.createTopology());&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;LocalCluster localCluster = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; LocalCluster();&lt;br/&gt;localCluster.submitTopology(&lt;span class=&quot;hljs-string&quot;&gt;&quot;WordCountTopology&quot;&lt;/span&gt;, conf, builder.createTopology());&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （5）测试&lt;br/&gt;发现 159 线程只处理单词 am 和单词 love，163 进程处理单词 i、ximen、jianlian。这就是分组的好处。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  word:i  num:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  word:ximen  num:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  word:jinlian  num:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;159&lt;/span&gt;  word:am  num:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;159&lt;/span&gt;  word:love  num:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  word:i  num:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  word:ximen  num:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  word:jinlian  num:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;159&lt;/span&gt;  word:am  num:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;159&lt;/span&gt;  word:love  num:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  word:i  num:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  word:ximen  num:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  word:jinlian  num:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;159&lt;/span&gt;  word:am  num:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;159&lt;/span&gt;  word:love  num:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h542pv&quot;&gt;&lt;span&gt;&lt;strong&gt;5.4.2 实时计算网站 PV 案例&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;0）基础知识准备&lt;br/&gt;1）需求&lt;br/&gt;  统计网站 pv(页面浏览量)。&lt;br/&gt;2）需求分析&lt;br/&gt;方案一：&lt;br/&gt;  定义 static long pv，Synchronized 控制累计操作。（不可行）&lt;br/&gt;  原因：Synchronized 和 Lock 在单 JVM 下有效，但在多 JVM 下无效。&lt;br/&gt;方案二：&lt;br/&gt;  ShuffleGrouping 下，pv * Executer 并发数&lt;br/&gt;  驱动函数中配置如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;builder.setSpout(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PVSpout&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PVSpout(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;builder.setBolt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PVBolt1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PVBolt1(), &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;).shuffleGrouping(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PVSpout&quot;&lt;/span&gt;);&lt;br/&gt;在 PVBolt1 中输出时&lt;br/&gt;System.err.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;threadid:&quot;&lt;/span&gt; + Thread.currentThread().getId() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;  pv:&quot;&lt;/span&gt; + pv * &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);&lt;br/&gt;因为 shuffleGrouping 轮询分配&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  优点：简单、计算量小。&lt;br/&gt;  缺点：稍有误差，但绝大多数场景能接受。&lt;br/&gt;方案三：&lt;br/&gt;  PVBolt1 进行多并发局部汇总，PVSumBolt 单线程进行全局汇总。&lt;br/&gt;  线程安全：多线程处理的结果和单线程一致。&lt;br/&gt;  优点：绝对准确；如果用 filedGrouping 可以得到中间值，如单个 user 的访问 PV（访问深度等）。&lt;br/&gt;  缺点：计算量稍大，且多一个 Bolt。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzj4H.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;3）案例实操&lt;br/&gt;  （1）创建数据输入源 PVSpout&lt;/p&gt;
&lt;pre readability=&quot;26.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;47&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.pv;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.BufferedReader;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileInputStream;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileNotFoundException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.InputStreamReader;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.UnsupportedEncodingException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.spout.SpoutOutputCollector;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.TopologyContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.IRichSpout;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.OutputFieldsDeclarer;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Fields;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Values;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PVSpout&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IRichSpout&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; SpoutOutputCollector collector = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; BufferedReader reader = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String str = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map conf, TopologyContext context, SpoutOutputCollector collector)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.collector = collector;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;reader = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d:/temp/storm/website.log&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;));&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (UnsupportedEncodingException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (FileNotFoundException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (reader != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;reader.close();&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;nextTuple&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((str = reader.readLine()) != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;collector.emit(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Values(str));&lt;br/&gt;Thread.sleep(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object msgId)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object msgId)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;declarer.declare(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;hljs-string&quot;&gt;&quot;log&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getComponentConfiguration&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （2）创建数据处理 PVBolt1&lt;/p&gt;
&lt;pre readability=&quot;18.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;31&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.pv;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.OutputCollector;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.TopologyContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.IRichBolt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.OutputFieldsDeclarer;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Fields;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Tuple;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Values;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PVBolt1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IRichBolt&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; OutputCollector collector;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; pv = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map stormConf, TopologyContext context, OutputCollector collector)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.collector = collector;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Tuple input)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;String line = input.getString(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br/&gt;String sessionID = line.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\t&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sessionID != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;pv++;&lt;br/&gt;}&lt;br/&gt;collector.emit(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Values(Thread.currentThread().getId(), pv));&lt;/p&gt;&lt;p&gt;System.err.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;threadID:&quot;&lt;/span&gt; + Thread.currentThread().getId() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;  pv:&quot;&lt;/span&gt; + pv);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;declarer.declare(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;hljs-string&quot;&gt;&quot;threadID&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;pv&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getComponentConfiguration&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （3）创建 PVSumBolt&lt;/p&gt;
&lt;pre readability=&quot;19&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;32&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.pv;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Iterator;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.OutputCollector;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.TopologyContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.IRichBolt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.OutputFieldsDeclarer;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Tuple;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PVSumBolt&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IRichBolt&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;Long, Long&amp;gt; map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;Long, Long&amp;gt;();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map stormConf, TopologyContext context, OutputCollector collector)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Tuple input)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;Long threadID = input.getLong(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br/&gt;Long pv = input.getLong(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;map.put(threadID, pv);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; wordSum = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br/&gt;Iterator&amp;lt;Long&amp;gt; iterator = map.values().iterator();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(iterator.hasNext()) {&lt;br/&gt;wordSum += iterator.next();&lt;br/&gt;}&lt;br/&gt;System.err.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pvAll:&quot;&lt;/span&gt; + wordSum);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getComponentConfiguration&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （4）创建程序的拓扑 PVMain&lt;/p&gt;
&lt;pre readability=&quot;12&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;18&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.pv;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.Config;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.LocalCluster;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.StormSubmitter;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.TopologyBuilder;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PVMain&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;TopologyBuilder builder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TopologyBuilder();&lt;br/&gt;builder.setSpout(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PVSpout&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PVSpout(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;builder.setBolt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PVBolt1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PVBolt1(), &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;).shuffleGrouping(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PVSpout&quot;&lt;/span&gt;);&lt;br/&gt;builder.setBolt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PVSumBolt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PVSumBolt(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).shuffleGrouping(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PVBolt1&quot;&lt;/span&gt;);&lt;br/&gt;Config conf = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Config();&lt;br/&gt;conf.setNumWorkers(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (args.length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;StormSubmitter.submitTopology(args[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], conf, builder.createTopology());&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;LocalCluster localCluster = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; LocalCluster();&lt;br/&gt;localCluster.submitTopology(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PVopology&quot;&lt;/span&gt;, conf, builder.createTopology());&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （5）测试，执行程序输出如下结果&lt;/p&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;5&quot;&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;157&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;161&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;161&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;157&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;161&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;159&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;161&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;157&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;161&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;159&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;157&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;161&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;159&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;159&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;157&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;157&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;157&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;159&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;157&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;157&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;159&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;&lt;p&gt;我们将各个线程最后一次的输出进行累加&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;161&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;157&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;threadID:&lt;span class=&quot;hljs-number&quot;&gt;159&lt;/span&gt;  pv:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;结果是&lt;br/&gt;pvAll:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;&lt;/p&gt;&lt;p&gt;综上：代码测试完成！&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h543uv&quot;&gt;&lt;span&gt;&lt;strong&gt;5.4.3 实时计算网站 UV 去重案例&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1）需求：&lt;br/&gt;  统计网站 UV(独立访客数)。&lt;/p&gt;
&lt;p&gt;2）需求分析&lt;br/&gt;方案一：&lt;br/&gt;  把 ip 放入 Set 实现自动去重，Set.size() 获得 UV（分布式应用中不可行）。&lt;br/&gt;方案二：&lt;br/&gt;  UVBolt1 通过 fieldGrouping 进行多线程局部汇总，下一级 UVSumBolt 进行单线程全局汇总去重。按 ip 地址统计 UV 数。&lt;br/&gt;  既然去重，必须持久化数据：&lt;br/&gt;  （1）内存：数据结构 map&lt;br/&gt;  （2）no-sql 分布式数据库，如 Hbase&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s2.ax1x.com/2019/04/13/ALzz8A.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;3）案例实操&lt;br/&gt;  （1）创建带 ip 地址的数据源 GenerateData&lt;/p&gt;
&lt;pre readability=&quot;23.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;41&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.uv;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.File;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileNotFoundException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileOutputStream;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Random;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GenerateData&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;File logFile = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d:/temp/storm/website.log&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;String[] hosts = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;www.atguigu.com&quot;&lt;/span&gt; };&lt;br/&gt;String[] session_id = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;ABYH6Y4V4SCVXTG6DPB4VH9U123&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;XXYH6YCGFJYERTT834R52FDXV9U34&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;BBYH61456FGHHJ7JL89RG5VV9UYU7&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;CYYH6Y2345GHI899OFG4V9U567&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;VVVYH6Y4V4SFXZ56JIPDPB4V678&quot;&lt;/span&gt; };&lt;br/&gt;String[] time = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 08:40:50&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 08:40:51&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 08:40:52&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 08:40:53&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 09:40:49&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 10:40:49&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 11:40:49&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-08-07 12:40:49&quot;&lt;/span&gt; };&lt;br/&gt;String[] ip = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.102&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.103&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.104&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.105&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.106&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.107&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.108&quot;&lt;/span&gt; };&lt;/p&gt;&lt;p&gt;&lt;br/&gt;StringBuffer sb = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuffer();&lt;br/&gt;Random random = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Random();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;; i++) {&lt;br/&gt;sb.append(hosts[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\t&quot;&lt;/span&gt; + session_id[random.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\t&quot;&lt;/span&gt; + time[random.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;)] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\t&quot;&lt;/span&gt; + ip[random.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;)] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!logFile.exists()) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;logFile.createNewFile();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Create logFile fail !&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[] b = (sb.toString()).getBytes();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;FileOutputStream fileOutputStream = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;fileOutputStream = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; FileOutputStream(logFile);&lt;br/&gt;fileOutputStream.write(b);&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Generate data over !&quot;&lt;/span&gt;);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (FileNotFoundException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;fileOutputStream.close();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （2）创建接收数据 UVSpout&lt;/p&gt;
&lt;pre readability=&quot;26.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;47&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.uv;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.BufferedReader;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileInputStream;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileNotFoundException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.InputStreamReader;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.UnsupportedEncodingException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.spout.SpoutOutputCollector;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.TopologyContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.IRichSpout;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.OutputFieldsDeclarer;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Fields;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Values;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UVSpout&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IRichSpout&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; SpoutOutputCollector collector = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; BufferedReader reader = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String str = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map conf, TopologyContext context, SpoutOutputCollector collector)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.collector = collector;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;reader = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d:/temp/storm/website.log&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;));&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (UnsupportedEncodingException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (FileNotFoundException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (reader != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;reader.close();&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;nextTuple&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((str = reader.readLine()) != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;collector.emit(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Values(str));&lt;br/&gt;Thread.sleep(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object msgId)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object msgId)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;declarer.declare(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;hljs-string&quot;&gt;&quot;log&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getComponentConfiguration&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （3）创建 UVBolt1&lt;/p&gt;
&lt;pre readability=&quot;17&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;28&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.uv;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.OutputCollector;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.TopologyContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.IRichBolt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.OutputFieldsDeclarer;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Fields;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Tuple;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Values;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UVBolt1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IRichBolt&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; OutputCollector collector;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map stormConf, TopologyContext context, OutputCollector collector)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.collector = collector;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Tuple input)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;String line = input.getString(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br/&gt;String ip = line.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\t&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];&lt;br/&gt;collector.emit(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Values(ip, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;declarer.declare(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ip&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;num&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getComponentConfiguration&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （4）创建 UVSumBolt&lt;/p&gt;
&lt;pre readability=&quot;21&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;36&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.uv;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.OutputCollector;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.task.TopologyContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.IRichBolt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.OutputFieldsDeclarer;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.tuple.Tuple;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UVSumBolt&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IRichBolt&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, Integer&amp;gt; map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, Integer&amp;gt;();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map stormConf, TopologyContext context, OutputCollector collector)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Tuple input)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;String ip = input.getString(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br/&gt;Integer num = input.getInteger(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (map.containsKey(ip)) {&lt;br/&gt;Integer count = map.get(ip);&lt;br/&gt;map.put(ip, count + num);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;map.put(ip, num);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;System.err.println(Thread.currentThread().getId() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;  ip:&quot;&lt;/span&gt; + ip + &lt;span class=&quot;hljs-string&quot;&gt;&quot;  num:&quot;&lt;/span&gt; + map.get(ip));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getComponentConfiguration&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （5）创建驱动 UVMain&lt;/p&gt;
&lt;pre readability=&quot;15.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;25&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.atgui.storm.uv;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.Config;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.LocalCluster;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.StormSubmitter;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.storm.topology.TopologyBuilder;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UVMain&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;TopologyBuilder builder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TopologyBuilder();&lt;/p&gt;&lt;p&gt;builder.setSpout(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UVSpout&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; UVSpout(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;builder.setBolt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UVBolt1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; UVBolt1(), &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;).shuffleGrouping(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UVSpout&quot;&lt;/span&gt;);&lt;br/&gt;builder.setBolt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UVSumBolt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; UVSumBolt(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).shuffleGrouping(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UVBolt1&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;Config conf = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Config();&lt;br/&gt;conf.setNumWorkers(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (args.length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;StormSubmitter.submitTopology(args[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], conf, builder.createTopology());&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;LocalCluster cluster = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; LocalCluster();&lt;br/&gt;cluster.submitTopology(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UVtopology&quot;&lt;/span&gt;, conf, builder.createTopology());&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  （6）测试&lt;/p&gt;
&lt;pre readability=&quot;4.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;3&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.104  num:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.105  num:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.108  num:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.104  num:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.106  num:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.107  num:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.103  num:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.101  num:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.102  num:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.105  num:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.107  num:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.104  num:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.103  num:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.107  num:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.104  num:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.105  num:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.108  num:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.106  num:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.106  num:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.108  num:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.105  num:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.104  num:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.107  num:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.103  num:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.103  num:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.103  num:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.101  num:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.102  num:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.105  num:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt;  ip:&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.1.101  num:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;p&gt;测试结果：一共&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;个用户，&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;：访问&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;次；&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;102&lt;/span&gt;：访问&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;次；&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;103&lt;/span&gt;：访问&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;次；&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;104&lt;/span&gt;：访问&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;次；&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;105&lt;/span&gt;：访问&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;次；&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;106&lt;/span&gt;：访问&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;次；&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;107&lt;/span&gt;：访问&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;次；&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;108&lt;/span&gt;：访问&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;次；&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 13 Apr 2019 15:41:00 +0000</pubDate>
<dc:creator>黑泽君</dc:creator>
<og:description>一 Storm 概述1.1 离线计算是什么？1.2 流式计算是什么1.3 Storm 是什么？1.4 Storm 与 Hadoop 的区别1.5 Storm 应用场景及行业案例1.5.1 运用场景1.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenmingjun/p/10703594.html</dc:identifier>
</item>
<item>
<title>Java基础篇——集合浅谈 - 会炼钢的小白龙</title>
<link>http://www.cnblogs.com/baixianlong/p/10703558.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/baixianlong/p/10703558.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;原创不易，如需转载，请注明出处&lt;a href=&quot;https://www.cnblogs.com/baixianlong/p/10703558.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/baixianlong/p/10703558.html&lt;/a&gt;，否则将追究法律责任！！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;hashset不重复无序非线程安全的集合&quot;&gt;HashSet（不重复、无序、非线程安全的集合）&lt;/h2&gt;
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;12&quot;&gt;
&lt;p&gt;底层实现，源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  public class HashSet&amp;lt;E&amp;gt; extends AbstractSet&amp;lt;E&amp;gt; implements Set&amp;lt;E&amp;gt;, Cloneable, java.io.Serializable {

      static final long serialVersionUID = -5024744406713321676L;
      //卖个关子，这里为啥要用transient关键字? 评论区见哦！
      private transient HashMap&amp;lt;E,Object&amp;gt; map;
      private static final Object PRESENT = new Object();

      public HashSet() {
          map = new HashMap&amp;lt;&amp;gt;();
      }
      public boolean add(E e) {
          return map.put(e, PRESENT)==null;
      }
      ...
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不用多说，是不没想到，原来HashSet是基于HashMap实现的，元素都存到HashMap键值对的Key上面，而Value时有一个统一的值private static final Object PRESENT = new Object();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;注意：
&lt;ol&gt;&lt;li&gt;对于HashSet中保存的对象，主要要正确重写equals方法和hashCode方法，以保证放入Set对象的唯一性&lt;/li&gt;
&lt;li&gt;HashSet没有提供get()方法，愿意是同HashMap一样，Set内部是无序的，只能通过迭代的方式获得&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;treeset不重复有序非线程安全的集合&quot;&gt;TreeSet（不重复、有序、非线程安全的集合）&lt;/h2&gt;
&lt;ul readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;底层实现，源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  public class TreeSet&amp;lt;E&amp;gt; extends AbstractSet&amp;lt;E&amp;gt; implements NavigableSet&amp;lt;E&amp;gt;, Cloneable, java.io.Serializable {

      private transient NavigableMap&amp;lt;E,Object&amp;gt; m;
      private static final Object PRESENT = new Object();
      TreeSet(NavigableMap&amp;lt;E,Object&amp;gt; m) {
          this.m = m;
      }

      public TreeSet() {
          this(new TreeMap&amp;lt;E,Object&amp;gt;());
      }
      public boolean add(E e) {
          return m.put(e, PRESENT)==null;
      }
  }&lt;/code&gt;
&lt;/pre&gt;
我去，又是这个尿性，基于TreeMap来实现的&lt;/li&gt;
&lt;li&gt;注意：
&lt;ol&gt;&lt;li&gt;首先要正确重写equals方法和hashCode方法，以保证放入Set对象的唯一性&lt;/li&gt;
&lt;li&gt;需要实现Comparable接口，从而实现有序存储&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;linkedhashset不重复位置有序非线程安全的集合&quot;&gt;LinkedHashSet（不重复、位置有序、非线程安全的集合）&lt;/h2&gt;
&lt;ul readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;16&quot;&gt;
&lt;p&gt;底层实现，源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  public class LinkedHashSet&amp;lt;E&amp;gt; extends HashSet&amp;lt;E&amp;gt; implements Set&amp;lt;E&amp;gt;, Cloneable, java.io.Serializable {

      private static final long serialVersionUID = -2851667679971038690L;

      public LinkedHashSet(int initialCapacity, float loadFactor) {
          super(initialCapacity, loadFactor, true);
      }
      public LinkedHashSet(int initialCapacity) {
          super(initialCapacity, .75f, true);
      }
      public LinkedHashSet() {
          super(16, .75f, true);
      }
      public LinkedHashSet(Collection&amp;lt;? extends E&amp;gt; c) {
          super(Math.max(2*c.size(), 11), .75f, true);
          addAll(c);
      }
  }&lt;/code&gt;
&lt;/pre&gt;
都是super,实现了把HashSet中预留的构造方法启用了，因而可以实现有序插入（LinkedHashMap再谈究竟）&lt;/li&gt;
&lt;li&gt;注意：
&lt;ol&gt;&lt;li&gt;首先要正确重写equals方法和hashCode方法，以保证放入Set对象的唯一性&lt;/li&gt;
&lt;li&gt;内部实现了有序插入，所以使用时不需要考虑&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;hashmap无序线程不安全&quot;&gt;HashMap（无序、线程不安全）&lt;/h2&gt;
&lt;ul readability=&quot;4&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Jdk1.7数据存储结构（采用数组+链表）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/13/5cb1ab64217e8.png&quot; alt=&quot;hashmap.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://i.loli.net/2019/04/13/5cb1abb443984.png&quot; alt=&quot;hashmap2.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Jdk1.8数据存储结构（采用数组+链表+红黑树）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/13/5cb1ac3cafcc2.png&quot; alt=&quot;hashmap3.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意：在链表长度大于8后，查询复杂度由O(n)变为O(logn)，将链表存储转换成红黑树存储（也就是TreeMap）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;红黑树R-B Tree简介(本质其实是2-3-4树):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/13/5cb1d93d2b1f2.png&quot; alt=&quot;红黑树.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;二叉树特性：
（1）左字数上所有的节点的值都小于或等于他的根节点上的值
（2）右子树上所有节点的值均大于或等于他的根节点的值
（3）左、右子树也分别为二叉树
红黑树特点（一种平衡二叉树）：
（1）每个结点要么是红的要么是黑的。
（2）根结点是黑的。 
（3）每个叶结点（叶结点即指树尾端NIL指针或NULL结点）都是黑的。 
（4）如果一个结点是红的，那么它的两个儿子都是黑的。 
（5）对于任意结点而言，其到叶结点树尾端NIL指针的每条路径都包含相同数目的黑结点
节点操作：
（1）左旋
（2）右旋
（3）变色&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;treemap有序线程不安全&quot;&gt;TreeMap（有序、线程不安全）&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;底层就是红黑二叉树&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;linkedhashmap有序线程不安全&quot;&gt;LinkedHashMap（有序、线程不安全）&lt;/h2&gt;
&lt;ul readability=&quot;9.5&quot;&gt;&lt;li readability=&quot;22&quot;&gt;
&lt;p&gt;底层实现，源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;static class Entry&amp;lt;K,V&amp;gt; extends HashMap.Node&amp;lt;K,V&amp;gt; {
    //这里维护了一个before和after的Entry， 见名思意， 就是每个Entry&amp;lt;K,V&amp;gt;都维护它的上一个元素和下一个元素的关系。这也是LinkedHashMap有序的关键所在。
    Entry&amp;lt;K,V&amp;gt; before, after;
    Entry(int hash, K key, V value, Node&amp;lt;K,V&amp;gt; next) {
        super(hash, key, value, next);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;LinkedHashMap是继承HashMap， 也就是说LinkedHashMap的结构也是和HashMap那样(数组+链表)&lt;/p&gt;
&lt;p&gt;注意：LinkedHashMap分为插入的顺序排列和访问的顺序排列两种方式，通过accessOrder参数来控制&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;hashtable线程安全&quot;&gt;Hashtable（线程安全）&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;底层数据结构同HashMap。线程安全，效率低，没什么卵用，需要使用线程安全的Map可以使用ConcurrentHashMap&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;arraylist位置有序可重复线程不安全&quot;&gt;ArrayList(位置有序、可重复、线程不安全)&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;底层数据结构是数组,查询快&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;linkedlist有序线程不安全&quot;&gt;LinkedList（有序、线程不安全）&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;底层数据结构是双向链表,查询慢,增删快&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;vector有序线程安全&quot;&gt;Vector（有序、线程安全）&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;底层数据结构是数组,查询快,增删慢&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;concurrenthashmap线程安全&quot;&gt;ConcurrentHashMap（线程安全）&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;利用了锁分段的思想提高了并发度,把Map分成了N个Segment,每个Segment相当于HashTable&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;copyonwritearraylist线程安全&quot;&gt;CopyOnWriteArrayList(线程安全)&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;读写分离，写时复制出一个新的数组，完成插入、修改或者移除操作后将新数组赋值给array&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;非阻塞队列&quot;&gt;非阻塞队列&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;PriorityQueue ：实质上维护了一个有序列表&lt;/li&gt;
&lt;li&gt;ConcurrentLinkedQueue ：基于链接节点的、线程安全的队列&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;阻塞队列&quot;&gt;阻塞队列&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;ArrayBlockingQueue ：一个由数组支持的有界队列。&lt;/li&gt;
&lt;li&gt;LinkedBlockingQueue ：一个由链接节点支持的可选有界队列。&lt;/li&gt;
&lt;li&gt;PriorityBlockingQueue ：一个由优先级堆支持的无界优先级队列。&lt;/li&gt;
&lt;li&gt;DelayQueue ：一个由优先级堆支持的、基于时间的调度队列。&lt;/li&gt;
&lt;li&gt;SynchronousQueue ：一个利用 BlockingQueue 接口的简单聚集（rendezvous）机制。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;本来想详细的总结一下各种集合的使用和底层实现，但发现说来说去还是数据结构的事，你要能把数组、链表、二叉树、红黑树等数据结构弄明白，这些所谓的集合也就是不同的实现而已。&lt;/li&gt;
&lt;li&gt;以后有机会还是直接来搞数据结构、算法吧！&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;p&gt;个人博客地址：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;0.94186046511628&quot;&gt;
&lt;blockquote readability=&quot;1.2558139534884&quot;&gt;
&lt;p&gt;csdn:&lt;a href=&quot;https://blog.csdn.net/tiantuo6513&quot; class=&quot;uri&quot;&gt;https://blog.csdn.net/tiantuo6513&lt;/a&gt;&lt;br/&gt;cnblogs:&lt;a href=&quot;https://www.cnblogs.com/baixianlong&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/baixianlong&lt;/a&gt;&lt;br/&gt;segmentfault:&lt;a href=&quot;https://segmentfault.com/u/baixianlong&quot; class=&quot;uri&quot;&gt;https://segmentfault.com/u/baixianlong&lt;/a&gt;&lt;br/&gt;github:&lt;a href=&quot;https://github.com/xianlongbai&quot; class=&quot;uri&quot;&gt;https://github.com/xianlongbai&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 13 Apr 2019 15:39:00 +0000</pubDate>
<dc:creator>会炼钢的小白龙</dc:creator>
<og:description>原创不易，如需转载，请注明出处 'https://www.cnblogs.com/baixianlong/p/10703558.html' ，否则将追究法律责任！！！ Set（基于Map来实现的，不细</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/baixianlong/p/10703558.html</dc:identifier>
</item>
<item>
<title>TypeScript 中非代码模块的导入 - 刘哇勇</title>
<link>http://www.cnblogs.com/Wayou/p/import_files_in_typescript.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Wayou/p/import_files_in_typescript.html</guid>
<description>&lt;p&gt;需要理解的是，TypeScript 作为语言，他只处理代码模块。其他类型的文件这种非代码模块的导入，讲道理是通过另外的打包工具来完成的，比如 Web 应用中的图片，样式，JSON 还有 HTML 模板文件。只是我们需要在 TypeScript 层面解决模块解析报错的问题。&lt;/p&gt;
&lt;h2&gt;通配符模块声明&lt;/h2&gt;
&lt;p&gt;直接导入非代码模块，TypeScript 会报错。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/**&lt;/span&gt; 🚨 Cannot find module './index.html'. &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;./index.html&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TypeScript 文档中关于这部分的描述是 &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/modules.html&quot; rel=&quot;nofollow&quot;&gt;Wildcard module declarations&lt;/a&gt;，即通过定义通配符模块。与 &lt;a href=&quot;https://github.com/systemjs/systemjs/blob/master/docs/overview.md#plugin-syntax&quot;&gt;SystemJS&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/amdjs/amdjs-api/blob/master/LoaderPlugins.md&quot;&gt;AMD&lt;/a&gt; 一致，在导入时路径上加上定义好的文件类型前后缀，这些路径上的额外信息在编译后可通过运行时实际的加载器中相应的插件来解析处理。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;typings.d.ts&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;*!text&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; {
    &lt;span class=&quot;pl-k&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt;&lt;/span&gt; content&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;string&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;content&lt;/span&gt;;
}
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Some do it the other way around.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;json!*&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; {
    &lt;span class=&quot;pl-k&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt;&lt;/span&gt; value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;any&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;value&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;main.ts&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;fileContent&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;./xyz.txt!text&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;json!http://example.com/data.json&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;pl-c1&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;fileContent&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用定义类型前后缀的方式是可以解决代码中 TypeScript 报错的问题，但编译后因为模块地址中的类型前缀或后缀（&lt;code&gt;!text&lt;/code&gt;,&lt;code&gt;json!&lt;/code&gt;）没有去掉，这就需要对 &lt;code&gt;require&lt;/code&gt; 定义相应的插件来处理。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
$ node main.js
internal/modules/cjs/loader.js:670
    throw err&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
    ^

Error: Cannot find module &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;./xyz.txt!text&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你看过 &lt;a href=&quot;https://github.com/Microsoft/vscode/blob/master/src/vs/editor/browser/viewParts/selections/selections.ts#L6&quot;&gt;VSCode 的源码&lt;/a&gt;，会发现里面大量使用了有类似这样的方式导入样式文件：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;vs/css!./selections&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里 &lt;code&gt;vs/css!&lt;/code&gt; 便是上面提到的方式，但 VSCode 是使用了&lt;a href=&quot;https://github.com/Microsoft/vscode/blob/master/src/vs/loader.js#L1491&quot;&gt;自定义&lt;/a&gt;的一个模块加载器 &lt;a href=&quot;https://github.com/Microsoft/vscode-loader&quot;&gt;Microsoft/vscode-loader&lt;/a&gt; 来处理。&lt;/p&gt;
&lt;p&gt;还可以像下面这样来进行文件类型的声明：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;typings.d.ts&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;*.html&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-k&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt;&lt;/span&gt; value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;string&lt;/span&gt;;
  &lt;span class=&quot;pl-k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;value&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后写正常的路径来导入即可，编译后的产出中路径没有改变。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/**&lt;/span&gt; ✅ ojbk &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;./index.html&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于其他类型的后缀同理。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;typings.d.ts&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;*.png&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-k&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt;&lt;/span&gt; value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;string&lt;/span&gt;;
  &lt;span class=&quot;pl-k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;value&lt;/span&gt;;
}

&lt;span class=&quot;pl-k&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;*.scss&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-k&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt;&lt;/span&gt; content&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;any&lt;/span&gt;;
  &lt;span class=&quot;pl-k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;content&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是，这只是解决了 TypeScript 的模块解析报错的问题，实际文件的导入并不是在 TypeScript 中做的，而需要额外的打包工具。Webpack 中则是相应的样式 loader 和 图片 loader 来负责这些文件的解析加载。&lt;/p&gt;
&lt;h2&gt;JSON 文件的导入&lt;/h2&gt;
&lt;p&gt;因为 JSON 格式太过常见，TypeScript 确实在自己的编译器中提供了对其加载的支持，通过相应的编译参数 &lt;code&gt;--resolveJsonModul&lt;/code&gt; 来开启。&lt;/p&gt;
&lt;p&gt;创建 &lt;code&gt;tsconfig.json&lt;/code&gt; 开启对 JSON 文件导入的支持。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;tsconfig.json&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-json&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
{
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;compilerOptions&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;target&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;es5&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;module&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;commonjs&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;resolveJsonModule&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后代码中导入 JSON 文件时指定正确的路径，像其他正常的 TypeScript 模块一样。无须前缀，也无须编写额外的声明文件。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;main.ts&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;./bar.json&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;pl-c1&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当尝试编译上面代码时，你会得到如下的报错：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
$ tsc
error TS5055: Cannot write file &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/Users/wayou/Documents/dev/github/ts-wildcard-module/bar.json&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; because it would overwrite input file.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为编译后 JSON 文件也会有一份同名的产出，在没有指定编译输出目录的情况下， tsc 默认输出到当前目录，所以会有上面 JSON 文件会被覆盖的提示。所以解决办法就是添加输出目录的配置。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;tsconfig.json&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
{
  &quot;compilerOptions&quot;: {
    &quot;target&quot;: &quot;es5&quot;,
    &quot;module&quot;: &quot;commonjs&quot;,
    &quot;resolveJsonModule&quot;: true,
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;    &quot;outDir&quot;: &quot;dist&quot;&lt;/span&gt;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再次编译后可正常运行。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ tsc
$ node dist/main.js
{ data: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;blah&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配合着 &lt;code&gt;esModuleInterop&lt;/code&gt; 选项可以让导入更加简洁。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;tsconfig.json&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
{
  &quot;compilerOptions&quot;: {
    &quot;target&quot;: &quot;es5&quot;,
    &quot;module&quot;: &quot;commonjs&quot;,
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;    &quot;esModuleInterop&quot;: true,&lt;/span&gt;
    &quot;resolveJsonModule&quot;: true,
    &quot;outDir&quot;: &quot;dist&quot;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;main.ts&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-md&quot;&gt;&lt;span class=&quot;pl-md&quot;&gt;-&lt;/span&gt; import * as data from &quot;./bar.json&quot;;&lt;/span&gt;
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt; import data from &quot;./bar.json&quot;;&lt;/span&gt;
console.log(data);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;一般项目中都使用专门的打包工具比如 Webpack，Parcel 等，资源的解析加载都会被很好地处理。只是我们需要解决 TypeScipt 模块解析报错的问题，此时可通过对相应文件编写声明文件的方式。&lt;/p&gt;
&lt;h2&gt;相关资源&lt;/h2&gt;
</description>
<pubDate>Sat, 13 Apr 2019 15:16:00 +0000</pubDate>
<dc:creator>刘哇勇</dc:creator>
<og:description>需要理解的是，TypeScript 作为语言，他只处理代码模块。其他类型的文件这种非代码模块的导入，讲道理是通过另外的打包工具来完成的，比如 Web 应用中的图片，样式，JSON 还有 HTML 模板</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Wayou/p/import_files_in_typescript.html</dc:identifier>
</item>
</channel>
</rss>