<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>node 中的 stream - 刘哇勇</title>
<link>http://www.cnblogs.com/Wayou/p/node_stream.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Wayou/p/node_stream.html</guid>
<description>&lt;h3&gt;什么是 stream&lt;/h3&gt;
&lt;p&gt;Stream 借鉴自 Unix 编程哲学中的 pipe。&lt;/p&gt;
&lt;p&gt;Unix shell 命令中觉的管道流式操作 &lt;code&gt;|&lt;/code&gt; 将上一个命令的输出作为下一个命令的输入。node stream 中则是通过 &lt;code&gt;.pip()&lt;/code&gt; 方法来进行的。&lt;/p&gt;
&lt;p&gt;一个 stream 的运用场景。从服务器读取文件并返回给页面。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;朴素的实现：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; http &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;http&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; fs &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;fs&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; server &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;createServer&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;req&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;res&lt;/span&gt;) {
    &lt;span class=&quot;pl-smi&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;readFile&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/data.txt&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;err&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;) {
        &lt;span class=&quot;pl-smi&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;end&lt;/span&gt;(data);
    });
});
&lt;span class=&quot;pl-smi&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;listen&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;8000&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;stream&lt;/code&gt; 实现：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; http &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;http&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; fs &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;fs&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; server &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;createServer&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;req&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;res&lt;/span&gt;) {
    &lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; stream &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;createReadStream&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/data.txt&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
    &lt;span class=&quot;pl-smi&quot;&gt;stream&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;pipe&lt;/span&gt;(res);
});
&lt;span class=&quot;pl-smi&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;listen&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;8000&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好处：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;代码更加简洁&lt;/li&gt;
&lt;li&gt;可自由组合各种模块处理数据&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;stream 的种类&lt;/h3&gt;
&lt;p&gt;分五种：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;readable&lt;/li&gt;
&lt;li&gt;writable&lt;/li&gt;
&lt;li&gt;duplex&lt;/li&gt;
&lt;li&gt;transform&lt;/li&gt;
&lt;li&gt;classic&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;readable&lt;/h4&gt;
&lt;p&gt;readable 类型的流产生数据，可通过 &lt;code&gt;.pip()&lt;/code&gt; 输送到能够消费流数据的地方，比如 writable,transform,duplex&lt;/p&gt;
&lt;p&gt;一个 readable stream 示例：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; Readable &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;stream&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).&lt;span class=&quot;pl-smi&quot;&gt;Readable&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; rs &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Readable&lt;/span&gt;;
&lt;span class=&quot;pl-smi&quot;&gt;rs&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;beep &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-smi&quot;&gt;rs&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;boop&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-smi&quot;&gt;rs&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;);

&lt;span class=&quot;pl-smi&quot;&gt;rs&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;pipe&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;stdout&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ node read0.js
beep boop
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;code&gt;_read&lt;/code&gt; 方法与按需输出&lt;/h4&gt;
&lt;p&gt;上面 &lt;code&gt;rs.push(null)&lt;/code&gt; 表示没有更多数据了。&lt;/p&gt;
&lt;p&gt;上面从代码直接将数据塞入到 readable 流中，然后被缓冲起来，直到被消费。因为消费者有可能并不能立即消费这些内容，直接 &lt;code&gt;push&lt;/code&gt; 数据后消耗不必要的资源。&lt;/p&gt;
&lt;p&gt;更好的做法是，让 readable 流只在消费者需要数据的时候再 &lt;code&gt;push&lt;/code&gt;。这是通过定义能 raedable 对象定义 &lt;code&gt;._read&lt;/code&gt; 方法来完成的。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; Readable &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;stream&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).&lt;span class=&quot;pl-smi&quot;&gt;Readable&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; rs &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Readable&lt;/span&gt;();

&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; c &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;97&lt;/span&gt;;
&lt;span class=&quot;pl-smi&quot;&gt;rs&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;_read&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; () {
    &lt;span class=&quot;pl-smi&quot;&gt;rs&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;fromCharCode&lt;/span&gt;(c&lt;span class=&quot;pl-k&quot;&gt;++&lt;/span&gt;));
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (c &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;z&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;charCodeAt&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)) &lt;span class=&quot;pl-smi&quot;&gt;rs&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;);
};

&lt;span class=&quot;pl-smi&quot;&gt;rs&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;pipe&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;stdout&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ node &lt;span class=&quot;pl-smi&quot;&gt;read1&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;js&lt;/span&gt;
abcdefghijklmnopqrstuvwxyz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种方式下，定义了 readable 流产生数据的方法 &lt;code&gt;._read&lt;/code&gt;，但并没有马上执行并输出数据，而是在 &lt;code&gt;process.stdout&lt;/code&gt; 读取时，才调用输出的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_read&lt;/code&gt; 方法可动态接收一个可选的 &lt;code&gt;size&lt;/code&gt; 参数，由消费方指定一次读取想要多少字节的数据，当然，&lt;code&gt;_read&lt;/code&gt; 方法的实现中是可以忽略这个入参的。&lt;/p&gt;
&lt;p&gt;下面的示例可证明 &lt;code&gt;_read&lt;/code&gt; 方法是消费方调用的时候才执行的，而不是主动执行。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; Readable &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;stream&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).&lt;span class=&quot;pl-smi&quot;&gt;Readable&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; rs &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Readable&lt;/span&gt;();

&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; c &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;97&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;;

&lt;span class=&quot;pl-smi&quot;&gt;rs&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;_read&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; () {
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (c &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;z&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;charCodeAt&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)) &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;rs&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;);
    
    &lt;span class=&quot;pl-c1&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; () {
        &lt;span class=&quot;pl-smi&quot;&gt;rs&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;fromCharCode&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;++&lt;/span&gt;c));
    }, &lt;span class=&quot;pl-c1&quot;&gt;100&lt;/span&gt;);
};

&lt;span class=&quot;pl-smi&quot;&gt;rs&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;pipe&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;stdout&lt;/span&gt;);

&lt;span class=&quot;pl-c1&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;exit&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; () {
    &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;_read() called &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; (c &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;97&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; times&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
});
&lt;span class=&quot;pl-c1&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;stdout&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;error&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;exit&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;输出任意数据&lt;/h4&gt;
&lt;p&gt;上面展示的是输出简单字符串，如果需要输出其他复杂数据，初始化时设置上正确的 &lt;code&gt;objectMode&lt;/code&gt; 参数，&lt;code&gt;Readable({ objectMode: true })&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;消费 readable 流产生的数据&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;这一段没看太懂&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;writable 流&lt;/h3&gt;
&lt;p&gt;writable 流可作为 &lt;code&gt;.pip()&lt;/code&gt; 的对象。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;src&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;pipe&lt;/span&gt;(writableStream)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;创建 writable 流&lt;/h4&gt;
&lt;p&gt;需要实现 &lt;code&gt;._write(chunk, enc, next)&lt;/code&gt; 方法，其中：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;chunk&lt;/code&gt; 为接收到的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enc&lt;/code&gt; 当 &lt;code&gt;opts.decodeString&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; 且收到的数据这字符串时，它表示字符串的编码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next(err)&lt;/code&gt; 数据处理后的回调，可传递一个错误信息以表示数据处理失败&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;默认情况下，获取到的字符串数据会转为 &lt;code&gt;Buffer&lt;/code&gt;，可设置 &lt;code&gt;Writable({ decodeStrings: false })&lt;/code&gt; 来获取字符串数据。&lt;/p&gt;
&lt;p&gt;一个 writable 示例：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; Writable &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;stream&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).&lt;span class=&quot;pl-smi&quot;&gt;Writable&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; ws &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Writable&lt;/span&gt;();
&lt;span class=&quot;pl-smi&quot;&gt;ws&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;_write&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;chunk&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;enc&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;next&lt;/span&gt;) {
    &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;dir&lt;/span&gt;(chunk);
    &lt;span class=&quot;pl-en&quot;&gt;next&lt;/span&gt;();
};

&lt;span class=&quot;pl-c1&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;stdin&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;pipe&lt;/span&gt;(ws);
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;向 writable 流写入数据&lt;/h4&gt;
&lt;p&gt;通过调用 writable 流的 &lt;code&gt;write&lt;/code&gt; 方法来写入。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;stdout&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;beep boop&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过调用 &lt;code&gt;end()&lt;/code&gt; 来结束数据的写入。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; fs &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;fs&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; ws &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;createWriteStream&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;message.txt&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-smi&quot;&gt;ws&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;beep &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-c1&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; () {
    &lt;span class=&quot;pl-smi&quot;&gt;ws&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;end&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;boop&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
}, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;duplex&lt;/h3&gt;
&lt;p&gt;双工类型的流，同时具有 writable 和 readable 流的功能。node 内建的 &lt;code&gt;zlib&lt;/code&gt;,&lt;code&gt;TCP sockets&lt;/code&gt; 以及 &lt;code&gt;crypto&lt;/code&gt; 都是双工类型的。&lt;/p&gt;
&lt;p&gt;所以可对双工类型的流进行如下操作：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;pip&lt;/span&gt;(b).&lt;span class=&quot;pl-en&quot;&gt;pip&lt;/span&gt;(a)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;transform&lt;/h3&gt;
&lt;p&gt;一种特殊类型的双工流，区别在于 transform 类型其输出是输入的转换。跟它的名字一样，这里面对数据进行一些转换后输出。比如，通过 &lt;code&gt;zlib.createGzip&lt;/code&gt; 来对数据进行 gzip 的压缩。有时候也将这种类型的流称为 &lt;code&gt;through steam&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;classic stream&lt;/h3&gt;
&lt;p&gt;这里指使用旧版 api 的流。当一个流身上绑定了 &lt;code&gt;data&lt;/code&gt; 事件的监听时，便会回退为经典旧版的流。&lt;/p&gt;
&lt;h4&gt;classic readable stream&lt;/h4&gt;
&lt;p&gt;当有数据时它会派发 &lt;code&gt;data&lt;/code&gt; 事件，数据输出结束时派发 &lt;code&gt;end&lt;/code&gt; 事件给消费者。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.pipe()&lt;/code&gt; 通过检查 &lt;code&gt;stream.readable&lt;/code&gt; 以判断该流是否是 readable 类型。&lt;/p&gt;
&lt;h4&gt;classic readable 流的创建&lt;/h4&gt;
&lt;p&gt;一个 classic readable 流的创建示例：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; Stream &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;stream&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; stream &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Stream&lt;/span&gt;;
&lt;span class=&quot;pl-smi&quot;&gt;stream&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;readable&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; c &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;64&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; iv &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; () {
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;++&lt;/span&gt;c &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;75&lt;/span&gt;) {
        &lt;span class=&quot;pl-c1&quot;&gt;clearInterval&lt;/span&gt;(iv);
        &lt;span class=&quot;pl-smi&quot;&gt;stream&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;emit&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;end&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
    }
    &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;stream&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;emit&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;data&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;fromCharCode&lt;/span&gt;(c));
}, &lt;span class=&quot;pl-c1&quot;&gt;100&lt;/span&gt;);

&lt;span class=&quot;pl-smi&quot;&gt;stream&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;pipe&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;stdout&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;从 classic readable 流读取数据&lt;/h4&gt;
&lt;p&gt;数据读取是通过监听流上的 &lt;code&gt;data&lt;/code&gt; 与 &lt;code&gt;end&lt;/code&gt; 事件。&lt;/p&gt;
&lt;p&gt;一个从 classic readable 流读取数据的示例：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;stdin&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;data&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;buf&lt;/span&gt;) {
    &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(buf);
});
&lt;span class=&quot;pl-c1&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;stdin&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;end&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; () {
    &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;__END__&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般不建议通过这种方式来操作，一旦给流绑定 &lt;code&gt;data&lt;/code&gt; 事件处理器，即回退到旧的 api 来使用流。如果真的有兼容操作旧版流的需求，应该通过 &lt;a href=&quot;https://www.npmjs.com/package/through&quot; rel=&quot;nofollow&quot;&gt;through&lt;/a&gt; 或 &lt;a href=&quot;https://npmjs.org/package/concat-stream&quot; rel=&quot;nofollow&quot;&gt;concat-stream&lt;/a&gt; 来进行。&lt;/p&gt;
&lt;h4&gt;classic writable stream&lt;/h4&gt;
&lt;p&gt;只需要实现 &lt;code&gt;.write(buf)&lt;/code&gt;, &lt;code&gt;.end(buf)&lt;/code&gt; 及 &lt;code&gt;.destroy()&lt;/code&gt; 方法即可，比较简单。&lt;/p&gt;
&lt;h3&gt;内建的流对象&lt;/h3&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/3783096/51087824-f1266480-1792-11e9-9736-e86055590997.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3783096/51087824-f1266480-1792-11e9-9736-e86055590997.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;本质上，所有流都是 &lt;code&gt;EventEmitter&lt;/code&gt;，通过事件可写入和读取数据。但通过新的 stream api，可方便地通过 &lt;code&gt;.pipe()&lt;/code&gt; 方法来使用流而不是事件的方式。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
</description>
<pubDate>Fri, 29 Mar 2019 15:30:00 +0000</pubDate>
<dc:creator>刘哇勇</dc:creator>
<og:description>什么是 stream Stream 借鉴自 Unix 编程哲学中的 pipe。 Unix shell 命令中觉的管道流式操作 | 将上一个命令的输出作为下一个命令的输入。node stream 中则是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Wayou/p/node_stream.html</dc:identifier>
</item>
<item>
<title>C#并行编程（4）：基于任务的并行 - LayShun</title>
<link>http://www.cnblogs.com/chenbaoshun/p/10621819.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenbaoshun/p/10621819.html</guid>
<description>&lt;h2 id=&quot;c中的任务task&quot;&gt;C#中的任务&lt;code&gt;Task&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;在C#编程中，实现并行可以直接使用线程，但使用起来很繁琐；也可以使用线程池，线程池很大程度上简化了线程的使用，但是也有着一些局限，比如我们不知道作业什么时候完成，也取不到作业的返回值；解决线程池局限性的方案是使用&lt;code&gt;任务&lt;/code&gt;。本文将总结C#中&lt;code&gt;Task&lt;/code&gt;的使用。&lt;/p&gt;
&lt;p&gt;类似于线程池工作项对异步操作的封装，任务是对异步操作的另一种形式的封装，这种封装抽象层次更高，让我们能够对异步操作进行更多的控制。&lt;/p&gt;
&lt;p&gt;任务启动后，通过任务调度器&lt;code&gt;TaskScheduler&lt;/code&gt;来调度。.NET中提供两种任务调度器，一种是线程池任务调度器，也是默认调度器，它会将任务派发给线程池工作者线程；另一种是上下文同步任务调度器，它会将任务派发给当前上下文线程，例如GUI线程。此外，我们也能自定义任务调度器，例如可以将异步IO任务派发给线程池IO线程。&lt;/p&gt;
&lt;h2 id=&quot;task的使用方法&quot;&gt;Task的使用方法&lt;/h2&gt;
&lt;h3 id=&quot;隐式使用&quot;&gt;隐式使用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Parallel&lt;/code&gt;静态类除了提供并行循环的各种重载，还提供了一个方法&lt;code&gt;Parallel.Invoke&lt;/code&gt;。这个方法可以创建并执行一个或多个异步任务，使用方法如下：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// 任务模拟
/// &amp;lt;/summary&amp;gt;
private static void DoWork(int workId = 0)
{
    Console.WriteLine($&quot;{DateTime.Now}=&amp;gt; Thread[{Thread.CurrentThread.ManagedThreadId}] started work[{workId}].&quot;);
    Thread.Sleep(3000);
    Console.WriteLine($&quot;{DateTime.Now}=&amp;gt; Thread[{Thread.CurrentThread.ManagedThreadId}] done work[{workId}].&quot;);
}

/// &amp;lt;summary&amp;gt;
/// 任务的隐式使用
/// &amp;lt;/summary&amp;gt;
public static void ImplicitUsingOfTask()
{
    Parallel.Invoke(()=&amp;gt;DoWork(1),()=&amp;gt;DoWork(2),() =&amp;gt; DoWork(3));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上例的运行结果如下：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;2019/3/27 20:40:18=&amp;gt; Thread[9] started work[1].&lt;br/&gt;2019/3/27 20:40:18=&amp;gt; Thread[12] started work[3].&lt;br/&gt;2019/3/27 20:40:18=&amp;gt; Thread[10] started work[2].&lt;br/&gt;2019/3/27 20:40:21=&amp;gt; Thread[9] done work[1].&lt;br/&gt;2019/3/27 20:40:21=&amp;gt; Thread[12] done work[3].&lt;br/&gt;2019/3/27 20:40:21=&amp;gt; Thread[10] done work[2].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于简单的多任务并行，使用上述的方式很方便，但是这种方式与线程池一样，我们不能控制任务的执行或者获取任务返回值。&lt;/p&gt;
&lt;h3 id=&quot;显式使用&quot;&gt;显式使用&lt;/h3&gt;
&lt;p&gt;相对于使用&lt;code&gt;Parallel.Invoke&lt;/code&gt;执行并行操作，更常用的是使用&lt;code&gt;Task&lt;/code&gt;和&lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;提供的方法进行异步和并行处理。下面是任务最基本的使用：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;Task.Run(() =&amp;gt;
{
    //TODO
});
Task.Factory.StartNew(() =&amp;gt;
{
    //TODO
});&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;任务的常用操作&quot;&gt;任务的常用操作&lt;/h2&gt;
&lt;h3 id=&quot;获取任务的返回值&quot;&gt;获取任务的返回值&lt;/h3&gt;
&lt;p&gt;具有返回值的任务使用&lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;,&lt;code&gt;T&lt;/code&gt;可根据我们的需求指定，下面是获取任务返回值的方法。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;Task&amp;lt;int&amp;gt; task = Task&amp;lt;int&amp;gt;.Factory.StartNew(() =&amp;gt;
{
    Thread.Sleep(3000);//模拟操作用时
    return DateTime.Now.Day;
});
int day = task.Result;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要说明的是，获取任务的结果会阻塞当前线程。&lt;/p&gt;
&lt;h3 id=&quot;等待任务完成&quot;&gt;等待任务完成&lt;/h3&gt;
&lt;p&gt;有时候，我们需要等待一些任务全部完成后才能执行后续操作，有时候只要多个任务中的一个完成了，就可以执行后续操作。&lt;code&gt;Task&lt;/code&gt;提供了&lt;code&gt;Wait&lt;/code&gt;、&lt;code&gt;WaitAll&lt;/code&gt;和&lt;code&gt;WaitAny&lt;/code&gt;等方法满足我们的需求。下面的例子展示了各种等待方法的使用。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// 任务等待测试
/// &amp;lt;/summary&amp;gt;
public static void TaskWait()
{
    Stopwatch watch = new Stopwatch();

    #region 场景1：等待一个任务完成
    Task task = Task.Run(() =&amp;gt; DoWorkOfTask(1000));
    Console.WriteLine(&quot;start wait. work duration: 1000&quot;);
    watch.Start();
    task.Wait();//等待1秒左右
    watch.Stop();
    Console.WriteLine($&quot;end wait. time: {watch.ElapsedMilliseconds}&quot;);
    #endregion

    #region 场景2：等待多个任务完成
    Task[] tasks = new Task[3]
    {
        Task.Run(() =&amp;gt; DoWorkOfTask(1000)),
        Task.Run(() =&amp;gt; DoWorkOfTask(2000)),
        Task.Run(() =&amp;gt; DoWorkOfTask(3000)),
    };

    Console.WriteLine(&quot;start wait all. work duration: min 1000 max 3000.&quot;);
    watch.Restart();
    Task.WaitAll(tasks);//等待3秒左右
    watch.Stop();
    Console.WriteLine($&quot;end wait. time: {watch.ElapsedMilliseconds}&quot;);
    #endregion

    #region 场景3：等待某个任务完成
    tasks = new Task[3]
    {
        Task.Run(() =&amp;gt; DoWorkOfTask(1000)),
        Task.Run(() =&amp;gt; DoWorkOfTask(2000)),
        Task.Run(() =&amp;gt; DoWorkOfTask(3000)),
    };
    Console.WriteLine(&quot;start wait any. work duration: min 1000 max 3000.&quot;);
    watch.Restart();
    Task.WaitAny(tasks);//等待1秒左右
    watch.Stop();
    Console.WriteLine($&quot;end wait. time: {watch.ElapsedMilliseconds}&quot;);
    #endregion
}

/// &amp;lt;summary&amp;gt;
/// 做任务
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;workDuration&quot;&amp;gt;任务时长&amp;lt;/param&amp;gt;
private static void DoWorkOfTask(int workDuration)
{
    Console.WriteLine($&quot;{DateTime.Now}=&amp;gt; Thread[{Thread.CurrentThread.ManagedThreadId}] started task[{Task.CurrentId}].&quot;);
    Thread.Sleep(workDuration);
    Console.WriteLine($&quot;{DateTime.Now}=&amp;gt; Thread[{Thread.CurrentThread.ManagedThreadId}] completed task[{Task.CurrentId}].&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用&lt;code&gt;Wait&lt;/code&gt;、&lt;code&gt;WaitAll&lt;/code&gt;和&lt;code&gt;WaitAny&lt;/code&gt;方法时，我们可以设置超时时间或者传入取消Token，以控制等待时间。但这些方法返回布尔值，只能表明是否等待成功；假如我们需要知道所等待的任务返回值，则可以使用&lt;code&gt;WhenAll&lt;/code&gt;或&lt;code&gt;WhenAny&lt;/code&gt;方法，这两个方法不能控制等待时间，但会返回一个完成的任务。如下例：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;Task&amp;lt;int&amp;gt;[] tasks = new Task&amp;lt;int&amp;gt;[3]
{
    Task&amp;lt;int&amp;gt;.Factory.StartNew(() =&amp;gt;
    {
        Console.WriteLine($&quot;task #{Task.CurrentId} run&quot;);
        Thread.Sleep(100);
        Console.WriteLine($&quot;task #{Task.CurrentId} done&quot;);
        return 100;
    }),
    Task&amp;lt;int&amp;gt;.Factory.StartNew(() =&amp;gt;
    {
        Console.WriteLine($&quot;task #{Task.CurrentId} run&quot;);
        Thread.Sleep(500);
        Console.WriteLine($&quot;task #{Task.CurrentId} done&quot;);
        return 1000;
    }),
    Task&amp;lt;int&amp;gt;.Factory.StartNew(() =&amp;gt;
    {
        Console.WriteLine($&quot;task #{Task.CurrentId} run&quot;);
        Thread.Sleep(1000);
        Console.WriteLine($&quot;task #{Task.CurrentId} done&quot;);
        return 10000;
    }),
};

//int[] results = Task.WhenAll(tasks).Result;
//Console.WriteLine($&quot;[{string.Join(&quot;,&quot;,results)}]&quot;);

Task&amp;lt;int&amp;gt; task = Task.WhenAny(tasks).Result;
Console.WriteLine($&quot;task #{task.Id}. result {task.Result}&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Task.WhenAll&lt;/code&gt; 和&lt;code&gt;Task.WhenAny&lt;/code&gt;在等待结束时，都会创建一个完成状态的任务，&lt;code&gt;WhenAll&lt;/code&gt;将等待的所有已完成任务的结果放入创建任务的结果中，&lt;code&gt;WhenAny&lt;/code&gt;则将等待的已完成任务放到创建任务的结果中。&lt;/p&gt;
&lt;h3 id=&quot;任务延续&quot;&gt;任务延续&lt;/h3&gt;
&lt;p&gt;有时候，我们需要在一个任务完成时开始另一个任务。对于这种需求，我们可以使用&lt;code&gt;Task&lt;/code&gt;的&lt;code&gt;ContinueWith&lt;/code&gt;等方法来处理。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;Task task = Task.Run(() =&amp;gt; DoWorkOfTask(3000));
task.ContinueWith(t =&amp;gt; DoWorkOfTask(1000));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;2019/3/27 21:25:09=&amp;gt; Thread[10] started task[1].&lt;/p&gt;&lt;p&gt;2019/3/27 21:25:12=&amp;gt; Thread[10] completed task[1].&lt;/p&gt;&lt;p&gt;2019/3/27 21:25:12=&amp;gt; Thread[11] started task[2].&lt;/p&gt;&lt;p&gt;2019/3/27 21:25:13=&amp;gt; Thread[11] completed task[2].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们还可以通过&lt;code&gt;TaskContinuationOptions&lt;/code&gt;指定延续任务的执行条件，如任务取消时或者任务出现异常时才执行，等。&lt;/p&gt;
&lt;h3 id=&quot;子任务的使用&quot;&gt;子任务的使用&lt;/h3&gt;
&lt;p&gt;有时候，我们要在一个任务里面创建一些其他任务，并且还要在任务里面等待创建的任务完成，此时我们可以使用子任务。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;Task parent = Task.Factory.StartNew(() =&amp;gt;
{
    Console.WriteLine($&quot;parent task #{Task.CurrentId} run.&quot;);
    for (int i = 0; i &amp;lt; 10; i++)
    {
        Task.Factory.StartNew(() =&amp;gt;
        {
            Console.WriteLine($&quot;child task #{Task.CurrentId} run.&quot;);
            Thread.Sleep(1000);
            Console.WriteLine($&quot;child task #{Task.CurrentId} done.&quot;);
        }, TaskCreationOptions.AttachedToParent);
    }
});
parent.Wait();
Console.WriteLine($&quot;parent task #{parent.Id} done.&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在一个任务中创建的新任务，默认情况下与父级任务是分离的，各自的运行不受影响，除非在创建任务时显式附加到父级任务中。例如，上例中如果不指定&lt;code&gt;TaskCreationOptions.AttachedToParent&lt;/code&gt;,&lt;code&gt;parent.Wait()&lt;/code&gt;就不会持续到所有子任务都执行完成。&lt;/p&gt;
&lt;h3 id=&quot;任务的取消&quot;&gt;任务的取消&lt;/h3&gt;
&lt;p&gt;我们在启动任务时，传入取消令牌&lt;code&gt;CancellationToken&lt;/code&gt;，当收到取消请求时，抛出取消异常并在等待任务完成时捕获异常&lt;code&gt;TaskCanceledException&lt;/code&gt;。我们通过这种方式控制任务的取消。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// 任务取消
/// &amp;lt;/summary&amp;gt;
public static void TaskCancle()
{
    Console.WriteLine(&quot;Press any key to begin. Press 'c' to cancel. &quot;);
    Console.ReadKey(true);
    Console.WriteLine();

    CancellationTokenSource tokenSource = new CancellationTokenSource();
    ConcurrentBag&amp;lt;Task&amp;gt; tasks = new ConcurrentBag&amp;lt;Task&amp;gt;();
    //单任务取消
    Task task1 = Task.Factory.StartNew(() =&amp;gt; DoWorkOfTask(5000, tokenSource.Token), tokenSource.Token);
    tasks.Add(task1);

    //嵌套任务取消
    Task task2 = Task.Factory.StartNew(() =&amp;gt;
    {
        for (int i = 0; i &amp;lt; 10; i++)
        {
            int duration = 1000 * i;
            tasks.Add(Task.Factory.StartNew(()=&amp;gt;DoWorkOfTask(duration, tokenSource.Token), tokenSource.Token));
        }
        DoWorkOfTask(5000,tokenSource.Token);
    }, tokenSource.Token);
    tasks.Add(task2);

    char ch = Console.ReadKey().KeyChar;
    if (ch == 'c' || ch == 'C')
    {
        tokenSource.Cancel();
        Console.WriteLine($&quot;{DateTime.Now}=&amp;gt; Task cancellation requested.&quot;);
    }

    try
    {
        Task.WaitAll(tasks.ToArray());
    }
    catch (AggregateException ae)
    {
        foreach (Exception ex in ae.InnerExceptions)
        {//任务取消通过抛出TaskCanceledException实现
            TaskCanceledException tce = ex as TaskCanceledException;
            string cancelledTask = tce == null ? string.Empty : $&quot;Task #{tce.Task.Id}&quot;;
            Console.WriteLine($&quot;Exception: {ex.GetType().Name}. {cancelledTask}&quot;);
        }
    }
    finally
    {
        tokenSource.Dispose();
    }

    Console.WriteLine();
    //显示任务状态
    foreach (Task task in tasks)
    {
        Console.WriteLine($&quot;Task: #{task.Id} now is {task.Status}&quot;);
    }
}

/// &amp;lt;summary&amp;gt;
/// 带取消令牌的作业
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;workDuration&quot;&amp;gt;作业时长&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;cancleToken&quot;&amp;gt;取消令牌&amp;lt;/param&amp;gt;
private static void DoWorkOfTask(int workDuration, CancellationToken cancleToken)
{
    if (cancleToken.IsCancellationRequested)
    {//开始之前取消
        Console.WriteLine($&quot;{DateTime.Now}=&amp;gt; Task #{Task.CurrentId} was cancelled before it got started.&quot;);
        cancleToken.ThrowIfCancellationRequested();
    }

    Console.WriteLine($&quot;{DateTime.Now}=&amp;gt; Thread[{Thread.CurrentThread.ManagedThreadId}] started task #{Task.CurrentId}.&quot;);
    Thread.Sleep(workDuration);

    if (cancleToken.IsCancellationRequested)
    {//开始之后取消
        Console.WriteLine($&quot;{DateTime.Now}=&amp;gt; Task #{Task.CurrentId} was cancelled.&quot;);
        cancleToken.ThrowIfCancellationRequested();
    }
    Console.WriteLine($&quot;{DateTime.Now}=&amp;gt; Thread[{Thread.CurrentThread.ManagedThreadId}] completed task #{Task.CurrentId}.&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;任务的异常处理&quot;&gt;任务的异常处理&lt;/h2&gt;
&lt;p&gt;上面提到通过取消令牌抛出&lt;code&gt;TaskCanceledException&lt;/code&gt;的方式控制任务的取消，实际上，Task会把自身执行过程中的所有异常都包装到一个&lt;code&gt;AggregateException&lt;/code&gt;中,并传回调用线程。我们在主线程中通过捕获&lt;code&gt;AggregateException&lt;/code&gt;来进行异常处理。&lt;/p&gt;
&lt;h3 id=&quot;简单的处理方式&quot;&gt;简单的处理方式&lt;/h3&gt;
&lt;p&gt;我们可以在任务的调用线程捕获并遍历&lt;code&gt;AggregateException&lt;/code&gt;的内部异常，或者使用&lt;code&gt;AggregateException&lt;/code&gt;提供的Handle方法进行处理，如下：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;Task task = Task.Run(() =&amp;gt;
{
    throw new Exception($&quot;Task #{Task.CurrentId} thrown an exception&quot;);
});
try
{
    task.Wait();
}
catch (AggregateException ae)
{
    //处理方式1：遍历内部异常进行处理
    foreach (Exception ex in ae.InnerExceptions)
    {
        Console.WriteLine($&quot;foreach: {ex.Message}&quot;);
    }

    //处理方式2：使用AggregateException的Handle方法
    ae.Handle(ex=&amp;gt;
    {
        Console.WriteLine($&quot;handle: {ex.Message}&quot;);
        return true ;
    });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;使用延续任务处理任务的异常&quot;&gt;使用延续任务处理任务的异常&lt;/h3&gt;
&lt;p&gt;有时候，我们可以给任务附加一个任务异常时才会执行的延续任务，并在延续任务中进行异常处理。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;Task.Run(() =&amp;gt; { throw new Exception($&quot;Task #{Task.CurrentId} thrown an exception&quot;); })
    .ContinueWith(t =&amp;gt;
    {
        Console.WriteLine($&quot;{t.Exception?.InnerException?.Message}&quot;);
    }, TaskContinuationOptions.OnlyOnFaulted);&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;嵌套任务的异常处理&quot;&gt;嵌套任务的异常处理&lt;/h3&gt;
&lt;p&gt;下面是一个3层嵌套的任务。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;Task parent = Task.Factory.StartNew(() =&amp;gt;
{//父级任务
    for (int i = 0; i &amp;lt; 10; i++)
    {
        Task.Factory.StartNew(() =&amp;gt;
        {//1代子任务
            for (int j = 0; j &amp;lt; 10; j++)
            {
                Task.Factory.StartNew(() =&amp;gt;
                {//2代子任务
                    throw new Exception($&quot;Task #{Task.CurrentId} thrown an exception. &quot;);
                }/*, TaskCreationOptions.AttachedToParent*/);
            }

            throw new Exception($&quot;Task #{Task.CurrentId} thrown an exception. &quot;);
        }/*, TaskCreationOptions.AttachedToParent*/);
    }

    throw new Exception($&quot;Task #{Task.CurrentId} thrown an exception. &quot;);
});
try
{
    parent.Wait();
}
catch (AggregateException ae)
{
    ae.Flatten().Handle(ex =&amp;gt;
    {
        Console.WriteLine(ex.Message);
        return true;
    });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行上面的代码只会得到一行输出：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Task #1 thrown an exception.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看起来有点奇怪，为什么只捕获到一个异常呢？其实也是在情理之中的：&lt;strong&gt;任务默认只会把自身异常传递到它自己的调用线程&lt;/strong&gt;，子任务是在父任务中调用的，其异常只会传递到父任务的执行线程，所以我们在父任务的调用线程，也就是我们的主线程中是捕获不到子任务的异常的。&lt;/p&gt;
&lt;p&gt;取消上面代码的两处&lt;code&gt;/*, TaskCreationOptions.AttachedToParent*/&lt;/code&gt;，就会捕获到所有异常。&lt;/p&gt;
&lt;h2 id=&quot;任务调度器&quot;&gt;任务调度器&lt;/h2&gt;
&lt;h3 id=&quot;net提供的任务调度器&quot;&gt;.NET提供的任务调度器&lt;/h3&gt;
&lt;p&gt;任务是由&lt;code&gt;TaskScheduler&lt;/code&gt;调度的，启动任务时，默认使用线程池任务调度器，任务将会被派发到线程池工作线程。线程池的调度前面已经总结过，这里不再展开。.NET提供的另一种任务调度器是同步上下文调度器，用&lt;code&gt;TaskScheduler.FromCurrentSynchronizationContext()&lt;/code&gt;获取，这个调度器会把任务派发给当前的上下文线程，常用在GUI应用程序中。&lt;/p&gt;
&lt;p&gt;例如，我们在一个窗体中新建一个ListBox,新建几个任务向其中添加项，代码如下：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;this.lbxMsg.Items.Add($&quot;{DateTime.Now:O}=&amp;gt;Current thread is thread #{Thread.CurrentThread.ManagedThreadId} .&quot;);
for (int i = 0; i &amp;lt; 10; i++)
{
    new Task(() =&amp;gt;
    {
        for (int j = 0; j &amp;lt; 3; j++)
        {
            this.lbxMsg.Items.Add($&quot;{DateTime.Now:O}=&amp;gt; Task #{Task.CurrentId} add an item with thread #{Thread.CurrentThread.ManagedThreadId}.&quot;);
        }
                        
    }).Start(TaskScheduler.FromCurrentSynchronizationContext());
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行上面的代码可以发现创建的任务都是由界面线程执行的。这里如果使用默认的任务调度器将产生&lt;strong&gt;&quot;线程间操作无效&quot;&lt;/strong&gt;的异常。&lt;/p&gt;
&lt;p&gt;实际使用时，可以给一个异步任务添加延续任务，来处理异步任务的结果或者异常等。如下：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;Task.Run(() =&amp;gt;
{
    Thread.Sleep(3000); // 模拟操作过程
    return 1000; // 模拟结果
}).ContinueWith(t =&amp;gt;
{
    this.lbxMsg.Items.Add(t.Result); // 在界面呈现结果或做其他处理
}, TaskScheduler.FromCurrentSynchronizationContext());&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;自定义任务调度器&quot;&gt;自定义任务调度器&lt;/h3&gt;
&lt;p&gt;除了使用.NET提供的调度器外，我们能够继承类&lt;code&gt;TaskScheduler&lt;/code&gt;来实现自己的任务调度器。这里不再展开，需要了解的可以参考&lt;a href=&quot;https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364&quot; title=&quot;.NET Framework并行编程示例&quot;&gt;Samples for Parallel Programming with the .NET Framework&lt;/a&gt;。&lt;/p&gt;
</description>
<pubDate>Fri, 29 Mar 2019 14:40:00 +0000</pubDate>
<dc:creator>LayShun</dc:creator>
<og:description>C 中的任务 在C 编程中，实现并行可以直接使用线程，但使用起来很繁琐；也可以使用线程池，线程池很大程度上简化了线程的使用，但是也有着一些局限，比如我们不知道作业什么时候完成，也取不到作业的返回值；解</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenbaoshun/p/10621819.html</dc:identifier>
</item>
<item>
<title>Spring Boot 解决方案 - 会话 - 霖哲煌</title>
<link>http://www.cnblogs.com/linzhehuang/p/10624634.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linzhehuang/p/10624634.html</guid>
<description>&lt;p&gt;使用 HTTP 的连接是无状态的，因此为了应对需要状态的服务例如用户登录，诞生了适合保存状态的设计-会话（session），本文就来探讨一下会话。&lt;/p&gt;

&lt;p&gt;Spring Mvc 中使用会话很简单，在控制器类的方法参数列表中，直接编写 &lt;code&gt;HttpSession&lt;/code&gt; 类型的参数，或者参数列表中编写 &lt;code&gt;HttpServletRequest&lt;/code&gt; 类，然后使用 &lt;code&gt;getSession()&lt;/code&gt; 方法获取会话。&lt;/p&gt;
&lt;p&gt;下面是使用会话的简单例子，第一次访问时会创建一个无数据的会话，因此获取到的 &lt;code&gt;access&lt;/code&gt; 属性为 null ，而当不是第一次访问时，由于属性不为 null 会得到 &quot;NOT THE FIRST TIME ACCESS&quot; 。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@RestController
public class DemoController {
    private static final String ACCESS = &quot;access&quot;;
    @RequestMapping(&quot;/&quot;)
    public String index(HttpSession session) { // or `index(HttpServletRequest req)`
        // then `HttpSession session = request.getSession();`
        if (session.getAttribute(ACCESS) == null) {
            session.setAttribute(ACCESS, true);
            return &quot;FIRST TIME ACCESS&quot;;
        }
        return &quot;NOT THE FIRST TIME ACCESS&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：由于用 Mock Mvc 测试获取不到第一次请求 Cookies，因此无法模拟得到正确结果，请使用浏览器或者请求工具测试。&lt;/p&gt;
&lt;h2 id=&quot;常用方法&quot;&gt;常用方法&lt;/h2&gt;
&lt;p&gt;上面例子展示了会话的简单使用，其中 &lt;code&gt;HttpSession&lt;/code&gt; 接口是 servlet 的标准，而 Spring Mvc 中的会话默认使用 Tomcat 的实现。下面来介绍几个常用方法，更多方法使用请参考这篇&lt;a href=&quot;https://www.cnblogs.com/haimishasha/p/5609261.html#a2.15&quot;&gt;文章&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Object getAttribute(String)&lt;/code&gt; 方法用来获取会话的属性，若不存在则返回 null&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void setAttribute(String, Object)&lt;/code&gt; 方法用来设置会话的属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void removeAttribute(String)&lt;/code&gt; 方法用来删除会话的属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void setMaxInactiveInterval(int)&lt;/code&gt; 方法用来设置会话失效时间，单位为秒，设置小于等于零的数则会话永不过期&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void invalidate()&lt;/code&gt; 手动使会话失效并清理会话数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;会话的生命周期分别为创建、失效和创建与失效之间，而会话监听器是为了满足会话生命周期中触发相应事件的需要，&lt;code&gt;HttpSessionListener&lt;/code&gt; 和 &lt;code&gt;HttpSessionBindingListener&lt;/code&gt; 两个监听器接口分别满足了会话的各个生命周期。使用监听器只需实现这些接口然后标注 &lt;code&gt;@WebListener&lt;/code&gt; 注解即可，下面会有实现的例子。&lt;/p&gt;
&lt;h2 id=&quot;针对会话的监听器&quot;&gt;针对会话的监听器&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HttpSessionListener&lt;/code&gt; 接口可以算是针对会话的监听器接口，因为它的两个方法分别在会话创建和失效时调用，下面为一个简单的例子，参数列表中 &lt;code&gt;HttpSessionEvent&lt;/code&gt; 类可以用 &lt;code&gt;getSession&lt;/code&gt; 获取会话。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@WebListener
public class SessionListener implements HttpSessionListener {
    public void sessionCreated(HttpSessionEvent event) {
        // ...
    }
    public void sessionDestroyed(HttpSessionEvent event) {
        // ...
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;针对会话属性的监听器&quot;&gt;针对会话属性的监听器&lt;/h2&gt;
&lt;p&gt;与 &lt;code&gt;HttpSessionListener&lt;/code&gt; 监听器接口接管会话生命周期的创建与失效不同，&lt;code&gt;HttpSessionBindingListener&lt;/code&gt; 监听器接口负责&lt;strong&gt;会话属性的创建与销毁&lt;/strong&gt;，下面为该监听器的简单例子，参数列表中 &lt;code&gt;HttpSessionBindingEvent&lt;/code&gt; 类除了可以用 &lt;code&gt;getSession&lt;/code&gt; 获取会话，最主要的是可用 &lt;code&gt;getName&lt;/code&gt; 和 &lt;code&gt;getValue&lt;/code&gt; 分别获取属性的名字和值。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@WebListener
public class SessionListener implements HttpSessionBindingListener {
    public void valueBound(HttpSessionBindingEvent event) {
        // ...
    }
    
    public void valueUnbound(HttpSessionBindingEvent event) {
        // ...
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;使监听器生效&quot;&gt;使监听器生效&lt;/h2&gt;
&lt;p&gt;上面的例子只是编写了监听器的实现，为了使得监听器在项目里生效，还必须在启动类或者配置类上标注 &lt;code&gt;@ServletComponentScan&lt;/code&gt; 来扫描这些&lt;strong&gt;属于 servlet 组件的监听器&lt;/strong&gt;，例如下面在配置类上启动 servlet 组件扫描。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Configuration
@ServletComponentScan  // enable scan servlet component
public class ApplicationConf {
    // ...
}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;若是有多台 Web 服务器提供不同的服务，且要求属于同一会话，上面的单机会话例子就无法满足要求，于是就有了分布式会话即可以共享会话数据。&lt;/p&gt;
&lt;p&gt;利用 Spring Session 就可以实现分布式会话，而 Spring Session 的实现可依赖关系数据库或内存数据库，下面例子为 Spring Boot 中导入基于 Redis 实现的 Spring Session 的依赖。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.session&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-session-data-redis&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;redis.clients&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jedis&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接着在 Spring Boot 的属性配置文件中，添加如下的属性即可，而对于会话的使用&lt;strong&gt;和单机会话操作是一样的&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;spring:
  session:
    store-type: redis
  redis:
    host: 127.0.0.1
    port: 6379&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;关于会话安全问题，由于了解知识尚浅，暂且不做探讨，后续会补充该部分。&lt;/p&gt;
</description>
<pubDate>Fri, 29 Mar 2019 14:32:00 +0000</pubDate>
<dc:creator>霖哲煌</dc:creator>
<og:description>连接无状态 使用 HTTP 的连接是无状态的，因此为了应对需要状态的服务例如用户登录，诞生了适合保存状态的设计 会话（session），本文就来探讨一下会话。 会话的使用 Spring Mvc 中使用</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/linzhehuang/p/10624634.html</dc:identifier>
</item>
<item>
<title>第二章spring boot简单入门 - 吊儿郎当小少年</title>
<link>http://www.cnblogs.com/cxyyh/p/10624065.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cxyyh/p/10624065.html</guid>
<description>&lt;p&gt;&lt;span&gt;   &lt;img src=&quot;https://img2018.cnblogs.com/blog/1114349/201903/1114349-20190329211114224-2108431995.png&quot; alt=&quot;&quot; width=&quot;323&quot; height=&quot;234&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1114349/201903/1114349-20190329211245121-644375531.png&quot; alt=&quot;&quot; width=&quot;340&quot; height=&quot;239&quot;/&gt;&lt;/p&gt;


&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;56&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    &amp;lt;!--引入父依赖--&amp;gt;
    &amp;lt;parent&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.0.1.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/parent&amp;gt;
    &amp;lt;dependencies&amp;gt;
        &amp;lt;!--SpringBoot web 组件 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
    &amp;lt;!--这个插件，可以将应用打包成一个可执行的jar包 可选--&amp;gt;
    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;spring-boot-starter-parent&lt;/strong&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;  在&lt;/span&gt;pom.xml中引入spring-boot-start-parent,spring官方的解释叫什么stater poms,它可以提供dependency management,也就是说依赖管理，引入以后在申明其它dependency的时候就不需要version了，后面可以看到。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;spring-boot-starter-web&lt;/strong&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     springweb&lt;/strong&gt; &lt;strong&gt;核心&lt;/strong&gt;&lt;strong&gt;组件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;spring-boot-maven-plugin&lt;/strong&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;strong&gt;&lt;span&gt;如果我们要直接&lt;/span&gt;Main启动spring，那么以下plugin必须要添加，否则是无法启动的。如果使用maven&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt;&lt;span&gt;的&lt;/span&gt;spring-boot:run的话是不需要此配置的。（我在测试的时候，如果不配置下面的plugin也是直接在Main中运行的。）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;将这个应用打成&lt;/span&gt;jar包，直接使用java -jar的命令进行执行； &lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloConotroller {

    @RequestMapping(&lt;/span&gt;&quot;/index&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String index(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;hell world&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@SpringBootApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HellStartMain {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;spring启动起来&lt;/span&gt;
        SpringApplication.run(HellStartMain.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1114349/201903/1114349-20190329214606931-1150361792.png&quot; alt=&quot;&quot; width=&quot;426&quot; height=&quot;145&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;!--这个插件，可以将应用打包成一个可执行的jar包 可选--&amp;gt;
    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;&lt;br/&gt;将这个应用打成jar包，直接使用java -jar的命令进行执行；
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;    1、 @RestController&lt;/h2&gt;
&lt;p&gt;              在上加上RestController 表示修饰该Controller所有的方法返回JSON格式,直接可以编写Restful接口&lt;/p&gt;
&lt;h2&gt;     2、&lt;strong&gt;@EnableAutoConfiguration&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;           注解:作用在于让 Spring Boot   根据应用所声明的依赖来对 Spring 框架进行自动配置 这个注解告诉Spring Boot根据添加的jar依赖猜测你想如何配置Spring。&lt;/p&gt;
&lt;p&gt;             由于spring-boot-starter-web添加了Tomcat和 Spring MVC，所以auto-configuration将假定你正在开发一个web应用并相应地对Spring进行设置。&lt;/p&gt;
&lt;p&gt;           @ComponentScan(basePackages = &quot;com.yehui&quot;)控制器扫包范围&lt;/p&gt;

&lt;h2&gt;        1、 SpringBoot启动&lt;span&gt;方式&lt;/span&gt;1&lt;/h2&gt;
&lt;p&gt;                spring boot默认端口是8080&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
@EnableAutoConfiguration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloController {
    @RequestMapping(&lt;/span&gt;&quot;/hello&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String index() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello World&quot;&lt;span&gt;;
    }    
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(HelloController.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;启动主程序，打开浏览器访问&lt;/span&gt;http://localhost:8080/index，可以看到页面输出Hello World&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;        2、&lt;strong&gt;S&lt;/strong&gt;&lt;strong&gt;pringBoot&lt;/strong&gt;&lt;strong&gt;启动&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;方式&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;p&gt;@ComponentScan(basePackages = &quot;com.itmayiedu.controller&quot;)---控制器&lt;span&gt;扫包&lt;/span&gt;范围&lt;/p&gt;
&lt;pre&gt;
@ComponentScan(basePackages = &quot;com.itmayiedu.controller&quot;&lt;span&gt;)
@EnableAutoConfiguration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; App {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(App.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;       3、SpringBoot启动方式3&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@SpringBootApplication

@SpringBootApplication 被 @Configuration、@EnableAutoConfiguration、@ComponentScan 注解所修饰，换言之 Springboot 提供了统一的注解来替代以上三个注解
扫包范围：在启动类上加上@SpringBootApplication注解,当前包下或者子包下所有的类都可以扫到。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 29 Mar 2019 13:34:00 +0000</pubDate>
<dc:creator>吊儿郎当小少年</dc:creator>
<og:description>1、创建mave工程（jar） 2、pom文件引入依赖 spring-boot-starter-parent作用 在pom.xml中引入spring-boot-start-parent,spring官</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cxyyh/p/10624065.html</dc:identifier>
</item>
<item>
<title>《k8s-1.13版本源码分析》-抢占调度 - CloudGeek</title>
<link>http://www.cnblogs.com/cloudgeek/p/10623878.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cloudgeek/p/10623878.html</guid>
<description>&lt;ul&gt;&lt;li&gt;Pod priority&lt;/li&gt;
&lt;li&gt;preempt 入口&lt;/li&gt;
&lt;li&gt;preempt 实现
&lt;ul&gt;&lt;li&gt;SchedulingQueue
&lt;ul&gt;&lt;li&gt;FIFO&lt;/li&gt;
&lt;li&gt;PriorityQueue&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PodPreemptor&lt;/li&gt;
&lt;li&gt;xx.Algorithm.Preempt
&lt;ul&gt;&lt;li&gt;接口定义&lt;/li&gt;
&lt;li&gt;整体流程&lt;/li&gt;
&lt;li&gt;podEligibleToPreemptOthers&lt;/li&gt;
&lt;li&gt;nodesWherePreemptionMightHelp&lt;/li&gt;
&lt;li&gt;selectNodesForPreemption&lt;/li&gt;
&lt;li&gt;pickOneNodeForPreemption&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;小结&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;Pod_priority&quot;&gt;1. Pod priority&lt;/h2&gt;
&lt;p&gt;Pod 有了 priority(优先级) 后才有优先级调度、抢占调度的说法，高优先级的 pod 可以在调度队列中排到前面，优先选择 node；另外当高优先级的 pod 找不到合适的 node 时，就会看 node 上低优先级的 pod 驱逐之后是否能够 run 起来，如果可以，那么 node 上的一个或多个低优先级的 pod 会被驱逐，然后高优先级的 pod 得以成功运行1个 node 上。&lt;/p&gt;
&lt;p&gt;今天我们分析 pod 抢占相关的代码。开始之前我们看一下和 priority 相关的2个示例配置文件：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PriorityClass 例子&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; scheduling.k8s.io/v1
&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; PriorityClass
&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; high&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;priority
&lt;span class=&quot;token key atrule&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000000&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;globalDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;This priority class should be used for XYZ service pods only.&quot;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用上述 PriorityClass&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v1
&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Pod
&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nginx
  &lt;span class=&quot;token key atrule&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; test
&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nginx
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nginx
    &lt;span class=&quot;token key atrule&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; IfNotPresent
  &lt;span class=&quot;token key atrule&quot;&gt;priorityClassName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; high&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;priority
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这两个文件的内容这里不解释，Pod priority 相关知识点不熟悉的小伙伴请先查阅&lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;，我们下面看调度器中和 preempt 相关的代码逻辑。&lt;/p&gt;
&lt;h2 id=&quot;preempt_入口&quot;&gt;2. preempt 入口&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;pkg/scheduler/scheduler.go:513 scheduleOne()&lt;/code&gt;方法中我们上一次关注的是&lt;code&gt;suggestedHost, err := sched.schedule(pod)&lt;/code&gt;这行代码，也就是关注通常情况下调度器如何给一个 pod 匹配一个最合适的 node. 今天我们来看如果这一行代码返回的 &lt;code&gt;err != nil&lt;/code&gt; 情况下，如何开始 preempt 过程。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/scheduler.go:529&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;suggestedHost&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; sched&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; fitError&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ok &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;core&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FitError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; ok &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      preemptionStartTime &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      sched&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preempt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fitError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      metrics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PreemptionAttempts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Inc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      klog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error selecting node for pod: %v&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      metrics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PodScheduleErrors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Inc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当&lt;code&gt;schedule()&lt;/code&gt;函数没有返回 host，也就是没有找到合适的 node 的时候，就会出发 preempt 过程。这时候代码逻辑进入&lt;code&gt;sched.preempt(pod, fitError)&lt;/code&gt;这一行。我们先看一下这个函数的整体逻辑，然后深入其中涉及的子过程：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/scheduler.go:311&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sched &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;Scheduler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;preempt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;preemptor &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scheduleErr &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;PodPriorityEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; sched&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DisablePreemption &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    preemptor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; sched&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PodPreemptor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetUpdatedPod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;preemptor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    
    node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; victims&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nominatedPodsToClear&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; sched&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Algorithm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Preempt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;preemptor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sched&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NodeLister&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scheduleErr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; nodeName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; node &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        nodeName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name
        
        sched&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SchedulingQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UpdateNominatedPodForNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;preemptor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

        
        err &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sched&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PodPreemptor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetNominatedNodeName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;preemptor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            
            sched&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SchedulingQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;DeleteNominatedPodIfExists&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;preemptor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; victim &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;range&lt;/span&gt; victims &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; sched&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PodPreemptor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;DeletePod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;victim&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            sched&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Recorder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Eventf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;victim&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;EventTypeNormal&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Preempted&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;by %v/%v on node %v&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; preemptor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Namespace&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; preemptor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;range&lt;/span&gt; nominatedPodsToClear &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        rErr &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; sched&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PodPreemptor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;RemoveNominatedNodeName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; rErr &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            klog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Cannot remove nominated node annotation of pod: %v&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rErr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; nodeName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;preempt_实现&quot;&gt;3. preempt 实现&lt;/h2&gt;
&lt;p&gt;上面 &lt;code&gt;preempt()&lt;/code&gt; 函数中涉及到了一些值得深入看看的对象，下面我们逐个看一下这些对象的实现。&lt;/p&gt;
&lt;h3 id=&quot;SchedulingQueue&quot;&gt;3.1. SchedulingQueue&lt;/h3&gt;
&lt;p&gt;SchedulingQueue 表示的是一个存储待调度 pod 的队列&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/internal/queue/scheduling_queue.go:60&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; SchedulingQueue &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;AddIfNotPresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;AddUnschedulableIfNotPresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;Pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;oldPod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; newPod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;MoveAllToActiveQueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;AssignedPodAdded&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;AssignedPodUpdated&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;NominatedPodsForNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nodeName &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod
   &lt;span class=&quot;token function&quot;&gt;WaitingPods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod
   &lt;span class=&quot;token function&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;UpdateNominatedPodForNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeName &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;DeleteNominatedPodIfExists&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;NumUnschedulablePods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在 Scheduler 中 SchedulingQueue 接口对应两种实现：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;FIFO 先进先出队列&lt;/li&gt;
&lt;li&gt;PriorityQueue 优先级队列&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;FIFO&quot;&gt;3.1.1. FIFO&lt;/h4&gt;
&lt;p&gt;FIFO 结构是对 cache.FIFO 的简单包装，然后实现了 SchedulingQueue 接口。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/internal/queue/scheduling_queue.go:97&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; FIFO &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FIFO
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;cache.FIFO定义在&lt;code&gt;vendor/k8s.io/client-go/tools/cache/fifo.go:93&lt;/code&gt;，这个先进先出队列的细节先不讨论。&lt;/p&gt;
&lt;h4 id=&quot;PriorityQueue&quot;&gt;3.1.2. PriorityQueue&lt;/h4&gt;
&lt;p&gt;PriorityQueue 同样实现了 SchedulingQueue 接口，PriorityQueue 的顶是最高优先级的 pending pod. 这里的PriorityQueue 有2个子 queue，activeQ 放的是等待调度的 pod，unschedulableQ 放的是已经尝试过调度，然后失败了，被标记为 unschedulable 的 pod.&lt;/p&gt;
&lt;p&gt;我们看一下 PriorityQueue 结构的定义：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/internal/queue/scheduling_queue.go:201&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; PriorityQueue &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   stop  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   clock util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Clock
   lock  sync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RWMutex
   cond  sync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Cond

   
   activeQ &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;Heap
   
   unschedulableQ &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;UnschedulablePodsMap
   
   nominatedPods &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;nominatedPodMap
   
   receivedMoveRequest &lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt;
   closed &lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PriorityQueue 的方法比较好理解，我们看几个吧：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、&lt;code&gt;func (p *PriorityQueue) Add(pod *v1.Pod) error&lt;/code&gt;&lt;/strong&gt; //在 active queue 中添加1个pod&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/internal/queue/scheduling_queue.go:276&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;PriorityQueue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
   err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activeQ&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      klog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Error adding pod %v/%v to the scheduling queue: %v&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Namespace&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;unschedulableQ&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         klog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Error: pod %v/%v is already in the unschedulable queue.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Namespace&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
         p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;unschedulableQ&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
       
      p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nominatedPods&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cond&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Broadcast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; err
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2、&lt;code&gt;func (p *PriorityQueue) AddIfNotPresent(pod *v1.Pod) error&lt;/code&gt;&lt;/strong&gt;//如果2个队列中都不存在该 pod，那么就添加到 active queue 中&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/internal/queue/scheduling_queue.go:295&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;PriorityQueue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AddIfNotPresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;unschedulableQ&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; exists&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activeQ&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; exists &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
   err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activeQ&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      klog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Error adding pod %v/%v to the scheduling queue: %v&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Namespace&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nominatedPods&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cond&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Broadcast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; err
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3、&lt;code&gt;func (p *PriorityQueue) flushUnschedulableQLeftover()&lt;/code&gt;&lt;/strong&gt;//刷新 unschedulableQ 中的 pod，如果一个 pod 的呆的时间超过了 durationStayUnschedulableQ，就移动到 activeQ 中&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/internal/queue/scheduling_queue.go:346&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;PriorityQueue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;flushUnschedulableQLeftover&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

   &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; podsToMove &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod
   currentTime &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pod &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;range&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;unschedulableQ&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pods &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      lastScheduleTime &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;podTimestamp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
       
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;lastScheduleTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsZero&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; currentTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lastScheduleTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; unschedulableQTimeInterval &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         podsToMove &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;podsToMove&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;podsToMove&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       
      p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;movePodsToActiveQueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;podsToMove&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4、&lt;code&gt;func (p *PriorityQueue) Pop() (*v1.Pod, error)&lt;/code&gt;&lt;/strong&gt;//从 activeQ 中 pop 一个 pod&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/internal/queue/scheduling_queue.go:367&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;PriorityQueue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activeQ&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;closed &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queueClosed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cond&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activeQ&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   pod &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
   p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;receivedMoveRequest &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再看个别 &lt;code&gt;PriorityQueue.nominatedPods&lt;/code&gt; 属性相关操作的方法，也就是 &lt;code&gt;preempt()&lt;/code&gt; 函数中多次调用到的方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、`func (p &lt;em&gt;PriorityQueue) UpdateNominatedPodForNode(pod&lt;/em&gt; v1.Pod, nodeName string)&lt;/strong&gt;`//pod 抢占的时候，确定一个 node 可以用于跑这个 pod 时，通过调用这个方法将 pod nominated 到 指定的 node 上。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/internal/queue/scheduling_queue.go:567&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;PriorityQueue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UpdateNominatedPodForNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeName &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
   p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nominatedPods&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
   p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;先看 nominatedPods 属性的类型，这个类型用于存储 pods 被 nominate 到 nodes 的信息：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/internal/queue/scheduling_queue.go:822&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; nominatedPodMap &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   
   nominatedPods &lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod
   
   nominatedPodToNode &lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ktypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UID&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在看一下&lt;code&gt;add()&lt;/code&gt;方法的实现：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/internal/queue/scheduling_queue.go:832&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;npm &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;nominatedPodMap&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeName &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   
   npm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

   nnn &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; nodeName
    
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nnn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       
      nnn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;NominatedNodeName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
       
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nnn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
   npm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nominatedPodToNode&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UID&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nnn
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; np &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;range&lt;/span&gt; npm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nominatedPods&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;nnn&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; np&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UID &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UID &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         klog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Infof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Pod %v/%v already exists in the nominated map!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Namespace&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   npm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nominatedPods&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;nnn&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;npm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nominatedPods&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;nnn&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;PodPreemptor&quot;&gt;3.2. PodPreemptor&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PodPreemptor&lt;/strong&gt; 用来驱逐 pods 和更新 pod annotations.&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/factory/factory.go:145&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; PodPreemptor &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;GetUpdatedPod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;DeletePod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;SetNominatedNodeName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nominatedNode &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;RemoveNominatedNodeName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个 interface 对应的实现类型是：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/factory/factory.go:1620&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; podPreemptor &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   Client clientset&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interface
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个类型绑定了4个方法：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/factory/factory.go:1624&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;podPreemptor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetUpdatedPod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CoreV1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Pods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Namespace&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; metav1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GetOptions&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;podPreemptor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DeletePod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CoreV1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Pods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Namespace&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;metav1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DeleteOptions&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;podPreemptor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SetNominatedNodeName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nominatedNodeName &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   podCopy &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;DeepCopy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   podCopy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NominatedNodeName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nominatedNodeName
   &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CoreV1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Pods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Namespace&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UpdateStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;podCopy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; err
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;podPreemptor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;RemoveNominatedNodeName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NominatedNodeName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetNominatedNodeName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;xx_Algorithm_Preempt&quot;&gt;3.3. xx.Algorithm.Preempt&lt;/h3&gt;
&lt;h4 id=&quot;接口定义&quot;&gt;3.3.1. 接口定义&lt;/h4&gt;
&lt;p&gt;我们回到挺久之前讲常规调度过程的时候提过的一个接口：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/algorithm/scheduler_interface.go:78&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; ScheduleAlgorithm &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;Schedule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; NodeLister&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;selectedMachine &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   
   
   
   &lt;span class=&quot;token function&quot;&gt;Preempt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; NodeLister&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;selectedNode &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; preemptedPods &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cleanupNominatedPods &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

   &lt;span class=&quot;token function&quot;&gt;Predicates&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;FitPredicate
   &lt;span class=&quot;token function&quot;&gt;Prioritizers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;PriorityConfig
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个接口上次我们讲到的时候关注了&lt;code&gt;Schedule()&lt;/code&gt;、&lt;code&gt;Predicates()&lt;/code&gt;和&lt;code&gt;Prioritizers()&lt;/code&gt;，这次来看&lt;code&gt;Preempt()&lt;/code&gt;是怎么实现的。&lt;/p&gt;
&lt;h4 id=&quot;整体流程&quot;&gt;3.3.2. 整体流程&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Preempt()&lt;/code&gt;同样由&lt;code&gt;genericScheduler&lt;/code&gt;类型(&lt;code&gt;pkg/scheduler/core/generic_scheduler.go:98&lt;/code&gt;)实现，方法前的一大串英文注释先来理解一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Preempt 寻找一个在发生抢占之后能够成功调度“pod”的node.&lt;/li&gt;
&lt;li&gt;Preempt 选择一个 node 然后抢占上面的 pods 资源，返回：
&lt;ul&gt;&lt;li&gt;这个 node 信息&lt;/li&gt;
&lt;li&gt;被抢占的 pods 信息&lt;/li&gt;
&lt;li&gt;nominated node name 需要被清理的 node 列表&lt;/li&gt;
&lt;li&gt;可能有的 error&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Preempt 过程不涉及快照更新（快照的逻辑以后再讲）&lt;/li&gt;
&lt;li&gt;避免出现这种情况：preempt 发现一个不需要驱逐任何 pods 就能够跑“pod”的 node.&lt;/li&gt;
&lt;li&gt;当有很多 pending pods 在调度队列中的时候，a nominated pod 会排到队列中相同优先级的 pod 后面.&lt;/li&gt;
&lt;li&gt;The nominated pod 会阻止其他 pods 使用“指定”的资源，哪怕花费了很多时间来等待其他 pending 的 pod.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们先过整体流程，然后逐个分析子流程调用：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/core/generic_scheduler.go:251&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;genericScheduler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Preempt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeLister algorithm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NodeLister&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scheduleErr &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   
   
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;podEligibleToPreemptOthers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cachedNodeInfoMap&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      klog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Infof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Pod %v/%v is not eligible for more preemption.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Namespace&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
   allNodes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; nodeLister&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;allNodes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ErrNoNodesAvailable
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
   potentialNodes &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nodesWherePreemptionMightHelp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;allNodes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fitError&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FailedPredicates&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;potentialNodes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      klog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Infof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Preemption will not help schedule pod %v/%v on any node.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Namespace&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
   pdbs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pdbLister&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;labels&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Everything&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
   nodeToVictims&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;selectNodesForPreemption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cachedNodeInfoMap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; potentialNodes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;predicates&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;predicateMetaProducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;schedulingQueue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pdbs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

   
   nodeToVictims&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;processPreemptionWithExtenders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeToVictims&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    
   candidateNode &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pickOneNodeForPreemption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nodeToVictims&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; candidateNode &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    
    
    
   nominatedPods &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getLowerPriorityNominatedPods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; candidateNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; nodeInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ok &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cachedNodeInfoMap&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;candidateNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; ok &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; nodeInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeToVictims&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;candidateNode&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pods&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nominatedPods&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;preemption failed: the target node %s has been deleted from scheduler cache&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      candidateNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面涉及到一些子过程调用，我们逐个来看～&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;podEligibleToPreemptOthers()&lt;/code&gt; // 如何判断是否适合抢占？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodesWherePreemptionMightHelp()&lt;/code&gt; // 怎么寻找能够用于 preempt 的 nodes？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selectNodesForPreemption()&lt;/code&gt; // 这个过程计算的是什么？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pickOneNodeForPreemption()&lt;/code&gt; // 怎么从选择最合适被抢占的 node？&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;podEligibleToPreemptOthers&quot;&gt;3.3.3. podEligibleToPreemptOthers&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;podEligibleToPreemptOthers&lt;/code&gt; 做的事情是判断一个 pod 是否应该去抢占其他 pods. 如果这个 pod 已经抢占过其他 pods，那些 pods 还在 graceful termination period 中，那就不应该再次发生抢占。&lt;/li&gt;
&lt;li&gt;如果一个 node 已经被这个 pod nominated，并且这个 node 上有处于 terminating 状态的 pods，那么就不考虑驱逐更多的 pods.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这个函数逻辑很简单，我们直接看源码：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/core/generic_scheduler.go:1110&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;podEligibleToPreemptOthers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeNameToInfo &lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;schedulercache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NodeInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   nomNodeName &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; pod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NominatedNodeName
    
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nomNodeName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; nodeInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; found &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; nodeNameToInfo&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;nomNodeName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; found &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;range&lt;/span&gt; nodeInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Pods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
             
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DeletionTimestamp &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetPodPriority&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetPodPriority&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
               
               &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;nodesWherePreemptionMightHelp&quot;&gt;3.3.4. nodesWherePreemptionMightHelp&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;nodesWherePreemptionMightHelp&lt;/code&gt; 要做的事情是寻找 predicates 阶段失败但是通过抢占也许能够调度成功的 nodes.&lt;/p&gt;
&lt;p&gt;这个函数也不怎么长，看下代码：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/core/generic_scheduler.go:1060&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nodesWherePreemptionMightHelp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nodes &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; failedPredicatesMap FailedPredicateMap&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Node &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
   potentialNodes &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Node&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; node &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;range&lt;/span&gt; nodes &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       
      unresolvableReasonExist &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
       
      failedPredicates&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; failedPredicatesMap&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      
      &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; failedPredicate &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;range&lt;/span&gt; failedPredicates &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; failedPredicate &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrNodeSelectorNotMatch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrPodAffinityRulesNotMatch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrPodNotMatchHostName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrTaintsTolerationsNotMatch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrNodeLabelPresenceViolated&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrNodeNotReady&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrNodeNetworkUnavailable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrNodeUnderDiskPressure&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrNodeUnderPIDPressure&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrNodeUnderMemoryPressure&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrNodeOutOfDisk&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrNodeUnschedulable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrNodeUnknownCondition&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrVolumeZoneConflict&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrVolumeNodeConflict&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            predicates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ErrVolumeBindConflict&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            unresolvableReasonExist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
             
            &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;
         &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
       
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;unresolvableReasonExist &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         klog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Infof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Node %v is a potential node for preemption.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
         potentialNodes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;potentialNodes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; potentialNodes
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;selectNodesForPreemption&quot;&gt;3.3.5. selectNodesForPreemption&lt;/h4&gt;
&lt;p&gt;这个函数会并发计算所有的 nodes 是否通过驱逐实现 pod 抢占。&lt;/p&gt;
&lt;p&gt;看这个函数内容之前我们先看一下返回值的类型：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map[*v1.Node]*schedulerapi.Victims&lt;/code&gt; 的 key 很好理解，value 是啥呢：&lt;/p&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Victims &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   Pods             &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod
   NumPDBViolations &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的 &lt;strong&gt;Pods&lt;/strong&gt; 是被选中准备要驱逐的；&lt;strong&gt;NumPDBViolations&lt;/strong&gt; 表示的是要破坏多少个 PDB 限制。这里肯定也就是要尽量符合 PDB 要求，能不和 PDB 冲突就不冲突。&lt;/p&gt;
&lt;p&gt;然后看一下这个函数的整体过程：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/core/generic_scheduler.go:895&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;selectNodesForPreemption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   nodeNameToInfo &lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;schedulercache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NodeInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   potentialNodes &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
   predicates &lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;algorithm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FitPredicate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   metadataProducer algorithm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PredicateMetadataProducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   queue internalqueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SchedulingQueue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
   pdbs &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;policy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PodDisruptionBudget&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;schedulerapi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Victims&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
   nodeToVictims &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;schedulerapi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Victims&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; resultLock sync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Mutex

   
   meta &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;metadataProducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeNameToInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
   checkNode &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      nodeName &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; potentialNodes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name
      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; metaCopy algorithm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PredicateMetadata
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; meta &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         metaCopy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; meta&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShallowCopy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
       
      pods&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; numPDBViolations&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fits &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;selectVictimsOnNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; metaCopy&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeNameToInfo&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;nodeName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; predicates&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; queue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pdbs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; fits &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         resultLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
         victims &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; schedulerapi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Victims&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            Pods&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;             pods&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            NumPDBViolations&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; numPDBViolations&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          
         nodeToVictims&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;potentialNodes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;victims
         resultLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   workqueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ParallelizeUntil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;potentialNodes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; checkNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; nodeToVictims&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面这个函数的核心逻辑在 &lt;strong&gt;selectVictimsOnNode&lt;/strong&gt; 中，这个函数尝试在给定的 node 中寻找最少数量的需要被驱逐的 pods，同时需要保证驱逐了这些 pods 之后，这个 noode 能够满足“pod”运行需求。&lt;/p&gt;
&lt;p&gt;这些被驱逐的 pods 计算同时需要满足一个约束，就是能够删除低优先级的 pod 绝不先删高优先级的 pod.&lt;/p&gt;
&lt;p&gt;这个算法首选计算当这个 node 上所有的低优先级 pods 被驱逐之后能否调度“pod”. 如果可以，那就按照优先级排序，根据 PDB 是否破坏分成两组，一组是影响 PDB 限制的，另外一组是不影响 PDB. 两组各自按照优先级排序。然后开始逐渐释放影响 PDB 的 group 中的 pod，然后逐渐释放不影响 PDB 的 group 中的 pod，在这个过程中要保持“pod”能够 fit 这个 node. 也就是说一旦放过某一个 pod 导致“pod”不 fit 这个 node 了，那就说明这个 pod 不能放过，也就是意味着已经找到了最少 pods 集。&lt;/p&gt;
&lt;p&gt;看一下具体的实现吧：&lt;/p&gt;
&lt;p&gt;FILENAME pkg/scheduler/core/generic_scheduler.go:983&lt;/p&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;selectVictimsOnNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
   pod &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   meta algorithm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PredicateMetadata&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   nodeInfo &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;schedulercache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NodeInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   fitPredicates &lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;algorithm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FitPredicate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   queue internalqueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SchedulingQueue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   pdbs &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;policy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PodDisruptionBudget&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; nodeInfo &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
   potentialVictims &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SortableList&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;CompFunc&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;HigherPriorityPod&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   nodeInfoCopy &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; nodeInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    
   removePod &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rp &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      nodeInfoCopy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;RemovePod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; meta &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         meta&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;RemovePod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
   addPod &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ap &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      nodeInfoCopy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddPod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ap&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; meta &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         meta&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddPod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeInfoCopy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   
   podPriority &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetPodPriority&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;range&lt;/span&gt; nodeInfoCopy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Pods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetPodPriority&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; podPriority &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          
         potentialVictims&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Items &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;potentialVictims&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Items&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;token function&quot;&gt;removePod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
   potentialVictims&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   
    

    
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; fits&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;podFitsOnNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; meta&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeInfoCopy&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fitPredicates&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; queue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;fits &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         klog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Warningf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Encountered error while selecting victims on node %v: %v&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; victims &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod
   numViolatingVictim &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
   
   violatingVictims&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nonViolatingVictims &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filterPodsWithPDBViolation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;potentialVictims&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Items&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pdbs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
   reprievePod &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;addPod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      fits&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;podFitsOnNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; meta&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeInfoCopy&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fitPredicates&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; queue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;fits &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token function&quot;&gt;removePod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
         victims &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;victims&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
         klog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Infof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Pod %v is a potential preemption victim on node %v.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; fits
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;range&lt;/span&gt; violatingVictims &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reprievePod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         numViolatingVictim&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;range&lt;/span&gt; nonViolatingVictims &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;reprievePod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; victims&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; numViolatingVictim&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;pickOneNodeForPreemption&quot;&gt;3.3.6. pickOneNodeForPreemption&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;pickOneNodeForPreemption&lt;/code&gt; 要从给定的 nodes 中选择一个 node，这个函数假设给定的 map 中 value 部分是以 priority 降序排列的。这里选择 node 的标准是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;最少的 PDB violations&lt;/li&gt;
&lt;li&gt;最少的高优先级 victim&lt;/li&gt;
&lt;li&gt;优先级总数字最小&lt;/li&gt;
&lt;li&gt;victim 总数最小&lt;/li&gt;
&lt;li&gt;直接返回第一个&lt;/li&gt;
&lt;/ol&gt;&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;pkg/scheduler/core/generic_scheduler.go:788&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pickOneNodeForPreemption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nodesToVictims &lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;schedulerapi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Victims&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Node &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nodesToVictims&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
   minNumPDBViolatingPods &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MaxInt32
   &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; minNodes1 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Node
   lenNodes1 &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; victims &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;range&lt;/span&gt; nodesToVictims &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;victims&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pods&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         
         &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; node
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      numPDBViolatingPods &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; victims&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NumPDBViolations
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; numPDBViolatingPods &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; minNumPDBViolatingPods &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         minNumPDBViolatingPods &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numPDBViolatingPods
         minNodes1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
         lenNodes1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; numPDBViolatingPods &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; minNumPDBViolatingPods &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         minNodes1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minNodes1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
         lenNodes1&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; lenNodes1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; minNodes1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

   
   minHighestPriority &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;int32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MaxInt32&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; minNodes2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lenNodes1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   lenNodes2 &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; lenNodes1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      node &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; minNodes1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      victims &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; nodesToVictims&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      
      highestPodPriority &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetPodPriority&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;victims&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pods&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; highestPodPriority &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; minHighestPriority &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         minHighestPriority &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; highestPodPriority
         lenNodes2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; highestPodPriority &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; minHighestPriority &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         minNodes2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lenNodes2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; node
         lenNodes2&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; lenNodes2 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; minNodes2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

   
   minSumPriorities &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MaxInt64&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   lenNodes1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; lenNodes2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sumPriorities &lt;span class=&quot;token builtin&quot;&gt;int64&lt;/span&gt;
      node &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; minNodes2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pod &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;range&lt;/span&gt; nodesToVictims&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pods &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         
         sumPriorities &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetPodPriority&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MaxInt32&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; sumPriorities &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; minSumPriorities &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         minSumPriorities &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sumPriorities
         lenNodes1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; sumPriorities &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; minSumPriorities &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         minNodes1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lenNodes1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; node
         lenNodes1&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; lenNodes1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; minNodes1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

   
   minNumPods &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MaxInt32
   lenNodes2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; lenNodes1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      node &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; minNodes1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      numPods &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nodesToVictims&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pods&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; numPods &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; minNumPods &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         minNumPods &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numPods
         lenNodes2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; numPods &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; minNumPods &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         minNodes2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lenNodes2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; node
         lenNodes2&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; lenNodes2 &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; minNodes2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   klog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Error in logic of node scoring for preemption. We should never reach here!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;小结&quot;&gt;4. 小结&lt;/h2&gt;
&lt;p&gt;咋个说呢，此处应该有总结的，抢占过程的逻辑比我想象中的复杂，设计很巧妙，行云流水，大快人心！preemption 可以简单说成再预选-&amp;gt;再优选吧；还是不多说了，一天写这么多有点坐不住了，下回再继续聊调度器～&lt;/p&gt;
&lt;span class=&quot;copyright&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/998740/201903/998740-20190329210355795-138486944.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;</description>
<pubDate>Fri, 29 Mar 2019 13:05:00 +0000</pubDate>
<dc:creator>CloudGeek</dc:creator>
<og:description>源码分析系列文章已经开源到github，地址如下： github：https://github.com/farmer-hutao/k8s-source-code-analysis gitbook：ht</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cloudgeek/p/10623878.html</dc:identifier>
</item>
<item>
<title>闭包和let块级作用域 - liuyongjia</title>
<link>http://www.cnblogs.com/liuyongjia/p/10623665.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuyongjia/p/10623665.html</guid>
<description>&lt;p&gt;还是先从一个题目开始：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;写一个隔1s输出数组的一项的函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果可以用ES6语法，则可以这么写：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;function print (arr) {
    for (let i = 0; i &amp;lt; arr.length; i++) {
        setTimeout(() =&amp;gt; {
            console.log(arr[i])
        }, 1000 * i);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是如果把这里的&lt;code&gt;let&lt;/code&gt;改成&lt;code&gt;var&lt;/code&gt;，则输出就会变成一连串的&lt;code&gt;undefined&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;有同学很快想到了这是闭包啊，因为&lt;code&gt;setTimeout&lt;/code&gt;把函数加入到&lt;code&gt;microqueue&lt;/code&gt;中，所以等到setTimeout的函数体执行时，&lt;code&gt;i&lt;/code&gt;已经走完了&lt;code&gt;for&lt;/code&gt;循环，变成了&lt;code&gt;arr.length&lt;/code&gt;。&lt;code&gt;arr[arr.length]&lt;/code&gt;显然是undefined。&lt;/p&gt;
&lt;p&gt;简单修改一下，变成ES5的语法。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;function print (arr) {
    for (var i = 0; i &amp;lt; arr.length; i++) {
        (function (index) {
            setTimeout(() =&amp;gt; {
                console.log(arr[index])
            }, 1000 * index);
        })(i);    
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实就是利用闭包是向父级作用域寻找值的特性，给&lt;code&gt;i&lt;/code&gt;包装一层作用域，把&lt;code&gt;i&lt;/code&gt;存起来。&lt;/p&gt;
&lt;p&gt;闭包概念还请翻看&lt;a href=&quot;https://www.cnblogs.com/liuyongjia/p/7710962.html&quot;&gt;之前的一篇blog-闭包和类&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;到这里闭包的理解应该差不多了，而今天的关键点在于——&lt;/p&gt;
&lt;h2 id=&quot;let做了什么&quot;&gt;let做了什么？&lt;/h2&gt;
&lt;p&gt;阮一峰老师的《ECMAScript 6》入门里给出[定义](&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/let&quot; class=&quot;uri&quot;&gt;http://es6.ruanyifeng.com/#docs/let&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;ES6 新增了&lt;code&gt;let&lt;/code&gt;命令，用来声明变量。它的用法类似于&lt;code&gt;var&lt;/code&gt;，但是所声明的变量，只在&lt;code&gt;let&lt;/code&gt;命令所在的代码块内有效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他提到了let的几个特性：&lt;/p&gt;
&lt;ol readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;只存在于块级作用域中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不存在变量提升&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;暂时性死区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不允许重复声明&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这里我不再赘述，大家可以仔细阅读一下阮一峰老师的书。&lt;/p&gt;
&lt;p&gt;我更感兴趣的是，在ES5的语法中，如何模拟&lt;code&gt;let&lt;/code&gt;这种块级作用域的效果。这个时候，应该让&lt;code&gt;babel&lt;/code&gt;出场了。&lt;/p&gt;
&lt;p&gt;打开这个&lt;a&gt;链接&lt;/a&gt;：可以看到转换后的代码。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;&quot;use strict&quot;;

function print(arr) {
  var _loop = function _loop(i) {
    setTimeout(function () {
      console.log(arr[i]);
    }, 1000 * i);
  };

  for (var i = 0; i &amp;lt; arr.length; i++) {
    _loop(i);
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实可以对比发现，&lt;code&gt;babel&lt;/code&gt;转换后的代码和我们上面写的ES5实现其实是一样的。&lt;/p&gt;
&lt;p&gt;大概就是通过对&lt;code&gt;let&lt;/code&gt;绑定的块级作用域加一个函数，把&lt;code&gt;let&lt;/code&gt;声明的参数，通过函数传入，达到块级作用域的效果。&lt;/p&gt;
&lt;p&gt;大家可以在&lt;code&gt;babel&lt;/code&gt;试一下&lt;code&gt;let&lt;/code&gt;的其他特性，转移出的ES5语法并不能实现有的特性，比如暂时性死区。&lt;/p&gt;
&lt;p&gt;完，感谢阅读。&lt;/p&gt;
</description>
<pubDate>Fri, 29 Mar 2019 12:12:00 +0000</pubDate>
<dc:creator>liuyongjia</dc:creator>
<og:description>还是先从一个题目开始： 写一个隔1s输出数组的一项的函数。 如果可以用ES6语法，则可以这么写： 但是如果把这里的 改成 ，则输出就会变成一连串的 。 有同学很快想到了这是闭包啊，因为 把函数加入到</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuyongjia/p/10623665.html</dc:identifier>
</item>
<item>
<title>前端笔记知识点整合之JavaScript（十一）event&amp;BOM&amp;鼠标/盒子位置&amp;拖拽/滚轮 - mufengsm</title>
<link>http://www.cnblogs.com/rope/p/10610260.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rope/p/10610260.html</guid>
<description>&lt;h2&gt;&lt;strong&gt;1.1 preventdefault()&lt;span&gt;和&lt;/span&gt;&lt;span&gt;returnValue&lt;/span&gt;&lt;span&gt;阻止默认事件&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;通知浏览器不要执行与事件关联的默认动作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;preventdefault()  &lt;span&gt;支持&lt;/span&gt;&lt;span&gt;Chrome&lt;/span&gt;&lt;span&gt;等高级浏览器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;returnValue     &lt;span&gt;支持&lt;/span&gt;&lt;span&gt;IE6&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; box = document.getElementById('box'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; i = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;鼠标在box盒子滚动时触发&lt;/span&gt;
box.onmousewheel = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){
   &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; event = event ||&lt;span&gt; window.event;
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;能力检测，阻止默认事件&lt;/span&gt;
   &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(event.preventDefault){
       event.preventDefault();
   }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
       event.returnValue &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
   }
   &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.innerHTML = '你在我身上滚动了！' + i++&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2&gt;&lt;strong&gt;1.2 stopPropagation()&lt;span&gt;和&lt;/span&gt;&lt;span&gt;cancelBubble&lt;/span&gt;&lt;span&gt;阻止事件继续传播&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;stopPropagation()    &lt;span&gt;支持&lt;/span&gt;&lt;span&gt;Chrome&lt;/span&gt;&lt;span&gt;等高级浏览器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;cancelBubble       &lt;span&gt;支持&lt;/span&gt;&lt;span&gt;IE6&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; box1 = document.getElementById('box1'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; box2 = document.getElementById('box2'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; box3 = document.getElementById('box3'&lt;span&gt;);
box1.onclick &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
   alert(&lt;/span&gt;'box1'&lt;span&gt;);
}
box2.onclick &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){
   alert(&lt;/span&gt;'box2'&lt;span&gt;);
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;阻止事件继续传播，能力检测&lt;/span&gt;
   &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(event.stopPropagation){
       event.stopPropagation();
   }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
       event.cancelBubble &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
   }
}
box3.onclick &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
   alert(&lt;/span&gt;'box3'&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;

&lt;p&gt;&lt;span&gt;浏览器对象模型（&lt;/span&gt;browser object  model&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;2.1&lt;span&gt;卷动事件&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;当窗口无论向上向下卷动的时候，比如键盘&lt;/span&gt;↓了，滚动鼠标滚轮，拖拽滚动条，都会触发这个事件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
window.onscroll=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2&gt; &lt;/h2&gt;
&lt;h2&gt;&lt;strong&gt;2.2&lt;span&gt;窗口的宽度和高度&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;认识一个对象：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;694&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;16&quot;&gt; document.documentElement&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;span&gt;就是页面&lt;/span&gt;document&lt;span&gt;，想要得到窗口的宽度和高度，不是&lt;/span&gt;&lt;span&gt;window&lt;/span&gt;&lt;span&gt;对象，而是&lt;/span&gt;&lt;span&gt;document&lt;/span&gt;&lt;span&gt;对象，所以：&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;694&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;16&quot;&gt; document.documentElement.clientWidth&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; document.documentElement.clientHeight&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;span&gt;但是去掉页面&lt;/span&gt;DTD&lt;span&gt;，或&lt;/span&gt;&lt;span&gt;IE678&lt;/span&gt;&lt;span&gt;浏览器中，把下面的语句当做浏览器窗口的宽度和高度&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;694&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;16&quot;&gt; document.body.clientWidth&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; document.body.clientWidth&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;所以兼容语法：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;694&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;16&quot;&gt; document.documentElement.clientWidth || document.body.clientWidth;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; document.documentElement.clientHeight || document.body.clientWidth;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;hr/&gt;&lt;h2&gt;&lt;strong&gt;2.3&lt;span&gt;窗口的卷动值&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;兼容语法：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;694&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;16&quot;&gt; document.documentElement.scrollTop || document.body.scrollTop&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;兼容所有浏览器&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;694&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;16&quot;&gt; document.documentElement.scrollTop&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;span&gt;兼容不写&lt;/span&gt;DTD&lt;span&gt;的情况下：&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;694&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;16&quot;&gt; document.body.scrollTop&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;当我们给某一个盒子添加鼠标事件监听时（&lt;/span&gt;click&lt;span&gt;、&lt;/span&gt;&lt;span&gt;mouseover&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;mouseenter&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;mouseout&lt;/span&gt;&lt;span&gt;等事件），都一定会有以下四组值：&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;694&quot; readability=&quot;11&quot;&gt;
&lt;p class=&quot;16&quot;&gt; event.pageX         event.pageY&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; event.screenX       event.screenY&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; event.clientX       event.clientY&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; event.offsetX       event.offsetY&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;event.pageY    &lt;span&gt;表示鼠标指针，到页面顶端的距离。&lt;/span&gt;&lt;span&gt;IE6&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;不兼容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;event.screenY  &lt;span&gt;表示鼠标指针，到屏幕顶端的距离&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;event.clientY  &lt;span&gt;表示鼠标指针，到视口顶端的距离（视口就是当前可视窗口）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;event.offsetY  &lt;span&gt;表示鼠标指针，到盒子顶端的距离&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;规律：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1&lt;span&gt;、当页面没有卷动的时候，&lt;/span&gt;&lt;span&gt;pageY&lt;/span&gt;&lt;span&gt;一定等价于&lt;/span&gt;&lt;span&gt;clientY&lt;/span&gt;&lt;span&gt;。或换句话说&lt;/span&gt;&lt;span&gt;pageY&lt;/span&gt;&lt;span&gt;等价于&lt;/span&gt;&lt;span&gt;clientY+&lt;/span&gt;&lt;span&gt;页面卷动的值&lt;/span&gt;&lt;span&gt;scrollTop&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2&lt;span&gt;、&lt;/span&gt;&lt;span&gt;IE678&lt;/span&gt;&lt;span&gt;不兼容&lt;/span&gt;&lt;span&gt;pageX&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;pageY&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3&lt;span&gt;、&lt;/span&gt;&lt;span&gt;offsetX/Y&lt;/span&gt;&lt;span&gt;会被儿子影响。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1491596/201903/1491596-20190329193409492-618989782.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1491596/201903/1491596-20190329193414556-1552940751.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;offsetX/Y&lt;span&gt;指的不是距离你监听的那个盒子左上角的距离，而是指的你现在鼠标指针所在位置到此时最内层盒子左上角的距离。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1491596/201903/1491596-20190329193423344-1288515031.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;任何一个元素都有&lt;/span&gt;offsetParent&lt;span&gt;属性，和&lt;/span&gt;&lt;span&gt;offsetLeft&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;offsetTop&lt;/span&gt;&lt;span&gt;属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1491596/201903/1491596-20190329193434010-610524045.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt;&lt;strong&gt;4.1&lt;/strong&gt;&lt;strong&gt;计算盒子在页面中的净位置&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;现在我们就可以用offsetParent&lt;span&gt;和&lt;/span&gt;&lt;span&gt;offsetTop/Left&lt;/span&gt;&lt;span&gt;计算一个元素的净位置了，是一个迭代的过程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;xiaoming&lt;span&gt;的净位置：&lt;/span&gt;&lt;span&gt;xiaoming.offsetTop&lt;/span&gt; + xiaoming.offsetParent&lt;span&gt;的&lt;/span&gt;xiaoming.offsetParent.borderTop ...&lt;/p&gt;
&lt;p&gt;由于IE8&lt;span&gt;很特殊，所以我们迫切的需要知道浏览器是不是&lt;/span&gt;&lt;span&gt;IE8&lt;/span&gt;&lt;span&gt;。所以使用：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;window.navigator.userAgent&lt;/p&gt;
&lt;p&gt;来检测浏览器的版本。&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;347&quot;&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1491596/201903/1491596-20190329193506662-626584980.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;347&quot;&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1491596/201903/1491596-20190329193511461-756592706.png&quot; alt=&quot;&quot;/&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;694&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;16&quot;&gt; var ie8 = window.navigator.userAgent.indexOf(&quot;MSIE 8.0&quot;) != -1;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;下面的函数就是得到一个元素在页面上的总净位置：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; offset(o){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始值&lt;/span&gt;
     &lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; {
        &lt;/span&gt;&quot;top&quot;&lt;span&gt; : o.offsetTop,
        &lt;/span&gt;&quot;left&quot;&lt;span&gt; : o.offsetLeft
     }
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断浏览器是不是IE8&lt;/span&gt;
     &lt;span&gt;var&lt;/span&gt; isIE8 = window.navigator.userAgent.indexOf(&quot;MSIE 8.0&quot;) != -1&lt;span&gt;;
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环迭代，寻找父亲&lt;/span&gt;
     &lt;span&gt;while&lt;/span&gt;(o =&lt;span&gt; o.offsetParent){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算后的边框的值&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(window.getComputedStyle){
          &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; borderTop = parseInt(getComputedStyle(o)['border-top-width'&lt;span&gt;]);
          &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; borderLeft = parseInt(getComputedStyle(o)['border-left-width'&lt;span&gt;]);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
          &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; borderTop = parseInt(o.currentStyle['borderTopWidth'&lt;span&gt;]);
          &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; borderLeft = parseInt(o.currentStyle['borderLeftWidth'&lt;span&gt;]);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证一下，万一borderTop是undefined或NaN，此时修正为0&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(isNaN(borderTop)){
            borderTop &lt;/span&gt;= 0&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(isNaN(borderLeft)){
            borderLeft &lt;/span&gt;= 0&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果浏览器版本不是IE8那么就加上边框，如果是IE8就不需要加边框，抛出自己&lt;/span&gt;
        !isIE8 &amp;amp;&amp;amp; (result.top +=&lt;span&gt; borderTop);
        &lt;/span&gt;!isIE8 &amp;amp;&amp;amp; (result.left +=&lt;span&gt; borderLeft);
        result.top &lt;/span&gt;+=&lt;span&gt; o.offsetTop;
        result.left &lt;/span&gt;+=&lt;span&gt; o.offsetLeft;
     }
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2&gt;&lt;strong&gt;4.2&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;曲线救国得到鼠标在盒子中的位置&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; box = document.getElementById(&quot;box&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = document.getElementById(&quot;result&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听父亲鼠标移动的时候，鼠标指针的offsetX值和offsetY值&lt;/span&gt;
box.onmousemove = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; event = event ||&lt;span&gt; window.event;
    &lt;/span&gt;&lt;span&gt;var x = event.pageX - getAllOffset(box).left;
    var y = event.pageY -&lt;/span&gt;&lt;span&gt;&lt;span&gt; getAllOffset(box).top;&lt;/span&gt;
    result.innerHTML &lt;/span&gt;= x + &quot;,&quot; +&lt;span&gt; y;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;由于&lt;/span&gt;IE&lt;span&gt;低版本不兼容&lt;/span&gt;&lt;span&gt;pageX&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;pageY&lt;/span&gt;&lt;span&gt;，所以用&lt;/span&gt;&lt;span&gt;clientX/Y&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;加上卷动值&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; box = document.getElementById(&quot;box&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = document.getElementById(&quot;result&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听父亲鼠标移动的时候，鼠标指针的offsetX值和offsetY值&lt;/span&gt;
box.onmousemove = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; event = event ||&lt;span&gt; window.event;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;曲线救国！！！！得到窗口卷动的值&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; scrollTop = document.documentElement.scrollTop ||&lt;span&gt; document.body.scrollTop;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; scrollLeft = document.documentElement.scrollLeft ||&lt;span&gt; document.body.scrollLeft;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;鼠标的offsetX、offsetY等于视口的值，加上卷动值减去净位置。&lt;/span&gt;
    &lt;span&gt;var x = event.clientX + scrollTop - getAllOffset(box).left;
    var y = event.clientY + scrollLeft -&lt;/span&gt;&lt;span&gt;&lt;span&gt; getAllOffset(box).top;&lt;/span&gt;
    result.innerHTML &lt;/span&gt;= x + &quot;,&quot; +&lt;span&gt; y;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2&gt;&lt;strong&gt;5.1 &lt;span&gt;在页面上拖拽&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;页面上的元素，能够被鼠标拖拽。整体思路：&lt;/p&gt;
&lt;p&gt;① &lt;span&gt;当鼠标在&lt;/span&gt;img&lt;span&gt;上按下去的时候，注册&lt;/span&gt;&lt;span&gt;document&lt;/span&gt;&lt;span&gt;的鼠标移动事件监听；反之，当鼠标在屏幕任何位置抬起的时候，剥夺&lt;/span&gt;&lt;span&gt;document&lt;/span&gt;&lt;span&gt;的鼠标移动事件监听。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;② 为了让鼠标能够一直按住图片的同一个位置，所以要在&lt;span&gt;mousedown&lt;/span&gt;&lt;span&gt;的一瞬间记录误差（见下图）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1491596/201903/1491596-20190329193634779-654137705.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1491596/201903/1491596-20190329193646281-1314412262.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; img = document.getElementsByTagName('img')[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;鼠标指针在图片上按下的时候&lt;/span&gt;
img.onmousedown = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; event = event ||&lt;span&gt; window.event;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录误差，目的是当我按住baby的脑门子拖拽的时候，鼠标指针一直在脑门子上。&lt;/span&gt;
   &lt;span&gt; var dx = event.offsetX;
    var dy = event.offsetY;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注册新的事件&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在document上移动的时候，让img跟随鼠标&lt;/span&gt;
    document.onmousemove = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; event = event ||&lt;span&gt; window.event;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;移动的时候top值等于当前的鼠标指针位置减去开始的时候的误差&lt;/span&gt;
        &lt;span&gt;var x = event.clientX - dx;
        var y = event.clientY -&lt;/span&gt;&lt;span&gt;&lt;span&gt; dy;&lt;/span&gt;
 
        img.style.left &lt;/span&gt;= x + &quot;px&quot;&lt;span&gt;;
        img.style.top &lt;/span&gt;= y + &quot;px&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个return false可以解决IE8的内置事件&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个return false可以解决IE8的内置事件&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;鼠标指针在任何位置抬起的时候，删除document上的move监听&lt;/span&gt;
document.onmouseup = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    document.onmousemove &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2&gt;&lt;strong&gt;5.2&lt;span&gt;在容器中拖拽&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;图片在父级容器中拖拽的时候，不仅仅是给图片加了一个限制区域，图片的&lt;/span&gt;top&lt;span&gt;、&lt;/span&gt;&lt;span&gt;left&lt;/span&gt;&lt;span&gt;参考点是父盒子左上角，鼠标指针的位置点就不一致。图片的&lt;/span&gt;&lt;span&gt;top&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;left&lt;/span&gt;&lt;span&gt;起点是&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;，而鼠标指针&lt;/span&gt;&lt;span&gt;clinetX&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;参考点是&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;大家参考点就不一样了。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1491596/201903/1491596-20190329193913824-819439774.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;方法：只要把它们的坐标统一就可以了，所以我们需要得到鼠标指针相对于盒子的坐标位置，此时需要使用曲线救国，因为&lt;/strong&gt;&lt;strong&gt;offsetX/Y&lt;span&gt;会被儿子影响。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; img = document.getElementsByTagName('img')[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; box = document.getElementById('box'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到盒子的净位置&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; boxoft =&lt;span&gt; offset(box).top;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; boxofl =&lt;span&gt; offset(box).left;
console.log(boxoft,boxofl)
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;鼠标指针在图片上按下的时候&lt;/span&gt;
img.onmousedown = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){
   &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; event = event ||&lt;span&gt; window.event;
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录误差，目的是让我按住baby的脑门拖拽的时候，鼠标指针一直在脑门上&lt;/span&gt;
   &lt;span&gt;var&lt;/span&gt; dx =&lt;span&gt; event.offsetX;
   &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dy =&lt;span&gt; event.offsetY;
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;鼠标按下，然后执行鼠标移动时间，接着在document上移动，让img跟着移动&lt;/span&gt;
   document.onmousemove = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){
       &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; event = event ||&lt;span&gt; window.event;
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;曲线救国！！！！得到窗口卷动的值&lt;/span&gt;
       &lt;span&gt;var&lt;/span&gt; scrollTop = document.documentElement.scrollTop ||&lt;span&gt; document.body.scrollTop;
       &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; scrollLeft = document.documentElement.scrollLeft||&lt;span&gt; document.body.scrollLeft;
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;鼠标的offsetX、offsetY等于视口的值，加上卷动值减去净位置&lt;/span&gt;
       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;移动的时候top值等价于鼠标指针位置减去开始按下的误差&lt;/span&gt;
       &lt;span&gt;var&lt;/span&gt; X = event.clientX + scrollLeft - boxofl -&lt;span&gt; dx;
       &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Y = event.clientY + scrollTop- boxoft -&lt;span&gt; dy;
       console.log(X,Y)
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验收&lt;/span&gt;
       &lt;span&gt;if&lt;/span&gt;(X &amp;gt; 300&lt;span&gt;){
           X &lt;/span&gt;= 300&lt;span&gt;;
       }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(X &amp;lt; 0&lt;span&gt;){
           X &lt;/span&gt;= 0&lt;span&gt;;
       }
       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(Y &amp;gt; 300&lt;span&gt;){
           Y &lt;/span&gt;= 300&lt;span&gt;;
       }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(Y &amp;lt; 0&lt;span&gt;){
           Y &lt;/span&gt;= 0&lt;span&gt;;
       }
       img.style.left &lt;/span&gt;= X+'px'&lt;span&gt;;
       img.style.top  &lt;/span&gt;= Y+'px'&lt;span&gt;;
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个return false可以解决浏览器内置事件&lt;/span&gt;
       &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在鼠标指针任何位置抬起的时候，移除document上的move事件监听&lt;/span&gt;
document.onmouseup = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
   document.onmousemove &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2&gt;&lt;strong&gt;5.3&lt;span&gt;放大镜效果&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;和刚刚的拖拽不一样，鼠标指针不需要按下了，所以逻辑变得简单了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;放大镜的放大原理：不是真的放大，只是当左边小放大镜移动的时候，右边的大图按比例移动，形成放大的感觉。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;比例问题：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;小图盒子&lt;/span&gt;350&lt;span&gt;宽高，放大镜&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;&lt;span&gt;宽高&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;大图盒子&lt;/span&gt;400&lt;span&gt;宽高，图片&lt;/span&gt;&lt;span&gt;800&lt;/span&gt;&lt;span&gt;宽高&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里暗含了两个&lt;/span&gt;1:2&lt;span&gt;，比例一定要相同，如果比例不相同，放大镜放大感觉就不一样了，无法看全。&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;页面中经常有鼠标滚轮事件，比如做一个内置有纵向滚动条的盒子&lt;/p&gt;
&lt;p&gt;Chrome&lt;span&gt;和&lt;/span&gt;&lt;span&gt;IE&lt;/span&gt;&lt;span&gt;各个版本浏览器都支持&lt;/span&gt;&lt;span&gt;onmousewheel&lt;/span&gt;&lt;span&gt;事件，表示鼠标滚轮滚动的时候触发，火狐不支持这个事件，它支持的是自己的&lt;/span&gt;&lt;span&gt;DOMMouseScroll&lt;/span&gt;&lt;span&gt;事件，我们不需要进行能力检测，因为所有的浏览器遇见别人添加监听的方法都不报错（静默）。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; box = document.getElementById('box'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;除了火狐浏览器之外，都支持以下这种监听滚轮事件&lt;/span&gt;
box.onmousewheel =&lt;span&gt; mousewheel;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;火狐独有的，必须用DOM2级添加监听&lt;/span&gt;
box.addEventListener('DOMMouseScroll',mousewheel,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;事件处理函数&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; mousewheel(){
   alert(&lt;/span&gt;'滚动了!!!'&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1491596/201903/1491596-20190329194019569-8179052.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;鼠标滚轮事件的&lt;/span&gt;event&lt;span&gt;对象有属性&lt;/span&gt;&lt;span&gt;wheelDelta&lt;/span&gt;&lt;span&gt;，火狐是&lt;/span&gt;&lt;span&gt;detail&lt;/span&gt;&lt;span&gt;属性，可以反映你的滚轮方向和力度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;非火狐向上&lt;/span&gt;120&lt;span&gt;（力度越大数字越大），火狐向上是&lt;/span&gt;&lt;span&gt;-3&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;非火狐向下&lt;/span&gt;-120&lt;span&gt;（力度越大数字越大），火狐向上是&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以要进行兼容性处理，把它们的值统一为：&lt;/span&gt;1&lt;span&gt;和&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
box.onmousewheel =&lt;span&gt; mousewheel;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;火狐独有的，必须用DOM2级添加监听&lt;/span&gt;
box.addEventListener('DOMMouseScroll',mousewheel,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;事件处理函数&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; mousewheel(event){
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进行方向的能力检测，由于火狐和大家不一样，用if分开判断&lt;/span&gt;
   &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;span&gt;event.wheelDelta&lt;/span&gt;){
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;非火狐&lt;/span&gt;
       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; if(event.wheelDelta &amp;gt; 0){&lt;/span&gt;
       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     var direction = 1;&lt;/span&gt;
       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }else{&lt;/span&gt;
       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     var direction = -1;&lt;/span&gt;
       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
       &lt;span&gt;var direction =  event.wheelDelta &amp;gt; 0 ? 1 : -1&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;
   }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;火狐&lt;/span&gt;
       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; if(event.detail &amp;gt; 0){&lt;/span&gt;
       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     var direction = -1;&lt;/span&gt;
       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }else{&lt;/span&gt;
       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     var direction = 1;&lt;/span&gt;
       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
       &lt;span&gt;var direction =  event.detail &amp;gt; 0 ? -1 : 1&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;
   }
   console.log(direction)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;
&lt;p&gt;上一篇文章DOM2级小测试的正确答案：EFGHIBCD&lt;/p&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;p&gt;1、DOM0&lt;span&gt;级只能添加到冒泡阶段&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、DOM0&lt;span&gt;级事件同名的会覆盖&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、true&lt;span&gt;表示捕获，&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;表示冒泡，先捕获，后冒泡&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4、DOM2&lt;span&gt;级的不会覆盖，先写的先执行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;5、DOM2&lt;span&gt;级最内层的不区分冒泡和捕获，谁先写谁执行，无论是&lt;/span&gt;&lt;span&gt;DOM0&lt;/span&gt;&lt;span&gt;还是&lt;/span&gt;&lt;span&gt;DOM2&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;ps:尽量让它越来越规范，前期的文章都是本人的学习时的笔记整理，希望看完后可以指点一二，提提意见多多交流； &lt;/p&gt;

&lt;p&gt;笔记流程：html&amp;gt;css&amp;gt;javascript&amp;gt;jquery&amp;gt;html5/css3&amp;gt;移动端&amp;gt;ajax&amp;gt;面向对象&amp;gt;canvas&amp;gt;nodejs&amp;gt;es678&amp;gt;vue&amp;gt;react&amp;gt;小程序&amp;gt;面试问题&lt;/p&gt;

&lt;p&gt;意见请留言，邮箱：scarf666@163.com&lt;/p&gt;

</description>
<pubDate>Fri, 29 Mar 2019 11:49:00 +0000</pubDate>
<dc:creator>mufengsm</dc:creator>
<og:description>一、事件对象event 1.1 preventdefault()和returnValue阻止默认事件 通知浏览器不要执行与事件关联的默认动作。 preventdefault() 支持Chrome等高级</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rope/p/10610260.html</dc:identifier>
</item>
<item>
<title>有关网络流 - Winniechen</title>
<link>http://www.cnblogs.com/Winniechen/p/10623387.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Winniechen/p/10623387.html</guid>
<description>&lt;h2 id=&quot;有关网络流&quot;&gt;有关网络流&lt;/h2&gt;
&lt;h3 id=&quot;关于模板&quot;&gt;1. 关于模板&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;最大流一般Dinic就解决掉了&lt;/li&gt;
&lt;li&gt;费用流的话，一般EK都能搞出来，然后如果被卡了的话，就写一个类似Dinic的东西就好了，基本没啥变化，自己YY一下就想出来了&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;关于最大流&quot;&gt;2. 关于最大流&lt;/h3&gt;
&lt;h4 id=&quot;普通最大流&quot;&gt;普通最大流&lt;/h4&gt;
&lt;p&gt;似乎没啥题，我见过的都是裸题&lt;/p&gt;
&lt;h4 id=&quot;有关最小割&quot;&gt;有关最小割&lt;/h4&gt;
&lt;p&gt;关于最小割的东西还是不少的，那么从头开始说&lt;/p&gt;
&lt;ol readability=&quot;1.3943862987631&quot;&gt;&lt;li readability=&quot;0.76510067114094&quot;&gt;
&lt;p&gt;直接最小割&lt;/p&gt;
&lt;p&gt;这个东西一般都不是网络流题，但是通常网络流可以爆踩std...&lt;/p&gt;
&lt;p&gt;例子的话：&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=1001&quot;&gt;BZOJ1001 狼抓兔子&lt;/a&gt; &lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=2007&quot;&gt;NOI2010 海拔&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.8828408501814&quot;&gt;
&lt;p&gt;一起选一些点会发生一些事情&lt;/p&gt;
&lt;p&gt;这种东西一般考新建一个虚点，然后把代价从原来的点连向这个点，然后向其他的点连流量为正无穷的边&lt;/p&gt;
&lt;ol readability=&quot;8.4188571428571&quot;&gt;&lt;li readability=&quot;-0.77551020408163&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=3894&quot;&gt;BZOJ 3894 文理分科&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上述问题的裸题，直接按照上述方式建图然后最小割即可&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.8934624697337&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=3774&quot;&gt;BZOJ 3774 最优选择&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先黑白染色，然后白黑分别连向源汇，流量为$a[i][j]$，然后对于每个点新建一个点，然后，对于白点新建一个点，把白点连向这个点流量为$b[i][j]$，对于黑点也新建一个点，然后把这个点连向黑点，流量为$b[i][j]$，然后对于每个新建的点，然后把这个点连向四周的点或者从四周连向这个点即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.8353221957041&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=2400&quot;&gt;BZOJ 2400 Optimal Marks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先拆位，因为每位之间的贡献是互不影响的，然后对于每个有数字的节点，分为$0,1$，然后$S -&amp;gt; 0$，流量为$\infty$，$1 - &amp;gt; T$流量为$\infty$，剩下的对于原图中每一个边练一下流量为$1$的边即可。这样的最小割即为第一问的答案，然后因为流是确定的，所以贪心的找到必须为$1$的点的个数第二问就解决了&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3.8095238095238&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=3144&quot;&gt;BZOJ 3144 HNOI2013 切糕&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果没有限制的话，显然可以建图，从底向上，多建出一层点，然后每条边的流量就是对应层的代价即可，然后加入$d$的限制之后，就只需要把每个点连向旁边的深度比它大$d$的点，流量为$\infty$，道理很简单，这样如果$i$层的边被割了，那么就从这一层的$i+1$位置走到旁边的$i+1+d$的位置，然后并且会从$i-d$回到$i$这个位置，如果不在这个区间内割开的话，原图就还是联通的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.92783505154639&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=3218&quot;&gt;BZOJ 3218 a+b problem&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先把$S - &amp;gt; i$，流量为$w[i]$，然后把$i - &amp;gt; T$流量为$b[i]$，对于奇怪的方格的限制可以新建一个点，并把$i$指向这个点，流量为$p[i]$，然后再把这个点指向可能会导致这个点奇怪的点即可，流量显然为$\infty$。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最小割树&lt;/p&gt;
&lt;p&gt;咕咕咕&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;最大流常见建图方式&quot;&gt;最大流常见建图方式&lt;/h4&gt;
&lt;ol readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;混合图欧拉回路&lt;/p&gt;
&lt;p&gt;随意钦定无向边方向，由于欧拉回路要求每个点的入度等于出度，并且入读+出度为偶数&lt;/p&gt;
&lt;p&gt;所以对于每个点，$S- &amp;gt; i$连一条出度流量的边，$i-&amp;gt; T$连一条入度流量的边，然后对于原图中的每一条无向边，由于可以反悔，所以假设你钦定了是$x-&amp;gt;y$，连一条$x-&amp;gt; y$，流量为$2$的边即可，原因很简单，因为可以反悔，所以对于每个点如果出度较多，就需要把某一些出边变成入边，反之就需要把某一些入边变成出边，每次会让出边-入边的差减少$2$。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;最大权闭合子图&lt;/p&gt;
&lt;p&gt;将每个点权分正负，对于正点，$S-&amp;gt;i$，流量为$a_i$，对于负边，$i-&amp;gt;T$，流量为$-a_i$&lt;/p&gt;
&lt;p&gt;对于原图中的每一条边，$x-&amp;gt;y$连一条流量为正无穷的边，然后正权边的和-最大流即为答案&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;最大密度子图&lt;/p&gt;
&lt;p&gt;通过01分数规划，我们二分每个点的代价，然后对于这个代价建立最大权闭合子图即可。&lt;/p&gt;
&lt;p&gt;每次验证最大权闭合子图是否为$0$即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;关于费用流&quot;&gt;3. 关于费用流&lt;/h3&gt;
&lt;h4 id=&quot;普通费用流&quot;&gt;普通费用流&lt;/h4&gt;
&lt;p&gt;一般这种题，费用流都不是正解，或者正解需要优化建图方式，这种题的费用流模型十分简单，并且费用流部分不作为考点存在&lt;/p&gt;
&lt;p&gt;其中一部分是可以通过贪心+数据结构优化到$O(n\log n )$或者$O(n \log ^2 n)$&lt;/p&gt;
&lt;p&gt;另一部分则是同样通过数据结构或者其他的什么东西优化边数来优化复杂度&lt;/p&gt;
&lt;p&gt;详情见：&lt;/p&gt;
&lt;h4 id=&quot;常见费用流模型&quot;&gt;常见费用流模型&lt;/h4&gt;
&lt;ol readability=&quot;26.515768958186&quot;&gt;&lt;li readability=&quot;-0.92827868852459&quot;&gt;
&lt;p&gt;最小等待时间问题&lt;/p&gt;
&lt;p&gt;一般的解决方案是拆点&lt;/p&gt;
&lt;ol readability=&quot;2.2974537037037&quot;&gt;&lt;li readability=&quot;5.7241379310345&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=1070&quot;&gt;BZOJ 1070 修车&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个题是这种题的一个常见形式，把$m$个人拆成$n$个点&lt;/p&gt;
&lt;p&gt;对于第$i$个人的第$k$个点，把这个人向第$j$个车连一条流量为$1$，费用为$map[j][k]\times i$&lt;/p&gt;
&lt;p&gt;这个道路很简单，表达的意义就是第$i$个人，倒数第$k$个修$j$这个车&lt;/p&gt;
&lt;p&gt;然后$S$向所有人连边，所有车向$T$连边&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.7710843373494&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=2879&quot;&gt;BZOJ 2879 美食节&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;和修车大概啥区别都没有，就是需要动态开点...&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li readability=&quot;19.05604719764&quot;&gt;
&lt;p&gt;费用流拆边&lt;/p&gt;
&lt;p&gt;一般解决的问题长成，最小化$(x)^2$其中$(x)$是一个式子，然后可以通过建出$n$条费用不同的边来解决&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=2597&quot;&gt;BZOJ 2597 WC2007 石头剪刀布&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先把问题转化为，求三个点不构成环的方案数&lt;/p&gt;
&lt;p&gt;然后可以发现，对于这样的方案一定满足其中有两个点是指向同一个点&lt;/p&gt;
&lt;p&gt;那么也就是$C(n,3)-\sum\limits_{i=1}^nC(d[i],2)$&lt;/p&gt;
&lt;p&gt;然后最小化后者，转化为求最小化：$\sum\limits_{i=1}^n d[i]^2 - d[i]$&lt;/p&gt;
&lt;p&gt;可以发现后面的$d[i]$的和是固定的，也就是$\sum\limits_{i=1}^n i=\frac{n\times (n-1)}{2}$&lt;/p&gt;
&lt;p&gt;那么就是最小化$\sum\limits_{i=1}^nd[i]^2$，对每个点拆边，费用分别为$1,3,5,7...$&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;32.321644498186&quot;&gt;
&lt;p&gt;线性规划转费用流&lt;/p&gt;
&lt;p&gt;“事实上任何最大流，最小费用流，上下界网络流都是在解决一个线性规划问题”（摘自 wyfcyx 大爷的ppt）&lt;/p&gt;
&lt;p&gt;具体地，在一个网络流问题中，把边看作变量，把点看作限制条件，就会得到一个线性规划问题。&lt;/p&gt;
&lt;p&gt;当然，由于网络流的特性，这类线性规划问题只能是：每个变量出现次数为且仅为$2$次，且$1$次系数为$+1$，$1$次系数为$-1$。&lt;/p&gt;
&lt;p&gt;如果我们能够将这类特殊的线性规划问题转化为网络流问题，就可以圆满地解决原问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=1061&quot;&gt;BZOJ1061: [Noi2008]志愿者招募&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们设：第$i$天招募的志愿者数量为$P_i$，$j$种志愿者招募了$k_j$个&lt;/p&gt;
&lt;p&gt;那么对于$P_i = P_{i-1}+ \sum\limits_{S_j=i} k_j - \sum\limits_{T_j=i-1}k_j $&lt;/p&gt;
&lt;p&gt;我们要满足：$P_i \ge A_i$，所以我们设$B_i $为一个自然数，即：$P_i = A_i+B_i$&lt;/p&gt;
&lt;p&gt;那么我们可以得到：$P_i - P_{i-1} = A_i + B_i - A_{i-1} - B_{i-1}$&lt;/p&gt;
&lt;p&gt;将$P_i = P_{i-1}+ \sum\limits_{S_j=i} k_j - \sum\limits_{T_j=i-1}k_j $带入上式可得：&lt;/p&gt;
&lt;p&gt;$\sum\limits_{S_j=i} k_j - \sum\limits_{T_j = i-1}k_j = A_i +B_i -A_{i-1}-B_{i-1}$&lt;/p&gt;
&lt;p&gt;那么：$A_i+B_i + \sum\limits_{T_j =i-1}k_j = A_{i-1}+B_{i-1} + \sum\limits_{S_j=i}k_j $&lt;/p&gt;
&lt;p&gt;那么对于这样的一个式子，我们发现，如果把招募$k$个志愿者看作流出流量，到期看作在下一天流入流量，同时把前一天看作是流出流量，当天所需看作是流入流量，然后再把这天多余的当作流出流量，然后把下一天的多余流量流入今天。&lt;/p&gt;
&lt;p&gt;这样如果每个点都流量平衡就满足要求了，那么就按照上述东西跑一个费用流就好了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;关于有上下界网络流&quot;&gt;4. 关于有上下界网络流&lt;/h3&gt;
&lt;p&gt;对于这种类似问题，如果原图有源汇，那么就把汇向源连一条当前网络能够允许的最大流量的边，然后剩下的就转化为无源汇问题了。&lt;/p&gt;
&lt;p&gt;然后做题的技巧是，先建出对应的可行流模型&lt;/p&gt;
&lt;p&gt;然后再可行流的模型上构建真正需要的模型&lt;/p&gt;
&lt;p&gt;一般可以把连边的流量写成不等式或者等式的形式&lt;/p&gt;
&lt;h4 id=&quot;有上下界可行流&quot;&gt;有上下界可行流&lt;/h4&gt;
&lt;p&gt;对于这种问题，我们可以转化为类似于混合图欧拉回路的方法解决。&lt;/p&gt;
&lt;p&gt;也就是，我们将每条边先钦定都流下界那么多的流量，然后有些点可能就会流量不平衡&lt;/p&gt;
&lt;p&gt;这个时候，我们将$S-&amp;gt;i$如果流入&amp;gt;流出，并且流量为流入$-$流出，反之，我们将$i-&amp;gt;T$，流量为流出$-$流入&lt;/p&gt;
&lt;p&gt;然后对于原图中的每一条边，因为每条边可以在上届与下界之间反悔，如果多流的话，代表着起始点的流入增加，终止点的流出增加，那么如果能够通过调整当前图的流量满足流量平衡，那么就可以，反之就不可以。&lt;/p&gt;
&lt;h4 id=&quot;有上下界最大流&quot;&gt;有上下界最大流&lt;/h4&gt;
&lt;p&gt;似乎没啥营养？&lt;/p&gt;
&lt;p&gt;一般问题都包含源汇，然后就可以把新建的源汇去掉，把汇向源的边去掉。&lt;/p&gt;
&lt;p&gt;然后在残余网络上跑原图源汇直接的最大流即可&lt;/p&gt;
&lt;p&gt;（其实这个有上下界一点意义都没有，这个本质上就是转化成了有上下界可行流判断可行性+如果可行，答案一定为原图最大流&lt;/p&gt;
&lt;h4 id=&quot;有上下界最小流&quot;&gt;有上下界最小流&lt;/h4&gt;
&lt;p&gt;和上面的求法一样，不过跑的是汇到源的最大流&lt;/p&gt;
&lt;p&gt;然后可行流的流量减去这个流量就是最小流&lt;/p&gt;
&lt;h4 id=&quot;有上下界最小费用可行流&quot;&gt;有上下界最小费用可行流&lt;/h4&gt;
&lt;p&gt;直接用可行流模型边加上费用跑费用流就行&lt;/p&gt;
&lt;h4 id=&quot;一些习题&quot;&gt;5. 一些习题&lt;/h4&gt;
</description>
<pubDate>Fri, 29 Mar 2019 11:18:00 +0000</pubDate>
<dc:creator>Winniechen</dc:creator>
<og:description>有关网络流 1. 关于模板 最大流一般Dinic就解决掉了 费用流的话，一般EK都能搞出来，然后如果被卡了的话，就写一个类似Dinic的东西就好了，基本没啥变化，自己YY一下就想出来了 2. 关于最大</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Winniechen/p/10623387.html</dc:identifier>
</item>
<item>
<title>分布式事务（一）原理概览 - 只会一点java</title>
<link>http://www.cnblogs.com/dennyzhangdd/p/10580446.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dennyzhangdd/p/10580446.html</guid>
<description>&lt;h2&gt;一、引子&lt;/h2&gt;
&lt;p&gt;事务（数据库事务）是java开发工程师必须掌握的一项技能。又可分为本地事务和分布式事务，其中分布式事务是进阶为高级开发工程师必会的技能。本文从概念、原理、实践多角度剖析分布式事务，希望有所收获。&lt;/p&gt;
&lt;h2&gt;二、概念&lt;/h2&gt;
&lt;h3&gt;2.1.本地事务&lt;/h3&gt;
&lt;p&gt;大部分情况下，一个服务操作一个数据库，这就是本地事务，ACID特性由数据库提供支持，比如mysql innodb引擎。如下图所示（网上的图，挺好直接用）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/584866/201903/584866-20190319172525329-1516530717.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;spring 提供了2种方式实现：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;编程式：基于transactionTemplate去实现，适合手动精准控制事务的场景，少用。&lt;/li&gt;
&lt;li&gt;声明式事务注解：@Transactional加在serviceImpl的方法上即可，这也是常用的方法。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;关于本地事务这里不多说，飞机票：&lt;a href=&quot;https://www.cnblogs.com/dennyzhangdd/p/9549535.html&quot; target=&quot;_blank&quot;&gt;本地事务飞机票。&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;2.2.分布式事务&lt;/h3&gt;
&lt;p&gt;当遇到复杂业务调用时，可能会出现&lt;strong&gt;跨库多资源调用&lt;/strong&gt;(一个事务管理器，多个资源)/&lt;strong&gt;多服务调用&lt;/strong&gt;（多个事务管理器，多个资源），期望全部成功或失败回滚，这就是分布式事务，用以保证“操作多个隔离资源的数据一致性”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/584866/201903/584866-20190319172438902-1999476916.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;三、DTP模型 &amp;amp; XA规范&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Mysql官方对于XA事务，描述如下:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Mysql InnoDB引擎支持分布式事务,mysql的XA实现是基于X/Open CAE 文档中的 Distributed Transaction Processing: The XA Specification. (DTP XA规范)的。飞机票：&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/xa.html&quot; target=&quot;_blank&quot;&gt;13.3.7 XA Transactions官方飞机票&lt;/a&gt;。X/Open CAE解释如下：&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;X/Open&lt;/strong&gt;&lt;/span&gt;:&lt;/span&gt; X/Open是一个独立的、全球性的开放系统组织，由世界上最大的信息系统供应商、用户组织和软件公司支持。其使命是通过开放系统的实际实施，为用户带来更大的计算价值。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;X/Open CAE&lt;/span&gt;规范&lt;/strong&gt;:&lt;/span&gt; 即X/Open Common Applications Environment，这个环境覆盖了高于硬件级别的，支持开放系统所需的一组标准。它提供了应用程序的可移植性和互操作性。&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;MySQL Connector 5.0.0及更高版本直接支持XA，通过一个类接口为您处理XA SQL语句接口。XA支持分布式事务，即允许多个单独的事务资源参与全局事务。事务资源通常是rdbms，但也可能是其他类型的资源。&lt;/li&gt;
&lt;li&gt;X/Open CAE文档是发布在open group官网上的，&lt;a href=&quot;http://www.opengroup.org/public/pubs/catalog/c193.htm&quot; target=&quot;_top&quot;&gt;http://www.opengroup.org/public/pubs/catalog/c193.htm&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在open group官网可查到，有2个XA规范，一个是XA,一个是XA+, 其中XA+是XA的超集，新定义了通信资源管理器CRM的协议，建议直接看XA+即可。后续分析直接以XA+ 1994版为准。官方下载链接如下：&lt;/p&gt;
&lt;p&gt;看名字我们就知道 XA规范是依托于DTP场景的，下面我们&lt;span&gt;&lt;strong&gt;分别从&lt;span&gt;DTP模型、XA规范&lt;/span&gt;2个视角来剖析原理&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;3.1 DTP模型&lt;/h2&gt;
&lt;p&gt;依据X/Open《Distributed Transaction Processing: Reference Model, Version 3》上的介绍，DTP模型是一种软件体系结构，它允许多个应用程序共享多个资源管理器提供的资源，并允许将它们的工作协调到全局事务中。&lt;/p&gt;
&lt;h3&gt;3.1.1 模型元素&lt;/h3&gt;
&lt;p&gt;要深度了解DTP,先看看模型内的元素概念，如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;应用程序(Application Program ，简称AP)：&lt;/strong&gt;每个AP指定一个包含资源(如数据库)的操作序列。AP定义全局事务的开始和结束，访问事务边界内的资源，通常决定是提交还是回滚每个事务。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;资源管理器(Resource Manager，简称RM)：&lt;/strong&gt;如数据库、文件系统等，并提供访问资源的方式。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事务管理器(Transaction Manager ，简称TM)：&lt;/strong&gt;管理全局事务,负责分配事务唯一标识XID，监控事务的执行进度，并负责事务的提交、回滚等。如果RM是一个通信资源管理器(CRM)，那么在执行两个APs之间的通信时，它将xid传递给合作伙伴、从属的CRMs。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;通信资源管理器(Communication Resource Manager，简称CRM)：&lt;/strong&gt;控制一个TM域(TM domain)内或者跨TM域的分布式应用之间的通信。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;通信协议(Communication Protocol，简称CP)：&lt;/strong&gt;一种通信协议，它提供分布式应用程序使用的、由CRMs支持的底层通信服务。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;介绍完模型元素，下面来看2种典型的DTP场景，一种是单应用跨库DTP，另一种是跨应用DTP。&lt;/p&gt;
&lt;h3&gt;3.1.2 单应用跨库DTP&lt;/h3&gt;
&lt;p&gt; 一个应用使用一个事务管理器TM，操作多个资源管理器RMs，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/584866/201903/584866-20190320114616438-1373114990.png&quot; alt=&quot;&quot; width=&quot;323&quot; height=&quot;200&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.1.3 跨应用DTP&lt;/h3&gt;
&lt;p&gt;如果分布式事务需要跨多个应用，例如微服务调用，那就必须增加通讯资源管理器CRMs（跨应用管理事务），如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/584866/201903/584866-20190320113712843-905984565.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中使用的接口如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;AP-RM接口&lt;/strong&gt; : 允许AP访问资源,如SQL和ISAM，提供AP可移植性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AP-TM接口&lt;/strong&gt; : 即TX接口，为AP提供了一个API， AP通过API与TM协调全局事务管理。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;TM-RM接口&lt;/strong&gt; : 即XA接口&lt;/span&gt;，允许TM将RMs的工作构造为全局事务，并协调完成或恢复。XA接口是TM与RM之间的双向接口。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;TM-CRM接口&lt;/strong&gt; : 即XA+接口&lt;/span&gt;，支持跨TM域的全局事务信息流。XA+ 接口是TM与CRM之间的双向接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AP-CRM接口&lt;/strong&gt; : 为全局事务中的多应用之间的DTP通信提供了可移植的api，例如：TxRPC、XATMI、Peer-to-Peer。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CRM-OSI TP&lt;/strong&gt;接口 : 即XAP-TP接口，提供了CRM和OSITP&lt;span&gt;(Open Systems Interconnection — Distributed Transaction Processing)&lt;/span&gt;服务之间的编程接口。X/Open定义了这个接口来支持特定于应用程序的OSI服务的可移植实现。&lt;/li&gt;
&lt;li&gt;本节我们剖析了DTP模型，以及XA接口在DTP中的作用，下面我们来更详细的看一下XA规范。&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;3.2 XA规范&lt;/h2&gt;
&lt;p&gt;通过上面的分析，我们知道XA和XA+规范的使用场景，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/584866/201903/584866-20190320182535671-895733185.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面来具体看一下XA/XA+接口定义的函数群。其中带+号的是XA+规范，不带+号的是XA规范。&lt;/p&gt;
&lt;h3&gt;3.2.1 xa_*()函数群&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;TM通过xa_*()函数调用RM。&lt;/span&gt;&lt;/strong&gt;当AP调用TM启动全局事务时，TM可以使用xa_interface通知事务分支的RMs。AP使用RM的本机接口完成支持全局事务的工作后，TM调用xa_()函数提交或回滚分支。xa_()函数如下表所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/584866/201903/584866-20190321164802437-1676934346.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.2.2 ax_*()函数群&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;RM通过ax_*()函数调用TM。&lt;/span&gt;&lt;/strong&gt;所有的TMs都必须提供这些功能。这些函数允许RM动态地控制它在事务分支中的参与。此外，CRMs使用ax_interface创建事务分支，挂起或完成事务分支，并将承诺协议传播到事务分支。ax_()函数如下表所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/584866/201903/584866-20190321163228194-2097648988.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于XA/XA+的具体方法如何调用流程这里就不再提供。有兴趣的自己看规范原文。&lt;/p&gt;
&lt;h2&gt;3.3 两阶段提交-2PC&lt;/h2&gt;
&lt;p&gt;XA协议中有一个细节：&lt;span&gt;&lt;strong&gt;按照OSITP标准(模型)的定义，TMs和RMs使用两阶段提交全局事务。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3.3.1 XA的两阶段提交模型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/584866/201903/584866-20190322112253096-1553269283.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图，XA规范实现的两阶段提交流程：（下面全部翻译自XA规范原文）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;阶段1&lt;/strong&gt;&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;　　TM要求所有RMs&lt;span&gt;准备&lt;/span&gt;提交(或准备)事务分支。&lt;span&gt;这询问RM是否能够保证提交事务分支的能力。&lt;/span&gt;RM可能会查询该RM内部的其他实例。CRM被要求准备它们创建的事务分支,将prepare请求发送到远程站点并接收结果。在返回失败并回滚其工作之后，RM可以丢弃事务分支的信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;阶段2&lt;/span&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;　　TM根据实际情况&lt;span&gt;向所有RMs发出&lt;span&gt;提交或回滚&lt;/span&gt;事务分支的请求。&lt;/span&gt;CRM被要求&lt;span&gt;提交或回滚&lt;/span&gt;它们创建的事务分支,向远程站点发送提交或回滚请求并接收结果。所有RMs提交或回滚对共享资源的更改，然后将状态返回给TM。然后TM可以丢弃全局事务的信息。&lt;/p&gt;
&lt;h3&gt;3.3.2 XA对2PC的优化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.只读断言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　当事务分支没有更新共享资源时，这个RM会断言并响应给TM的prepare请求。也就免去了阶段2。但是，如果一个RM在全局事务的所有RMs返回prepared之前返回了只读优化，该RM释放事务上下文，例如read locks。&lt;span&gt;这时候其他事务就有机会去改变这些数据（可能是写锁），显然全局序列化被破坏。同样CRM也可以断言，当TM挂起或终止线程与事务分支的关联时，它不是某个特定线程中活动的事务分支的参与者。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.一阶段提交&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　如果一个TM知道DTP系统中只有一个RM在修改共享资源，那么它可以使用单阶段提交。即TM免去了阶段1的prepare，直接执行了阶段2的commit。&lt;/p&gt;
&lt;h3&gt;3.3.3 2PC的缺点&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.资源阻塞&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;由于协调者的重要性，一旦协调者TM发生故障。参与者RM会一直阻塞下去。尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于锁定事务资源的状态中，而无法继续完成事务操作。（如果是协调者挂掉，可以重新选举一个协调者，但是无法解决因为协调者宕机导致的参与者处于阻塞状态的问题）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.数据不一致&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;在阶段二，当协调者向参与者发送commit请求之后，发生了局部网络异常或者在发送commit请求过程中协调者发生了故障，导致只有一部分参与者接受到了commit请求。而在这部分参与者接到commit请求之后就会执行commit操作。但是其他部分未接到commit请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据不一致性的现象。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由于二阶段提交存在着这些缺陷，所以，研究者们在二阶段提交的基础上做了改进，提出了三阶段提交。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;3.4 三阶段提交-3PC&lt;/h2&gt;
&lt;p&gt;3PC,即Three-phase commit protocol，由一个协调者领导事务（领头人），和一组被指导的参与者（同伙）组成。协调者和参与者都有&lt;strong&gt;&lt;span&gt;超时执行机制&lt;/span&gt;&lt;/strong&gt;，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/584866/201903/584866-20190325094117210-573756212.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;阶段1：&lt;/p&gt;
&lt;p&gt;　　【协调者】接收事务请求。如果此时出现故障，协调者将中止事务，否则，协调者发送一个&lt;span&gt;&lt;strong&gt;canCommit&lt;/strong&gt;&lt;/span&gt;给所有参与者，并切换到&lt;strong&gt;&lt;span&gt;waiting&lt;/span&gt;&lt;/strong&gt;状态。&lt;/p&gt;
&lt;p&gt;　　【参与者】获得了canCommit的请求，如果同意，它将向协调者发送Yes消息并切换到&lt;strong&gt;&lt;span&gt;prepared&lt;/span&gt;&lt;/strong&gt;状态。否则它将发送No消息并中止。如果出现故障，它将移动到&lt;strong&gt;&lt;span&gt;abort&lt;/span&gt;&lt;/strong&gt;状态。&lt;/p&gt;
&lt;p&gt;阶段2：&lt;/p&gt;
&lt;p&gt;　　【协调者】在一个时间段内，接收来自所有参与者的Yes消息，向所有参与者发送&lt;span&gt;&lt;strong&gt;preCommit&lt;/strong&gt;&lt;span&gt;消息并切换到&lt;/span&gt;&lt;span&gt;prepared&lt;span&gt;状态。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;如果出现故障、超时或协调者（&lt;span&gt;&lt;strong&gt;prepared&lt;/strong&gt;状态&lt;/span&gt;）接收到No消息，将中止事务并向所有参与者发送&lt;span&gt;&lt;strong&gt;abort&lt;/strong&gt;&lt;/span&gt;消息。&lt;/p&gt;
&lt;p&gt;　　【参与者】收到&lt;span&gt;&lt;strong&gt;preCommit&lt;/strong&gt;&lt;span&gt;消息，它将发送&lt;/span&gt;&lt;span&gt;ACK&lt;span&gt;消息并等待最后的提交或中止。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;如果接收到中止消息、失败或等待提交的超时，它将中止。&lt;/p&gt;
&lt;p&gt;阶段3：&lt;/p&gt;
&lt;p&gt;　　【协调者】在收到来自大多数参与者的确认的情况下，协调者切换到&lt;strong&gt;&lt;span&gt;commit&lt;/span&gt;&lt;/strong&gt;状态。&lt;span&gt;并向所有参与者发送&lt;strong&gt;&lt;span&gt;doCommit&lt;/span&gt;&lt;/strong&gt;请求。&lt;/span&gt;如果协调者在等待一个参与者的ack时超时了，它将中止事务。&lt;/p&gt;
&lt;p&gt;　　【参与者】&lt;span&gt;参与者接收到&lt;strong&gt;&lt;span&gt;doCommit&lt;/span&gt;&lt;/strong&gt;请求之后，执行正式的事务提交，并发送ack给协调者。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;3.5 总结&lt;/h2&gt;
&lt;p&gt;上面讲解了2pc、xa、3pc，比较如下：&lt;/p&gt;
&lt;table dir=&quot;ltr&quot; border=&quot;1&quot; frame=&quot;border&quot; rules=&quot;all&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;8.5&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;协议/优缺点&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;优点&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;缺点&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8.5&quot;&gt;&lt;td&gt;&lt;span&gt;2PC&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;逻辑简单，容易理解。&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span&gt;1.&lt;span&gt;全程阻塞&lt;/span&gt;。例如：TM故障，RM阻塞资源。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.网络故障时，部分commit,数据一致性无法保证。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;&lt;span&gt;XA（提交时使用2PC规范）&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;1.只读断言&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.可进化为一阶段提交&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span&gt;全局序列化被破坏。脏读问题。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td&gt;&lt;span&gt;3PC&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;引入双边超时机制，避免阻塞。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;1.需要3次请求返回，可能会有长延迟，性能低。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.基于失败-停止(fail-stop)模型，出现网络问题，无法恢复。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;









&lt;p&gt;问题：&lt;/p&gt;
&lt;p&gt;上面3种协议都无法解决&lt;span&gt;分布式系统下的数据一致性&lt;/span&gt;问题，只有&lt;span&gt;Paxos算法，才能彻底解决该问题。paxos飞机票：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;singleposttitle&quot; href=&quot;https://www.cnblogs.com/dennyzhangdd/p/6781688.html&quot;&gt;底层算法系列：Paxos算法&lt;/a&gt;。具体实践中，为了提高可用性（性能）一般很少做到强一致性&lt;/span&gt;。且大批的技术先驱们已经总结出了一套理论，让我们有理可依。&lt;/p&gt;
&lt;h2&gt;4.CAP理论&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;2000年7月，Eric Brewer教授在ACM PODC会议上提出CAP猜想。Brewer认为在设计一个大规模的分布式系统时会遇到三个特性：一致性（consistency）、可用性（Availability）、分区容错（partition-tolerance），而一个分布式系统最多只能满足其中的2项。2年后，麻省理工学院的Seth Gilbert和Nancy Lynch从理论上证明了CAP。之后，CAP理论正式成为分布式计算领域的公认定理。 &lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/584866/201903/584866-20190325150446880-1495099178.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 一致性（Consistency）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一致性指“all nodes see the same data at the same time”，即更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致，不能存在中间状态。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;强一致性&lt;/span&gt;&lt;/strong&gt;：&lt;span&gt;所有节点在同一时间的数据完全一致&lt;/span&gt;，那么称之为强一致性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;弱一致性&lt;/span&gt;&lt;/strong&gt;：此外，如果允许存在部分数据不一致，那么就称之为弱一致性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;最终一致性&lt;/span&gt;&lt;/strong&gt;：如果允许存在中间状态，只要求经过一段时间后，数据最终是一致的，则称之为最终一致性。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 可用性(Availability)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;可用性是指系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3. 分区容错性(Partition tolerance)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    分区容错的意思是，节点间通信可能失败，仍然需要能够保证对外提供满足一致性和可用性的服务。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;4.1 分析&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;首先我们&lt;strong&gt;&lt;span&gt;必须保证P&lt;/span&gt;&lt;/strong&gt;（分区容错性）,才能称之为一个分布式系统，因此只能&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;在C（一致性）和A（可用性）之间寻求平衡&lt;/strong&gt;&lt;/span&gt;。而前面我们提到的X/Open XA 两阶段提交协议的分布式事务方案，强调的就是一致性。并且由于其阻塞执行效率低，且当网络出现问题时也无法真正保证数据一致性，实际应用的并不多。而基于BASE理论的柔性事务，强调的是可用性，目前大行其道，大部分互联网公司采可能会优先采用这种方案。（有的同学问为啥不用paxos？实现过于复杂,且保证了强一致性，想一想也知道性能会有损耗，所以一般也不用！）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;5.BASE理论&lt;/h2&gt;
&lt;p&gt;eBay的架构师Dan Pritchett源于对大规模分布式系统的实践总结，在ACM上发表文章提出BASE理论。文章链接：&lt;a href=&quot;https://queue.acm.org/detail.cfm?id=1394128&quot;&gt;https://queue.acm.org/detail.cfm?id=1394128&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    BASE理论是对CAP理论的延伸，核心思想是即使无法做到强一致性（Strong Consistency，CAP的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。    &lt;/p&gt;
&lt;p&gt;BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的缩写。&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;1. 基本可用（Basically Available）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        指分布式系统在出现不可预知故障的时候，允许损失部分可用性。&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;2. 软状态（ Soft State）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性。&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;3. 最终一致（ Eventual Consistency）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        强调的是所有的数据更新操作，在经过一段时间的同步之后，最终都能够达到一个一致的状态。&lt;/p&gt;
&lt;p&gt;    BASE理论面向的是大型高可用可扩展的分布式系统，和传统的事物ACID特性是相反的。&lt;strong&gt;&lt;span&gt;通过牺牲强一致性来获得可用性，允许数据在一段时间内是不一致的，但最终达到一致状态。&lt;/span&gt;&lt;/strong&gt;实际应用中，会在对数据库操作进行&lt;span&gt;&lt;strong&gt;本地事务（ACID特性）+Eventually consistent最终一致性（BASE理论）结合使用&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么如何实现分布式环境下数据的最终一致性呢？&lt;/p&gt;
&lt;h2&gt;6.最终一致性方案（柔性事务）&lt;/h2&gt;
&lt;p&gt;实践中，有些高可用场景下，不必要强一致性，只需要最终一致性即可，这在业内称呼为&quot;柔性事务&quot;，也就是最终一致性方案，是遵循BASE理论设计出来的。&lt;/p&gt;
&lt;h3&gt;6.1 正向&lt;span&gt;幂等&lt;/span&gt;重试+反向&lt;span&gt;异步回调&lt;/span&gt;（最大努力通知型）&lt;/h3&gt;
&lt;p&gt;对于某些非核心service，可以采取正向重试机制。比如一个请求超时失败了，可以再重试请求几次，一直到接收到成功返回或者达到重试次数为止。注意这里要&lt;strong&gt;&lt;span&gt;保证接口的幂等性&lt;/span&gt;&lt;/strong&gt;。即多次调用结果一样。&lt;/p&gt;
&lt;p&gt;很多调用第三方的接口（比如征信接口，耗时比较长），接口是异步回调型。请求方发送请求后，等待第三方异步回调自己的返回结果接口。&lt;/p&gt;
&lt;p&gt;这两种机制都是不可靠的，必要时刻可以两者相结合使用。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/584866/201903/584866-20190329115413804-955358639.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;6.2 &lt;span&gt;可靠消息最终一致&lt;/span&gt;（&lt;span&gt;异步确保&lt;/span&gt;型）&lt;/h3&gt;
&lt;p&gt;可靠消息就是使用独立的消息服务，把消息提前入库，业务确定执行完毕，再修改消息状态为可发送，然后再发送消息给MQ,消费者再消费。&lt;strong&gt;&lt;span&gt;注意这里为什么要使用预发送机制：比如先业务，再直推消息，可能立刻就消费了。是无法回滚发出去的消息的。使用预发送机制，保证了消息服务DB中有一条预发送的消息记录。这样可以在消息服务中轮询预发送的消息（图中没有画出），再去查询业务系统是否成功，如果成功则自修复成待发送状态。这种双边机制比较可靠。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/584866/201903/584866-20190329190434495-640940594.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;6.3 TCC（两阶段&lt;span&gt;补偿&lt;/span&gt;型）&lt;/h3&gt;

&lt;p&gt;TCC 其实就是采用的补偿机制，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。TCC 实质上是应用层的2PC(2 PhaseCommit, 两阶段提交)，好比把 XA 两阶段提交那种在数据资源层做的事务管理工作提到了数据应用层。TCC流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/584866/201903/584866-20190329151338917-659465435.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;如上图所示，步骤：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    主业务活动请求(try)各个从业务服务预留资源。try过程的本地事务，是保证资源预留的业务逻辑的正确性。&lt;/p&gt;
&lt;p&gt;    如果在第一阶段所有业务资源都预留成功，那么confirm各个从业务服务，否则取消(cancel)所有从业务服务的资源预留请求。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;优点:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;相比XA是资源层面的分布式事务，强一致性，在两阶段提交的整个过程中，一直会持有资源的锁。&lt;/p&gt;
&lt;p&gt;TCC是业务层面的分布式事务，最终一致性，&lt;span&gt;&lt;strong&gt;不会一直持有资源的锁&lt;/strong&gt;&lt;/span&gt;。confirm/cancel执行的本地事务逻辑确认/取消预留资源，confirm和cancel就是&lt;span&gt;&lt;code class=&quot;cCode&quot;&gt;补偿型事务&lt;/code&gt;(Compensation-Based Transactions)。注意：confirm和cancel都是独立的本地事务，是对try的补偿。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;针对一个请求，需要从业务服务提供3个接口，供主业务服务调用，业务方改造成本高。&lt;/p&gt;

&lt;p&gt;====参考=======&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.tianshouzhi.com/api/tutorials/distributed_transaction&quot; target=&quot;_blank&quot;&gt;分布式事务&lt;/a&gt; ：第一节很多都是参考本文，写的不错。&lt;/p&gt;
</description>
<pubDate>Fri, 29 Mar 2019 11:12:00 +0000</pubDate>
<dc:creator>只会一点java</dc:creator>
<og:description>一、引子 事务（数据库事务）是java开发工程师必须掌握的一项技能。又可分为本地事务和分布式事务，其中分布式事务是进阶为高级开发工程师必会的技能。本文从概念、原理、实践多角度剖析分布式事务，希望有所收</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dennyzhangdd/p/10580446.html</dc:identifier>
</item>
<item>
<title>通过实现一个简易打包工具，分析打包的原理 - 润物_无声</title>
<link>http://www.cnblogs.com/lcy-snail/p/10623237.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lcy-snail/p/10623237.html</guid>
<description>&lt;h4 id=&quot;概述&quot;&gt;概述&lt;/h4&gt;
&lt;p&gt;眼下wepack似乎已经成了前端开发中不可缺少的工具之一，而他的一切皆模块的思想随着webpack版本不断的迭代（webpack 4）使其打包速度更快，效率更高的为我们的前端工程化服务&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1114695/201903/1114695-20190329184737990-1896288134.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;相信大家使用webpack已经很熟练了，他通过一个配置对象，其中包括对入口，出口，插件的配置等，然后内部根据这个配置对象去对整个项目工程进行打包，从一个js文件切入(此为单入口，当然也可以设置多入口文件打包),将该文件中所有的依赖的文件通过特定的loader和插件都会按照我们的需求为我们打包出来，这样在面对当前的ES6、scss、less、postcss就可以畅快的尽管使用，打包工具会帮助我们让他们正确的运行在浏览器上。可谓是省时省力还省心啊。&lt;/p&gt;
&lt;p&gt;那当下的打包工具的核心原理是什么呢？今天就来通过模拟实现一个小小的打包工具来为探究一下他的核心原理喽。文中有些知识是点到，没有深挖，如果有兴趣的可以自行查阅资料。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;功力尚浅，只是入门级的了解打包工具的核心原理，简单的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;项目地址&quot;&gt;项目地址&lt;/h4&gt;
&lt;p&gt;Pack：&lt;a href=&quot;https://github.com/liuchengying/Pack&quot; class=&quot;uri&quot;&gt;https://github.com/liuchengying/Pack&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;原理&quot;&gt;原理&lt;/h4&gt;
&lt;p&gt;当我们更加深入的去了解javascript这门语言时，去知道javascript更底层的一些实现，对我们理解好的开源项目是由很多帮助的，当然对我们自身技术提高会有更大的帮助。&lt;br/&gt;javascript是一门弱类型的解释型语言，也就是说在我们执行前不需要编译器来编译出一个版本供我们执行，对于javascript来说也有编译的过程，只不过大部分情况下编译发生在代码执行前的几微秒，编译完成后会尽快的执行。也就是根据代码的执行去动态的编译。而在编译过程中通过语法和词法的分析得出一颗语法树，我们可以将它称为&lt;strong&gt;AST&lt;/strong&gt;【&lt;strong&gt;抽象语法树（Abstract Syntax Tree）也称为AST语法树，指的是源代码语法所对应的树状结构。也就是说，一种编程语言的源代码，通过构建语法树的形式将源代码中的语句映射到树中的每一个节点上。&lt;/strong&gt;】。而这个AST却恰恰使我们分析打包工具的重点核心。&lt;/p&gt;
&lt;p&gt;我们都熟悉babel，他让前端程序员很爽的地方在于他可以让我们畅快的去书写ES6、ES7、ES8.....等等，而他会帮我们统统都转成浏览器能够执行的ES5版本，它的核心就是通过一个&lt;strong&gt;babylon&lt;/strong&gt;的js词法解析引擎来分析我们写的ES6以上的版本语法来得到AST(抽象语法树)，再通过对这个语法树的深度遍历来对这棵树的结构和数据进行修改。最终转通过整理和修改后的AST生成ES5的语法。这也就是我们使用babel的主要核心。一下是语法树的示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要转换的文件（index.js）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    // es6  index.js
    import add from './add.js'
    let sum = add(1, 2);
    export default sum
    // ndoe build.js
    const fs = require('fs')
    const babylon = require('babylon')

    // 读取文件内容
    const content = fs.readFileSync(filePath, 'utf-8')
    // 生成 AST 通过babylon
    const ast = babylon.parse(content, {
        sourceType: 'module'
    })
    console.log(ast)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;执行文件(在node环境下build.js)&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    // node build.js
    // 引入fs 和 babylon引擎
    const fs = require('fs')
    const babylon = require('babylon')

    // 读取文件内容
    const content = fs.readFileSync(filePath, 'utf-8')
    // 生成 AST 通过babylon
    const ast = babylon.parse(content, {
        sourceType: 'module'
    })
    console.log(ast)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;生成的AST&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    ast = {
        ...
        ...
        comments:[],
        tokens:[Token {
                    type: [KeywordTokenType],
                    value: 'import',
                    start: 0,
                    end: 6,
                    loc: [SourceLocation] },
                Token {
                    type: [TokenType],
                    value: 'add',
                    start: 7,
                    end: 10,
                    loc: [SourceLocation] },
                Token {
                    type: [TokenType],
                    value: 'from',
                    start: 11,
                    end: 15,
                    loc: [SourceLocation] },
                Token {
                    type: [TokenType],
                    value: './add.js',
                    start: 16,
                    end: 26,
                    loc: [SourceLocation] },
                Token {
                    type: [KeywordTokenType],
                    value: 'let',
                    start: 27,
                    end: 30,
                    loc: [SourceLocation] },
                Token {
                    type: [TokenType],
                    value: 'sum',
                    start: 31,
                    end: 34,
                    loc: [SourceLocation] },
                ...
                ...
                Token {
                    type: [KeywordTokenType],
                    value: 'export',
                    start: 48,
                    end: 54,
                    loc: [SourceLocation] },
                Token {
                    type: [KeywordTokenType],
                    value: 'default',
                    start: 55,
                    end: 62,
                    loc: [SourceLocation] },
                Token {
                    type: [TokenType],
                    value: 'sum',
                    start: 63,
                    end: 66,
                    loc: [SourceLocation] },
            ]
   }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的示例就是分析出来的AST语法树。&lt;strong&gt;babylon&lt;/strong&gt;在分析源代码的时候，会逐个字母的像扫描机一样读取，然后分析得出语法树。(关于语法树和babylon可以参考 &lt;a href=&quot;https://www.jianshu.com/p/019d449a9282&quot; class=&quot;uri&quot;&gt;https://www.jianshu.com/p/019d449a9282&lt;/a&gt;)。通过遍历对他的属性或者值进行修改根据相应的算法规则重新组成代码。当分析我们正常的js文件时，往往得到的AST会很大甚至几万、几十万行，所以需要很优秀的算法才能保证速度和效率。下面本项目中用到的是&lt;strong&gt;babel-traverse&lt;/strong&gt;来解析AST。对算法的感兴趣的可以去了解一下。以上部分讲述的知识点并没有深入，原因如题目，只是要探索出打包工具的原理，具体知识点感兴趣的自己去了解下吧。原理部分大概介绍到这里吧，下面开始施实战。&lt;/p&gt;
&lt;h2 id=&quot;项目目录&quot;&gt;项目目录&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;    ├── README.md
    ├── package.json
    ├── src
    │   ├── lib
    │   │   ├── bundle.js // 生成打包后的文件
    │   │   ├── getdep.js // 从AST中获得文件依赖关系
    │   │   └── readcode.js //读取文件代码，生成AST，处理AST,并且转换ES6代码
    │   └── pack.js // 向外暴露工具入口方法
    └── yarn.lock&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;思维导图&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1114695/201903/1114695-20190329184755502-485525666.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过思维导图可以更清楚罗列出来思路&lt;/p&gt;
&lt;h2 id=&quot;具体实现&quot;&gt;具体实现&lt;/h2&gt;
&lt;p&gt;流程梳理中发现，重点是找到每个文件中的依赖关系，我们用&lt;strong&gt;deps&lt;/strong&gt;来收集依赖。从而通过依赖关系来模块化的把依赖关系中一层一层的打包。下面一步步的来实现&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;主要通过 代码 + 解释 的梳理过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;读取文件代码&quot;&gt;读取文件代码&lt;/h4&gt;
&lt;p&gt;首先，我们需要一个入口文件的路径，通过node的fs模块来读取指定文件中的代码，然后通过以上提到的babylon来分析代码得到AST语法树，然后通过babel-traverse库来从AST中获得代码中含有import的模块(路径)信息，也就是依赖关系。我们把当前模块的所有依赖文件的相对路径都push到一个deps的数组中。以便后面去遍历查找依赖。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    const fs = require('fs')
    // 分析引擎
    const babylon = require('babylon')
    // traverse 对语法树遍历等操作
    const traverse = require('babel-traverse').default
    // babel提供的语法转换
    const { transformFromAst } = require('babel-core')
    // 读取文件代码函数
    const readCode = function (filePath) {
        if(!filePath) {
            throw new Error('No entry file path')
            return
        }
        // 当前模块的依赖收集
        const deps = []
        const content = fs.readFileSync(filePath, 'utf-8')
        const ast = babylon.parse(content, { sourceType: 'module' })
        // 分析AST，从中得到import的模块信息（路径）
        // 其中ImportDeclaration方法为当遍历到import时的一个回调
        traverse(ast, {
            ImportDeclaration: ({ node }) =&amp;gt; {
                // 将依赖push到deps中
                // 如果有多个依赖，所以用数组
                deps.push(node.source.value)
            }
        })
        // es6 转化为 es5
        const {code} = transformFromAst(ast, null, {presets: ['env']})
        // 返回一个对象
        // 有路径，依赖，转化后的es5代码
        // 以及一个模块的id（自定义）
        return {
            filePath,
            deps,
            code,
            id: deps.length &amp;gt; 0 ? deps.length - 1 : 0
        }
}

module.exports = readCode&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相信上述代码是可以理解的，代码中的注释写的很详细，这里就不在多啰嗦了。需要注意的是，babel-traverse这个库关于api以及详细的介绍很少，可以通过其他途径去了解这个库的用法。&lt;br/&gt;另外需要在强调一下的是最后函数的返回值，是一个对象，该对象中包含的是当前这个文件（模块）中的一些重要信息，deps中存放的就是当前模块分析得到的所有依赖文件路径。最后我们需要去递归遍历每个模块的所有依赖，以及代码。后面的依赖收集的时候会用到。&lt;/p&gt;
&lt;h4 id=&quot;依赖收集&quot;&gt;依赖收集&lt;/h4&gt;
&lt;p&gt;通过上面的读取文件方法我们得到返回了一个关于单个文件(模块)的一些重要信息。&lt;strong&gt;filePath&lt;/strong&gt;(文件路径),&lt;strong&gt;deps&lt;/strong&gt;(该模块的所有依赖),&lt;strong&gt;code&lt;/strong&gt;(转化后的代码),&lt;strong&gt;id&lt;/strong&gt;(该对象模块的id)&lt;br/&gt;我们通过定义&lt;strong&gt;deps&lt;/strong&gt;为一个数组，来存放所有依赖关系中每一个文件(模块)的以上重要信息对象&lt;br/&gt;接下来我们通过这个单文件入口的依赖关系去搜集该模块的依赖模块的依赖，以及该模块的依赖模块的依赖模块的依赖......我们通过递归和循环的方式去执行readCode方法，每执行一次将readCode返回的对象push到deps数组中，最终得到了所有的在依赖关系链中的每一个模块的重要信息以及依赖。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    const readCode = require('./readcode.js')
    const fs = require('fs')
    const path = require('path')
    const getDeps = function (entry) {
        // 通过读取文件分析返回的主入口文件模块的重要信息  对象
        const entryFileObject = readCode(entry)
        // deps 为每一个依赖关系或者每一个模块的重要信息对象 合成的数组
        // deps 就是我们提到的最终的核心数据，通过他来构建整个打包文件
        const deps = [entryFileObject ? entryFileObject : null]
        // 对deps进行遍历 
        // 拿到filePath信息，判断是css文件还是js文件
        for (let obj of deps) {
            const dirname = path.dirname(obj.filePath)
            obj.deps.forEach(rPath =&amp;gt; {
                const aPath = path.join(dirname, rPath)
                if (/\.css/.test(aPath)) {
                    // 如果是css文件，则不进行递归readCode分析代码，
                    // 直接将代码改写成通过js操作写入到style标签中
                    const content = fs.readFileSync(aPath, 'utf-8')
                    const code = `
                    var style = document.createElement('style')
                    style.innerText = ${JSON.stringify(content).replace(/\\r\\n/g, '')}
                    document.head.appendChild(style)
                    `
                    deps.push({
                        filePath: aPath,
                        reletivePaht: rPath,
                        deps,
                        code,
                        id: deps.length &amp;gt; 0 ? deps.length : 0
                    })
                } else {
                    // 如果是js文件  则继续调用readCode分析该代码
                    let obj = readCode(aPath)
                    obj.reletivePaht = rPath
                    obj.id = deps.length &amp;gt; 0 ? deps.length : 0
                    deps.push(obj)
                }
            })
        }
        // 返回deps
        return deps
    }

module.exports = getDeps&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可能在上述代码中有疑问也许是在对deps遍历收集全部依赖的时候，又循环又重复调用的可能有一点绕，还有一点可能就是对于deps这个数组最后究竟要干什么用，没关系，继续往下看，后面就会懂了。&lt;/p&gt;
&lt;h4 id=&quot;输出文件&quot;&gt;输出文件&lt;/h4&gt;
&lt;p&gt;到现在，我们已经可以拿到了所有文件以及对应的依赖以及文件中的转换后的代码以及id，是的，就是我们上一节中返回的&lt;strong&gt;deps&lt;/strong&gt;（就靠它了）,可能在上一节还会有人产生疑问，接下来，我们就直接上代码，慢慢道来慢慢解开你的疑惑。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    const fs = require('fs')
    // 压缩代码的库   
    const uglify = require('uglify-js')
    // 四个参数
    // 1. 所有依赖的数组   上一节中返回值
    // 2. 主入口文件路径
    // 3. 出口文件路径
    // 4. 是否压缩输出文件的代码
    // 以上三个参数，除了第一个deps之外，其他三个都需要在该项目主入口方法中传入参数，配置对象
    const bundle = function (deps, entry, outPath, isCompress) {
        let modules = ''
        let moduleId
        deps.forEach(dep =&amp;gt; {
            var id = dep.id
            // 重点来了
            // 此处，通过deps的模块「id」作为属性，而其属性值为一个函数
            // 函数体为 当前遍历到的模块的「code」，也就是转换后的代码
            // 产生一个长字符
            // 0：function(......){......},
            // 1: function(......){......}
            // ...
            modules = modules + `${id}: function (module, exports, require) {${dep.code}},`
        });
        // 自执行函数，传入的刚才拼接的对象，以及deps
        // 其中require使我们自定义的,模拟commonjs中的模块化
        let result = `
            (function (modules, mType) {
                function require (id) {
                    var module = { exports: {}}
                    var module_id = require_moduleId(mType, id)
                    modules[module_id](module, module.exports, require)
                    return module.exports
                }
                require('${entry}')
            })({${modules}},${JSON.stringify(deps)});
            function require_moduleId (typelist, id) {
                var module_id
                typelist.forEach(function (item) {
                    if(id === item.filePath || id === item.reletivePaht){
                        module_id = item.id
                    }
                })
                return module_id
            }
        `
        // 判断是否压缩
        if(isCompress) {
            result = uglify.minify(result,{ mangle: { toplevel: true } }).code
        }
        // 写入文件 输出
        fs.writeFileSync(outPath + '/bundle.js', result)
        console.log('打包完成【success】（./bundle.js）')
    }

    module.exports = bundle&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里还是要在详细的叙述一下。因为我们要输出文件，顾出现了大量的字符串。&lt;br/&gt;&lt;strong&gt;解释1：modules字符串&lt;/strong&gt;&lt;br/&gt;modules字符串最后通过遍历deps得到的字符串为&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    modules = `
        0：function (module, module.exports, require){相应模块的代码},
        1: function (module, module.exports, require){相应模块的代码},
        2: function (module, module.exports, require){相应模块的代码},
        3: function (module, module.exports, require){相应模块的代码},
        ...
        ...
    `&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果我们在字符串的两端分别加上”{“和”}“，如果当成代码执行的话那不就是一个对象了吗？对啊，这样0，1，2，3...就变成了属性，而属性的值就是一个函数，这样就可以通过属性直接调用函数了。而这个函数的内容就是我们需要打包的每个模块的代码经过babel转换之后的代码啊。&lt;br/&gt;&lt;strong&gt;解释2：result字符串&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    // 自执行函数 将上面的modules字符串加上{}后传入（对象）
    (function (modules, mType) {
        // 自定义require函数，模拟commonjs中的模块化
        function require (id) {
            // 定义module对象，以及他的exports属性
            var module = { exports: {}}
            // 转化路径和id，已调用相关函数
            var module_id = require_moduleId(mType, id)
            // 调用传进来modules对象的属性的函数
            modules[module_id](module, module.exports, require)
            return module.exports
        }
        require('${entry}')
    })({${modules}},${JSON.stringify(deps)});

    // 路径和id对应转换，目的是为了调用相应路径下对应的id属性的函数
    function require_moduleId (typelist, id) {
        var module_id
        typelist.forEach(function (item) {
            if(id === item.filePath || id === item.reletivePaht){
                module_id = item.id
            }
        })
        return module_id
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至于为什么我们要通过require_modulesId函数来转换路径和id的关系呢，这要先从babel吧ES6转成ES5说起，下面列出一个ES6转ES5的例子&lt;br/&gt;&lt;strong&gt;ES6代码&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    import a from './a.js'
    let b = a + a
    export default b&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;ES5代码&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    'use strict';

    Object.defineProperty(exports, &quot;__esModule&quot;, {
        value: true
    });

    var _a = require('./a.js');

    var _a2 = _interopRequireDefault(_a);
    function _interopRequireDefault(obj) { return obj &amp;amp;&amp;amp; obj.__esModule ? obj : { default: obj }; }
    var b = _a2.default + _a2.default;
    
    exports.default = b;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;1.以上代码为转化前和转换后，有兴趣的可以去&lt;a href=&quot;https://www.babeljs.cn/repl/#?babili=false&amp;amp;browsers=&amp;amp;build=&amp;amp;builtIns=false&amp;amp;code_lz=JYWwDg9gTgLgBAQzgMyhEcDkA6A9A7AKwGdMAoAGwFN4AjOAXkTgGpEyqAPSWOAEyrIEAVwp0gA&amp;amp;debug=false&amp;amp;forceAllTransforms=false&amp;amp;shippedProposals=false&amp;amp;circleciRepo=&amp;amp;evaluate=true&amp;amp;fileSize=false&amp;amp;lineWrap=false&amp;amp;presets=latest%2Creact%2Cstage-2&amp;amp;prettier=false&amp;amp;targets=&amp;amp;version=6.26.0&amp;amp;envVersion=&quot;&gt;babel官网&lt;/a&gt;试试，可以发现转换后的这一行代码**var _a = require('./a.js');**，他为我们转换出来的require的参数是文件的路径，而我们需要调用的相对应的模块的函数其属性值都是以id(0,1,2,3...)命名的，所以需要转换&lt;br/&gt;2.还有一点可能有疑问的就是为什么会用function (module, module.exports, require){...}这样的commonjs模块化的形式呢，原因是babel为我们转后后的代码模块化采用的就是commonjs的规范。&lt;/p&gt;
&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;最后一步就是我们去封装一下，向外暴露一个入口函数就可以了。这一步效仿一下webpack的api，一个pack方法传入一个config配置对象。这样就可以在package.json中写scripts脚本来npm/yarn来执行了。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    const getDeps = require('./lib/getdep')
    const bundle = require('./lib/bundle')

    const pack = function (config) {
    if(!config.entryPath || !config.outPath) {
        throw new Error('pack工具：请配置入口和出口路径')
        return
    }
    let entryPath = config.entryPath
    let outPath = config.outPath
    let isCompress = config.isCompression || false

    let deps = getDeps(entryPath)
    bundle(deps, entryPath, outPath, isCompress)

}

module.exports = pack&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;传入的config只有是三个属性，entryPath，outPath，isCompression。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;一个简单的实现，只为了探究一下原理，并没有完善的功能和稳定性。希望对看到的人能有帮助&lt;/p&gt;
&lt;p&gt;打包工具，首先通过我们代码文件进行词法和语法的分析，生成AST，再通过处理AST，最终变换成我们想要的以及浏览器能兼容的代码，收集每一个文件的依赖，最终形成一个依赖链，然后通过这个依赖关系最后输出打包后的文件。&lt;/p&gt;
&lt;p&gt;初来乍到，稳重有解释不当或错的地方，还请多理解，有问题可以在评论区交流。还有别忘了你的👍...&lt;/p&gt;
</description>
<pubDate>Fri, 29 Mar 2019 10:46:00 +0000</pubDate>
<dc:creator>润物_无声</dc:creator>
<og:description>概述 眼下wepack似乎已经成了前端开发中不可缺少的工具之一，而他的一切皆模块的思想随着webpack版本不断的迭代（webpack 4）使其打包速度更快，效率更高的为我们的前端工程化服务 相信大家</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lcy-snail/p/10623237.html</dc:identifier>
</item>
</channel>
</rss>