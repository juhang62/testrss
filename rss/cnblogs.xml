<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>为什么要写设计文档 - 涛姐涛哥</title>
<link>http://www.cnblogs.com/taojietaoge/p/10770738.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/taojietaoge/p/10770738.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;My beloved woman love a man, please take good care of her.&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;为什么要写设计文档&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们在开发之前，为什么要写设计文档呢？我之前对设计文档就不怎么感冒，上头叫我写，我没怎么想写，也真的没写；然后过了两天又叫写，于是我就草拟来100来个字，写的是真的不行，后知后觉，写的是真JB烂，写成这样下面这样，说好听就是太简单了，难听点就是WTF，写成这样的话高手想指点下都难：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580332/201904/1580332-20190425195329633-847603641.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;虽然后知后觉，但迟到总比不到好；当时记得开发周期快到了，然后和我过了下进度，发现我的思路走偏了，凉凉；然后让我再细化设计文档，感觉真心好，早就应该详细些设计文档了；细化了设计文档之后，带我飞的杨总-高级程序员的水平显露无疑，文档中的批注修改意见仅仅花了5分钟这样就OK了，了解一下；当时我就有一种后背发凉的感觉“每个不曾起舞的日子，都是对生命的辜负”；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;随便截了一部分细化后的设计文档，重点是右边的批注，高水准显露无疑：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580332/201904/1580332-20190425201012208-335630358.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580332/201904/1580332-20190425201036302-321636282.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此次开发设计文档事件后，让我深深感受到了设计文档的重要性，再小结下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;怎么写设计文档：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据用户在界面的操作流程来写开发设计文档思路会很清晰，想象着自己就是用户，下一步要怎么操作，点击哪里，然后前端会发送什么请求，请求在会有哪些参数，到了后台我需要怎么处理，这里就可能设计到一些技术比如缓存是用cache、redis，还是Map缓存呢之类的，然后又要返回给用户什么信息，到了前台页面又要如何展示，这样一步步下来思路就比较清晰了比较OK的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;为什么要写设计文档：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 有了详细的设计文档，编码的时候就可以畅通无阻了，就算是没有设计文档，没有细化的设计文档，到了编码的时候同样会阻塞；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 有了设计文档，后面可以直接方便的出接口文档和测试用例，对着设计文档的要点，很方便的写出测试用例；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3. 写设计文档，把关键的流程梳理出来，过了几个月之后自己看代码不知道当时为什么这么写的，还可以从设计文档一探究竟；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4. 最重要的一点就是（目前对我而已），出了设计文档，身边有大佬会给你指点，可以保证我们大的方向没有错，设计不当之处可以马上得到纠正，模糊不清的部分也会马上有了思路，大大减少了开发的时间和降低了编码的难度，也提高来团队及公司的工作效率；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5. So，设计文档要速度出，切勿怕出错，问题要及早暴露，出来混总是要还的，小老弟；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6. 设计文档至少要把大致关键的流程梳理出来，以及用到的实现技术，这样不仅编码畅通无阻，更重要的是会有人指点，勿怕设计文档会暴露出自己贼菜，内容至少如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580332/201904/1580332-20190426013741348-172808303.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 25 Apr 2019 17:21:00 +0000</pubDate>
<dc:creator>涛姐涛哥</dc:creator>
<og:description>My beloved woman love a man, please take good care of her. 为什么要写设计文档 我们在开发之前，为什么要写设计文档呢？我之前对设计文档就不怎么</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/taojietaoge/p/10770738.html</dc:identifier>
</item>
<item>
<title>闭包和作用域 - 凡尘yang</title>
<link>http://www.cnblogs.com/yangboy/p/10772099.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangboy/p/10772099.html</guid>
<description>&lt;p&gt;&lt;span&gt;我大前端全靠JavaScript吃饭，而闭包和作用域也是JavaScript中的核心，其实在开发过程中我们经常用到闭包，常见到我们自己都不知道自己用了。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;啥是闭包？&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;闭包和作用域有啥关系&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;闭包的使用场景&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;写一个闭包的实例&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;1 闭包的概念和原理真的不想说，有的详解看的很晕，牵涉到js语法和执行环境，执行机制等，所以不谈。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2 闭包和作用域肯定是会被同时谈到的，一个变量（自由变量）到底取哪个值取决于它所能用到的作用域。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;请看下面这个例子：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1641685/201904/1641685-20190425235900140-332288059.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1641685/201904/1641685-20190425235939936-619480664.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;上面的写法错误的原因是在点击的时候，i变量早就变成了10（或者你也可以这么理解：对dom的事件操作是属于异步的，所以不用说肯定这时候同步的任务早就结束了，i都更新到10且停止更新）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SO! 用闭包来保护我们的 i 变量吧，请看下面的写法：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1641685/201904/1641685-20190426000943891-1481214756.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1641685/201904/1641685-20190426001009832-207354141.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;上面的写法ok,原因在于把每一次的i变量当作参数传给 一个自调函数，而参数被当时的i赋值后存在于函数内部作用域，是受到保护的，&lt;/p&gt;
&lt;p&gt;不管外面i 发生了什么也不会变。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3 闭包的一个实例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  场景：假如有这样一个需求，点击一个收藏图标（暂不考虑取消收藏逻辑），我们调用一个预先写好的函数，这个函数会判断某个用户是否已经点击了，如果没有点击就高亮收藏，如果点击过了就提示已经收藏。请看下面的代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1641685/201904/1641685-20190426010620614-71753054.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1641685/201904/1641685-20190426010643147-1864277778.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面实例中的定义的变量  &lt;span&gt;_list&lt;/span&gt; 处在函数闭包中，属于私有变量，初衷是不希望它被随意的改变，只能通过用户点击时候的判断。&lt;/p&gt;
&lt;p&gt;而 return 函数中使用到的 _list 是自由变量，它的值需要在本作用域查找，如果没有就去父级作用域查找。而这一系列查找就是 作用域链。&lt;/p&gt;

&lt;p&gt;总结：闭包使得变量的权限收到保护和收敛，减少被污染的可能性。&lt;/p&gt;

</description>
<pubDate>Thu, 25 Apr 2019 17:17:00 +0000</pubDate>
<dc:creator>凡尘yang</dc:creator>
<og:description>我大前端全靠JavaScript吃饭，而闭包和作用域也是JavaScript中的核心，其实在开发过程中我们经常用到闭包，常见到我们自己都不知道自己用了。 啥是闭包？ 闭包和作用域有啥关系 闭包的使用场</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangboy/p/10772099.html</dc:identifier>
</item>
<item>
<title>zookeeper源码 — 二、集群启动—leader选举 - lacker</title>
<link>http://www.cnblogs.com/sunshine-2015/p/10772000.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunshine-2015/p/10772000.html</guid>
<description>&lt;p&gt;上一篇介绍了zookeeper的单机启动，集群模式下启动和单机启动有相似的地方，但是也有各自的特点。集群模式的配置方式和单机模式也是不一样的，这一篇主要包含以下内容：&lt;/p&gt;
&lt;h2 id=&quot;概念介绍角色服务器状态&quot;&gt;概念介绍：角色，服务器状态&lt;/h2&gt;
&lt;p&gt;集群模式会有多台server，每台server根据不同的角色会有不同的状态，server状态的定义如下&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public enum ServerState {
    LOOKING, FOLLOWING, LEADING, OBSERVING;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;LOOKING：表示服务器处于选举状态，说明集群正在进行投票选举，选出leader&lt;/p&gt;
&lt;p&gt;FOLLOWING：表示服务器处于following状态，表示当前server的角色是follower&lt;/p&gt;
&lt;p&gt;LEADING：表示服务器处于leading状态，当前server角色是leader&lt;/p&gt;
&lt;p&gt;OBSERVING：表示服务器处于OBSERVING状态，当前server角色是OBSERVER&lt;/p&gt;
&lt;p&gt;对应server的角色有:&lt;/p&gt;
&lt;h3 id=&quot;leader&quot;&gt;leader&lt;/h3&gt;
&lt;p&gt;投票选出的leader，可以处理读写请求。处理写请求的时候收集各个参与投票者的选票，来决出投票结果&lt;/p&gt;
&lt;h3 id=&quot;follower&quot;&gt;follower&lt;/h3&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;参与leader选举，可能被选为leader&lt;/li&gt;
&lt;li&gt;接收处理读请求&lt;/li&gt;
&lt;li&gt;接收写请求，转发给leader，并参与投票决定写操作是否提交&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;observer&quot;&gt;observer&lt;/h3&gt;
&lt;p&gt;为了支持zk集群可扩展性，如果直接增加follower的数量，会导致投票的性能下降。也就是防止参与投票的server太多，导致leader选举收敛速度较慢，选举所需时间过长。&lt;/p&gt;
&lt;p&gt;observer和follower类似，但是不参与选举和投票，&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;接收处理读请求&lt;/li&gt;
&lt;li&gt;接收写请求，转发给leader，但是不参与投票，接收leader的投票结果，同步数据&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这样在支持集群可扩展性的同时又不会影响投票的性能&lt;/p&gt;
&lt;h2 id=&quot;服务器组件启动&quot;&gt;服务器组件启动&lt;/h2&gt;
&lt;p&gt;集群模式下服务器启动的组件一部分和单机模式下类似，只是启动的流程和时机有所差别&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;FileTxnSnapLog&lt;/li&gt;
&lt;li&gt;NIOServerCnxnFactory&lt;/li&gt;
&lt;li&gt;Jetty&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/846961/201904/846961-20190426002630681-1330135704.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;也是会启动上面三个组件，但是因为集群模式还有其他组件需要启动，所以具体启动的逻辑不太一样。&lt;/p&gt;
&lt;p&gt;除了上面这些组件外，集群模式下还有一些用来支撑集群模式的组件&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;QuorumPeer：用来启动各个组件，是选举过程的mainloop，在loop中判断当前server状态来决定做不同的处理&lt;/li&gt;
&lt;li&gt;FastLeaderElection：默认选举算法&lt;/li&gt;
&lt;li&gt;QuorumCnxManager：选举过程中的网络通信组件&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;quorumpeer&quot;&gt;QuorumPeer&lt;/h3&gt;
&lt;p&gt;解除出来的QuorumPeerConfig配置都设置到QuorumPeer对应的属性中，主线程启动完QuorumPeer后，调用该线程的join方法等待该线程退出。&lt;/p&gt;
&lt;h3 id=&quot;quorumcnxmanager&quot;&gt;QuorumCnxManager&lt;/h3&gt;
&lt;p&gt;负责各个server之间的通信，维护了和各个server之间的连接，下面的线程负责与其他server建立连接&lt;/p&gt;
&lt;p&gt;&lt;code&gt;org.apache.zookeeper.server.quorum.QuorumCnxManager.Listener&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;还维护了与其他每个server连接对应的发送队列，SendWorker线程负责发送packet给其他server&lt;/p&gt;
&lt;p&gt;&lt;code&gt;final ConcurrentHashMap&amp;lt;Long, ArrayBlockingQueue&amp;lt;ByteBuffer&amp;gt;&amp;gt; queueSendMap;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个map的key是建立网络连接的server的myid，value是对应的发送队列。&lt;/p&gt;
&lt;p&gt;还有接收队列，RecvWorker是用来接收其他server发来的Message的线程，将收到的Message放入队列中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;org.apache.zookeeper.server.quorum.QuorumCnxManager#recvQueue&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;leader选举&quot;&gt;leader选举&lt;/h2&gt;
&lt;p&gt;选举入口在下面的方法中&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;org.apache.zookeeper.server.quorum.FastLeaderElection#lookForLeader&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;判断投票结果的策略&quot;&gt;判断投票结果的策略&lt;/h3&gt;
&lt;p&gt;上面这个是其中的一种选举算法，选举过程中，各个server收到投票后需要进行投票结果抉择，判断投票结果的策略有两种&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 按照分组权重
org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical

// 简单按照是否是大多数，超过参与投票数的一半
org.apache.zookeeper.server.quorum.flexible.QuorumMaj&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;选票的网络传输&quot;&gt;选票的网络传输&lt;/h3&gt;
&lt;p&gt;zookeeper中选举使用的端口和正常处理client请求的端口是不一样的，而且由于投票的数据和处理请求的数据不一样，数据传输的方法也不一样。选举使用的网络传输相关的类和数据结构如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/846961/201904/846961-20190426002651765-1675431329.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;选举过程&quot;&gt;选举过程&lt;/h3&gt;
&lt;p&gt;选举的整个流程为&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/846961/201904/846961-20190426002800780-1558879003.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;集群启动过程其实就是在单机启动的部分基础上，增加了关于集群的一些组件，而且有leader的选举。&lt;/p&gt;
</description>
<pubDate>Thu, 25 Apr 2019 16:21:00 +0000</pubDate>
<dc:creator>lacker</dc:creator>
<og:description>上一篇介绍了zookeeper的单机启动，集群模式下启动和单机启动有相似的地方，但是也有各自的特点。集群模式的配置方式和单机模式也是不一样的，这一篇主要包含以下内容： 概念介绍：角色，服务器状态 服务</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sunshine-2015/p/10772000.html</dc:identifier>
</item>
<item>
<title>MySQL 上手教程 - 刘哇勇</title>
<link>http://www.cnblogs.com/Wayou/p/quick_start_for_mysql.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Wayou/p/quick_start_for_mysql.html</guid>
<description>&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;通过官网选择&lt;a href=&quot;https://www.mysql.com/downloads/&quot; rel=&quot;nofollow&quot;&gt;版本&lt;/a&gt;下载安装。Mac 上可通过 &lt;a href=&quot;https://brew.sh&quot; rel=&quot;nofollow&quot;&gt;Homebrew&lt;/a&gt; 方便地安装：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ brew install mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检查安装是否成功：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ mysql --version
mysql  Ver 8.0.15 &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; osx10.14 on x86_64 (Homebrew)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意到安装成功后的提示里有一些有用的信息：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;21&quot;&gt;
&lt;pre&gt;
==&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; Caveats
We&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;ve installed your MySQL database without a root password. To secure it run:&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    mysql_secure_installation&lt;/span&gt;

&lt;span class=&quot;pl-s&quot;&gt;MySQL is configured to only allow connections from localhost by default&lt;/span&gt;

&lt;span class=&quot;pl-s&quot;&gt;To connect run:&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    mysql -uroot&lt;/span&gt;

&lt;span class=&quot;pl-s&quot;&gt;To have launchd start mysql now and restart at login:&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;  brew services start mysql&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;Or, if you don&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;t want/need a background service you can just run:
  mysql.server start
==&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; Analytics
install: 61,745 (30 days), 203,280 (90 days), 869,736 (365 days)
install_on_request: 58,156 (30 days), 187,881 (90 days), 795,173 (365 days)
build_error: 0 (30 days)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;默认的安装没有设置 root 密码，可运行 &lt;code&gt;mysql_secure_installation&lt;/code&gt; 来设置&lt;/li&gt;
&lt;li&gt;默认安装下，只允许从本机连接 MySQL 服务，命令是 &lt;code&gt;mysql -uroot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动并使其开机时自启动 &lt;code&gt;brew services start mysql&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;第一件事我们需要启动 MySQL 服务，&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ brew services start mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外，停止及重启的命令为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;brew services stop mysql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew services restart mysql&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;卸载&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ brew uninstall mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该命令并没有彻底卸载 MySQL，比如设置过的 root 密码，MySQL 相关的配置都还保留。如需彻底卸载，可参考&lt;a href=&quot;https://gist.github.com/vitorbritto/0555879fe4414d18569d&quot;&gt;这里&lt;/a&gt; 以及&lt;a href=&quot;https://stackoverflow.com/a/49970533/1553656&quot; rel=&quot;nofollow&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;上手相关的资源&lt;/h2&gt;
&lt;p&gt;通过&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/&quot; rel=&quot;nofollow&quot;&gt;官方文档&lt;/a&gt;可查阅&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/tutorial.html&quot; rel=&quot;nofollow&quot;&gt;教程&lt;/a&gt;及其他相关知识点，比如&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/security.html&quot; rel=&quot;nofollow&quot;&gt;安全&lt;/a&gt;，&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/optimization.html&quot; rel=&quot;nofollow&quot;&gt;优化&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;初始可从这个&lt;a href=&quot;https://dev.mysql.com/doc/mysql-getting-started/en/&quot; rel=&quot;nofollow&quot;&gt;上手教程&lt;/a&gt;开始。&lt;/p&gt;
&lt;h2&gt;数据库的连接&lt;/h2&gt;
&lt;p&gt;默认安装下，MySQL 提供了 root 账户且不需要密码，所以可通过如下命令在本地快速连接，&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ mysql -uroot
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过还是让我们先为其设置一个密码，操作起来比较规范也更接近于真实生产环境。运行 &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/mysql-secure-installation.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;mysql_secure_installation&lt;/code&gt;&lt;/a&gt; 后根据向导来为 root 设置密码，同时跟着向导走还能完善一些安全相关的设置。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ mysql_secure_installation
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置好之后来看如何连接到 MySQL 服务。连接 MySQL 的命令为：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ mysql -h host -u user -p
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;-h&lt;/code&gt; 指定 host&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt; 指定用户名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt; 指定密码&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;设置密码后便不能再缺省密码登录了，&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ mysql -uroot
ERROR 1045 (28000): Access denied &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; user &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;root&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; (using password: NO)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要带上 &lt;code&gt;-u&lt;/code&gt;，&lt;code&gt;-p&lt;/code&gt; 指定用户名及密码。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ mysql -h localhost -u root -p
Enter password:
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本机的数据库可省略掉 host 的指定，即 &lt;code&gt;mysql -u root -p&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;成功登录后可看到欢迎信息：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
Welcome to the MySQL monitor.  Commands end with &lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt; or &lt;span class=&quot;pl-cce&quot;&gt;\g&lt;/span&gt;.
Your MySQL connection id is 25
Server version: 8.0.15 Homebrew

Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;help;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; or &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;\h&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; help. Type &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;\c&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; to clear the current input statement.

mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时便进入了 MySQL 的命令行，可以和数据库进行交互了，比如重置刚才设置的 root 密码：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ALTER USER &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;root&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; IDENTIFIED BY &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;new_password&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输入 &lt;code&gt;help&lt;/code&gt; 或 &lt;code&gt;?&lt;/code&gt; 查看帮助。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行 &lt;code&gt;exit&lt;/code&gt; 或 &lt;code&gt;quit&lt;/code&gt; 可退出登录，即退出 MySQL 命令行。&lt;/p&gt;
&lt;h2&gt;MySQL 命令行及 SQL 语句&lt;/h2&gt;
&lt;p&gt;一些注意点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;从上面欢迎信息可看到，&lt;strong&gt;SQL 语句&lt;/strong&gt;以分号（&lt;code&gt;;&lt;/code&gt;）或 &lt;code&gt;\g&lt;/code&gt;，&lt;code&gt;\G&lt;/code&gt; 结束，如果没有显式输入结束符，回车后会进入多行输入的模式。而 &lt;strong&gt;MySQL 命令&lt;/strong&gt;则不需要显式地结束，比如 &lt;code&gt;help&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;命令（e.g. &lt;code&gt;help&lt;/code&gt;, &lt;code&gt;quit&lt;/code&gt;, 或 &lt;code&gt;clear&lt;/code&gt;）及 SQL 语句（e.g. &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;CREATE TABLE&lt;/code&gt;, 或 &lt;code&gt;INSERT&lt;/code&gt;）等是大小写不敏感的，但一般我们都将 SQL 语句中关键字大写。&lt;/li&gt;
&lt;li&gt;表中&lt;strong&gt;列名&lt;/strong&gt;是大小写敏感的，但&lt;strong&gt;表名&lt;/strong&gt;因为本质是对应的是&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/identifier-case-sensitivity.html&quot; rel=&quot;nofollow&quot;&gt;物理上的文件夹&lt;/a&gt;，其大小写是否敏感跟系统有关，在 Windows 上大小写不敏感，在类 Unix 系统比如 Linux，Mac OS 上则是大小写敏感的。在进行字符串比较时，是否大小写敏感与所使用的字符（character collation）集有关。推荐的做法是在代码中始终保持大小写敏感，不要混用，即虽然表名对大小写不敏感就一会大写一会小写。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以下是通过 MySQL 命令行对数据库的一些基本操作。&lt;/p&gt;
&lt;h3&gt;列出数据库&lt;/h3&gt;
&lt;p&gt;通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/show-databases.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;SHOW DATABASES&lt;/code&gt;&lt;/a&gt; 语句可查看当前存在的数据库。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SHOW DATABASES&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+--------------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Database           &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+--------------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; information_schema &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; mysql              &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; performance_schema &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; sys                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+--------------------+
4 rows &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.04 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;虽然 MySQL 文档里有说其自带了一个名为 &lt;code&gt;test&lt;/code&gt; 的库方便测试，但这里并没发现，可能跟安装的版本及来源有关&lt;/em&gt;。&lt;/p&gt;
&lt;h3&gt;创建数据库&lt;/h3&gt;
&lt;p&gt;通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/create-database.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;CREATE DATABASE&lt;/code&gt;&lt;/a&gt; 语句来创建数据库。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
CREATE DATABASE &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;database_name&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比如，创建名为 &lt;code&gt;pets&lt;/code&gt; 的数据库，&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; CREATE DATABASE pets&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
Query OK, 1 row affected (0.09 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后通过 &lt;code&gt;SHOW DATABASES&lt;/code&gt;查看检查刚刚创建的 &lt;code&gt;pets&lt;/code&gt; 数据库是否生效。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SHOW DATABASES&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+--------------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Database           &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+--------------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; information_schema &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; mysql              &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; performance_schema &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; pets               &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; sys                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+--------------------+
5 rows &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相应地，删除数据库的命令为 &lt;code&gt;DROP DATABASE &amp;lt;database_name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;数据库间的切换&lt;/h3&gt;
&lt;p&gt;首先通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/use.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;USE&lt;/code&gt;&lt;/a&gt; 命令切到目标数据库，该命令表示后续 SQL 语句都作用于所切换到的那个数据库。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; USE pets&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 &lt;code&gt;SELECT DATABASE()&lt;/code&gt; 可查看当前使用的是哪个数据库。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SELECT &lt;span class=&quot;pl-en&quot;&gt;DATABASE&lt;/span&gt;();
+------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;DATABASE&lt;/span&gt;() &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; pets       &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+------------+
1 row &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;创建表&lt;/h3&gt;
&lt;p&gt;通过 &lt;code&gt;CREATE TABLE&lt;/code&gt; 语句在数据库中创建表。&lt;/p&gt;
&lt;p&gt;以下语句会在数据库中创建一张名为 &lt;code&gt;cats&lt;/code&gt; 表。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
CREATE TABLE cats
(
  id              INT unsigned NOT NULL AUTO_INCREMENT, &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Unique ID for the record&lt;/span&gt;
  name            VARCHAR(150) NOT NULL,                &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Name of the cat&lt;/span&gt;
  owner           VARCHAR(150) NOT NULL,                &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Owner of the cat&lt;/span&gt;
  birth           DATE NOT NULL,                        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Birthday of the cat&lt;/span&gt;
  PRIMARY KEY     (id)                                  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Make the id the primary key&lt;/span&gt;
)&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中第一列为列名，紧随其后的是该列的&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/data-types.html&quot; rel=&quot;nofollow&quot;&gt;&lt;strong&gt;数据类型&lt;/strong&gt;&lt;/a&gt;，然后是指定其是否可空。&lt;code&gt;id&lt;/code&gt; 列通过指定 &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; 使其在新增条目时自动增加。通过 &lt;code&gt;PRIMARY KEY&lt;/code&gt; 设置 &lt;code&gt;id&lt;/code&gt; 列作为表的&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/primary-key-optimization.html&quot; rel=&quot;nofollow&quot;&gt;&lt;strong&gt;主键&lt;/strong&gt;&lt;/a&gt;。其中 &lt;code&gt;#&lt;/code&gt; 号后面为&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/comments.html&quot; rel=&quot;nofollow&quot;&gt;注释内容&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/show-tables.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;SHOW TABLES&lt;/code&gt;&lt;/a&gt; 可查看到刚刚创建的 &lt;code&gt;cats&lt;/code&gt; 表。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SHOW TABLES&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+----------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Tables_in_pets &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+----------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; cats           &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+----------------+
1 row &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.01 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/explain.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;DESCRIBE&lt;/code&gt;&lt;/a&gt; 可查看各列的详情。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; DESCRIBE cats&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+-------+------------------+------+-----+---------+----------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Field &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Type             &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Null &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Key &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Default &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Extra          &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+-------+------------------+------+-----+---------+----------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; id    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; int(10) unsigned &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; PRI &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; auto_increment &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; name  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; varchar(150)     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; owner &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; varchar(150)     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; birth &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; date             &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+-------+------------------+------+-----+---------+----------------+
4 rows &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;插入记录&lt;/h3&gt;
&lt;p&gt;通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/insert.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;INSERT...VALUES&lt;/code&gt;&lt;/a&gt; 可向表中插入记录。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;18&quot;&gt;
&lt;pre&gt;
INSERT INTO cats ( name, owner, birth) VALUES
  ( &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Sandy&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Lennon&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;2015-01-03&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; ),
  ( &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Cookie&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Casey&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;2013-11-13&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; ),
  ( &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Charlie&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;River&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;2016-05-21&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; )&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于各数据类型及相应值的设置可参见 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/literals.html&quot; rel=&quot;nofollow&quot;&gt;Literal Values&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;查询记录&lt;/h3&gt;
&lt;p&gt;通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/select.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;SELECT&lt;/code&gt;&lt;/a&gt; 语句可查询表中的记录。这应该是使用最为频繁的语句了。&lt;/p&gt;
&lt;p&gt;简单情况下的使用格式为 &lt;code&gt;SELECT &amp;lt;column_name&amp;gt; from &amp;lt;table_name&amp;gt;&lt;/code&gt;，表示从 &lt;code&gt;table_name&lt;/code&gt; 查询 &lt;code&gt;column_name&lt;/code&gt; 这一列的数据，可通过将列名指定为通配符 &lt;code&gt;*&lt;/code&gt; 以表示查询所有列。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SELECT &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; FROM cats&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+----+---------+--------+------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; id &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; name    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; owner  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; birth      &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+----+---------+--------+------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;  1 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Sandy   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Lennon &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; 2015-01-03 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;  2 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Cookie  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Casey  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; 2013-11-13 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;  3 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Charlie &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; River  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; 2016-05-21 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+----+---------+--------+------------+
3 rows &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.01 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前面提到过语句的结束除了通过分号，还有 &lt;code&gt;\g&lt;/code&gt;，以及 &lt;code&gt;\G&lt;/code&gt;。前面两者等效，&lt;code&gt;\G&lt;/code&gt; 会将结果竖向展示。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;*&lt;/span&gt; from cats&lt;span class=&quot;pl-cce&quot;&gt;\G&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt; 1. row &lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt;
    id: 1
  name: Sandy
 owner: Lennon
 birth: 2015-01-03
&lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt; 2. row &lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt;
    id: 2
  name: Cookie
 owner: Casey
 birth: 2013-11-13
&lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt; 3. row &lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt;
    id: 3
  name: Charlie
 owner: River
 birth: 2016-05-21
3 rows &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过添加 &lt;code&gt;WHERE&lt;/code&gt; 条件可对查询进行更加精确的限制，比如只返回满足某个条件下的记录。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SELECT name FROM cats WHERE owner = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Casey&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+--------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; name   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+--------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Cookie &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+--------+
1 row &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;删除记录&lt;/h3&gt;
&lt;p&gt;通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/delete.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/a&gt; 语句可删除表中的记录。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; DELETE FROM cats WHERE name=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Cookie&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
Query OK, 1 row affected (0.00 sec)

mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SELECT &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; FROM cats&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+----+---------+--------+------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; id &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; name    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; owner  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; birth      &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+----+---------+--------+------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;  1 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Sandy   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Lennon &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; 2015-01-03 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;  3 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Charlie &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; River  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; 2016-05-21 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+----+---------+--------+------------+
2 rows &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;列的添加&lt;/h3&gt;
&lt;p&gt;通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/alter-table.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;ALTER TABLE...ADD&lt;/code&gt;&lt;/a&gt; 语句可对表进行列的增加。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ALTER TABLE cats ADD gender CHAR(1) AFTER name&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
Query OK, 0 rows affected (0.22 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; DESCRIBE cats&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+--------+------------------+------+-----+---------+----------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Field  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Type             &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Null &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Key &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Default &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Extra          &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+--------+------------------+------+-----+---------+----------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; id     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; int(10) unsigned &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; PRI &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; auto_increment &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; name   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; varchar(150)     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; gender &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; char(1)          &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; YES  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; owner  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; varchar(150)     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; birth  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; date             &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+--------+------------------+------+-----+---------+----------------+
5 rows &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.01 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前面通过 &lt;code&gt;DESCRIBE&lt;/code&gt; 语句检查表的创建情况，还可通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/show-create-table.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;SHOW CREATE TABLE&lt;/code&gt;&lt;/a&gt; 以获得关于表更加具体的信息，该语句打印用于创建该表时的 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/create-table.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;CREATE TABLE&lt;/code&gt;&lt;/a&gt; 语句，包含了我们在手写时省略掉的一些默认设置。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;15&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SHOW CREATE TABLE cats&lt;span class=&quot;pl-cce&quot;&gt;\G&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt; 1. row &lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt;
       Table: cats
Create Table: CREATE TABLE &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;cats&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; (
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; int(10) unsigned NOT NULL AUTO_INCREMENT,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;name&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; varchar(150) COLLATE utf8mb4_general_ci NOT NULL,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;gender&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; char(1) COLLATE utf8mb4_general_ci DEFAULT NULL,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;owner&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; varchar(150) COLLATE utf8mb4_general_ci NOT NULL,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;birth&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; date NOT NULL,
  PRIMARY KEY (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
1 row &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;列的删除&lt;/h3&gt;
&lt;p&gt;通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/alter-table.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;ALTER TABLE...DROP&lt;/code&gt;&lt;/a&gt; 语句可删除表中指定的列。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; DESCRIBE cats&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+--------+------------------+------+-----+---------+----------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Field  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Type             &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Null &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Key &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Default &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Extra          &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+--------+------------------+------+-----+---------+----------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; id     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; int(10) unsigned &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; PRI &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; auto_increment &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; name   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; varchar(150)     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; gender &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; char(1)          &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; YES  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; owner  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; varchar(150)     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; birth  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; date             &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+--------+------------------+------+-----+---------+----------------+
5 rows &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.01 sec)

mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ALTER TABLE cats DROP gender&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
Query OK, 0 rows affected (0.21 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; DESCRIBE cats&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+-------+------------------+------+-----+---------+----------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Field &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Type             &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Null &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Key &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Default &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Extra          &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+-------+------------------+------+-----+---------+----------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; id    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; int(10) unsigned &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; PRI &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; auto_increment &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; name  &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; varchar(150)     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; owner &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; varchar(150)     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; birth &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; date             &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NO   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; NULL    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;                &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+-------+------------------+------+-----+---------+----------------+
4 rows &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;账户及权限&lt;/h2&gt;
&lt;p&gt;默认的 root 账户权限很高，一般不用于日常的作业。 可根据需要创建不同权限的账户来进行管理和作业。&lt;/p&gt;
&lt;h3&gt;账户创建与分配的权限&lt;/h3&gt;
&lt;p&gt;以下脚本展示了账户的创建并为其分配相应权限。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
CREATE USER &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;finley&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  IDENTIFIED BY &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;password&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;

GRANT ALL
  ON &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;.&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;
  TO &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;finley&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  WITH GRANT OPTION&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;

CREATE USER &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;finley&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;%.example.com&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  IDENTIFIED BY &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;password&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;

GRANT ALL
  ON &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;.&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;
  TO &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;finley&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;%.example.com&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  WITH GRANT OPTION&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该脚本分别为 &lt;code&gt;finley&lt;/code&gt; 在本地 &lt;code&gt;localhost&lt;/code&gt; 及 &lt;code&gt;example.com&lt;/code&gt; 域上的数据库创建了账户，并赋予了所有权限。其中 &lt;code&gt;%.example.com&lt;/code&gt; 里面的 &lt;code&gt;%&lt;/code&gt; 为通配符，表示该账户对 &lt;code&gt;example.com&lt;/code&gt; 上的数据库拥有权限。&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;WITH GRANT OPTION&lt;/code&gt; 表示还给该账户赋予了能够&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.6/en/privileges-provided.html#priv_grant-option&quot; rel=&quot;nofollow&quot;&gt;修改其他用户权限的能力&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
CREATE USER &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;admin&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  IDENTIFIED BY &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;password&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;

GRANT RELOAD,PROCESS
  ON &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;.&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;
  TO &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;admin&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的脚本创建了名为 &lt;code&gt;'admin'@'localhost'&lt;/code&gt; 的账户并赋予了 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/mysqladmin.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;RELOAD&lt;/code&gt;&lt;/a&gt;，&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/mysqladmin.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;PROCESS&lt;/code&gt;&lt;/a&gt; 权限。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
CREATE USER &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;dummy&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的脚本创建名为 &lt;code&gt;'dummy'@'localhost'&lt;/code&gt; 的账户并且无须密码登录，但并没有赋予任何权限。后续可通过 &lt;code&gt;GRANT&lt;/code&gt; 来设置权限。&lt;/p&gt;
&lt;p&gt;上面创建的账户都是全局作用域，即没有限制数据库。通过为账户指定相应的数据库可限制账户只对某些库有相应操作权限，达到更加精细的设置。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
CREATE USER &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;custom&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  IDENTIFIED BY &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;password&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
GRANT ALL
  ON bankaccount.&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;
  TO &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;custom&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面脚本创建的 &lt;code&gt;'custom'@'localhost'&lt;/code&gt; 账户对 &lt;code&gt;bankaccount&lt;/code&gt; 库拥有全部权限，但仅限于从 &lt;code&gt;localhost&lt;/code&gt; 进行连接。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
CREATE USER &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;custom&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;host47.example.com&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  IDENTIFIED BY &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;password&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP
  ON expenses.&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;
  TO &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;custom&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;host47.example.com&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面脚本对 &lt;code&gt;'custom'@'host47.example.com'&lt;/code&gt; 开放 &lt;code&gt;expenses&lt;/code&gt; 数据库的部分权限，其中包括 &lt;code&gt;SELECT&lt;/code&gt;，&lt;code&gt;INSERT&lt;/code&gt;，&lt;code&gt;UPDATE&lt;/code&gt;，&lt;code&gt;DELETE&lt;/code&gt;，&lt;code&gt;CREATE&lt;/code&gt;，&lt;code&gt;DROP&lt;/code&gt; 且只能是操作 &lt;code&gt;host47.example.com&lt;/code&gt; 上的数据库。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
CREATE USER &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;custom&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;%.example.com&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  IDENTIFIED BY &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;password&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP
  ON customer.addresses
  TO &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;custom&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;%.example.com&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面脚本创建 &lt;code&gt;'custom'@'%.example.com'&lt;/code&gt; 账户并只对其开通 &lt;code&gt;customer&lt;/code&gt; 库下面 &lt;code&gt;addresses&lt;/code&gt; 的权限。&lt;/p&gt;
&lt;h3&gt;权限的查看&lt;/h3&gt;
&lt;p&gt;通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/show-grants.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;SHOW GRANTS&lt;/code&gt;&lt;/a&gt; 来查看账户的权限。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SHOW GRANTS FOR &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wayou&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; Grants &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; wayou@localhost                                                                                                                                                                                                                                                                                                                                                                                   &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE, CREATE ROLE, DROP ROLE ON &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;.&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; TO &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;wayou&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; WITH GRANT OPTION    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; GRANT APPLICATION_PASSWORD_ADMIN,BACKUP_ADMIN,BINLOG_ADMIN,BINLOG_ENCRYPTION_ADMIN,CONNECTION_ADMIN,ENCRYPTION_KEY_ADMIN,GROUP_REPLICATION_ADMIN,PERSIST_RO_VARIABLES_ADMIN,REPLICATION_SLAVE_ADMIN,RESOURCE_GROUP_ADMIN,RESOURCE_GROUP_USER,ROLE_ADMIN,SERVICE_CONNECTION_ADMIN,SESSION_VARIABLES_ADMIN,SET_USER_ID,SYSTEM_VARIABLES_ADMIN,XA_RECOVER_ADMIN ON &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;.&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; TO &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;wayou&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; WITH GRANT OPTION &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
2 rows &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/show-create-user.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;SHOW CREATE USER&lt;/code&gt;&lt;/a&gt; 可查看创建该用户的脚本。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SHOW CREATE USER &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wayou&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; CREATE USER &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; wayou@localhost                                                                                                                                                                                                                                                                     &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; CREATE USER &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wayou&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; IDENTIFIED WITH &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;caching_sha2_password&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; AS &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;xxx&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK PASSWORD HISTORY DEFAULT PASSWORD REUSE INTERVAL DEFAULT PASSWORD REQUIRE CURRENT DEFAULT &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;权限的回收与账户的删除&lt;/h3&gt;
&lt;p&gt;通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/revoke.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;REVOKE&lt;/code&gt;&lt;/a&gt; 可对权限进行回收，即撤回。&lt;/p&gt;
&lt;p&gt;回收所有全局权限的示例：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
REVOKE ALL
  ON &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;.&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;
  FROM &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;finley&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;%.example.com&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;

REVOKE RELOAD
  ON &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;.&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;
  FROM &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;admin&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回收数据库作用域权限的示例：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
REVOKE CREATE,DROP
  ON expenses.&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;
  FROM &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;custom&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;host47.example.com&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回收表作用域权限的示例：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
REVOKE INSERT,UPDATE,DELETE
  ON customer.addresses
  FROM &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;custom&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;%.example.com&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样，可通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/show-grants.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;SHOW GRANTS&lt;/code&gt;&lt;/a&gt; 来检查权限更新的情况。&lt;/p&gt;
&lt;p&gt;最后是账户的删除，通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/drop-user.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;DROP USER&lt;/code&gt;&lt;/a&gt; 语句，以下是一个删除的示例：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
DROP USER &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;finley&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;查看用户列表&lt;/h3&gt;
&lt;p&gt;通过查询内置的 &lt;code&gt;mysql&lt;/code&gt; 数据库中 &lt;code&gt;user&lt;/code&gt; 表，可看到添加后的所有用户。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SELECT user FROM mysql.user&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+------------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; user             &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+------------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; mysql.infoschema &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; mysql.session    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; mysql.sys        &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; root             &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; wayou            &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+------------------+
5 rows &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;相关资源&lt;/h2&gt;
</description>
<pubDate>Thu, 25 Apr 2019 15:48:00 +0000</pubDate>
<dc:creator>刘哇勇</dc:creator>
<og:description>安装 通过官网选择版本下载安装。Mac 上可通过 Homebrew 方便地安装： $ brew install mysql 检查安装是否成功： $ mysql version mysql Ver 8.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Wayou/p/quick_start_for_mysql.html</dc:identifier>
</item>
<item>
<title>补习系列(20)-大话 WebSocket 与 &quot;尬聊&quot;的实现 - 美码师</title>
<link>http://www.cnblogs.com/littleatp/p/10771814.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/littleatp/p/10771814.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/242916/201904/242916-20190425230806658-1937401204.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;一聊聊-websocket&quot;&gt;一、聊聊 WebSocket&lt;/h2&gt;
&lt;p&gt;从HTML5技术流行至今，WebSocket已经有非常广泛的应用：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在线游戏，提供实时的操作交互体验&lt;/li&gt;
&lt;li&gt;社交平台，与好友实时的私信对话&lt;/li&gt;
&lt;li&gt;新闻动态，获得感兴趣的主题信息推送&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;这些场景，都需要&lt;strong&gt;服务器能主动实时的给浏览器或客户端推送消息&lt;/strong&gt;，注意关键词是主动，还有实时！&lt;br/&gt;而在HTML5一统江湖之前，由于HTTP在推送场景下的&quot;薄弱&quot;，我们需要借助一些复杂或者非标准的手段来实现。&lt;/p&gt;
&lt;p&gt;这些方式包括有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Ajax轮询，比如每隔5秒钟，由浏览器对服务器主动请求数据后返回。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/242916/201904/242916-20190425230844147-1750113329.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这种方案下，浏览器需要不断的向服务器发出请求，问题是比较明显的，包括：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;HTTP请求头部会浪费一些带宽；&lt;/li&gt;
&lt;li&gt;频繁重建连接会造成很大的开销。&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Comet，这个词好像翻译为&quot;彗星&quot;？ 这个是采用 streaming 或 long-pulling 的长连接技术：&lt;br/&gt;服务器在收到请求时先挂起，等待有事件发生时才返回数据。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/242916/201904/242916-20190425230920495-2015812231.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Comet 效率提升了不少，它解决了Ajax轮询的部分问题，利用HTTP长连接的特性尽可能的避免了连接、带宽资源的浪费等等，于是在很长一段时间 Comet 成为了Web推送技术的主流。&lt;br/&gt;But ，.. Comet 的实现技术比较复杂，不同框架下的实现方式差异很大，在灵活性、性能上也有些欠缺。&lt;br/&gt;关于服务端Comet的技术可以参考下面这篇经典文章：&lt;br/&gt;https://www.ibm.com/developerworks/cn/web/wa-lo-comet/&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Flash，通过Flash 插件代码实现Socket通讯，本质上是基于TCP的通讯模式，由于Flash 需要安装插件以及浏览器的兼容性问题，目前已经逐渐废弃。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;websocket-出场&quot;&gt;WebSocket 出场&lt;/h4&gt;
&lt;p&gt;WebSocket 出现的目的没有别的，就是干掉前面的东西，Both!&lt;br/&gt;最开始WebSocket 协议由 &lt;a href=&quot;https://tools.ietf.org/html/rfc6455&quot;&gt;RFC6455&lt;/a&gt; 定义，其API标准包含于HTML5 范畴之中。&lt;br/&gt;目前各大主流浏览器已经能完全支持该技术。然后可以看看下面这个图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/242916/201904/242916-20190425231012367-1382141147.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图，WebSocket 协议中， 浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。&lt;br/&gt;那么相比以往的方式，这种方案更加节省资源了，它的实时性、灵活性都要强大不少。&lt;br/&gt;当然，有HTML5标准给它站台，后台杠杠的~&lt;/p&gt;
&lt;p&gt;那么一个 WebSocket 的请求响应长成怎么样呢？&lt;br/&gt;看下面这个图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/242916/201904/242916-20190425231049388-895990952.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;二stomp-是个什么鬼&quot;&gt;二、Stomp 是个什么鬼&lt;/h2&gt;
&lt;p&gt;一开始我一直认为 Stomp是暴风雨(误看为 Storm)，然后觉得说这个技术挺犀利的。&lt;br/&gt;然后在看了 Stomp 的协议介绍后发现，它是如此的简单..&lt;br/&gt;Stomp 的 全称叫 &lt;strong&gt;&lt;em&gt;Simple Text Orientated Messaging Protocol&lt;/em&gt;&lt;/strong&gt;，就是一个简单的文本定向消息协议，&lt;br/&gt;除了设计为简单易用之外，它的支持者也非常多。就比如目前主流的消息队列服务器如RabbitMQ、ActiveMQ都支持Stomp 协议。&lt;/p&gt;
&lt;p&gt;开源地址：&lt;br/&gt;http://stomp.github.io/&lt;/p&gt;
&lt;p&gt;Stomp 定义了一些简单的指令，如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;CONNECT&lt;/td&gt;
&lt;td&gt;建立连接&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;SEND&lt;/td&gt;
&lt;td&gt;发送消息&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;SUBSCRIBE&lt;/td&gt;
&lt;td&gt;订阅主题&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;UNSUBSCRIBE&lt;/td&gt;
&lt;td&gt;取消订阅&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;BEGIN&lt;/td&gt;
&lt;td&gt;开启事务&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;COMMIT&lt;/td&gt;
&lt;td&gt;提交事务&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;ABORT&lt;/td&gt;
&lt;td&gt;回滚事务&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;ACK&lt;/td&gt;
&lt;td&gt;确认消费&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;NACK&lt;/td&gt;
&lt;td&gt;消息丢弃&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;DISCONNECT&lt;/td&gt;
&lt;td&gt;断开连接&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;一个简单的STOMP消息大致如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;CONNECT
accept-version:1.1,1.0
heart-beat:10000,10000\n\n\u0000


SEND
destination:/app/message\ncontent-length:6

发送内容\u0000&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;好的，你现在应该了解 Stomp是个什么了，那么为什么要介绍这个？&lt;/p&gt;
&lt;p&gt;WebSocket 为我们提供了Web 双向通信的通道，但对于消息的交互协议还需要我们来自己实现(WebSocket 果然不够意思)&lt;br/&gt;借助Stomp 协议，可以很方便的实现一种&quot;订阅-发布&quot;的通用机制，这个就是非常具有竞争力的一个特性了。&lt;/p&gt;
&lt;h2 id=&quot;三springboot-整合-websocket&quot;&gt;三、SpringBoot 整合 WebSocket&lt;/h2&gt;
&lt;p&gt;在介绍完WebSocket 之后，接下来干什么呢？&lt;br/&gt;可能你看完前面的东西会觉得 WebSocket 是如此之强大，以至于很多场景都应该使用这个技术来实现。&lt;br/&gt;那么如何做？ 在此前我所介绍的 SpringBoot 也是如此之强大，那么能不能通过SpringBoot 轻松整合WebSocket 呢？这当然可以！&lt;/p&gt;
&lt;p&gt;思索了很久，我决定做一个最简单的应用展示： &lt;strong&gt;尬聊！&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;为什么是&quot;尬聊”，而不是聊天室...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么，下面开始讲这个案例，在该样例中会包含一个Controller类、一个HTML页面以及一个JS脚本。&lt;br/&gt;步骤如下：&lt;/p&gt;
&lt;h3 id=&quot;a.-引入依赖&quot;&gt;A. 引入依赖&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;
       &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${springboot.version}&amp;lt;/version&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!--websocket--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-websocket&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${springboot.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-devtools&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${springboot.version}&amp;lt;/version&amp;gt;
            &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.webjars&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;webjars-locator-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.32&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.webjars&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;sockjs-client&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.0.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.webjars&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;stomp-websocket&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.3.3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.webjars&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jquery&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.4&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.foo.springboot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;base&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- jackson version --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jackson-databind&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.8.3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jackson-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.8.3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
           &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加&lt;strong&gt;spring-boot-starter-websocket&lt;/strong&gt; 会自动引入&lt;strong&gt;spring-websocket&lt;/strong&gt;的依赖，而后者就实现了WebSocket 操作的高级封装。&lt;br/&gt;还有一个好消息，就是spring-websocket 也默认支持了 Stomp协议(看吧，Stomp支持者太多了)。&lt;br/&gt;而除此之外，还内置了一个叫 SocketJS 的东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SocketJS&lt;/strong&gt;是一个流行的JS库，主要是在WebSocket之上封装了一层API，用于支持浏览器不兼容WebSocket的情况。&lt;br/&gt;其项目地址：&lt;br/&gt;https://github.com/sockjs/sockjs-client&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其他组件的说明&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;webjars 主要是将一些前端的框架打包到Jar包中以方便我们使用，这里我们添加了socketJS、stompWebSocket相关的一些包；&lt;/li&gt;
&lt;li&gt;jackson 用于支持WebSocket消息的编解码，是必须添加的。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;b.-websocket-配置&quot;&gt;B. WebSocket 配置&lt;/h3&gt;
&lt;p&gt;参考下面的代码，添加一个JavaConfig风格的配置类：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WebSocketConfig.java&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {

    private static final Logger logger = LoggerFactory.getLogger(WebSocketConfig.class);

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {

        //设置订阅通道(客户端可订阅)
        config.enableSimpleBroker(&quot;/topic&quot;);

        //接收APP(客户端)消息的路由前缀，可通过@MessageMapping 映射到方法
        config.setApplicationDestinationPrefixes(&quot;/app&quot;);
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {

        //websocket 连接端点
        registry.addEndpoint(&quot;/backend&quot;).withSockJS();
    }

    @Override
    public void configureWebSocketTransport(final WebSocketTransportRegistration registration) {

        //配置拦截器
        registration.addDecoratorFactory(new WebSocketHandlerDecoratorFactory() {
            @Override
            public WebSocketHandler decorate(final WebSocketHandler handler) {
                return new WebSocketHandlerDecorator(handler) {
                    @Override
                    public void afterConnectionEstablished(final WebSocketSession session) throws Exception {
                        String username = session.getPrincipal() != null? session.getPrincipal().getName(): &quot;GUEST&quot;;
                        logger.info(&quot;{} connect.&quot;, username);
                        super.afterConnectionEstablished(session);
                    }

                    @Override
                    public void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) throws Exception {
                        String username = session.getPrincipal() != null? session.getPrincipal().getName(): &quot;GUEST&quot;;
                        logger.info(&quot;{} disconnect.&quot;, username);
                        super.afterConnectionClosed(session, closeStatus);
                    }
                };
            }
        });
        super.configureWebSocketTransport(registration);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在WebSocketConfig的配置中，有两点需要关注：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;registerStompEndpoints 用于添加端点，即浏览器通过 &lt;strong&gt;&lt;em&gt;ws://xxx&lt;/em&gt;&lt;/strong&gt; 能访问到的路径&lt;/li&gt;
&lt;li&gt;configureMessageBroker 用于做消息路由配置，包括订阅主题、方法映射路径&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;c.-控制器&quot;&gt;C. 控制器&lt;/h3&gt;
&lt;p&gt;控制层除了支持页面的渲染，还需要对WebSocket消息进行处理，实现如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ConsoleController&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Controller
public class ConsoleController {

    //输出数据频道
    public static final String CHANNEL_CONSOLE = &quot;/topic/console&quot;;


    @Autowired
    private SimpMessagingTemplate template;

    /**
     * 控制台页面
     *
     * @return
     */
    @GetMapping(&quot;/console&quot;)
    public String console() {
        return &quot;console&quot;;
    }

    /**
     * 接收WebSocket消息方法
     * @param message
     */
    @MessageMapping(&quot;/message&quot;)
    public void onMessage(String message) {
        template.convertAndSend(CHANNEL_CONSOLE, &quot;我收到了你的消息：&quot; + message);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;d.-前端实现&quot;&gt;D. 前端实现&lt;/h3&gt;
&lt;p&gt;先做一个HTML页面，编辑&lt;strong&gt;&lt;em&gt;templates/console.html&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&amp;lt;/meta&amp;gt;
    &amp;lt;title&amp;gt;Web控制台&amp;lt;/title&amp;gt;
    &amp;lt;script th:src=&quot;@{/webjars/sockjs-client/sockjs.min.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script th:src=&quot;@{/webjars/stomp-websocket/stomp.min.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script th:src=&quot;@{/webjars/jquery/jquery.min.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; th:src=&quot;@{/static/console.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
        body { font-family: &quot;Microsoft YaHei&quot; ;}
        .span-tv{padding-right:12px}
        #console p {padding: 0px; margin: 0px;}
    &amp;lt;/style&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;div style=&quot;background-color:#AAA; padding: 5px; border-bottom: 1px solid #333&quot;&amp;gt;
    &amp;lt;input type=&quot;text&quot; id=&quot;word&quot; style=&quot;width:100px&quot;&amp;gt;&amp;lt;/input&amp;gt;
    &amp;lt;button onclick=&quot;sendMessage()&quot;&amp;gt;发送消息&amp;lt;/button&amp;gt;
    &amp;lt;button onclick=&quot;reconnect()&quot;&amp;gt;重新连接&amp;lt;/button&amp;gt;
    &amp;lt;button onclick=&quot;clearConsole()&quot;&amp;gt;清空内容&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div id=&quot;console&quot; style=&quot;padding:5px; font-size:10px&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后是实现 JS 脚本，编辑&lt;strong&gt;&lt;em&gt;public/static/console.js&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$(document).ready(function(){
   //首次打开页面自动连接
   connect();
})

//执行连接
function connect() {

    //接入端点/backend
    var socket = new SockJS('/backend');
    window.stompClient = Stomp.over(socket);
    window.stompClient.connect({}, function (frame) {
        log('Connected: ' + frame);

        //订阅服务端输出的 Topic
        stompClient.subscribe('/topic/console', function (message) {
            log(&quot;[服务器说]：&quot; + message.body);
        });
    });

}

//断开连接
function disconnect() {
    if (stompClient !== null) {
        stompClient.disconnect();
    }
    log(&quot;Disconnected&quot;);
}

//重新连接
function reconnect(){
  clearConsole();
  disconnect();
  connect();
}

//发送消息
function sendMessage(){
    var content = $(&quot;#word&quot;).val();
    if(!content){
        alert(&quot;请输入消息!&quot;)
        return;
    }
    //向应用Topic发送消息
    stompClient.send(&quot;/app/message&quot;, {}, content);
    log(&quot;[你说]：&quot; + content);
}

//记录控制台消息
function log(message){
    $(&quot;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&quot;).text(message).appendTo($(&quot;#console&quot;));
}

//清空控制台
function clearConsole(){
    $(&quot;#console&quot;).empty();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样，Web控制台已经制作好了，运行主程序后，打开地址&lt;br/&gt;&lt;strong&gt;&lt;em&gt;http://localhost:8080/console&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;进行体验，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/242916/201904/242916-20190425231137490-1521906635.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好了，这个案例的确很尴尬..&lt;br/&gt;但是我认为，在这上面做一做改造，应该可以实现一个诸如&lt;strong&gt;&quot;美女聊天室&quot;&lt;/strong&gt; 的功能的，或者，你可以动手试试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/242916/201904/242916-20190425231924551-564159027.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitee.com/littleatp/springboot-samples/tree/master/springboot-samples/springboot-websocket&quot;&gt;码云同步代码&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;四参考文档&quot;&gt;四、参考文档&lt;/h2&gt;
&lt;p&gt;https://spring.io/guides/gs/messaging-stomp-websocket/&lt;br/&gt;https://blog.coding.net/blog/spring-static-resource-process&lt;br/&gt;https://zh.wikipedia.org/wiki/WebSocket&lt;br/&gt;https://halfrost.com/websocket/&lt;/p&gt;
&lt;p&gt;欢迎继续关注&quot;美码师的补习系列-springboot篇&quot; ，期待更多精彩内容^-^&lt;/p&gt;
</description>
<pubDate>Thu, 25 Apr 2019 15:20:00 +0000</pubDate>
<dc:creator>美码师</dc:creator>
<og:description>[TOC] 一、聊聊 WebSocket 从HTML5技术流行至今，WebSocket已经有非常广泛的应用： 在线游戏，提供实时的操作交互体验 社交平台，与好友实时的私信对话 新闻动态，获得感兴趣的主</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/littleatp/p/10771814.html</dc:identifier>
</item>
<item>
<title>死磕 java集合之SynchronousQueue源码分析 - 彤哥读源码</title>
<link>http://www.cnblogs.com/tong-yuan/p/SynchronousQueue.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tong-yuan/p/SynchronousQueue.html</guid>
<description>&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;（1）SynchronousQueue的实现方式？&lt;/p&gt;
&lt;p&gt;（2）SynchronousQueue真的是无缓冲的吗？&lt;/p&gt;
&lt;p&gt;（3）SynchronousQueue在高并发情景下会有什么问题？&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;SynchronousQueue是java并发包下无缓冲阻塞队列，它用来在两个线程之间移交元素，但是它有个很大的问题，你知道是什么吗？请看下面的分析。&lt;/p&gt;
&lt;h2 id=&quot;源码分析&quot;&gt;源码分析&lt;/h2&gt;
&lt;h3 id=&quot;主要属性&quot;&gt;主要属性&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// CPU的数量
static final int NCPUS = Runtime.getRuntime().availableProcessors();
// 有超时的情况自旋多少次，当CPU数量小于2的时候不自旋
static final int maxTimedSpins = (NCPUS &amp;lt; 2) ? 0 : 32;
// 没有超时的情况自旋多少次
static final int maxUntimedSpins = maxTimedSpins * 16;
// 针对有超时的情况，自旋了多少次后，如果剩余时间大于1000纳秒就使用带时间的LockSupport.parkNanos()这个方法
static final long spinForTimeoutThreshold = 1000L;
// 传输器，即两个线程交换元素使用的东西
private transient volatile Transferer&amp;lt;E&amp;gt; transferer;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过属性我们可以Get到两个点：&lt;/p&gt;
&lt;p&gt;（1）这个阻塞队列里面是会自旋的；&lt;/p&gt;
&lt;p&gt;（2）它使用了一个叫做transferer的东西来交换元素；&lt;/p&gt;
&lt;h3 id=&quot;主要内部类&quot;&gt;主要内部类&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// Transferer抽象类，主要定义了一个transfer方法用来传输元素
abstract static class Transferer&amp;lt;E&amp;gt; {
    abstract E transfer(E e, boolean timed, long nanos);
}
// 以栈方式实现的Transferer
static final class TransferStack&amp;lt;E&amp;gt; extends Transferer&amp;lt;E&amp;gt; {
    // 栈中节点的几种类型：
    // 1. 消费者（请求数据的）
    static final int REQUEST    = 0;
    // 2. 生产者（提供数据的）
    static final int DATA       = 1;
    // 3. 二者正在匹配中
    static final int FULFILLING = 2;

    // 栈中的节点
    static final class SNode {
        // 下一个节点
        volatile SNode next;        // next node in stack
        // 匹配者
        volatile SNode match;       // the node matched to this
        // 等待着的线程
        volatile Thread waiter;     // to control park/unpark
        // 元素
        Object item;                // data; or null for REQUESTs
        // 模式，也就是节点的类型，是消费者，是生产者，还是正在匹配中
        int mode;
    }
    // 栈的头节点
    volatile SNode head;
}
// 以队列方式实现的Transferer
static final class TransferQueue&amp;lt;E&amp;gt; extends Transferer&amp;lt;E&amp;gt; {
    // 队列中的节点
    static final class QNode {
        // 下一个节点
        volatile QNode next;          // next node in queue
        // 存储的元素
        volatile Object item;         // CAS'ed to or from null
        // 等待着的线程
        volatile Thread waiter;       // to control park/unpark
        // 是否是数据节点
        final boolean isData;
    }

    // 队列的头节点
    transient volatile QNode head;
    // 队列的尾节点
    transient volatile QNode tail;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（1）定义了一个抽象类Transferer，里面定义了一个传输元素的方法；&lt;/p&gt;
&lt;p&gt;（2）有两种传输元素的方法，一种是栈，一种是队列；&lt;/p&gt;
&lt;p&gt;（3）栈的特点是后进先出，队列的特点是先进行出；&lt;/p&gt;
&lt;p&gt;（4）栈只需要保存一个头节点就可以了，因为存取元素都是操作头节点；&lt;/p&gt;
&lt;p&gt;（5）队列需要保存一个头节点一个尾节点，因为存元素操作尾节点，取元素操作头节点；&lt;/p&gt;
&lt;p&gt;（6）每个节点中保存着存储的元素、等待着的线程，以及下一个节点；&lt;/p&gt;
&lt;p&gt;（7）栈和队列两种方式有什么不同呢？请看下面的分析。&lt;/p&gt;
&lt;h3 id=&quot;主要构造方法&quot;&gt;主要构造方法&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public SynchronousQueue() {
    // 默认非公平模式
    this(false);
}

public SynchronousQueue(boolean fair) {
    // 如果是公平模式就使用队列，如果是非公平模式就使用栈
    transferer = fair ? new TransferQueue&amp;lt;E&amp;gt;() : new TransferStack&amp;lt;E&amp;gt;();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（1）默认使用非公平模式，也就是栈结构；&lt;/p&gt;
&lt;p&gt;（2）公平模式使用队列，非公平模式使用栈；&lt;/p&gt;
&lt;h3 id=&quot;入队&quot;&gt;入队&lt;/h3&gt;
&lt;p&gt;我们这里主要介绍以栈方式实现的传输模式，以put(E e)方法为例。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public void put(E e) throws InterruptedException {
    // 元素不可为空
    if (e == null) throw new NullPointerException();
    // 直接调用传输器的transfer()方法
    // 三个参数分别是：传输的元素，是否需要超时，超时的时间
    if (transferer.transfer(e, false, 0) == null) {
        // 如果传输失败，直接让线程中断并抛出中断异常
        Thread.interrupted();
        throw new InterruptedException();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;调用transferer的transfer()方法，传入元素e，说明是生产者&lt;/p&gt;
&lt;h3 id=&quot;出队&quot;&gt;出队&lt;/h3&gt;
&lt;p&gt;我们这里主要介绍以栈方式实现的传输模式，以take()方法为例。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public E take() throws InterruptedException {
    // 直接调用传输器的transfer()方法
    // 三个参数分别是：null，是否需要超时，超时的时间
    // 第一个参数为null表示是消费者，要取元素
    E e = transferer.transfer(null, false, 0);
    // 如果取到了元素就返回
    if (e != null)
        return e;
    // 否则让线程中断并抛出中断异常
    Thread.interrupted();
    throw new InterruptedException();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;调用transferer的transfer()方法，传入null，说明是消费者。&lt;/p&gt;
&lt;h3 id=&quot;transfer方法&quot;&gt;transfer()方法&lt;/h3&gt;
&lt;p&gt;transfer()方法同时实现了取元素和放元素的功能，下面我再来看看这个transfer()方法里究竟干了什么。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// TransferStack.transfer()方法
E transfer(E e, boolean timed, long nanos) {
    SNode s = null; // constructed/reused as needed
    // 根据e是否为null决定是生产者还是消费者
    int mode = (e == null) ? REQUEST : DATA;
    // 自旋+CAS，熟悉的套路，熟悉的味道
    for (;;) {
        // 栈顶元素
        SNode h = head;
        // 栈顶没有元素，或者栈顶元素跟当前元素是一个模式的
        // 也就是都是生产者节点或者都是消费者节点
        if (h == null || h.mode == mode) {  // empty or same-mode
            // 如果有超时而且已到期
            if (timed &amp;amp;&amp;amp; nanos &amp;lt;= 0) {      // can't wait
                // 如果头节点不为空且是取消状态
                if (h != null &amp;amp;&amp;amp; h.isCancelled())
                    // 就把头节点弹出，并进入下一次循环
                    casHead(h, h.next);     // pop cancelled node
                else
                    // 否则，直接返回null（超时返回null）
                    return null;
            } else if (casHead(h, s = snode(s, e, h, mode))) {
                // 入栈成功（因为是模式相同的，所以只能入栈）
                // 调用awaitFulfill()方法自旋+阻塞当前入栈的线程并等待被匹配到
                SNode m = awaitFulfill(s, timed, nanos);
                // 如果m等于s，说明取消了，那么就把它清除掉，并返回null
                if (m == s) {               // wait was cancelled
                    clean(s);
                    // 被取消了返回null
                    return null;
                }
                
                // 到这里说明匹配到元素了
                // 因为从awaitFulfill()里面出来要不被取消了要不就匹配到了
                
                // 如果头节点不为空，并且头节点的下一个节点是s
                // 就把头节点换成s的下一个节点
                // 也就是把h和s都弹出了
                // 也就是把栈顶两个元素都弹出了
                if ((h = head) != null &amp;amp;&amp;amp; h.next == s)
                    casHead(h, s.next);     // help s's fulfiller
                // 根据当前节点的模式判断返回m还是s中的值
                return (E) ((mode == REQUEST) ? m.item : s.item);
            }
        } else if (!isFulfilling(h.mode)) { // try to fulfill
            // 到这里说明头节点和当前节点模式不一样
            // 如果头节点不是正在匹配中
            
            // 如果头节点已经取消了，就把它弹出栈
            if (h.isCancelled())            // already cancelled
                casHead(h, h.next);         // pop and retry
            else if (casHead(h, s=snode(s, e, h, FULFILLING|mode))) {
                // 头节点没有在匹配中，就让当前节点先入队，再让他们尝试匹配
                // 且s成为了新的头节点，它的状态是正在匹配中
                for (;;) { // loop until matched or waiters disappear
                    SNode m = s.next;       // m is s's match
                    // 如果m为null，说明除了s节点外的节点都被其它线程先一步匹配掉了
                    // 就清空栈并跳出内部循环，到外部循环再重新入栈判断
                    if (m == null) {        // all waiters are gone
                        casHead(s, null);   // pop fulfill node
                        s = null;           // use new node next time
                        break;              // restart main loop
                    }
                    SNode mn = m.next;
                    // 如果m和s尝试匹配成功，就弹出栈顶的两个元素m和s
                    if (m.tryMatch(s)) {
                        casHead(s, mn);     // pop both s and m
                        // 返回匹配结果
                        return (E) ((mode == REQUEST) ? m.item : s.item);
                    } else                  // lost match
                        // 尝试匹配失败，说明m已经先一步被其它线程匹配了
                        // 就协助清除它
                        s.casNext(m, mn);   // help unlink
                }
            }
        } else {                            // help a fulfiller
            // 到这里说明当前节点和头节点模式不一样
            // 且头节点是正在匹配中
            
            SNode m = h.next;               // m is h's match
            if (m == null)                  // waiter is gone
                // 如果m为null，说明m已经被其它线程先一步匹配了
                casHead(h, null);           // pop fulfilling node
            else {
                SNode mn = m.next;
                // 协助匹配，如果m和s尝试匹配成功，就弹出栈顶的两个元素m和s
                if (m.tryMatch(h))          // help match
                    // 将栈顶的两个元素弹出后，再让s重新入栈
                    casHead(h, mn);         // pop both h and m
                else                        // lost match
                    // 尝试匹配失败，说明m已经先一步被其它线程匹配了
                    // 就协助清除它
                    h.casNext(m, mn);       // help unlink
            }
        }
    }
}

// 三个参数：需要等待的节点，是否需要超时，超时时间
SNode awaitFulfill(SNode s, boolean timed, long nanos) {
    // 到期时间
    final long deadline = timed ? System.nanoTime() + nanos : 0L;
    // 当前线程
    Thread w = Thread.currentThread();
    // 自旋次数
    int spins = (shouldSpin(s) ?
                 (timed ? maxTimedSpins : maxUntimedSpins) : 0);
    for (;;) {
        // 当前线程中断了，尝试清除s
        if (w.isInterrupted())
            s.tryCancel();
        
        // 检查s是否匹配到了元素m（有可能是其它线程的m匹配到当前线程的s）
        SNode m = s.match;
        // 如果匹配到了，直接返回m
        if (m != null)
            return m;
        
        // 如果需要超时
        if (timed) {
            // 检查超时时间如果小于0了，尝试清除s
            nanos = deadline - System.nanoTime();
            if (nanos &amp;lt;= 0L) {
                s.tryCancel();
                continue;
            }
        }
        if (spins &amp;gt; 0)
            // 如果还有自旋次数，自旋次数减一，并进入下一次自旋
            spins = shouldSpin(s) ? (spins-1) : 0;
        
        // 后面的elseif都是自旋次数没有了
        else if (s.waiter == null)
            // 如果s的waiter为null，把当前线程注入进去，并进入下一次自旋
            s.waiter = w; // establish waiter so can park next iter
        else if (!timed)
            // 如果不允许超时，直接阻塞，并等待被其它线程唤醒，唤醒后继续自旋并查看是否匹配到了元素
            LockSupport.park(this);
        else if (nanos &amp;gt; spinForTimeoutThreshold)
            // 如果允许超时且还有剩余时间，就阻塞相应时间
            LockSupport.parkNanos(this, nanos);
    }
}

    // SNode里面的方向，调用者m是s的下一个节点
    // 这时候m节点的线程应该是阻塞状态的
    boolean tryMatch(SNode s) {
        // 如果m还没有匹配者，就把s作为它的匹配者
        if (match == null &amp;amp;&amp;amp;
            UNSAFE.compareAndSwapObject(this, matchOffset, null, s)) {
            Thread w = waiter;
            if (w != null) {    // waiters need at most one unpark
                waiter = null;
                // 唤醒m中的线程，两者匹配完毕
                LockSupport.unpark(w);
            }
            // 匹配到了返回true
            return true;
        }
        // 可能其它线程先一步匹配了m，返回其是否是s
        return match == s;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;整个逻辑比较复杂，这里为了简单起见，屏蔽掉多线程处理的细节，只描述正常业务场景下的逻辑：&lt;/p&gt;
&lt;p&gt;（1）如果栈中没有元素，或者栈顶元素跟将要入栈的元素模式一样，就入栈；&lt;/p&gt;
&lt;p&gt;（2）入栈后自旋等待一会看有没有其它线程匹配到它，自旋完了还没匹配到元素就阻塞等待；&lt;/p&gt;
&lt;p&gt;（3）阻塞等待被唤醒了说明其它线程匹配到了当前的元素，就返回匹配到的元素；&lt;/p&gt;
&lt;p&gt;（4）如果两者模式不一样，且头节点没有在匹配中，就拿当前节点跟它匹配，匹配成功了就返回匹配到的元素；&lt;/p&gt;
&lt;p&gt;（5）如果两者模式不一样，且头节点正在匹配中，当前线程就协助去匹配，匹配完成了再让当前节点重新入栈重新匹配；&lt;/p&gt;
&lt;p&gt;如果直接阅读这部分代码还是比较困难的，建议写个测试用例，打个断点一步一步跟踪调试。&lt;/p&gt;
&lt;p&gt;下面是我的测试用例，可以参考下，在IDEA中可以让断点只阻塞线程:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class TestSynchronousQueue {
    public static void main(String[] args) throws InterruptedException {
        SynchronousQueue&amp;lt;Integer&amp;gt; queue = new SynchronousQueue&amp;lt;&amp;gt;(false);

        new Thread(()-&amp;gt;{
            try {
                queue.put(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }).start();


        Thread.sleep(500);
        System.out.println(queue.take());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改断点只阻塞线程的方法，右击断点，选择Thread：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20java%E9%9B%86%E5%90%88%E7%B3%BB%E5%88%97/resource/synchronous1.png&quot; alt=&quot;thread&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;交给你了&quot;&gt;交给你了&lt;/h2&gt;
&lt;p&gt;上面的源码分析都是基于Stack的方式来分析的，那么队列是怎么运行的呢？很简单哦，测试用例中的false改成true就可以了，这就交给你了。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;（1）SynchronousQueue是java里的无缓冲队列，用于在两个线程之间直接移交元素；&lt;/p&gt;
&lt;p&gt;（2）SynchronousQueue有两种实现方式，一种是公平（队列）方式，一种是非公平（栈）方式；&lt;/p&gt;
&lt;p&gt;（3）栈方式中的节点有三种模式：生产者、消费者、正在匹配中；&lt;/p&gt;
&lt;p&gt;（4）栈方式的大致思路是如果栈顶元素跟自己一样的模式就入栈并等待被匹配，否则就匹配，匹配到了就返回；&lt;/p&gt;
&lt;p&gt;（5）队列方式的大致思路是……不告诉你^^（两者的逻辑差别还是挺大的）&lt;/p&gt;
&lt;h2 id=&quot;彩蛋&quot;&gt;彩蛋&lt;/h2&gt;
&lt;p&gt;（1）SynchronousQueue真的是无缓冲的队列吗？&lt;/p&gt;
&lt;p&gt;通过源码分析，我们可以发现其实SynchronousQueue内部或者使用栈或者使用队列来存储包含线程和元素值的节点，如果同一个模式的节点过多的话，它们都会存储进来，且都会阻塞着，所以，严格上来说，SynchronousQueue并不能算是一个无缓冲队列。&lt;/p&gt;
&lt;p&gt;（2）SynchronousQueue有什么缺点呢？&lt;/p&gt;
&lt;p&gt;试想一下，如果有多个生产者，但只有一个消费者，如果消费者处理不过来，是不是生产者都会阻塞起来？反之亦然。&lt;/p&gt;
&lt;p&gt;这是一件很危险的事，所以，SynchronousQueue一般用于生产、消费的速度大致相当的情况，这样才不会导致系统中过多的线程处于阻塞状态。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;欢迎关注我的公众号“彤哥读源码”，查看更多源码系列文章, 与彤哥一起畅游源码的海洋。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20java%E9%9B%86%E5%90%88%E7%B3%BB%E5%88%97/resource/qrcode_ss.jpg&quot; alt=&quot;qrcode&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 25 Apr 2019 15:01:00 +0000</pubDate>
<dc:creator>彤哥读源码</dc:creator>
<og:description>SynchronousQueue的实现方式？ SynchronousQueue真的是无缓冲的吗？ SynchronousQueue在高并发情景下会有什么问题？</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tong-yuan/p/SynchronousQueue.html</dc:identifier>
</item>
<item>
<title>系统掉盘，机械硬盘掉盘，固态掉盘 - 三天泪</title>
<link>http://www.cnblogs.com/3daytears/p/10771724.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/3daytears/p/10771724.html</guid>
<description>&lt;p&gt;之前的立式服务器当了主机打起了游戏，但是经过半年的游戏的时间发现，机子开始变得卡了？我不由得怀疑是不是机子出现老化的问题了。打开盖子一看进了灰尘，就开始清灰了，但是情况在心理暗示的情况下没有好转。这时我打游戏才了打了三个月。&lt;/p&gt;
&lt;p&gt;不由得开始思考是不是真的老化了，事情才刚刚开始。在2个月后打游戏的晚上，我的游戏盘掉了。一个属于2t分区（666g）的盘直接就没了，是分区先没的，然后我就困惑的发现其他盘也反应变慢，写一个笔记txt都要保存一分钟。我无奈的只能重启。英雄联盟挂机之路开始~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1130764/201904/1130764-20190425221937393-615713812.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现又变好了。嗯估计是系统bug吧，继续嗨~&lt;/p&gt;

&lt;p&gt;出问题第二个月，我的2t硬盘的分区开始全部掉了。可是这怎么能难倒我，我换一个sata插口继续玩，果然又识别了。果然是主板问题。然后也怀疑是电源老化，取下了一半的机箱风扇（3个）。继续玩着&lt;/p&gt;
&lt;p&gt;然后第三个月，悲哀的我发现或许是突然断电导致我的硬盘烧了。每次一开机就宿舍断电，宿管阿姨说是不是插排坏了，重买一个吧。。。。然后，我就重买了一个插排，仅靠着最后一个sata插口又玩了一个月。&lt;span&gt;（排除了插排和sata接口的问题）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第四个月，经过我的电脑谁都不许碰，但还是在一个宁静的中午突然断电。一问才知道没交电费，匆匆交了电费，发现我的电脑还能开，硬盘没有坏。但是此时此刻的我已经很悲伤了。因为这是最后一个sata口，一旦炸了，我的2t数据或许就这么没了。小电影还是随意的，但是那些保存了n年的破解软件，怎么搞？已经没有下载地方了啊！还有100g纯音乐，现在都是付费的下载怎么可能复现嘛。&lt;span&gt;（数据无价，硬盘有价！）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 然后买了三星的ssd，个人猜测是机械硬盘的质量问题。因为或许是机子过热导致硬盘识别不了？&lt;span&gt;（这排除了sata线的问题）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;但是在换了ssd，把机械硬盘塞床底下玩了2个月后，简直颠覆我的想法了，ssd也在掉盘！！！&lt;span&gt;（排除了sdd固态硬盘是因为质量问题，也证明了机械硬盘掉盘不是自己的错）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我的天，我实在不敢相信三星的ssd还掉盘！怎么可能？我不由得目光投向主机，之前我抱到宿舍的机子，没有漏电，现在漏电了！是什么原因？排插没有地线？还是主板漏电？&lt;/p&gt;
&lt;p&gt;我尝试的摸了一下机箱并继续感受着光滑的机箱却出现粗糙的感觉，此时的脚晃着踩在了电脑桌上。突然发生针刺一般的痛。我记得之前漏电没有这么厉害！怎么可能会出现痛觉，记得是手指轻点的而不是针刺！我有点明白了。或许一开始我的配件就没有问题呢？&lt;/p&gt;
&lt;p&gt;或许吧&lt;/p&gt;
&lt;p&gt;我打开摸了一下ssd，果然带电了，摩擦感觉很足。和之前取下来机械硬盘的情况一样，带电！&lt;/p&gt;
&lt;p&gt;但是另一个ssd没问题？是因为是塑料壳子么，在我拔下来的时候sata的线电了我一下。我。。。&lt;/p&gt;
&lt;p&gt;主板！主板在漏电！一直在欺负我的硬盘！&lt;/p&gt;
&lt;p&gt;我决定要拆开他！全部拆开，我臆想着主板后面一定藏着大块灰尘！&lt;/p&gt;
&lt;p&gt;然而今天的早上的我发现。&lt;/p&gt;
&lt;p&gt;拆下来的电源轻轻放下来的时候，竟然掉了一团灰尘！我擦，我轻轻的掉一团！怎么可能嘛？&lt;/p&gt;
&lt;p&gt;我拆开了我的电源，悲伤的发现除了电路板就是灰尘。。。&lt;/p&gt;
&lt;p&gt;然后我大概就明白了是因为什么了。&lt;/p&gt;


&lt;p&gt;机箱的风道：&lt;/p&gt;
&lt;p&gt;每个机箱都不一样，但是都会因为ssd或者hdd的存放位置造成风道死角，当然这在新的主板已经得到有效解决了&lt;/p&gt;
&lt;p&gt;我的电源和硬盘在下面，风力小只有正面一个风扇抽风，背面没有地方安装，也正是正面抽风导致靠后的电源从下抽风周围的风压增大。&lt;/p&gt;
&lt;p&gt;这也是为什么我在家没问题来了就有问题，因为第一次清灰的时候发现这么设置不合理，正面应该抽风，而不是吸风，这样就不会造成主板上的灰尘堆积了。但是这样做就会造成电源的吸风变大，造成电源内囤积了灰尘。&lt;/p&gt;
&lt;p&gt;这或许就是X58主板的短板吧&lt;/p&gt;
&lt;p&gt;希望其他掉盘的也可以参考&lt;/p&gt;

</description>
<pubDate>Thu, 25 Apr 2019 15:00:00 +0000</pubDate>
<dc:creator>三天泪</dc:creator>
<og:description>之前的立式服务器当了主机打起了游戏，但是经过半年的游戏的时间发现，机子开始变得卡了？我不由得怀疑是不是机子出现老化的问题了。打开盖子一看进了灰尘，就开始清灰了，但是情况在心理暗示的情况下没有好转。这时</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/3daytears/p/10771724.html</dc:identifier>
</item>
<item>
<title>页面性能优化-原生JS实现图片懒加载 - Peer1029</title>
<link>http://www.cnblogs.com/peerless1029/p/10771695.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/peerless1029/p/10771695.html</guid>
<description>
&lt;p&gt;  &lt;span&gt; &lt;span&gt;在项目开发中，我们往往会遇到一个页面需要加载很多图片的情况。我们可以一次性加载全部的图片，但是考虑到用户有可能只浏览部分图片。所以我们需要对图片加载进行优化，只加载浏览器窗口内的图片，当用户滚动时，再加载更多的图片。这种加载图片的方式叫做图片懒加载，又叫做按需加载或图片的延时加载。这样做的好处是：1.可以加快页面首屏渲染的速度；2.节约用户的流量。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一.实现思路&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.图片img标签自定义一个属性data-src来存放真实的地址。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.当滚动页面时，检查所有的img标签，判断是否出现在事业中，如果出现在视野中，继续进行判断，看齐是否被加载过了，如果没有加载，那就进行加载。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;判断图片元素是否处于浏览器视野中的示意图（手绘）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201904/1103967-20190425222810071-1832515366.jpg&quot; alt=&quot;&quot; width=&quot;585&quot; height=&quot;806&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二.根据思路完成代码如下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;原生js实现图片懒加载&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    *&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    ul&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; hidden&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    li&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    li img&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; inline-block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/1.jpg&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/1.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/2.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/3.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/4.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/5.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/6.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/7.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/8.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/9.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/10.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/11.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/12.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/13.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/14.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/15.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;http://cdn.jirengu.com/book.jirengu.com/img/16.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; window绑定滚动事件&lt;/span&gt;
&lt;span&gt;  window.addEventListener(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scroll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历所有的img标签&lt;/span&gt;
&lt;span&gt;    Array.prototype.slice.apply(document.getElementsByTagName(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)).forEach((li)&lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt;{
      let img&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;li.getElementsByTagName(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断当前img是否出现在了视野中&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断当前img是否被加载过了&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(checkShow(img) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;isLoaded(img)){
        loadImg(img);
      }
    })
  });

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断img是否出现浏览器视野中&lt;/span&gt;
  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; checkShow(img) {
    let scrollTop&lt;/span&gt;&lt;span&gt;=document.documentElement.scrollTop&lt;/span&gt;&lt;span&gt;; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 页面向上滚动的高度&lt;/span&gt;
&lt;span&gt;    let windowHeight&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;window.innerHeight; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;浏览器自身高度&lt;/span&gt;
&lt;span&gt;    let offsetTop&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;img.offsetTop; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;目标标签相对于document的高度&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (offsetTop &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; scrollTop &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; offsetTop &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;(windowHeight &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; scrollTop));
  }

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断是否已经加载过&lt;/span&gt;
  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; isLoaded(img) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; img.getAttribute(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt;img.getAttribute(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
  }

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 加载图片&lt;/span&gt;
  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; loadImg(img) {
   img.setAttribute(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,img.getAttribute(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
  }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，在浏览器中运行一下，第一次进页面如果不滚动滚轮的话什么也看不到，所以第一次进页面需要调用checkShow(),处于视野中的图片也加载出来。&lt;/p&gt;
&lt;p&gt;在代码最后加上：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
// 第一次进页面加载处于视野中的图片
 Array.prototype.slice.apply(document.getElementsByTagName('li')).forEach((li)=&amp;gt;{
    let img=li.getElementsByTagName('img')[0];
    // 判断当前img是否出现在了视野中
    // 判断当前img是否被加载过了
    if(checkShow(img) &amp;amp;&amp;amp; !isLoaded(img)){
      loadImg(img);
    }
  })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;此时我们发现判断加载视野中的图片代码存在重复，直接封装成一个新的方法lazyRenderImg();&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; window绑定滚动事件&lt;/span&gt;
  window.addEventListener('scroll',&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历所有的img标签&lt;/span&gt;
&lt;span&gt;    lazyRenderImg();
  });

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; lazyRenderImg(){
 Array.prototype.slice.apply(document.getElementsByTagName(&lt;/span&gt;'li')).forEach((li)=&amp;gt;&lt;span&gt;{
      let img&lt;/span&gt;=li.getElementsByTagName('img')[0&lt;span&gt;];
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断当前img是否出现在了视野中&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断当前img是否被加载过了&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt;(checkShow(img) &amp;amp;&amp;amp; !&lt;span&gt;isLoaded(img)){
        loadImg(img);
      }
    })
  }

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一次进页面加载处于视野中的图片&lt;/span&gt;
  lazyRenderImg();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 三.性能优化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问题：window.scroll 方法页面只要一滚动就会触发里面的方法，对性能影响很大&lt;/p&gt;
&lt;p&gt;解决方法：当页面停止滚动的时候，再去执行页面中的方法，类似与函数节流（throttle）&lt;/p&gt;
&lt;p&gt;Tips:函数节流：等时间间隔执行函数， 让一个函数不要执行得太频繁，减少一些过快的调用来节流。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; window绑定滚动事件&lt;/span&gt;
&lt;span&gt;  let timer;
  window.addEventListener(&lt;/span&gt;'scroll',&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){&lt;br/&gt;console.log('scroll')
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历所有的img标签&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(timer){
      clearTimeout(timer)
    }
    timer&lt;/span&gt;=setTimeout(()=&amp;gt;&lt;span&gt;{&lt;br/&gt;console.log('lazyRenderImg...');
      lazyRenderImg();
    },&lt;/span&gt;300&lt;span&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过打印的日志发现当滚动停止后才执行lazyRenderImg方法的，确实减少了不必要调用lazyRenderImg的次数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201904/1103967-20190425224746163-1369627931.png&quot; alt=&quot;&quot; width=&quot;632&quot; height=&quot;276&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    页面性能优化之图片懒加载就写这么多了，网页优化还有很多方法与技巧，前端路漫漫其修远兮，吾将上下而求索。本文不足之处，请多指正。&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;https://www.jianshu.com/p/1b32e16ed0e5&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 25 Apr 2019 14:55:00 +0000</pubDate>
<dc:creator>Peer1029</dc:creator>
<og:description>在项目开发中，我们往往会遇到一个页面需要加载很多图片的情况。我们可以一次性加载全部的图片，但是考虑到用户有可能只浏览部分图片。所以我们需要对图片加载进行优化，只加载浏览器窗口内的图片，当用户滚动时，再</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/peerless1029/p/10771695.html</dc:identifier>
</item>
<item>
<title>[译]背景：着色的物理和数学(4) - BIT祝威</title>
<link>http://www.cnblogs.com/bitzhuwei/p/background-Physics-and-Math-of-Shading-4.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bitzhuwei/p/background-Physics-and-Math-of-Shading-4.html</guid>
<description>&lt;p&gt;&lt;span&gt;[译]背景：着色的物理和数学(4)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（译者注：本文是翻译的Naty Hoffman的《Background: Physics and Math of Shading》。我希望通过翻译此文，彻底理解PBR的原理。某些我实在不知道如何恰当翻译的地方，就把英文原文也放上了。）&lt;/p&gt;


&lt;p&gt;很多发表的微表面BRDF函数中，都把分子G(l, v, h)的和分母(n•l)(n•v)的各用一个子表达式代替了，所以有必要给它们起个名字。由于分母可以被认为是“透视缩减因子”，且它的两部分都与可见性相关，我就称它为“可见性项”。有的BRDF函数（常常是那些用于电影和游戏中的）根本没有可见性项，这等于将可见性项设置为1，算是对几何函数的隐式定义：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224350047-1079606976.png&quot; alt=&quot;&quot;/&gt;(29)&lt;/p&gt;
&lt;p&gt;这对于高度场微表面（对应Blinn-Phong的法线分布函数，毕竟它对所有背向的微观几何体表面区域都是0）这实际上是一个看起来可信的几何函数。当l=n且v=n时，Gimplicit()等于1，这对于高度场是正确的（在微表面法线方向上没有微观几何体的表面区域被遮挡）。它在l或v为掠射角时，它为0，这也是正确的（表面点被其他表面区域遮挡的概率，随观察者角度的增加而增加，极限是100%）。鉴于这一几何函数的耗费（一次循环都不需要），它有很高的“性价比”。&lt;/p&gt;
&lt;p&gt;当比较Gimplicit()与其图形学文献中的几何函数时，我们发现它达到0的速度太快——它在湿度的掠射角就很暗了。换句话说，添加一个显式的集合函数，会让specular项的高光更亮（这可能看起来不符合直觉，然后我们想起来我们同时也在分母引入了透视缩减因子）。这个隐式的函数不受表面粗糙度的影响，这不符合真实——我们期望粗糙的表面比光滑的表面有更大的阴影和遮蔽概率。&lt;/p&gt;
&lt;p&gt;图形学文献中最早的几何函数被称为“Cook-Torrance”，其出现在这两位作者的著名论文中[15, 16]：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224358906-1176308117.png&quot; alt=&quot;&quot;/&gt;(30)&lt;/p&gt;
&lt;p&gt;Torrance和Sparrow[70]提出了一个几何函数，之后（在Equation 30几年后），Blinn[7]在一篇论文中首次提出这个几何函数的一个变形（因此，更准确的叫法应该是“Blinn-Torrance-Sparrow几何函数”，但是“Cook-Torrance”的用法已经太普遍了，改不了了）。这些年来Cook-Torrance几何函数被大量采用（特别是电影），但是它有几个问题：它是基于一个不真实的微观几何体模型（由无限长的凹槽组成的各向同性表面），且不受粗糙度影响。&lt;/p&gt;
&lt;p&gt;另外，Cook-Torrance对游戏来说比较昂贵。但是，Kelemen et al.[41]提出了一个非常廉价高效的近似：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224405294-1677617758.png&quot; alt=&quot;&quot;/&gt;(31)&lt;/p&gt;
&lt;p&gt;这几乎和隐式几何函数一样廉价了。它逼近Cook-Torrance几何函数和分母上的透视缩减因子，却只需要除以点积（反正这个点积也要在Fresnel项中计算）的平方。&lt;/p&gt;
&lt;p&gt;当考虑整体上的精确度时，我个人推荐几何函数中的Smith函数族[66]。它们被广泛认为比Cook-Torrance更精确，而且考虑了粗糙度和法线分布的形状。原始的Smith函数被设计为供Beckmann的NDF用，但是Brown[9]和后来的Bourlier et al.[8]将Smith函数泛化为一套计算能适应任何NDF的几何函数的方法。Walter et al.[73]总结了这些成果，为Beckmann和Trowbridge-Reitz(GGX)（注意，Schlick对原始Smith函数的近似，严格来说，用在微平面BRDF中是错误的，因为它近似的是错误的函数版本。这个错误在多处被推荐给读者——悲剧的是包括我自己的书。但是，研究表明[38]，做一点参数重映射，它还能作为正确函数的高效近似）的NDF函数，给出了一个对Smith函数的高效的近似。Bagher et al.[4]针对他们提出的SGD版NDF，给出了一个Smith函数的近似。&lt;/p&gt;
&lt;p&gt;Smith函数组已经被用于制作效果良好的电影[10, 54]，尽管前述论文的作者推荐用户要调整粗糙度值。已发表的对各种Smith函数的近似，还是比Kelemen函数昂贵的多，尽管可能为游戏找到便宜的近似，在相同的程度上还是Kelemen函数更成功地逼近（更复杂得多的）Cook-Torrance几何函数（Schlick-Smith几何函数族的类似近似在本课程另一讲中有介绍）。&lt;/p&gt;

&lt;p&gt;《Real-Time Rendering》第三版第7章[58]，概述了基于物理的着色模型，比本课程更加深入一些。如果需要更深入了解，考虑读一下Glassner的《Principles of Digital Images Synthesis》[25, 26]，或者Dorsey、Rushmeier和Sillicon的《Digital Modeling of Material Appearance》[21]。注意，这些书里不包括这几年最新的研究成果。&lt;/p&gt;
&lt;p&gt;Dutre的免费在线《Global Illumination Compendium》[23]是BRDF、辐射度量数学和各种相关东西的有用的参考书。&lt;/p&gt;
&lt;p&gt;最后，本课程的其他讲（包括2010和2012的前任）包含很多将基于物理的着色模型用于生产的有用信息。&lt;/p&gt;

&lt;p&gt;（这个就不翻译了，有兴趣的自己看）&lt;/p&gt;

&lt;p&gt;（译者注：从PDF里直接复制，会出现很多乱码，所以我直接上图了。）&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224417191-42099397.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224427881-395569171.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224441041-554503040.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224446977-132369032.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224455826-1610862286.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224503351-1565424083.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224507362-379113849.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224515956-1933343626.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224523710-983873681.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224528526-760902870.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224534051-225438429.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/383191/201904/383191-20190425224540136-933113635.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 25 Apr 2019 14:48:00 +0000</pubDate>
<dc:creator>BIT祝威</dc:creator>
<og:description>[译]背景：着色的物理和数学(4) （译者注：本文是翻译的Naty Hoffman的《Background: Physics and Math of Shading》。我希望通过翻译此文，彻底理解PB</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bitzhuwei/p/background-Physics-and-Math-of-Shading-4.html</dc:identifier>
</item>
<item>
<title>《k8s 源码分析》- Custom Controller 之 Informer - CloudGeek</title>
<link>http://www.cnblogs.com/cloudgeek/p/10771567.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cloudgeek/p/10771567.html</guid>
<description>&lt;h2 id=&quot;概述&quot;&gt;1. 概述&lt;/h2&gt;
&lt;p&gt;本节标题写的是 Informer，不过我们的内容不局限于狭义的 Informer 部分，只是 Informer 最有代表性，其他的 Reflector 等也不好独立开来讲。&lt;/p&gt;
&lt;p&gt;Informer 在很多组件的源码中可以看到，尤其是 kube-controller-manager (写这篇文章时我已经基本写完 kube-scheduler 的源码分析，着手写 kube-controller-manager 了，鉴于 controlelr 和 client-go 关联比较大，跳过来先讲讲典型的控制器工作流程中涉及到的 client-go 部分).&lt;/p&gt;
&lt;p&gt;Informer 是 client-go 中一个比较核心的工具，通过 Informer(实际我们用到的都不是单纯的 informer，而是组合了各种工具的 sharedInformerFactory) 我们可以轻松 List/Get 某个资源对象，可以监听资源对象的各种事件(比如创建和删除)然后触发回调函数，让我们能够在各种事件发生的时候能够作出相应的逻辑处理。举个例字，当 pod 数量变化的时候 deployment 是不是需要判断自己名下的 pod 数量是否还和预期的一样？如果少了是不是要考虑创建？&lt;/p&gt;
&lt;h2 id=&quot;架构概览&quot;&gt;2. 架构概览&lt;/h2&gt;
&lt;p&gt;自定义控制器的工作流程基本如下图所示，我们今天要分析图中上半部分的逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farmer-hutao.github.io/k8s-source-code-analysis/around/client-go/image/informer/1555996411720.png&quot; alt=&quot;1555996411720&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们开发自定义控制器的时候用到的“机制”主要定义在 client-go 的 tool/cache下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farmer-hutao.github.io/k8s-source-code-analysis/around/client-go/image/informer/1556075198766.png&quot; alt=&quot;1556075198766&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们根据图中的9个步骤来跟源码&lt;/p&gt;
&lt;h2 id=&quot;reflector_-_List___Watch_API_Server&quot;&gt;3. reflector - List &amp;amp; Watch API Server&lt;/h2&gt;
&lt;p&gt;Reflector 会监视特定的资源，将变化写入给定的存储中，也就是 Delta FIFO queue.&lt;/p&gt;
&lt;h3 id=&quot;Reflector_对象&quot;&gt;3.1. Reflector 对象&lt;/h3&gt;
&lt;p&gt;Reflector 的中文含义是反射器，我们先看一下类型定义：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/reflector.go:47&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type Reflector &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
   name &lt;span class=&quot;token builtin&quot;&gt;string
   metrics &lt;span class=&quot;token operator&quot;&gt;*reflectorMetrics
   expectedType reflect&lt;span class=&quot;token punctuation&quot;&gt;.Type

   store Store
   listerWatcher ListerWatcher

   period       time&lt;span class=&quot;token punctuation&quot;&gt;.Duration
   resyncPeriod time&lt;span class=&quot;token punctuation&quot;&gt;.Duration
   ShouldResync &lt;span class=&quot;token keyword&quot;&gt;func&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;bool
   clock clock&lt;span class=&quot;token punctuation&quot;&gt;.Clock
   lastSyncResourceVersion &lt;span class=&quot;token builtin&quot;&gt;string
   lastSyncResourceVersionMutex sync&lt;span class=&quot;token punctuation&quot;&gt;.RWMutex
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;reflector.go&lt;/code&gt;中主要就 Reflector 这个 struct 和相关的一些函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farmer-hutao.github.io/k8s-source-code-analysis/around/client-go/image/informer/1556075898739.png&quot; alt=&quot;1556075898739&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;ListAndWatch&quot;&gt;3.2. ListAndWatch&lt;/h3&gt;
&lt;p&gt;ListAndWatch 首先 list 所有 items，获取当前的资源版本信息，然后使用这个版本信息来 watch(也就是从这个版本开始的所有资源变化会被关注)。我们看一下这里的 ListAndWatch 方法主要逻辑：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/reflector.go:168&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(r &lt;span class=&quot;token operator&quot;&gt;*Reflector&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;ListAndWatch&lt;span class=&quot;token punctuation&quot;&gt;(stopCh &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;span class=&quot;token keyword&quot;&gt;chan &lt;span class=&quot;token keyword&quot;&gt;struct&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;error &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;watchHandler_-_add_obj_to_delta_fifo&quot;&gt;4. watchHandler - add obj to delta fifo&lt;/h2&gt;
&lt;p&gt;前面讲到 ListAndWatch 函数的最后一步逻辑是 watchHandler，在 ListAndWatch 中先是更新了 Delta FIFO 中的 item，然后 watch 资源对象，最后交给 watchHandler 处理，所以 watchHandler 基本可以猜到是将有变化的资源添加到 Delta FIFO 中了。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/reflector.go:287&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(r &lt;span class=&quot;token operator&quot;&gt;*Reflector&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;watchHandler&lt;span class=&quot;token punctuation&quot;&gt;(w watch&lt;span class=&quot;token punctuation&quot;&gt;.Interface&lt;span class=&quot;token punctuation&quot;&gt;, resourceVersion &lt;span class=&quot;token operator&quot;&gt;*&lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;, errc &lt;span class=&quot;token keyword&quot;&gt;chan &lt;span class=&quot;token builtin&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;, stopCh &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;span class=&quot;token keyword&quot;&gt;chan &lt;span class=&quot;token keyword&quot;&gt;struct&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;error &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;Informer_(controller)_-_pop_obj_from_delta_fifo&quot;&gt;5. Informer (controller) - pop obj from delta fifo&lt;/h2&gt;
&lt;h3 id=&quot;Controller&quot;&gt;5.1. Controller&lt;/h3&gt;
&lt;p&gt;一个 Informer 需要实现 Controller 接口：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/controller.go:82&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type Controller &lt;span class=&quot;token keyword&quot;&gt;interface &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;span class=&quot;token function&quot;&gt;Run&lt;span class=&quot;token punctuation&quot;&gt;(stopCh &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;span class=&quot;token keyword&quot;&gt;chan &lt;span class=&quot;token keyword&quot;&gt;struct&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token function&quot;&gt;HasSynced&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;bool
   &lt;span class=&quot;token function&quot;&gt;LastSyncResourceVersion&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;string
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;一个基础的 Controller 实现如下：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/controller.go:75&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type controller &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
   config         Config
   reflector      &lt;span class=&quot;token operator&quot;&gt;*Reflector
   reflectorMutex sync&lt;span class=&quot;token punctuation&quot;&gt;.RWMutex
   clock          clock&lt;span class=&quot;token punctuation&quot;&gt;.Clock
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;controller 类型结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farmer-hutao.github.io/k8s-source-code-analysis/around/client-go/image/informer/1556088003902.png&quot; alt=&quot;1556088003902&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到主要对外暴露的逻辑是 Run() 方法，我们看一下 Run() 中的逻辑：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/controller.go:100&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(c &lt;span class=&quot;token operator&quot;&gt;*controller&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;Run&lt;span class=&quot;token punctuation&quot;&gt;(stopCh &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;span class=&quot;token keyword&quot;&gt;chan &lt;span class=&quot;token keyword&quot;&gt;struct&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;span class=&quot;token keyword&quot;&gt;defer utilruntime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;HandleCrash&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token keyword&quot;&gt;go &lt;span class=&quot;token keyword&quot;&gt;func&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-stopCh
      c&lt;span class=&quot;token punctuation&quot;&gt;.config&lt;span class=&quot;token punctuation&quot;&gt;.Queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Close&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;processLoop&quot;&gt;5.2. processLoop&lt;/h3&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/controller.go:148&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(c &lt;span class=&quot;token operator&quot;&gt;*controller&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;processLoop&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;span class=&quot;token keyword&quot;&gt;for &lt;span class=&quot;token punctuation&quot;&gt;{
       &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这里的 Queue 就是 Delta FIFO，Pop 是个阻塞方法，内部实现时会逐个 pop 队列中的数据，交给 PopProcessFunc 处理。我们先不看 Pop 的实现，关注一下 PopProcessFunc 是如何处理 Pop 中从队列拿出来的 item 的。&lt;/p&gt;
&lt;p&gt;PopProcessFunc 是一个类型：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;type PopProcessFunc func(interface{}) error&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以这里只是一个类型转换，我们关注&lt;code&gt;c.config.Process&lt;/code&gt;就行：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/controller.go:367&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;Process&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token keyword&quot;&gt;func&lt;span class=&quot;token punctuation&quot;&gt;(obj &lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;error &lt;span class=&quot;token punctuation&quot;&gt;{
    &lt;span class=&quot;token keyword&quot;&gt;for &lt;span class=&quot;token boolean&quot;&gt;_&lt;span class=&quot;token punctuation&quot;&gt;, d &lt;span class=&quot;token operator&quot;&gt;:= &lt;span class=&quot;token keyword&quot;&gt;range obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token punctuation&quot;&gt;(Deltas&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
        &lt;span class=&quot;token keyword&quot;&gt;switch d&lt;span class=&quot;token punctuation&quot;&gt;.Type &lt;span class=&quot;token punctuation&quot;&gt;{
            &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这里涉及到2个点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;clientState&lt;/li&gt;
&lt;li&gt;ResourceEventHandler (h)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们一一来看&lt;/p&gt;
&lt;h2 id=&quot;Add_obj_to_Indexer_(Thread_safe_store)&quot;&gt;6. Add obj to Indexer (Thread safe store)&lt;/h2&gt;
&lt;p&gt;前面说到 clientState，这个变量的初始化是&lt;code&gt;clientState := NewIndexer(DeletionHandlingMetaNamespaceKeyFunc, indexers)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;NewIndexer 代码如下：&lt;/p&gt;
&lt;div&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/store.go:239&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token function&quot;&gt;NewIndexer&lt;span class=&quot;token punctuation&quot;&gt;(keyFunc KeyFunc&lt;span class=&quot;token punctuation&quot;&gt;, indexers Indexers&lt;span class=&quot;token punctuation&quot;&gt;) Indexer &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;span class=&quot;token keyword&quot;&gt;return &lt;span class=&quot;token operator&quot;&gt;&amp;amp;cache&lt;span class=&quot;token punctuation&quot;&gt;{
      cacheStorage&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token function&quot;&gt;NewThreadSafeStore&lt;span class=&quot;token punctuation&quot;&gt;(indexers&lt;span class=&quot;token punctuation&quot;&gt;, Indices&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;,
      keyFunc&lt;span class=&quot;token punctuation&quot;&gt;:      keyFunc&lt;span class=&quot;token punctuation&quot;&gt;,
   &lt;span class=&quot;token punctuation&quot;&gt;}
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/index.go:27&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type Indexer &lt;span class=&quot;token keyword&quot;&gt;interface &lt;span class=&quot;token punctuation&quot;&gt;{
   Store
   &lt;span class=&quot;token function&quot;&gt;Index&lt;span class=&quot;token punctuation&quot;&gt;(indexName &lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;, obj &lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;[&lt;span class=&quot;token punctuation&quot;&gt;]&lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token builtin&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token function&quot;&gt;IndexKeys&lt;span class=&quot;token punctuation&quot;&gt;(indexName&lt;span class=&quot;token punctuation&quot;&gt;, indexKey &lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;[&lt;span class=&quot;token punctuation&quot;&gt;]&lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token builtin&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token function&quot;&gt;ListIndexFuncValues&lt;span class=&quot;token punctuation&quot;&gt;(indexName &lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;[&lt;span class=&quot;token punctuation&quot;&gt;]&lt;span class=&quot;token builtin&quot;&gt;string
   &lt;span class=&quot;token function&quot;&gt;ByIndex&lt;span class=&quot;token punctuation&quot;&gt;(indexName&lt;span class=&quot;token punctuation&quot;&gt;, indexKey &lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;[&lt;span class=&quot;token punctuation&quot;&gt;]&lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token builtin&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token function&quot;&gt;GetIndexers&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) Indexers
   &lt;span class=&quot;token function&quot;&gt;AddIndexers&lt;span class=&quot;token punctuation&quot;&gt;(newIndexers Indexers&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;error
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;顺带看一下 NewThreadSafeStore()&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/thread_safe_store.go:298&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token function&quot;&gt;NewThreadSafeStore&lt;span class=&quot;token punctuation&quot;&gt;(indexers Indexers&lt;span class=&quot;token punctuation&quot;&gt;, indices Indices&lt;span class=&quot;token punctuation&quot;&gt;) ThreadSafeStore &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;span class=&quot;token keyword&quot;&gt;return &lt;span class=&quot;token operator&quot;&gt;&amp;amp;threadSafeMap&lt;span class=&quot;token punctuation&quot;&gt;{
      items&lt;span class=&quot;token punctuation&quot;&gt;:    &lt;span class=&quot;token keyword&quot;&gt;map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;]&lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;,
      indexers&lt;span class=&quot;token punctuation&quot;&gt;: indexers&lt;span class=&quot;token punctuation&quot;&gt;,
      indices&lt;span class=&quot;token punctuation&quot;&gt;:  indices&lt;span class=&quot;token punctuation&quot;&gt;,
   &lt;span class=&quot;token punctuation&quot;&gt;}
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;然后关注一下 Process 中的&lt;code&gt;err := clientState.Add(d.Object)&lt;/code&gt;的 Add() 方法：&lt;/p&gt;
&lt;div&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/store.go:123&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(c &lt;span class=&quot;token operator&quot;&gt;*cache&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;Add&lt;span class=&quot;token punctuation&quot;&gt;(obj &lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;error &lt;span class=&quot;token punctuation&quot;&gt;{
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;cacheStorage 是一个 ThreadSafeStore 实例，这个 Add() 代码如下：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/thread_safe_store.go:68&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(c &lt;span class=&quot;token operator&quot;&gt;*threadSafeMap&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;Add&lt;span class=&quot;token punctuation&quot;&gt;(key &lt;span class=&quot;token builtin&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;, obj &lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   c&lt;span class=&quot;token punctuation&quot;&gt;.lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Lock&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token keyword&quot;&gt;defer c&lt;span class=&quot;token punctuation&quot;&gt;.lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Unlock&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;第四步和第五步的内容先分析到这里，后面关注 threadSafeMap 实现的时候再继续深入。&lt;/p&gt;
&lt;h2 id=&quot;sharedIndexInformer&quot;&gt;7. sharedIndexInformer&lt;/h2&gt;
&lt;p&gt;第六步是 Dispatch Event Handler functions(Send Object to Custom Controller)&lt;/p&gt;
&lt;p&gt;我们先看一个接口 SharedInformer：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/shared_informer.go:43&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type SharedInformer &lt;span class=&quot;token keyword&quot;&gt;interface &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;span class=&quot;token function&quot;&gt;AddEventHandler&lt;span class=&quot;token punctuation&quot;&gt;(handler ResourceEventHandler&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token function&quot;&gt;AddEventHandlerWithResyncPeriod&lt;span class=&quot;token punctuation&quot;&gt;(handler ResourceEventHandler&lt;span class=&quot;token punctuation&quot;&gt;, resyncPeriod time&lt;span class=&quot;token punctuation&quot;&gt;.Duration&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token function&quot;&gt;GetStore&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) Store
   &lt;span class=&quot;token function&quot;&gt;GetController&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) Controller
   &lt;span class=&quot;token function&quot;&gt;Run&lt;span class=&quot;token punctuation&quot;&gt;(stopCh &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;span class=&quot;token keyword&quot;&gt;chan &lt;span class=&quot;token keyword&quot;&gt;struct&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token function&quot;&gt;HasSynced&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;bool
   &lt;span class=&quot;token function&quot;&gt;LastSyncResourceVersion&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;string
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;SharedInformer 有一个共享的 data cache，能够分发 changes 通知到缓存，到通过 AddEventHandler 注册了的 listerners. 当你接收到一个通知，缓存的内容能够保证至少和通知中的一样新。&lt;/p&gt;
&lt;p&gt;再看一下 SharedIndexInformer 接口：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/shared_informer.go:66&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type SharedIndexInformer &lt;span class=&quot;token keyword&quot;&gt;interface &lt;span class=&quot;token punctuation&quot;&gt;{
   SharedInformer
   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;相比 SharedInformer 增加了一个 Indexer. 然后看具体的实现 sharedIndexInformer 吧：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/shared_informer.go:127&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type sharedIndexInformer &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
   indexer    Indexer
   controller Controller
   processor             &lt;span class=&quot;token operator&quot;&gt;*sharedProcessor
   cacheMutationDetector CacheMutationDetector
   listerWatcher ListerWatcher

   objectType    runtime&lt;span class=&quot;token punctuation&quot;&gt;.Object
   resyncCheckPeriod time&lt;span class=&quot;token punctuation&quot;&gt;.Duration
   defaultEventHandlerResyncPeriod time&lt;span class=&quot;token punctuation&quot;&gt;.Duration
   clock clock&lt;span class=&quot;token punctuation&quot;&gt;.Clock
   started&lt;span class=&quot;token punctuation&quot;&gt;, stopped &lt;span class=&quot;token builtin&quot;&gt;bool
   startedLock      sync&lt;span class=&quot;token punctuation&quot;&gt;.Mutex
   blockDeltas sync&lt;span class=&quot;token punctuation&quot;&gt;.Mutex
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这个类型内包了很多我们前面看到过的对象，indexer、controller、listeratcher 都不陌生，我们看这里的 processor 是做什么的：&lt;/p&gt;
&lt;h3 id=&quot;sharedProcessor&quot;&gt;7.1. sharedProcessor&lt;/h3&gt;
&lt;p&gt;类型定义如下：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/shared_informer.go:375&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type sharedProcessor &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
   listenersStarted &lt;span class=&quot;token builtin&quot;&gt;bool
   listenersLock    sync&lt;span class=&quot;token punctuation&quot;&gt;.RWMutex
   listeners        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;span class=&quot;token punctuation&quot;&gt;]&lt;span class=&quot;token operator&quot;&gt;*processorListener
   syncingListeners &lt;span class=&quot;token punctuation&quot;&gt;[&lt;span class=&quot;token punctuation&quot;&gt;]&lt;span class=&quot;token operator&quot;&gt;*processorListener
   clock            clock&lt;span class=&quot;token punctuation&quot;&gt;.Clock
   wg               wait&lt;span class=&quot;token punctuation&quot;&gt;.Group
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这里的重点明显是 listeners 属性了，我们继续看 listeners 的类型中的 processorListener：&lt;/p&gt;
&lt;h4 id=&quot;processorListener&quot;&gt;7.1.1. processorListener&lt;/h4&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/shared_informer.go:466&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type processorListener &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
   nextCh &lt;span class=&quot;token keyword&quot;&gt;chan &lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}
   addCh  &lt;span class=&quot;token keyword&quot;&gt;chan &lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}

   handler ResourceEventHandler
   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;processorListener 主要有2个方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;run()&lt;/li&gt;
&lt;li&gt;pop()&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;processorListener_run()&quot;&gt;7.1.2. processorListener.run()&lt;/h4&gt;
&lt;p&gt;先看一下这个 run 做了什么：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/shared_informer.go:540&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(p &lt;span class=&quot;token operator&quot;&gt;*processorListener&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;run&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   stopCh &lt;span class=&quot;token operator&quot;&gt;:= &lt;span class=&quot;token function&quot;&gt;make&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token keyword&quot;&gt;chan &lt;span class=&quot;token keyword&quot;&gt;struct&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;)
    wait&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Until&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token keyword&quot;&gt;func&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{ &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这个 run 过程不复杂，等待信号然后调用 handler 的增删改方法做对应的处理逻辑。case 里的 Notification 再看一眼：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/shared_informer.go:176&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type updateNotification &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
   oldObj &lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}
   newObj &lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;span class=&quot;token punctuation&quot;&gt;}

&lt;span class=&quot;token keyword&quot;&gt;type addNotification &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
   newObj &lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;span class=&quot;token punctuation&quot;&gt;}

&lt;span class=&quot;token keyword&quot;&gt;type deleteNotification &lt;span class=&quot;token keyword&quot;&gt;struct &lt;span class=&quot;token punctuation&quot;&gt;{
   oldObj &lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;另外注意到&lt;code&gt;for next := range p.nextCh&lt;/code&gt;是下面的 case 执行的前提，也就是说触发点是 p.nextCh，我们接着看 pop 过程(这里的逻辑不简单，可能得多花点精力)&lt;/p&gt;
&lt;h4 id=&quot;processorListener_pop()&quot;&gt;7.1.3. processorListener.pop()&lt;/h4&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/shared_informer.go:510&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(p &lt;span class=&quot;token operator&quot;&gt;*processorListener&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;pop&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;span class=&quot;token keyword&quot;&gt;defer utilruntime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;HandleCrash&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token keyword&quot;&gt;defer &lt;span class=&quot;token function&quot;&gt;close&lt;span class=&quot;token punctuation&quot;&gt;(p&lt;span class=&quot;token punctuation&quot;&gt;.nextCh&lt;span class=&quot;token punctuation&quot;&gt;) &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这里的 pop 逻辑的入口是&lt;code&gt;&amp;lt;-p.addCh&lt;/code&gt;，我们继续向上找一下这个 addCh 的来源：&lt;/p&gt;
&lt;h4 id=&quot;processorListener_add()&quot;&gt;7.1.4. processorListener.add()&lt;/h4&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/shared_informer.go:506&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(p &lt;span class=&quot;token operator&quot;&gt;*processorListener&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;add&lt;span class=&quot;token punctuation&quot;&gt;(notification &lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   p&lt;span class=&quot;token punctuation&quot;&gt;.addCh &lt;span class=&quot;token operator&quot;&gt;&amp;lt;- notification
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这个 add() 方法又在哪里被调用呢？&lt;/p&gt;
&lt;h4 id=&quot;sharedProcessor_distribute()&quot;&gt;7.1.5. sharedProcessor.distribute()&lt;/h4&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/shared_informer.go:400&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(p &lt;span class=&quot;token operator&quot;&gt;*sharedProcessor&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;distribute&lt;span class=&quot;token punctuation&quot;&gt;(obj &lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;, sync &lt;span class=&quot;token builtin&quot;&gt;bool&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   p&lt;span class=&quot;token punctuation&quot;&gt;.listenersLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RLock&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token keyword&quot;&gt;defer p&lt;span class=&quot;token punctuation&quot;&gt;.listenersLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RUnlock&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)

   &lt;span class=&quot;token keyword&quot;&gt;if sync &lt;span class=&quot;token punctuation&quot;&gt;{
      &lt;span class=&quot;token keyword&quot;&gt;for &lt;span class=&quot;token boolean&quot;&gt;_&lt;span class=&quot;token punctuation&quot;&gt;, listener &lt;span class=&quot;token operator&quot;&gt;:= &lt;span class=&quot;token keyword&quot;&gt;range p&lt;span class=&quot;token punctuation&quot;&gt;.syncingListeners &lt;span class=&quot;token punctuation&quot;&gt;{
         listener&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;add&lt;span class=&quot;token punctuation&quot;&gt;(obj&lt;span class=&quot;token punctuation&quot;&gt;)
      &lt;span class=&quot;token punctuation&quot;&gt;}
   &lt;span class=&quot;token punctuation&quot;&gt;} &lt;span class=&quot;token keyword&quot;&gt;else &lt;span class=&quot;token punctuation&quot;&gt;{
      &lt;span class=&quot;token keyword&quot;&gt;for &lt;span class=&quot;token boolean&quot;&gt;_&lt;span class=&quot;token punctuation&quot;&gt;, listener &lt;span class=&quot;token operator&quot;&gt;:= &lt;span class=&quot;token keyword&quot;&gt;range p&lt;span class=&quot;token punctuation&quot;&gt;.listeners &lt;span class=&quot;token punctuation&quot;&gt;{
         listener&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;add&lt;span class=&quot;token punctuation&quot;&gt;(obj&lt;span class=&quot;token punctuation&quot;&gt;)
      &lt;span class=&quot;token punctuation&quot;&gt;}
   &lt;span class=&quot;token punctuation&quot;&gt;}
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;这个方法逻辑比较简洁，分发对象。我们继续看哪里进入的 distribute：&lt;/p&gt;
&lt;h3 id=&quot;sharedIndexInformer_HandleDeltas()&quot;&gt;7.2. sharedIndexInformer.HandleDeltas()&lt;/h3&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/shared_informer.go:344&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(s &lt;span class=&quot;token operator&quot;&gt;*sharedIndexInformer&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;HandleDeltas&lt;span class=&quot;token punctuation&quot;&gt;(obj &lt;span class=&quot;token keyword&quot;&gt;interface&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token builtin&quot;&gt;error &lt;span class=&quot;token punctuation&quot;&gt;{
   s&lt;span class=&quot;token punctuation&quot;&gt;.blockDeltas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Lock&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
   &lt;span class=&quot;token keyword&quot;&gt;defer s&lt;span class=&quot;token punctuation&quot;&gt;.blockDeltas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;Unlock&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)

   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;继续往前看代码逻辑。&lt;/p&gt;
&lt;h3 id=&quot;sharedIndexInformer_Run()&quot;&gt;7.3. sharedIndexInformer.Run()&lt;/h3&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/shared_informer.go:189&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(s &lt;span class=&quot;token operator&quot;&gt;*sharedIndexInformer&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;Run&lt;span class=&quot;token punctuation&quot;&gt;(stopCh &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;span class=&quot;token keyword&quot;&gt;chan &lt;span class=&quot;token keyword&quot;&gt;struct&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;span class=&quot;token keyword&quot;&gt;defer utilruntime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;HandleCrash&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;看到这里已经挺和谐了，在 sharedIndexInformer 的 Run() 方法中先是创建一个 DeltaFIFO，然后和 lw 一起初始化 cfg，利用 cfg 创建 controller，最后 Run 这个 controller，也就是最基础的 informer.&lt;/p&gt;
&lt;p&gt;在这段代码里我们还注意到有一步是&lt;code&gt;s.processor.run&lt;/code&gt;，我们看一下这个 run 的逻辑。&lt;/p&gt;
&lt;h4 id=&quot;sharedProcessor_run()&quot;&gt;7.3.1. sharedProcessor.run()&lt;/h4&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;code-filename&quot;&gt;tools/cache/shared_informer.go:415&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-&quot;&gt;
&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func &lt;span class=&quot;token punctuation&quot;&gt;(p &lt;span class=&quot;token operator&quot;&gt;*sharedProcessor&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token function&quot;&gt;run&lt;span class=&quot;token punctuation&quot;&gt;(stopCh &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;span class=&quot;token keyword&quot;&gt;chan &lt;span class=&quot;token keyword&quot;&gt;struct&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
   &lt;span class=&quot;token keyword&quot;&gt;func&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{
      p&lt;span class=&quot;token punctuation&quot;&gt;.listenersLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RLock&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
      &lt;span class=&quot;token keyword&quot;&gt;defer p&lt;span class=&quot;token punctuation&quot;&gt;.listenersLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;span class=&quot;token function&quot;&gt;RUnlock&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token punctuation&quot;&gt;)
      &lt;span class=&quot;token keyword&quot;&gt;for &lt;span class=&quot;token boolean&quot;&gt;_&lt;span class=&quot;token punctuation&quot;&gt;, listener &lt;span class=&quot;token operator&quot;&gt;:= &lt;span class=&quot;token keyword&quot;&gt;range p&lt;span class=&quot;token punctuation&quot;&gt;.listeners &lt;span class=&quot;token punctuation&quot;&gt;{
          &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;
&lt;/pre&gt;
&lt;p&gt;撇开细节，可以看到这里调用了内部所有 listener 的 run() 和 pop() 方法，和前面的分析呼应上了。&lt;/p&gt;
&lt;p&gt;到这里，我们基本讲完了自定义 controller 的时候 client-go 里相关的逻辑，也就是图中的上半部分：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farmer-hutao.github.io/k8s-source-code-analysis/around/client-go/image/informer/1556161315850.png&quot; alt=&quot;1556161315850&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/998740/201904/998740-20190425223300381-1441529605.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 25 Apr 2019 14:33:00 +0000</pubDate>
<dc:creator>CloudGeek</dc:creator>
<og:description>Custom Controller 之 Informer 概述 架构概览 reflector - List &amp; Watch API Server Reflector 对象 ListAndWat</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cloudgeek/p/10771567.html</dc:identifier>
</item>
</channel>
</rss>