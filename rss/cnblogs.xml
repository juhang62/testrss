<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>我们为什么要使用RabbitMQ？ - 大魔王先生</title>
<link>http://www.cnblogs.com/wtzbk/p/10585712.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wtzbk/p/10585712.html</guid>
<description>&lt;p&gt;&lt;strong&gt; 一、前言&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       &lt;/strong&gt;这篇文章就是讲RocketMQMQ的好处，你可能要说RocketMQ很好呀，我们主要看上的就是RabbitMQ支持多语言的客户端，很符合我们公司的现状，不要我们花费功夫去搞一个客户端，所以下面请大家不要吐槽，我们就来静心听听RabbitMQ的好；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 二、RabbitMQ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     &lt;/strong&gt; 在消息队列的一发一收中，我们来看下RabbitMQ怎么让我们放心使用的？首先我们来看下RabbitMQ发收的过程:&lt;/p&gt;
&lt;p&gt;      发消息的过程(生产者):&lt;/p&gt;
&lt;p&gt;      1.连接到RabbitMQ Borker，建立一个连接(Connection)，开启一个信道(Channel);&lt;/p&gt;
&lt;p&gt;      2.声明交换机(Exchange)；&lt;/p&gt;
&lt;p&gt;      3.声明队列(Queue);&lt;/p&gt;
&lt;p&gt;      4.通过路由键(Binding Key)将交换机与路由器绑定；&lt;/p&gt;
&lt;p&gt;      5.发送消息(消息包含路由键(Routing Key)和交换机等内容)到RabbitMQ Borker;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;   &lt;/strong&gt;   6.交换机根据接收到路由键去匹配到相应的队列中,如果找到则放入到对应的队列中，找不到则退回(这里是根据配置信息来的)；&lt;/p&gt;
&lt;p&gt;      7.关闭；&lt;/p&gt;
&lt;p&gt;      收消息的过程(消费者):&lt;/p&gt;
&lt;p&gt;      1.连接到RabbitMQ Borker，建立一个连接，开启一个信道;&lt;/p&gt;
&lt;p&gt;      2.请求接收RabbitMQ Borker中队列的消息；&lt;/p&gt;
&lt;p&gt;      3.等待RabbitMQ Borker回应返回队列中相应的消息；&lt;/p&gt;
&lt;p&gt;      4.消费者接收到消息,返回确认(ack);&lt;/p&gt;
&lt;p&gt;      5.RabbitMQ移除队列中对应的消息；&lt;/p&gt;
&lt;p&gt;      6.关闭；&lt;/p&gt;
&lt;p&gt;      针对上面的过程我们首先来谈下生产者RabbitMQ是如何确保一条消息被投递到RabbitMQ Borker中的，没有使用过消息队列可能听到这里有点懵，这里简单说一下,当生产者发送一条消息的时候，可能因为网络的原因或者RabbitMQ服务器宕机了，这个时候我们就无法知道一条消息是否被成功的投递到RabbitMQ中，针对这些情况RabbitMQ给我们提供两种机制来处理这个问题，一种是事务机制，另外一种是消息确认机制。事务机制我想大家都很明白了，RabbitMQ客户端提供与事务机制相关的方法有三个：channel.txSelect、channel.txCommit以及channel.txRollback。channel.txSelect用于将当前信道设置成事务模式，channel.txCommit用于提交事务，channel.txRollback用于事务回滚。当事务开启以后，发送消息给RabbitMQ，如果消息提交成功，那么说明RabbitMQ一定收到了消息，否则我们可以通过异常来捕获，然后通过txRollback回滚，当然这种方式性能不好，事务机制将消息串行化，导致发送一条消息必须等待结果。这种方式不太好，那么我们接下来探讨一下消息确认机制，涉及到消息确认机制的相关方法有两个channel.confirmSelect以及channel.waitForConfirms,首先使用confirmSelect将信道设置成为消息确认模式，当使用消息确认模式的时候，该信道上每发布一条消息都会生成唯一的ID，当消息匹配到相应的队列以后，就会返回一个确认的ack，这个时候生产者就知道投递消息成功了，如果RabbitMQ发生宕机或者错误以后，会返回nack，则表示投递失败，当使用waitForConfirms其实是将异步的模式串行化，我们还可以通过addConfirmLister通过ConfirmListener这个回调接口来处理返回值。RabbitMQ通过这两种机制保证消息能被正确投递，生产环境中都是使用批量提交,当然实际生产的时候单纯这样还是不能够保证消息被正确投递，比如说生产者发送消息时候网络断了一下，就不能保证消息被投递过，所以下一篇我会使用延时队列和消息打标的方式来保证消息会被100%投递到RabbitMQ中，当然也不能说是100%只能说是99.好多个9；&lt;/p&gt;
&lt;p&gt;      接下来我们来探讨下消费者消费的问题，如果消费者在接受到消息以后，比如出现宕机，那么这条消息也就丢失掉了。RabbitMQ针对这种情况，也提供了消息确认机制。当消费订阅队列设置autoAck设置为fals的时候，RabbitMQ通过打标的方式，等收到消息确认的时候将队列中的消息移除出去，如果设置为true，当发送成功以后就将消息移除。当autoAck为fals的时候，RabbitMQ内部会有两种消息，一种是等待投递消息，另外一种是等待确认的消息，如果RabbitMQ一直没有收到消费者确认的消息，并且消费此消息的消费者断开，那么RabbitMQ会重新发送该条消息，RabbitMQ重新投递消息的依据就是消费者的该消息连接断开。消费端可以通过重试机制保证消息能被正常消费，如果重试还消费不掉，那么还可以利用下死信队列，通过死信队列中的内容分析程序中可能存在的异常；提到了死信队列，我们这里也介绍一下，消息成为死信有3种情况:消费端消息被拒绝，并设置requeue参数为false、消息过期以及队列达到最大长度，绑定死信队列的交换机就是死信交换机(DLX)，当队列中有死信的时候，RabbitMQ会自动将消息重新发布到设置DLX上，从而被路由死信队列中；&lt;/p&gt;
&lt;p&gt;     RabbitMQ本身是可以将交换机、队列以及消息都持久化的，当然是不建议将消息持久化的，成本太高。RabbitMQ支持集群模式，是通过多副本的方式实现集群模式，在RabbitMQ中叫做镜像队列，当Master宕机以后会按照下面步骤进行：&lt;/p&gt;
&lt;p&gt;     1.与Master相关联的客户端会全部断开；&lt;/p&gt;
&lt;p&gt;     2.选举最老的Savle节点作为Master，如果这个时候所有Salve都没处于同步状态，则未同步的消息会被丢失掉；&lt;/p&gt;
&lt;p&gt;     3.出于对消息可靠性的考虑，新的Master会重新入队所有客户端未确认的消息；&lt;/p&gt;
&lt;p&gt;     4.如果客户端连着slave，并且Basic.Consume消费时指定了x-cancel-on-ha-failover参数，那么客户端会接收到一个Consumer Cancellation Notification通知。如果未指定x-cancal-on-ha-failover参数，那么消费者就无法感知master宕机，会一直等待下去。&lt;/p&gt;
&lt;p&gt;     另外RabbitMQ还支持优先级队列、多协议、多租户等等，性能方面的话能满足我们公司业务，记得好像我们这边高峰期达到4W-5W/s，最主要的RabbitMQ社区很活跃；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、结束&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;     下一篇我会使用Java和C#分别去实现上面生产者和消费者的模式，本文主要参考厮大的书和工作中使用RabbitMQ的经验，&lt;strong&gt; &lt;/strong&gt;另外在推荐下厮大的书《RabbitMQ实战指南》和《深入理解Kafka:核心设计与实践原理》，讲的真的好，欢迎大家加群438836709，欢迎大家关注我！&lt;/p&gt;
&lt;p&gt;      &lt;img src=&quot;https://img2018.cnblogs.com/blog/1005447/201903/1005447-20190324222444577-846557291.png&quot; alt=&quot;&quot; width=&quot;340&quot; height=&quot;269&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 24 Mar 2019 23:31:00 +0000</pubDate>
<dc:creator>大魔王先生</dc:creator>
<og:description>一、前言 这篇文章就是讲RocketMQMQ的好处，你可能要说RocketMQ很好呀，我们主要看上的就是RabbitMQ支持多语言的客户端，很符合我们公司的现状，不要我们花费功夫去搞一个客户端，所以下</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wtzbk/p/10585712.html</dc:identifier>
</item>
<item>
<title>大白话5分钟带你走进人工智能-第四节最大似然推导mse损失函数（深度解析最小二乘来源）（2） - LHBlog</title>
<link>http://www.cnblogs.com/LHWorldBlog/p/10591636.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LHWorldBlog/p/10591636.html</guid>
<description>&lt;p&gt;&lt;span&gt; &lt;strong&gt;第四节  最大似然推导mse损失函数（深度解析最小二乘来源）（2）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       上一节我们说了极大似然的思想以及似然函数的意义，了解了要&lt;strong&gt;使模型最好的参数值就要使似然函数最大，同时损失函数（最小二乘）最小，&lt;/strong&gt;留下了一个问题，就是这两个因素或者目的矛盾吗？今天我们就接着上面的问题继续解剖下去。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们再来回顾下&lt;strong&gt;似然函数：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;                                                    &lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Cprod_%7Bi%3D1%7D%5E%7Bm%7Dp%28y%5E%7B%28i%29%7D%7Cx%5E%7B%28i%29%7D%3B%5Ctheta%20%29%3D%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7Dexp%28-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D%29&quot; alt=&quot;\prod_{i=1}^{m}p(y^{(i)}|x^{(i)};\theta )=\frac{1}{\sqrt{2\pi }\sigma }exp(-\frac{(y^{(i)-}{\theta^{T}x^{(i)^{2}} })}{2\sigma ^{2}})&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Cprod_%7Bi%3D1%7D%5E%7Bm%7Dp%28y%5E%7B%28i%29%7D%7Cx%5E%7B%28i%29%7D%3B%5Ctheta%20%29%3D%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7Dexp%28-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D%29&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;所谓似然函数就是一个大的乘项，&lt;strong&gt;它有多少项，取决于有多少个训练集的样本&lt;/strong&gt;，因为它是判断训练集上发生的总概率最大的这么一个总似然函数。我们分析一下似然函数的取值由哪些因素确定？&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Cpi&quot; alt=&quot;\pi&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Cpi&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;是常数，&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Csigma&quot; alt=&quot;\sigma&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Csigma&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;虽然是未知数，但是是个定值不能来回变，误差应该服从方差的高斯分布，不能来回变方差，唯一又能变又能影响最终结果的变量就是这一组&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?w&quot; alt=&quot;w&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?w&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;也就是&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; alt=&quot;\theta&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;。 那么我们的&lt;strong&gt;目标就是找到一个θ（一组w） 使通过其计算出来似然函数结果最大&lt;/strong&gt;，我们给似然函数起个名字叫&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?L%28%5Ctheta%20%29&quot; alt=&quot;L(\theta )&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?L%28%5Ctheta%20%29&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;,为什么括号里是&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; alt=&quot;\theta&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;，因为&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?L&quot; alt=&quot;L&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?L&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;的大小只看&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; alt=&quot;\theta&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;的脸色，其它值都是定值，改变不了最终结果，只有&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; alt=&quot;\theta&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;能改变结果，所以是关于&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; alt=&quot;\theta&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;的函数。由于似然函数内部带着exp函数， 并且函数本身的形式是连乘，不太好求，所以我们在似然函数之前加了个log函数，因为log函数它是一个单调函数，而且是单调递增函数，不会影响函数的相对大小，并且&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?log%28a.b%29%3Dloga&amp;amp;plus;logb&quot; alt=&quot;log(a.b)=loga+logb&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?log%28a.b%29%3Dloga&amp;amp;plus;logb&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;，&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?loga%5E%7Bn%7D%3Dnloga&quot; alt=&quot;loga^{n}=nloga&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?loga%5E%7Bn%7D%3Dnloga&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;，天生的良好属性。它能函数中的累乘变成累加，更方便求解。所以为了似然函数的更好求解，我们在&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?L%28%5Ctheta%20%29&quot; alt=&quot;L(\theta )&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?L%28%5Ctheta%20%29&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;两边加上log函数，如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;                                                                                                                                                     &lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?l%28%5Ctheta%20%29%3DlogL%28%5Ctheta%29%20%3Dlog%5Cprod_%7Bi%3D1%7D%5E%7Bm%7D%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7Dexp%28-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D%29&quot; alt=&quot;l(\theta )=logL(\theta) =log\prod_{i=1}^{m}\frac{1}{\sqrt{2\pi }\sigma }exp(-\frac{(y^{(i)-}{\theta^{T}x^{(i)^{2}} })}{2\sigma ^{2}})&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?l%28%5Ctheta%20%29%3DlogL%28%5Ctheta%29%20%3Dlog%5Cprod_%7Bi%3D1%7D%5E%7Bm%7D%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7Dexp%28-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D%29&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;                                                                                                                                                                                  &lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%3D%5Csum_%7Bi%3D1%7D%5E%7Bm%7Dlog%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7Dexp%28-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D&quot; alt=&quot;=\sum_{i=1}^{m}log\frac{1}{\sqrt{2\pi }\sigma }exp(-\frac{(y^{(i)-}{\theta^{T}x^{(i)^{2}} })}{2\sigma ^{2}}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%3D%5Csum_%7Bi%3D1%7D%5E%7Bm%7Dlog%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7Dexp%28-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        &lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%3Dmlog%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7D-%5Cfrac%7B1%7D%7B%5Csigma%20%5E%7B2%7D%7D.%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; alt=&quot;=mlog\frac{1}{\sqrt{2\pi }\sigma }-\frac{1}{\sigma ^{2}}.\frac{1}{2}\sum_{i=1}^{m}(y^{(i)}-\theta ^{T}x^{(i)})^{2}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%3Dmlog%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7D-%5Cfrac%7B1%7D%7B%5Csigma%20%5E%7B2%7D%7D.%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们来解析上面的每一步的来源，第一步不用怎么说，就是加了一个log， 需要注意的是没加log之前是大写的&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?L%28%5Ctheta%20%29&quot; alt=&quot;L(\theta )&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?L%28%5Ctheta%20%29&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;，加完log之后就是小写的&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?l%28%5Ctheta%20%29&quot; alt=&quot;l(\theta )&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?l%28%5Ctheta%20%29&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;。第一步到第二步实际上就是对于每一个样本之前的累乘，由于&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?log%28a.b%29%3Dloga&amp;amp;plus;logb&quot; alt=&quot;log(a.b)=loga+logb&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?log%28a.b%29%3Dloga&amp;amp;plus;logb&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;，加完log之后，所有的累乘变成累加，然后又用&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Csum&quot; alt=&quot;\sum&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Csum&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;表示出来。第二步到第三步，因为第二步中&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?m&quot; alt=&quot;m&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?m&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;个&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?log%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7Dexp%28-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D&quot; alt=&quot;log\frac{1}{\sqrt{2\pi }\sigma }exp(-\frac{(y^{(i)-}{\theta^{T}x^{(i)^{2}} })}{2\sigma ^{2}}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?log%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7Dexp%28-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;  累加，每一个利用&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?log%28a.b%29%3Dloga&amp;amp;plus;logb&quot; alt=&quot;log(a.b)=loga+logb&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?log%28a.b%29%3Dloga&amp;amp;plus;logb&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;属性表示成&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?log%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7D&amp;amp;plus;logexp%28-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D&quot; alt=&quot;log\frac{1}{\sqrt{2\pi }\sigma }+logexp(-\frac{(y^{(i)-}{\theta^{T}x^{(i)^{2}} })}{2\sigma ^{2}}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?log%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7D&amp;amp;plus;logexp%28-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;,而&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?log%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7D&quot; alt=&quot;log\frac{1}{\sqrt{2\pi }\sigma }&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?log%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;是常数，所以&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?m&quot; alt=&quot;m&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?m&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;个累加就是&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?mlog%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7D&quot; alt=&quot;mlog\frac{1}{\sqrt{2\pi }\sigma }&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?mlog%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;，而后半部分&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?logexp%28-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D&quot; alt=&quot;logexp(-\frac{(y^{(i)-}{\theta^{T}x^{(i)^{2}} })}{2\sigma ^{2}}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?logexp%28-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;累加，因为&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?loge%3D1&quot; alt=&quot;loge=1&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?loge%3D1&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;,log和e在一起可以互相消掉，所以&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?logexp%28-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D%29%3D-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D&quot; alt=&quot;logexp(-\frac{(y^{(i)-}{\theta^{T}x^{(i)^{2}} })}{2\sigma ^{2}})=-\frac{(y^{(i)-}{\theta^{T}x^{(i)^{2}} })}{2\sigma ^{2}}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?logexp%28-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D%29%3D-%5Cfrac%7B%28y%5E%7B%28i%29-%7D%7B%5Ctheta%5E%7BT%7Dx%5E%7B%28i%29%5E%7B2%7D%7D%20%7D%29%7D%7B2%5Csigma%20%5E%7B2%7D%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;因为每一项&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?x%5E%7Bi%7D&quot; alt=&quot;x^{i}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?x%5E%7Bi%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;不一样，所以写成&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Cfrac%7B1%7D%7B%5Csigma%20%5E%7B2%7D%7D.%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; alt=&quot;\frac{1}{\sigma ^{2}}.\frac{1}{2}\sum_{i=1}^{m}(y^{(i)}-\theta ^{T}x^{(i)})^{2}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Cfrac%7B1%7D%7B%5Csigma%20%5E%7B2%7D%7D.%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;,同时后半部分结果又把负号也给提出来了，那么加起来结果就是我们的第三步&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?mlog%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7D-%5Cfrac%7B1%7D%7B%5Csigma%20%5E%7B2%7D%7D.%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; alt=&quot;mlog\frac{1}{\sqrt{2\pi }\sigma }-\frac{1}{\sigma ^{2}}.\frac{1}{2}\sum_{i=1}^{m}(y^{(i)}-\theta ^{T}x^{(i)})^{2}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?mlog%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7D-%5Cfrac%7B1%7D%7B%5Csigma%20%5E%7B2%7D%7D.%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;。给自己鼓个掌吧 ，这么难得公式都会了，而且跟着我一步步的给它解释出来，真是不容易。到此为止，我们就分析一下，能够使第三步即：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;                                                                                                                                                                                        &lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?mlog%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7D-%5Cfrac%7B1%7D%7B%5Csigma%20%5E%7B2%7D%7D.%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; alt=&quot;mlog\frac{1}{\sqrt{2\pi }\sigma }-\frac{1}{\sigma ^{2}}.\frac{1}{2}\sum_{i=1}^{m}(y^{(i)}-\theta ^{T}x^{(i)})^{2}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?mlog%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7D-%5Cfrac%7B1%7D%7B%5Csigma%20%5E%7B2%7D%7D.%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最大的&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; alt=&quot;\theta&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;是谁呢？ 因为&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?mlog%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7D&quot; alt=&quot;mlog\frac{1}{\sqrt{2\pi }\sigma }&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?mlog%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%7D%5Csigma%20%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;是常数项，不去考虑它，它始终为正，所以有它没它都不会影响相对大小。那么也就是说只要&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?-%5Cfrac%7B1%7D%7B%5Csigma%20%5E%7B2%7D%7D.%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; alt=&quot;-\frac{1}{\sigma ^{2}}.\frac{1}{2}\sum_{i=1}^{m}(y^{(i)}-\theta ^{T}x^{(i)})^{2}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?-%5Cfrac%7B1%7D%7B%5Csigma%20%5E%7B2%7D%7D.%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;这一项越大，原始的&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?L%28%5Ctheta%20%29&quot; alt=&quot;L(\theta )&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?L%28%5Ctheta%20%29&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;函数就越大。&lt;strong&gt;注意这前面带个负号，因为我们是看成两个整体相加，所以后半部分的那一项是带个负号的&lt;/strong&gt;。那么把负号去掉了，或者说这一项&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Cfrac%7B1%7D%7B%5Csigma%20%5E%7B2%7D%7D.%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; alt=&quot;\frac{1}{\sigma ^{2}}.\frac{1}{2}\sum_{i=1}^{m}(y^{(i)}-\theta ^{T}x^{(i)})^{2}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Cfrac%7B1%7D%7B%5Csigma%20%5E%7B2%7D%7D.%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;，这一项越小，原始的&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?L%28%5Ctheta%20%29&quot; alt=&quot;L(\theta )&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?L%28%5Ctheta%20%29&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;函数就越大。而&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Csigma&quot; alt=&quot;\sigma&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Csigma&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;是常数，不影响大小，也就是说能&lt;strong&gt;够使&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; alt=&quot;\frac{1}{2}\sum_{i=1}^{m}(y^{(i)}-\theta ^{T}x^{(i)})^{2}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;最小的&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; alt=&quot;\theta&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;就是能够使&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?L%28%5Ctheta%20%29&quot; alt=&quot;L(\theta )&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?L%28%5Ctheta%20%29&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;最大的&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; alt=&quot;\theta&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;。&lt;/strong&gt;是不是已经很眼熟了？我们回顾下&lt;strong&gt;MSE（最小二乘）：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;                                                                                                                                                                                                       &lt;span class=&quot;cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected&quot; data-cke-widget-wrapper=&quot;1&quot; data-cke-filter=&quot;off&quot; data-cke-display-name=&quot;图像&quot; data-cke-widget-id=&quot;0&quot;&gt;&lt;img class=&quot;has cke_widget_element&quot; src=&quot;https://private.codecogs.com/gif.latex?J%28%5Ctheta%20%29%3D%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28h_%7B%5Ctheta%7Dx%5E%7Bi%7D-y%5E%7Bi%7D%29%5E%7B2%7D&quot; alt=&quot;J(\theta )=\frac{1}{2}\sum_{i=1}^{m}(h_{\theta}x^{i}-y^{i})^{2}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?J%28%5Ctheta%20%29%3D%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28h_%7B%5Ctheta%7Dx%5E%7Bi%7D-y%5E%7Bi%7D%29%5E%7B2%7D&quot; data-cke-widget-data=&quot;{&amp;amp;quot;hasCaption&amp;amp;quot;:false,&amp;amp;quot;src&amp;amp;quot;:&amp;amp;quot;https://private.codecogs.com/gif.latex?J%28%5Ctheta%20%29%3D%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28h_%7B%5Ctheta%7Dx%5E%7Bi%7D-y%5E%7Bi%7D%29%5E%7B2%7D&amp;amp;quot;,&amp;amp;quot;alt&amp;amp;quot;:&amp;amp;quot;J(\\theta )=\\frac{1}{2}\\sum_{i=1}^{m}(h_{\\theta}x^{i}-y^{i})^{2}&amp;amp;quot;,&amp;amp;quot;width&amp;amp;quot;:&amp;amp;quot;&amp;amp;quot;,&amp;amp;quot;height&amp;amp;quot;:&amp;amp;quot;&amp;amp;quot;,&amp;amp;quot;lock&amp;amp;quot;:true,&amp;amp;quot;align&amp;amp;quot;:&amp;amp;quot;none&amp;amp;quot;,&amp;amp;quot;classes&amp;amp;quot;:{&amp;amp;quot;has&amp;amp;quot;:1}}&quot; data-cke-widget-upcasted=&quot;1&quot; data-cke-widget-keep-attr=&quot;0&quot; data-widget=&quot;image&quot;/&gt;&lt;span class=&quot;cke_reset cke_widget_drag_handler_container&quot;&gt;&lt;span class=&quot;cke_image_resizer&quot; title=&quot;点击并拖拽以改变尺寸&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;发现一模一样，因为里面的&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; alt=&quot;(y^{(i)}-\theta ^{T}x^{(i)})^{2}&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%28y%5E%7B%28i%29%7D-%5Ctheta%20%5E%7BT%7Dx%5E%7B%28i%29%7D%29%5E%7B2%7D&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;位置不会影响相对大小。所以&lt;strong&gt;MSE（最小二乘）&lt;/strong&gt;怎么来的？为什么说MSE（最小二乘）越小&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; alt=&quot;\theta&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;就越好，取决于你背后估计了所有的误差，服从高斯分布，如果它不服从高斯分布，也就不能用mse来判断了。截止到目前，我们就发现了把它作为损失函数，真的是非常合理&lt;strong&gt;。&lt;/strong&gt;实际上这就是它背后的理论依据。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       我们总结下，我们说判别模型事先给定一个判别函数，对吧？它这个例子判别函数&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?y%3D%5Ctheta%20%5E%7BT%7Dx&quot; alt=&quot;y=\theta ^{T}x&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?y%3D%5Ctheta%20%5E%7BT%7Dx&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;根据判别函数来合理的构造出一个损失函数来。这个损失函数往往都是通过MLE，也就是最大似然估计为理论基础建立出来的最合理的损失函数，而最大似然的理论源泉是误差服从均值为零的高斯分布，也即样本服从高斯分布，而后通过最大似然一步步推导得到最小二乘。，&lt;strong&gt;所以mse的损失函数的根本理论依据是什么？你就应该回答为假设方差服从均值为零的高斯分布。&lt;/strong&gt;至于是不是所有的回归问题，都用MSE当损失函数，不一定。但是90%都是它。在一些特殊的场景里，你已知误差服从别的分布了，那就会建立出别的损失函数来。比如huber损失函数，有兴趣可以自己研究下。但&lt;strong&gt;绝大多数的场景都会使用MSE作为回归问题的损失函数。&lt;/strong&gt;因为在你不知道任何情况的前提下，&lt;strong&gt;假设误差服从高斯分布是最常见且最合理的一种方式。&lt;/strong&gt;自此，你从理论方面推导了最大似然和最小二乘的关系，也为最小二乘作为损失函数找到了数学的理论支撑。下一节中我们讲解怎么样求解最小二乘或者使其相对最小，从而找到我们相对合理的模型参数&lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; alt=&quot;\theta&quot; data-cke-saved-src=&quot;https://private.codecogs.com/gif.latex?%5Ctheta&quot; data-cke-widget-data=&quot;{}&quot; data-cke-widget-upcasted=&quot;1&quot;/&gt;。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 24 Mar 2019 18:15:00 +0000</pubDate>
<dc:creator>LHBlog</dc:creator>
<og:description>第四节 最大似然推导mse损失函数（深度解析最小二乘来源）（2） 上一节我们说了极大似然的思想以及似然函数的意义，了解了要使模型最好的参数值就要使似然函数最大，同时损失函数（最小二乘）最小，留下了一个</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LHWorldBlog/p/10591636.html</dc:identifier>
</item>
<item>
<title>ZooKeeper 03 - ZooKeeper集群的脑裂问题 (Split Brain问题) - 马瘦风</title>
<link>http://www.cnblogs.com/shoufeng/p/10591526.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shoufeng/p/10591526.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Leader == Master, Follower == Slaver.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;集群中的各个节点都会尝试注册为leader节点, 其他没有注册成功的则成为follower(随从)节点.&lt;/p&gt;
&lt;p&gt;这些follower节点通过watcher(观察者)监控着leader节点:&lt;/p&gt;
&lt;p&gt;—— ZooKeeper内部通过心跳机制来确定leader的状态, 一旦leader节点出现问题, : 就能很快获悉并迅速通知其他follower节点, 这些follower节点得知消息之后将及时采取相关操作.&lt;/p&gt;

&lt;h2 id=&quot;脑裂现象的表现&quot;&gt;2.1 脑裂现象的表现&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ZooKeeper集群中, 各个节点间的网络通信不良时, 容易出现脑裂(split-brain)现象:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;集群中的节点监听不到leader节点的心跳, 就会认为leader节点出了问题, 此时集群将分裂为不同的小集群, 这些小集群会各自选举出自己的leader节点, 导致原有的集群中出现多个leader节点.&lt;/p&gt;
&lt;p&gt;—— 这就是脑裂现象.&lt;/p&gt;
&lt;h2 id=&quot;为什么会出现脑裂&quot;&gt;2.2 为什么会出现脑裂&lt;/h2&gt;
&lt;p&gt;设想这样一种情况:&lt;/p&gt;
&lt;p&gt;① 集群中网络通信不好, 导致心跳监测超时 —— follower认为leader节点由于某种原因挂掉了, 可其实leader节点并未真正挂掉 —— 这就是&lt;strong&gt;假死现象&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;② leader节点假死后, ZooKeeper通知所有follower节点进行选举 ==&amp;gt; 某个follower节点升级为新的leader. —— &lt;strong&gt;此时集群中存在2个leader节点&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;③ 此时ZooKeeper需要将新leader节点的信息通知给所有的follower节点, 还要通知到所有的client(比如通过: 搭建的Solr集群中的Solr实例就是一个client), 而这个过程由于网络等环境的影响, 消息到达就会存在快慢之分.&lt;/p&gt;
&lt;p&gt;④ 如果部分client获得了新leader节点的信息, 而部分没有获得, 而此时client向ZooKeeper发起读写请求, ZooKeeper内部的不一致就会导致: &lt;strong&gt;部分client连接到了新的leader节点上, 而部分client连接到了旧的leader节点上&lt;/strong&gt; —— 服务中出现了2个leader, client不知道听谁的好, 就像1个大脑被分裂成2个, 很形象吧O(∩_∩)O&lt;/p&gt;

&lt;h2 id=&quot;种可行的思路&quot;&gt;3.1 3种可行的思路&lt;/h2&gt;
&lt;p&gt;(1) Quorums(ˈkwɔrəm, 法定人数)法:&lt;/p&gt;
&lt;p&gt;通过设置法定人数, 进而确定集群的容忍度, 当集群中存活的节点少于法定人数, 集群将不可用.&lt;/p&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;3个节点的集群中, Quorums = 2 —— 集群可以容忍 (3 - 2 = 1) 个节点失败, 这时候还能选举出leader, 集群仍然可用;&lt;/p&gt;
&lt;p&gt;4个节点的集群中, Quorums = 3 —— 集群同样可以容忍 1 个节点失败, 如果2个节点失败, 那整个集群就不可用了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(2) Redundant communications(冗余通信):&lt;/p&gt;
&lt;p&gt;集群中采用多种通信方式, 防止一种通信方式失效导致集群中的节点无法通信.&lt;/p&gt;
&lt;p&gt;(3) Fencing(共享资源):&lt;/p&gt;
&lt;p&gt;通过共享资源的方式, 将所有共享资源添加到集群中, 能对共享资源进行写操作(即加锁)的节点就是leader节点.&lt;/p&gt;
&lt;h2 id=&quot;zookeeper采用的方法&quot;&gt;3.2 ZooKeeper采用的方法&lt;/h2&gt;
&lt;p&gt;ZooKeeper默认采用了Quorums(法定人数)的方式: &lt;strong&gt;只有获得超过半数节点的投票, 才能选举出leader.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种方式可以确保要么选出唯一的leader, 要么选举失败.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ZooKeeper中Quorums的作用:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;① 指定集群中选举leader所需的最少节点数, 保证集群可用;&lt;/p&gt;
&lt;p&gt;② client的数据被安全保存到集群中所需的最少节点数, 一旦这些节点保存了数据, 客户端将被通知数据已经安全保存, 可以继续其他任务 —— 基于&lt;strong&gt;最终一致性&lt;/strong&gt;, 集群中剩余的节点最终也会保存相关的数据.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;ZooKeeper的写也遵循quorum机制, 因此得不到大多数支持的写是无效的.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;zookeeper的具体解决思路&quot;&gt;3.3 ZooKeeper的具体解决思路&lt;/h2&gt;
&lt;p&gt;假设: leader发生了假死, followers选举出了一个新的leader.&lt;/p&gt;
&lt;p&gt;当旧的leader复活并认为自己仍然是leader, 它向其他followers发出写请求时, 会被拒绝.&lt;/p&gt;
&lt;p&gt;—— 因为ZooKeeper维护了一个叫epoch的变量, 每当新leader产生时, epoch都会递增, followers如果确认了新的leader存在, 同时也会知道其epoch的值 —— 它们会拒绝epoch小于现任leader的epoch的所有旧leader的任何请求.&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;注意: 仍然会存在有部分followers不知道新leader的存在, 但肯定不是大多数, 否则新leader将无法产生.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;0.94230769230769&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/yjp198713/article/details/79400927&quot;&gt;zookeeper（二）常见问题汇总&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u010476994/article/details/79806041&quot;&gt;Zookeeper集群节点数量为什么要是奇数个？&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;16.040752351097&quot;&gt;

&lt;p&gt;作者: ma_shoufeng(马瘦风)&lt;/p&gt;
&lt;p&gt;出处: 博客园 &lt;a href=&quot;https://www.cnblogs.com/shoufeng&quot;&gt;马瘦风的博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;您的支持是对博主的极大鼓励, 感谢您的阅读.&lt;/p&gt;
&lt;p&gt;本文版权归博主所有, 欢迎转载, 但请保留此段声明, 并在文章页面明显位置给出原文链接, 否则博主保留追究相关人员法律责任的权利.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sun, 24 Mar 2019 16:16:00 +0000</pubDate>
<dc:creator>马瘦风</dc:creator>
<og:description>什么是ZooKeeper的脑裂? 为什么会发生脑裂现象? ZooKeeper如何解决脑裂? 本篇文章告诉你答案~</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shoufeng/p/10591526.html</dc:identifier>
</item>
<item>
<title>Kafka 消费者 - FlinkMe</title>
<link>http://www.cnblogs.com/bigdata1024/p/10590060.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bigdata1024/p/10590060.html</guid>
<description>&lt;p&gt;&amp;#13;
                                    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&lt;/button&gt;&amp;#13;
                                    &lt;h4 class=&quot;modal-title&quot;&gt;&amp;#13;
                                        请完成人机识别验证&amp;#13;
                                    &lt;/h4&gt;&amp;#13;
                                &lt;/p&gt;
                                &lt;div class=&quot;modal-body&quot; readability=&quot;33&quot;&gt;
                                    
                                    &lt;p&gt;&amp;#13;
                                        &lt;span id=&quot;geetestLoading&quot;&gt; 验证码组件加载中,请稍后...&lt;/span&gt;&amp;#13;
                                    &lt;/p&gt;
                                &lt;/div&gt;
                            </description>
<pubDate>Sun, 24 Mar 2019 15:44:00 +0000</pubDate>
<dc:creator>FlinkMe</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://passport.cnblogs.com/user/signin?ReturnUrl=https%3A%2F%2Fwww.cnblogs.com%2Fbigdata1024%2Fp%2F10590060.html&amp;AspxAutoDetectCookieSupport=1</dc:identifier>
</item>
<item>
<title>salesforce lightning零基础学习(十二) 自定义Lookup组件的实现 - zero.zhang</title>
<link>http://www.cnblogs.com/zero-zyq/p/10590517.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zero-zyq/p/10590517.html</guid>
<description>&lt;p&gt;本篇参考：&lt;a href=&quot;http://sfdcmonkey.com/2017/01/07/custom-lookup-lightning-component/&quot;&gt;http://sfdcmonkey.com/2017/01/07/custom-lookup-lightning-component/&lt;/a&gt;，在参考的demo中进行了简单的改动和优化。&lt;/p&gt;
&lt;p&gt;我们在&lt;a href=&quot;https://www.cnblogs.com/zero-zyq/p/7463016.html&quot;&gt;https://www.cnblogs.com/zero-zyq/p/7463016.html&lt;/a&gt; 中使用jquery的DataTable做出来类似增强版的Lookup组件效果，通过Name可以搜索出指定的数据，选中以后获取选中的object的名称以及ID信息。此篇主要内容为lightning下使用aura框架的公用Lookup组件的实现。&lt;/p&gt;
&lt;p&gt;本篇中的组件主要有以下几个功能：&lt;/p&gt;
&lt;p&gt;1. 当输入两位以上字符情况下，从后台数据库检索并且放在搜索框列表中展示；&lt;/p&gt;
&lt;p&gt;2. 当选中搜索框列表中某个指定的单元后，选中的单元会以&lt;a href=&quot;https://www.lightningdesignsystem.com/components/pills/&quot; target=&quot;_blank&quot;&gt;pill&lt;/a&gt;的方式展示在输入框中，同时输入框隐藏，列表选择框隐藏；&lt;/p&gt;
&lt;p&gt;3. 删除选中的单元以后，输入框变成可用状态。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201903/910966-20190324212953472-248819279.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201903/910966-20190324213010765-1634732937.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;实现方式如下：&lt;/p&gt;
&lt;p&gt;1. 首先将slds的文件夹放在static resource中，demo中的路径为：slds_resource。下载的文件路径为：&lt;a href=&quot;https://www.lightningdesignsystem.com/downloads/&quot;&gt;https://www.lightningdesignsystem.com/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;包打开的结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201903/910966-20190324214146948-1475656438.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2. 创建svg.component，用于显示slds提供的icon&lt;/p&gt;
&lt;p&gt;svg.component&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:component &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;class&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt;&lt;span&gt; description&lt;/span&gt;&lt;span&gt;=&quot;CSS classname for the SVG element&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;xlinkHref&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt;&lt;span&gt; description&lt;/span&gt;&lt;span&gt;=&quot;SLDS icon path. Ex: /icons/utility-sprite/svg/symbols.svg#download&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;aria-hidden&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt;&lt;span&gt; default&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; description&lt;/span&gt;&lt;span&gt;=&quot;aria-hidden true or false. defaults to true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;svgRenderer.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;({
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     render: &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(component, helper) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; classname = component.get(&quot;v.class&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; xlinkhref = component.get(&quot;v.xlinkHref&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; ariaHidden = component.get(&quot;v.aria-hidden&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; svg = document.createElementNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;svg&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         svg.setAttribute('class'&lt;span&gt;, classname);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         svg.setAttribute('aria-hidden'&lt;span&gt;, ariaHidden);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         svg.innerHTML = '&amp;lt;use xlink:href=&quot;'+xlinkhref+'&quot;&amp;gt;&amp;lt;/use&amp;gt;'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; svg;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 3. selectedObjectEvent.evt：用于当搜索出来的列表选中某个指定的单元后，传递给父组件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:event &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;COMPONENT&quot;&lt;/span&gt;&lt;span&gt; description&lt;/span&gt;&lt;span&gt;=&quot; pass the selected sObject in the parent component&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;objectByEvent&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;sObject&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:event&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4. customLookUpResult.cmp：用于显示搜索出来的结果的每个单元的展示组件，当选中单元后触发上面的事件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:component &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;selectedObj&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;sObject&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:registerEvent &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;selectedObjectEvent&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;c:selectedObjectEvent&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;=&quot;presentation&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-lookup__item-action slds-media slds-media--center&quot;&lt;/span&gt;&lt;span&gt; role&lt;/span&gt;&lt;span&gt;=&quot;option&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-media__body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-lookup__result-text&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;{!c.selectObject}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{!v.selectedObj.Name}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;customLookUpResultController.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;({
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     selectObject : &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(component, event, helper){      
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; selectedObject = component.get(&quot;v.selectedObj&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; compEvent = component.getEvent(&quot;selectedObjectEvent&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         compEvent.setParams({&quot;objectByEvent&quot;&lt;span&gt; : selectedObject});  
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;        compEvent.fire();
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5. customLookUp.cmp ：主要包括几部分主要内容：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;根据传递过来的 object 的API Name获取Label动态显示搜索的 object的Label信息；&lt;/li&gt;
&lt;li&gt;展示搜索按钮，搜索后触发controller的handler来控制后台结果集的展示；&lt;/li&gt;
&lt;li&gt;搜索时spinner的展示和隐藏；&lt;/li&gt;
&lt;li&gt;移除选中的单元后，启用输入状态等。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:component &lt;/span&gt;&lt;span&gt;controller&lt;/span&gt;&lt;span&gt;=&quot;lookUpController&quot;&lt;/span&gt;&lt;span&gt; implements&lt;/span&gt;&lt;span&gt;=&quot;flexipage:availableForAllPageTypes,force:appHostable,flexipage:availableForRecordHome,force:lightningQuickActionWithoutHeader,force:hasRecordId&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;   
&lt;span&gt; 3&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ltng:require &lt;/span&gt;&lt;span&gt;styles&lt;/span&gt;&lt;span&gt;=&quot;{!$Resource.slds_resource + '/styles/salesforce-lightning-design-system.css'}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;    
&lt;span&gt; 5&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;selectedRecord&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;sObject&quot;&lt;/span&gt;&lt;span&gt; description&lt;/span&gt;&lt;span&gt;=&quot;store selected sObject information&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;objectType&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt;&lt;span&gt; description&lt;/span&gt;&lt;span&gt;=&quot;store object type&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;objectLabel&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt;&lt;span&gt; description&lt;/span&gt;&lt;span&gt;=&quot;store object label name&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;searchObjList&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;sObject[]&quot;&lt;/span&gt;&lt;span&gt; description&lt;/span&gt;&lt;span&gt;=&quot;store sObject list, this list return from apex fetched&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;SearchKeyWord&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;string&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;Message&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt;&lt;span&gt; default&lt;/span&gt;&lt;span&gt;=&quot;Searching...&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     
&lt;span&gt;17&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:handler &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;selectedObjectEvent&quot;&lt;/span&gt;&lt;span&gt; event&lt;/span&gt;&lt;span&gt;=&quot;c:selectedObjectEvent&quot;&lt;/span&gt;&lt;span&gt; action&lt;/span&gt;&lt;span&gt;=&quot;{!c.selectedObjectHandler}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:handler &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;=&quot;aura:waiting&quot;&lt;/span&gt;&lt;span&gt; action&lt;/span&gt;&lt;span&gt;=&quot;{!c.showSpinner}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:handler &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;=&quot;aura:doneWaiting&quot;&lt;/span&gt;&lt;span&gt; action&lt;/span&gt;&lt;span&gt;=&quot;{!c.hideSpinner}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:handler &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;init&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;{!this}&quot;&lt;/span&gt;&lt;span&gt; action&lt;/span&gt;&lt;span&gt;=&quot;{!c.initialData}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;   
&lt;span&gt;25&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-m-around--large&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;aura:id&lt;/span&gt;&lt;span&gt;=&quot;searchRes&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;slds-form-element slds-lookup slds-is-close&quot;&lt;/span&gt;&lt;span&gt; data-select&lt;/span&gt;&lt;span&gt;=&quot;single&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-form-element__label&quot;&lt;/span&gt;&lt;span&gt; for&lt;/span&gt;&lt;span&gt;=&quot;resultListDiv&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; {!v.objectLabel} Name&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-form-element__control&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-input-has-icon slds-input-has-icon--right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:svg &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-input__icon slds-show&quot;&lt;/span&gt;&lt;span&gt; xlinkHref&lt;/span&gt;&lt;span&gt;=&quot;{!$Resource.slds_resource + '/icons/utility-sprite/svg/symbols.svg#search'}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;aura:id&lt;/span&gt;&lt;span&gt;=&quot;lookup-pill&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;slds-pill-container slds-hide&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;                   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-pill&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;                      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-pill__label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                       {!v.selectedRecord.Name} 
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;                      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-button slds-button--icon slds-pill__remove&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;{!c.clearSelectedHandler}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:svg &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-button__icon&quot;&lt;/span&gt;&lt;span&gt; xlinkHref&lt;/span&gt;&lt;span&gt;=&quot;{!$Resource.slds_resource + '/icons/utility-sprite/svg/symbols.svg#close'}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-assistive-text&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Remove&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;                      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;                   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;               &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;aura:id&lt;/span&gt;&lt;span&gt;=&quot;lookupField&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;slds-show&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ui:inputText  &lt;/span&gt;&lt;span&gt;updateOn&lt;/span&gt;&lt;span&gt;=&quot;keyup&quot;&lt;/span&gt;&lt;span&gt; keyup&lt;/span&gt;&lt;span&gt;=&quot;{!c.fetchResultHandler}&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;slds-lookup__search-input slds-input &quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;{!v.SearchKeyWord}&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;must search more than 2 character&quot;&lt;/span&gt;&lt;span&gt; aura:id&lt;/span&gt;&lt;span&gt;=&quot;searchValue&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;               &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;   
&lt;span&gt;47&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;          &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-lookup__menu slds&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;resultListDiv&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-lookup__item--label slds-text-body--small&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{!v.Message}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ui:spinner &lt;/span&gt;&lt;span&gt;aura:id&lt;/span&gt;&lt;span&gt;=&quot;spinner&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-lookup__list&quot;&lt;/span&gt;&lt;span&gt; role&lt;/span&gt;&lt;span&gt;=&quot;listbox&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:iteration &lt;/span&gt;&lt;span&gt;items&lt;/span&gt;&lt;span&gt;=&quot;{!v.searchObjList}&quot;&lt;/span&gt;&lt;span&gt; var&lt;/span&gt;&lt;span&gt;=&quot;singleRec&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;                   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:customLookupResult &lt;/span&gt;&lt;span&gt;selectedObj&lt;/span&gt;&lt;span&gt;=&quot;{!singleRec}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:iteration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;          &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;customLookUpController.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;({
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     initialData : &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(component,event,helper) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; action = component.get('c.getObjectLabelByObjectName'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         action.setParam('objName', component.get('v.objectType'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         action.setCallback(&lt;span&gt;this&lt;/span&gt;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(response) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(response.getState() === 'SUCCESS'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 component.set('v.objectLabel'&lt;span&gt;, response.getReturnValue());
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        $A.enqueueAction(action);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     fetchResultHandler : &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(component, event, helper) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; keyWord = component.get(&quot;v.SearchKeyWord&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; resultListDiv = component.find(&quot;searchRes&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;( keyWord.length &amp;gt; 2&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             $A.util.addClass(resultListDiv, 'slds-is-open'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             $A.util.removeClass(resultListDiv, 'slds-is-close'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            helper.searchHelper(component,event,keyWord);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;{  
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             component.set(&quot;v.searchObjList&quot;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt; ); 
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             $A.util.addClass(resultListDiv, 'slds-is-close'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             $A.util.removeClass(resultListDiv, 'slds-is-open'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;          }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;   
&lt;span&gt;28&lt;/span&gt;     clearSelectedHandler :&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(component,event,heplper){
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;       
&lt;span&gt;30&lt;/span&gt;          &lt;span&gt;var&lt;/span&gt; pillTarget = component.find(&quot;lookup-pill&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;          &lt;span&gt;var&lt;/span&gt; lookUpTarget = component.find(&quot;lookupField&quot;&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         
&lt;span&gt;33&lt;/span&gt;          $A.util.addClass(pillTarget, 'slds-hide'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;          $A.util.removeClass(pillTarget, 'slds-show'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         
&lt;span&gt;36&lt;/span&gt;          $A.util.addClass(lookUpTarget, 'slds-show'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;          $A.util.removeClass(lookUpTarget, 'slds-hide'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;       
&lt;span&gt;39&lt;/span&gt;          component.set(&quot;v.SearchKeyWord&quot;,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;          component.set(&quot;v.searchObjList&quot;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     
&lt;span&gt;43&lt;/span&gt;   
&lt;span&gt;44&lt;/span&gt;     selectedObjectHandler : &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(component, event, helper) {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;           
&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; selectedObject = event.getParam(&quot;objectByEvent&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         component.set(&quot;v.selectedRecord&quot;&lt;span&gt; , selectedObject); 
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; pillDiv = component.find(&quot;lookup-pill&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         $A.util.addClass(pillDiv, 'slds-show'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         $A.util.removeClass(pillDiv, 'slds-hide'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; resultListDiv = component.find(&quot;searchRes&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         $A.util.addClass(resultListDiv, 'slds-is-close'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         $A.util.removeClass(resultListDiv, 'slds-is-open'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; lookUpTarget = component.find(&quot;lookupField&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         $A.util.addClass(lookUpTarget, 'slds-hide'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         $A.util.removeClass(lookUpTarget, 'slds-show'&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;       
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; 
&lt;span&gt;62&lt;/span&gt;     hideSpinner : &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (component, event, helper) {
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; spinner = component.find('spinner'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; evt = spinner.get(&quot;e.toggle&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;         evt.setParams({ isVisible : &lt;span&gt;false&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;        evt.fire();    
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; 
&lt;span&gt;69&lt;/span&gt;     showSpinner : &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (component, event, helper) {
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; spinner = component.find('spinner'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; evt = spinner.get(&quot;e.toggle&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;         evt.setParams({ isVisible : &lt;span&gt;true&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;        evt.fire();    
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;     
&lt;span&gt;76&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;customLookUpHelper.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;({
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     searchHelper : &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(component,event,getInputkeyWord) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; action = component.get(&quot;c.fetchObjectList&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        action.setParams({
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             'keyWord'&lt;span&gt;: getInputkeyWord,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             'objectName' : component.get('v.objectType'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;    
&lt;span&gt; 9&lt;/span&gt;         action.setCallback(&lt;span&gt;this&lt;/span&gt;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(response) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; state =&lt;span&gt; response.getState();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (state === &quot;SUCCESS&quot;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; resValue =&lt;span&gt; response.getReturnValue();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (resValue.length == 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                     component.set(&quot;v.Message&quot;, 'No Result Found.'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     component.set(&quot;v.Message&quot;, 'Search Result As Follows.'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 
&lt;span&gt;19&lt;/span&gt;                 component.set(&quot;v.searchObjList&quot;&lt;span&gt;, resValue);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        $A.enqueueAction(action);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6. 放在APP 里面调用&lt;/p&gt;
&lt;p&gt;TestCustomLookUpApp.app&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:application &lt;/span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;span&gt;=&quot;force:slds&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;selectedUser&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;User&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:customLookUp &lt;/span&gt;&lt;span&gt;selectedRecord&lt;/span&gt;&lt;span&gt;=&quot;{!v.selectedUser}&quot;&lt;/span&gt;&lt;span&gt; objectType&lt;/span&gt;&lt;span&gt;=&quot;User&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;{!c.showInformation}&quot;&lt;/span&gt;&lt;span&gt; label&lt;/span&gt;&lt;span&gt;=&quot;show information&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:application&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TestCustomLookUpAppController.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;({
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     showInformation : &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(component, event, helper) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         alert(component.get('v.selectedUser'&lt;span&gt;).Id);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;结果展示：&lt;/strong&gt;通过组件可以直接根据selectedUser获取选中的User的Id等信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/910966/201903/910966-20190324221628347-198426867.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;总结：&lt;/strong&gt;篇中只是简单的进行封装功能，并且只允许单选，对于多选感兴趣的可以实现。改动的点不是很多。篇中有错误的地方欢迎指出，不懂的欢迎留言。&lt;/p&gt;
</description>
<pubDate>Sun, 24 Mar 2019 14:28:00 +0000</pubDate>
<dc:creator>zero.zhang</dc:creator>
<og:description>本篇参考：http://sfdcmonkey.com/2017/01/07/custom-lookup-lightning-component/，在参考的demo中进行了简单的改动和优化。 我们在ht</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zero-zyq/p/10590517.html</dc:identifier>
</item>
<item>
<title>F#周报2019年第12期 - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/10590905.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/10590905.html</guid>
<description>[unable to retrieve full-text content]新闻 &quot;Amazon.Lambda.RuntimeSupport发布&quot; &quot;Forge 3.0架构&quot; &quot;Blazor 0.9.0试验版发布&quot; &quot;通过微软游戏栈实现更多应用&quot; &quot;介绍ASP.NET Core中的gRPC&quot; &quot;Mac上的Visual Studio 2019 8.0版本预览4&quot; &quot;FlexS</description>
<pubDate>Sun, 24 Mar 2019 14:20:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<og:description>新闻 'Amazon.Lambda.RuntimeSupport发布' 'Forge 3.0架构' 'Blazor 0.9.0试验版发布' '通过微软游戏栈实现更多应用' '介绍ASP.NET Cor</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/10590905.html</dc:identifier>
</item>
<item>
<title>前端面试必备的css盒子模型 - 李都的博客</title>
<link>http://www.cnblogs.com/liduh/p/10590952.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liduh/p/10590952.html</guid>
<description>&lt;p&gt;       今天同学发给了我一份前端基础的面试题，第一道便是对&lt;strong&gt;css盒子模型&lt;/strong&gt;的理解，我看到的第一眼想到的是div，然后就...懵逼了，知其然不知其所以然。所以打算写一写盒子模型的概念理解啥的，如有写的不当的地方，望指正见谅！&lt;/p&gt;
&lt;h2&gt;1、css3盒子模型&lt;/h2&gt;
&lt;p&gt;        个人的理解是页面上所有的html元素都可以看作是盒子，即整个html页面就是由无数个盒子通过特定的布局结合在一起的，每个盒子包括内容（content）、内边距（padding）、边框（border）、外边距（margin）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1579347/201903/1579347-20190324213249256-1654391203.jpg&quot; alt=&quot;&quot; width=&quot;573&quot; height=&quot;484&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     （一般来说margin有两种形式，一种是盒子与浏览器窗口的外边距，还有一种是盒子与相邻盒子的外边距）&lt;/p&gt;
&lt;h2&gt;2、关于盒子的宽高的问题&lt;/h2&gt;
&lt;p&gt;        标准盒子模型，也就是咋们的大哥W3C规定的盒子模型，这种情况下：css中定义的宽高 = 盒子实际内容（content）的宽高，盒子的总宽高 = css定义的宽高 + padding + border + margin（注意计算时左右和上下的padding、margin都是两个）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1579347/201903/1579347-20190324214048539-981917029.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;      如下定义了一个盒子，css代码和html代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#box&lt;/span&gt;{
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;:&lt;span&gt; 200px&lt;/span&gt;;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;:&lt;span&gt; 200px&lt;/span&gt;;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;            margin&lt;/span&gt;:&lt;span&gt; 10px&lt;/span&gt;;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;            padding&lt;/span&gt;:&lt;span&gt; 10px&lt;/span&gt;;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;            border&lt;/span&gt;:&lt;span&gt; solid red&lt;/span&gt;;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; border默认宽度是3px 所以没写直接3px了&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        我是一个盒子
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     在浏览器开发工具下的截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1579347/201903/1579347-20190324220831453-1271766234.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       从图中可以看出:蓝色部分（200*200 )是盒子的content，绿色的是padding，黄色的是border, 深黄色是margin&lt;/p&gt;
&lt;p&gt;       &lt;strong&gt;但在IE浏览器中盒子的宽高计算方式会不一样：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        &lt;/strong&gt;IE盒子模型也叫怪异盒模型&lt;/p&gt;
&lt;p&gt;        &lt;img src=&quot;https://img2018.cnblogs.com/blog/1579347/201903/1579347-20190324221722066-80408707.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;      在该模式下，浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和；即在怪异模式下的盒模型，盒子的（content）宽度+内边距padding+边框border宽度=我们设置的width(height也是如此)，盒子总宽度/高度=width/height + margin = 内容区宽度/高度 + padding + border + margin。&lt;br/&gt;　　写到最后就有点想要放弃了，望路过的大佬见谅！凑合看吧~&lt;/p&gt;
</description>
<pubDate>Sun, 24 Mar 2019 14:20:00 +0000</pubDate>
<dc:creator>李都的博客</dc:creator>
<og:description>今天同学发给了我一份前端基础的面试题，第一道便是对css盒子模型的理解，我看到的第一眼想到的是div，然后就...懵逼了，知其然不知其所以然。所以打算写一写盒子模型的概念理解啥的，如有写的不当的地方，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liduh/p/10590952.html</dc:identifier>
</item>
<item>
<title>深度辨析 Python 的 eval() 与 exec() - 豌豆花下猫</title>
<link>http://www.cnblogs.com/pythonista/p/10590682.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pythonista/p/10590682.html</guid>
<description>&lt;p&gt;Python 提供了很多内置的工具函数（Built-in Functions），在最新的 Python 3 官方文档中，它列出了 69 个。&lt;/p&gt;
&lt;p&gt;大部分函数是我们经常使用的，例如 print()、open() 与 dir()，而有一些函数虽然不常用，但它们在某些场景下，却能发挥出不一般的作用。内置函数们能够被“提拔”出来，这就意味着它们皆有独到之处，有用武之地。&lt;/p&gt;
&lt;p&gt;因此，掌握内置函数的用法，就成了我们应该点亮的技能。&lt;/p&gt;
&lt;p&gt;在《&lt;a href=&quot;https://mp.weixin.qq.com/s/4eWQmJ15QZabNViePCDmNw&quot;&gt;Python进阶：如何将字符串常量转为变量？&lt;/a&gt;》这篇文章中，我提到过 eval() 和 exec() ，但对它们并不太了解。为了弥补这方面知识，我就重新学习了下。这篇文章是一份超级详细的学习记录，系统、全面而深入地辨析了这两大函数。&lt;/p&gt;
&lt;h2 id=&quot;h1eval&quot;&gt;1、eval 的基本用法&lt;/h2&gt;
&lt;p&gt;语法：eval(&lt;em&gt;expression&lt;/em&gt;, &lt;em&gt;globals=None&lt;/em&gt;, &lt;em&gt;locals=None&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;它有三个参数，其中 expression 是一个字符串类型的表达式或代码对象，用于做运算；globals 与 locals 是可选参数，默认值是 None。&lt;/p&gt;
&lt;p&gt;具体而言，expression 只能是单个表达式，不支持复杂的代码逻辑，例如赋值操作、循环语句等等。（PS：单个表达式并不意味着“简单无害”，参见下文第 4 节）&lt;/p&gt;
&lt;p&gt;globals 用于指定运行时的全局命名空间，类型是字典，缺省时使用的是当前模块的内置命名空间。locals 指定运行时的局部命名空间，类型是字典，缺省时使用 globals 的值。两者都缺省时，则遵循 eval 函数执行时的作用域。值得注意的是，这两者不代表真正的命名空间，只在运算时起作用，运算后则销毁。&lt;/p&gt;
&lt;pre readability=&quot;9.5&quot;&gt;
&lt;code class=&quot;hljs bash&quot; readability=&quot;13&quot;&gt;x = 10&lt;p&gt;def func():&lt;br/&gt;y = 20&lt;br/&gt;a = &lt;span class=&quot;hljs-built_in&quot;&gt;eval(&lt;span class=&quot;hljs-string&quot;&gt;'x + y')&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;'a: ', a)&lt;br/&gt;b = &lt;span class=&quot;hljs-built_in&quot;&gt;eval(&lt;span class=&quot;hljs-string&quot;&gt;'x + y', {&lt;span class=&quot;hljs-string&quot;&gt;'x': 1, &lt;span class=&quot;hljs-string&quot;&gt;'y': 2})&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;'x: ' + str(x) + &lt;span class=&quot;hljs-string&quot;&gt;' y: ' + str(y))&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;'b: ', b)&lt;br/&gt;c = &lt;span class=&quot;hljs-built_in&quot;&gt;eval(&lt;span class=&quot;hljs-string&quot;&gt;'x + y', {&lt;span class=&quot;hljs-string&quot;&gt;'x': 1, &lt;span class=&quot;hljs-string&quot;&gt;'y': 2}, {&lt;span class=&quot;hljs-string&quot;&gt;'y': 3, &lt;span class=&quot;hljs-string&quot;&gt;'z': 4})&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;'x: ' + str(x) + &lt;span class=&quot;hljs-string&quot;&gt;' y: ' + str(y))&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;'c: ', c)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;func()&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs makefile&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;a:  30&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;x: 10 y: 20&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;b:  3&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;x: 10 y: 20&lt;br/&gt;&lt;span class=&quot;hljs-section&quot;&gt;c:  4&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由此可见，当指定了命名空间的时候，变量会在对应命名空间中查找。而且，它们的值不会覆盖实际命名空间中的值。&lt;/p&gt;
&lt;h2 id=&quot;h2exec&quot;&gt;2、exec 的基本用法&lt;/h2&gt;
&lt;p&gt;语法：&lt;code&gt;exec&lt;/code&gt;(&lt;em&gt;object&lt;/em&gt;[, &lt;em&gt;globals&lt;/em&gt;[, &lt;em&gt;locals&lt;/em&gt;]])&lt;/p&gt;
&lt;p&gt;在 Python2 中 exec 是个语句，而 Python3 将其改造成一个函数，就像 print 一样。exec() 与 eval() 高度相似，三个参数的意义和作用相近。&lt;/p&gt;
&lt;p&gt;主要的区别是，exec() 的第一个参数不是表达式，而是代码块，这意味着两点：一是它不能做表达式求值并返回出去，二是它可以执行复杂的代码逻辑，相对而言功能更加强大，例如，当代码块中赋值了新的变量时，该变量&lt;strong&gt;可能&lt;/strong&gt; 在函数外的命名空间中存活下来。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; y = exec(&lt;span class=&quot;hljs-string&quot;&gt;'x = 1 + 1')&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; print(x)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; print(y)&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;br/&gt;None&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看出，exec() 内外的命名空间是相通的，变量由此传递出去，而不像 eval() 函数，需要一个变量来接收函数的执行结果。&lt;/p&gt;
&lt;h2 id=&quot;h3&quot;&gt;3、一些细节辨析&lt;/h2&gt;
&lt;p&gt;两个函数都很强大，它们将字符串内容当做有效的代码执行。这是一种&lt;strong&gt;字符串驱动的事件&lt;/strong&gt; ，意义重大。然而，在实际使用过程中，存在很多微小的细节，此处就列出我所知道的几点吧。&lt;/p&gt;
&lt;p&gt;常见用途：将字符串转成相应的对象，例如 string 转成 list ，string 转成 dict，string 转 tuple 等等。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a = &lt;span class=&quot;hljs-string&quot;&gt;&quot;[[1,2], [3,4], [5,6], [7,8], [9,0]]&quot;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; print(eval(a))&lt;br/&gt;[[&lt;span class=&quot;hljs-number&quot;&gt;1, &lt;span class=&quot;hljs-number&quot;&gt;2], [&lt;span class=&quot;hljs-number&quot;&gt;3, &lt;span class=&quot;hljs-number&quot;&gt;4], [&lt;span class=&quot;hljs-number&quot;&gt;5, &lt;span class=&quot;hljs-number&quot;&gt;6], [&lt;span class=&quot;hljs-number&quot;&gt;7, &lt;span class=&quot;hljs-number&quot;&gt;8], [&lt;span class=&quot;hljs-number&quot;&gt;9, &lt;span class=&quot;hljs-number&quot;&gt;0]]&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a = &lt;span class=&quot;hljs-string&quot;&gt;&quot;{'name': 'Python猫', 'age': 18}&quot;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; print(eval(a))&lt;br/&gt;{&lt;span class=&quot;hljs-string&quot;&gt;'name': &lt;span class=&quot;hljs-string&quot;&gt;'Python猫', &lt;span class=&quot;hljs-string&quot;&gt;'age': &lt;span class=&quot;hljs-number&quot;&gt;18}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;eval() 函数的返回值是其 expression 的执行结果，在某些情况下，它会是 None，例如当该表达式是 print() 语句，或者是列表的 append() 操作时，这类操作的结果是 None，因此 eval() 的返回值也会是 None。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; result = eval(&lt;span class=&quot;hljs-string&quot;&gt;'[].append(2)')&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; print(result)&lt;br/&gt;None&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;exec() 函数的返回值只会是 None，与执行语句的结果无关，所以，将 exec() 函数赋值出去，就没有任何必要。所执行的语句中，如果包含 return 或 yield ，它们产生的值也无法在 exec 函数的外部起作用。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; result = exec(&lt;span class=&quot;hljs-string&quot;&gt;'1 + 1')&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; print(result)&lt;br/&gt;None&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;两个函数中的 globals 和 locals 参数，起到的是白名单的作用，通过限定命名空间的范围，防止作用域内的数据被滥用。&lt;/p&gt;
&lt;p&gt;conpile() 函数编译后的 code 对象，可作为 eval 和 exec 的第一个参数。compile() 也是个神奇的函数，我翻译的上一篇文章《&lt;a href=&quot;https://mp.weixin.qq.com/s/o-HuE3VxgHedfe8X5fUrMA&quot;&gt;Python骚操作：动态定义函数&lt;/a&gt;》就演示了一个动态定义函数的操作。&lt;/p&gt;
&lt;p&gt;吊诡的局部命名空间：前面讲到了 exec() 函数内的变量是可以改变原有命名空间的，然而也有例外。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs python&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;span class=&quot;hljs-params&quot;&gt;():&lt;br/&gt;exec(&lt;span class=&quot;hljs-string&quot;&gt;'y = 1 + 1\nprint(y)')&lt;br/&gt;print(locals())&lt;br/&gt;print(y)&lt;p&gt;foo()&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;按照前面的理解，预期的结果是局部变量中会存入变量 y，因此两次的打印结果都会是 2，然而实际上的结果却是：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs perl&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;br/&gt;{&lt;span class=&quot;hljs-string&quot;&gt;'y': &lt;span class=&quot;hljs-number&quot;&gt;2}&lt;br/&gt;Traceback (most recent call &lt;span class=&quot;hljs-keyword&quot;&gt;last):&lt;br/&gt;...(略去部分报错信息)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;print(&lt;span class=&quot;hljs-keyword&quot;&gt;y)&lt;br/&gt;NameError: name &lt;span class=&quot;hljs-string&quot;&gt;'y' is &lt;span class=&quot;hljs-keyword&quot;&gt;not &lt;span class=&quot;hljs-keyword&quot;&gt;defined&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;明明看到了局部命名空间中有变量 y，为何会报错说它未定义呢？&lt;/p&gt;
&lt;p&gt;原因与 Python 的编译器有关，对于以上代码，编译器会先将 foo 函数解析成一个 ast（抽象语法树），然后将所有变量节点存入栈中，此时 exec() 的参数只是一个字符串，整个就是常量，并没有作为代码执行，因此 y 还不存在。直到解析第二个 print() 时，此时第一次出现变量 y ，但因为没有完整的定义，所以 y 不会被存入局部命名空间。&lt;/p&gt;
&lt;p&gt;在运行期，exec() 函数动态地创建了局部变量 y ，然而由于 Python 的实现机制是“&lt;strong&gt;运行期的局部命名空间不可改变&lt;/strong&gt; ”，也就是说这时的 y 始终无法成为局部命名空间的一员，当执行 print() 时也就报错了。&lt;/p&gt;
&lt;p&gt;至于为什么 locals() 取出的结果有 y，为什么它不能代表真正的局部命名空间？为什么局部命名空间无法被动态修改？可以查看我之前分享的《&lt;a href=&quot;https://mp.weixin.qq.com/s/f9BBe2W1X1p7NcHg665I4A&quot;&gt;Python 动态赋值的陷阱&lt;/a&gt;》，另外，官方的 bug 网站中也有对此问题的讨论，查看地址：https://bugs.python.org/issue4831&lt;/p&gt;
&lt;p&gt;若想把 exec() 执行后的 y 取出来的话，可以这样：&lt;code&gt;z = locals()['y']&lt;/code&gt; ，然而如果不小心写成了下面的代码，则会报错：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs python&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;span class=&quot;hljs-params&quot;&gt;():&lt;br/&gt;exec(&lt;span class=&quot;hljs-string&quot;&gt;'y = 1 + 1')&lt;br/&gt;y = locals()[&lt;span class=&quot;hljs-string&quot;&gt;'y']&lt;br/&gt;print(y)&lt;p&gt;foo()&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;KeyError&lt;/code&gt; 指的是在字典中不存在对应的 key 。本例中 y 作了声明，却因为循环引用而无法完成赋值，即 key 值对应的 value 是个无效值，因此读取不到，就报错了。&lt;/p&gt;
&lt;p&gt;此例还有 4 个变种，我想用一套自恰的说法来解释它们，但尝试了很久，未果。留个后话吧，等我想明白，再单独写一篇文章。&lt;/p&gt;
&lt;h2 id=&quot;h4eval&quot;&gt;4、为什么要慎用 eval() ？&lt;/h2&gt;
&lt;p&gt;很多动态的编程语言中都会有 eval() 函数，作用大同小异，但是，无一例外，人们会告诉你说，避免使用它。&lt;/p&gt;
&lt;p&gt;为什么要慎用 eval() 呢？主要出于安全考虑，对于不可信的数据源，eval 函数很可能会招来代码注入的问题。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;__import__('os').system('whoami')&quot;)&lt;br/&gt;desktop-fa4b888\pythoncat&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;__import__('subprocess').getoutput('ls ~')&quot;)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在以上例子中，我的隐私数据就被暴露了。而更可怕的是，如果将命令改为&lt;code&gt;rm -rf ~&lt;/code&gt; ，那当前目录的所有文件都会被删除干净。&lt;/p&gt;
&lt;p&gt;针对以上例子，有一个限制的办法，即指定 globals 为 &lt;code&gt;{'__builtins__': None}&lt;/code&gt; 或者 &lt;code&gt;{'__builtins__': {}}&lt;/code&gt; 。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s = {&lt;span class=&quot;hljs-string&quot;&gt;'__builtins__': None}&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;__import__('os').system('whoami')&quot;, s)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;__builtins__&lt;/code&gt; 包含了内置命名空间中的名称，在控制台中输入 dir(__builtins__) ，就能发现很多内置函数、异常和其它属性的名称。在默认情况下，eval 函数的 globals 参数会隐式地携带&lt;code&gt;__builtins__&lt;/code&gt; ，即使是令 globals 参数为 {} 也如此，所以如果想要禁用它，就得显式地指定它的值。&lt;/p&gt;
&lt;p&gt;上例将它映射成 None，就意味着限定了 eval 可用的内置命名空间为 None，从而限制了表达式调用内置模块或属性的能力。&lt;/p&gt;
&lt;p&gt;但是，这个办法还不是万无一失的，因为仍有手段可以发起攻击。&lt;/p&gt;
&lt;p&gt;某位漏洞挖掘高手在他的博客中分享了一个思路，令人大开眼界。其核心的代码是下面这句，你可以试试执行，看看输出的是什么内容。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&amp;gt;&amp;gt;&amp;gt; ()&lt;span class=&quot;hljs-selector-class&quot;&gt;.__class__&lt;span class=&quot;hljs-selector-class&quot;&gt;.__bases__&lt;span class=&quot;hljs-selector-attr&quot;&gt;[0]&lt;span class=&quot;hljs-selector-class&quot;&gt;.__subclasses__()&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关于这句代码的解释，以及更进一步的利用手段，详见博客。（地址：https://www.tuicool.com/articles/jeaqe2n）&lt;/p&gt;
&lt;p&gt;另外还有一篇博客，不仅提到了上例的手段，还提供了一种新的思路：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs markdown&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;#警告：千万不要执行如下代码，后果自负。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; eval('(lambda fc=(lambda n: [&lt;span class=&quot;hljs-string&quot;&gt;c 1=&quot;c&quot; 2=&quot;in&quot; 3=&quot;().__class__.__bases__[0&quot; language=&quot;for&quot;][&lt;span class=&quot;hljs-symbol&quot;&gt;/c].&lt;span class=&quot;hljs-strong&quot;&gt;__subclasses__() if c.&lt;span class=&quot;hljs-strong&quot;&gt;__name__ == n][0]):fc(&quot;function&quot;)(fc(&quot;code&quot;)(0,0,0,0,&quot;KABOOM&quot;,(),(),(),&quot;&quot;,&quot;&quot;,0,&quot;&quot;),{})())()', {&quot;&lt;span class=&quot;hljs-strong&quot;&gt;__builtins__&quot;:None})&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这行代码会导致 Python 直接 crash 掉。具体分析在：https://segmentfault.com/a/1190000011532358&lt;/p&gt;
&lt;p&gt;除了黑客的手段，简单的内容也能发起攻击。像下例这样的写法， 将在短时间内耗尽服务器的计算资源。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2 ** 888888888&quot;, {&lt;span class=&quot;hljs-string&quot;&gt;&quot;__builtins__&quot;&lt;span class=&quot;hljs-symbol&quot;&gt;:None}, {})&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如上所述，我们直观地展示了 eval() 函数的危害性，然而，即使是 Python 高手们小心谨慎地使用，也不能保证不出错。&lt;/p&gt;
&lt;p&gt;在官方的 dumbdbm 模块中，曾经（2014年）发现一个安全漏洞，攻击者通过伪造数据库文件，可以在调用 eval() 时发起攻击。（详情：https://bugs.python.org/issue22885）&lt;/p&gt;
&lt;p&gt;无独有偶，在上个月（2019.02），有核心开发者针对 Python 3.8 也提出了一个安全问题，提议不在 logging.config 中使用 eval() 函数，目前该问题还是 open 状态。（详情：https://bugs.python.org/issue36022）&lt;/p&gt;
&lt;p&gt;如此种种，足以说明为什么要慎用 eval() 了。同理可证，exec() 函数也得谨慎使用。&lt;/p&gt;
&lt;h2 id=&quot;h5&quot;&gt;5、安全的替代用法&lt;/h2&gt;
&lt;p&gt;既然有种种安全隐患，为什么要创造出这两个内置方法呢？为什么要使用它们呢？&lt;/p&gt;
&lt;p&gt;理由很简单，因为 Python 是一门灵活的动态语言。与静态语言不同，动态语言支持动态地产生代码，对于已经部署好的工程，也可以只做很小的局部修改，就实现 bug 修复。&lt;/p&gt;
&lt;p&gt;那有什么办法可以相对安全地使用它们呢？&lt;/p&gt;
&lt;p&gt;ast 模块的 &lt;code&gt;literal()&lt;/code&gt; 是 eval() 的安全替代，与 eval() 不做检查就执行的方式不同，ast.literal() 会先检查表达式内容是否有效合法。它所允许的字面内容如下：&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;strings, bytes, numbers, tuples, lists, dicts, sets, booleans, 和 None&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一旦内容非法，则会报错：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; readability=&quot;1&quot;&gt;import ast&lt;br/&gt;ast.literal_eval(&lt;span class=&quot;hljs-string&quot; readability=&quot;2&quot;&gt;&quot;__import__('os').system('whoami')&quot;)&lt;p&gt;报错：ValueError: malformed node &lt;span class=&quot;hljs-keyword&quot;&gt;or &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不过，它也有缺点：AST 编译器的栈深（stack depth）有限，解析的字符串内容太多或太复杂时，可能导致程序崩溃。&lt;/p&gt;
&lt;p&gt;至于 exec() ，似乎还没有类似的替代方法，毕竟它本身可支持的内容是更加复杂多样的。&lt;/p&gt;
&lt;p&gt;最后是一个建议：搞清楚它们的区别与运行细节（例如前面的局部命名空间内容），谨慎使用，限制可用的命名空间，对数据源作充分校验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关联阅读：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/f9BBe2W1X1p7NcHg665I4A&quot;&gt;Python 动态赋值的陷阱&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/o-HuE3VxgHedfe8X5fUrMA&quot;&gt;Python骚操作：动态定义函数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/EsWmCbH3RtL_QpafyMryOw&quot;&gt;Python与家国天下&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/4eWQmJ15QZabNViePCDmNw&quot;&gt;Python进阶：如何将字符串常量转为变量？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;https://docs.python.org/3/library/ast.html#ast.literal_eval&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1g08dfkg8sdj2076076t96.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;公众号【&lt;strong&gt;Python猫&lt;/strong&gt;】， 专注Python技术、数据科学和深度学习，力图创造一个有趣又有用的学习分享平台。本号连载优质的系列文章，有喵星哲学猫系列、Python进阶系列、好书推荐系列、优质英文推荐与翻译等等，欢迎关注哦。PS：后台回复“&lt;strong&gt;爱学习&lt;/strong&gt;”，免费获得一份学习大礼包。&lt;/p&gt;
</description>
<pubDate>Sun, 24 Mar 2019 13:46:00 +0000</pubDate>
<dc:creator>豌豆花下猫</dc:creator>
<og:description>Python 提供了很多内置的工具函数（Built-in Functions），在最新的 Python 3 官方文档中，它列出了 69 个。 大部分函数是我们经常使用的，例如 print()、open</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pythonista/p/10590682.html</dc:identifier>
</item>
<item>
<title>如何自学编程？学习方法在这里！ - 编程小火车</title>
<link>http://www.cnblogs.com/L928/p/10590577.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/L928/p/10590577.html</guid>
<description>&lt;p&gt;目前工作4年，当初是自学安卓的，资料网上整理的都非常全面了，我想补充的是现在已经不是当初资料匮乏的时代了，免费课程，付费课程，技术博客真的太多了，所以我想阐述一下学习方法：&lt;/p&gt;
&lt;p&gt;&lt;img id=&quot;&quot; title=&quot;&quot; src=&quot;https://qupost-oss.1sapp.com/qupost/images/2019/03/24/1553434100284299766.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;​&lt;strong&gt;学习路线的选择&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;学习一门语言如果今天学点这块，明天学点那块，没有系统的学习，实际上进步是非常慢的，不知道大家有没有这样的感觉，在上学的时候每当到了期末课程都学完了复习了几遍之后再次遇到问题思路会和刚开始接触问题的时候思路更开阔了，我个人认为这是系统的掌握了知识的表现，所以刚开始学习的同学可以花费大量时间制定一个学习路线，从安卓四大组件，常用UI控件，到分析源码，就像一个产品的诞生最重要的地方是需求分析一样，确定了你要做什么再去做往往事半功倍！&lt;/p&gt;
&lt;p&gt;&lt;img id=&quot;&quot; title=&quot;&quot; src=&quot;https://qupost-oss.1sapp.com/qupost/images/2019/03/24/1553434100294950052.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;学习目标的建立&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;没有一个明确的目标我觉得就像一个无头苍蝇一般不知道飞向哪里，制定一个长远的目标，比如 stormzhang 张哥现在多牛逼不用我说了吧，就以张哥作为长远目标，接下来细化每个时间段的目标，每一个时间节点我要达到什么样的水平，比如找到理想的工作？晋升安卓高级工程师，资深工程师？ 当然想要达到张哥的高度不仅仅是学会安卓就可以了！有了目标之后学起来才不会枯燥无味，才能得到阶段性的成就感，长此以往今天的自己就比昨天的自己更加进步，就会掌握安卓开发的全貌，在工作中自然升职加薪。&lt;/p&gt;
&lt;p&gt;自我总结的重要性：怎么证明自己学会了？最直接有效的方法就是总结，把知识给别人讲明白了才算是掌握了，以后自然也不会忘，大家可以写技术博客，公众号，开源 github，总结的好处不仅仅是自己会掌握知识，更加能够提升自己的知名度，认识一些志同道合的伙伴，开阔视野，另外在你和另一个安卓开发技术差不多的情况下会写文章热爱分享的你就会比他薪资更高，因为你比他多了一点影响力，价值更大！&lt;/p&gt;
&lt;p&gt;&lt;img id=&quot;&quot; title=&quot;&quot; src=&quot;https://qupost-oss.1sapp.com/qupost/images/2019/03/24/1553434100307003300.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;对于在校生的一点建议：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;现在人工智能非常火，但是门槛也很高，对数学能力算法能力有一定要求。例如，如果你本身在大学学的就c/c++开发，不一定非要转到当下热门的专业，从 PC 时代到移动互联网时代再到现在，都有自己的热门，更何况C++开发的市场需求还是特别大，没必要放下自己的现在的优势去从零学起。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术并不是全部&lt;/strong&gt;，在职场除了技术能力想要走的更远更加需要其他的能力，所以建议大家多阅读一些其他领域的书籍，关注其他领域的牛人。&lt;/p&gt;
&lt;p&gt;很多伙伴面对考研和工作的选择，我个人认为如果不是名牌大学的研究生考研的优势很模糊，我们这行实际的工作经验很重要，所以如果你有信心考入重点大学研究生就去考。&lt;/p&gt;
&lt;p&gt;城市的选择：要去大城市，为什么大家挤破头也要留在大城市是有原因的，即使很辛苦也要去增长见识，提升自己，因为你自己没有承担辛苦就会留给关心你的人去承担，何况我们如此年轻！&lt;/p&gt;
&lt;p&gt;&lt;img id=&quot;&quot; title=&quot;&quot; src=&quot;https://qupost-oss.1sapp.com/qupost/images/2019/03/24/1553434100310415772.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;对于已经工作的小伙伴一点分享:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;因为我也是正在工作中所以谈不上建议，只是一点分享：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更快的确立自己的理想和目标&lt;/strong&gt;：因为我们面临的选择需要理想来判断，对理想有利的我们就去争取和选择，这样我们面临选择时就会果断很多，也会距离自己的理想更进一步&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;必须要写作&lt;/strong&gt;：我认为写作已经是当前时代最重要的技能，除了自己总结之外别人会通过你的文章了解你，这也会无形之中形成自己的品牌&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提升沟通能力&lt;/strong&gt;：老生常谈的沟通能力到底是什么？不是能够一直说话说个不停，那可能是背诗能力，更快的理解别人表达的需求以及用更加简短的语言描述自己的需求我认为是沟通能力，并且我认为这也是在职场中越来越重要的能力，唯有多阅读多总结才能提升，大家也可以经常回想自己说过的话，下次遇到同样情况能不能表达的更好&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;圈子的重要性&lt;/strong&gt;：我们能发展成为技术专家么？我觉得大多数人没这个能力，那么我们怎么和技术专家竞争，只有增加我们的能力维度，你只会技术，我会技术还会产品，我还通过写作建立了影响力，能够连接更多资源，所以要多了解其他领域，为什么有的人在当前领域是牛人，到了其他领域也做的不错呢？我猜想他们已经抽象出自己的方法论！&lt;/p&gt;
&lt;p&gt;方法就简单写到这里。最后，祝学习顺利！&lt;/p&gt;

</description>
<pubDate>Sun, 24 Mar 2019 13:34:00 +0000</pubDate>
<dc:creator>编程小火车</dc:creator>
<og:description>目前工作4年，当初是自学安卓的，资料网上整理的都非常全面了，我想补充的是现在已经不是当初资料匮乏的时代了，免费课程，付费课程，技术博客真的太多了，所以我想阐述一下学习方法： ​学习路线的选择 学习一门</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/L928/p/10590577.html</dc:identifier>
</item>
<item>
<title>mini-css-extract-plugin简介 - 学习会让你青春永驻</title>
<link>http://www.cnblogs.com/blackgan/p/10590540.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/blackgan/p/10590540.html</guid>
<description>&lt;p&gt;将css单独打包成一个文件的插件，它为每个包含css的js文件都创建一个css文件。它支持css和sourceMaps的按需加载。&lt;/p&gt;
&lt;p&gt;目前只有在webpack V4版本才支持使用该插件&lt;/p&gt;
&lt;p&gt;和extract-text-webpack-plugin相比：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;异步加载&lt;/li&gt;
&lt;li&gt;无重复编译，性能有所提升&lt;/li&gt;
&lt;li&gt;用法简单&lt;/li&gt;
&lt;li&gt;之支持css分割&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例子：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;支持HMR&lt;br/&gt;&lt;center&gt;* Install *&lt;/center&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;npm install --save-dev mini-css-extract-plugin&lt;/code&gt;
&lt;/pre&gt;
&lt;center&gt;用法&lt;/center&gt;
&lt;h4 id=&quot;简单的例子&quot;&gt;简单的例子&lt;/h4&gt;
&lt;p&gt;webpack.config.js&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);

module.exports={
    plugins:[
        new MiniCssExtractPlugin({
        // Options similar to the same options in webpackOptions.output
        // both options are optional
        filename: &quot;[name].css&quot;,
        chunkFilename: &quot;[id].css&quot;
        })
    ],
     module: {
    rules: [
      {
        test: /\.css$/,
        use: [
          {
            loader: MiniCssExtractPlugin.loader,
            options: {
              // you can specify a publicPath here
              // by default it use publicPath in webpackOptions.output
              publicPath: '../'
            }
          },
          &quot;css-loader&quot;
        ]
      }
    ]
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;高级的配置&quot;&gt;高级的配置&lt;/h4&gt;
&lt;p&gt;这个插件应该只在生产环境构建中使用，并且在loader链中不应该有style-loader，特别是我们在开发模式中使用HMR时。&lt;/p&gt;
&lt;p&gt;下面是一个在开发模式中使用HMR并在生产环境构建的文件中提出出css样式的示例。&lt;/p&gt;
&lt;p&gt;(各个loader的配置根据你的需求进行自定义修改)&lt;/p&gt;
&lt;p&gt;webpack.config.js&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);
const devMode = process.env.NODE_ENV !== 'production'

module.exports = {
  plugins: [
    new MiniCssExtractPlugin({
      // Options similar to the same options in webpackOptions.output
      // both options are optional
      filename: devMode ? '[name].css' : '[name].[hash].css',
      chunkFilename: devMode ? '[id].css' : '[id].[hash].css',
    })
  ],
  module: {
    rules: [
      {
        test: /\.(sa|sc|c)ss$/,
        use: [
          devMode ? 'style-loader' : MiniCssExtractPlugin.loader,
          'css-loader',
          'postcss-loader',
          'sass-loader',
        ],
      }
    ]
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;生产环境最小化&quot;&gt;生产环境最小化&lt;/h4&gt;
&lt;p&gt;等到webpack V5时，有可能会将css压缩功能进行集成，但是在webpack V4，我们还需要手动使用optimize-css-assets-webpack-plugin来进行css的压缩。配置wepack的optimization.minimizer选项来覆盖webpack的默认配置。同时也要指定一个js压缩器。&lt;/p&gt;
&lt;p&gt;wepack.config.js&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;const UglifyJsPlugin = require(&quot;uglifyjs-webpack-plugin&quot;);
const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);
const OptimizeCSSAssetsPlugin = require(&quot;optimize-css-assets-webpack-plugin&quot;);

module.exports={
  optimization: {
    minimizer: [
      new UglifyJsPlugin({
        cache: true,
        parallel: true,
        sourceMap: true // set to true if you want JS source maps
      }),
      new OptimizeCSSAssetsPlugin({})
    ]
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: &quot;[name].css&quot;,
      chunkFilename: &quot;[id].css&quot;
    })
  ],
  module: {
    rules: [
      {
        test: /\.css$/,
        use: [
          MiniCssExtractPlugin.loader,
          &quot;css-loader&quot;
        ]
      }
    ]
  }
}
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;其他功能&quot;&gt;其他功能&lt;/h4&gt;
&lt;h5 id=&quot;使用预加载或内联css&quot;&gt;使用预加载或内联CSS&lt;/h5&gt;
&lt;p&gt;运行时代码通过link 或 style标签检测已经添加的css,当在服务端注入css为了在服务端进行渲染时是非常有用的。link标签的href属性用来匹配被加载的css块的URL，data-href属性也可以在link和style标签上使用，当使用内联样式的时候必须使用href.&lt;/p&gt;
&lt;h5 id=&quot;提取所有的css到一个文件中&quot;&gt;提取所有的css到一个文件中&lt;/h5&gt;
&lt;p&gt;类似于 extract-text-webpack-plugin的作用，可以使用optimization.splitChunks.cacheGroups来将css提取到一个文件中&lt;/p&gt;
&lt;p&gt;webpack.config.js&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);
module.exports = {
  optimization: {
    splitChunks: {
      cacheGroups: {
        styles: {
          name: 'styles',
          test: /\.css$/,
          chunks: 'all',
          enforce: true
        }
      }
    }
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: &quot;[name].css&quot;,
    })
  ],
  module: {
    rules: [
      {
        test: /\.css$/,
        use: [
          MiniCssExtractPlugin.loader,
          &quot;css-loader&quot;
        ]
      }
    ]
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;根据webpack-的-entry-提取-css&quot;&gt;根据webpack 的 entry 提取 css&lt;/h4&gt;
&lt;p&gt;还可以根据webpack entry提取CSS。如果动态导入路由，但希望根据条目将CSS绑定在一起，那么这一点尤其有用。这也防止了使用ExtractTextPlugin时出现的CSS复制问题。&lt;/p&gt;
&lt;p&gt;webpack.config.js&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;const path = require('path');
const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);

function recursiveIssuer(m) {
  if (m.issuer) {
    return recursiveIssuer(m.issuer);
  } else if (m.name) {
    return m.name;
  } else {
    return false;
  }
}
module.exports = {
  entry: {
    foo: path.resolve(__dirname, 'src/foo'),
    bar: path.resolve(__dirname, 'src/bar')
  },  
  plugins: [
    new MiniCssExtractPlugin({
      filename: &quot;[name].css&quot;,
    })
  ],
  module: {
    rules: [
      {
        test: /\.css$/,
        use: [
          MiniCssExtractPlugin.loader,
          &quot;css-loader&quot;
        ]
      }
    ]
  },
  optimization:{
    splitChunks:{
      cacheGroups:{
          fooStyles:{
            fooStyles: {
            name: 'foo',
            test: (m,c,entry = 'foo') =&amp;gt; m.constructor.name === 'CssModule' &amp;amp;&amp;amp; recursiveIssuer(m) === entry,
            chunks: 'all',
            enforce: true
            }
          }
      }
    }  
  }
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 24 Mar 2019 13:29:00 +0000</pubDate>
<dc:creator>学习会让你青春永驻</dc:creator>
<og:description>webpack V4处理提取css文件的plugin, mini-css-extract-plugin</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/blackgan/p/10590540.html</dc:identifier>
</item>
</channel>
</rss>