<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>MySql 下载地址、安装教程及基础知识教程 - 陈彦斌</title>
<link>http://www.cnblogs.com/chenyanbin/p/10493432.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenyanbin/p/10493432.html</guid>
<description>&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;百度云盘地址：https://pan.baidu.com/s/1vqkEImBueHIimPiNPRcV2Q   提取码：xyy1 &lt;/p&gt;
&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt;详细安装步骤地址：https://www.cnblogs.com/lifehrx/p/6083102.html&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;em&gt;登陆与退出&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;登陆与退出
cmd状态下：mysql &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;h 服务器ip地址 &lt;span&gt;-&lt;/span&gt;P 端口号 &lt;span&gt;-&lt;/span&gt;u 用户名 &lt;span&gt;-&lt;/span&gt;&lt;span&gt;p 密码
                quit&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;exit&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;\q
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;查看MySql数据库物理文件存放位置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; show global variables &lt;span&gt;like&lt;/span&gt; &quot;&lt;span&gt;%&lt;/span&gt;datadir&lt;span&gt;%&lt;/span&gt;&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201903/1504448-20190307222741495-1901551684.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;数据库操作&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;、创建数据库(在磁盘上创建一个对应的文件)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;create&lt;/span&gt; &lt;span&gt;database&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;if not exists(判断是否存在，存在不继续创建数据库)&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;db_name&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;character set xxx(设置编码格式)&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;、查看数据库
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    show databases;  # 查看所有数据库
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     show &lt;span&gt;create&lt;/span&gt; &lt;span&gt;database&lt;/span&gt; &lt;span&gt;db_name&lt;/span&gt;&lt;span&gt;;  # 查看数据库的创建方式
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;、修改数据库
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;database&lt;/span&gt; &lt;span&gt;db_name&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;character set xxx&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;、删除数据库
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;drop&lt;/span&gt; &lt;span&gt;database&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;if exists&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;db_name&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;、使用数据库:用于切换数据库
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;use&lt;/span&gt; &lt;span&gt;db_name&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt;、查看当前使用的数据库
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;select&lt;/span&gt; &lt;span&gt;database&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;数值类型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201903/1504448-20190307225610907-1933519233.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;日期和时间类型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201903/1504448-20190307225909108-961924120.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;字符串类型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201903/1504448-20190307230323634-1423197589.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　char和varchar类型类似，但他们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。binary和varbinary类似于char和varchar，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，他们包含字节字符串而不是字符字符串。blob是一个二进制大对象，可以容纳可变数量的数据。4种blob类型：tinyblob、blob、mediumblob和longblob。它们只是可容纳值的最大长度不同。4种text类型：tinytext、text、mediumtext和longtext。这些对应4种blob类型，有相同的最大长度和存储需求。&lt;/p&gt;
&lt;h3&gt;创建表&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;格式:
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;&lt;span&gt; table_name(
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         field1 type&lt;span&gt;[&lt;/span&gt;&lt;span&gt;完整性约束条件&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        field2 type,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        ...
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     )&lt;span&gt;[&lt;/span&gt;&lt;span&gt;character set xxx&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;创建一个员工表
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;&lt;span&gt; employee(
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         id &lt;span&gt;int&lt;/span&gt; &lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt; auto_increment,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         name &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         gender &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        birthday date,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        entry_date date,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         job &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         salary &lt;span&gt;double&lt;/span&gt;(&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;) unsigned,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         resume &lt;span&gt;text&lt;/span&gt;   &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 注意，最后一个字段不加&quot;,&quot;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    )
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;约束:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;primary key (非空且唯一)：能够唯一区分出当前记录的字段称为主键
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;unique
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;not null
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;auto_increment  主键字段必须是数字类型
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;foreign key   外键约束
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;修改表结构&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;增加列字段:
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; tab_name &lt;span&gt;add&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; 列名 类型 &lt;span&gt;[&lt;/span&gt;&lt;span&gt;完整性约束条件&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;first|after 字段名&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;add&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;unique&lt;/span&gt; first&lt;span&gt;/&lt;/span&gt;&lt;span&gt;after username;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;添加多个字段:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;&lt;span&gt; users2
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;add&lt;/span&gt; addr &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;add&lt;/span&gt; age &lt;span&gt;int&lt;/span&gt;&lt;span&gt; first,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;add&lt;/span&gt; birth    &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;&lt;span&gt;) after name;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;修改一列类型:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; tab_name modify 列名 类型 &lt;span&gt;[&lt;/span&gt;&lt;span&gt;完整性约束条件&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;first | after 字段名&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; users2 change age Age &lt;span&gt;int&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;28&lt;/span&gt;&lt;span&gt; first;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;删除一列:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; tab_name &lt;span&gt;drop&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; 列名;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;修改表名:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     rename &lt;span&gt;table&lt;/span&gt; 旧表名 &lt;span&gt;to&lt;/span&gt;&lt;span&gt; 新表名;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;删除表:
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;drop&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;&lt;span&gt; tab_name;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;删除数据库:
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;drop&lt;/span&gt; &lt;span&gt;database&lt;/span&gt;&lt;span&gt; 数据库名;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;添加主键和删除主键:
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; tab_name &lt;span&gt;add&lt;/span&gt; &lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt;(字段名称,...);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; users &lt;span&gt;drop&lt;/span&gt; &lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;数据库操作之增、删、改、查&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 1.增加一条记录insert&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;       &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;insert ［into］ tab_name (field1,filed2,.......) values (value1,value2,.......);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;       &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;&lt;span&gt; employee_new(
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                  id &lt;span&gt;int&lt;/span&gt; &lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt; auto_increment,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                  name &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;unique&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                  birthday &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                  salary &lt;span&gt;float&lt;/span&gt;(&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                             );
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;        &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; employee_new (id,name,birthday,salary) &lt;span&gt;values&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;                      (&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;yuan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1990-09-09&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;9000&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;        &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; employee_new &lt;span&gt;values&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;        (&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1989-08-08&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;        &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; employee_new (name,salary) &lt;span&gt;values&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;        (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xialv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;       &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 插入多条数据&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;        &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; employee_new &lt;span&gt;values&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;        (&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alvin1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1993-04-20&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;        (&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alvin2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1995-05-12&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;       &lt;span&gt;--&lt;/span&gt;&lt;span&gt; set插入: insert ［into］ tab_name set 字段名=值&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;       &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; employee_new &lt;span&gt;set&lt;/span&gt; id&lt;span&gt;=&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;,name&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;alvin3&quot;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 2.修改表记录  update tab_name set field1=value1,field2=value2,......[where 语句]&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;      UPDATE语法可以用新值更新原有表行中的各列。
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            SET子句指示要修改哪些列和要给予哪些值。
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            WHERE子句指定应更新哪些行。如没有WHERE子句，则更新所有的行。&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;update&lt;/span&gt; employee_new &lt;span&gt;set&lt;/span&gt; birthday&lt;span&gt;=&lt;/span&gt;&quot;&lt;span&gt;1989&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;&quot; &lt;span&gt;WHERE&lt;/span&gt; id&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;--&lt;/span&gt;&lt;span&gt;- 将yuan的薪水在原有基础上增加1000元。&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;update&lt;/span&gt; employee_new &lt;span&gt;set&lt;/span&gt; salary&lt;span&gt;=&lt;/span&gt;salary&lt;span&gt;+&lt;/span&gt;&lt;span&gt;4000&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; name&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;yuan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 3.删除表纪录&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;      &lt;span&gt;delete&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; tab_name &lt;span&gt;[&lt;/span&gt;&lt;span&gt;where ....&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;    如果不跟where语句则删除整张表中的数据
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            delete只能用来删除一行记录
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            delete语句只能删除表中的内容，不能删除表本身，想要删除表，用drop
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;            TRUNCATE TABLE也可以删除表中的所有数据，词语句首先摧毁表，再新建表。此种方式删除的数据不能在
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            事务中恢复。&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 删除表中名称为’alex’的记录。&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;                 &lt;span&gt;delete&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; employee_new &lt;span&gt;where&lt;/span&gt; name&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 删除表中所有记录。&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;                 &lt;span&gt;delete&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; employee_new;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; 注意auto_increment没有被重置:alter table employee auto_increment=1;&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 使用truncate删除表中记录。&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;                 &lt;span&gt;truncate&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; emp_new;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;162&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 查询表达式&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt;    &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*|&lt;/span&gt;field1,filed2 ...   &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; tab_name
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt;                   &lt;span&gt;WHERE&lt;/span&gt;&lt;span&gt; 条件
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;                   &lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; field
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;                   &lt;span&gt;HAVING&lt;/span&gt;&lt;span&gt; 筛选
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;                   &lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; field
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;                  LIMIT 限制条数
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt;  &lt;span&gt;--&lt;/span&gt;&lt;span&gt;-准备表&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt;    &lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; ExamResult(
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt;    id &lt;span&gt;INT&lt;/span&gt; &lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt;  auto_increment,
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;    name &lt;span&gt;VARCHAR&lt;/span&gt; (&lt;span&gt;20&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;    JS &lt;span&gt;DOUBLE&lt;/span&gt;&lt;span&gt; ,
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;    Django &lt;span&gt;DOUBLE&lt;/span&gt;&lt;span&gt; ,
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;    OpenStack &lt;span&gt;DOUBLE&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; 
&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; ExamResult &lt;span&gt;VALUES&lt;/span&gt;  (&lt;span&gt;1&lt;/span&gt;,&quot;yuan&quot;,&lt;span&gt;98&lt;/span&gt;,&lt;span&gt;98&lt;/span&gt;,&lt;span&gt;98&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;                                (&lt;span&gt;2&lt;/span&gt;,&quot;xialv&quot;,&lt;span&gt;35&lt;/span&gt;,&lt;span&gt;98&lt;/span&gt;,&lt;span&gt;67&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;                                (&lt;span&gt;3&lt;/span&gt;,&quot;alex&quot;,&lt;span&gt;59&lt;/span&gt;,&lt;span&gt;59&lt;/span&gt;,&lt;span&gt;62&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;                                (&lt;span&gt;4&lt;/span&gt;,&quot;wusir&quot;,&lt;span&gt;88&lt;/span&gt;,&lt;span&gt;89&lt;/span&gt;,&lt;span&gt;82&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;                                (&lt;span&gt;5&lt;/span&gt;,&quot;alvin&quot;,&lt;span&gt;88&lt;/span&gt;,&lt;span&gt;98&lt;/span&gt;,&lt;span&gt;67&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;                                (&lt;span&gt;6&lt;/span&gt;,&quot;yuan&quot;,&lt;span&gt;86&lt;/span&gt;,&lt;span&gt;100&lt;/span&gt;,&lt;span&gt;55&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; （1）select [distinct] *|field1，field2，......   from tab_name&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 其中from指定从哪张表筛选，*表示查找所有列，也可以指定一个列&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 表明确指定要查找的列，distinct用来剔除重复行。&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt; 
&lt;span&gt; 35&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 查询表中所有学生的信息。&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;                     &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 查询表中所有学生的姓名和对应的英语成绩。&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;                     &lt;span&gt;select&lt;/span&gt; name,JS &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 过滤表中重复数据。&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;                     &lt;span&gt;select&lt;/span&gt; &lt;span&gt;distinct&lt;/span&gt; JS ,name &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt; 
&lt;span&gt; 43&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; （2）select 也可以使用表达式，并且可以使用: 字段 as 别名或者:字段 别名&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 在所有学生分数上加10分特长分显示。&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt; 
&lt;span&gt; 48&lt;/span&gt;                 &lt;span&gt;select&lt;/span&gt; name,JS&lt;span&gt;+&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;,Django&lt;span&gt;+&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;,OpenStack&lt;span&gt;+&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 统计每个学生的总分。&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;                 &lt;span&gt;select&lt;/span&gt; name,JS&lt;span&gt;+&lt;/span&gt;Django&lt;span&gt;+&lt;/span&gt;OpenStack &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 使用别名表示学生总分。&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;                 &lt;span&gt;select&lt;/span&gt; name &lt;span&gt;as&lt;/span&gt; 姓名,JS&lt;span&gt;+&lt;/span&gt;Django&lt;span&gt;+&lt;/span&gt;OpenStack &lt;span&gt;as&lt;/span&gt; 总成绩 &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;                 &lt;span&gt;select&lt;/span&gt; name,JS&lt;span&gt;+&lt;/span&gt;Django&lt;span&gt;+&lt;/span&gt;OpenStack 总成绩 &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; 
&lt;span&gt; 55&lt;/span&gt;                 &lt;span&gt;select&lt;/span&gt; name JS &lt;span&gt;from&lt;/span&gt; ExamResult; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; what will happen?----&amp;gt;记得加逗号&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; （3）使用where子句，进行过滤查询。&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 查询姓名为XXX的学生成绩&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; ExamResult &lt;span&gt;where&lt;/span&gt; name&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;yuan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 查询英语成绩大于90分的同学&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;             &lt;span&gt;select&lt;/span&gt; id,name,JS &lt;span&gt;from&lt;/span&gt; ExamResult &lt;span&gt;where&lt;/span&gt; JS&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 查询总分大于200分的所有同学&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;             &lt;span&gt;select&lt;/span&gt; name,JS&lt;span&gt;+&lt;/span&gt;Django&lt;span&gt;+&lt;/span&gt;OpenStack &lt;span&gt;as&lt;/span&gt; 总成绩 &lt;span&gt;from&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;                         ExamResult &lt;span&gt;where&lt;/span&gt; JS&lt;span&gt;+&lt;/span&gt;Django&lt;span&gt;+&lt;/span&gt;OpenStack&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; where字句中可以使用：&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;                      &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 比较运算符：&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;                         &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;&amp;gt;=&lt;/span&gt; &lt;span&gt;&amp;lt;=&lt;/span&gt; &lt;span&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;                         &lt;span&gt;between&lt;/span&gt; &lt;span&gt;80&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt; 值在10到20之间
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;                         &lt;span&gt;in&lt;/span&gt;(&lt;span&gt;80&lt;/span&gt;,&lt;span&gt;90&lt;/span&gt;,&lt;span&gt;100&lt;/span&gt;&lt;span&gt;) 值是10或20或30
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                         &lt;span&gt;like&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;yuan%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;                         &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;                        pattern可以是%或者_，
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;                        如果是%则表示任意多字符，此例如唐僧,唐国强
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;                        如果是_则表示一个字符唐_，只有唐僧符合。两个_则表示两个字符：__
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;                         &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt; 
&lt;span&gt; 78&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 逻辑运算符&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;                         在多个条件直接可以使用逻辑运算符 &lt;span&gt;and&lt;/span&gt; &lt;span&gt;or&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 练习&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 查询JS分数在 70－100之间的同学。&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;                 &lt;span&gt;select&lt;/span&gt; name ,JS &lt;span&gt;from&lt;/span&gt; ExamResult &lt;span&gt;where&lt;/span&gt; JS &lt;span&gt;between&lt;/span&gt; &lt;span&gt;80&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 查询Django分数为75,76,77的同学。&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;                 &lt;span&gt;select&lt;/span&gt; name ,Django &lt;span&gt;from&lt;/span&gt; ExamResult &lt;span&gt;where&lt;/span&gt; Django &lt;span&gt;in&lt;/span&gt; (&lt;span&gt;75&lt;/span&gt;,&lt;span&gt;98&lt;/span&gt;,&lt;span&gt;77&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 查询所有姓王的学生成绩。&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;                 &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; ExamResult &lt;span&gt;where&lt;/span&gt; name &lt;span&gt;like&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;王%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 查询JS分&amp;gt;90，Django分&amp;gt;90的同学。&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;                 &lt;span&gt;select&lt;/span&gt; id,name &lt;span&gt;from&lt;/span&gt; ExamResult &lt;span&gt;where&lt;/span&gt; JS&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;90&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; Django &lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 查找缺考数学的学生的姓名&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;                 &lt;span&gt;select&lt;/span&gt; name &lt;span&gt;from&lt;/span&gt; ExamResult &lt;span&gt;where&lt;/span&gt; &lt;span&gt;Database&lt;/span&gt; &lt;span&gt;is&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt; 
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; （4）Order by 指定排序的列，排序的列即可是表中的列名，也可以是select 语句后指定的别名。&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt; 
&lt;span&gt; 95&lt;/span&gt;               &lt;span&gt;--&lt;/span&gt;&lt;span&gt; select *|field1,field2... from tab_name order by field [Asc|Desc]&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; 
&lt;span&gt; 97&lt;/span&gt;               &lt;span&gt;--&lt;/span&gt;&lt;span&gt; Asc 升序、Desc 降序，其中asc为默认值 ORDER BY 子句应位于SELECT语句的结尾。&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;               &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 练习：&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;               &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 对JS成绩排序后输出。&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;               &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; ExamResult &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt;&lt;span&gt; JS;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;               &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 对总分排序按从高到低的顺序输出&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;               &lt;span&gt;select&lt;/span&gt; name ,(ifnull(JS,&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;ifnull(Django,&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;ifnull(&lt;span&gt;Database&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;                    总成绩 &lt;span&gt;from&lt;/span&gt; ExamResult &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; 总成绩 &lt;span&gt;desc&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;               &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 对姓李的学生成绩排序输出&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;               &lt;span&gt;select&lt;/span&gt; name ,(ifnull(JS,&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;ifnull(Django,&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;ifnull(OpenStack,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;                    总成绩 &lt;span&gt;from&lt;/span&gt; ExamResult &lt;span&gt;where&lt;/span&gt; name &lt;span&gt;like&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;                                          &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; 总成绩 &lt;span&gt;desc&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; 
&lt;span&gt;109&lt;/span&gt; 
&lt;span&gt;110&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; （5）group by 分组查询：&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;         &lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; order_menu(
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;              id &lt;span&gt;INT&lt;/span&gt; &lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; auto_increment,
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;              product_name &lt;span&gt;VARCHAR&lt;/span&gt; (&lt;span&gt;20&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;              price &lt;span&gt;FLOAT&lt;/span&gt;(&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;             born_date DATE,
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;              class &lt;span&gt;VARCHAR&lt;/span&gt; (&lt;span&gt;20&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;                                );
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; 
&lt;span&gt;119&lt;/span&gt; 
&lt;span&gt;120&lt;/span&gt;          &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; order_menu (product_name,price,born_date,class) &lt;span&gt;VALUES&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;                                              (&quot;苹果&quot;,&lt;span&gt;20&lt;/span&gt;,&lt;span&gt;20170612&lt;/span&gt;&lt;span&gt;,&quot;水果&quot;),
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;                                              (&quot;香蕉&quot;,&lt;span&gt;80&lt;/span&gt;,&lt;span&gt;20170602&lt;/span&gt;&lt;span&gt;,&quot;水果&quot;),
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;                                              (&quot;水壶&quot;,&lt;span&gt;120&lt;/span&gt;,&lt;span&gt;20170612&lt;/span&gt;&lt;span&gt;,&quot;电器&quot;),
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;                                              (&quot;被罩&quot;,&lt;span&gt;70&lt;/span&gt;,&lt;span&gt;20170612&lt;/span&gt;&lt;span&gt;,&quot;床上用品&quot;),
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;                                              (&quot;音响&quot;,&lt;span&gt;420&lt;/span&gt;,&lt;span&gt;20170612&lt;/span&gt;&lt;span&gt;,&quot;电器&quot;),
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;                                              (&quot;床单&quot;,&lt;span&gt;55&lt;/span&gt;,&lt;span&gt;20170612&lt;/span&gt;&lt;span&gt;,&quot;床上用品&quot;),
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;                                              (&quot;草莓&quot;,&lt;span&gt;34&lt;/span&gt;,&lt;span&gt;20170612&lt;/span&gt;&lt;span&gt;,&quot;水果&quot;);
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; 
&lt;span&gt;129&lt;/span&gt; 
&lt;span&gt;130&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 注意,按分组条件分组后每一组只会显示第一条记录&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt; 
&lt;span&gt;132&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; group by字句，其后可以接多个列名，也可以跟having子句,对group by 的结果进行筛选。&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt; 
&lt;span&gt;134&lt;/span&gt; 
&lt;span&gt;135&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 按位置字段筛选&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt;                        &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; order_menu &lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; 
&lt;span&gt;138&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 练习：对购物表按类名分组后显示每一组商品的价格总和&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt;                        &lt;span&gt;select&lt;/span&gt; class,&lt;span&gt;SUM&lt;/span&gt;(price)&lt;span&gt;from&lt;/span&gt; order_menu &lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt;&lt;span&gt; class;
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt; 
&lt;span&gt;141&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 练习：对购物表按类名分组后显示每一组商品价格总和超过150的商品&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt;                        &lt;span&gt;select&lt;/span&gt; class,&lt;span&gt;SUM&lt;/span&gt;(price)&lt;span&gt;from&lt;/span&gt; order_menu &lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt;&lt;span&gt; class
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;                                                         &lt;span&gt;HAVING&lt;/span&gt; &lt;span&gt;SUM&lt;/span&gt;(price)&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; 
&lt;span&gt;145&lt;/span&gt; 
&lt;span&gt;146&lt;/span&gt; 
&lt;span&gt;147&lt;/span&gt;                    &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt; &lt;span&gt;                   having 和 where两者都可以对查询结果进行进一步的过滤，差别有：
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;                     &amp;lt;1&amp;gt;where语句只能用在分组之前的筛选，having可以用在分组之后的筛选；
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;                     &amp;lt;2&amp;gt;使用where语句的地方都可以用having进行替换
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;                     &amp;lt;3&amp;gt;having中可以用聚合函数，where中就不行。
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;                    &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;153&lt;/span&gt; 
&lt;span&gt;154&lt;/span&gt; 
&lt;span&gt;155&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; GROUP_CONCAT() 函数&lt;/span&gt;
&lt;span&gt;156&lt;/span&gt;             &lt;span&gt;SELECT&lt;/span&gt; id,GROUP_CONCAT(name),GROUP_CONCAT(JS) &lt;span&gt;from&lt;/span&gt; ExamResult &lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; 
&lt;span&gt;158&lt;/span&gt; 
&lt;span&gt;159&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; （6）聚合函数： 先不要管聚合函数要干嘛，先把要求的内容查出来再包上聚合函数即可。&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt;                  &lt;span&gt;--&lt;/span&gt;&lt;span&gt;   (一般和分组查询配合使用)&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt; 
&lt;span&gt;162&lt;/span&gt;         &lt;span&gt;--&lt;/span&gt;&lt;span&gt;&amp;lt;1&amp;gt; 统计表中所有记录&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt; 
&lt;span&gt;164&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; COUNT(列名)：统计行的个数&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 统计一个班级共有多少学生？先查出所有的学生，再用count包上&lt;/span&gt;
&lt;span&gt;166&lt;/span&gt;                      &lt;span&gt;select&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 统计JS成绩大于70的学生有多少个？&lt;/span&gt;
&lt;span&gt;168&lt;/span&gt;                      &lt;span&gt;select&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;(JS) &lt;span&gt;from&lt;/span&gt; ExamResult &lt;span&gt;where&lt;/span&gt; JS&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 统计总分大于280的人数有多少？&lt;/span&gt;
&lt;span&gt;170&lt;/span&gt;                      &lt;span&gt;select&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;(name) &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;                            &lt;span&gt;where&lt;/span&gt; (ifnull(JS,&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;ifnull(Django,&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;ifnull(OpenStack,&lt;span&gt;0&lt;/span&gt;))&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;280&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 注意:count(*)统计所有行;     count(字段)不统计null值.&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt; 
&lt;span&gt;174&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; SUM(列名)：统计满足条件的行的内容和&lt;/span&gt;
&lt;span&gt;175&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 统计一个班级JS总成绩？先查出所有的JS成绩，再用sum包上&lt;/span&gt;
&lt;span&gt;176&lt;/span&gt;                         &lt;span&gt;select&lt;/span&gt; JS &lt;span&gt;as&lt;/span&gt; JS总成绩 &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;                         &lt;span&gt;select&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(JS) &lt;span&gt;as&lt;/span&gt; JS总成绩 &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 统计一个班级各科分别的总成绩&lt;/span&gt;
&lt;span&gt;179&lt;/span&gt;                         &lt;span&gt;select&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(JS) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; JS总成绩,
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;                                &lt;span&gt;sum&lt;/span&gt;(Django) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; Django总成绩,
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;                                &lt;span&gt;sum&lt;/span&gt;(OpenStack) &lt;span&gt;as&lt;/span&gt; OpenStack &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; 
&lt;span&gt;183&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 统计一个班级各科的成绩总和&lt;/span&gt;
&lt;span&gt;184&lt;/span&gt;                         &lt;span&gt;select&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(ifnull(JS,&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;ifnull(Django,&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;ifnull(&lt;span&gt;Database&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;                                                     &lt;span&gt;as&lt;/span&gt; 总成绩 &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 统计一个班级JS成绩平均分&lt;/span&gt;
&lt;span&gt;187&lt;/span&gt;                         &lt;span&gt;select&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(JS)&lt;span&gt;/&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult ;
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;                     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 注意：sum仅对数值起作用，否则会报错。&lt;/span&gt;
&lt;span&gt;189&lt;/span&gt; 
&lt;span&gt;190&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; AVG(列名)：&lt;/span&gt;
&lt;span&gt;191&lt;/span&gt;                             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 求一个班级JS平均分？先查出所有的JS分，然后用avg包上。&lt;/span&gt;
&lt;span&gt;192&lt;/span&gt;                                 &lt;span&gt;select&lt;/span&gt; &lt;span&gt;avg&lt;/span&gt;(ifnull(JS,&lt;span&gt;0&lt;/span&gt;)) &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt;                             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 求一个班级总分平均分&lt;/span&gt;
&lt;span&gt;194&lt;/span&gt;                                 &lt;span&gt;select&lt;/span&gt; &lt;span&gt;avg&lt;/span&gt;((ifnull(JS,&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;ifnull(Django,&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;ifnull(&lt;span&gt;Database&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt;                                                          &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult ;
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; Max、Min&lt;/span&gt;
&lt;span&gt;197&lt;/span&gt;                             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 求班级最高分和最低分（数值范围在统计中特别有用）&lt;/span&gt;
&lt;span&gt;198&lt;/span&gt;                               &lt;span&gt;select&lt;/span&gt; &lt;span&gt;Max&lt;/span&gt;((ifnull(JS,&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;ifnull(Django,&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;ifnull(OpenStack,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt;                               最高分 &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;                               &lt;span&gt;select&lt;/span&gt; &lt;span&gt;Min&lt;/span&gt;((ifnull(JS,&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;ifnull(Django,&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;ifnull(OpenStack,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt;                               最低分 &lt;span&gt;from&lt;/span&gt;&lt;span&gt; ExamResult;
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt;                             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 求购物表中单价最高的商品名称及价格&lt;/span&gt;
&lt;span&gt;203&lt;/span&gt;                               &lt;span&gt;--&lt;/span&gt;&lt;span&gt;-SELECT id, MAX(price) FROM order_menu;--id和最高价商品是一个商品吗?&lt;/span&gt;
&lt;span&gt;204&lt;/span&gt;                               
&lt;span&gt;205&lt;/span&gt;                               &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;MAX&lt;/span&gt;(price) &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; order_menu; 
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt; 
&lt;span&gt;207&lt;/span&gt;                             &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 注意：null 和所有的数计算都是null，所以需要用ifnull将null转换为0！&lt;/span&gt;
&lt;span&gt;208&lt;/span&gt;                             &lt;span&gt;--&lt;/span&gt;&lt;span&gt;      -----ifnull(JS,0)&lt;/span&gt;
&lt;span&gt;209&lt;/span&gt; 
&lt;span&gt;210&lt;/span&gt; 
&lt;span&gt;211&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; with rollup的使用&lt;/span&gt;
&lt;span&gt;212&lt;/span&gt; 
&lt;span&gt;213&lt;/span&gt;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt;&amp;lt;2&amp;gt; 统计分组后的组记录&lt;/span&gt;
&lt;span&gt;214&lt;/span&gt; 
&lt;span&gt;215&lt;/span&gt; 
&lt;span&gt;216&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; （7） 重点：Select from where group by having order by&lt;/span&gt;
&lt;span&gt;217&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; Mysql在执行sql语句时的执行顺序：&lt;/span&gt;
&lt;span&gt;218&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; from  where  select group by  having order by&lt;/span&gt;
&lt;span&gt;219&lt;/span&gt;                 &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 分析:&lt;/span&gt;
&lt;span&gt;220&lt;/span&gt;                 &lt;span&gt;select&lt;/span&gt; JS &lt;span&gt;as&lt;/span&gt; JS成绩 &lt;span&gt;from&lt;/span&gt; ExamResult &lt;span&gt;where&lt;/span&gt; JS成绩 &lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;; &lt;span&gt;--&lt;/span&gt;&lt;span&gt;-- 不成功&lt;/span&gt;
&lt;span&gt;221&lt;/span&gt;                 &lt;span&gt;select&lt;/span&gt; JS &lt;span&gt;as&lt;/span&gt; JS成绩 &lt;span&gt;from&lt;/span&gt; ExamResult &lt;span&gt;having&lt;/span&gt; JS成绩 &lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;; &lt;span&gt;--&lt;/span&gt;&lt;span&gt;- 成功&lt;/span&gt;
&lt;span&gt;222&lt;/span&gt; 
&lt;span&gt;223&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt;  (8) limit&lt;/span&gt;
&lt;span&gt;224&lt;/span&gt;                 &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; ExamResult limit &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt;                 &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; ExamResult limit &lt;span&gt;2&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;跳过前两条显示接下来的五条纪录&lt;/span&gt;
&lt;span&gt;226&lt;/span&gt;                 &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; ExamResult limit &lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt; 
&lt;span&gt;228&lt;/span&gt; 
&lt;span&gt;229&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt;- (9) 使用正则表达式查询&lt;/span&gt;
&lt;span&gt;230&lt;/span&gt;         &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; employee &lt;span&gt;WHERE&lt;/span&gt; emp_name REGEXP &lt;span&gt;'&lt;/span&gt;&lt;span&gt;^yu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt; 
&lt;span&gt;232&lt;/span&gt;         &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; employee &lt;span&gt;WHERE&lt;/span&gt; emp_name REGEXP &lt;span&gt;'&lt;/span&gt;&lt;span&gt;yun$&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt; 
&lt;span&gt;234&lt;/span&gt;         &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; employee &lt;span&gt;WHERE&lt;/span&gt; emp_name REGEXP &lt;span&gt;'&lt;/span&gt;&lt;span&gt;m{2}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;多表之子查询&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 子查询是将一个查询语句嵌套在另一个查询语句中。&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 内层查询语句的查询结果，可以为外层查询语句提供查询条件。&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 子查询中可以包含：IN、NOT IN、ANY、ALL、EXISTS 和 NOT EXISTS等关键字&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 还可以包含比较运算符：= 、 !=、&amp;gt; 、&amp;lt;等&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 1. 带IN关键字的子查询&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;    &lt;span&gt;--&lt;/span&gt;&lt;span&gt;-查询employee表，但dept_id必须在department表中出现过&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;    &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; employee
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;where&lt;/span&gt; dept_id &lt;span&gt;IN&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             (&lt;span&gt;select&lt;/span&gt; dept_id &lt;span&gt;from&lt;/span&gt;&lt;span&gt; department);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------+----------+------+---------+&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; emp_id &lt;span&gt;|&lt;/span&gt; emp_name &lt;span&gt;|&lt;/span&gt; age  &lt;span&gt;|&lt;/span&gt; dept_id &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------+----------+------+---------+&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;      &lt;span&gt;1&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; A        &lt;span&gt;|&lt;/span&gt;   &lt;span&gt;19&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;200&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;      &lt;span&gt;2&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; B        &lt;span&gt;|&lt;/span&gt;   &lt;span&gt;26&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;201&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;      &lt;span&gt;3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; C        &lt;span&gt;|&lt;/span&gt;   &lt;span&gt;30&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;201&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;      &lt;span&gt;4&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; D        &lt;span&gt;|&lt;/span&gt;   &lt;span&gt;24&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;202&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;      &lt;span&gt;5&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; E        &lt;span&gt;|&lt;/span&gt;   &lt;span&gt;20&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;200&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------+----------+------+---------+&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.01&lt;/span&gt;&lt;span&gt; sec)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 2. 带比较运算符的子查询&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;       &lt;span&gt;--&lt;/span&gt;&lt;span&gt;      =、!=、&amp;gt;、&amp;gt;=、&amp;lt;、&amp;lt;=、&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;      &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 查询员工年龄大于等于25岁的部门&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;      &lt;span&gt;select&lt;/span&gt; dept_id,dept_name &lt;span&gt;from&lt;/span&gt;&lt;span&gt; department
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;            &lt;span&gt;where&lt;/span&gt; dept_id &lt;span&gt;IN&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;           (&lt;span&gt;select&lt;/span&gt; &lt;span&gt;DISTINCT&lt;/span&gt; dept_id &lt;span&gt;from&lt;/span&gt; employee &lt;span&gt;where&lt;/span&gt; age&lt;span&gt;&amp;gt;=&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 3. 带EXISTS关键字的子查询&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; EXISTS关字键字表示存在。在使用EXISTS关键字时，内层查询语句不返回查询的记录。&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 而是返回一个真假值。Ture或False&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 当返回Ture时，外层查询语句将进行查询；当返回值为False时，外层查询语句不进行查询&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;      &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; employee
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;               &lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;               (&lt;span&gt;SELECT&lt;/span&gt; dept_name &lt;span&gt;from&lt;/span&gt; department &lt;span&gt;where&lt;/span&gt; dept_id&lt;span&gt;=&lt;/span&gt;&lt;span&gt;203&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;       &lt;span&gt;--&lt;/span&gt;&lt;span&gt;department表中存在dept_id=203，Ture&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;      &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; employee
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                 &lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;               (&lt;span&gt;SELECT&lt;/span&gt; dept_name &lt;span&gt;from&lt;/span&gt; department &lt;span&gt;where&lt;/span&gt; dept_id&lt;span&gt;=&lt;/span&gt;&lt;span&gt;205&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt;      &lt;span&gt;--&lt;/span&gt;&lt;span&gt; Empty set (0.00 sec)&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt; 
&lt;span&gt;57&lt;/span&gt;     ps:  &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; t1(&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; t2);
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 07 Mar 2019 15:52:00 +0000</pubDate>
<dc:creator>陈彦斌</dc:creator>
<og:description>安装 百度云盘地址：https://pan.baidu.com/s/1vqkEImBueHIimPiNPRcV2Q 提取码：xyy1 详细安装步骤地址：https://www.cnblogs.com/</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenyanbin/p/10493432.html</dc:identifier>
</item>
<item>
<title>git 简单操作教程 - 奔驰的码儿</title>
<link>http://www.cnblogs.com/jspang/p/10493419.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jspang/p/10493419.html</guid>
<description>&lt;p&gt;第一章&lt;/p&gt;
&lt;p&gt;　　初始化一个Git仓库，使用&lt;code&gt;git init&lt;/code&gt;命令。&lt;/p&gt;
&lt;p&gt;　　添加文件到Git仓库，分两步：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;使用命令&lt;code&gt;git add &amp;lt;file&amp;gt;&lt;/code&gt;，注意，可反复多次使用，添加多个文件；&lt;/li&gt;
&lt;li&gt;使用命令&lt;code&gt;git commit -m &amp;lt;message&amp;gt;&lt;/code&gt;，完成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;命令可以让我们时刻掌握仓库当前的状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff&lt;/code&gt;顾名思义就是查看difference，显示的格式正是Unix通用的diff格式&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;第二章&lt;/p&gt;
&lt;p&gt;第三章&lt;/p&gt;
&lt;p&gt;&lt;code&gt;　　git log&lt;/code&gt;命令显示从最近到最远的提交日志，&lt;/p&gt;
&lt;p&gt;　　如果嫌输出信息太多，看得眼花缭乱的，可以试试加上&lt;code&gt;--pretty=oneline&lt;/code&gt;参数：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;variable&quot;&gt;　　$ git log --pretty=oneline&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt;指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令&lt;code&gt;git reset --hard commit_id&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;穿梭前，用&lt;code&gt;git log&lt;/code&gt;可以查看提交历史，以便确定要回退到哪个版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;要重返未来，用&lt;code&gt;git reflog&lt;/code&gt;查看命令历史，以便确定要回到未来的哪个版本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　更新中！！！！&lt;/p&gt;

</description>
<pubDate>Thu, 07 Mar 2019 15:49:00 +0000</pubDate>
<dc:creator>奔驰的码儿</dc:creator>
<og:description>第一章 初始化一个Git仓库，使用git init命令。 添加文件到Git仓库，分两步： 第二章 要随时掌握工作区的状态，使用git status命令。 如果git status告诉你有文件被修改过，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jspang/p/10493419.html</dc:identifier>
</item>
<item>
<title>我们为什么要搞长沙.NET技术社区（4） - 溪源More</title>
<link>http://www.cnblogs.com/xiyuanMore/p/10493331.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiyuanMore/p/10493331.html</guid>
<description>&lt;p align=&quot;right&quot;&gt;邹溪源，2019年3月7日&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;Ps:文中的.NET 包括且不限定于传统.NET Framework技术和.NET Core技术。&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;1.    楔子&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;　&lt;span&gt;　昨天（2019年3月6日）晚餐时间，有幸得到长沙技术圈资深.NET开发者出生的企业家、湖南华邦互联有限公司董事长赵总的赞助，同时他也亲自从河东过来，对我们的社区建设提供支持和鼓励，让我们了解到我们未来可以奋斗的方向，也体会到自己的责任和不足，相信有了赵总以及以赵总为代表的长沙IT企业家们的大力支持，我们的社区将迎来新的发展契机。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;2.        2019年，DotNET转折之年&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;　　2019年的今天，对.NET技术而言，是一个充满了挑战和机遇的新的时代。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　曾经，这是个最好的时代。不到20年前今天，微软推出.NET技术，席卷全球，在信息化转型升级过程中，实现了大跨越式的发展，.NET的春风吹遍大江南北，激励了包括著名MVP汪宇杰等在内的无数开发者，加入行列之中，为了实现自己的梦想而奋斗。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　今天，这是个最差的时代。信息化时代的辉煌，在十年前开始逐渐没落，随着互联网和移动互联网两波浪潮的兴起，让故步自封的.NET技术以及使用.NET技术构建的应用逐渐成为遗留应用，更让那些坚守.NET技术的企业成为了封闭的象征。尤其是随着大中专院校和培训机构不再开设.NET课程，更是让市场面临釜底抽薪青黄不接的窘迫，也有不少企业面临了生存的困难。不少企业为了减少招人难造成的损失，不得不转到其他语言，让.NET技术体系遭遇了雪上加霜。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　对于.NET而已，难道还有比现在更加悲惨的时代吗？&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　然而，危机向来与机遇并存，只有真正的勇敢者，才敢于在风口浪尖中保持冷静。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　或许大家有许多人依然记得几年前的故事，一场3Q大战，两家优秀的互联网企业互相撕逼，上演了一出绝无仅有的闹剧，并最终以被工信部各打三十大板收场。当时，对于腾讯来说，大概是最难受的时候了吧？然而，腾讯化危机为机遇，用更加开放的态度去对待他的用户和市场，也让其成为中国互联网市场的一座顶梁支柱。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　对于.NET开发者来说，我们现在就是面临的，正是这样的机遇。2019年对于.NET来说，更是一个非常重要的转折之年，如果说过去若干年，大家以为付出全靠微软，那么大家此刻应该明白，是微软+企业+所有开发者的力量，共同成就了今天的.NET，三者每一环都同样重要，都缺一不可。&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;3.    我们想做什么&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;那么多宏大的商界故事，或许远非我们所能掌控，而此刻的我们，能掌控的，大概只有我们自己。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　或许我们曾经想过去改变世界的一万种办法，但是那些宏大的目标，只会让我们觉得自己更加卑微且疲惫。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　作为草根出生的我们，看似只是历史蓝图中的微不足道，却依然是自己的主人。借助互联网为媒介，以互联网之精神，可以让我们更加珍惜此刻的不容易，也让我们有办法去影响自己的周围，并或许最终有办法改变世界，那就是我们应该做的是那些我们愿意做、且最擅长做的事情。例如，写代码，并写更加优雅的代码等等，这些也许看似微小的事情，让我们成长至今，并受益颇多。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　例如，多写一些博客并坚持写博客，实现自己技术沉淀的同时，也能为他人提供帮助。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　例如，多参与开源项目，做一些大家需要的好轮子，也可以提高自己对于技能的领悟能力。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　例如，翻译书籍，甚至出版书籍，既是对自己的工作经验的归纳总结，更是为后人留下宝贵的财富。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　例如，多参与社区活动，并为大家积极分享你遇到的问题和解决问题的思路，看起来简单，却非常有价值的分享，往往会给大家打开了新的窗口。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　诸如此类，我们可以做的事情很多很多。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　历史之车轮滚滚向前，互联网的价值理念已经深入人心，我们都是一群有梦想的年轻人，不管生活多么困难，都改变不了我们对于梦想的追求。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;strong&gt;　　我们每个人渴望创造价值，我们都渴望创造每个人自己的品牌。这就是我们社区的期待。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;4.    三个问题&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;我们为什么选择IT？我们未来可以干什么？我们现在该怎么做？&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　当敲下这个系列文章的第一篇第一个字的时候，我就在思考这三个问题。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　我们为什么选择IT，有人为的是自己的梦想，更多的人是为了让改变自己的生活。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　难道有一天，脱离了这个行业，我们还有其他更多选择的余地么？&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　在这个浮躁的时代，我们曾经或许想过干到35岁就不再干IT，去找一个别的工作干一干，然而，这显然是不太现实的。在互联网时代岗位逐渐细分的今天，我们其实已经如同我们的父辈们一般，在IT这个新兴产业中成为了一颗颗螺丝钉。而且我相信我们的未来若干年都将围绕IT而生存。IT首先改变了我们的生活方式，其次改变了我们的一生。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　我们认为，既然选择了她，就应该把她当作终身事业去奋斗。不管我们以前做过什么，我们都可以去尝试改变自己的生活方式。&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;5.    那些我们认为的关键&lt;/h2&gt;
&lt;h3&gt;1)     贵在坚持&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;前几天跟长沙互联网社区领袖唐胡子交流，他说做一个社区不难，最难的是坚持。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　在中国，最常见的一些活动，都是运动式的活动。例如，三月份的学习雷锋日，有一种说法是，“雷锋叔叔没户口，三月来了四月走”，讽刺的就是这种热了几天就没有的活动。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　作为一个由草根自发组成而来的小社区，如何让参与者都能获得收获，发展壮大，并持之以恒，是最困难也最有价值的事情。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;2)   贵在团结一致&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;打造一个开放的技术社区，不局限于一家公司，一种语言，一种业务形态，用开放的心态去包容和团结一切可以团结的人，所有的开发者，或者其他从业人员。每个人都可以成为社区的参与者，并作出贡献。大家齐心协力，总有办法改变小气候，进而影响大环境。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3)   贵在有产出&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;如果只是单纯的拉人做活动，固然维系了线下的关系，但是却容易进入交际疲劳，往往活动的参与者只能是那几个爱好者。我们认为这样的社区，并没有太多意义。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;strong&gt;　　关键依然是要有产出，要有持续的产出。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　例如，一年产生了很多位MVP，多出了许多位出教程的开发者，做出了许多超过百星乃至千星的开源组件或产品，那么这个社区的影响力将无与伦比。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　如果是三年内，出版了三本书？那更是无比的荣耀了。&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;6.    展望&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;在中部崛起的大战略方针中，长沙是产业互联网的先锋力量，而长沙本土数以百计的IT企业，正有望成为时代的焦点，而作为企业重要参与者和创造力来源的开发者们，你们正是这个时代最为重要的弄潮儿，让我们一起努力共建和谐美好开放共赢的互联网时代新型技术社区，一起去迎接未来美好的朝阳。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　我们要做社区，不是喊口号，不是做文案，最终能否成功，依然取决于此刻做决定的每一位开发者和以及你心中的执着追求。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　社区，不能是几位理想主义者们闭门造车的独嗨，而是大家齐心参与的快乐。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　加油吧，新时代的健儿们！&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;7.    社区现在在做什么&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;我们计划本周日（2019年3月10日）举办第一次技术交流活动，之后将开始筹备四月份的开幕仪式大会，除此之外还有一系列社区活动和兴趣小组，我们将需要每一位优秀开发者的积极参与，只有大家都来参与，这样的社区，才能称为真正的社区。&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;8.    《互联网时代的弄潮儿》&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;也许你没听到，&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;或者你没看到。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;或许你甚至没感觉到。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;但是她已经来了。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;如同一道洒满大地清晨的曙光。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;又如一缕吹彻云霄清风。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;也许，她只是一位匆匆而来的访客。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;从九十年代，跨越20年。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;从泡沫，到泡沫。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;也许曾经非常熟稔，&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;从四十年代，启蒙之光埃尼阿克的诞生。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;到引领时代的浪潮。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;她终于成为时代的宠儿。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;每一次呼唤。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;都带来一阵脉动。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;每一次震颤。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;都带来一场革命。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;从电商平台而始。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;到金融领域而始。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;到物流行业。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;到零售行业。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;都以为她将烟消云散。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;如20年前一般。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;匆匆而来，似水中泡沫。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;然而，她将永久屹立不倒。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;大势，如滔滔江水。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;逆流者将一无所有。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;她才是时代的脉搏。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;互联网滚滚浪潮。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;奔流不息。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;看时代的弄潮儿，&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt; 迎难而上。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;看这苍茫之大地，&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;谁主沉浮！！！&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;作者溪源，本诗最早载于湖南银河电气内刊《思索》杂志。&lt;/strong&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　关注公众号【MoreDotNetCore】了解更多社区资讯，查看社区活动详情，请查看&lt;a href=&quot;https://github.com/china-net-community/changsha-community-huodong&quot;&gt;https://github.com/china-net-community/changsha-community-huodong&lt;/a&gt;。&lt;/p&gt;
</description>
<pubDate>Thu, 07 Mar 2019 15:29:00 +0000</pubDate>
<dc:creator>溪源More</dc:creator>
<og:description>我们为什么要搞长沙.NET技术社区（4） 邹溪源，2019年3月7日 Ps:文中的.NET 包括且不限定于传统.NET Framework技术和.NET Core技术。 1. 楔子 昨天（2019年3</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiyuanMore/p/10493331.html</dc:identifier>
</item>
<item>
<title>进阶篇 第6章 函数 - 牧牛人</title>
<link>http://www.cnblogs.com/ooo888ooo/p/10360650.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ooo888ooo/p/10360650.html</guid>
<description>&lt;h2&gt; 6.1函数的创建和调用&lt;/h2&gt;
&lt;p&gt;提到函数，大家会想到数学函数吧，函数是数学最重要的一个模块，贯穿整个数学学习过程。在Python中，函数的应用非常广泛。在前面我们已经多次接触过函数。例如，用于输出的print() 函数、用于输出的input() 函数及用于生成一系列整数的range() 函数，这些都是Python内置的标志函数，可以直接使用。除了可以直接使用的标准函数外，Python还支持自定义函数。即通过将一段有规律的，重复的代码定义为函数，来达到一次编写、多次调用的目的。使用函数可以提高代码的重复利用率。&lt;/p&gt;
&lt;h3&gt;6.1.1 创建一个函数&lt;/h3&gt;
&lt;p&gt; 创建函数也称为定义函数，可以理解为创建一个具有某种用途的工具。使用def 关键字实现，具体的语法格式如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; functionname([parameterlist]):
    [&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;comments&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;]
    [functionbody]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;functionname：函数名称，在调用函数时使用。&lt;/li&gt;
&lt;li&gt;parameterlist：可选参数，用于指定向函数中传递的参数。如果有多个参数，各参数间使用逗号“,”分隔。如果不指定，则表示该函数没有参数，在调用时也不指定参数。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意：即使函数没有参数，也必须保留一对空的“()”，否则将显示下图所示错误提示对话框。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1372012/201902/1372012-20190227231320358-475042014.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;语法错误对话框&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;'''comments'''：可选参数，表示为函数指定注释，注释的内容通常是说明该函数的功能、要传递的参数的作用等，可以为用户提供友好提示和帮助的内容。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;说明：……&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;functionbody：可选参数，用于指定函数体，即该函数被调用后，要执行的功能代码。如果函数有返回值，可以使用return语句返回。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意：函数体“functionbody”和注释“'''comments'''”相对于def关键字必须保持一定的缩进。&lt;/p&gt;
&lt;p&gt;说明：如果想定义一个什么也不做的空函数，可以使用pass语句作为占位符。&lt;/p&gt;
&lt;p&gt;例如，定义一个过滤危险函数filterchar()，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; filterchar(string):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;功能：过滤危险字符（如黑客），并将过滤后的结果输出
    about：要过滤的字符串
    没有返回值
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;import&lt;/span&gt; re                               &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 导入Python的re模块&lt;/span&gt;
    pattern = r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(黑客)|(抓包)|(监听)|(Trojan)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 模式字符串&lt;/span&gt;
    sub = re.sub(pattern,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@_@&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,string)          &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 进行模式替换&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(sub)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行上面的代码，将不显示任何内容，也不会抛出异常，因为filterchar() 函数还没有被调用。&lt;/p&gt;
&lt;h3&gt;6.1.2 调用函数&lt;/h3&gt;
&lt;p&gt;调用函数也就是执行函数。如果把创建的函数理解为创建一个具有某种用途的工具，那么调用函数就相当于使用该工具。调用函数的基本语法格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
functionname([parametersvalue])
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;functionname：函数名称，要调用的函数名称必须是已经创建好的。&lt;/li&gt;
&lt;li&gt;parametersvalue：可选参数，用于指定各个参数的值。如果需要传递多个参数值，则各个参数间使用逗号“,” 分隔。如果该函数没有参数，则直接写一对小括号即可。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如，调用在6.1.1 小节创建的filterchar() 函数，可以使用下面的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;p&gt;def filterchar(string):&lt;br/&gt;'''功能：过滤危险字符（如黑客），并将过滤后的结果输出&lt;br/&gt;about：要过滤的字符串&lt;br/&gt;没有返回值&lt;br/&gt;'''&lt;br/&gt;import re # 导入Python的re模块&lt;br/&gt;pattern = r'(黑客)|(抓包)|(监听)|(Trojan)' # 模式字符串&lt;br/&gt;sub = re.sub(pattern,'@_@',string) # 进行模式替换&lt;br/&gt;print(sub)&lt;br/&gt;about = '我是一名程序员，喜欢看黑客方面的图书，想研究一个Trojan。'&lt;br/&gt;filterchar(about)&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;调用filterchar() 函数后，将显示如下结果。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
我是一名程序员，喜欢看@_@方面的图书，想研究一个@_@。
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;场景模拟：第4章的实例01实现了每日一贴功能，但是这段代码只能执行一次，如果想要再次输出，还需要再重新写一遍。如果把这段代码定义为一个函数，那么就可以多次显示每日一贴了。&lt;/p&gt;
&lt;p&gt;实例01：输出每日一贴（共享版）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function_tips():
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;功能：每天输出一条励志文字
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;import&lt;/span&gt; datetime                                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 导入日期时间类&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 定义一个列表&lt;/span&gt;
    mot = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天星期一:\n人生充满了不确定，和惊喜。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天星期二:\n人生亦可燃烧，亦可腐败，我愿燃烧，耗尽所有的光芒。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天星期三:\n毅力和耐性在某种程度上将决定一个人会成为什么样的人。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天星期四:\n微笑拥抱每一天，做像向日葵般温暖的女子。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天星期五:\n志在峰巅的攀登者，不会陶醉在沿途的某个脚印之中。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天星期六:\n别小看任何人，越不起眼的人。往往会做些让人想不到的事。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;今天星期日:\n我们可以失望，但不能盲目。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
    day &lt;/span&gt;= datetime.datetime.now().weekday()         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取当期星期&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(mot[day])                                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 输出每日一贴&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;*******************调用函数************************#&lt;/span&gt;
function_tips()          &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调用函数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;今天星期六:
别小看任何人，越不起眼的人。往往会做些让人想不到的事。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;6.2 参数传递&lt;/h2&gt;
&lt;p&gt;在调用函数时，大多数情况下，主要函数和被调用函数之间有数据传递关系，这就是有参数的函数形式。函数参数的作用是传递数据给函数使用，函数利用接收的数据进行具体的操作处理。&lt;/p&gt;
&lt;p&gt;函数参数在定义函数时放在函数名称的后面的一对小括号中。&lt;/p&gt;
&lt;h3&gt;6.2.1 了解形式参数和实际参数&lt;/h3&gt;
&lt;p&gt;在使用函数时，经常会用到形式参数和实际参数，二者都叫作参数，它们的区别将通过形式参数与实际参数的作用来进行讲解，再通过一个比喻和实例进行深入探讨。&lt;/p&gt;
&lt;h4&gt;1.通过作用理解&lt;/h4&gt;
&lt;p&gt;形式参数和实际参数在作用上的区别如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;形式参数：在定义函数时，函数名后面括号中的参数为“形式参数”。&lt;/li&gt;
&lt;li&gt;实际参数：在调用一个函数时，函数名后面括号中的参数为“实际参数”，也就是将函数的调用者提供给函数的参数称为实际参数。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;根据实际参数的类型不同，可以分为将实际参数的值传递给形式参数和将实际参数的引用传递给形式参数两种情况。其中，当实际参数为不可变对象时，进行值传递；当实际参数为可变对象时，进行的是引用传递。实际上，值传递和引用传递的基本区别就是，进行值传递后，改变形式参数的值，实际参数的值不变；而进行引用传递后，改变形式参数的值，实际参数的值也一同改变。&lt;/p&gt;
&lt;p&gt;例如，定义一个名称为demo 的函数，然后为demo() 函数传递一个字符串类型的变量作为参数（代表值传递），并在函数调用前后分别输出该字符串变量，再为demo() 函数传递以下列表类型的变量作为参数（代表引用传递），并在函数调用前后分别输出该列表。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 定义函数&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; demo(obj):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;原值:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,obj)
    obj &lt;/span&gt;+=&lt;span&gt; obj
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调用函数&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;==========值传递==========&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
mot &lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;唯有在被追赶的时候，你才能真正地奔跑。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;函数调用后：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,mot)
demo(mot)                           &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 采用不可变对象——字符串&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;函数调用后:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,mot)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;==========引用传递===========&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
list1 &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;李白&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;杜甫&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;白居易&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;李清照&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;函数调用前:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,list1)
demo(list1)                         &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 采用可变对象——列表&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;函数调用后:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,list1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面代码的执行结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
==========值传递==========&lt;span&gt;
函数调用后： 唯有在被追赶的时候，你才能真正地奔跑。
原值: 唯有在被追赶的时候，你才能真正地奔跑。
函数调用后: 唯有在被追赶的时候，你才能真正地奔跑。
&lt;/span&gt;==========引用传递===========&lt;span&gt;
函数调用前: [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;李白&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;杜甫&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;白居易&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;李清照&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
原值: [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;李白&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;杜甫&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;白居易&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;李清照&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
函数调用后: [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;李白&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;杜甫&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;白居易&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;李清照&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;李白&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;杜甫&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;白居易&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;李清照&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;从上面的执行结果中可以看出，在进行值传递时，改变形式参数的值后，实际参数的值不改变；在进行引用传递时，改变形式参数的值后，实际参数的值也发生改变。&lt;/p&gt;
&lt;h4&gt; 2. 通过一个比喻来理解形式参数和实际参数&lt;/h4&gt;
&lt;p&gt;函数定义时参数列表中的参数就是形式参数，而函数调用时传递进来的参数就是实际参数。就像剧本选主角一样，剧本的角色相当于形式参数，而演角色的演员就相当于实际参数。&lt;/p&gt;
&lt;p&gt;实例02：根据身高、体重计算BMI 指数（共享版）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; fun_bmi(person,height,weight):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;功能：根据身高和体重计算BMI指数
        person：姓名
        height：身高，单位：米
        weight：体重，单位：千克
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
                     
    &lt;span&gt;print&lt;/span&gt;(person + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;的身高:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(height) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;米\t体重:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(weight) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;千克&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    bmi&lt;/span&gt;=weight/(height*height)                  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用于计算BMI指数，公式为：BMI=体重/身高的平方&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(person + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;的BMI指数为:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+str(bmi))     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 输出BMI指数&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断身材是否合理&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; bmi&amp;lt;18.5&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您的BMI指数为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+str(bmi))       &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 输出BMI指数&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;体重过轻 ～@_@～&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; bmi&amp;gt;=18.5 &lt;span&gt;and&lt;/span&gt; bmi&amp;lt;24.9&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您的BMI指数为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+str(bmi))       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出BMI指数&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正常范围，注意保持(－＿－)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; bmi&amp;gt;=24.9 &lt;span&gt;and&lt;/span&gt; bmi&amp;lt;29.9&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您的BMI指数为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+str(bmi))       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出BMI指数&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;体重过重 ～@＿@～&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; bmi&amp;gt;=29.9&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您的BMI指数为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+str(bmi))       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出BMI指数&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;肥胖^@＿@^&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; **********************************调用函数************************************* #&lt;/span&gt;
fun_bmi(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;路人甲&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,1.83,60)                       &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算路人甲的BMI指数&lt;/span&gt;
fun_bmi(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;路人乙&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,1.60,50)                       &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算路人乙的BMI指数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果如下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
路人甲的身高:1&lt;span&gt;.83米    体重:60千克
路人甲的BMI指数为:&lt;/span&gt;17.916330735465376&lt;span&gt;
您的BMI指数为：&lt;/span&gt;17.916330735465376&lt;span&gt;
体重过轻 ～@_@～
路人乙的身高:&lt;/span&gt;1&lt;span&gt;.6米    体重:50千克
路人乙的BMI指数为:&lt;/span&gt;19.531249999999996&lt;span&gt;
您的BMI指数为：&lt;/span&gt;19.531249999999996&lt;span&gt;
正常范围，注意保持(－＿－)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;从该实例代码和运行结果可以看出：&lt;/p&gt;
&lt;p&gt;（1）定义一个根据身高、体重计算BMI指数的函数fun_bmi()，在定义函数时指定的变量person、height和weight称为形式参数。&lt;/p&gt;
&lt;p&gt;（2）在函数fun_bmi()中根据形式参数的值计算BMI指数，并输出相应的信息。&lt;/p&gt;
&lt;p&gt;（3）在调用fun_bmi()函数时，指定的“路人甲”、1.83和60等都是实际参数，在函数执行时，这些值将被传递给对应的形式参数。&lt;/p&gt;
&lt;h3&gt;6.2.2 位置参数&lt;/h3&gt;
&lt;p&gt;位置参数也称必备参数，是必须按照正确的顺序传到函数中，即调用时的数量和位置必须和定义时是一样的。&lt;/p&gt;
&lt;h4&gt;1. 数量必须与定义时一致&lt;/h4&gt;
&lt;p&gt;在调用函数时，指定的实际参数的数量必须与形式参数的数量一致，否则将抛出TypeError异常，提示缺少必要的位置参数。&lt;/p&gt;
&lt;h4&gt;2. 位置必须与定义时一致&lt;/h4&gt;
&lt;p&gt;在调用函数时，指定的实际参数的位置必须与形式参数的位置一致，否则将产生以下两种结果。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;抛出TypeError异常&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;抛出异常的情况主要是因为实际参数的类型与形式参数的类型不一致，并且在函数中，这两种类型还不能正常转换。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;产生的结果与预期不符&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在调用函数时，如果指定的实际参数与形式参数的位置不一致，但是它们的数据类型一致，那么就不会抛出异常，而是产生结果与预期不符的问题。&lt;/p&gt;
&lt;p&gt;说明：由于调用函数时，传递的实际参数的位置与形式参数的位置不一致时，并不会总是抛出异常，所以在调用函数时一定要确定好位置，否则产生Bug，还不容易被发现。&lt;/p&gt;
&lt;h3&gt;6.2.3 关键字参数&lt;/h3&gt;
&lt;p&gt;关键字参数是指使用形式参数的名字来确定输入的参数值。通过该方式指定实际参数时，不再需要与形式参数的位置完全一致。只要将参数名字写正确即可。这样可以避免用户需要牢记的参数位置的麻烦，适当函数的调用和参数传递更急灵活方便。&lt;/p&gt;
&lt;h3&gt;6.2.4 为参数设置默认值&lt;/h3&gt;
&lt;p&gt;调用函数时，如果没有指定某个参数将抛出异常，为了解决这个问题，我们可以为参数设置默认值，即在定义函数时，直接指定形式参数的默认值。这样，当没有传入参数时，则直接使用定义函数时设置的默认值。定义带有默认值参数的函数的语法格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt; functionname(...,[parameter1 =&lt;span&gt; defaultvalue1]):
    [functionbody]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;functionname：函数名称，在调用函数时使用。&lt;/li&gt;
&lt;li&gt;parameter = defaultvalue1：可选参数，用于指定向函数中传递的参数，并且为该参数设置默认值为defaultvalue1。&lt;/li&gt;
&lt;li&gt;functionbody：可选参数，用于指定函数体，即该函数被调用后，要执行的功能代码。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意：在定义函数时，指定默认的形式参数必须在所有参数的最后，否则将产生语法错误。&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h3&gt;6.2.5 可变参数&lt;/h3&gt;
&lt;p&gt; 在Python中，还可以定义可变参数。可变参数也称不定长参数，即传入函数中的实际参数可以是任意多个。&lt;/p&gt;
&lt;p&gt;定义可变参数时，主要有两种形式：一种是*parameter，另一种是**parameter。&lt;/p&gt;
&lt;h4&gt;1. *parameter&lt;/h4&gt;
&lt;p&gt;这种形式表示接收任意多个实际参数并将其放到一个元组中。例如，定义一个函数，让其可以接收任意多个实际参数，代码如下：&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h4&gt;2. **parameter&lt;/h4&gt;
&lt;p&gt;这种形式表示接收任意多个类似关键参数一样显示赋值的实际参数，并将其放到一个字典中。例如，定义一个函数，让其可以接收任意多个显示赋值的实际参数，代码如下：&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h2&gt;6.3 返回值&lt;/h2&gt;
&lt;p&gt;到目前为止，我们创建的函数都只是为我们做一些事，做完了就结束。但实际上，有时还需要对事情的结果进行获取。这类似于主管向下级职员下达命令，职员去做，最后需要将结果报告给主管。为函数设置返回值的作用就是将函数的处理结果返回给调用它的程序。&lt;/p&gt;
&lt;p&gt;在Python中，可以在函数体内使用return语句为函数指定返回值，该返回值可以是任意类型，并且无论return语句出现在函数的什么位置，只要得到执行，就会直接结束函数的执行。&lt;/p&gt;
&lt;p&gt;return语句的语法格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt; [value]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;value：可选参数，用于指定要返回的值，可以返回一个值，也可以返回多个值。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;为函数指定返回值后，在掉用函数时，可以把它赋给一个变量（如result），用于保存函数的返回结果。如果返回一个值，那么result中保存的就是返回的一个值，该值可以为任意类型。如果返回多个值，那么result 中保存的是一个元组。&lt;/p&gt;
&lt;p&gt;说明：当函数中没有return 语句时，或者省略了return 语句的参数时，将返回None，即返回空值。&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h2&gt;6.4 变量的作用域&lt;/h2&gt;
&lt;p&gt;变量的作用域是指程序代码能够访问该变量的区域，如果超出该区域，在访问时就会出现错误。在程序中，一般会根据变量的“有效范围”将变量分为“全局变量”和“局部变量”。&lt;/p&gt;
&lt;h3&gt;6.4.1 局部变量&lt;/h3&gt;
&lt;p&gt;局部变量是指在函数内部定义并使用的变量，它只在函数内部有效。即函数内部的名字只在函数运行时才会创建，在函数运行之前或者运行完毕之后，所有的名字就都不存在了。所以，如果在函数外部用函数内部定义的变量，就会出现抛出NameError异常。&lt;/p&gt;
&lt;h3&gt;6.4.2 全局变量&lt;/h3&gt;
&lt;p&gt;与局部变量对应，全局变量为能过作用于函数内外的变量。全局变量主要有以下两种情况：&lt;/p&gt;
&lt;p&gt;（1）如果一个变量，在函数外定义，那么不仅在函数外可以访问函数，在该函数内输出全局变量message 的值，代码如下：&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;说明：当局部变量与全局变量重名时，对函数体的变量进行赋值后，不影响函数体外的变量。&lt;/p&gt;
&lt;p&gt;（2）在函数体内定义，并且使用global关键字修饰后，该变量也就变为全局变量。在函数体外也可以访问到该变量，并且在函数体内还可以对其进行修改。&lt;/p&gt;
&lt;p&gt;注意：尽管Python允许全局变量和局部变量重名，但是在实际开发时，不建议这么做，因为这样容易让代码乱，很难分清哪些是全局变量，哪些是局部变量。&lt;/p&gt;
&lt;h2&gt;6.5 匿名函数（lambda）&lt;/h2&gt;
&lt;p&gt;匿名函数是指没有名字的函数，应用在需要一个函数，但是有不想费神去命名这个函数的场合。通常情况下，这样的函数只有使用一次。在Python中，使用lambda表达式创建匿名函数，其语法格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
result = &lt;span&gt;lambda&lt;/span&gt; [arg1 [,arg2,......,argn]]:expression
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;result：用于调用lambda表达式。&lt;/li&gt;
&lt;li&gt;[arg1[,arg2,......,argn]]：可选参数，用于指定传递的参数列表，多个参数间使用逗号“，”分隔。&lt;/li&gt;
&lt;li&gt;expression：必选参数，用于指定一个实现具体功能的表达式。如果有参数，那么在该表达式中将应用这些参数。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意：使用lambda表达式时，参数可以有多个，用逗号“，”分隔，但是表达式只能有一个，即只能返回一个值。而且也不能出现其他非表达式语句（如for 或 while）。&lt;/p&gt;

</description>
<pubDate>Thu, 07 Mar 2019 15:07:00 +0000</pubDate>
<dc:creator>牧牛人</dc:creator>
<og:description>第6章 函数 6.1函数的创建和调用 提到函数，大家会想到数学函数吧，函数是数学最重要的一个模块，贯穿整个数学学习过程。在Python中，函数的应用非常广泛。在前面我们已经多次接触过函数。例如，用于输</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ooo888ooo/p/10360650.html</dc:identifier>
</item>
<item>
<title>Iterator和Enumeration的区别 - 丘壑山河</title>
<link>http://www.cnblogs.com/xyfer1018/p/10493244.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xyfer1018/p/10493244.html</guid>
<description>&lt;p&gt;本文介绍一下Iterator和Enumeration的区别及其效率&lt;/p&gt;
&lt;p&gt;Iterator是一个接口，它的源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; java.util;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.function.Consumer;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; Iterator&amp;lt;E&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回迭代器刚越过的元素的引用，返回值是Object，需要强制转换成自己需要的类型&lt;/span&gt;
    &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasNext();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断容器内是否还有可供访问的元素,返回值是E&lt;/span&gt;
&lt;span&gt;    E next();
　 　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除迭代器刚越过的元素&lt;/span&gt;
    &lt;span&gt;default&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; remove() {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnsupportedOperationException(&quot;remove&quot;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; forEachRemaining(Consumer&amp;lt;? &lt;span&gt;super&lt;/span&gt; E&amp;gt;&lt;span&gt; action) {
        Objects.requireNonNull(action);
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (hasNext())
            action.accept(next());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enumeration也是一个接口，它的源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; java.util;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; Enumeration&amp;lt;E&amp;gt;&lt;span&gt; {
    
    &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasMoreElements();

    E nextElement();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从源码可以看出，Iterator除了能读取集合的数据之外，也能数据进行删除操作；而Enumeration只能读取集合的数据，而不能对数据进行修改。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Iterator支持fail-fast机制，而Enumeration不支持fail-fast机制。Enumeration 是JDK 1.0添加的接口。使用到它的函数包括Vector、Hashtable等类，这些类都是JDK 1.0中加入的。Iterator是JDK1.2添加的接口，Iterator是基于Enumeration实现的，同时Iterator支持fail-fast机制，所以Iterator遍历集合时会比Enumeration遍历集合慢一些。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;使用一个Hashtable集合，然后分别通过 Iterator 和 Enumeration 去遍历它，比较它们的效率。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.xyfer;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Enumeration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Hashtable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Iterator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map.Entry;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Random;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;
        Random r &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
        Hashtable t &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Hashtable();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10000; i++&lt;span&gt;) {
            n &lt;/span&gt;= r.nextInt(1000&lt;span&gt;);
            t.put(i, n);
        }
        iterateHashtable(t);
        enumeration(t);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用Iterator遍历Hashtable&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; iterateHashtable(Hashtable t) {
        &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; start =&lt;span&gt; System.currentTimeMillis();
        Iterator i &lt;/span&gt;=&lt;span&gt; t.entrySet().iterator();
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (i.hasNext()) {
            Map.Entry entry &lt;/span&gt;=&lt;span&gt; (Entry) i.next();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(&quot;key:&quot; + entry.getKey() + &quot;value:&quot; + entry.getValue());&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; end =&lt;span&gt; System.currentTimeMillis();
        useTime(start,end);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用Enumeration遍历Hashtable&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; enumeration(Hashtable t) {
        &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; start =&lt;span&gt; System.currentTimeMillis();
        Enumeration enu &lt;/span&gt;=&lt;span&gt; t.elements();
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (enu.hasMoreElements()) {
            enu.nextElement();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Enumeration em = (Enumeration) enu.nextElement();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(enu.nextElement());&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; end =&lt;span&gt; System.currentTimeMillis();
        useTime(start,end);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算遍历Hashtable所耗时间&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; useTime(&lt;span&gt;long&lt;/span&gt; start,&lt;span&gt;long&lt;/span&gt;&lt;span&gt; end) {
        System.out.println(&lt;/span&gt;&quot;耗时：&quot;+(end-start)+&quot;ms&quot;&lt;span&gt;);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;控制台打印结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1553771/201903/1553771-20190307230058431-204787100.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从控制打印结果来看，Iterator遍历集合时确实会比Enumeration遍历集合慢一些。&lt;/p&gt;
</description>
<pubDate>Thu, 07 Mar 2019 15:04:00 +0000</pubDate>
<dc:creator>丘壑山河</dc:creator>
<og:description>本文介绍一下Iterator和Enumeration的区别及其效率 Iterator是一个接口，它的源码如下： Enumeration也是一个接口，它的源码如下： 从源码可以看出，Iterator除了</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xyfer1018/p/10493244.html</dc:identifier>
</item>
<item>
<title>PYCHRARM风格配置以及注释字体颜色修改 - 照山</title>
<link>http://www.cnblogs.com/abnerlinux/p/10493242.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/abnerlinux/p/10493242.html</guid>
<description>&lt;p&gt;　　Pycharm的主题现在比较流行的是黑色和灰色，我之前用LINUX的时候，比较喜欢LINUX的代码风格，所以配置Pycharm的时候选择了和LINUX风格比较贴近的黑色主题。&lt;/p&gt;
&lt;p&gt;　　Pycharm的安装和下载就不讲了，百度里有很多。&lt;/p&gt;
&lt;p&gt;　　首先打开FILE--SETTING&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1570293/201903/1570293-20190307224308235-1219233295.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　选择Editer--Color Schema--General&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1570293/201903/1570293-20190307224525927-1031422030.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　schema选择Twilight风格；&lt;/p&gt;
&lt;p&gt;　　然后，点击Color Schema Font选择字体、字号、行间距，下图是我配置的参数：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1570293/201903/1570293-20190307224745049-1514591636.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　以上配置玩成以后，界面风格基本上跟LINUX很像了。但是这里面有一个问题，就是注释是灰色的，跟黑色很贴近，看起来特别累眼睛，因此还需要对注释的字体颜色进行设置。&lt;/p&gt;
&lt;p&gt;　　网上的资料说，可以统一设置，选择Language Defaults--Comments，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1570293/201903/1570293-20190307225653943-1560088652.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　如上图设置，只能改变//和/*的字体颜色，其它的字体颜色还是不会改变，所以还需要对别的注释字体颜色进行配置；&lt;/p&gt;
&lt;p&gt;　　选择Custom--Block comment，点击右侧颜色设置，选择字体颜色，效果如下图的/*......*/中的字体颜色；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1570293/201903/1570293-20190307225922114-1682986188.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　依然是Custom下，选择Line comment，右侧设置字体颜色，效果如下图中#...的字体颜色；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1570293/201903/1570293-20190307230047894-2042392598.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　以上配置过程，完成了对风格的选择和字体颜色的配置，当然这里还有一些别的配置可以自己尝试。&lt;/p&gt;
</description>
<pubDate>Thu, 07 Mar 2019 15:03:00 +0000</pubDate>
<dc:creator>照山</dc:creator>
<og:description>Pycharm的主题现在比较流行的是黑色和灰色，我之前用LINUX的时候，比较喜欢LINUX的代码风格，所以配置Pycharm的时候选择了和LINUX风格比较贴近的黑色主题。 Pycharm的安装和下</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/abnerlinux/p/10493242.html</dc:identifier>
</item>
<item>
<title>聊聊OSM - 轩脉刃</title>
<link>http://www.cnblogs.com/yjf512/p/10492737.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yjf512/p/10492737.html</guid>
<description>&lt;p&gt;做路网的同学一定对OSM并不陌生，OSM是一个由英国人Steve Coast创立的一个项目，这个项目的目标是创建一个内容自由，且能让所有人编辑的世界地图。类似于维基百科的概念。和它对标的是谷歌的google map。google map是谷歌提出的电子地图服务。它是收费的。且并不提供友善的可以提供给所有人编辑的地图服务。&lt;/p&gt;
&lt;p&gt;OSM最值得称道的是它的语义结构，设计的非常简单，但是却非常通用，我们可以很方便的使用这个语义结构来定义我们需要的路网。&lt;/p&gt;

&lt;p&gt;OSM 仅仅定义了四个语义结构，node, way, relation, tag。 基本思想是一个路网是可以使用点和线来进行划分的。如果有更为宏观的信息需要展示，就使用 relation 来进行展示。而每种元素的属性都可以使用tag进行无限延生。&lt;/p&gt;
&lt;p&gt;node表示的最重要的属性是地理位置坐标。它表示的是一个点。&lt;/p&gt;
&lt;p&gt;way是由一系列有序的node组成的，它可以表示三种结构（非闭合线，闭合线，区域）。非闭合线，通常用来表示道路，河流，铁路等。闭合线，通常可以用来表示环形的东西，比如地铁等。区域，表示一个真实闭合的区域。&lt;/p&gt;
&lt;p&gt;relation 是由一系列的node，way，和其他的relation组合而成。它的作用其实比较大，比如，在路网里面，我用node和way画了一个路网，现在我想要画公交车121的路线，那么就可以使用relation来进行绘画。当然，如果你要表示的地图并不想有这样的信息，这个relation是可以不画的。&lt;/p&gt;
&lt;p&gt;node, way, relation就相当于是地图世界中的三原色，使用这三个元素理论上能绘制出所有你需要的地图。当然，这三个元素也有对应的属性，比如你这个way叫做“后厂村路”。那么这个名字就是一个属性。这里OSM抽象出了tag 概念，tag是key, value的组合。所以它可以无限延展。&lt;/p&gt;
&lt;p&gt;三原色也有一些公用的属性。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;user 最后修改/创建这个对象的用户&lt;/li&gt;
&lt;li&gt;uid 最后修改/创建这个对象的用户id&lt;/li&gt;
&lt;li&gt;timestamp 最后修改/创建这个对象的时间&lt;/li&gt;
&lt;li&gt;visible 这个对象是否要在地图中显示出来&lt;/li&gt;
&lt;li&gt;version 最后修改/创建这个对象的版本号&lt;/li&gt;
&lt;li&gt;changeset 这个节点的最后修改/创建这个对象的所在的changeList ID，这个和version不一样，version是每个对象自带的，changeset是全局的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果你使用过git，那么这个和git就很像了。当地图在开放的时间，一些人补充上了一些变动，如果平台每天收集，那么这些变动就会生成一个changeset。&lt;a href=&quot;https://www.openstreetmap.org/history&quot; class=&quot;uri&quot;&gt;https://www.openstreetmap.org/history&lt;/a&gt; 这个地址告知了你指定的区域有哪些changeset。&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;osm version=&quot;0.6&quot; generator=&quot;CGImap 0.0.2&quot;&amp;gt;
 &amp;lt;bounds minlat=&quot;54.0889580&quot; minlon=&quot;12.2487570&quot; maxlat=&quot;54.0913900&quot; maxlon=&quot;12.2524800&quot;/&amp;gt;
 &amp;lt;node id=&quot;298884269&quot; lat=&quot;54.0901746&quot; lon=&quot;12.2482632&quot; user=&quot;SvenHRO&quot; uid=&quot;46882&quot; visible=&quot;true&quot; version=&quot;1&quot; changeset=&quot;676636&quot; timestamp=&quot;2008-09-21T21:37:45Z&quot;/&amp;gt;
 &amp;lt;node id=&quot;261728686&quot; lat=&quot;54.0906309&quot; lon=&quot;12.2441924&quot; user=&quot;PikoWinter&quot; uid=&quot;36744&quot; visible=&quot;true&quot; version=&quot;1&quot; changeset=&quot;323878&quot; timestamp=&quot;2008-05-03T13:39:23Z&quot;/&amp;gt;
 &amp;lt;node id=&quot;1831881213&quot; version=&quot;1&quot; changeset=&quot;12370172&quot; lat=&quot;54.0900666&quot; lon=&quot;12.2539381&quot; user=&quot;lafkor&quot; uid=&quot;75625&quot; visible=&quot;true&quot; timestamp=&quot;2012-07-20T09:43:19Z&quot;&amp;gt;
  &amp;lt;tag k=&quot;name&quot; v=&quot;Neu Broderstorf&quot;/&amp;gt;
  &amp;lt;tag k=&quot;traffic_sign&quot; v=&quot;city_limit&quot;/&amp;gt;
 &amp;lt;/node&amp;gt;
 ...
 &amp;lt;node id=&quot;298884272&quot; lat=&quot;54.0901447&quot; lon=&quot;12.2516513&quot; user=&quot;SvenHRO&quot; uid=&quot;46882&quot; visible=&quot;true&quot; version=&quot;1&quot; changeset=&quot;676636&quot; timestamp=&quot;2008-09-21T21:37:45Z&quot;/&amp;gt;
 &amp;lt;way id=&quot;26659127&quot; user=&quot;Masch&quot; uid=&quot;55988&quot; visible=&quot;true&quot; version=&quot;5&quot; changeset=&quot;4142606&quot; timestamp=&quot;2010-03-16T11:47:08Z&quot;&amp;gt;
  &amp;lt;nd ref=&quot;292403538&quot;/&amp;gt;
  &amp;lt;nd ref=&quot;298884289&quot;/&amp;gt;
  ...
  &amp;lt;nd ref=&quot;261728686&quot;/&amp;gt;
  &amp;lt;tag k=&quot;highway&quot; v=&quot;unclassified&quot;/&amp;gt;
  &amp;lt;tag k=&quot;name&quot; v=&quot;Pastower Straße&quot;/&amp;gt;
 &amp;lt;/way&amp;gt;
 &amp;lt;relation id=&quot;56688&quot; user=&quot;kmvar&quot; uid=&quot;56190&quot; visible=&quot;true&quot; version=&quot;28&quot; changeset=&quot;6947637&quot; timestamp=&quot;2011-01-12T14:23:49Z&quot;&amp;gt;
  &amp;lt;member type=&quot;node&quot; ref=&quot;294942404&quot; role=&quot;&quot;/&amp;gt;
  ...
  &amp;lt;member type=&quot;node&quot; ref=&quot;364933006&quot; role=&quot;&quot;/&amp;gt;
  &amp;lt;member type=&quot;way&quot; ref=&quot;4579143&quot; role=&quot;&quot;/&amp;gt;
  ...
  &amp;lt;member type=&quot;node&quot; ref=&quot;249673494&quot; role=&quot;&quot;/&amp;gt;
  &amp;lt;tag k=&quot;name&quot; v=&quot;Küstenbus Linie 123&quot;/&amp;gt;
  &amp;lt;tag k=&quot;network&quot; v=&quot;VVW&quot;/&amp;gt;
  &amp;lt;tag k=&quot;operator&quot; v=&quot;Regionalverkehr Küste&quot;/&amp;gt;
  &amp;lt;tag k=&quot;ref&quot; v=&quot;123&quot;/&amp;gt;
  &amp;lt;tag k=&quot;route&quot; v=&quot;bus&quot;/&amp;gt;
  &amp;lt;tag k=&quot;type&quot; v=&quot;route&quot;/&amp;gt;
 &amp;lt;/relation&amp;gt;
 ...
&amp;lt;/osm&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个是&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/OSM_XML&quot;&gt;osm wiki&lt;/a&gt;上摘抄出来的例子。我们可以看到，这个例子已经包含了所有的定义。它表达了在&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;bounds minlat=&quot;54.0889580&quot; minlon=&quot;12.2487570&quot; maxlat=&quot;54.0913900&quot; maxlon=&quot;12.2524800&quot;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个矩形框范围内的4个node，一个way, 还有一个relation。这个relation表达的就是&lt;code&gt;Küstenbus Linie 123&lt;/code&gt;公交交通工具的线路。&lt;/p&gt;
&lt;p&gt;我们从上面例子也看出，OSM描述自己的语言是选择XML，XML是一种清晰且易于人类解读的结构。OSM输出的XML文件通常以.osm后缀。这个文件现在已经被多种工具所适配。OSM的schema如下：&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/API_v0.6/XSD&quot; class=&quot;uri&quot;&gt;https://wiki.openstreetmap.org/wiki/API_v0.6/XSD&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比如最常用的qgis 和 arcgis 都支持直接使用osm文件导入进行编辑的功能。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_912917507/article/details/81736041&quot;&gt;OSM（openstreetmap）矢量数据下载方法（路网，水系，铁路，建筑物）&lt;/a&gt;这篇文章展示了各种用osm绘制的地图。&lt;/p&gt;
&lt;p&gt;当然，OSM只是描述了地图的路网，而在绘制地图的时候，地图的底图需要使用地图底图提供商的服务，比如mapbox。&lt;/p&gt;
&lt;p&gt;OSM的生态也非常好，比如&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37370059&quot;&gt;不用百度API也能计算驾驶距离——OSMnx计算多点驾车距离&lt;/a&gt; 使用的是OSM的数据，以及python的osmnx包，直接提供了计算最短路径的服务。&lt;/p&gt;
&lt;p&gt;OSM存储在数据库中一般使用POSTGIS（&lt;a href=&quot;http://blog.geoserver.org/2009/01/30/geoserver-and-openstreetmap/%EF%BC%89%E5%AE%83%E4%BC%9A%E5%88%9B%E5%BB%BA%E5%87%A0%E5%BC%A0%E8%A1%A8&quot; class=&quot;uri&quot;&gt;http://blog.geoserver.org/2009/01/30/geoserver-and-openstreetmap/）它会创建几张表&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;planet_osm_line&lt;/li&gt;
&lt;li&gt;planet_osm_point&lt;/li&gt;
&lt;li&gt;planet_osm_polygon&lt;/li&gt;
&lt;li&gt;planet_osm_roads&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Thu, 07 Mar 2019 14:00:00 +0000</pubDate>
<dc:creator>轩脉刃</dc:creator>
<og:description>聊聊OSM 做路网的同学一定对OSM并不陌生，OSM是一个由英国人Steve Coast创立的一个项目，这个项目的目标是创建一个内容自由，且能让所有人编辑的世界地图。类似于维基百科的概念。和它对标的是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yjf512/p/10492737.html</dc:identifier>
</item>
<item>
<title>利用C# CefSharp Python采集某网站简历并自动发送邀请短信 - ROTA</title>
<link>http://www.cnblogs.com/imes/p/10452212.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imes/p/10452212.html</guid>
<description>&lt;p&gt;以往爬虫没怎么研究过，最近有个需求，要从某网站采集敏感信息，稍稍考虑了一下，决定利用C# Winform和Python一起来解决这个事件。&lt;/p&gt;
&lt;p&gt;整个解决方案不复杂：C#编写WinForm窗体，进行数据分析和采集, Python本来不想用的，一下子没找到C#下Woff字体转Xml的方案，而网上Python的则有很多，所以就加了一个Python项目，虽然就1个脚本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1484894/201903/1484894-20190307210219087-1759972377.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;一、几个步骤：&lt;/p&gt;
&lt;p&gt;　　首先要模拟登录，登录完了进入简历采集，然后模拟下载，下载完了以后就可以看到求职者的电话了。&lt;/p&gt;
&lt;p&gt;　　这个电话号码是使用动态生成的Base64字体，所以直接提取文字是无法成功的。&lt;/p&gt;
&lt;p&gt;　　1、先将Base64转成Woff字体，这个可以用C#完成（这其中的iso-8859-1编码是个坑，一般用Default会出现惊喜）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
            SetMainStatus(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在生成WOFF...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] fontBytes =&lt;span&gt; Convert.FromBase64String(CurFont);
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; fontStr = Encoding.GetEncoding(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;iso-8859-1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).GetString(fontBytes).TrimEnd(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            StreamWriter sw2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; StreamWriter(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;R58.woff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, Encoding.GetEncoding(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;iso-8859-1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            sw2.Write(fontStr);
            sw2.Close();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、再将已经生成的Woff转成XML（WoffDec.exe是我用Python打包的Exe,其实有点小题大做了，为了这一个转化专门打了一个包，有时间还是整一个C#下面的好） &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用python exe 生成xml文件&lt;/span&gt;
            ProcessStartInfo info = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ProcessStartInfo
            {
                FileName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WoffDec.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                WindowStyle &lt;/span&gt;=&lt;span&gt; ProcessWindowStyle.Hidden
            };
            Process.Start(info).WaitForExit(&lt;/span&gt;&lt;span&gt;2000&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在2秒内等待返回&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;整个WoffDec.py的代码就3行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt;&lt;span&gt; fontTools.ttLib import TTFont
font &lt;/span&gt;= TTFont(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;R12.woff&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
font.saveXML(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;R12.xml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个打包是有点意思的，先试了py2exe，不成功，换pyinstaller, 成了，连EXE一起有11M，也不是很大。&lt;/p&gt;
&lt;p&gt;https://github.com/pyinstaller/pyinstaller 下载，或者在VS2017 Python环境下搜索PyInstaller直接安装。&lt;/p&gt;
&lt;p&gt;右键使用“打开此处的命令提示符”；输入pyinstaller /path/to/yourscript.py即可打包成一个exe文件。&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;在Winform应用调用时，应该整个文件夹都拷贝过去。&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　3、XML文件有了以后，以上面的Woff文件为基准准备为一个数据字典存储起来（这个地方有点绕，先找一个网站把Woff显示成文字和编码，然后根据编码在XML中查找它的字体定位点，我取的X和Y组成唯一值（X，Y就代表一个字），当然也可以取更多;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; DicChar = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;()
        {
            {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;91,744&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
            {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;570,0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
            {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;853,1143&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
            {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;143,259&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
            。。。。。。
        };        &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4、上面这一步是要花点时间的，基准字典有了以后，就可以按每次生成的XML文件来进行匹配真实文字了。&lt;/p&gt;
&lt;p&gt;　　5、真实文字取出后面的就简单了，直接采集到数据库，再连上短信发送业务，就可以自动群发了。&lt;/p&gt;
&lt;p&gt;二、使用场景&lt;/p&gt;
&lt;p&gt;　　上班后开启采集服务即不用再理会，由系统每间隔一段时间自动下载简历，并自动推送面试邀请短信。只要有新人发布对口的求职信息，系统就会马上给他发送邀请，实为抢人利器。&lt;/p&gt;

&lt;p&gt;BTW：网页模拟操作使用的CEFSharp将另开一章。&lt;/p&gt;
</description>
<pubDate>Thu, 07 Mar 2019 13:35:00 +0000</pubDate>
<dc:creator>ROTA</dc:creator>
<og:description>以往爬虫没怎么研究过，最近有个需求，要从某网站采集敏感信息，稍稍考虑了一下，决定利用C# Winform和Python一起来解决这个事件。 整个解决方案不复杂：C#编写WinForm窗体，进行数据分析</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/imes/p/10452212.html</dc:identifier>
</item>
<item>
<title>如何更优雅地写Django REST framework - luozx207</title>
<link>http://www.cnblogs.com/luozx207/p/10491920.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/luozx207/p/10491920.html</guid>
<description>&lt;p&gt;DRF（Django REST framework）是一个高度封装的框架，这导致想完成一件事情可以通过重写父类函数的方式从DRF的各个层次来写，都能够实现目的。&lt;/p&gt;
&lt;p&gt;比如写视图函数，可以用继承APIView的方式或者继承Viewsets的方式，甚至直接写视图函数&lt;/p&gt;
&lt;p&gt;但是想要更加干净简洁的代码，还是需要找到实现的最佳方式&lt;/p&gt;
&lt;p&gt;以下是我的一些个人总结，欢迎讨论&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;models.py&quot;&gt;models.py&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.PositiveSmallIntegerField&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Positive对应unsigned&lt;/li&gt;
&lt;li&gt;Small对应smallint(5)&lt;/li&gt;
&lt;li&gt;对于一些数据量较小的系统可以使用这个Field作为id&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2、字段定义中verbose_name定义的是django自带接口ui的字段说明，help_text定义的是swagger的字段说明&lt;/p&gt;
&lt;p&gt;3、tag = models.ForeignKey(Tag, related_name=&quot;project_tag&quot;)&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;定义一个外键会在数据库中生成一个名为tag_id的字段&lt;/li&gt;
&lt;li&gt;但是在模型实例中，tag是Tag模型的实例&lt;/li&gt;
&lt;li&gt;也就是说，Django的ORM会把tag.id=tag_id的Tag模型实例取出来放到tag字段&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;4、user = models.ForeignKey(User, unique=True)&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;相当于user = models.OneToOneField(User)&lt;/li&gt;
&lt;li&gt;外键 on_delete = models.CASCADE 级联删除是默认的选项&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;5、ImageField和FileField实际上是CharFields&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;serializers.py&quot;&gt;serializers.py&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、serializers中对字段做出的限制只会影响前端传到后端的数据，而不会影响后端传到前端的数据&lt;/p&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;class MySerializer(serializers.ModelSerializer):
    TYPE = (
        # (0, &quot;级别一&quot;), #在model中这行没有注释掉
        (1, &quot;级别二&quot;),
        (2, &quot;级别三&quot;)
    )
    # 这样可以限制前端不能传my_type=0的数据，但是my_type=0的数据可以在前端接收到
    my_type = ChoiceField(choices=TYPE,required=True)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、一般来说，update和create的操作都会在serializers中实现&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;很多刚开始接触DRF的同学会习惯在view中写update和create，其实，在serializers中实现是一种更好的方法，&lt;br/&gt;因为，这样你的代码不用绕来绕去。不用费劲获取serializer的值再费劲存到serializer里，直接在serializer中实现就行了。&lt;br/&gt;别看create和update函数的源码那么长，其实不用管它们，整个重写就好了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;update与create函数框架&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def create(self, validated_data):
    ...
    return instance
    
def update(self, instance, validated_data):
    ...
    return instance&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;validated_data是经过验证的前端数据，instance是用id获取的对应数据库数据的模型实例&lt;br/&gt;它们都要返回一个模型实例，作为返回前端的数据&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;update和create方法由serializer.save()函数调用&lt;/li&gt;
&lt;li&gt;在serializer中&lt;code&gt;self.context[&quot;request&quot;]&lt;/code&gt;相当于view中的&lt;code&gt;self.request&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在Model.objects的创建或筛选中，可以直接拿一个模型实例赋值给外键字段或相比较，比如&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;Model1.objects.create(user=self.context[&quot;request&quot;].user,
                       foreign_key=foreign_key_instance)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;如果要用一个已有的模型实例的数据创建一条新数据，我曾用过一个不优雅的写法&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;for key in update_data:
    setattr(instance, key, update_data[key])
# 把对象转为字典，作为新建数据的参数
dic = instance.__dict__
del dic['id']
del dic['_state']
new_instance = Model1.objects.create(**dic)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;先把更新后的实例对象转为字典，再删掉id等在数据表插入新数据时不该传的数据，再将字典作为objects.create的参数&lt;/p&gt;
&lt;p&gt;其实有一个更巧妙的方法&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;instance.id = None
for attr, value in update_data.items():
    setattr(instance, attr, value)
instance.save()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;instance.save()之后，instance将会变成新插入数据的模型实例&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;某些情况需要父类函数的写法，不需要复制代码，用super就可以了&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;super(Model1Serializer, self).update(instance, validated_data)&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;views.py&quot;&gt;views.py&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、perform_create中的serializer.save()语句可以带参数，比如&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;user_id = self.request.user.id
serializer.save(user=User.objects.get(id=user_id))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实现从request中获取user的值，而不是从表单&lt;/p&gt;
&lt;p&gt;2、尽量使用objects.filter而不是get&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;filter返回一个数组，get返回一个数据库实例&lt;/li&gt;
&lt;li&gt;如果get()中的过滤条件没有匹配出数据，&lt;code&gt;get().delete()&lt;/code&gt;会报错，filter则会取出一个空数组，不会报错&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3、过滤器的使用&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;应避免在get_queryset()中使用复杂的逻辑，比如&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def get_queryset(self):
    key_1 = self.request.key1
    key_2 = self.request.key2
    my_type = self.request.query_params.get('type', None)
    if my_type == 1:
        return Model.objects.filter(foreign_key_1=key_1)
    elif my_type == 2:
        return Model.objects.filter(foreign_key_2=key_2)
    # 默认情况，返回所有
    return Model.objects.all()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实这就是一个根据查询参数过滤的过程，完全可以使用过滤器实现，这样在Django自带ui中也会有过滤器的说明&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;要使用过滤器，首先安装库&lt;br/&gt;&lt;code&gt;pip install django-filter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;python2要特别指定django-filter==1.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;然后在settings的&lt;code&gt;INSTALLED_APPS&lt;/code&gt;中加上&lt;code&gt;django_filters&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新建一个名为filters.py的文件，定义一个过滤器&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;class MyFilter(django_filters.rest_framework.FilterSet):
    MY_TYPE = (
        (1, &quot;类别一&quot;),
        (2, &quot;类别二&quot;)
    )
    
    type = django_filters.ChoiceFilter(help_text=&quot;类型&quot;,
                                       label=&quot;类型&quot;,
                                       choices=MY_TYPE,
                                       method=&quot;type_filter&quot;
                                       )

    def type_filter(self,queryset,name,value):
        key_1 = self.request.key1
        key_2 = self.request.key2
        if value == 1:
            return queryset.filter(foreign_key_1=key_1)
        elif value == 2:
            return queryset.filter(foreign_key_2=key_2)

    class Meta:
        model = Tag
        fields = ['type']&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;在viewset中加上&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;filter_backends = (DjangoFilterBackend, )
filter_class = MyFilter&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而get_queryset函数只需要一句&lt;code&gt;return Model.objects.all()&lt;/code&gt;就好&lt;/p&gt;
&lt;p&gt;注意type_filter的queryset就是get_queryset所返回的&lt;/p&gt;
</description>
<pubDate>Thu, 07 Mar 2019 12:07:00 +0000</pubDate>
<dc:creator>luozx207</dc:creator>
<og:description>DRF（Django REST framework）是一个高度封装的框架，这导致想完成一件事情可以通过重写父类函数的方式从DRF的各个层次来写，都能够实现目的。 比如写视图函数，可以用继承APIVie</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/luozx207/p/10491920.html</dc:identifier>
</item>
<item>
<title>一文掌握 Linux 性能分析之内存篇 - CloudDeveloper</title>
<link>http://www.cnblogs.com/bakari/p/10486818.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bakari/p/10486818.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;本文首发于我的公众号 &lt;strong&gt;CloudDeveloper(ID: cloud_dev)&lt;/strong&gt;，专注于干货分享，号内有大量书籍和视频资源，后台回复&lt;strong&gt;「1024」&lt;/strong&gt;即可领取，欢迎大家关注，二维码文末可以扫。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前面我们已经学习了 CPU 篇，这篇来看下内存篇。&lt;/p&gt;
&lt;h2 id=&quot;内存信息&quot;&gt;01 内存信息&lt;/h2&gt;
&lt;p&gt;同样在分析内存之前，我们得知到怎么查看系统内存信息，有以下几种方法。&lt;/p&gt;
&lt;h3 id=&quot;procmeminfo&quot;&gt;1.1 /proc/meminfo&lt;/h3&gt;
&lt;p&gt;这个文件记录着比较详细的内存配置信息，使用 &lt;code&gt;cat /proc/meminfo&lt;/code&gt; 查看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431521/201903/431521-20190306230348550-1655831120.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们比较关心的是下面几个字段：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;MemTotal：系统总内存，由于 BIOS、内核等会占用一些内存，所以这里和配置声称的内存会有一些出入，比如我这里配置有 2G，但其实只有 1.95G 可用。&lt;/li&gt;
&lt;li&gt;MemFree：系统空闲内存。&lt;/li&gt;
&lt;li&gt;MemAvailable：应用程序可用内存。有人会比较奇怪和 MemFree 的区别，可以从两个层面来区分，MemFree 是系统层面的，而 MemAvailable 是应用程序层面的。系统中有些内存虽然被使用了但是有一部分是可以回收的，比如 Buffers、Cached 及 Slab 这些内存，这部分可以回收的内存加上 MemFree 才是 MemAvailable 的内存值，这是内核通过特定算法算出来的，是一个估算值。&lt;/li&gt;
&lt;li&gt;Buffers：缓冲区内存&lt;/li&gt;
&lt;li&gt;Cached：缓存&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面信息没有 MemUsed 的值，虽然可以用现有的值大致估算出来，但是我们想一步到位，就用下面的 free 命令。&lt;/p&gt;
&lt;h3 id=&quot;free&quot;&gt;1.2 free&lt;/h3&gt;
&lt;p&gt;这个命令估计用的人就多了（我一般都是用这个命令）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431521/201903/431521-20190306230415331-1661908104.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里存在一个计算公式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;MemTotal = used + free + buff/cache（单位 K）&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;几个字段和上面 &lt;code&gt;/proc/meminfo&lt;/code&gt; 的字段是对应的。还有个 &lt;code&gt;shared&lt;/code&gt; 字段，这个是多进程的共享内存空间，不常用。&lt;/p&gt;
&lt;p&gt;我们注意到 free 很小，buff/cache 却很大，这是 Linux 的内存设计决定的，Linux 的想法是内存闲着反正也是闲着，不如拿出来做系统缓存和缓冲区，提高数据读写的速率。但是当系统内存不足时，buff/cache 会让出部分来，非常灵活的操作。&lt;/p&gt;
&lt;p&gt;要看比较直观的值，可以加 -h 参数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431521/201903/431521-20190306230429532-171188921.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;dmidecode&quot;&gt;1.3 dmidecode&lt;/h3&gt;
&lt;p&gt;同样可以使用这个命令，对于内存，可以使用 &lt;code&gt;dmidecode -t memory&lt;/code&gt; 查看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431521/201903/431521-20190306230507608-294550008.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;vmstat&quot;&gt;1.4 vmstat&lt;/h3&gt;
&lt;p&gt;这个命令也是非常常用了。但对于内存，显示信息有限。它更多是用于进行系统全局分析和 CPU 分析。详细可以看 CPU 分析一文。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431521/201903/431521-20190306230532626-293159257.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;进程内存使用情况分析&quot;&gt;02 进程内存使用情况分析&lt;/h2&gt;
&lt;p&gt;最常用的两个命令 ps 和 top，虽然很简单的两个命令，但还是有不少学问的。&lt;/p&gt;
&lt;h3 id=&quot;tophtop&quot;&gt;2.1 top/htop&lt;/h3&gt;
&lt;p&gt;top 命令运行时默认是按照 CPU 利用率进行排序的，如果要按照内存排序，该怎么操作呢？两种方法，一种&lt;strong&gt;直接按 “M”（相应的按 “P” 是 CPU），另外一种是在键入 top 之后，按下 “F”，然后选择要排序的字段，再按下 “s” 确认&lt;/strong&gt;即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431521/201903/431521-20190306230645084-1043679302.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，我按照 “%MEM” 排序的结果。这个结果对于查看系统占用内存较多的哪些进程是比较有用的。&lt;/p&gt;
&lt;p&gt;然后这里我们会重点关注几个地方，上面横排区，和前面几个命令一样可以查看系统内存信息，中间标注的横条部分，和内存相关的有三个字段：VIRT、RES、SHR。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;VIRT：virtual memory usage，进程占用的虚拟内存大小。&lt;/li&gt;
&lt;li&gt;RES：resident memory usage，进程常驻内存大小，也就是实际内存占用情况，一般我们看进程占用了多少内存，就是看的这个值。&lt;/li&gt;
&lt;li&gt;SHR：shared memory，共享内存大小，不常用。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;ps&quot;&gt;2.2 ps&lt;/h3&gt;
&lt;p&gt;ps 同样可以查看进程占用内存情况，一般常用来查看 Top n 进程占用内存情况，如：&lt;br/&gt;&lt;code&gt;ps aux --sort=rss | head -n&lt;/code&gt;，表示按 rss 排序，取 Top n。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431521/201903/431521-20190306230740744-668825508.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里也关注三个字段：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;%MEM：进程使用物理内存所占百分比。&lt;/li&gt;
&lt;li&gt;VSZ：进程使用虚拟内存大小。&lt;/li&gt;
&lt;li&gt;RSS：进程使用物理内存大小，我们会重点关注这个值。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;pmap&quot;&gt;2.3 pmap&lt;/h3&gt;
&lt;p&gt;这个命令用于查看进程的内存映像信息，能够查看进程在哪些地方用了多少内存。 常用 &lt;code&gt;pmap -x pid&lt;/code&gt; 来查看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431521/201903/431521-20190306230813584-836379258.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431521/201903/431521-20190306230828861-386196496.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到该进程内存被哪些库、哪些文件所占用，据此我们定位程序对内存的使用。&lt;/p&gt;
&lt;p&gt;几个字段介绍一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Address：占用内存的文件的内存起始地址。&lt;/li&gt;
&lt;li&gt;Kbytes：占用内存的字节数。&lt;/li&gt;
&lt;li&gt;RSS：实际占用内存大小。&lt;/li&gt;
&lt;li&gt;Dirty：脏页大小。&lt;/li&gt;
&lt;li&gt;Mapping：占用内存的文件，[anon] 为已分配的内存，[stack] 为程序堆栈&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最后的 total 为统计的总值。我们可以使用 &lt;code&gt;pmap -x pid | tail -1&lt;/code&gt; 这样只显示最后一行，循环显示最后一行，达到监控该进程的目的。使用：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;while true; do pmap -x pid | tail -1; sleep 1; done&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;OK，以上工具都是 Linux 自带的，当然还有很多高阶的工具，比如 atop、memstat 等等，对于内存泄漏有一个比较常用的检测工具 Valgrind，&lt;strong&gt;更多干货可以关注我的公众号&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通过以上手段，我们基本上就能定位内存问题所在了，究竟是内存太小，还是进程占用内存太多，有哪些进程占用较多，这些进程又究竟有哪些地方占用较多，这些问题通过以上方法都能解决。&lt;/p&gt;
&lt;p&gt;最后简单总结下，以上不少工具可能有人会犯选择困难症了。对于我来说，查看系统内存用 free -h，分析进程内存占用用 ps 或者 top（首选 ps），深入分析选择 pmap，就酱。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;Linux下查看内存使用情况的多种方法 &lt;a href=&quot;http://stor.51cto.com/art/201804/570236.htm&quot; class=&quot;uri&quot;&gt;http://stor.51cto.com/art/201804/570236.htm&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;我的公众号 &lt;strong&gt;CloudDeveloper(ID: cloud_dev)&lt;/strong&gt;，号内有大量书籍和视频资源，后台回复&lt;strong&gt;「1024」&lt;/strong&gt;即可领取，分享的内容包括但不限于云计算虚拟化、容器、OpenStack、K8S、雾计算、网络、工具、SDN、OVS、DPDK、Linux、Go、Python、C/C++编程技术等内容，欢迎大家关注。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4249277-db400131834b5a59.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 07 Mar 2019 11:57:00 +0000</pubDate>
<dc:creator>CloudDeveloper</dc:creator>
<og:description>本文首发于我的公众号 CloudDeveloper(ID: cloud_dev) ，专注于干货分享，号内有大量书籍和视频资源，后台回复 「1024」 即可领取，欢迎大家关注，二维码文末可以扫。 前面我</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bakari/p/10486818.html</dc:identifier>
</item>
</channel>
</rss>