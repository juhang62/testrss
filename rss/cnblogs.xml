<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>测试工程师个人年终总结 - Vincent83</title>
<link>http://www.cnblogs.com/yingyingja/p/10238148.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yingyingja/p/10238148.html</guid>
<description>
&lt;p&gt;又到了年底的时候，对于中国的大部分企业而言，这是真正要踏入年关的时期了。&lt;/p&gt;
&lt;p&gt;对于IT人员来说，年末也是相对繁忙的一段时期，各个项目要在年前或上线，或收尾；还有一项重要的事项很多人需要去做，那就是：年终总结。&lt;/p&gt;

&lt;p&gt;年终总结是件挺讨厌的事情，对工科人士而言（推眼镜）最讨厌写这种假大空的文档了吧。&lt;/p&gt;
&lt;p&gt;确实很多时候年终总结是个过场，不过他也有可能成为企业绩效管理中的重要环节，而且优秀的年终总结也是你向领导展示自己的一次机会。&lt;/p&gt;
&lt;p&gt;下面我们就说说年终总结怎么写，才能上档次。&lt;/p&gt;


&lt;p&gt;开始编排文档之前来做一个思考，到底我写这个年终报告，最理想的效果是什么？&lt;/p&gt;
&lt;p&gt;这是我推崇的做事方式，勤加思考，特别是思考事务的本质到底是什么，这件事务要取得的收益是什么？在企业里，不谈收益的付出都是耍流氓。做事没思路，不思考，那么事情你可能完全做歪，偏离其本质目的。&lt;/p&gt;

&lt;p&gt;总结一下，如果是我的年终报告，我希望达成以下目标：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;告诉领导我做了大量的工作（诉苦，我很忙，我没闲着，没有企业想要养闲人）&lt;/li&gt;
&lt;li&gt;告诉领导我的工作是富有成效的（邀功，我的工作是为公司和项目带来效益的）&lt;/li&gt;
&lt;li&gt;告诉领导我的工作是高水平的（强调，我的工作不是随随便便能被替代的）&lt;/li&gt;
&lt;li&gt;告诉领导如果给我足够支持我甚至可以帮你做这个（诉求，获得更多的资源分配和关注度）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当然这些思路是我们可以去追求的目标，至于如何操作还要结合个人工作业绩，下面开始正文。&lt;/p&gt;


&lt;h2&gt;开篇语&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;这一段起个引子的作用，中学生作文，不重要。不会写就网上搜，抄。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;时间从2018跨入2019这个崭新的年度，戊戌即将过去，己亥行将到来。回首这一年的工作，那些忙碌的时刻仍然让我记忆尤新：取得成就时的喜悦，面对挑战时的忧虑，达成突破时的兴奋。这一年那些奋战在项目一线的日夜是我职业生涯中不可磨灭的历程；这一年既有丰富的收获，也有可以改进的空间和不足，下面是我对今年工作的一个总结：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt; &lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1.　　项目概述&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;取决你汇报的对象，这一段可以有所调整。例如如果是给大领导汇报，那么他对你的个人项目情况可能是没有足够了解的，这种情况下，自己所从事的项目情况介绍就很有必要了。但如果是直接领导，比如项目经理，想想看对着项目经理介绍项目，是不是很怪？所以自己酌情选择项目概述的详尽程度。&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;其余部分，与你简历里的项目情况大同小异。&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;1.1　　项目情况&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;例1：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1451355/201901/1451355-20190108115813160-964782049.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 例2：&lt;/p&gt;
&lt;p&gt;XXXERP项目是XX集团大力发展XXX服务而成立的项目。&lt;span&gt;项目旨在规范全国各个分院的医疗信息管理，通过研发&lt;/span&gt;ERP项目，对客户信息、商品管理、库存调配、结算收银以及各类报表进行管理，有效解决手工统计带来的误差和资源调配问题，实现全国规范化管理。&lt;/p&gt;

&lt;p&gt; 例3：&lt;/p&gt;
&lt;p&gt;你甚至可以贴系统结构图，开不开心？&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;1.2　　工作流程&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;例：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;项目的研发过程采用敏捷理念，融合了高速迭代和持续交付过程。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;项目的测试遵循测试尽早介入的原则，从需求分析阶段开始，测试人员参与需求评审，进而根据项目测试计划，需求规格说明以及设计文档等，开始测试分析，测试用例设计。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;开发代码提测后第一时间进行冒烟测试，测试入口达成后开始测试的执行。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;通过缺陷汇报和信息反馈，持续对产品质量进行跟踪检验，跟进缺陷修复和过程改进。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;经过系统测试执行后，判断测试出口标准，并将产品移入交付阶段。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;1.3　　个人角色&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; 例：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;角色：&lt;/strong&gt;做为质量工程师，与开发团队协作，保障产品高质量交付&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;职责：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;参与产品的与评审；&lt;/li&gt;
&lt;li&gt;根据分配到的需求模块，分析测试依据，得出测试提纲；&lt;/li&gt;
&lt;li&gt;结合软件测试设计技术，设计测试用例；&lt;/li&gt;
&lt;li&gt;开发提测后，进行冒烟测试，通过后开始执行测试用例，进行系统测试；&lt;/li&gt;
&lt;li&gt;根据测试执行的结果，提交缺陷报告；&lt;/li&gt;
&lt;li&gt;追踪缺陷报告，协助开发进行缺陷定位，验证修复后的缺陷；&lt;/li&gt;
&lt;li&gt;针对单模块和需求的测试情况，进行汇总报告；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span&gt;1.4　　完成情况&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;产品的v2.31版本经过 6个月的研发与测试，已于2018年12月底上线，现进入到运维阶段。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;2.　　工作业绩&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;实事求是，总结一下自己做的工作。注意不要太过于平铺直述，该用&lt;strong&gt;术语&lt;/strong&gt;的地方要用术语。注意&lt;strong&gt;量化度量&lt;/strong&gt;自己的工作业绩，不要描述性干讲，对于领导层而言，数字、报表来的比泛泛而论的空谈来的更有说服力。&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.1　　测试执行&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：负责了产品四个主要功能模块的测试任务，分别包括功能1、2、3、4。总计测试用例数量229个&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1451355/201901/1451355-20190108145917790-1003919166.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;图表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1451355/201901/1451355-20190108145952994-1002459502.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.2　　缺陷收敛&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺陷收敛度：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1451355/201901/1451355-20190108145220571-1888456160.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;图表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1451355/201901/1451355-20190108145259032-962895492.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;缺陷有效率：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1451355/201901/1451355-20190108145411939-1819819263.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1451355/201901/1451355-20190108145444602-761193314.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;3.　　亮点和不足&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;亮点是你吹水的地方，提升报告逼格主要靠这个，他可以是你解决的困难问题，也可以是你学到的新的技术和理念，当然更可以是为团队开创的新的测试方法和领域。&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;不足值得书写，不要觉得不好意思写。能认识到自身问题是一件非常值得欣赏的事。&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.1　　应对挑战&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;例：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在项目测试工作过程中，业务知识始终是工作非常大的难点。由于系统的复杂和行业领域的特性，在刚接手工作时，业务领域知识的欠缺给我的工作带来了很大困难，也给我个人带来了很大压力。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;意识到问题的严重性后，我下定决心提高自身业务知识水平，利用闲暇时间努力钻研业务相关学习资料，遇到困难问题积极向前辈请教。在经过不懈的努力，终于可以在业务知识水平上迈上了一个台阶，现在已经可以很好的应对项目业务需求，并可以给其他团队相关人员提供业务知识支持。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然，学无止尽，在当前的领域内，还有更多值得我去积累的知识和经验，这也是我未来努力的方向之一。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.2　　技术提升&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：&lt;/strong&gt;在我从事测试工作的初始时间里，有很大一部分时间只能通过手工测试和系统功能测试的方法来实践自己的测试技术和理念。做为个人的职业追求，掌握更深入的测试技术始终是我的目标。&lt;/p&gt;
&lt;p&gt;在过去一年中，由于项目的需要，让我开始有机会接触到接口测试。在项目经理的指导下，我快速的掌握了接口测试的实践方法和postman等实用工具，为更早开始测试，从更底层去实施测试提供了技术上的可能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.3　　不足之处&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;例1：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;当前项目中，测试对于持续集成交付的支持还不足够。项目频繁交付的过程中，回归测试的压力巨大，使用手工测试的方式耗费时间和资源。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;例2：&lt;/span&gt;&lt;/strong&gt;在回顾自己的测试用例覆盖之时，也发现自己早期的测试设计存在的不足，测试结构设计不合理，导致测试执行过程中随机性太大，后期这样的情况有所改善，但仍然是我后续需要注意的重点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;例3：&lt;/strong&gt;在安排自己的测试任务时，存在组织混乱的情况，导致效率低下。后续需要更好的从宏观方面组织和编排测试任务以及时间，更系统的安排自身工作提高效率。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;4.　　未来展望&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;未来展望可以写能够体现自己上进心，并且对公司部门和项目有实际价值的技术技能。比如自动化，是现在的大领导们很喜欢的东西；再比如团队管理，疯狂暗示领导，现在测试需要管理，请你们未来考虑我这个人选，等等。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例1：&lt;/strong&gt;未来希望能继续在测试领域内积累更多的技术和经验，更好的为团队为产品质量服务把关。&lt;/p&gt;
&lt;p&gt;针对项目中客观存在的回归测试压力，我已经开始着手学习接口自动化技术，希望通过对自动化技术的学习，结合着已经实践过的接口测试技术，为项目引入接口自动化测试体系。为更底层的测试，更高的质量覆盖和更多的持续测试提供可能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例2：&lt;/strong&gt;在未来的项目里，承担更多的责任，争取能从更高的维度把握测试工程，系统的学习和提高自己的规划能力和协调能力&lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 08 Jan 2019 07:44:00 +0000</pubDate>
<dc:creator>Vincent83</dc:creator>
<og:description>又到了年底的时候，对于中国的大部分企业而言，这是真正要踏入年关的时期了。 对于IT人员来说，年末也是相对繁忙的一段时期，各个项目要在年前或上线，或收尾；还有一项重要的事项很多人需要去做，那就是：年终总</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yingyingja/p/10238148.html</dc:identifier>
</item>
<item>
<title>RocketMQ源码分析之RocketMQ事务消息实现原理上篇(二阶段提交) - 阿里云云栖社区</title>
<link>http://www.cnblogs.com/yunqishequ/p/10239047.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yunqishequ/p/10239047.html</guid>
<description>&lt;p data-spm-anchor-id=&quot;a2c4e.11153940.blogcont684232.i1.784569fdYHWFPt&quot;&gt;在阅读本文前，若您对RocketMQ技术感兴趣，请加入 RocketMQ技术交流群&lt;/p&gt;
&lt;p&gt;根据上文的描述，发送事务消息的入口为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;TransactionMQProducer#sendMessageInTransaction：
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public TransactionSendResult &lt;span class=&quot;hljs-title&quot;&gt;sendMessageInTransaction&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final Message msg, &lt;span class=&quot;hljs-keyword&quot;&gt;final Object arg) &lt;span class=&quot;hljs-keyword&quot;&gt;throws MQClientException {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if (&lt;span class=&quot;hljs-keyword&quot;&gt;null == &lt;span class=&quot;hljs-keyword&quot;&gt;this.transactionListener) {    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码@1：如果transactionListener为空，则直接抛出异常。&lt;br/&gt;代码@2：调用defaultMQProducerImpl的sendMessageInTransaction方法。&lt;/p&gt;
&lt;p&gt;接下来重点分享sendMessageInTransaction方法&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;DefaultMQProducerImpl#&lt;span class=&quot;hljs-function&quot;&gt;sendMessageInTransaction
&lt;span class=&quot;hljs-keyword&quot;&gt;public TransactionSendResult &lt;span class=&quot;hljs-title&quot;&gt;sendMessageInTransaction&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final Message msg,
           &lt;span class=&quot;hljs-keyword&quot;&gt;final TransactionListener tranExecuter, &lt;span class=&quot;hljs-keyword&quot;&gt;final Object arg)  &lt;span class=&quot;hljs-keyword&quot;&gt;throws MQClientException {&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Step1：首先先阐述一下参数含义。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;final Message msg：消息&lt;/li&gt;
&lt;li&gt;TransactionListener tranExecuter：事务监听器&lt;/li&gt;
&lt;li&gt;Object arg：其他附加参数&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;DefaultMQProducerImpl#sendMessageInTransaction
SendResult sendResult = &lt;span class=&quot;hljs-keyword&quot;&gt;null;
MessageAccessor.putProperty(msg, MessageConst.PROPERTY_TRANSACTION_PREPARED, &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;);
MessageAccessor.putProperty(msg, MessageConst.PROPERTY_PRODUCER_GROUP, &lt;span class=&quot;hljs-keyword&quot;&gt;this.defaultMQProducer.getProducerGroup());
&lt;span class=&quot;hljs-keyword&quot;&gt;try {
       sendResult = &lt;span class=&quot;hljs-keyword&quot;&gt;this.send(msg);
} &lt;span class=&quot;hljs-keyword&quot;&gt;catch (Exception e) {
       &lt;span class=&quot;hljs-keyword&quot;&gt;throw &lt;span class=&quot;hljs-keyword&quot;&gt;new MQClientException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;send message Exception&quot;, e);
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Step2：在消息属性中增加两个属性：TRAN_MSG，其值为true，表示为事务消息；PGROUP：消息所属发送者组，然后以同步方式发送消息。在消息发送之前，会先检查消息的属性TRAN_MSG,如果存在并且值为true，则通过设置消息系统标记的方式，设置消息为MessageSysFlag.TRANSACTION_PREPARED_TYPE。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;DefaultMQProducerImpl#sendKernelImpl
&lt;span class=&quot;hljs-keyword&quot;&gt;final String tranMsg = msg.getProperty(MessageConst.PROPERTY_TRANSACTION_PREPARED);
&lt;span class=&quot;hljs-keyword&quot;&gt;if (tranMsg != &lt;span class=&quot;hljs-keyword&quot;&gt;null &amp;amp;&amp;amp; Boolean.parseBoolean(tranMsg)) {
       sysFlag |= MessageSysFlag.TRANSACTION_PREPARED_TYPE;
}

SendMessageProcessor#sendMessage
String traFlag = oriProps.get(MessageConst.PROPERTY_TRANSACTION_PREPARED);
&lt;span class=&quot;hljs-keyword&quot;&gt;if (traFlag != &lt;span class=&quot;hljs-keyword&quot;&gt;null &amp;amp;&amp;amp; Boolean.parseBoolean(traFlag)) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if (&lt;span class=&quot;hljs-keyword&quot;&gt;this.brokerController.getBrokerConfig().isRejectTransactionMessage()) {
             response.setCode(ResponseCode.NO_PERMISSION);
             response.setRemark(
                    &lt;span class=&quot;hljs-string&quot;&gt;&quot;the broker[&quot; + &lt;span class=&quot;hljs-keyword&quot;&gt;this.brokerController.getBrokerConfig().getBrokerIP1()
                        + &lt;span class=&quot;hljs-string&quot;&gt;&quot;] sending transaction message is forbidden&quot;);
             &lt;span class=&quot;hljs-keyword&quot;&gt;return response;
       }
      putMessageResult = &lt;span class=&quot;hljs-keyword&quot;&gt;this.brokerController.getTransactionalMessageService().prepareMessage(msgInner);
} &lt;span class=&quot;hljs-keyword&quot;&gt;else {
      putMessageResult = &lt;span class=&quot;hljs-keyword&quot;&gt;this.brokerController.getMessageStore().putMessage(msgInner);
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Step3：Broker端收到客户端发送消息请求后，判断消息类型。如果是事务消息，则调用TransactionalMessageService#prepareMessage方法，否则走原先的逻辑，调用MessageStore#putMessage方法将消息存入Broker服务端。&lt;br/&gt;本节重点阐述事务消息的实现原理，故接下来将重点关注prepareMessage方法，如想了解RocketMQ消息存储相关，可以关注作者源码分析RocketMQ系列。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;org.apache.rocketmq.broker.transaction.queue.TransactionalMessageServiceImpl#&lt;span class=&quot;hljs-function&quot;&gt;prepareMessage
&lt;span class=&quot;hljs-keyword&quot;&gt;public PutMessageResult &lt;span class=&quot;hljs-title&quot;&gt;prepareMessage&lt;span class=&quot;hljs-params&quot;&gt;(MessageExtBrokerInner messageInner) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return transactionalMessageBridge.putHalfMessage(messageInner);
 }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;step4：事务消息，将调用TransactionalMessageServiceImpl#prepareMessage方法，继而调用TransactionalMessageBridge#prepareMessage方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;TransactionalMessageBridge#&lt;span class=&quot;hljs-function&quot;&gt;parseHalfMessageInner
&lt;span class=&quot;hljs-keyword&quot;&gt;public PutMessageResult &lt;span class=&quot;hljs-title&quot;&gt;putHalfMessage&lt;span class=&quot;hljs-params&quot;&gt;(MessageExtBrokerInner messageInner) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return store.putMessage(parseHalfMessageInner(messageInner));
    }

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private MessageExtBrokerInner &lt;span class=&quot;hljs-title&quot;&gt;parseHalfMessageInner&lt;span class=&quot;hljs-params&quot;&gt;(MessageExtBrokerInner msgInner) {
        MessageAccessor.putProperty(msgInner, MessageConst.PROPERTY_REAL_TOPIC, msgInner.getTopic());
        MessageAccessor.putProperty(msgInner, MessageConst.PROPERTY_REAL_QUEUE_ID,
            String.valueOf(msgInner.getQueueId()));
        msgInner.setSysFlag(
            MessageSysFlag.resetTransactionValue(msgInner.getSysFlag(), MessageSysFlag.TRANSACTION_NOT_TYPE));
        msgInner.setTopic(TransactionalMessageUtil.buildHalfTopic());
        msgInner.setQueueId(&lt;span class=&quot;hljs-number&quot;&gt;0);
        msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));
        &lt;span class=&quot;hljs-keyword&quot;&gt;return msgInner;
    }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Step5：备份消息的原主题名称与原队列ID，然后取消消息的事务消息标签，重新设置消息的主题为：RMQ_SYS_TRANS_HALF_TOPIC，队列ID固定为0。然后调用MessageStore#putMessage方法将消息持久化，这里TransactionalMessageBridge桥接类，就是封装事务消息的相关流程，最终调用MessageStore完成消息的持久化。消息入库后，会继续回到DefaultMQProducerImpl#sendMessageInTransaction，上文的Step2后面，也就是通过同步将消息发送到消息服务端。&lt;/p&gt;
&lt;p&gt;注：这是事务消息Prepare状态的处理逻辑，消息是存储在消息服务器了，但存储的并不是原主题，而是RMQ_SYS_TRANS_HALF_TOPIC，故此时消费端是无法消费shen&lt;br/&gt;生产者发送的消息的。看到这里，如果对RocketMQ比较熟悉的话，肯定会有一个“定时任务”去取这个主题下的消息，然后则“合适”的时机将消息的主题恢复。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;DefaultMQProducerImpl#&lt;span class=&quot;hljs-function&quot;&gt;sendMessageInTransaction
&lt;span class=&quot;hljs-title&quot;&gt;switch &lt;span class=&quot;hljs-params&quot;&gt;(sendResult.getSendStatus()) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;case SEND_OK: {
                &lt;span class=&quot;hljs-keyword&quot;&gt;try {
                    &lt;span class=&quot;hljs-keyword&quot;&gt;if (sendResult.getTransactionId() != &lt;span class=&quot;hljs-keyword&quot;&gt;null) {
                        msg.putUserProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;__transactionId__&quot;, sendResult.getTransactionId());
                    }
                    String transactionId = msg.getProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX);
                    &lt;span class=&quot;hljs-keyword&quot;&gt;if (&lt;span class=&quot;hljs-keyword&quot;&gt;null != transactionId &amp;amp;&amp;amp; !&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;.equals(transactionId)) {
                        msg.setTransactionId(transactionId);
                    }
                    localTransactionState = tranExecuter.executeLocalTransaction(msg, arg);
                    &lt;span class=&quot;hljs-keyword&quot;&gt;if (&lt;span class=&quot;hljs-keyword&quot;&gt;null == localTransactionState) {
                        localTransactionState = LocalTransactionState.UNKNOW;
                    }

                    &lt;span class=&quot;hljs-keyword&quot;&gt;if (localTransactionState != LocalTransactionState.COMMIT_MESSAGE) {
                        log.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;executeLocalTransactionBranch return {}&quot;, localTransactionState);
                        log.info(msg.toString());
                    }
                } &lt;span class=&quot;hljs-keyword&quot;&gt;catch (Throwable e) {
                    log.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;executeLocalTransactionBranch exception&quot;, e);
                    log.info(msg.toString());
                    localException = e;
                }
            }
            &lt;span class=&quot;hljs-keyword&quot;&gt;break;
            &lt;span class=&quot;hljs-keyword&quot;&gt;case FLUSH_DISK_TIMEOUT:
            &lt;span class=&quot;hljs-keyword&quot;&gt;case FLUSH_SLAVE_TIMEOUT:
            &lt;span class=&quot;hljs-keyword&quot;&gt;case SLAVE_NOT_AVAILABLE:
                localTransactionState = LocalTransactionState.ROLLBACK_MESSAGE;
                &lt;span class=&quot;hljs-keyword&quot;&gt;break;
            &lt;span class=&quot;hljs-keyword&quot;&gt;default:
                &lt;span class=&quot;hljs-keyword&quot;&gt;break;
        }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Step6：如果消息发送成功，会回调TransactionListener#executeLocalTransaction方法，执行本地事务，并且返回本地事务状态为LocalTransactionState，枚举值如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;COMMIT_MESSAGE,&lt;/li&gt;
&lt;li&gt;ROLLBACK_MESSAGE,&lt;/li&gt;
&lt;li&gt;UNKNOW&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意：TransactionListener#executeLocalTransaction是在发送者成功发送PREPARED消息后，会执行本地事务方法，然后返回本地事务状态；如果PREPARED消息发送失败，则不会调用TransactionListener#executeLocalTransaction，并且本地事务消息，设置为LocalTransactionState.ROLLBACK_MESSAGE，表示消息需要被回滚。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;DefaultMQProducerImpl#sendMessageInTransaction
&lt;span class=&quot;hljs-keyword&quot;&gt;try {
&lt;span class=&quot;hljs-keyword&quot;&gt;this.endTransaction(sendResult, localTransactionState, localException);
} &lt;span class=&quot;hljs-keyword&quot;&gt;catch (Exception e) {
log.warn(&lt;span class=&quot;hljs-string&quot;&gt;&quot;local transaction execute &quot; + localTransactionState + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, but end broker transaction failed&quot;, e);
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;step7：调用endTransaction方法结束事务（提交或回滚）。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;DefaultMQProducerImpl#endTransaction
EndTransactionRequestHeader requestHeader = &lt;span class=&quot;hljs-keyword&quot;&gt;new EndTransactionRequestHeader();
requestHeader.setTransactionId(transactionId);
requestHeader.setCommitLogOffset(id.getOffset());
&lt;span class=&quot;hljs-keyword&quot;&gt;switch (localTransactionState) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case COMMIT_MESSAGE:
         requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_COMMIT_TYPE);
         &lt;span class=&quot;hljs-keyword&quot;&gt;break;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case ROLLBACK_MESSAGE:
         requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_ROLLBACK_TYPE);
         &lt;span class=&quot;hljs-keyword&quot;&gt;break;
     &lt;span class=&quot;hljs-keyword&quot;&gt;case UNKNOW:
         requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_NOT_TYPE);
         &lt;span class=&quot;hljs-keyword&quot;&gt;break;
     &lt;span class=&quot;hljs-keyword&quot;&gt;default:
         &lt;span class=&quot;hljs-keyword&quot;&gt;break;
}
requestHeader.setProducerGroup(&lt;span class=&quot;hljs-keyword&quot;&gt;this.defaultMQProducer.getProducerGroup());
requestHeader.setTranStateTableOffset(sendResult.getQueueOffset());
requestHeader.setMsgId(sendResult.getMsgId());&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;step8：组装结束事务请求，主要参数为：事务ID、事务操作（commitOrRollback)、消费组、消息队列偏移量、消息ID，fromTransactionCheck，从这里发出的请求，默认为false。Broker端的请求处理器为：EndTransactionProcessor。&lt;/p&gt;
&lt;p&gt;step9：EndTransactionProcessor根据事务提交类型：TRANSACTION_COMMIT_TYPE（提交事务）、TRANSACTION_ROLLBACK_TYPE（回滚事务）、TRANSACTION_NOT_TYPE（忽略该请求）。&lt;/p&gt;
&lt;p&gt;到目前为止，已详细梳理了RocketMQ事务消息的发送流程，更加准确的说是Prepare状态的消息发送流程。具体流程如图所示：&lt;br/&gt;&lt;img title=&quot;clipboard&quot; src=&quot;https://yqfile.alicdn.com/b0bfa9bc730e64d5d03312968f1a2b07132364f1.png&quot; alt=&quot;clipboard&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本文到这里，初步展示了事务消息的发送流程，总的说来，RocketMQ的事务消息发送使用二阶段提交思路，首先，在消息发送时，先发送消息类型为Prepread类型的消息，然后在将该消息成功存入到消息服务器后，会回调TransactionListener#executeLocalTransaction，执行本地事务状态回调函数，然后根据该方法的返回值，结束事务：&lt;br/&gt;1、COMMIT_MESSAGE ：提交事务。&lt;br/&gt;2、ROLLBACK_MESSAGE：回滚事务。&lt;br/&gt;3、UNKNOW：未知事务状态，此时消息服务器(Broker)收到EndTransaction命令时，将不对这种消息做处理，消息还处于Prepared类型，存储在主题为：RMQ_SYS_TRANS_HALF_TOPIC的队列中，然后消息发送流程将结束，那这些消息如何提交或回滚呢？&lt;/p&gt;
&lt;p data-spm-anchor-id=&quot;a2c4e.11153940.blogcont684232.i2.784569fdYHWFPt&quot;&gt;为了实现避免客户端需要再次发送提交、回滚命令，RocketMQ会采取定时任务将RMQ_SYS_TRANS_HALF_TOPIC中的消息取出，然后回到客户端，判断该消息是否需要提交或回滚，来完成事务消息的声明周期，该部分内容将在下节重点探讨。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/684232?utm_content=g_1000035964&quot; target=&quot;_blank&quot;&gt;原文链接&lt;/a&gt;&lt;br/&gt;本文为云栖社区原创内容，未经允许不得转载。&lt;/p&gt;
</description>
<pubDate>Tue, 08 Jan 2019 07:03:00 +0000</pubDate>
<dc:creator>阿里云云栖社区</dc:creator>
<og:description>在阅读本文前，若您对RocketMQ技术感兴趣，请加入 RocketMQ技术交流群 根据上文的描述，发送事务消息的入口为： 代码@1：如果transactionListener为空，则直接抛</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yunqishequ/p/10239047.html</dc:identifier>
</item>
<item>
<title>java实现几种常用排序:冒泡排序 - LearnAndGet</title>
<link>http://www.cnblogs.com/LearnAndGet/p/10237399.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LearnAndGet/p/10237399.html</guid>
<description>&lt;p&gt;冒泡排序是我们得最多的排序方式之一，原因是简单易实现，且原理易懂。顾名思义，冒泡排序，它的排序过程就像水中的气泡一样，一个一个上浮到水面。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1084627/201901/1084627-20190108142731138-369925737.gif&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1084627/201901/1084627-20190108101356028-1670962340.png&quot;/&gt;&lt;/p&gt;

&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * @Author {LearnAndGet}
 * @Time 2019年1月8日
 * @Discription:
 */
package com.sort;

import java.util.Arrays;

public class MaopaoSort {
    
    static int[] array = {3,2,4,1,5,0};
    
    public static void maopaoSort(int[] a) 
    {
        //外层循环，是需要进行比较的轮数，一共进行5次即可
        for(int i=0;i&amp;lt;a.length-1;i++) 
        {
            //内存循环，是每一轮中进行的两两比较
            for(int j=0;j&amp;lt;a.length-1;j++) 
            {
                if(a[j] &amp;gt; a[j+1]) 
                {
                    int temp = a[j];
                    a[j] = a[j+1];
                    a[j+1] = temp; 
                }
            }
            System.out.println(&quot;第&quot;+(i+1)+&quot;轮排序后的数组为: &quot;+Arrays.toString(a));
        }
    }
    
    public static void main(String[] args) {
        maopaoSort(array);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出结果&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;t&quot;&gt;
&lt;code&gt;第1轮排序后的数组为: [2, 3, 1, 4, 0, 5]
第2轮排序后的数组为: [2, 1, 3, 0, 4, 5]
第3轮排序后的数组为: [1, 2, 0, 3, 4, 5]
第4轮排序后的数组为: [1, 0, 2, 3, 4, 5]
第5轮排序后的数组为: [0, 1, 2, 3, 4, 5]&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;1 .观察上述代码和运行结果，我们可以发现，当第一轮结束后，最后一个数字一定是数组中最大的元素，那么我们在进行第二趟的两两比较时，实际上是没有必要再对第5个和第6个进行比较的。那么我们可以修改代码如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static void maopaoSort(int[] a) 
{
    //外层循环，是需要进行比较的轮数，一共进行5次即可
    for(int i=0;i&amp;lt;a.length-1;i++) 
    {
        //内存循环，是每一轮中进行的两两比较
        //并且每一轮结束后，下一次的两两比较中可以少比较一次
        for(int j=0;j&amp;lt;a.length-i-1;j++) 
        {
            if(a[j] &amp;gt; a[j+1]) 
            {
                int temp = a[j];
                a[j] = a[j+1];
                a[j+1] = temp; 
            }
        }
        System.out.println(&quot;第&quot;+(i+1)+&quot;轮排序后的数组为: &quot;+Arrays.toString(a));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;继续运行后，可以发现运行结果是一样的。&lt;/p&gt;
&lt;p&gt;2 .当我们用数组：{1,2,0,3,5,4}来测试上述冒泡排序时，运行结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;第1轮排序后的数组为: [1, 0, 2, 3, 4, 5]
第2轮排序后的数组为: [0, 1, 2, 3, 4, 5]
第3轮排序后的数组为: [0, 1, 2, 3, 4, 5]
第4轮排序后的数组为: [0, 1, 2, 3, 4, 5]
第5轮排序后的数组为: [0, 1, 2, 3, 4, 5]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，在第2轮排序完成后，其实我们就已经的到了排好序的数组，但是我们的程序并不知道，仍然进行了后续的无用工作。那么，我们如何来让程序知道已经完成好排序了呢？&lt;/p&gt;
&lt;p&gt;这里可以想到，当某一轮的两两比较中，如果都没有发生数组元素的互换，那么其实排序工作已经完成了，所以我们可以考虑在程序中加入一个flag，默认为false，含义是该轮比较中是否发生了元素互换，当程序中执行到元素互换时，将该flag置为true，当该轮比较结束时，若flag为flase，则说明该轮比较未发生元素互换，那么排序完成，若flag为true，说明本轮比较仍然有元素互换，需要继续进行下轮排序。代码实现如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * @Author {LearnAndGet}
 * @Time 2019年1月8日
 * @Discription:
 */
package com.sort;

import java.util.Arrays;

public class MaopaoSort {
    
    static int[] array = {1,2,0,3,5,4};
    
    public static void maopaoSort(int[] a) 
    {
        //外层循环，是需要进行比较的轮数，一共进行5次即可
        for(int i=0;i&amp;lt;a.length-1;i++) 
        {
            boolean flag = false;
            //内存循环，是每一轮中进行的两两比较
            for(int j=0;j&amp;lt;a.length-i-1;j++) 
            {
                if(a[j] &amp;gt; a[j+1]) 
                {
                    int temp = a[j];
                    a[j] = a[j+1];
                    a[j+1] = temp;
                    flag = true;
                }
            }
            System.out.println(&quot;第&quot;+(i+1)+&quot;轮排序后的数组为: &quot;+Arrays.toString(a));
            if(flag == false)
            {
                System.out.println(&quot;本轮中的两两比较未发生元素互换，排序已经完成啦&quot;);
                return;
            }
        }
    }
    
    public static void main(String[] args) {
        maopaoSort(array);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;第1轮排序后的数组为: [1, 0, 2, 3, 4, 5]
第2轮排序后的数组为: [0, 1, 2, 3, 4, 5]
第3轮排序后的数组为: [0, 1, 2, 3, 4, 5]
本轮中的两两比较未发生元素互换，排序已经完成啦&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;冒泡排序是一种用时间换空间的排序方法，最坏情况是把顺序的排列变成逆序，或者把逆序的数列变成顺序。在这种情况下，每一次比较都需要进行交换运算。举个例子来说，一个数列 5 4 3 2 1 进行冒泡升序排列&lt;/p&gt;
&lt;p&gt;第一轮的两两比较，需要比较4次；得到 4 3 2 1 5&lt;br/&gt;第二轮的两两比较，需要比较3次；得到 3 2 1 4 5&lt;br/&gt;第三轮的两两比较，需要比较2次；得到 2 1 3 4 5&lt;br/&gt;第四轮的两两比较，需要比较1次；得到 1 2 3 4 5&lt;/p&gt;
&lt;p&gt;所以总的比较次数为 4 + 3 + 2 + 1 = 10次&lt;br/&gt;对于n位的数列则有比较次数为 (n-1) + (n-2) + ... + 1 = n * (n - 1) / 2，这就得到了最大的比较次数。&lt;br/&gt;而O(N^2)表示的是复杂度的数量级。举个例子来说，如果n = 10000，那么 n(n-1)/2 = (n^2 - n) / 2 = (100000000 - 10000) / 2，相对10^8来说，10000小的可以忽略不计了，所以总计算次数约为0.5 * N^2。用O(N^2)就表示了其数量级（忽略前面系数0.5）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;综上所述，冒泡排序的时间复杂度为：O(n²)&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 08 Jan 2019 06:29:00 +0000</pubDate>
<dc:creator>LearnAndGet</dc:creator>
<og:description>一.冒泡排序介绍 冒泡排序是我们得最多的排序方式之一，原因是简单易实现，且原理易懂。顾名思义，冒泡排序，它的排序过程就像水中的气泡一样，一个一个上浮到水面。 二.冒泡排序原理分析 三.冒泡排序代码实现</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LearnAndGet/p/10237399.html</dc:identifier>
</item>
<item>
<title>并发编程（九）—— Java 并发队列 BlockingQueue 实现之 LinkedBlockingQueue 源码分析 - chen_hao</title>
<link>http://www.cnblogs.com/java-chen-hao/p/10234833.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/java-chen-hao/p/10234833.html</guid>
<description>&lt;p&gt;在看源码之前，通过查询API发现对LinkedBlockingQueue特点的简单介绍：&lt;/p&gt;
&lt;p&gt;1、LinkedBlockingQueue是一个由链表实现的有界队列阻塞队列。&lt;br/&gt;2、新元素插入到队列的尾部，队列获取操作则是从队列头部开始获得元素&lt;br/&gt;3、大小默认值为Integer.MAX_VALUE，所以我们在使用LinkedBlockingQueue时建议手动传值，为其提供我们所需的大小，避免队列过大造成机器负载或者内存爆满等情况。&lt;/p&gt;
&lt;p&gt;4、链接队列的吞吐量通常要高于基于数组的对列（ArrayBlockingQueue）,但是在大多数并发应用程序中，其可预知的性能要低&lt;/p&gt;
&lt;h2 id=&quot;arrayblockingqueue的实现原理剖析&quot;&gt;&lt;span&gt;源码剖析&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;通常情况下，我们建议创建指定大小的LinkedBlockingQueue阻塞队列。在正常情况下，链接队列的吞吐量要高于基于数组的队列（ArrayBlockingQueue），因为其内部实现添加和删除操作使用的两个ReenterLock来控制并发执行，而ArrayBlockingQueue内部只是使用一个ReenterLock控制并发，因此LinkedBlockingQueue的吞吐量要高于ArrayBlockingQueue。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其构造函数如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认大小为Integer.MAX_VALUE&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; LinkedBlockingQueue() {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;(Integer.MAX_VALUE);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建指定大小为capacity的阻塞队列&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; LinkedBlockingQueue(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; capacity) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt; (capacity &amp;lt;= 0) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IllegalArgumentException();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;      &lt;span&gt;this&lt;/span&gt;.capacity =&lt;span&gt; capacity;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;      last = head = &lt;span&gt;new&lt;/span&gt; Node&amp;lt;E&amp;gt;(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们先看看LinkedBlockingQueue的内部成员变量：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LinkedBlockingQueue&amp;lt;E&amp;gt; &lt;span&gt;extends&lt;/span&gt; AbstractQueue&amp;lt;E&amp;gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;implements&lt;/span&gt; BlockingQueue&amp;lt;E&amp;gt;&lt;span&gt;, java.io.Serializable {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;     * 节点类，用于存储数据
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Node&amp;lt;E&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        E item;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;         * One of:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;         * - the real successor Node
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;         * - this Node, meaning the successor is head.next
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;         * - null, meaning there is no successor (this is the last node)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;          &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         Node&amp;lt;E&amp;gt;&lt;span&gt; next;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         Node(E x) { item =&lt;span&gt; x; }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 阻塞队列的大小，默认为Integer.MAX_VALUE &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; capacity;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 当前阻塞队列中的元素个数 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; AtomicInteger count = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AtomicInteger();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;     * 阻塞队列的头结点
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;transient&lt;/span&gt; Node&amp;lt;E&amp;gt;&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;     * 阻塞队列的尾节点
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; Node&amp;lt;E&amp;gt;&lt;span&gt; last;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 获取并移除元素时使用的锁，如take, poll, etc &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ReentrantLock takeLock = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ReentrantLock();
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; notEmpty条件对象，当队列没有数据时用于挂起执行删除的线程 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Condition notEmpty =&lt;span&gt; takeLock.newCondition();
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 添加元素时使用的锁如 put, offer, etc &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ReentrantLock putLock = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ReentrantLock();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; notFull条件对象，当队列数据已满时用于挂起执行添加的线程 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Condition notFull =&lt;span&gt; putLock.newCondition();
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;与ArrayBlockingQueue不同的是，LinkedBlockingQueue内部分别使用了takeLock 和 putLock 对并发进行控制，也就是说，添加和删除操作并不是互斥操作，可以同时进行，这样也就可以大大提高吞吐量。这里再次强调如果没有给LinkedBlockingQueue指定容量大小，其默认值将是Integer.MAX_VALUE，如果存在添加速度大于删除速度时候，有可能会内存溢出，这点在使用前希望慎重考虑。&lt;/p&gt;
&lt;p&gt;这里用了两个锁，两个 Condition，简单介绍如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;takeLock 和 notEmpty 怎么搭配&lt;/strong&gt;：如果要获取（take）一个元素，需要获取 takeLock 锁，但是获取了锁还不够，如果队列此时为空，还需要队列不为空（notEmpty）这个条件（Condition）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;putLock 需要和 notFull 搭配&lt;/strong&gt;：如果要插入（put）一个元素，需要获取 putLock 锁，但是获取了锁还不够，如果队列此时已满，还需要队列不是满的（notFull）这个条件（Condition）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1168971/201901/1168971-20190107171109398-746679734.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下面我们看看其其内部添加过程和删除过程是如何实现的。&lt;/p&gt;
&lt;h3 id=&quot;添加方法的实现原理&quot;&gt;&lt;span&gt;添加方法的实现原理&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;对于添加方法，主要指的是add，offer以及put，这里先看看add方法和offer方法的实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; add(E e) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (offer(e))
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;          &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;      &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;          &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&quot;Queue full&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从源码可以看出，add方法间接调用的是offer方法，如果add方法添加失败将抛出IllegalStateException异常，添加成功则返回true，那么下面我们直接看看offer的相关方法实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; offer(E e) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加元素为null直接抛出异常&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt; (e == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullPointerException();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取队列的个数&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;       &lt;span&gt;final&lt;/span&gt; AtomicInteger count = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.count;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断队列是否已满&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; (count.get() ==&lt;span&gt; capacity)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;           &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;       &lt;span&gt;int&lt;/span&gt; c = -1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;构建节点&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;       Node&amp;lt;E&amp;gt; node = &lt;span&gt;new&lt;/span&gt; Node&amp;lt;E&amp;gt;&lt;span&gt;(e);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;       &lt;span&gt;final&lt;/span&gt; ReentrantLock putLock = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.putLock;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此时可能有多个线程都在执行添加操作，抢占锁
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有抢占到锁的线程会加入到putLock的阻塞队列，并且挂起&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;      putLock.lock();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;       &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;再次判断队列是否已满，考虑并发情况&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;           &lt;span&gt;if&lt;/span&gt; (count.get() &amp;lt;&lt;span&gt; capacity) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;               enqueue(node);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加元素&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;               c = count.getAndIncrement();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;拿到当前未添加新元素时的队列长度
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果容量还没满&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;               &lt;span&gt;if&lt;/span&gt; (c + 1 &amp;lt;&lt;span&gt; capacity)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此时会唤醒上面第15行处添加到putLock的阻塞队列的线程，被唤醒的线程满足条件后接着唤醒下一个，直到队列被添加满&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                   notFull.signal();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;唤醒下一个添加线程，执行添加操作&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;          }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;       } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;          putLock.unlock();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 由于存在添加锁和消费锁，而消费锁和添加锁都会持续唤醒等到线程，因此count肯定会变化。
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里的if条件表示如果队列中还有1条数据&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; (c == 0&lt;span&gt;) 
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         signalNotEmpty();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果还存在数据那么就唤醒消费锁&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; c &amp;gt;= 0; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加成功返回true，否则返回false&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;入队操作&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; enqueue(Node&amp;lt;E&amp;gt;&lt;span&gt; node) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;队列尾节点指向新的node节点&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;      last = last.next =&lt;span&gt; node;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;signalNotEmpty方法&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; signalNotEmpty() {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;       &lt;span&gt;final&lt;/span&gt; ReentrantLock takeLock = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.takeLock;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;      takeLock.lock();
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;唤醒获取并删除元素的线程&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;          notEmpty.signal();
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;       } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;          takeLock.unlock();
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里的Offer()方法做了两件事，第一件事是判断队列是否满，满了就直接释放锁，没满就将节点封装成Node入队，然后再次判断队列添加完成后是否已满，不满就继续唤醒等到在条件对象notFull上的添加线程。第二件事是，判断是否需要唤醒等到在notEmpty条件对象上的消费线程。这里我们可能会有点疑惑，为什么添加完成后是继续唤醒在条件对象notFull上的添加线程而不是像ArrayBlockingQueue那样直接唤醒notEmpty条件对象上的消费线程？而又为什么要当if (c == 0)时才去唤醒消费线程呢？&lt;/p&gt;
&lt;p&gt;　　唤醒添加线程的原因，在添加新元素完成后，会判断队列是否已满，不满就继续唤醒在条件对象notFull上的添加线程，这点与前面分析的ArrayBlockingQueue很不相同，在ArrayBlockingQueue内部完成添加操作后，会直接唤醒消费线程对元素进行获取，这是因为ArrayBlockingQueue只用了一个ReenterLock同时对添加线程和消费线程进行控制，这样如果在添加完成后再次唤醒添加线程的话，消费线程可能永远无法执行，而对于LinkedBlockingQueue来说就不一样了，其内部对添加线程和消费线程分别使用了各自的ReenterLock锁对并发进行控制，也就是说添加线程和消费线程是不会互斥的，所以添加锁只要管好自己的添加线程即可，添加线程自己直接唤醒自己的其他添加线程，如果没有等待的添加线程，直接结束了。如果有就直到队列元素已满才结束挂起，当然offer方法并不会挂起，而是直接结束，只有put方法才会当队列满时才执行挂起操作。注意消费线程的执行过程也是如此。这也是为什么LinkedBlockingQueue的吞吐量要相对大些的原因。&lt;/p&gt;
&lt;p&gt;　　为什么要判断if (c == 0)时才去唤醒消费线程呢，这是因为消费线程一旦被唤醒是一直在消费的（前提是有数据），所以c值是一直在变化的，c值是添加完元素前队列的大小，此时c只可能是0或c&amp;gt;0，如果是c=0，那么说明之前消费线程已停止，条件对象上可能存在等待的消费线程，添加完数据后应该是c+1，那么有数据就直接唤醒等待消费线程，如果没有就结束啦，等待下一次的消费操作。如果c&amp;gt;0那么消费线程就不会被唤醒，只能等待下一个消费操作（poll、take、remove）的调用，那为什么不是条件c&amp;gt;0才去唤醒呢？我们要明白的是消费线程一旦被唤醒会和添加线程一样，一直不断唤醒其他消费线程，如果添加前c&amp;gt;0，那么很可能上一次调用的消费线程后，数据并没有被消费完，条件队列上也就不存在等待的消费线程了，还有可能，消费线程正在消费，消费队列中也有等待线程，但是消费线程消费完会自动唤醒下一个等待的消费线程，所以c&amp;gt;0唤醒消费线程得意义不是很大，当然如果添加线程一直添加元素，那么一直c&amp;gt;0，消费线程执行的换就要等待下一次调用消费操作了（poll、take、remove）。&lt;/p&gt;

&lt;p&gt;接下来我们看看put方法，它是一个阻塞添加的方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; put(E e) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (e == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullPointerException();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; c = -1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     Node&amp;lt;E&amp;gt; node = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node(e);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;final&lt;/span&gt; ReentrantLock putLock = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.putLock;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;final&lt;/span&gt; AtomicInteger count = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.count;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    putLock.lockInterruptibly();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果队列满，等待 notFull 的条件满足。&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (count.get() ==&lt;span&gt; capacity) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            notFull.await();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 入队&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        enqueue(node);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; count 原子加 1，c 还是加 1 前的值&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         c =&lt;span&gt; count.getAndIncrement();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (c + 1 &amp;lt;&lt;span&gt; capacity)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            notFull.signal();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 入队后，释放掉 putLock&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        putLock.unlock();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (c == 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        signalNotEmpty();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;put 和 offer最大的区别是put方法是阻塞的，看offer 方法中的第6行，如果队列满了，则直接返回false；put方法的第10行，如果队列满了，则添加到 notFull 的等待队列中并挂起，其他的基本都一样。&lt;/p&gt;

&lt;h3 id=&quot;移除方法的实现原理&quot;&gt;&lt;span&gt;移除方法的实现原理&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;我们先来看看&lt;span class=&quot;hljs-title&quot;&gt;poll()方法&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; E poll() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前队列的大小&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; AtomicInteger count = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.count;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (count.get() == 0)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有元素直接返回null&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         E x = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; c = -1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; ReentrantLock takeLock = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.takeLock;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        takeLock.lock();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断队列是否有数据&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (count.get() &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果有，直接删除并获取该元素值&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;                 x =&lt;span&gt; dequeue();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前队列大小减一&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;                 c =&lt;span&gt; count.getAndDecrement();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果队列未空，继续唤醒等待在条件对象notEmpty上的消费线程&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (c &amp;gt; 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    notEmpty.signal();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            takeLock.unlock();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断c是否等于capacity，这是因为如果满说明NotFull条件对象上
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可能存在等待的添加线程&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (c ==&lt;span&gt; capacity)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            signalNotFull();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; x;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt; E dequeue() {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         Node&amp;lt;E&amp;gt; h = head;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取头结点&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         Node&amp;lt;E&amp;gt; first =&lt;span&gt; h.next; 获取头结的下一个节点（要删除的节点）
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         h.next = h; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; help GC&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自己next指向自己，即被删除&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         head = first;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新头结点&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         E x = first.item;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取删除节点的值&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         first.item = &lt;span&gt;null&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清空数据，因为first变成头结点是不能带数据的，这样也就删除队列的带数据的第一个节点&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; x;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;poll方法也比较简单，如果队列没有数据就返回null，如果队列有数据，那么就取出来，如果队列还有数据那么唤醒等待在条件对象notEmpty上的消费线程。然后判断if (c == capacity)为true就唤醒添加线程，这点与前面分析if(c==0)是一样的道理。因为只有可能队列满了，notFull条件对象上才可能存在等待的添加线程。&lt;/p&gt;
&lt;p&gt;我们再看看take()方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; E take() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        E x;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; c = -1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前队列大小&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; AtomicInteger count = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.count;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; ReentrantLock takeLock = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.takeLock;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         takeLock.lockInterruptibly();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可中断&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果队列没有数据，挂机当前线程到条件对象的等待队列中&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (count.get() == 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                notEmpty.await();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果存在数据直接删除并返回该数据&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             x =&lt;span&gt; dequeue();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             c = count.getAndDecrement();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;队列大小减1&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (c &amp;gt; 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 notEmpty.signal();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;还有数据就唤醒后续的消费线程&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            takeLock.unlock();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;满足条件，唤醒条件对象上等待队列中的添加线程&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (c ==&lt;span&gt; capacity)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            signalNotFull();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; x;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;take方法是一个可阻塞可中断的移除方法，主要做了两件事，一是，如果队列没有数据就挂起当前线程到 notEmpty条件对象的等待队列中一直等待，如果有数据就删除节点并返回数据项，同时唤醒后续消费线程，二是尝试唤醒条件对象notFull上等待队列中的添加线程。 到此关于remove、poll、take的实现也分析完了，其中只有take方法具备阻塞功能。&lt;/p&gt;
&lt;h2 id=&quot;linkedblockingqueue和arrayblockingqueue迥异&quot;&gt;&lt;span&gt;LinkedBlockingQueue和ArrayBlockingQueue迥异&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;对于LinkedBlockingQueue和ArrayBlockingQueue的基本使用以及内部实现原理我们已较为熟悉了，这里我们就对它们两间的区别来个小结&lt;/p&gt;
&lt;p&gt;1.队列大小有所不同，ArrayBlockingQueue是有界的初始化必须指定大小，而LinkedBlockingQueue可以是有界的也可以是无界的(Integer.MAX_VALUE)，对于后者而言，当添加速度大于移除速度时，在无界的情况下，可能会造成内存溢出等问题。&lt;/p&gt;
&lt;p&gt;2.数据存储容器不同，ArrayBlockingQueue采用的是数组作为数据存储容器，而LinkedBlockingQueue采用的则是以Node节点作为连接对象的链表。&lt;/p&gt;
&lt;p&gt;3.由于ArrayBlockingQueue采用的是数组的存储容器，因此在插入或删除元素时不会产生或销毁任何额外的对象实例，而LinkedBlockingQueue则会生成一个额外的Node对象。这可能在长时间内需要高效并发地处理大批量数据的时，对于GC可能存在较大影响。&lt;/p&gt;
&lt;p&gt;4.两者的实现队列添加或移除的锁不一样，ArrayBlockingQueue实现的队列中的锁是没有分离的，即添加操作和移除操作采用的同一个ReenterLock锁，而LinkedBlockingQueue实现的队列中的锁是分离的，其添加采用的是putLock，移除采用的则是takeLock，这样能大大提高队列的吞吐量，也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列的并发性能。&lt;/p&gt;

</description>
<pubDate>Tue, 08 Jan 2019 06:17:00 +0000</pubDate>
<dc:creator>chen_hao</dc:creator>
<og:description>LinkedBlockingQueue 在看源码之前，通过查询API发现对LinkedBlockingQueue特点的简单介绍： 1、LinkedBlockingQueue是一个由链表实现的有界队列阻</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/java-chen-hao/p/10234833.html</dc:identifier>
</item>
<item>
<title>从壹开始 [ Nuxt.js ] 之一 || 为开源收录Bug之 TiBug项目 开篇讲 - 老张的哲学</title>
<link>http://www.cnblogs.com/laozhang-is-phi/p/10236645.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laozhang-is-phi/p/10236645.html</guid>
<description>&lt;p&gt;哈喽大家周二好呀，刚刚经历过了几天火车抢票，整个人都不好了，不知道小伙伴对今年的春节是否还一如既往的期待呢，眼看都要春节了，本来也想写篇2018总结篇，但是怕不免会出现鸡汤文的窠臼嫌疑，想想还是算了，这几天和老李聊起来关于写博客文章，总感觉这一系列还没有写完，或者说还有一些没有收尾好，眼看就要春节了，周末我也好好的整理整理思路，决定临时开一个4-6篇的小系列文章 —— 基于Nuxt.js框架的提Bug小项目（命名为&lt;span&gt;TiBug&lt;/span&gt;），当然以后会增加更多的功能，这个只是1.0版本，你一定好奇为啥要写这个呢，请听我慢慢道来：&lt;/p&gt;

&lt;h3&gt;1、Github源地址&lt;/h3&gt;
&lt;p&gt;前端前台（支持SSR的Nuxt框架，&lt;span&gt;目前还未提交Code，预计春节前全部完成&lt;/span&gt;）：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/anjoy8/TiBug.Nuxt&quot; target=&quot;_blank&quot;&gt;https://github.com/anjoy8/TiBug.Nuxt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;前端后台：（Vue）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;待开发&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;后端：（Blog.Core）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/anjoy8/Blog.Core&quot; target=&quot;_blank&quot;&gt;https://github.com/anjoy8/Blog.Core&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;2、文章目录&lt;/h3&gt;
&lt;p&gt; 持续更新中，预计会有4~6篇（后端接口开发，nuxt初始搭建、调用接口设计页面、部署服务器）：&lt;/p&gt;



&lt;h3&gt;&lt;strong&gt;A、鲜有人会有收集Bug的想法&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt; 还记得写第一篇文章的时候，我就说的是我写文章是为了推动.net core社区的队伍壮大，所以主要致力于入门和初级的开发者，写了16万字，好像还没有收到那些大神们的鼓励，内心是尴尬的，不过没关系，依旧挡不住我的热情，现在大家可以翻开各种博客园、简书、CSDN等等，到处都是如何如何零基础入门，但是把人带过来了，又很少有时间和精力去手把手教别人，我承认我也是，只能尽量的帮助每一个小伙伴，提供思路，有一些小伙伴半天甚至一天都卡在了一个小问题上，我就会让他们把代码发给我，我帮忙调试，下边就是我的电脑里收到的群里小伙伴发给我，让我帮忙调试 BUG 的代码，我以文件夹的形式存放，都小心翼翼保存着：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201901/1468246-20190108110208195-351624476.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;而且群里边，也是都会有一些相同不同的问题出现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201901/1468246-20190108134539085-281137846.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;这个时候我就在想，现在不仅很多 Github 上没有对项目的讲解（只有如何使用，没有如何开发），有讲解博文的吧，却没有太多精力去照顾那些真正入门的小伙伴，所以我就萌发了一个思路，一个项目，专门给我的这两个系列收集BUG，当然以后还会有，目前是 NetCore、Vue、DDD这三块，我的想法是，每一个小伙伴如果遇到了Bug，可以放到系统里，收集起来，当下一个入门的小伙伴也遇到问题的时候，可以在系统里看看，毕竟常见的就那么多，比如：&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Swagger如何调试？&lt;/p&gt;
&lt;p&gt;.NetCore api 路由重载报错，为啥？&lt;/p&gt;
&lt;p&gt;依赖注入报错了，怎么调试？&lt;/p&gt;
&lt;p&gt;JWT的Token校验的时候异常？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 我在QQ群里已经回答了不下50遍了感觉，所以我就想有这么一个记录Bug的系统，不仅可以让新来的小伙伴可以有章可循，还可以平时的时候多翻翻看看，加深一下。&lt;/p&gt;
&lt;p&gt;如果你说，Bug嘛还是得让自己调试，自己调试会了，就会学的更多，没错，我刚开始也是这么想的，可是有时候真的是一个小Bug能卡住两天，那个心情，我也是懂得的，毕竟入门和中高级的思维真的不一样。&lt;/p&gt;
&lt;p&gt;这就是我写这个系列的目前之一，后来想想如果单独写一个MVC，毕竟是很小的一个，三四个页面的样子，这么小，真是没必要。&lt;/p&gt;

&lt;h3&gt;B、我目前还没有一个成型的项目&lt;/h3&gt;
&lt;p&gt;因为只有三四个页面的顾虑，我迟迟没有开动，直到这几天有小伙伴问我，有没有成型的项目在线上，我虽然有两个，也在Github上，比如这个 &lt;a href=&quot;http://123.206.33.109:8077&quot; target=&quot;_blank&quot;&gt;http://123.206.33.109:8077&lt;/a&gt;(就是第一个系列的Vue项目)，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201901/1468246-20190108112718465-1353150641.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;但是当时只是为了讲解知识点，样式是真的丑陋不堪，我也好几次拿不出手，所以就想着有一个成型的项目可以展示出来，不仅仅是有数据，还要页面好看，功能齐全，有授权，有CURD至少，所以就有动力要把这个提上日程了，上边的顾虑也就是没有了，那要一个什么样的框架呢，也一直迟迟没有定好，直到我想到下边这个问题。&lt;/p&gt;

&lt;h3&gt;C、Blog.Core中哪些技术不足&lt;/h3&gt;
&lt;p&gt; 其实这个系列是我的第一个系列《&lt;a id=&quot;post_title_link_9495618&quot; href=&quot;https://www.cnblogs.com/laozhang-is-phi/p/9495618.html&quot;&gt;从壹开始前后端分离【 .NETCore2.1 +Vue 2 +AOP+DI】&lt;/a&gt;》的补充篇，那既然是补充，肯定会有上一个系列遗漏的问题，那是什么呢，可能还有其他的（比如&lt;span&gt;Docker部署还没写&lt;/span&gt;），但是Nuxt.js 这一直是我的一块心病（如果你是一直跟着我的系列教程的，一定知道 Nuxt 是什么框架，不知道的请翻看我的说明文章《&lt;a id=&quot;post_title_link_9682289&quot; href=&quot;https://www.cnblogs.com/laozhang-is-phi/p/9682289.html&quot;&gt;二七║ Nuxt 基础：框架初探&lt;/a&gt;》），现在 Nuxt 不仅又有更新了，比较丰富和人性化了，而且我当时开发的很糟糕，还没有部署和发布。所以既然上边已经笃定要写一个这样的项目了，就索性继续用 Nuxt.js 框架来写，我也是天天泡在 Github 上找合适的代码，很可惜，要么Clone 下来没办法运行，要么没有文章讲解，只能自己摸索，正好我就从新开始，一步步写下来，让那些入门 Nuxt.js 的小伙伴，能从新建到开发，最后部署，有一定的理解，前天我终于找到了一个好看的博客，是一个开源的项目，不知道作者有没有看我的文章，我这里帮你宣传一波，肯定不会抄他的，只是参考了下他的布局，大家可以支持他下，我也把他的地址放到了我博客园公告里了：&lt;/p&gt;
&lt;blockquote readability=&quot;2.4626865671642&quot;&gt;
&lt;p&gt;&lt;span&gt;作者&lt;/span&gt;：Hzy0913 ，&lt;span&gt;Github&lt;/span&gt; ：&lt;a href=&quot;https://github.com/Hzy0913/my-blog&quot; target=&quot;_blank&quot;&gt;https://github.com/Hzy0913/my-blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201901/1468246-20190108113643417-1694855619.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我先简单的设计了下整体布局，以后肯定还会修改的，毕竟这个有点儿简单的是（已经支持SEO了）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201901/1468246-20190108114320574-737673656.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;现在前端框架已经确定了，就使用Nuxt.js 了，那后端呢，难道又要新建一个 net core 项目么？不用的，毕竟目前只有两个表，专题和详情表，那为啥说不用了呢？&lt;/p&gt;

&lt;h3&gt;D、还记得Blog.Core项目的Topic表么&lt;/h3&gt;
&lt;p&gt; 相信看这篇文章的，都是从第一个系列跟过来的铁粉儿，在Model层中，有那么些表，无论是做演示的博客表，还是JWT权限模块的那几个用户、角色、菜单等表，剩下的就是无用的广告表，和 Topic和TopicDetail表了，你一定很好奇，这一块一直没有提到，是干啥的？没错！今天终于派上用场，是不是有种写小说的伏笔一样（其实这是我之前项目里，用来记录我写名著读后感的表😂），今天就正好拿来提bug了，如果你感觉不合适，可以修改下表名，或者新建两个表，我就直接使用这两个了，一个是Bug专题，一个是内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201901/1468246-20190108115252437-330927970.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;好啦，上边这四个就是我要写这篇文章的目的与动力，我很希望到时候有很多小伙伴把遇到的BUG放到这里，bug开源也是一种精神，注意隐私就行（其实也没啥隐私。。） &lt;/p&gt;


&lt;p&gt;因为春节将至，可能很多小伙伴和我一样比较忙，所以我的1.0版本，就打算很简单的实现展示和提交功能，目前只支持提交一张bug图片，作为Logo，等以后人多了，我再买一个大的服务器，到时候可以再在内容里提交图片。&lt;/p&gt;
&lt;p&gt;下边是我自己的瞎想，可能需要明年一点一点的写，如果有想一起开发的，可以一起交流：&lt;/p&gt;

&lt;p&gt;版本1.0、发布到服务，配置域名，支持 HTTPS 安全协议，每一个用户都可以提交Bug（因为1.0没有用户，所以必须是已经解决的Bug，就是带有方案的），然后展示，前期肯定没人用，一般都是我自己提交；&lt;/p&gt;
&lt;p&gt;       1.1、支持将所有Bug和解决方法导出功能（txt、tsv、Json等各种格式）；&lt;/p&gt;
&lt;p&gt;       1.5、引入用户功能，用户登录后发布的文章，作者可对其进行CURD；&lt;/p&gt;
&lt;p&gt;       1.9、增加用户评论功能，可以留下自己的联系方式，方便提问题的人找到回答的人，进行深入交流。&lt;/p&gt;

&lt;p&gt;版本2.0、增加后台管理系统，增加审核功能，开始引入权限管理系统（因为是基于Blog.Core的所以是基于JWT权限验证的，ID4的以后再说）。&lt;/p&gt;

&lt;p&gt;版本3.0、开放积分，分享、小程序等功能，引入广告功能（我自己的瞎想，反正是一个主要的功能。。。）。&lt;/p&gt;

&lt;p&gt;未完待续。。。&lt;/p&gt;


&lt;p&gt; 稀里糊涂的说了这么多，这也是我2019年一直跟进的小项目吧，可能需要闲暇时间慢慢跟进，如果你愿意，可以一起为开源事业做贡献，哪怕是一个提Bug，哪怕是帮助别人解决Bug，都是一种开源精神，一起加油鸭！&lt;/p&gt;


&lt;p&gt; 再次感谢我找到的这个Github 样式模板的作者（如果你看到了请留言，要是不想让用，可以私信我，不过肯定不一样的）；&lt;/p&gt;
&lt;p&gt; 再次感谢所有粉丝2018年的帮助和支持；&lt;/p&gt;
&lt;p&gt; 再次感谢李大爷的鼓励和支持 [笔芯]。&lt;/p&gt;

&lt;p&gt;-- END&lt;/p&gt;
</description>
<pubDate>Tue, 08 Jan 2019 05:16:00 +0000</pubDate>
<dc:creator>老张的哲学</dc:creator>
<og:description>缘起 哈喽大家周二好呀，刚刚经历过了几天火车抢票，整个人都不好了，不知道小伙伴对今年的春节是否还一如既往的期待呢，眼看都要春节了，本来也想写篇2018总结篇，但是怕不免会出现鸡汤文的窠臼嫌疑，想想还是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/laozhang-is-phi/p/10236645.html</dc:identifier>
</item>
<item>
<title>Elasticsearch Java高级客户端 - 不要乱摸</title>
<link>http://www.cnblogs.com/cjsblog/p/10232581.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cjsblog/p/10232581.html</guid>
<description>&lt;p&gt;&lt;span&gt;1.  概述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Java REST Client 有两种风格：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;Java Low Level REST Client&lt;/strong&gt; ：用于Elasticsearch的官方低级客户端。它允许通过http与Elasticsearch集群通信。将请求编排和响应反编排留给用户自己处理。它兼容所有的Elasticsearch版本。&lt;span&gt;（PS：学过WebService的话，对编排与反编排这个概念应该不陌生。可以理解为对请求参数的封装，以及对响应结果的解析）&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;Java High Level REST Client&lt;/strong&gt; ：用于Elasticsearch的官方高级客户端。它是基于低级客户端的，它提供很多API，并负责请求的编排与响应的反编排。&lt;span&gt;（PS：就好比是，一个是传自己拼接好的字符串，并且自己解析返回的结果；而另一个是传对象，返回的结果也已经封装好了，直接是对象，更加规范了参数的名称以及格式，更加面对对象一点）&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;（PS：所谓低级与高级，我觉得一个很形象的比喻是，面向过程编程与面向对象编程）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在 Elasticsearch 7.0 中不建议使用TransportClient，并且在8.0中会完全删除TransportClient。因此，官方更建议我们用Java High Level REST Client，它执行HTTP请求，而不是序列号的Java请求。既然如此，这里就直接用高级了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2.  Java High Level REST Client （高级REST客户端）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.1.  Maven仓库&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.elasticsearch.client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;elasticsearch-rest-high-level-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;6.5.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2.2.  依赖&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;org.elasticsearch.client:elasticsearch-rest-client&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;org.elasticsearch:elasticsearch&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2.3.  初始化&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
RestHighLevelClient client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RestHighLevelClient(
        RestClient.builder(
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;&lt;span&gt;),
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; HttpHost(&quot;localhost&quot;, 9201, &quot;http&quot;)));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;高级客户端内部会创建低级客户端用于基于提供的builder执行请求。低级客户端维护一个连接池，并启动一些线程，因此当你用完以后应该关闭高级客户端，并且在内部它将会关闭低级客户端，以释放这些资源。关闭客户端可以使用close()方法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
client.close();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;2.4.  文档API&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.4.1.  添加文档&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;IndexRequest&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
IndexRequest request = &lt;span&gt;new&lt;/span&gt; IndexRequest(&quot;posts&quot;, &quot;doc&quot;, &quot;1&quot;&lt;span&gt;);
String jsonString &lt;/span&gt;= &quot;{\&quot;user\&quot;:\&quot;kimchy\&quot;,\&quot;postDate\&quot;:\&quot;2013-01-30\&quot;,\&quot;message\&quot;:\&quot;trying out Elasticsearch\&quot;}&quot;&lt;span&gt;;
request.source(jsonString, XContentType.JSON);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;提供文档source的方式还有很多，比如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;通过Map的方式提供文档source&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107112921505-1096593063.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;通过XContentBuilder方式提供source&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107113129302-1905765260.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;通过Object的方式（键值对）提供source&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107113243115-1707051100.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;可选参数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107123048364-952547380.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;同步执行&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107123228415-116787772.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;异步执行&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;你也可以异步执行 IndexRequest，为此你需要指定一个监听器来处理这个异步响应结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107123537565-296521318.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个典型的监听器看起来是这样的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107123939126-2080355783.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;IndexResponse&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107125143547-847850791.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果有版本冲突，将会抛出ElasticsearchException&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107125349450-875958441.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同样的异常也有可能发生在当opType设置为create的时候，且相同索引、相同类型、相同ID的文档已经存在时。例如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107130750145-2076473217.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2.4.2.  查看文档&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Get Request&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107131918412-774738301.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;可选参数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107133042913-526807842.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;同步执行&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107133357554-1924197565.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;异步执行&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107133336771-66766950.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Get Response&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107133816147-1841812116.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当索引不存在，或者指定的文档的版本不存在时，响应状态吗是404，并且抛出ElasticsearchException&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107134041361-948184878.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107134048940-1444684810.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2.4.3.  文档是否存在&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107134331012-2095210010.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2.4.4.  删除文档&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Delete Request&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107134631779-1771633485.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;可选参数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同添加&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2.5.  搜索API&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Search Request&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;基本格式是这样的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107135721274-1666920568.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;大多数查询参数被添加到 &lt;strong&gt;SearchSourceBuilder&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;可选参数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107140401393-238610130.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;SearchSourceBuilder&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;控制检索行为的大部分选项都可以在SearchSourceBuilder中设置。下面是一个常见选项的例子：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107140714008-1523104184.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在这个例子中，我们首先创建了一个SearchSourceBuilder对象，并且带着默认选项。然后设置了一个term查询，接着设置检索的位置和数量，最后设置超时时间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在设置完这些选项以后，我们只需要把SearchSourceBuilder加入到SearchRequest中即可&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107140941351-939346288.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;构建Query&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用QueryBuilder来创建Serarch Query。QueryBuilder支持Elasticsearch DSL中每一种Query&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107141823057-173150158.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还可以通过QueryBuilders工具类来创建QueryBuilder对象，例如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107141907059-301588829.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;无论是用哪种方式创建，最后一定要把QueryBuilder添加到SearchSourceBuilder中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107142033671-1962482046.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;排序&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SearchSourceBuilder 可以添加一个或多个 SortBuilder&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SortBuilder有四种实现：FieldSortBuilder、GeoDistanceSortBuilder、ScoreSortBuilder、ScriptSortBuilder&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107142648082-2081644181.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;聚集函数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107143011296-2008675105.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;同步执行&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107143213690-624526051.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;异步执行&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107143308762-1282676946.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;从查询响应中取出文档&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190107143743723-1118101570.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;3.  示例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.1.  准备数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.1.1.  安装IK分词器插件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
./bin/elasticsearch-plugin &lt;span&gt;install&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.5.4/elasticsearch-analysis-ik-6.5.4.zip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190108110737967-668455681.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.1.2.  创建索引&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
curl -X PUT &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:9200/book&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -H &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Content-Type: application/json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -d&lt;span&gt;'
&lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mappings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_doc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;integer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                },
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;analyzer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ik_max_word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;search_analyzer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ik_max_word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                },
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;author&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;analyzer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ik_max_word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;search_analyzer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ik_max_word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                },
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;category&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;integer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                },
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                },
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                },
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sellReason&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;analyzer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ik_max_word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;search_analyzer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ik_max_word&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                },
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sellTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyy-MM-dd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            }
        }
    }
}
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3.1.3.  数据预览&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190108111614977-329580053.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;3.2.  示例代码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.2.1.  完整的pom.xml&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.1.1.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.cjs.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;elasticsearch-demo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;elasticsearch-demo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-thymeleaf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.elasticsearch.client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;elasticsearch-rest-high-level-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;6.5.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.commons&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-lang3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;fastjson&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.54&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ch.qos.logback&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;logback-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.projectlombok&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;lombok&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3.2.2.  配置&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example.elasticsearch.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.http.HttpHost;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.client.RestClient;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.client.RestHighLevelClient;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; ChengJianSheng
 * @date 2019-01-07
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Configuration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ElasticsearchClientConfig {

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RestHighLevelClient restHighLevelClient() {
        RestHighLevelClient client &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RestHighLevelClient(
                RestClient.builder(
                        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;&lt;span&gt;)));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; client;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3.2.3.  domain&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example.elasticsearch.domain.model;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.Data;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 图书
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; ChengJianSheng
 * @date 2019-01-07
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Data
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BookModel &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable {


    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Integer id;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  图书ID&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; String name;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  图书名称&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; String author;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  作者&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; Integer category;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  图书分类&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; Double price;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  图书价格&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; String sellReason;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  上架理由&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; String sellTime;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  上架时间&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt; Integer status;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  状态（1：可售，0：不可售）&lt;/span&gt;
&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3.2.4.  Controller&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example.elasticsearch.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.alibaba.fastjson.JSON;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.cjs.example.elasticsearch.domain.common.BaseResult;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.cjs.example.elasticsearch.domain.common.Page;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.cjs.example.elasticsearch.domain.model.BookModel;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.cjs.example.elasticsearch.domain.vo.BookRequestVO;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.cjs.example.elasticsearch.service.BookService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.extern.slf4j.Slf4j;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 文档操作
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; ChengJianSheng
 * @date 2019-01-07
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Slf4j
@RestController
@RequestMapping(&lt;/span&gt;&quot;/book&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BookController {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; BookService bookService;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 列表分页查询
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @GetMapping(&lt;/span&gt;&quot;/list&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BaseResult list(BookRequestVO bookRequestVO) {
        Page&lt;/span&gt;&amp;lt;BookModel&amp;gt; page =&lt;span&gt; bookService.list(bookRequestVO);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; ==&lt;span&gt; page) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; BaseResult.error();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; BaseResult.ok(page);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 查看文档
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @GetMapping(&lt;/span&gt;&quot;/detail&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BaseResult detail(Integer id) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; ==&lt;span&gt; id) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; BaseResult.error(&quot;ID不能为空&quot;&lt;span&gt;);
        }
        BookModel book &lt;/span&gt;=&lt;span&gt; bookService.detail(id);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; BaseResult.ok(book);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 添加文档
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @PostMapping(&lt;/span&gt;&quot;/add&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BaseResult add(@RequestBody BookModel bookModel) {
        bookService.save(bookModel);
        log.info(&lt;/span&gt;&quot;插入文档成功！请求参数: {}&quot;&lt;span&gt;, JSON.toJSONString(bookModel));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; BaseResult.ok();
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 修改文档
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @PostMapping(&lt;/span&gt;&quot;/update&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BaseResult update(@RequestBody BookModel bookModel) {
        Integer id &lt;/span&gt;=&lt;span&gt; bookModel.getId();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; ==&lt;span&gt; id) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; BaseResult.error(&quot;ID不能为空&quot;&lt;span&gt;);
        }
        BookModel book &lt;/span&gt;=&lt;span&gt; bookService.detail(id);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; ==&lt;span&gt; book) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; BaseResult.error(&quot;记录不存在&quot;&lt;span&gt;);
        }
        bookService.update(bookModel);
        log.info(&lt;/span&gt;&quot;更新文档成功！请求参数: {}&quot;&lt;span&gt;, JSON.toJSONString(bookModel));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; BaseResult.ok();
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 删除文档
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @GetMapping(&lt;/span&gt;&quot;/delete&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BaseResult delete(Integer id) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; ==&lt;span&gt; id) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; BaseResult.error(&quot;ID不能为空&quot;&lt;span&gt;);
        }
        bookService.delete(id);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; BaseResult.ok();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.2.5.  Service&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;92&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example.elasticsearch.service.impl;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.alibaba.fastjson.JSON;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.cjs.example.elasticsearch.domain.common.Page;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.cjs.example.elasticsearch.domain.model.BookModel;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.cjs.example.elasticsearch.domain.vo.BookRequestVO;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.cjs.example.elasticsearch.service.BookService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.extern.slf4j.Slf4j;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.lang3.StringUtils;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.action.ActionListener;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.action.DocWriteResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.action.delete.DeleteRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.action.delete.DeleteResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.action.get.GetRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.action.get.GetResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.action.index.IndexRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.action.index.IndexResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.action.search.SearchRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.action.search.SearchResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.action.support.replication.ReplicationResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.action.update.UpdateRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.action.update.UpdateResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.client.RequestOptions;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.client.RestHighLevelClient;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.common.unit.TimeValue;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.index.query.BoolQueryBuilder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.index.query.QueryBuilders;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.rest.RestStatus;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.search.SearchHit;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.search.SearchHits;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.search.builder.SearchSourceBuilder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.search.sort.FieldSortBuilder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.elasticsearch.search.sort.SortOrder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.util.CollectionUtils;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.stream.Collectors;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; ChengJianSheng
 * @date 2019-01-07
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Slf4j
@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BookServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; BookService {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String INDEX_NAME = &quot;book&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String INDEX_TYPE = &quot;_doc&quot;&lt;span&gt;;

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; RestHighLevelClient client;


    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Page&amp;lt;BookModel&amp;gt;&lt;span&gt; list(BookRequestVO bookRequestVO) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; pageNo =&lt;span&gt; bookRequestVO.getPageNo();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; pageSize =&lt;span&gt; bookRequestVO.getPageSize();

        SearchSourceBuilder sourceBuilder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SearchSourceBuilder();
        sourceBuilder.from(pageNo &lt;/span&gt;- 1&lt;span&gt;);
        sourceBuilder.size(pageSize);
        sourceBuilder.sort(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FieldSortBuilder(&quot;id&quot;&lt;span&gt;).order(SortOrder.ASC));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        sourceBuilder.query(QueryBuilders.matchAllQuery());&lt;/span&gt;
&lt;span&gt;
        BoolQueryBuilder boolQueryBuilder &lt;/span&gt;=&lt;span&gt; QueryBuilders.boolQuery();

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(bookRequestVO.getName())) {
            boolQueryBuilder.must(QueryBuilders.matchQuery(&lt;/span&gt;&quot;name&quot;&lt;span&gt;, bookRequestVO.getName()));
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(bookRequestVO.getAuthor())) {
            boolQueryBuilder.must(QueryBuilders.matchQuery(&lt;/span&gt;&quot;author&quot;&lt;span&gt;, bookRequestVO.getAuthor()));
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; !=&lt;span&gt; bookRequestVO.getStatus()) {
            boolQueryBuilder.must(QueryBuilders.termQuery(&lt;/span&gt;&quot;status&quot;&lt;span&gt;, bookRequestVO.getStatus()));
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(bookRequestVO.getSellTime())) {
            boolQueryBuilder.must(QueryBuilders.termQuery(&lt;/span&gt;&quot;sellTime&quot;&lt;span&gt;, bookRequestVO.getSellTime()));
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(bookRequestVO.getCategories())) {
            String[] categoryArr &lt;/span&gt;= bookRequestVO.getCategories().split(&quot;,&quot;&lt;span&gt;);
            List&lt;/span&gt;&amp;lt;Integer&amp;gt; categoryList = Arrays.asList(categoryArr).stream().map(e-&amp;gt;&lt;span&gt;Integer.valueOf(e)).collect(Collectors.toList());
            BoolQueryBuilder categoryBoolQueryBuilder &lt;/span&gt;=&lt;span&gt; QueryBuilders.boolQuery();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Integer category : categoryList) {
                categoryBoolQueryBuilder.should(QueryBuilders.termQuery(&lt;/span&gt;&quot;category&quot;&lt;span&gt;, category));
            }
            boolQueryBuilder.must(categoryBoolQueryBuilder);
        }

        sourceBuilder.query(boolQueryBuilder);

        SearchRequest searchRequest &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SearchRequest();
        searchRequest.indices(INDEX_NAME);
        searchRequest.source(sourceBuilder);

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            SearchResponse searchResponse &lt;/span&gt;=&lt;span&gt; client.search(searchRequest, RequestOptions.DEFAULT);

            RestStatus restStatus &lt;/span&gt;=&lt;span&gt; searchResponse.status();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (restStatus !=&lt;span&gt; RestStatus.OK) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            }

            List&lt;/span&gt;&amp;lt;BookModel&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
            SearchHits searchHits &lt;/span&gt;=&lt;span&gt; searchResponse.getHits();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (SearchHit hit : searchHits.getHits()) {
                String source &lt;/span&gt;=&lt;span&gt; hit.getSourceAsString();
                BookModel book &lt;/span&gt;= JSON.parseObject(source, BookModel.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
                list.add(book);
            }

            &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; totalHits =&lt;span&gt; searchHits.getTotalHits();

            Page&lt;/span&gt;&amp;lt;BookModel&amp;gt; page = &lt;span&gt;new&lt;/span&gt; Page&amp;lt;&amp;gt;&lt;span&gt;(pageNo, pageSize, totalHits, list);

            TimeValue took &lt;/span&gt;=&lt;span&gt; searchResponse.getTook();
            log.info(&lt;/span&gt;&quot;查询成功！请求参数: {}, 用时{}毫秒&quot;&lt;span&gt;, searchRequest.source().toString(), took.millis());

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; page;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
            log.error(&lt;/span&gt;&quot;查询失败！原因: {}&quot;&lt;span&gt;, e.getMessage(), e);
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; save(BookModel bookModel) {
        Map&lt;/span&gt;&amp;lt;String, Object&amp;gt; jsonMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
        jsonMap.put(&lt;/span&gt;&quot;id&quot;&lt;span&gt;, bookModel.getId());
        jsonMap.put(&lt;/span&gt;&quot;name&quot;&lt;span&gt;, bookModel.getName());
        jsonMap.put(&lt;/span&gt;&quot;author&quot;&lt;span&gt;, bookModel.getAuthor());
        jsonMap.put(&lt;/span&gt;&quot;category&quot;&lt;span&gt;, bookModel.getCategory());
        jsonMap.put(&lt;/span&gt;&quot;price&quot;&lt;span&gt;, bookModel.getPrice());
        jsonMap.put(&lt;/span&gt;&quot;sellTime&quot;&lt;span&gt;, bookModel.getSellTime());
        jsonMap.put(&lt;/span&gt;&quot;sellReason&quot;&lt;span&gt;, bookModel.getSellReason());
        jsonMap.put(&lt;/span&gt;&quot;status&quot;&lt;span&gt;, bookModel.getStatus());

        IndexRequest indexRequest &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexRequest(INDEX_NAME, INDEX_TYPE, String.valueOf(bookModel.getId()));
        indexRequest.source(jsonMap);

        client.indexAsync(indexRequest, RequestOptions.DEFAULT, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ActionListener&amp;lt;IndexResponse&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onResponse(IndexResponse indexResponse) {
                String index &lt;/span&gt;=&lt;span&gt; indexResponse.getIndex();
                String type &lt;/span&gt;=&lt;span&gt; indexResponse.getType();
                String id &lt;/span&gt;=&lt;span&gt; indexResponse.getId();
                &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; version =&lt;span&gt; indexResponse.getVersion();

                log.info(&lt;/span&gt;&quot;Index: {}, Type: {}, Id: {}, Version: {}&quot;&lt;span&gt;, index, type, id, version);

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (indexResponse.getResult() ==&lt;span&gt; DocWriteResponse.Result.CREATED) {
                    log.info(&lt;/span&gt;&quot;写入文档&quot;&lt;span&gt;);
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (indexResponse.getResult() ==&lt;span&gt; DocWriteResponse.Result.UPDATED) {
                    log.info(&lt;/span&gt;&quot;修改文档&quot;&lt;span&gt;);
                }
                ReplicationResponse.ShardInfo shardInfo &lt;/span&gt;=&lt;span&gt; indexResponse.getShardInfo();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (shardInfo.getTotal() !=&lt;span&gt; shardInfo.getSuccessful()) {
                    log.warn(&lt;/span&gt;&quot;部分分片写入成功&quot;&lt;span&gt;);
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (shardInfo.getFailed() &amp;gt; 0&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (ReplicationResponse.ShardInfo.Failure failure : shardInfo.getFailures()) {
                        String reason &lt;/span&gt;=&lt;span&gt; failure.reason();
                        log.warn(&lt;/span&gt;&quot;失败原因: {}&quot;&lt;span&gt;, reason);
                    }
                }
            }

            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onFailure(Exception e) {
                log.error(e.getMessage(), e);
            }
        });
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; update(BookModel bookModel) {
        Map&lt;/span&gt;&amp;lt;String, Object&amp;gt; jsonMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
        jsonMap.put(&lt;/span&gt;&quot;sellReason&quot;&lt;span&gt;, bookModel.getSellReason());
        UpdateRequest request &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UpdateRequest(INDEX_NAME, INDEX_TYPE, String.valueOf(bookModel.getId()));
        request.doc(jsonMap);
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            UpdateResponse updateResponse &lt;/span&gt;=&lt;span&gt; client.update(request, RequestOptions.DEFAULT);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
            log.error(&lt;/span&gt;&quot;更新失败！原因: {}&quot;&lt;span&gt;, e.getMessage(), e);
        }
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; delete(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        DeleteRequest request &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DeleteRequest(INDEX_NAME, INDEX_TYPE, String.valueOf(id));
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            DeleteResponse deleteResponse &lt;/span&gt;=&lt;span&gt; client.delete(request, RequestOptions.DEFAULT);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (deleteResponse.status() ==&lt;span&gt; RestStatus.OK) {
                log.info(&lt;/span&gt;&quot;删除成功！id: {}&quot;&lt;span&gt;, id);
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
            log.error(&lt;/span&gt;&quot;删除失败！原因: {}&quot;&lt;span&gt;, e.getMessage(), e);
        }
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; BookModel detail(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        GetRequest getRequest &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GetRequest(INDEX_NAME, INDEX_TYPE, String.valueOf(id));
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            GetResponse getResponse &lt;/span&gt;=&lt;span&gt; client.get(getRequest, RequestOptions.DEFAULT);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (getResponse.isExists()) {
                String source &lt;/span&gt;=&lt;span&gt; getResponse.getSourceAsString();
                BookModel book &lt;/span&gt;= JSON.parseObject(source, BookModel.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; book;
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
            log.error(&lt;/span&gt;&quot;查看失败！原因: {}&quot;&lt;span&gt;, e.getMessage(), e);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3.2.6.  页面&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;zh&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;图书列表&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;/bootstrap-4/css/bootstrap.min.css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;/bootstrap-table/bootstrap-table.css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;jquery-3.3.1.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/bootstrap-4/js/bootstrap.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/bootstrap-table/bootstrap-table.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/bootstrap-table/locale/bootstrap-table-zh-CN.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){

            $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#table&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).bootstrapTable({
                url: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/book/list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                method: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                sidePagination: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                responseHandler: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(res) {  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 加载服务器数据之前的处理程序，可以用来格式化数据。参数：res为从服务器请求到的数据。&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; result &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {};
                    result.total &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; res.data.totalCount;
                    result.rows &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; res.data.pageList;
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
                },
                pagination: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                pageSize: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始PageSize&lt;/span&gt;
&lt;span&gt;                queryParams: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(params) {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; req &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
                        pageSize: params.limit,
                        pageNo: params.offset &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
                    };
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; req;
                },
                striped: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                search: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                columns: [{
                    field: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                }, {
                    field: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;名称&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                }, {
                    field: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;author&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;作者&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                }, {
                    field: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;单价&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                }, {
                    field: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sellTime&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;上架时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                }, {
                    field: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;状态&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    formatter: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(value) {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (value &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;span style=&quot;color: green&quot;&amp;gt;可售&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;span style=&quot;color: red&quot;&amp;gt;不可售&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        }
                    }
                }, {
                    field: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;category&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;分类&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    formatter: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(value) {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (value &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;10010&lt;/span&gt;&lt;span&gt;) {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;中国当代小说&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (value &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;10011&lt;/span&gt;&lt;span&gt;) {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;武侠小说&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (value &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;10012&lt;/span&gt;&lt;span&gt;) {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;爱情小说&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (value &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;10013&lt;/span&gt;&lt;span&gt;) {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;中国当代随笔&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        }
                    }
                }, {
                    field: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sellReason&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;上架理由&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                }, {
                    title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;操作&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    formatter: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a href=&quot;#&quot;&amp;gt;修改&amp;lt;/a&amp;gt; &amp;lt;a href=&quot;#&quot;&amp;gt;删除&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    }
                }
                ]
            });

        });
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;table-responsive&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;padding: 10px 30px&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;table&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;table text-nowrap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3.3.  演示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190108120512382-1635331617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;重点演示几个查询&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190108120652587-690594440.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;返回结果：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
{
    &quot;code&quot;: 200,
    &quot;success&quot;: true,
    &quot;msg&quot;: &quot;SUCCESS&quot;,
    &quot;data&quot;: {
        &quot;pageNumber&quot;: 1,
        &quot;pageSize&quot;: 10,
        &quot;totalCount&quot;: 2,
        &quot;pageList&quot;: [
            {
                &quot;id&quot;: 2,
                &quot;name&quot;: &quot;倚天屠龙记（全四册）&quot;,
                &quot;author&quot;: &quot;金庸&quot;,
                &quot;category&quot;: 10011,
                &quot;price&quot;: 70.4,
                &quot;sellReason&quot;: &quot;武林至尊，宝刀屠龙，号令天下，莫敢不从。&quot;,
                &quot;sellTime&quot;: &quot;2018-11-11&quot;,
                &quot;status&quot;: 1
            },
            {
                &quot;id&quot;: 3,
                &quot;name&quot;: &quot;神雕侠侣&quot;,
                &quot;author&quot;: &quot;金庸&quot;,
                &quot;category&quot;: 10011,
                &quot;price&quot;: 70,
                &quot;sellReason&quot;: &quot;风陵渡口初相遇，一见杨过误终身&quot;,
                &quot;sellTime&quot;: &quot;2018-11-11&quot;,
                &quot;status&quot;: 1
            }
        ]
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;上面的查询对应的Elasticsearch DSL是这样的：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
{
    &quot;from&quot;:0,
    &quot;size&quot;:10,
    &quot;query&quot;:{
        &quot;bool&quot;:{
            &quot;must&quot;:[
                {
                    &quot;match&quot;:{
                        &quot;author&quot;:{
                            &quot;query&quot;:&quot;金庸&quot;,
                            &quot;operator&quot;:&quot;OR&quot;,
                            &quot;prefix_length&quot;:0,
                            &quot;max_expansions&quot;:50,
                            &quot;fuzzy_transpositions&quot;:true,
                            &quot;lenient&quot;:false,
                            &quot;zero_terms_query&quot;:&quot;NONE&quot;,
                            &quot;auto_generate_synonyms_phrase_query&quot;:true,
                            &quot;boost&quot;:1
                        }
                    }
                },
                {
                    &quot;term&quot;:{
                        &quot;status&quot;:{
                            &quot;value&quot;:1,
                            &quot;boost&quot;:1
                        }
                    }
                },
                {
                    &quot;bool&quot;:{
                        &quot;should&quot;:[
                            {
                                &quot;term&quot;:{
                                    &quot;category&quot;:{
                                        &quot;value&quot;:10010,
                                        &quot;boost&quot;:1
                                    }
                                }
                            },
                            {
                                &quot;term&quot;:{
                                    &quot;category&quot;:{
                                        &quot;value&quot;:10011,
                                        &quot;boost&quot;:1
                                    }
                                }
                            },
                            {
                                &quot;term&quot;:{
                                    &quot;category&quot;:{
                                        &quot;value&quot;:10012,
                                        &quot;boost&quot;:1
                                    }
                                }
                            }
                        ],
                        &quot;adjust_pure_negative&quot;:true,
                        &quot;boost&quot;:1
                    }
                }
            ],
            &quot;adjust_pure_negative&quot;:true,
            &quot;boost&quot;:1
        }
    },
    &quot;sort&quot;:[
        {
            &quot;id&quot;:{
                &quot;order&quot;:&quot;asc&quot;
            }
        }
    ]
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3.4.  工程结构&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201901/874963-20190108121143341-2113995925.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;4.  参考&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/medcl/elasticsearch-analysis-ik&quot; target=&quot;_blank&quot;&gt;https://github.com/medcl/elasticsearch-analysis-ik&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html&quot; target=&quot;_blank&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-search.html&quot; target=&quot;_blank&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-search.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://bootstrap-table.wenzhixin.net.cn/documentation/&quot; target=&quot;_blank&quot;&gt;https://bootstrap-table.wenzhixin.net.cn/documentation/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;5.  其它相关&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;《&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/10171695.html&quot; target=&quot;_blank&quot;&gt;Elasticsearch 分词器&lt;/a&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;《&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/10125342.html&quot; target=&quot;_blank&quot;&gt;Elasticsearch Document&lt;/a&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;《&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/10120470.html&quot; target=&quot;_blank&quot;&gt;Elasticsearch Search API&lt;/a&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;《&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/9910788.html&quot; target=&quot;_blank&quot;&gt;Elasticsearch查询&lt;/a&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;《&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/10035629.html&quot; target=&quot;_blank&quot;&gt;Elasticsearch Mapping&lt;/a&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;《&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/9756978.html&quot; target=&quot;_blank&quot;&gt;SpringBoot+Elasticsearch&lt;/a&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;《&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/9517060.html&quot; target=&quot;_blank&quot;&gt;ELK快速搭建日志平台&lt;/a&gt;》&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 08 Jan 2019 04:40:00 +0000</pubDate>
<dc:creator>不要乱摸</dc:creator>
<og:description>1. 概述 Java REST Client 有两种风格： Java Low Level REST Client ：用于Elasticsearch的官方低级客户端。它允许通过http与Elastics</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cjsblog/p/10232581.html</dc:identifier>
</item>
<item>
<title>应用AI芯片加速 Hadoop 3.0 纠删码的计算性能 - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/10238278.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/10238278.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;本文由云+社区发表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;做为大数据生态系统中最重要的底层存储文件系统HDFS，为了保证系统的可靠性，HDFS通过多副本的冗余来防止数据的丢失。通常，HDFS中每一份数据都设置两个副本，这也使得存储利用率仅为1/3，每TB数据都需要占用3TB的存储空间。随着数据量的增长，复制的代价也变得越来越明显：传统的3份复制相当于增加了200%的存储开销，给存储空间和网络带宽带来了很大的压力。因此，在保证可靠性的前提下如何提高存储利用率已成为当前HDFS应用的主要问题之一。&lt;/p&gt;
&lt;p&gt;针对这些问题，英特尔、Cloudera、华为以及其他的Apache Hadoop communit共同参与开始引入纠删码（Erasure Coding，EC）技术，在保证数据可靠性的同时大幅降低存储开销，&lt;strong&gt;节省2倍的存储空间&lt;/strong&gt;。该feature计划在Hadoop3.0版本发布。&lt;/p&gt;

&lt;p&gt;Erasure coding纠删码技术简称EC，是一种数据保护技术。最早用于通信行业中数据传输中的数据恢复，是一种编码容错技术。他通过在原始数据中加入新的校验数据，使得各个部分的数据产生关联性。在一定范围的数据出错情况下，通过纠删码技术都可以进行恢复。&lt;/p&gt;
&lt;p&gt;在存储系统中，纠删码技术主要是通过利用纠删码算法将原始的数据进行编码得到校验，并将数据和校验一并存储起来，以达到容错的目的。其基本思想是将ｋ块原始的数据元素通过一定的编码计算，得到ｍ块校验元素。对于这ｋ+ｍ块元素，当其中任意的ｍ块元素出错（包括数据和校验出错），均可以通过对应的重构算法恢复出原来的ｋ块数据。生成校验的过程被成为编码（encoding），恢复丢失数据块的过程被称为解码（decoding）。&lt;/p&gt;
&lt;p&gt;Reed-Solomon（RS）码是存储系统较为常用的一种纠删码，它有两个参数k和m，记为RS(k，m)。如图1所示，k个数据块组成一个向量被乘上一个生成矩阵（Generator Matrix）GT从而得到一个码字（codeword）向量，该向量由k个数据块和m个校验块构成。如果一个数据块丢失，可以用(GT)-1乘以码字向量来恢复出丢失的数据块。RS(k，m)最多可容忍m个块（包括数据块和校验块）丢失。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/2187473/6zezdkyawe.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;EC&lt;/p&gt;

&lt;h3 id=&quot;优势&quot;&gt;优势&lt;/h3&gt;
&lt;p&gt;EC码的优势是显而易见的，可以大幅度的降低数据的存储空间。特别是PB、EB级的场景下，会极大的削减存储的成本。&lt;/p&gt;
&lt;h3 id=&quot;劣势&quot;&gt;劣势&lt;/h3&gt;
&lt;p&gt;EC技术的优势确实明显，但是他的使用也是需要一些代价的，一旦数据需要恢复，他会造成两大资源的消耗:&lt;/p&gt;
&lt;p&gt;网络带宽消耗（数据恢复需要去读其他的数据块和校验块），CPU消耗（编解码计算）。&lt;/p&gt;

&lt;p&gt;从上面的EC码优缺点对比可以看出，虽然EC码可以大幅的节省空间，但是因为在存储和恢复的过程中需要额外的运算。用在线上系统的时候，一旦有节点挂掉触发数据恢复，计算量是比较大的，可能会对集群的整体性能造成影响，拖慢正常的计算任务。&lt;/p&gt;
&lt;p&gt;在上面的介绍中我们看到，EC码的计算实际上就是矩阵相乘的计算，而目前AI业界最火热的神经网络的计算也是当量的矩阵相乘相加。由此我们可以大胆的想象，是否可以利用目前GPU和TPU对矩阵运算的优化，来加速EC码的计算性能呢？&lt;/p&gt;
&lt;p&gt;目前业界比较领先的两个AI计算加速芯片分别为NVIDIA的Volta GPU架构和Google的TPU。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于纯矩阵相加相乘的运算，GPU或TPU相比于CPU，性能的提升可以达到50~80倍。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;nvidia&quot;&gt;NVIDIA&lt;/h3&gt;
&lt;p&gt;NVIDIA的Tesla V100提供了120个专门用于矩阵运算的Tensor Core。每个 Tensor Core 包含一个 4x4x4 的矩阵处理阵列来完成 D=A x B + C 的运算，其中 A、B、C、D 是 4×4 的矩阵，如下图所示。矩阵相乘的输入 A 和 B 是 FP16 矩阵，相加矩阵 C 和 D 可能是 FP16 矩阵或 FP32 矩阵。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/2187473/u58yl77kgp.jpg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;Tensor Core&lt;/p&gt;
&lt;p&gt;每个 Tensor Core 每个时钟可执行 64 次浮点 FMA 混合精度运算（FP16 乘法与 FP32 累加），一个 SM 单元中的 8 个 Tensor Core 每个时钟可执行共计 1024 次浮点运算。相比于使用标准 FP32 计算的 Pascal GP100 而言，单个 SM 下的每个深度学习应用的吞吐量提升了 8 倍，所以这最终使得 Volta V100 GPU 相比于 Pascal P100 GPU 的吞吐量一共提升了 12 倍。Tensor Core 在与 FP32 累加结合后的 FP16 输入数据之上操作。FP16 的乘法得到了一个全精度结果，该结果在 FP32 和其他给定的 4x4x4 矩阵乘法点积的乘积运算之中进行累加。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/2187473/f1mhx0lq0i.jpg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;tpu&quot;&gt;TPU&lt;/h3&gt;
&lt;p&gt;TPU是Google为TensorFlow定制化的AI加速芯片。这个TPU芯片是面向datacenter inference应用。它的核心是由65,536个8-bit MAC组成的矩阵乘法单元（matrix multiply unit），峰值可以达到92 TeraOps/second (TOPS) 。有一个很大的片上存储器，一共28 MiB。它可以支持MLP，CNN和LSTM这些常见的NN网络，并且支持TensorFLow框架。摘要里面还可以看出，传统CPU和GPU使用的技术（caches, out-of-order execution, multithreading, multiprocessing, prefetching）它都没用，原因是它面向的应用都是deterministic execution model，这也是它可以实现高效的原因。它的平均性能（TOPS）可以达到CPU和GPU的15到30倍，能耗效率（TOPS/W）能到30到80倍。如果使用GPU的DDR5 memory，这两个数值可以达到大约GPU的70倍和CPU的200倍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/2187473/wvxayibtjp.jpeg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;TPU&lt;/p&gt;

&lt;p&gt;由于HDFS的内部逻辑已然十分复杂，社区对于HDFS EC码的改造需要分几个步奏来实现：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;用户可以读和写一个条形布局（Striping Layout）的文件；如果该文件的一个块丢失，后台能够检查出并恢复；如果在读的过程中发现数据丢失，能够立即解码出丢失的数据从而不影响读操作。&lt;/li&gt;
&lt;li&gt;支持将一个多备份模式（HDFS原有模式）的文件转换成连续布局（Contiguous Layout），以及从连续布局转换成多备份模式。&lt;/li&gt;
&lt;li&gt;编解码器将作为插件，用户可指定文件所使用的编解码器。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;编码器可以作为独立的插件，从而可以将使用AI加速硬件的编码器作为独立的插件，分发到有GPU或TPU硬件资源的集群中。特别是Hadoop 3.0的yarn组件目前也在也k8s深度整合，做一些GPU硬件资源的调度和管理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此文已由作者授权腾讯云+社区在各渠道发布&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取更多新鲜技术干货，可以关注我们腾讯云技术社区-云加社区官方号及知乎机构号&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 08 Jan 2019 04:14:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<og:description>本文由云+社区发表 做为大数据生态系统中最重要的底层存储文件系统HDFS，为了保证系统的可靠性，HDFS通过多副本的冗余来防止数据的丢失。通常，HDFS中每一份数据都设置两个副本，这也使得存储利用率仅</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/10238278.html</dc:identifier>
</item>
<item>
<title>MySQL Backup mysqldump备份流程学习 - H_Johnny</title>
<link>http://www.cnblogs.com/dbabd/p/10238105.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dbabd/p/10238105.html</guid>
<description>&lt;p&gt;&lt;strong&gt;正文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们都知道MySQL逻辑备份工具&lt;strong&gt;mysqldump&lt;/strong&gt;可以保证备份数据的一致性，但是它是怎么保持一致性的？&lt;/p&gt;
&lt;p&gt;本文不讨论&lt;strong&gt;mysqldump&lt;/strong&gt;具体的选项和用法，一直对&lt;strong&gt;mysqldump&lt;/strong&gt;的工作机制梳理的不太清楚，这篇主要来分析下&lt;strong&gt;mysqldump&lt;/strong&gt;的工作原理和工作步骤，了解它为什么可以获取一致性的备份。&lt;/p&gt;
&lt;p&gt;关于&lt;strong&gt;mysqldump&lt;/strong&gt;常用选项说明与用法参考另一篇博文：&lt;a href=&quot;https://www.cnblogs.com/dbabd/p/10232786.html&quot;&gt;&lt;strong&gt;MySQL Backup mysqldump 常用选项与主要用法&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过打开general log的方法来记录&lt;strong&gt;mysqldump&lt;/strong&gt;备份的过程。&lt;/p&gt;
&lt;h2 id=&quot;前期准备&quot;&gt;前期准备&lt;/h2&gt;
&lt;h3 id=&quot;开启general-log&quot;&gt;开启general log&lt;/h3&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;(root@localhost) [(none)] &amp;gt; set global general_log = 1;
Query OK, 0 rows affected (0.00 sec)

(root@localhost) [(none)] &amp;gt; show global variables like '%general%';
+------------------+---------------------------------+
| Variable_name    | Value                           |
+------------------+---------------------------------+
| general_log      | ON                              |
| general_log_file | /data/mysql/3306/data/dbabd.log |
+------------------+---------------------------------+
2 rows in set (0.01 sec)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;mysqldump执行全库备份&quot;&gt;mysqldump执行全库备份&lt;/h3&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# mysqldump -uadmin -p -h192.168.58.3 -P3306 -E -R --triggers --single-transaction --master-data=2 -A &amp;gt; test_all.sql&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;分析general-log日志&quot;&gt;分析general log日志&lt;/h2&gt;
&lt;h3 id=&quot;开头部分&quot;&gt;开头部分&lt;/h3&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Connect   admin@dbabd on  using TCP/IP
53 Query     /*!40100 SET @@SQL_MODE='' */
53 Query     /*!40103 SET TIME_ZONE='+00:00' */
53 Query     FLUSH /*!40101 LOCAL */ TABLES
53 Query     FLUSH TABLES WITH READ LOCK
53 Query     SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ
53 Query     START TRANSACTION /*!40100 WITH CONSISTENT SNAPSHOT */
53 Query     SHOW VARIABLES LIKE 'gtid\_mode'
53 Query     SHOW MASTER STATUS
53 Query     UNLOCK TABLES
53 Query     SELECT LOGFILE_GROUP_NAME, FILE_NAME, TOTAL_EXTENTS, INITIAL_SIZE, ENGINE, EXTRA FROM INFORMATION_SCHEMA.FILES WHERE FILE_TYPE = 'UNDO LOG' AND FILE_NAME IS NOT NULL AND LOGFILE_GROUP_NAME IS NOT NULL GROUP BY LOGFILE_GROUP_NAME, FILE_NAME, ENGINE, TOTAL_EXTENTS, INITIAL_SIZE ORDER BY LOGFILE_GROUP_NAME
53 Query     SELECT DISTINCT TABLESPACE_NAME, FILE_NAME, LOGFILE_GROUP_NAME, EXTENT_SIZE, INITIAL_SIZE, ENGINE FROM INFORMATION_SCHEMA.FILES WHERE FILE_TYPE = 'DATAFILE' ORDER BY TABLESPACE_NAME, LOGFILE_GROUP_NAME
53 Query     SHOW DATABASES
53 Query     SHOW VARIABLES LIKE 'ndbinfo\_version'&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;备份连接，设置sql_mode为''，设置time_zone&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Connect   admin@dbabd on  using TCP/IP
53 Query     /*!40100 SET @@SQL_MODE='' */
53 Query     /*!40103 SET TIME_ZONE='+00:00' */&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;FLUSH TABLES&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     FLUSH /*!40101 LOCAL */ TABLES&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关闭所有的表，并强制关闭所有正在使用的表，同时也会移除所有&lt;strong&gt;query cache&lt;/strong&gt;结果。&lt;/p&gt;
&lt;p&gt;详细说明可以参考官方文档：&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/flush.html#flush-tables&quot;&gt;FLUSH TABLES&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据官文文档的描述：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;FLUSH TABLES is not permitted when there is an active LOCK TABLES ... READ. To flush and lock tables, use FLUSH TABLES tbl_name ... WITH READ LOCK instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;意思是如果有一个会话正在执行&lt;code&gt;LOCK TABLES ... READ&lt;/code&gt;语句，另一个会话执行&lt;code&gt;FLUSH TABLES&lt;/code&gt;语句是不允许的，会被阻塞。可以使用&lt;code&gt;FLUSH TABLES ... WITH READ LOCK&lt;/code&gt;替代。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;FLUSH TABLES WITH READ LOCK&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     FLUSH TABLES WITH READ LOCK&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关闭所有打开的表并且对所有数据库表加一个全局读锁。&lt;/p&gt;
&lt;p&gt;详细说明可以参考官方文档：&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/flush.html#flush-tables-with-read-lock&quot;&gt;FLUSH TABLES WITH READ LOCK&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据官方文档的描述&lt;/p&gt;
&lt;blockquote readability=&quot;17&quot;&gt;
&lt;p&gt;FLUSH TABLES WITH READ LOCK acquires a global read lock rather than&lt;br/&gt;table locks, so it is not subject to the same behavior as LOCK TABLES&lt;br/&gt;and UNLOCK TABLES with respect to table locking and implicit commits:&lt;/p&gt;
&lt;p&gt;UNLOCK TABLES implicitly commits any active transaction only if any&lt;br/&gt;tables currently have been locked with LOCK TABLES. The commit does&lt;br/&gt;not occur for UNLOCK TABLES following FLUSH TABLES WITH READ LOCK&lt;br/&gt;because the latter statement does not acquire table locks.&lt;/p&gt;
&lt;p&gt;Beginning a transaction causes table locks acquired with LOCK TABLES&lt;br/&gt;to be released, as though you had executed UNLOCK TABLES. Beginning a&lt;br/&gt;transaction does not release a global read lock acquired with FLUSH&lt;br/&gt;TABLES WITH READ LOCK.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;FLUSH TABLES WITH READ LOCK&lt;/code&gt;语句获取的是一个全局读锁而不是进行锁表，不像&lt;code&gt;LOCK TABLES&lt;/code&gt;和U&lt;code&gt;NLOCK TABLES&lt;/code&gt;语句的行为；&lt;/li&gt;
&lt;li&gt;只要任何表当前被&lt;code&gt;LOCK TABLES&lt;/code&gt;锁住时，执行&lt;code&gt;UNLOCK TABLES&lt;/code&gt;会隐式提交任何活动的事务，不过已执行&lt;code&gt;FLUSH TABLES WITH READ LOCK&lt;/code&gt;再执行&lt;code&gt;UNLOCK TABLES&lt;/code&gt;并不会进行提交，因为后续的语句并不会获取表锁；&lt;/li&gt;
&lt;li&gt;开始一个事务会造成&lt;code&gt;LOCK TABLES&lt;/code&gt;获得的表锁释放，就像已经执行了&lt;code&gt;UNLOCK TABLES&lt;/code&gt;。开始一个事务并不会造成&lt;code&gt;FLUSH TABLES WITH READ LOCK&lt;/code&gt;获取的全局读锁释放。&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;设置会话隔离级别为REPEATABLE READ&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;开启一致性快照事务&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     START TRANSACTION /*!40100 WITH CONSISTENT SNAPSHOT */&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因为要开启一致性快照事务，所以必须将务事务的隔离级别设置成&lt;code&gt;REPEATABLE READ&lt;/code&gt;。所以便有了上面设置会话级隔离级别的语句。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;A &lt;strong&gt;consistent read&lt;/strong&gt; means that InnoDB uses multi-versioning to present to a query a snapshot of the database at a point in time. The query sees the changes made by transactions that committed before that point of time, and no changes made by later or uncommitted transactions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据官方文档的描述，这一步是为了确保该事务开启时之后读取的快照都是基于同一个时刻的，同时获取得到一个事务号，就是&lt;code&gt;SELECT&lt;/code&gt;都能读取到一开始同一个的&lt;code&gt;READ VIEW&lt;/code&gt;，不受之后其他事务修改或者未提交事务的影响。&lt;/p&gt;
&lt;p&gt;详细说明可参考官方文档：&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/innodb-consistent-read.html&quot;&gt;innodb-consistent-read&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;查看是否开启GTID模式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     SHOW VARIABLES LIKE 'gtid\_mode'&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;获取当前binlog的位置信息&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     SHOW MASTER STATUS&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;释放全局读锁&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     UNLOCK TABLES&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;查看所有数据库信息&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     SHOW DATABASES&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;备份部分&quot;&gt;备份部分&lt;/h3&gt;
&lt;p&gt;来看下开始备份表的日志，这里选取test1为例说明：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Init DB   mysql
53 Query     SHOW CREATE DATABASE IF NOT EXISTS `mysql`
53 Query     SAVEPOINT sp
53 Query     show tables
53 Query     show table status like 'columns\_priv'
53 Query     SET SQL_QUOTE_SHOW_CREATE=1
53 Query     SET SESSION character_set_results = 'binary'
53 Query     show create table `columns_priv`
53 Query     SET SESSION character_set_results = 'utf8'
53 Query     show fields from `columns_priv`
53 Query     show fields from `columns_priv`
53 Query     SELECT /*!40001 SQL_NO_CACHE */ * FROM `columns_priv`
53 Query     SET SESSION character_set_results = 'binary'
53 Query     use `mysql`
53 Query     select @@collation_database
53 Query     SHOW TRIGGERS LIKE 'columns\_priv'
53 Query     SET SESSION character_set_results = 'utf8'
53 Query     ROLLBACK TO SAVEPOINT sp
…………省略…………

53 Init DB   test1
53 Query     SHOW CREATE DATABASE IF NOT EXISTS `test1`
53 Query     SAVEPOINT sp
53 Query     show tables
53 Query     show table status like 't1'
53 Query     SET SQL_QUOTE_SHOW_CREATE=1
53 Query     SET SESSION character_set_results = 'binary'
53 Query     show create table `t1`
53 Query     SET SESSION character_set_results = 'utf8'
53 Query     show fields from `t1`
53 Query     show fields from `t1`
53 Query     SELECT /*!40001 SQL_NO_CACHE */ * FROM `t1`
53 Query     SET SESSION character_set_results = 'binary'
53 Query     use `test1`
53 Query     select @@collation_database
53 Query     SHOW TRIGGERS LIKE 't1'
53 Query     SET SESSION character_set_results = 'utf8'
53 Query     ROLLBACK TO SAVEPOINT sp
53 Query     show events
53 Query     use `test1`
53 Query     select @@collation_database
53 Query     SET SESSION character_set_results = 'binary'
53 Query     SHOW FUNCTION STATUS WHERE Db = 'test1'
53 Query     SHOW PROCEDURE STATUS WHERE Db = 'test1'
…………省略…………

53 Init DB   test2
53 Query     SHOW CREATE DATABASE IF NOT EXISTS `test2`
53 Query     SAVEPOINT sp
53 Query     show tables
53 Query     show table status like 't1'
53 Query     SET SQL_QUOTE_SHOW_CREATE=1
53 Query     SET SESSION character_set_results = 'binary'
53 Query     show create table `t1`
53 Query     SET SESSION character_set_results = 'utf8'
53 Query     show fields from `t1`
53 Query     show fields from `t1`
53 Query     SELECT /*!40001 SQL_NO_CACHE */ * FROM `t1`
53 Query     SET SESSION character_set_results = 'binary'
53 Query     use `test2`
53 Query     select @@collation_database
53 Query     SHOW TRIGGERS LIKE 't1'
53 Query     SET SESSION character_set_results = 'utf8'
53 Query     ROLLBACK TO SAVEPOINT sp
53 Query     RELEASE SAVEPOINT sp
53 Query     show events
53 Query     use `test2`
53 Query     select @@collation_database
53 Query     SET SESSION character_set_results = 'binary'
53 Query     SHOW FUNCTION STATUS WHERE Db = 'test2'
53 Query     SHOW PROCEDURE STATUS WHERE Db = 'test2'
53 Query     SET SESSION character_set_results = 'utf8'
53 Quit&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;查看建库语句，所有数据库进行循环顺序备份&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Init DB   test1
53 Query     SHOW CREATE DATABASE IF NOT EXISTS `test1`&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;创建检查点&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     SAVEPOINT sp&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;创建一个检查点，检查点的作用是在一个事务中执行&lt;code&gt;ROLLBACK TO SAVEPOINT&lt;/code&gt;语句之后能够将事务回滚到检查点位置而不中止事务。&lt;/p&gt;
&lt;p&gt;详细说明可参考官方文档：&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/savepoint.html&quot;&gt;SAVEPOINT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mysqldump&lt;/code&gt;备份是通过执行&lt;code&gt;SELECT&lt;/code&gt;进行的，但是&lt;code&gt;SELECT&lt;/code&gt;语句执行没结束同时会持有该对象的&lt;strong&gt;MDL&lt;/strong&gt;锁，为了保证在备份期间不影响已经备份表的&lt;strong&gt;DDL&lt;/strong&gt;操作被阻塞，所以就有了&lt;code&gt;SAVEPOINT&lt;/code&gt;，每次备份完一张表就将事务回滚到&lt;code&gt;SAVEPOINT&lt;/code&gt;的位置，同时这个操作会释放该表的&lt;strong&gt;MDL&lt;/strong&gt;锁，但这并不会中止这个事务，其他事务可以对这张表进行&lt;strong&gt;DDL&lt;/strong&gt;操作。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;获取表的状态信息&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     show table status like 'columns\_priv'&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;设置字符集为binary&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     SET SESSION character_set_results = 'binary'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mysqldump&lt;/code&gt;为了更好的备份表结构，将字符集先设置成binary，避免出错。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;备份建表语句&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     show tables
53 Query     show table status like 't1'&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;设置字符集为utf8&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     SET SESSION character_set_results = 'utf8'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;开始备份表数据时将字符集设置为数据库的字符集。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;获取表的字段信息&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     show fields from `t1`&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;开始备份表&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     SELECT /*!40001 SQL_NO_CACHE */ * FROM `t1`&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;开始备份触发器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     SHOW TRIGGERS LIKE 't1'&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;回滚到检查点&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     ROLLBACK TO SAVEPOINT sp&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上一张表就算备份完成，接下去就是循环上面步骤备份完该数据库下所有的表。&lt;/p&gt;
&lt;p&gt;完成所有表的备份之后，最后备份的数据库中的事件、函数、存储过程：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     show events
53 Query     use `test1`
53 Query     select @@collation_database
53 Query     SET SESSION character_set_results = 'binary'
53 Query     SHOW FUNCTION STATUS WHERE Db = 'test1'
53 Query     SHOW PROCEDURE STATUS WHERE Db = 'test1'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，一个数据库的备份完成，开始备份其他数据库。&lt;/p&gt;
&lt;h3 id=&quot;结尾部分&quot;&gt;结尾部分&lt;/h3&gt;
&lt;p&gt;来看下结尾部分的日志&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;53 Query     ROLLBACK TO SAVEPOINT sp
53 Query     RELEASE SAVEPOINT sp   &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当备份完最后一个数据库的最后一张表后释放了检查点，再完成最后一个数据库事件、函数和存储过程的备份之后进行退出，退出默认会进行提交操作，所有备份结束。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过以上的日志分析，可以总结下&lt;code&gt;mysqldump&lt;/code&gt;备份的主要流程：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;一开始执行&lt;code&gt;FLUSH TABLES&lt;/code&gt;关闭实例中所有的表；&lt;/li&gt;
&lt;li&gt;执行语句&lt;code&gt;FLUSH TABLES WITH READ LOCK&lt;/code&gt;获取全局表的读锁，保证表一致性；&lt;/li&gt;
&lt;li&gt;设置会话级别事务的隔离级别为&lt;code&gt;REPEATABLE READ&lt;/code&gt;，保证事务期间数据的一致性；&lt;/li&gt;
&lt;li&gt;执行语句&lt;code&gt;START TRANSACTION /*!40100 WITH CONSISTENT SNAPSHOT */&lt;/code&gt;创建一个一致性事务快照；&lt;/li&gt;
&lt;li&gt;查看是否开启了&lt;strong&gt;GTID&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;获取当前状态下的binlog文件及位置信息(如有指定选项 &lt;strong&gt;--master-data&lt;/strong&gt;)；&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;UNLOCK TABLES&lt;/code&gt;释放全局表读锁；&lt;/li&gt;
&lt;li&gt;开始备份第一个数据库数据，为事务创建一个检查点，备份完一张表之后还原至检查点再接着备份下一张表，直至该数据库所有的表备份完成，接着备份下一个数据库数据，直至所有数据库数据备份完成；&lt;/li&gt;
&lt;li&gt;当备份完最后一个数据库数据后释放检查点，退出并中止事务。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/mysqldump.html&quot;&gt;&lt;strong&gt;https://dev.mysql.com/doc/refman/5.7/en/mysqldump.html&lt;/strong&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/flush.html&quot;&gt;&lt;strong&gt;https://dev.mysql.com/doc/refman/5.7/en/flush.html&lt;/strong&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://tencentdba.com/blog/mysqldump-backup-principle/&quot;&gt;&lt;strong&gt;http://tencentdba.com/blog/mysqldump-backup-principle/&lt;/strong&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.unixfbi.com/475.html&quot;&gt;&lt;strong&gt;http://www.unixfbi.com/475.html&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;☆〖本人水平有限，文中如有错误还请留言批评指正！〗☆&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 08 Jan 2019 03:45:00 +0000</pubDate>
<dc:creator>H_Johnny</dc:creator>
<og:description>正文 我们都知道MySQL逻辑备份工具 mysqldump 可以保证备份数据的一致性，但是它是怎么保持一致性的？ 本文不讨论 mysqldump 具体的选项和用法，一直对 mysqldump 的工作机</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dbabd/p/10238105.html</dc:identifier>
</item>
<item>
<title>码农人生——从未学过Android如何开发Android App 案例讲解-第002期案例 - fishpro</title>
<link>http://www.cnblogs.com/fishpro/p/10237255.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fishpro/p/10237255.html</guid>
<description>&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;标题有点晃眼，本次分享是&lt;a href=&quot;https://www.cnblogs.com/fishpro/p/10223492.html&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;s2&quot;&gt;002&lt;/span&gt;期博文&lt;/a&gt;的实践故事，不会有任何代码、也不会教别人&lt;span class=&quot;s2&quot;&gt;android&lt;/span&gt; 如何开发，类似博文已经有大批大批，而且还会有陆陆续续的人写，我写的文章，主要是经验之谈，希望总结出的一些方法论能够给你哪怕是一丢丢的启发，我也是成就感爆棚。&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;这个项目大约是我&lt;span class=&quot;s2&quot;&gt;2016&lt;/span&gt;年做过的第一个&lt;span class=&quot;s2&quot;&gt;Android&lt;/span&gt;客户端，对于&lt;span class=&quot;s2&quot;&gt;Android&lt;/span&gt;客户端我个人不太喜欢开发,在&lt;span class=&quot;s2&quot;&gt;2014&lt;/span&gt;年那时候我有接触过类似项目，但是没有去做。&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;业务场景是这样的，当时公司做健康福利的方面的产品，具体就是跟上游大厂谈他们的渠道，然后打包服务卖给企业，是&lt;span class=&quot;s2&quot;&gt;toB&lt;/span&gt;的业务。&lt;span class=&quot;s2&quot;&gt;PC&lt;/span&gt;和&lt;span class=&quot;s2&quot;&gt;HTML5&lt;/span&gt;开发很顺利，&lt;span class=&quot;s2&quot;&gt;IOS&lt;/span&gt;当时招聘了一个（我主要更多的是架构、管理工作），&lt;span class=&quot;s2&quot;&gt;Android&lt;/span&gt;客户端当时没有人员，我们后端是&lt;span class=&quot;s2&quot;&gt;Net&lt;/span&gt;，为了给公司节约成本，我们决定让公司一小伙去转&lt;span class=&quot;s2&quot;&gt;Android&lt;/span&gt;客户端编程。&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;入门全靠师傅带，关键我们没有一个人会&lt;span class=&quot;s2&quot;&gt;Android&lt;/span&gt;客户端编程，我又跟员工夸下海口，说夸语言编程其实很简单，于是我就担任项目基本架构和初期版本的搭建，也担任了师傅的角色。因为之前顺利入坑了&lt;span class=&quot;s2&quot;&gt;IOS&lt;/span&gt;，对于&lt;span class=&quot;s2&quot;&gt;Android&lt;/span&gt;客户端我信心爆棚。&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;这里按照上一章节《&lt;a href=&quot;http://www.fishpro.com.cn/index.php/2019/01/03/good02/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;码农人生--如何快速使用从未学过的语言实现项目开发！&lt;/a&gt;》讲述的方法&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-143 aligncenter&quot; src=&quot;http://www.fishpro.com.cn/wp-content/uploads/2019/01/a671e-7210c-c106b-2a2b6-61b8e-39ca5-3c6fa-WX20190106-124622@2x.png&quot; alt=&quot;&quot; width=&quot;750&quot; height=&quot;394&quot;/&gt;  &lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;s2&quot;&gt;1.&lt;/span&gt;基本语法的了解&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;strong&gt;此步骤学习方法&lt;/strong&gt;&lt;br/&gt;1.采用类比法，就是与你熟悉的语言比较&lt;br/&gt;2.边看边练习&lt;br/&gt;3，定期总结出博客文章投放出来&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;由于&lt;span class=&quot;s2&quot;&gt;Java的语法跟&lt;span class=&quot;s2&quot;&gt;C#的语法很像，感觉&lt;span class=&quot;s2&quot;&gt;C#的设计是从&lt;span class=&quot;s2&quot;&gt;Java那边来的灵感，或者是一次升级，对于&lt;span class=&quot;s2&quot;&gt;Java的基本语法找了个简单的教程看了一遍，记得当时是在谷歌搜索的教程。花了半天时间做了些简单的事例，实际上应用过程中还是有差异，比如一开始总是把字符串的等号操作直接写成&lt;span class=&quot;s2&quot;&gt;==，而不是&lt;span class=&quot;s2&quot;&gt;equal，就就是从&lt;span class=&quot;s2&quot;&gt;C#转&lt;span class=&quot;s2&quot;&gt;Java的&lt;span class=&quot;s2&quot;&gt;bug。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;这个阶段前前后后大概&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;s2&quot;&gt;3&lt;/span&gt;天的时间&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;

&lt;p class=&quot;p3&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;s2&quot;&gt;2.&lt;/span&gt;对于目标业务需求的分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p class=&quot;p3&quot;&gt;主要是技术点和架构，我们的客户端是以信息类为主的，跟我上篇提到的《&lt;span class=&quot;s2&quot;&gt;Ios&lt;/span&gt;保险&lt;span class=&quot;s2&quot;&gt;TPA&lt;/span&gt;客户端》的分析点基本是一致的，如果信息管理系统可以叫做操作数据库的系统，那么此类信息管理类客户端可以叫做操作接口&lt;span class=&quot;s2&quot;&gt;API&lt;/span&gt;的应用。除了一些基本的界面事件，剩下的就是与服务器接口的操作交互。&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;strong&gt;此步骤学习方法&lt;/strong&gt;&lt;br/&gt;1.分类 我分析的通常是信息管理类、工控客户端等&lt;br/&gt;2.分层分析，界面层、后台代码事件、服务层的业务逻辑&lt;br/&gt;3.功能分析，写出主要由哪些功能组成，有哪些关键技术&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;由于这次的软件规模要大于我上次的《&lt;span class=&quot;s2&quot;&gt;Ios&lt;/span&gt;保险&lt;span class=&quot;s2&quot;&gt;TPA&lt;/span&gt;客户端》我简单列出本次客户端的技术要点&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;      &lt;span&gt; 1）.UI&lt;/span&gt;&lt;/span&gt;&lt;span&gt;事件操作、跳转、本地缓存、嵌入&lt;span class=&quot;s2&quot;&gt;H5&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span&gt;&lt;span class=&quot;s2&quot;&gt;       2）.&lt;/span&gt;网络操作&lt;span class=&quot;s2&quot;&gt;post&lt;/span&gt;、&lt;span class=&quot;s2&quot;&gt;get&lt;/span&gt;，&lt;span class=&quot;s2&quot;&gt;Json&lt;/span&gt;的序列化与反序列化&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span&gt;&lt;span class=&quot;s2&quot;&gt;       3）.&lt;/span&gt;上传图片（多图上传）&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span&gt;&lt;span class=&quot;s2&quot;&gt;       4）.&lt;/span&gt;集成支付宝、微信支付、其他支付方式需要考虑扩展性&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span&gt;&lt;span class=&quot;s2&quot;&gt;       5）.LBS&lt;/span&gt;定位、地图的嵌入&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span&gt;&lt;span class=&quot;s2&quot;&gt;       6）&lt;/span&gt;功能上需要做模块化，就是可增加减少模块（我的模块包括体检、专家特许门诊、海外医疗、网上药店等等）&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span&gt;&lt;span class=&quot;s2&quot;&gt;       &lt;/span&gt;因为本次我的终点是对&lt;span class=&quot;s2&quot;&gt;android&lt;/span&gt;客户端实现基础的架构，和具体的实现，后面则交给同事去继续开发。我的侧重点则在于架构。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span&gt;&lt;span class=&quot;s2&quot;&gt;       &lt;/span&gt;这个阶段前前后后大概&lt;strong&gt;&lt;span class=&quot;s2&quot;&gt;2&lt;/span&gt;周的时间&lt;/strong&gt;，实际上花多少时间取决于具体看业务项目的体量和你的经验。&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;p3&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;s2&quot;&gt;3.&lt;/span&gt;项目架构与关键技术&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p class=&quot;p3&quot;&gt;感谢这个时代，那些具有严谨思维而又能够开源代码供学习者学习的人，我第一步的计划就是从那些大的稳定的开源项目中把基础的架构扒出来。当时我找到的是&lt;span class=&quot;s2&quot;&gt;OSChina&lt;/span&gt;，因为之前开发&lt;span class=&quot;s2&quot;&gt;Ios&lt;/span&gt;有接触过，觉得&lt;span class=&quot;s2&quot;&gt;oschina&lt;/span&gt;写的开源的还是可以的。&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;对于如何参考开源项目，我的见解是如果是自己公司的项目，开源项目则不要直接拿来用，哪怕你一行一行代码复制，你搬过来，你自己知根知底。如果是外单项目以赚钱为目的的，那你就可以直接用。&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;strong&gt;此步骤学习方法&lt;/strong&gt;&lt;br/&gt;1.分析哪种架构方式容易完成项目，通常是三层架构&lt;br/&gt;2.找到类似开源项目或参考其他已有项目&lt;br/&gt;3.搭建脚手架项目，实现关键技术&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;我主要参考了&lt;span class=&quot;s2&quot;&gt;&lt;span&gt;&lt;strong&gt;oschina&lt;/strong&gt;&lt;/span&gt;(&lt;a href=&quot;https://www.oschina.net/app&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://www.oschina.net/app&lt;/a&gt;)&lt;/span&gt;的地方,&lt;span&gt;具体源码在&lt;/span&gt;（&lt;a href=&quot;https://gitee.com/oschina/android-app&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://gitee.com/oschina/android-app&lt;/a&gt;）&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;       &lt;/span&gt;a.&lt;span class=&quot;s1&quot;&gt;程序目录架构&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;比如&lt;/span&gt; ui&lt;span class=&quot;s1&quot;&gt;放&lt;/span&gt;activity&lt;span class=&quot;s1&quot;&gt;、&lt;/span&gt;bean&lt;span class=&quot;s1&quot;&gt;放实体类、&lt;/span&gt;adapter&lt;span class=&quot;s1&quot;&gt;放适配器等等。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;       b.&lt;/span&gt;编写的主要风格，比如命名风格、规则等&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;       c.&lt;/span&gt;那些关键技术我直接&lt;span class=&quot;s2&quot;&gt;copy&lt;/span&gt;代码到项目中来&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;      &lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;这个阶段&lt;span class=&quot;s2&quot;&gt;2&lt;/span&gt;周时间，跟第二点是有部分时间是重叠的。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;p3&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;s2&quot;&gt;4.&lt;/span&gt;项目编码阶段&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p class=&quot;p3&quot;&gt;完成上面的几个阶段，实际上编码工作就简单了，架构和基础的脚手架做的好的话，剩下的就是敲代码、解决细节问题。&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;这个项目实际上后面不是开发，具体是同事继续开发，我只是写了几个功能点，然给他讲解如何写。具体时间就贴出来。&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;&lt;span&gt;&lt;strong&gt;5.&lt;span class=&quot;s1&quot;&gt;上线&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p class=&quot;p3&quot;&gt;android主要是碎片化测试，兼容性测试，我们当时通过网上在线测试服务实现不同机型测试。测试完后就进行了上线，总体反馈还是不错，有些bug，后期陆陆续续修改了。&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;希望你喜欢上面的分析，有什么问题可以直接留言交流谢谢。&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;所谓学以致用，我曾经学过的，那些没用过的技术基本忘光。下一期我将整理下技术人在互联网变现的内容，尽请期待。&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;完！&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;往期博文&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;01.&lt;a href=&quot;https://www.cnblogs.com/fishpro/p/10201037.html&quot; target=&quot;_blank&quot;&gt;码农人生-作为码农的你如何挣钱-记2018年总结&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;02.&lt;a href=&quot;https://www.cnblogs.com/fishpro/p/10204253.html&quot; target=&quot;_blank&quot;&gt;码农人生--千里之行始于足下--如何执行我的新年的计划--第001期博文&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;03.&lt;a href=&quot;https://www.cnblogs.com/fishpro/p/10223492.html&quot; target=&quot;_blank&quot;&gt;码农人生-如何快速使用从未学过的语言实现项目开发-第002期博文&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 08 Jan 2019 03:34:00 +0000</pubDate>
<dc:creator>fishpro</dc:creator>
<og:description>标题有点晃眼，本次分享是002期博文的实践故事，不会有任何代码、也不会教别人android 如何开发，类似博文已经有大批大批，而且还会有陆陆续续的人写，我写的文章，主要是经验之谈，希望总结出的一些方法</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fishpro/p/10237255.html</dc:identifier>
</item>
<item>
<title>机器学习与Tensorflow（7）——tf.train.Saver()、inception-v3的应用 - 小伙郭</title>
<link>http://www.cnblogs.com/guoruxin/p/10238018.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guoruxin/p/10238018.html</guid>
<description>&lt;ul&gt;&lt;li&gt;tf.train.Saver()是一个类，提供了变量、模型(也称图Graph)的保存和恢复模型方法。&lt;/li&gt;
&lt;li&gt;TensorFlow是通过构造Graph的方式进行深度学习，任何操作(如卷积、池化等)都需要operator，保存和恢复操作也不例外。&lt;/li&gt;
&lt;li&gt;在tf.train.Saver()类初始化时，用于保存和恢复的save和restore operator会被加入Graph。所以，下列类初始化操作应在搭建Graph时完成。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
saver = tf.train.Saver()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;TensorFlow的保存和恢复分为两种：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;保存和恢复变量&lt;/li&gt;
&lt;li&gt;保存和恢复模型&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;br/&gt;&lt;span&gt;saver.save()保存模型&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;#举例：&lt;br/&gt;保存一个训练好的手写数据集识别模型&lt;br/&gt;保存在当前路径的net文件夹中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;&lt;img id=&quot;code_img_closed_87d6571f-9af5-4f80-aec0-0088d204dab3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_87d6571f-9af5-4f80-aec0-0088d204dab3&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_87d6571f-9af5-4f80-aec0-0088d204dab3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; os.environ[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TF_CPP_MIN_LOG_LEVEL&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; tensorflow.examples.tutorials.mnist &lt;span&gt;import&lt;/span&gt;&lt;span&gt; input_data
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;载入数据集&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; mnist = input_data.read_data_sets(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MNIST_data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, one_hot=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;每个批次100张照片&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; batch_size = 100
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;计算一个需要多少个批次&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; n_batch = mnist.train.num_examples //&lt;span&gt; batch_size
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义两个placeholder&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; x = tf.placeholder(tf.float32, [None, 784&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; y = tf.placeholder(tf.float32, [None, 10&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建一个简单的神经网络，输入层784个神经元，输出层10个神经元&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; W = tf.Variable(tf.zeros([784, 10&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; b = tf.Variable(tf.zeros([10&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; prediction = tf.nn.softmax(tf.matmul(x, W) +&lt;span&gt; b)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;代价函数&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=&lt;span&gt;prediction))
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用梯度下降法&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; train_step = tf.train.GradientDescentOptimizer(0.2&lt;span&gt;).minimize(loss)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;初始化变量&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; init =&lt;span&gt; tf.global_variables_initializer()
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;结果存放在一个布尔型列表中&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(prediction, 1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; accuracy =&lt;span&gt; tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; saver =&lt;span&gt; tf.train.Saver()
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;with tf.Session() as sess:
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    sess.run(init)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; epoch &lt;span&gt;in&lt;/span&gt; range(11&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; batch &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(n_batch):
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             batch_xs, batch_ys =&lt;span&gt; mnist.train.next_batch(batch_size)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             sess.run(train_step, feed_dict=&lt;span&gt;{x:batch_xs, y:batch_ys})
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         acc = sess.run(accuracy, feed_dict=&lt;span&gt;{x:mnist.test.images, y:mnist.test.labels})
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Iter = &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(epoch) +&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, Testing Accuracy = &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(acc))
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;保存模型&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;     saver.save(sess, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;net/my_net.ckpt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;保存路径中的文件为：&lt;/span&gt;
&lt;span&gt;    checkpoint：保存当前网络状态的文件
    my_net.ckpt.data&lt;/span&gt;-00000-of-00001&lt;span&gt;
    my_net.ckpt.index
    my_net.ckpt.meta：保存Graph结构的文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1517322/201901/1517322-20190108113130202-716963042.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;关于函数saver.save()，常用的参数就是前三个:&lt;/span&gt;
&lt;span&gt;save(
    sess,  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 必需参数，Session对象&lt;/span&gt;
    save_path,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 必需参数，存储路径&lt;/span&gt;
    global_step=None,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 可以是Tensor, Tensor name, 整型数&lt;/span&gt;
    latest_filename=None,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 协议缓冲文件名，默认为'checkpoint'，不用管&lt;/span&gt;
    meta_graph_suffix=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;meta&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 图文件的后缀，默认为'.meta'，不用管&lt;/span&gt;
    write_meta_graph=True,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是否保存Graph&lt;/span&gt;
    write_state=True,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 建议选择默认值True&lt;/span&gt;
    strip_default_attrs=False  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是否跳过具有默认值的节点&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;saver.restore()加载已经训练好的模型&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;#举例：&lt;br/&gt;通过加载刚才保存的训练好的手写数据集识别模型进行手写数据集的识别&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;&lt;img id=&quot;code_img_closed_ea1845fb-e092-46bc-b583-3c6ff65b99c6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ea1845fb-e092-46bc-b583-3c6ff65b99c6&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ea1845fb-e092-46bc-b583-3c6ff65b99c6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; os.environ[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TF_CPP_MIN_LOG_LEVEL&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; tensorflow.examples.tutorials.mnist &lt;span&gt;import&lt;/span&gt;&lt;span&gt; input_data
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; mnist = input_data.read_data_sets(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MNIST_data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, one_hot=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; batch_size = 100
&lt;span&gt; 8&lt;/span&gt; n_batch = mnist.train.num_examples //&lt;span&gt; batch_size
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; x = tf.placeholder(tf.float32, [None, 784&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; y = tf.placeholder(tf.float32, [None, 10&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; W = tf.Variable(tf.zeros([784, 10&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; b = tf.Variable(tf.zeros([10&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; prediction = tf.nn.softmax(tf.matmul(x, W) +&lt;span&gt; b)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=&lt;span&gt;prediction))
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; train_step = tf.train.GradientDescentOptimizer(0.2&lt;span&gt;).minimize(loss)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; init =&lt;span&gt; tf.global_variables_initializer()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(prediction, 1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; accuracy =&lt;span&gt; tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; saver =&lt;span&gt; tf.train.Saver()
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;with tf.Session() as sess:
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    sess.run(init)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(sess.run(accuracy, feed_dict=&lt;span&gt;{x:mnist.test.images, y:mnist.test.labels}))
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     saver.restore(sess, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;net/my_net.ckpt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(sess.run(accuracy, feed_dict={x:mnist.test.images, y:mnist.test.labels}))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行结果：&lt;/span&gt;
    
0.098
0.9178

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;直接得到的准确率相当低，通过加载训练好的模型，识别准确率大大提升。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;模型背景：&lt;/strong&gt;&lt;br/&gt;　　Inception(v3) 模型是Google 训练好的最新一个图像识别模型，我们可以利用它来对我们的图像进行识别。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;下载地址：&lt;/strong&gt;&lt;br/&gt;　　&lt;span&gt;https://storage.googleapis.com/download.tensorflow.org/models/inception_dec_2015.zip&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文件描述：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;classify_image_graph_def.pb 文件就是训练好的Inception-v3模型。&lt;/li&gt;
&lt;li&gt;imagenet_synset_to_human_label_map.txt是类别文件，包含人类标签和uid之间的映射的文件。&lt;/li&gt;
&lt;li&gt;imagenet_2012_challenge_label_map_proto.pbtxt是包含类号和uid之间的映射的文件。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_2ec2049f-ce05-42fe-a87d-6cb7689f4622&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2ec2049f-ce05-42fe-a87d-6cb7689f4622&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2ec2049f-ce05-42fe-a87d-6cb7689f4622&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; os.environ[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TF_CPP_MIN_LOG_LEVEL&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tarfile
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;inception模型下载地址&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; inception_pretrain_model_url = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;inception模型存放地址&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; inception_pretrain_model_dir = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;inception_model&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; os.path.exists(inception_pretrain_model_dir):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    os.makedirs(inception_pretrain_model_dir)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取文件名，以及文件路径&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; filename = inception_pretrain_model_url.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[-1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; filepath =&lt;span&gt; os.path.join(inception_pretrain_model_dir, filename)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;下载模型&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; os.path.exists(filepath):
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;download: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, filename)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     r = requests.get(inception_pretrain_model_url, stream=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     with open(filepath, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; chunk &lt;span&gt;in&lt;/span&gt; r.iter_content(chunk_size=1024&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; chunk:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                f.write(chunk)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;finish: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, filename)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;解压文件&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; tarfile.open(filepath, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r:gz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).extractall(inception_pretrain_model_dir)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;模型结构存放文件&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; log_dir = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;inception_log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; os.path.exists(log_dir):
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    os.makedirs(log_dir)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;classify_image_graph_def.pb为google训练好的模型&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; inception_graph_def_file = os.path.join(inception_pretrain_model_dir, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;classify_image_graph_def.pb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;with tf.Session() as sess:
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建一个图来存放google训练好的模型&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     with tf.gfile.FastGFile(inception_graph_def_file, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         graph_def =&lt;span&gt; tf.GraphDef()
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        graph_def.ParseFromString(f.read())
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         tf.import_graph_def(graph_def, name=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;保存图的结构&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;     writer =&lt;span&gt; tf.summary.FileWriter(log_dir, sess.graph)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     writer.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在下载过程中，下的特别慢，不知道是网络原因还是什么&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;程序总卡着不动&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;所以我就手动下载压缩包并进行解压&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;下载结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1517322/201901/1517322-20190108112543984-1727063725.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39.5&quot;&gt;&lt;img id=&quot;code_img_closed_89df2be2-35a5-4feb-a022-6e139330a270&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_89df2be2-35a5-4feb-a022-6e139330a270&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_89df2be2-35a5-4feb-a022-6e139330a270&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; os.environ[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TF_CPP_MIN_LOG_LEVEL&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; re
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; PIL &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Image
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib.pyplot as plt
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这部分是对标签号和类别号文件进行一个预处理&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; NodeLookup(object):
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         label_lookup_path = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;inception_model/imagenet_2012_challenge_label_map_proto.pbtxt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         uid_lookup_path = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;inception_model/imagenet_synset_to_human_label_map.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         self.node_lookup =&lt;span&gt; self.load(label_lookup_path, uid_lookup_path)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; load(self, label_lookup_path, uid_lookup_path):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;加载分类字符串n********对应分类名称的文件&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         proto_as_ascii_lines =&lt;span&gt; tf.gfile.GFile(uid_lookup_path).readlines()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         uid_to_human=&lt;span&gt;{}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;一行一行读取数据&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt;&lt;span&gt; proto_as_ascii_lines:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;去掉换行符&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             line = line.strip(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;按照‘\t’进行分割&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             parsed_items = line.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取分类编号&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             uid =&lt;span&gt; parsed_items[0]
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取分类名称&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             human_string = parsed_items[1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;保存编号字符串n********与分类名称的映射关系&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             uid_to_human[uid] =&lt;span&gt; human_string
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;加载分类字符串n********对应分类编号1-1000的文件&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         proto_as_ascii =&lt;span&gt; tf.gfile.GFile(label_lookup_path).readlines()
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         node_id_to_uid =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt;&lt;span&gt; proto_as_ascii:
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; line.startswith(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  target_class:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取分类编号1-1000&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;                 target_class = int(line.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[1&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; line.startswith(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  target_class_string:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取编号字符串nn********&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;                 target_class_string = line.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存分类编号1-1000与编号字符串n********映射关系&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;                 node_id_to_uid[target_class] = target_class_string[1:-2&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 建立分类编号1-1000对应分类名称的映射关系&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;         node_id_to_name =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; key, val &lt;span&gt;in&lt;/span&gt;&lt;span&gt; node_id_to_uid.items():
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取分类名称&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;             name =&lt;span&gt; uid_to_human[val]
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 建立分类编号1-1000到分类名称的映射关系&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;             node_id_to_name[key] =&lt;span&gt; name
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; node_id_to_name
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 传入分类编号1-1000返回分类名称&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; id_to_string(self, node_id):
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; node_id &lt;span&gt;not&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; self.node_lookup:
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.node_lookup[node_id]
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建一个图来存放google训练好的模型&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt; with tf.gfile.FastGFile(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;inception_model/classify_image_graph_def.pb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;     graph_def =&lt;span&gt; tf.GraphDef()
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;    graph_def.ParseFromString(f.read())
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;     tf.import_graph_def(graph_def, name=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt; &lt;span&gt;with tf.Session() as sess:
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;     softmax_tensor = sess.graph.get_tensor_by_name(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;softmax:0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;遍历目录&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; root, dirs, files &lt;span&gt;in&lt;/span&gt; os.walk(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;images/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; file &lt;span&gt;in&lt;/span&gt;&lt;span&gt; files:
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;载入图片&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt;             image_data = tf.gfile.FastGFile(os.path.join(root, file), &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).read()
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;             predictions = sess.run(softmax_tensor, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DecodeJpeg/contents:0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: image_data})&lt;span&gt;#&lt;/span&gt;&lt;span&gt;图片格式是jpg格式&lt;/span&gt;
&lt;span&gt;74&lt;/span&gt;             predictions = np.squeeze(predictions)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;把结果转为1维数据&lt;/span&gt;
&lt;span&gt;75&lt;/span&gt; 
&lt;span&gt;76&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;打印图片路径及名称&lt;/span&gt;
&lt;span&gt;77&lt;/span&gt;             image_path =&lt;span&gt; os.path.join(root, file)
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(image_path)
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; 
&lt;span&gt;80&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 显示图片&lt;/span&gt;
&lt;span&gt;81&lt;/span&gt;             img =&lt;span&gt; Image.open(image_path)
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;            plt.imshow(img)
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt;             plt.axis(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;off&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; &lt;span&gt;            plt.show()
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; 
&lt;span&gt;86&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;排序&lt;/span&gt;
&lt;span&gt;87&lt;/span&gt;             top_k = predictions.argsort()[-5:][::-1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt;             node_lookup =&lt;span&gt; NodeLookup()
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; node_id &lt;span&gt;in&lt;/span&gt;&lt;span&gt; top_k:
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取分类名称&lt;/span&gt;
&lt;span&gt;91&lt;/span&gt;                 human_string =&lt;span&gt; node_lookup.id_to_string(node_id)
&lt;/span&gt;&lt;span&gt;92&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取该分类的置信度&lt;/span&gt;
&lt;span&gt;93&lt;/span&gt;                 score =&lt;span&gt; predictions[node_id]
&lt;/span&gt;&lt;span&gt;94&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s(score = %.5f)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (human_string, score))
&lt;/span&gt;&lt;span&gt;95&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;#执行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
images/1&lt;span&gt;.jpg
giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca(score &lt;/span&gt;= 0.87265&lt;span&gt;)
badger(score &lt;/span&gt;= 0.00260&lt;span&gt;)
lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens(score &lt;/span&gt;= 0.00205&lt;span&gt;)
brown bear, bruin, Ursus arctos(score &lt;/span&gt;= 0.00102&lt;span&gt;)
ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus(score &lt;/span&gt;= 0.00099&lt;span&gt;)

images&lt;/span&gt;/2&lt;span&gt;.jpg
French bulldog(score &lt;/span&gt;= 0.94474&lt;span&gt;)
bull mastiff(score &lt;/span&gt;= 0.00559&lt;span&gt;)
pug, pug&lt;/span&gt;-dog(score = 0.00352&lt;span&gt;)
Staffordshire bullterrier, Staffordshire bull terrier(score &lt;/span&gt;= 0.00165&lt;span&gt;)
boxer(score &lt;/span&gt;= 0.00116&lt;span&gt;)

images&lt;/span&gt;/3&lt;span&gt;.jpg
zebra(score &lt;/span&gt;= 0.94011&lt;span&gt;)
tiger, Panthera tigris(score &lt;/span&gt;= 0.00080&lt;span&gt;)
pencil box, pencil case(score &lt;/span&gt;= 0.00066&lt;span&gt;)
hartebeest(score &lt;/span&gt;= 0.00059&lt;span&gt;)
tiger cat(score &lt;/span&gt;= 0.00042&lt;span&gt;)

images&lt;/span&gt;/4&lt;span&gt;.jpg
hare(score &lt;/span&gt;= 0.87019&lt;span&gt;)
wood rabbit, cottontail, cottontail rabbit(score &lt;/span&gt;= 0.04802&lt;span&gt;)
Angora, Angora rabbit(score &lt;/span&gt;= 0.00612&lt;span&gt;)
wallaby, brush kangaroo(score &lt;/span&gt;= 0.00181&lt;span&gt;)
fox squirrel, eastern fox squirrel, Sciurus niger(score &lt;/span&gt;= 0.00056&lt;span&gt;)

images&lt;/span&gt;/5&lt;span&gt;.jpg
fox squirrel, eastern fox squirrel, Sciurus niger(score &lt;/span&gt;= 0.95047&lt;span&gt;)
marmot(score &lt;/span&gt;= 0.00265&lt;span&gt;)
mongoose(score &lt;/span&gt;= 0.00217&lt;span&gt;)
weasel(score &lt;/span&gt;= 0.00201&lt;span&gt;)
mink(score &lt;/span&gt;= 0.00199)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1517322/201901/1517322-20190108112738343-68167489.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 08 Jan 2019 03:28:00 +0000</pubDate>
<dc:creator>小伙郭</dc:creator>
<og:description>1. tf.train.Saver(） tf.train.Saver()是一个类，提供了变量、模型(也称图Graph)的保存和恢复模型方法。 TensorFlow是通过构造Graph的方式进行深度学习</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guoruxin/p/10238018.html</dc:identifier>
</item>
</channel>
</rss>