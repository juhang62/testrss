<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>上位机学习技巧——c#（原创） - v朋朋</title>
<link>http://www.cnblogs.com/eve612/p/14046103.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/eve612/p/14046103.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（一直更新.......）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、扫描可用串口&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;二、捕获鼠标移到控件（上升沿）/离开控件（下降沿）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在窗体生成代码中，找到对应按钮(这里使用butten1)区域，在区域内添加两个事件，分别是：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　鼠标移到控件上：this.butten1.MouseHover += new System EvenHandler(this.button1_MouseHover) //这个this.button1_MouseHover是自定义一个方法，当鼠标移到button1上，方法触发&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　鼠标离开控件：    this.butten1.MouseLeave += new System EvenHandler(this.button1_MouseLeave) //这个this.button1_MouseLeave是自定义一个方法，当鼠标移开button1上，方法触发&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;三、多个按钮发送事件，添加同一发送方法&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 27 Nov 2020 00:56:00 +0000</pubDate>
<dc:creator>v朋朋</dc:creator>
<og:description>（一直更新.......） 一、扫描可用串口 二、捕获鼠标移到控件（上升沿）/离开控件（下降沿） 在窗体生成代码中，找到对应按钮(这里使用butten1)区域，在区域内添加两个事件，分别是： 鼠标移到</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/eve612/p/14046103.html</dc:identifier>
</item>
<item>
<title>Go 大数据生态迎来重要产品 CDS - Kevin Wan</title>
<link>http://www.cnblogs.com/kevinwan/p/14046046.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kevinwan/p/14046046.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/14470/202011/14470-20201127083032055-829245191.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/tal-tech/cds&quot;&gt;https://github.com/tal-tech/cds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)。它有着优异的性能，可以快速部署和运行。&lt;br/&gt;不过要想使用ClickHouse搭建起数仓用于数据分析，一个重要的问题就是数据如何进入ClickHouse？&lt;br/&gt;我们希望数据源的变化能够自动实时地被同步到ClickHouse，而且支持方便的动态的添加新的数据源(新的数据库，表)，&lt;br/&gt;能够自动的生成对应数据源的schema。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/tal-tech/go-zero&quot;&gt;go-zero&lt;/a&gt;&lt;/strong&gt; 团队使用go语言围绕ClickHouse开发了一些方便的组件与服务。&lt;/p&gt;
&lt;p&gt;我们得到了下面这样的数据同步设计&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/14470/202011/14470-20201127083041633-1159443287.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该数据同步系统大致由以下三部分组成&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;DM 全量同步服务 github.com/tal-tech/cds/dm&lt;/li&gt;
&lt;li&gt;RTU 实时增量同步服务 github.com/tal-tech/cds/rtu&lt;/li&gt;
&lt;li&gt;Galaxy 网页控制台服务 github.com/tal-tech/cds/galaxy&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;流程如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用户可以在网页控制台添加数据源，自动生成DDL，添加同步任务，该任务会被发送到etcd。&lt;/li&gt;
&lt;li&gt;dm会收到全量同步的通知，执行历史数据的全量同步工作。&lt;/li&gt;
&lt;li&gt;之后网页控制台服务会指定connector开启数据库log监听工作，数据会进入kafka。&lt;/li&gt;
&lt;li&gt;监听etcd集群的RTU实时增量同步服务服务会发现有新的任务，RTU自动领取任务，到kafka消费数据并同步至ClickHouse。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上述服务的开发使用了go语言。借助于&lt;a href=&quot;https://github.com/tal-tech/go-zero&quot;&gt;go-zero&lt;/a&gt;中的工具包，如goctl等，&lt;br/&gt;我们快速实现了它。它还加入了支持自适应mongoDB结构变化，支持数据分表等。&lt;/p&gt;
&lt;p&gt;我们相信这是go语言与ClickHouse探索大数据的一个不错的起点，我们希望有更多的人能够参与进来。&lt;/p&gt;
&lt;p&gt;CDS项目地址：&lt;a href=&quot;https://github.com/tal-tech/cds&quot;&gt;https://github.com/tal-tech/cds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;go-zero项目地址：&lt;a href=&quot;https://github.com/tal-tech/go-zero&quot;&gt;https://github.com/tal-tech/go-zero&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎大家 star 并加入微信社区 🤝&lt;/p&gt;
&lt;blockquote readability=&quot;1.5&quot;&gt;
&lt;p&gt;项目地址：&lt;br/&gt;&lt;a href=&quot;https://github.com/tal-tech/go-zero&quot;&gt;https://github.com/tal-tech/go-zero&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 27 Nov 2020 00:31:00 +0000</pubDate>
<dc:creator>Kevin Wan</dc:creator>
<og:description>项目地址：https://github.com/tal-tech/cds ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)。它有着优异的性能，可以快速部署和运行。 不</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/kevinwan/p/14046046.html</dc:identifier>
</item>
<item>
<title>25岁的程序员，如何做才能在35岁时不焦虑 - 程序员北哥</title>
<link>http://www.cnblogs.com/coder-thoughts/p/14046000.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/coder-thoughts/p/14046000.html</guid>
<description>&lt;p&gt;​无论是在知乎、公众号或各种技术论坛，程序员的35岁门槛问题总会成为大家热议的话题。&lt;/p&gt;
&lt;p&gt;最近在和团队的小伙伴谈话时，也有不少同学有这个困惑和焦虑，甚至有小伙伴工作才两三年，25岁的年纪就开始担忧35岁的工作。&lt;/p&gt;
&lt;p&gt;恍惚35岁已经成为程序员的“魔鬼年龄”，造成这个问题的本质原因，可能是因为现在的社会信息传播快，社交媒体也会成为一些职场案例的放大镜，不断刺激打工人的神经，无形中传播着职场焦虑。&lt;/p&gt;
&lt;p&gt;如何才能做到在35岁时不焦虑呢？&lt;/p&gt;
&lt;p&gt;这篇文章聊聊我的想法。&lt;/p&gt;
&lt;p&gt;先说结论：无论你是多大年龄，从事什么行业，在什么岗位工作，如果想要在35岁时不焦虑，从现在开始，记住核心8个字：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学习，实践，总结，输出&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我把它定义为&lt;strong&gt;成长闭环&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mzHbzZorvIMdAUcA8cvk90XQAWQcHZ1IHj1hJ4on8l4ZSibTslVvumxVq2HLdEoDNox3bo4DDoCzJzL9jQI7hvw/640?wx_fmt=png&quot; class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9928443649373881&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;559&quot;/&gt;&lt;/p&gt;

&lt;p&gt;先来聊一聊我的故事。在我还未毕业时，就加入到一家软件公司实习，主要工作是编码。&lt;/p&gt;
&lt;p&gt;工作一年后，考虑到城市等原因，我选择了跳槽换工作，这一年我23岁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一份工作&lt;/strong&gt;我的收获是：进入了软件这个行业，&lt;strong&gt;学习和掌握了基本的编程技术&lt;/strong&gt;，有了几个项目的&lt;strong&gt;实践经验&lt;/strong&gt;，能够以技术作为&lt;strong&gt;敲门砖&lt;/strong&gt;，去寻求下一份可以让我&lt;strong&gt;得到更大提升的工作机会&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;第二份工作，我加入到一家传统软件公司，做创新业务的开发，主要工作还是编码，在这家公司一干就是5年，后来因感觉到自己遇到技术天花板，选择了跳槽换工作，这一年我28岁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二份工作&lt;/strong&gt;我的收获是：&lt;strong&gt;夯实了自己的编程技术&lt;/strong&gt;，对技术的深度和广度&lt;strong&gt;有了足够多的认识和实践&lt;/strong&gt;，具备了独立做业务和系统架构设计的能力；不再拘泥于仅仅研究技术，也对项目管理和沟通协调有了新的学习，开始&lt;strong&gt;尝试去探索一些以前不曾接触的领域&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;第三份工作，我加入到一家互联网公司，主要工作是带领团队做各种产品的业务开发支撑，目前仍在职，而我也越来越接近35岁这个“魔鬼年龄”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三份工作&lt;/strong&gt;我的收获是：真正的去将自己学习到的技术&lt;strong&gt;在不同的产品中落地打磨&lt;/strong&gt;，去&lt;strong&gt;思考和总结&lt;/strong&gt;不同类型业务、不同规模产品、不同发展阶段，到底如何设计适合的系统架构；&lt;strong&gt;开始接触和实践团队管理&lt;/strong&gt;，发现管理是比技术更难的一个挑战，是一个永远&lt;strong&gt;需要不断学习和思考课题&lt;/strong&gt;；开始&lt;strong&gt;摆脱程序员思维&lt;/strong&gt;，真正思考产品和业务的本质是什么？解决了用户的哪些痛点？如何设计和落地商业模式？也开始&lt;strong&gt;把自己的经验、知识做总结、输出&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而到现在，我发现自己还有许许多多的知识需要学习，还有很多未知的领域没有涉猎，还没有把很多知识、经验很好的总结输出。&lt;/p&gt;

&lt;p&gt;你问我现在焦虑吗？可能有，但更多的是一种兴奋和渴望。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;焦虑，是因为发现太多的知识值得去了解和学习，而时间却永远不够&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这种感觉来源于，当你了解的越多，却发现自己懂得越少，越觉得应该投入更多的时间去学习。&lt;/p&gt;
&lt;p&gt;那些科学大家们接受采访时往往会说，自己的知识积累还很少，还有很多需要学习的地方。以前我总以为他们是谦虚，现在我认为他们说的可能是真实的想法。&lt;/p&gt;
&lt;p&gt;这就像，&lt;strong&gt;人一开始就是一个圆点，你和外界的接触仅限于那个点的边界所接触到世界，你会发现你了解的很多而实际你了解的很少&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mzHbzZorvIMdAUcA8cvk90XQAWQcHZ1Iuys34AJhMVwHria3pUpl41iaTlZClJJ3oObl6DngnziaakE1vmCn9853g/640?wx_fmt=jpeg&quot; class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.66640625&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;当有一天，这个圆点慢慢变成一个小圆，慢慢变成一个大圆，你和外界接触的面越来越大，也就发现自己懂得越来越少。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;兴奋，是因为发现自己可以影响和改变一些东西。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，这个月我在团队内尝试了一种新的研发工具，可以节省很多不必要的工作，提升了开发的效率。&lt;/p&gt;
&lt;p&gt;比如，我们组织了一次内部的代码大赛，大家都踊跃参加，很多人show出了自己最得意的代码设计。&lt;/p&gt;
&lt;p&gt;又如，我们这次的产品迭代，受到了很多用户的好评，终于解决了他们反馈已久的问题。这些都让我感觉到自己在影响和改变着一些东西，这些影响和改变往往带来反馈，让我重新带着兴奋投入到工作中去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;渴望，是因为还想得到更多的反馈和认可，发挥出更大的价值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;至于马上35了，会不会被淘汰，我想的是，这些年自己踩过的坑、经历的事、积累的知识总归会是一笔宝贵的经验，总会有需要我而我又刚好可以发挥的那一个A公司或B公司。&lt;/p&gt;

&lt;p&gt;回到这个问题：当下的你如何做才能在35岁时不焦虑？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学习：&lt;/strong&gt;无论是技术、产品、商业等等，沉下心来学习。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实践：&lt;/strong&gt;找一个机会和场景，尝试把自己所学用到工作中，就像你刚学会开车拿到驾照，总想着上路一样，去感受知识被使用、被发挥它价值的地方，你一定能够找到自己的兴奋点和成就感。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;尝试着去做一些总结，把你在实践中的历经多次挫折的经验梳理总结，去思考能否有更优的技术、更好的方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;把自己的那些总结，输出出去。无论你是通过当面的交流、文字或者是视频，甚至工作本身就是一种输出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你输出的多少就代表着你所具备的价值大小。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当你在一个细分的技术领域能够做到学习、实践、总结、输出的闭环，那就再换一个细分的技术领域；&lt;/p&gt;
&lt;p&gt;当你在全部的技术细分领域都做到了这种闭环，那就在其它领域如产品、业务、商业、管理等等方面去尝试。这就像滚雪球，越滚越大，越滚越大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mzHbzZorvIMdAUcA8cvk90XQAWQcHZ1INalhrrkkAAwdGCrWibJU3iaMZdNUKOOYZYx0MIlBg6YciauF6nThmwqlA/640?wx_fmt=jpeg&quot; class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.66875&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果你现在才25岁，要相信经过10年的积累，35岁的你必然不会被淘汰，反而会成为执牛耳者。&lt;/p&gt;
&lt;p&gt;道理好像都挺简单，但你品下，再细品下，然后忘记这些，开始滚起自己的雪球吧。&lt;/p&gt;
&lt;p&gt;希望看到这篇文章的你，终有一天有所成。&lt;/p&gt;
&lt;p&gt;我是程序员北哥，如果你也有相关经历和想法，也欢迎与我交流。&lt;/p&gt;
</description>
<pubDate>Fri, 27 Nov 2020 00:01:00 +0000</pubDate>
<dc:creator>程序员北哥</dc:creator>
<og:description>​无论是在知乎、公众号或各种技术论坛，程序员的35岁门槛问题总会成为大家热议的话题。 最近在和团队的小伙伴谈话时，也有不少同学有这个困惑和焦虑，甚至有小伙伴工作才两三年，25岁的年纪就开始担忧35岁的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/coder-thoughts/p/14046000.html</dc:identifier>
</item>
<item>
<title>【Flutter 实战】酷炫的开关动画效果 - 老孟Flutter</title>
<link>http://www.cnblogs.com/mengqd/p/14045940.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mengqd/p/14045940.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202011/467322-20201127064100459-443315139.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;4.7748691099476&quot;&gt;
&lt;p&gt;此动画效果是我在浏览文章时发现的一个非常酷炫的效果，于是就使用 Flutter 实现了。&lt;br/&gt;更多动画效果及Flutter资源：&lt;a href=&quot;https://github.com/781238222/flutter-do&quot;&gt;https://github.com/781238222/flutter-do&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202011/467322-20201127064101956-1806468719.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;添加依赖&quot;&gt;添加依赖&lt;/h3&gt;
&lt;p&gt;在项目的 &lt;code&gt;pubspec.yaml&lt;/code&gt; 文件中添加依赖：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-dart&quot;&gt;dependencies:
        wheel_switch: ^0.0.1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-dart&quot;&gt;flutter pub get
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-dart&quot;&gt;WheelSwitch(
  value: false,
)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202011/467322-20201127064102195-1319510669.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;组件默认的宽高分别是80、30，也可以指定宽高：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-dart&quot;&gt;WheelSwitch(
  value: false,
  width: 150,
  height: 50,
)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;开关发生变化回调：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-dart&quot;&gt;WheelSwitch(
  value: false,
  onChanged: (value){
    print('WheelSwitch : $value');
  },
)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;设置其轨道颜色，分为激活（开）和未激活（关）状态的颜色：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-dart&quot;&gt;WheelSwitch(
  value: false,
  width: 150,
  height: 50,
  activeTrackColor: Colors.red,
  inactiveTrackColor: Colors.green,
)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202011/467322-20201127064103017-1131409863.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;设置滑块的颜色：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-dart&quot;&gt;WheelSwitch(
  value: false,
  width: 150,
  height: 50,
  activeTrackColor: Colors.red,
  inactiveTrackColor: Colors.green,
  activeThumbColor: Colors.blue,
  inactiveThumbColor: Colors.green,
)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;未激活状态（关）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202011/467322-20201127064103199-690738278.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;激活状态（开）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202011/467322-20201127064103346-911325740.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;设置文字和文字样式：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-dart&quot;&gt;WheelSwitch(
  value: false,
  width: 150,
  height: 50,
  activeText: '开',
  inactiveText: '关',
  activeTextStyle: TextStyle(color: Colors.white,fontSize: 20),
  inactiveTextStyle: TextStyle(color: Colors.cyanAccent,fontSize: 10),
)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202011/467322-20201127064103563-1091538279.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;交流&quot;&gt;交流&lt;/h2&gt;
&lt;p&gt;老孟Flutter博客（330个控件用法+实战入门系列文章）：&lt;a href=&quot;http://laomengit.com&quot;&gt;http://laomengit.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎加入Flutter交流群（微信：laomengit）、关注公众号【老孟Flutter】：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th/&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202011/467322-20201127064103827-458477242.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/467322/202011/467322-20201127064104027-2017900917.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Thu, 26 Nov 2020 22:41:00 +0000</pubDate>
<dc:creator>老孟Flutter</dc:creator>
<og:description>此动画效果是我在浏览文章时发现的一个非常酷炫的效果，于是就使用 Flutter 实现了。 更多动画效果及Flutter资源：https://github.com/781238222/flutter-d</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/mengqd/p/14045940.html</dc:identifier>
</item>
<item>
<title>写代码有这16个好习惯，可以减少80%非业务的bug - Jay_huaxiao</title>
<link>http://www.cnblogs.com/jay-huaxiao/p/14045411.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jay-huaxiao/p/14045411.html</guid>
<description>&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;前言&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每一个好习惯都是一笔财富，本文整理了写代码的16个好习惯，每个都很经典，养成这些习惯，可以规避多数非业务的bug！希望对大家有帮助哈，谢谢阅读，加油哦~&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;github地址，感谢每颗star&lt;/p&gt;
&lt;blockquote class=&quot;multiquote-1&quot; data-tool=&quot;mdnice编辑器&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;https://github.com/whx123/JavaHome&lt;/p&gt;
&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;公众号：&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;捡田螺的小男孩&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;1. 修改完代码，记得自测一下&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;改完代码，自测一下&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt; 是每位程序员必备的基本素养。尤其不要抱有这种侥幸&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;心理：我只是改了一个变量或者我只改了一行配置代码，不用自测了&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;。改完代码，尽量要求自己都去测试一下哈，可以规避很多不必要bug的。&lt;/p&gt;
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7175534-1ea020bc8bab7563.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;2. 方法入参尽量都检验&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;入参校验也是每个程序员必备的基本素养。你的方法处理，&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;必须先校验参数&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;。比如入参是否允许为空，入参长度是否符合你的预期长度。这个尽量养成习惯吧，很多&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;低级bug&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;都是&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;不校验参数&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;导致的。&lt;/p&gt;
&lt;blockquote class=&quot;multiquote-1&quot; data-tool=&quot;mdnice编辑器&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果你的数据库字段设置为varchar(16),对方传了一个32位的字符串过来，你不校验参数，&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;插入数据库直接异常&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;了。&lt;/p&gt;
&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;
&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/330dffdf-0447-4f16-992a-b84d5525a6cb.gif?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=hb0S8ov%252FDdfvTFUCob1WH%252BkfXMw%253D&amp;amp;Expires=1606491039&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;3. 修改老接口的时候，思考接口的兼容性。&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多bug都是因为修改了对外老接口，但是却&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;不做兼容导致&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;的。关键这个问题多数是比较严重的，可能直接导致系统发版失败的。新手程序员很容易就犯这个错误了哦~&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，如果你的需求是在原来接口上修改，，尤其这个接口是对外提供服务的话，一定要考虑接口兼容。举个例子吧，比如dubbo接口，原本是只接收A，B参数，现在你加了一个参数C，就可以考虑这样处理。&lt;/p&gt;
&lt;pre class=&quot;custom&quot; data-tool=&quot;mdnice编辑器&quot; readability=&quot;5&quot;&gt;
&lt;code class=&quot;hljs&quot; readability=&quot;4&quot;&gt;//老接口&lt;br/&gt;void oldService(A,B);{&lt;br/&gt;//兼容新接口，传个null代替C&lt;br/&gt;newService(A,B,null);&lt;br/&gt;}&lt;p&gt;//新接口，暂时不能删掉老接口，需要做兼容。&lt;br/&gt;void newService(A,B,C);&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/6d3e0cd6-d23d-40c8-b568-8687d63bc08c.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=yWgHovmzA3lGqi7vc1U1FI1%252FX3A%253D&amp;amp;Expires=1606490516&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;4.对于复杂的代码逻辑，添加清楚的注释&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写代码的时候，是没有必要写太多的注释的，好的方法变量命名就是最好的注释。但是，如果是&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;业务逻辑很复杂的代码&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，真的非常有必要写&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;清楚注释&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;。清楚的注释，更有利于后面的维护。&lt;/p&gt;
&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/e9f8267a-6372-4b8f-ad8a-42486b56f290.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=o%252BrtBJEpvWyopge5cLnJGJcQSYE%253D&amp;amp;Expires=1606490527&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;5. 使用完IO资源流，需要关闭&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该大家都有过这样的经历，windows系统桌面如果&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;打开太多文件&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;或者系统软件，就会觉得电脑很卡。当然，我们linux服务器也一样，平时操作文件，或者数据库连接，IO资源流如果没关闭，那么这个IO资源就会被它占着，这样别人就没有办法用了，这就造成&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;资源浪费&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/7cd4aee3-0d5f-4142-9e33-e47c2c5493cc.gif?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=iI%252Fk5WsLz%252BmuUhVId4MESL%252F2Uyc%253D&amp;amp;Expires=1606491076&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以使用完IO流，可以使用finally关闭哈&lt;/p&gt;
&lt;pre class=&quot;custom&quot; data-tool=&quot;mdnice编辑器&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;FileInputStream fdIn = null;&lt;br/&gt;try {&lt;br/&gt;fdIn = new FileInputStream(new File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/jay.txt&quot;&lt;/span&gt;));&lt;br/&gt;} catch (FileNotFoundException e) {&lt;br/&gt;log.error(e);&lt;br/&gt;} catch (IOException e) {&lt;br/&gt;log.error(e);&lt;br/&gt;}finally {&lt;br/&gt;try {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fdIn != null) {&lt;br/&gt;fdIn.close();&lt;br/&gt;}&lt;br/&gt;} catch (IOException e) {&lt;br/&gt;log.error(e);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JDK 7 之后还有更帅的关闭流写法，使用&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;try-with-resource&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;pre class=&quot;custom&quot; data-tool=&quot;mdnice编辑器&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;/*&lt;br/&gt;* 关注公众号，捡田螺的小男孩&lt;br/&gt;*/&lt;br/&gt;try (FileInputStream inputStream = new FileInputStream(new File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jay.txt&quot;&lt;/span&gt;)) {&lt;br/&gt;// use resources   &lt;br/&gt;} catch (FileNotFoundException e) {&lt;br/&gt;log.error(e);&lt;br/&gt;} catch (IOException e) {&lt;br/&gt;log.error(e);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;6.代码采取措施避免运行时错误（如数组边界溢出，被零除等）&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日常开发中，我们需要采取措施规避&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;数组边界溢出，被零整除，空指针&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;等运行时错误。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类似代码比较常见：&lt;/p&gt;
&lt;pre class=&quot;custom&quot; data-tool=&quot;mdnice编辑器&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;String name = list.get(1).getName(); //list可能越界，因为不一定有2个元素哈&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，应该&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;采取措施，预防一下数组边界溢出&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，正例：&lt;/p&gt;
&lt;pre class=&quot;custom&quot; data-tool=&quot;mdnice编辑器&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(CollectionsUtil.isNotEmpty(list)&amp;amp;&amp;amp; list.size()&amp;gt;1){&lt;br/&gt;String name = list.get(1).getName(); &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/6b553464-e52d-42f2-be9f-3d9f404ef32b.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=byM2kizkvdQIl6W%252BI7ynC4NLBX0%253D&amp;amp;Expires=1606490728&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;7.尽量不在循环里远程调用、或者数据库操作，优先考虑批量进行。&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;远程操作或者数据库操作都是&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;比较耗网络、IO资源&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;的，所以尽量不在循环里远程调用、不在循环里操作数据库，能&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;批量一次性查回来尽量不要循环多次去查&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;。（但是呢，也不要一次性查太多数据哈，要分批500一次酱紫）&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正例：&lt;/p&gt;
&lt;pre class=&quot;custom&quot; data-tool=&quot;mdnice编辑器&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;remoteBatchQuery(param);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反例：&lt;/p&gt;
&lt;pre class=&quot;custom&quot; data-tool=&quot;mdnice编辑器&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(int i=0;i&amp;lt;n;i++){&lt;br/&gt;remoteSingleQuery(param)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/4a7bac62-8295-4b6b-a300-fb23cbf94c77.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=gu6Txwv%252Fo73jeu7yN2AHTJToD7E%253D&amp;amp;Expires=1606490739&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;8.写完代码，脑洞一下多线程执行会怎样，注意并发一致性问题&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们经常见的一些业务场景，就是先查下有没有记录，再进行对应的操作（比如修改）。但是呢，(查询+修改)合在一起不是原子操作哦，脑洞下多线程，就会发现有问题了，&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反例如下：&lt;/p&gt;
&lt;pre class=&quot;custom&quot; data-tool=&quot;mdnice编辑器&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(isAvailable(ticketId){ &lt;br/&gt;1、给现金增加操作 &lt;br/&gt;2、deleteTicketById(ticketId) &lt;br/&gt;}&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{ &lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;没有可用现金券&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了更容易理解它，看这个流程图吧： &lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95f96c2467b0450eb3404a0884a4c4f3~tplv-k3u1fbpfcp-watermark.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;1.线程A加现金&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;2.线程B加现金&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;3.线程A删除票标志&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;4.线程B删除票标志&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;显然这样存在&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;并发问题&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，正例应该&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;利用数据库删除操作的原子性&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，如下：&lt;/p&gt;
&lt;pre class=&quot;custom&quot; data-tool=&quot;mdnice编辑器&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(deleteAvailableTicketById(ticketId) == 1){ &lt;br/&gt;1、给现金增加操作 &lt;br/&gt;}&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{ &lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt; “没有可用现金券” &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，这个习惯也是要有的，&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;写完代码，自己想下多线程执行，是否会存在并发一致性问题&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/cbb6567e-7350-4270-be67-c957a263228e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=KGFSubt%252F0uLv%252BjnnRWMeqTbOpx8%253D&amp;amp;Expires=1606490760&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;9.对象获取属性，先判断对象是否为空&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个点本来也属于&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;采取措施规避运行时异常&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;的，但是我还是把它拿出来，当做一个重点来写，因为平时空指针异常太常见了，一个手抖不注意，就导致空指针报到生产环境去了。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，你要获取对象的属性时，尽量不要相信&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;理论上不为空&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，我们顺手养成习惯判断一下是否为空，再获取对象的属性。正例：&lt;/p&gt;
&lt;pre class=&quot;custom&quot; data-tool=&quot;mdnice编辑器&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(object!=null){&lt;br/&gt;String name = object.getName();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/0b1d13fd-76f6-4529-8cf8-36b70dd697d1.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=LRXhH9jNdosZAB87iKpiuI4kqdM%253D&amp;amp;Expires=1606490769&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;10.多线程异步优先考虑恰当的线程池，而不是new thread,同时考虑线程池是否隔离&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么优先使用线程池？使用线程池有这几点好处呀&lt;/p&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;它帮我们管理线程，避免增加创建线程和销毁线程的资源损耗。&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;提高响应速度。&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;重复利用。&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时呢，尽量不要所有业务都共用一个线程池，需要考虑&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;线程池隔离&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;。就是不同的关键业务，分配不同的线程池，然后线程池参数也要考虑恰当哈。之前写过几篇线程池的，觉得还不错，有兴趣的朋友可以看一下哈&lt;/p&gt;
&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/a42e645a-a6fb-4066-bff3-637967450c73.gif?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=VAy3WKZ2zG3QbzpfV%252B14r4j9EPA%253D&amp;amp;Expires=1606491197&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;11. 手动写完代码业务的SQL，先拿去数据库跑一下，同时也explain看下执行计划。&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;手动写完业务代码的SQL，可以先把它拿到数据库跑一下，看看有没有语法错误嘛。有些小伙伴不好的习惯就是，写完就把代码打包上去测试服务器，其实把SQL放到数据库执行一下，可以规避很多错误的。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时呢，也用&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;explain看下你Sql的执行计划&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，尤其走不走索引这一块。&lt;/p&gt;
&lt;pre class=&quot;custom&quot; data-tool=&quot;mdnice编辑器&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;explain select * from user &lt;span class=&quot;hljs-built_in&quot;&gt;where&lt;/span&gt; userid =10086 or age =18;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/0afe27bd-fcd5-4a7f-b632-9db9b18a50cd.gif?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=1Ld%252BQudxAJZOCDTDRweInmEyW1o%253D&amp;amp;Expires=1606491263&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;12.调用第三方接口，需要考虑异常处理，安全性，超时重试这几个点。&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用第三方服务，或者分布式远程服务的的话，需要考虑&lt;/p&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;异常处理（比如，你调别人的接口，如果异常了，怎么处理，是重试还是当做失败）&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;超时（没法预估对方接口一般多久返回，一般设置个超时断开时间，以保护你的接口）&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;重试次数（你的接口调失败，需不需要重试，需要站在业务上角度思考这个问题）&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote class=&quot;multiquote-1&quot; data-tool=&quot;mdnice编辑器&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;简单一个例子，你一个http请求调别人的服务，需要考虑设置connect-time，和retry次数。&lt;/p&gt;
&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是转账等重要的第三方服务，还需要考虑&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;签名验签&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;加密&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;等。之前写过一篇加签验签的，有兴趣的朋友可以看一下哈&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwOTE2MzU4NA==&amp;amp;mid=2247484887&amp;amp;idx=1&amp;amp;sn=316cfd80f7c60b40998eab004211ebb0&amp;amp;chksm=977941f8a00ec8eea93bbcd7b47e7dc39c6d05117ac93f80363d171c34fd4ae64f2f5b46d0ce&amp;amp;token=1951383729&amp;amp;lang=zh_CN#rd&quot;&gt;程序员必备基础：加签验签&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/94bb54b9-b5e8-4aeb-8d41-01c7b9a3f021.gif?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=KK3JL4U2E84PIZoWrC0E63Mw%252FG4%253D&amp;amp;Expires=1606491288&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;13.接口需要考虑幂等性&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接口是需要考虑幂等性的，尤其抢红包、转账这些重要接口。最直观的业务场景，就是&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;用户连着点两次&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，你的接口有没有hold住。&lt;/p&gt;
&lt;blockquote class=&quot;multiquote-1&quot; data-tool=&quot;mdnice编辑器&quot;&gt;
&lt;p&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;section&gt;幂等（idempotent、idempotence）是一个数学与计算机学概念，常见于抽象代数中。&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;在编程中.一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;幂等技术方案&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;有这几种:&lt;/p&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;查询操作&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;唯一索引&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;token机制，防止重复提交&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;数据库的delete删除操作&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;乐观锁&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;悲观锁&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;Redis、zookeeper 分布式锁（以前抢红包需求，用了Redis分布式锁）&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;状态机幂等&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/c73bc892-d988-4a95-a349-87807fade008.gif?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=mgC31CEW0LPG0IRWojmVo8lscKg%253D&amp;amp;Expires=1606491345&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;14. 多线程情况下，考虑线性安全问题&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;高并发&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;情况下，HashMap可能会出现死循环。因为它是非线性安全的，可以考虑使用ConcurrentHashMap。 所以这个也尽量养成习惯，不要上来反手就是一个new HashMap();&lt;/p&gt;
&lt;blockquote class=&quot;multiquote-1&quot; data-tool=&quot;mdnice编辑器&quot;&gt;
&lt;p&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;section&gt;Hashmap、Arraylist、LinkedList、TreeMap等都是线性不安全的；&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;Vector、Hashtable、ConcurrentHashMap等都是线性安全的&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;
&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/56aa9dcf-15e7-452f-8dff-5c1949f654d2.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=ua0pZ3LVMycj6QSNH%252FD2NhQSF3g%253D&amp;amp;Expires=1606490836&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;15.主从延迟问题考虑&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先插入，接着就去查询,这类代码逻辑比较常见，这&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;可能&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;会有问题的。一般数据库都是有主库，从库的。写入的话是写主库，读一般是读从库。如果发生主从延迟，，很可能出现你插入成功了，但是你查询不到的情况。&lt;/p&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;如果是重要业务，需要考虑是否强制读主库，还是再修改设计方案。&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;但是呢，有些业务场景是可以接受主从稍微延迟一点的，但是这个习惯还是要有吧。&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;写完操作数据库的代码，想下是否存在主从延迟问题。&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/ab497915-6339-4ed8-9d2b-3e0198b050dc.gif?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=LnicWTBAqMj11jX24hQSgHnlGRI%253D&amp;amp;Expires=1606491370&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;16.使用缓存的时候，考虑跟DB的一致性，还有（缓存穿透、缓存雪崩和缓存击穿）&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通俗点说，我们使用缓存就是为了&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;查得快，接口耗时小&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;。但是呢，用到缓存，就需要&lt;strong&gt;&lt;span&gt;「&lt;/span&gt;注意缓存与数据库的一致性&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;问题。同时，还需要规避缓存穿透、缓存雪崩和缓存击穿三大问题。&lt;/p&gt;
&lt;blockquote class=&quot;multiquote-1&quot; data-tool=&quot;mdnice编辑器&quot;&gt;
&lt;p&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;section&gt;缓存雪崩：指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;缓存穿透：指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，进而给数据库带来压力。&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;缓存击穿：指热点key在某个时间点过期的时候，而恰好在这个时间点对这个Key有大量的并发请求过来，从而大量的请求打到db。&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;
&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/7f40c912-0bea-4d20-b329-56fb7b85efb6.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=I0VDl%252Bqn7XzuUVeDdUsVLifLwQk%253D&amp;amp;Expires=1606490865&quot; alt=&quot;&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;个人公众号&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;感兴趣的朋友，可以关注我公众号哈&lt;/p&gt;
&lt;blockquote class=&quot;multiquote-1&quot; data-tool=&quot;mdnice编辑器&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;原创公众号 &lt;strong&gt;&lt;span&gt;「&lt;/span&gt;捡田螺的小男孩&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;，专注分享和探讨后端技术点，包括Java语言、计算机网络、数据库、数据结构与算法、操作系统、工作总结等方面。文章力求通俗易懂，简单明了~&lt;/p&gt;
&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;
</description>
<pubDate>Thu, 26 Nov 2020 15:37:00 +0000</pubDate>
<dc:creator>Jay_huaxiao</dc:creator>
<og:description>前言 每一个好习惯都是一笔财富，本文整理了写代码的16个好习惯，每个都很经典，养成这些习惯，可以规避多数非业务的bug！希望对大家有帮助哈，谢谢阅读，加油哦~ github地址，感谢每颗star ❝</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/jay-huaxiao/p/14045411.html</dc:identifier>
</item>
<item>
<title>mycat分片及主从（二） - 童话述说我的结局</title>
<link>http://www.cnblogs.com/xing1/p/14021518.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xing1/p/14021518.html</guid>
<description>&lt;p&gt;     经过上一篇幅讲解，应该很清楚分片规则配置文件&lt;code&gt;rule.xml&lt;/code&gt;位于$MYCAT_HOME/conf目录，它定义了所有拆分表的规则。在使用过程中可以灵活使用不同的分片算法，或者对同一个分片算法使用不同的参数，它让分片过程可配置化，只需要简单的几步就可以让运维人员及数据库管理员轻松将数据拆分到不同的物理库中。该文件包含两个重要的标签，分别是Funcation和tableRule。&lt;/p&gt;
&lt;p&gt;      总体上分为连续分片和离散分片，还有一种是连续分片和离散分片的结合，例如先范围后取模。比如范围分片（id 或者时间）就是典型的连续分片，单个分区的数量和边界是确定的。离散分片的分区总数量和边界是确定的，例如对 key 进行哈希运算，或者再取模。&lt;/p&gt;
&lt;h2&gt;1.1、连续分片&lt;/h2&gt;
&lt;h3&gt;       1.1.1、范围分片&lt;/h3&gt;
&lt;p&gt;        关于连续分片在上一篇幅中已经讲过，那么在这一篇幅中就不演示了，在这里主要写下怎么配置及他的特点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201122211833209-1994476141.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201122212159001-216481669.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201122212216685-1012325103.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201122212230275-1966989427.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;特点：容易出现冷热数据&lt;/p&gt;
&lt;h3&gt;1.1.2、按月分片&lt;/h3&gt;
&lt;p&gt;其实这里面的按月分配和上一篇幅中讲的单表中按月分片是一样的形式，唯一的区别就是一个是单库一个是多库；&lt;/p&gt;
&lt;p&gt;在上一篇幅中的三个ghymycat库中接着创建三张表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
--&lt;span&gt; 创建表
CREATE TABLE `month` ( 
`create_time` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
`name` varchar(&lt;/span&gt;20&lt;span&gt;) DEFAULT NULL 
) ENGINE&lt;/span&gt;=InnoDB DEFAULT CHARSET=utf8;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在schema.xml中加入逻辑表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201122215204007-669779375.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 在rule.xml中加入分片规则&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201122215855480-586528213.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201122215909919-1071874068.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 事情搞定那和上一篇幅一样，启动mycat服务然后测试 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
 INSERT INTO month (create_time,name) VALUES ('2024-10-16', '11'&lt;span&gt;); 
 INSERT INTO month (create_time,name) VALUES (&lt;/span&gt;'2025-10-27', '11'&lt;span&gt;);
 INSERT INTO month (create_time,name) VALUES (&lt;/span&gt;'2026-11-04', '11'&lt;span&gt;);
 INSERT INTO month (create_time,name) VALUES (&lt;/span&gt;'2027-11-11', '11'&lt;span&gt;); 
 INSERT INTO month (create_time,name) VALUES (&lt;/span&gt;'2029-12-25', '11'&lt;span&gt;); 
 INSERT INTO month (create_time,name) VALUES (&lt;/span&gt;'2030-12-31', '11');
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201122220427675-1796250955.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h2&gt; 1.2、离散分片&lt;/h2&gt;
&lt;h3&gt;1.2.1、十进制取模分片&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;根据分片键进行十进制求模运算。&lt;/span&gt;student表前面已经有讲过&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123152905012-1097257927.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123152922988-648012101.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;特点：在插入数据时他会均匀的分布在所有节点上，解决了上面的冷热数据问题，但是他在数据迁移和增删节点时工作量会比较大&lt;/p&gt;

&lt;h3&gt; 1.2.2、&lt;strong&gt;枚举分片&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;枚举分片适用场景，列值的个数是固定的，譬如省份，月份等。&lt;span&gt;例如：全国&lt;/span&gt; 34 个省，要将不同的省的数据存放在不同的节点，可用枚举的方式。&lt;/p&gt;
&lt;p&gt;和前面样，在三个ghymycat库中创建表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE TABLE `t_vote` (
`age` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;&lt;span&gt;) NOT NULL,
`name` varchar(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;) DEFAULT NULL
) ENGINE&lt;/span&gt;=InnoDB DEFAULT CHARSET=utf8;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后建立逻辑表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123154355417-1703775999.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 建立分片规则&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123154534446-1222571643.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 最后建立分片算法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123154831377-1416854765.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 策略文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123160225287-1746460288.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 测试数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
INSERT INTO `sharding_by_intfile` (age,name) VALUES (&lt;span&gt;16&lt;/span&gt;, &lt;span&gt;11&lt;/span&gt;&lt;span&gt;);
INSERT INTO `sharding_by_intfile` (age,name) VALUES (&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;, &lt;span&gt;11&lt;/span&gt;&lt;span&gt;);
INSERT INTO `sharding_by_intfile` (age,name) VALUES (&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;, &lt;span&gt;11&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特点：如开头说的一样适用于枚举值固定的场景。&lt;/p&gt;
&lt;h3&gt; 1.2.3、&lt;strong&gt;一致性哈希&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;一致性&lt;/span&gt; hash 有效解决了分布式数据的扩容问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;              原理：&lt;/strong&gt;为将数据均匀分布在各个节点中。对其进行哈希，取值在 0 ~ 2&lt;sup&gt;32&lt;/sup&gt;-1 闭环中定位到顺时针第一个节点，将此数据分配其中。由于节点有限，可能取哈希分布不均。设置虚拟节点比如160，先将哈希分布在160节点上，然后把对应的节点聚合到真实节点中。&lt;/p&gt;
&lt;p&gt;             在三个数据库ghymycat中建表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE TABLE `consistency` (
`id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;) DEFAULT NULL,
`name` varchar(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;) DEFAULT NULL
) ENGINE&lt;/span&gt;=InnoDB DEFAULT CHARSET=utf8;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逻辑表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123162810205-1961378859.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;p&gt;分片规则&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123163008885-1763097824.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 分片算法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123163412306-1446598382.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;div class=&quot;cnblogs_code&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
INSERT INTO `consistency` (id,name) VALUES (&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `consistency` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特点：可以一定程度减少数据的迁移可以解决容灾，扩容。例如真实节点3个，比如：a,b,c；b宕机，原来要分配到b节点上的会分配到c上；加节点x到ac中间，原来分配到c节点的数据分配到x节点上。&lt;/p&gt;
&lt;h3&gt;1.2.4、&lt;strong&gt;固定分片哈希&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;这是先求模得到逻辑分片号，再根据逻辑分片号直接映射到物理分片的一种散列算法。&lt;/p&gt;
&lt;p&gt;一样在三个ghymycat中创建表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE TABLE `immobilization` (
`id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;) DEFAULT NULL,
`name` varchar(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;) DEFAULT NULL
) ;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逻辑表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123164308862-1293619428.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;p&gt; 分片规则&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123164436217-861731268.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;平均分成&lt;/span&gt; 8 片（%1024 的余数，1024=128*8）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123164731267-790302782.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123164745068-615198191.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这是均匀分布的例子，下面再配置一个不均匀分布的例子，只用 改动分片算法&lt;span&gt;（&lt;/span&gt;%1024 的余数，1024=2*256+1*512）&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123165055031-923812906.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123165112752-1137430562.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
INSERT INTO `immobilization` (id,name) VALUES (&lt;span&gt;222&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `immobilization` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;333&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `immobilization` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;666&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：这种策略比较灵活，可以均匀分配也可以非均匀分配，各节点的分配比例和容量大小由partitionCount 和 partitionLength两个参数决定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：和取模分片类似。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;1.2.5、&lt;strong&gt;取模范围分片&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;先进行取模运算再根据求余结果范围进行分片，该种分片规则首先根据配置的分片字段，与配置的取模基数进行求余操作，根据求余的结果，然后判断在哪一个分片范围内，由此对应到具体某个数据分片上。&lt;/p&gt;
&lt;p&gt; 建表数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE TABLE `delivery` (
`id` varchar(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;) DEFAULT NULL,
`name` varchar(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;) DEFAULT NULL
) ;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逻辑表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123172523988-1105725003.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;p&gt;分片规则&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123172649694-1965216570.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;p&gt;分片算法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123172910079-1074295325.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123172953502-1007533434.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
INSERT INTO `delivery` (id,name) VALUES (&lt;span&gt;19&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `delivery` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;222&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `delivery` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;371&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;优点：可以自由地决定取模后数据的节点分布&lt;/li&gt;
&lt;li&gt;缺点：dataNode 划分节点是事先建好的，扩展比较麻烦。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;1.2.6、&lt;strong&gt;范围取模分片&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;该算法先进行范围分片，计算出分片组，组内在取模&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE TABLE `delivery_mod` (
`id` varchar(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;) DEFAULT NULL,
`name` varchar(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;) DEFAULT NULL
) ;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逻辑表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123173850283-1262358508.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;p&gt;分片规则&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123173951265-109352326.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;p&gt;分片算法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123174115569-1083110642.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123174220624-746450569.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
INSERT INTO `delivery_mod` (id,name) VALUES (&lt;span&gt;666&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `delivery_mod` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;6667&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `delivery_mod` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;16666&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `delivery_mod` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;21111&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
INSERT INTO `delivery_mod` (id,name) VALUES (&lt;/span&gt;&lt;span&gt;22222&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：综合了范围分片和取模分片的优点，分片组内使用取模可以保证组内的数据分布比较均匀，分片组之间采用范围分片可以兼顾范围分片的特点，事先规划好分片的数量，数据扩容时按照分片组扩容，则原有分片组的数据不需要迁移，分片组内还可以避免热点数据问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：在数据范围时固定值（非递增值）时，存在不方便扩展的情况，例如将 dataNode Group size 从 2 扩展为 4 时，需要进行数据迁移才能完成&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;1.2.6、其他分片规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;应用指定分片&lt;/span&gt; PartitionDirectBySubString&lt;/li&gt;
&lt;li&gt;&lt;span&gt;日期范围哈希&lt;/span&gt; PartitionByRangeDateHash&lt;/li&gt;
&lt;li&gt;&lt;span&gt;冷热数据分片&lt;/span&gt; PartitionByHotDate&lt;/li&gt;
&lt;li&gt;&lt;span&gt;也可以自定义分片规则：&lt;/span&gt; extends AbstractPartitionAlgorithm implements RuleAlgorithm。&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;1.3、&lt;strong&gt;连续分片和离散分片的特点&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;连续分片优点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;范围条件查询消耗资源少（不需要汇总数据）&lt;/li&gt;
&lt;li&gt;扩容无需迁移数据（分片固定）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;连续分片缺点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;存在数据热点的可能性&lt;/li&gt;
&lt;li&gt;并发访问能力受限于单一或少量 DataNode（访问集中）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;离散分片优点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;并发访问能力增强（负载到不同的节点）&lt;/li&gt;
&lt;li&gt;范围条件查询性能提升（并行计算）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;离散分片缺点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据扩容比较困难，涉及到数据迁移问题&lt;/li&gt;
&lt;li&gt;数据库连接消耗比较多&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;1.4、&lt;strong&gt;切分规则的选择&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;找到需要切分的大表，和关联的表&lt;/li&gt;
&lt;li&gt;确定分片字段（尽量使用主键），一般用最频繁使用的查询条件&lt;/li&gt;
&lt;li&gt;考虑单个分片的存储容量和请求、数据增长（业务特性）、扩容和数据迁移问题。例如：按照什么递增？序号还是日期？主键是否有业务意义？一般来说，分片数要比当前规划的节点数要大。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;一、准备工作&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;mycat 所在环境安装 mysql 客户端程序&lt;/li&gt;
&lt;li&gt;mycat 的 lib 目录下添加 mysql 的 jdbc 驱动包（我这里下的是mysql-connector-java-5.1.27.jar）&lt;/li&gt;
&lt;li&gt;对扩容缩容的表所有节点数据进行备份，以便迁移失败后的数据恢复&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt; 二、扩容缩容步骤&lt;/p&gt;
&lt;p&gt;下面以取模分片表student为例&lt;/p&gt;
&lt;p&gt;复制 schema.xml、rule.xml 并重命名为 newSchema.xml、newRule.xml 放于 conf 目录下&lt;/p&gt;
&lt;p&gt;修改 newSchema.xml 和 newRule.xml 配置文件为扩容缩容后的 mycat 配置参数（表的节点数、数据源、路由规则）注意：只有节点变化的表才会进行迁移。仅分片配置变化不会迁移。&lt;/p&gt;
&lt;p&gt;修改newSchema.xml配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123190625337-1086178339.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;      因为节点数发生了变化所以newRule.xml配置中的count节点数也需要修改成2&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123190947161-1975980080.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;p&gt;修改 conf 目录下的 migrateTables.properties 配置文件，告诉工具哪些表需要进行扩容或缩容,没有出现在此配置文件的 schema 表不会进行数据迁移，格式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123191324745-1764440122.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;       注意：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;不迁移的表，不要修改&lt;/span&gt; dn 个数，否则会报错。&lt;/li&gt;
&lt;li&gt;ER 表，因为只有主表有分片规则，子表不会迁移。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 修改bin目录下的dataMigrate.sh脚本文件，参数如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;tempFileDir 临时文件路径,目录不存在将自动创建
isAwaysUseMaster默认true:不论是否发生主备切换，都使用主数据源数据，&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;：使用当前数据源
mysqlBin：mysql bin路径
cmdLength mysqldump命令行长度限制 默认110k &lt;/span&gt;&lt;span&gt;110&lt;/span&gt;*&lt;span&gt;1024&lt;/span&gt;。在LINUX操作系统有限制单条命令行的长度是128KB，也就是131072字节，这个值可能不同操作系统不同内核都不一样，如果执行迁移时报Cannot run program &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: error=&lt;span&gt;7&lt;/span&gt;, Argument list too &lt;span&gt;long&lt;/span&gt;&lt;span&gt; 说明这个值设置大了，需要调小此值。
charset导入导出数据所用字符集 默认utf8
deleteTempFileDir完成扩容缩容后是否删除临时文件 默认为true
threadCount并行线程数（涉及生成中间文件和导入导出数据）默认为迁移程序所在主机环境的cpu核数&lt;/span&gt;*&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
delThreadCount每个数据库主机上清理冗余数据的并发线程数，默认为当前脚本程序所在主机cpu核数&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
queryPageSize 读取迁移节点全部数据时一次加载的数据量 默认10w条&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;指定临时文件路径
 
#临时文件路径,目录不存在将自动创建，不指定此目录则默认为mycat根下的temp目录
RUN_CMD&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$RUN_CMD -tempFileDir=/root/data/program/mycat/temp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
指定为false可以查看此过程中产生的sql
 
#完成扩容缩容后是否删除临时文件 默认为true
RUN_CMD&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$RUN_CMD -deleteTempFileDir=false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过命令&quot;find / -name mysqldump&quot;查找mysqldump路径为&quot;/usr/bin/mysqldump&quot;，指定#mysql bin路径为&quot;/usr/bin/&quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123222438920-457781808.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;



&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#mysql bin路径
RUN_CMD&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$RUN_CMD -mysqlBin=/usr/bin/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  这个一定得配置
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;停止mycat服务（如果可以确保扩容缩容过程中不会有写操作，也可以不停止mycat服务）&lt;/p&gt;
&lt;p&gt;通过crt等工具进入mycat根目录，执行bin/ dataMigrate.sh脚本，开始扩容/缩容过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201126101703393-1308886756.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;脚本执行完成，如果最后的数据迁移验证通过，就可以将之前的&lt;/span&gt; newSchema.xml&lt;span&gt;和&lt;/span&gt; newRule.xml 替换之前的 schema.xml 和 rule.xml 文件，并重启 mycat 即可。&lt;/p&gt;
&lt;p&gt;注意事项：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;保证分片表迁移数据前后路由规则一致（取模&lt;/span&gt;——取模）。&lt;/li&gt;
&lt;li&gt;保证分片表迁移数据前后分片字段一致。&lt;/li&gt;
&lt;li&gt;全局表将被忽略。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;不要将非分片表配置到&lt;/span&gt; migrateTables.properties 文件中。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;暂时只支持分片表使用&lt;/span&gt; MySQL 作为数据源的扩容缩容。migrate 限制比较多，还可以使用 mysqldump。&lt;/li&gt;
&lt;/ol&gt;&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;前面已经用&lt;/span&gt; mycat 实现了 MySQL 数据的分片存储，第一个可以实现负载均衡，不同的读写发生在不同的节点上。第二可以实现横向扩展，如果数据持续增加，加机器就 可以了。&lt;span&gt;当然，一个分片只有一台机器还不够。为了防止节点宕机或者节点损坏，都要用副本机制来实现。&lt;/span&gt;MySQL 数据库同样可以集群部署，有了多个节点之后，节点之间数据又是个大问题。所以下面说下实现节点数据同步&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、MySQL 主从复制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     主从同步原理：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;         &lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123223041719-53554953.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;   准备两台机器&lt;br/&gt;       master 192.168.2.103&lt;br/&gt;       slave 192.168.2.106&lt;/p&gt;
&lt;p&gt;因为我是在docker中建的mysql容器，所以想要进入mysql内部要执行下面命令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker exec -it e1066fe2db35 /bin/bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果没装vim的要先装下vim,运行命令：apt-get install vim &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201125213933451-739456550.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 这时候需要运行命令：apt-get update&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201125213953158-106021725.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 这个命令的作用是：同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引，这样才能获取到最新的软件包。&lt;/p&gt;
&lt;p&gt;重新运行命令：apt-get install vim&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201125214026592-1659967237.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 安装完成。&lt;/p&gt;
&lt;p&gt;如果用clone的方式得到两个MySQL服务，需要注意的地方：不同机器的UUID不能重复，否则IO线程不能启动：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
find / -&lt;span&gt;name auto.cnf
vim &lt;/span&gt;/&lt;span&gt;var&lt;/span&gt;/lib/mysql/auto.cnf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把里面的UUID随便改掉一位。&lt;/p&gt;
&lt;p&gt;重启服务命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
service mysqld restart
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;articleHeader0&quot;&gt;103主节点配置&lt;/h2&gt;
&lt;h3 id=&quot;articleHeader1&quot;&gt;配置文件开启binlog&lt;/h3&gt;
&lt;p&gt; vim /etc/mysql/my.cnf文件&lt;/p&gt;
&lt;p&gt; [mysqld]下面增加几行配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
log-bin=mysql-&lt;span&gt;bin
binlog&lt;/span&gt;-format=&lt;span&gt;ROW
server_id&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置完成之后，需要重启mysql服务使配置生效。使用service mysql restart完成重启。&lt;/p&gt;
&lt;h3 id=&quot;articleHeader2&quot;&gt;创建给slave使用的用户&lt;/h3&gt;
&lt;p&gt;在103主节点创建给slave 106节点访问的用户（发放通行证）&lt;br/&gt;连接到MySQL：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
mysql -uroot -proot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行SQL：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
CREATE USER &lt;span&gt;'&lt;/span&gt;&lt;span&gt;repl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;192.168.2.106&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; IDENTIFIED BY &lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
GRANT REPLICATION SLAVE ON &lt;/span&gt;*.* TO &lt;span&gt;'&lt;/span&gt;&lt;span&gt;repl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;192.168.2.106&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
FLUSH PRIVILEGES;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果有多个slave节点，使用同一个用户，也可以把IP设置成通配符的方式，例如192.168.2.*&lt;/p&gt;
&lt;h3 id=&quot;articleHeader3&quot;&gt;获取binlog名字和position&lt;/h3&gt;
&lt;p&gt;接下来要获取最新的binlog文件名和position&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
show master status;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;记住file名字和position，后面会用到。这个时候master不要发生写操作，否则position和file可能会变化。&lt;/p&gt;
&lt;h2 id=&quot;articleHeader4&quot;&gt;slave节点配置&lt;/h2&gt;
&lt;h3 id=&quot;articleHeader5&quot;&gt;配置文件&lt;/h3&gt;
&lt;p&gt;[mysqld]下面增加几行配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
log-bin=mysql-slave-&lt;span&gt;bin
binlog&lt;/span&gt;-format=&lt;span&gt;ROW
server_id&lt;/span&gt;=&lt;span&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置完成之后，需要重启mysql服务使配置生效。使用service mysql restart完成重启。&lt;/p&gt;
&lt;h3 id=&quot;articleHeader6&quot;&gt;开启主从同步&lt;/h3&gt;
&lt;p&gt;连接到MySQL：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
mysql -uroot -proot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;file和pos是从主节点获取的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
change master to master_host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;192.168.2.103&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, master_user=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;repl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, master_password=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, master_log_file=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql-bin.000028&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, master_log_pos=&lt;span&gt;773&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;articleHeader7&quot;&gt;查看从节点状态&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
show slave status;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，主从同步成功的标志：&lt;br/&gt;IO线程和SQL线程都是成功运行的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Slave_IO_Running: Yes
Slave_SQL_Running: Yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在可以在master节点上面做任意对于库表的修改操作，slave会自动同步。&lt;br/&gt;不要直接操作slave。&lt;/p&gt;
&lt;p&gt;如果IO线程not running：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;stop slave;                                                      
SET GLOBAL SQL_SLAVE_SKIP_COUNTER&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
start slave;                                                      
show slave status\G&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;strong&gt;3.1、&lt;/strong&gt;&lt;strong&gt;主从复制的含义&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt; &lt;span&gt;在&lt;/span&gt; MySQL 多服务器的架构中，主节点，也就是产生数据的节点叫 master 节点。其&lt;span&gt;他的副本，向主节点同步数据的节点，叫做&lt;/span&gt; slave（默认是异步的，客户端的数据在 master&lt;span&gt;刷盘就返回）。一个集群里面至少要有一个&lt;/span&gt; master。slave 可以有多个。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;3.2、&lt;/strong&gt;&lt;strong&gt;主从复制的用途&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;数据备份：把数据复制到不同的机器上，以免单台服务器发生故障时数据丢失。负载均衡：结合负载的机制，均摊所有的应用访问请求，降低单机&lt;/span&gt; IO。高可用 HA：当节点故障时，自动转移到其他节点，提高可用性。主从复制的架构可以有多种&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;3.3、&lt;/strong&gt;&lt;strong&gt;主从复制的形式&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;一主一从&lt;/span&gt;/一主多从&lt;/li&gt;
&lt;li&gt;双主复制（互为主从）&lt;/li&gt;
&lt;li&gt;级联复制&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;不过在，&lt;/span&gt;MySQL 自身并没有自动选举和故障转移的功能，需要依赖其他的中间件或者架构实现，比如 MMM，MHA，percona，mycat。下面就来说下主从的实现&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;3.4、&lt;/strong&gt;&lt;strong&gt;binlog&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;客户端对&lt;/span&gt; MySQL 数据库进行操作的时候，包括 DDL 和 DML 语句，服务端会在日&lt;span&gt;志文件中用事件的形式记录所有的操作记录，这个文件就是&lt;/span&gt; binlog 文件（属于逻辑日志，&lt;span&gt;跟&lt;/span&gt; Redis 的 AOF 文件类似）。Binary log，二进制日志。&lt;span&gt;基于&lt;/span&gt; binlog，我们可以实现主从复制和数据恢复。binlog 默认是不开启的，需要在服务端手动配置。注意有一定的性能损耗。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3.4.1、 binlog 配置&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;编辑&lt;/span&gt; /etc/my.cnf&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
log-bin=mysql-&lt;span&gt;bin

server&lt;/span&gt;-id=&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;重启&lt;/span&gt; MySQL 服务&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;service mysqld stop

service mysqld start

##如果出错查看日志&lt;br/&gt;vi &lt;/span&gt;/&lt;span&gt;var&lt;/span&gt;/log/mysqld.log&lt;br/&gt;cd /&lt;span&gt;var&lt;/span&gt;/lib/mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;是否开启&lt;/span&gt; binlog&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
show variables like &lt;span&gt;'&lt;/span&gt;&lt;span&gt;log_bin%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201123230412620-1425203485.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3.4.2 、binlog 格式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;STATEMENT：记录每一条修改数据的 SQL 语句（减少日志量，节约 IO）。&lt;/p&gt;
&lt;p&gt;ROW：记录哪条数据被修改了，修改成什么样子了（5.7 以后默认）。&lt;/p&gt;
&lt;p&gt;MIXED：结合两种方式，一般的语句用 STATEMENT，函数之类的用&lt;/p&gt;
&lt;p&gt;ROW。查看 binlog 格式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
show &lt;span&gt;global&lt;/span&gt; variables like &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%binlog_format%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201125222304608-384429270.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Binlog 文件超过一定大小就会产生一个新的，查看 binlog 列表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
show binary logs;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201125222338899-1564283316.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 大小：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
show variables like &lt;span&gt;'&lt;/span&gt;&lt;span&gt;max_binlog_size&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;查看&lt;/span&gt; binlog 内容&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
show binlog events &lt;span&gt;in&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql-bin.000001&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201125222433703-437966088.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用&lt;/span&gt; mysqlbinlog 工具，基于时间查看 binlog &lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
/usr/bin/mysqlbinlog --start-datetime=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2025-08-22 13:30:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; --stop-datetime=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2025-08-22 14:01:01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -d ljxmycat /&lt;span&gt;var&lt;/span&gt;/lib/mysql/mysql-bin.&lt;span&gt;000001&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;strong&gt;3.5&lt;/strong&gt;&lt;strong&gt;主从复制原理&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;3.5.1 主从复制配置&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;1、主库开启 binlog，设置 server-id&lt;/p&gt;
&lt;p&gt;2、在主库创建具有复制权限的用户，允许从库连接&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &lt;span&gt;'&lt;/span&gt;&lt;span&gt;repl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;192.168.2.106&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; IDENTIFIED BY &lt;span&gt;'root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;

FLUSH PRIVILEGES;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、从库/etc/my.cnf 配置，重启数据库&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
server-id=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;

log&lt;/span&gt;-bin=mysql-&lt;span&gt;bin

relay&lt;/span&gt;-log=mysql-relay-&lt;span&gt;bin

read&lt;/span&gt;-only=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;

log&lt;/span&gt;-slave-updates=&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;    开启&lt;/span&gt; log-slave-updates 参数后，从库从主库复制的数据会写入 log-bin 日志文件里，这样可以实现互为主备或者级联复制（它自己也可以作为一个 master 节点）。&lt;/p&gt;
&lt;p&gt; 4、在从库执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
stop slave;

change master to

master_host='192.168.2.103',master_user='repl',master_password='root',master_log_file='mysql-bin.00000

1', master_log_pos=4;

start slave;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　5、查看同步状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
SHOW SLAVE STATUS 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Slave_IO_Running 和 Slave SQL Running 都为 yes 为正常。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3.5.2 主从复制原理&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201125223417251-534527125.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p align=&quot;justify&quot;&gt;1、slave 服务器执行 start slave，开启主从复制开关， slave 服务器的 IO 线程请求从 master 服务器读取 binlog（如果该线程追赶上了主库，会进入睡眠状态）。&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;2、master 服务器创建 Log Dump 线程，把 binlog 发送给 slave 服务器。slave 服务器把读取到的 binlog 日志内容写入中继日志 relay log（会记录位置信息，以便下次继续读取）。&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;3、slave 服务器的 SQL 线程会实时检测 relay log 中新增的日志内容，把 relay log 解析成 SQL 语句，并执行。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为什么需要&lt;/span&gt; relay log？为什么不把接收到的 binlog 数据直接写入从库？ Relay log 相当于一个中转站，也记录了 master 和 slave 的同步信息。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3.5.3 mycat 读写分离的实现&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;dataHost name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host122&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; maxCon=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; minCon=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; balance=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

writeType&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; dbType=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; dbDriver=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;native&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; switchType=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; slaveThreshold=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; &amp;lt;heartbeat&amp;gt;&lt;span&gt;select&lt;/span&gt; user()&amp;lt;/heartbeat&amp;gt;

&amp;lt;writeHost host=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hostM1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; url=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.2.103:3306&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; user=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

password&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;

&amp;lt;readHost host=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hostS1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; url=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.2.104:3306&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; user=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; password=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt; &amp;lt;/writeHost&amp;gt;

&amp;lt;/dataHost&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;balance：负载的配置，决定 select 语句的负载&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201126143501474-179129466.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt; writeType：读写分离的配置，决定 update、delete、insert 语句的负载&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201125223848738-1625203306.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; switchType：主从切换配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1287410/202011/1287410-20201125223906128-543884662.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 26 Nov 2020 15:22:00 +0000</pubDate>
<dc:creator>童话述说我的结局</dc:creator>
<og:description>一、mycat分片规则 经过上一篇幅讲解，应该很清楚分片规则配置文件rule.xml位于$MYCAT_HOME/conf目录，它定义了所有拆分表的规则。在使用过程中可以灵活使用不同的分片算法，或者对同</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xing1/p/14021518.html</dc:identifier>
</item>
<item>
<title>Visual Studio使用Git忽略不想上传到远程仓库的文件 - 追逐时光者</title>
<link>http://www.cnblogs.com/Can-daydayup/p/14042091.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Can-daydayup/p/14042091.html</guid>
<description>&lt;h2&gt;前言：   &lt;/h2&gt;
&lt;p&gt;   作为一个.NET开发者而已，有着宇宙最强IDE：Visual Studio加持，让我们的开发效率得到了更好的提升。我们不需要担心环境变量的配置和其他代码管理工具，因为VS有丰富的拓展工具。废话不多说，直接进入正题。我们日常在使用VS开发相关的.NET项目时，经常会发现刚拉取下拉的代码什么都没有改动，就是运行了一下就会产生一些需要提交的文件，比如说最常见的bin/Debug, bin/Release，obj/Debug，obj/Release文件。但是我不想把这些文件提交到远程的git代码远程仓库中去，其实这个很简单只需要我们在初次创建项目的时候在项目目录下新增一个忽略文本文件（.gitignore），然后在使用git推送到远程仓库中就好了。&lt;/p&gt;
&lt;h2&gt;需要忽略提交的文件：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202011/1336199-20201126140154032-1858891046.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;配置.gitignore忽略文件，忽略不需要提交的文件：&lt;/h2&gt;
&lt;h3&gt;添加Visual Studio的.gitgnore模板到项目中：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202011/1336199-20201126140347853-37706865.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;以下是一个.NET/.NET Core相关项目的忽略文件模板只要是使用VisualStudio开发的项目都可以使用：&lt;/h3&gt;
&lt;p&gt;gitnore忽略文件模板来源：&lt;a href=&quot;https://github.com/github/gitignore/blob/master/VisualStudio.gitignore&quot; target=&quot;_blank&quot;&gt;https://github.com/github/gitignore/blob/master/VisualStudio.gitignore&lt;/a&gt;，该项目中有众多的编程语言或IDE相关.gitgnore配置，可以下载下来直接使用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_25cb9a3f-d8fe-4b23-a17b-f4b7b4ba8c27&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_25cb9a3f-d8fe-4b23-a17b-f4b7b4ba8c27&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_25cb9a3f-d8fe-4b23-a17b-f4b7b4ba8c27&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add&lt;/span&gt;-&lt;span&gt;ons.
##
## Get latest &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/github/gitignore/blob/master/VisualStudio.gitignore&lt;/span&gt;
&lt;span&gt;
# User&lt;/span&gt;-&lt;span&gt;specific files
&lt;/span&gt;*&lt;span&gt;.rsuser
&lt;/span&gt;*&lt;span&gt;.suo
&lt;/span&gt;*&lt;span&gt;.user
&lt;/span&gt;*&lt;span&gt;.userosscache
&lt;/span&gt;*&lt;span&gt;.sln.docstates

# User&lt;/span&gt;-specific files (MonoDevelop/&lt;span&gt;Xamarin Studio)
&lt;/span&gt;*&lt;span&gt;.userprefs

# Mono auto generated files
mono_crash.&lt;/span&gt;*&lt;span&gt;

# Build results
[Dd]ebug&lt;/span&gt;/&lt;span&gt;
[Dd]ebugPublic&lt;/span&gt;/&lt;span&gt;
[Rr]elease&lt;/span&gt;/&lt;span&gt;
[Rr]eleases&lt;/span&gt;/&lt;span&gt;
x64&lt;/span&gt;/&lt;span&gt;
x86&lt;/span&gt;/&lt;span&gt;
[Ww][Ii][Nn]&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;/&lt;span&gt;
[Aa][Rr][Mm]&lt;/span&gt;/&lt;span&gt;
[Aa][Rr][Mm]&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;/&lt;span&gt;
bld&lt;/span&gt;/&lt;span&gt;
[Bb]&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;/&lt;span&gt;
[Oo]bj&lt;/span&gt;/&lt;span&gt;
[Ll]og&lt;/span&gt;/&lt;span&gt;
[Ll]ogs&lt;/span&gt;/&lt;span&gt;

# Visual Studio &lt;/span&gt;&lt;span&gt;2015&lt;/span&gt;/&lt;span&gt;2017&lt;/span&gt; cache/&lt;span&gt;options directory
.vs&lt;/span&gt;/&lt;span&gt;
# Uncomment &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; you have tasks that create the project&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s static files in wwwroot&lt;/span&gt;
#wwwroot/&lt;span&gt;

# Visual Studio &lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;&lt;span&gt; auto generated files
Generated\ Files&lt;/span&gt;/&lt;span&gt;

# MSTest test Results
[Tt]est[Rr]esult&lt;/span&gt;*/&lt;span&gt;
[Bb]uild[Ll]og.&lt;/span&gt;*&lt;span&gt;

# NUnit
&lt;/span&gt;*&lt;span&gt;.VisualState.xml
TestResult.xml
nunit&lt;/span&gt;-*&lt;span&gt;.xml

# Build Results of an ATL Project
[Dd]ebugPS&lt;/span&gt;/&lt;span&gt;
[Rr]eleasePS&lt;/span&gt;/&lt;span&gt;
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts&lt;/span&gt;/&lt;span&gt;

# .NET Core
project.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;.json
project.fragment.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;.json
artifacts&lt;/span&gt;/&lt;span&gt;

# ASP.NET Scaffolding
ScaffoldingReadMe.txt

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
&lt;/span&gt;*&lt;span&gt;_i.c
&lt;/span&gt;*&lt;span&gt;_p.c
&lt;/span&gt;*&lt;span&gt;_h.h
&lt;/span&gt;*&lt;span&gt;.ilk
&lt;/span&gt;*&lt;span&gt;.meta
&lt;/span&gt;*&lt;span&gt;.obj
&lt;/span&gt;*&lt;span&gt;.iobj
&lt;/span&gt;*&lt;span&gt;.pch
&lt;/span&gt;*&lt;span&gt;.pdb
&lt;/span&gt;*&lt;span&gt;.ipdb
&lt;/span&gt;*&lt;span&gt;.pgc
&lt;/span&gt;*&lt;span&gt;.pgd
&lt;/span&gt;*&lt;span&gt;.rsp
&lt;/span&gt;*&lt;span&gt;.sbr
&lt;/span&gt;*&lt;span&gt;.tlb
&lt;/span&gt;*&lt;span&gt;.tli
&lt;/span&gt;*&lt;span&gt;.tlh
&lt;/span&gt;*&lt;span&gt;.tmp
&lt;/span&gt;*&lt;span&gt;.tmp_proj
&lt;/span&gt;*&lt;span&gt;_wpftmp.csproj
&lt;/span&gt;*&lt;span&gt;.log
&lt;/span&gt;*&lt;span&gt;.vspscc
&lt;/span&gt;*&lt;span&gt;.vssscc
.builds
&lt;/span&gt;*&lt;span&gt;.pidb
&lt;/span&gt;*&lt;span&gt;.svclog
&lt;/span&gt;*&lt;span&gt;.scc

# Chutzpah Test files
_Chutzpah&lt;/span&gt;*&lt;span&gt;

# Visual C&lt;/span&gt;++&lt;span&gt; cache files
ipch&lt;/span&gt;/
*&lt;span&gt;.aps
&lt;/span&gt;*&lt;span&gt;.ncb
&lt;/span&gt;*&lt;span&gt;.opendb
&lt;/span&gt;*&lt;span&gt;.opensdf
&lt;/span&gt;*&lt;span&gt;.sdf
&lt;/span&gt;*&lt;span&gt;.cachefile
&lt;/span&gt;*&lt;span&gt;.VC.db
&lt;/span&gt;*&lt;span&gt;.VC.VC.opendb

# Visual Studio profiler
&lt;/span&gt;*&lt;span&gt;.psess
&lt;/span&gt;*&lt;span&gt;.vsp
&lt;/span&gt;*&lt;span&gt;.vspx
&lt;/span&gt;*&lt;span&gt;.sap

# Visual Studio Trace Files
&lt;/span&gt;*&lt;span&gt;.e2e

# TFS &lt;/span&gt;&lt;span&gt;2012&lt;/span&gt;&lt;span&gt; Local Workspace
$tf&lt;/span&gt;/&lt;span&gt;

# Guidance Automation Toolkit
&lt;/span&gt;*&lt;span&gt;.gpState

# ReSharper &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; a .NET coding add-&lt;span&gt;in&lt;/span&gt;&lt;span&gt;
_ReSharper&lt;/span&gt;*/
*&lt;span&gt;.[Rr]e[Ss]harper
&lt;/span&gt;*&lt;span&gt;.DotSettings.user

# TeamCity &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; a build add-&lt;span&gt;in&lt;/span&gt;&lt;span&gt;
_TeamCity&lt;/span&gt;*&lt;span&gt;

# DotCover &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; a Code Coverage Tool
&lt;/span&gt;*&lt;span&gt;.dotCover

# AxoCover &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; a Code Coverage Tool
.axoCover&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
!.axoCover/settings.json

# Coverlet is a free, cross platform Code Coverage Tool
coverage*.json
coverage*.xml
coverage*.info

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted
PublishScripts/

# NuGet Packages
*.nupkg
# NuGet Symbol Packages
*.snupkg
# The packages folder can be ignored because of Package Restore
*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;[Pp]ackages&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
# except build/, which is used as an MSBuild target.
!*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;[Pp]ackages/build/&lt;span&gt;
# Uncomment &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; necessary however generally it will be regenerated when needed
#&lt;/span&gt;!**/[Pp]ackages/&lt;span&gt;repositories.config
# NuGet v3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s project.json files produces more ignorable files&lt;/span&gt;
*&lt;span&gt;.nuget.props
&lt;/span&gt;*&lt;span&gt;.nuget.targets

# Microsoft Azure Build Output
csx&lt;/span&gt;/
*&lt;span&gt;.build.csdef

# Microsoft Azure Emulator
ecf&lt;/span&gt;/&lt;span&gt;
rcf&lt;/span&gt;/&lt;span&gt;

# Windows Store app package directories and files
AppPackages&lt;/span&gt;/&lt;span&gt;
BundleArtifacts&lt;/span&gt;/&lt;span&gt;
Package.StoreAssociation.xml
_pkginfo.txt
&lt;/span&gt;*&lt;span&gt;.appx
&lt;/span&gt;*&lt;span&gt;.appxbundle
&lt;/span&gt;*&lt;span&gt;.appxupload

# Visual Studio cache files
# files ending &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; .cache can be ignored
&lt;/span&gt;*&lt;span&gt;.[Cc]ache
# but keep track of directories ending &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; .cache
&lt;/span&gt;!?*.[Cc]ache/&lt;span&gt;

# Others
ClientBin&lt;/span&gt;/
~$*
*~
*&lt;span&gt;.dbmdl
&lt;/span&gt;*&lt;span&gt;.dbproj.schemaview
&lt;/span&gt;*&lt;span&gt;.jfm
&lt;/span&gt;*&lt;span&gt;.pfx
&lt;/span&gt;*&lt;span&gt;.publishsettings
orleans.codegen.cs

# Including strong name files can present a security risk
# (https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/github/gitignore/pull/2483#issue-259490424)&lt;/span&gt;
#*&lt;span&gt;.snk

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/github/gitignore/pull/1529#issuecomment-104372622)&lt;/span&gt;
#bower_components/&lt;span&gt;

# RIA&lt;/span&gt;/&lt;span&gt;Silverlight projects
Generated_Code&lt;/span&gt;/&lt;span&gt;

# Backup &lt;/span&gt;&amp;amp; report files &lt;span&gt;from&lt;/span&gt;&lt;span&gt; converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;&lt;/span&gt;-&lt;span&gt;)
_UpgradeReport_Files&lt;/span&gt;/&lt;span&gt;
Backup&lt;/span&gt;*/&lt;span&gt;
UpgradeLog&lt;/span&gt;*&lt;span&gt;.XML
UpgradeLog&lt;/span&gt;*&lt;span&gt;.htm
ServiceFabricBackup&lt;/span&gt;/
*&lt;span&gt;.rptproj.bak

# SQL Server files
&lt;/span&gt;*&lt;span&gt;.mdf
&lt;/span&gt;*&lt;span&gt;.ldf
&lt;/span&gt;*&lt;span&gt;.ndf

# Business Intelligence projects
&lt;/span&gt;*&lt;span&gt;.rdl.data
&lt;/span&gt;*&lt;span&gt;.bim.layout
&lt;/span&gt;*.bim_*&lt;span&gt;.settings
&lt;/span&gt;*&lt;span&gt;.rptproj.rsuser
&lt;/span&gt;*-&lt;span&gt; [Bb]ackup.rdl
&lt;/span&gt;*- [Bb]ackup ([&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;9&lt;/span&gt;&lt;span&gt;]).rdl
&lt;/span&gt;*- [Bb]ackup ([&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;9&lt;/span&gt;][&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;9&lt;/span&gt;&lt;span&gt;]).rdl

# Microsoft Fakes
FakesAssemblies&lt;/span&gt;/&lt;span&gt;

# GhostDoc plugin setting file
&lt;/span&gt;*&lt;span&gt;.GhostDoc.xml

# Node.js Tools &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; Visual Studio
.ntvs_analysis.dat
node_modules&lt;/span&gt;/&lt;span&gt;

# Visual Studio &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; build log
&lt;/span&gt;*&lt;span&gt;.plg

# Visual Studio &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; workspace options file
&lt;/span&gt;*&lt;span&gt;.opt

# Visual Studio &lt;/span&gt;&lt;span&gt;6&lt;/span&gt; auto-&lt;span&gt;generated workspace file (contains which files were open etc.)
&lt;/span&gt;*&lt;span&gt;.vbw

# Visual Studio LightSwitch build output
&lt;/span&gt;**&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;.HTMLClient/GeneratedArtifacts
*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;*.DesktopClient/&lt;span&gt;GeneratedArtifacts
&lt;/span&gt;**&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;.DesktopClient/ModelManifest.xml
*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;*.Server/&lt;span&gt;GeneratedArtifacts
&lt;/span&gt;**&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe
paket-files/

# FAKE - F# Make
.fake/

# CodeRush personal settings
.cr/personal

# Python Tools for Visual Studio (PTVS)
__pycache__/
*.pyc

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder
.mfractor/

# Local History for Visual Studio
.localhistory/

# BeatPulse healthcheck temp database
healthchecksdb

# Backup folder for Package Reference Convert tool in Visual Studio 2017
MigrationBackup/

# Ionide (cross platform F# VS Code tools) working folder
.ionide/

# Fody - auto-generated XML schema
FodyWeavers.xsd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;.gitignore忽略规则：&lt;/h2&gt;
&lt;p&gt;语法： &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;以”#”号开头表示注释； &lt;/li&gt;
&lt;li&gt;以斜杠“/”开头表示目录； &lt;/li&gt;
&lt;li&gt;以星号“*”通配多个字符； &lt;/li&gt;
&lt;li&gt;以问号“?”通配单个字符 &lt;/li&gt;
&lt;li&gt;以方括号“[]”包含单个字符的匹配列表； &lt;/li&gt;
&lt;li&gt;以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;此外，git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效； &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
# 此为注释 – 将被 Git 忽略
 
*.a       # 忽略所有 .a 结尾的文件
!lib.a    # 但 lib.a 除外
/TODO     # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
build/    # 忽略 build/ 目录下的所有文件
doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该忽略规则参考地址：&lt;a href=&quot;https://blog.csdn.net/sundna/article/details/90749495&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/sundna/article/details/90749495&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;处理已提交到远程仓库中的文件：&lt;/h2&gt;
&lt;p&gt;　　我们可能在开发的时候可能一时没有注意添加忽略文件配置（gitignore），把这些文件推送到远程仓库中，我们有以下两种做法解决：&lt;/p&gt;
&lt;p&gt;1、把本地这些文件删除再提交到远端（前提是这些文件是环境变量文件，假如是无法自动生成的不推荐）。&lt;/p&gt;
&lt;p&gt;2、使用以下git 命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
//当我们需要删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制, 可以使用
git rm -r --cached file_path（文件路径）  //把file_path文件在当前分支的暂存区中删除&lt;br/&gt;git add .                               //提交当前操作本地暂存区
git commit -m 'delete remote somefile'  //提交到本地git仓库
git push                                //提交到远程代码库
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如我需要移除某个项目中的obj文件然后提交：&lt;/p&gt;
&lt;p&gt;该文件路径为：D:\开发学习-Master\我的训练营\DailyLearning\工作&amp;amp;学习.Net训练营\Application\obj　　&lt;/p&gt;
&lt;p&gt;输入以下命令移除相关不需要跟踪的文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
git rm -r --cached Application/obj
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行成功后，文件将从该分支中删除（本地还会存在），最后我们提交到远程仓库即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202011/1336199-20201126141754743-851202158.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202011/1336199-20201126142029008-1833977034.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 26 Nov 2020 15:06:00 +0000</pubDate>
<dc:creator>追逐时光者</dc:creator>
<og:description>前言： 作为一个.NET开发者而已，有着宇宙最强IDE：Visual Studio加持，让我们的开发效率得到了更好的提升。我们不需要担心环境变量的配置和其他代码管理工具，因为VS有丰富的拓展工具。废话</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/Can-daydayup/p/14042091.html</dc:identifier>
</item>
<item>
<title>day98:MoFang:服务端项目搭建 - iR-Poke</title>
<link>http://www.cnblogs.com/libolun/p/14045041.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/libolun/p/14045041.html</guid>
<description>&lt;h2&gt;目录&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo1&quot;&gt;1.准备工作&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo2&quot;&gt;2.创建项目启动文件manage.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo3&quot;&gt;3.构建全局初始化函数并在函数内创建app应用对象&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo4&quot;&gt;4.通过终端脚本启动项目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo5&quot;&gt;5.项目加载配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo6&quot;&gt;6.数据库初始化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo6.1&quot;&gt;1.SQLAlchemy初始化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo6.2&quot;&gt;2.Redis初始化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo6.3&quot;&gt;3.session存储到redis数据库中&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo6.4&quot;&gt;4.数据迁移初始化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo7&quot;&gt;7.日志初始化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo8&quot;&gt;8.蓝图初始化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo8.1&quot;&gt;1.通过终端命令创建蓝图,并在蓝图中生成view/model/url等文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo8.2&quot;&gt;2.将蓝图注册到APP应用对象下&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo8.3&quot;&gt;3.注册路由和视图之间的关系&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://www.cnblogs.com/libolun/p/14045041.html#demo8.4&quot;&gt;4.自动注册蓝图下的所有模型&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1.准备工作&lt;/h2&gt;
&lt;p&gt;1.新建项目目录mofangapi,并创建虚拟环境&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
mkvirtualenv mofang
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.安装开发中使用的依赖模块&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
pip install flask==0.12.4&lt;span&gt;
pip install flask&lt;/span&gt;-&lt;span&gt;redis
pip install flask&lt;/span&gt;-&lt;span&gt;session
pip install flask&lt;/span&gt;-&lt;span&gt;script
pip install flask&lt;/span&gt;-&lt;span&gt;mysqldb
pip install flask&lt;/span&gt;-&lt;span&gt;sqlalchemy
pip install flask&lt;/span&gt;-migrate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，在pycharm中打开项目目录mofangapi编写manage.py启动项目的文件&lt;/p&gt;
&lt;h2&gt;2.创建项目启动文件manage.py&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask

app &lt;/span&gt;= Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)

@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    app.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;manage.py&lt;/span&gt;&lt;/strong&gt;终不能存放大量的开发代码, 在开发中应该体现的是一种&lt;span&gt;分工&lt;/span&gt;精神,所以我们可以把flask中各种功能代码进行分类分文件存储.&lt;/p&gt;
&lt;p&gt;现在项目的目录结构如下所示:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
项目根目录/&lt;span&gt;
├── application&lt;/span&gt;/            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目主要逻辑代码保存目录&lt;/span&gt;
|   ├── settings/           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目配置存储目录&lt;/span&gt;
│   │   ├ dev.py            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 开发阶段的配置文件&lt;/span&gt;
│   │   ├ prod.py           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生产阶段的配置文件&lt;/span&gt;
|   |   ├ &lt;span&gt;__init__&lt;/span&gt;.py       &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目公共配置文件&lt;/span&gt;
│   ├── &lt;span&gt;__init__&lt;/span&gt;.py         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目初始化文件&lt;/span&gt;
├── manage.py               &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目的终端管理脚本文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.&lt;span class=&quot;md-expand&quot;&gt;构建全局初始化函数并在函数内创建app应用对象&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;1.把引导整个项目启动的全局初始化代码,保存到&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/__init__py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;,&lt;/span&gt;&lt;/strong&gt;代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_app():
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;全局初始化&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    app &lt;/span&gt;= Flask(&lt;span&gt;__name__&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建APP应用对象&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.在&lt;strong&gt;&lt;span&gt;manage.py,&lt;/span&gt;&lt;/strong&gt;中调用初始化函数,创建app应用对象,代码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; application &lt;span&gt;import&lt;/span&gt;&lt;span&gt; init_app

app &lt;/span&gt;= init_app() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建app应用对象&lt;/span&gt;
&lt;span&gt;
@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    app.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4.通过终端脚本启动项目&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;applicatiion/__init__py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-expand&quot;&gt;,代码:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_script &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Manager

manager &lt;/span&gt;= Manager() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 引入终端脚本管理对象 ***&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_app():
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;全局初始化&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建app应用对象&lt;/span&gt;
    app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化终端脚本工具 ***&lt;/span&gt;
    manager.app =&lt;span&gt; app

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; manager
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将&lt;strong&gt;&lt;span&gt;manage.py&lt;/span&gt;&lt;/strong&gt;的app改为manage，代码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; application &lt;span&gt;import&lt;/span&gt;&lt;span&gt; init_app

manage &lt;/span&gt;=&lt;span&gt; init_app()

@manage.app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    manage.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行项目的方式就要修改如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1780189/202011/1780189-20201126193529043-1214911608.png&quot; alt=&quot;&quot; width=&quot;643&quot; height=&quot;222&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时我们就可以通过如下指令去运行项目了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
python manage.py runserver -h0.0.0.0 -p5000
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;5.项目加载配置&lt;/h2&gt;
&lt;p&gt;1.在&lt;strong&gt;&lt;span&gt;application/utils/config.py&lt;/span&gt;&lt;/strong&gt;中准备加载配置的函数代码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; importlib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; import_module
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; load_config(config_path):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;自动加载配置&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    module &lt;/span&gt;=&lt;span&gt; import_module(config_path)
    name &lt;/span&gt;= config_path.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)[-1&lt;span&gt;]
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; name == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; module.InitConfig
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; module.Config
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;2.编写项目默认配置文件, &lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/settings/__init__.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; InitConfig():
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;项目默认初始化配置&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    DEBUG &lt;/span&gt;= True
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然, 项目开发过程完成以后肯定会项目上线,所以针对配置文件,我们可以准备不同环境下的配置&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code class=&quot;md-expand&quot;&gt;application/settings/dev.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;,&lt;/span&gt;&lt;/strong&gt;代码:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt;&lt;span&gt; InitConfig
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Config(InitConfig):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;项目开发环境下的配置&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    DEBUG &lt;/span&gt;= True
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/settings/prod.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;,代码:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt;&lt;span&gt; InitConfig
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Config(InitConfig):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;项目运营环境下的配置&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    DEBUG &lt;/span&gt;= False
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;3.在项目引导文件&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/__init__py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;中加载配置,代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_script &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Manager
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.config &lt;span&gt;import&lt;/span&gt;&lt;span&gt; load_config
manager &lt;/span&gt;=&lt;span&gt; Manager()

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_app(config_path):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;全局初始化&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建app应用对象&lt;/span&gt;
    app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
    
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置项目根目录&lt;/span&gt;
    app.BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;)))
    
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载配置 ****&lt;/span&gt;
    Config = load_config(config_path) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调用utils里自己已经写好的load_config方法&lt;/span&gt;
    app.config.from_object(Config) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将配置类注册到APP上&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化终端脚本工具&lt;/span&gt;
    manager.app =&lt;span&gt; app

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; manager
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.在创建app对象的项目启动文件&lt;strong&gt;&lt;span&gt;manage.py&lt;/span&gt;&lt;/strong&gt;中,设置配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; application &lt;span&gt;import&lt;/span&gt;&lt;span&gt; init_app

manage &lt;/span&gt;= init_app(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application.settings.dev&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置默认项目使用的配置文件是dev.py&lt;/span&gt;
&lt;span&gt;
@manage.app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    manage.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;6.数据库初始化&lt;/h2&gt;
&lt;h3&gt;1.SQLAlchemy初始化&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;1.默认项目配置文件中增加配置选项&lt;strong&gt;&lt;span&gt;,&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/settings/__init__.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;,&lt;/span&gt;&lt;/strong&gt;代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; InitConfig():
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;项目默认初始化配置&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调试模式&lt;/span&gt;
    DEBUG =&lt;span&gt; True

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库相关配置&lt;/span&gt;
    SQLALCHEMY_DATABASE_URI = &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 动态追踪修改设置&lt;/span&gt;
    SQLALCHEMY_TRACK_MODIFICATIONS =&lt;span&gt; False
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查询时会显示原始SQL语句&lt;/span&gt;
    SQLALCHEMY_ECHO= True
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;2.开发配置&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;dev.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;中,配置数据库连接信息,代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt;&lt;span&gt; InitConfig
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Config(InitConfig):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;项目开发环境下的配置&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    DEBUG &lt;/span&gt;=&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库&lt;/span&gt;
    SQLALCHEMY_DATABASE_URI = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql://mofang_user:mofang@127.0.0.1:3306/mofang?charset=utf8mb4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    SQLALCHEMY_ECHO &lt;/span&gt;= True
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.在&lt;strong&gt;&lt;span&gt;mysql终端&lt;/span&gt;&lt;/strong&gt;下, 创建数据库用户,命令如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
create database mofang charset=&lt;span&gt;utf8mb4;
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 针对当前数据库配置账户信息&lt;/span&gt;
create user mofang_user identified by &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mofang&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
grant all privileges on mofang.&lt;/span&gt;* to &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mofang_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
flush privileges;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;4.在项目全局引导文件中,对数据库功能进行初始化&lt;strong&gt;&lt;span&gt;,&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/__init__.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;,代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_script &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Manager
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_sqlalchemy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; SQLAlchemy
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.config &lt;span&gt;import&lt;/span&gt;&lt;span&gt; load_config

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建终端脚本管理对象&lt;/span&gt;
manager =&lt;span&gt; Manager()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建数据库链接对象 ***&lt;/span&gt;
db =&lt;span&gt; SQLAlchemy()

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_app(config_path):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;全局初始化&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建app应用对象&lt;/span&gt;
    app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目根目录&lt;/span&gt;
    app.BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;)))
    
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载配置&lt;/span&gt;
    Config =&lt;span&gt; load_config(config_path)
    app.config.from_object(Config)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库初始化 ***&lt;/span&gt;
&lt;span&gt;    db.init_app(app)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化终端脚本工具&lt;/span&gt;
    manager.app =&lt;span&gt; app

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; manager
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.Redis初始化&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;1.默认配置文件,&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/settings/__init__py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;,代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; InitConfig():
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;项目默认初始化配置&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调试模式&lt;/span&gt;
    DEBUG =&lt;span&gt; True

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库相关配置&lt;/span&gt;
    SQLALCHEMY_DATABASE_URI = &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 动态追踪修改设置&lt;/span&gt;
    SQLALCHEMY_TRACK_MODIFICATIONS =&lt;span&gt; False
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查询时会显示原始SQL语句&lt;/span&gt;
    SQLALCHEMY_ECHO=&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Redis&lt;/span&gt;
    REDIS_URL = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redis://@127.0.0.1:6379/0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;2.在全局引导文件中, 对redis进行初始化,&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;applicaiton/__init__.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;,代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_script &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Manager
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_sqlalchemy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; SQLAlchemy
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_redis &lt;span&gt;import&lt;/span&gt;&lt;span&gt; FlaskRedis

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.config &lt;span&gt;import&lt;/span&gt;&lt;span&gt; load_config

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建终端脚本管理对象&lt;/span&gt;
manager =&lt;span&gt; Manager()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建数据库链接对象&lt;/span&gt;
db =&lt;span&gt; SQLAlchemy()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; redis链接对象 ***&lt;/span&gt;
redis =&lt;span&gt; FlaskRedis()

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_app(config_path):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;全局初始化&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;br/&gt;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建app应用对象&lt;/span&gt;
    app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目根目录&lt;/span&gt;
    app.BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;)))
    
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载配置&lt;/span&gt;
    Config =&lt;span&gt; load_config(config_path)
    app.config.from_object(Config)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库初始化&lt;/span&gt;
&lt;span&gt;    db.init_app(app)
    redis.init_app(app) &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; redis数据库初始化 ***&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化终端脚本工具&lt;/span&gt;
    manager.app =&lt;span&gt; app

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; manager
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3.session存储到redis数据库中&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;1.因为需要单独设置一个数据库存放session,所以我们再次单独配置一个关于session加载配置的函数&lt;span&gt;&lt;code&gt;init_session&lt;/code&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/utils/session.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-expand&quot;&gt;,代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; redis &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Redis
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_session(app):
    host &lt;/span&gt;= app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SESSION_REDIS_HOST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    port &lt;/span&gt;= app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SESSION_REDIS_PORT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,6379&lt;span&gt;)
    db &lt;/span&gt;= app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SESSION_REDIS_DB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,0)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(db)
    app.config[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SESSION_REDIS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = Redis(host=host,port=port,db=db)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;2.默认配置文件&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/settings/__init__.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;中, 添加配置项:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; InitConfig():
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;项目默认初始化配置&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调试模式&lt;/span&gt;
    DEBUG =&lt;span&gt; True

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库相关配置&lt;/span&gt;
    SQLALCHEMY_DATABASE_URI = &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 动态追踪修改设置&lt;/span&gt;
    SQLALCHEMY_TRACK_MODIFICATIONS =&lt;span&gt; False
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查询时会显示原始SQL语句&lt;/span&gt;
    SQLALCHEMY_ECHO=&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Redis&lt;/span&gt;
    REDIS_URL = &lt;span&gt;&quot;&quot;&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置密钥，可以通过 base64.b64encode(os.urandom(48)) 来生成一个指定长度的随机字符串 ***&lt;/span&gt;
    SECRET_KEY = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y58Rsqzmts6VCBRHes1Sf2DHdGJaGqPMi6GYpBS4CKyCdi42KLSs9TQVTauZMLMw&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

    &lt;span&gt;'''&lt;/span&gt;&lt;span&gt;session存储配置&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt; ***
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储方式配置 ***&lt;/span&gt;
    SESSION_TYPE = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redis&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果设置session的生命周期是否是会话期, 为True，则关闭浏览器session就失效 ***&lt;/span&gt;
    SESSION_PERMANENT =&lt;span&gt; False
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置session_id在浏览器中的cookie有效期 ***&lt;/span&gt;
    PERMANENT_SESSION_LIFETIME = 24 * 60 * 60  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session 的有效期，单位是秒 ***&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是否对发送到浏览器上session的cookie值进行加密 ***&lt;/span&gt;
    SESSION_USE_SIGNER =&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存到redis的session数的名称前缀 ***&lt;/span&gt;
    SESSION_KEY_PREFIX = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;session:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session保存数据到redis时启用的链接对象 ***&lt;/span&gt;
    SESSION_REDIS = None   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用于连接redis的配置 ***&lt;/span&gt;
&lt;span&gt;
    SESSION_REDIS_HOST &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    SESSION_REDIS_PORT &lt;/span&gt;= 6379&lt;span&gt;
    SESSION_REDIS_DB &lt;/span&gt;= 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;3.在本地开发配置中,设置session存储指定的redis库中,&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/settings/dev.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;,代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt;&lt;span&gt; InitConfig
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Config(InitConfig):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;项目开发环境下的配置&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    DEBUG &lt;/span&gt;=&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库&lt;/span&gt;
    SQLALCHEMY_DATABASE_URI = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql://mofang_user:mofang@127.0.0.1:3306/mofang?charset=utf8mb4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    SQLALCHEMY_ECHO &lt;/span&gt;=&lt;span&gt; True

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; redis ***&lt;/span&gt;
    REDIS_URL = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redis://@127.0.0.1:6379/0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 0号redis库用来存redis缓存&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储配置 ***&lt;/span&gt;
    SESSION_REDIS_HOST = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    SESSION_REDIS_PORT &lt;/span&gt;= 6379&lt;span&gt;
    SESSION_REDIS_DB &lt;/span&gt;= 1 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 1号redis库用来存session&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;4.在项目全局引导文件&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/__init__.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;中对session存储进行初始化,代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_script &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Manager
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_sqlalchemy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; SQLAlchemy
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_redis &lt;span&gt;import&lt;/span&gt;&lt;span&gt; FlaskRedis
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_session &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Session

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.config &lt;span&gt;import&lt;/span&gt;&lt;span&gt; load_config
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.session &lt;span&gt;import&lt;/span&gt;&lt;span&gt; init_session
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建终端脚本管理对象&lt;/span&gt;
manager =&lt;span&gt; Manager()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建数据库链接对象&lt;/span&gt;
db =&lt;span&gt; SQLAlchemy()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; redis链接对象&lt;/span&gt;
redis =&lt;span&gt; FlaskRedis()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Session存储对象 ***&lt;/span&gt;
session_store =&lt;span&gt; Session()

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_app(config_path):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;全局初始化&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建app应用对象&lt;/span&gt;
    app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目根目录&lt;/span&gt;
    app.BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;)))
    
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载配置&lt;/span&gt;
    Config =&lt;span&gt; load_config(config_path)
    app.config.from_object(Config)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库初始化&lt;/span&gt;
&lt;span&gt;    db.init_app(app)
    redis.init_app(app)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储初始化 ***&lt;/span&gt;
    init_session(app) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载session配置 &lt;/span&gt;
    session_store.init_app(app) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储初始化&lt;/span&gt;
    
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化终端脚本工具&lt;/span&gt;
    manager.app =&lt;span&gt; app

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; manager
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4.数据迁移初始化&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;1.项目全局引导文件&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/__init__py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;,代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_script &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Manager
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_sqlalchemy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; SQLAlchemy
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_redis &lt;span&gt;import&lt;/span&gt;&lt;span&gt; FlaskRedis
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_session &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Session
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_migrate &lt;span&gt;import&lt;/span&gt; Migrate,MigrateCommand &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ***&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; application.utils.config &lt;span&gt;import&lt;/span&gt;&lt;span&gt; load_config
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.session &lt;span&gt;import&lt;/span&gt;&lt;span&gt; init_session

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建终端脚本管理对象&lt;/span&gt;
manager =&lt;span&gt; Manager()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建数据库链接对象&lt;/span&gt;
db =&lt;span&gt; SQLAlchemy()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; redis链接对象&lt;/span&gt;
redis =&lt;span&gt; FlaskRedis()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Session存储对象&lt;/span&gt;
session_store =&lt;span&gt; Session()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据迁移实例对象 ***&lt;/span&gt;
migrate =&lt;span&gt; Migrate()

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_app(config_path):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;全局初始化&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建app应用对象&lt;/span&gt;
    app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目根目录&lt;/span&gt;
    app.BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;)))
    
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载配置&lt;/span&gt;
    Config =&lt;span&gt; load_config(config_path)
    app.config.from_object(Config)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库初始化 &lt;/span&gt;
&lt;span&gt;    db.init_app(app)
    redis.init_app(app)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储初始化&lt;/span&gt;
&lt;span&gt;    init_session(app)
    session_store.init_app(app)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据迁移初始化 ***&lt;/span&gt;
&lt;span&gt;    migrate.init_app(app,db)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加数据迁移的命令到终端脚本工具中 ***&lt;/span&gt;
    manager.add_command(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;db&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, MigrateCommand)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化终端脚本工具&lt;/span&gt;
    manager.app =&lt;span&gt; app

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; manager
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完成上面的项目构建步骤以后,此时目录结构如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
项目根目录/&lt;span&gt;
├── docs&lt;/span&gt;/                   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目开发文档/接口等备份资料存储目录&lt;/span&gt;
├── logs/                   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目日志存储目录&lt;/span&gt;
├── application/            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目主要逻辑代码保存目录&lt;/span&gt;
|   ├── settings/           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目配置存储目录&lt;/span&gt;
│   │   ├ dev.py            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 开发阶段的配置文件&lt;/span&gt;
│   │   ├ prod.py           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生产阶段的配置文件&lt;/span&gt;
|   |   ├ &lt;span&gt;__init__&lt;/span&gt;.py       &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目公共配置文件&lt;/span&gt;
|   ├── utils/              &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 工具函数库/类库&lt;/span&gt;
│   │   ├ session.py        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session相关的辅助函数&lt;/span&gt;
│   │   ├ config.py         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 配置相关的辅助函数&lt;/span&gt;
│   ├── &lt;span&gt;__init__&lt;/span&gt;.py         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目初始化文件&lt;/span&gt;
└── manage.py               &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目的终端管理脚本文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;7.日志初始化&lt;/h2&gt;
&lt;p&gt;flask中没有内置的日志功能,我们在使用的时候, 一般日志如果不是核心重点,则通过&lt;span&gt;由python内置的logging模块进行配置集成使用即&lt;/span&gt;可, 如果项目中日志发挥作用比较重要, 则一般安装部署 ELK日志分析系统.&lt;/p&gt;
&lt;h3&gt;1.日志的等级&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
FATAL/CRITICAL =&lt;span&gt; 致命的，危险的
ERROR &lt;/span&gt;=&lt;span&gt; 错误
WARNING &lt;/span&gt;=&lt;span&gt; 警告
INFO &lt;/span&gt;=&lt;span&gt; 信息
DEBUG &lt;/span&gt;= 调试
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.构建日志模块&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;1.把日志初始化相关的代码封装成一个函数，&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/utils/logger.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，代码：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; logging
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; logging.handlers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; RotatingFileHandler

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Log():
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;日志模块&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self, app=&lt;span&gt;None):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; app &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; None:
            self.init_app(app)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_app(self,app):
        self.app &lt;/span&gt;=&lt;span&gt; app
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.setup()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; setup(self):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;安装日志功能到flask中&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置日志的记录等级&lt;/span&gt;
        logging.basicConfig(level=self.app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG_LEVEL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调试debug级&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建日志记录器，指明日志保存的路径、每个日志文件的最大大小、保存的日志文件个数上限&lt;/span&gt;
        file_log_handler =&lt;span&gt; RotatingFileHandler(
            self.app.BASE_DIR&lt;/span&gt;+self.app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG_DIR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
            maxBytes&lt;/span&gt;=self.app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG_MAX_BYTES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
            backupCount&lt;/span&gt;=self.app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG_BACKPU_COUNT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        )

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建日志记录的格式 日志等级 输入日志信息的文件名 行数 日志信息&lt;/span&gt;
        formatter = logging.Formatter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%(name)s: %(levelname)s %(asctime)s %(filename)s:%(lineno)d %(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 为刚创建的日志记录器设置日志记录格式&lt;/span&gt;
&lt;span&gt;        file_log_handler.setFormatter(formatter)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 为全局的日志工具对象（flaskapp使用的）添加日志记录器&lt;/span&gt;
        logging.getLogger(self.app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG_NAME&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).addHandler(file_log_handler)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 返回日志器对象提供给业务开发&lt;/span&gt;
        logger = logging.getLogger(self.app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG_NAME&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; logger
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;md-expand&quot;&gt;2.&lt;strong&gt;&lt;span&gt;application/settings/__init__.py&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;&lt;span&gt;代码：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; InitConfig():
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;项目默认初始化配置&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调试模式&lt;/span&gt;
    DEBUG =&lt;span&gt; True

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库相关配置&lt;/span&gt;
    SQLALCHEMY_DATABASE_URI = &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 动态追踪修改设置&lt;/span&gt;
    SQLALCHEMY_TRACK_MODIFICATIONS =&lt;span&gt; False
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查询时会显示原始SQL语句&lt;/span&gt;
    SQLALCHEMY_ECHO=&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Redis&lt;/span&gt;
    REDIS_URL = &lt;span&gt;&quot;&quot;&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置密钥，可以通过 base64.b64encode(os.urandom(48)) 来生成一个指定长度的随机字符串&lt;/span&gt;
    SECRET_KEY = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y58Rsqzmts6VCBRHes1Sf2DHdGJaGqPMi6GYpBS4CKyCdi42KLSs9TQVTauZMLMw&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储配置&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储方式配置&lt;/span&gt;
    SESSION_TYPE = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redis&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果设置session的生命周期是否是会话期, 为True，则关闭浏览器session就失效&lt;/span&gt;
    SESSION_PERMANENT =&lt;span&gt; False
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置session_id在浏览器中的cookie有效期&lt;/span&gt;
    PERMANENT_SESSION_LIFETIME = 24 * 60 * 60  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session 的有效期，单位是秒&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是否对发送到浏览器上session的cookie值进行加密&lt;/span&gt;
    SESSION_USE_SIGNER =&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存到redis的session数的名称前缀&lt;/span&gt;
    SESSION_KEY_PREFIX = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;session:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session保存数据到redis时启用的链接对象&lt;/span&gt;
    SESSION_REDIS = None   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用于连接redis的配置&lt;/span&gt;
&lt;span&gt;
    SESSION_REDIS_HOST &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    SESSION_REDIS_PORT &lt;/span&gt;= 6379&lt;span&gt;
    SESSION_REDIS_DB &lt;/span&gt;= 1

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调整json数据转换中文的配置&lt;/span&gt;
    JSON_AS_ASCII=&lt;span&gt;False

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志相关配置 ***&lt;/span&gt;
    LOG_LEVEL        = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;INFO&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;              &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志输出到文件中的最低等级&lt;/span&gt;
    LOG_DIR          = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logs/0.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志存储目录&lt;/span&gt;
    LOG_MAX_BYTES    = 300 * 1024 * 1024   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 单个日志文件的存储上限[单位: b]&lt;/span&gt;
    LOG_BACKPU_COUNT = 20                  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志文件的最大备份数量&lt;/span&gt;
    LOG_NAME         = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;flask&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志器的名字&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;3.开发环境配置文件&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;dev.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;中配置具体的日志相关信息,代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt;&lt;span&gt; InitConfig
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Config(InitConfig):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;项目开发环境下的配置&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    DEBUG &lt;/span&gt;=&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库&lt;/span&gt;
    SQLALCHEMY_DATABASE_URI = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql://mofang_user:mofang@127.0.0.1:3306/mofang?charset=utf8mb4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    SQLALCHEMY_ECHO &lt;/span&gt;=&lt;span&gt; True

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; redis&lt;/span&gt;
    REDIS_URL = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redis://@127.0.0.1:6379/0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储配置&lt;/span&gt;
    SESSION_REDIS_HOST = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    SESSION_REDIS_PORT &lt;/span&gt;= 6379&lt;span&gt;
    SESSION_REDIS_DB &lt;/span&gt;= 1

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志配置 ***&lt;/span&gt;
    LOG_LEVEL        = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志输出到文件中的最低等级&lt;/span&gt;
    LOG_DIR          = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/logs/mofang.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志存储目录&lt;/span&gt;
    LOG_MAX_BYTES    = 300 * 1024 * 1024   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 单个日志文件的存储上限[单位: b]&lt;/span&gt;
    LOG_BACKPU_COUNT = 20                  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志文件的最大备份数量&lt;/span&gt;
    LOG_NAME = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mofang&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;                    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志器名称&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;4.在 &lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/__init__.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;文件中的&lt;span&gt;&lt;code&gt;init_app&lt;/code&gt; &lt;span&gt;方法中调用日志初始化。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os,logging

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_script &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Manager
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_sqlalchemy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; SQLAlchemy
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_redis &lt;span&gt;import&lt;/span&gt;&lt;span&gt; FlaskRedis
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_session &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Session
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_migrate &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Migrate,MigrateCommand

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.config &lt;span&gt;import&lt;/span&gt;&lt;span&gt; load_config
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.session &lt;span&gt;import&lt;/span&gt;&lt;span&gt; init_session
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.logger &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Log
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建终端脚本管理对象&lt;/span&gt;
manager =&lt;span&gt; Manager()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建数据库链接对象&lt;/span&gt;
db =&lt;span&gt; SQLAlchemy()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; redis链接对象&lt;/span&gt;
redis =&lt;span&gt; FlaskRedis()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Session存储对象&lt;/span&gt;
session_store =&lt;span&gt; Session()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据迁移实例对象&lt;/span&gt;
migrate =&lt;span&gt; Migrate()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志对象 ***&lt;/span&gt;
log =&lt;span&gt; Log()

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_app(config_path):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;全局初始化&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建app应用对象&lt;/span&gt;
    app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
    app.BASE_DIR &lt;/span&gt;= os.path.dirname(os.path.dirname(os.path.abspath(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;)))

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载配置&lt;/span&gt;
    Config =&lt;span&gt; load_config(config_path)
    app.config.from_object(Config)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库初始化&lt;/span&gt;
&lt;span&gt;    db.init_app(app)
    redis.init_app(app)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储初始化&lt;/span&gt;
&lt;span&gt;    init_session(app)
    session_store.init_app(app)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据迁移初始化&lt;/span&gt;
&lt;span&gt;    migrate.init_app(app,db)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加数据迁移的命令到终端脚本工具中&lt;/span&gt;
    manager.add_command(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;db&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, MigrateCommand)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志初始化 ***&lt;/span&gt;
    app.log =&lt;span&gt; log.init_app(app)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化终端脚本工具&lt;/span&gt;
    manager.app =&lt;span&gt; app

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; manager
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新增日志的项目目录结构如下所示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;├── application
│   ├── &lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;.py
│   ├── settings
│   │   ├── dev.py
│   │   ├── &lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;.py
│   │   ├── prod.py
│   └── utils
│       ├── config.py
│       ├── &lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;.py
│       ├── logger.py      &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志相关模块代码库&lt;/span&gt;
&lt;span&gt;│       └── session.py
├── docs
├── logs                    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志文件存储目录&lt;/span&gt;
&lt;span&gt;│   └── mofang.log
└── manage.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经过上面的改造，我们接下来就可以开始创建蓝图了。&lt;/p&gt;
&lt;h2&gt;8.蓝图初始化&lt;/h2&gt;
&lt;h3&gt;1.通过终端命令创建蓝图,并在蓝图中生成view/model/url等文件&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;1.在application下创建apps目录，apps以后专门用于保存每一个项目的蓝图,并在apps创建home蓝图目录,并在&lt;span&gt;&lt;code&gt;__init__.py&lt;/code&gt;&lt;span&gt;文件中创建蓝图对象&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;通过自定义终端命令, 创建一个自动生成蓝图目录的命令.&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/utils/commands.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;,&lt;/span&gt;&lt;/strong&gt;代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask_script &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Command, Option

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; BlueprintCommand(Command):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;蓝图生成命令&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    option_list &lt;/span&gt;=&lt;span&gt; [
        Option(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;--name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, dest=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    ]
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; run(self, name):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成蓝图名称对象的目录&lt;/span&gt;
&lt;span&gt;        os.mkdir(name)
        open(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s/__init__.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % name, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        open(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s/views.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % name, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        open(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s/models.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % name, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        with open(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s/urls.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % name, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as f:
            content &lt;/span&gt;= &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;from . import views
from application.utils import path
urlpatterns = [

]&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
            f.write(content)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;蓝图%s创建完成....&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % name)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;2.上面的命令就可以帮我们完成项目中生成蓝图的功能,接下来我们就可以直接把命令注册到manage对象中就可以使用了.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-focus-p&quot;&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span&gt;但是, 我们往后的开发中肯定还会继续的需要进行自定义终端命令,所以我们声明一个load_command的函数,让自动帮我们完成&lt;span&gt;加载注册自定义终端命令&lt;/span&gt;的过程.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-focus-p&quot;&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/utils/commands.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;strong&gt;&lt;span&gt;,&lt;/span&gt;&lt;/strong&gt;代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-focus-p&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; importlib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; import_module
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_script &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Command, Option
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; inspect

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; load_command(manager,command_path=&lt;span&gt;None):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;自动加载自定义终端命令&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; command_path &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
        command_path &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application.utils.commands&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

    module &lt;/span&gt;=&lt;span&gt; import_module(command_path)
    class_list &lt;/span&gt;=&lt;span&gt; inspect.getmembers(module,inspect.isclass)
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; class_item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; class_list:
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; issubclass(class_item[1],Command) &lt;span&gt;and&lt;/span&gt; class_item[0] != &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Command&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
            manager.add_command(class_item[&lt;/span&gt;1].name,class_item[1&lt;span&gt;])

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; BlueprintCommand(Command):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;蓝图生成命令&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    option_list &lt;/span&gt;=&lt;span&gt; [
        Option(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;--name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, dest=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    ]
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; run(self, name):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成蓝图名称对象的目录&lt;/span&gt;
&lt;span&gt;        os.mkdir(name)
        open(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s/__init__.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % name, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        open(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s/views.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % name, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        open(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s/models.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % name, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        with open(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s/urls.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % name, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as f:
            content &lt;/span&gt;= &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;from . import views
from application.utils import path
urlpatterns = [

]&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
            f.write(content)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;蓝图%s创建完成....&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % name)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;3.在项目全局引导文件&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/__init__.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;中, 调用load_command函数注册命令&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os,logging

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_script &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Manager
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_sqlalchemy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; SQLAlchemy
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_redis &lt;span&gt;import&lt;/span&gt;&lt;span&gt; FlaskRedis
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_session &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Session
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_migrate &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Migrate,MigrateCommand

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.config &lt;span&gt;import&lt;/span&gt;&lt;span&gt; load_config
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.session &lt;span&gt;import&lt;/span&gt;&lt;span&gt; init_session
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.logger &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Log
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.commands &lt;span&gt;import&lt;/span&gt;&lt;span&gt; load_command
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建终端脚本管理对象&lt;/span&gt;
manager =&lt;span&gt; Manager()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建数据库链接对象&lt;/span&gt;
db =&lt;span&gt; SQLAlchemy()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; redis链接对象&lt;/span&gt;
redis =&lt;span&gt; FlaskRedis()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Session存储对象&lt;/span&gt;
session_store =&lt;span&gt; Session()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据迁移实例对象&lt;/span&gt;
migrate =&lt;span&gt; Migrate()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志对象&lt;/span&gt;
log =&lt;span&gt; Log()

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_app(config_path):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;全局初始化&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建app应用对象&lt;/span&gt;
    app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
    app.BASE_DIR &lt;/span&gt;= os.path.dirname(os.path.dirname(os.path.abspath(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;)))

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载配置&lt;/span&gt;
    Config =&lt;span&gt; load_config(config_path)
    app.config.from_object(Config)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库初始化&lt;/span&gt;
&lt;span&gt;    db.init_app(app)
    redis.init_app(app)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储初始化&lt;/span&gt;
&lt;span&gt;    init_session(app)
    session_store.init_app(app)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据迁移初始化&lt;/span&gt;
&lt;span&gt;    migrate.init_app(app,db)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加数据迁移的命令到终端脚本工具中&lt;/span&gt;
    manager.add_command(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;db&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, MigrateCommand)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志初始化&lt;/span&gt;
    app.log =&lt;span&gt; log.init_app(app)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化终端脚本工具&lt;/span&gt;
    manager.app =&lt;span&gt; app

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注册自定义命令 ***&lt;/span&gt;
&lt;span&gt;    load_command(manager)

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; manager
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-focus-p&quot;&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;4.接下来就可以在终端下,通过命令生成蓝图目录了.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span&gt;命令:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd application/&lt;span&gt;apps
python ..&lt;/span&gt;/../manage.py blue -nhome
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1780189/202011/1780189-20201126210645129-92866108.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-focus-p&quot;&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;2.将蓝图注册到APP应用对象下&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-focus-p&quot;&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;有了蓝图以后,接下来我们就可以视图代码,模型代码,路由代码等存储到蓝图目录下了,但是我们需要&lt;span&gt;把蓝图注册到app应用对象&lt;/span&gt;下.所以我们注册蓝图这块代码也可以封装到一个函数中.让程序自动识别并注册.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span&gt;项目中可以有多个蓝图,但是有些蓝图可能并不能提供给客户端访问,所以我们需要在配置文件中声明一个蓝图注册列表, 在&lt;span&gt;&lt;code&gt;init_blueprint&lt;/code&gt;&lt;span&gt;函数中只注册配置列表的蓝图&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;1.application/settings/__init__.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-expand&quot;&gt;,代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; InitConfig():
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;项目默认初始化配置&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调试模式&lt;/span&gt;
    DEBUG =&lt;span&gt; True

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库相关配置&lt;/span&gt;
    SQLALCHEMY_DATABASE_URI = &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 动态追踪修改设置&lt;/span&gt;
    SQLALCHEMY_TRACK_MODIFICATIONS =&lt;span&gt; False
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查询时会显示原始SQL语句&lt;/span&gt;
    SQLALCHEMY_ECHO=&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Redis&lt;/span&gt;
    REDIS_URL = &lt;span&gt;&quot;&quot;&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置密钥，可以通过 base64.b64encode(os.urandom(48)) 来生成一个指定长度的随机字符串&lt;/span&gt;
    SECRET_KEY = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y58Rsqzmts6VCBRHes1Sf2DHdGJaGqPMi6GYpBS4CKyCdi42KLSs9TQVTauZMLMw&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储配置&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储方式配置&lt;/span&gt;
    SESSION_TYPE = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redis&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果设置session的生命周期是否是会话期, 为True，则关闭浏览器session就失效&lt;/span&gt;
    SESSION_PERMANENT =&lt;span&gt; False
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置session_id在浏览器中的cookie有效期&lt;/span&gt;
    PERMANENT_SESSION_LIFETIME = 24 * 60 * 60  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session 的有效期，单位是秒&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是否对发送到浏览器上session的cookie值进行加密&lt;/span&gt;
    SESSION_USE_SIGNER =&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存到redis的session数的名称前缀&lt;/span&gt;
    SESSION_KEY_PREFIX = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;session:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session保存数据到redis时启用的链接对象&lt;/span&gt;
    SESSION_REDIS = None   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用于连接redis的配置&lt;/span&gt;
&lt;span&gt;
    SESSION_REDIS_HOST &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    SESSION_REDIS_PORT &lt;/span&gt;= 6379&lt;span&gt;
    SESSION_REDIS_DB &lt;/span&gt;= 1

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调整json数据转换中文的配置&lt;/span&gt;
    JSON_AS_ASCII=&lt;span&gt;False

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志相关配置&lt;/span&gt;
    LOG_LEVEL        = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;INFO&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;              &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志输出到文件中的最低等级&lt;/span&gt;
    LOG_DIR          = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logs/0.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志存储目录&lt;/span&gt;
    LOG_MAX_BYTES    = 300 * 1024 * 1024   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 单个日志文件的存储上限[单位: b]&lt;/span&gt;
    LOG_BACKPU_COUNT = 20                  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志文件的最大备份数量&lt;/span&gt;
    LOG_NAME         = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;flask&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志器的名字&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 蓝图注册列表 ***&lt;/span&gt;
    INSTALLED_APPS =&lt;span&gt; [

    ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/settings/dev.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-expand&quot;&gt;,代码:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt;&lt;span&gt; InitConfig
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Config(InitConfig):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;项目开发环境下的配置&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    DEBUG &lt;/span&gt;=&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库&lt;/span&gt;
    SQLALCHEMY_DATABASE_URI = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql://mofang_user:mofang@127.0.0.1:3306/mofang?charset=utf8mb4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    SQLALCHEMY_ECHO &lt;/span&gt;=&lt;span&gt; True

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; redis&lt;/span&gt;
    REDIS_URL = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redis://@127.0.0.1:6379/0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储配置&lt;/span&gt;
    SESSION_REDIS_HOST = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    SESSION_REDIS_PORT &lt;/span&gt;= 6379&lt;span&gt;
    SESSION_REDIS_DB &lt;/span&gt;= 1

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志配置&lt;/span&gt;
    LOG_LEVEL        = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志输出到文件中的最低等级&lt;/span&gt;
    LOG_DIR          = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/logs/mofang.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志存储目录&lt;/span&gt;
    LOG_MAX_BYTES    = 300 * 1024 * 1024   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 单个日志文件的存储上限[单位: b]&lt;/span&gt;
    LOG_BACKPU_COUNT = 20                  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志文件的最大备份数量&lt;/span&gt;
    LOG_NAME = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mofang&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;                    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志器名称&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注册蓝图  ***&lt;/span&gt;
    INSTALLED_APPS =&lt;span&gt; [ 
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application.apps.home&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.在init_blueprint函数中,针对注册的蓝图列表注册到app应用对象里面,&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/utils/__init__.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;strong&gt;&lt;span&gt;,&lt;/span&gt;&lt;/strong&gt;代码:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_blueprint(app):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;自动注册蓝图&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    blueprint_path_list &lt;/span&gt;= app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;INSTALLED_APPS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; blueprint_path &lt;span&gt;in&lt;/span&gt;&lt;span&gt; blueprint_path_list:
        blueprint_name &lt;/span&gt;= blueprint_path.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)[-1&lt;span&gt;]
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自动创建蓝图对象&lt;/span&gt;
        blueprint =&lt;span&gt; Blueprint(blueprint_name,blueprint_path)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注册蓝图对象到app应用对象中&lt;/span&gt;
        app.register_blueprint(blueprint,url_prefix=&lt;span&gt;&quot;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;3.项目全局引导文件中, 调用&lt;span&gt;&lt;code&gt;init_blueprint&lt;/code&gt;&lt;span&gt;方法, 自动注册蓝图.&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/__init__.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;,代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os,logging

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_script &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Manager
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_sqlalchemy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; SQLAlchemy
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_redis &lt;span&gt;import&lt;/span&gt;&lt;span&gt; FlaskRedis
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_session &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Session
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask_migrate &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Migrate,MigrateCommand

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils &lt;span&gt;import&lt;/span&gt;&lt;span&gt; init_blueprint
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.config &lt;span&gt;import&lt;/span&gt;&lt;span&gt; load_config
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.session &lt;span&gt;import&lt;/span&gt;&lt;span&gt; init_session
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.logger &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Log
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils.commands &lt;span&gt;import&lt;/span&gt;&lt;span&gt; load_command
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建终端脚本管理对象&lt;/span&gt;
manager =&lt;span&gt; Manager()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建数据库链接对象&lt;/span&gt;
db =&lt;span&gt; SQLAlchemy()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; redis链接对象&lt;/span&gt;
redis =&lt;span&gt; FlaskRedis()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Session存储对象&lt;/span&gt;
session_store =&lt;span&gt; Session()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据迁移实例对象&lt;/span&gt;
migrate =&lt;span&gt; Migrate()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志对象&lt;/span&gt;
log =&lt;span&gt; Log()

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_app(config_path):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;全局初始化&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建app应用对象&lt;/span&gt;
    app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
    app.BASE_DIR &lt;/span&gt;= os.path.dirname(os.path.dirname(os.path.abspath(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;)))

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载配置&lt;/span&gt;
    Config =&lt;span&gt; load_config(config_path)
    app.config.from_object(Config)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库初始化&lt;/span&gt;
&lt;span&gt;    db.init_app(app)
    redis.init_app(app)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储初始化&lt;/span&gt;
&lt;span&gt;    init_session(app)
    session_store.init_app(app)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据迁移初始化&lt;/span&gt;
&lt;span&gt;    migrate.init_app(app,db)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加数据迁移的命令到终端脚本工具中&lt;/span&gt;
    manager.add_command(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;db&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, MigrateCommand)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志初始化&lt;/span&gt;
    app.log =&lt;span&gt; log.init_app(app)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 蓝图注册 ***&lt;/span&gt;
&lt;span&gt;    init_blueprint(app)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化终端脚本工具&lt;/span&gt;
    manager.app =&lt;span&gt; app

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注册自定义命令&lt;/span&gt;
&lt;span&gt;    load_command(manager)

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; manager
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 class=&quot;md-focus-p&quot;&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;3.注册路由和视图之间的关系&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;1.注册子路由和视图之间的关系&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-focus-p&quot;&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;注册了蓝图对象以后,蓝图下面的视图方法和视图对应的路由关系也要进行注册!&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span&gt;所以, 在蓝图home下面的urls.py文件中,通过path方法把url地址和视图方法进行处理成字典,然后把字典作为成员返回到变量urlpatterns列表中.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;code&gt;1.&lt;strong&gt;&lt;span&gt;application/utils/__init__.py&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;&lt;span class=&quot;md-expand&quot;&gt;,生成path函数,代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Blueprint
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; importlib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; import_module
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; path(rule,func_view):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把蓝图下视图和路由之间的映射关系处理成字典结构，方便后面注册蓝图的时候，直接传参&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rule&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:rule,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;view_func&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:func_view}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;2.在蓝图下的urls.py中,注册视图和路由的关系,&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;home/urls.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;,&lt;/span&gt;&lt;/strong&gt;代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt;&lt;span&gt; views
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; application.utils &lt;span&gt;import&lt;/span&gt;&lt;span&gt; path
urlpatterns &lt;/span&gt;=&lt;span&gt; [
    path(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,views.index),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;视图代码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.在init_blueprint初始化蓝图的函数中, 生成蓝图对象以后自动加载并注册蓝图和视图&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/utils/__init__.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;strong&gt;&lt;span&gt;,&lt;/span&gt;&lt;/strong&gt;代码:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Blueprint
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; importlib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; import_module
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; path(rule,func_view):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把蓝图下视图和路由之间的映射关系处理成字典结构，方便后面注册蓝图的时候，直接传参&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rule&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:rule,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;view_func&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:func_view}

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_blueprint(app):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;自动注册蓝图&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    blueprint_path_list &lt;/span&gt;= app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;INSTALLED_APPS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; blueprint_path &lt;span&gt;in&lt;/span&gt;&lt;span&gt; blueprint_path_list:
        blueprint_name &lt;/span&gt;= blueprint_path.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)[-1&lt;span&gt;]
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自动创建蓝图对象&lt;/span&gt;
        blueprint =&lt;span&gt; Blueprint(blueprint_name,blueprint_path)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 蓝图自动注册和绑定视图和子路由&lt;/span&gt;
        url_module = import_module(blueprint_path+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.urls&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载蓝图下的子路由文件&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; url &lt;span&gt;in&lt;/span&gt; url_module.urlpatterns: &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 遍历子路由中的所有路由关系&lt;/span&gt;
            blueprint.add_url_rule(**url)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注册到蓝图下&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注册蓝图对象到app应用对象中&lt;/span&gt;
        app.register_blueprint(blueprint,url_prefix=&lt;span&gt;&quot;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 class=&quot;md-focus-p&quot;&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;2.注册总路由和蓝图之间的关系&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-focus-p&quot;&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;4.此时, 运行项目,就允许蓝图中视图通过url地址提供给客户端访问了.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span&gt;上面蓝图注册到app时, 没有设置url_prefix路由前缀, 接下来我们可以单独设置一个总路由&lt;span&gt;&lt;code&gt;application/urls.py&lt;/code&gt;&lt;span&gt;,进行&lt;span&gt;路由前缀的设置.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;在项目默认配置文件中&lt;strong&gt;&lt;span&gt;,&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/settings/__init__.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;,&lt;/span&gt;&lt;/strong&gt;新增总路由的配置项&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; InitConfig():
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;项目默认初始化配置&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调试模式&lt;/span&gt;
    DEBUG =&lt;span&gt; True

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库相关配置&lt;/span&gt;
    SQLALCHEMY_DATABASE_URI = &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 动态追踪修改设置&lt;/span&gt;
    SQLALCHEMY_TRACK_MODIFICATIONS =&lt;span&gt; False
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查询时会显示原始SQL语句&lt;/span&gt;
    SQLALCHEMY_ECHO=&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Redis&lt;/span&gt;
    REDIS_URL = &lt;span&gt;&quot;&quot;&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置密钥，可以通过 base64.b64encode(os.urandom(48)) 来生成一个指定长度的随机字符串&lt;/span&gt;
    SECRET_KEY = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y58Rsqzmts6VCBRHes1Sf2DHdGJaGqPMi6GYpBS4CKyCdi42KLSs9TQVTauZMLMw&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储配置&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session存储方式配置&lt;/span&gt;
    SESSION_TYPE = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redis&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果设置session的生命周期是否是会话期, 为True，则关闭浏览器session就失效&lt;/span&gt;
    SESSION_PERMANENT =&lt;span&gt; False
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置session_id在浏览器中的cookie有效期&lt;/span&gt;
    PERMANENT_SESSION_LIFETIME = 24 * 60 * 60  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session 的有效期，单位是秒&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是否对发送到浏览器上session的cookie值进行加密&lt;/span&gt;
    SESSION_USE_SIGNER =&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存到redis的session数的名称前缀&lt;/span&gt;
    SESSION_KEY_PREFIX = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;session:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session保存数据到redis时启用的链接对象&lt;/span&gt;
    SESSION_REDIS = None   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用于连接redis的配置&lt;/span&gt;
&lt;span&gt;
    SESSION_REDIS_HOST &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    SESSION_REDIS_PORT &lt;/span&gt;= 6379&lt;span&gt;
    SESSION_REDIS_DB &lt;/span&gt;= 1

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调整json数据转换中文的配置&lt;/span&gt;
    JSON_AS_ASCII=&lt;span&gt;False

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志相关配置&lt;/span&gt;
    LOG_LEVEL        = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;INFO&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;              &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志输出到文件中的最低等级&lt;/span&gt;
    LOG_DIR          = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logs/0.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志存储目录&lt;/span&gt;
    LOG_MAX_BYTES    = 300 * 1024 * 1024   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 单个日志文件的存储上限[单位: b]&lt;/span&gt;
    LOG_BACKPU_COUNT = 20                  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志文件的最大备份数量&lt;/span&gt;
    LOG_NAME         = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;flask&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志器的名字&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 蓝图注册列表&lt;/span&gt;
    INSTALLED_APPS =&lt;span&gt; [

    ]


    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 总路由 ***&lt;/span&gt;
    URL_PATH = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application.urls&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;5.创建总路由文件并注册蓝图和路由前缀的关系, &lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/urls.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;,&lt;/span&gt;&lt;/strong&gt;代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; application.utils &lt;span&gt;import&lt;/span&gt;&lt;span&gt; include
urlpatterns &lt;/span&gt;=&lt;span&gt; [
    include(&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;home.urls&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;6.接下来,在&lt;span&gt;&lt;code&gt;init_blueprint&lt;/code&gt;&lt;span&gt;蓝图初始化函数中新增判断识别路由前缀的代码; 同时, 把路由前缀和蓝图映射关系的处理代码封装成&lt;span&gt;&lt;code&gt;include&lt;/code&gt;&lt;span&gt;方法,方便以后需求变化时可以直接调整.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;code&gt;application/utils/__init__.py&lt;/code&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;strong&gt;,&lt;/strong&gt;代码:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Blueprint
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; importlib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; import_module
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; path(rule,func_view):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把蓝图下视图和路由之间的映射关系处理成字典结构，方便后面注册蓝图的时候，直接传参&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rule&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:rule,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;view_func&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:func_view}

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; include(url_prefix, blueprint_path):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;把路由前缀和蓝图进行关系映射&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url_prefix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:url_prefix,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blueprint_path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:blueprint_path}

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_blueprint(app):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;自动注册蓝图&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    blueprint_path_list &lt;/span&gt;= app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;INSTALLED_APPS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; blueprint_path &lt;span&gt;in&lt;/span&gt;&lt;span&gt; blueprint_path_list:
        blueprint_name &lt;/span&gt;= blueprint_path.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)[-1&lt;span&gt;]
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自动创建蓝图对象&lt;/span&gt;
        blueprint =&lt;span&gt; Blueprint(blueprint_name,blueprint_path)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 蓝图自动注册和绑定视图和子路由&lt;/span&gt;
        url_module = import_module(blueprint_path+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.urls&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载蓝图下的子路由文件&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; url &lt;span&gt;in&lt;/span&gt; url_module.urlpatterns: &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 遍历子路由中的所有路由关系&lt;/span&gt;
            blueprint.add_url_rule(**url)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注册到蓝图下&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取总路由文件&lt;/span&gt;
        url_path = app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;URL_PATH&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        urlpatterns &lt;/span&gt;= import_module(url_path).urlpatterns  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载蓝图下的子路由文件&lt;/span&gt;
        url_prefix = &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 蓝图路由前缀&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; urlpattern &lt;span&gt;in&lt;/span&gt;&lt;span&gt; urlpatterns:
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; urlpattern[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blueprint_path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] == blueprint_name+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.urls&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                url_prefix &lt;/span&gt;= urlpattern[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url_prefix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注册蓝图对象到app应用对象中,  url_prefix 蓝图的路由前缀&lt;/span&gt;
        app.register_blueprint(blueprint,url_prefix=url_prefix)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4.自动注册蓝图下的所有模型&lt;/h3&gt;
&lt;p&gt;1.在蓝图下的&lt;strong&gt;&lt;span&gt;models.py&lt;/span&gt;&lt;/strong&gt;中声明模型,例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; application &lt;span&gt;import&lt;/span&gt;&lt;span&gt; db
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; User(db.Model):
    &lt;/span&gt;&lt;span&gt;__tablename__&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mf_user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    id &lt;/span&gt;= db.Column(db.Integer, primary_key=True, comment=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;主键ID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    name &lt;/span&gt;= db.Column(db.String(255), unique=True, comment=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;账户名&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    password &lt;/span&gt;= db.Column(db.String(255), comment=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;登录密码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    ip_address &lt;/span&gt;= db.Column(db.String(255), index=True, comment=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;登录IP&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__repr__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.然后在终端下执行数据迁移&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd ../&lt;span&gt;..
python manage.py db init
python manage.py db migrate &lt;/span&gt;-m &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.上面的命令执行以后, 我们可以发现模型根本被flask进行识别到.所以我们需要把模型注册到flask项目中.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;application/utils/__init__.py&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;,代码:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Blueprint
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; importlib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; import_module
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; path(rule,func_view):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把蓝图下视图和路由之间的映射关系处理成字典结构，方便后面注册蓝图的时候，直接传参&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rule&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:rule,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;view_func&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:func_view}

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; include(url_prefix, blueprint_path):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;把路由前缀和蓝图进行关系映射&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url_prefix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:url_prefix,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blueprint_path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:blueprint_path}

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_blueprint(app):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;自动注册蓝图&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    blueprint_path_list &lt;/span&gt;= app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;INSTALLED_APPS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; blueprint_path &lt;span&gt;in&lt;/span&gt;&lt;span&gt; blueprint_path_list:
        blueprint_name &lt;/span&gt;= blueprint_path.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)[-1&lt;span&gt;]
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自动创建蓝图对象&lt;/span&gt;
        blueprint =&lt;span&gt; Blueprint(blueprint_name,blueprint_path)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 蓝图自动注册和绑定视图和子路由&lt;/span&gt;
        url_module = import_module(blueprint_path+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.urls&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载蓝图下的子路由文件&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; url &lt;span&gt;in&lt;/span&gt; url_module.urlpatterns: &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 遍历子路由中的所有路由关系&lt;/span&gt;
            blueprint.add_url_rule(**url)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注册到蓝图下&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取总路由文件&lt;/span&gt;
        url_path = app.config.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;URL_PATH&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        urlpatterns &lt;/span&gt;= import_module(url_path).urlpatterns  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载蓝图下的子路由文件&lt;/span&gt;
        url_prefix = &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 蓝图路由前缀&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; urlpattern &lt;span&gt;in&lt;/span&gt;&lt;span&gt; urlpatterns:
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; urlpattern[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blueprint_path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] == blueprint_name+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.urls&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                url_prefix &lt;/span&gt;= urlpattern[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url_prefix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注册模型 ***&lt;/span&gt;
        import_module(blueprint_path+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.models&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注册蓝图对象到app应用对象中,  url_prefix 蓝图的路由前缀&lt;/span&gt;
        app.register_blueprint(blueprint,url_prefix=url_prefix)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;项目能自动加载总路由和蓝图路由以后的项目目录结构,如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
项目根目录/&lt;span&gt;
├── application&lt;/span&gt;/            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目主要逻辑代码保存目录&lt;/span&gt;
|   ├── settings/           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目配置存储目录&lt;/span&gt;
│   │   ├ &lt;span&gt;__init__&lt;/span&gt;.py       &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目默认初始化配置文件&lt;/span&gt;
│   │   ├ dev.py            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 开发阶段的配置文件&lt;/span&gt;
│   │   └ prod.py           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生产阶段的配置文件&lt;/span&gt;
│   ├── &lt;span&gt;__init__&lt;/span&gt;.py         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目初始化全局引导文件&lt;/span&gt;
|   ├── utils/              &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目工具类库目录&lt;/span&gt;
│   │   ├ commands.py       &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自定义命令和加载命令的相关函数&lt;/span&gt;
│   │   ├ config.py         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目配置加载的辅助函数&lt;/span&gt;
│   │   ├ session.py        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目存储session相关的函数&lt;/span&gt;
│   │   └ logger.py         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 日志模块&lt;/span&gt;
│   ├── apps/               &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存项目中所有蓝图的存储目录&lt;/span&gt;
│   │   ├── home            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 蓝图目录【这里是举例而已】&lt;/span&gt;
│   │   │   ├── &lt;span&gt;__init__&lt;/span&gt;.py &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 蓝图的初始化文件&lt;/span&gt;
│   │   │   ├── urls.py     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 蓝图的子路由文件&lt;/span&gt;
│   │   │   ├── models.py   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 蓝图的模型文件&lt;/span&gt;
│   │   │   └── views.py    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 蓝图的视图文件&lt;/span&gt;
│   │   ├── &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;.py
│   └── urls.py              &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 总路由&lt;/span&gt;
├── manage.py               &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 项目的终端管理脚本文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 26 Nov 2020 14:33:00 +0000</pubDate>
<dc:creator>iR-Poke</dc:creator>
<og:description>目录 1.准备工作 2.创建项目启动文件manage.py 3.构建全局初始化函数并在函数内创建app应用对象 4.通过终端脚本启动项目 5.项目加载配置 6.数据库初始化 1.SQLAlchemy初</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/libolun/p/14045041.html</dc:identifier>
</item>
<item>
<title>Python正则表达式大全 - Huny</title>
<link>http://www.cnblogs.com/huny/p/14040416.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huny/p/14040416.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，该模式描述在搜索文本时要匹配的一个或多个字符串。&lt;br/&gt;上面都是官方的说明，博主自己的理解是（仅供参考）：通过事先规定好一些特殊字符的匹配规则，然后利用这些字符进行组合来匹配各种复杂的字符串场景。比如现在的爬虫和数据分析，字符串校验等等都需要用到正则表达式来处理数据。&lt;br/&gt;python的正则表达式则是re模块了。&lt;br/&gt;re 模块使 Python 语言拥有全部的正则表达式功能。&lt;br/&gt;re 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。&lt;/p&gt;
&lt;h2 id=&quot;基本语法&quot;&gt;基本语法&lt;/h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;a, X, 9, &amp;lt;&lt;/td&gt;
&lt;td&gt;普通字符完全匹配。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;匹配任何单个字符，除了换行符’\n‘&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;匹配“单词”字符：字母或数字或下划线[a-zA-Z0-9_]。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;td&gt;匹配任何非字词。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;字词与非字词之间的界限&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;匹配单个空格字符 - 空格，换行符，返回，制表符&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;\S&lt;/td&gt;
&lt;td&gt;匹配任何非空格字符。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;\t, \n, \r&lt;/td&gt;
&lt;td&gt;制表符，换行符，退格符&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;十进制数[0-9]&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;匹配字符串的开头&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;匹配字符串的末尾&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;td&gt;抑制字符的“特殊性”，也叫转义字符。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;match函数&quot;&gt;match函数&lt;/h3&gt;
&lt;p&gt;只从字符串的最开始与pattern进行匹配&lt;br/&gt;下面是函数的语法 -&lt;br/&gt;re.match(pattern, string, flags = 0)&lt;br/&gt;这里是参数的描述 -&lt;br/&gt;pattern - 这是要匹配的正则表达式。&lt;br/&gt;string - 这是字符串，它将被搜索用于匹配字符串开头的模式。&lt;br/&gt;flags - 可以使用按位OR(|)指定不同的标志。 这些是修饰符，如下表所列。&lt;br/&gt;re.match 函数在成功时返回匹配对象，失败时返回None。使用match(num)或groups()函数匹配对象来获取匹配的表达式。&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;匹配对象&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;group(num = 0)&lt;/td&gt;
&lt;td&gt;此方法返回整个匹配(或特定子组num)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;groups()&lt;/td&gt;
&lt;td&gt;此方法返回一个元组中的所有匹配子组(如果没有，则返回为None)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;示例&quot;&gt;示例&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;#未从初始位置匹配，会返回None
import re

line = 'i can speak good english'
matchObj = re.match(r'\s(\w*)\s(\w*).*',line)
if matchObj:
    print('matchObj.group() :',matchObj.group())
    print('matchObj.group() :',matchObj.group(1))
    print('matchObj.group() :',matchObj.group(2))
    print('matchObj.group() :',matchObj.group(3))
else:
    print('no match!')
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1510016/202011/1510016-20201126205009540-1360893702.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#从初始位置开始匹配
import re

line = 'i can speak good english'
matchObj = re.match(r'(i)\s(\w*)\s(\w*).*',line)
if matchObj:
    print('matchObj.group() :',matchObj.group())
    print('matchObj.group() :',matchObj.group(1))
    print('matchObj.group() :',matchObj.group(2))
    print('matchObj.group() :',matchObj.group(3))
else:
    print('no match!')
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1510016/202011/1510016-20201126205137322-448645017.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;search函数&quot;&gt;search函数&lt;/h3&gt;
&lt;p&gt;与match()工作的方式一样，但是search()不是从最开始匹配的，而是从任意位置查找第一次匹配的内容。&lt;br/&gt;下面是这个函数的语法 -&lt;br/&gt;re.match(pattern, string, flags = 0)&lt;/p&gt;
&lt;p&gt;这里是参数的描述 -&lt;br/&gt;pattern - 这是要匹配的正则表达式。&lt;br/&gt;string - 这是字符串，它将被搜索用于匹配字符串开头的模式。&lt;br/&gt;flags - 可以使用按位OR(|)指定不同的标志。 这些是修饰符，如下表所列。&lt;br/&gt;re.search函数在成功时返回匹配对象，否则返回None。使用match对象的group(num)或groups()函数来获取匹配的表达式。&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;匹配对象&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;group(num = 0)&lt;/td&gt;
&lt;td&gt;此方法返回整个匹配(或特定子组num)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;groups()&lt;/td&gt;
&lt;td&gt;此方法返回一个元组中的所有匹配子组(如果没有，则返回为None)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;示例-2&quot;&gt;示例&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;import re

line = 'i can speak good english'
matchObj = re.search('(.*) (.*?) (.*)',line)
if matchObj:
    print('matchObj.group() :',matchObj.group())
    print('matchObj.group() :',matchObj.group(1))
    print('matchObj.group() :',matchObj.group(2))
    print('matchObj.group() :',matchObj.group(3))
else:
    print('no match!')
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;sub函数&quot;&gt;sub()函数&lt;/h3&gt;
&lt;p&gt;使用正则表达式re模块中的最重要的之一是sub。&lt;br/&gt;模块&lt;br/&gt;re.sub(pattern, repl, string, max=0)&lt;/p&gt;
&lt;p&gt;此方法使用repl替换所有出现在RE模式的字符串，替换所有出现，除非提供max。此方法返回修改的字符串。&lt;/p&gt;
&lt;h4 id=&quot;示例-3&quot;&gt;示例&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;import re

line = 'i can speak good english'
speak = re.sub(r'can','not',line)
print(speak)
speak1 = re.sub(r'\s','',line) #替换所有空格
print(speak1)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;特殊语法示例&quot;&gt;特殊语法示例&lt;/h2&gt;
&lt;h3 id=&quot;字符类&quot;&gt;字符类&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;[Pp]ython&lt;/td&gt;
&lt;td&gt;匹配“Python”或“python”&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;rub[ye]&lt;/td&gt;
&lt;td&gt;匹配“ruby”或“rube”&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;[aeiou]&lt;/td&gt;
&lt;td&gt;匹配任何一个小写元音&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;[0-9]&lt;/td&gt;
&lt;td&gt;匹配任何数字; 如[0123456789]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;[a-z]&lt;/td&gt;
&lt;td&gt;匹配任何小写ASCII字母&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;[A-Z]&lt;/td&gt;
&lt;td&gt;匹配任何大写的ASCII字母&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;[a-zA-Z0-9]&lt;/td&gt;
&lt;td&gt;匹配上述任何一个&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;[^aeiou]&lt;/td&gt;
&lt;td&gt;匹配除小写元音之外的任何东西&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;[^0-9]&lt;/td&gt;
&lt;td&gt;匹配数字以外的任何东西&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;特殊字符类&quot;&gt;特殊字符类&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;匹配除换行符以外的任何字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;匹配数字：[0-9]&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;\D&lt;/td&gt;
&lt;td&gt;匹配非数字：[^0-9]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;匹配空格字符：[\t\r\n\f]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;\S&lt;/td&gt;
&lt;td&gt;匹配非空格：[^\t\r\n\f]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;匹配单字字符： [A-Za-z0-9_]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;td&gt;匹配非单字字符： [A-Za-z0-9_]&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;重复匹配&quot;&gt;重复匹配&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;ruby?&lt;/td&gt;
&lt;td&gt;匹配“rub”或“ruby”：y是可选的&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;ruby*&lt;/td&gt;
&lt;td&gt;匹配“rub”加上0个以上的y&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;ruby+&lt;/td&gt;
&lt;td&gt;匹配“rub”加上1个或更多的y&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;\d{3}&lt;/td&gt;
&lt;td&gt;完全匹配3位数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;\d{3,}&lt;/td&gt;
&lt;td&gt;匹配3位或更多位数字&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;\d{3,5}&lt;/td&gt;
&lt;td&gt;匹配3，4或5位数&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;非贪婪重复&quot;&gt;非贪婪重复&lt;/h3&gt;
&lt;p&gt;这匹配最小的重复次数 -&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;lt;.*&amp;gt;&lt;/td&gt;
&lt;td&gt;贪婪重复：匹配“ perl&amp;gt;”&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&amp;lt;.*?&amp;gt;&lt;/td&gt;
&lt;td&gt;非贪婪重复：在“ perl”中匹配“”&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;用圆括号分组&quot;&gt;用圆括号分组&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;\D\d+&lt;/td&gt;
&lt;td&gt;没有分组：+重复\d&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;(\D\d)+&lt;/td&gt;
&lt;td&gt;分组：+重复\D\d对&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;([Pp]ython(,)?)+&lt;/td&gt;
&lt;td&gt;匹配“Python”，“Python，python，python”等&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;反向引用&quot;&gt;反向引用&lt;/h3&gt;
&lt;p&gt;这与以前匹配的组再次匹配 -&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;([Pp])ython&amp;amp;\1ails&lt;/td&gt;
&lt;td&gt;匹配python和pails或Python和Pails&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;(['&quot;])[^\1]*\1&lt;/td&gt;
&lt;td&gt;单引号或双引号字符串。\1匹配第一个分组匹配。 \2匹配任何第二个分组匹配等&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;python&lt;/td&gt;
&lt;td&gt;perl&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;rub(y&lt;/td&gt;
&lt;td&gt;le)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Python(!+&lt;/td&gt;
&lt;td&gt;?)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;锚点&quot;&gt;锚点&lt;/h3&gt;
&lt;p&gt;这需要指定匹配位置。&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;^Python&lt;/td&gt;
&lt;td&gt;在字符串或内部行的开头匹配“Python”&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Python$&lt;/td&gt;
&lt;td&gt;在字符串或内部行的结尾匹配“Python”&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;\APython&lt;/td&gt;
&lt;td&gt;在字符串的开头匹配“Python”&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Python\Z&lt;/td&gt;
&lt;td&gt;在字符串的末尾匹配“Python”&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;\bPython\b&lt;/td&gt;
&lt;td&gt;在字词的边界匹配“Python”&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;\brub\B&lt;/td&gt;
&lt;td&gt;\B是非字词边界：在“rube”和“ruby”中匹配“rub”，而不是单独匹配&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Python(?=!)&lt;/td&gt;
&lt;td&gt;匹配“Python”，如果跟着感叹号。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Python(?!!)&lt;/td&gt;
&lt;td&gt;匹配“Python”，如果没有感叹号后面。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;带括号的特殊语法&quot;&gt;带括号的特殊语法&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;R(?#comment)&lt;/td&gt;
&lt;td&gt;匹配“R”。其余的都是注释&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;R(?i)uby&lt;/td&gt;
&lt;td&gt;匹配“uby”时不区分大小写&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;R(?i:uby)&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;rub(?:yle))&lt;/td&gt;
&lt;td&gt;仅组合而不创建\1反向引用&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Thu, 26 Nov 2020 14:12:00 +0000</pubDate>
<dc:creator>Huny</dc:creator>
<og:description>##前言 正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/huny/p/14040416.html</dc:identifier>
</item>
<item>
<title>自己动手实现java数据结构（九） 跳表 - 小熊餐馆</title>
<link>http://www.cnblogs.com/xiaoxiongcanguan/p/14032756.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoxiongcanguan/p/14032756.html</guid>
<description>&lt;p&gt;　　在之前关于数据结构的博客中已经介绍过两种最基础的数据结构：基于连续内存空间的向量(线性表)和基于链式节点结构的链表。&lt;/p&gt;
&lt;p&gt;　　有序的向量可以通过二分查找以logn对数复杂度完成随机查找，但由于插入/删除元素时可能导致内部数组内整体数据的平移复制，导致随机插入/删除的效率较低。而普通的一维链表结构虽然可以做到高效的插入/删除元素(只是关联的节点拓扑结构改变)，但是在随机查找时却效率较低，因为其只能从头/尾节点顺序的进行遍历才能找到对应节点。&lt;/p&gt;
&lt;p&gt;　　计算机科学家发明了能够兼具向量与链表优点的平衡二叉搜索树(&lt;strong&gt;B&lt;/strong&gt;alance &lt;strong&gt;B&lt;/strong&gt;inary &lt;strong&gt;S&lt;/strong&gt;earch &lt;strong&gt;T&lt;/strong&gt;ree &lt;strong&gt;BBST&lt;/strong&gt;)，这其中红黑树是平均性能最高，也最复杂的一种BBST。&lt;/p&gt;
&lt;p&gt;　　正是因为高性能的平衡二叉树过于复杂，使得计算机科学家另辟蹊径，发明了被称为&lt;strong&gt;跳表(Skip List)&lt;/strong&gt;的数据结构。跳表通过建立具有层次结构的索引节点，解决了普通链表无法进行二分查找的缺陷。跳表是基于链表的，因此其插入和删除效率和链表一样优秀；而由于索引节点的引入，也使得跳表可以以类似二分查找的形式进行特定元素的搜索，其查找性能也达到了O(logn)的对数复杂度，和有序向量以及平衡二叉树查询渐进时间复杂度一致。&lt;/p&gt;
&lt;p&gt;　　总的来说，跳表是一个平均性能很优秀，结构相对简单的数据结构，在redis以及LevelDB、RocksDB等KV键值对数据库中被广泛使用。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;跳表查询：&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;跳表是一个拥有多层索引节点的链表，最低层是一个链表，保存着全部的原始数据节点。而索引节点是建立在最底层链表节点之上的，且从下到上索引节点的数量逐渐稀疏。&lt;/p&gt;
&lt;p&gt;　　在查询时，从最高层开始以&lt;strong&gt;类似二分查找&lt;/strong&gt;的方式&lt;strong&gt;跳跃&lt;/strong&gt;着的逐步向下层逼近查找最终的目标节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳表结构示意图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1506329/202011/1506329-20201126160722345-192232102.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;跳表插入：&lt;/h2&gt;
&lt;p&gt;　　了解了跳表的结构，以及其能够高效随机查询的原理之后。很自然的会想到一个问题，跳表的索引节点是如何维护的？换句话说，当插入/删除节点时跳表的索引结构是如何变化的？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　要想保证跳表高效的查询效率，需要令跳表相邻的上下层节点的数量之比大致为1:2，且同一层索引节点的分布尽量均匀(二分查找)。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　一种自然的想法是每次插入新节点时，详细的检查每一层的索引节点，精心维护相邻水平层索引节点1:2的数量，并控制节点排布的稀疏程度(必要时甚至可以重建整个索引)。但这样使得跳表的插入性能大大降低，所以实际上跳表并没有选择这种容易想到但低效方式维护索引。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;在跳表中，通过类似丢硬币的方式，以概率来决定索引节点是否需要被创建。具体的说，每当插入一个新节点时，根据某种概率算法计算是否需要为其建立上一层的索引节点。如果判断需要建立，那么再接着进行一次基于概率的判断，如果为真则在更高一层也建立索引节点，并循环往复。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　假设概率算法为真的数学期望为1/2，则插入新节点时有50%(1/2)的概率建立第一层的索引节点，25%(1/2^2)的概率建立第两层的索引节点，12.5%(1/2^3)的概率建立第三层的索引节点，以此类推。这种基于概率的索引节点建立方式，从宏观的数学期望上也能保证相邻上下层d的索引节点个数之比为1:2。同时由于插入节点数值的大小和插入顺序都是完全随机的，因此从期望上来说，同一水平层索引节点的分布也是大致均匀的。&lt;/p&gt;
&lt;p&gt;　　总的来说，插入新节点时基于概率的索引建立算法插入效率相对来说非常高，虽然在极端情况下会导致索引节点上下、水平的分布不均，但依然是非常优秀的实现。同时，可以通过控制概率算法的数学期望，灵活的调整跳表的空间占用与查询效率的取舍(&lt;strong&gt;概率算法为真的数学期望从1/2降低到1/4时，建立上级索引的概率降低，索引的密度下降，因此其随机查询效率降低，但其索引节点将会大大减少以节约空间，跳表的这一特性在对空间占用敏感的内存数据库应用中是很有价值的&lt;/strong&gt;)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳表插入节点示意图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1506329/202011/1506329-20201126163255198-428307215.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;跳表删除：&lt;/h2&gt;
&lt;p&gt;　　在理解了跳表插入的原理后，跳表的删除就很好理解了。当最底层的数据节点被删除时，只需要将其之上的所有索引节点一并删除即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳表删除节点示意图：　&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1506329/202011/1506329-20201126164741850-643259762.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　下面介绍跳表的实现细节。本篇博客的跳表SkipListMap是用java实现的，为了令代码更容易理解，在一些地方选择了效率相对较低，但更容易理解的实现。&lt;/p&gt;
&lt;h2&gt;跳表节点实现&lt;/h2&gt;
&lt;p&gt;　　为了令整个跳表的实现更加简单，局别与jdk的&lt;strong&gt;ConcurrentSkipListMap&lt;/strong&gt;。当前版本跳表的定义的节点结构既用于最底层的数据节点，也用于上层的索引节点；且节点持有上、下、左、右关联的四个节点的引用。在每一水平层引入了左右两个哨兵节点，通过节点中的NodeType枚举区分哨兵节点与普通的索引/数据节点。&lt;/p&gt;
&lt;p&gt;　　为了能够在后续介绍的插入/删除等操作中，更加简单的定位到临近的节点，简化代码的理解难度。&lt;strong&gt;相比jdk、redis等工程化的高性能跳表实现，当前版本实现的跳表节点冗余了一些不必要的字段属性以及额外的哨兵节点，额外的浪费了一些空间，但跳表实现的核心思路是一致的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳表Node节点定义：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Node&amp;lt;K,V&amp;gt; &lt;span&gt;implements&lt;/span&gt; EntryNode&amp;lt;K,V&amp;gt;&lt;span&gt;{
        K key;
        V value;
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt;&lt;span&gt; left;
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt;&lt;span&gt; right;
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt;&lt;span&gt; up;
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt;&lt;span&gt; down;

        NodeType nodeType;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Node(K key,V value) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.key =&lt;span&gt; key;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.nodeType =&lt;span&gt; NodeType.NORMAL;
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Node() {
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Node(NodeType nodeType) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.nodeType =&lt;span&gt; nodeType;
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 将一个节点作为&quot;当前节点&quot;的&quot;右节点&quot; 插入链表
         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; node  需要插入的节点
         * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; linkAsRight(Node&amp;lt;K,V&amp;gt;&lt;span&gt; node){
            &lt;/span&gt;&lt;span&gt;// &lt;/span&gt;&lt;span&gt;先设置新增节点的 左右节点&lt;/span&gt;
            node.left = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
            node.right &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.right;

            &lt;/span&gt;&lt;span&gt;// &lt;/span&gt;&lt;span&gt;将新增节点插入 当前节点和当前节点的左节点之间&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.right.left =&lt;span&gt; node;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.right =&lt;span&gt; node;
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 将&quot;当前节点&quot;从当前水平链表移除(令其左右节点直接牵手)
         * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; unlinkSelfHorizontal(){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 令当前链表的 左节点和右节点建立关联&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.left.right = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.right;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 令当前链表的 右节点和左节点建立关联&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.right.left = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.left;
        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 将&quot;当前节点&quot;从当前垂直链表移除(令其上下节点直接牵手)
         * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; unlinkSelfVertical(){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 令当前链表的 左节点和右节点建立关联&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.up.down = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.down;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 令当前链表的 右节点和左节点建立关联&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.down.up = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.up;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.key != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;{&quot; +
                        &quot;key=&quot; + key +
                        &quot;,value=&quot; + value +
                        '}'&lt;span&gt;;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;{&quot; +
                        &quot;nodeType=&quot; + nodeType +
                        '}'&lt;span&gt;;
            }
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; K getKey() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.key;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; V getValue() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setValue(V value) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NodeType枚举：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; NodeType{
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 普通节点
         * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        NORMAL,

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 左侧哨兵节点
         * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        LEFT_SENTINEL,

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 右侧哨兵节点
         * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        RIGHT_SENTINEL,
        ;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;跳表的基础结构&lt;/h2&gt;
&lt;p&gt;　　跳表是一个能够支持高效增删改查、平均性能很高的数据结构，对标的是红黑树为首的平衡二叉搜索树。因此在我们参考jdk的实现，跳表和之前系列博客中的&lt;a href=&quot;https://www.cnblogs.com/xiaoxiongcanguan/p/10277762.html&quot; target=&quot;_blank&quot;&gt;TreeMap&lt;/a&gt;一样也实现了Map接口。&lt;/p&gt;
&lt;p&gt;　　跳表的每一个水平层是从左到右，有小到大进行排序的，具体的比较逻辑由compare函数来完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳表定义：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SkipListMap&amp;lt;K,V&amp;gt; &lt;span&gt;extends&lt;/span&gt; AbstractMap&amp;lt;K,V&amp;gt;&lt;span&gt;{

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Node&amp;lt;K,V&amp;gt;&lt;span&gt; head;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Node&amp;lt;K,V&amp;gt;&lt;span&gt; tail;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Comparator&amp;lt;K&amp;gt;&lt;span&gt; comparator;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; maxLevel;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 插入新节点时，提升的概率为0.5，期望保证上一层和下一层元素的个数之比为 1:2
     * 以达到查询节点时，log(n)的对数时间复杂度
     * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; PROMOTE_RATE = 1.0/2.0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; INIT_MAX_LEVEL = 1&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; SkipListMap() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化整个跳表结构&lt;/span&gt;
&lt;span&gt;        initialize();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; SkipListMap(Comparator&amp;lt;K&amp;gt;&lt;span&gt; comparator) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置比较器&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.comparator =&lt;span&gt; comparator;
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initialize(){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size = 0&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.maxLevel =&lt;span&gt; INIT_MAX_LEVEL;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 构造左右哨兵节点&lt;/span&gt;
        Node&amp;lt;K,V&amp;gt; headNode = &lt;span&gt;new&lt;/span&gt; Node&amp;lt;&amp;gt;&lt;span&gt;();
        headNode.nodeType &lt;/span&gt;=&lt;span&gt; NodeType.LEFT_SENTINEL;

        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; tailNode = &lt;span&gt;new&lt;/span&gt; Node&amp;lt;&amp;gt;&lt;span&gt;();
        tailNode.nodeType &lt;/span&gt;=&lt;span&gt; NodeType.RIGHT_SENTINEL;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 跳表初始化时只有一层，包含左右哨兵两个节点&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.head =&lt;span&gt; headNode;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tail =&lt;span&gt; tailNode;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 左右哨兵牵手&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.head.right = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.tail;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tail.left = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.head;
    }

    。。。。。。 
｝&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;compare比较逻辑实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; doCompare(K key1,K key2){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.comparator != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果跳表被设置了比较器，则使用比较器进行比较&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.comparator.compare(key1,key2);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 否则强制转换为Comparable比较(对于没有实现Comparable的key会抛出强制类型转换异常)&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ((Comparable)key1).compareTo(key2);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;跳表查询实现&lt;/h2&gt;
&lt;p&gt;　　跳表实现的一个关键就是如何进行快速的随机查找。&lt;/p&gt;
&lt;p&gt;　　对于指定key的查找，首先从最上层的跳表head节点开始，从左到右的进行比对，当找到一个节点比key小，而且其相邻的右节点比key大时，则沿着找到的节点进入下一层继续查找。(&lt;strong&gt;每一个水平层的左哨兵节点视为无穷小，而右哨兵节点视为无穷大&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;　　由于跳表的相邻上下两层的节点稀疏程度不同，进入下一水平层更有可能逼近指定key对应的数据节点。通过在水平层大跨步的跳跃，并在对应的节点处进入下一层，循环往复的如此操作直到最底层。跳跃式的进行链表节点的查找方式，也是跳表名称SkipList的来源。&lt;/p&gt;
&lt;p&gt;　　从代码实现中可以看到，跳表通过建立在其上的索引节点进行查找，比起原始的一维链表，能够更快的定位到所要查找的节点。且如果按照概率算法构建的索引节点分布比较平均的话，跳表的查找效率将能够媲美有序向量、平衡二叉树的查找效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳表查找方法实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 找到最逼近参数key的前驱数据节点
     * (返回的节点的key并不一定等于参数key，也有可能是最逼近的)
     * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; Node&amp;lt;K,V&amp;gt;&lt;span&gt; findPredecessorNode(K key){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从跳表头结点开始，从上层到下层逐步逼近&lt;/span&gt;
        Node&amp;lt;K,V&amp;gt; currentNode =&lt;span&gt; head;

        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前遍历节点的右节点不是右哨兵，且data &amp;gt;= 右节点data&lt;/span&gt;
            &lt;span&gt;while&lt;/span&gt; (currentNode.right.nodeType != NodeType.RIGHT_SENTINEL &amp;amp;&amp;amp; doCompare(key,currentNode.right.key) &amp;gt;= 0&lt;span&gt;){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指向同一层的右节点&lt;/span&gt;
                currentNode =&lt;span&gt; currentNode.right;
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 跳出了上面循环，说明找到了同层最接近的一个节点&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(currentNode.down != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; currentNode.down != null,未到最底层，进入下一层中继续查找、逼近&lt;/span&gt;
                currentNode =&lt;span&gt; currentNode.down;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; currentNode.down == null，说明到了最下层保留实际节点的，直接返回
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; （currentNode.key并不一定等于参数key，可能是最逼近的前缀节点）&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; currentNode;
            }
        }
    }

   &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 找到key对应的数据节点
     * 如果没有找到，返回null
     * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; Node&amp;lt;K,V&amp;gt;&lt;span&gt; searchNode(K key){
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; preNode =&lt;span&gt; findPredecessorNode(key);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(preNode.key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; Objects.equals(preNode.key,key)){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; preNode;
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
    }
 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;跳表插入实现&lt;/h2&gt;
&lt;p&gt;　　跳表在插入节点的过程中，首先通过findProdecessorNode查询到最逼近key的前驱数据节点，如果发现当前key并不存在，则在最底层的数据节点链表中插入新的数据节点。&lt;/p&gt;
&lt;p&gt;　　在新的数据节点插入完成后，根据random生成一个0-1之间的随机数，与定义的&lt;strong&gt;PROMOTE_RATE&lt;/strong&gt;常量进行比对，判断是否需要为当前新插入的节点创建更上一层的索引节点。这一比对可能会进行多次，相对应的也会为新插入节点在垂直方向上创建更多的索引节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳表插入代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  private&lt;/span&gt; Node&amp;lt;K,V&amp;gt;&lt;span&gt; putNode(K key,V value){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(key == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(&quot;key required&quot;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从最底层中，找到其直接最接近的前驱节点&lt;/span&gt;
        Node&amp;lt;K,V&amp;gt; predecessorNode =&lt;span&gt; findPredecessorNode(key);

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(Objects.equals(key,predecessorNode.key)){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; data匹配，已经存在，直接返回false代表未插入成功&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; predecessorNode;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前跳表元素个数+1&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.size++&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 之前不存在，需要新插入节点&lt;/span&gt;
        Node&amp;lt;K,V&amp;gt; newNode = &lt;span&gt;new&lt;/span&gt; Node&amp;lt;&amp;gt;&lt;span&gt;(key,value);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将新节点挂载至前驱节点之后&lt;/span&gt;
&lt;span&gt;        predecessorNode.linkAsRight(newNode);
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; currentLevel =&lt;span&gt; INIT_MAX_LEVEL;

        Random random &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();

        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; hasUpNodePredecessorNode =&lt;span&gt; predecessorNode;
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; newNodeUpperNode =&lt;span&gt; newNode;

        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; doPromoteLevel = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (random.nextDouble() &amp;lt; PROMOTE_RATE &amp;amp;&amp;amp; !&lt;span&gt;doPromoteLevel) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前插入的节点需要提升等级，在更高层插入索引节点&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(currentLevel == &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.maxLevel){
                promoteLevel();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保证一次插入节点，做多只会提升一层（否则将会有小概率出现高位的许多层中只有极少数(甚至只有1个)元素的情况）&lt;/span&gt;
                doPromoteLevel = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 找到上一层的前置节点&lt;/span&gt;
            &lt;span&gt;while&lt;/span&gt; (hasUpNodePredecessorNode.up == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向左查询，直到找到最近的一个有上层节点的前驱节点&lt;/span&gt;
                hasUpNodePredecessorNode =&lt;span&gt; hasUpNodePredecessorNode.left;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指向上一层的node&lt;/span&gt;
            hasUpNodePredecessorNode =&lt;span&gt; hasUpNodePredecessorNode.up;

            Node&lt;/span&gt;&amp;lt;K,V&amp;gt; upperNode = &lt;span&gt;new&lt;/span&gt; Node&amp;lt;&amp;gt;&lt;span&gt;(key,value);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将当前data的up节点和上一层最接近的左上的node建立连接&lt;/span&gt;
&lt;span&gt;            hasUpNodePredecessorNode.linkAsRight(upperNode);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前data这一列的上下节点建立关联&lt;/span&gt;
            upperNode.down =&lt;span&gt; newNodeUpperNode;
            newNodeUpperNode.up &lt;/span&gt;=&lt;span&gt; upperNode;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 由于当前data节点可能需要在更上一层建立索引节点，所以令newNodeUpperNode指向更上层的up节点&lt;/span&gt;
            newNodeUpperNode =&lt;span&gt; newNodeUpperNode.up;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前迭代层次++&lt;/span&gt;
            currentLevel++&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在通过概率算法决定是否建立更高层索引节点的过程中，有可能需要额外的再升高一层。这时需要通过promoteLevel方法将整个跳表的水平层抬高一层，并令跳表的head作为新增水平层的左哨兵节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;promoteLevel方法实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 提升当前跳表的层次(在当前最高层上建立一个只包含左右哨兵的一层，并令跳表的head指向左哨兵)
     * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; promoteLevel(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最大层数+1&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.maxLevel++&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前最高曾左、右哨兵节点&lt;/span&gt;
        Node&amp;lt;K,V&amp;gt; upperLeftSentinel = &lt;span&gt;new&lt;/span&gt; Node&amp;lt;&amp;gt;&lt;span&gt;(NodeType.LEFT_SENTINEL);
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; upperRightSentinel = &lt;span&gt;new&lt;/span&gt; Node&amp;lt;&amp;gt;&lt;span&gt;(NodeType.RIGHT_SENTINEL);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最高层左右哨兵牵手&lt;/span&gt;
        upperLeftSentinel.right =&lt;span&gt; upperRightSentinel;
        upperRightSentinel.left &lt;/span&gt;=&lt;span&gt; upperLeftSentinel;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最高层的左右哨兵，和当前第一层的head/right建立上下连接&lt;/span&gt;
        upperLeftSentinel.down = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.head;
        upperRightSentinel.down &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.tail;

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.head.up =&lt;span&gt; upperLeftSentinel;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tail.up =&lt;span&gt; upperRightSentinel;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 令跳表的head/tail指向最高层的左右哨兵&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.head =&lt;span&gt; upperLeftSentinel;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tail =&lt;span&gt; upperRightSentinel;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;跳表删除实现&lt;/h2&gt;
&lt;p&gt;　　跳表的删除相对简单，在找到需要被删除的最底层数据节点之后，通过up引用找到其对应的所有索引节点删除即可。&lt;/p&gt;
&lt;p&gt;　　当删除某一索引节点后，如果发现对应水平层只剩下左/右哨兵时，还需要通过&lt;strong&gt;destoryLevel&lt;/strong&gt;方法将对应的水平层删除。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳表删除节点：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  private&lt;/span&gt; Node&amp;lt;K,V&amp;gt; removeNode(Node&amp;lt;K,V&amp;gt;&lt;span&gt; needRemoveNode){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (needRemoveNode == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果没有找到对应的节点，不需要删除，直接返回&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前跳表元素个数-1&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.size--&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保留需要返回的最底层节点Node&lt;/span&gt;
        Node&amp;lt;K,V&amp;gt; returnCache =&lt;span&gt; needRemoveNode;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 找到了对应节点，则当前节点以及其所有层的up节点都需要被删除&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; currentLevel =&lt;span&gt; INIT_MAX_LEVEL;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (needRemoveNode != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将当前节点从该水平层的链表中移除(令其左右节点直接牵手)&lt;/span&gt;
&lt;span&gt;            needRemoveNode.unlinkSelfHorizontal();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当该节点的左右都是哨兵节点时，说明当前层只剩一个普通节点&lt;/span&gt;
            &lt;span&gt;boolean&lt;/span&gt; onlyOneNormalData =&lt;span&gt;
                    needRemoveNode.left.nodeType &lt;/span&gt;== NodeType.LEFT_SENTINEL &amp;amp;&amp;amp;&lt;span&gt;
                    needRemoveNode.right.nodeType &lt;/span&gt;==&lt;span&gt; NodeType.RIGHT_SENTINEL;
            &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; isLowestLevel = currentLevel ==&lt;span&gt; INIT_MAX_LEVEL;

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!isLowestLevel &amp;amp;&amp;amp;&lt;span&gt; onlyOneNormalData){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不是最底层，且只剩当前一个普通节点了，需要删掉这一层(将该层的左哨兵节点传入)&lt;/span&gt;
&lt;span&gt;                destroyLevel(needRemoveNode.left);
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不需要删除该节点&lt;/span&gt;
                currentLevel++&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指向该节点的上一点&lt;/span&gt;
            needRemoveNode =&lt;span&gt; needRemoveNode.up;
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; returnCache;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;跳表删除水平层destoryLevel实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; destroyLevel(Node&amp;lt;K,V&amp;gt;&lt;span&gt; levelLeftSentinelNode){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最大层数减1&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.maxLevel--&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前层的右哨兵节点&lt;/span&gt;
        Node&amp;lt;K,V&amp;gt; levelRightSentinelNode =&lt;span&gt; levelLeftSentinelNode.right;

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(levelLeftSentinelNode == &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.head){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 需要删除的是当前最高层(levelLeftSentinelNode是跳表的头结点)

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 令下一层的左右哨兵节点的up节点清空&lt;/span&gt;
            levelLeftSentinelNode.down.up = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            levelRightSentinelNode.down.up &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 令跳表的head/tail指向最高层的左右哨兵&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.head =&lt;span&gt; levelLeftSentinelNode.down;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tail =&lt;span&gt; levelRightSentinelNode.down;
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 需要删除的是中间层

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 移除当前水平层左哨兵，令其上下节点建立连接&lt;/span&gt;
&lt;span&gt;            levelLeftSentinelNode.unlinkSelfVertical();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 移除当前水平层右哨兵，令其上下节点建立连接&lt;/span&gt;
&lt;span&gt;            levelRightSentinelNode.unlinkSelfHorizontal();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;跳表空间效率分析&lt;/h2&gt;
&lt;p&gt;　　高效的跳表实现(例如jdk的ConcurrentSkipListMap)相对于本篇博客的简易版实现，上层的索引节点只需要持有down和right两个关联节点的引用即可(K/V引用也可以简化为对底层数据节点的引用)，而最底层的数据节点则仅维护关联的right节点即可。同时，通过边界条件的判断，也并不需要水平层的左右哨兵节点。&lt;/p&gt;
&lt;p&gt;　　可以看到，高效跳表的空间效率其实很高，其空间占用正比于数据节点的数目，渐进的空间复杂度为O(n)。在redis的zset实现中，就是使用跳表作为其底层实现的。redis的zset跳表实现中，建立上一级索引节点的概率被设置为1/4，综合来看每个节点所持有的平均引用数量大约为1.33，比红黑树节点2个引用(左右孩子节点，都不考虑value的引用)的空间效率要高。&lt;/p&gt;
&lt;h2&gt;跳表时间效率分析&lt;/h2&gt;
&lt;h3&gt;跳表的查询性能&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;跳表通过概率算法建立起了均匀分布的索引节点层(从数学期望上来看是均匀分布的，但存在一定波动)，能够以正比于跳表层数的&lt;strong&gt;O(logn)&lt;/strong&gt;对数时间复杂度完成随机查询。&lt;/p&gt;
&lt;p&gt;　　跳表的查询操作效率与跳表的层数有关，因此&lt;strong&gt;跳表查询操作的渐进时间复杂度为O(logn)。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;跳表和哈希表在对空间/时间的取舍上类似，哈希表可以通过调整负载因子进行空间效率与查询时间效率的取舍；而跳表也可以通过设置增加上一层索引节点的概率来调节查询效率与空间效率。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;跳表的插入性能&lt;/h3&gt;
&lt;p&gt;　　跳表的插入依赖于跳表的查询(logn)，且需要根据概率决定是否创建对应的上一层索引节点。在最坏情况下，可能需要创建n+1个索引节点(n为跳表当前层数，1表示可能会增加新的一层)；最好情况下不需要创建任何索引节点。&lt;/p&gt;
&lt;p&gt;　　跳表的插入操作效率与跳表的层数有关，因此&lt;strong&gt;跳表插入操作的渐进时间复杂度为O(logn)。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;跳表的删除性能&lt;/h3&gt;
&lt;p&gt;　　跳表的删除同样依赖于跳表的查询，删除最底层数据节点时也需要将被删除节点对应的索引节点一并删除。在最坏情况下，可能需要删除至多n个索引节点(n为跳表层数)，最好情况下不需要删除任何索引节点。&lt;/p&gt;
&lt;p&gt;　　跳表的删除操作效率与跳表的层数有关，因此&lt;strong&gt;跳表删除操作的渐进时间复杂度为O(logn)。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;为什么redis使用跳表而不是红黑树实现ZSET？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;下面是redis作者给出的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;　　1) They are not very memory intensive. It’s up to you basically. Changing parameters about the probability of a node to have a given number of levels will make then less memory intensive than btrees.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;　　2) A sorted set is often target of many ZRANGE or ZREVRANGE operations, that is, traversing the skip list as a linked list. With this operation the cache locality of skip lists is at least as good as with other kind of balanced trees.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;　　3) They are simpler to implement, debug, and so forth. For instance thanks to the skip list simplicity I received a patch (already in Redis master) with augmented skip lists implementing ZRANK in O(log(N)). It required little changes to the code.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大致的翻译：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1) 跳表是否很消耗内存，这取决于你。通过改变提升跳表节点索引等级的概率参数可以令跳表的内存消耗少于B树。&lt;/p&gt;
&lt;p&gt;　　2) 一个有序集合通常被作为&lt;strong&gt;ZRANGE&lt;/strong&gt;或是&lt;strong&gt;ZREVERANGE&lt;/strong&gt;操作的目标。也就是说，通常是以链表的形式来遍历跳表的，在这种遍历操作下，缓存了相邻节点位置的跳表性能将至少和其它类型的自平衡树一样优秀。&lt;/p&gt;
&lt;p&gt;　　3) 跳表更容易实现和调试，等等。得益于跳表的简单性，我收到了一个能够在跳表中以O(logN)效率实现ZRANK的补丁(已经在redis的master分支中了)，而这只需要对代码稍作修改。&lt;/p&gt;
&lt;p&gt;　　经过前面博客中对跳表原理的介绍，是否对redis作者的回答有了更深的体会呢？&lt;/p&gt;

&lt;p&gt;　　通过自己的思路实现了一个简易版的跳表之后，理解了跳表的设计思想，也使得我有能力更进一步的去理解jdk、redis中更为高效的跳表实现。同时也加深了对跳表、平衡二叉树、哈希表等不同数据结构的理解，以及如何在不同场景下应该如何选择更高效、更符合实际需求的数据结构。&lt;/p&gt;
&lt;p&gt;　　本系列博客的代码在我的 github上：&lt;a href=&quot;https://github.com/1399852153/DataStructures&quot; target=&quot;_blank&quot;&gt;https://github.com/1399852153/DataStructures&lt;/a&gt;&lt;a href=&quot;https://github.com/1399852153/DataStructures&quot; target=&quot;_blank&quot;&gt; &lt;/a&gt;(SkipListMap类)，存在许多不足之处，还请多多指教。&lt;/p&gt;
</description>
<pubDate>Thu, 26 Nov 2020 14:03:00 +0000</pubDate>
<dc:creator>小熊餐馆</dc:creator>
<og:description>1. 跳表介绍 在之前关于数据结构的博客中已经介绍过两种最基础的数据结构：基于连续内存空间的向量(线性表)和基于链式节点结构的链表。 有序的向量可以通过二分查找以logn对数复杂度完成随机查找，但由于</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xiaoxiongcanguan/p/14032756.html</dc:identifier>
</item>
</channel>
</rss>