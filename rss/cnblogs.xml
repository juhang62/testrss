<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>[Vue] vue 组件传值 - 月山</title>
<link>http://www.cnblogs.com/mybilibili/p/10456346.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mybilibili/p/10456346.html</guid>
<description>&lt;h2 id=&quot;vue-组件之间数据传输props-传值方式&quot;&gt;vue 组件之间数据传输(props 传值方式)&lt;/h2&gt;
&lt;p&gt;这个多用于父子组件之间的传值,是最基本的传值方式&lt;/p&gt;
&lt;p&gt;父亲组件进行绑定,将数据绑定,其中 personal,personalData,imgUrl 是绑定的数据,@updata 是绑定的事件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;template&amp;gt;
      ...
      &amp;lt;slideBar
        @updata=&quot;updata&quot;
        :personal=&quot;personal&quot;
        :personalData=&quot;personalData&quot;
        :imgUrl=&quot;imgUrl&quot;
      &amp;gt;&amp;lt;/slideBar&amp;gt;
      ...
&amp;lt;template&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;子组件进行获取数据通过 props 进行获取,可以设置一些静态类型检查,类似于 react 的 proptypes,同时子组件想要向父组件进行传值,可以通过 emit 进行传值就行了&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  export default {
    props: {
      slideMsg: Array,
      personal: Object,
      personalData: Object,
      imgUrl: String
    },
    ...
    methods:{
      submitEvent(){
        ...
        this.emit(&quot;updata&quot;,&quot;我是获取的数据&quot;);
        ...
      }
    }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;vue-组件之间数据传输eventbus-进行组件传递&quot;&gt;vue 组件之间数据传输(eventBus 进行组件传递)&lt;/h2&gt;
&lt;p&gt;事件 bus 通过一个新的 vue 实例,来进行事件监听和事件分发&lt;br/&gt;commom/bus.js&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//极简单的vue实例
import Vue from 'vue';
// 使用 Event Bus
const bus = new Vue();
export default bus;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在 game 组件中引入&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import bus from &quot;@/common/bus&quot;;

...
bus.$emit(&quot;moneyChange&quot;, {....});
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在用 money 组件中引入&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import bus from &quot;@/common/bus&quot;;

...
bus.$on(&quot;moneyChange&quot;, msg =&amp;gt; {
    msg &amp;amp;&amp;amp; this.initHomeData();
});
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在最初的项目阶段这是一个不错的选择,但是随着项目体积的增大,事件触发和数据流向变得越来越不可见,后续开发和维护变得越来越困难.&lt;/p&gt;
&lt;h2 id=&quot;vue-组件之间数据传输vuex&quot;&gt;vue 组件之间数据传输(vuex)&lt;/h2&gt;
&lt;h3 id=&quot;初始化-store&quot;&gt;初始化 store&lt;/h3&gt;
&lt;p&gt;src/main.js&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import Vuex from &quot;vuex&quot;;
Vue.use(Vuex);

new Vue({
  ...,
  store,
  ...,
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;src/store/index.js&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import mutations from &quot;./mutations&quot;;

const initStore = {
  state: {
    userBasicInfo: {},
    siteBaseInfo: {
      download: &quot;&quot;,
      invitation: &quot;&quot;,
      register_enable: &quot;&quot;,
      service_qq1: &quot;&quot;,
      service_qq2: &quot;&quot;,
      service_wechat: &quot;&quot;,
    },
  },
  mutations
};

export default initStore;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;src/store/mutations.js&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const SET_USER_BASIC_INFO = 'SET_USER_BASIC_INFO';
const SET_SITE_BASE_INFO = 'SET_SITE_BASE_INFO';

export default {
  [SET_USER_BASIC_INFO](state, payload) {
    state.userBasicInfo = payload.data;
  },
  [SET_SITE_BASE_INFO](state, payload) {
    state.siteBaseInfo = Object.assign({}, state.siteBaseInfo, payload);
  },
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;state&quot;&gt;state&lt;/h3&gt;
&lt;h4 id=&quot;正常使用-state&quot;&gt;正常使用 state&lt;/h4&gt;
&lt;p&gt;Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态。每当 store.state.count 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。&lt;br/&gt;Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const app = new Vue({
  el: '#app',
  // 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件
  store,
  components: { Counter },
  template: `
    &amp;lt;div class=&quot;app&quot;&amp;gt;
      &amp;lt;counter&amp;gt;&amp;lt;/counter&amp;gt;
    &amp;lt;/div&amp;gt;
  `
})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在子组件中使用&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const Counter = {
  template: `&amp;lt;div&amp;gt;{{ count }}&amp;lt;/div&amp;gt;`,
  computed: {
    count () {
      return this.$store.state.count
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;mapstate-辅助函数&quot;&gt;mapState 辅助函数&lt;/h4&gt;
&lt;p&gt;按官网的案例&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import { mapState } from 'vuex'

export default {
  // ...
  computed: mapState({
    // 箭头函数
    siteBaseInfo: state =&amp;gt; state.siteBaseInfo,
    // 传字符串参数
    siteBaseInfo: &quot;siteBaseInfo&quot;,
    // 为了能够使用 `this` 获取局部状态，必须使用常规函数
    download_ios (state) {
      return state.siteBaseInfo.download + this.prefix
    },
    download: state =&amp;gt; state.siteBaseInfo.download
  })
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;computed: mapState([
  // 映射 this.count 为 store.state.count
  'count'
])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;mapstate-与局部计算属性混合使用&quot;&gt;mapState 与局部计算属性混合使用&lt;/h4&gt;
&lt;p&gt;使用对象展开运算符将多个对象合并为一个，以使我们可以将最终对象传给 computed 属性。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;computed: {
  localComputed () { /* ... */ },
  // 使用对象展开运算符将此对象混入到外部对象中
  ...mapState({
    // ...
  })
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;getter-的使用&quot;&gt;getter 的使用&lt;/h3&gt;
&lt;p&gt;有时候我们需要从通过 state 得到一些新的状态,因为这一状态可能其他很多组件都要使用这一状态.比如余额这一参数,我们当前只有盈利和亏损额,但是很多页面都要使用余额进行显示,那么每个引入页面都要进行一次计算吗?想想就麻烦,还是只计算一次,然后直接获取这个余额值来的方便&lt;/p&gt;
&lt;p&gt;store/getters.js&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export default {
  balance: (state) =&amp;gt; {
    return Number(state.userBasicInfo.profit) - Number(state.userBasicInfo.loss);
  },
  download: (state) =&amp;gt; {
    return state.siteBaseInfo.download;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;mapgetters-辅助函数&quot;&gt;mapGetters 辅助函数&lt;/h4&gt;
&lt;p&gt;辅助函数仅仅是将 store 中的 getter 映射到局部计算属性&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import { mapGetters } from 'vuex'

export default {
  // ...
  computed: {
  // 使用对象展开运算符将 getter 混入 computed 对象中
    ...mapGetters([
      'balance',
      'download',
      // ...
    ])
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;getter-的使用-1&quot;&gt;getter 的使用&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;//直接使用
store.getters.download
//组件中使用
computed: {
 download () {
    return this.$store.getters.download
  }
}
//使用辅助函数
...mapGetters([
      'download',
      'balance',
])
//和mapState一起用
computed: {
  ...mapState({
    siteBaseInfo: &quot;siteBaseInfo&quot;,
  }),
  ...mapGetters({
    download: 'download'
  })
},&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;getter-也可以接受其他-getter-作为第二个参数&quot;&gt;Getter 也可以接受其他 getter 作为第二个参数&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;getters: {
  // ...
  doneTodosCount: (state, getters) =&amp;gt; {
    return getters.doneTodos.length
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;总之,getter 就是一个将一些需要进行再次计算的 state 计算好,然后将其作为 state 进行快捷的引用&lt;/p&gt;
&lt;h3 id=&quot;mutation-使用&quot;&gt;mutation 使用&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;最好提前在你的 store 中初始化好所有所需属性&lt;/li&gt;
&lt;li&gt;当需要在对象上添加新属性时，你应该使用 Vue.set(obj, 'newProp', 123)或以新对象替换老对象(对象展开符)&lt;/li&gt;
&lt;li&gt;mutation 必须是同步函数&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler),会接受 state 作为第一个参数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//设置
mutations: {
   SET_USER_BASIC_INFO(state) {
    state.userBasicInfo = {a:1,b:2};
  },
}

//使用
store.commit('SET_USER_BASIC_INFO')&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;提交载荷payload&quot;&gt;提交载荷（Payload）&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;//设置
mutations: {
   SET_USER_BASIC_INFO(state, payload) {
    state.userBasicInfo = Object.assign({},payload);
  },
}

//使用
store.commit('SET_USER_BASIC_INFO', {
  a:1,
  b:2
})&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;对象风格的提交方式&quot;&gt;对象风格的提交方式&lt;/h4&gt;
&lt;p&gt;提交 mutation 的另一种方式是直接使用包含 type 属性的对象&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;store.commit({
  type: 'SET_USER_BASIC_INFO',
  data:{
      a:1,
      b:2,
  }
})

//mutations的效果
mutations: {
  increment (state, payload) {
    state.userBasicInfo = Object.assign({},payload.data);
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;使用常量替代-mutation-事件类型&quot;&gt;使用常量替代 Mutation 事件类型&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;// mutation-types.js
export const SET_USER_BASIC_INFO = 'SET_USER_BASIC_INFO';

// mutations.js
import { SET_USER_BASIC_INFO } from './mutation-types';

mutations: {
    // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名
    [SET_USER_BASIC_INFO] (state) {
      // mutate state
    }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;mapmutations-辅助函数&quot;&gt;mapMutations 辅助函数&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;//正常
this.$store.commit('SET_USER_BASIC_INFO');

//mapMutations
import { mapMutations } from 'vuex';

export default {
    ...,
    methods:{
        ...mapMutations({
            setUserBasicInfo: 'SET_USER_BASIC_INFO' // 将 `this.setUserBasicInfo()` 映射为 `this.$store.commit('SET_USER_BASIC_INFO')`
        })
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;action&quot;&gt;action&lt;/h3&gt;
&lt;p&gt;用来提交一个 mutation,还可以进行异步操作&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//注册
const store = new Vuex.Store({
  state,
  mutations,
  actions: {
    //解构context.commmit
    GET_HOME_INFO({commit}) {
        commit(&quot;SET_USER_BASIC_INFO&quot;);
    },
  }
})

//触发
store.dispatch('GET_HOME_INFO')
//载荷形式
store.dispatch('GET_HOME_INFO',{})
//对象形式
store.dispatch({
    type:'GET_HOME_INFO',
    data:{}
})&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;mapactions-辅助函数&quot;&gt;mapActions 辅助函数&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;import { mapActions } from 'vuex'

export default {
  ...
  methods: {
    ...mapActions({
      getHomeInfo: 'GET_HOME_INFO' // 将 `this.getHomeInfo()` 映射为 `this.$store.dispatch('GET_HOME_INFO')`
    })
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;异步的-action&quot;&gt;异步的 action&lt;/h4&gt;
&lt;p&gt;action 中的中支持的异步 ajax,setTimeout,acync/await,promise...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;store.dispatch('actionA').then(() =&amp;gt; {
  // ...
})&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;其他的传值还有一些传统的方式&quot;&gt;其他的传值还有一些传统的方式&lt;/h2&gt;
&lt;p&gt;比如 localStorage，sessionStorage，router 传参，cookie（不推荐，虽然就跟之前做购物&lt;br/&gt;车差不多的传递形式）&lt;/p&gt;
&lt;h4 id=&quot;sessionstorage&quot;&gt;sessionstorage&lt;/h4&gt;
&lt;p&gt;项目中使用的 sessionStorage&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sessionStorage.setItem(&quot;msg&quot;, JSON.stringify(res.data)); //为了兼容之前的代码，有用到msg这个本地缓存的数据
sessionStorage.setItem(&quot;isMobile&quot;, res.data.mobile);
sessionStorage.setItem(&quot;invi&quot;, res.data.invitation);
sessionStorage.setItem(&quot;isLogin&quot;, res.data.trier);
sessionStorage.setItem(&quot;setPwd&quot;, res.data.fundpwd);
sessionStorage.setItem(&quot;isShow&quot;, res.data.bankcard);&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;localstorage&quot;&gt;localStorage&lt;/h4&gt;
&lt;p&gt;项目中关于声音的开关,样式选择,背景切换等，用来将用户的一些操作一直保存&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//组件userSetting
localStorage.setItem(&quot;audio&quot;, this.switchValue);
//组件audioPlay
let audio = localStorage.getItem(&quot;audio&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;sessionstorage 和 localStorage 看情况使用就好，sessionstorage 是浏览器关闭没了，localStorage 是一直存储不删除就在存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;params&quot;&gt;params&lt;/h4&gt;
&lt;p&gt;依赖于 vue-router&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;this.$router.push({
  name: &quot;Main&quot;,
  params: {
    id: this.setting_id,
    type: &quot;3&quot;
  }
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://vuex.vuejs.org/zh/guide/&quot;&gt;Vuex&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://juejin.im/search?query=vuex&amp;amp;type=all&quot;&gt;Vuex - 标签 - 掘金&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://juejin.im/post/5bbe15dcf265da0a867c57bd&quot;&gt;浪里行舟 从头开始学习 Vuex&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015782272&quot;&gt;VueJS 中学习使用 Vuex 详解&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000007516967&quot;&gt;到底 vuex 是什么？&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/bailicangdu/vue2-elm&quot;&gt;基于 vue2 + vuex 构建一个具有 45 个页面的大型单页面应用&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 11 Mar 2019 07:58:00 +0000</pubDate>
<dc:creator>月山</dc:creator>
<og:description>vue 组件之间数据传输(props 传值方式) 这个多用于父子组件之间的传值,是最基本的传值方式 父亲组件进行绑定,将数据绑定,其中 personal,personalData,imgUrl 是绑定</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mybilibili/p/10456346.html</dc:identifier>
</item>
<item>
<title>mongodb副本集实现 - Python运维开发</title>
<link>http://www.cnblogs.com/dianel/p/10510905.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dianel/p/10510905.html</guid>
<description>&lt;h2 id=&quot;简单介绍&quot;&gt;1. 简单介绍&lt;/h2&gt;
&lt;p&gt;MongoDB中的副本集是一组提供冗余和高可用性的mongod进程。副本集主要包含：primary，secondary和arbiter。&lt;/p&gt;
&lt;h3 id=&quot;primary&quot;&gt;primary:&lt;/h3&gt;
&lt;p&gt;在副本集中只有一个，接收所有写操作，并把这些操作记录到primary的oplog里面，然后secondary将会复制这个oplog，并且将其在自己的数据集中执行一遍。&lt;br/&gt;一个副本集可以有50个成员组成，但是只能有7个成员参与投票。&lt;/p&gt;
&lt;h3 id=&quot;secondary&quot;&gt;secondary:&lt;/h3&gt;
&lt;p&gt;在副本集中有一个或者多个，secondary主要进行对primary的数据进行复制操作，来维持相同的数据。如果primary不可用了，副本集将会进行选举，选择出secondary变成新的primary。&lt;/p&gt;
&lt;ul readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Priority 0 Replica Set Members：&lt;br/&gt;优先级为0的成员不能成为primary，也不能触发选举。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Hidden Replica Set Members：&lt;br/&gt;隐藏副本集成员维护主数据集的副本，但对客户机应用程序是不可见的。隐藏成员必须始终是优先级为0的成员，因此不能成为主成员。隐藏成员可以在选举中投票。&lt;br/&gt;在分片群集中，mongos不与隐藏成员交互。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Delayed Replica Set Members：&lt;br/&gt;延迟成员包含副本集数据集的副本。但是，延迟成员的数据集反映了该集合的早期或延迟状态。例如，如果当前时间是09:52并且成员有一小时的延迟，则延迟成员没有比08:52更新的操作。&lt;br/&gt;延迟成员是数据集的“滚动备份”或运行“历史”快照，因此它们可以帮助从各种人为错误中恢复。如，延迟成员可以从升级失败和操作员错误（包括删除的数据库和集合）中恢复。&lt;br/&gt;延迟成员：&lt;br/&gt;必须是优先级为0的成员。将优先级设置为0以防止延迟成员成为主要成员。&lt;br/&gt;应该是被隐藏的成员。始终阻止应用程序查看和查询延迟成员。&lt;br/&gt;若members[n].votes设置为1，参与投票选举primary。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;arbiter&quot;&gt;arbiter:&lt;/h3&gt;
&lt;p&gt;arbiter不会进行数据的复制，也不能成为primary，只在选举primary的过程中参加投票。&lt;/p&gt;
&lt;h2 id=&quot;系统环境设置&quot;&gt;2.系统环境设置：&lt;/h2&gt;
&lt;p&gt;系统环境：&lt;/p&gt;
&lt;p&gt;IP地址：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;mongodb1&lt;/td&gt;
&lt;td&gt;192.168.1.2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;mongodb2&lt;/td&gt;
&lt;td&gt;192.168.1.3&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;mongodb3&lt;/td&gt;
&lt;td&gt;192.168.1.4&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;环境设置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# tail /etc/security/limits.conf 
* soft nofile 65536
* hard nofile 65536
* soft nproc 65536
* hard nproc 65536
# echo &quot;never&quot;&amp;gt;/sys/kernel/mm/transparent_hugepage/enabled
# echo &quot;never&quot;&amp;gt;/sys/kernel/mm/transparent_hugepage/defrag

# 更改用户进程数限制
# cat /etc/security/limits.d/90-nproc.conf 
* soft nproc 32768
root soft nproc unlimited
$ ulimit -u 32768

# 增加hosts解析
# cat /etc/hosts
127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4
::1 localhost localhost.localdomain localhost6 localhost6.localdomain6
mongodb1 192.168.1.2
mongodb2 192.168.1.3
mongodb3 192.168.1.4&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;安装mongodb&quot;&gt;3.安装mongodb&lt;/h2&gt;
&lt;h3 id=&quot;安装mongodb-1&quot;&gt;安装mongodb&lt;/h3&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# tar -xf  mongodb-linux-x86_64-3.0.11.gz
# mkdir /usr/local/mongodb
# mv mongodb-linux-x86_64-3.0.11 /usr/local/mogodb
# cd /usr/local/mongodb

# 按照要求创建数据日志配置文件目录
# mkdir data logs conf  
# 修改环境变量
$ echo 'export PATH=$PATH:/usr/local/mongodb/bin:' &amp;gt;&amp;gt; ~/.bash_profile&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;增加配置文件&quot;&gt;增加配置文件：&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# vim conf/mongod.conf   
systemLog:
  destination: file
  path: /data/mongodb/log/mongo.log  # 指定日志文件路径
  logAppend: true
  logRotate: rename

storage:
  journal:
    enabled: true

  dbPath: /data/mongodb/data/  # 指定数据文件路径
  directoryPerDB: true
  engine: wiredTiger

  wiredTiger:
    engineConfig:
      directoryForIndexes: true

    indexConfig:
      prefixCompression: true

replication:
  oplogSizeMB: 1024
  replSetName: &quot;repset&quot;  # 指定副本集名称

processManagement:  
  fork: true   # 后台运行

net:
  port: 27001  # 端口
  bindIp: 192.168.1.2    # 绑定IP
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;添加启动脚本&quot;&gt;添加启动脚本&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;/etc/init.d/&lt;/code&gt;下增加mongod启动脚本(&lt;code&gt;/etc/init.d/mongodb&lt;/code&gt;)：&lt;br/&gt;该脚本是通过yanfa用户来启动mongodb。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;#!/bin/bash
#
# chkconfig: - 80 90
# description:  Starts, stops mongodb
#
#########################################
#source function library.
. /etc/init.d/functions

# return value
RETVAL=0 
USER=yanfa
PROG=&quot;mongodb&quot;
MONGODB_DIR=/usr/local/mongodb
MONGODB_CONF=$MONGODB_DIR/conf/mongod.conf
MONGODB_BIN=$MONGODB_DIR/bin/mongod

start(){
 status $MONGODB_BIN &amp;amp;&amp;gt;/dev/null
 RETVAL=$?
 if [ $RETVAL -eq 3 ];then
  sudo su - $USER -c &quot;$MONGODB_BIN -f $MONGODB_CONF&quot; &amp;amp;&amp;gt;/dev/null \
  &amp;amp;&amp;amp; action &quot;$PROG start...&quot; /bin/true
 elif [ $RETVAL -eq 0 ]; then
  action &quot;$PROG is running&quot; /bin/true
 else
  action &quot;$PROG is running&quot; /bin/false
 fi
}

stop(){
 sudo su - $USER -c &quot;$MONGODB_BIN -f $MONGODB_CONF --shutdown&quot; &amp;amp;&amp;gt;/dev/null
 if [ $? -eq 0 ];then
  action &quot;$PROG stopped&quot; /bin/true 
 else
  action &quot;$PROG stopped&quot; /bin/false
 fi
}


case &quot;$1&quot; in
    start)
    start
 ;;
    stop)
 stop
 ;;      
    status)
    status $MONGODB_BIN
 ;;
    version)
    $MONGODB_BIN -version
 ;;
    *)
 echo $&quot;Usage: $0 {start|stop|status|version}&quot;
    exit 2
 ;;
esac&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加执行权限：&lt;code&gt;chmod +x /etc/init.d/mongodb&lt;/code&gt;&lt;br/&gt;添加开机自启动：&lt;code&gt;chkconfig --add mongodb&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;副本集实现&quot;&gt;3. 副本集实现：&lt;/h2&gt;
&lt;p&gt;启动/关闭mongodb：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 脚本启动mongo:
 /etc/init.d/mongodb start
# 脚本关闭mongo：
 /etc/init.d/mongodb stop

#  二进制文件启动和关闭
mongod -f /usr/local/mongodb/conf/mongod.conf
mongod -f /usr/local/mongodb/conf/mongod.conf --shutdown&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;登录mongodb数据库，创建副本集方法一：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;$ mongo --host 192.168.1.2 --port 27001
# 切换到admin数据库
&amp;gt; use admin;  
# 初始化副本集
&amp;gt; rs.initiate(); #
#  查看当前副本集信息
repset:PRIMARY&amp;gt; rs.conf()
# 添加成员一
repset:PRIMARY&amp;gt; rs.add(&quot;192.168.1.3:27001&quot;)
# 添加成员一
repset:PRIMARY&amp;gt; rs.add(&quot;192.168.1.4:27001&quot;)
# 查看副本集的状态
repset:PRIMARY&amp;gt; rs.status()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看副本集配置：&lt;code&gt;rs.conf()&lt;/code&gt;&lt;br/&gt;删除副本集中的成员：&lt;code&gt;rs.remove('host:port')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建副本集方法二：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; use admin;
&amp;gt; cfg={
... &quot;_id&quot;:&quot;repset&quot;,
... &quot;members&quot;:[
... {&quot;_id&quot;:0,&quot;host&quot;:&quot;192.168.1.2:27001&quot;},
... {&quot;_id&quot;:1,&quot;host&quot;:&quot;192.168.1.3:27001&quot;},
... {&quot;_id&quot;:2,&quot;host&quot;:&quot;192.168.1.4:27001&quot;}
... ]}
&amp;gt; rs.initiate(cfg)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;mongo Shell中的复制方法：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;13&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;rs.add()&lt;/td&gt;
&lt;td&gt;往副本集中添加成员&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;rs.addArb()&lt;/td&gt;
&lt;td&gt;往副本集中添加仲裁节点&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;rs.conf()&lt;/td&gt;
&lt;td&gt;返回副本集的配置文档&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;rs.freeze()&lt;/td&gt;
&lt;td&gt;阻止现任成员在一段时间内寻求选举。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;rs.help()&lt;/td&gt;
&lt;td&gt;返回帮助信息&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;rs.initiate()&lt;/td&gt;
&lt;td&gt;初始化一个新的副本集&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;rs.printReplicationInfo()&lt;/td&gt;
&lt;td&gt;从primary的角度中打印副本集的状态报告&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;rs.printSlaveReplicationInfo()&lt;/td&gt;
&lt;td&gt;从Secondary的角度打印副本集状态的报告。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;rs.reconfig()&lt;/td&gt;
&lt;td&gt;通过应用新的副本集配置对象重新配置副本集。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;rs.remove()&lt;/td&gt;
&lt;td&gt;从副本集中删除成员&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;rs.slaveOk()&lt;/td&gt;
&lt;td&gt;设置slaveOk当前连接的属性&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;rs.status()&lt;/td&gt;
&lt;td&gt;查看当前副本集状态&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Mon, 11 Mar 2019 07:34:00 +0000</pubDate>
<dc:creator>Python运维开发</dc:creator>
<og:description>[TOC] 1. 简单介绍 MongoDB中的副本集是一组提供冗余和高可用性的mongod进程。副本集主要包含：primary，secondary和arbiter。 primary: 在副本集中只有一</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dianel/p/10510905.html</dc:identifier>
</item>
<item>
<title>Webpack学习－Loader - 24k-小清新</title>
<link>http://www.cnblogs.com/wuxiaobin/p/10510784.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuxiaobin/p/10510784.html</guid>
<description>&lt;h3 id=&quot;什么是loader&quot;&gt;什么是Loader?&lt;/h3&gt;
&lt;p&gt;继上两篇文章webpack工作原理介绍（&lt;a href=&quot;http://wushaobin.top/2019/02/12/webpackPrinciple/&quot;&gt;上篇&lt;/a&gt;、&lt;a href=&quot;http://wushaobin.top/2019/02/17/webpackPrinciple1/&quot;&gt;下篇&lt;/a&gt;）,我们了解到&lt;code&gt;Loader：模块转换器，也就是将模块的内容按照需求装换成新内容&lt;/code&gt;，而且每个Loader的职责都是单一，只会完成一种转换，所以我们一般对源文件的处理，也是由多个Loader以链式顺序执行的方式来进行多次装换，然后得到我们要的结果。&lt;/p&gt;
&lt;p&gt;那么这样Loader只需要关心输入和输出，Loader其实是一个Node.js模块，该模块导出的是一个函数（意味着，所有node.js的api我们都可以使用），如下：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    module.exports = function (source) {
        // 对source做一系列的转换
        return source;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面我们介绍一下webpack提供了哪些供Loader调用的api，对Loader有个比较深刻的理解，然后来分析&lt;code&gt;babel-loader&lt;/code&gt;的源码，看看我们常用的loader是怎么编写出来的。&lt;/p&gt;
&lt;h3 id=&quot;获得loader的options&quot;&gt;获得Loader的options&lt;/h3&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    const loaderUtils = require('loader-utils');
    module.exports = function(source) {
        // 获取用户为当前Loader传入的options
        console.log(loaderUtils.getOptions(this));
        return source;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;返回其他结果&quot;&gt;返回其他结果&lt;/h3&gt;
&lt;p&gt;如上，我们返回的是转换后的内容，但是有些情况下，我们不仅仅需要返回转换后的内容，还需要返回一些其他的内容，如sourceMap或是AST语法树，那么这时候我们可以使用webpack提供的API&lt;code&gt;this.callback&lt;/code&gt;，当使用&lt;code&gt;this.callback&lt;/code&gt;了，那么我们就必须需要在Loader函数返回&lt;code&gt;undefined&lt;/code&gt;,以此来让webpack知道返回的结果在&lt;code&gt;this.callback&lt;/code&gt;中，API详细参数如下：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    this.callback(
        // 无法装换原内容时的Error
        err: Error || null,
        // 装换后的的内容，如上述的source
        content: string | Buffer,
        // 用于通过装换后的内容得出原内容的Source Map，方便调试
        // 我们了解到，SourceMap我们只是会在开发环境去使用，于是就会变成可控制的，
        // webpack也提供了this.sourceMap去告诉是否需要使用sourceMap，
        // 当然也可以使用loader的option来做判断，如css-loader
        sourceMap?: SourceMap,
        // 如果本次转换同时生成ast语法树，也可以将这个ast返回，方便后续loader需要复用该ast，这样可以提高性能
        abstractSyntaxTree? AST
    );&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;同步与异步&quot;&gt;同步与异步&lt;/h3&gt;
&lt;p&gt;看看异步Loader在&lt;code&gt;this.async&lt;/code&gt;API下如何实现，&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    module.exports = async function (source) {
        const callback = this.async();
        const { err, content, sourceMap, AST } = await Func();
        callback(err, content, sourceMap, AST); // 如上诉`this.callback`参数一样
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;处理二进制数据&quot;&gt;处理二进制数据&lt;/h2&gt;
&lt;p&gt;像&lt;code&gt;file-loader&lt;/code&gt;这样的Loader，处理的是二进制数据，那么就需要告诉webpack给loader传入二进制格式的数据，代码可以如下：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    module.exports = function(source) {
        if (source instanceof Buffer) {
            // 一系列操作
            return source; //当然我本身也可以返回二进制数据提供给下一个loader
        }
    }
    moudle.exports.raw = true; //不设置，就会拿到字符串&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过&lt;code&gt;moudle.exports.raw = true;&lt;/code&gt;告知webpack，自己本身需要二进制数据。&lt;/p&gt;
&lt;h3 id=&quot;缓存加速&quot;&gt;缓存加速&lt;/h3&gt;
&lt;p&gt;优化的最佳点，可以使用&lt;code&gt;this.cacheable(Boolen)&lt;/code&gt;，缓存loader转换后的内容，当处理文件或依赖文件没有发生变化时，使用缓存的转换内容，以此提速！&lt;/p&gt;
&lt;h3 id=&quot;其他api&quot;&gt;其他API&lt;/h3&gt;
&lt;p&gt;说到学习，当然越系统越好了，api多介绍 ，除了上面常用的api之外，还存在以下常用的api。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;this.context&lt;/code&gt;: 当前处理转换的文件所在的目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.resource&lt;/code&gt;: 当前处理转换的文件完整请求路径，包括querystring&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.resourcePath&lt;/code&gt;: 当前处理转换的文件的路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.resourceQuery&lt;/code&gt;: 当前处理文件的querystring&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.target&lt;/code&gt;: webpack配置的target&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.loadMoudle&lt;/code&gt;: 处理文件时，需要依赖其他文件的处理结果时，可以使用this.loadMoudle(request: string, callback: function(err, source, sourceMap, module))去获取到依赖文件的处理结果。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.resolve&lt;/code&gt;: 获取指定文件的完整路径，this.resolve(context: string, request: string, callback: function(err, result: string))&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.addDependency&lt;/code&gt;: 为当前处理文件添加依赖文件，以便依赖文件发生变化时重新调用Loader转换该文件,this.addDependency(file: string)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.addContextDependency&lt;/code&gt;: 为当前处理文件添加依赖文件目录，以便依赖文件目录里文件发生变化时重新调用Loader转换该文件，this.addContextDependency(dir: string)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.clearDependencies&lt;/code&gt;: 清除当前正在处理的文件的所有依赖&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.emitFile&lt;/code&gt;: 输出一个文件，使用的方法为this.emitFile(name: string, content: Buffer | string, sourceMap: {...})&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;babel-loader源码简析&quot;&gt;babel-loader源码简析&lt;/h3&gt;
&lt;p&gt;源码第一行如下：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;    let babel;
    try {
        babel = require(&quot;@babel/core&quot;);
    } catch (err) {
        if (err.code === &quot;MODULE_NOT_FOUND&quot;) {
            err.message +=
            &quot;\n babel-loader@8 requires Babel 7.x (the package '@babel/core'). &quot; +
            &quot;If you'd like to use Babel 6.x ('babel-core'), you should install 'babel-loader@7'.&quot;;
        }
        throw err;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;babel-loader依赖了&lt;code&gt;@babel/core&lt;/code&gt;,这就是安装babel-loader需要同时安装&lt;code&gt;@babel/core&lt;/code&gt;（通常会再安装&lt;code&gt;babel-preset-env&lt;/code&gt;、&lt;code&gt;babel-plugin-transform-runtime&lt;/code&gt;、&lt;code&gt;babel-runtime&lt;/code&gt;）的原因。我们接下去看，&lt;code&gt;src/index.js&lt;/code&gt;整个文件是不是按照我们前面所讲编写Loader的方法来组织代码的。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;//引入package.json
const pkg = require(&quot;../package.json&quot;);
/* 
根据babel-loader是否配置cacheDirectory属性来告诉
babel-loader是否缓存loader的执行结果，如果true，
便会使用cache方法去实现，`cache.js`文件有着read、write、filename（文件命名方法）
以及如何处理缓存的handleCache方法（有则读，无则写再读），有兴趣可以去看看。
*/
const cache = require(&quot;./cache&quot;);
/*
    transfrom.js用来转换内容，内部调用了babel.transform方法进行转换，这里简单介绍一下babel的原理：
    babylon将es6/es7代码解析成ast，babel-traverse对ast进行转译，得到新的ast，新的ast通过
    babel-generator转换成es5，核心方法在@babel/core/lib/transformation/index.js中的`runSync`
    方法，有兴趣可以去了解一下。
*/
const transform = require(&quot;./transform&quot;);
const injectCaller = require(&quot;./injectCaller&quot;);
const path = require(&quot;path&quot;);
// 获取Loader参数options
const loaderUtils = require(&quot;loader-utils&quot;);

module.exports = makeLoader();
module.exports.custom = makeLoader;

function makeLoader(callback) {
  const overrides = callback ? callback(babel) : undefined;

  return function(source, inputSourceMap) {
    // 上面介绍过的api可以得知，这是个异步Loader,做的是异步装换的工作
    const callback = this.async();

    loader
      .call(this, source, inputSourceMap, overrides)
      .then(args =&amp;gt; callback(null, ...args), err =&amp;gt; callback(err));
  };
}

async function loader(source, inputSourceMap, overrides) {
    ....
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到确实和我们Loader编写方式是一样的，通过&lt;code&gt;module.exports = makeLoader();&lt;/code&gt;导出一个函数，&lt;code&gt;makeLoader()&lt;/code&gt;是一个高阶函数，又返回了一个函数，通过&lt;code&gt;const callback = this.async();&lt;/code&gt;可以知道，这是一个异步的loader，不难看出最重要的实现都在这一步函数loader里面了，那么到底在loader函数里面究竟做了些什么呢？我们来看看，在阅读源码前，最好先看看&lt;code&gt;babel-loader&lt;/code&gt;的&lt;a href=&quot;https://github.com/babel/babel-loader&quot;&gt;README&lt;/a&gt;，先做个基本了解.&lt;/p&gt;
&lt;p&gt;上面代码可以看出&lt;code&gt;loader(source, inputSourceMap, overrides)&lt;/code&gt;函数入参有三个，分别是&lt;code&gt;source=&amp;gt;待转换的code&lt;/code&gt;，&lt;code&gt;inputSourceMap=&amp;gt;上一个loader处理后的sourceMap,有的话&lt;/code&gt;，&lt;code&gt;overrides=&amp;gt;自定义加载器&lt;/code&gt;，整块源码可以分成几部分，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;let loaderOptions = loaderUtils.getOptions(this) || {};&lt;/code&gt;，获取options，并且获取当前处理转换的文件的路径&lt;code&gt;this.resourcePath&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;判断是否自定义加载器转换，这里会进行一系列对options.customize进行判断，options.customize一个相对路径，loader函数参数overrides为空时起效，执行&lt;code&gt;let override = require(loaderOptions.customize);&lt;/code&gt;，有了override之后，后续逻辑（如转换、获取option）override都会进行介入处理。&lt;/li&gt;
&lt;li&gt;将函数传入参数和LoaderOptions归并，得到programmaticOptions。&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;babel.loadPartialConfig&lt;/code&gt;可以拿到babel配置并赋值给config变量,其实就是为了允许系统轻松操作和验证用户的配置，此功能解决了插件和预设&lt;/li&gt;
&lt;li&gt;生成cacheIdentifier&lt;/li&gt;
&lt;li&gt;判断options.cacheDirectory是否需要缓存Loader转换内容，如为true，调用cache.js的module.export Cache方法（上面已做介绍）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config.babelrc&lt;/code&gt;不为空，则有.babelrc文件，依赖.babelrc文件变化，使用&lt;code&gt;this.addDependency(config.babelrc);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;metadataSubscribers 订阅元数据，主要作用是订阅一些编译过程中的一些元数据，订阅以后这些元数据将会被添加 到webpack的上下文中。通常我们是用不上的，估计在某些babel-plugin中可能会使用到。&lt;/li&gt;
&lt;li&gt;最后将处理后的结果返回&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;
&lt;p&gt;每一个Loader其实返回值就是一个Function，而且就是把带转换内容传入，得到转换后的内容，做的事情就是这样，这篇文章先对Loader的基本概念进行介绍，并且了解webpack为Loader的编写提供一些常用的API,最后通过简析babel-loader的源码，我觉得应该差不多知道如何去写一个简单的Loader了,文章原文地址&lt;a href=&quot;http://wushaobin.top/2019/03/09/webpackLoader/&quot;&gt;我的博客&lt;/a&gt;。&lt;/p&gt;
</description>
<pubDate>Mon, 11 Mar 2019 07:18:00 +0000</pubDate>
<dc:creator>24k-小清新</dc:creator>
<og:description>什么是Loader? 继上两篇文章webpack工作原理介绍（ '上篇' 、 '下篇' ）,我们了解到 ，而且每个Loader的职责都是单一，只会完成一种转换，所以我们一般对源文件的处理，也是由多个L</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuxiaobin/p/10510784.html</dc:identifier>
</item>
<item>
<title>技术最好的工程师为什么当不了首席？ - CODING研发管理系统</title>
<link>http://www.cnblogs.com/codingdevops/p/10510765.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/codingdevops/p/10510765.html</guid>
<description>&lt;p&gt;又到了金三银四的招聘季，公司的管理者都在思考：在现在的市场环境下，到底应该为自己的公司注入怎样的新鲜血液来维持发展。工程师们同样也在思考如何获得更多成长和晋升的途径。&lt;/p&gt;
&lt;p&gt;Eduards Sizovs 是 DevHub 的创始人，立志于为软件工程师群体提供专业的职业咨询服务，同时也是一位欧洲知名的技术布道师。&lt;/p&gt;
&lt;p&gt;今天的文章基于 Eduards Sizovs 的行业经历，主要介绍了现在工程师市场中稀缺的 “T” 型人才（既拥有丰富的技术背景，同时对业务也有一定的理解能力），以及这类人才在组织中发挥的重要作用，为工程师群体描绘了一条新的职业发展道路，帮助个人和公司得到更长远的发展。&lt;/p&gt;
&lt;h3 id=&quot;正文&quot;&gt;正文&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;本文译自 Eduards Sizovs 的博客，标题：The principal developer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天，我的前同事 Alex 给我打了个电话，讨论了一下他现在所在的新兴互联网公司的一些境遇。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me：&lt;/strong&gt;最近怎么样呀？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alex：&lt;/strong&gt;还行吧，最近公司在招一个首席工程师（principle developer）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me：&lt;/strong&gt;那挺好的，你没去争取一下么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alex：&lt;/strong&gt;我去了，但是被老板拒了，聊了一下他觉得我不太合适。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me：&lt;/strong&gt;你觉得自己能胜任么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alex：&lt;/strong&gt;废话，我有 7 年的大型项目经验，精通各种架构。能持续产出简洁高效的代码并能主动去解决各类历史遗留问题，流转到我这里的工单都能最快速地处理。我应该是&lt;strong&gt;全组代码水平最好，研发效能最高的工程师了&lt;/strong&gt;，不提我提谁？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me：&lt;/strong&gt;那你想过没有，或许就是这个原因导致你没有被选上？&lt;/p&gt;
&lt;p&gt;随后我们聊了些其他的事就挂了电话，虽然 Alex 不太高兴，但是我感觉还挺好的，因为找到了问题的关键。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005CNqf4gy1g0sunvb5prj31hc0so0xc.jpg&quot; alt=&quot;图片&quot;/&gt;&lt;br/&gt;&lt;em&gt;© Moneyball (2011) by Bennett Miller&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;于是，我给 Alex 公司的老板 Andrey 打了个电话。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me：&lt;/strong&gt;好久不见，听说你们最近在招首席工程师，为什么不直接从现有团队里面提拔一个呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Andrey：&lt;/strong&gt;比如 Alex ？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me：&lt;/strong&gt;比如 Alex。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Andrey：&lt;/strong&gt;公司现有的技术团队的确拥有很多很厉害的工程师，但是我认为他们都不太具备一个首席工程师所必需的素质。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me：&lt;/strong&gt;能展开说说么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Andrey：&lt;/strong&gt;这个事情的逻辑是这样的：一个首席工程师跟一般工程师的主要区别并不在于他是否是团队中最聪明的那个，而在于他是否有团队驱动力，是否能持续推动团队的改善和进步，能帮助团队中的新人快速地进阶。虽然不一定要像&lt;strong&gt;精神领袖&lt;/strong&gt;那么厉害，但必须具备相应的领导力，这种领导力不仅需要体现在研发团队中，还要能影响产品、运营、市场等部门的同事，甚至也要能在管理层拥有一定的决策权。所以我认为&lt;strong&gt;一个首席工程师需要能在公司内更好更快地组织资源，推动组织整体向前，并带来正向的企业文化&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005CNqf4gy1g0suo8iqu3g30bz06ju0z.gif&quot; alt=&quot;图片&quot;/&gt;&lt;br/&gt;&lt;em&gt;© The Office (2005 - 2013)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me：&lt;/strong&gt;所以你认为首席工程师在帮助工程师的同时也要去了解非技术人员的问题？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Andrey：&lt;/strong&gt;没错，经常听到工程师们抱怨“业务方面”的同事完全不懂技术，沟通效率也非常低，但光是抱怨解决不了任何问题，必须要有人在中间搭桥，解决这些问题。&lt;/p&gt;
&lt;p&gt;首席工程师的定位就相当于公司内部的&lt;strong&gt;外交官&lt;/strong&gt;。他必须有足够的沟通能力，能跟不同的人打交道；能游走在不同的部门，打通上下层沟通渠道；要敢于提出那些隐藏在公司内部却很少有人敢于提及的问题，并具备足够的领导力来赢得大家的支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me：&lt;/strong&gt;从你的描述来看，这个人既要有&lt;strong&gt;丰富的技术背景也需要有一定的对业务的理解能力&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Andrey：&lt;/strong&gt;这个职位需要的是 &lt;strong&gt;“T” 型人才&lt;/strong&gt;，不仅仅深耕于技术领域，对很多原理型的东西有深厚的积累，同时还要能延展出去，跟运维、品控、安全、产品、人力、市场等领域的人共同协作，帮助公司进步。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me：&lt;/strong&gt;感觉是一个一半工程师一半业务人员的感觉。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Andrey：&lt;/strong&gt;理应如此，现在大部分研发团队都仅仅把功能上线的数量当作考评的唯一指标，这种方式其实已经过时了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005CNqf4gy1g0suoia4jlg308c04ox6p.gif&quot; alt=&quot;图片&quot;/&gt;&lt;br/&gt;&lt;em&gt;© Saturday Night Live&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;对于任何以盈利为目的的公司来说，赚钱都是公司最重要的目标之一。现在很多功能都是为了上线而上线，产品、技术、运营、市场等团队之间缺乏有效沟通，上线了一堆功能却没有办法给公司带来任何增长点。&lt;/p&gt;
&lt;p&gt;我们需要更多 “业务型” 工程师，他们能从全局出发，理解整个产品从最初的设计到部署再到如何才能打动客户给公司带来更多的效益，能够找到公司现有的不足并承担起相应的责任来解决问题。&lt;/p&gt;
&lt;p&gt;这些工作可能是解决研发流程问题，或者是建立新的跨部门沟通机制，甚至是解决招聘问题。&lt;strong&gt;借助键盘来实现商业价值的机会其实远比工程师们想象的要少&lt;/strong&gt;，如果你手中只有锤子，那你看所有的问题都觉得像钉子。&lt;/p&gt;
&lt;p&gt;对于我的公司来说，越多 “业务型”工程师越好，而一个好的首席工程师能给其他工程师树立一个学习的榜样。所以我觉得找一个首席工程师的意义不亚于一个创业合伙人。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me：&lt;/strong&gt;但是按照你的标准，基本上已经筛掉了市面上包括 Alex 在内的 99% 的工程师了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Andrey：&lt;/strong&gt; &lt;strong&gt;一个首席工程师是一个能给公司内不同组织都带来影响的人&lt;/strong&gt;，这样的人正如你所说的，市面上 99% 的工程师都不能满足我的需求，但是为了公司的发展，也只能继续寻找了。&lt;/p&gt;
&lt;p&gt;总的来说，我觉得我们这个行业需要：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;更多的&lt;del&gt;“仅以上线目的工程师”&lt;/del&gt; ，业务性工程师。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;更多的 &lt;del&gt;“码农”&lt;/del&gt;，T 型人才。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;更多的 &lt;del&gt;“抱怨”&lt;/del&gt;，跨组织沟通技巧。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Reference&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://sizovs.net/2019/02/15/the-principal-developer&quot; class=&quot;uri&quot;&gt;https://sizovs.net/2019/02/15/the-principal-developer&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt; 延展阅读：&lt;/strong&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/58228456&quot;&gt;《逃离裁员：程序员在云时代的生存之道》&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 11 Mar 2019 07:17:00 +0000</pubDate>
<dc:creator>CODING研发管理系统</dc:creator>
<og:description>又到了金三银四的招聘季，公司的管理者都在思考：在现在的市场环境下，到底应该为自己的公司注入怎样的新鲜血液来维持发展。工程师们同样也在思考如何获得更多成长和晋升的途径。 Eduards Sizovs 是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/codingdevops/p/10510765.html</dc:identifier>
</item>
<item>
<title>asp.net core系列 40  MVC 介绍与详细示例 - 花阴偷移</title>
<link>http://www.cnblogs.com/MrHSR/p/10509469.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MrHSR/p/10509469.html</guid>
<description>&lt;h3&gt;一. MVC介绍&lt;/h3&gt;
&lt;p&gt;　　MVC架构模式有助于实现关注点分离。视图和控制器均依赖于模型。 但是，模型既不依赖于视图，也不依赖于控制器。 这是分离的一个关键优势。 这种分离允许模型独立于可视化展示进行构建和测试。ASP.NET Core MVC 包括以下功能：&lt;/p&gt;
&lt;p&gt;　　　　路由、模型绑定、模型验证、依赖关系注入、筛选器、区域、Web API、可测试性、Razor 视图引擎、强类型视图、标记帮助程序、 视图组件。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;(1) 路由&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　ASP.NET Core MVC 建立在 ASP.NET Core 的路由之上，是一个功能强大的 URL 映射组件，可用于生成具有易于理解和可搜索 URL 的应用程序。关于路由知识，请查看asp.net core 系列第5，6章。&lt;/p&gt;

&lt;p&gt;　&lt;strong&gt;　(2) 模型绑定(Model)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　ASP.NET Core MVC 模型绑定将客户端请求数据（窗体值(form)、路由数据、查询字符串参数、HTTP 头）转换到控制器(Controller)可以处理的对象中。 因此，控制器逻辑不必找出传入的请求数据；它只需具备作为其Action方法的参数的数据。下面的LoginViewModel就是一个模型类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; Login(LoginViewModel model, &lt;span&gt;string&lt;/span&gt; returnUrl = &lt;span&gt;null&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　&lt;strong&gt;(3)&lt;/strong&gt;&lt;/span&gt; &lt;strong&gt;模型验证&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　ASP.NET Core MVC 通过使用数据注释验证属性。 验证属性在值发送到服务端前，在客户端上进行检查。并在调用控制器action前在服务端上进行检查。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.ComponentModel.DataAnnotations;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoginViewModel
{
    [Required]
    [EmailAddress]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Email { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

    [Required]
    [DataType(DataType.Password)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

    [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Remember me?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; RememberMe { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务端控制器action验证&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; Login(LoginViewModel model, &lt;span&gt;string&lt;/span&gt; returnUrl = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证模型 &lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ModelState.IsValid)
    {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; work with the model&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(model);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;　&lt;strong&gt;　(4) 依赖注入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　依赖关系注入除了在控制器上通过构造函数请求所需服务，还可以使用@inject 指令，应用在视图文件上。下面是视图页面上通过依赖注入获取服务对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@inject SomeService ServiceName
&lt;/span&gt;&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@ServiceName.GetTitle&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@ServiceName.GetTitle&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;strong&gt;(5) 筛选器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　筛选器帮助开发者封装，横切关注点，例如异常处理或授权。筛选器允许action方法运行自定义预处理和后处理逻辑，并且可以配置为在给定请求的执行管道内的特定点上运行。筛选器可以作为属性应用于控制器或Action（也可以全局运行）。例如MVC 授权筛选器。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    [Authorize]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AccountController : Controller
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;strong&gt;(6) 区域&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　区域用在大型&lt;span lang=&quot;EN-US&quot;&gt;Web开发上， 是功能分组的方法。区域是应用程序内的一个 &lt;span lang=&quot;EN-US&quot;&gt;MVC 结构。&lt;span lang=&quot;EN-US&quot;&gt;  例如，具有多个业务单位（如结账、计费、搜索等）的电子商务应用。每个单位都有自己的逻辑组件视图、控制器和模型。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;(7) Web API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　除了作为生成网站的强大平台，ASP.NET Core MVC 还对生成 Web API 提供强大的支持。 可以生成可连接大量客户端（包括浏览器和移动设备）的服务,前面章节有讲过。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;(8) 可测试性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　框架对界面和依赖项注入的使用非常适用于单元测试，并且该框架还包括使得集成测试快速轻松的功能（例如 TestHost 和实体框架的 InMemory 提供程序）&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;(9) Razor 视图引擎&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　ASP.NET Core MVC 视图使用 Razor 视图引擎呈现视图。 Razor 是一种紧凑、富有表现力且流畅的模板标记语言，用于使用嵌入式 C# 代码定义视图。 Razor 用于在服务器上动态生成 Web 内容。 可以完全混合服务器代码与客户端内容和代码。例如下面嵌入 C#代码，循环输出5组li标记&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  @for (int i = 0; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;&lt;span&gt;; i++) {
    &amp;lt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;List item @i&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;strong&gt;(10) 强类型视图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　可以基于模型强类型化 MVC 中的 Razor 视图。 控制器可以将强类型化的模型传递给视图，使视图具备类型检查和 IntelliSense 支持。例如，以下视图呈现类型为 &lt;code&gt;IEnumerable&amp;lt;Product&amp;gt;&lt;/code&gt; 的模型：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
@model IEnumerable&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Product&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    @foreach (Product p in Model)
    {
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@p.Name&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;strong&gt;(11) 标记帮助程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　标记帮助程序使服务器端代码可以在 Razor 文件中参与创建和呈现 HTML 元素。 例如，内置 LinkTagHelper 可以用来创建指向 &lt;code&gt;AccountsController&lt;/code&gt;&lt;code&gt;控制器中&lt;/code&gt;  &lt;code&gt;Login&lt;/code&gt;的方法链接&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
         Thank you for confirming your email.
        Please &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-controller&lt;/span&gt;&lt;span&gt;=&quot;Account&quot;&lt;/span&gt;&lt;span&gt; asp-action&lt;/span&gt;&lt;span&gt;=&quot;Login&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Click here to Log in&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;.
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;strong&gt;(12) 视图组件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　通过视图组件可以包装呈现逻辑并在整个应用程序中重用它。 这些组件类似于分部视图，但具有关联逻辑。&lt;/p&gt;

&lt;h3&gt;二. 完整示例介绍(项目StudyMVCDemo)&lt;/h3&gt;

&lt;p&gt; 　　&lt;strong&gt;2.1 安装EF数据提供程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　这里使用内存数据库Microsoft.EntityFrameworkCore.InMemory，Entity Framework Core 和内存数据库一起使用， 这对测试非常有用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　　　PM&amp;gt; Install-Package Microsoft.EntityFrameworkCore.InMemory
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;strong&gt;2.2 新建数据模型类(POCO )和EF上下文类&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MvcMovieContext : DbContext
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MvcMovieContext(DbContextOptions options)
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options)
        {
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;Movie&amp;gt; Movie { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Movie
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Title { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [DataType(DataType.Date)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime ReleaseDate { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Genre { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;decimal&lt;/span&gt; Price { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.3 初始化数据&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; host =&lt;span&gt; CreateWebHostBuilder(args).Build();

            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; scope =&lt;span&gt; host.Services.CreateScope())
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; services =&lt;span&gt; scope.ServiceProvider;

                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    //&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; context = services.GetRequiredService&amp;lt;MvcMovieContext&amp;gt;&lt;span&gt;();
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;程序运行时，使用EF迁移生成数据，用在关系型数据库
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;context.Database.Migrate();&lt;br/&gt;&lt;/span&gt;
&lt;span&gt;                    SeedData.Initialize(services);
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; logger = services.GetRequiredService&amp;lt;ILogger&amp;lt;Program&amp;gt;&amp;gt;&lt;span&gt;();
                    logger.LogError(ex, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;An error occurred seeding the DB.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                }
            }
            host.Run();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('cbf15cdf-714e-4e71-9277-c6b7ffee1cd5')&quot; readability=&quot;40&quot;&gt;&lt;img id=&quot;code_img_closed_cbf15cdf-714e-4e71-9277-c6b7ffee1cd5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cbf15cdf-714e-4e71-9277-c6b7ffee1cd5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('cbf15cdf-714e-4e71-9277-c6b7ffee1cd5',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cbf15cdf-714e-4e71-9277-c6b7ffee1cd5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SeedData
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 初始化数据
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;serviceProvider&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;  &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Initialize(IServiceProvider serviceProvider)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MvcMovieContext(
                serviceProvider.GetRequiredService&lt;/span&gt;&amp;lt;DbContextOptions&amp;lt;MvcMovieContext&amp;gt;&amp;gt;&lt;span&gt;()))
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果有数据返回&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (context.Movie.Any())
                {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; DB has been seeded&lt;/span&gt;
&lt;span&gt;                }

                context.Movie.AddRange(
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Movie
                    {
                        Title &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;When Harry Met Sally&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        ReleaseDate &lt;/span&gt;= DateTime.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1989-2-12&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                        Genre &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Romantic Comedy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        Price &lt;/span&gt;= &lt;span&gt;7.99M&lt;/span&gt;&lt;span&gt;
                    },

                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Movie
                    {
                        Title &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ghostbusters &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        ReleaseDate &lt;/span&gt;= DateTime.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1984-3-13&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                        Genre &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Comedy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        Price &lt;/span&gt;= &lt;span&gt;8.99M&lt;/span&gt;&lt;span&gt;
                    },

                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Movie
                    {
                        Title &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ghostbusters 2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        ReleaseDate &lt;/span&gt;= DateTime.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1986-2-23&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                        Genre &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Comedy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        Price &lt;/span&gt;= &lt;span&gt;9.99M&lt;/span&gt;&lt;span&gt;
                    },

                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Movie
                    {
                        Title &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Rio Bravo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        ReleaseDate &lt;/span&gt;= DateTime.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1959-4-15&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                        Genre &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Western&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        Price &lt;/span&gt;= &lt;span&gt;3.99M&lt;/span&gt;&lt;span&gt;
                    }
                );
                context.SaveChanges();
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;strong&gt;2.4 添加控制器类(MoviesController)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 　&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MoviesController : Controller
    {

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt;  MvcMovieContext _MvcMovieContext;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MoviesController(MvcMovieContext MvcMovieContext)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;._MvcMovieContext =&lt;span&gt; MvcMovieContext;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　&lt;strong&gt;　2.5 列表页Movies/index.cshtml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET: /&amp;lt;controller&amp;gt;/&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; IActionResult Index()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; movies =&lt;span&gt; _MvcMovieContext.Movie.ToList();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(movies);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
@model IEnumerable&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;StudyMVCDemo&lt;/span&gt;&lt;span&gt;.Models.Movie&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

@{
    ViewData[&quot;Title&quot;] = &quot;Index&quot;;
}

&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Index&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-action&lt;/span&gt;&lt;span&gt;=&quot;Create&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Create New&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;table&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                @Html.DisplayNameFor(model =&amp;gt; model.Title)
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                @Html.DisplayNameFor(model =&amp;gt; model.ReleaseDate)
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                @Html.DisplayNameFor(model =&amp;gt; model.Genre)
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                @Html.DisplayNameFor(model =&amp;gt; model.Price)
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        @foreach (var item in Model)
        {
            &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    @Html.DisplayFor(modelItem =&amp;gt; item.Title)
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    @Html.DisplayFor(modelItem =&amp;gt; item.ReleaseDate)
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    @Html.DisplayFor(modelItem =&amp;gt; item.Genre)
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    @Html.DisplayFor(modelItem =&amp;gt; item.Price)
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-action&lt;/span&gt;&lt;span&gt;=&quot;Edit&quot;&lt;/span&gt;&lt;span&gt; asp-route-id&lt;/span&gt;&lt;span&gt;=&quot;@item.Id&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Edit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; |
                    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-action&lt;/span&gt;&lt;span&gt;=&quot;Details&quot;&lt;/span&gt;&lt;span&gt; asp-route-id&lt;/span&gt;&lt;span&gt;=&quot;@item.Id&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Details&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; |
                    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-action&lt;/span&gt;&lt;span&gt;=&quot;Delete&quot;&lt;/span&gt;&lt;span&gt; asp-route-id&lt;/span&gt;&lt;span&gt;=&quot;@item.Id&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Delete&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        }
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　启动程序，在浏览器中输入http://localhost:18084/Movies，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/151560/201903/151560-20190311112905398-1347489123.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　上图中菜单布局是在 Views/Shared/_Layout.cshtml 文件中实现的，该_Layout.cshtml页中@RenderBody()是视图页面的占位符。&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;Views/_ViewStart.cshtml 文件将 Views/Shared/_Layout.cshtml 文件引入到每个视图中。 可以使用 &lt;code&gt;Layout&lt;/code&gt;属性设置不同的布局视图，或将它设置为 &lt;code&gt;null&lt;/code&gt;&lt;/span&gt;，这样将不会使用任何布局文件。后面详细了解布局。&lt;/p&gt;

&lt;p&gt;　　　&lt;strong&gt;2.6 详细页Movies/ Details.cshtml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 详细页 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;id&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; Details(&lt;span&gt;int&lt;/span&gt;?&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (id == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NotFound();
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; movie = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _MvcMovieContext.Movie
                .FirstOrDefaultAsync(m &lt;/span&gt;=&amp;gt; m.Id ==&lt;span&gt; id);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (movie == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NotFound();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(movie);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@model StudyMVCDemo.Models.Movie

@{
    ViewData[&quot;Title&quot;] = &quot;Details&quot;;
}

&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Details&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Movie&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dl &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dt &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            @Html.DisplayNameFor(model =&amp;gt; model.Title)
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dd &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            @Html.DisplayFor(model =&amp;gt; model.Title)
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dt &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            @Html.DisplayNameFor(model =&amp;gt; model.ReleaseDate)
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dd &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            @Html.DisplayFor(model =&amp;gt; model.ReleaseDate)
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dt &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            @Html.DisplayNameFor(model =&amp;gt; model.Genre)
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dd &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            @Html.DisplayFor(model =&amp;gt; model.Genre)
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dt &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            @Html.DisplayNameFor(model =&amp;gt; model.Price)
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dd &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            @Html.DisplayFor(model =&amp;gt; model.Price)
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dl&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-action&lt;/span&gt;&lt;span&gt;=&quot;Edit&quot;&lt;/span&gt;&lt;span&gt; asp-route-id&lt;/span&gt;&lt;span&gt;=&quot;@Model.Id&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Edit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; |
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-action&lt;/span&gt;&lt;span&gt;=&quot;Index&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Back to List&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　启动程序,从列表页的超连接Details点击进入，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/151560/201903/151560-20190311114312053-1184150825.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　&lt;strong&gt;　2.7 编辑页Movies/ Edit.cshtml&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　对于编辑页有二个action， 一个是Get用来提取数据填充到表单，一个是Post用来提交修改的表单数据。&lt;/p&gt;
&lt;p&gt;　　　　(1) post中的Bind特性是对需要的属性进行更新。&lt;/p&gt;
&lt;p&gt;　　　　(2) ValidateAntiForgeryToken特性用于防止请求伪造, 生成的隐藏的 XSRF 标记 Input name=&quot;__RequestVerificationToken&quot;。用在Post提交的比如修改和删除功能等。&lt;/p&gt;
&lt;p&gt;　　　　(3) 模型验证asp-validation-for是指表单Post到服务器之前，客户端验证会检查字段上的任何验证规则。 如果有任何验证错误，则将显示错误消息，并且不会Post表单，内部是输入标记帮助程序使用 DataAnnotations 特性，并在客户端上生成 jQuery 验证所需的 HTML 特性。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
       &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; Edit(&lt;span&gt;int&lt;/span&gt;?&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (id == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NotFound();
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; movie = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _MvcMovieContext.Movie.FindAsync(id);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (movie == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NotFound();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(movie);
        }
        
       [HttpPost]
        [ValidateAntiForgeryToken]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; Edit(&lt;span&gt;int&lt;/span&gt; id, [Bind(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id,Title,ReleaseDate,Genre,Price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)] Movie movie)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (id !=&lt;span&gt; movie.Id)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NotFound();
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ModelState.IsValid)
            {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    _MvcMovieContext.Update(movie);
                    &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _MvcMovieContext.SaveChangesAsync();
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (DbUpdateConcurrencyException)
                {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; RedirectToAction(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(movie);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@model StudyMVCDemo.Models.Movie

@{
    ViewData[&quot;Title&quot;] = &quot;Edit&quot;;
}

&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Edit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Movie&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;asp-action&lt;/span&gt;&lt;span&gt;=&quot;Edit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;asp-validation-summary&lt;/span&gt;&lt;span&gt;=&quot;ModelOnly&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;text-danger&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;hidden&quot;&lt;/span&gt;&lt;span&gt; asp-for&lt;/span&gt;&lt;span&gt;=&quot;Id&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;control-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;asp-validation-for&lt;/span&gt;&lt;span&gt;=&quot;Title&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;text-danger&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;ReleaseDate&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;control-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;ReleaseDate&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;asp-validation-for&lt;/span&gt;&lt;span&gt;=&quot;ReleaseDate&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;text-danger&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;Genre&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;control-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;Genre&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;asp-validation-for&lt;/span&gt;&lt;span&gt;=&quot;Genre&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;text-danger&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;Price&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;control-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;asp-for&lt;/span&gt;&lt;span&gt;=&quot;Price&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;asp-validation-for&lt;/span&gt;&lt;span&gt;=&quot;Price&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;text-danger&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;Save&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-primary&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-action&lt;/span&gt;&lt;span&gt;=&quot;Index&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Back to List&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

@section Scripts {
    @{await Html.RenderPartialAsync(&quot;_ValidationScriptsPartial&quot;);}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　　　启动程序,从列表页的Edit点击进入，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/151560/201903/151560-20190311143019764-2070714382.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;strong&gt;2.8 删除&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 删除没有对应的页面，从列表页的Delete点击进入,下面是删除的关键代码&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; DeleteConfirmed(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; movie = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.Movie.FindAsync(id);
    _context.Movie.Remove(movie);
    &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.SaveChangesAsync();
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; RedirectToAction(nameof(Index));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　参考文献&lt;/p&gt;
&lt;p&gt;　　　　&lt;a href=&quot;https://docs.microsoft.com/zh-cn/aspnet/core/tutorials/first-mvc-app/start-mvc?view=aspnetcore-2.2&amp;amp;tabs=visual-studio&quot; target=&quot;_blank&quot;&gt;MVC教程&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 11 Mar 2019 06:56:00 +0000</pubDate>
<dc:creator>花阴偷移</dc:creator>
<og:description>一. MVC介绍 MVC架构模式有助于实现关注点分离。视图和控制器均依赖于模型。 但是，模型既不依赖于视图，也不依赖于控制器。 这是分离的一个关键优势。 这种分离允许模型</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MrHSR/p/10509469.html</dc:identifier>
</item>
<item>
<title>C# 动态加载组件后怎么在开发环境中调试 - 旦旦</title>
<link>http://www.cnblogs.com/DasonKwok/p/10510218.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/DasonKwok/p/10510218.html</guid>
<description>&lt;h2&gt;&lt;strong&gt;动态加载组件&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;那就是简单的&lt;/span&gt;Assembly.Load&lt;span&gt;动态加载&lt;/span&gt;&lt;span&gt;dll&lt;/span&gt;&lt;span&gt;而以。这网上资料也有不少。基本的思路基本上就是在本地上一个指定目录如【&lt;/span&gt;&lt;span&gt;plugs&lt;/span&gt;&lt;span&gt;】存在着一堆&lt;/span&gt;&lt;span&gt;dll&lt;/span&gt;&lt;span&gt;文件。主程序在初始运行时一般会把指定目录下的&lt;/span&gt;&lt;span&gt;dll&lt;/span&gt;&lt;span&gt;一次性用&lt;/span&gt;&lt;span&gt;Assembly.Load&lt;/span&gt;&lt;span&gt;加载进来。只要把指定目录变成从网络加载，或者加载指定目录前先检查网络上的是否有新版本。这就简单做成个最简单版本的热更新。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;多数网上的资料就是然后就没有然后了。很多人就发现产品是通过动态加载组件了。但开发人员根本无法调试啊。不能调试就意味着开发难度大啊。出了&lt;/span&gt;Bug&lt;span&gt;我都不知道怎么查错。难度开发就要像在正式环境那样子不停的写&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;文件。如果这样子的动态加载真的得不尝失。只是简单的动态加载对产品做出的优化可能只是&lt;/span&gt;&lt;span&gt;5%&lt;/span&gt;&lt;span&gt;，但对于开发效率来讲这可不止减少&lt;/span&gt;&lt;span&gt;5%&lt;/span&gt;&lt;span&gt;的问题。当有也有不少人为了能让组件项目能调试都会新建一个项目直接引用组件项目。通过这种曲线救国的方式来解决问题的。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;开发环境中怎么调试&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;用&lt;/span&gt;VS IDE&lt;span&gt;开发时为什么能够调试。&lt;/span&gt;&lt;span&gt;VS IDE&lt;/span&gt;&lt;span&gt;在的操作原理还是通过&lt;/span&gt;&lt;span&gt;Ms-build&lt;/span&gt;&lt;span&gt;来生成程序集的。只有&lt;/span&gt;&lt;span&gt;dll&lt;/span&gt;&lt;span&gt;存在了才能进行调试断点的。这我为动态加载也是加载了&lt;/span&gt;&lt;span&gt;dll&lt;/span&gt;&lt;span&gt;文件了那怎么断点没有效果呢。那细心的人也知道在生成程序集的时，同时还生成了一个同名称的&lt;/span&gt;&lt;span&gt;pdb&lt;/span&gt;&lt;span&gt;文件。有兴趣的朋友可以在百科上找到相关资料。说白了有了这个&lt;/span&gt;&lt;span&gt;pdb&lt;/span&gt;&lt;span&gt;文件才能用&lt;/span&gt;&lt;span&gt;VS IDE&lt;/span&gt;&lt;span&gt;进行调试断点的。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;&lt;span&gt;用&lt;/span&gt;VS&lt;span&gt;建立方案&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/43071/201903/43071-20190311135017562-1977561569.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;MyPlatform为主项目,主要用于动态加载组件。&lt;/p&gt;
&lt;p&gt;MyPlatform.Standard&lt;span&gt;为定义标准的接口项目。所有的基础接口，抽像类都应该出自这个项目。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;MyPlatform.ModuleHelloWord为第一个组件模组。写代码的人第一个功能都是HelloWord。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义组件规则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IPlugModule,IPlugItem&lt;span&gt;为每个组件模组定义好要显示的名称，和调用指定组件时入口方法。先定义了最基本功能以后再加另的功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/43071/201903/43071-20190311135054174-592425254.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;实现第一个组件模组&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;HelloWordModule&lt;span&gt;，&lt;/span&gt;&lt;span&gt;HelloWordPlug&lt;/span&gt;&lt;span&gt;做为第一个组件模组，实现的功能当然也是最简单的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/43071/201903/43071-20190311135136755-1127973222.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/43071/201903/43071-20190311135141441-2003602004.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;实现动态加载&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;想动态加载组件。前两步定义好规则和第一个组件模组也出来了。现在到主项目平台来了。要动态加载还是要一个组件管理功能来管理加载对应的组件模组项目。组件管理只应该有从那里加载模组特定。按这分析。组件管理类&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/43071/201903/43071-20190311135359326-373682549.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按照这定义好完善功能。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/43071/201903/43071-20190311135420360-505596534.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;IDE&lt;span&gt;项目设置&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;为了方便开发调试。对项目使用设置。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;MyPlatform&lt;span&gt;项目&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;》属性&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;》生成&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;》输出&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/43071/201903/43071-20190311135457408-862731166.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;MyPlatform.ModuleHelloWord&lt;span&gt;输出为位置为组件模组加载目录&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/43071/201903/43071-20190311135504095-435434575.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;对解决方案进行设置。右键属性&lt;/span&gt;-&lt;span&gt;》项目依赖。把组件也选上。这所讲的依赖并不是主项目引用了组件项目，而是在生成主项目前先把选中的项目生成成功再生成编译主项目。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/43071/201903/43071-20190311135514837-613019280.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;输出效果&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/43071/201903/43071-20190311135548103-1885737966.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从项目上来看，怎么什么输出信息都没有呢。打开组件目录发现什么都没有。原来都没有生成组件到这个目录。那你可能就是忘记上面提交到第三步设置。请回去看一次。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/43071/201903/43071-20190311135554920-2141985811.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这就简单的能动态加载了。这的思路和网上的基本上都一样的。但发现就是不能断点调试。不能调试这就是在耍流氓嘛。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;修改代码支持断调试&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;查看&lt;/span&gt;Assembly.Load&lt;span&gt;的方法发现有意思的重载。除了加载一个流文件的方法。可以发现还有三个方法是加载两流文件的。一个带有安全参数的方法。不过由于第一个已经过时弃用，建议使用第三个方法。那其实就只有两个方法可用。那就是说在加载时能同时把&lt;/span&gt;&lt;span&gt;pdb&lt;/span&gt;&lt;span&gt;程序调试数据库也能加载了。这就能很好解决&lt;/span&gt;&lt;span&gt;VS IDE&lt;/span&gt;&lt;span&gt;能调用的问题了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/43071/201903/43071-20190311135644541-1141187699.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;改动代码。加载&lt;/span&gt;dll&lt;span&gt;文件时判断&lt;/span&gt;&lt;span&gt;pdb&lt;/span&gt;&lt;span&gt;文件是否存在，存在则一并加载。这方法也使用在&lt;/span&gt;&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;模式下。那正式环境一般不会把&lt;/span&gt;&lt;span&gt;pdb&lt;/span&gt;&lt;span&gt;文件也发布出去。所以就走了分支。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/43071/201903/43071-20190311135656934-1857160887.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;能调试的输出效果&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/43071/201903/43071-20190311135715444-2144801153.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;附上源代码：https://files.cnblogs.com/files/DasonKwok/MyPlatformV1.zip&lt;/p&gt;
</description>
<pubDate>Mon, 11 Mar 2019 06:04:00 +0000</pubDate>
<dc:creator>旦旦</dc:creator>
<og:description>动态加载组件 那就是简单的Assembly.Load动态加载dll而以。这网上资料也有不少。基本的思路基本上就是在本地上一个指定目录如【plugs】存在着一堆dll文件。主程序在初始运行时一般会把指定</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/DasonKwok/p/10510218.html</dc:identifier>
</item>
<item>
<title>go微服务框架go-micro深度学习(五)  stream 调用过程详解 - li-peng</title>
<link>http://www.cnblogs.com/li-peng/p/10510198.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/li-peng/p/10510198.html</guid>
<description>&lt;p&gt;    &lt;a href=&quot;https://www.cnblogs.com/li-peng/p/10365251.html&quot;&gt;上一篇写了一下rpc调用过程的实现方式&lt;/a&gt;，简单来说就是服务端把实现了接口的结构体对象进行反射，抽取方法，签名，保存，客户端调用的时候go-micro封请求数据，服务端接收到请求时，找到需要调用调用的对象和对应的方法，利用反射进行调用，返回数据。 但是没有说stream的实现方式，感觉单独写一篇帖子来说这个更好一些。上一篇帖子是基础，理解了上一篇，stream实现原理一点即破。先说一下使用方式，再说原理。&lt;br/&gt;当前go-micro对 rpc 调用的方式大概如下：&lt;br/&gt;普通的rpc调用 是这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1.连接服务器或者从缓存池得到连接
2.客户端 -&amp;gt;发送数据 -&amp;gt; 服务端接收
3.服务端 -&amp;gt;返回数据 -&amp;gt; 客户端处理数据
4.关闭连接或者把连接返回到缓存池&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当前 rps stream的实现方式 是这样子:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1. 连接服务器
2. 客户端多次发送请求-&amp;gt; 服务端接收
3. 服务端多次返回数据-&amp;gt; 客户端处理数据
4. 关闭连接&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;    当数据量比较大的时候我们可以用stream方式分批次传输数据。对于客户端还是服务端没有限制，我们可以根据自己的需要使用stream方式，使用方式也非常的简单，在定义接口的时候在参数或者返回值前面加上stream然后就可以多次进行传输了，使用的代码还是之前写的例子,代码都在github上：&lt;br/&gt;    比如我的例子中定义了两个使用stream的接口，一个只在返回值使用stream，另一个是在参数和返回值前都加上了stream，最终的使用方式没有区别&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    rpc Stream(model.SRequest) returns (stream model.SResponse) {}
    rpc BidirectionalStream(stream model.SRequest) returns (stream model.SResponse) {}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看一下go-micro为我们生成的代码rpcapi.micro.go里，不要被吓到，生成了很多代码，但是没啥理解不了的&lt;br/&gt;Server端&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Server API for Say service
type SayHandler interface {
    // .... others  
    Stream(context.Context, *model.SRequest, Say_StreamStream) error
    BidirectionalStream(context.Context, Say_BidirectionalStreamStream) error
}
type Say_StreamStream interface {
    SendMsg(interface{}) error
    RecvMsg(interface{}) error
    Close() error
    Send(*model.SResponse) error
}
type Say_BidirectionalStreamStream interface {
    SendMsg(interface{}) error
    RecvMsg(interface{}) error
    Close() error
    Send(*model.SResponse) error
    Recv() (*model.SRequest, error)
}
// .... others &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Client端&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Client API for Say service
type SayService interface { 
    //... others
    Stream(ctx context.Context, in *model.SRequest, opts ...client.CallOption) (Say_StreamService, error)
    BidirectionalStream(ctx context.Context, opts ...client.CallOption) (Say_BidirectionalStreamService, error)
}

type Say_StreamService interface {
    SendMsg(interface{}) error
    RecvMsg(interface{}) error
    Close() error
    Recv() (*model.SResponse, error)
}

type Say_BidirectionalStreamService interface {
    SendMsg(interface{}) error
    RecvMsg(interface{}) error
    Close() error
    Send(*model.SRequest) error
    Recv() (*model.SResponse, error)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;    你会发现参数前面加了 Stream后，生成的代码会把你的参数变成一个接口，这个接口主要要的方法是&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    SendMsg(interface{}) error
    RecvMsg(interface{}) error
    Close() error&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;剩下的两个接口方法是根据你是发送还是接收生成的，如果有发送就会有Send(你的参数)，如果有接收会生成Rev() (你的参数， error),但这两个方法只是为了让你使用时方便，里面调用的还是SendMsg(interface)和RecvMsg(interface)方法，但是他们是怎么工作的，如何多次发送和接收传输的数据，是不是感觉很神奇。&lt;/p&gt;
&lt;p&gt;我就以&lt;code&gt;TsBidirectionalStream&lt;/code&gt; 方法为例开始分析，上一篇和再早之前的帖子已经说了服务端启动的时候都做了哪些操作，这里就不再赘述，&lt;br/&gt;服务端的实现,很简单，不断的获取客户端发过来的数据，再给客户端一次一次的返回一些数据。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/*
 模拟数据
 */
func (s *Say) BidirectionalStream(ctx context.Context, stream rpcapi.Say_BidirectionalStreamStream) error {
    for {
        req, err := stream.Recv()
        if err == io.EOF {
            break
        }
        if err != nil {
            return err
        }
        for i := int64(0); i &amp;lt; req.Count; i++ {
            if err := stream.Send(&amp;amp;model.SResponse{Value: []string {lib.RandomStr(lib.Random(3, 6))}}); err != nil {
                return err
            }
        }
    }
    return nil
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动服务，服务开始监听客户端传过来的数据.....&lt;br/&gt;客户端调用服务端方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 调用 
func TsBidirectionalStream(client rpcapi.SayService) {
    rspStream, err := client.BidirectionalStream(context.Background())
    if err != nil {
        panic(err)
    }
    // send
    go func() {
        rspStream.Send(&amp;amp;model.SRequest{Count: 2})
        rspStream.Send(&amp;amp;model.SRequest{Count: 5})
        // close the stream
        if err := rspStream.Close(); err != nil {
            fmt.Println(&quot;stream close err:&quot;, err)
        }
    }()
     // recv
    idx := 1
    for  {
        rsp, err := rspStream.Recv()

        if err == io.EOF {
            break
        } else if err != nil {
            panic(err)
        }

        fmt.Printf(&quot;test stream get idx %d  data  %v\n&quot;, idx, rsp)
        idx++
    }
    fmt.Println(&quot;Read Value End&quot;)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当客户端在调用rpc的stream方法是要很得到stream&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;rspStream, err := client.BidirectionalStream(context.Background())
// 
func (c *sayService) BidirectionalStream(ctx context.Context, opts ...client.CallOption) (Say_BidirectionalStreamService, error) {
    req := c.c.NewRequest(c.name, &quot;Say.BidirectionalStream&quot;, &amp;amp;model.SRequest{})
    stream, err := c.c.Stream(ctx, req, opts...)
    if err != nil {
        return nil, err
    }
    return &amp;amp;sayServiceBidirectionalStream{stream}, nil
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个调用&lt;code&gt;c.c.Stream(ctx, req, opts...)&lt;/code&gt;是关键，他的内部实现就是和服务器进行连接，然后返回一个stream，进行操作。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;客户端：和服务端建立连接，返回Stream，进行接收和发送数据
服务端：接收客户端连接请求，利用反射找到相应的方法，组织Strem，传给方法，进行数据的发送和接收&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;建立连接的时候就是一次rpc调用，服务端接受连接，然后客户端发送一次调用，但是传输的是空数据，服务端利用反射找到具体的方法，组织stream，调用具体方法，利用这个连接，客户端和服务端进行多次通信。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/342595/201903/342595-20190311135231197-852696411.png&quot; alt=&quot;stream&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 11 Mar 2019 06:02:00 +0000</pubDate>
<dc:creator>li-peng</dc:creator>
<og:description>     '上一篇写了一下rpc调用过程的实现方式' ，简单来说就是服务端把实现了接口的结构体对象进行反射，抽取方法，签名，保存，客户端调用的时候go micr</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/li-peng/p/10510198.html</dc:identifier>
</item>
<item>
<title>【原创】互联网项目中mysql应该选什么事务隔离级别 - 孤独烟</title>
<link>http://www.cnblogs.com/rjzheng/p/10510174.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rjzheng/p/10510174.html</guid>
<description>&lt;p&gt;摘要&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;企业千万家，靠谱没几家。&lt;br/&gt;社招选错家，亲人两行泪。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;祝大家金三银四跳槽顺利！&lt;/p&gt;
&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;开始我们的内容，相信大家一定遇到过下面的一个面试场景&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;面试官：“讲讲mysql有几个事务隔离级别？”&lt;br/&gt;你：“读未提交，读已提交，可重复读，串行化四个！默认是可重复读”&lt;br/&gt;面试官：“为什么mysql选可重复读作为默认的隔离级别？”&lt;br/&gt;(你面露苦色，不知如何回答！)&lt;br/&gt;面试官:&quot;你们项目中选了哪个隔离级别？为什么？&quot;&lt;br/&gt;你：“当然是默认的可重复读，至于原因。。呃。。。”&lt;br/&gt;(然后你就可以回去等通知了！)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了避免上述尴尬的场景，请继续往下阅读！&lt;br/&gt;Mysql默认的事务隔离级别是&lt;strong&gt;可重复读(Repeatable Read)&lt;/strong&gt;，那互联网项目中Mysql也是用默认隔离级别，不做修改么？&lt;br/&gt;OK，不是的，我们在项目中一般用&lt;strong&gt;读已提交(Read Commited)&lt;/strong&gt;这个隔离级别！&lt;br/&gt;what！居然是读已提交，网上不是说这个隔离级别存在&lt;code&gt;不可重复读&lt;/code&gt;和&lt;code&gt;幻读&lt;/code&gt;问题么？不用管么？好，带着我们的疑问开始本文！&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;p&gt;我们先来思考一个问题，在Oracle，SqlServer中都是选择&lt;strong&gt;读已提交(Read Commited)&lt;/strong&gt;作为默认的隔离级别，为什么Mysql不选择&lt;strong&gt;读已提交(Read Commited)&lt;/strong&gt;作为默认隔离级别，而选择&lt;strong&gt;可重复读(Repeatable Read)&lt;/strong&gt;作为默认的隔离级别呢？&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/725429/201903/725429-20190311134825464-1181946735.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;whywhywhy&quot;&gt;Why?Why?Why?&lt;/h3&gt;
&lt;p&gt;这个是有历史原因的，当然要从我们的主从复制开始讲起了！&lt;br/&gt;&lt;em&gt;主从复制，是基于什么复制的？&lt;/em&gt;&lt;br/&gt;是基于binlog复制的！这里不想去搬binlog的概念了，就简单理解为binlog是一个记录数据库更改的文件吧～&lt;br/&gt;&lt;em&gt;binlog有几种格式？&lt;/em&gt;&lt;br/&gt;OK，三种，分别是&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;statement:记录的是修改SQL语句&lt;/li&gt;
&lt;li&gt;row：记录的是每行实际数据的变更&lt;/li&gt;
&lt;li&gt;mixed：statement和row模式的混合&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;那Mysql在5.0这个版本以前，binlog只支持&lt;code&gt;STATEMENT&lt;/code&gt;这种格式！而这种格式在&lt;strong&gt;读已提交(Read Commited)&lt;/strong&gt;这个隔离级别下主从复制是有bug的，因此Mysql将&lt;strong&gt;可重复读(Repeatable Read)&lt;/strong&gt;作为默认的隔离级别！&lt;br/&gt;接下来，就要说说当binlog为&lt;code&gt;STATEMENT&lt;/code&gt;格式，且隔离级别为&lt;strong&gt;读已提交(Read Commited)&lt;/strong&gt;时，有什么bug呢？如下图所示，在主(master)上执行如下事务&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/725429/201903/725429-20190311134942591-1582271936.jpg&quot;/&gt;&lt;br/&gt;此时在主(master)上执行下列语句&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from test；&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;+---+
| b |
+---+
| 3 |
+---+
1 row in set&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是，你在此时在从(slave)上执行该语句，得出输出如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Empty set&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样，你就出现了主从不一致性的问题！原因其实很简单，就是在master上执行的顺序为先删后插！而此时binlog为STATEMENT格式，它记录的顺序为先插后删！从(slave)同步的是binglog，因此从机执行的顺序和主机不一致！就会出现主从不一致！&lt;br/&gt;&lt;em&gt;如何解决？&lt;/em&gt;&lt;br/&gt;解决方案有两种！&lt;br/&gt;(1)隔离级别设为&lt;strong&gt;可重复读(Repeatable Read)&lt;/strong&gt;,在该隔离级别下引入间隙锁。当&lt;code&gt;Session 1&lt;/code&gt;执行delete语句时，会锁住间隙。那么，&lt;code&gt;Ssession 2&lt;/code&gt;执行插入语句就会阻塞住！&lt;br/&gt;(2)将binglog的格式修改为row格式，此时是基于行的复制，自然就不会出现sql执行顺序不一样的问题！奈何这个格式在mysql5.1版本开始才引入。因此由于历史原因，mysql将默认的隔离级别设为&lt;strong&gt;可重复读(Repeatable Read)&lt;/strong&gt;，保证主从复制不出问题！&lt;/p&gt;
&lt;p&gt;那么，当我们了解完mysql选&lt;strong&gt;可重复读(Repeatable Read)&lt;/strong&gt;作为默认隔离级别的原因后，接下来我们将其和&lt;strong&gt;读已提交(Read Commited)&lt;/strong&gt;进行对比，来说明为什么在互联网项目为什么将隔离级别设为&lt;strong&gt;读已提交(Read Commited)&lt;/strong&gt;！&lt;/p&gt;
&lt;h3 id=&quot;对比&quot;&gt;对比&lt;/h3&gt;
&lt;p&gt;ok，我们先明白一点！项目中是不用&lt;strong&gt;读未提交(Read UnCommitted)&lt;/strong&gt;和&lt;strong&gt;串行化(Serializable)&lt;/strong&gt;两个隔离级别，原因有二&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;采用&lt;strong&gt;读未提交(Read UnCommitted)&lt;/strong&gt;,一个事务读到另一个事务未提交读数据，这个不用多说吧，从逻辑上都说不过去！&lt;/li&gt;
&lt;li&gt;采用&lt;strong&gt;串行化(Serializable)&lt;/strong&gt;，每个次读操作都会加锁，快照读失效，一般是使用mysql自带分布式事务功能时才使用该隔离级别！(笔者从未用过mysql自带的这个功能，因为这是XA事务，是强一致性事务，性能不佳！互联网的分布式方案，多采用最终一致性的事务解决方案！)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;也就是说，我们该纠结都只有一个问题，究竟隔离级别是用读已经提交呢还是可重复读？&lt;br/&gt;接下来对这两种级别进行对比，讲讲我们为什么选&lt;strong&gt;读已提交(Read Commited)&lt;/strong&gt;作为事务隔离级别！&lt;br/&gt;假设表结构如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; CREATE TABLE `test` (
`id` int(11) NOT NULL,
`color` varchar(20) NOT NULL,
PRIMARY KEY (`id`)
) ENGINE=InnoDB&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;数据如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;+----+-------+
| id | color |
+----+-------+
|  1 |  red  |
|  2 | white |
|  5 |  red  |
|  7 | white |
+----+-------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了便于描述，下面将&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;可重复读(Repeatable Read)&lt;/strong&gt;，简称为RR；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;读已提交(Read Commited)&lt;/strong&gt;，简称为RC；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;缘由一：在RR隔离级别下，存在间隙锁，导致出现死锁的几率比RC大的多！&lt;/em&gt;&lt;br/&gt;此时执行语句&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from test where id &amp;lt;3 for update;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在RR隔离级别下，存在间隙锁，可以锁住(2,5)这个间隙，防止其他事务插入数据！&lt;br/&gt;而在RC隔离级别下，不存在间隙锁，其他事务是可以插入数据！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ps&lt;/code&gt;:在RC隔离级别下并不是不会出现死锁，只是出现几率比RR低而已！&lt;/p&gt;
&lt;p&gt;&lt;em&gt;缘由二：在RR隔离级别下，条件列未命中索引会锁表！而在RC隔离级别下，只锁行&lt;/em&gt;&lt;br/&gt;此时执行语句&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;update test set color = 'blue' where color = 'red'; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在RC隔离级别下，其先走聚簇索引，进行全部扫描。加锁如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/725429/201903/725429-20190311135044150-2146259021.png&quot;/&gt;&lt;br/&gt;但在实际中，MySQL做了优化，在MySQL Server过滤条件，发现不满足后，会调用unlock_row方法，把不满足条件的记录放锁。&lt;br/&gt;实际加锁如下&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/725429/201903/725429-20190311135057008-2073392330.png&quot;/&gt;&lt;br/&gt;然而，在RR隔离级别下，走聚簇索引，进行全部扫描，最后会将整个表锁上，如下所示&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/725429/201903/725429-20190311135808965-164228503.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;缘由三：在RC隔离级别下，半一致性读(semi-consistent)特性增加了update操作的并发性！&lt;/em&gt;&lt;br/&gt;在5.1.15的时候，innodb引入了一个概念叫做“semi-consistent”，减少了更新同一行记录时的冲突，减少锁等待。&lt;br/&gt;所谓半一致性读就是，一个update语句，如果读到一行已经加锁的记录，此时InnoDB返回记录最近提交的版本，由MySQL上层判断此版本是否满足update的where条件。若满足(需要更新)，则MySQL会重新发起一次读操作，此时会读取行的最新版本(并加锁)！&lt;br/&gt;具体表现如下:&lt;br/&gt;此时有两个Session，Session1和Session2！&lt;br/&gt;Session1执行&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;update test set color = 'blue' where color = 'red'; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;先不Commit事务！&lt;br/&gt;与此同时Ssession2执行&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;update test set color = 'blue' where color = 'white'; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;session 2尝试加锁的时候，发现行上已经存在锁，InnoDB会开启semi-consistent read，返回最新的committed版本(1,red),(2，white),(5,red),(7,white)。MySQL会重新发起一次读操作，此时会读取行的最新版本(并加锁)!&lt;br/&gt;而在RR隔离级别下，Session2只能等待！&lt;/p&gt;
&lt;h3 id=&quot;两个疑问&quot;&gt;两个疑问&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;在RC级别下，不可重复读问题需要解决么？&lt;/em&gt;&lt;br/&gt;不用解决，这个问题是可以接受的！毕竟你数据都已经提交了，读出来本身就没有太大问题！Oracle的默认隔离级别就是RC，你们改过Oracle的默认隔离级别么？&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在RC级别下，主从复制用什么binlog格式？&lt;/em&gt;&lt;br/&gt;OK,在该隔离级别下，用的binlog为row格式，是基于行的复制！Innodb的创始人也是建议binlog使用该格式！&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文啰里八嗦了一篇文章只是为了说明一件事，互联网项目请用：读已提交(Read Commited)这个隔离级别！&lt;/p&gt;
</description>
<pubDate>Mon, 11 Mar 2019 06:00:00 +0000</pubDate>
<dc:creator>孤独烟</dc:creator>
<og:description>摘要 企业千万家，靠谱没几家。 社招选错家，亲人两行泪。 祝大家金三银四跳槽顺利！ 引言 开始我们的内容，相信大家一定遇到过下面的一个面试场景 面试官：“讲讲mysql有几个事务隔离级别？” 你：“读</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rjzheng/p/10510174.html</dc:identifier>
</item>
<item>
<title>Golang 入门系列(八) cron定时任务 - 章为忠</title>
<link>http://www.cnblogs.com/zhangweizhong/p/10505005.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangweizhong/p/10505005.html</guid>
<description>&lt;div readability=&quot;18.488348006214&quot;&gt;
&lt;h2&gt;1、cron 表达式的基本格式&lt;/h2&gt;
&lt;div readability=&quot;6.6409691629956&quot;&gt;
&lt;div readability=&quot;8.8470066518847&quot;&gt; Go 实现的cron 表达式的基本语法跟linux 中的 crontab基本是类似的。cron(计划任务)，就是按照约定的时间，定时的执行特定的任务（job）。cron 表达式 表达了这种约定。 cron 表达式代表了一个时间集合，使用 6 个空格分隔的字段表示。如果对cron 表达式不清楚的，可以看看我之前介绍quartz.net 的文章，&lt;a href=&quot;https://www.cnblogs.com/zhangweizhong/p/4889276.html&quot; target=&quot;_blank&quot;&gt;Quartz.NET总结（二）CronTrigger和Cron表达式&lt;/a&gt; 。&lt;/div&gt;

&lt;/div&gt;
&lt;h2&gt;2、使用的包&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
github.com/robfig/cron
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;3、示例&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;创建最简单的最简单cron任务&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38.5&quot;&gt;
&lt;pre readability=&quot;10&quot;&gt;
package main&lt;p&gt;import (&lt;br/&gt;&quot;github.com/robfig/cron&quot;&lt;br/&gt;&quot;fmt&quot;&lt;br/&gt;)&lt;/p&gt;&lt;p&gt;func main() {&lt;br/&gt;i := 0&lt;br/&gt;c := cron.New()&lt;br/&gt;spec := &quot;*/5 * * * * ?&quot;&lt;br/&gt;c.AddFunc(spec, func() {&lt;br/&gt;i++&lt;br/&gt;fmt.Println(&quot;cron running:&quot;, i)&lt;br/&gt;})&lt;br/&gt;c.Start()&lt;/p&gt;&lt;p&gt;select{}&lt;br/&gt;}
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;pre class=&quot;hljs undefined&quot;&gt;
&lt;code&gt;启动后输出如下：&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
D:\Go_Path\go\src\cronjob&amp;gt;&lt;span&gt;go run singlejob.go
cron running: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
cron running: &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
cron running: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
cron running: &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;
cron running: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;&lt;li&gt;多个定时cron任务&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import (
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;github.com/robfig/cron&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    )

type TestJob &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; {
}

func (&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt; TestJob)Run() {
    fmt.Println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testJob1...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
}

type Test2Job &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; {
}

func (&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt; Test2Job)Run() {
    fmt.Println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testJob2...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动多个任务&lt;/span&gt;
&lt;span&gt;func main() {
    i :&lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
    c :&lt;/span&gt;=&lt;span&gt; cron.New()

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;AddFunc&lt;/span&gt;
    spec := &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*/5 * * * * ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    c.AddFunc(spec, func() {
        i&lt;/span&gt;++&lt;span&gt;
        fmt.Println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cron running:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, i)
    })

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;AddJob方法&lt;/span&gt;
&lt;span&gt;    c.AddJob(spec, TestJob{})
    c.AddJob(spec, Test2Job{})

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动计划任务&lt;/span&gt;
&lt;span&gt;    c.Start()

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭着计划任务, 但是不能关闭已经在执行中的任务.&lt;/span&gt;
&lt;span&gt;    defer c.Stop()

    &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;{}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class=&quot;hljs undefined&quot;&gt;
&lt;code&gt;
启动后输出如下：&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
D:\Go_Path\go\src\cronjob&amp;gt;&lt;span&gt;go run multijob.go
cron running: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
testJob1...
testJob2...
testJob1...
cron running: &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
testJob2...
testJob1...
testJob2...
cron running: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
cron running: &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;
testJob1...
testJob2...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;4、最后&lt;/h2&gt;
&lt;p&gt;以上，就将Golang中如何创建定时任务做了简单介绍，实际使用中，大家可以可结合toml yaml 配置需要定时执行的任务。&lt;/p&gt;
&lt;/div&gt;

</description>
<pubDate>Mon, 11 Mar 2019 05:49:00 +0000</pubDate>
<dc:creator>章为忠</dc:creator>
<og:description>1、cron 表达式的基本格式 Go 实现的cron 表达式的基本语法跟linux 中的 crontab基本是类似的。cron(计划任务)，就是按照约定的时间，定时的执行特定的任务（job）。cron</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangweizhong/p/10505005.html</dc:identifier>
</item>
<item>
<title>Linux网络技术管理及进程管理（week2_day4）--技术流ken - 技术流ken</title>
<link>http://www.cnblogs.com/kenken2018/p/10449938.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenken2018/p/10449938.html</guid>
<description>
&lt;h2&gt;OSI七层模型和TCP/IP四层模型&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1499615/201902/1499615-20190228135026907-421243324.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;p&gt;OSI七层模型：OSI（Open System Interconnection）开放系统互连参考模型是国际标准化组织（ISO）制定的一个用于计算机或通信系统间互联的标准体系。&lt;/p&gt;
&lt;p&gt;TCP/IP四层模型：TCP/IP参考模型是计算机网络的祖父ARPANET和其后继的因特网使用的参考模型。&lt;/p&gt;
&lt;p&gt;分层作用：方便管理&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1499615/201902/1499615-20190228135049358-222883670.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;七层模型优点：&lt;/p&gt;
&lt;p&gt;1、把复杂的网络划分成为更容易管理的层（将整个庞大而复杂的问题划分为若干个容易处理的小问题）&lt;/p&gt;
&lt;p&gt;2、没有一个厂家能完整的提供整套解决方案和所有的设备，协议.&lt;/p&gt;
&lt;p&gt;3、独立完成各自该做的任务，互不影响，分工明确，上层不关心下层具体细节，分层同样有益于网络排错&lt;/p&gt;
&lt;p&gt;功能与代表设备&lt;/p&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p align=&quot;center&quot;&gt;分层&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;84&quot;&gt;
&lt;p align=&quot;center&quot;&gt;名字&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;313&quot;&gt;
&lt;p align=&quot;center&quot;&gt;功能&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;151&quot;&gt;
&lt;p align=&quot;center&quot;&gt;工作在该层的设备&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p align=&quot;center&quot;&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;84&quot;&gt;
&lt;p align=&quot;center&quot;&gt;应用层&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;313&quot;&gt;
&lt;p align=&quot;center&quot;&gt;提供用户界面&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;3&quot; width=&quot;151&quot;&gt;
&lt;p align=&quot;center&quot;&gt;QQ，IE 。应用程序&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p align=&quot;center&quot;&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;84&quot;&gt;
&lt;p align=&quot;center&quot;&gt;表示层&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;313&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;表示数据，进行加密等处理&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p align=&quot;center&quot;&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;84&quot;&gt;
&lt;p align=&quot;center&quot;&gt;会话层&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;313&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;将不同应用程序的数据分离&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p align=&quot;center&quot;&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;84&quot;&gt;
&lt;p align=&quot;center&quot;&gt;传输层&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;313&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;提供可靠或不可靠的传输，在重传前执行纠错&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;151&quot;&gt;
&lt;p align=&quot;center&quot;&gt;防火墙&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p align=&quot;center&quot;&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;84&quot;&gt;
&lt;p align=&quot;center&quot;&gt;网络层&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;313&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;提供逻辑地址，路由器使用它们来选择路径&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;151&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;三层交换机、路由器&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p align=&quot;center&quot;&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;84&quot;&gt;
&lt;p align=&quot;center&quot;&gt;数据链路层&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;313&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;将分组拆分为字节，并讲字节组合成帧，使用MAC地址提供介质访问，执行错误检测，但不纠错&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;151&quot;&gt;
&lt;p align=&quot;center&quot;&gt;二层交换机，网卡&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p align=&quot;center&quot;&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;84&quot;&gt;
&lt;p align=&quot;center&quot;&gt;物理层&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;313&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;在设备之间传输比特，指定电平，电缆速度和电缆针脚&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;151&quot;&gt;
&lt;p align=&quot;center&quot;&gt;集线器&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;互动：为什么现代网络通信过程中用TCP/IP四层模型，而不是用OSI七层模型呢？&lt;/p&gt;
&lt;p&gt;OSI七层模型是理论模型，一般用于理论研究，他的分层有些冗余，实际应用，选择TCP/IP的四层模型。而且 OSI 自身也有缺陷，大多数人都认为 OSI 模型的层次数量与内容可能是最佳的选择，其实并非如此，其中会话层和表示层几乎是空的，而数据链路层和网络层包含内容太多，有很多的子层插入，每个子层都有不同的功能。&lt;/p&gt;

&lt;h2&gt;常见网络相关的协议&lt;/h2&gt;

&lt;p&gt;DNS：域名解析协议 www.baidu.com&lt;/p&gt;
&lt;p&gt;SNMP(Simple Network Management Protocol)网络管理协议&lt;/p&gt;
&lt;p&gt;DHCP(Dynamic Host Configuration Protocol)动态主机配置协议，它是在TCP/IP网络上使客户机获得配置信息的协议&lt;/p&gt;
&lt;p&gt;FTP(File Transfer Protocol)文件传输协议，它是一个标准协议，是在计算机和网络之间交换文件的最简单的方法。&lt;/p&gt;
&lt;p&gt;TFTP(Trivial File Transfer Protocol)：小文件传输协议&lt;/p&gt;
&lt;p&gt;HTTP(Hypertext Transfer Protocol )：超文本传输协议&lt;/p&gt;
&lt;p&gt;HTTPS(Secure Hypertext Transfer Protocol)：安全超文本传输协议，它是由Netscape开发并内置于其浏览器中，用于对数据进行压缩和解压操作.&lt;/p&gt;
&lt;p&gt;ICMP(Internet Control Message Protocol)：Internet控制信息协议,互联网控制报文协议&lt;/p&gt;
&lt;p&gt;ping  ip定义消息类型有：TTL超时、地址的请求与应答、信息的请求与应答、目的地不可到达&lt;/p&gt;
&lt;p&gt;SMTP(Simple Mail Transfer Protocol)：简单邮件传送协议&lt;/p&gt;
&lt;p&gt;TELNET Protocol：虚拟终端协议&lt;/p&gt;
&lt;p&gt;UDP(User Datagram Protocol)：用户数据报协议，它是定义用来在互连网络环境中提供包交换的计算机通信的协议&lt;/p&gt;
&lt;p&gt;TCP（Transmission Control Protocol）：传输控制协议，是一种面向连接的、可靠的、基于字节流的传输层通信协议  log转发：开启一个协议：tcp(三次握手和四次挥手) &lt;/p&gt;

&lt;p&gt;TCP协议和UDP协议的区别&lt;/p&gt;
&lt;h3&gt;（1）TCP协议：TCP（Transmission Control Protocol，传输控制协议）是面向连接的协议，在收发数据前，必须和对方建立可靠的连接。&lt;/h3&gt;
&lt;h3&gt;（2）UDP协议：UDP 是User Datagram Protocol的简称， 中文名是用户数据报协议，是一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务&lt;/h3&gt;
&lt;p&gt;总结：TCP与UDP的区别：&lt;br/&gt;1.基于连接与无连接；&lt;br/&gt;2.对系统资源的要求（TCP较多，UDP少）；&lt;br/&gt;3.UDP程序结构较简单；UDP信息包的标题很短，只有8个字节，相对于TCP的20个字节信息包的额外开销很小。所以传输速度可更快&lt;br/&gt;4.TCP保证数据正确性，UDP可能丢包；TCP保证数据顺序，UDP不保证。&lt;/p&gt;
&lt;p&gt;场景：视频，语音通讯使用udp，或网络环境很好，比如局域网中通讯可以使用udp。  udp数据传输完整性，可以通过应用层的软件来校对就可以了。&lt;/p&gt;
&lt;p&gt;tcp传文件，数据完整性要求高。&lt;/p&gt;

&lt;h2&gt;TCP和UDP 常用端口号名称&lt;/h2&gt;

&lt;p&gt;（1）TCP 端口分配&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;95&quot;&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;84&quot;&gt;
&lt;p&gt;ftp&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;328&quot;&gt;
&lt;p&gt;文件传输服务&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;95&quot;&gt;
&lt;p&gt;22&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;84&quot;&gt;
&lt;p&gt;ssh&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;328&quot;&gt;
&lt;p&gt;安全远程连接服务&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;95&quot;&gt;
&lt;p&gt;23&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;84&quot;&gt;
&lt;p&gt;telnet&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;328&quot;&gt;
&lt;p&gt;远程连接服务&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;95&quot;&gt;
&lt;p&gt;25&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;84&quot;&gt;
&lt;p&gt;smtp&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;328&quot;&gt;
&lt;p&gt;电子邮件服务&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;95&quot;&gt;
&lt;p&gt;53&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;84&quot;&gt;
&lt;p&gt;DNS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;328&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;域名解析服务，有tcp53也有用udp53端口传输&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;95&quot;&gt;
&lt;p&gt;80&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;84&quot;&gt;
&lt;p&gt;http&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;328&quot;&gt;
&lt;p&gt;web服务&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;95&quot;&gt;
&lt;p&gt;443&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;84&quot;&gt;
&lt;p&gt;https&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;328&quot;&gt;
&lt;p&gt;安全web服务&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;互动：如果你不知道哪个端口对应哪个服务怎么办？如873端口是哪个服务的？&lt;/p&gt;
&lt;p&gt;[root@ken~]#  vim /etc/services    #此文件中,包含所有常见端口号及服务名称&lt;/p&gt;

&lt;h2&gt;linux网络相关的调试命令&lt;/h2&gt;

&lt;div readability=&quot;9.5&quot;&gt;
&lt;div readability=&quot;14&quot;&gt;
&lt;p&gt;桥接模式&lt;/p&gt;
&lt;p&gt;虚拟机中的虚拟网络适配器可通过主机中的物理网络适配器直接访问到外部网&lt;br data-filtered=&quot;filtered&quot;/&gt;
相当于在局域网中添加了一台新的、独立的计算机一样&lt;/p&gt;

&lt;p&gt;NAT模式&lt;/p&gt;
&lt;p&gt;相当于虚拟系统把物理主机作为路由器访问互联网，虚拟机和主机在共享一个IP地址&lt;/p&gt;

&lt;p&gt;仅主机模式&lt;/p&gt;
&lt;p&gt;虚拟系统和真实的网络是被隔离开的，相当于两台机器通过双绞线（网线）互连。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;1.修改IP相关信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
[root@ken ~&lt;span&gt;]# ip a
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span&gt;65536&lt;/span&gt; qdisc noqueue state UNKNOWN group &lt;span&gt;default&lt;/span&gt; qlen &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
    link&lt;/span&gt;/loopback &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; brd &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;
    inet &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;&lt;span&gt; scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;/&lt;span&gt;128&lt;/span&gt;&lt;span&gt; scope host 
       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span&gt;1500&lt;/span&gt; qdisc pfifo_fast state UP group &lt;span&gt;default&lt;/span&gt; qlen &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
    link&lt;/span&gt;/ether &lt;span&gt;00&lt;/span&gt;:0c:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;13&lt;/span&gt;:a1:&lt;span&gt;49&lt;/span&gt;&lt;span&gt; brd ff:ff:ff:ff:ff:ff
    inet &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;4.190&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt; brd &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;4.255&lt;/span&gt; scope &lt;span&gt;global&lt;/span&gt;&lt;span&gt; noprefixroute eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::20c:29ff:fe13:a149&lt;/span&gt;/&lt;span&gt;64&lt;/span&gt;&lt;span&gt; scope link 
       valid_lft forever preferred_lft forever&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2. 修改网卡信息&lt;/p&gt;
&lt;p&gt;修改配置文件 /etc/sysconfig/network-scripts/ifcfg-eth0&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
TYPE=&lt;span&gt;Ethernet          
 
PROXY_METHOD&lt;/span&gt;=&lt;span&gt;none
BROWSER_ONLY&lt;/span&gt;=&lt;span&gt;no
BOOTPROTO&lt;/span&gt;=&lt;span&gt;none    # 参数：static静态IP 或dhcp 或none无（不指定），如是none，配上IP地址和static效果一样
DEFROUTE&lt;/span&gt;=&lt;span&gt;yes
IPV4_FAILURE_FATAL&lt;/span&gt;=&lt;span&gt;no
IPV6INIT&lt;/span&gt;=&lt;span&gt;yes
IPV6_AUTOCONF&lt;/span&gt;=&lt;span&gt;yes
IPV6_DEFROUTE&lt;/span&gt;=&lt;span&gt;yes
IPV6_FAILURE_FATAL&lt;/span&gt;=&lt;span&gt;no
IPV6_ADDR_GEN_MODE&lt;/span&gt;=stable-&lt;span&gt;privacy

NAME&lt;/span&gt;=&lt;span&gt;ens33    #网卡名字
UUID&lt;/span&gt;=c713acec-674b-411d-9e61-&lt;span&gt;646482a292ca   #网卡UUID，全球唯一
DEVICE&lt;/span&gt;=&lt;span&gt;ens33   #设备名字，在内核中识别的名字
ONBOOT&lt;/span&gt;=&lt;span&gt;yes    #启用该设备，如果no，表示不启动此网络设备

IPADDR&lt;/span&gt;=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;1.63&lt;/span&gt;&lt;span&gt;    #IP地址
PREFIX&lt;/span&gt;=&lt;span&gt;24&lt;/span&gt;           #子网掩码，24相当于255.&lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
GATEWAY&lt;/span&gt;=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;1.1&lt;/span&gt;    #默认网关&lt;br/&gt;DNS1=8.8.8.8             #DNS地址&lt;br/&gt;DNS2=114.114.114.114
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3.临时添加IP地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
[root@ken ~]# ip a a &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;4.191&lt;/span&gt;&lt;span&gt; dev eth0
[root@ken &lt;/span&gt;~&lt;span&gt;]# ip a
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span&gt;65536&lt;/span&gt; qdisc noqueue state UNKNOWN group &lt;span&gt;default&lt;/span&gt; qlen &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
    link&lt;/span&gt;/loopback &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; brd &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;
    inet &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;&lt;span&gt; scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;/&lt;span&gt;128&lt;/span&gt;&lt;span&gt; scope host 
       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span&gt;1500&lt;/span&gt; qdisc pfifo_fast state UP group &lt;span&gt;default&lt;/span&gt; qlen &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
    link&lt;/span&gt;/ether &lt;span&gt;00&lt;/span&gt;:0c:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;13&lt;/span&gt;:a1:&lt;span&gt;49&lt;/span&gt;&lt;span&gt; brd ff:ff:ff:ff:ff:ff
    inet &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;4.190&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt; brd &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;4.255&lt;/span&gt; scope &lt;span&gt;global&lt;/span&gt;&lt;span&gt; noprefixroute eth0
       valid_lft forever preferred_lft forever
    inet &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;4.191&lt;/span&gt;/&lt;span&gt;32&lt;/span&gt; scope &lt;span&gt;global&lt;/span&gt;&lt;span&gt; eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::20c:29ff:fe13:a149&lt;/span&gt;/&lt;span&gt;64&lt;/span&gt;&lt;span&gt; scope link 
       valid_lft forever preferred_lft forever&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;4.查看端口监听状态&lt;/p&gt;
&lt;p&gt;ss 命令&lt;/p&gt;
&lt;p&gt;常用选项：&lt;/p&gt;
&lt;p&gt;　　-t: 显示tcp链接&lt;/p&gt;
&lt;p&gt;　　-n: 以数字形式显示当前链接的端口&lt;/p&gt;
&lt;p&gt;　　-l: 只显示监听的&lt;/p&gt;
&lt;p&gt;　　-a：显示全部&lt;/p&gt;
&lt;p&gt;　　-p: 显示PID&lt;/p&gt;
&lt;p&gt;常用组合：ss -tnl&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@ken ~]# ss -&lt;span&gt;tnl
State       Recv&lt;/span&gt;-Q Send-&lt;span&gt;Q Local Address:Port               Peer Address:Port              
LISTEN      &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;128&lt;/span&gt;         *:&lt;span&gt;22&lt;/span&gt;                      *:*&lt;span&gt;                  
LISTEN      &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;100&lt;/span&gt;    &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;                      *:*&lt;span&gt;                  
LISTEN      &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;128&lt;/span&gt;        :::&lt;span&gt;22&lt;/span&gt;                     :::*&lt;span&gt;                  
LISTEN      &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;100&lt;/span&gt;       ::&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;                     :::*                  
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;h2&gt; 进程管理&lt;/h2&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程是已启动的可执行程序的运行实例，进程有以下组成部分：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  •已分配内存的地址空间；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  •安全属性，包括所有权凭据和特权；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  •程序代码的一个或多个执行线程；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  •进程状态&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;程序：二进制文件，静态 /bin/date,/usr/sbin/sshd&lt;/span&gt;&lt;br/&gt;&lt;span&gt;进程：是程序运行的过程，动态，有生命周期及运行状态。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;下图所示的是进程的生命周期：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1499615/201902/1499615-20190228141158542-2042315013.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;描述如下：&lt;/p&gt;
&lt;p&gt;父进程复制自己的地址空间（fork  [fɔ:k] 分叉）创建一个新的（子）进程结构。每个新进程分配一个唯一的进程 ID （PID），满足跟踪安全性之需。PID 和父进程 ID （PPID）是子进程环境的元素，任何进程都可以创建子进程，所有进程都是第一个系统进程的后代。&lt;/p&gt;
&lt;p&gt;centos5或6PID为1的进程是： init  &lt;/p&gt;
&lt;p&gt;centos7 PID为1的进程是：     systemd&lt;/p&gt;
&lt;p&gt;僵尸进程：一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵尸进程。&lt;/p&gt;
&lt;p&gt;用自己的话表达:父进程退出了，子进程没有退出，那么这些子进程就没有父进程来管理了，就变成僵尸进程。&lt;/p&gt;

&lt;h3&gt;进程的属性&lt;/h3&gt;

&lt;p&gt;进程ID（PID)：是唯一的数值，用来区分进程&lt;/p&gt;
&lt;p&gt;父进程的ID（PPID)&lt;/p&gt;
&lt;p&gt;启动进程的用户ID（UID）和所归属的组（GID）&lt;/p&gt;
&lt;p&gt;进程状态：状态分为运行R、休眠S、僵尸Z&lt;/p&gt;
&lt;p&gt;进程执行的优先级&lt;/p&gt;
&lt;p&gt;进程所连接的终端名&lt;/p&gt;
&lt;p&gt;进程资源占用：比如占用资源大小（内存、CPU占用量）&lt;/p&gt;

&lt;h3&gt;使用ps查看进程工具&lt;/h3&gt;

&lt;p&gt;1、ps查看进程工具&lt;/p&gt;
&lt;p&gt;例1：常用的参数：&lt;/p&gt;
&lt;p&gt;a: 显示跟当前终端关联的所有进程&lt;/p&gt;
&lt;p&gt;u: 基于用户的格式显示（U: 显示某用户ID所有的进程）&lt;/p&gt;
&lt;p&gt;x: 显示所有进程，不以终端机来区分&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@ken ~&lt;span&gt;]# ps aux
USER        PID &lt;/span&gt;%CPU %&lt;span&gt;MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root          &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.3&lt;/span&gt; &lt;span&gt;125328&lt;/span&gt;  &lt;span&gt;3832&lt;/span&gt; ?        Ss   &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;01&lt;/span&gt; /usr/lib/&lt;span&gt;syst
root          &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt; ?        S    &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt; [kthreadd]
root          &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt; ?        S    &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; [ksoftirqd/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]
root          &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt; ?        S&amp;lt;   &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; [kworker/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;:0H
root          &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt; ?        S    &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; [kworker/&lt;span&gt;u256
root          &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt; ?        S    &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; [migration/&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]
root          &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt; ?        S    &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt; [rcu_bh]
root          &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt; ?        R    &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt; [rcu_sched]
root         &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt; ?        S&amp;lt;   &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; [lru-add-&lt;span&gt;drai
root         &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt; ?        S    &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; [watchdog/&lt;span&gt;0&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注：最后一列[xxxx] 使用方括号括起来的进程是内核态的进程。没有括起来的是用户态进程。&lt;/p&gt;
&lt;p&gt;上面的参数输出每列含意：&lt;/p&gt;
&lt;p&gt;USER: 启动这些进程的用户&lt;/p&gt;
&lt;p&gt;PID: 进程的ID&lt;/p&gt;
&lt;p&gt;%CPU 进程占用的CPU百分比； &lt;br/&gt;%MEM 占用内存的百分比； &lt;/p&gt;
&lt;p&gt;VSZ：进程占用的虚拟内存大小（单位：KB） &lt;br/&gt;RSS：进程占用的物理内存大小（单位：KB） &lt;/p&gt;
&lt;p&gt;STAT：该程序目前的状态，Linux进程有5种基本状态：&lt;/p&gt;
&lt;p&gt;R ：该程序目前正在运作，或者是可被运作；&lt;/p&gt;
&lt;p&gt;     S ：该程序目前正在睡眠当中 (可说是 idle 状态啦！)，但可被某些讯号(signal) 唤醒。&lt;/p&gt;
&lt;p&gt;     T ：该程序目前正在侦测或者是停止了；&lt;/p&gt;
&lt;p&gt;Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态&lt;/p&gt;
&lt;p&gt;D  不可中断状态.  &lt;/p&gt;
&lt;p&gt;5个基本状态后，还可以加一些字母，比如：Ss、R+，如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1499615/201902/1499615-20190228141315297-1390839715.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;它们含意如下:：&lt;/p&gt;
&lt;p&gt;&amp;lt;: 表示进程运行在高优先级上&lt;/p&gt;
&lt;p&gt;N: 表示进程运行在低优先级上&lt;/p&gt;
&lt;p&gt;L: 表示进程有页面锁定在内存中&lt;/p&gt;
&lt;p&gt;s: 表示进程是控制进程&lt;/p&gt;
&lt;p&gt;l: 表示进程是多线程的&lt;/p&gt;
&lt;p&gt;+: 表示当前进程运行在前台&lt;/p&gt;
&lt;p&gt;START：该 process 被触发启动的时间；&lt;/p&gt;
&lt;p&gt;TIME ：该 process 实际使用 CPU 运作的时间。&lt;/p&gt;
&lt;p&gt;COMMAND：该程序的实际指令&lt;/p&gt;

&lt;h3&gt;uptime查看系统负载&lt;/h3&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[root@ken ~&lt;span&gt;]# uptime 
 &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt; up  &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;,  &lt;span&gt;2&lt;/span&gt; users,  load average: &lt;span&gt;0.00&lt;/span&gt;, &lt;span&gt;0.01&lt;/span&gt;, &lt;span&gt;0.04&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;弹出消息含意如下：&lt;/p&gt;
&lt;p&gt;当前时间 系统运行时间 当前登录用户 系统负载1分钟，5分钟，15分钟的平均负载&lt;/p&gt;

&lt;h3&gt;top命令&lt;/h3&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
[root@ken ~&lt;span&gt;]# top
top &lt;/span&gt;- &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt;:&lt;span&gt;03&lt;/span&gt; up  &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;38&lt;/span&gt;,  &lt;span&gt;2&lt;/span&gt; users,  load average: &lt;span&gt;0.07&lt;/span&gt;, &lt;span&gt;0.03&lt;/span&gt;, &lt;span&gt;0.04&lt;/span&gt;&lt;span&gt;
Tasks:  &lt;/span&gt;&lt;span&gt;95&lt;/span&gt; total,   &lt;span&gt;1&lt;/span&gt; running,  &lt;span&gt;94&lt;/span&gt; sleeping,   &lt;span&gt;0&lt;/span&gt; stopped,   &lt;span&gt;0&lt;/span&gt;&lt;span&gt; zombie
&lt;/span&gt;%Cpu(s):  &lt;span&gt;0.0&lt;/span&gt; us,  &lt;span&gt;0.0&lt;/span&gt; sy,  &lt;span&gt;0.0&lt;/span&gt; ni,&lt;span&gt;100.0&lt;/span&gt; id,  &lt;span&gt;0.0&lt;/span&gt; wa,  &lt;span&gt;0.0&lt;/span&gt; hi,  &lt;span&gt;0.0&lt;/span&gt; si,  &lt;span&gt;0.0&lt;/span&gt;&lt;span&gt; s
KiB Mem :   &lt;/span&gt;&lt;span&gt;997956&lt;/span&gt; total,   &lt;span&gt;769528&lt;/span&gt; free,    &lt;span&gt;91376&lt;/span&gt; used,   &lt;span&gt;137052&lt;/span&gt; buff/&lt;span&gt;cache
KiB Swap:  &lt;/span&gt;&lt;span&gt;2097148&lt;/span&gt; total,  &lt;span&gt;2097148&lt;/span&gt; free,        &lt;span&gt;0&lt;/span&gt; used.   &lt;span&gt;750772&lt;/span&gt;&lt;span&gt; avail Mem 

   PID USER      PR  NI    VIRT    RES    SHR S &lt;/span&gt;%CPU %MEM     TIME+&lt;span&gt; COMMAND   
   &lt;/span&gt;&lt;span&gt;638&lt;/span&gt; root      &lt;span&gt;20&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;298712&lt;/span&gt;   &lt;span&gt;6120&lt;/span&gt;   &lt;span&gt;4788&lt;/span&gt; S  &lt;span&gt;0.7&lt;/span&gt;  &lt;span&gt;0.6&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;06.92&lt;/span&gt;&lt;span&gt; vmtoolsd  
   &lt;/span&gt;&lt;span&gt;646&lt;/span&gt; root      &lt;span&gt;20&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;476188&lt;/span&gt;   &lt;span&gt;8996&lt;/span&gt;   &lt;span&gt;6748&lt;/span&gt; S  &lt;span&gt;0.7&lt;/span&gt;  &lt;span&gt;0.9&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00.30&lt;/span&gt; NetworkMa+
     &lt;span&gt;1&lt;/span&gt; root      &lt;span&gt;20&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;125328&lt;/span&gt;   &lt;span&gt;3832&lt;/span&gt;   &lt;span&gt;2576&lt;/span&gt; S  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.4&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;01.30&lt;/span&gt;&lt;span&gt; systemd   
     &lt;/span&gt;&lt;span&gt;2&lt;/span&gt; root      &lt;span&gt;20&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; S  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00.00&lt;/span&gt;&lt;span&gt; kthreadd  
     &lt;/span&gt;&lt;span&gt;3&lt;/span&gt; root      &lt;span&gt;20&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; S  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00.14&lt;/span&gt; ksoftirqd+
     &lt;span&gt;5&lt;/span&gt; root       &lt;span&gt;0&lt;/span&gt; -&lt;span&gt;20&lt;/span&gt;       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; S  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00.00&lt;/span&gt; kworker/&lt;span&gt;0&lt;/span&gt;+
     &lt;span&gt;6&lt;/span&gt; root      &lt;span&gt;20&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; S  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00.14&lt;/span&gt; kworker/u+
     &lt;span&gt;7&lt;/span&gt; root      rt   &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; S  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00.00&lt;/span&gt; migration+
     &lt;span&gt;8&lt;/span&gt; root      &lt;span&gt;20&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; S  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00.00&lt;/span&gt;&lt;span&gt; rcu_bh    
     &lt;/span&gt;&lt;span&gt;9&lt;/span&gt; root      &lt;span&gt;20&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; S  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00.40&lt;/span&gt; rcu_sched 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第1行：系统时间、运行时间、登录终端数、系统负载（三个数值分别为1分钟、5分钟、15分钟内的平均值，数值越小意味着负载越低）。&lt;/p&gt;
&lt;p&gt;第2行：进程总数、运行中的进程数、睡眠中的进程数、停止的进程数、僵死的进程数。&lt;/p&gt;
&lt;p&gt;第3行：用户占用资源百分比、系统内核占用资源百分比、改变过优先级的进程资源百分比、空闲的资源百分比等。其中数据均为CPU数据并以百分比格式显示，例如“97.1 id”意味着有97.1%的CPU处理器资源处于空闲。&lt;/p&gt;
&lt;p&gt;第4行：物理内存总量、内存使用量、内存空闲量、作为内核缓存的内存量。&lt;/p&gt;
&lt;p&gt;第5行：虚拟内存总量、虚拟内存使用量、虚拟内存空闲量、已被提前加载的内存量。&lt;/p&gt;

&lt;h3&gt;lsof命令&lt;/h3&gt;

&lt;p&gt;lsof命令用于查看你进程打开的文件，打开文件的进程，进程打开的端口(TCP、UDP)&lt;/p&gt;
&lt;p&gt;-i&amp;lt;条件&amp;gt;：列出符合条件的进程。（4、6、协议、:端口、 @ip ）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@ken ~]# lsof -i :&lt;span&gt;22&lt;/span&gt;&lt;span&gt;
COMMAND  PID USER   FD   TYPE DEVICE SIZE&lt;/span&gt;/&lt;span&gt;OFF NODE NAME
sshd     &lt;/span&gt;&lt;span&gt;867&lt;/span&gt; root    &lt;span&gt;3u&lt;/span&gt;  IPv4  &lt;span&gt;19361&lt;/span&gt;      0t0  TCP *&lt;span&gt;:ssh (LISTEN)
sshd     &lt;/span&gt;&lt;span&gt;867&lt;/span&gt; root    &lt;span&gt;4u&lt;/span&gt;  IPv6  &lt;span&gt;19370&lt;/span&gt;      0t0  TCP *:ssh (LISTEN)
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 11 Mar 2019 05:31:00 +0000</pubDate>
<dc:creator>技术流ken</dc:creator>
<og:description>OSI七层模型和TCP/IP四层模型 OSI七层模型：OSI（Open System Interconnection）开放系统互连参考模型是国际标准化组织（ISO）制定的一个用于计算机或通信系统间互联</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenken2018/p/10449938.html</dc:identifier>
</item>
</channel>
</rss>