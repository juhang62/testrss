<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>[论文阅读]阿里DIEN深度兴趣进化网络之总体解读 - 罗西的思考</title>
<link>http://www.cnblogs.com/rossiXYZ/p/13796682.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rossiXYZ/p/13796682.html</guid>
<description>&lt;p&gt;之前我们介绍了阿里的深度兴趣网络(Deep Interest Network，以下简称DIN)，一年后阿里再次升级其模型到深度兴趣进化网络(Deep Interest Evolution Network，以下简称DIEN。本系列文章通过解读DIN &amp;amp; DIEN论文以及源码，顺便梳理一些深度学习相关概念和TensorFlow的实现。&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;209.53578802478&quot;&gt;


&lt;h2 id=&quot;0x00-摘要&quot;&gt;0x00 摘要&lt;/h2&gt;
&lt;p&gt;之前我们介绍了阿里的深度兴趣网络(Deep Interest Network，以下简称DIN)，一年后阿里再次升级其模型到深度兴趣进化网络(Deep Interest Evolution Network，以下简称DIEN。&lt;/p&gt;
&lt;p&gt;本系列文章通过解读DIN &amp;amp; DIEN论文以及源码，顺便梳理一些深度学习相关概念和TensorFlow的实现。&lt;/p&gt;
&lt;p&gt;本文是系列第六篇 ：DIEN 论文解读，参考了大量文章，衷心感谢各位兄弟的分享，具体参见文末链接。&lt;/p&gt;
&lt;h2 id=&quot;0x01论文概要&quot;&gt;0x01论文概要&lt;/h2&gt;
&lt;h3 id=&quot;11-文章信息&quot;&gt;1.1 文章信息&lt;/h3&gt;
&lt;h3 id=&quot;12-基本观点&quot;&gt;1.2 基本观点&lt;/h3&gt;
&lt;h4 id=&quot;121-din的问题&quot;&gt;1.2.1 DIN的问题&lt;/h4&gt;
&lt;p&gt;DIN忽略兴趣的变化。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用户的兴趣是不断变化的。例如用户对衣服的喜好，会随季节、时尚风潮以及个人品味的变化而变化，呈现一种连续的变迁趋势。&lt;/li&gt;
&lt;li&gt;在淘宝平台中，用户的兴趣是丰富多样的，且每个兴趣的演变基本互不影响。&lt;/li&gt;
&lt;li&gt;此外，影响最终行为的仅仅是与目标商品相关的兴趣。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;122-dien创新&quot;&gt;1.2.2 DIEN创新&lt;/h4&gt;
&lt;p&gt;作者提出，以前的CTR预估方法都是直接将用户表现的表示向量当作兴趣，而没有通过具体的表现对隐藏的兴趣进行建模。因此提出DIEN【关键 - 兴趣直接导致了连续的行为，所以需要对用户兴趣及其演变建模，从用户历史行为中挖掘用户与目标商品相关的兴趣及演变】。&lt;/p&gt;
&lt;p&gt;DIEN有两个关键模块：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一个是兴趣抽取层：
&lt;ul&gt;&lt;li&gt;&lt;u&gt;从具体的用户表现中通过模拟用户兴趣迁移过程，抽取潜在的兴趣&lt;/u&gt;，主要是利用 GRU + 一个辅助损失（auxiliary loss）。即DIN没有考虑用户历史之间的时序关系，而DIEN则使用了GRU来建模用户历史的时间序列；&lt;/li&gt;
&lt;li&gt;直接使用GRU的缺陷： 隐藏状态 只是表示捕捉行为之间依赖关系，并不能代表兴趣。且目标物体的点击是由最终的兴趣触发的，所以GRU只能学习行为之间的依赖，并不能很好反映用户兴趣；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创新&lt;/strong&gt;：由于&lt;strong&gt;每一步的兴趣状态都会直接导致下一个连续的行为。&lt;/strong&gt; 因此作者提出：辅助损失，使用下一个行为 来监督兴趣状态 的学习；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;一个是兴趣进化层：
&lt;ul&gt;&lt;li&gt;兴趣的多样性会导致兴趣偏移的现象。在相邻的访问中，用户的意图可能非常不同，用户的一个行为可能依赖于很久以前的行为。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;基于从兴趣抽取层获得的兴趣序列基础上加入注意力机制，模拟与当前目标广告相关的兴趣进化过程&lt;/u&gt;。利用AUGRU（带有注意力机制更新门的GRU，attentional update gate，简称AUGRU）建模兴趣变化的过程；&lt;/li&gt;
&lt;li&gt;AUGRU 增强了在 兴趣演化 中 相关兴趣 的影响，同时削弱了兴趣漂移所产生的非相关兴趣效应。通过在更新门中引入注意机制，AUGRU 可以实现针对不同目标物体的特定兴趣演化过程。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;可以这样说，&lt;u&gt;在训练的每一步中，我们为 interest extractor layer 引入了辅助loss。在 interest evolving layer 中加入了attention机制&lt;/u&gt;。&lt;/p&gt;
&lt;h3 id=&quot;13-名词解释&quot;&gt;1.3 名词解释&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;隐式兴趣（latent interest）&lt;/strong&gt;：用户与系统交互的行为是表达兴趣的载体。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;兴趣演变（Interest evolving）&lt;/strong&gt;：受外在环境与内在认知变化的影响，用户的兴趣往往会随时间不断变化。以购买衣服为例，用户对兴趣的喜好，会随季节、时尚风潮以及个人品味的变化而变化。&lt;/p&gt;
&lt;p&gt;因此，&lt;u&gt;想要做好点击率预估，必须在挖掘用户兴趣的同时，抓住用户兴趣的变化过程&lt;/u&gt;。&lt;/p&gt;
&lt;h2 id=&quot;0x02-总体概要&quot;&gt;0x02 总体概要&lt;/h2&gt;
&lt;h3 id=&quot;21-模型架构&quot;&gt;2.1 模型架构&lt;/h3&gt;
&lt;p&gt;DIN架构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1850883/202010/1850883-20201011112145349-169408410.jpg&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;与DIN类似，模型架构同样是由 输入层 + Embedding层 + 连接层 + 多层全连接神经网络 + 输出层的整体架构；&lt;/p&gt;
&lt;p&gt;和DIN不同的是，DIEN把 user behavior 组织成序列数据的形式，并把简单的使用外积完成的activation unit变成一个attention-based GRU网络。&lt;/p&gt;
&lt;p&gt;深度兴趣进化网络分为几层，从下到上依次是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;行为序列层（Behavior Layer）：主要作用是将用户浏览过的商品转换成对应的embedding，并且按照浏览时间做排序，即把原始的id类行为序列特征转换成Embedding行为序列。&lt;/li&gt;
&lt;li&gt;兴趣抽取层（Interest Extractor Layer）：主要作用是通过模拟用户的兴趣迁移过程，基于行为序列提取用户兴趣序列。&lt;/li&gt;
&lt;li&gt;兴趣进化层（Interest Evolving Layer）：主要作用是通过在兴趣抽取层基础上加入Attention机制，模拟与当前目标广告相关的兴趣进化过程，对与目标物品相关的兴趣演化过程进行建模；&lt;/li&gt;
&lt;li&gt;将兴趣表示 和 ad、user profile、context的embedding向量进行拼接。最后使用MLP完成最后的预测；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;再详细点说：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用户历史肯定是一个时间序列，将其喂入RNN，则最后一个状态可以认为包含了所有历史信息。因此，作者&lt;u&gt;用一个双层的GRU&lt;/u&gt;来建模用户兴趣。
&lt;ul&gt;&lt;li&gt;将用户历史接触过的item embedding微量，喂进第一层GRU，输出的就是用户各时刻的兴趣。这一层被称为&lt;strong&gt;Interest Extraction Layer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;将第一层的输出，喂进第二层GRU，并用attention score（基于第一层的输出向量与候选物料计算得出）来控制第二层的GRU的update gate。这一层叫做&lt;strong&gt;Interest Evolving Layer&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interest Evolving Layer的最后一个状态作为用户兴趣的向量表示，与ad, context的特征一同喂入MLP&lt;/strong&gt;，预测点击率。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;0x03-兴趣抽取层&quot;&gt;0x03 兴趣抽取层&lt;/h2&gt;
&lt;h3 id=&quot;31-之前工作&quot;&gt;3.1 之前工作&lt;/h3&gt;
&lt;p&gt;DIEN论文中提到，之前的一些算法，通过引入RNN来发掘和利用行为序列（也就是浏览过的商品序列）中的依赖关系，比直接对行为序列做pooling效果更好。但是这些算法存在的问题就是直接将RNN的隐层输出作为用户的兴趣表示。&lt;u&gt;而商品embedding才是对商品的真实表达，也是对用户兴趣的直接反应，RNN的隐层输出向量未必能够真正表达用户的兴趣&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;因为观测到当前时刻的兴趣直接影响了下一时刻行为的发生&lt;/u&gt;，而GRU对兴趣表示的针对性弱。&lt;u&gt;所以兴趣提取层引入了一个有监督学习，设计了auxiliary loss 损失函数，目的是用&lt;strong&gt;下一时刻的行为监督当前时刻兴趣的学习&lt;/strong&gt;。这样就强行将RNN输出隐层与商品embedding发生交互，如架构图中左侧的Auxiliary Loss所示&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用户的行为是依时间产生的序列数据，所以使用GRU结构的RNN；&lt;/li&gt;
&lt;li&gt;用户当前的兴趣直接导致下一行为的产生，所以设计了辅助损失函数，用下一刻的行为监督当前时刻兴趣的学习；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;32-gru&quot;&gt;3.2 GRU&lt;/h3&gt;
&lt;p&gt;兴趣进化层的基本结构是GRU（Gated Recurrent Unit）网络，如架构中黄色区域所示，&lt;u&gt;即用GRU来对用户行为之间的依赖性进行建模&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;电子商务系统中的用户行为丰富，即使在很短的如两周这样的时间，其历史行为序列也很长。为了在效率和性能之间进行平衡，我们采用GRU对行为进行建模。&lt;/p&gt;
&lt;p&gt;GRU的输入是用户按时间排序的行为序列，也就是行为对应的商品（按照时间步排列的商品embedding向量）。相比传统的序列模型RNN和LSTM，GRU解决了RNN的梯度消失问题；与LSTM相比，GRU的参数更少，训练收敛速度更快。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1850883/202010/1850883-20201011112203724-27991600.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参数解释如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;假设第t个时间步输入e(t)，GRU输出隐单元h(t)；&lt;/li&gt;
&lt;li&gt;令下一个时间步的输入向量 e(t+1) 作为正样本，随机采样负样本 e(t+1) ‘，且 e(t+1) ‘ != e(t) ；&lt;/li&gt;
&lt;li&gt;h(t)与正负样本向量分别做内积；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;33-辅助损失&quot;&gt;3.3 辅助损失&lt;/h3&gt;
&lt;p&gt;为了使序列结构模型的隐藏状态有效地表示潜在兴趣，应该对隐藏状态进行额外的监督，例如引入排名信息。在推荐系统中，&lt;strong&gt;排名损失&lt;/strong&gt;已被广泛用于排名任务。&lt;/p&gt;
&lt;h4 id=&quot;331-辅助损失&quot;&gt;3.3.1 辅助损失&lt;/h4&gt;
&lt;p&gt;辅助loss来源于全部的点击记录，而非针对目标广告，有利于避免梯度消失，将有点击的作为正样本，未点击的作为负样本。&lt;/p&gt;
&lt;p&gt;DIEN定义辅助损失如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1850883/202010/1850883-20201011112219219-900165366.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;332-全局损失&quot;&gt;3.3.2 全局损失&lt;/h4&gt;
&lt;p&gt;DIEN使用的全局损失函数如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Label target 是CTR任务的loss函数；&lt;/li&gt;
&lt;li&gt;将CTR的loss和辅助loss相加作为整个网络的loss进行优化；&lt;/li&gt;
&lt;li&gt;alpha 是平衡最终CTR预测和兴趣表示的超参数；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1850883/202010/1850883-20201011112233579-1880061531.jpg&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;333-辅助损失作用&quot;&gt;3.3.3 辅助损失作用&lt;/h4&gt;
&lt;p&gt;DIEN作者指出GRU只能学习行为之间的依赖，并不能很好反映用户兴趣。Label target 只包含了最终兴趣的监督信息，中间的历史状态 ht 并不能得到监督信息来指导学习。而兴趣可能会导致多个连续行为，&lt;u&gt;因此模型引入Auxiliary Loss来提升兴趣表达的准确性&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1850883/202010/1850883-20201011112249652-1684021524.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;具体来讲，就是利用 t 时刻的行为 b(t+1) 作为监督去学习隐含层向量 ht ,除了利用真实的下一个行为作为正样本之外，&lt;strong&gt;负例&lt;/strong&gt;的选择或是从用户未交互过的商品中随机抽取，或是从已展示给用户但用户没有点击的商品中随机抽取。正负样本分别代表了用户 点击/未点击 的第 t 个物品embedding向量。&lt;/p&gt;
&lt;p&gt;引入Auxiliary Loss的优势有：&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;帮助GRU的隐状态更好地表示用户兴趣。加入了辅助损失，GRU的每一个隐藏状态 都表示用户在 时间下的兴趣状态，所有的兴趣状态点的拼接 构造了一个兴趣序列；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;RNN在建模长序列场景下梯度传播可能并不能很好地影响到序列开始部分，在序列的每个部分引入一个辅助监督信号，可以一定程度上降低优化难度；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Auxiliary Loss可以给Embedding层的学习带来更多的语义信息，学习到的Item对应更好的Embedding。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;34-总结&quot;&gt;3.4 总结&lt;/h3&gt;
&lt;p&gt;经过GRU组成的兴趣抽取层后，用户的行为向量 b ( t ) 被进一步抽象化，形成了兴趣状态向量h ( t )。&lt;/p&gt;
&lt;p&gt;再用一句话总结下，&lt;u&gt;兴趣提取层的作用是挖掘行为序列中商品之间的联系，对用户的兴趣进行提取和表达&lt;/u&gt;。&lt;/p&gt;
&lt;h2 id=&quot;0x04-兴趣进化层&quot;&gt;0x04 兴趣进化层&lt;/h2&gt;
&lt;p&gt;兴趣进化层 Interest Evolution Layer 的主要目标是刻画用户兴趣的进化过程。&lt;/p&gt;
&lt;p&gt;用户兴趣是不断变化的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用户在某一段时间的喜好具有一定的集中性。比如用户可能在一段时间内不断买书，在另一段时间内不断买衣服；&lt;/li&gt;
&lt;li&gt;每种兴趣都有自己的演变趋势，不同种类的兴趣之间很少相互影响，例如买书和买衣服的兴趣基本互不相关；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;用户这种变化会直接影响用户的点击决策。建模用户兴趣的进化过程有两方面的好处：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;追踪用户的interest可以使我们学习final interest的表达时包含更多的历史信息；&lt;/li&gt;
&lt;li&gt;可以根据interest的变化趋势更好地进行CTR预测；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;41-演化规律&quot;&gt;4.1 演化规律&lt;/h3&gt;
&lt;p&gt;随着外部环境和内部认知的变化，用户兴趣也在不断变化，因此用户的行为受不同兴趣的影响。&lt;u&gt;兴趣进化层相比兴趣抽取层的最大特点在于引入Attention机制，为了更有针对性地模拟与目标广告相关的兴趣进化路径&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;推荐模型永远不能脱离具体业务场景，在阿里这种电商环境下，用户非常有可能同时对多品类商品感兴趣，比如在购买“机械键盘”的同时也在查看“衣服”品类下的商品。这样当目标商品是某电子产品时，“机械键盘”相关的兴趣演化路径就要比“衣服”相关的演化路径重要。&lt;/p&gt;
&lt;p&gt;用户兴趣的演化具有如下规律：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Interest Drift：&lt;u&gt;由于兴趣的多样性，兴趣可能会漂移&lt;/u&gt;。用户在某一段时间的interest会有一定的集中性。比如用户可能在一段时间内不断买书，在另一段时间内不断买衣服。&lt;/li&gt;
&lt;li&gt;Interest Individual：一种interest有自己的发展趋势，不同种类的interest之间很少相互影响，例如买书和买衣服的interest基本互不相关。&lt;u&gt;我们只关注与目标物品相关的演化过程&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;42-augru&quot;&gt;4.2 AUGRU&lt;/h3&gt;
&lt;p&gt;基于以上规律，兴趣进化层通过 AUGRU（GRU with Attentional Update gate）来引入注意力机制，通过使用兴趣状态和 target item 计算得到相关性，AUGRU 增强相关兴趣的影响，同时减弱不相关兴趣的影响，进而去捕捉与目标商品相关的兴趣及其演变。&lt;/p&gt;
&lt;p&gt;即通过分析兴趣演化的特征，作者&lt;strong&gt;结合注意力机制的局部激活能力和GRU的序列学习能力来对兴趣演化进行建模&lt;/strong&gt;。这样，在GRU的每个步骤中，注意力机制都可以增强相对兴趣的影响，并减弱来自兴趣漂移的干扰。&lt;/p&gt;
&lt;p&gt;有了用户的兴趣表示，兴趣发展层的作用就是捕获与candidate相关的兴趣发展模式，如架构图中红色区域所示，这里使用了第 2 个 GRU。将 candidate 的 embedding 向量与第 1 个 GRU 的输出隐向量发生交互，生成attention 分数。需要注意的是，与 DIN 不同，这里的 attention 分数采用 softmax 做了归一化。&lt;u&gt;attention 分数 反应了目标物品 和当前兴趣状态 的关系，相关性越大，则分数越大&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1850883/202010/1850883-20201011112308520-505672513.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;43-attention&quot;&gt;4.3 attention&lt;/h3&gt;
&lt;p&gt;attention计算如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1850883/202010/1850883-20201011112321257-1259011679.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如何将attention机制加到GRU中呢？文中尝试了3种方法&lt;/p&gt;
&lt;ul readability=&quot;8&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;&lt;strong&gt;GRU with attentional input (AIGRU)&lt;/strong&gt;：在输入中结合注意力机制。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;AIGRU使用注意力评分影响兴趣进化层的输入。即直接将attention系数和输入相乘&lt;/u&gt;。在理想的情况下，相关兴趣越少，输入值越小，那么我们就可以对与目标项目相关的兴趣进化趋势进行建模。然而，AIGRU的表现并不好。因为即使是零输入也会改变GRU的隐藏状态，所以相对兴趣越少，也会影响兴趣进化的学习。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;Attention based GRU(AGRU)：&lt;/strong&gt; 将注意力分数替换GRU的更新门（利用注意力score来控制hidden state的更新），直接地改变了隐藏状态。即直接将attention系数来替换GRU的update gate，直接对隐状态进行更新。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;AGRU利用注意力得分直接控制隐藏状态的更新，削弱了兴趣演变过程中较少相关兴趣的影响&lt;/u&gt;。将注意力嵌入到GRU中可以改善注意力机制的影响力，并有助于AGRU克服AIGRU的缺陷。虽然AGRU可以使用注意分数直接控制隐藏状态的更新，但它使用一个标量（attention score）代替一个向量，忽略了不同维度间的重要性差异。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;strong&gt;GRU with attentional update gate (AUGRU)：&lt;/strong&gt; 在GRU的更新门中加入注意力分数:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1850883/202010/1850883-20201011112352944-1519630261.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1850883/202010/1850883-20201011112403406-517763560.png&quot; alt=&quot;img&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在AUGRU中，保留更新门的原始尺寸信息，通过注意力分数 来缩放更新门的所有维度，从而导致相关度较小的兴趣对隐藏状态的影响也较小。AUGRU可以更有效地避免利益漂移带来的干扰，并推动相对兴趣平稳发展。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;AUGRU是效果最好的一种。文中将attention分数与update gate相乘，替换原始的update gate，称为AUGRU，其中A指的是Attention，U指的是Update gate。&lt;/p&gt;
&lt;p&gt;我们看一下DIEN这个结构有什么问题。GRU是串行计算结构，要按照时间步一步一步进行计算。DIEN有两个GRU，第2个GRU还要基于第1个GRU的结果来做attention，所以第2个GRU必须要等到第1个GRU全部计算完成才能开始计算，两个GRU单元无法并行计算，所以可能存在时延大的问题，序列越长，时延可能就越长。文中介绍说工业场景输入的序列长度是50，累积两个GRU的时延，相当于序列长度为100的时延。&lt;/p&gt;
&lt;h3 id=&quot;44-特点&quot;&gt;4.4 特点&lt;/h3&gt;
&lt;p&gt;对兴趣进化建模的优点如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;兴趣进化模块可以为最终兴趣的表示提供更多的相关历史信息&lt;/li&gt;
&lt;li&gt;根据兴趣进化趋势预测目标项目的点击率比较好&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;兴趣进化层结合了注意力机制中的局部激活能力和GRU的序列学习能力来实现建模兴趣演化的目标。&lt;/p&gt;
&lt;h2 id=&quot;0x05-总结&quot;&gt;0x05 总结&lt;/h2&gt;
&lt;p&gt;DIEN的主要贡献如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在电商系统中关注了兴趣进化现象，提出了一个新的网络架构对兴趣进化过程进行建模。兴趣进化模型使兴趣表示更丰富，CTR预测更准确。&lt;/li&gt;
&lt;li&gt;与直接以行为为兴趣不同，DIEN中专门设计了兴趣抽取层。针对GRU的隐藏状态对兴趣表示较差的问题，提出了一种辅助损失。&lt;/li&gt;
&lt;li&gt;设计了兴趣进化层。兴趣进化层有效地模拟了与目标项目相关的兴趣进化过程。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下一篇将介绍模型源码整体架构，敬请期待。&lt;/p&gt;
&lt;h2 id=&quot;0xff-参考&quot;&gt;0xFF 参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/John159151/article/details/91377508&quot;&gt;https://blog.csdn.net/John159151/article/details/91377508&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/79060b8db1eb&quot;&gt;【paper reading】Deep Interest Evolution Network for Click-Through Rate Prediction&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54838663&quot;&gt;也评Deep Interest Evolution Network&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/134170462&quot;&gt;https://zhuanlan.zhihu.com/p/134170462&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/srdlaplace/article/details/89464050&quot;&gt;【读书笔记】Deep Interest Evolution Network for Click-Through Rate Prediction&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/32085405&quot;&gt;人人都能看懂的LSTM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1639105801622260740&quot;&gt;从动图中理解 RNN，LSTM 和 GRU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_41753033/article/details/95937154&quot;&gt;台大李宏毅机器学习(一)——RNN&amp;amp;LSTM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av9770190/?p=25&quot;&gt;李宏毅机器学习(2016)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/6742d10b89a8&quot;&gt;推荐系统遇上深度学习(二十四)–深度兴趣进化网络DIEN原理及实战！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u012193416/article/details/86301899&quot;&gt;from google.protobuf.pyext import _message，使用tensorflow出现 ImportError: DLL load failed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Eric_1993/article/details/107882557&quot;&gt;DIN 深度兴趣网络介绍以及源码浅析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_35564813/article/details/90714056&quot;&gt;https://blog.csdn.net/qq_35564813/article/details/90714056&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_35564813/article/details/90723139&quot;&gt;阿里CTR预估三部曲(2)：Deep Interest Evolution Network for Click-Through Rate Prediction简析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/6742d10b89a8&quot;&gt;推荐系统遇上深度学习(二十四)–深度兴趣进化网络DIEN原理及实战！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Blank_spaces/article/details/107194648&quot;&gt;【论文导读】2019阿里CTR预估模型—DIEN(深度兴趣演化网络)&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Sat, 31 Oct 2020 00:45:00 +0000</pubDate>
<dc:creator>罗西的思考</dc:creator>
<og:description>之前我们介绍了阿里的深度兴趣网络(Deep Interest Network，以下简称DIN)，一年后阿里再次升级其模型到深度兴趣进化网络(Deep Interest Evolution Networ</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/rossiXYZ/p/13796682.html</dc:identifier>
</item>
<item>
<title>21个写SQL的好习惯，你值得拥有 - Jay_huaxiao</title>
<link>http://www.cnblogs.com/jay-huaxiao/p/13905103.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jay-huaxiao/p/13905103.html</guid>
<description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;每一个好习惯都是一笔财富，本文分SQL后悔药， SQL性能优化，SQL规范优雅三个方向，分享写SQL的21个好习惯，谢谢阅读，加油哈~&lt;/p&gt;
&lt;p&gt;公众号：&lt;strong&gt;捡田螺的小男孩&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-写完sql先explain查看执行计划（sql性能优化）&quot;&gt;1. 写完SQL先explain查看执行计划（SQL性能优化）&lt;/h4&gt;
&lt;p&gt;日常开发写SQL的时候，尽量养成这个好习惯呀：写完SQL后，用explain分析一下，尤其注意走不走索引。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;explain select * from user where userid =10086 or age =18;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/ee1c1043-2c9e-4c57-9651-86171c537f53.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=aX06OkmoDomMfly76bb2EgVEa34%253D&amp;amp;Expires=1604187587&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;2、操作delete或者update语句，加个limitsql后悔药）&quot;&gt;2、操作delete或者update语句，加个limit(SQL后悔药）&lt;/h4&gt;
&lt;p&gt;在执行删除或者更新语句，尽量加上limit，以下面的这条 SQL 为例吧：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;delete from euser where age &amp;gt; 30 limit 200;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因为加了limit 主要有这些好处：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/96208532-d695-4383-b0e1-43593bd21709.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=HumbEgOVBE6J9WHORGGTWc4mmVY%253D&amp;amp;Expires=1604187719&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;降低写错SQL的代价&lt;/strong&gt;, 你在命令行执行这个SQL的时候，如果不加limit，执行的时候一个&lt;strong&gt;不小心手抖&lt;/strong&gt;，可能数据全删掉了，如果&lt;strong&gt;删错&lt;/strong&gt;了呢？加了limit 200，就不一样了。删错也只是丢失200条数据，可以通过binlog日志快速恢复的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SQL效率很可能更高&lt;/strong&gt;，你在SQL行中，加了limit 1，如果第一条就命中目标return， 没有limit的话，还会继续执行扫描表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免了长事务&lt;/strong&gt;，delete执行时,如果age加了索引，MySQL会将所有相关的行加写锁和间隙锁，所有执行相关行会被锁住，如果删除数量大，会直接影响相关业务无法使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据量大的话，容易把CPU打满&lt;/strong&gt; ,如果你删除数据量很大时，不加 limit限制一下记录数，容易把cpu打满，导致越删越慢的。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;3-设计表的时候，所有表和字段都添加相应的注释（sql规范优雅）&quot;&gt;3. 设计表的时候，所有表和字段都添加相应的注释（SQL规范优雅）&lt;/h4&gt;
&lt;p&gt;这个好习惯一定要养成啦，设计数据库表的时候，所有表和字段都添加相应的注释，后面更容易维护。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;CREATE TABLE `account` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键Id',
  `name` varchar(255) DEFAULT NULL COMMENT '账户名',
  `balance` int(11) DEFAULT NULL COMMENT '余额',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`),
  KEY `idx_name` (`name`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1570068 DEFAULT CHARSET=utf8 ROW_FORMAT=REDUNDANT COMMENT='账户表';
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;反例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;CREATE TABLE `account` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `balance` int(11) DEFAULT NULL,
  `create_time` datetime NOT NULL ,
  `update_time` datetime NOT NULL ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `idx_name` (`name`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1570068 DEFAULT CHARSET=utf8;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;4-sql书写格式，关键字大小保持一致，使用缩进。（sql规范优雅）&quot;&gt;4. SQL书写格式，关键字大小保持一致，使用缩进。（SQL规范优雅）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;正例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT stu.name, sum(stu.score)
FROM Student stu
WHERE stu.classNo = '1班'
GROUP BY stu.name
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;反例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT stu.name, sum(stu.score) from Student stu WHERE stu.classNo = '1班' group by stu.name.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;显然，统一关键字大小写一致，使用缩进对齐，会使你的SQL看起来更优雅~&lt;/p&gt;
&lt;h4 id=&quot;5-insert语句标明对应的字段名称（sql规范优雅）&quot;&gt;5. INSERT语句标明对应的字段名称（SQL规范优雅）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;反例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;insert into Student values ('666','捡田螺的小男孩','100');
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;正例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;insert into Student(student_id,name,score) values ('666','捡田螺的小男孩','100');
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;6-变更sql操作先在测试环境执行，写明详细的操作步骤以及回滚方案，并在上生产前review。（sql后悔药）&quot;&gt;6. 变更SQL操作先在测试环境执行，写明详细的操作步骤以及回滚方案，并在上生产前review。（SQL后悔药）&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;变更SQL操作先在测试环境测试，避免有语法错误就放到生产上了。&lt;/li&gt;
&lt;li&gt;变更Sql操作需要写明详细操作步骤，尤其有依赖关系的时候，如：先修改表结构再补充对应的数据。&lt;/li&gt;
&lt;li&gt;变更Sql操作有回滚方案，并在上生产前，review对应变更SQL。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;7设计数据库表的时候，加上三个字段：主键，create_timeupdate_time。（sql规范优雅）&quot;&gt;7.设计数据库表的时候，加上三个字段：主键，create_time,update_time。（SQL规范优雅）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;反例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;CREATE TABLE `account` (
  `name` varchar(255) DEFAULT NULL COMMENT '账户名',
  `balance` int(11) DEFAULT NULL COMMENT '余额',
) ENGINE=InnoDB AUTO_INCREMENT=1570068 DEFAULT CHARSET=utf8 ROW_FORMAT=REDUNDANT COMMENT='账户表';
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;正例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;CREATE TABLE `account` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键Id',
  `name` varchar(255) DEFAULT NULL COMMENT '账户名',
  `balance` int(11) DEFAULT NULL COMMENT '余额',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`),
  KEY `idx_name` (`name`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1570068 DEFAULT CHARSET=utf8 ROW_FORMAT=REDUNDANT COMMENT='账户表';
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;理由：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;主键一定要加上的，没有主键的表是没有灵魂的&lt;/li&gt;
&lt;li&gt;创建时间和更新时间的话，还是建议加上吧，详细审计、跟踪记录，都是有用的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;阿里开发手册也提到这个点，如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/b5ac6202-f395-41d6-a974-585bb0df3cb3.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=MHxFUy3KoswbowGM26j0dq2TTvs%253D&amp;amp;Expires=1604188072&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;8-写完sql语句，检查whereorder-bygroup-by后面的列，多表关联的列是否已加索引，优先考虑组合索引。（sql性能优化）&quot;&gt;8. 写完SQL语句，检查where,order by,group by后面的列，多表关联的列是否已加索引，优先考虑组合索引。（SQL性能优化）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;反例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from user where address ='深圳' order by age ;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/e33f7ca4-b422-487d-97db-597a4ac6acc7.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=Y7x1n2LBCOU0Ja213wpAt9d7afg%253D&amp;amp;Expires=1604188279&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;添加索引
alter table user add index idx_address_age (address,age)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/e498192c-da12-47ed-ad55-15fb053ccc13.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=EGTaroZm2XcZ4Wza6LkvLMBrK9c%253D&amp;amp;Expires=1604188316&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;9修改或删除重要数据前，要先备份，先备份，先备份（sql后悔药）&quot;&gt;9.修改或删除重要数据前，要先备份，先备份，先备份（SQL后悔药）&lt;/h4&gt;
&lt;p&gt;如果要修改或删除数据，在执行SQL前一定要先备份要修改的数据，万一误操作，还能吃口&lt;strong&gt;后悔药&lt;/strong&gt;~&lt;/p&gt;
&lt;h4 id=&quot;10-where后面的字段，留意其数据类型的隐式转换（sql性能优化）&quot;&gt;10. where后面的字段，留意其数据类型的隐式转换（SQL性能优化）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;反例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//userid 是varchar字符串类型
select * from user where userid =123;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/d5216ae1-0879-48d9-8efe-2fc98bb7ea97.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=6rXztXWQcNtY2Rw2NbTPk%252Bk8mj4%253D&amp;amp;Expires=1604188370&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from user where userid ='123';
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/73776055-698b-494c-94a6-c0c6cadab8ce.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=4phIEBzuDr6r8t4F93dG7mz6oFI%253D&amp;amp;Expires=1604188394&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;理由：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;因为不加单引号时，是字符串跟数字的比较，它们类型不匹配，MySQL会做隐式的类型转换，把它们转换为浮点数再做比较，最后导致索引失效&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;11-尽量把所有列定义为not-null（sql规范优雅）&quot;&gt;11. 尽量把所有列定义为NOT NULL（SQL规范优雅）&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;NOT NULL列更节省空间&lt;/strong&gt;，NULL列需要一个额外字节作为判断是否为 NULL 的标志位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NULL列需要注意空指针问题&lt;/strong&gt;，NULL列在计算和比较的时候，需要注意空指针问题。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;12修改或者删除sql，先写where查一下，确认后再补充-delete-或-update（sql后悔药）&quot;&gt;12.修改或者删除SQL，先写WHERE查一下，确认后再补充 delete 或 update（SQL后悔药）&lt;/h4&gt;
&lt;p&gt;尤其在操作生产的数据时，遇到修改或者删除的SQL，先加个where查询一下，确认OK之后，再执行update或者delete操作&lt;/p&gt;
&lt;h4 id=&quot;13减少不必要的字段返回，如使用select-具体字段-代替-select--（sql性能优化）&quot;&gt;13.减少不必要的字段返回，如使用select &amp;lt;具体字段&amp;gt; 代替 select * （SQL性能优化）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;反例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from employee;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;正例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select id，name from employee;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;理由：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;节省资源、减少网络开销。&lt;/li&gt;
&lt;li&gt;可能用到覆盖索引，减少回表，提高查询效率。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;14所有表必须使用innodb存储引擎（sql规范优雅）&quot;&gt;14.所有表必须使用Innodb存储引擎（SQL规范优雅）&lt;/h4&gt;
&lt;p&gt;Innodb &lt;strong&gt;支持事务，支持行级锁，更好的恢复性&lt;/strong&gt;，高并发下性能更好，所以呢，没有特殊要求（即Innodb无法满足的功能如：列存储，存储空间数据等）的情况下，所有表必须使用Innodb存储引擎&lt;/p&gt;
&lt;h4 id=&quot;15数据库和表的字符集统一使用utf8（sql规范优雅）&quot;&gt;15.数据库和表的字符集统一使用UTF8（SQL规范优雅）&lt;/h4&gt;
&lt;p&gt;统一使用UTF8编码&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;可以避免乱码问题&lt;/li&gt;
&lt;li&gt;可以避免，不同字符集比较转换，导致的索引失效问题&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;16-尽量使用varchar代替-char。（sql性能优化）&quot;&gt;16. 尽量使用varchar代替 char。（SQL性能优化）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;反例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  `deptName` char(100) DEFAULT NULL COMMENT '部门名称'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;正例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;`deptName` varchar(100) DEFAULT NULL COMMENT '部门名称'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;理由：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;因为首先变长字段存储空间小，可以节省存储空间。&lt;/li&gt;
&lt;li&gt;其次对于查询来说，在一个相对较小的字段内搜索，效率更高。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;17-如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。-（sql规范优雅）&quot;&gt;17. 如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。 （SQL规范优雅）&lt;/h4&gt;
&lt;p&gt;这个点，是阿里开发手册中，Mysql的规约。你的字段，尤其是表示枚举状态时，如果含义被修改了，或者状态追加时，为了后面更好维护，需要即时更新字段的注释。&lt;/p&gt;
&lt;h4 id=&quot;18-sql修改数据，养成begin--commit-事务的习惯sql后悔药&quot;&gt;18. SQL修改数据，养成begin + commit 事务的习惯(SQL后悔药)&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;正例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;begin;
update account set balance =1000000
where name ='捡田螺的小男孩';
commit;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;反例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;update account set balance =1000000
where name ='捡田螺的小男孩';
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;19-索引命名要规范，主键索引名为-pk_-字段名；唯一索引名为-uk-_字段名-；-普通索引名则为-idx-_字段名。（sql规范优雅）&quot;&gt;19. 索引命名要规范，主键索引名为 pk_ 字段名；唯一索引名为 uk _字段名 ； 普通索引名则为 idx _字段名。（SQL规范优雅）&lt;/h4&gt;
&lt;p&gt;说明： pk_ 即 primary key；uk _ 即 unique key；idx _ 即 index 的简称。&lt;/p&gt;
&lt;h4 id=&quot;20-where从句中不对列进行函数转换和表达式计算&quot;&gt;20. WHERE从句中不对列进行函数转换和表达式计算&lt;/h4&gt;
&lt;p&gt;假设loginTime加了索引&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select userId,loginTime from loginuser where Date_ADD(loginTime,Interval 7 DAY) &amp;gt;=now();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;正例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;explain  select userId,loginTime from loginuser where  loginTime &amp;gt;= Date_ADD(NOW(),INTERVAL - 7 DAY);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;理由：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;索引列上使用mysql的内置函数，索引失效&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/988f1078-0862-4a1c-a183-1121e818d31b.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=of4lA4MOJXzR1SOU6qJ63T3uE2M%253D&amp;amp;Expires=1604188640&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;21如果修改更新数据过多，考虑批量进行。&quot;&gt;21.如果修改/更新数据过多，考虑批量进行。&lt;/h4&gt;
&lt;p&gt;反例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;delete from account  limit 100000;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;正例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;for each(200次)
{
 delete from account  limit 500;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;理由：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;大批量操作会会造成主从延迟。&lt;/li&gt;
&lt;li&gt;大批量操作会产生大事务，阻塞。&lt;/li&gt;
&lt;li&gt;大批量操作，数据量过大，会把cpu打满。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;参考与感谢&quot;&gt;参考与感谢&lt;/h4&gt;
&lt;h3 id=&quot;公众号&quot;&gt;公众号&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://imgkr2.cn-bj.ufileos.com/096013f8-2706-4251-8a85-077d955b8e13.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;amp;Signature=ZD5w%252Fe8bHOfrwivgYwMa3cjnla4%253D&amp;amp;Expires=1604188706&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 31 Oct 2020 00:06:00 +0000</pubDate>
<dc:creator>Jay_huaxiao</dc:creator>
<og:description>前言 每一个好习惯都是一笔财富，本文分SQL后悔药， SQL性能优化，SQL规范优雅三个方向，分享写SQL的21个好习惯，谢谢阅读，加油哈~ 公众号：捡田螺的小男孩 1. 写完SQL先explain查</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/jay-huaxiao/p/13905103.html</dc:identifier>
</item>
<item>
<title>程序员等级图鉴 - you-men</title>
<link>http://www.cnblogs.com/you-men/p/13905035.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/you-men/p/13905035.html</guid>
<description>&lt;h4 id=&quot;程序员七个级别&quot;&gt;程序员七个级别&lt;/h4&gt;
&lt;h5 id=&quot;码奴&quot;&gt;码奴&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;/*
                非自愿写代码, 也不努力学习, 需要主管监督鞭策才写, 写又写不好, 归根结底, 对代码没有热情,若遇之,可劝其转行.
*/
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;烂程序员&lt;/strong&gt;归入这个角色的人没有任何的技术和能力。对于他的同事们来说，任何他插手的事情都会变成痛苦和折磨,需要重头复工一遍——可能有一种例外，对另外的烂程序员，因为缺乏基本的技能，辨不清自己正在和另一个烂程序员共事。也许这是所有烂程序员的标准特征。这些人本来跟编程没有任何关系——但是，他们却在编程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;无名程序员&lt;/code&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;无名程序员&lt;/strong&gt;典型的程序员大众。码农。能干(通常)但平凡。也许为大公司、集团工作。只是一份工作，不是生活的全部。无可厚非。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031022931645-2115481421.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;观看书籍&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031022945141-955501766.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;日常用语&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031022957057-693135912.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;与产品经理交流&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023008568-503258317.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;码徒&quot;&gt;码徒&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;/*
                编码能力不足但自愿学习, 可择良师教之, 假以时日, 小则胜任工作, 大则前途无量.
*/
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;业余程序员&lt;/strong&gt;业余程序员喜欢编程，而且可以看出来：他们可以成为一个有前途的学生或实习生。他们也许会向开源软件捐赠代码，或在业余时间开发有趣的“只是为了好玩”的程序或网站。他们的程序和想法展现出一种热情和希望。做业余程序员是件不错的事情；这个级别的人能很快的跃升成为一名有工作能力的程序员。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023019922-312708649.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;码农&quot;&gt;码农&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;/*
                也叫码工,按规矩做事, 拿一份粮一份活, 俗称打工心态,一般般过的去
*/
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;普通程序员&lt;/strong&gt;处于这个等级的你是个不错的程序员，有自知之明，认识到自己不是个&lt;em&gt;优秀&lt;/em&gt;程序员。也许永远也不是。天才跟成功通常没有多大牵连。如果你会做生意并有人际交往能力，你也许会非常的成功。如果你是个水平一般的程序员但却想以此为生，你应该聪明的知道，你并不一定需要去编码。不要轻视自知之明的作用。很少人能做到这点。没有天份没什么。要有勇气。弄清你擅长什么，朝这个目标奋斗。坚持不懈。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023036385-1388049817.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;观看书籍&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023049594-1856613697.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;日常用语&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023100523-551471464.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;与产品经理交流&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023111040-1680760718.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;码匠&quot;&gt;码匠&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;/*
                对编程有热情,有悟性,肯钻研,最终可精于一门技术,也就是开发团队里的高级开发或资深开发.
*/
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;有工作能力的程序员&lt;/strong&gt;你是一个职业上成功的软件开发人员。你的技术水平让你受欢迎，你永远不愁找到一份很好的工作。你的同事都很敬仰你。你工作过的每个公司都会由于你的到来而在某方面有提高或增强。但你还能怎样？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023124444-2037949990.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;观看书籍&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023134119-275041264.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;日常用语&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023144389-898311583.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;与产品经理交流&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023158223-229402142.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;码师&quot;&gt;码师&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023211755-564527211.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;/*
                俗称布道师, 掌握编程规律,善于总结, 并传授给别人.在公司里冠以架构师Title,游走于各大论坛之间，谈笑风声，指点码山。
*/
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;著名程序员&lt;/strong&gt;这也是一个很好的级别，但前提是，你有稳定的工作。你在编程界有知名度。但有名并不意味这你可以把它转化成收益或给你带来帮助。有名很好，但&lt;strong&gt;成功&lt;/strong&gt;更好。你可以在一个大的、知名的科技公司工作，或者一个有影响力的小公司工作，或你身处一个规模不大的创业团队里。不管怎样，其他的程序员都听说过你，你在这个领域有积极的影响力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023225487-1993429319.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;观看书籍&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023240463-300292513.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;日常用语&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023250407-1052173032.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;与产品经理交流&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023300163-1291625489.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;码神&quot;&gt;码神&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;/*
                活着的技术领袖，尽管他们已经不再写代码了，江湖仍有他们的传说。如：雷军、马化腾等技术英雄。
*/
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;12.119521912351&quot;&gt;
&lt;p&gt;&lt;strong&gt;成功的程序员&lt;/strong&gt;有知名度，而且通过自己的代码创建了公司——甚至开创了整个行业。这种程序员享有绝对的自由度：自由的选择自己想做的事情。并且能把这种自由分享给跟他一起的程序员同伴。这是大多数程序员都向往渴望的级别。达到这种级别通常更多的是依靠商业技巧，而不是编程。&lt;/p&gt;
&lt;p&gt;例子：&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%AF%94%E5%B0%94%C2%B7%E7%9B%96%E8%8C%A8&quot;&gt;比尔·盖茨&lt;/a&gt;,&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E5%8D%A1%E9%A6%AC%E5%85%8B&quot;&gt;约翰·卡马克&lt;/a&gt;(《雷神之锤》视频游戏创始人),&lt;a href=&quot;https://en.wikipedia.org/wiki/David_Heinemeier_Hansson&quot;&gt;DHH&lt;/a&gt;( Ruby on Rails框架创始人)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;码圣&quot;&gt;码圣&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023313170-240203034.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;/*
                已故技术领袖,他们已成为传奇,连超越的机会都不留给后人.
*/
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;11.990491283677&quot;&gt;
&lt;p&gt;&lt;strong&gt;已经死掉的程序员&lt;/strong&gt;这是最高级别。你的代码存活了下来，超越了你的死亡。你将在计算机史上记下永恒的一笔。其他的程序员将会研究你的成果和著作。你也许获得过图灵奖，或写出过有影响力的论文，或发明了一两件重要的、影响到编程史进程的技术。你不仅仅在维基百科上有条目记录——有专门的网站在致力于研究你的生活和工作。很少有程序员能在有生之年达到这种级别。&lt;/p&gt;
&lt;p&gt;例子：&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%89%BE%E5%85%B9%E8%B5%AB%E5%B0%94%C2%B7%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89&quot;&gt;艾兹赫尔·戴克斯特拉&lt;/a&gt;(获得图灵奖),&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%AB%98%E5%BE%B7%E7%BA%B3&quot;&gt;高德纳&lt;/a&gt;(现代计算机科学的鼻祖),&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%89%BE%E4%BC%A6%C2%B7%E5%87%AF&quot;&gt;艾伦·凯&lt;/a&gt;(获得图灵奖)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1871335/202010/1871335-20201031023324693-1072898142.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 30 Oct 2020 18:34:00 +0000</pubDate>
<dc:creator>you-men</dc:creator>
<og:description>程序员七个级别 码奴 /* 非自愿写代码, 也不努力学习, 需要主管监督鞭策才写, 写又写不好, 归根结底, 对代码没有热情,若遇之,可劝其转行. */ 烂程序员归入这个角色的人没有任何的技术和能力。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/you-men/p/13905035.html</dc:identifier>
</item>
<item>
<title>抽丝剥茧——备忘录设计模式 - MakerStack</title>
<link>http://www.cnblogs.com/onlyzuo/p/13904901.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/onlyzuo/p/13904901.html</guid>
<description>&lt;h2 id=&quot;备忘录设计模式&quot;&gt;备忘录设计模式&lt;/h2&gt;
&lt;p&gt;兄弟们好，今天来和大家聊聊备忘录设计模式。&lt;/p&gt;
&lt;p&gt;它的主要思想是：&lt;strong&gt;保存一个对象在某一时刻的副本，并且该对象的副本在外部不可以被访问，同时该对象的副本可以被内部重新加载和修改&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看到这里，有没有想到我们的序列化。在学习&lt;code&gt;IO&lt;/code&gt;流的时候我们可以通过&lt;code&gt;Serializable&lt;/code&gt;实现对象的序列化，这个序列化的过程就是一个备忘录的过程，通过对当前对象序列化，包含当前的状态，当需要的时候再将这个状态加载进来。&lt;/p&gt;
&lt;p&gt;我们常常见过的游戏存档就是这个实现原理，将所有涉及到对象全部序列化，包含再本地文件中，然后读档的时候再加载进去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们来看一下它类图实现：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/onlyzl/image/raw/master/img/20201026215325.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;它主要有三个角色：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Originator&lt;/code&gt;用来描述一个需要被进行备忘录的对象，&lt;strong&gt;它可以主动的创建一个备忘录，并且设置其状态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Memento&lt;/code&gt;备忘录对象，用来保存&lt;code&gt;Originator&lt;/code&gt;对象的状态，提供两个接口用于读取和设置对象的状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Caretake&lt;/code&gt;。执行具体的备忘录调用。&lt;strong&gt;对于它而言备忘录仅仅可以查看，但不能修改&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们来看一下具体的代码实现：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备忘录接口，一个标识&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;interface Memento{

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;需要记录的对象，宽接口，可以访问备忘录的所有信息&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;class Originator{
    private String state ;

    public Memento createMemento(){
        return new InnerMemento(state);
    }

    public void restoreState(Memento memento){
        this.state = ((InnerMemento)memento).getState();
    }

    public void setState(String state) {
        this.state = state;
    }

    class InnerMemento implements Memento{
        private String state ;

        public InnerMemento(String state){
            this.state = state ;
        }

        public void setState(String state) {
            this.state = state;
        }

        public String getState() {
            return state;
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;具体负责调用，窄接口，仅仅可以查看备忘录&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;class Caretaker{
    private Originator originator ;
    public Caretaker(Originator originator){
        this.originator = originator ;
    }
    public Memento createMemento(){
        return originator.createMemento();
    }
    public void restoreState(Memento memento){
        originator.restoreState(memento);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;具体调用&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public static void main(String[] args) {
        Originator originator = new Originator();
        Caretaker caretaker = new Caretaker(originator);
        //保存当前状态
        Memento memento = caretaker.createMemento();

        originator.setState(&quot;我的&quot;);
        caretaker.createMemento();
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;有没有发现，这个设计模式强调了一个安全访问的原则，通过对不同的接口实现了一个宽接口和窄接口，来实现不同层次的调用。这个模式常常会和命令设计模式联合起来，用来记录&lt;code&gt;undo&lt;/code&gt;操作，例如&lt;code&gt;mysql&lt;/code&gt;持久化。&lt;/p&gt;
&lt;p&gt;好啦，今天的设计模式就到这里了，兄弟们，晚安。&lt;/p&gt;
</description>
<pubDate>Fri, 30 Oct 2020 15:59:00 +0000</pubDate>
<dc:creator>MakerStack</dc:creator>
<og:description>备忘录设计模式 兄弟们好，今天来和大家聊聊备忘录设计模式。 它的主要思想是：保存一个对象在某一时刻的副本，并且该对象的副本在外部不可以被访问，同时该对象的副本可以被内部重新加载和修改 看到这里，有没有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/onlyzuo/p/13904901.html</dc:identifier>
</item>
<item>
<title>RocketMQ4.7.1双主双从集群搭建 - 陈彦斌</title>
<link>http://www.cnblogs.com/chenyanbin/p/13894216.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenyanbin/p/13894216.html</guid>
<description>&lt;p&gt;　　上一集我们已经学会了SpringBoot整合RocketMQ&lt;a href=&quot;https://www.cnblogs.com/chenyanbin/p/13798952.html&quot; target=&quot;_blank&quot;&gt;点我直达&lt;/a&gt;，今天我们来搭建双主双从高性能MQ服务集群。&lt;/p&gt;

&lt;h2&gt;主从架构&lt;/h2&gt;
&lt;p&gt;　　Broker角色，Master提供读写，Slave只支持读，Consumer不用配置，当Master不可用或者繁忙的时候，Consumer会自动切换到Slave节点进行读取。&lt;span&gt;&lt;strong&gt;双主双从，同步复制，异步刷盘&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;h2&gt;集群配置(4台机器)&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;两台部署Broker-Master和NameServer&lt;/li&gt;
&lt;li&gt;两台部署Broker-Slave和NameServer&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;前置条件&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Maven&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Jdk1.8&lt;/li&gt;
&lt;li&gt;RocketMQ 4.7.1&lt;/li&gt;
&lt;li&gt;4台机器，ip分别为如下
&lt;ul&gt;&lt;li&gt;192.168.199.110(&lt;span&gt;&lt;strong&gt;主&lt;/strong&gt;&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;192.168.199.120(&lt;span&gt;&lt;strong&gt;从&lt;/strong&gt;&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;192.168.199.130(&lt;span&gt;&lt;strong&gt;主&lt;/strong&gt;&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;192.168.199.140(&lt;span&gt;&lt;strong&gt;从&lt;/strong&gt;&lt;/span&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;安装依赖项&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;jdk：&lt;a href=&quot;https://www.cnblogs.com/chenyanbin/p/12843149.html&quot; target=&quot;_blank&quot;&gt;点我直达&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;maven：&lt;a href=&quot;https://www.cnblogs.com/chenyanbin/p/13662849.html&quot; target=&quot;_blank&quot;&gt;点我直达&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git安装：&lt;strong&gt;&lt;span&gt;yum install -y git&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt; &lt;/h3&gt;
&lt;h2&gt;上传相应文件及安装目录&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202010/1504448-20201029231733721-738735839.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202010/1504448-20201029233223018-1570503346.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;maven编译&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd /opt/soft/rocketmq-all-4.7.1-source-release


mvn -Prelease-all -DskipTests clean install -U&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;修改启动内存大小&lt;/h3&gt;
&lt;p&gt;　　因为是本地搭建的4台虚拟机，只分配的1G，不把启动内存设置小点，服务跑不起来~&lt;/p&gt;
&lt;p&gt;修改，110、130&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;切换
cd /opt/soft/rocketmq-all-4.7.1-source-release/distribution/target/rocketmq-4.7.1/rocketmq-4.7.1/bin


编辑
vim runserver.sh 



修改参数
原始：
JAVA_OPT=&quot;${JAVA_OPT} -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;

修改为：
JAVA_OPT=&quot;${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改，110、120、130、140&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;切换
cd /opt/soft/rocketmq-all-4.7.1-source-release/distribution/target/rocketmq-4.7.1/rocketmq-4.7.1/bin

编辑
vim runbroker.sh

修改
原始值：
JAVA_OPT=&quot;${JAVA_OPT} -server -Xms8g -Xmx8g -Xmn4g&quot;

修改为：
JAVA_OPT=&quot;${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动，110，130&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;切换
cd /opt/soft/rocketmq-all-4.7.1-source-release/distribution/target/rocketmq-4.7.1/rocketmq-4.7.1

守护进程启动
nohup sh bin/mqnamesrv &amp;amp;

使用：jps，查看是否启动成功&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;192.168.199.110(broker-a，部署nameServer，主)&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;切换
cd /opt/soft/rocketmq-all-4.7.1-source-release/distribution/target/rocketmq-4.7.1/rocketmq-4.7.1/conf/2m-2s-sync

编辑
vim broker-a.properties

修改为如下配置
namesrvAddr=192.168.199.110:9876;192.168.199.130:9876
brokerClusterName=ybchenCluster
brokerName=broker-a
brokerId=0
deleteWhen=04
fileReservedTime=48
brokerRole=SYNC_MASTER
flushDiskType=ASYNC_FLUSH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;切换
cd /opt/soft/rocketmq-all-4.7.1-source-release/distribution/target/rocketmq-4.7.1/rocketmq-4.7.1

守护进程启动
nohup sh bin/mqbroker -c conf/2m-2s-sync/broker-a.properties &amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;192.168.199.120(broker-b，主)&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;切换
cd /opt/soft/rocketmq-all-4.7.1-source-release/distribution/target/rocketmq-4.7.1/rocketmq-4.7.1/conf/2m-2s-sync

编辑
vim broker-b.properties

修改为如下配置
namesrvAddr=192.168.199.110:9876;192.168.199.130:9876
brokerClusterName=ybchenCluster
brokerName=broker-b
brokerId=0
deleteWhen=04
fileReservedTime=48
brokerRole=SYNC_MASTER
flushDiskType=ASYNC_FLUSH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;切换
cd /opt/soft/rocketmq-all-4.7.1-source-release/distribution/target/rocketmq-4.7.1/rocketmq-4.7.1

守护进程启动
nohup sh bin/mqbroker -c conf/2m-2s-sync/broker-b.properties &amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;192.168.199.130(broker-a-s，部署nameServer，从)&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;切换
cd /opt/soft/rocketmq-all-4.7.1-source-release/distribution/target/rocketmq-4.7.1/rocketmq-4.7.1/conf/2m-2s-sync

编辑
vim broker-a-s.properties

修改为如下配置
namesrvAddr=192.168.199.110:9876;192.168.199.130:9876
brokerClusterName=ybchenCluster
brokerName=broker-a
brokerId=1
deleteWhen=04
fileReservedTime=48
brokerRole=SLAVE
flushDiskType=ASYNC_FLUSH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;切换
cd /opt/soft/rocketmq-all-4.7.1-source-release/distribution/target/rocketmq-4.7.1/rocketmq-4.7.1

守护进程启动
nohup sh bin/mqbroker -c conf/2m-2s-sync/broker-a-s.properties &amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;192.168.199.140(broker-b-s，从)&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;切换
cd /opt/soft/rocketmq-all-4.7.1-source-release/distribution/target/rocketmq-4.7.1/rocketmq-4.7.1/conf/2m-2s-sync

编辑
vim broker-b-s.properties

修改为如下配置namesrvAddr=192.168.199.110:9876;192.168.199.130:9876
brokerClusterName=ybchenCluster
brokerName=broker-b
brokerId=1
deleteWhen=04
fileReservedTime=48
brokerRole=SLAVE
flushDiskType=ASYNC_FLUSH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;切换
cd /opt/soft/rocketmq-all-4.7.1-source-release/distribution/target/rocketmq-4.7.1/rocketmq-4.7.1

守护进程启动
nohup sh bin/mqbroker -c conf/2m-2s-sync/broker-b-s.properties &amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;查看启动&lt;/h2&gt;
&lt;p&gt;　　做这几张图太难了，制作成gif，花了半小时~~以下内容都是连续滴&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202010/1504448-20201030012132738-127503452.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202010/1504448-20201030012210547-257387929.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202010/1504448-20201030012254997-886498521.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202010/1504448-20201030012326541-1848083918.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202010/1504448-20201030012347249-871971291.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202010/1504448-20201030012415309-542123743.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;192.168.199.110&lt;/h2&gt;
&lt;p&gt;　　在这台机器上操作，修改配置文件，并启动&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;切换
cd /opt/soft/rocketmq-externals-master/rocketmq-console/src/main/resources


编辑
vim application.properties 

修改为如下配置，指定：rocketmq.config.namesrvAddr
------------------分隔符开始----------------------------------
server.address=0.0.0.0
server.port=8080

### SSL setting
#server.ssl.key-store=classpath:rmqcngkeystore.jks
#server.ssl.key-store-password=rocketmq
#server.ssl.keyStoreType=PKCS12
#server.ssl.keyAlias=rmqcngkey

#spring.application.index=true
spring.application.name=rocketmq-console
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true
logging.level.root=INFO
logging.config=classpath:logback.xml
#if this value is empty,use env value rocketmq.config.namesrvAddr  NAMESRV_ADDR | now, you can set it in ops page.default localhost:9876
rocketmq.config.namesrvAddr=192.168.199.110:9876;192.168.199.130:9876
#if you use rocketmq version &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;&lt;span&gt;.5.8, rocketmq.config.isVIPChannel should be false.default true
rocketmq.config.isVIPChannel&lt;/span&gt;&lt;span&gt;=
#rocketmq-console's &lt;/span&gt;&lt;span&gt;data path:dashboard/monitor
rocketmq.config.dataPath&lt;/span&gt;&lt;span&gt;=/tmp/rocketmq-console/data
&lt;/span&gt;&lt;span&gt;#set it false if you don't want use dashboard.default true
rocketmq.config.enableDashBoardCollect&lt;/span&gt;&lt;span&gt;=true
&lt;/span&gt;&lt;span&gt;#set the message track trace topic if you don't want use the default one
rocketmq.config.msgTrackTopicName&lt;/span&gt;&lt;span&gt;=
rocketmq.config.ticketKey=ticket

&lt;/span&gt;&lt;span&gt;#Must create userInfo file: ${rocketmq.config.dataPath}/users.properties if the login is required
rocketmq.config.loginRequired&lt;/span&gt;&lt;span&gt;=false
&lt;/span&gt;&lt;span&gt;-----------------分隔符结束-----------------------------------


切换
cd /opt/soft/rocketmq-externals-master/rocketmq-console


maven构建项目
mvn install -Dmaven.test.skip&lt;/span&gt;&lt;span&gt;=true


&lt;/span&gt;&lt;span&gt;切换
cd /opt/soft/rocketmq-externals-master/rocketmq-console/target


守护进程启动
nohup java -jar rocketmq-console-ng-2.0.0.jar &amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;访问控制台&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202010/1504448-20201030230327851-469298283.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1504448/202010/1504448-20201030230351550-824785943.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
链接: https://pan.baidu.com/s/1s--VdU-jZvCbS9jHvpHoIA  密码: eq11
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 30 Oct 2020 15:07:00 +0000</pubDate>
<dc:creator>陈彦斌</dc:creator>
<og:description>导读 上一集我们已经学会了SpringBoot整合RocketMQ点我直达，今天我们来搭建双主双从高性能MQ服务集群。 简介 主从架构 Broker角色，Master提供读写，Slave只支持读，Co</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/chenyanbin/p/13894216.html</dc:identifier>
</item>
<item>
<title>线程池的五种状态及创建线程池的几种方式 - 随风奔跑la</title>
<link>http://www.cnblogs.com/JavaGodRoad/p/13904515.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JavaGodRoad/p/13904515.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201025202321328.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzY2MTA0Mw==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上篇《&lt;a href=&quot;https://blog.csdn.net/weixin_47661043/article/details/108554650&quot;&gt;Java线程的6种状态详解及创建线程的4种方式&lt;/a&gt;》&lt;br/&gt;&lt;strong&gt;前言&lt;/strong&gt;：我们都知道，线程是稀有资源，系统频繁创建会很大程度上影响服务器的使用效率，如果不加以限制，很容易就会把服务器资源耗尽。所以，我们可以通过创建线程池来管理这些线程，提升对线程的使用率。&lt;/p&gt;
&lt;h2 id=&quot;1、什么是线程池？&quot;&gt;1、什么是线程池？&lt;/h2&gt;
&lt;p&gt;简而言之，线程池就是管理线程的一个容器，有任务需要处理时，会&lt;strong&gt;相继判断核心线程数是否还有空闲、线程池中的任务队列是否已满、是否超过线程池大小&lt;/strong&gt;，然后调用或创建线程或者排队，线程执行完任务后并不会立即被销毁，而是仍然在线程池中等待下一个任务，如果超过存活时间还没有新的任务就会被销毁，通过这样复用线程从而降低开销。&lt;/p&gt;
&lt;h2 id=&quot;2、使用线程池有什么优点？&quot;&gt;2、使用线程池有什么优点？&lt;/h2&gt;
&lt;p&gt;可能有人就会问了，使用线程池有什么好处吗？那不用说，好处自然是有滴。大概有以下：&lt;br/&gt;1、&lt;strong&gt;提升线程池中线程的使用率&lt;/strong&gt;，减少对象的创建、销毁。&lt;br/&gt;2、线程池的&lt;strong&gt;伸缩性&lt;/strong&gt;对性能有较大的影响，使用线程池可以控制线程数，有效的提升服务器的使用资源，避免由于资源不足而发生宕机等问题。(&lt;strong&gt;创建太多线程，将会浪费一定的资源，有些线程未被充分使用；销毁太多线程，将导致之后浪费时间再次创建它们；创建线程太慢，将会导致长时间的等待，性能变差；销毁线程太慢，导致其它线程资源饥饿。&lt;/strong&gt;)&lt;/p&gt;
&lt;h2 id=&quot;3、线程池的核心工作流程重要&quot;&gt;3、线程池的核心工作流程(重要)&lt;/h2&gt;
&lt;p&gt;我们要使用线程池得先了解它是怎么工作的，流程如下图，废话不多说看图就行。&lt;strong&gt;核心就是复用线程，降低开销。&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201024225637770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzY2MTA0Mw==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;线程池的工作流程&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;4、线程池的五种状态生命周期&quot;&gt;4、线程池的五种状态生命周期&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;RUNNING ：能接受新提交的任务，并且也能处理阻塞队列中的任务。&lt;/li&gt;
&lt;li&gt;SHUTDOWN：关闭状态，不再接受新提交的任务，但却可以继续处理阻塞队列中已保存的任务。在线程池处于 RUNNING 状态时，调用 shutdown() 方法会使线程池进入到该状态。（finalize() 方法在执行过程中也会调用 shutdown() 方法进入该状态）。&lt;/li&gt;
&lt;li&gt;STOP：不能接受新任务，也不处理队列中的任务，会中断正在处理任务的线程。在线程池处于 RUNNING 或 SHUTDOWN 状态时，调用 shutdownNow() 方法会使线程池进入到该状态。&lt;/li&gt;
&lt;li&gt;TIDYING：如果所有的任务都已终止了，workerCount (有效线程数) 为0，线程池进入该状态后会调用 terminated() 方法进入 TERMINATED 状态。&lt;/li&gt;
&lt;li&gt;TERMINATED：在 terminated() 方法执行完后进入该状态，默认 terminated() 方法中什么也没有做。&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201024212954355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzY2MTA0Mw==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;线程池的生命周期流程图&quot; loading=&quot;lazy&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;5、创建线程池的几种方式&quot;&gt;5、创建线程池的几种方式&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;通过 Executors 工厂方法创建&lt;/li&gt;
&lt;li&gt;通过 new ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue workQueue) 自定义创建&lt;br/&gt;相对而言，更建议用第二个创建线程池，Executors 创建的线程池内部很多地方用到了无界任务队列，在高并发场景下，无界任务队列会接收过多的任务对象，严重情况下会导致 JVM 崩溃，一些大厂也是禁止使用 Executors 工厂方法去创建线程池。newFixedThreadPool 和 newSingleThreadExecutor 的主要问题是堆积的请求处理队列可能会耗费非常大的内存，甚至 OOM；newCachedThreadPool 和 newScheduledThreadPool 的主要问题是线程数最大数是 Integer.MAX_VALUE，可能会创建数量非常多的线程，甚至 OOM。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;51、executors-五个工厂方法创建不同线程池的区别&quot;&gt;5.1、Executors 五个工厂方法创建不同线程池的区别&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201024232534836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzY2MTA0Mw==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;&lt;strong&gt;1、newCachedThreadPool()&lt;/strong&gt;（工作队列使用的是 SynchronousQueue）&lt;br/&gt;创建一个线程池，如果线程池中的线程数量过大，它可以有效的回收多余的线程，如果线程数不足，那么它可以创建新的线程。&lt;br/&gt;不足：这种方式虽然可以根据业务场景自动的扩展线程数来处理我们的业务，但是最多需要多少个线程同时处理却是我们无法控制的。&lt;br/&gt;优点：如果当第二个任务开始，第一个任务已经执行结束，那么第二个任务会复用第一个任务创建的线程，并不会重新创建新的线程，提高了线程的复用率。&lt;br/&gt;作用：该方法返回一个可以根据实际情况调整线程池中线程的数量的线程池。即该线程池中的线程数量不确定，是根据实际情况动态调整的。&lt;br/&gt;&lt;strong&gt;2、newFixedThreadPool()&lt;/strong&gt;（工作队列使用的是 LinkedBlockingQueue）&lt;br/&gt;这种方式可以指定线程池中的线程数。如果满了后又来了新任务，此时只能排队等待。&lt;br/&gt;优点：newFixedThreadPool 的线程数是可以进行控制的，因此我们可以通过控制最大线程来使我们的服务器达到最大的使用率，同时又可以保证即使流量突然增大也不会占用服务器过多的资源。&lt;br/&gt;作用：该方法返回一个固定线程数量的线程池，该线程池中的线程数量始终不变，即不会再创建新的线程，也不会销毁已经创建好的线程，自始自终都是那几个固定的线程在工作，所以该线程池可以控制线程的最大并发数。&lt;br/&gt;&lt;strong&gt;3、newScheduledThreadPool()&lt;/strong&gt;&lt;br/&gt;该线程池支持定时，以及周期性的任务执行，我们可以延迟任务的执行时间，也可以设置一个周期性的时间让任务重复执行。该线程池中有以下两种延迟的方法。&lt;br/&gt;scheduleAtFixedRate 不同的地方是任务的执行时间，如果间隔时间大于任务的执行时间，任务不受执行时间的影响。如果间隔时间小于任务的执行时间，那么任务执行结束之后，会立马执行，至此间隔时间就会被打乱。&lt;br/&gt;scheduleWithFixedDelay 的间隔时间不会受任务执行时间长短的影响。&lt;br/&gt;作用：该方法返回一个可以控制线程池内线程定时或周期性执行某任务的线程池。&lt;br/&gt;&lt;strong&gt;4、newSingleThreadExecutor()&lt;/strong&gt;&lt;br/&gt;这是一个单线程池，至始至终都由一个线程来执行。&lt;br/&gt;作用：该方法返回一个只有一个线程的线程池，即每次只能执行一个线程任务，多余的任务会保存到一个任务队列中，等待这一个线程空闲，当这个线程空闲了再按 FIFO 方式顺序执行任务队列中的任务。&lt;br/&gt;&lt;strong&gt;5、newSingleThreadScheduledExecutor()&lt;/strong&gt;&lt;br/&gt;只有一个线程，用来调度任务在指定时间执行。&lt;br/&gt;作用：该方法返回一个可以控制线程池内线程定时或周期性执行某任务的线程池。只不过和上面的区别是该线程池大小为 1，而上面的可以指定线程池的大小。&lt;br/&gt;使用示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;//创建一个会根据需要创建新线程的线程池
ExecutorService executor= Executors.newCachedThreadPool();
for (int i = 0; i &amp;lt; 20; i++) {
        executor.submit(new Runnable() {
                @Override
        public void run() {
                System.out.println(i);
        }
    });
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这五种线程池都是直接或者间接获取的 ThreadPoolExecutor 实例 ，只是实例化时传递的参数不一样。所以如果 Java 提供的线程池满足不了我们的需求，我们可以通过 ThreadPoolExecutor 构造方法创建自定义线程池。&lt;/p&gt;
&lt;h3 id=&quot;52、threadpoolexecutor-构造方法参数详解&quot;&gt;5.2、ThreadPoolExecutor 构造方法参数详解&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;public ThreadPoolExecutor(
int corePoolSize,//线程池核心线程大小
int maximumPoolSize,//线程池最大线程数量
long keepAliveTime,//空闲线程存活时间
TimeUnit unit,//空闲线程存活时间单位，一共有七种静态属性(TimeUnit.DAYS天,TimeUnit.HOURS小时,TimeUnit.MINUTES分钟,TimeUnit.SECONDS秒,TimeUnit.MILLISECONDS毫秒,TimeUnit.MICROSECONDS微妙,TimeUnit.NANOSECONDS纳秒)
BlockingQueue&amp;lt;Runnable&amp;gt; workQueue,//工作队列
ThreadFactory threadFactory,//线程工厂，主要用来创建线程(默认的工厂方法是：Executors.defaultThreadFactory()对线程进行安全检查并命名)
RejectedExecutionHandler handler//拒绝策略(默认是：ThreadPoolExecutor.AbortPolicy不执行并抛出异常)
) 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;ThreadPoolExecutor executor = new ThreadPoolExecutor(5, 20, 2, TimeUnit.SECONDS, new LinkedBlockingQueue&amp;lt;&amp;gt;(5));
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;521、工作队列&quot;&gt;5.2.1、工作队列&lt;/h4&gt;
&lt;p&gt;jdk 中提供了四种工作队列：&lt;br/&gt;①ArrayBlockingQueue&lt;br/&gt;基于数组的有界阻塞队列，按 FIFO 排序。新任务进来后，会放到该队列的队尾，有界的数组可以防止资源耗尽问题。当线程池中线程数量达到 corePoolSize 后，再有新任务进来，则会将任务放入该队列的队尾，等待被调度。如果队列已经是满的，则创建一个新线程，如果线程数量已经达到 maxPoolSize，则会执行拒绝策略。&lt;br/&gt;②LinkedBlockingQuene&lt;br/&gt;基于链表的无界阻塞队列（其实最大容量为 Interger.MAX_VALUE），按照 FIFO 排序。由于该队列的近似无界性，当线程池中线程数量达到 corePoolSize 后，再有新任务进来，会一直存入该队列，而不会去创建新线程直到 maxPoolSize，因此使用该工作队列时，参数 maxPoolSize 其实是不起作用的。&lt;br/&gt;③SynchronousQuene&lt;br/&gt;一个不缓存任务的阻塞队列，生产者放入一个任务必须等到消费者取出这个任务。也就是说新任务进来时，不会缓存，而是直接被调度执行该任务，如果没有可用线程，则创建新线程，如果线程数量达到 maxPoolSize，则执行拒绝策略。&lt;br/&gt;④PriorityBlockingQueue&lt;br/&gt;具有优先级的无界阻塞队列，优先级通过参数 Comparator 实现。&lt;/p&gt;
&lt;h4 id=&quot;522、拒绝策略&quot;&gt;5.2.2、拒绝策略&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;当工作队列中的任务已到达最大限制，并且线程池中的线程数量也达到最大限制，这时如果有新任务提交进来，就会执行拒绝策略&lt;/strong&gt;。jdk中提供了4中拒绝策略：&lt;br/&gt;①ThreadPoolExecutor.CallerRunsPolicy&lt;br/&gt;该策略下，在调用者线程中直接执行被拒绝任务的 run 方法，除非线程池已经 shutdown，则直接抛弃任务。&lt;br/&gt;②ThreadPoolExecutor.AbortPolicy&lt;br/&gt;该策略下，直接丢弃任务，并抛出 RejectedExecutionException 异常。&lt;br/&gt;③ThreadPoolExecutor.DiscardPolicy&lt;br/&gt;该策略下，直接丢弃任务，什么都不做。&lt;br/&gt;④ThreadPoolExecutor.DiscardOldestPolicy&lt;br/&gt;该策略下，抛弃进入队列最早的那个任务，然后尝试把这次拒绝的任务放入队列。&lt;br/&gt;除此之外，还可以根据应用场景需要来实现 RejectedExecutionHandler 接口自定义策略。&lt;/p&gt;
&lt;h2 id=&quot;6、线程池的关闭&quot;&gt;6、线程池的关闭&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;shutdown():&lt;br/&gt;1、调用之后不允许继续往线程池内添加线程;&lt;br/&gt;2、线程池的状态变为 SHUTDOWN 状态;&lt;br/&gt;3、所有在调用 shutdown() 方法之前提交到 ExecutorSrvice 的任务都会执行;&lt;br/&gt;4、一旦所有线程结束执行当前任务，ExecutorService 才会真正关闭。&lt;/li&gt;
&lt;li&gt;shutdownNow():&lt;br/&gt;1、该方法返回尚未执行的 task 的 List;&lt;br/&gt;2、线程池的状态变为 STOP 状态;&lt;br/&gt;3、尝试停止所有的正在执行或暂停任务的线程。&lt;br/&gt;简单点来说，就是:&lt;br/&gt;shutdown() 调用后，不可以再 submit 新的 task，已经 submit 的将继续执行&lt;br/&gt;shutdownNow() 调用后，试图停止当前正在执行的 task，并返回尚未执行的 task 的 list&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;7、总结&quot;&gt;7、总结&lt;/h2&gt;
&lt;p&gt;本文简单介绍了线程池的一些相关知识，相信大家对线程池的优点，线程池的生命周期，线程池的工作流程及线程池的使用有了一个大概的了解，也希望能对有需要的人提供一点帮助！文中有错误的地方，还请留言给予指正，谢谢~&lt;br/&gt;也欢迎大家关注我的公众号：Java的成神之路，免费领取最新面试资料，技术电子书，架构进阶相关资料等。&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201025162126497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzY2MTA0Mw==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 30 Oct 2020 14:05:00 +0000</pubDate>
<dc:creator>随风奔跑la</dc:creator>
<og:description>﻿ 上篇《Java线程的6种状态详解及创建线程的4种方式》 前言：我们都知道，线程是稀有资源，系统频繁创建会很大程度上影响服务器的使用效率，如果不加以限制，很容易就会把服务器资源耗尽。所以，我们可以通</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/JavaGodRoad/p/13904515.html</dc:identifier>
</item>
<item>
<title>MySQL全面瓦解4：数据定义-DDL - 翁智华</title>
<link>http://www.cnblogs.com/wzh2010/p/13842993.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wzh2010/p/13842993.html</guid>
<description>&lt;h3&gt; 前言&lt;/h3&gt;
&lt;p&gt;SQL的语言分类主要包含如下几种：&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;DDL&lt;/td&gt;
&lt;td&gt;数据定义语言&lt;/td&gt;
&lt;td&gt;create、drop、alter&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;fontstyle0&quot;&gt;数据定义语言 &lt;span class=&quot;fontstyle2&quot;&gt;create&lt;span class=&quot;fontstyle0&quot;&gt;、&lt;span class=&quot;fontstyle2&quot;&gt;drop&lt;span class=&quot;fontstyle0&quot;&gt;、&lt;span class=&quot;fontstyle2&quot;&gt;alter &lt;span class=&quot;fontstyle0&quot;&gt;语句 。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;DML&lt;/td&gt;
&lt;td&gt;数据操纵语言&lt;/td&gt;
&lt;td&gt;insert、delete、update&lt;/td&gt;
&lt;td&gt;定义对数据库记录的增、删、改操作。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;DQL&lt;/td&gt;
&lt;td&gt;数据库查询语言&lt;/td&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td&gt;定义对数据库记录的查询操作。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6.5&quot;&gt;&lt;td&gt;DCL&lt;/td&gt;
&lt;td&gt;数据库控制语言&lt;/td&gt;
&lt;td&gt;grant、remove&lt;/td&gt;
&lt;td readability=&quot;8&quot;&gt;
&lt;p&gt;定义对数据库、表、字段、用户的访问权限和安全级别。&lt;/p&gt;
&lt;p&gt;（授权grant,收回权限revoke等）。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;TCL&lt;/td&gt;
&lt;td&gt;事务控制语言&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;set autocommit=0&lt;span class=&quot;fontstyle2&quot;&gt;、&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;start transaction&lt;span class=&quot;fontstyle2&quot;&gt;、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;savepoint&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;commit&lt;span class=&quot;fontstyle2&quot;&gt;、&lt;span class=&quot;fontstyle0&quot;&gt;rollback&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;fontstyle0&quot;&gt;定义对数据库的事务操作。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;这小节主要了解下数据定义语言DDL(Data Define Language)。我们用它对数据库、表进行一些管理操作（创建、删除、修改等），比如：建库、删库、建表、修改表、删除表、对字段的增删改等，库表结构的管理。&lt;/p&gt;
&lt;p&gt;接下来我们逐一来说明（下文[]中的内容属于可选项）。&lt;/p&gt;
&lt;h3&gt;数据库管理&lt;/h3&gt;
&lt;h4&gt;创建数据库&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; create database [&lt;span&gt;if&lt;/span&gt; not exists] dbname;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;删除数据库&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
drop databases [&lt;span&gt;if&lt;/span&gt; exists] dbname;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;完整的写法如下：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; drop databases [&lt;span&gt;if&lt;/span&gt;&lt;span&gt; exists] o_dbname;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; create database n_dbname;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; o_dbname 代表旧的数据库名，n_dbname 代表新的数据库名。&lt;/p&gt;
&lt;h4&gt;测试一下：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; mysql&amp;gt;&lt;span&gt; show databases;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; +--------------------+
&lt;span&gt; 3&lt;/span&gt; | Database           |
&lt;span&gt; 4&lt;/span&gt; +--------------------+
&lt;span&gt; 5&lt;/span&gt; | information_schema |
&lt;span&gt; 6&lt;/span&gt; | buyerparty         |
&lt;span&gt; 7&lt;/span&gt; | buyerparty1        |
&lt;span&gt; 8&lt;/span&gt; | git_jeeshop        |
&lt;span&gt; 9&lt;/span&gt; | jz                 |
&lt;span&gt;10&lt;/span&gt; | kdmy               |
&lt;span&gt;11&lt;/span&gt; | kdmygf             |
&lt;span&gt;12&lt;/span&gt; | localsdk           |
&lt;span&gt;13&lt;/span&gt; | mgrcentercontrol   |
&lt;span&gt;14&lt;/span&gt; | mysql              |
&lt;span&gt;15&lt;/span&gt; | performance_schema |
&lt;span&gt;16&lt;/span&gt; | stroke_data        |
&lt;span&gt;17&lt;/span&gt; | test               |
&lt;span&gt;18&lt;/span&gt; +--------------------+
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;13&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; mysql&amp;gt; drop database &lt;span&gt;if&lt;/span&gt;&lt;span&gt; exists test1;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; rows affected
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; mysql&amp;gt;&lt;span&gt; create database test1;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; Query OK, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; row affected
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; mysql&amp;gt;&lt;span&gt; create database test1;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;1007&lt;/span&gt; - Can&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t create database &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;test1&lt;span&gt;'&lt;/span&gt;&lt;span&gt;; database exists&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;通过上面的测试可以知道：删除之前要先判断数据库是否存在，否则会报出异常；同时创建之前也要判断是否存在，如果存在则会提示已存在。&lt;/p&gt;

&lt;h3&gt;表管理&lt;/h3&gt;
&lt;h4&gt;创建表&lt;/h4&gt;
&lt;p&gt;在数据库中一张表的基本语法格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;create table tbname(
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; column_name_1 column_type_1[(n)] [constraints] [comment &lt;span&gt;'&lt;/span&gt;&lt;span&gt;comment1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;], 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; column_name_2 column_type_2[(n)] [constraints] [comment &lt;span&gt;'&lt;/span&gt;&lt;span&gt;comment2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; column_name_3 column_type_3[(n)] [constraints] [comment &lt;span&gt;'&lt;/span&gt;&lt;span&gt;comment3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; )[table_options];
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;语法说明&lt;/h5&gt;
&lt;p&gt;1、column_name是指字段名；column_type指的是字段类型（CHAR、INT等）；n代表字段宽度，可选；constraints 约束，可选；comment 为字段备注，可以对字段详细描述。&lt;/p&gt;
&lt;p&gt;2、同一个表里面，column_name不能相同 &lt;/p&gt;
&lt;p&gt;3、字段名和类型为必选，其他均为可选参数&lt;/p&gt;
&lt;p&gt;4、类型限制了 字段 的存储格式，必须以给定的数据类型来存储，并可以额外添加的约束&lt;/p&gt;
&lt;h5&gt;约束说明&lt;/h5&gt;
&lt;h6&gt;&lt;strong&gt;not null&lt;/strong&gt;：非空约束&lt;/h6&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; mysql&amp;gt;&lt;span&gt; use test;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;Database changed
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; mysql&amp;gt; create table &lt;span&gt;if&lt;/span&gt; not exists `user1`(age &lt;span&gt;int&lt;/span&gt; comment &lt;span&gt;'&lt;/span&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,name &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;5&lt;/span&gt;) comment &lt;span&gt;'&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; not &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; rows affected
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; mysql&amp;gt; insert into user1 values(&lt;span&gt;8&lt;/span&gt;,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;1048&lt;/span&gt; - Column &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; cannot be &lt;span&gt;null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 建表的时候，对name字段做了非空约束，这时候传入的值为null，就会有错误提示。所以非空约束的目的是保证字段不为空。&lt;/p&gt;

&lt;h6&gt;&lt;strong&gt;default value：提供&lt;/strong&gt;字段默认值&lt;/h6&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;use&lt;/span&gt;&lt;span&gt; test;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;Database&lt;/span&gt;&lt;span&gt; changed
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; `user2`(age &lt;span&gt;int&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; comment &lt;span&gt;'&lt;/span&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,name &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) comment &lt;span&gt;'&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; rows affected
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; user2(name) &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;brand&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; Query OK, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; row affected
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; user2; 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---+-------+&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; age &lt;span&gt;|&lt;/span&gt; name  &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---+-------+&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; brand &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---+-------+&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 设置了默认值之后，如果在写入数据时，不指定值，他会自动取默认值0。&lt;/p&gt;
&lt;h6&gt;&lt;strong&gt;primary key：标识主键约束&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;设置该字段为表的主键，全局唯一标识录，插入重复时报错。&lt;/p&gt;
&lt;p&gt;有两种表现方式：一种是直接在字段约束中跟上；一种是字段都声明完了之后，在结尾加上，与上一个字段之间用逗号隔开。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;use&lt;/span&gt;&lt;span&gt; test;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;Database&lt;/span&gt;&lt;span&gt; changed
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; `user3`(id &lt;span&gt;int&lt;/span&gt; &lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;,age &lt;span&gt;int&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; comment &lt;span&gt;'&lt;/span&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,name &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) comment &lt;span&gt;'&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; rows affected
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; user3 &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;brand&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; Query OK, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; row affected
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; user3 &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;22&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sol&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;1062&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; Duplicate entry &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; &lt;span&gt;key&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; user3 &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;22&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sol&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; Query OK, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; row affected
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; user3;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-----+-------+&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; id &lt;span&gt;|&lt;/span&gt; age &lt;span&gt;|&lt;/span&gt; name  &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-----+-------+&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;  &lt;span&gt;1&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;  &lt;span&gt;20&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; brand &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;  &lt;span&gt;22&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; sol   &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-----+-------+&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上，主键必须保持值的唯一性，如果插入重复值，会提示违反主键约束&lt;/p&gt;
&lt;p&gt;另外一种方式是在字段声明的尾部，可以支持多个主键，用逗号隔开并且不可重复，格式：primary key(字段1,字段2,字段n)，这种叫组合主键（或复合主键），举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; `user4`(id &lt;span&gt;int&lt;/span&gt;,age &lt;span&gt;int&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; comment &lt;span&gt;'&lt;/span&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,name &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) comment &lt;span&gt;'&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,&lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;(id,name));
&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;foreign key：标识外键约束&lt;/h6&gt;
&lt;p&gt;语法：foreign key(t1_columnname) references t2(columnname),t1 为当前表，t2为外键表，当前表和外键表有一个字段约束成外键。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; `class`(classid &lt;span&gt;int&lt;/span&gt; &lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;,classname &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; rows affected
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt; `user4`(id &lt;span&gt;int&lt;/span&gt; &lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;,age &lt;span&gt;int&lt;/span&gt; comment &lt;span&gt;'&lt;/span&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,name &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) comment &lt;span&gt;'&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,cid &lt;span&gt;int&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,&lt;span&gt;foreign&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;(cid) &lt;span&gt;references&lt;/span&gt;&lt;span&gt; class(classid));
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; rows affected
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; `user4` &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;brand&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;1452&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; Cannot &lt;span&gt;add&lt;/span&gt; &lt;span&gt;or&lt;/span&gt; &lt;span&gt;update&lt;/span&gt; a child row: a &lt;span&gt;foreign&lt;/span&gt; &lt;span&gt;key&lt;/span&gt; &lt;span&gt;constraint&lt;/span&gt; fails (`test`.`user4`, &lt;span&gt;CONSTRAINT&lt;/span&gt; `user4_ibfk_1` &lt;span&gt;FOREIGN&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt; (`cid`) &lt;span&gt;REFERENCES&lt;/span&gt;&lt;span&gt; `class` (`classid`))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; `class` &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;grad 3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; Query OK, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; row affected
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; `user4` &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;brand&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; Query OK, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; row affected
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; a.age &lt;span&gt;as&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,a.name &lt;span&gt;as&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;学生姓名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,b.classname &lt;span&gt;as&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;班级&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; user4 a &lt;span&gt;left&lt;/span&gt; &lt;span&gt;join&lt;/span&gt; class b &lt;span&gt;on&lt;/span&gt; a.cid &lt;span&gt;=&lt;/span&gt;&lt;span&gt; b.classid;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----+----------+--------+&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; 年龄 &lt;span&gt;|&lt;/span&gt; 学生姓名 &lt;span&gt;|&lt;/span&gt; 班级   &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----+----------+--------+&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;   &lt;span&gt;20&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; brand    &lt;span&gt;|&lt;/span&gt; grad &lt;span&gt;3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----+----------+--------+&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 几点说明：&lt;/p&gt;
&lt;p&gt;1、插入user4表的时候，会检查关联的外键classid的值是否存在，如果不存在就会报错误。如上述代码中第三段，classid=1的值在class表中不存在。&lt;/p&gt;
&lt;p&gt;2、建立外键关系的两张表的对应字段，类型需要保持一致。&lt;/p&gt;
&lt;p&gt;3、设置为外键的字段不能为本表的主键，而关联表的字段需要为主键。（&lt;span&gt;所以外键cid关联到class表的classid字段为主键&lt;/span&gt;）。&lt;/p&gt;
&lt;h6&gt;unique key：标识唯一值约束&lt;/h6&gt;
&lt;p&gt;可以设置一个到多个字段，不允许重复值，重复会报违反唯一约束，导致插入失败。&lt;/p&gt;
&lt;p&gt;同样的有两种定义方式，一种是直接在字段后设置，一种是定义完所有字段之后再设置。以下例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; `user5` (id &lt;span&gt;int&lt;/span&gt; &lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;,name &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;),ident &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;18&lt;/span&gt;) &lt;span&gt;unique&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; rows affected
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; `user6` (id &lt;span&gt;int&lt;/span&gt; &lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;,name &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;),ident &lt;span&gt;char&lt;/span&gt;(&lt;span&gt;18&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,sex &lt;span&gt;int&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,&lt;span&gt;unique&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt;(ident,sex));
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; rows affected
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; `user5` &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;brand&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;012345678901234567&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; Query OK, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; row affected
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; `user5` &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sol&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;012345678901234567&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;1062&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; Duplicate entry &lt;span&gt;'&lt;/span&gt;&lt;span&gt;012345678901234567&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; &lt;span&gt;key&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ident&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 第二段中演示了支持多字段，用逗号隔开，语法格式：unique key(字段1,字段2,字段n)；&lt;/p&gt;
&lt;p&gt;第三段重复输入了ident的值，他就提示重复输入了。&lt;/p&gt;
&lt;h6&gt;auto_inc：标识自动增长&lt;/h6&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; `user7` (id &lt;span&gt;int&lt;/span&gt; auto_increment &lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;,name &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;&lt;span&gt;));
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; rows affected

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; `user7`(name) &lt;span&gt;values&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;brand&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sol&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;helen&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
Query OK, &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; rows affected

Records: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;  Duplicates: &lt;span&gt;0&lt;/span&gt;  Warnings: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; `user7`;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; id &lt;span&gt;|&lt;/span&gt; name  &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;1&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; brand &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; sol   &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; helen &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; auto_increment 说明：&lt;/p&gt;
&lt;p&gt;1、auto_increacement 的字段为自动增长，默认值从1开始，每次+1&lt;/p&gt;
&lt;p&gt;2、自动增长字段的初始值、步长可以在mysql中进行设置，比如设置初始值为1万，步长每次增长10&lt;/p&gt;
&lt;p&gt;3、自增列当前值存储在内存中，数据库重启后，会查询当前表中自增列max为当前值。&lt;/p&gt;
&lt;p&gt;4、如果表数据被清空并重启数据库，自增列会从初始值开始。&lt;/p&gt;
&lt;h4&gt;删除表&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;drop&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;if exists&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; tname;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;修改表名、备注&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; o_tname rename &lt;span&gt;[&lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; n_tname;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; tname comment &lt;span&gt;'&lt;/span&gt;&lt;span&gt;memo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; 
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;复制表&lt;/h4&gt;
&lt;h5&gt;仅复制架构&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; tname &lt;span&gt;like&lt;/span&gt; from_tname; 
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; `user7`;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; id &lt;span&gt;|&lt;/span&gt; name  &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;  &lt;span&gt;1&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; brand &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; sol   &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;  &lt;span&gt;3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; helen &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; `user8` &lt;span&gt;like&lt;/span&gt;&lt;span&gt; `user7`;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; rows affected
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;  &lt;span&gt;from&lt;/span&gt;&lt;span&gt; `user8`;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; Empty &lt;span&gt;set&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;复制架构+数据&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; tname &lt;span&gt;[&lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; column1,column2,... &lt;span&gt;from&lt;/span&gt; from_tname &lt;span&gt;[&lt;/span&gt;&lt;span&gt;where condition&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;; 
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; `user7`;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; id &lt;span&gt;|&lt;/span&gt; name  &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;1&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; brand &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; sol   &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; helen &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; `user9` &lt;span&gt;select&lt;/span&gt; id,name &lt;span&gt;from&lt;/span&gt;&lt;span&gt; `user7`;
Query OK, &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; rows affected
Records: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;  Duplicates: &lt;span&gt;0&lt;/span&gt;  Warnings: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; `user9`;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; id &lt;span&gt;|&lt;/span&gt; name  &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;1&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; brand &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; sol   &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; helen &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 数据和架构都被复制过来了，这个超实用。&lt;/p&gt;
&lt;h3&gt;管理字段&lt;/h3&gt;
&lt;h4&gt;添加字段&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; tname &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; column_name column_type &lt;span&gt;[&lt;/span&gt;&lt;span&gt;constraints&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; `user9`;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; id &lt;span&gt;|&lt;/span&gt; name  &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;  &lt;span&gt;1&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; brand &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; sol   &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;  &lt;span&gt;3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; helen &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; `user9` &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; newcolumn &lt;span&gt;int&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; rows affected
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; Records: &lt;span&gt;0&lt;/span&gt;  Duplicates: &lt;span&gt;0&lt;/span&gt;  Warnings: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; `user9`;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+-----------+&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; id &lt;span&gt;|&lt;/span&gt; name  &lt;span&gt;|&lt;/span&gt; newcolumn &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+-----------+&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;  &lt;span&gt;1&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; brand &lt;span&gt;|&lt;/span&gt;         &lt;span&gt;0&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; sol   &lt;span&gt;|&lt;/span&gt;         &lt;span&gt;0&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;  &lt;span&gt;3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; helen &lt;span&gt;|&lt;/span&gt;         &lt;span&gt;0&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+-------+-----------+&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;修改字段&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; tname modify &lt;span&gt;column&lt;/span&gt; &lt;span&gt;col_name&lt;/span&gt; new_col_type &lt;span&gt;[&lt;/span&gt;&lt;span&gt;constraints&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 修改类型、约束，不能修改字段名&lt;/span&gt; 
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; tname change &lt;span&gt;column&lt;/span&gt; &lt;span&gt;col_name&lt;/span&gt; &lt;span&gt;new_col_name&lt;/span&gt;  new_col_type &lt;span&gt;[&lt;/span&gt;&lt;span&gt;constraints&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 修改字段名、类型、约束&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下分别是modify和change示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;desc&lt;/span&gt;&lt;span&gt; `user9`;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+-------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Field     &lt;span&gt;|&lt;/span&gt; Type        &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Null&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Key&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Default&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Extra &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+-------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; id        &lt;span&gt;|&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;)     &lt;span&gt;|&lt;/span&gt; NO   &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; name      &lt;span&gt;|&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;|&lt;/span&gt; YES  &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;    &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; newcolumn &lt;span&gt;|&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;)     &lt;span&gt;|&lt;/span&gt; NO   &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+-------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; `user9` modify &lt;span&gt;column&lt;/span&gt; name &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; Query OK, &lt;span&gt;3&lt;/span&gt;&lt;span&gt; rows affected
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; Records: &lt;span&gt;3&lt;/span&gt;  Duplicates: &lt;span&gt;0&lt;/span&gt;  Warnings: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;desc&lt;/span&gt;&lt;span&gt; `user9`;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Field     &lt;span&gt;|&lt;/span&gt; Type         &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Null&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Key&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Default&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Extra &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; id        &lt;span&gt;|&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;)      &lt;span&gt;|&lt;/span&gt; NO   &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; name      &lt;span&gt;|&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;) &lt;span&gt;|&lt;/span&gt; YES  &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;    &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; newcolumn &lt;span&gt;|&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;)      &lt;span&gt;|&lt;/span&gt; NO   &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;desc&lt;/span&gt;&lt;span&gt; `user9`;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Field     &lt;span&gt;|&lt;/span&gt; Type         &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Null&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Key&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Default&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Extra &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; id        &lt;span&gt;|&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;)      &lt;span&gt;|&lt;/span&gt; NO   &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; name      &lt;span&gt;|&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;) &lt;span&gt;|&lt;/span&gt; YES  &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;    &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; newcolumn &lt;span&gt;|&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;)      &lt;span&gt;|&lt;/span&gt; NO   &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; `user9` change &lt;span&gt;column&lt;/span&gt; name name1 &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; rows affected
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; Records: &lt;span&gt;0&lt;/span&gt;  Duplicates: &lt;span&gt;0&lt;/span&gt;  Warnings: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;desc&lt;/span&gt;&lt;span&gt; `user9`;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Field     &lt;span&gt;|&lt;/span&gt; Type         &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Null&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Key&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Default&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Extra &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; id        &lt;span&gt;|&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;)      &lt;span&gt;|&lt;/span&gt; NO   &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; name1     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;) &lt;span&gt;|&lt;/span&gt; YES  &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;    &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; newcolumn &lt;span&gt;|&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;)      &lt;span&gt;|&lt;/span&gt; NO   &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;删除字段&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; tname &lt;span&gt;drop&lt;/span&gt; &lt;span&gt;column&lt;/span&gt; col_name; 
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;desc&lt;/span&gt;&lt;span&gt; `user9`;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Field     &lt;span&gt;|&lt;/span&gt; Type         &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Null&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Key&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Default&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Extra &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; id        &lt;span&gt;|&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;)      &lt;span&gt;|&lt;/span&gt; NO   &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; name1     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;) &lt;span&gt;|&lt;/span&gt; YES  &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;    &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; newcolumn &lt;span&gt;|&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;)      &lt;span&gt;|&lt;/span&gt; NO   &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; `user9` &lt;span&gt;drop&lt;/span&gt; &lt;span&gt;column&lt;/span&gt;&lt;span&gt; newcolumn;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; Query OK, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; rows affected
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; Records: &lt;span&gt;0&lt;/span&gt;  Duplicates: &lt;span&gt;0&lt;/span&gt;  Warnings: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;desc&lt;/span&gt;&lt;span&gt; `user9`;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-----+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Field &lt;span&gt;|&lt;/span&gt; Type         &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Null&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Key&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;Default&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Extra &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-----+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; id    &lt;span&gt;|&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;)      &lt;span&gt;|&lt;/span&gt; NO   &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; name1 &lt;span&gt;|&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;) &lt;span&gt;|&lt;/span&gt; YES  &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;    &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-----+--------------+------+-----+---------+-------+&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;后记&lt;/h3&gt;
&lt;p&gt;为了表示严谨性，每一个都尝试一遍，确实很耗时，写到现在。&lt;/p&gt;
</description>
<pubDate>Fri, 30 Oct 2020 13:51:00 +0000</pubDate>
<dc:creator>翁智华</dc:creator>
<og:description>前言 SQL的语言分类主要包含如下几种： DDL 数据定义语言 create、drop、alter 数据定义语言 create、drop、alter 语句 。 DML 数据操纵语言 insert、de</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/wzh2010/p/13842993.html</dc:identifier>
</item>
<item>
<title>关于HDFS应知应会的N个问题 | 技术点 - 大数据学习与分享</title>
<link>http://www.cnblogs.com/bigdatalearnshare/p/13871444.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bigdatalearnshare/p/13871444.html</guid>
<description>&lt;p&gt;HDFS（Hadoop Distributed File System）分布式文件存储系统，主要为各类分布式计算框架如Spark、MapReduce等提供海量数据存储服务，同时HBase、Hive底层存储也依赖于HDFS。HDFS提供一个统一的抽象目录树，客户端可通过路径来访问文件，如hdfs://namenode:port/dir-a/a.data。HDFS集群分为两大角色：Namenode、Datanode（非HA模式会存在Secondary Namenode）&lt;/p&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;172.33735899137&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/L7mZpjdBb1wnI3oEPmrALg&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;strong&gt;1. Namenode的安全模式 ？&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;安全模式是Namenode的一种状态（Namenode主要有active/standby/safemode三种模式）。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2. 哪些情况下，Namenode会进入安全模式 ？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;a. Namenode发现集群中的block丢失率达到一定比例时（默认0.01%），Namenode就会进入安全模式，在安全模式下，客户端不能对任何数据进行操作，只能查看元数据信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;b. 在hdfs集群正常冷启动时，Namenode也会在safemode状态下维持相当长的一段时间，此时你不需要去理会，等待它自动退出安全模式即可&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3. 为什么，在HDFS集群冷启动时，Namenode会在安全模式下维持相当长的一段时间 ？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Namenode的内存元数据中，包含文件路径、副本数、blockid，及每一个block所在Datanode的信息，而fsimage中，不包含block所在的Datanode信息。那么，当Namenode冷启动时，此时内存中的元数据只能从fsimage中加载而来，从而就没有block所在的Datanode信息 ——&amp;gt; 就会导致Namenode认为所有的block都已经丢失 ——&amp;gt; 进入安全模式 ——&amp;gt; 所在的Datanode信息启动后，会定期向Namenode汇报自身所持有的block信息 ——&amp;gt; 随着Datanode陆续启动，从而陆续汇报block信息，Namenode就会将内存元数据中的block所在Datanode信息补全更新 ——&amp;gt; 找到了所有block的位置，从而自动退出安全模式&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4. 如何退出安全模式 ？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1）找到问题所在，进行修复（比如修复宕机的所在Datanode信息补全更新）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）可以手动强行退出安全模式：hdfs namenode --safemode leave 【不推荐，毕竟没有真正解决问题】&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;5. Namenode服务器的磁盘故障导致namenode宕机，如何挽救集群及数据&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1）HA机制：高可用hadoop2.0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2）配置hdfs-site.xml指定然后重启Namenode运行时数据存放多个磁盘位置&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3）然后重启Namenode和SecondaryNamenode的工作目录存储结构完全相同，当然后重启Namenode故障退出需要重新恢复时，可以从SecondaryNamenode的工作目录存储结构完全相同，当的工作目录中的namesecondary文件夹及其中文件拷贝到然后重启Namenode所在节点工作目录中(但只能恢复大部分数据SecondaryNamenode最后一次合并之后的更新操作的元数据将会丢失)，将namesecondary重命名为name然后重启Namenode&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;6. Namenode是否可以有多个？&lt;/strong&gt;&lt;strong&gt;Namenode跟集群数据存储能力有关系吗？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1）非HA的模式下Namenode只能有一个，HA模式下可以有两个（一主active一备standby），HDFS联邦机制可以有多个Namenode&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）关系不大，存储数据由Datanode完成。但是药尽量避免存储大量小文件，因为会耗费Namenode内存&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt; &lt;/h4&gt;
&lt;h4&gt;&lt;span&gt;&lt;strong&gt;7. fsimage是否存放了block所在服务器信息 ？&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;1）在edits中保存着每个文件的操作详细信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）在fsimage中保存着文件的名字、id、分块、大小等信息，但是不保存Datanode 的IP&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3）在hdfs启动时处于安全模式，Datanode 向Namenode汇报自己的IP和持有的block信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;安全模式结束，文件块和Datanode 的IP关联上&lt;/span&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;568&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;验证过程：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1) 启动Namenode，离开safemode，cat某个文件，看log，没有显示文件关联的Datanode&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2) 启动Datanode，cat文件，内容显示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3) 停止Datanode ，cat文件，看log，看不到文件，但显示了文件块关联的Datanode&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;8. Datanode动态上下线？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在实际生产环境中，在hdfs-site.xml文件中还会配置如下两个参数：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;dfs.hosts：白名单；dfs.hosts.exclude：黑名单&lt;/span&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;2.5&quot;&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;568&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;property&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;name&amp;gt;dfs.hosts&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#完整的文件路径：列出了允许连入NameNode的datanode清单（IP或者机器名）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;value&amp;gt;$HADOOP_HOME/conf/hdfs_include&amp;lt;/value&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;property&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;name&amp;gt;dfs.hosts.exclude&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#文件完整路径：列出了禁止连入NameNode的datanode清单（IP或者机器名）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;value&amp;gt;$HADOOP_HOME/conf/hdfs_exclude&amp;lt;/value&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;1) 上线datanode&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;a) 保证上线的datanode的ip配置在白名单并且不出现在黑名单中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;b) 配置成功上线的datanode后，通过命令hadoop-daemon.sh datanode start启动&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;c) 刷新节点状态：/bin/hadoop dfsadmin -refreshNodes(这个命令可以动态刷新dfs.hosts和dfs.hosts.exclude配置，无需重启NameNode)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;d) 手动进行数据均衡：start-balance.sh&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2) 下线datanode&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;a) 保证下线的datanode的ip配置在黑名单并且不出现在白名单中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;b) 关闭下线的节点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;c) 刷新节点状态：/bin/hadoop dfsadmin -refreshNodes&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;d) 机器下线完毕后，将它们从hdfs_exclude文件中移除&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;9. 关于Datanode的几个问题 ？&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;1）Datanode在什么情况下不会备份？&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在强制关闭或者非正常断电时不会备份&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）3个Datanode中有一个Datanode出现错误会怎样？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个Datanode的数据会在其他的Datanode上重新做备份&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;10. HDFS HA机制下的脑裂现象以及避免方法 ？&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;当standby Namenode的ZKFailoverController收到active Namenode端故障通知时，不会立即将自己的状态切换为active，因为此时active Namenode可能处于“假死”状态，如果即刻切换为active状态，有可能造成脑裂现象。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;为了防止脑裂，建议写个脚本确保发出故障通知的active Namenode一定被kill掉，具体可以按照以下几个步骤完成kill操作：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1.执行杀掉active Namenode的shell脚本，等待ssh kill返回命令&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2.如果响应成功，就把原standby Namenode的状态切换为active；如果响应失败或者超时（可以配置一个超时时间）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3.只要shell脚本的调用返回值为true，则切换自己端的Namenode状态为active&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;笔者强调：Namenode主备切换、健康状态监控等需要通过ZKFailoverController等组件实现，但最终会借助于zookeeper集群&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;11. HDFS为什么不适合存储小文件&lt;/strong&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; ？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一般一个block对应的元数据大小为150byte左右，大量小文件会使内存中的元数据变大导致占用大量Namenode内存、寻址时间长&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;12. 大量小文件的处理方式&lt;/strong&gt;&lt;strong&gt;？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1）打成HAR files&lt;/span&gt;&lt;br/&gt;&lt;span&gt;命令：hadoop archive -archiveName xxx.har -p /src /dest&lt;/span&gt;&lt;br/&gt;&lt;span&gt;查看内容：hadoop fs -lsr har:///dest/xxx.har&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;该命令底层实际上是运行了一个MapReduce任务来将小文件打包成HAR。但是通过HAR来读取一个文件并不会比直接从HDFS中读取文件高效，因为对每一个HAR文件的访问都需要进行index文件和文件本身数据的读取。并且虽然HAR文件可以被用来作为MapReduce任务的input，但是并不能将HAR文件中打包的文件当作一个HDFS文件处理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）编写MR程序，将小文件序列化到一个Sequence File中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将小文件以文件名作为key，以文件内容作为value，编写一个程序将它们序列化到HDFS上的一个Sequence File中，然后来处理这个Sequence File。相对打成HAR文件，具有两个优势：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（1）Sequence File是可拆分的，因此MapReduce可以将它们分成块并独立地对每个块进行操作&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（2）它们同时支持压缩，不像HAR。在大多数情况下，块压缩是最好的选择，因为它将压缩几个记录为一个块，而不是一个记录压缩一个块&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;笔者强调hdfs小文件问题要结合具体的处理引擎以及业务情况等，比如离线处理下、流式处理下小文件问题如何解决，之后笔者会开单篇详述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;13. 查看HDFS集群工作状态命令 ？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;hdfs dfsadmin -report：快速定位各个节点情况，如每个节点的硬盘使用情况&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;关注&lt;span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/qXeekTjMI-mEXyUMn-h5Tg&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;微信公众号：大数据学习与分享&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;，获取更对技术干货&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 30 Oct 2020 11:56:00 +0000</pubDate>
<dc:creator>大数据学习与分享</dc:creator>
<og:description>HDFS（Hadoop Distributed File System）分布式文件存储系统，主要为各类分布式计算框架如Spark、MapReduce等提供海量数据存储服务，同时HBase、Hive底层</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/bigdatalearnshare/p/13871444.html</dc:identifier>
</item>
<item>
<title>如何安装一个高可用K3s集群？ - k3s中文社区</title>
<link>http://www.cnblogs.com/k3s2019/p/13903754.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/k3s2019/p/13903754.html</guid>
<description>&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;作者介绍&lt;/p&gt;
&lt;p&gt;Janakiram MSV是Janakiram &amp;amp; Associates的首席分析师，也是国际信息技术学院的兼职教师。他也是Google&lt;br/&gt;Qualified&lt;br/&gt;Developer、亚马逊认证解决方案架构师、亚马逊认证开发者、亚马逊认证SysOps管理员和微软认证Azure专业人员。&lt;/p&gt;
&lt;p&gt;Janakiram是云原生计算基金会的大使，也是首批Kubernetes认证管理员和Kubernetes认证应用开发者之一。他曾在微软、AWS、Gigaom&lt;br/&gt;Research等知名公司工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;https://mp.weixin.qq.com/s/woXtO9u-YOqpNnBtQb5tqg&quot;&gt;之前的文章&lt;/a&gt;中，我们已经了解到如何设置一个多节点的etcd集群。在本文中，我们将利用相同的基础架构来设置和配置一个基于K3s的高可用Kubernetes集群。&lt;/p&gt;
&lt;h2 id=&quot;高可用kubernetes集群&quot;&gt;高可用Kubernetes集群&lt;/h2&gt;
&lt;p&gt;Kubernetes集群的控制平面大多是是无状态的。唯一有状态的控制平面组件是etcd数据库，它为整个集群充当了唯一事实来源。API Server作为etcd数据库的网关，内部和外部的用户都可以通过它访问和操作状态。&lt;/p&gt;
&lt;p&gt;etcd数据库必须配置在HA模式下，以确保没有单点故障。配置高可用（HA）Kubernetes集群的拓扑有两种选择，这取决于如何设置etcd。&lt;/p&gt;
&lt;p&gt;第一种拓扑是基于堆栈集群设计的，每个节点与控制平面一起运行一个etcd实例。每个控制平面节点运行一个kube-apiserver、kube-scheduler和kube-controller-manager的实例。kube-apiserver使用负载均衡器暴露给worker节点。&lt;/p&gt;
&lt;p&gt;每个控制平面节点创建一个本地etcd成员，并且该etcd成员仅与这一节点的kube-apiserver进行通信。这同样适用于本地的kube-controller-manager和kube-scheduler实例。&lt;/p&gt;
&lt;p&gt;这种拓扑结构要求HA Kubernetes集群至少有三种堆栈控制平面模式。Kubeadm，这个流行的集群安装工具，使用这种拓扑来配置Kubernetes集群。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201030185204745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjA2ODEz,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二种拓扑使用在一组完全不同的主机上安装和管理的外部etcd集群。&lt;/p&gt;
&lt;p&gt;在此拓扑中，每个控制平面节点都运行&lt;em&gt;kube-apiserver&lt;/em&gt;，&lt;em&gt;kube-scheduler&lt;/em&gt;和&lt;em&gt;kube-controller-manager&lt;/em&gt;的实例，其中每个etcd主机与每个控制平面节点的&lt;em&gt;kube-apiserver&lt;/em&gt;通信。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201030185241173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjA2ODEz,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这种拓扑需要的主机数量是堆栈式HA拓扑的两倍。使用该拓扑的 HA 集群至少需要三个控制平面节点的主机和三个 etcd 节点的主机。&lt;/p&gt;
&lt;p&gt;关于启动集群的更多信息，请参考Kubernetes官方文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/&quot;&gt;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;高可用模式的k3s&quot;&gt;高可用模式的K3s&lt;/h2&gt;
&lt;p&gt;由于K3s大多部署在边缘，硬件资源有限，可能无法在专用主机上运行etcd数据库。部署架构与堆栈式拓扑极为类似，只是事先配置了etcd数据库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201030185303722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjA2ODEz,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这次教程中，我使用的是运行在Intel NUC硬件上的裸机基础设施，其映射如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201030185321723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjA2ODEz,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考&lt;a href=&quot;https://mp.weixin.qq.com/s/woXtO9u-YOqpNnBtQb5tqg&quot;&gt;本系列教程的前一部分&lt;/a&gt;，在IP地址为10.0.0.60、10.0.0.61和10.0.0.62的前三个节点上安装和配置etcd。&lt;/p&gt;
&lt;h2 id=&quot;安装k3s-server&quot;&gt;安装K3s server&lt;/h2&gt;
&lt;p&gt;让我们先在所有安装etcd的节点中安装服务器。SSH进入第一个节点，并设置以下环境变量。这假定你按照前面教程中的步骤配置了etcd集群。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export K3S_DATASTORE_ENDPOINT='https://10.0.0.60:2379,https://10.0.0.61:2379,https://10.0.0.62:2379'
export K3S_DATASTORE_CAFILE='/etc/etcd/etcd-ca.crt'
export K3S_DATASTORE_CERTFILE='/etc/etcd/server.crt'
export K3S_DATASTORE_KEYFILE='/etc/etcd/server.key'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这些环境变量指示K3s安装程序利用现有的etcd数据库进行状态管理。&lt;/p&gt;
&lt;p&gt;接下来，我们将在K3S_TOKEN中填充一个agent加入集群时使用的token。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export K3S_TOKEN=&quot;secret_edgecluster_token&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们准备好在第一个节点中安装server。运行以下命令来启动进程：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;curl -sfL https://get.k3s.io | sh -
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在节点2和节点3中重复这些步骤以启动额外的server。&lt;/p&gt;
&lt;p&gt;此时，你有一个3节点的K3s集群，它在高可用模式下运行控制平面和etcd组件。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sudo kubectl get nodes
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201030185511283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjA2ODEz,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;你可以使用以下命令检查服务状态：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sudo systemctl status k3s.service
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201030185535229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjA2ODEz,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装k3s-agent&quot;&gt;安装K3s Agent&lt;/h2&gt;
&lt;p&gt;随着控制平面的建立和运行，我们可以轻松地将worker节点获agent添加到集群中。我们只需要确保使用与server关联的相同token。&lt;/p&gt;
&lt;p&gt;SSH进入其中一个worker节点并运行命令。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export K3S_TOKEN=&quot;secret_edgecluster_token&quot;
export K3S_URL=https://10.0.0.60:6443
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;环境变量K3S_URL是提示安装程序将节点配置为连接到现有服务器的agent。&lt;/p&gt;
&lt;p&gt;最后，运行与我们上一步相同的脚本。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;curl -sfL https://get.k3s.io | sh -
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201030185617199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjA2ODEz,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;检查是否新节点已经添加到集群。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201030185631750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjA2ODEz,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Congratulations！你已经成功安装了一个高可用K3s集群，并备份了一个外部的etcd数据库。&lt;/p&gt;
&lt;h2 id=&quot;验证etcd数据库&quot;&gt;验证etcd数据库&lt;/h2&gt;
&lt;p&gt;让我们确保k3s集群正在使用etcd数据库进行状态管理。&lt;/p&gt;
&lt;p&gt;我们将在K3s集群内启动一个简单的NGINX Pod。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sudo kubectl run nginx --image nginx --port 80
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;sudo kubectl get pods
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020103018570760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjA2ODEz,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Pod规范和状态应该存储在etcd数据库中。让我们尝试通过etcdctl CLI来检索。安装jq工具来解析JSON输出。&lt;/p&gt;
&lt;p&gt;由于输出是以base64编码的，我们将通过base64工具对其进行解码。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;etcdctl --endpoints https://10.0.0.61:2379 \
--cert /etc/etcd/server.crt \
--cacert /etc/etcd/etcd-ca.crt \
--key /etc/etcd/server.key get /registry/pods/default/nginx \
--prefix=true -w json | jq -r .kvs[].value | base64 -d
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201030185729724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjA2ODEz,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输出显示 pod 在 etcd 数据库中有一个相关的键和值。特殊字符没有正确显示，但它确实向我们展示了足够的关于pod的数据。&lt;/p&gt;
&lt;p&gt;在本文中，我们了解了如何在高可用模式下设置和配置K3s集群，希望可以帮助你在边缘端更顺利地进行实践。&lt;/p&gt;
</description>
<pubDate>Fri, 30 Oct 2020 11:09:00 +0000</pubDate>
<dc:creator>k3s中文社区</dc:creator>
<og:description>作者介绍 Janakiram MSV是Janakiram &amp;amp;amp; Associates的首席分析师，也是国际信息技术学院的兼职教师。他也是Google Qualified Develope</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/k3s2019/p/13903754.html</dc:identifier>
</item>
<item>
<title>深入了解Redis(8)-高可用方案 - 家有四只胖加菲</title>
<link>http://www.cnblogs.com/iceggboom/p/13903704.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iceggboom/p/13903704.html</guid>
<description>&lt;p&gt;　　生产环境中的redis基本都是多节点部署，本文只讨论redis高可用的三种方案，不涉及实际操作。&lt;/p&gt;
&lt;h2&gt;一、主从复制（一主一从，一主多从，级联结构）&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2020.cnblogs.com/blog/1546213/202010/1546213-20201030171532375-1445957523.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;（图来源于网络）&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;一个Master，两个Slave，Slave只能读不能写；当Slave与Master断开后需要重新slave of连接才可建立之前的主从关系；Master挂掉后，Master关系依然存在，Master重启即可恢复。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;实现原理：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;1、Slave启动成功连接到master后会发送一个sync命令；&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;2、Master接到命令启动后的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，以完成一次完全同步；&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;3、全量复制：而slave服务在数据库文件数据后，将其存盘并加载到内存中；&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;4、增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步；&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;5、但是只要是重新连接master，一次完全同步（全量复制）将被自动执行。&lt;/p&gt;
&lt;h2&gt;二、哨兵模式　　&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1546213/202010/1546213-20201030174805896-1456073885.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;（图来源于网络）&lt;/p&gt;
&lt;p&gt;由一个或多个Sentinel实例组成的Sentinel系统可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器。&lt;/p&gt;
&lt;p&gt;Sentinel的功能有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;监控：Sentinel节点会定期检测Redis数据节点、其余Sentinel节点是否 可达&lt;/li&gt;
&lt;li&gt;通知：Sentinel节点会将故障转移的结果通知给应用方&lt;/li&gt;
&lt;li&gt;主节点故障转移：实现从节点晋升为主节点并维护后续正确的主从关系&lt;/li&gt;
&lt;li&gt;配置提供者：在Redis Sentinel结构中，客户端在初始化的时候连接的 是Sentinel节点集合，从中获取主节点信息&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;实现原理：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Redis Sentinel是一个分布式架构，其中包含若干个Sentinel节点和Redis数据节点，每个Sentinel节点会对数据节点和其余Sentinel节点进行监控，当它发现节点不可达时，会对节点做下线标识&lt;/p&gt;
&lt;p&gt;如果被标识的是主节点，它还会和其他Sentinel节点进行“协商”，当大多数Sentinel节点都认为主节点不可达时，它们会选举出一个Sentinel节点来完成自动故障转移的工作，同时会将这个变化实时通知给Redis应用方。&lt;/p&gt;
&lt;h2&gt;三、Redis集群（Redis-Cluster）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1546213/202010/1546213-20201030183015402-587755528.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;（图来源于网络）&lt;/p&gt;
&lt;p&gt;　　Redis 集群是一个提供在多个Redis节点间共享数据的程序集。自动将数据进行分片，每个master上放一部分数据提供内置的高可用支持，部分master不可用时，还是可以继续工作的支撑N个redis master node，每个master node都可以挂载多个slave node高可用，因为每个master都有salve节点，那么如果mater挂掉，redis cluster这套机制，就会自动将某个slave切换成master。&lt;/p&gt;
&lt;div readability=&quot;14.5&quot;&gt;
&lt;div readability=&quot;24&quot;&gt;
&lt;p&gt;Redis Cluster功能特点如下：&lt;/p&gt;
&lt;p&gt;1)所有的节点相互连接&lt;/p&gt;
&lt;p&gt;2)集群消息通信通过集群总线通信，，集群总线端口大小为客户端服务端口+10000，这个10000是固定值&lt;/p&gt;
&lt;p&gt;3)节点与节点之间通过二进制协议进行通信&lt;/p&gt;
&lt;p&gt;4)客户端和集群节点之间通信和通常一样，通过文本协议进行&lt;/p&gt;
&lt;p&gt;5)集群节点不会代理查询&lt;/p&gt;
&lt;p&gt;6)数据按照Slot存储分布在多个Redis实例上&lt;/p&gt;
&lt;p&gt;7)集群节点挂掉会自动故障转移&lt;/p&gt;
&lt;p&gt;8)可以相对平滑扩/缩容节点&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;四、方案抉择&lt;/h2&gt;
&lt;p&gt;如果你的数据量很少，主要是承载高并发高性能的场景，比如你的缓存一般就几个G，单机足够了。&lt;/p&gt;
&lt;p&gt;如果又多个slave节点，有自动选举的需求，建议搭建一个sentinal集群，去保证redis主从架构的高可用性，就可以了。&lt;/p&gt;
&lt;p&gt;如果是海量数据+高并发+高可用的场景，海量数据，如果你的数据量很大，那么建议就用redis cluster，集群方案搭建复杂，遇到的问题也相对多很多。&lt;/p&gt;
</description>
<pubDate>Fri, 30 Oct 2020 10:50:00 +0000</pubDate>
<dc:creator>家有四只胖加菲</dc:creator>
<og:description>生产环境中的redis基本都是多节点部署，本文只讨论redis高可用的三种方案，不涉及实际操作。 一、主从复制（一主一从，一主多从，级联结构） （图来源于网络） 一个Master，两个Slave，Sl</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/iceggboom/p/13903704.html</dc:identifier>
</item>
</channel>
</rss>