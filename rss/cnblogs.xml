<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Unity和Jenkins真是绝配，将打包彻底一键化！ - wuzhang</title>
<link>http://www.cnblogs.com/wuzhang/p/20190512wuzhang.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuzhang/p/20190512wuzhang.html</guid>
<description>&lt;p&gt;　说起打包，我们的QA简直是要抓狂，这个确实我也很同情他们。项目最开始打包是另一个同事做的，打包步骤是有些繁琐，但是项目上线后，不敢轻易动啊！每次他们打包总要跟我抱怨，国内版本打包步骤要10多步还能忍，不能忍的是越南版本一下子21步，所以他们也总是调侃我们程序！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;QA:&quot;大佬，什么时候能优化下打包流程，说好的一键呢?&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我:&quot;大约在冬季，下个项目肯定一键，如果有可能给你做个语音的，直接说打包就行了&quot;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后纯属开玩笑，好了，废话不多说了，切入今天正题，如何做到一键打包？&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;lemma-summary&quot; readability=&quot;91.932932810201&quot;&gt;
&lt;p&gt;　　Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。主要功能包括：1、持续的软件版本发布/测试项目。2、监控外部调用执行的工作。这么说比较官方，说白了，它就是一种集承了多种常用的插件于一身的工具平台，通过这个平台你能很方便的管控你的项目！它的强大之处在于它能直接调用外部的shell指令和bat，那么今天我们一起去解开一点点它的什么面纱，为什么说是一点点呢？因为它太强大了，太深了！&lt;/p&gt;
&lt;h2&gt;1.1,Jenkins是如何安装的？&lt;/h2&gt;
&lt;p&gt;　　我使用的是2.164.2,下载地址在这里：&lt;a href=&quot;https://jenkins.io/download/&quot;&gt;https://jenkins.io/download/&lt;/a&gt; 下载后直接解压安装即可，使用需要先安装jdk，这个就不再废话了！&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512012619495-1906650898.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.2， 安装完成，如何使用呢？&lt;/h2&gt;
&lt;p&gt;　　打开你的浏览器输入：&lt;a href=&quot;http://localhost:8080/configure&quot;&gt;http://localhost:8080/&lt;/a&gt;  please wait for monment......&lt;/p&gt;
&lt;p&gt;　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512013217675-106082190.png&quot; alt=&quot;&quot; width=&quot;479&quot; height=&quot;265&quot;/&gt;　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512013204703-2021713848.png&quot; alt=&quot;&quot; width=&quot;535&quot; height=&quot;267&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 　　根据提示，找到该路径下的密码，复制到这里就可以了，接下来是初始化插件，需要等待1-2分钟&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512013511617-1134499593.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　初始化插件完成后是创建用户和密码，这看你高兴了，爱怎么创建就怎么创建了，我在这里就创建了用户名：admin  密码：123456 的用户，那么准备工作基本完成了！&lt;/p&gt;
&lt;h2&gt;1.3，如何用Jenkins创建我们第一个任务呢？&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512013838058-744340406.png&quot; alt=&quot;&quot;/&gt;　　&lt;/p&gt;
&lt;p&gt;　　任务创建好了，接下来该如何配置这个任务呢？&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512014323212-1744478717.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　将你的ssh私钥添加进来不然去gothub上无法checkout你的project&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512015000824-933047925.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;　　到此，一个简单的从GitHub上拉取工程的任务已经好了，构建下任务，也就是执行下我们创建的任务，你会惊喜的发现，github上的工程check下来了，目录在E:\Jenkins\workspace\Task_BuildAPK，就是你安装Jenkins的路径，下面会自动创建工作区间workspace下级目录就是你的任务名称，所有关于本任务的操作都会在这个目录下！大家可能会说这也忒简单了吧，那么来个稍微复杂点的，通过Jenkins传入参数来控制AssetBundle的打包方式，我们项目的打包分为全部资源打包和增量打包，这两种方式我们来尝试下！&lt;/p&gt;

&lt;p&gt;　　目标：通过Jenkins参数控制打包方式&lt;/p&gt;
&lt;h2&gt;　　2.1，如何通过Jenkins创建参数并将参数传入Editor下的打包指令中呢？&lt;/h2&gt;
&lt;p&gt;　　　　我们就先定义几个常用的参数，例如：资源版本号，打包渠道和AssetBundle的打包方式！&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512020317407-1065780826.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　参数设置完成最后显示是这个样子的&lt;br/&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512020950989-103413826.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　接下来如何将参数传递，由于%UnityPath% -projectPath %projectPath% -quit -batchmode -executeMethod AssetBundleFramework.AssetBundleBuilder.BuildAssetBundleCommond -logFile %filename%_buildAssetbundle.log也只能调用Editor下的静态方法，所以我先将设置好的参数按照一定的格式写到本地，执行打包指令时再去解析这些参数列表！这样就能完美的听从Jenkins参数去执行打包命令了！&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512021402390-483344500.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;打包主要调用了BuildWithParameter.bat，主要完成jenkins参数本地化，assetbundle资源打包和apk打包&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@echo off

set UnityPath&lt;/span&gt;=E:\Unity5.&lt;span&gt;6.6&lt;/span&gt;&lt;span&gt;\Unity\Editor\Unity.exe
set filename&lt;/span&gt;=%&lt;span&gt;date&lt;/span&gt;:~&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;%%&lt;span&gt;date&lt;/span&gt;:~&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;%%&lt;span&gt;date&lt;/span&gt;:~&lt;span&gt;8&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;%%&lt;span&gt;time&lt;/span&gt;:~&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;%%&lt;span&gt;time&lt;/span&gt;:~&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;%%&lt;span&gt;time&lt;/span&gt;:~&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;%&lt;span&gt;
set &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;filename=%filename: =0%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

REM &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,打AssetBudle资源;    &lt;span&gt;2&lt;/span&gt;,生成APK;    &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,Copy资源到目标路径

REM 接受Jenkins传入的参数
set parameter&lt;/span&gt;=%&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; parameter:%parameter%&lt;span&gt;

REM 将Jenkins传入的参数写到本地,Editor下读取在jenkins中设置的版本号和渠道名称
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; %parameter%&amp;gt;&lt;span&gt;parameter.txt


&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt;&lt;span&gt; Start Build AssetBundle
REM BuildAssetBundle
&lt;/span&gt;%UnityPath% -projectPath E:\Jenkins\workspace\Task_BuildAPK\AssetBundleFramework\AssetBundleFramework-master -quit -batchmode -executeMethod AssetBundleFramework.AssetBundleBuilder.BuildAssetBundleCommond -logFile %filename%&lt;span&gt;_buildAssetbundle.log
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt;&lt;span&gt; Build AssetBundle Finished


&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt;&lt;span&gt; Start Build APK
REM Build APK
&lt;/span&gt;%UnityPath% -projectPath E:\Jenkins\workspace\Task_BuildAPK\AssetBundleFramework\AssetBundleFramework-master -quit -batchmode -executeMethod PerformBuild.CommandLineBuildAndroid -logFile %filename%&lt;span&gt;_buildApk.log
REM &lt;/span&gt;%&lt;span&gt;1&lt;/span&gt; -projectPath %&lt;span&gt;2&lt;/span&gt; -quit -batchmode -executeMethod APKBuild.Build -&lt;span&gt;logFile build.log


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; not %errorlevel%==&lt;span&gt;0&lt;/span&gt; ( goto fail ) &lt;span&gt;else&lt;/span&gt;&lt;span&gt; ( goto success )
 
:success
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt;&lt;span&gt; Build APK OK
REM Copr Dir
goto end
 
:fail
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt;&lt;span&gt; Build APK Fail
goto end
 
:end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt; 　　2.1，这样到底可行吗？一起构建一次我们最新的任务看下结果！&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512021804332-691607705.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　不好意思，命令全部走完了，也没报错，就是没生成出来apk，，，最后看日志才知道是这里的问题，坑了我1个多小时.&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512033348259-1021859444.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 解决方案：将sdk的路径添加到全局属性中的环境变量即可！&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512033615711-543938282.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再次构建后，打包后生成了参数文件，打包日志文件和apk文件！&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512022615545-661707524.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　&lt;span&gt;工具之所以成为工具，就是因为你想要的它都能满足你,这个时候能来个通知就完美了！&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;　　3.1，构建结果，通过邮件通知你,怎么配置邮件呢？&lt;br/&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512024135856-1556943498.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　邮件主题设置：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　【构建通知】$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!&lt;br/&gt;　　邮件内容模板内容：　　　　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${ENV, var=&quot;JOB_NAME&quot;}-第${BUILD_NUMBER}次构建日志&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;leftmargin&lt;/span&gt;&lt;span&gt;=&quot;8&quot;&lt;/span&gt;&lt;span&gt; marginwidth&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; topmargin&lt;/span&gt;&lt;span&gt;=&quot;8&quot;&lt;/span&gt;&lt;span&gt; marginheight&lt;/span&gt;&lt;span&gt;=&quot;4&quot;&lt;/span&gt;&lt;span&gt;    
    offset&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;=&quot;95%&quot;&lt;/span&gt;&lt;span&gt; cellpadding&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; cellspacing&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;  style&lt;/span&gt;&lt;span&gt;=&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;    
            本邮件由系统自动发出，无需回复！&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;            
            各位同事，大家好，以下为${PROJECT_NAME }项目构建信息&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;font &lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;=&quot;#CC0000&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建结果 - ${BUILD_STATUS}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;font&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;   
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;    
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;font &lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;=&quot;#0B610B&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建信息&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;font&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;100%&quot;&lt;/span&gt;&lt;span&gt; align&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;项目名称 ： ${PROJECT_NAME}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建编号 ： 第${BUILD_NUMBER}次构建&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;触发原因： ${CAUSE}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建状态： ${BUILD_STATUS}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建日志： &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${BUILD_URL}console&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${BUILD_URL}console&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;构建  Url ： &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${BUILD_URL}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${BUILD_URL}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;工作目录 ： &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${PROJECT_URL}ws&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${PROJECT_URL}ws&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;项目  Url ： &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${PROJECT_URL}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${PROJECT_URL}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;font &lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;=&quot;#0B610B&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;失败用例&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;font&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;100%&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;
$FAILED_TESTS&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;font &lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;=&quot;#0B610B&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;最近提交(#$SVN_REVISION)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;font&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;100%&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
${CHANGES_SINCE_LAST_SUCCESS, reverse=true, format=&quot;%c&quot;, changesFormat=&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;%d [%a] %m&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
详细提交: &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${PROJECT_URL}changes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${PROJECT_URL}changes&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512024135856-1556943498.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　将邮件通知配置到我们的任务中&lt;br/&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512024426292-1768487882.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;　　　　设置完成，再次构建下我们的任务，AssetBundle打包完成，apk生成完毕，邮件发送事件被触发，Nice！！！&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512030617527-695553978.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　　　接下来，检查下邮件上都发送了什么？&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512030817311-110793293.jpg&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;　　　　意不意外，惊不惊喜，好不好玩？这些我也只是花了2天时间学习的，如果有什么地方写的不好或者是不正确欢迎指正和交流！大家有问题可以到QQ群：375151422找我交流！&lt;/p&gt;

&lt;p&gt;　　　未完待续，我们既然可以自动化生成apk了，那么接下来就是apk的测试了，先给大家看了，我自己没写完的测试！自动启动模拟器，启动后如果apk已安装，先卸载，再次安装最新的apk，然后启动apk并且支持退出该应用和关闭模拟器！如果有时间，下一篇会和大家一起分享，开源，奉献，程序精神！花了三个多小时写了这篇博客，刚好今天母亲节了，工作再忙，不能忘记父母和家人，父母要的并不多，一个电话足矣！！！晚安，睡觉！！！&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201905/506960-20190512031436988-532670394.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 11 May 2019 19:38:00 +0000</pubDate>
<dc:creator>wuzhang</dc:creator>
<og:description>使用Jenkins完成Unity一键打包！</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuzhang/p/20190512wuzhang.html</dc:identifier>
</item>
<item>
<title>C#汉字拼音检索 - 陈彦斌</title>
<link>http://www.cnblogs.com/chenyanbin/p/10850915.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenyanbin/p/10850915.html</guid>
<description>&lt;p&gt;链接：https://pan.baidu.com/s/16JXxMUlCaKsRSIc-beFobA&lt;br/&gt;提取码：jx0p&lt;br/&gt;&lt;span&gt;&lt;strong&gt;本机无须安装，需要引用的类与API已经整理出来啦~&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注：若需其他类型的检索，请安装相应的包，引用安装包下的类库即可，第一个包汉字，第二个包繁体...&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201905/1504448-20190512012357060-924343432.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;一、引用DLL类库&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201905/1504448-20190512012939871-1167958514.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;二、效果&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504448/201905/1504448-20190512014445158-1834349731.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;三、完整代码&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; button1_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、引用命名空间
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;using Microsoft.International.Converters.PinYinConverter;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、获取用户输入&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; user_input =&lt;span&gt; txtSC.Text.Trim();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             txtPy.Text =&lt;span&gt; GetPyFromChineseString(user_input);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetPyFromChineseString(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; user_input)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             StringBuilder sb = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; user_input.Length; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 ChineseChar cnChar = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ChineseChar(user_input[i]);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (cnChar.Pinyins.Count&amp;gt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;有拼音&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                     &lt;span&gt;string&lt;/span&gt; py = cnChar.Pinyins[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     sb.Append(py.Substring(&lt;span&gt;0&lt;/span&gt;, py.Length - &lt;span&gt;1&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;最后一个数字不要&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sb.ToString();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;四、完整项目地址&lt;/h3&gt;
&lt;p&gt;链接：https://pan.baidu.com/s/1HNPH8-PiaY5RalN19dKV3g&lt;br/&gt;提取码：9pdz&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt; 推荐超全NPOI资料在这里哦！~https://www.cnblogs.com/chenyanbin/p/10832614.html&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/h4&gt;

</description>
<pubDate>Sat, 11 May 2019 17:48:00 +0000</pubDate>
<dc:creator>陈彦斌</dc:creator>
<og:description>1、下载安装包 链接：https://pan.baidu.com/s/16JXxMUlCaKsRSIc-beFobA 提取码：jx0p 本机无须安装，需要引用的类与API已经整理出来啦~ 注：若需其他</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenyanbin/p/10850915.html</dc:identifier>
</item>
<item>
<title>智能灯控（基于ZigBee） - 东小东</title>
<link>http://www.cnblogs.com/dongxiaodong/p/10850702.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dongxiaodong/p/10850702.html</guid>
<description>&lt;p&gt;&lt;strong&gt;时间：2017年12月&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阶段：大二上学期&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;背景：&lt;/strong&gt;单片机原理与应用课设&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;名称：&lt;/strong&gt;智能灯控&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;本系统实现了多方式控灯功能，有按键控灯、串口指令控灯、点对点无线射频控灯、AI模式控灯。其中AI模式控灯是通过红外模块感应外界是否有人靠近来控制灯的亮灭及通过光敏传感器模块感应外界光照强度进而动态调整PWM占空比的输出来控制灯的亮度。&lt;/p&gt;
&lt;p&gt;物联网是新一代信息技术的重要组成部分，也是“信息化”时代的重要发展阶段。互联网是物联网个过渡，物联网将成为新时代的发展灵魂。&lt;/p&gt;
&lt;p&gt;处于AI时代来临前的我深感可庆，传统的灯控需要大量的布线，若要实现双控、三控及多控更是需要加大用线量，且开关还需要特别定制，及其麻烦，对于远程控制更是不敢想象。&lt;/p&gt;
&lt;p&gt;我们将要设计并打造出一款基于ZigBee模块，多传感器，多方式开关，远程智能控制的灯控系统，达到智能照明的节能、环保、舒适、方便的功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关键词 &lt;/strong&gt; 物联网；智能；控制；LED灯&lt;/p&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.1 系统研究背景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统的灯控需要大量的布线，若要实现双控、三控及多控更是需要加大用线量，且开关还需要特别定制，及其麻烦，对于远程控制更是不敢想象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.2 系统研究的意义和目的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设计并打造出一款基于ZigBee模块，多传感器，多方式开关，远程智能控制的灯控系统，达到智能照明的节能、环保、舒适、方便的功能。&lt;/p&gt;
&lt;h2&gt;系统概述&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;2.1 系统的结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本系统有软件和硬件两部分组成。&lt;/p&gt;
&lt;p&gt;软件部分：串口调试助手，控制灯的亮灭、打开和关闭AI模式和实时监测灯的变化情况和日志&lt;/p&gt;
&lt;p&gt;硬件部分：两个ZigBee模块，其中控制模块可以控制灯的亮灭和打开和关闭AI模式，被控制模块有人体红外感应模块、光敏传感器和LED发光二极管，其本身按键S1可以控制灯的亮灭，S2按键可以控制AI模式的开和关。AI模式是通过红外感应模块和光敏传感器智能控灯。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190511234430339-268223349.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                                            图2.1  系统结构图&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2  系统的功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）按键控灯：开发板按键S1可以控制灯的亮和灭；&lt;/p&gt;
&lt;p&gt;2）串口控灯：串口调试助手可发1开灯，和0关灯，控制灯的亮和灭；&lt;/p&gt;
&lt;p&gt;3）无线控灯：一对一无线控制灯的开关，安全，可靠，无线发送模块的按键S1为灯控按键；&lt;/p&gt;
&lt;p&gt;4）AI模式控灯：智能灯控的核心，AI模式可以感应周围是否有人经过来控制灯的开和关，并且可以根据外界的光照强度来调节自身灯的亮度，达到了节能、环保、舒适的绝佳效果；&lt;/p&gt;
&lt;p&gt;5）多方式AI模式开关：本系统提供多方式控制AI模式的开启和关闭，其方式有：按键S2、串口、无线发送模块按键S2；&lt;/p&gt;
&lt;p&gt;6）实时信息：串口助手实时上报灯的亮灭情况和当前受到哪方面的控制，如无线开灯时，串口将会显示“----无线开灯成功-----”和“/////AI模式关闭/////”信息，以达到最佳安全级别。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.3  开发环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IAR Embedded Workbench微型处理器开发环境&lt;/p&gt;
&lt;h2&gt; 硬件系统设计&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;3.1  Zigbee芯片 CC2530&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ZigBee是基于IEEE802.15.4标准的低功耗局域网协议。根据国际标准规定，ZigBee技术是一种短距离、低功耗的无线通信技术。这一名称（又称紫蜂协议）来源于蜜蜂的八字舞，由于蜜蜂(bee)是靠飞翔和“嗡嗡”(zig)地抖动翅膀的“舞蹈”来与同伴传递花粉所在方位信息，也就是说蜜蜂依靠这样的方式构成了群体中的通信网络。其特点是近距离、低复杂度、自组织、低功耗、低数据速率。主要适合用于自动控制和远程控制领域，可以嵌入各种设备。简而言之，ZigBee就是一种便宜的，低功耗的近距离无线组网通讯技术。ZigBee是一种低速短距离传输的无线网络协议。ZigBee协议从下到上分别为物理层(PHY)、媒体访问控制层(MAC)、传输层(TL)、网络层(NWK)、应用层(APL)等。其中物理层和媒体访问控制层遵循IEEE 802.15.4标准的规定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2  LED发光二极管&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;LED发光二极管采用的是2*5*7MM雾状白蓝色发光二极管，二极管的阳极接在ZigBee模块的P1_0引脚，阴极接ZigBee模块的GND引脚。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190511235425634-1351526784.png&quot; alt=&quot;&quot; width=&quot;403&quot; height=&quot;226&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                        图3.1  LED发光二极管实物图&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.3 人体红外感应模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;人体红外感应模块采用的是完整版的HC-SR501人体模块，自动感应，红外感应模块的VCC接在ZigBee模块的5.0vVCC引脚,GND接在ZigBee模块的GND 引脚，out接在ZigBee模块的P1_3引脚。&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190511235502066-486434830.png&quot; alt=&quot;&quot; width=&quot;253&quot; height=&quot;226&quot;/&gt;           &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190511235520486-1810290846.png&quot; alt=&quot;&quot; width=&quot;243&quot; height=&quot;211&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3.2      人体红外感应模块原理图             图3.3     人体红外感应模块实物图&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;3.4 光敏电阻传感器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;光敏电阻传感器采用的是4线光敏电阻传感器模块，光敏电阻型号为：5516，本产品使用的是AO模拟量输出，光敏电阻传感器的VCC脚接在ZigBee模块的3.3vVCC引脚，GND接在ZigBee模块的GND引脚，AO接在ZigBee模块的P0_5引脚。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190511235707323-583917212.png&quot; alt=&quot;&quot; width=&quot;244&quot; height=&quot;253&quot;/&gt;            &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190511235720080-52707220.png&quot; alt=&quot;&quot; width=&quot;252&quot; height=&quot;257&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3.4   光敏传感器模块原理图                    图 3.5  光敏传感器模块实物图&lt;/p&gt;
&lt;h2&gt;软件系统设计&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.1系统整体功能设计&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ADC环境光照强度魔术转换；PWM多级调光；多中断智能处理；人体红外感应；无线远距离控制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190511235956260-367262325.png&quot; alt=&quot;&quot; width=&quot;521&quot; height=&quot;516&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                          图4.1  程序流程图&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.2  AI模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AI模式可以感应周围是否有人经过来控制灯的开和关，并且可以根据外界的光照强度来调节自身灯的亮度，达到了节能、环保、舒适的绝佳效果。&lt;/p&gt;
&lt;p&gt;主函数while(1)循环里，if((boozd==1)&amp;amp;&amp;amp;(P1_3==1))（boozd为AI模式是否允许标志位，P1_3==1表示当前有人经过）成立则会不断获取当前ADC环境光照强度魔术转换后的值，然后用if(){}else if(){}方法与标准区间进行比较，若比较成功将会以当前区间所对应的LED亮度动态调整PWM占空比输出，然后将进行新判断、获取、比较。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190512000420446-1023846375.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                      图 4.2-1&lt;/p&gt;
&lt;p&gt;如图 4.2-1，串口调试助手发送 2，收到 CC2530 串口发送的的信息，此时红外人体感应模块和光敏传感器模块两者协调工作，共同控制 LED 灯，也可以通过接收 CC2530 单片机的按键模块的 S2 按键来打开和关闭 AI 模式，也可通过发送CC2530 单片机的按键 S2 来控制 AI 模式的启动与关闭； &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190512000531495-1821012156.png&quot; alt=&quot;&quot; width=&quot;425&quot; height=&quot;296&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                      图 4.2-2 &lt;/p&gt;
&lt;p&gt; 如图 4.2-2，系统处于 AI 模式时用手握紧光敏传感器模块，让光敏传感器模块处于黑暗的环境下，可见 LED 灯的亮度 &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190512000623994-128913972.png&quot; alt=&quot;&quot; width=&quot;417&quot; height=&quot;243&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                    图 4.2-3&lt;/p&gt;
&lt;p&gt; 如图 4.2-3，系统处于 AI 模式时，打开手机闪光灯靠近光敏传感器模块，可见LED 灯的亮度明显降低，当闪光灯更加接近光敏传感器模块时，LED 灯会熄灭 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.3 多中断智能处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本系统包含3大中断处理函数：&lt;/p&gt;
&lt;p&gt;1》》串口接收中断处理函数：&lt;/p&gt;
&lt;p&gt;#pragma vector=URX0_VECTOR &lt;/p&gt;
&lt;p&gt;__interrupt void urx0(){}&lt;/p&gt;
&lt;p&gt;可判断串口接收到的数据，然后进行智能处理，当接收到‘1’时，会以最大亮开灯和关闭AI模式，并且向串口调试助手发送“---串口开灯成功-----”和“----AI模式关闭-----”日志，当收到‘0’时，将向串口发送“/////串口关灯成功////”日志；当收到‘2’时，模块将会利用标志位判断AI模式是否打开，若打开则进行关闭操作，并向串口发送“----AI模式打开-----”日志；当收到其他数据时，模块将向串口将会发送“！！！无该指令！！！”日志。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190512000858596-781439663.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                          图 4.3-1&lt;br/&gt;如图 4.3-1，串口调试助手发送‘1’，LED 灯会以全亮的形式打开，并关闭AI模式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190512000941721-1204017099.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                        图 4.3-2&lt;/p&gt;
&lt;p&gt;如图 4.3-2，串口调试助手发送‘0’，LED 灯熄灭 （2 按键中断处理函数： &lt;/p&gt;
&lt;p&gt;#pragma vector=P0INT_VECTOR&lt;br/&gt;__interrupt void p0int(){}&lt;br/&gt;模块按键有 S1 和 S2，分别对应的是 ZigBee 模块的 P0_0 和 P0_1 引脚,S1可以控制灯的亮灭，当按键按下且 if(P0IFG&amp;amp;0x01)成立则表示可进入 S1 中断处理函数，函数里将根据标志位状态进行下一步操作，若标志位显示此时灯是灭的，则将会进行开灯功能，并向串口发送相应日志；S2 可以控制 AI 模式的开和关，当按按下且 if(P0IFG&amp;amp;0x02)成立将进入 S2 中断处理函数，函数里将根据标志位状态进行下一步操作，若标志位显示此时 AI 模式已开启，则会进行关闭 AI 模式操作，并先串口发送相应日志。 &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190512001124493-1301430117.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                         图 4.3-3&lt;br/&gt;如图 4.3-3，当按下接收 CC2530 单片机的按键模块的 S2 按键，串口调&lt;br/&gt;试助手收到单片机发来的 AI 模式打开的信息，此时 AI 模式正在运行中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190512001146719-837149617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                      图 4.3-4&lt;br/&gt;如图 4.3-4，当再次按下接收 CC2530 单片机的按键模块的 S2 按键，串口调试助手收到单片机发来的 AI 模式关闭信息，此时 LED 灯熄灭&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190512001212971-673022189.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                        图 4.3-5&lt;br/&gt;如图 4.3-5，当按下接收 CC2530 单片机的按键模块的 S1 按键，串口调试&lt;br/&gt;助手收到单片机发来的按键开灯成功和 AI 模式关闭信息，此时 LED 最亮显示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190512001250076-206582591.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                         图 4.3-6&lt;br/&gt;如图 4.3-6，当再次按下接收 CC2530 单片机的按键模块的 S1 按键，串口调试助手收到单片机发来的 LED 关闭信息，此时 LED 灯熄灭&lt;br/&gt;3》》RF 中断处理函数&lt;/p&gt;
&lt;p&gt;#pragma vector=RF_VECTOR __interrupt void x1(){}&lt;/p&gt;
&lt;p&gt; 当 ZigBee 模式收到发送模块数据时且 if(RFIRQF0 &amp;amp; 0x40)成立将进入 RF接收处理函数，读取数据包的倒数第 4 和第 3 个有效字节，倒数第 3 位数据对应串口发送‘2’的功能，倒数第 4 位数据对应的是串口发送‘1’的功能 &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190512001351230-1940926482.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                          图 4.3-7&lt;/p&gt;
&lt;p&gt;如图 4.3-7，当发送 CC2530 单片机模块按下 S1 按键时 ，接受 CC2530 将会进入 RF 中断，并收到“0x0D,0x51,0x88,0x00, 0x07,0x20,0xEF,0xBE,0x20, 0x50,'1','0'” 数据包，经过解析可知是控制灯的亮灭指令，接受单片机模块执行开灯和关闭 AI 模式 &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190512001415546-1692797262.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                            图 4.3-8&lt;/p&gt;
&lt;p&gt;如图 4.3-8，当发送 CC2530 单片机模块再次按下 S1 按键时 ，接受CC2530 将会再次进入 RF 中断，并再次接收到“0x0D,0x51,0x88,0x00, 0x07,0x20,0xEF,0xBE,0x20, 0x50,'1','0'” 数据包，经过解析可知是控制灯的亮灭指令，接受单片机模块执行关灯操作 &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190512001444362-133225373.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                       图 4.3-9&lt;/p&gt;
&lt;p&gt;如图 4.3-9，当发送 CC2530 单片机模块按下 S2 按键时 ，接受 CC2530 将会进入RF 中断，并收到“0x0D,0x51,0x88,0x00,0x07,0x20,0xEF,0xBE,0x20, 0x50,'0','2'” 数据包，经过解析可知是控制 AI 模式的启动与停止指令，接受单片机判断此时 AI 模式是否开启然后继续相反操作。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190512001510684-770606386.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                     图 4.3-10&lt;/p&gt;
&lt;p&gt; 如图 4.3-10，当发送 CC2530 单片机模块再次按下 S2 按键时 ，接受 CC2530将会再次进入 RF 中断，并收到“0x0D,0x51,0x88,0x00,0x07,0x20,0xEF, 0xBE,0x20,0x50,'0','2'” 数据包，经过解析可知是控制 AI 模式的启动与停止指令，接受单片机判断此时 AI 模式是否开启然后进行相反操作。&lt;/p&gt;
&lt;h2&gt;系统调试&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;5.1. 系统硬件调试&lt;/strong&gt;&lt;br/&gt;单个功能一一测试完成后，发现 ZigBee 模块仅有一个 GND 引脚，所以把全&lt;br/&gt;部传感器、二极管等的 GND 引脚一起用 1 根杜邦线引入 ZigBee 模块的 GND 引脚。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201905/1485202-20190512001639572-1181418278.png&quot; alt=&quot;&quot; width=&quot;463&quot; height=&quot;338&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                              5.1 硬件总体实物图&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.2. 系统软件调试&lt;/strong&gt;&lt;br/&gt;如何更加准确的知道当前环境的光照情况，明暗变化的光照强度 ADC 变化，可以通过：&lt;/p&gt;
&lt;p&gt;char str[30];&lt;br/&gt;sprintf(str,&quot;adc 数值为：%d&quot;,adc);&lt;br/&gt;uartTX_Send(str);&lt;br/&gt;在主函数实时发送 ADC 的值到串口调试助手里，获取每个光照阶段里 ADC转换的值，计算 PWM 占空比以达到最佳的调光效果。&lt;/p&gt;
&lt;h2&gt;相关部分代码&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;RF收&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; #include&amp;lt;iocc2530.h&amp;gt;
&lt;span&gt;  2&lt;/span&gt; #include&amp;lt;stdio.h&amp;gt;
&lt;span&gt;  3&lt;/span&gt; #include&amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt;  4&lt;/span&gt; #include&amp;lt;stdbool.h&amp;gt;
&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; LED P1_1
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; uint unsigned int
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; boozd=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; boog=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;uint&lt;/span&gt; pwmx[&lt;span&gt;11&lt;/span&gt;]={&lt;span&gt;0x00&lt;/span&gt;,&lt;span&gt;0xF7&lt;/span&gt;,&lt;span&gt;0xE1&lt;/span&gt;,&lt;span&gt;0xC8&lt;/span&gt;,&lt;span&gt;0xAF&lt;/span&gt;,&lt;span&gt;0x96&lt;/span&gt;,&lt;span&gt;0x7D&lt;/span&gt;,&lt;span&gt;0x64&lt;/span&gt;,&lt;span&gt;0x4B&lt;/span&gt;,&lt;span&gt;0x32&lt;/span&gt;,&lt;span&gt;0x01&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;uint&lt;/span&gt;&lt;span&gt; adc;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; adcResu;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; InitLED(){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;*****************初始化LED灯&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt; P1SEL &amp;amp;=&lt;span&gt;0xFD&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; P1DIR |=&lt;span&gt;0x02&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; LED=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; InitADC(){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;********************初始化ADC&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt; P0DIR &amp;amp;=&lt;span&gt;0xDF&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;P0_5为输入&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt; APCFG |=&lt;span&gt;0x20&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置为模拟口&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt; ADCCON3 =&lt;span&gt;0x75&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;0011 0101，端口电压，512抽取率，P0_5&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt; adc=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; ADCH=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; ADCL=&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清除ADC数据&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; ADCCON1=&lt;span&gt;0x30&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;停止ADC转换&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt; ADCCON1 |=&lt;span&gt;0x40&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动ADC转换&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Initclock()&lt;span&gt;//&lt;/span&gt;&lt;span&gt;*************************************时钟初始化&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;32MHz&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;  SLEEPCMD &amp;amp;=&lt;span&gt;0xFB&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;开启全部RC振荡器，避免16MHZRC振荡器被关闭&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;  &lt;span&gt;while&lt;/span&gt;((SLEEPSTA&amp;amp;&lt;span&gt;0x40&lt;/span&gt;)==&lt;span&gt;0&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;等待32MHZ上电稳定&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;  CLKCONCMD &amp;amp;=&lt;span&gt;0xBF&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置32MHZ为系统时钟源&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;  &lt;span&gt;while&lt;/span&gt;(CLKCONSTA&amp;amp;&lt;span&gt;0x40&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;等待32MHZ成功成为系统时钟源&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;  CLKCONCMD |=&lt;span&gt;0x38&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;  CLKCONCMD &amp;amp;=&lt;span&gt;0xF8&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;系统时钟不分频输出，定时器为250KHZ&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;  SLEEPCMD |=&lt;span&gt;0x04&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭不用的RC振荡器&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; 
&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; InitUart(){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;*******************************串口初始化&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;   PERCFG &amp;amp;=&lt;span&gt;0xFE&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将串口0的位置选在P0口&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;   P2DIR &amp;amp;=&lt;span&gt;0x3F&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;P0口的外设优先级控制设为串口0优先&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;   P0SEL |=&lt;span&gt;0x0C&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;P0口的2、3管脚设为外设工作方式&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;   U0CSR |=&lt;span&gt;0xC0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;USART0工作的UART模式，接收使能&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;   U0UCR=&lt;span&gt;0x02&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;据格式为8位数据位、1位停止位、没有校验位&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;   U0GCR |=&lt;span&gt;11&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;波特率为115200&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;   U0BAUD |=&lt;span&gt;216&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;   EA=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;   URX0IE=&lt;span&gt;1&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;接收中断打开&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;   UTX0IF=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;   URX0IF=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt; }
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;  &lt;span&gt;void&lt;/span&gt; delay(&lt;span&gt;uint&lt;/span&gt; i){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;*********************延时函数&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;uint&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;i;j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;uint&lt;/span&gt; x=&lt;span&gt;0&lt;/span&gt;;x&amp;lt;&lt;span&gt;1000&lt;/span&gt;;x++&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; uartTX_Send(&lt;span&gt;char&lt;/span&gt; *strx){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;********************串口发送&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;  &lt;span&gt;while&lt;/span&gt;(*strx!=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;   U0DBUF=*&lt;span&gt;strx;
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;   &lt;span&gt;while&lt;/span&gt;((U0CSR&amp;amp;&lt;span&gt;0x02&lt;/span&gt;)==&lt;span&gt;0&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;等待发送完成&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;    *strx++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;    U0CSR &amp;amp;=&lt;span&gt;0xFD&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; InitTime(){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;**********************pwm
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出比较，P1_0&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;  P1SEL |=&lt;span&gt;0x01&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;  P1DIR &amp;amp;=&lt;span&gt;0xEE&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;  PERCFG |=&lt;span&gt;0x40&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;  P2DIR |=&lt;span&gt;0xC0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定时器通道2-3最高优先级&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;  T1CTL=&lt;span&gt;0x02&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模模式，0x00-T1CC0!!!!!!!!!!!!!!!!&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;  T1CCTL2=&lt;span&gt;0x1C&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;  T1CC0H=&lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;  T1CC0L=&lt;span&gt;0xFA&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;周期为1ms,频率为1KHZ 必须设置！！！！&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;  T1CC2H=&lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;  T1CC2L=pwmx[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0x00 0xF7 0xE1 0xC8 0xAF 0x96 0x7D 0x64 0x4B 0x32 0x19 &lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; InitButton(){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;*******************按键中断初始化&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt; P0SEL &amp;amp;=&lt;span&gt;0xFC&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; P0DIR &amp;amp;=&lt;span&gt;0xFC&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; P0INP &amp;amp;=&lt;span&gt;0xFC&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; P2INP &amp;amp;=&lt;span&gt;0xFC&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; PICTL |=&lt;span&gt;0x01&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; P0IE=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; P0IEN |=&lt;span&gt;0x03&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; P0IF=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; P0IFG &amp;amp;=&lt;span&gt;0xFC&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Initho(){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;******************************红外感应初始化
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;P1_3&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt; P1SEL &amp;amp;=&lt;span&gt;0xF7&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; P1DIR &amp;amp;=&lt;span&gt;0xF7&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; P1INP &amp;amp;=&lt;span&gt;0xF7&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; P2INP |=&lt;span&gt;0x40&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; InitWX()&lt;span&gt;//&lt;/span&gt;&lt;span&gt;***********************************射频的初始化&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; FRMCTRL0 |=&lt;span&gt;0x60&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; TXFILTCFG =&lt;span&gt;0x09&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; AGCCTRL1 =&lt;span&gt;0x15&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; FSCAL1=&lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; 
&lt;span&gt;102&lt;/span&gt; RFIRQM0 |=&lt;span&gt;0x40&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开接收中断&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt; IEN2 |=&lt;span&gt;0x01&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; FREQCTRL=(&lt;span&gt;11&lt;/span&gt;+(&lt;span&gt;25&lt;/span&gt;-&lt;span&gt;11&lt;/span&gt;)*&lt;span&gt;5&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 25号信道可改设置载波为2475M&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt; 
&lt;span&gt;106&lt;/span&gt; PAN_ID0=&lt;span&gt;0x07&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; PAN_ID1=&lt;span&gt;0x20&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;PAMID&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt; 
&lt;span&gt;109&lt;/span&gt; RFST=&lt;span&gt;0xEC&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清除接收缓冲器&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt; RFST=&lt;span&gt;0xE3&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;开启接收使能&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt; 
&lt;span&gt;112&lt;/span&gt; SHORT_ADDR0=&lt;span&gt;0xEF&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; SHORT_ADDR1=&lt;span&gt;0xBE&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置模块网络地址&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;  InitLED();
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;  Initclock();
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;  InitUart();
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;  InitADC();
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;  InitTime();
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;  InitButton();
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;  Initho();
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;  InitWX();
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;   boozd=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;   boog=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;   &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ADCCON1&amp;amp;&lt;span&gt;0x80&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;     adc |=(ADCL&amp;gt;&amp;gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;     adc |=(ADCH&amp;lt;&amp;lt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;((boozd==&lt;span&gt;1&lt;/span&gt;)&amp;amp;&amp;amp;(P1_3==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)){
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;         LED=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;        &lt;span&gt;if&lt;/span&gt;(adc&amp;gt;&lt;span&gt;6191&lt;/span&gt;){T1CC2H=&lt;span&gt;0x00&lt;/span&gt;;T1CC2L=pwmx[&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];}
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(adc&amp;gt;&lt;span&gt;5191&lt;/span&gt;){T1CC2H=&lt;span&gt;0x00&lt;/span&gt;;T1CC2L=pwmx[&lt;span&gt;8&lt;/span&gt;&lt;span&gt;];}
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(adc&amp;gt;&lt;span&gt;4191&lt;/span&gt;){T1CC2H=&lt;span&gt;0x00&lt;/span&gt;;T1CC2L=pwmx[&lt;span&gt;6&lt;/span&gt;&lt;span&gt;];}
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(adc&amp;gt;&lt;span&gt;3191&lt;/span&gt;){T1CC2H=&lt;span&gt;0x00&lt;/span&gt;;T1CC2L=pwmx[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];}
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(adc&amp;gt;&lt;span&gt;2191&lt;/span&gt;){T1CC2H=&lt;span&gt;0x00&lt;/span&gt;;T1CC2L=pwmx[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];}
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;        &lt;span&gt;if&lt;/span&gt;(adc&amp;lt;&lt;span&gt;2191&lt;/span&gt;){T1CC2H=&lt;span&gt;0x00&lt;/span&gt;;T1CC2L=pwmx[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];}
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;  char str[30];
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;    sprintf(str,&quot;adc数值为：%d&quot;,adc);
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt; &lt;span&gt;    uartTX_Send(str);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt;     }&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(boog){
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;     LED=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;     T1CC2H=&lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;     T1CC2L=pwmx[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;     InitADC();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;再次启动&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;     delay(&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;     
&lt;span&gt;149&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; &lt;span&gt;#pragma&lt;/span&gt; vector=URX0_VECTOR
&lt;span&gt;153&lt;/span&gt; __interrupt &lt;span&gt;void&lt;/span&gt; urx0(){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;*******************串口中断处理函数&lt;/span&gt;
&lt;span&gt;154&lt;/span&gt;   
&lt;span&gt;155&lt;/span&gt;   &lt;span&gt;char&lt;/span&gt;&lt;span&gt; bufch1;
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;   bufch1=&lt;span&gt;U0DBUF;
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;  &lt;span&gt;if&lt;/span&gt;(bufch1==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;  {boog=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;   T1CC2H=&lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;   T1CC2L=pwmx[&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;   boozd=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;   LED=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;   uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   ----串口开灯成功-----  \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;    uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   ----AI模式关闭-----  \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;  &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(bufch1==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt; {boog=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt; boozd=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;   LED=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;  T1CC2H=&lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;  T1CC2L=pwmx[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;  uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   /////串口关灯成功////  \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;  &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(bufch1==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;    boog=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;     LED=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;    boozd=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;   uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   ----AI模式打开-----  \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt; &lt;span&gt; }
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;  &lt;span&gt;else&lt;/span&gt; 
&lt;span&gt;181&lt;/span&gt; uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   ！！！无该指令！！！  \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; 
&lt;span&gt;183&lt;/span&gt; 
&lt;span&gt;184&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt; &lt;span&gt;#pragma&lt;/span&gt; vector=P0INT_VECTOR&lt;span&gt;//&lt;/span&gt;&lt;span&gt;**************按键中断处理函数&lt;/span&gt;
&lt;span&gt;186&lt;/span&gt; __interrupt &lt;span&gt;void&lt;/span&gt;&lt;span&gt; p0int(){
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt;   &lt;span&gt;if&lt;/span&gt;(P0IFG&amp;amp;&lt;span&gt;0x01&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;    delay(&lt;span&gt;150&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;   &lt;span&gt;if&lt;/span&gt;(P0_0==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt;     boog=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(LED==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt;       LED=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt;      boozd=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;      T1CC2H=&lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt;      T1CC2L=pwmx[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt;      uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   /////按键关灯成功////  \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;      
&lt;span&gt;198&lt;/span&gt;     }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt;       LED=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;       boozd=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt;   uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   ----按键开灯成功-----  \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt;   uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   /////AI模式关闭///// \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt;   T1CC2H=&lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt;   T1CC2L=pwmx[&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt;   &lt;span&gt;if&lt;/span&gt;(P0IFG&amp;amp;&lt;span&gt;0x02&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt;    delay(&lt;span&gt;150&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt;   &lt;span&gt;if&lt;/span&gt;(P0_1==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt;     boog=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(boozd==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt;       boozd=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt;       LED=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt;     uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   ----AI模式打开-----  \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt;     }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt;      boozd=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt;      LED=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt;     uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   /////AI模式关闭///// \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;221&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt; P0IF=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt; P0IFG &amp;amp;=&lt;span&gt;0xFC&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt; &lt;span&gt;#pragma&lt;/span&gt; vector=RF_VECTOR&lt;span&gt;//&lt;/span&gt;&lt;span&gt;******************RF中断处理函数&lt;/span&gt;
&lt;span&gt;227&lt;/span&gt; __interrupt &lt;span&gt;void&lt;/span&gt;&lt;span&gt; x1()
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(RFIRQF0 &amp;amp; &lt;span&gt;0x40&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; 
&lt;span&gt;231&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; len;
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;&lt;span&gt;  ch;
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt; len=ch=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt; len=RFD; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个字节&lt;/span&gt;
&lt;span&gt;235&lt;/span&gt; &lt;span&gt;while&lt;/span&gt;(len&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt;   ch=&lt;span&gt;RFD;
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(len==&lt;span&gt;4&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt;   &lt;span&gt;if&lt;/span&gt;(ch==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;){ 
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt;       boog=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt;(LED==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt;        LED=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt;        boozd=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt;        T1CC2H=&lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt;      T1CC2L=pwmx[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt;      uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   /////无线关灯成功////  \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt;      
&lt;span&gt;247&lt;/span&gt;     }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt;    LED=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;     boozd=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt;     uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   ----无线开灯成功-----  \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt;     uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   /////AI模式关闭///// \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt;     T1CC2H=&lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt;     T1CC2L=pwmx[&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt; &lt;span&gt;    }}}
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(len==&lt;span&gt;3&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;   &lt;span&gt;if&lt;/span&gt;(ch==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;){     
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt;     boog=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(boozd==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt;       boozd=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt;       LED=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt;     uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   ----AI模式打开-----  \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt;     }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt;      boozd=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;264&lt;/span&gt;      LED=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt;     uartTX_Send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n   /////AI模式关闭///// \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;266&lt;/span&gt; &lt;span&gt;    }}}
&lt;/span&gt;&lt;span&gt;267&lt;/span&gt; len--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;268&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;269&lt;/span&gt; RFIRQF0 &amp;amp;=~&lt;span&gt;0x40&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;270&lt;/span&gt; S1CON=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;271&lt;/span&gt; RFST =&lt;span&gt;0xEC&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;272&lt;/span&gt; RFST=&lt;span&gt;0xE3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;273&lt;/span&gt; }}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;RF发&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;iocc2530.h&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Initwx()&lt;span&gt;//&lt;/span&gt;&lt;span&gt;********************************射频的初始化&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; EA=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; FRMCTRL0 |=&lt;span&gt;0x60&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; TXFILTCFG =&lt;span&gt;0x09&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; AGCCTRL1 =&lt;span&gt;0x15&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; FSCAL1=&lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; RFIRQM0 |=&lt;span&gt;0x40&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开射频接收中断，应该在下面写接收中断函数&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; IEN2 |=&lt;span&gt;0x01&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;RFIE中断开&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; FREQCTRL=(&lt;span&gt;11&lt;/span&gt;+(&lt;span&gt;25&lt;/span&gt;-&lt;span&gt;11&lt;/span&gt;)*&lt;span&gt;5&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置信道为25则载波为2475M&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; PAN_ID0=&lt;span&gt;0x07&lt;/span&gt;;&lt;span&gt;//////&lt;/span&gt;&lt;span&gt;PANID&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; PAN_ID1=&lt;span&gt;0x20&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;0x2007&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; RFST=&lt;span&gt;0xEC&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清除接收缓冲器&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; RFST=&lt;span&gt;0xE3&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;开启接收使能&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; EA=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; fa( &lt;span&gt;char&lt;/span&gt; *fsj,&lt;span&gt;int&lt;/span&gt; len){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;************************发送函数&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; RFST=&lt;span&gt;0xEC&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;确保接收是空&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; RFST=&lt;span&gt;0xE3&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清接收标志位&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;while&lt;/span&gt;(FSMSTAT1 &amp;amp; &lt;span&gt;0x22&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;等待射频发送准备好&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; RFST =&lt;span&gt;0xEE&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;确保发送队列为空 &lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; RFIRQF1 &amp;amp;=~&lt;span&gt;0x02&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清空发送标志位&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;len;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;   RFD=&lt;span&gt;fsj[i];}
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; RFST=&lt;span&gt;0xE9&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送缓冲区的数据&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;while&lt;/span&gt;(!(RFIRQF1 &amp;amp; &lt;span&gt;0x02&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;等待发送完成&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; RFIRQF1=~&lt;span&gt;0x02&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清发送完成标志&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; delay(){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;*****************延时函数&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;30&lt;/span&gt;;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;&lt;span&gt;1000&lt;/span&gt;;j++&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; go32m()&lt;span&gt;//&lt;/span&gt;&lt;span&gt;*************************时钟频率初始化&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;  SLEEPCMD &amp;amp;=&lt;span&gt;0xFB&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;开启全部RC振荡器，避免16MHZRC振荡器被关闭&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;  &lt;span&gt;while&lt;/span&gt;((SLEEPSTA&amp;amp;&lt;span&gt;0x40&lt;/span&gt;)==&lt;span&gt;0&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;等待32MHZ上电稳定&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;  CLKCONCMD &amp;amp;=&lt;span&gt;0xBF&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置32MHZ为系统时钟源&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;  &lt;span&gt;while&lt;/span&gt;(CLKCONSTA&amp;amp;&lt;span&gt;0x40&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;等待32MHZ成功成为系统时钟源&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;  CLKCONCMD |=&lt;span&gt;0x38&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;  CLKCONCMD &amp;amp;=&lt;span&gt;0xF8&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;系统时钟不分频输出，定时器为250KHZ&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;  SLEEPCMD |=&lt;span&gt;0x04&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭不用的RC振荡器&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; InitButton()&lt;span&gt;//&lt;/span&gt;&lt;span&gt;**************************&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; P0SEL &amp;amp;=&lt;span&gt;0xFC&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; P0DIR &amp;amp;=&lt;span&gt;0xFC&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; P0INP &amp;amp;=&lt;span&gt;0xFC&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; P2INP &amp;amp;=&lt;span&gt;0xFC&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; PICTL |=&lt;span&gt;0x01&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; P0IE=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; P0IEN |=&lt;span&gt;0x03&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; P0IF=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; P0IFG &amp;amp;=&lt;span&gt;0xFC&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; InitLED(){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;***************************************&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt; P1SEL &amp;amp;=&lt;span&gt;0xFC&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; P1DIR |=&lt;span&gt;0x03&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; P1_0=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; P1_1=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; 
&lt;span&gt;67&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;InitLED();
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;go32m();
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;InitButton();
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;Initwx();
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; SHORT_ADDR0=&lt;span&gt;0x50&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; SHORT_ADDR1=&lt;span&gt;0x20&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置模块网络地址为0x2050;&lt;/span&gt;
&lt;span&gt;75&lt;/span&gt; &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;#pragma&lt;/span&gt; vector=P0INT_VECTOR
&lt;span&gt;78&lt;/span&gt; __interrupt &lt;span&gt;void&lt;/span&gt;&lt;span&gt; xx()
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;   &lt;span&gt;if&lt;/span&gt;(P0IFG&amp;amp;&lt;span&gt;0x01&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;    delay();
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(P0_0==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; 
&lt;span&gt;84&lt;/span&gt;     P1_0=~&lt;span&gt;P1_0;
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; fsj[]={&lt;span&gt;0x0D&lt;/span&gt;,&lt;span&gt;0x51&lt;/span&gt;,&lt;span&gt;0x88&lt;/span&gt;,&lt;span&gt;0x00&lt;/span&gt;,&lt;span&gt;0x07&lt;/span&gt;,&lt;span&gt;0x20&lt;/span&gt;,&lt;span&gt;0xEF&lt;/span&gt;,&lt;span&gt;0xBE&lt;/span&gt;,&lt;span&gt;0x20&lt;/span&gt;,&lt;span&gt;0x50&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt;     fa(fsj,&lt;span&gt;12&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送函数&lt;/span&gt;
&lt;span&gt;87&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt;   &lt;span&gt;if&lt;/span&gt;(P0IFG&amp;amp;&lt;span&gt;0x02&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt; &lt;span&gt;  delay();
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt;   &lt;span&gt;if&lt;/span&gt;(P0_1==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;92&lt;/span&gt; 
&lt;span&gt;93&lt;/span&gt;    P1_0=~&lt;span&gt;P1_0;
&lt;/span&gt;&lt;span&gt;94&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; fsj[]={&lt;span&gt;0x0D&lt;/span&gt;,&lt;span&gt;0x51&lt;/span&gt;,&lt;span&gt;0x88&lt;/span&gt;,&lt;span&gt;0x00&lt;/span&gt;,&lt;span&gt;0x07&lt;/span&gt;,&lt;span&gt;0x20&lt;/span&gt;,&lt;span&gt;0xEF&lt;/span&gt;,&lt;span&gt;0xBE&lt;/span&gt;,&lt;span&gt;0x20&lt;/span&gt;,&lt;span&gt;0x50&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;95&lt;/span&gt;     fa(fsj,&lt;span&gt;12&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送函数&lt;/span&gt;
&lt;span&gt;96&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;97&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;98&lt;/span&gt;  P0IF=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;99&lt;/span&gt;  P0IFG &amp;amp;=&lt;span&gt;0xFC&lt;/span&gt;;}
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 11 May 2019 16:22:00 +0000</pubDate>
<dc:creator>东小东</dc:creator>
<og:description>时间：2017年12月 阶段：大二上学期 背景：单片机原理与应用课设 名称：智能灯控 摘要 本系统实现了多方式控灯功能，有按键控灯、串口指令控灯、点对点无线射频控灯、AI模式控灯。其中AI模式控灯是通</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dongxiaodong/p/10850702.html</dc:identifier>
</item>
<item>
<title>MySQL 表和列的注释 - 刘哇勇</title>
<link>http://www.cnblogs.com/Wayou/p/mysql_comments_for_table_and_column.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Wayou/p/mysql_comments_for_table_and_column.html</guid>
<description>&lt;p&gt;像代码一样，可以为表以及表中的列添加注释，方便其他人知晓其功能。对于一些字段，在经过一定时间后，创建者未必也能想起其具体的含意，所以注释显得尤为重要。&lt;/p&gt;
&lt;h2&gt;注释的添加&lt;/h2&gt;
&lt;p&gt;注释的添加是通过在定义表或列的时候在末尾加上 &lt;code&gt;COMMENT&lt;/code&gt; 关键字来实现的，最长支持 1024 个字符。&lt;/p&gt;
&lt;p&gt;可以在创建表的时候为表和列添加相应的注释。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-sql&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;test_comment&lt;/span&gt; 
  ( 
     id   &lt;span class=&quot;pl-k&quot;&gt;SERIAL&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;PRIMARY KEY&lt;/span&gt;, 
     col1 &lt;span class=&quot;pl-k&quot;&gt;INT&lt;/span&gt; comment &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;列的注释&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; 
  ) 
comment &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;表的注释&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行上面的语句后创建了一个名为 &lt;code&gt;test_comment&lt;/code&gt; 的表，并且为表和其中的 &lt;code&gt;col1&lt;/code&gt; 列指定了相应的注释。&lt;/p&gt;
&lt;p&gt;然后可通过 &lt;code&gt;SHOW CREATE TABLE &amp;lt;table_name&amp;gt;&lt;/code&gt; 来查看。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-sql&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SHOW CREATE TABLE test_comment\G
&lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;. row &lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt;
       Table: test_comment
Create Table: CREATE TABLE &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;test_comment&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; (
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;20&lt;/span&gt;) unsigned &lt;span class=&quot;pl-k&quot;&gt;NOT NULL&lt;/span&gt; AUTO_INCREMENT,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;col1&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;11&lt;/span&gt;) DEFAULT &lt;span class=&quot;pl-k&quot;&gt;NULL&lt;/span&gt; COMMENT &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;列的注释&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-k&quot;&gt;PRIMARY KEY&lt;/span&gt; (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;),
  UNIQUE KEY &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;)
) ENGINE&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;InnoDB DEFAULT CHARSET&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;utf8mb4 COLLATE&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;utf8mb4_general_ci COMMENT&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;表的注释&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; row &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;注释的查看&lt;/h2&gt;
&lt;p&gt;除了 &lt;code&gt;SHOW CREATE TABLE &amp;lt;table_name&amp;gt;&lt;/code&gt; 语法，还有其他一些查看注释的方式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SHOW TABLE STATUS&lt;/code&gt; 能够查看表的注释，其语法为：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-sql&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
SHOW TABLE STATUS &lt;span class=&quot;pl-k&quot;&gt;WHERE&lt;/span&gt; name&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;table_name&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下是通过 &lt;code&gt;SHOW TABLE STATUS&lt;/code&gt; 查看的结果：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SHOW TABLE STATUS WHERE name=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;test_comment&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\G&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt; 1. row &lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt;
           Name: test_comment
         Engine: InnoDB
        Version: 10
     Row_format: Dynamic
           Rows: 0
 Avg_row_length: 0
    Data_length: 16384
Max_data_length: 0
   Index_length: 16384
      Data_free: 0
 Auto_increment: 1
    Create_time: 2019-05-11 15:41:01
    Update_time: NULL
     Check_time: NULL
      Collation: utf8mb4_general_ci
       Checksum: NULL
 Create_options:
        Comment: 表的注释
1 row &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而通过 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/show-columns.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;SHOW FULL COLUMNS&lt;/code&gt;&lt;/a&gt; 则可查看列的注释，其语法为：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-sql&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
SHOW FULL COLUMNS &lt;span class=&quot;pl-k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;tablename&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下是通过 &lt;code&gt;SHOW FULL COLUMNS&lt;/code&gt; 查看的结果：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;SHOW FULL COLUMNS FROM test_comment&lt;span class=&quot;pl-cce&quot;&gt;\G&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt; 1. row &lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt;
     Field: id
      Type: bigint(20) unsigned
 Collation: NULL
      Null: NO
       Key: PRI
   Default: NULL
     Extra: auto_increment
Privileges: select,insert,update,references
   Comment:
&lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt; 2. row &lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt;
     Field: col1
      Type: int(11)
 Collation: NULL
      Null: YES
       Key:
   Default: NULL
     Extra:
Privileges: select,insert,update,references
   Comment: 列的注释
2 rows &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;借助 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/information-schema.html&quot; rel=&quot;nofollow&quot;&gt;INFORMATION_SCHEMA 中的表&lt;/a&gt; 也能查看表或列的注释。&lt;/p&gt;
&lt;p&gt;比如查看表的注释：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-sql&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;SELECT&lt;/span&gt; table_comment 
&lt;span class=&quot;pl-k&quot;&gt;FROM&lt;/span&gt;   &lt;span class=&quot;pl-c1&quot;&gt;information_schema&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;tables&lt;/span&gt; 
&lt;span class=&quot;pl-k&quot;&gt;WHERE&lt;/span&gt;  table_name &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;test_comment&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SELECT table_comment
    -&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; FROM   information_schema.tables
    -&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; WHERE  table_name = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;test_comment&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+---------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; TABLE_COMMENT &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+---------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; 表的注释      &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+---------------+
1 row &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.01 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看列的注释：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-sql&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;SELECT&lt;/span&gt; column_comment 
&lt;span class=&quot;pl-k&quot;&gt;FROM&lt;/span&gt;   &lt;span class=&quot;pl-c1&quot;&gt;information_schema&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;columns&lt;/span&gt; 
&lt;span class=&quot;pl-k&quot;&gt;WHERE&lt;/span&gt;  column_name &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;col1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SELECT column_comment
    -&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; FROM   information_schema.columns
    -&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; WHERE  column_name = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;col1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+----------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; COLUMN_COMMENT &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+----------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; 列的注释       &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+----------------+
1 row &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;注释的更新&lt;/h2&gt;
&lt;p&gt;对已经存在的表和列，可通过相应的更新修改操作来添加注释。&lt;/p&gt;
&lt;h3&gt;列注释的添加，更新&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CHANGE&lt;/code&gt; 和 &lt;code&gt;MODIFY&lt;/code&gt; 等效，区别在于 &lt;code&gt;CHANGE&lt;/code&gt; 重写定义列，需要书写完整的列定义，包括新的列名称，即使你并不想修改列的免，而 &lt;code&gt;MODIFY&lt;/code&gt; 则不用指定新的列名称。&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;CHANGE&lt;/code&gt; 语法：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-sql&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ALTER TABLE test_comment CHANGE col1 col1 &lt;span class=&quot;pl-k&quot;&gt;INT&lt;/span&gt; COMMENT &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;列的注释2&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
Query OK, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; rows affected (&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;02&lt;/span&gt; sec)
Records: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;  Duplicates: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;  Warnings: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 &lt;code&gt;MODIFY&lt;/code&gt; 语法：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ALTER TABLE test_comment MODIFY col1 INT COMMENT &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;列的注释2&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看修改结果：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SHOW CREATE TABLE test_comment&lt;span class=&quot;pl-cce&quot;&gt;\G&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt; 1. row &lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt;
       Table: test_comment
Create Table: CREATE TABLE &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;test_comment&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; (
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;col1&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; int(11) DEFAULT NULL COMMENT &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;列的注释2&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
  PRIMARY KEY (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;),
  UNIQUE KEY &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;表的注释&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
1 row &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;表注释的添加，更新&lt;/h3&gt;
&lt;p&gt;通过 &lt;code&gt;ALTER TABLE&lt;/code&gt; 来完成对表注释的添加和更新。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ALTER TABLE test_comment comment &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;表的注释2&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看更新结果：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SHOW CREATE TABLE test_comment&lt;span class=&quot;pl-cce&quot;&gt;\G&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt; 1. row &lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt;
       Table: test_comment
Create Table: CREATE TABLE &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;test_comment&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; (
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;col1&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; int(11) DEFAULT NULL COMMENT &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;列的注释2&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
  PRIMARY KEY (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;),
  UNIQUE KEY &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;表的注释2&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
1 row &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;注释的删除&lt;/h2&gt;
&lt;p&gt;更新注释时指定为空即可。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ALTER TABLE test_comment COMMENT &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ALTER TABLE test_comment MODIFY col1 INT COMMENT &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看删除结果：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SHOW CREATE TABLE test_comment&lt;span class=&quot;pl-cce&quot;&gt;\G&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt; 1. row &lt;span class=&quot;pl-k&quot;&gt;***************************&lt;/span&gt;
       Table: test_comment
Create Table: CREATE TABLE &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;test_comment&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; (
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;col1&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; int(11) DEFAULT NULL,
  PRIMARY KEY (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;),
  UNIQUE KEY &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
1 row &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;相关资源&lt;/h2&gt;
</description>
<pubDate>Sat, 11 May 2019 16:20:00 +0000</pubDate>
<dc:creator>刘哇勇</dc:creator>
<og:description>像代码一样，可以为表以及表中的列添加注释，方便其他人知晓其功能。对于一些字段，在经过一定时间后，创建者未必也能想起其具体的含意，所以注释显得尤为重要。 注释的添加 注释的添加是通过在定义表或列的时候在</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Wayou/p/mysql_comments_for_table_and_column.html</dc:identifier>
</item>
<item>
<title>oracle批量新增更新数据 - smileNicky</title>
<link>http://www.cnblogs.com/mzq123/p/10850729.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mzq123/p/10850729.html</guid>
<description>&lt;p&gt;本博客介绍一下Oracle批量新增数据和更新数据的sql写法，业务场景是这样的，往一张关联表里批量新增更新数据，然后，下面介绍一下批量新增和更新的写法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;批量新增数据&lt;/strong&gt;&lt;br/&gt;对于批量新增数据，介绍两种方法&lt;/p&gt;
&lt;p&gt;(1)命令窗口执行的&lt;br/&gt;一种需要在命令窗口执行的，Oracle数据库可以使用sqlplus或者plsql developer客户端软件&lt;/p&gt;
&lt;p&gt;可以使用sqlplus工具登录，进入数据库&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sqlplus / as sysdba&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看用户，可以用命令&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;show parameter db_name
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;plsql developer也可以使用，登录之后，选择文件(File)-&amp;gt;新建(New)-&amp;gt;命令窗口(Command Window)&lt;br/&gt;假如要往表格t里写1000条数据，可以用如下批处理命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;begin 
    for i in 1 .. 1000
    loop
        execute immediate
        'insert into t values('|| i ||')';
    end loop;
    commit;
end;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ps：这个commit提交事务，放的位置也是有区别的，具体可以参考我之前的博客，&lt;a href=&quot;https://smilenicky.blog.csdn.net/article/details/89846006&quot;&gt;Oracle体系结构学习笔记&lt;/a&gt;里面有涉及到&lt;/p&gt;
&lt;p&gt;(2) SQL窗口执行的&lt;br/&gt;然后介绍sql窗口执行的方法，因为命令窗口执行有时候觉得不太便利，所以可以使用sql窗口的方法，语法大致为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;insert into [表格名称](字段名称1,字段名称2,...) [查询SQL]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;给个例子,sys_guid()生成uuid数据，sysdate获取当前时间，然后批量写数据，根据查询sql来&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;insert into t_stuff_dir_related
  (seq, dir_seq, create_date, create_man, stuff_id, t_item)
  select sys_guid(),
         'uuidss',
         sysdate,
         'admin',
         b.rs_id,
         a.t_item
    from t_itm_define a
  where a.is_valid =1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;批量更新数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于批量更新的和批量新增方法类型，同样可以用命令窗口和sql窗口两种方法&lt;/p&gt;
&lt;p&gt;(1)命令窗口执行的&lt;/p&gt;
&lt;p&gt;同样可以用如下批处理命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;begin 
    for i in 1 .. 1000
    loop
        execute immediate
        '${更新SQL}';
    end loop;
    commit;
end;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(1)SQL窗口执行的&lt;/p&gt;
&lt;p&gt;批量更新加了where条件就可以&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; update t_itm_rcv_stuff stuff
    set stuff.dir_seq = '${目录SEQ}', stuff.dir_name = '${目录名称}'
  where stuff.t_item in
        (select a.t_item
           from t_itm_define a)
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 11 May 2019 16:13:00 +0000</pubDate>
<dc:creator>smileNicky</dc:creator>
<og:description>本博客介绍一下Oracle批量新增数据和更新数据的sql写法，业务场景是这样的，往一张关联表里批量新增更新数据，然后，下面介绍一下批量新增和更新的写法： 批量新增数据 对于批量新增数据，介绍两种方法</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mzq123/p/10850729.html</dc:identifier>
</item>
<item>
<title>kali渗透综合靶机(七)--Super-Mario-Host靶机 - 雨中落叶</title>
<link>http://www.cnblogs.com/yuzly/p/10801308.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yuzly/p/10801308.html</guid>
<description>&lt;p&gt;&lt;span&gt;kali渗透综合靶机(七)--Super-Mario-Host靶机&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;靶机百度云下载  链接：https://pan.baidu.com/s/13l1FUgJjXArfoTOfcmPsbA 提取码：a8ox&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、主机发现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.netdiscover -i eth0 -r 192.168.10.0/24&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201905/1592114-20190501234713159-2084110031.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、端口扫描&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. masscan --rate=10000 -p0-65535 192.168.10.160&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201905/1592114-20190501234724895-208653237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、端口服务识别&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.nmap -sV -T4 -O 192.168.10.160 -p 22,80&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201905/1592114-20190501234741588-1290509678.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、漏洞发现与利用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.扫描网站目录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Dirb http://192.168.10.161:8180&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201905/1592114-20190501234757597-629936316.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.发现http://192.168.10.161:8180/vhosts&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201905/1592114-20190501234814383-845429439.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3. 在本地hosts文件添加解析记录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201905/1592114-20190501234828206-1045363850.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.浏览器访问&lt;a href=&quot;http://mario.supermariohost.local:8180/&quot;&gt;http://mario.supermariohost.local:8180/&lt;/a&gt;，别的什么都没有&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201905/1592114-20190501234842075-1853982986.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;5. 使用dirbuster扫描目录,扫描出来如下目录&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201905/1592114-20190501234857123-1779382916.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6. 发现http://mario.supermariohost.local:8180/luigi.php&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201905/1592114-20190501234910263-644546717.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7. 发现&lt;a href=&quot;http://mario.supermariohost.local:8180/command.php&quot;&gt;http://mario.supermariohost.local:8180/command.php&lt;/a&gt;  测试luigi，发现存在&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201905/1592114-20190501234935184-968992865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;8.使用cewl爬取站点下的可疑用户名作为用户名字典&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cewl http://mario.supermariohost.local:8180/ -d -w /root/user.txt&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;9. john在该user的基础上生成相应社工密码进行爆破&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;john --wordlist=user.txt --stdout --rules &amp;gt; passwd.txt&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;10.爆破出密码,使用ssh登录,发现是受限的shell，使用awk调用系统命令,绕过限制&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;awk ‘BEGIN{system(“/bin/bash”)}’&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201905/1592114-20190501235001694-2030558012.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;11.查看内核版本,然后再kali使用searchsploit查找是否有exp&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201905/1592114-20190501235022145-509704852.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;12.开始提权,成功获得管理员权限&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1592114/201905/1592114-20190501235039448-1071384818.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.信息收集&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.dirbuster、dirb扫描目录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.测试用户是否存在&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.使用cewl爬取站点下的可疑用户名作为用户名字典&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.j&lt;span lang=&quot;EN-US&quot;&gt;ohn在该&lt;span lang=&quot;EN-US&quot;&gt;user的基础上生成相应社工密码进行爆破&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;6.受用awk调用系统命令绕过受限的shell&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;7.利用内核版本漏洞本地提权&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 11 May 2019 16:10:00 +0000</pubDate>
<dc:creator>雨中落叶</dc:creator>
<og:description>kali渗透综合靶机(七)--Super-Mario-Host靶机 靶机百度云下载 链接：https://pan.baidu.com/s/13l1FUgJjXArfoTOfcmPsbA 提取码：a8o</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yuzly/p/10801308.html</dc:identifier>
</item>
<item>
<title>CentOS 7 安装 MySQL - 宋喜阳</title>
<link>http://www.cnblogs.com/520zm/p/10850721.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/520zm/p/10850721.html</guid>
<description>&lt;p&gt;将MySQL Yum存储库添加到系统的存储库列表中 (以后更新不用在添加)&lt;/p&gt;
&lt;p&gt;1. 下载RPM包&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://dev.mysql.com/downloads/repo/yum/&quot;&gt;https://dev.mysql.com/downloads/repo/yum/&lt;/a&gt;  (选合适的系统版本)&lt;/p&gt;
&lt;p&gt;2. 安装RPM包, 即添加存储库&lt;/p&gt;
&lt;p&gt;　　yum localinstall mysql80-community-release-el7-3.noarch.rpm  (文件要带路径, 安装后可以删除)&lt;/p&gt;
&lt;p&gt;3. 检查MySQL存储库是否添加成功&lt;/p&gt;
&lt;p&gt;　　&lt;span class=&quot;token command&quot;&gt;yum repolist enabled | grep &lt;span class=&quot;token atrule&quot;&gt;&quot;mysql.*-community.*&quot;  (没有报错即添加成功, 一般不会失败)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token command&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;4. 安装MySQL&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token command&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;　　yum install mysql-community-server  (默认安装最新版本)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token command&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;5. 启动MySQL(默认设置开机自启)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token command&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;　　service mysqld start  (如果失败, 按提示操作即可)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token command&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;6. 设置root 账户密码&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token command&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;　　grep &lt;span class=&quot;token atrule&quot;&gt;'temporary password' /var/log/mysqld&lt;span class=&quot;token punctuation&quot;&gt;.log  (这是获取root 账户的一个临时密码)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token command&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;　　mysql -uroot -p  (登录)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token command&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;　　输入获取的临时密码&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token command&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;　　&lt;span class=&quot;token keyword&quot;&gt;ALTER &lt;span class=&quot;token keyword&quot;&gt;USER &lt;span class=&quot;token string&quot;&gt;'root'@&lt;span class=&quot;token string&quot;&gt;'localhost' &lt;span class=&quot;token keyword&quot;&gt;IDENTIFIED &lt;span class=&quot;token keyword&quot;&gt;BY &lt;span class=&quot;token string&quot;&gt;'MyNewPass4!'&lt;span class=&quot;token punctuation&quot;&gt;;  (修改root用户密码: 要求密码包含至少一个大写字母，一个小写字母，一个数字和一个特殊字符，并且总密码长度至少为8个字符)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token command&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;OK&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 11 May 2019 16:09:00 +0000</pubDate>
<dc:creator>宋喜阳</dc:creator>
<og:description>将MySQL Yum存储库添加到系统的存储库列表中 (以后更新不用在添加) 1. 下载RPM包 https://dev.mysql.com/downloads/repo/yum/ (选合适的系统版本)</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/520zm/p/10850721.html</dc:identifier>
</item>
<item>
<title>NLP入门（九）词义消岐（WSD）的简介与实现 - jclian91</title>
<link>http://www.cnblogs.com/jclian91/p/10850704.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jclian91/p/10850704.html</guid>
<description>&lt;h3 id=&quot;词义消岐简介&quot;&gt;词义消岐简介&lt;/h3&gt;
&lt;p&gt;  词义消岐，英文名称为Word Sense Disambiguation，英语缩写为WSD，是自然语言处理（NLP）中一个非常有趣的基本任务。&lt;br/&gt;  那么，什么是词义消岐呢？通常，在我们的自然语言中，不管是英语，还是中文，都有多义词存在。这些多义词的存在，会让人对句子的意思产生混淆，但人通过学习又是可以正确地区分出来的。&lt;br/&gt;  以&lt;strong&gt;“小米”&lt;/strong&gt;这个词为例，如果仅仅只是说“小米”这个词语，你并不知道它实际指的到底是小米科技公司还是谷物。但当我们把词语置于某个特定的语境中，我们能很好地区分出这个词语的意思。比如，&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;雷军是小米的创始人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这个句子中，我们知道这个“小米”指的是小米科技公司。比如&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;我今天早上喝了一碗小米粥。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这个句子中，“小米”指的是谷物、农作物。&lt;br/&gt;  所谓词义消岐，指的是在特定的语境中，识别出某个歧义词的正确含义。&lt;br/&gt;  那么，词义消岐有什么作用呢？词义消岐可以很好地服务于语言翻译和智能问答领域，当然，还有许多应用有待开发～&lt;/p&gt;
&lt;h3 id=&quot;词义消岐实现&quot;&gt;词义消岐实现&lt;/h3&gt;
&lt;p&gt;  在目前的词义消岐算法中，有不少原创算法，有些实现起来比较简单，有些想法较为复杂，但实现的效果普遍都不是很好。比较经典的词义消岐的算法为Lesk算法，该算法的想法很简单，通过对某个歧义词构建不同含义的语料及待判别句子中该词语与语料的重合程度来实现，具体的算法原理可参考网址：&lt;a href=&quot;https://en.wikipedia.org/wiki/Lesk_algorithm&quot; class=&quot;uri&quot;&gt;https://en.wikipedia.org/wiki/Lesk_algorithm&lt;/a&gt; .&lt;br/&gt;  在下面的部分中，笔者将会介绍自己想的一种实现词义消岐的算法，仅仅是一个想法，仅供参考。&lt;br/&gt;  我们以词语“火箭”为例，选取其中的两个&lt;strong&gt;义项&lt;/strong&gt;（同一个词语的不同含义）：&lt;a href=&quot;https://baike.baidu.com/item/%E7%81%AB%E7%AE%AD/8794081#viewPageContent&quot; title=&quot;NBA球队名&quot;&gt;NBA球队名&lt;/a&gt; 和 &lt;a href=&quot;https://baike.baidu.com/item/%E7%81%AB%E7%AE%AD/6308#viewPageContent&quot; title=&quot;燃气推进装置&quot;&gt;燃气推进装置&lt;/a&gt; ，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1219272/201905/1219272-20190512000216231-1197327764.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;获取语料&quot;&gt;获取语料&lt;/h4&gt;
&lt;p&gt;  首先，我们利用爬虫爬取这两个义项的百度百科网页，以句子为单位，只要句子中出现该词语，则把这句话加入到这个义项的预料中。爬虫的完整Python代码如下：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import requests
from bs4 import BeautifulSoup
from pyltp import SentenceSplitter

class WebScrape(object):
    def __init__(self, word, url):
        self.url = url
        self.word = word

    # 爬取百度百科页面
    def web_parse(self):
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 \
                                             (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36'}
        req = requests.get(url=self.url, headers=headers)

        # 解析网页，定位到main-content部分
        if req.status_code == 200:
            soup = BeautifulSoup(req.text.encode(req.encoding), 'lxml')
            return soup
        return None

    # 获取该词语的义项
    def get_gloss(self):
        soup = self.web_parse()
        if soup:
            lis = soup.find('ul', class_=&quot;polysemantList-wrapper cmn-clearfix&quot;)
            if lis:
                for li in lis('li'):
                    if '&amp;lt;a' not in str(li):
                        gloss = li.text.replace('▪', '')
                        return gloss

        return None

    # 获取该义项的语料，以句子为单位
    def get_content(self):
        # 发送HTTP请求
        result = []
        soup = self.web_parse()
        if soup:
            paras = soup.find('div', class_='main-content').text.split('\n')
            for para in paras:
                if self.word in para:
                    sents = list(SentenceSplitter.split(para))
                    for sent in sents:
                        if self.word in sent:
                            sent = sent.replace('\xa0', '').replace('\u3000', '')
                            result.append(sent)

        result = list(set(result))

        return result

    # 将该义项的语料写入到txt
    def write_2_file(self):
        gloss = self.get_gloss()
        result = self.get_content()
        print(gloss)
        print(result)
        if result and gloss:
            with open('./%s_%s.txt'% (self.word, gloss), 'w', encoding='utf-8') as f:
                f.writelines([_+'\n' for _ in result])

    def run(self):
        self.write_2_file()

# NBA球队名
#url = 'https://baike.baidu.com/item/%E4%BC%91%E6%96%AF%E6%95%A6%E7%81%AB%E7%AE%AD%E9%98%9F/370758?fromtitle=%E7%81%AB%E7%AE%AD&amp;amp;fromid=8794081#viewPageContent'
# 燃气推进装置
url = 'https://baike.baidu.com/item/%E7%81%AB%E7%AE%AD/6308#viewPageContent'
WebScrape('火箭', url).run()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;利用这个爬虫，我们爬取了“火箭”这个词语的两个义项的语料，生成了火箭_燃气推进装置.txt文件和火箭_NBA球队名.txt文件，这两个文件分别含有361和171个句子。以火箭_燃气推进装置.txt文件为例，前10个句子如下：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;火箭技术的飞速发展，不仅可提供更加完善的各类导弹和推动相关科学的发展，还将使开发空间资源、建立空间产业、空间基地及星际航行等成为可能。&lt;br/&gt;火箭技术是一项十分复杂的综合性技术，主要包括火箭推进技术、总体设计技术、火箭结构技术、控制和制导技术、计划管理技术、可靠性和质量控制技术、试验技术，对导弹来说还有弹头制导和控制、&lt;br/&gt;1903年，俄国的К.E.齐奥尔科夫斯基提出了制造大型液体火箭的设想和设计原理。&lt;br/&gt;火箭有很多种，原始的火箭是用引火物附在弓箭头上，然后射到敌人身上引起焚烧的一种箭矢。&lt;br/&gt;“长征三号丙”火箭是在 “长征三号乙”火箭的基础上， 减少了两个助推器并取消了助推器上的尾翼。&lt;br/&gt;火箭与导弹有什么区别&lt;br/&gt;为了能够在未来大规模的将人类送入太空，不可能依赖传统的火箭和飞船。&lt;br/&gt;火箭V2火箭&lt;br/&gt;探测高层大气的物理特征（如气压、温度、湿度等）和现象的探空火箭。&lt;br/&gt;可一次发射一发至数十发火箭弹。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;实现算法&quot;&gt;实现算法&lt;/h4&gt;
&lt;p&gt;  我们以句子为单位进行词义消岐，即输入一句话，识别出该句子中某个歧义词的含义。笔者使用的算法比较简单，是以TF-IDF为权重的频数判别。以句子&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;赛季初的时候，火箭是众望所归的西部决赛球队。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为例，对该句子分词后，去掉停用词（stopwords），然后分别统计除了“火箭”这个词以外的TF-IDF值，累加起来,比较在两个义项下这个值的大小即可。&lt;br/&gt;  实现这个算法的完整Python代码如下：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import os
import jieba
from math import log2

# 读取每个义项的语料
def read_file(path):
    with open(path, 'r', encoding='utf-8') as f:
        lines = [_.strip() for _ in f.readlines()]
        return lines

# 对示例句子分词
sent = '赛季初的时候，火箭是众望所归的西部决赛球队。'
wsd_word = '火箭'

jieba.add_word(wsd_word)
sent_words = list(jieba.cut(sent, cut_all=False))

# 去掉停用词
stopwords = [wsd_word, '我', '你', '它', '他', '她', '了', '是', '的', '啊', '谁', '什么','都',\
             '很', '个', '之', '人', '在', '上', '下', '左', '右', '。', '，', '！', '？']

sent_cut = []
for word in sent_words:
    if word not in stopwords:
        sent_cut.append(word)

print(sent_cut)


# 计算其他词的TF-IDF以及频数
wsd_dict = {}
for file in os.listdir('.'):
    if wsd_word in file:
        wsd_dict[file.replace('.txt', '')] = read_file(file)

# 统计每个词语在语料中出现的次数
tf_dict = {}
for meaning, sents in wsd_dict.items():
    tf_dict[meaning] = []
    for word in sent_cut:
        word_count = 0
        for sent in sents:
            example = list(jieba.cut(sent, cut_all=False))
            word_count += example.count(word)

        if word_count:
            tf_dict[meaning].append((word, word_count))

idf_dict = {}
for word in sent_cut:
    document_count = 0
    for meaning, sents in wsd_dict.items():
        for sent in sents:
            if word in sent:
                document_count += 1

    idf_dict[word] = document_count

# 输出值
total_document = 0
for meaning, sents in wsd_dict.items():
    total_document += len(sents)

# 计算tf_idf值
mean_tf_idf = []
for k, v in tf_dict.items():
    print(k+':')
    tf_idf_sum = 0
    for item in v:
        word = item[0]
        tf = item[1]
        tf_idf = item[1]*log2(total_document/(1+idf_dict[word]))
        tf_idf_sum += tf_idf
        print('%s, 频数为: %s, TF-IDF值为: %s'% (word, tf, tf_idf))

    mean_tf_idf.append((k, tf_idf_sum))

sort_array = sorted(mean_tf_idf, key=lambda x:x[1], reverse=True)
true_meaning = sort_array[0][0].split('_')[1]
print('\n经过词义消岐，%s在该句子中的意思为 %s .' % (wsd_word, true_meaning))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;['赛季', '初', '时候', '众望所归', '西部', '决赛', '球队']
火箭_燃气推进装置:
初, 频数为: 2, TF-IDF值为: 12.49585502688717
火箭_NBA球队名:
赛季, 频数为: 63, TF-IDF值为: 204.6194333469459
初, 频数为: 1, TF-IDF值为: 6.247927513443585
时候, 频数为: 1, TF-IDF值为: 8.055282435501189
西部, 频数为: 16, TF-IDF值为: 80.88451896801904
决赛, 频数为: 7, TF-IDF值为: 33.13348038429679
球队, 频数为: 40, TF-IDF值为: 158.712783770034

经过词义消岐，火箭在该句子中的意思为 NBA球队名 .&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;测试&quot;&gt;测试&lt;/h4&gt;
&lt;p&gt;  接着，我们对上面的算法和程序进行更多的测试。&lt;/p&gt;
&lt;p&gt;输入句子为:&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;三十多年前，战士们在戈壁滩白手起家，建起了我国的火箭发射基地。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出结果为:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;['三十多年', '前', '战士', '们', '戈壁滩', '白手起家', '建起', '我国', '发射', '基地']
火箭_燃气推进装置:
前, 频数为: 2, TF-IDF值为: 9.063440958888354
们, 频数为: 1, TF-IDF值为: 6.05528243550119
我国, 频数为: 3, TF-IDF值为: 22.410959804340102
发射, 频数为: 89, TF-IDF值为: 253.27878721862933
基地, 频数为: 7, TF-IDF值为: 42.38697704850833
火箭_NBA球队名:
前, 频数为: 3, TF-IDF值为: 13.59516143833253
们, 频数为: 1, TF-IDF值为: 6.05528243550119

经过词义消岐，火箭在该句子中的意思为 燃气推进装置 .&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入句子为：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;对于马刺这样级别的球队，常规赛只有屈指可数的几次交锋具有真正的意义，今天对火箭一役是其中之一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;['对于', '马刺', '这样', '级别', '球队', '常规赛', '只有', '屈指可数', '几次', '交锋', '具有', '真正', '意义', '今天', '对', '一役', '其中', '之一']
火箭_燃气推进装置:
只有, 频数为: 1, TF-IDF值为: 7.470319934780034
具有, 频数为: 5, TF-IDF值为: 32.35159967390017
真正, 频数为: 2, TF-IDF值为: 14.940639869560068
意义, 频数为: 1, TF-IDF值为: 8.055282435501189
对, 频数为: 5, TF-IDF值为: 24.03677461028802
其中, 频数为: 3, TF-IDF值为: 21.16584730650357
之一, 频数为: 2, TF-IDF值为: 14.11056487100238
火箭_NBA球队名:
马刺, 频数为: 1, TF-IDF值为: 7.470319934780034
球队, 频数为: 40, TF-IDF值为: 158.712783770034
常规赛, 频数为: 14, TF-IDF值为: 73.4709851882102
只有, 频数为: 1, TF-IDF值为: 7.470319934780034
对, 频数为: 10, TF-IDF值为: 48.07354922057604
之一, 频数为: 1, TF-IDF值为: 7.05528243550119

经过词义消岐，火箭在该句子中的意思为 NBA球队名 .&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入句子为：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;姚明是火箭队的主要得分手之一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;['姚明', '火箭队', '主要', '得分手', '之一']
火箭_燃气推进装置:
主要, 频数为: 9, TF-IDF值为: 51.60018906552445
之一, 频数为: 2, TF-IDF值为: 14.11056487100238
火箭_NBA球队名:
姚明, 频数为: 18, TF-IDF值为: 90.99508383902142
火箭队, 频数为: 133, TF-IDF值为: 284.1437533641371
之一, 频数为: 1, TF-IDF值为: 7.05528243550119

经过词义消岐，火箭在该句子中的意思为 NBA球队名 .&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入的句子为:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;从1992年开始研制的长征二号F型火箭，是中国航天史上技术最复杂、可靠性和安全性指标最高的运载火箭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;['从', '1992', '年', '开始', '研制', '长征二号', 'F', '型', '中国', '航天史', '技术', '最', '复杂', '、', '可靠性', '和', '安全性', '指标', '最高', '运载火箭']
火箭_燃气推进装置:
从, 频数为: 6, TF-IDF值为: 29.312144604353264
1992, 频数为: 1, TF-IDF值为: 6.733354340613827
年, 频数为: 43, TF-IDF值为: 107.52982410441274
开始, 频数为: 5, TF-IDF值为: 30.27641217750595
研制, 频数为: 25, TF-IDF值为: 110.28565614316162
长征二号, 频数为: 37, TF-IDF值为: 159.11461253349566
F, 频数为: 7, TF-IDF值为: 40.13348038429679
中国, 频数为: 45, TF-IDF值为: 153.51418105769093
技术, 频数为: 27, TF-IDF值为: 119.10850863461454
最, 频数为: 2, TF-IDF值为: 7.614709844115208
、, 频数为: 117, TF-IDF值为: 335.25857156467714
可靠性, 频数为: 5, TF-IDF值为: 30.27641217750595
和, 频数为: 76, TF-IDF值为: 191.22539545388003
安全性, 频数为: 2, TF-IDF值为: 14.940639869560068
运载火箭, 频数为: 95, TF-IDF值为: 256.28439093389505
火箭_NBA球队名:
从, 频数为: 5, TF-IDF值为: 24.42678717029439
1992, 频数为: 2, TF-IDF值为: 13.466708681227654
年, 频数为: 52, TF-IDF值为: 130.0360663588247
开始, 频数为: 2, TF-IDF值为: 12.11056487100238
中国, 频数为: 4, TF-IDF值为: 13.64570498290586
最, 频数为: 3, TF-IDF值为: 11.422064766172813
、, 频数为: 16, TF-IDF值为: 45.847326025938756
和, 频数为: 31, TF-IDF值为: 77.99983235618791
最高, 频数为: 8, TF-IDF值为: 59.76255947824027

经过词义消岐，火箭在该句子中的意思为 燃气推进装置 .&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入句子为：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;到目前为止火箭已经在休斯顿进行了电视宣传，并在大街小巷竖起广告栏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;['到', '目前为止', '已经', '休斯顿', '进行', '电视', '宣传', '并', '大街小巷', '竖起', '广告栏']
火箭_燃气推进装置:
到, 频数为: 11, TF-IDF值为: 39.19772273088667
已经, 频数为: 2, TF-IDF值为: 13.466708681227654
进行, 频数为: 14, TF-IDF值为: 68.39500407682429
并, 频数为: 11, TF-IDF值为: 49.17351928258037
火箭_NBA球队名:
到, 频数为: 6, TF-IDF值为: 21.38057603502909
已经, 频数为: 2, TF-IDF值为: 13.466708681227654
休斯顿, 频数为: 2, TF-IDF值为: 14.940639869560068
进行, 频数为: 2, TF-IDF值为: 9.770714868117755
并, 频数为: 5, TF-IDF值为: 22.351599673900168

经过词义消岐，火箭在该句子中的意思为 燃气推进装置 .&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;  对于笔者的这个算法，虽然有一定的效果，但是也不总是识别正确。比如，对于最后一个测试的句子，识别的结果就是错误的，其实“休斯顿”才是识别该词语义项的关键词，但很遗憾，在笔者的算法中，“休斯顿”的权重并不高。&lt;br/&gt;  对于词义消岐算法，如果还是笔者的这个思路，那么有以下几方面需要改进：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;语料大小及丰富程度；&lt;/li&gt;
&lt;li&gt;停用词的扩充；&lt;/li&gt;
&lt;li&gt;更好的算法。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  笔者的这篇文章仅作为词义消岐的简介以及简单实现，希望能对读者有所启发～&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：本人现已开通微信公众号： Python爬虫与算法（微信号为：easy_web_scrape）， 欢迎大家关注哦~~&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 11 May 2019 16:03:00 +0000</pubDate>
<dc:creator>jclian91</dc:creator>
<og:description>NLP入门（九）词义消岐（WSD）的简介与实现</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jclian91/p/10850704.html</dc:identifier>
</item>
<item>
<title>MySQL Online DDL导致全局锁表案例分析 - 李国宝</title>
<link>http://www.cnblogs.com/liguobao/p/10850629.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liguobao/p/10850629.html</guid>
<description>&lt;h2 id=&quot;我这边遇到了什么问题&quot;&gt;我这边遇到了什么问题?&lt;/h2&gt;
&lt;p&gt;线上给某个表执行新增索引SQL, 然后整个数据CPU打到100%, 连接数暴增到极限, 最后导致所有访问数据库的应用都奔溃.&lt;/p&gt;
&lt;p&gt;SQL如下:&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;ALTER TABLE `book` 
ADD INDEX `idx_sub_title` (`sub_title` ASC);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;能看到什么?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/64d1e863gy1g2xs6mvu97j21aw05ygof.jpg&quot; alt=&quot;tu1&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;log&quot;&gt;
&lt;code&gt;'10063293', 'root', '10.0.0.1:35252', 'novel', 'Query', '50', 'Waiting for table metadata lock', 'ALTER TABLE `lemon_novel`.`book` \nADD INDEX `idx_sub_title` (`sub_title` ASC)'


'10094494', 'root', '172.16.2.112:42808', 'novel', 'Query', '31', 'Waiting for table metadata lock', 'SELECT \n            book_trend.book_id AS book_id,
   &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;很奇怪, 这两边都在等&quot;Waiting for table metadata lock&quot;&lt;/p&gt;

&lt;ol readability=&quot;0.03030303030303&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/digdeep/p/4892953.html&quot;&gt;MySQL出现Waiting for table metadata lock的原因以及解决方法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/30551926&quot;&gt;mysql: Waiting for table metadata lock&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/13148630/how-do-i-find-which-transaction-is-causing-a-waiting-for-table-metadata-lock-s&quot;&gt;How do I find which transaction is causing a “Waiting for table metadata lock” state?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/metadata-locking.html&quot;&gt;MySQL:8.11.4 Metadata Locking&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/innodb-online-ddl-operations.html&quot;&gt;MySQL:14.13.1 Online DDL Operations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;初步的一些结论&quot;&gt;初步的一些结论&lt;/h2&gt;
&lt;p&gt;看下来下面的一些结论:&lt;/p&gt;
&lt;ol readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;MySQL 5.6以后的版本，支持在线DDL，新增index/删除index之类的可以直接InPlace操作，不需要rebuild整张表，理论上效果是很快的，详细资料见Online DDL Operations&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;DDL add index 操作会lock table metadata，此操作是导致我们服务不可用的原因&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;有怀疑过lock tabel matadata和MySQL autocommit有关，但是实践下来两者看起来没有关联。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;后来在阿里云上面还看到过他们特定写过类似的答疑.&lt;/p&gt;
&lt;ol readability=&quot;-0.0125&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://help.aliyun.com/document_detail/94566.html?spm=a2c4g.11186623.2.7.2a504335H3f8Wz#task-csn-5tt-4fb&quot;&gt;解决MDL锁导致无法操作数据库的问题&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://help.aliyun.com/knowledge_detail/41733.html?spm=a2c4g.11186623.4.2.2a504335nWEjej&quot;&gt;RDS for MySQL Online DDL 使用&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;阿里云建议主要是这样操作.&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;这里需要找到的是一直在占用该表的会话，而不是正在等待MDL锁解除的会话，注意区分。可以根据State列的状态和Info列的命令内容来进行分析判断。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;您也可以用如下命令查询长时间未完成的事务，如果导致阻塞的语句的用户与当前用户不同，请使用导致阻塞的语句的用户登录来终止会话。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;select concat('kill ',i.trx_mysql_thread_id,';') from information_schema.innodb_trx i,
  (select 
         id, time
     from
         information_schema.processlist
     where
         time = (select 
                 max(time)
             from
                 information_schema.processlist
             where
                 state = 'Waiting for table metadata lock'
                     and substring(info, 1, 5) in ('alter' , 'optim', 'repai', 'lock ', 'drop ', 'creat'))) p
  where timestampdiff(second, i.trx_started, now()) &amp;gt; p.time
  and i.trx_mysql_thread_id  not in (connection_id(),p.id);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然而在我的场景, 上面的SQL并没有任何的进程输出.&lt;/p&gt;
&lt;h2 id=&quot;陷入僵局的...&quot;&gt;陷入僵局的...&lt;/h2&gt;
&lt;p&gt;不过上面给了一些思路, 现在我们主要是因为有东西占用着 table metadata lock, 导致当前所有的东西都没有执行.&lt;/p&gt;
&lt;p&gt;show full processlist;&lt;/p&gt;
&lt;p&gt;看一眼没什么卵用, 处理那两个奇怪的wait lock, 其他的都挺正常的.&lt;/p&gt;
&lt;p&gt;那么, 看下现在谁占用着锁?&lt;/p&gt;
&lt;p&gt;怎么看呢?&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;select * from information_schema.innodb_trx;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/64d1e863gy1g2xsmc2ahkj21rk0d6jz8.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;神奇了, 真有两个东西在占用锁.&lt;/p&gt;
&lt;p&gt;那kill 了他们看看.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/64d1e863gy1g2xspdta37j21ag0bswl9.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;额, 解决了.&lt;/p&gt;
&lt;h2 id=&quot;最终结论&quot;&gt;最终结论&lt;/h2&gt;
&lt;p&gt;某个奇怪的程序开了查询或者奇怪的操作, lock了 table metadata, 之后连接一直都没有被释放, 导致以上各种问题.&lt;/p&gt;
&lt;p&gt;现在的问题来了, 究竟是哪个程序或者哪个代码导致的呢?&lt;/p&gt;
&lt;p&gt;抱歉, 我现在也还不知道...&lt;/p&gt;
&lt;p&gt;理论上可以查, 但是上次去查的时候发现数据库显示的host对应机器的端口早就没东西了, 死无对证ing.&lt;/p&gt;
&lt;h2 id=&quot;最后建议&quot;&gt;最后建议&lt;/h2&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;online DDL前,最好确认一下当前数据库有没有类似lock存在&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;最好的方案还是主从切换来搞&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;全文完.&lt;/p&gt;
</description>
<pubDate>Sat, 11 May 2019 15:39:00 +0000</pubDate>
<dc:creator>李国宝</dc:creator>
<og:description>MySQL Online DDL导致全局锁表案例分析 我这边遇到了什么问题? 线上给某个表执行新增索引SQL, 然后整个数据CPU打到100%, 连接数暴增到极限, 最后导致所有访问数据库的应用都奔溃</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liguobao/p/10850629.html</dc:identifier>
</item>
<item>
<title>WebGL three.js学习笔记 加载外部模型以及Tween.js动画 - nsytsqdtn</title>
<link>http://www.cnblogs.com/nsytsqdtn/p/10850548.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nsytsqdtn/p/10850548.html</guid>
<description>&lt;h2 id=&quot;webgl-three.js学习笔记-加载外部模型以及tween.js动画&quot;&gt;WebGL three.js学习笔记 加载外部模型以及Tween.js动画&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;本文的程序实现了加载外部stl格式的模型，以及学习了如何把加载的模型变为一个粒子系统，并使用Tween.js对该粒子系统进行动画设置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;demo地址：&lt;a href=&quot;https://nsytsqdtn.github.io/demo/naval_craft/naval_craft&quot; class=&quot;uri&quot;&gt;https://nsytsqdtn.github.io/demo/naval_craft/naval_craft&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;demo截图如下：&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1668312/201905/1668312-20190511231647153-1079605918.png&quot; alt=&quot;naval_craft&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1668312/201905/1668312-20190511231713145-519659944.png&quot; alt=&quot;naval_craft&quot;/&gt;&lt;/p&gt;
&lt;p&gt;原模型截图：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1668312/201905/1668312-20190511231736416-399399914.png&quot; alt=&quot;原模型&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在我们写three.js的网页的时候，大多时候并不需要我们去手动建立模型，一些复杂的模型都是通过建模软件去完成，所以在这里去学习如何去将外部的模型加载到我们的网页中来。&lt;/p&gt;
&lt;p&gt;three.js支持导入的模型有很多，包括我们常见的OBJ、FBX、STL、PLY、JSON等等格式，在这个程序中，我选择了使用STL模型来进行学习。&lt;/p&gt;
&lt;p&gt;.stl 文件是在计算机图形应用系统中，用于表示三角形网格的一种文件格式，常用于3d打印技术使用，因为STL格式的文件在网上可以免费不用注册的下载，比较方便。这里推荐一个还不错的网站，&lt;a href=&quot;http://www.3dhoo.com/model&quot; class=&quot;uri&quot;&gt;http://www.3dhoo.com/model&lt;/a&gt; ，里面有很多免费直接下载STL格式的模型。&lt;/p&gt;
&lt;h2 id=&quot;加载外部模型&quot;&gt;加载外部模型&lt;/h2&gt;
&lt;p&gt;在three.js中，我们要加载外部模型，就需要引入相应的js文件。比如我需要引入STL格式的文件，我就引入“three.js\examples\js\loaders\STLLoader.js”，其他格式的js文件在loaders文件夹也都能找到，如果是three.js没有支持导入的模型格式，就需要自己写一个加载器，网上也有许多的教程。&lt;/p&gt;
&lt;p&gt;引入相应js文件以后，我们首先要做的事创建一个加载器。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;let loader = new THREE.STLLoader();//创建stl的加载器，用加载器来加载stl模型&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们要使用该加载器加载模型，就需要调用loader .load(filename,onSuccess(bufferGeometry),onProgress(xhr),onError(error))这个方法&lt;br/&gt;&lt;strong&gt;其中：&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;filename是模型的路径&lt;br/&gt;onSuccess(bufferGeometry)是加载成功后回调处理(参数为生成的模型的几何体)，&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;注意：这里的几何体不是我们常用的geometry，而是bufferGeometry，它和geometry还是有一些的区别，但是也都可以作为THREE.Mesh（）的第一个参数穿进去。具体可以进行百度。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;onProgress(xhr)是加载过程中回调处理(xhr对象属性可计算出已完成加载百分比)&lt;br/&gt;onError(error)是失败回调处理方法&lt;/strong&gt;&lt;br/&gt;一般我们只需要使用前两个参数就可以完成工作。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;let loader = new THREE.STLLoader();//创建stl的加载器，用加载器来加载stl模型
let loader.load(&quot;../../../asset/ship.stl&quot;, function (bufferGeometry) {//加载模型的方法，
//第一个参数是模型的路径，第二个参数时候我们定义的回调函数，一旦模型加载成功，回调函数就会被调用
let material = new THREE.MeshBasicMaterial();
let mesh = new THREE.Mesh(bufferGeometry,material);
scene.add(mesh);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一般只需要这样写回调函数，模型就可以成功加载。&lt;br/&gt;但我在这里想根据该模型去创建一个粒子系统，像本文开头的那样，所以我们需要改一下代码。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;        let loader = new THREE.STLLoader();//创建stl的加载器，用加载器来加载stl模型
        group = new THREE.Object3D();
        loader.load(&quot;../../../asset/ship.stl&quot;, function (bufferGeometry) {//加载模型的方法，第一个参数是模型的路径，第二个参数时候我们定义的回调函数，一旦模型加载成功，回调函数就会被调用
            let geometry = new THREE.Geometry().fromBufferGeometry(bufferGeometry);//stl模型加载到js里就会变成bufferGeometry类型，我们先用一个方法把它变成Geometry类型
            loadGeometry = geometry.clone();//创建该geometry的克隆体，后面会用到
            let material = new THREE.PointsMaterial({//点云的材质
                color: 0xffffff,
                transparent: true,
                opacity: 1,
                size: 0.5,//可自由修改看看效果
                blending: THREE.AdditiveBlending,
                map: generateSprite()//自定义画布图案来充当每一个粒子的材质
            });
            //创建点云，以及设置它的位置及旋转角度，调整到最好看的地方
            group = new THREE.Points(geometry, material);
            group.sortParticles = true;
            group.position.set(0,0,0);
            group.position.x -=70;
            group.rotation.x = Math.PI*3/2;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;其中：&lt;br/&gt;我们使用THREE.Geometry().fromBufferGeometry(bufferGeometry)函数把bufferGeometry类型改为geometry类型，因为该类型我们更加熟悉，后面使用起来也比较方便。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;generateSprite()函数是在之前的文章也介绍过的，创建一个颜色渐变的画布，来充当粒子系统纹理，这里就不再赘述了。具体代码如下：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;//自定义渐变颜色的画布，前面的文章有介绍，这个方法在写three.js程序很常用
    function generateSprite() {

        var canvas = document.createElement('canvas');
        canvas.width = 16;
        canvas.height = 16;

        var context = canvas.getContext('2d');
        var gradient = context.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width / 2);
        gradient.addColorStop(0, 'rgba(255,255,255,1)');
        gradient.addColorStop(0.2, 'rgba(0,255,255,1)');
        gradient.addColorStop(0.4, 'rgba(0,0,255,1)');
        gradient.addColorStop(1, 'rgba(0,0,0,1)');

        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);

        var texture = new THREE.Texture(canvas);
        texture.needsUpdate = true;
        return texture;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;tween.js动画&quot;&gt;Tween.js动画&lt;/h2&gt;
&lt;p&gt;tweenjs 是使用 JavaScript 中的一个简单的补间动画库，支持数字、对象的属性和 CSS 样式属性的赋值。&lt;br/&gt;tweenjs 以平滑的方式修改元素的属性值，需要传递给 tween 要修改的值、动画结束时的最终值和动画花费时间，之后 tween 引擎就可以计算从开始动画点到结束动画点之间值，从而产生平滑的动画效果。&lt;/p&gt;
&lt;p&gt;我们首先需要引入tween.js文件，该文件的路径是“three.js\examples\js\libs\tween.min.js”，也可以直接百度搜索tween.js去下载。&lt;br/&gt;具体的用法是：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;let posSrc = {pos: 0};//创建一个posSrc的对象，该对象里面有pos的属性，并初始化该属性为0
let tween = new TWEEN.Tween(posSrc).to({pos: 1}, 5000);//创建tween的补间动画，使posSrc中的pos属性的值在5000ms内从0到1变化
tween.easing(TWEEN.Easing.Sinusoidal.InOut);//配置缓动效果&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们创建了TWEEN.Tween对象，这个对象会确保x属性值在5000毫秒内从0变化到1。通过Tweenjs,你还可以指定属性值是如何变化的，是线性的、指数性的，还是其他任何可能的方式。属性值在指定时间内的变化被称为easing(缓动)，在Tween.js中你可以使用easing()方法来配置缓动效果。我们还可以创建更多的TWEEN.Tween对象，并使用chain(TWEEN.Tween)函数链接多个补间动画。&lt;/p&gt;
&lt;p&gt;我们还需要一个update的函数，在每次更新补间的时候，都可以去更新每个粒子的位置，来实现的动画效果。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;            let posSrc = {pos: 0};//创建一个posSrc的对象，该对象里面有pos的属性
            //并初始化该属性为0
            let tween = new TWEEN.Tween(posSrc).to({pos: 1}, 5000);//创建tween的补间动画
            //使posSrc中的pos属性的值在5000ms内从0到1变化
            tween.easing(TWEEN.Easing.Sinusoidal.InOut);//配置缓动效果
            let tweenStand = new TWEEN.Tween(posSrc).to({pos: 1}, 2000);//让动画在pos的值
            //变为1后停止一段时间，方便我们观察，所以再创建一个tween，让pos从1到1（即不变）
            tween.easing(TWEEN.Easing.Sinusoidal.InOut);//配置缓动效果
            let tweenBack = new TWEEN.Tween(posSrc).to({pos: 0}, 5000);//创建tweenBack的
            //补间动画，和初始相反，使posSrc中的pos属性的值在5000ms内从1到0变化
            tweenBack.easing(TWEEN.Easing.Sinusoidal.InOut);//配置缓动效果
            //每一个补间动画之间使用chain()连接起来
            tween.chain(tweenStand);
            tweenStand.chain(tweenBack);
            tweenBack.chain(tween);

            //在补间的过程中，让所有的粒子开始移动
            let onUpdate = function () {
                let pos = posSrc.pos;//定义一个pos，赋值为posSrc对象的pos属性
                let count = 0;
                loadGeometry.vertices.forEach(function (e) {//遍历每个顶点
                //这里需要遍历刚刚克隆的geometry
                //（暂时不是很明白这点，反正如果遍历group.geometry.vertices
                //动画系统会让整个物体一起移动，没有伸展开来的效果）。
                    var newZ = e.z * pos;//得到新的Z值，根据当前的pos值去改变
                    group.geometry.vertices[count++].set(e.x, e.y, newZ);//设置每个顶点的位置
                    //group.geometry.vertices是数组类型，所以用count作为索引
                    group.geometry.verticesNeedUpdate = true;//重要，不然会没有动画效果
                });
                group.sortParticles = true;
            };
            //tween在每次更新后会执行tween.onUpdate()函数
            //里面的参数就是我们自定义要让它如果去运动的函数，即上面写的onUpdate
            tween.onUpdate(onUpdate);
            tweenStand.onUpdate(onUpdate);
            tweenBack.onUpdate(onUpdate);

            tween.start();//开启tween&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在这段代码中，我们创建了三个个补间: tween、tweenStand、tweenBack。第一个补间定义了position属性如何从1过渡到0,第三个刚好相反，第二个是让动画暂时停下。通过chain(方法可以将这三个补间衔接起来，这样当动画启动之后，程序就会在这三个补间循环。代码最后定义的是onUpdate()方法，这个方法遍历粒子系统中的所有顶点，并使用补间(this.pos)提供的位置更新顶点的位置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;补间动画需要在模型加载完成后就启动，所以我们在下面的函数末尾调用tween.start()方法:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果之前没有把bufferGeometry转化为Geometry类型，要去更改每个顶点的位置会变得比较麻烦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后还需要告知three.js什么时候刷新所有的补间动画，所以在render()函数里加上TWEEN.update();&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt; function render() {
        TWEEN.update();//通知TWEEN在什么时候去刷新补间动画，重要，否则会没有动画
        //性能监控器的更新
        stats.update();
        renderer.clear();
        requestAnimationFrame(render);
        renderer.render(scene, camera);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;到了这里，程序的大体就已经完成，剩下的就是创建场景，摄像机，渲染器等等东西以及调整模型的位置。这里不再赘述。&lt;/p&gt;
&lt;h2 id=&quot;完整的代码如下&quot;&gt;完整的代码如下:&lt;/h2&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Naval Craft Sprite&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;../../import/three.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;../../import/stats.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;../../import/Setting.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;../../import/OrbitControls.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;../../import/tween.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;../../import/STLLoader.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
        div#WebGL-output {
            border: none;
            cursor: pointer;
            width: 100%;
            height: 850px;
            background-color: #333333;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body onload=&quot;threeStart()&quot;&amp;gt;
&amp;lt;div id=&quot;WebGL-output&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
    let camera, renderer, scene,controller;
    function initThree() {
        //渲染器初始化
        renderer = new THREE.WebGLRenderer({
            antialias: true//抗锯齿开启
        });
        //设置渲染的大小
        renderer.setSize(window.innerWidth, window.innerHeight);
        //设置渲染的颜色
        renderer.setClearColor(0x333333);
        renderer.shadowMapEnabled = true;//开启阴影的渲染
        renderer.shadowMapType = THREE.PCFSoftShadowMap;//设置阴影类型为柔和
        document.getElementById(&quot;WebGL-output&quot;).appendChild(renderer.domElement);//将渲染添加到div中

        //初始化摄像机，这里使用透视投影摄像机
        camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.01, 10000);
        camera.position.set(35, 35, 75);//相机的位置，自由调整
        camera.up.x = 0;//设置摄像机的上方向为哪个方向，这里定义摄像的上方为Y轴正方向
        camera.up.y = 1;
        camera.up.z = 0;
        //摄像机对准的地方
        camera.lookAt(0, 0, 0);

        //初始化场景
        scene = new THREE.Scene();

        //相机的移动
        controller = new THREE.OrbitControls(camera, renderer.domElement);
        //相机围绕旋转的目标，设置为原点
        controller.target = new THREE.Vector3(0, 0, 0);

    }

    let loadGeometry;
    let group;

    function initObject() {
        let loader = new THREE.STLLoader();//创建stl的加载器，用加载器来加载stl模型
        group = new THREE.Object3D();
        loader.load(&quot;../../asset/naval_craft.stl&quot;, function (bufferGeometry) {//加载模型的方法，第一个参数是模型的路径，第二个参数时候我们定义的回调函数，一旦模型加载成功，回调函数就会被调用
            let geometry = new THREE.Geometry().fromBufferGeometry(bufferGeometry);//stl模型加载到js里就会变成bufferGeometry类型，我们先用一个方法把它变成Geometry类型
            loadGeometry = geometry.clone();//创建该geometry的克隆体，后面会用到
            let material = new THREE.PointsMaterial({//点云的材质
                color: 0xffffff,
                transparent: true,
                opacity: 1,
                size: 0.5,//可自由修改看看效果
                blending: THREE.AdditiveBlending,
                map: generateSprite()//自定义画布图案来充当每一个粒子的材质
            });
            //创建点云，以及设置它的位置及旋转角度，调整到最好看的地方
            group = new THREE.Points(geometry, material);
            group.sortParticles = true;
            group.position.set(0,0,0);
            group.position.x -=70;
            group.rotation.x = Math.PI*3/2;

            let posSrc = {pos: 0};//创建一个posSrc的对象，该对象里面有pos的属性，并初始化该属性为0
            let tween = new TWEEN.Tween(posSrc).to({pos: 1}, 5000);//创建tween的补间动画，使posSrc中的pos属性的值在5000ms内从0到1变化
            tween.easing(TWEEN.Easing.Sinusoidal.InOut);//配置缓动效果
            let tweenStand = new TWEEN.Tween(posSrc).to({pos: 1}, 2000);//让动画在pos的值变为1后停止一段时间，方便我们观察，所以再创建一个tween，让pos从1到1（即不变）
            tween.easing(TWEEN.Easing.Sinusoidal.InOut);//配置缓动效果
            let tweenBack = new TWEEN.Tween(posSrc).to({pos: 0}, 5000);//创建tweenBack的补间动画，和初始相反，使posSrc中的pos属性的值在5000ms内从1到0变化
            tweenBack.easing(TWEEN.Easing.Sinusoidal.InOut);//配置缓动效果
            //每一个补间动画之间使用chain()连接起来
            tween.chain(tweenStand);
            tweenStand.chain(tweenBack);
            tweenBack.chain(tween);

            //在补间的过程中，让所有的粒子开始移动
            let onUpdate = function () {
                let pos = posSrc.pos;//定义一个pos，赋值为posSrc对象的pos属性
                let count = 0;
                loadGeometry.vertices.forEach(function (e) {//遍历每个顶点，这里需要遍历刚刚克隆的geometry
                    var newZ = e.z * pos;//得到新的Z值，根据当前的pos值去改变
                    group.geometry.vertices[count++].set(e.x, e.y, newZ);//设置每个顶点的位置，group.geometry.vertices是数组类型，所以用count作为索引
                    group.geometry.verticesNeedUpdate = true;//重要，不然会没有动画效果
                });
                group.sortParticles = true;
            };
            //tween在每次更新后会执行tween.onUpdate()函数，里面的参数就是我们自定义要让它如果去运动的函数，即上面写的onUpdate
            tween.onUpdate(onUpdate);
            tweenStand.onUpdate(onUpdate);
            tweenBack.onUpdate(onUpdate);

            tween.start();//开启tween
            scene.add(group);
        });
    }

    //自定义渐变颜色的画布，前面的文章有介绍，这个方法在写three.js程序很常用
    function generateSprite() {

        var canvas = document.createElement('canvas');
        canvas.width = 16;
        canvas.height = 16;

        var context = canvas.getContext('2d');
        var gradient = context.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width / 2);
        gradient.addColorStop(0, 'rgba(255,255,255,1)');
        gradient.addColorStop(0.2, 'rgba(0,255,255,1)');
        gradient.addColorStop(0.4, 'rgba(0,0,255,1)');
        gradient.addColorStop(1, 'rgba(0,0,0,1)');

        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);

        var texture = new THREE.Texture(canvas);
        texture.needsUpdate = true;
        return texture;

    }

    //渲染函数
    function render() {
        TWEEN.update();//通知TWEEN在什么时候去刷新补间动画，重要，否则会没有动画
        //性能监控器的更新
        stats.update();
        renderer.clear();
        requestAnimationFrame(render);
        renderer.render(scene, camera);
    }

    //功能函数
    function setting() {
        loadFullScreen();
        loadAutoScreen(camera, renderer);
        loadStats();
    }

    //运行主函数
    function threeStart() {
        initThree();
        initObject();
        setting();
        render();
    }
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 11 May 2019 15:20:00 +0000</pubDate>
<dc:creator>nsytsqdtn</dc:creator>
<og:description>本文的程序实现了加载外部stl格式的模型，以及学习了如何把加载的模型变为一个粒子系统，并使用Tween.js对该粒子系统进行动画设置</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nsytsqdtn/p/10850548.html</dc:identifier>
</item>
</channel>
</rss>