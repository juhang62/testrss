<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>RocketMQ系列：rocketmq运维控制台使用详解（全网独家） - 测试生财</title>
<link>http://www.cnblogs.com/qa-freeroad/p/13690509.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qa-freeroad/p/13690509.html</guid>
<description>&lt;p&gt;搭建好了RocketMQ的console之后，直接在浏览器打开http://{你的ip}:8080&lt;/p&gt;
&lt;p&gt;默认会进入到驾驶舱（dashboard）。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;总览&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918115040507-406632501.png&quot; alt=&quot;&quot; width=&quot;914&quot; height=&quot;429&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;整体横向菜单分为&lt;strong&gt;八&lt;/strong&gt;个部分：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运维&lt;/strong&gt;：主要是设置nameserver和配置vipchannel&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;驾驶舱&lt;/strong&gt;：控制台的dashboard，可以分别按broker和主题来查看消息的数量和趋势。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;集群&lt;/strong&gt;：整个RocketMq的集群情况，包括分片，编号，地址，版本，消息生产和消息消费的TPS等，这个在做性能测试的时候可以作为数据指标。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主题&lt;/strong&gt;：即topic，可以新增/更新topic；也看查看topic的信息，如状态，路由，消费者管理和发送消息等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;消费者&lt;/strong&gt;：可以在当前broker中查看/新建消费者group，包括消费者信息和消费进度&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生产者&lt;/strong&gt;：可以在当前broker中查看生产组下的生产者group，包生产者信息和生产者状态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;消息&lt;/strong&gt;：可以按照topc，messageID，messageKey分别查询具体的消息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户中心&lt;/strong&gt;：切换语言和登陆相关（登陆需要在console的配置中打开对应配置，默认不需要登陆）&lt;/p&gt;
&lt;p&gt;其中最常用的是&lt;strong&gt;集群&lt;/strong&gt;，&lt;strong&gt;主题&lt;/strong&gt;，&lt;strong&gt;消费者&lt;/strong&gt;和&lt;strong&gt;消息&lt;/strong&gt;这四部分。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面分别来看各个部分。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918115513636-1033041944.png&quot; alt=&quot;&quot; width=&quot;390&quot; height=&quot;128&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 刚才讲到，运维这块儿就两个功能&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;设置Nameserver&lt;/li&gt;
&lt;li&gt;打开/关闭vipchannnel&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;设置nameserver：可以添加多个nameserver地址到输入框内，默认读取的是console启动配置里面的nameserver配置。如果rockermq集群里有加入新的nameserver节点，可以在这里动态配置后更新生效。&lt;/p&gt;
&lt;p&gt;打开/关闭vipchannel: 这里默认为false就好，vipchannnel针对的是topic的优先级，相当于在消息处理的时候，有些topic可以走vipchannel，可以优先被处理，这个除了电商场景用的一般不多。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918120245378-1758841749.png&quot; alt=&quot;&quot; width=&quot;1027&quot; height=&quot;507&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;驾驶舱消息当前数量和最近的趋势，如图左侧为当前消息总数量，右侧为消息数量趋势。&lt;/p&gt;
&lt;p&gt;我们分别解释如下四张图。&lt;/p&gt;
&lt;p&gt;1）按broker实例为类目（比如说集群中有3个broker实例）展示当前的消息数&lt;/p&gt;
&lt;p&gt;2）按topic为类目（比如说当前所有broker中存在10个topic）展示当前的消息数&lt;/p&gt;
&lt;p&gt;3）指定某天和时间段，查询不同broker实例的消息数的趋势&lt;/p&gt;
&lt;p&gt;4）指定某天和时间段，查询某topic下消息数的趋势&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918141622378-1787971548.png&quot; alt=&quot;&quot; width=&quot;1153&quot; height=&quot;241&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;集群主要展示了集群当前broker的状态，如下是各个字段含义：&lt;/p&gt;
&lt;p&gt;分片：指的是数据分片（或者broker），当前rocketmq集群的只有一个数据分片，id为RaftNode00，即所有数据都在这个分片上；rocketmq的消息数据可以分布在多个数据分片上（一般都是多broker集群），后面搭建集群化环境的时候会讲到。&lt;/p&gt;
&lt;p&gt;编号：标识了哪些是master（0是master)，哪些是slave，master负责直接读写；slave相当于master的副本，定期从master同步数据，如果master挂掉，slave会自动内部选举一个master节点。&lt;/p&gt;
&lt;p&gt;地址：即broker的实际ip端口。&lt;/p&gt;
&lt;p&gt;版本：rocketmq的版本，这里是最新的&lt;strong&gt;4.7.1。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;生产消息TPS：即broker中处理消息的TPS（每秒落盘的消息数）。&lt;/p&gt;
&lt;p&gt;消费消息TPS：即consumer从broker中收取消息的TPS（每秒接收的消息数） 。&lt;/p&gt;
&lt;p&gt;昨日生产总数：昨天落盘的总消息数。&lt;/p&gt;
&lt;p&gt;昨日消费总数：昨天消费的总消息数。&lt;/p&gt;
&lt;p&gt;今天生产总数：今天落盘的总消息数。&lt;/p&gt;
&lt;p&gt;今天消费总数：今天消费的总消息数。&lt;/p&gt;
&lt;p&gt;操作：&lt;/p&gt;
&lt;p&gt;状态：当前broker中的消息处理和消费的一些属性值&lt;/p&gt;
&lt;p&gt;配置：即启动broker时候broker.conf相关的配置项&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918142613345-1796178963.png&quot; alt=&quot;&quot; width=&quot;926&quot; height=&quot;392&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;主题里面有三大类型&lt;/p&gt;
&lt;p&gt;普通主题：这里是rocketmq自动创建的一些系统topic，然后用户创建的topic也展示在这里。&lt;/p&gt;
&lt;p&gt;重试主题：这里是发送失败时候系统为之创建的topic。&lt;/p&gt;
&lt;p&gt;死信主题：这里的topic类似垃圾箱，无法从中生产或者消费消息。&lt;/p&gt;
&lt;p&gt;这里以BenchmarkTest为例介绍相关的操作（BenchmarkTest是rocketmq自带压测工具默认指定的topic）：&lt;/p&gt;
&lt;h2&gt;状态&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918142928121-1861838365.png&quot; alt=&quot;&quot; width=&quot;483&quot; height=&quot;355&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;记录了topic中每个队列的起始位置（minOffset）和结束位置（maxOffset），通过累加所有队列的（maxOffset-minOffset）的差值，可以算出消息的总落盘数。&lt;/p&gt;
&lt;h2&gt;路由&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918143621446-605663607.png&quot; alt=&quot;&quot; width=&quot;629&quot; height=&quot;332&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最上面的broker：RaftNode00指的是分片，brokerAddrs指的是分片里的几个broker的地址信息，即该topic存在于这几个broker中。&lt;/p&gt;
&lt;p&gt;下面比较有用的是perm，通过修改perm可以使当前broker分别置为只读，只写，和读写状态。当用于运维的时候可以将broker置为只读状态。&lt;/p&gt;

&lt;p&gt;下面的队列信息是该topic的属性值。&lt;/p&gt;
&lt;h2&gt;Consumer管理&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918143906621-131409103.png&quot; alt=&quot;&quot; width=&quot;627&quot; height=&quot;110&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 这里指的是Topic当前的Consumer的连接信息，没有消费者（consumer）则不显示订阅组。&lt;/p&gt;
&lt;h2&gt;TOPIC设置&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918144003121-1034188614.png&quot; alt=&quot;&quot; width=&quot;578&quot; height=&quot;313&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;设置topic的相关属性，一般读队列和写队列设置到16或者32就可以了。&lt;/p&gt;
&lt;h2&gt;发送消息&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918144208930-1891471196.png&quot; alt=&quot;&quot; width=&quot;582&quot; height=&quot;237&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 这里指的是给topic发送生产消息，消息包含msgid（系统自带），tag，key，body，其中tag和key可以用于后面筛选和查找消息。&lt;/p&gt;
&lt;h2&gt;重置消费点位&lt;/h2&gt;
&lt;p&gt;这里指的是从头开始消费消息，比如broker某topic有3w条消息，现在消费了2w条，还剩余1w条没有消费，下一条应该是从20001条开始消费；如果点击这个重置消费点位，下一条就会重新从第一条开始消费。&lt;/p&gt;
&lt;h2&gt;删除&lt;/h2&gt;
&lt;p&gt;删除本topic（貌似关联关系还在）&lt;/p&gt;
&lt;h2&gt;新增/更新topic&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918144542173-882957229.png&quot; alt=&quot;&quot; width=&quot;584&quot; height=&quot;356&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同topic设置类似&lt;/p&gt;
&lt;h2&gt;消费者&lt;/h2&gt;
&lt;p&gt;这里订阅组指的是使用rocketmq的客户端（比如java，cpp，go，python等）进行消费时候使用的group，多个consumer可以使用同一个group进行消费，也可以使用不同的group消费。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200924075456012-101803729.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918144952108-1363978603.png&quot; alt=&quot;&quot; width=&quot;993&quot; height=&quot;235&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;默认展示订阅组的名称，对应consumer的&lt;strong&gt;数量&lt;/strong&gt;(多个consumer使用一个group），版本信息，类型，默认，TPS，延时&lt;/p&gt;
&lt;p&gt;其中TPS可以看出当前消费组的整体的消费TPS，在测试消费性能的时候很有用。&lt;/p&gt;
&lt;p&gt;延迟反映的是消息消费时候的broker的响应快慢，数字越大说明越慢。&lt;/p&gt;
&lt;h2&gt;终端&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918145427502-1397521221.png&quot; alt=&quot;&quot; width=&quot;657&quot; height=&quot;347&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;里面描述了consumer的详细信息，ClientAddr指明了客户端的地址，Language说明使用的是GO语言，版本为4.5.2&lt;/p&gt;
&lt;p&gt;在consumer进行消费的时候，默认会创建一个RETRY的topic，在消费失败的时候会进行重试。&lt;/p&gt;
&lt;p&gt;后面的ConsumeFromWhere指的是从头消费还是从最新的offset进行消费。&lt;/p&gt;
&lt;p&gt;ConsumeType：分为被动（push）和主动（pull)模式，这里是主动模式&lt;/p&gt;
&lt;p&gt;Message：集群和广播，这里是集群模式&lt;/p&gt;
&lt;p&gt;ConmumeFromWhere：从哪里开始消费，分为：从头，从末尾（最新），指定位置这三个。&lt;/p&gt;
&lt;h2&gt;消费详情&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918145839223-1615876232.png&quot; alt=&quot;&quot; width=&quot;666&quot; height=&quot;401&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;消费详情和topic详情有点类似，不同的是topic详情展示的落盘消息的offset情况，而消费详情展示的是消费消息的offset情况。&lt;/p&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918150007494-992225384.png&quot; alt=&quot;&quot; width=&quot;669&quot; height=&quot;493&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里可以配置消费组的相关属性，一般不用配置。&lt;/p&gt;
&lt;h2&gt;删除&lt;/h2&gt;
&lt;p&gt;删除订阅组&lt;/p&gt;
&lt;h2&gt;新建订阅组&lt;/h2&gt;
&lt;p&gt;一般不用新建，在consumer消费的时候指定group，broker中会自动创建&lt;/p&gt;

&lt;p&gt;如图，我用rocketmq自带的Producer压测工具进行压测，可以看到客户端的ip，并且其语言为java，版本为4.7.1。&lt;/p&gt;


&lt;h2&gt;按topic查询&lt;/h2&gt;
&lt;p&gt;选定topic，指定开始时间和结束时间即可查询。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918150632231-2023003567.png&quot; alt=&quot;&quot; width=&quot;651&quot; height=&quot;224&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;按MessageId查询&lt;/h2&gt;
&lt;p&gt;选定topic，输入对应的messageID进行查询。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918150756019-1702407038.png&quot; alt=&quot;&quot; width=&quot;813&quot; height=&quot;513&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;按Key查询&lt;/h2&gt;
&lt;p&gt;选定topic，输入对应的message key进行查询。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/371763/202009/371763-20200918151010680-140144540.png&quot; alt=&quot;&quot; width=&quot;830&quot; height=&quot;282&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;6.3333333333333&quot;&gt;
&lt;p&gt;博主：测试生财&lt;/p&gt;
&lt;p&gt;座右铭：通过测试生涯完成原始积累，通过投资奔向财务自由&lt;/p&gt;
&lt;p&gt;csdn：&lt;a href=&quot;https://blog.csdn.net/ccgshigao&quot;&gt;https://blog.csdn.net/ccgshigao&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;博客园：&lt;a href=&quot;https://www.cnblogs.com/qa-freeroad/&quot; rel=&quot;nofollow&quot;&gt;https://www.cnblogs.com/qa-freeroad/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;51cto：&lt;a href=&quot;https://blog.51cto.com/14900374&quot; rel=&quot;nofollow&quot;&gt;https://blog.51cto.com/14900374&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
<dc:creator>测试生财</dc:creator>
<og:description>搭建好了RocketMQ的console之后，直接在浏览器打开http://{你的ip}:8080 默认会进入到驾驶舱（dashboard）。 总览 整体横向菜单分为八个部分： 运维：主要是设置nam</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qa-freeroad/p/13690509.html</dc:identifier>
</item>
<item>
<title>从 LRU Cache 带你看面试的本质 - 码农田小齐</title>
<link>http://www.cnblogs.com/nycsde/p/13722270.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nycsde/p/13722270.html</guid>
<description>&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，这里是《齐姐聊算法》系列之 LRU 问题。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在讲这道题之前，我想先聊聊「技术面试究竟是在考什么」这个问题。&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;技术面试究竟在考什么&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在人人都知道刷题的今天，面试官也都知道大家会刷题准备面试，代码大家都会写，那面试为什么还在考这些题？那为什么有些人代码写出来了还挂了？&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家知道美国的大厂面试 80%是在考算法，这其实是最近 5-10 年以谷歌、雅虎为首才兴起的；国内大厂对于算法的考察虽然没有这么狂热，但也越来越重视了。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么算法面试真的只是在考算法吗？显然不是。本质上考的是思考问题的方式，分析、解决问题的能力，以及和同事沟通交流的能力，看你能否主动推进去解决问题。&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;答题思路&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;套路就是：&lt;/p&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;clarify 问题&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;分析思路、时空复杂度、分析哪里可以优化、如何优化&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;写代码&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;run test cases&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;虽说是套路，但何尝不是一个高效的工作方式？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那拿到一个问题，首先应该是去 clarify 这个问题，因为工作就是如此，不像在刷题网站做题什么都给你定义好了，面试官通常都不会一次性给你所有条件，而是需要你思考之后去问他。那通过这个环节，面试官就知道了你遇到问题是怎么去思考的，你考虑的是否全面，怎么去和别人沟通的，今后和你一起工作的状态是怎样的。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就像我们平时工作时，需要和 product manager 不断的 clarify 需求，特别是没定义清楚的部分，反反复复的讨论，也是磨刀不误砍柴工。那这个过程，在我司可能就要 1-2 周，不会很着急的就开始，否则努力错了方向就是南辕北辙，得不偿失。那么面试时也是一样，代码都写完了面试官说这不是我想问的，那时候已经没时间了，买单的是我们自己。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二点分析思路就是重中之重了，也是本文的核心，会以 LRU Cache 这到经典题为例，展示我是如何思考、分析的。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三点写代码，没什么好说的，终究是需要落到实处的。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第四点跑测试，很多同学可能会忘，所以如果你能主动提出 run test cases，过几个例子检验一下，是很好的。&lt;/p&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;一来是给自己一个修正的机会，因为有很多 bug 是你跑两个例子就能发现的，那即使有点 bug 你没发现，只要你做完了这一步，面试官当场也没发现的话，那面试结束后面试官虽然会拍照留念，但也不会闲的无聊再自己打到电脑上跑的；&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;二来是展示你的这种意识，跑测试的意识，这种意识是很重要的。&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些人说每道题我都做出来了，为什么还是挂了？那照着这四点对比一下，看看是哪个环节出了问题。&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;常考不衰的原因&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外这道题为什么各大公司都喜欢考呢？&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一是因为它能够多方面、多维度的考察 candidate：这道题考察的是基本功，考对数据结构理解使用，考能不能写出 readable 的代码。一场 45 分钟-60 分钟的面试，如何摸清楚 candidate 的真实水平，也是不容易的啊。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;二是因为这道题可难可易，可以简单到像 Leetcode 上那样把 API 什么的都已经定义好了，也可以难到把 System Design 的内容都包含进来，聊一下 Redis 中的近似 LRU 算法。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以 follow up 就可以无限的深入下去，如果面试官想问的你都能回答的头头是道，那 strong hire 自然跑不掉。那有些同学只会到第一层或者第二层，面试是优中选优的过程，其他同学会的比你多，沟通交流能力又好，自然就是别人拿 offer 了。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那今天就以这道题为例，在这里浅谈一下我的思考过程，为大家抛砖引玉，欢迎在留言区分享你的想法。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;LRU Cache&lt;/span&gt;&lt;/h2&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;LRU 是什么&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;LRU = Least Recently Used 最近最少使用&lt;br/&gt;它是一种缓存逐出策略 &lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;LRU 算法是假设最近最少使用的那些信息，将来被使用的概率也不大，所以在容量有限的情况下，就可以把这些不常用的信息踢出去，腾地方。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如有热点新闻时，所有人都在搜索这个信息，那刚被一个人搜过的信息接下来被其他人搜索的概率也大，就比前两天的一个过时的新闻被搜索的概率大，所以我们把很久没有用过的信息踢出去，也就是 Least Recently Used 的信息被踢出去。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子：我们的内存容量为 5，现在有 1-5 五个数。&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1girraxqlaqj30nt04yjrj.jpg&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们现在想加入一个新的数：6&lt;br/&gt;可是容量已经满了，所以需要踢出去一个。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那按照什么规则踢出去，就有了这个缓存逐出策略。比如：&lt;/p&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;&lt;code&gt;FIFO (First In First Out)&lt;/code&gt; 这个就是普通的先进先出。&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;&lt;code&gt;LFU (Least Frequently Used)&lt;/code&gt; 这个是计算每个信息的访问次数，踢走访问次数最少的那个；如果访问次数一样，就踢走好久没用过的那个。这个算法其实很高效，但是耗资源，所以一般不用。&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;&lt;code&gt;LRU (Least Recently Used)&lt;/code&gt; 这是目前最常用了。&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;LRU 的规则是把很长时间没有用过的踢出去，那它的隐含假设就是，认为最近用到的信息以后用到的概率会更大。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们这个例子中就是把最老的 1 踢出去，变成：&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1girrb5j8lnj30os04yjrj.jpg&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不断迭代...&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;Cache 是什么？&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单理解就是：把一些可以重复使用的信息存起来，以便之后需要时可以快速拿到。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那至于它存在哪里就不一定了，最常见的是存在内存里，也就是 memory cache，但也可以不存在内存里。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用场景就更多了，比如 Spring 中有 @Cacheable 等支持 Cache 的一系列注解。上个月我在工作中就用到了这个 annotation，当然是我司包装过的，大大减少了 call 某服务器的次数，解决了一个性能上的问题。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再比如，在进行数据库查询的时候，不想每次请求都去 call 数据库，那我们就在内存里存一些常用的数据，来提高访问性能。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种设计思想其实是遵循了著名的“二八定律”。在读写数据库时，每次的 I/O 过程消耗很大，&lt;strong&gt;但其实 80% 的 request 都是在用那 20% 的数据&lt;/strong&gt;，所以把这 20% 的数据放在内存里，就能够极大的提高整体的效率。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总之，Cache 的目的是存一些可以复用的信息，方便将来的请求快速获得。&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;LRU Cache&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们知道了 LRU，了解了 Cache，合起来就是 LRU Cache 了：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当 Cache 储存满了的时候，使用 LRU 算法把老家伙清理出去。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;思路详解&lt;/span&gt;&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说了这么多，Let's get to the meat of the problem!&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道经典题大家都知道是要用 HashMap + Doubly Linked List，或者说用 Java 中现成的 LinkedHashMap，但是，为什么？你是怎么想到用这两个数据结构的？面试的时候不讲清楚这个，不说清楚思考过程，代码写对了也没用。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和在工作中的设计思路类似，没有人会告诉我们要用什么数据结构，一般的思路是先想有哪些 operations，然后根据这些操作，再去看哪些数据结构合适。&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;分析 Operations&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们来分析一下对于这个 LRU Cache 需要有哪些操作：&lt;/p&gt;
&lt;ol data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;首先最基本的操作就是能够从里面读信息，不然之后快速获取是咋来的；&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;那还得能加入新的信息，新的信息进来就是 most recently used 了；&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;在加新信息之前，还得看看有没有空位，如果没有空间了，得先把老的踢出去，那就需要能够找到那个老家伙并且删除它；&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;那如果加入的新信息是缓存里已经有的，那意思就是 key 已经有了，要更新 value，那就只需要调整一下这条信息的 priority，它已经从那次被宠幸晋升为贵妃了～&lt;/section&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;找寻数据结构&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那第一个操作很明显，我们需要一个能够快速查找的数据结构，非 &lt;code&gt;HashMap&lt;/code&gt; 莫属，还不了解 HashMap 原理和设计规则的在公众号内发消息「HashMap」，送你一篇爆款文章；&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可是后面的操作 HashMap 就不顶用了呀。。。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来来来，我们来数一遍基本的数据结构：&lt;br/&gt;Array, LinkedList, Stack, Queue, Tree, BST, Heap, HashMap&lt;/p&gt;
&lt;blockquote data-tool=&quot;mdnice编辑器&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;在做这种数据结构的题目时，就这样把所有的数据结构列出来，一个个来分析，有时候不是因为这个数据结构不行，而是因为其他的数据结构更好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote data-tool=&quot;mdnice编辑器&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;怎么叫更好？忘了我们的衡量标准嘛！时空复杂度，赶紧复习递归那篇文章，公众号内回复「递归」即可获得。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们的分析如下：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Array, Stack, Queue 这三种本质上都是 Array 实现的（当然 Stack, Queue 也可以用 LinkedList 来实现。。），一会插入新的，一会删除老的，一会调整下顺序，array 不是不能做，就是得 O(n) 啊，用不起。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BST 同理，时间复杂度是 O(logn).&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Heap 即便可以，也是 O(logn).&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;LinkedList，有点可以哦，按照从老到新的顺序，排排站，删除、插入、移动，都可以是 O(1) 的诶！但是删除时我还需要一个 previous pointer 才能删掉，所以我需要一个 Doubly LinkedList.&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1girrbsjnirg30dc07iaiu.gif&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么我们的数据结构敲定为：&lt;br/&gt;&lt;code&gt;HashMap + Doubly LinkedList&lt;/code&gt;&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;定义清楚数据结构的内容&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;选好了数据结构之后，还需要定义清楚每个数据结构具体存储的是是什么，这两个数据结构是如何联系的，这才是核心问题。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先想个场景，在搜索引擎里，你输入问题 Questions，谷歌给你返回答案 Answer。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们就先假设这两个数据结构存的都是 &amp;lt;Q, A&amp;gt;，然后来看这些操作，如果都很顺利，那没问题，如果有问题，我们再调整。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那现在我们的 HashMap 和 LinkedList 长这样：&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1girrc1ylxwj30os0he74u.jpg&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后我们回头来看这四种操作：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;操作 1，没问题，直接从 HashMap 里读取 Answer 即可，O(1)；&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;操作 2，新加入一组 Q&amp;amp;A，两个数据结构都得加，那先要判断一下当前的缓存里有没有这个 Q，那我们用 HashMap 判断，&lt;/p&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;如果没有这个 Q，加进来，都没问题；&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;如果已经有这个 Q，HashMap 这里要更新一下 Answer，然后我们还要把 LinkedList 的那个 node 移动到最后或者最前，因为它变成了最新被使用的了嘛。&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可是，怎么找 LinkedList 的这个 node 呢？一个个 traverse 去找并不是我们想要的，因为要 O(n) 的时间嘛，我们想用 O(1) 的时间操作。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那也就是说这样记录是不行的，还需要记录 LinkedList 中每个 ListNode 的位置，这就是本题关键所在。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那自然是在 HashMap 里记录 ListNode 的位置这个信息了，也就是存一下每个 ListNode 的 reference。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想想其实也是，HashMap 里没有必要记录 Answer，Answer 只需要在 LinkedList 里记录就可以了。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后我们更新、移动每个 node 时，它的 reference 也不需要变，所以 HashMap 也不用改动，动的只是 previous, next pointer.&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那再一想，其实 LinkedList 里也没必要记录 Question，反正 HashMap 里有。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个数据结构是相互配合来用的，不需要记录一样的信息。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更新后的数据结构如下：&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1girrclls3hj30oj0g9q3q.jpg&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，我们才分析出来用什么数据结构，每个数据结构里存的是什么，物理意义是什么。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那其实，Java 中的 LinkedHashMap 已经做了很好的实现。但是，即便面试时可以使用它，也是这么一步步推导出来的，而不是一看到题目就知道用它，那一看就是背答案啊。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有同学问我，如果面试官问我这题做没做过，该怎么回答？&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：实话实说。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;真诚&lt;/strong&gt;在面试、工作中都是很重要的，所以实话实说就好了。但如果面试官没问，就不必说。。。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实面试官是不 care 你做没做过这道题的，因为大家都刷题，基本都做过，问这个问题没有意义。只要你能把问题分析清楚，讲清楚逻辑，做过了又怎样？很多做过了题的人是讲不清楚的。。。&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;总结&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们再总结一下那四点操作：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个操作，也就是 &lt;code&gt;get()&lt;/code&gt; API，没啥好说的；&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;二三四，是 &lt;code&gt;put()&lt;/code&gt; API，有点小麻烦：&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1girrcx877qj30n50n8dh6.jpg&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;画图的时候边讲边写，每一步都从 high level 到 detail 再到代码，把代码模块化。&lt;/p&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;比如“Welcome”是要把这个新的信息加入到 HashMap 和 LinkedList 里，那我会用一个单独的 add() method 来写这块内容，那在下面的代码里我取名为 appendHead()，更精准；&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;“踢走老的”这里我也是用一个单独的 remove() method 来写的。&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当年我把这图画出来，面试官就没让我写代码了，直接下一题了...&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那如果面试官还让你写，就写呗。。。&lt;/p&gt;
&lt;pre class=&quot;custom&quot; data-tool=&quot;mdnice编辑器&quot; readability=&quot;17.5&quot;&gt;
&lt;code class=&quot;hljs&quot; readability=&quot;29&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LRUCache&lt;/span&gt; &lt;/span&gt;{&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Node&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; key;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; val;&lt;br/&gt;Node next;&lt;br/&gt;Node prev;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; key, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.key = key;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.val = val;&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;Map&amp;lt;Integer, Node&amp;gt; map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Node head;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Node tail;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; cap;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LRUCache&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; capacity)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;cap = capacity;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; key)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;Node node = map.get(key);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(node == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; res = node.val;&lt;br/&gt;remove(node);&lt;br/&gt;appendHead(node);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res;&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; key, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; value)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;Node node = map.get(key);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(node != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;node.val = value;&lt;br/&gt;remove(node);&lt;br/&gt;appendHead(node);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;node = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Node(key, value);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(map.size() &amp;lt; cap) {&lt;br/&gt;appendHead(node);&lt;br/&gt;map.put(key, node);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;map.remove(tail.key);&lt;br/&gt;remove(tail);&lt;br/&gt;appendHead(node);&lt;br/&gt;map.put(key, node);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;appendHead&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Node node)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(head == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;head = tail = node;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;node.next = head;&lt;br/&gt;head.prev = node;&lt;br/&gt;head = node;&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Node node)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(head == tail) {&lt;br/&gt;head = tail = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(head == node) {&lt;br/&gt;head = head.next;&lt;br/&gt;node.next = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (tail == node) {&lt;br/&gt;tail = tail.prev;&lt;br/&gt;tail.next = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;node.prev = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;node.prev.next = node.next;&lt;br/&gt;node.next.prev = node.prev;&lt;br/&gt;node.prev = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;node.next = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;总结&lt;/span&gt;&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;​&lt;br/&gt;那再回到面试上来，为什么很多面试是以算法考察为主的？这样的面试道理何在？算法题面试真的能衡量一个人的工作能力吗？（当然了，对于有些工作经验的人还会考察系统设计方面的内容。）&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是我一直在思考的问题，工作之后愈发觉得，这样的面试真的是有效的。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为我们需要的是能够&lt;strong&gt;去解决未知的问题的能力&lt;/strong&gt;，知识可能会被遗忘，但是&lt;strong&gt;思考问题的方式方法&lt;/strong&gt;是一直跟随着我们的，也是我们需要不断提高的。那么在基本功扎实的前提下，有正确的方法和思路做指引，nothing is impossible.&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1girrdkm98rg306q046gli.gif&quot; alt=&quot;&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你喜欢这篇文章，记得给我点赞留言哦～你们的支持和认可，就是我创作的最大动力，我们下篇文章见！&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;我是小齐，纽约程序媛，终生学习者，每天晚上 9 点，云自习室里不见不散！&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;更多干货文章见我的 Github: https://github.com/xiaoqi6666/NYCSDE&lt;/strong&gt;&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;​&lt;br/&gt;​&lt;/p&gt;

</description>
<pubDate>Wed, 23 Sep 2020 23:57:00 +0000</pubDate>
<dc:creator>码农田小齐</dc:creator>
<og:description>前言 大家好，这里是《齐姐聊算法》系列之 LRU 问题。 在讲这道题之前，我想先聊聊「技术面试究竟是在考什么」这个问题。 技术面试究竟在考什么 在人人都知道刷题的今天，面试官也都知道大家会刷题准备面试</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/nycsde/p/13722270.html</dc:identifier>
</item>
<item>
<title>使用 Swift Package Manager 集成依赖库 - Ficow</title>
<link>http://www.cnblogs.com/ficow/p/13722258.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ficow/p/13722258.html</guid>
<description>
&lt;p&gt;本文首发于 &lt;a href=&quot;https://ficowshen.com&quot;&gt;Ficow Shen's Blog&lt;/a&gt;，原文地址： &lt;a href=&quot;https://blog.ficowshen.com/page/post/20&quot;&gt;使用 Swift Package Manager 集成依赖库&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;内容概览&quot;&gt;内容概览&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;前言&lt;/li&gt;
&lt;li&gt;添加依赖包&lt;/li&gt;
&lt;li&gt;在项目中使用依赖&lt;/li&gt;
&lt;li&gt;管理已导入的依赖&lt;/li&gt;
&lt;li&gt;在团队中统一依赖的版本&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在 &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt; 出现之前，我们需要使用 &lt;a href=&quot;https://cocoapods.org/&quot;&gt;CococaPods&lt;/a&gt;, &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; 等包管理工具来管理依赖。&lt;/p&gt;
&lt;p&gt;现在，我们可以直接使用 Xcode 来管理依赖。Xcode 内建了对 Git 版本控制系统的支持，我们可以轻松地使用 Xcode 中的 Swift Package Manager 来管理 &lt;code&gt;公开的&lt;/code&gt;、&lt;code&gt;私有的&lt;/code&gt; 仓库中的包。&lt;/p&gt;

&lt;h2 id=&quot;添加依赖包&quot;&gt;添加依赖包&lt;/h2&gt;

&lt;p&gt;首先，找到添加依赖的菜单：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ficowblog.oss-cn-shenzhen.aliyuncs.com/uploads/1598571025199.png&quot; alt=&quot;添加依赖的菜单&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后，输入依赖的名称或者仓库地址进行搜索。比如，我输入了 &lt;code&gt;alamofire&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ficowblog.oss-cn-shenzhen.aliyuncs.com/uploads/1598571272888.png&quot; alt=&quot;输入依赖的名称&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，搜索结果有很多。我们可以根据 &lt;code&gt;仓库的名称&lt;/code&gt; 还有 &lt;code&gt;仓库的主人&lt;/code&gt; 以及 &lt;code&gt;仓库的描述(fork, star的数量)&lt;/code&gt; 来找出我们真正期望的结果！当然，你也可以直接输入仓库的地址，然后进行下一步操作！&lt;/p&gt;
&lt;p&gt;如果输入的是仓库地址，Xcode 就会校验这个仓库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ficowblog.oss-cn-shenzhen.aliyuncs.com/uploads/1598571554375.png&quot; alt=&quot;校验仓库&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来，需要决定依赖的版本：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ficowblog.oss-cn-shenzhen.aliyuncs.com/uploads/1598571577330.png&quot; alt=&quot;决定依赖的版本&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择决定版本的规则：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ficowblog.oss-cn-shenzhen.aliyuncs.com/uploads/1598571722246.png&quot; alt=&quot;决定版本的规则&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;目前有4种规则，都基于&lt;a href=&quot;https://semver.org/&quot;&gt;语义化版本&lt;/a&gt;(表示法：&lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; ，即： &lt;code&gt;大版本.小版本.修复版本&lt;/code&gt;)：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Up to Next Major&lt;/code&gt;，比如：输入 &lt;code&gt;a.b.c&lt;/code&gt;，依赖的版本就会在 &lt;code&gt;a.b.c&lt;/code&gt; 到 &lt;code&gt;a+1.b.c&lt;/code&gt; 之间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Up to Next Minor&lt;/code&gt;，比如：输入 &lt;code&gt;a.b.c&lt;/code&gt;，依赖的版本就会在 &lt;code&gt;a.b.c&lt;/code&gt; 到 &lt;code&gt;a.b+1.0&lt;/code&gt; 之间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Range&lt;/code&gt;，指定一个自定义的版本范围；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Exact&lt;/code&gt;，指定一个固定版本；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当然，也可以选择这个仓库里的某个分支、提交记录。然后，点击下一步，Xcode 就会开始拉取依赖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ficowblog.oss-cn-shenzhen.aliyuncs.com/uploads/1598572585012.png&quot; alt=&quot;拉取依赖&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来，选择需要导入依赖的目标(target)，默认选择的是应用所在的目标：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ficowblog.oss-cn-shenzhen.aliyuncs.com/uploads/1598572633616.png&quot; alt=&quot;选择导入依赖的目标&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;导入完毕，最终效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ficowblog.oss-cn-shenzhen.aliyuncs.com/uploads/1598572802768.png&quot; alt=&quot;导入完毕&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;在项目中使用依赖&quot;&gt;在项目中使用依赖&lt;/h2&gt;

&lt;p&gt;如下所示，在项目中使用 &lt;code&gt;Alamofire&lt;/code&gt;。如果可以编译成功，则表示导入依赖成功。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-swift&quot;&gt;import UIKit
import Alamofire

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()

        AF.request(&quot;https://httpbin.org/get&quot;).response { response in
            debugPrint(response)
        }
    }

}
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;管理已导入的依赖&quot;&gt;管理已导入的依赖&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://ficowblog.oss-cn-shenzhen.aliyuncs.com/uploads/1598576486170.png&quot; alt=&quot;管理已导入的依赖&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果需要添加/删除依赖，选中依赖对应的行，然后点击 &lt;code&gt;+&lt;/code&gt; 或者 &lt;code&gt;-&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;点击删除时，会有确认提示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ficowblog.oss-cn-shenzhen.aliyuncs.com/uploads/1598576630393.png&quot; alt=&quot;删除时，会有确认提示&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果需要修改依赖的版本，双击依赖对应的行，Xcode 会显示修改版本的控制面板：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ficowblog.oss-cn-shenzhen.aliyuncs.com/uploads/1598576650532.png&quot; alt=&quot;修改版本的控制面板&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;除此之外，也可以使用 Xcode 菜单栏中的选项：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ficowblog.oss-cn-shenzhen.aliyuncs.com/uploads/1598576847748.png&quot; alt=&quot;菜单栏中的选项&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;各个选项的作用：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Reset Package Caches&lt;/code&gt;，重置依赖包的缓存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Resolve Package Versions&lt;/code&gt;，生成 &lt;code&gt;Package.resolved&lt;/code&gt; 文件，以确定依赖的版本信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Update to Latest Package Versions&lt;/code&gt;，根据您配置的依赖包的版本控制规则，对依赖包进行升级。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;在团队中统一依赖的版本&quot;&gt;在团队中统一依赖的版本&lt;/h2&gt;

&lt;p&gt;用 Swift Package Manager 导入依赖后，Xcode 会在 &lt;code&gt;项目根目录/项目名称.xcodeproj/project.workspace/xcshareddata/swiftpm/&lt;/code&gt; 这个目录生成一个 &lt;code&gt;Package.resolved&lt;/code&gt; 文件。其中的内容大致如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-json&quot;&gt;{
  &quot;object&quot;: {
    &quot;pins&quot;: [
      {
        &quot;package&quot;: &quot;Alamofire&quot;,
        &quot;repositoryURL&quot;: &quot;https://github.com/Alamofire/Alamofire.git&quot;,
        &quot;state&quot;: {
          &quot;branch&quot;: null,
          &quot;revision&quot;: &quot;64dd16a5f2099dd5400f5e6d1442dc5ab0c1d917&quot;,
          &quot;version&quot;: &quot;5.2.0&quot;
        }
      }
    ]
  },
  &quot;version&quot;: 1
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;把这个文件提交到 Git，可以帮助团队成员统一依赖包的版本。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;整体来看，学习和使用 Swift Package Manager 都非常容易。而且，这是官方提供的工具，十分推荐使用！&lt;br/&gt;你甚至不需要创建什么文件，也不需要操作命令行！只需要有一个 Git 仓库的名称或者地址，然后就可以导入依赖了，非常简单、高效！&lt;/p&gt;
&lt;p&gt;朋友，行动起来吧！感受 Swift Package Manager 带给你的快乐 ~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考内容&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&quot;&gt;Adding Package Dependencies to Your App&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 23 Sep 2020 23:38:00 +0000</pubDate>
<dc:creator>Ficow</dc:creator>
<og:description>本文首发于 Ficow Shen&amp;amp;#39;s Blog，原文地址： 使用 Swift Package Manager 集成依赖库。 内容概览 前言 添加依赖包 在项目中使用依赖 管理已导入的依</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/ficow/p/13722258.html</dc:identifier>
</item>
<item>
<title>Jaskson精讲第6篇-自定义JsonSerialize与Deserialize实现数据类型转换 - 字母哥博客</title>
<link>http://www.cnblogs.com/zimug/p/13722254.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zimug/p/13722254.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1815316/202009/1815316-20200924072945076-666449586.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Jackson是Spring Boot(SpringBoot)默认的JSON数据处理框架，但是其并不依赖于任何的Spring 库。有的小伙伴以为Jackson只能在Spring框架内使用，其实不是的，没有这种限制。它提供了很多的JSON数据处理方法、注解，也包括&lt;strong&gt;流式API、树模型、数据绑定&lt;/strong&gt;，以及复杂数据类型转换等功能。它虽然简单易用，但绝对不是小玩具，&lt;strong&gt;更多的内容我会写成一个系列，5-10篇文章，请您继续关注我。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本节继续为大家介绍在Jackson序列化中经常遇到的一些特殊的数据类型，如LocalDateTime 。该如何进行序列化和反序列化。&lt;/p&gt;
&lt;h2 id=&quot;一、localdatetime反序列化异常&quot;&gt;一、&lt;code&gt;LocalDateTime&lt;/code&gt;反序列化异常&lt;/h2&gt;
&lt;p&gt;首先我们定义一个java POJO实体类，其中关键的成员变量时&lt;code&gt;birthDate&lt;/code&gt;,我们没有采用Date数据类型，而是采用了Java8 新的日期类型&lt;code&gt;LocalDateTime&lt;/code&gt; ,使用&lt;code&gt;LocalDateTime&lt;/code&gt; 的好处我就不多说了，有很多的文章解释说明。我们把精力放回到Jackson的JSON格式序列化与反序列化内容上来。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Data
public class PlayerStar4 {
  private String name; //姓名
  private LocalDateTime birthDate; //出生日期
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面的代码，我们首先定义了一个PlayerStar4类的对象player，然后&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用writeValueAsString方法将player对象序列化为JSON字符串jsonString&lt;/li&gt;
&lt;li&gt;然后使用readValue方法将JSON字符串jsonString ，反序列化为PlayerStar4类的对象&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;@Test
void testJSON2Object() throws IOException {

  ObjectMapper mapper = new ObjectMapper();

  PlayerStar4 player = new PlayerStar4();
  player.setName(&quot;curry&quot;);//我并不知道库里的生日，这里是编造的
  player.setBirthDate(LocalDateTime.of(1986,4,5,12,50));

  //将player对象以JSON格式进行序列化为String对象
  String jsonString = mapper.writeValueAsString(player);
  System.out.println(jsonString);

  //将JSON字符串反序列化为java对象
  PlayerStar4 curry = mapper.readValue(jsonString, PlayerStar4.class);
  System.out.println(curry);

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是上面的代码报错了，从下图中可以看出&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;将player对象序列化为JSON字符串jsonString 的过程被正常执行了，但是LocalDateTime序列化之后的结果，是图中”黄框中的黄框“内容。&lt;/li&gt;
&lt;li&gt;将JSON字符串反序列化的过程报错了，因为Jackson默认情况下，根本不认识图中”黄框中的黄框“内容这种LocalDateTime序列化之后的JSON字符串数据结构。无法把它反序列化为java对象。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/1815316/202009/1815316-20200924072945480-2141774853.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;怎么办？我们需要自定义序列化及反序列化类型转换器，有两种方法&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;继承StdConverter类，自定义实现String与LocalDateTime相互转换&lt;/li&gt;
&lt;li&gt;继承JsonSerializer和JsonDeserializer类，自定义实现String与LocalDateTime相互转换&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;二、方法一：继承stdconverter类&quot;&gt;二、方法一：继承StdConverter类&lt;/h2&gt;
&lt;p&gt;继承StdConverter类，将LocalDateTime序列化为String数据类型&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class LocalDateTimeToStringConverter extends StdConverter&amp;lt;LocalDateTime, String&amp;gt; {
  static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);

  @Override
  public String convert(LocalDateTime value) {
      return value.format(DATE_FORMATTER);
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;继承StdConverter类，将String数据类型反序列化为LocalDateTime&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class StringToLocalDatetimeConverter extends StdConverter&amp;lt;String, LocalDateTime&amp;gt; {
  @Override
  public LocalDateTime convert(String value) {
      return LocalDateTime.parse(value, LocalDateTimeToStringConverter.DATE_FORMATTER);
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;自定义的转换器完成之后，我们就可以在对应的成员变量上，使用&lt;code&gt;@JsonSerialize&lt;/code&gt;指定序列化转换器，&lt;code&gt;@JsonDeserialize&lt;/code&gt;指定反序列化转换器。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  @JsonSerialize(converter = LocalDateTimeToStringConverter.class)
  @JsonDeserialize(converter = StringToLocalDatetimeConverter.class)
  private LocalDateTime birthDate;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后调用第一小节中的测试用例，就不会出现异常了。控制台打印输出结果如下，第一行是序列化结果JSON格式字符串，第二行是Java 对象的toString()方法的打印结果。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{&quot;name&quot;:&quot;curry&quot;,&quot;birthDate&quot;:&quot;1986-4-5 12:50:00&quot;}
PlayerStar4(name=curry, birthDate=1986-04-05T12:50)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;三、方法二：继承jsonserializer和jsondeserializer类&quot;&gt;三、方法二：继承JsonSerializer和JsonDeserializer类&lt;/h2&gt;
&lt;p&gt;继承&lt;code&gt;JsonSerializer&amp;lt;LocalDateTime&amp;gt;&lt;/code&gt;类，将LocalDateTime序列化为String数据类型&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class LocalDateTimeSerializer extends JsonSerializer&amp;lt;LocalDateTime&amp;gt; {
  static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);

  @Override
  public void serialize(LocalDateTime value, JsonGenerator gen, SerializerProvider provider)
          throws IOException {
          String s = value.format(DATE_FORMATTER);
          gen.writeString(s);
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;继承&lt;code&gt;JsonDeserializer&amp;lt;LocalDateTime&amp;gt;&lt;/code&gt;类，将String数据类型反序列化为LocalDateTime&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class LocalDatetimeDeserializer extends JsonDeserializer&amp;lt;LocalDateTime&amp;gt; {

  @Override
  public LocalDateTime deserialize(JsonParser p, DeserializationContext ctx)
          throws IOException {
      String str = p.getText();
      return LocalDateTime.parse(str, LocalDateTimeSerializer.DATE_FORMATTER);
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四、如果上面的你都没看懂&quot;&gt;四、如果上面的你都没看懂&lt;/h2&gt;
&lt;p&gt;对于相对小白的读者，上面的自定义序列化及反序列化转换过程你都没懂，对于LocalDateTime的异常你也不要慌，Jackson已经给出了解决方案。&lt;/p&gt;
&lt;p&gt;需要特别和大家强调的是&lt;strong&gt;LocalDateTimeSerializer和LocalDateTimeDeserializer其实并不需要我们自己去定义，因为Jackson已经帮我们定义好了。&lt;/strong&gt; 之所以我还做了自定义的实现的介绍，是因为要为大家讲解这个自定义序列化和反序列化类型转换的实现过程，以后你再遇到其他的特殊的数据类型转换，或者LocalDateTime类型的特殊日期格式等，都可以自己来定义JsonSerialize和JsonDeserialize来实现数据类型的转换。&lt;/p&gt;
&lt;p&gt;下面的这两个类就是Jackson已经帮我们定义好的LocalDateTimeSerializer和LocalDateTimeDeserializer。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用方法是在对应的成员变量上，使用&lt;code&gt;@JsonSerialize&lt;/code&gt;指定序列化转换器，&lt;code&gt;@JsonDeserialize&lt;/code&gt;指定反序列化转换器。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@JsonSerialize(using = LocalDateTimeSerializer.class)
@JsonDeserialize(using = LocalDateTimeDeserializer.class)
private LocalDateTime birthDate;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行之后的序列化和反序列化结果，和方法一、方法二自定义的实现效果是一样的。&lt;/p&gt;
&lt;h2 id=&quot;欢迎关注我的博客，里面有很多精品合集&quot;&gt;欢迎关注我的博客，里面有很多精品合集&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;本文转载注明出处（必须带连接，不能只转文字）：&lt;a href=&quot;http://www.zimug.com&quot;&gt;字母哥博客&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;觉得对您有帮助的话，帮我点赞、分享！您的支持是我不竭的创作动力！&lt;/strong&gt; 。另外，笔者最近一段时间输出了如下的精品内容，期待您的关注。&lt;/p&gt;
</description>
<pubDate>Wed, 23 Sep 2020 23:30:00 +0000</pubDate>
<dc:creator>字母哥博客</dc:creator>
<og:description>Jackson是Spring Boot(SpringBoot)默认的JSON数据处理框架，但是其并不依赖于任何的Spring 库。有的小伙伴以为Jackson只能在Spring框架内使用，其实不是的，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zimug/p/13722254.html</dc:identifier>
</item>
<item>
<title>Android如何使用注解进行代码检查 - 躬行之</title>
<link>http://www.cnblogs.com/jzmanu/p/13721954.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jzmanu/p/13721954.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;原文首发于微信公众号：躬行之(jzman-blog)，欢迎关注交流！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android Studio 内置了代码检查工具 Lint，可在菜单栏选择 Analyze &amp;gt; Inspect Code 执行相应的代码检查，代码检查能够根据推断一些不合法的潜在问题，有助于在开发阶段发现开发者因为主管原因导致的一下代码问题，Android 官方提供了注解库 support-annotations 来帮助开发者及早发现问题，下面是常用的一些注解，主要内容如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Nullness注解&lt;/li&gt;
&lt;li&gt;资源注解&lt;/li&gt;
&lt;li&gt;线程注解&lt;/li&gt;
&lt;li&gt;值约束注解&lt;/li&gt;
&lt;li&gt;权限注解&lt;/li&gt;
&lt;li&gt;返回值注解&lt;/li&gt;
&lt;li&gt;CallSuper注解&lt;/li&gt;
&lt;li&gt;Typedef注解&lt;/li&gt;
&lt;li&gt;可访问性注解&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;nullness注解&quot;&gt;Nullness注解&lt;/h4&gt;
&lt;p&gt;使用 Nullness 注解可以检查给定变量、参数和返回值是否允许 null 值，具体如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;@Nullable&lt;/strong&gt; ：表示可以为 null 的变量、参数或返回值，&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@NonNull&lt;/strong&gt; ：表示不可为 null 的变量、参数或返回值。&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@NonNull
@Override
public View onCreateView(String name, @NonNull Context context,@NonNull AttributeSet attrs) {
    //...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;资源注解&quot;&gt;资源注解&lt;/h4&gt;
&lt;p&gt;资源注解的使用可使得在源码阶段让编辑器检查书写的不规范，也可在一定程度上优化代码结构，下面是常见的资源注解如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;@StringRes&lt;/strong&gt;： 表示检查是否包含R.string引用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@ColorRes&lt;/strong&gt;： 表示检查是否包含R.color引用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@ColorInt&lt;/strong&gt;： 表示检查是否包含表示颜色的整型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@DrawableRes&lt;/strong&gt;： 表示检查是否包含R.drawable引用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@DimenRes&lt;/strong&gt;： 表示检查是否包含R.dimen引用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@InterpolatorRes&lt;/strong&gt;：表示检查是否包含插值器引用&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;线程注解&quot;&gt;线程注解&lt;/h4&gt;
&lt;p&gt;线程注解可以检查某个方法是否从某个特定类型的线程中调用，支持一下线程注解,具体如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;@MainThread&lt;/strong&gt;：表示主线程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@UiThread&lt;/strong&gt;：表示 UI 线程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@WorkerThread&lt;/strong&gt;：表示工作线程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@BinderThread&lt;/strong&gt;：表示Binder线程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@AnyThread&lt;/strong&gt;：表示任何一个线程&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上述注解中 &lt;strong&gt;@MainThread&lt;/strong&gt; 和 &lt;strong&gt;@UiThread&lt;/strong&gt; 在大多时候表示的都是同一线程，如果应用中带有多个试图，UI 线程可与主线程不同，故可使用 &lt;strong&gt;@UIThread&lt;/strong&gt; 标注与应用的视图层次相关联的方法，使用 &lt;strong&gt;@MainThread&lt;/strong&gt; 仅标注与应用生命周期相关联的方法。线程注解最常用的一个用途是 AsyncTask 使用中的方法替换，因为 AsyncTask 会执行后台操作并将结果发布到 UI 线程。&lt;/p&gt;
&lt;h4 id=&quot;值约束注解&quot;&gt;值约束注解&lt;/h4&gt;
&lt;p&gt;使用值约束注解可验证传递的参数的值的合法性，可以借此指定参数的设置范围，可在一定程度上减少代码在主观程度上出现的错误，常见的值约束注解如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;@IntRange&lt;/strong&gt;：表示可以验证整型参数是否在指定范围内&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@FloatRange&lt;/strong&gt;：表示可以验证浮点型参数是否在指定范围内&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@Size&lt;/strong&gt;：表示可以验证集合、数组、字符串参数是否在指定范围内，可指定最大值、最小值以及确切值&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面的注解有一些可使用的参数，如 from、to、min 等，使用时具体在某个注解体重查看定义即可。&lt;/p&gt;
&lt;h4 id=&quot;权限注解&quot;&gt;权限注解&lt;/h4&gt;
&lt;p&gt;权限注解 &lt;strong&gt;@RequiresPermission&lt;/strong&gt; 可以验证方法调用方的权限，即当使用了权限注解的方法时会检查有没有指定的权限，如果没有则会提示要在 AndroidManifest.xml 文件中申明权限，如果是危险权限还有进行权限动态申请，使用方式参考如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
 * 单个权限检查
 * @param message
 */
@RequiresPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
public void setMessage(String message) {
}

/**
 * 全部权限检查
 * @param message
 */
@RequiresPermission(allOf = {
        Manifest.permission.WRITE_EXTERNAL_STORAGE,
        Manifest.permission.READ_EXTERNAL_STORAGE})
public void setMesage(String message) {
}

/**
 * 某个权限检查
 * @param message
 */
@RequiresPermission(anyOf = {
        Manifest.permission.WRITE_EXTERNAL_STORAGE,
        Manifest.permission.READ_EXTERNAL_STORAGE})
public void setMesage(String message) {
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;返回值注解&quot;&gt;返回值注解&lt;/h4&gt;
&lt;p&gt;返回值注解 &lt;strong&gt;@CheckResult&lt;/strong&gt; 会检查某个方法的返回值是否被使用，如果没有被使用，则会根据 suggest 配置建议使用相同公民没有返回值的另一个方法，如果返回值使用了，则和未加该注解的方法一样，使用方式参考如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@CheckResult(suggest=&quot;#enforcePermission(String,int,int,String)&quot;)
public  int checkPermission(@NonNull String permission, int pid, int uid){
    return 0;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果没有使用返回值提示如下：&lt;br/&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/9/15/16d3590105eaa642?w=771&amp;amp;h=76&amp;amp;f=jpeg&amp;amp;s=10249&quot; alt=&quot;jzman-blog&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;当返回值没有被使用，则会建议使用相同功能没有返回值的另一个方法，简而言之，返回值注解 &lt;strong&gt;@CheckResult&lt;/strong&gt; 能够表示某个方法实际使用的时方法本身的处理还是方法最终的处理结果。&lt;/p&gt;
&lt;h4 id=&quot;callsuper注解&quot;&gt;CallSuper注解&lt;/h4&gt;
&lt;p&gt;使用 &lt;strong&gt;@CallSuper&lt;/strong&gt; 注解会验证子类的重写方法是否调用父类的实现，这样约束的好处是可保证父类的实现不会修改，当然，如果不使用该注解，子类重写父类的方法可以不调用弗父类的默认实现，具体参考如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
 * 父类
 * @CallSuper注解的使用
 */
public class Test {
    //使用@CallSuper注解，子类重写该方法时必须调用该方法
    @CallSuper
    protected void onCreate(){
        
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面是 Test 类的实现类：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
 * 子类
 * @CallSuper注解的使用
 */
public class TestImpl extends Test{
    @Override
    protected void onCreate() {
        super.onCreate();
        /**
         * 如果不调用父类的方法，则会提示
         * Some methods, such as View#onDetachedFromWindow, require that you also call the super implementation as part of your method.
         */
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;typedef注解&quot;&gt;Typedef注解&lt;/h4&gt;
&lt;p&gt;使用 &lt;strong&gt;@IntDef&lt;/strong&gt; 和 &lt;strong&gt;@StringDef 注解&lt;/strong&gt; 可以创建整型和字符串的枚举注解来验证其他代码中使用的某些整型和字符串，可以保证代码中的某些常量整型或常量字符串是某些具体定义的常量集，这两个注解的位置只能是注解。&lt;/p&gt;
&lt;p&gt;开发中总会使用到枚举，枚举在一定程度上可使得代码结构更清晰，但枚举的使用会增加内存的开销，这里可以用 Typedef 注解的方式来代替枚举，下面是 Tyoedef 注解的使用，参考如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
 * Typedef 注解的定义
 */
public class ActionType {

    public static final int ACTION_TYPE_0 = 0;
    public static final int ACTION_TYPE_1 = 1;
    public static final int ACTION_TYPE_2 = 2;

    @Retention(RetentionPolicy.SOURCE)
    @IntDef({ACTION_TYPE_0,ACTION_TYPE_1,ACTION_TYPE_2})
    public @interface ActionTypeDef{

    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面是上述 Typedef 注解的使用方式，参考如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;/**
 * Typedef注解的使用
 * @param value
 */
private void setValue(@ActionType.ActionTypeDef int value) {
    switch (value) {
        case ActionType.ACTION_TYPE_0:
            break;
        case ActionType.ACTION_TYPE_1:
            break;
        case ActionType.ACTION_TYPE_2:
            break;

//        case 100://不能使用未定义的整型
//            break;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可见 Typedef 注解约束了使用到的某些整型，当然还可以是字符串，这样也能达到枚举的作用。&lt;/p&gt;
&lt;h4 id=&quot;可访问性注解&quot;&gt;可访问性注解&lt;/h4&gt;
&lt;p&gt;可访问性注解是 &lt;strong&gt;@VisibleForTesting&lt;/strong&gt; 和 &lt;strong&gt;@Keep&lt;/strong&gt; 可以表示方法、字段、类的可访问性。具体如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;@VisibleForTesting&lt;/strong&gt;：表示注解的某个代码块的可见性高于能够测试时需要的水平&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@Keep&lt;/strong&gt;：表示被注解的代码块将不会被混淆。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最常用的可能就是资源注解，如 @StringRes、@ColorRes、@ColorInt等，还有Typeof 注解，该注解可以在替换枚举在 Android 开发中带来的性能影响，如果平时留意这些注解在 Android 源码中也经常使用，所以可在开发过程中尝试去使用这些注解以进行必要的代码检查。&lt;/p&gt;
&lt;p&gt;可以关注公众号：躬行之（jzman-blog），一起交流学习。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/7/10/1733467a93fbeaec?w=600&amp;amp;h=400&amp;amp;f=png&amp;amp;s=38978&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 23 Sep 2020 15:59:00 +0000</pubDate>
<dc:creator>躬行之</dc:creator>
<og:description>原文首发于微信公众号：躬行之(jzman-blog)，欢迎关注交流！ Android Studio 内置了代码检查工具 Lint，可在菜单栏选择 Analyze &amp;amp;gt; Inspect Co</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/jzmanu/p/13721954.html</dc:identifier>
</item>
<item>
<title>简单版 Promise/A+，通过官方872个测试用例 - 风吹De麦浪</title>
<link>http://www.cnblogs.com/CandyManPing/p/13721827.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CandyManPing/p/13721827.html</guid>
<description>&lt;p data-lake-id=&quot;52fcfdc5b7e5cba6ba7e8e5c341fea22&quot;&gt;在实现 Promise 之前要清楚的是 JavaScript 中的 Promise 遵循了 Promises/A+ 规范，所以我们在编写 Promise 时也应当遵循这个规范，建议认真、仔细读几遍这个规范。最好是理解事件循环，这样对于理解js中的异步是怎么回事非常重要。&lt;/p&gt;
&lt;p data-lake-id=&quot;1b55be8601b65e6c29629d9568cb9b13&quot;&gt;&lt;a href=&quot;https://promisesaplus.com/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://promisesaplus.com/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;new&lt;/span&gt; Promise( &lt;span&gt;function&lt;/span&gt;(resolve, reject) {...} &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; executor &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;  );&lt;br/&gt;&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Promise((resolve, reject)=&amp;gt;&lt;span&gt; {
  AjaxRequest.post({
      url: &lt;/span&gt;'url'&lt;span&gt;,
      data: {},
      sueccess: ()&lt;/span&gt;=&amp;gt;&lt;span&gt; {
          resolve(res)
      },
      fail: (err)&lt;/span&gt;=&amp;gt;&lt;span&gt; {
          reject(err)
      }
  })
}).then((res)&lt;/span&gt;=&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; do some&lt;/span&gt;
}).then(value =&amp;gt;&lt;span&gt; {
  
}).&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;((err)=&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; do some&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-lake-id=&quot;93a809f2fe585e39693daa1b49019be5&quot;&gt;promise 是处理异步结果的一个对象，承若状态改变时调用对应的回调函数，resolve、reject用来改变promise 的状态，then 绑定成功、失败的回调。&lt;/p&gt;

&lt;p&gt;安装测试工具以及nodemon因为我们要在node环境调试自己写的promise&lt;/p&gt;
&lt;div id=&quot;914bC&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%2F%2F%20nodemon%5Cnnpm%20install%20nodemon%20-D%5Cn%2F%2F%20promise%20%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%5Cnnpm%20install%20promises-aplus-tests%20-D%20%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22914bC%22%7D&quot; data-language=&quot;plain&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; nodemon&lt;/span&gt;
npm install nodemon -&lt;span&gt;D
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; promise 测试工具&lt;/span&gt;
npm install promises-aplus-tests -D 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;3umiz&quot; data-lake-id=&quot;bcd54b6f75d3f88cd7d42f39b2960c18&quot;&gt;增加脚本命令&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&quot;testPromise&quot;: &quot;promises-aplus-tests myPromise/promise3.js&quot;&lt;span&gt;,
 &lt;/span&gt;&quot;dev&quot;: &quot;nodemon ./myPromise/index.js -i &quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-lake-id=&quot;dfcca1a595e204c5ecf69943af114158&quot;&gt;各自的路径改成自己的即可，这个在后面会用来测试。&lt;/p&gt;

&lt;p data-lake-id=&quot;72fbc18f1501c3c7fa49234599ccfaa0&quot;&gt;根据规范实现一个简单的promise，功能如下&lt;/p&gt;
&lt;ol start=&quot;1&quot; data-lake-id=&quot;57fcb84e709080c526c65cfa02f7a12a&quot;&gt;&lt;li data-lake-id=&quot;7524f9f26d3d39b47b98e60b7987d1ac&quot;&gt;promise的三种状态（PENDING、FULFILLED、REJECTED）&lt;/li&gt;
&lt;li data-lake-id=&quot;41cdbb64e02af3ab25510098497eb2fb&quot;&gt;状态只能由 Pending 变为 Fulfilled 或由 Pending 变为 Rejected ，且状态改变之后不会在发生变化，会一直保持这个状态&lt;/li&gt;
&lt;li data-lake-id=&quot;221c244f02f6c232c5b8fd00e1f45343&quot;&gt;绑定then的回调&lt;/li&gt;
&lt;li data-lake-id=&quot;e0936169c39f29949efce1eecb9e63ee&quot;&gt;返回成功、失败的值&lt;/li&gt;
&lt;li data-lake-id=&quot;1a3ccde196ebcbf49050f08b02be4ca3&quot;&gt;一个promise 支持调用多次then&lt;/li&gt;
&lt;li data-lake-id=&quot;3baaf06277250c96dd9ad2d02ff95315&quot;&gt;支持捕获异常&lt;/li&gt;
&lt;/ol&gt;&lt;div id=&quot;IBNaH&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%2F*%20%5Cn%5Cn%E5%9F%BA%E6%9C%AC%E6%9E%B6%E5%AD%90%5Cn%E6%A0%B9%E6%8D%AEpromise%20A%2B%20%E8%A7%84%E8%8C%83%E8%BF%98%E8%A6%81%E5%A4%84%E7%90%86then%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%E4%BB%A5%E5%8F%8A%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%A0%E9%80%92%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E5%90%8E%E7%BB%AD%E5%9C%A8promise2%E3%80%81promise3%20%E5%A4%84%E7%90%86%5Cn%5Cn*%2F%5Cn%5Cnconst%20PENDING%20%3D%20'PENDING'%2C%5Cn%20%20%20%20%20%20FULFILLED%20%3D%20'FULFILLED'%2C%5Cn%20%20%20%20%20%20REJECTED%20%3D%20'REJECTED'%3B%5Cn%5Cnclass%20myPromise%20%7B%5Cn%20%20constructor%20(executor)%20%7B%5Cn%20%20%20%20this.status%20%3D%20PENDING%5Cn%20%20%20%20this.value%20%3D%20undefined%5Cn%20%20%20%20this.reason%20%3D%20undefined%5Cn%20%20%20%20this.onResolveCallbacks%20%3D%20%5B%5D%5Cn%20%20%20%20this.onRejectedCallbacks%20%3D%20%5B%5D%5Cn%5Cn%20%20%20%20const%20resolve%20%3D%20(value)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20if%20(this.status%20%3D%3D%3D%20PENDING)%20%7B%5Cn%20%20%20%20%20%20%20%20this.status%20%3D%20FULFILLED%5Cn%20%20%20%20%20%20%20%20this.value%20%3D%20value%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E5%B8%83%5Cn%20%20%20%20%20%20%20%20this.onResolveCallbacks.forEach(fn%20%3D%3E%20fn())%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20const%20reject%20%3D%20(reason)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20if%20(this.status%20%3D%3D%3D%20PENDING)%20%7B%5Cn%20%20%20%20%20%20%20%20this.status%20%3D%20REJECTED%5Cn%20%20%20%20%20%20%20%20this.reason%20%3D%20reason%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E5%B8%83%5Cn%20%20%20%20%20%20%20%20this.onRejectedCallbacks.forEach(fn%20%3D%3E%20fn())%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20%E6%89%A7%E8%A1%8C%E4%BC%A0%E8%BF%9B%E6%9D%A5%E7%9A%84fn%2C%20%E5%9C%A8%E7%BB%99%E4%BB%96%E6%8F%90%E4%BE%9B%E6%94%B9%E5%8F%98%E7%8A%B6%E6%80%81%E7%9A%84fn%5Cn%20%20%20%20%20%20executor(resolve%2C%20reject)%5Cn%20%20%20%20%7D%20catch(e)%20%7B%5Cn%20%20%20%20%20%20reject(e)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20%2F%2F%20%E8%AE%A2%E9%98%85%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%5Cn%20%20then%20(onFulfilled%2C%20onRejected)%20%7B%5Cn%5Cn%20%20%20%20if%20(this.status%20%3D%20PENDING)%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20%E8%AE%A2%E9%98%85%5Cn%20%20%20%20%20%20this.onResolveCallbacks.push(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20onFulfilled(this.value)%5Cn%20%20%20%20%20%20%7D)%5Cn%5Cn%20%20%20%20%20%20this.onRejectedCallbacks.push(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20onRejected(this.reason)%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20if%20(this.status%20%3D%3D%3D%20FULFILLED)%20%7B%5Cn%20%20%20%20%20%20onFulfilled(this.value)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20if%20(this.status%20%3D%3D%3D%20REJECTED)%20%7B%5Cn%20%20%20%20%20%20onRejected(this.reason)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnmodule.exports%20%3D%20myPromise%5Cn%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22IBNaH%22%7D&quot; data-language=&quot;plain&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 

基本架子
根据promise A+ 规范还要处理then链式调用以及返回值传递的问题，后续在promise2、promise3 处理

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

const PENDING &lt;/span&gt;= 'PENDING'&lt;span&gt;,
      FULFILLED &lt;/span&gt;= 'FULFILLED'&lt;span&gt;,
      REJECTED &lt;/span&gt;= 'REJECTED'&lt;span&gt;;

class myPromise {
  constructor (executor) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.status =&lt;span&gt; PENDING
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; undefined
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.reason =&lt;span&gt; undefined&lt;br/&gt;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.onResolveCallbacks =&lt;span&gt; []
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.onRejectedCallbacks =&lt;span&gt; []

    const resolve &lt;/span&gt;= (value) =&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.status ===&lt;span&gt; PENDING) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.status =&lt;span&gt; FULFILLED
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 发布&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.onResolveCallbacks.forEach(fn =&amp;gt;&lt;span&gt; fn())
      }
    }

    const reject &lt;/span&gt;= (reason) =&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.status ===&lt;span&gt; PENDING) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.status =&lt;span&gt; REJECTED
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.reason =&lt;span&gt; reason
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 发布&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.onRejectedCallbacks.forEach(fn =&amp;gt;&lt;span&gt; fn())
      }
    }

    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行传进来的fn, 在给他提供改变状态的fn&lt;/span&gt;
&lt;span&gt;      executor(resolve, reject)
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(e) {
      reject(e)
    }
  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 订阅回调函数&lt;/span&gt;
&lt;span&gt;  then (onFulfilled, onRejected) {

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.status =&lt;span&gt; PENDING) {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 订阅&lt;/span&gt;
      &lt;span&gt;this&lt;/span&gt;.onResolveCallbacks.push(() =&amp;gt;&lt;span&gt; {
        onFulfilled(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value)
      })

      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.onRejectedCallbacks.push(() =&amp;gt;&lt;span&gt; {
        onRejected(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.reason)
      })
    }

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.status ===&lt;span&gt; FULFILLED) {
      onFulfilled(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value)
    }

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.status ===&lt;span&gt; REJECTED) {
      onRejected(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.reason)
    }
  }
}

module.exports &lt;/span&gt;= myPromise
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;AjrGj&quot; data-lake-id=&quot;a869c10c53ae1ec7289443dbf158f672&quot;&gt;订阅&lt;/h2&gt;
&lt;p data-lake-id=&quot;ba7ae63f5679872e8e8339c4dd0eef35&quot;&gt;   传进来的fn是一个执行器，接受resolve、reject参数，通常我们在构造函数中需要调用某个接口，这是一个异步的操作，执行完构造函数之后，在执行then()，这个时候的状态还是pending，所以我们需要把then 绑定的回调存起来，也可以理解为promise对象订阅了这个回调。&lt;/p&gt;
&lt;h2 id=&quot;NKWUG&quot; data-lake-id=&quot;ee177fe3c271325f5864c3529211292a&quot;&gt;发布&lt;/h2&gt;
&lt;p data-lake-id=&quot;142f6fa0f5ce92f1c6e23208dec18382&quot;&gt;   在 resolve，reject函数中中我们改变了promise 对象的状态，既然状态改变了，那么我们需要执行之前订阅的回调，所以在不同的状态下执行对应的回调即可。&lt;/p&gt;
&lt;h2 id=&quot;cqOCd&quot; data-lake-id=&quot;9b4aed12e71e26f88eff25232e1ae492&quot;&gt;流程&lt;/h2&gt;
&lt;p data-lake-id=&quot;0e67b4a5a754d44f59c387f11cda6034&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/825196/202009/825196-20200923232121563-1813649541.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;0e67b4a5a754d44f59c387f11cda6034&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fjpeg%2F283358%2F1600861605613-1a684f46-89c9-47d3-b656-9b77e770e696.jpeg%22%2C%22originWidth%22%3A2094%2C%22originHeight%22%3A724%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22margin%22%3A%7B%22top%22%3Afalse%2C%22bottom%22%3Afalse%7D%2C%22width%22%3A2094%2C%22height%22%3A724%7D&quot;&gt;如上所示，实例化对象，执行构造函数，碰到异步，挂起，然后执行then()方法，绑定了resolve、reject的回调。如果异步有了结果执行对应的业务逻辑，调用resolve、或者reject，改变对应的状态，触发我们绑定的回调。&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;0654e72efac6ae0551989bbd04fcfcbe&quot;&gt;以上就是最基本的promise架子，但是还有promise 调用链没有处理，下面继续完善...&lt;/p&gt;

&lt;p data-lake-id=&quot;b0e6825d45dd43e4aad7a28e96888fec&quot;&gt;promose 的精妙的地方就是这个调用链，首先then 函数会返回一个新的promise 对象，并且每一个promise 对象又有一个then 函数。惊不惊喜原理就是那么简单，回顾下then的一些特点&lt;/p&gt;
&lt;h2 id=&quot;5ift8&quot; data-lake-id=&quot;92254f966729610873172da82db3c81e&quot;&gt;then 特点&lt;/h2&gt;
&lt;ol start=&quot;1&quot; data-lake-id=&quot;65b8d5f80e2ebc2d6e0335aab61d9c0c&quot;&gt;&lt;li data-lake-id=&quot;d2ab27e2c1b1968ef94b86cbff27ee2d&quot;&gt;then 返回一个新的promise 对象&lt;/li&gt;
&lt;li data-lake-id=&quot;faec0beddbe5f08f6718048c92a7227a&quot;&gt;then 绑定的回调函数在异步队列中执行（evnet loop 事件循环）&lt;/li&gt;
&lt;li data-lake-id=&quot;f36b1f929f855295ce1ec1a09c83d212&quot;&gt;通过return 来传递结果，跟fn一样如果没有return，默认会是 underfined&lt;/li&gt;
&lt;li data-lake-id=&quot;ced6067e7075097eed807906cc2d3d68&quot;&gt;抛出异常执行绑定的失败函数（最近的promise），如果没有，则执行catch&lt;/li&gt;
&lt;li data-lake-id=&quot;25e237f44177f03f934aa28d8baf4b6e&quot;&gt;then中不管是不是异步只要resolve、rejected 就会执行对应 onFulfilled、onRejected 函数&lt;/li&gt;
&lt;li data-lake-id=&quot;68565447c8116df8e7a69b25aafd4e19&quot;&gt;then中返回promise状态跟执行回调的结果有关，如果没有异常则是FULFILLED，就算没有retun 也是FULFILLED，值是underfined，有异常就是REJECTED，接着走下个then 绑定的onFulfilled 、onRejected 函数&lt;/li&gt;
&lt;/ol&gt;&lt;p data-lake-id=&quot;32bc19f751c10fc0a1aebb47f825d01a&quot;&gt;   根据上面的特点以及阅读规范我们知道then()函数主要需要处理以下几点&lt;/p&gt;
&lt;ul data-lake-id=&quot;414fbf8264f3d6376ccff21fe72a50a4&quot;&gt;&lt;li data-lake-id=&quot;13761b09e9ada0a82900521aa23def49&quot;&gt;返回一个新的promise&lt;/li&gt;
&lt;li data-lake-id=&quot;31219e88f89b34e662080f911b671aab&quot;&gt;值怎么传给then返回的那个promise&lt;/li&gt;
&lt;li data-lake-id=&quot;d59d5fa7685c0b9feda7d2c699a9163e&quot;&gt;状态的改变&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;HDhPJ&quot; data-lake-id=&quot;ebad9879dc78885c4f35e67e123be6f6&quot;&gt;返回一个新的promise&lt;/h2&gt;
&lt;p data-lake-id=&quot;1143e4fbd45b42f1f1960518e47f33c8&quot;&gt;因为promise 的链式调用涉及到状态，所以then 中返回的promise 是一个新的promise&lt;/p&gt;
&lt;div id=&quot;xLVbG&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22then(onFulfilled%2C%20onRejected)%20%7B%5Cn%20%20%20let%20promise2%20%3D%20new%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%2F%2F%20do%20...%5Cn%20%20%20%7D)%5Cn%20%20%20return%20promise2%5Cn%20%7D%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22xLVbG%22%7D&quot; data-language=&quot;plain&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;then(onFulfilled, onRejected) {
   let promise2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; do ...&lt;/span&gt;
&lt;span&gt;   })
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; promise2
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;wdluL&quot; data-lake-id=&quot;936c054ecaee8e914253894148542652&quot;&gt;值的传递、状态的改变&lt;/h2&gt;
&lt;div id=&quot;Pj0G2&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22let%20p%20%3D%20new%20myPromise((resolve%2C%20rejected)%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20do%20...%5Cn%7D)%5Cnp.then(%5Cn%20%20value%20%3D%3E%20%7B%5Cn%20%20%20%20return%201%5Cn%20%20%7D%2C%5Cn%20%20reason%20%3D%3E%20%7B%7D%5Cn%20%20)%5Cn%20%20.then(%5Cn%20%20%20%20value%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20return%20new%20Promise((resolve%2C%20rejected)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20resolve('joel')%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20reason%20%3D%3E%20%7B%7D%5Cn%20%20%20%20)%5Cn%20%20.then(%5Cn%20%20%20%20value%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20throw%20'err%3A%20%E5%87%BA%E9%94%99%E5%95%A6'%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20reason%20%3D%3E%20%7B%7D%5Cn%20%20%20%20)%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22Pj0G2%22%7D&quot; data-language=&quot;plain&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
let p = &lt;span&gt;new&lt;/span&gt; myPromise((resolve, rejected) =&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; do ...&lt;/span&gt;
&lt;span&gt;})
p.then(
  value &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 1&lt;span&gt;
  },
  reason &lt;/span&gt;=&amp;gt;&lt;span&gt; {}
  )
  .then(
    value &lt;/span&gt;=&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Promise((resolve, rejected) =&amp;gt;&lt;span&gt; {
        resolve(&lt;/span&gt;'joel'&lt;span&gt;)
      })
    },
    reason &lt;/span&gt;=&amp;gt;&lt;span&gt; {}
    )
  .then(
    value &lt;/span&gt;=&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; 'err: 出错啦'&lt;span&gt;
    },
    reason &lt;/span&gt;=&amp;gt;&lt;span&gt; {}
    )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;bdbbd5f1ae82cb3752fe113a7e9452ef&quot;&gt;then 返回的值可能是一个普通值、promise对象、function、error 等对于这部分规范文档也有详细的说明&lt;/p&gt;
&lt;p data-lake-id=&quot;cf3d3813ba7bac7427e081fd2d8afebe&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F283358%2F1600871816768-242298b1-be98-4b4f-a5c2-57376c31ed18.png%22%2C%22originWidth%22%3A969%2C%22originHeight%22%3A501%2C%22name%22%3A%22image.png%22%2C%22size%22%3A85463%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A75.23902%2C%22y%22%3A22.23501%2C%22width%22%3A411.74298000000005%2C%22height%22%3A23.266253000000003%2C%22text%22%3A%222.3.ThePromiseResolutionProcedure%22%7D%2C%7B%22x%22%3A75.56928%2C%22y%22%3A66.60588%2C%22width%22%3A40.26375999999999%2C%22height%22%3A15.798550000000006%2C%22text%22%3A%22Thep%22%7D%2C%7B%22x%22%3A87.96089%2C%22y%22%3A67.65555%2C%22width%22%3A763.4987699999999%2C%22height%22%3A15.129069999999999%2C%22text%22%3A%22hpromsgresouoocus%22%7D%2C%7B%22x%22%3A74.50129%2C%22y%22%3A90.58266%2C%22width%22%3A797.1297099999999%2C%22height%22%3A15.677669999999992%2C%22text%22%3A%22deneSMSMX%22%7D%2C%7B%22x%22%3A74.348656%2C%22y%22%3A113.92525%2C%22width%22%3A792.602844%2C%22height%22%3A17.740989999999982%2C%22text%22%3A%22merleassumom%22%7D%2C%7B%22x%22%3A74.593475%2C%22y%22%3A139.40485%2C%22width%22%3A65.51660500000001%2C%22height%22%3A15.186919999999986%2C%22text%22%3A%22valuex.%22%7D%2C%7B%22x%22%3A74.4774%2C%22y%22%3A176.21997%2C%22width%22%3A721.8209400000001%2C%22height%22%3A16.668930000000017%2C%22text%22%3A%22Thisiealmentoflhenaleslowspomem%22%7D%2C%7B%22x%22%3A73.254234%2C%22y%22%3A201.1529%2C%22width%22%3A694.824016%2C%22height%22%3A17.236530000000016%2C%22text%22%3A%22ProMsesA%2BCOMlantth%22%7D%2C%7B%22x%22%3A73.837456%2C%22y%22%3A225.19806%2C%22width%22%3A462.015994%2C%22height%22%3A17.020569999999992%2C%22text%22%3A%22nonconfommantimplementationswithreasonablethenmethod%22%7D%2C%7B%22x%22%3A74.618866%2C%22y%22%3A263.52432%2C%22width%22%3A461.15113399999996%2C%22height%22%3A18.03665000000001%2C%22text%22%3A%22TorunttResolvell(promisex)tlowing%22%7D%2C%7B%22x%22%3A73.130714%2C%22y%22%3A301.79382%2C%22width%22%3A726.5750859999999%2C%22height%22%3A20.220950000000016%2C%22text%22%3A%22231.promiseandxroriothsmoc%22%7D%2C%7B%22x%22%3A72.523575%2C%22y%22%3A330.04312%2C%22width%22%3A319.775645%2C%22height%22%3A20.711209999999994%2C%22text%22%3A%222.3.2lfxisapromise%2Cadoptitsstate%5B3.41%22%7D%2C%7B%22x%22%3A103.466354%2C%22y%22%3A355.71243%2C%22width%22%3A617.153746%2C%22height%22%3A17.919500000000028%2C%22text%22%3A%22232.1xISPdn%22%7D%2C%7B%22x%22%3A103.95685%2C%22y%22%3A385.3085%2C%22width%22%3A471.63251%2C%22height%22%3A17.33250000000004%2C%22text%22%3A%222.3.2.2.Tfwhenxisfulfilledfufillpromisewiththesamealue%22%7D%2C%7B%22x%22%3A102.47633%2C%22y%22%3A413.2121%2C%22width%22%3A499.3096699999999%2C%22height%22%3A17.343079999999986%2C%22text%22%3A%222.32.3.wwhenxisejectedrjectromisewiththesmaon%22%7D%2C%7B%22x%22%3A73.848785%2C%22y%22%3A443.31903%2C%22width%22%3A328.702245%2C%22height%22%3A16.76040999999998%2C%22text%22%3A%222.3.3.Othenwise%2Cifxisanobjectorfunction%22%7D%2C%7B%22x%22%3A104.683365%2C%22y%22%3A465.987%2C%22width%22%3A261.79469500000005%2C%22height%22%3A18.07213999999999%2C%22text%22%3A%222.3.3.1.Letthenbex.then.%5B3.5%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%222.3.ThePromiseResolutionProcedure%20Thep%20hpromsgresouoocus%20deneSMSMX%20merleassumom%20valuex.%20Thisiealmentoflhenaleslowspomem%20ProMsesA%2BCOMlantth%20nonconfommantimplementationswithreasonablethenmethod%20TorunttResolvell(promisex)tlowing%20231.promiseandxroriothsmoc%202.3.2lfxisapromise%2Cadoptitsstate%5B3.41%20232.1xISPdn%202.3.2.2.Tfwhenxisfulfilledfufillpromisewiththesamealue%202.32.3.wwhenxisejectedrjectromisewiththesmaon%202.3.3.Othenwise%2Cifxisanobjectorfunction%202.3.3.1.Letthenbex.then.%5B3.5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A969%2C%22height%22%3A501%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/283358/1600871816768-242298b1-be98-4b4f-a5c2-57376c31ed18.png&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;501px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;jpIge&quot; data-lake-id=&quot;614a409d2083198ec69182df4a0cbcdb&quot;&gt;[[Resolve]](promise, x)&lt;/h2&gt;
&lt;p data-lake-id=&quot;09c8525a8aa577a4f65539b14229418b&quot;&gt;这个可以理解为promise 处理的过程，其中x是执行回调的一个值，promise 是返回新的promise对象，完整代码如下&lt;/p&gt;
&lt;p data-lake-id=&quot;f2e6e9da11e573b1c5315d9c955e2cb0&quot;&gt;我们将这部分逻辑抽成一个独立的函数 如下&lt;/p&gt;
&lt;div id=&quot;EEXdt&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%2F%2F%20%E5%A4%84%E7%90%86then%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84%E6%B5%81%E7%A8%8B%5Cnfunction%20resolvePromise(promise2%2C%20x%2C%20resolve%2C%20reject)%20%7B%5Cn%20%20if%20(promise2%20%3D%3D%3D%20x)%20%7B%5Cn%20%20%20%20return%20reject(new%20TypeError('Chaining%20cycle%20detected%20for%20promise%20%23%3CmyPromise%3E'))%5Cn%20%20%7D%5Cn%5Cn%20%20let%20called%20%3D%20false%5Cn%5Cn%20%20if%20((typeof%20x%20%3D%3D%3D%20'object'%20%26%26%20x%20!%3D%3D%20null)%20%7C%7C%20typeof%20x%20%3D%3D%3D%20'function')%20%7B%5Cn%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20let%20then%20%3D%20x.then%5Cn%20%20%20%20%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AFpromise%5Cn%20%20%20%20%20%20if%20(typeof%20then%20%3D%3D%3D%20'function')%20%7B%5Cn%20%20%20%20%20%20%20%20then.call(x%2C%20(y)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%20resolvePromise%20%E4%BB%A5%E5%80%BC%20y%20%E4%B8%BA%E5%8F%82%E6%95%B0%E8%A2%AB%E8%B0%83%E7%94%A8%EF%BC%8C%E5%88%99%E8%BF%90%E8%A1%8C%20%5B%5BResolve%5D%5D(promise%2C%20y)%5Cn%20%20%20%20%20%20%20%20%20%20if%20(called)%20return%5Cn%20%20%20%20%20%20%20%20%20%20called%20%3D%20true%5Cn%20%20%20%20%20%20%20%20%20%20resolvePromise(promise2%2C%20y%2C%20resolve%2C%20reject)%5Cn%20%20%20%20%20%20%20%20%7D%2C%20(r)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20if%20(called)%20return%5Cn%20%20%20%20%20%20%20%20%20%20called%20%3D%20true%5Cn%20%20%20%20%20%20%20%20%20%20reject(r)%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20resolve(x)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%20catch%20(e)%20%7B%5Cn%20%20%20%20%20%20if%20(called)%20return%5Cn%20%20%20%20%20%20called%20%3D%20true%5Cn%20%20%20%20%20%20reject(e)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%20x%20%E4%B8%8D%E4%B8%BA%E5%AF%B9%E8%B1%A1%E6%88%96%E8%80%85%E5%87%BD%E6%95%B0%EF%BC%8C%E4%BB%A5%20x%20%E6%99%AE%E9%80%9A%E5%80%BC%E6%89%A7%E8%A1%8C%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20resolve(x)%5Cn%20%20%7D%5Cn%7D%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22EEXdt%22%7D&quot; data-language=&quot;plain&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;12&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 处理then返回结果的流程&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; resolvePromise(promise2, x, resolve, reject) {
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (promise2 ===&lt;span&gt; x) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; reject(&lt;span&gt;new&lt;/span&gt; TypeError('Chaining cycle detected for promise #&amp;lt;myPromise&amp;gt;'&lt;span&gt;))
  }

  let called &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;

  &lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;typeof&lt;/span&gt; x === 'object' &amp;amp;&amp;amp; x !== &lt;span&gt;null&lt;/span&gt;) || &lt;span&gt;typeof&lt;/span&gt; x === 'function'&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      let then &lt;/span&gt;=&lt;span&gt; x.then
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断是否是promise&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; then === 'function'&lt;span&gt;) {
        then.call(x, (y) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果 resolvePromise 以值 y 为参数被调用，则运行 [[Resolve]](promise, y)&lt;/span&gt;
          &lt;span&gt;if&lt;/span&gt; (called) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;
          called &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
          resolvePromise(promise2, y, resolve, reject)
        }, (r) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (called) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;
          called &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
          reject(r)
        })
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        resolve(x)
      }
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (e) {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (called) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;
      called &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
      reject(e)
    }
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果 x 不为对象或者函数，以 x 普通值执行回调&lt;/span&gt;
&lt;span&gt;    resolve(x)
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;6d3ab7cee6dbdc513e5836d47eeeeca7&quot;&gt;promises-aplus-tests 这个工具我们必须实现一个静态方法deferred，官方对这个方法的定义如下:&lt;/p&gt;
&lt;p data-lake-id=&quot;99d9109f38890b727f2d913779750ba9&quot;&gt;deferred: 返回一个包含{ promise, resolve, reject }的对象&lt;/p&gt;
&lt;p data-lake-id=&quot;1e6fae1d97ea455ae8cdf1f9f37f36cb&quot;&gt;promise 是一个处于pending状态的promise&lt;/p&gt;
&lt;p data-lake-id=&quot;0ba88c0a01badb8ee362c6b7af571610&quot;&gt;resolve(value) 用value解决上面那个promise&lt;/p&gt;
&lt;p data-lake-id=&quot;1825e591b0e27253896f07647b3d1a64&quot;&gt;reject(reason) 用reason拒绝上面那个promise&lt;/p&gt;
&lt;p data-lake-id=&quot;60703c6433137bbdbebc9c3a9ca9f37e&quot;&gt;添加如下代码&lt;/p&gt;
&lt;div id=&quot;TTCg6&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22myPromise.defer%20%3D%20myPromise.deferred%20%3D%20function%20()%20%7B%5Cn%20%20let%20deferred%20%3D%20%7B%7D%5Cn%5Cn%20%20deferred.promise%20%3D%20new%20myPromise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%20%20deferred.resolve%20%3D%20resolve%5Cn%20%20%20%20deferred.reject%20%3D%20reject%5Cn%20%20%7D)%5Cn%20%20return%20deferred%5Cn%7D%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%22TTCg6%22%7D&quot; data-language=&quot;plain&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
myPromise.defer = myPromise.deferred = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
  let deferred &lt;/span&gt;=&lt;span&gt; {}

  deferred.promise &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; myPromise((resolve, reject) =&amp;gt;&lt;span&gt; {
    deferred.resolve &lt;/span&gt;=&lt;span&gt; resolve
    deferred.reject &lt;/span&gt;=&lt;span&gt; reject
  })
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; deferred
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;1b4fed769fbf18e6543fec3907315f03&quot;&gt;在编辑执行我们前面加的命令即可&lt;/p&gt;
&lt;div id=&quot;61Icj&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22npm%20run%20testMyPromise%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%2261Icj%22%7D&quot; data-language=&quot;plain&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
npm run testMyPromise
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;6f11062e0cc6f3b615a33f3cd3a7d2ac&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F283358%2F1600872668430-b589647c-6e7e-4d41-a471-f0fe44b833f0.png%22%2C%22originWidth%22%3A585%2C%22originHeight%22%3A268%2C%22name%22%3A%22image.png%22%2C%22size%22%3A18416%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A121.10349%2C%22y%22%3A22.574242%2C%22width%22%3A66.24826000000002%2C%22height%22%3A12.491015999999998%2C%22text%22%3A%22%E8%B0%83%E8%AF%95%E6%8E%A7%E5%88%B6%E5%8F%B0%22%7D%2C%7B%22x%22%3A78.83201%2C%22y%22%3A22.581675%2C%22width%22%3A24.172446000000008%2C%22height%22%3A11.812428999999998%2C%22text%22%3A%22%E8%BE%93%E5%87%BA%22%7D%2C%7B%22x%22%3A194.4469%2C%22y%22%3A22.757967%2C%22width%22%3A25.511060000000015%2C%22height%22%3A12.047502999999999%2C%22text%22%3A%22%E7%BB%88%E7%AB%AF%22%7D%2C%7B%22x%22%3A10.562606%2C%22y%22%3A22.856207%2C%22width%22%3A25.131180999999998%2C%22height%22%3A12.094033%2C%22text%22%3A%22%E9%97%AE%E9%A2%98%22%7D%2C%7B%22x%22%3A41.7281%2C%22y%22%3A59.42784%2C%22width%22%3A311.92034%2C%22height%22%3A14.77297999999999%2C%22text%22%3A%22ThevalueisrwithNumber.prototype%22%7D%2C%7B%22x%22%3A306.2759%2C%22y%22%3A59.904785%2C%22width%22%3A280.9539%2C%22height%22%3A12.710124999999998%2C%22text%22%3A%22totypemodifiedtohaveathenme%22%7D%2C%7B%22x%22%3A72.824615%2C%22y%22%3A77.16574%2C%22width%22%3A131.85539500000002%2C%22height%22%3A12.842250000000007%2C%22text%22%3A%22already-fuifilled%22%7D%2C%7B%22x%22%3A72.64503%2C%22y%22%3A93.56063%2C%22width%22%3A164.21247%2C%22height%22%3A13.767555999999999%2C%22text%22%3A%22immediately-fuifilled%22%7D%2C%7B%22x%22%3A71.23844%2C%22y%22%3A110.33459%2C%22width%22%3A158.32064%2C%22height%22%3A13.334239999999994%2C%22text%22%3A%22eventually-fuifilled%22%7D%2C%7B%22x%22%3A71.702194%2C%22y%22%3A128.29498%2C%22width%22%3A125.60626599999999%2C%22height%22%3A13.039199999999994%2C%22text%22%3A%22already-rejected%22%7D%2C%7B%22x%22%3A71.5693%2C%22y%22%3A145.03468%2C%22width%22%3A157.26812%2C%22height%22%3A14.387479999999982%2C%22text%22%3A%22immediately-rejected%22%7D%2C%7B%22x%22%3A71.75596%2C%22y%22%3A161.48552%2C%22width%22%3A148.50094%2C%22height%22%3A14.763000000000005%2C%22text%22%3A%22eventuaily-rejected%22%7D%2C%7B%22x%22%3A26.381653%2C%22y%22%3A213.03636%2C%22width%22%3A129.949327%2C%22height%22%3A14.719999999999999%2C%22text%22%3A%22872passing(41s)%22%7D%2C%7B%22x%22%3A9.270691%2C%22y%22%3A245.76436%2C%22width%22%3A372.274709%2C%22height%22%3A13.347059999999999%2C%22text%22%3A%22PSC%3AcodeListIJoelcodesourcecodelromiseu%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E8%B0%83%E8%AF%95%E6%8E%A7%E5%88%B6%E5%8F%B0%20%E8%BE%93%E5%87%BA%20%E7%BB%88%E7%AB%AF%20%E9%97%AE%E9%A2%98%20ThevalueisrwithNumber.prototype%20totypemodifiedtohaveathenme%20already-fuifilled%20immediately-fuifilled%20eventually-fuifilled%20already-rejected%20immediately-rejected%20eventuaily-rejected%20872passing(41s)%20PSC%3AcodeListIJoelcodesourcecodelromiseu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A585%2C%22height%22%3A268%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/283358/1600872668430-b589647c-6e7e-4d41-a471-f0fe44b833f0.png&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;268px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;3d31296bcb2d6281d89f2d29d03a64f0&quot;&gt; &lt;/p&gt;

&lt;ol start=&quot;1&quot; data-lake-id=&quot;7cdaa9b63cc9b62fb74a2b2cffee5d3e&quot;&gt;&lt;li data-lake-id=&quot;08edbc492d406d6269ed6f69718a6418&quot;&gt;all&lt;/li&gt;
&lt;li data-lake-id=&quot;7d0150caff118f86f472fa47d06af2f2&quot;&gt;allSettled&lt;/li&gt;
&lt;li data-lake-id=&quot;d1b9ce78a5e337e4957c17509cdc17ae&quot;&gt;any&lt;/li&gt;
&lt;li data-lake-id=&quot;39e0fdafab8e101c777f19df998550d4&quot;&gt;race&lt;/li&gt;
&lt;li data-lake-id=&quot;d18b1c36551dd17ed9f19f2f36cfb7ab&quot;&gt;catch&lt;/li&gt;
&lt;li data-lake-id=&quot;4b9e00a0ad8eaeed468ddf7e142827c2&quot;&gt;finlly&lt;/li&gt;
&lt;/ol&gt;&lt;div id=&quot;2NHBH&quot; class=&quot;lake-card-margin&quot; data-card-type=&quot;block&quot; data-lake-card=&quot;codeblock&quot; data-card-value=&quot;data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22npm%20run%20dev%20%2F%2F%20%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%9D%A5%E6%B5%8B%E8%AF%95%E8%BF%99%E4%BA%9B%E6%96%B9%E6%B3%95%22%2C%22heightLimit%22%3Atrue%2C%22margin%22%3Atrue%2C%22id%22%3A%222NHBH%22%7D&quot; data-language=&quot;plain&quot;&gt;
&lt;div class=&quot;lake-codeblock-content&quot;&gt;
&lt;div class=&quot;CodeMirror-sizer&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm run dev &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可以用来测试这些方法&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-lake-id=&quot;c83555b5897892cacd0ae85723f7b084&quot;&gt;&lt;span class=&quot;lake-card-margin-top lake-card-margin-bottom&quot; data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F283358%2F1600873218664-4c8d4413-43b2-46a3-829c-b9d63382b0bd.png%22%2C%22originWidth%22%3A1025%2C%22originHeight%22%3A594%2C%22name%22%3A%22image.png%22%2C%22size%22%3A68054%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A427.94354%2C%22y%22%3A2.116748%2C%22width%22%3A148.65326000000005%2C%22height%22%3A18.77574%2C%22text%22%3A%22%E7%AC%AC%E4%BA%8C%E6%AC%A1%E7%9A%84%E6%88%90%E5%8A%9Freturn%22%7D%2C%7B%22x%22%3A21.93572%2C%22y%22%3A6.5012646%2C%22width%22%3A72.80310999999999%2C%22height%22%3A13.930599400000002%2C%22text%22%3A%22mypromise%22%7D%2C%7B%22x%22%3A360.16714%2C%22y%22%3A7.97843%2C%22width%22%3A57.06849%2C%22height%22%3A12.243591000000002%2C%22text%22%3A%22return%22%7D%2C%7B%22x%22%3A297.69415%2C%22y%22%3A26.998068%2C%22width%22%3A57.61811%2C%22height%22%3A16.921308%2C%22text%22%3A%2228)%22%7D%2C%7B%22x%22%3A32.80871%2C%22y%22%3A28.842087%2C%22width%22%3A47.397055%2C%22height%22%3A12.755226%2C%22text%22%3A%22indexis%22%7D%2C%7B%22x%22%3A298.32608%2C%22y%22%3A49.72976%2C%22width%22%3A141.16995000000003%2C%22height%22%3A15.796080000000003%2C%22text%22%3A%2229.then(value%22%7D%2C%7B%22x%22%3A35.549984%2C%22y%22%3A51.056225%2C%22width%22%3A66.66332600000001%2C%22height%22%3A12.163711%2C%22text%22%3A%22promiselis%22%7D%2C%7B%22x%22%3A303.20117%2C%22y%22%3A71.193924%2C%22width%22%3A212.15033%2C%22height%22%3A16.652715999999998%2C%22text%22%3A%2230conso1e.1og(value)%22%7D%2C%7B%22x%22%3A36.1753%2C%22y%22%3A72.60807%2C%22width%22%3A66.98064500000001%2C%22height%22%3A13.344890000000007%2C%22text%22%3A%22promise2.jis%22%7D%2C%7B%22x%22%3A298.71255%2C%22y%22%3A89.38858%2C%22width%22%3A412.26431999999994%2C%22height%22%3A21.674419999999998%2C%22text%22%3A%2231returnnewmyPromise(resolve%2Crejected)%22%7D%2C%7B%22x%22%3A34.30287%2C%22y%22%3A96.09377%2C%22width%22%3A68.12561%2C%22height%22%3A12.813219999999987%2C%22text%22%3A%22promise3.js%22%7D%2C%7B%22x%22%3A374.44754%2C%22y%22%3A112.7117%2C%22width%22%3A227.83965999999998%2C%22height%22%3A18.500410000000002%2C%22text%22%3A%22rejected'Error%3A%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%5C%22)%22%7D%2C%7B%22x%22%3A298.55118%2C%22y%22%3A115.35497%2C%22width%22%3A30.892089999999996%2C%22height%22%3A14.229730000000004%2C%22text%22%3A%2232%22%7D%2C%7B%22x%22%3A27.250809%2C%22y%22%3A118.30198%2C%22width%22%3A87.087891%2C%22height%22%3A11.148819999999986%2C%22text%22%3A%22nodemodules%22%7D%2C%7B%22x%22%3A238.85188%2C%22y%22%3A135.55704%2C%22width%22%3A18.376149999999996%2C%22height%22%3A17.01889%2C%22text%22%3A%22U%22%7D%2C%7B%22x%22%3A354.9743%2C%22y%22%3A135.62851%2C%22width%22%3A24.478579999999965%2C%22height%22%3A20.53888999999998%2C%22text%22%3A%22H%22%7D%2C%7B%22x%22%3A297.19232%2C%22y%22%3A137.28557%2C%22width%22%3A30.939700000000016%2C%22height%22%3A14.245990000000006%2C%22text%22%3A%2233%22%7D%2C%7B%22x%22%3A32.11851%2C%22y%22%3A140.31389%2C%22width%22%3A53.254090000000005%2C%22height%22%3A12.308110000000028%2C%22text%22%3A%22gitignore%22%7D%2C%7B%22x%22%3A332.8214%2C%22y%22%3A156.6668%2C%22width%22%3A29.002800000000036%2C%22height%22%3A19.69702000000001%2C%22text%22%3A%223)%22%7D%2C%7B%22x%22%3A232.42969%2C%22y%22%3A156.99225%2C%22width%22%3A23.849550000000022%2C%22height%22%3A17.963799999999992%2C%22text%22%3A%221U%22%7D%2C%7B%22x%22%3A297.11313%2C%22y%22%3A158.97292%2C%22width%22%3A30.79476999999997%2C%22height%22%3A14.248960000000011%2C%22text%22%3A%2234%22%7D%2C%7B%22x%22%3A27.490011%2C%22y%22%3A161.26657%2C%22width%22%3A76.33902900000001%2C%22height%22%3A11.735610000000008%2C%22text%22%3A%22packaqe.ison%22%7D%2C%7B%22x%22%3A304.84293%2C%22y%22%3A180.66194%2C%22width%22%3A179.04280999999997%2C%22height%22%3A16.623230000000007%2C%22text%22%3A%2235.then(value-%3Ef%22%7D%2C%7B%22x%22%3A27.984703%2C%22y%22%3A183.63461%2C%22width%22%3A106.541767%2C%22height%22%3A12.18841999999998%2C%22text%22%3A%22packaqe-lockjson%22%7D%2C%7B%22x%22%3A361.43402%2C%22y%22%3A203.67258%2C%22width%22%3A155.53815000000003%2C%22height%22%3A14.644759999999991%2C%22text%22%3A%22conso1e.log(value)%22%7D%2C%7B%22x%22%3A27.33901%2C%22y%22%3A205.93344%2C%22width%22%3A74.06938%2C%22height%22%3A11.456530000000015%2C%22text%22%3A%22README.md%22%7D%2C%7B%22x%22%3A297.36523%2C%22y%22%3A225.12541%2C%22width%22%3A19.871620000000007%2C%22height%22%3A15.108950000000021%2C%22text%22%3A%2237%22%7D%2C%7B%22x%22%3A363.19397%2C%22y%22%3A228.55536%2C%22width%22%3A64.53027000000003%2C%22height%22%3A11.350329999999985%2C%22text%22%3A%22reason%22%7D%2C%7B%22x%22%3A297.76474%2C%22y%22%3A247.7037%2C%22width%22%3A19.39242999999999%2C%22height%22%3A13.459399999999988%2C%22text%22%3A%2238%22%7D%2C%7B%22x%22%3A359.88605%2C%22y%22%3A247.37962%2C%22width%22%3A168.25548999999995%2C%22height%22%3A17.223040000000026%2C%22text%22%3A%22console.1og(reason)%22%7D%2C%7B%22x%22%3A358.37885%2C%22y%22%3A263.98148%2C%22width%22%3A400.01129%2C%22height%22%3A21.752070000000003%2C%22text%22%3A%22returnnewmyPromise(resolve%2Crejected)%3E%22%7D%2C%7B%22x%22%3A297.9442%2C%22y%22%3A269.5728%2C%22width%22%3A19.82352999999995%2C%22height%22%3A13.315350000000024%2C%22text%22%3A%2239%22%7D%2C%7B%22x%22%3A378.28848%2C%22y%22%3A286.42947%2C%22width%22%3A434.26112000000006%2C%22height%22%3A22.115970000000004%2C%22text%22%3A%22resolve(%E7%AC%AC%E5%9B%9B%E6%AC%A1%3A%E5%A4%AA%E9%AB%98%E5%85%B4%E4%BA%86%2C%E5%A4%B1%E8%B4%A5%E4%B9%8B%E5%90%8E%E8%BF%99%E9%87%8C%E5%86%8D%E4%B8%80%E6%AC%A1%E6%88%90%E5%8A%9F%E5%95%A6)%22%7D%2C%7B%22x%22%3A340.12415%2C%22y%22%3A334.25708%2C%22width%22%3A19.905750000000012%2C%22height%22%3A13.103150000000028%2C%22text%22%3A%222)%22%7D%2C%7B%22x%22%3A398.24976%2C%22y%22%3A358.53784%2C%22width%22%3A55.40026%2C%22height%22%3A13.412689999999998%2C%22text%22%3A%22%E8%B0%83%E8%AF%95%E6%8E%A7%E5%88%B6%E5%8F%B0%22%7D%2C%7B%22x%22%3A287.767%2C%22y%22%3A358.55423%2C%22width%22%3A25.476040000000012%2C%22height%22%3A13.869669999999985%2C%22text%22%3A%22%E9%97%AE%E9%A2%98%22%7D%2C%7B%22x%22%3A355.40073%2C%22y%22%3A358.7542%2C%22width%22%3A24.490110000000016%2C%22height%22%3A12.954629999999952%2C%22text%22%3A%22%E8%BE%93%E5%87%BA%22%7D%2C%7B%22x%22%3A473.5215%2C%22y%22%3A358.8178%2C%22width%22%3A22.919399999999996%2C%22height%22%3A13.292400000000043%2C%22text%22%3A%22%E5%B3%B0%E7%AB%AF%22%7D%2C%7B%22x%22%3A972.59015%2C%22y%22%3A360.29535%2C%22width%22%3A49.7287%2C%22height%22%3A13.43643000000003%2C%22text%22%3A%221%3Anode%22%7D%2C%7B%22x%22%3A287.42847%2C%22y%22%3A394.15384%2C%22width%22%3A232.69522999999998%2C%22height%22%3A18.788560000000018%2C%22text%22%3A%22%E6%88%91%E6%98%AFp%E7%9A%84promise%2C%E6%88%91%E6%98%AF%E6%9C%80%E5%90%8E%E6%89%A7%E8%A1%8C%E7%9A%84%22%7D%2C%7B%22x%22%3A287.57706%2C%22y%22%3A413.32346%2C%22width%22%3A171.56034%2C%22height%22%3A15.864100000000008%2C%22text%22%3A%22%E6%88%91%E7%9A%84promise%E5%A4%B1%E8%B4%A5%E5%88%9D%E5%A7%8B%E5%80%BC%22%7D%2C%7B%22x%22%3A286.96664%2C%22y%22%3A430.13666%2C%22width%22%3A144.04386%2C%22height%22%3A15.990020000000015%2C%22text%22%3A%22%E7%AC%AC%E4%BA%8C%E6%AC%A1%E7%9A%84%E6%88%90%E5%8A%9Freturn%22%7D%2C%7B%22x%22%3A286.98172%2C%22y%22%3A445.49365%2C%22width%22%3A129.59125%2C%22height%22%3A17.25418000000002%2C%22text%22%3A%22Error%3A%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%22%7D%2C%7B%22x%22%3A286.14233%2C%22y%22%3A463.03003%2C%22width%22%3A372.37447%2C%22height%22%3A17.097409999999968%2C%22text%22%3A%22%E6%88%90%E5%8A%9F%3A%E7%AC%AC%E5%9B%9B%E6%AC%A1%3A%E5%A4%AA%E9%AB%98%E5%85%B4%E4%BA%86%2C%E5%A4%B1%E8%B4%A5%E4%B9%8B%E5%90%8E%E8%BF%99%E9%87%8C%E5%86%8D%E4%B8%80%E6%AC%A1%E6%88%90%E5%8A%9F%E5%95%A6%22%7D%2C%7B%22x%22%3A286.993%2C%22y%22%3A480.14185%2C%22width%22%3A161.20704%2C%22height%22%3A16.400810000000035%2C%22text%22%3A%22any%3A%E6%88%91%E6%98%AFp2%2C%E6%88%91%E6%88%90%E5%8A%9F%E5%95%A6%22%7D%2C%7B%22x%22%3A285.98712%2C%22y%22%3A496.53104%2C%22width%22%3A171.83553999999998%2C%22height%22%3A16.54565999999994%2C%22text%22%3A%22race%3A%E6%88%91%E6%98%AFp2%2C%E6%88%91%E6%88%90%E5%8A%9F%E5%95%A6%22%7D%2C%7B%22x%22%3A286.58084%2C%22y%22%3A516.2338%2C%22width%22%3A111.4921%2C%22height%22%3A13.935760000000073%2C%22text%22%3A%22error%3Aerror%22%7D%2C%7B%22x%22%3A287.1827%2C%22y%22%3A532.8911%2C%22width%22%3A298.901%2C%22height%22%3A15.85663999999997%2C%22text%22%3A%22secondthensuccess%3Aerror%22%7D%2C%7B%22x%22%3A15.482387%2C%22y%22%3A539.9082%2C%22width%22%3A24.061218999999998%2C%22height%22%3A13.35200000000009%2C%22text%22%3A%22%E5%A4%A7%E6%A0%91%22%7D%2C%7B%22x%22%3A286.9248%2C%22y%22%3A547.7365%2C%22width%22%3A427.47344999999996%2C%22height%22%3A17.24183000000005%2C%22text%22%3A%22a11%3A%E6%88%91%E6%98%AFp1%2C%E6%88%91%E6%88%90%E5%8A%9F%E5%95%A6%2C%E6%88%91%E6%98%AF2%2C%E6%88%91%E6%88%90%E5%8A%9F%E5%95%A6%2C%E6%88%91%E6%98%AFp%2C%E6%88%91%E6%88%90%E5%8A%9F%E5%95%A6%22%7D%2C%7B%22x%22%3A15.065103%2C%22y%22%3A561.62634%2C%22width%22%3A34.10031%2C%22height%22%3A12.570190000000025%2C%22text%22%3A%22%E6%97%B6%E5%90%91%E7%85%B2%22%7D%2C%7B%22x%22%3A290.04547%2C%22y%22%3A565.8625%2C%22width%22%3A438.02823%2C%22height%22%3A14.750960000000077%2C%22text%22%3A%22%5Bnodemonjcleanexitwaitingochangesbeforerestart%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%AC%AC%E4%BA%8C%E6%AC%A1%E7%9A%84%E6%88%90%E5%8A%9Freturn%20mypromise%20return%2028)%20indexis%2029.then(value%20promiselis%2030conso1e.1og(value)%20promise2.jis%2031returnnewmyPromise(resolve%2Crejected)%20promise3.js%20rejected'Error%3A%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%5C%22)%2032%20nodemodules%20U%20H%2033%20gitignore%203)%201U%2034%20packaqe.ison%2035.then(value-%3Ef%20packaqe-lockjson%20conso1e.log(value)%20README.md%2037%20reason%2038%20console.1og(reason)%20returnnewmyPromise(resolve%2Crejected)%3E%2039%20resolve(%E7%AC%AC%E5%9B%9B%E6%AC%A1%3A%E5%A4%AA%E9%AB%98%E5%85%B4%E4%BA%86%2C%E5%A4%B1%E8%B4%A5%E4%B9%8B%E5%90%8E%E8%BF%99%E9%87%8C%E5%86%8D%E4%B8%80%E6%AC%A1%E6%88%90%E5%8A%9F%E5%95%A6)%202)%20%E8%B0%83%E8%AF%95%E6%8E%A7%E5%88%B6%E5%8F%B0%20%E9%97%AE%E9%A2%98%20%E8%BE%93%E5%87%BA%20%E5%B3%B0%E7%AB%AF%201%3Anode%20%E6%88%91%E6%98%AFp%E7%9A%84promise%2C%E6%88%91%E6%98%AF%E6%9C%80%E5%90%8E%E6%89%A7%E8%A1%8C%E7%9A%84%20%E6%88%91%E7%9A%84promise%E5%A4%B1%E8%B4%A5%E5%88%9D%E5%A7%8B%E5%80%BC%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%E7%9A%84%E6%88%90%E5%8A%9Freturn%20Error%3A%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%20%E6%88%90%E5%8A%9F%3A%E7%AC%AC%E5%9B%9B%E6%AC%A1%3A%E5%A4%AA%E9%AB%98%E5%85%B4%E4%BA%86%2C%E5%A4%B1%E8%B4%A5%E4%B9%8B%E5%90%8E%E8%BF%99%E9%87%8C%E5%86%8D%E4%B8%80%E6%AC%A1%E6%88%90%E5%8A%9F%E5%95%A6%20any%3A%E6%88%91%E6%98%AFp2%2C%E6%88%91%E6%88%90%E5%8A%9F%E5%95%A6%20race%3A%E6%88%91%E6%98%AFp2%2C%E6%88%91%E6%88%90%E5%8A%9F%E5%95%A6%20error%3Aerror%20secondthensuccess%3Aerror%20%E5%A4%A7%E6%A0%91%20a11%3A%E6%88%91%E6%98%AFp1%2C%E6%88%91%E6%88%90%E5%8A%9F%E5%95%A6%2C%E6%88%91%E6%98%AF2%2C%E6%88%91%E6%88%90%E5%8A%9F%E5%95%A6%2C%E6%88%91%E6%98%AFp%2C%E6%88%91%E6%88%90%E5%8A%9F%E5%95%A6%20%E6%97%B6%E5%90%91%E7%85%B2%20%5Bnodemonjcleanexitwaitingochangesbeforerestart%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1025%2C%22height%22%3A594%7D&quot;&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/283358/1600873218664-4c8d4413-43b2-46a3-829c-b9d63382b0bd.png&quot; alt=&quot;image.png&quot; class=&quot;image lake-drag-image&quot; title=&quot;image.png&quot; data-role=&quot;image&quot; data-raw-src=&quot;&quot; data-height=&quot;594px&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p data-lake-id=&quot;6218a7480a2c858517e25ee99698617e&quot;&gt;&lt;a href=&quot;https://github.com/ben-Run/promiseAplus&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;6218a7480a2c858517e25ee99698617e&quot;&gt;比较官方的源码： &lt;a href=&quot;https://github.com/then/promise&quot;&gt;https://github.com/then/promise&lt;/a&gt; &lt;/p&gt;

&lt;p data-lake-id=&quot;1f824e30e0e32b1ea58a11184c52d4b5&quot;&gt;&lt;a href=&quot;https://promisesaplus.com/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://promisesaplus.com/&lt;/a&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;86d290a235c71a6545f1bb4b3b1edf2c&quot;&gt;&lt;a href=&quot;https://www.jianshu.com/p/4d266538f364&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.jianshu.com/p/4d266538f364&lt;/a&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;4b370151089d08617f0010203afed699&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all&lt;/a&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;4b370151089d08617f0010203afed699&quot;&gt; &lt;/p&gt;
&lt;p data-lake-id=&quot;4b370151089d08617f0010203afed699&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Wed, 23 Sep 2020 15:27:00 +0000</pubDate>
<dc:creator>风吹De麦浪</dc:creator>
<og:description>promise 标准 在实现 Promise 之前要清楚的是 JavaScript 中的 Promise 遵循了 Promises/A+ 规范，所以我们在编写 Promise 时也应当遵循这个规范，建</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/CandyManPing/p/13721827.html</dc:identifier>
</item>
<item>
<title>pytest封神之路第五步 参数化进阶 - dongfanger</title>
<link>http://www.cnblogs.com/df888/p/13721501.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/df888/p/13721501.html</guid>
<description>&lt;p&gt;用过unittest的朋友，肯定知道可以借助DDT实现参数化。用过JMeter的朋友，肯定知道JMeter自带了4种参数化方式（见参考资料）。pytest同样支持参数化，而且很简单很实用。&lt;/p&gt;

&lt;p&gt;在《pytest封神之路第三步 精通fixture》和《pytest封神之路第四步 内置和自定义marker》两篇文章中，都提到了pytest参数化。那么本文就趁着热乎，赶紧聊一聊pytest的参数化是怎么玩的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@pytest.mark.parametrize&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;@pytest.mark.parametrize(&quot;test_input,expected&quot;, [(&quot;3+5&quot;, 8), (&quot;2+4&quot;, 6), (&quot;6*9&quot;, 42)])
def test_eval(test_input, expected):
    assert eval(test_input) == expected
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;4&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;可以自定义变量，test_input对应的值是&quot;3+5&quot; &quot;2+4&quot; &quot;6*9&quot;，expected对应的值是8 6 42，&lt;strong&gt;多个变量用tuple，多个tuple用list&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;参数化的变量是引用而非复制，意味着如果值是list或dict，改变值会影响后续的test&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;重叠产生笛卡尔积&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;import pytest


@pytest.mark.parametrize(&quot;x&quot;, [0, 1])
@pytest.mark.parametrize(&quot;y&quot;, [2, 3])
def test_foo(x, y):
    pass
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;@pytest.fixture()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;@pytest.fixture(scope=&quot;module&quot;, params=[&quot;smtp.gmail.com&quot;, &quot;mail.python.org&quot;])
def smtp_connection(request):
    smtp_connection = smtplib.SMTP(request.param, 587, timeout=5)
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;只能使用request.param来引用&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;参数化生成的test带有ID，可以使用&lt;code&gt;-k&lt;/code&gt;来筛选执行。默认是根据&lt;code&gt;函数名[参数名]&lt;/code&gt;来的，可以使用ids来定义&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;// list
@pytest.fixture(params=[0, 1], ids=[&quot;spam&quot;, &quot;ham&quot;])
// function
@pytest.fixture(params=[0, 1], ids=idfn)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用&lt;code&gt;--collect-only&lt;/code&gt; 命令行参数可以看到生成的IDs。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;参数添加marker&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们知道了参数化后会生成多个tests，如果有些test需要marker，可以用pytest.param来添加&lt;/p&gt;
&lt;p&gt;marker方式&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of test_expectation.py
import pytest


@pytest.mark.parametrize(
    &quot;test_input,expected&quot;,
    [(&quot;3+5&quot;, 8), (&quot;2+4&quot;, 6), pytest.param(&quot;6*9&quot;, 42, marks=pytest.mark.xfail)],
)
def test_eval(test_input, expected):
    assert eval(test_input) == expected
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;fixture方式&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of test_fixture_marks.py
import pytest


@pytest.fixture(params=[0, 1, pytest.param(2, marks=pytest.mark.skip)])
def data_set(request):
    return request.param
def test_data(data_set):
    pass
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;pytest_generate_tests&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用来自定义参数化方案。使用到了hook，hook的知识我会写在《pytest hook》中，欢迎关注公众号dongfanger获取最新文章。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of conf.py


def pytest_generate_tests(metafunc):
    if &quot;test_input&quot; in metafunc.fixturenames:
        metafunc.parametrize(&quot;test_input&quot;, [0, 1])
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of test.py


def test(test_input):
    assert test_input == 0
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;定义在conftest.py文件中&lt;/li&gt;
&lt;li&gt;metafunc有5个属性，fixturenames，module，config，function，cls&lt;/li&gt;
&lt;li&gt;metafunc.parametrize() 用来实现参数化&lt;/li&gt;
&lt;li&gt;多个metafunc.parametrize() 的参数名不能重复，否则会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在讲示例之前，先简单分享我的菜鸡行为。假设我们现在需要对50个接口测试，验证某一角色的用户访问这些接口会返回403。我的做法是，把接口请求全部参数化了，test函数里面只有断言，&lt;strong&gt;伪代码&lt;/strong&gt;大致如下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;def api():
    params = []
    def func():
        return request()
    params.append(func)
    ...


@pytest.mark.parametrize('req', api())
def test():
    res = req()
    assert res.status_code == 403
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样参数化以后，会产生&lt;strong&gt;50个tests&lt;/strong&gt;，如果断言失败了，会单独标记为failed，不影响其他test结果。咋一看还行，但是有个问题，在回归的时候，可能只需要验证其中部分接口，就没有办法灵活的调整，必须全部跑一遍才行。这是一个&lt;strong&gt;相对错误的示范&lt;/strong&gt;，至于正确的应该怎么写，相信每个人心中都有一个答案，能解决问题就是ok的。我想表达的是，&lt;strong&gt;参数化要适当，不要滥用，最好只对测试数据做参数化&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;本文的&lt;strong&gt;重点&lt;/strong&gt;来了，参数化的语法比较简单，实际应用是关键。这部分通过11个例子，来实践一下。&lt;strong&gt;示例覆盖的知识点有点多，建议留大段时间细看。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.使用hook添加命令行参数--all，&quot;param1&quot;是参数名，带--all参数时是range(5) == [0, 1, 2, 3, 4]，生成5个tests。不带参数时是range(2)。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of test_compute.py


def test_compute(param1):
    assert param1 &amp;lt; 4

&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of conftest.py


def pytest_addoption(parser):
    parser.addoption(&quot;--all&quot;, action=&quot;store_true&quot;, help=&quot;run all combinations&quot;)
def pytest_generate_tests(metafunc):
    if &quot;param1&quot; in metafunc.fixturenames:
        if metafunc.config.getoption(&quot;all&quot;):
            end = 5
        else:
            end = 2
        metafunc.parametrize(&quot;param1&quot;, range(end))

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.testdata是测试数据，包括2组。test_timedistance_v0不带ids。test_timedistance_v1带list格式的ids。test_timedistance_v2的ids为函数。test_timedistance_v3使用pytest.param同时定义测试数据和id。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of test_time.py
from datetime import datetime, timedelta

import pytest

testdata = [
    (datetime(2001, 12, 12), datetime(2001, 12, 11), timedelta(1)),
    (datetime(2001, 12, 11), datetime(2001, 12, 12), timedelta(-1)),
]


@pytest.mark.parametrize(&quot;a,b,expected&quot;, testdata)
def test_timedistance_v0(a, b, expected):
    diff = a - b
    assert diff == expected


@pytest.mark.parametrize(&quot;a,b,expected&quot;, testdata, ids=[&quot;forward&quot;, &quot;backward&quot;])
def test_timedistance_v1(a, b, expected):
    diff = a - b
    assert diff == expected


def idfn(val):
    if isinstance(val, (datetime,)):
        # note this wouldn't show any hours/minutes/seconds
        return val.strftime(&quot;%Y%m%d&quot;)


@pytest.mark.parametrize(&quot;a,b,expected&quot;, testdata, ids=idfn)
def test_timedistance_v2(a, b, expected):
    diff = a - b
    assert diff == expected


@pytest.mark.parametrize(
    &quot;a,b,expected&quot;,
    [
        pytest.param(
            datetime(2001, 12, 12), datetime(2001, 12, 11), timedelta(1), id=&quot;forward&quot;
        ),
        pytest.param(
            datetime(2001, 12, 11), datetime(2001, 12, 12), timedelta(-1), id=&quot;backward&quot;
        ),
    ],
)
def test_timedistance_v3(a, b, expected):
    diff = a - b
    assert diff == expected

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.兼容unittest的testscenarios&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of test_scenarios.py
def pytest_generate_tests(metafunc):
    idlist = []
    argvalues = []
    for scenario in metafunc.cls.scenarios:
        idlist.append(scenario[0])
        items = scenario[1].items()
        argnames = [x[0] for x in items]
        argvalues.append([x[1] for x in items])
    metafunc.parametrize(argnames, argvalues, ids=idlist, scope=&quot;class&quot;)


scenario1 = (&quot;basic&quot;, {&quot;attribute&quot;: &quot;value&quot;})
scenario2 = (&quot;advanced&quot;, {&quot;attribute&quot;: &quot;value2&quot;})


class TestSampleWithScenarios:
    scenarios = [scenario1, scenario2]

    def test_demo1(self, attribute):
        assert isinstance(attribute, str)

    def test_demo2(self, attribute):
        assert isinstance(attribute, str)

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4.初始化数据库连接&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of test_backends.py
import pytest


def test_db_initialized(db):
    # a dummy test
    if db.__class__.__name__ == &quot;DB2&quot;:
        pytest.fail(&quot;deliberately failing for demo purposes&quot;)

&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of conftest.py
import pytest


def pytest_generate_tests(metafunc):
    if &quot;db&quot; in metafunc.fixturenames:
        metafunc.parametrize(&quot;db&quot;, [&quot;d1&quot;, &quot;d2&quot;], indirect=True)


class DB1:
    &quot;one database object&quot;


class DB2:
    &quot;alternative database object&quot;


@pytest.fixture
def db(request):
    if request.param == &quot;d1&quot;:
        return DB1()
    elif request.param == &quot;d2&quot;:
        return DB2()
    else:
        raise ValueError(&quot;invalid internal test config&quot;)

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5.如果不加indirect=True，会生成2个test，fixt的值分别是&quot;a&quot;和&quot;b&quot;。如果加了indirect=True，会先执行fixture，fixt的值分别是&quot;aaa&quot;和&quot;bbb&quot;。indirect=True结合fixture可以在生成test前，对参数变量额外处理。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;import pytest


@pytest.fixture
def fixt(request):
    return request.param * 3


@pytest.mark.parametrize(&quot;fixt&quot;, [&quot;a&quot;, &quot;b&quot;], indirect=True)
def test_indirect(fixt):
    assert len(fixt) == 3

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6.多个参数时，indirect赋值list可以指定某些变量应用fixture，没有指定的保持原值。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of test_indirect_list.py
import pytest


@pytest.fixture(scope=&quot;function&quot;)
def x(request):
    return request.param * 3


@pytest.fixture(scope=&quot;function&quot;)
def y(request):
    return request.param * 2


@pytest.mark.parametrize(&quot;x, y&quot;, [(&quot;a&quot;, &quot;b&quot;)], indirect=[&quot;x&quot;])
def test_indirect(x, y):
    assert x == &quot;aaa&quot;
    assert y == &quot;b&quot;

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7.兼容unittest参数化&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of ./test_parametrize.py
import pytest


def pytest_generate_tests(metafunc):
    # called once per each test function
    funcarglist = metafunc.cls.params[metafunc.function.__name__]
    argnames = sorted(funcarglist[0])
    metafunc.parametrize(
        argnames, [[funcargs[name] for name in argnames] for funcargs in funcarglist]
    )


class TestClass:
    # a map specifying multiple argument sets for a test method
    params = {
        &quot;test_equals&quot;: [dict(a=1, b=2), dict(a=3, b=3)],
        &quot;test_zerodivision&quot;: [dict(a=1, b=0)],
    }

    def test_equals(self, a, b):
        assert a == b

    def test_zerodivision(self, a, b):
        with pytest.raises(ZeroDivisionError):
            a / b

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;8.在不同python解释器之间测试对象序列化。python1把对象pickle-dump到文件。python2从文件中pickle-load对象。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;
module containing a parametrized tests testing cross-python
serialization via the pickle module.
&quot;&quot;&quot;
import shutil
import subprocess
import textwrap

import pytest

pythonlist = [&quot;python3.5&quot;, &quot;python3.6&quot;, &quot;python3.7&quot;]


@pytest.fixture(params=pythonlist)
def python1(request, tmpdir):
    picklefile = tmpdir.join(&quot;data.pickle&quot;)
    return Python(request.param, picklefile)


@pytest.fixture(params=pythonlist)
def python2(request, python1):
    return Python(request.param, python1.picklefile)


class Python:
    def __init__(self, version, picklefile):
        self.pythonpath = shutil.which(version)
        if not self.pythonpath:
            pytest.skip(&quot;{!r} not found&quot;.format(version))
        self.picklefile = picklefile

    def dumps(self, obj):
        dumpfile = self.picklefile.dirpath(&quot;dump.py&quot;)
        dumpfile.write(
            textwrap.dedent(
                r&quot;&quot;&quot;
                import pickle
                f = open({!r}, 'wb')
                s = pickle.dump({!r}, f, protocol=2)
                f.close()
                &quot;&quot;&quot;.format(
                    str(self.picklefile), obj
                )
            )
        )
        subprocess.check_call((self.pythonpath, str(dumpfile)))

    def load_and_is_true(self, expression):
        loadfile = self.picklefile.dirpath(&quot;load.py&quot;)
        loadfile.write(
            textwrap.dedent(
                r&quot;&quot;&quot;
                import pickle
                f = open({!r}, 'rb')
                obj = pickle.load(f)
                f.close()
                res = eval({!r})
                if not res:
                raise SystemExit(1)
                &quot;&quot;&quot;.format(
                    str(self.picklefile), expression
                )
            )
        )
        print(loadfile)
        subprocess.check_call((self.pythonpath, str(loadfile)))


@pytest.mark.parametrize(&quot;obj&quot;, [42, {}, {1: 3}])
def test_basic_objects(python1, python2, obj):
    python1.dumps(obj)
    python2.load_and_is_true(&quot;obj == {}&quot;.format(obj))

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;9.假设有个API，basemod是原始版本，optmod是优化版本，验证二者结果一致。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of conftest.py
import pytest


@pytest.fixture(scope=&quot;session&quot;)
def basemod(request):
    return pytest.importorskip(&quot;base&quot;)


@pytest.fixture(scope=&quot;session&quot;, params=[&quot;opt1&quot;, &quot;opt2&quot;])
def optmod(request):
    return pytest.importorskip(request.param)

&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of base.py


def func1():
    return 1
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of opt1.py


def func1():
    return 1.0001
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of test_module.py
def test_func1(basemod, optmod):
    assert round(basemod.func1(), 3) == round(optmod.func1(), 3)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;10.使用pytest.param添加marker和id。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# content of test_pytest_param_example.py
import pytest


@pytest.mark.parametrize(
    &quot;test_input,expected&quot;,
    [
        (&quot;3+5&quot;, 8),
        pytest.param(&quot;1+7&quot;, 8, marks=pytest.mark.basic),
        pytest.param(&quot;2+4&quot;, 6, marks=pytest.mark.basic, id=&quot;basic_2+4&quot;),
        pytest.param(
            &quot;6*9&quot;, 42, marks=[pytest.mark.basic, pytest.mark.xfail], id=&quot;basic_6*9&quot;
        ),
    ],
)
def test_eval(test_input, expected):
    assert eval(test_input) == expected

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;11.使用pytest.raises让部分test抛出Error。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;from contextlib import contextmanager

import pytest


// 3.7+ from contextlib import nullcontext as does_not_raise
@contextmanager
def does_not_raise():
    yield


@pytest.mark.parametrize(
    &quot;example_input,expectation&quot;,
    [
        (3, does_not_raise()),
        (2, does_not_raise()),
        (1, does_not_raise()),
        (0, pytest.raises(ZeroDivisionError)),
    ],
)
def test_division(example_input, expectation):
    &quot;&quot;&quot;Test how much I know division.&quot;&quot;&quot;
    with expectation:
        assert (6 / example_input) is not None

&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;本文先讲了参数化的语法，包括marker，fixture，hook方式，以及如何给参数添加marker，然后重点列举了几个实战示例。参数化用好了能节省编码，达到事半功倍的效果。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;参考资料&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;docs-pytest-org-en-stable&lt;/p&gt;
&lt;p&gt;JMeter4种参数化方式，请阅读公众号《三道题加油站 (2)》&lt;/p&gt;
</description>
<pubDate>Wed, 23 Sep 2020 14:24:00 +0000</pubDate>
<dc:creator>dongfanger</dc:creator>
<og:description>让pytest飞扬起来。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/df888/p/13721501.html</dc:identifier>
</item>
<item>
<title>什么是裸金属 - DavyCloud</title>
<link>http://www.cnblogs.com/davyyy/p/13721439.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/davyyy/p/13721439.html</guid>
<description>&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;什么是裸金属&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;裸金属，是英文 &lt;strong&gt;Bare Metal&lt;/strong&gt; 的直译，其实也是可以叫 &lt;strong&gt;Bare Machine&lt;/strong&gt; 的，可能大家觉得 Metal 听起来更酷一点，所以都爱这么叫。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果说裸金属听起来有点懵逼，那么说裸机大家都很好理解了，就是指&lt;strong&gt;没有操作系统的计算机硬件&lt;/strong&gt;。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家伙平时在说起服务器（Server）的时候，大多数默认有一个操作系统，比如 “我有一台高性能 Linux 服务器”；还有少部分情况我们指的是品牌或者硬件配置，例如 “公司刚买了一批 Dell 服务器”。为了有所区分，对于后者，我们日常中更常见的说法是机器（Machine）。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Machine 就可以了，为啥要多出一个 Bare ？&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据 wiki 的解释，裸金属是指可以不经过操作系统干预的情况下，直接在逻辑硬件上执行指令。&lt;/p&gt;
&lt;blockquote data-tool=&quot;mdnice编辑器&quot; readability=&quot;5.9565217391304&quot;&gt;
&lt;p&gt;In computer science, &lt;strong&gt;bare machine&lt;/strong&gt; (or &lt;strong&gt;bare metal&lt;/strong&gt;) refers to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer&quot;&gt;computer&lt;/a&gt; executing instructions directly on logic hardware without an intervening &lt;a href=&quot;https://en.wikipedia.org/wiki/Operating_system&quot;&gt;operating system&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Bare，正是强调了直面硬件，中间并无遮拦，裸裎相见。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;为什么裸金属在云上流行&lt;/span&gt;&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大约从 2017 年开始，裸金属逐渐成为了云平台的标配，大大小小的云计算厂商基本都提供了裸金属服务。&lt;/p&gt;
&lt;img src=&quot;https://img-cloud-yy.oss-cn-shanghai.aliyuncs.com/pic/%E4%BA%91%E5%8E%82%E5%95%86%E7%9A%84%E8%A3%B8%E9%87%91%E5%B1%9E.png&quot; alt=&quot;云厂商的裸金属服务&quot;/&gt;云厂商的裸金属服务
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常见的疑问有两个：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在虚拟化，容器化的大趋势下，为什么我们还需要裸金属？它和主流云服务器（虚拟机）有何优势呢？&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相较于传统的 IDC 方式托管物理服务器，云上的裸金属又有哪些不同和优势呢？&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事实上就是要理清楚&lt;strong&gt;裸金属&lt;/strong&gt;、&lt;strong&gt;虚拟机&lt;/strong&gt;和&lt;strong&gt;物理机&lt;/strong&gt;它们之间的区别和特点。&lt;/p&gt;
&lt;img src=&quot;https://img-cloud-yy.oss-cn-shanghai.aliyuncs.com/pic/image-20200920115818039.png&quot; alt=&quot;裸金属和虚机物理机的关系&quot;/&gt;裸金属和虚机物理机的关系
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;裸金属的特点和优势&lt;/span&gt;&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里直接借用阿里云裸金属产品页的特性介绍，主要包括 4 个方面：&lt;/p&gt;
&lt;img src=&quot;https://img-cloud-yy.oss-cn-shanghai.aliyuncs.com/pic/image-20200622130600407.png&quot; alt=&quot;裸金属的优势&quot;/&gt;裸金属的优势
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;安全方面&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;裸金属服务器具有安全物理隔离的特性，裸金属服务器与其他租户物理隔离。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对安全性要求比较高的用户，例如金融类用户，他们对服务器的安全合规是有硬性要求的，裸金属服务器具有物理机级别的隔离。&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;性能方面&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;裸金属资源完全独占，完全没有性能损耗，能够胜任高 IO 应用、高性能计算等业务，例如海量数据采集和挖掘，高性能数据库，大型在线游戏等。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;特别的，裸金属服务器还可以支持虚拟化，用户可以在裸金属上搭建自己的虚拟化平台，打造独占的私有云或容器云，实现「在公有云上搭建专有云」这样灵活的架构。&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;弹性和自动化&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了裸金属的固有特性，裸金属云完全继承了虚拟化云服务器的 &lt;strong&gt;云&lt;/strong&gt; 特性，例如，快速交付，弹性伸缩等，并且整个过程都是自动化管理。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;唯一的差距在于相对于虚机和容器的秒级响应，裸金属是分钟级别的响应。&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;兼容其它云产品&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;裸金属作为云中居民，可以和其它云产品如云主机、云网络、云存储、云数据库直接打通，方便业务使用，构建更加灵活的整体架构和方案。&lt;/p&gt;
&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;总结&lt;/span&gt;&lt;/h3&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面的内容可以看出：&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;裸金属的前两个优势是相对虚拟机的，相对于虚机，裸金属体现出了物理机的特性；&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后两个优势是相对传统物理机的，相对于物理机，裸金属又能体现虚拟机弹性的特点。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此综合来说，裸金属汲取了两家之长，受到重视也就不足为怪了。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;裸金属和容器&lt;/span&gt;&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;裸金属虽然性能优越又兼具弹性，但是要独占硬件，而且主流的厂商的销售方案基本都是包月，没有像虚机那样可以按使用量收费，达到按秒计费。所以价格昂贵，不是一般用户能消费的起。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，裸金属可以以另一种方式为更广大的用户提供计算服务，那就是容器。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;容器发展之初，正是虚拟机主打的云计算热门之时，彼时的常见做法是在虚机上启动容器。随着技术的发展，特别是以 Kubernetes 为主的容器编排系统面世之后，人们发现在裸金属上运行容器更加自然。不仅性能更好，而且不用额外管理复杂的虚机化层。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Gartner 曾在 2015 年 9 月发布过一个咨询报告，标题是《Market Trends: The Rise of Bare-Metal Cloud and Containers》，认为未来的云计算基础设施，可能是裸金属+容器的趋势。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇报告里预测，未来的市场会向两级分化：&lt;/p&gt;
&lt;ul data-tool=&quot;mdnice编辑器&quot;&gt;&lt;li&gt;
&lt;section&gt;互联网开发者的市场，追求速度、敏捷和可移植性 —— 选择容器。&lt;/section&gt;&lt;/li&gt;
&lt;li&gt;
&lt;section&gt;企业应用市场，仍然希望使用可靠、安全的环境 —— 选择裸金属。&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是得出这样的结论，裸金属 + 容器才是最好的组合。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天看来这个预测还是靠谱的，阿里云和华为云在今年都发布了裸金属容器产品，非常值得关注。&lt;/p&gt;
&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;content&quot;&gt;裸金属的技术实现&lt;/span&gt;&lt;/h2&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;裸金属的技术实现通常需要硬件上的配合，目前只有一些头部大厂有实力做到，例如阿里云的神龙架构。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没有足够研发实力的企业如果想要部署裸金属云，或者更加深入的了解一些技术细节，开源 IaaS 项目 OpenStack 当然是最佳选择。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Ironic 是 OpenStack 中实现裸金属服务的项目，它从 Icehouse 版本开始孵化，并在 Juno 版与 Nova 进行集成。在 Kilo 版开始正式的集成到 OpenStack 项目中来，通过 Nova 调用 Ironic 的 API 来实现对物理机资源的管理和控制。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随后的版本演进中，Ironic 逐渐成熟，并越来越凸显它重要的地位，频频出现在版本发布亮点中。&lt;/p&gt;
&lt;img src=&quot;https://img-cloud-yy.oss-cn-shanghai.aliyuncs.com/pic/image-20200920224917892.png&quot; alt=&quot;Newton版本的OpenStack&quot;/&gt;Newton版本的OpenStack
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Newton 版本的发布标题中，裸金属第一次站在虚拟化和容器中间出镜，旨在宣言 OpenStack 是一个一体化的平台。&lt;/p&gt;
&lt;img src=&quot;https://img-cloud-yy.oss-cn-shanghai.aliyuncs.com/pic/image-20200920224807887.png&quot; alt=&quot;Rocky版本的OpenStack&quot;/&gt;Rocky版本的OpenStack
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到 Rocky 版本，裸金属已经作为标题主打，并且用到的说法是 focuses on，其在基础设施层的重要性和热度已经不言而喻。&lt;/p&gt;
&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;特别有趣的是这个项目名字，让我不禁猜想，是不是在创立项目之初，大佬们已经预见了今日局面呢？干了这么多年的虚拟化，没想到最终反过来要去革虚拟化的命。&lt;/p&gt;
&lt;img src=&quot;https://img-cloud-yy.oss-cn-shanghai.aliyuncs.com/pic/image-20200622131725359.png&quot; alt=&quot;ironic这个名字真的很赞&quot;/&gt;ironic这个名字真的很赞
&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文首发「云计算实验室」公众号，持续分享云计算相关技术实践和知识资讯。&lt;/p&gt;
&lt;p id=&quot;nice-suffix-juejin-container&quot; class=&quot;nice-suffix-juejin-container&quot; data-tool=&quot;mdnice编辑器&quot;&gt;本文使用 &lt;a href=&quot;https://mdnice.com/?from=juejin&quot;&gt;mdnice&lt;/a&gt; 排版&lt;/p&gt;
</description>
<pubDate>Wed, 23 Sep 2020 14:15:00 +0000</pubDate>
<dc:creator>DavyCloud</dc:creator>
<og:description>什么是裸金属 裸金属，是英文 Bare Metal 的直译，其实也是可以叫 Bare Machine 的，可能大家觉得 Metal 听起来更酷一点，所以都爱这么叫。 如果说裸金属听起来有点懵逼，那么说</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/davyyy/p/13721439.html</dc:identifier>
</item>
<item>
<title>为什么我们需要从全拼到双拼 - huiyuanai709</title>
<link>http://www.cnblogs.com/huiyuanai709/p/full_pinyin_to_double_pinyin.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huiyuanai709/p/full_pinyin_to_double_pinyin.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;什么是双拼, 什么是全拼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;汉字拼音大多是声母加韵母的形式构成, 少部分是纯韵母, 全拼方案是键入拼音的每一个字母, 就像英文一样, 无视声母和韵母的存在&lt;br/&gt;双拼方案则是单声母键位保持不变, 双声母zh,sh等和韵母安排到特定的键位上. 对于部分纯韵母的拼音, 不同的双拼方案采取的措施也不尽相同, 以我常用的微软双拼方案为例, 是由字母O键 + 对应韵母的按键组成&lt;/p&gt;
&lt;h3 id=&quot;为什么我们需要学习双拼&quot;&gt;为什么我们需要学习双拼&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;得益于九年义务制教育, 声母和韵母的记忆烂熟于心, 因此学习曲线较为平缓, 没有五笔那么难&lt;/li&gt;
&lt;li&gt;对二指禅友好, 双拼方案对任意汉字拼音都可以在最多2个键位完成, 能有效提升打字效率&lt;/li&gt;
&lt;li&gt;传统全拼方案输入繁琐, 容易使人产生厌烦情绪&lt;/li&gt;
&lt;li&gt;由不具名(我)专(自)家(己)实践发现, 双拼能有效提高输入的兴趣, 能多写很多注释, 文档, 基本不会感觉到厌烦&lt;/li&gt;
&lt;li&gt;有效提高云贵川普通话能力, 典型的前后鼻音 in, ing 不开模糊拼音以后就知道该怎么读了&lt;/li&gt;
&lt;li&gt;双拼能更好的利用现在的词库优势&lt;/li&gt;
&lt;li&gt;全平台支持, 不管是 windows/linux/android/ios&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;怎么学习双拼&quot;&gt;怎么学习双拼&lt;/h3&gt;
&lt;ol readability=&quot;6&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;下载双拼方案图, 这里以微软双拼为例, 不同的双拼方案还是有一定区别&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1273724/202009/1273724-20200923210651025-310967366.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;百度一篇古文, 岳阳楼记, 滕王阁序, 出师表等&lt;br/&gt;&lt;em&gt;先天下之忧而忧, 后天下之乐而乐&lt;/em&gt;&lt;br/&gt;&lt;em&gt;落霞与孤鹜齐飞, 秋水共长天一色&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;双拼设置, 很简单 将全拼(Full pinyin)改成双拼(Double pinyin)就好&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1273724/202009/1273724-20200923214003816-1501826474.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;对着图和古文, 敲一遍就好了&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;一点感想&quot;&gt;一点感想&lt;/h3&gt;
&lt;p&gt;最早知道双拼还是在V2EX上的一篇帖子, 直到现在我见过的用的人还比较少, 每次同事一敲我的键盘总是会一脸懵逼, 自从知道双拼起, 就感觉这才是正确的拼音方式, 全拼那种完全是给外国人用的&lt;br/&gt;也陆陆续续的安利给一些人, 但很少有能坚持下来的 (习惯真的可怕)&lt;br/&gt;就我自己而言双拼打字的感觉是令人愉悦的, 很多时候我都选择做一个 OCR(识别然后打字) 而不是 CV 程序员, 而且代码注释是多了很多, 因此有想团队成员多写注释的也可以安利下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1273724/202009/1273724-20200923215459555-765179395.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 23 Sep 2020 14:02:00 +0000</pubDate>
<dc:creator>huiyuanai709</dc:creator>
<og:description>什么是双拼, 什么是全拼 汉字拼音大多是声母加韵母的形式构成, 少部分是纯韵母, 全拼方案是键入拼音的每一个字母, 就像英文一样, 无视声母和韵母的存在 双拼方案则是单声母键位保持不变, 双声母zh,</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/huiyuanai709/p/full_pinyin_to_double_pinyin.html</dc:identifier>
</item>
<item>
<title>Kubernetes K8S之Ingress详解与示例 - 踏歌行666</title>
<link>http://www.cnblogs.com/zhanglianghhh/p/13721288.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhanglianghhh/p/13721288.html</guid>
<description>
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;K8S之Ingress概述与说明，并详解Ingress常用示例&lt;/p&gt;
&lt;/blockquote&gt;


&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;服务器名称(hostname)&lt;/th&gt;
&lt;th&gt;系统版本&lt;/th&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;内网IP&lt;/th&gt;
&lt;th&gt;外网IP(模拟)&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;k8s-master&lt;/td&gt;
&lt;td&gt;CentOS7.7&lt;/td&gt;
&lt;td&gt;2C/4G/20G&lt;/td&gt;
&lt;td&gt;172.16.1.110&lt;/td&gt;
&lt;td&gt;10.0.0.110&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node01&lt;/td&gt;
&lt;td&gt;CentOS7.7&lt;/td&gt;
&lt;td&gt;2C/4G/20G&lt;/td&gt;
&lt;td&gt;172.16.1.111&lt;/td&gt;
&lt;td&gt;10.0.0.111&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node02&lt;/td&gt;
&lt;td&gt;CentOS7.7&lt;/td&gt;
&lt;td&gt;2C/4G/20G&lt;/td&gt;
&lt;td&gt;172.16.1.112&lt;/td&gt;
&lt;td&gt;10.0.0.112&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Ingress 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP和HTTPS。&lt;/p&gt;
&lt;p&gt;Ingress 可以提供负载均衡、SSL 和基于名称的虚拟托管。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;必须具有 ingress 控制器【例如 ingress-nginx】才能满足 Ingress 的要求。仅创建 Ingress 资源无效。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;Ingress-是什么&quot;&gt;Ingress 是什么&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Ingress 公开了从集群外部到集群内 services 的 HTTP 和 HTTPS 路由。 流量路由由 Ingress 资源上定义的规则控制。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt; internet
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;      |
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;[ Ingress ]
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; --|-----|--
&lt;span&gt;5&lt;/span&gt; [ Services ]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可以将 Ingress 配置为&lt;span&gt;提供服务外部可访问的 URL、负载均衡流量、 SSL / TLS，以及提供基于名称的虚拟主机&lt;/span&gt;。Ingress 控制器 通常负责通过负载均衡器来实现 Ingress，尽管它也可以配置边缘路由器或其他前端来帮助处理流量。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Ingress 不会公开任意端口或协议。若将 HTTP 和 HTTPS 以外的服务公开到 Internet 时，通常使用 Service.Type=NodePort 或者 Service.Type=LoadBalancer 类型的服务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;以Nginx Ingress为例，图如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202009/1395193-20200923212751953-1504280368.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202009/1395193-20200923212805642-433152881.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;h2 id=&quot;架构图&quot;&gt;架构图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202009/1395193-20200923212820372-429939181.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;部署Ingress-Nginx&quot;&gt;部署Ingress-Nginx&lt;/h2&gt;
&lt;p&gt;该Nginx是经过改造的，而不是传统的Nginx。&lt;/p&gt;
&lt;p&gt;Ingress-Nginx官网地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;kubernetes.github.io/ingress-nginx/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ingress-Nginx GitHub地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/kubernetes/ingress-nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;本次下载版本：nginx-0.30.0&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202009/1395193-20200923212905808-2085269317.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;镜像下载与重命名&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; docker pull registry.cn-beijing.aliyuncs.com/google_registry/nginx-ingress-controller:&lt;span&gt;0.30&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; docker tag 89ccad40ce8e quay.io/kubernetes-ingress-controller/nginx-ingress-controller:&lt;span&gt;0.30&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; docker rmi  registry.cn-beijing.aliyuncs.com/google_registry/nginx-ingress-controller:&lt;span&gt;0.30&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ingress-nginx的yaml文件修改后并启动&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;# 当前目录
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; /root/k8s_practice/&lt;span&gt;ingress
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; # 获取NGINX: &lt;span&gt;0.30&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;wget&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/kubernetes/ingress-nginx/archive/nginx-0.30.0.tar.gz&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;tar&lt;/span&gt; xf nginx-&lt;span&gt;0.30&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;.gz
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; # yaml文件在下载包中的位置：ingress-nginx-nginx-&lt;span&gt;0.30&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;/deploy/static/&lt;span&gt;mandatory.yaml
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;cp&lt;/span&gt; -a ingress-nginx-nginx-&lt;span&gt;0.30&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;/deploy/static/mandatory.yaml ./
&lt;span&gt; 9&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;# yaml文件配置修改
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# vim mandatory.yaml
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;………………
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; apiVersion: apps/&lt;span&gt;v1
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;kind: DaemonSet   # 从Deployment改为DaemonSet
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;   name: nginx-ingress-&lt;span&gt;controller
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;   namespace: ingress-&lt;span&gt;nginx
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;  labels:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     app.kubernetes.io/name: ingress-&lt;span&gt;nginx
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     app.kubernetes.io/part-of: ingress-&lt;span&gt;nginx
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;   #replicas: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;   # 注释掉
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;………………
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;      nodeSelector:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         kubernetes.io/&lt;span&gt;hostname&lt;/span&gt;: k8s-&lt;span&gt;master   # 修改处
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;      # 如下几行为新加行  作用【允许在master节点运行】
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;      tolerations:
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;       - key: node-role.kubernetes.io/&lt;span&gt;master
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        effect: NoSchedule
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;………………
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;          ports:
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             -&lt;span&gt; name: http
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;               containerPort: &lt;span&gt;80&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;               hostPort: &lt;span&gt;80&lt;/span&gt;&lt;span&gt;    # 添加处【可在宿主机通过该端口访问Pod】
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;              protocol: TCP
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             -&lt;span&gt; name: https
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;               containerPort: &lt;span&gt;443&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;               hostPort: &lt;span&gt;443&lt;/span&gt;&lt;span&gt;   # 添加处【可在宿主机通过该端口访问Pod】
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;              protocol: TCP
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;………………
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; [root@k8s-master ingress]# kubectl apply -&lt;span&gt;f mandatory.yaml
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; namespace/ingress-&lt;span&gt;nginx created
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; configmap/nginx-&lt;span&gt;configuration created
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; configmap/tcp-&lt;span&gt;services created
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; configmap/udp-&lt;span&gt;services created
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; serviceaccount/nginx-ingress-&lt;span&gt;serviceaccount created
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; clusterrole.rbac.authorization.k8s.io/nginx-ingress-&lt;span&gt;clusterrole created
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; role.rbac.authorization.k8s.io/nginx-ingress-&lt;span&gt;role created
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; rolebinding.rbac.authorization.k8s.io/nginx-ingress-role-nisa-&lt;span&gt;binding created
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; clusterrolebinding.rbac.authorization.k8s.io/nginx-ingress-clusterrole-nisa-&lt;span&gt;binding created
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; daemonset.apps/nginx-ingress-&lt;span&gt;controller created
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; limitrange/ingress-&lt;span&gt;nginx created
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; [root@k8s-master ingress]# kubectl get ds -n ingress-nginx -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; NAME                       DESIRED   CURRENT   READY   UP-TO-&lt;span&gt;DATE   AVAILABLE   NODE SELECTOR                       AGE     CONTAINERS                 IMAGES                                                                  SELECTOR
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; nginx-ingress-controller   &lt;span&gt;1&lt;/span&gt;         &lt;span&gt;1&lt;/span&gt;         &lt;span&gt;1&lt;/span&gt;       &lt;span&gt;1&lt;/span&gt;            &lt;span&gt;1&lt;/span&gt;           kubernetes.io/&lt;span&gt;hostname&lt;/span&gt;=k8s-master   9m47s   nginx-ingress-controller   quay.io/kubernetes-ingress-controller/nginx-ingress-controller:&lt;span&gt;0.30&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;   app.kubernetes.io/name=ingress-nginx,app.kubernetes.io/part-of=ingress-&lt;span&gt;nginx
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; [root@k8s-master ingress]# kubectl get pod -n ingress-nginx -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;NAME                             READY   STATUS    RESTARTS   AGE     IP            NODE         NOMINATED NODE   READINESS GATES
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; nginx-ingress-controller-rrbh9   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          9m55s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;0.46&lt;/span&gt;   k8s-master   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;deply-service1的yaml信息&quot;&gt;deply_service1的yaml信息&lt;/h2&gt;
&lt;p&gt;yaml文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/&lt;span&gt;ingress
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; deply_service1.yaml 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; apiVersion: apps/&lt;span&gt;v1
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;kind: Deployment
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   name: myapp-&lt;span&gt;deploy1
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;  namespace: default
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;   replicas: &lt;span&gt;3&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  selector:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    matchLabels:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;      app: myapp
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;      release: v1
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;  template:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    metadata:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;      labels:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        app: myapp
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        release: v1
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;env&lt;/span&gt;&lt;span&gt;: test
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    spec:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;      containers:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;       -&lt;span&gt; name: myapp
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         image: registry.cn-beijing.aliyuncs.com/google_registry/&lt;span&gt;myapp:v1
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        imagePullPolicy: IfNotPresent
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        ports:
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         -&lt;span&gt; name: http
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;           containerPort: &lt;span&gt;80&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; ---
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;kind: Service
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;   name: myapp-&lt;span&gt;clusterip1
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;  namespace: default
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;  type: ClusterIP  # 默认类型
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;  selector:
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    app: myapp
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    release: v1
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;  ports:
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;   -&lt;span&gt; name: http
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     port: &lt;span&gt;80&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;     targetPort: &lt;span&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动Deployment和Service&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@k8s-master ingress]# kubectl apply -&lt;span&gt;f deply_service1.yaml 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; deployment.apps/myapp-&lt;span&gt;deploy1 created
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; service/myapp-clusterip1 created
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;查看Deploy状态和信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master ingress]# kubectl get deploy -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; NAME            READY   UP-TO-&lt;span&gt;DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                                                      SELECTOR
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; myapp-deploy1   &lt;span&gt;3&lt;/span&gt;/&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;3&lt;/span&gt;            &lt;span&gt;3&lt;/span&gt;           28s   myapp        registry.cn-beijing.aliyuncs.com/google_registry/myapp:v1   app=myapp,release=&lt;span&gt;v1
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; [root@k8s-master ingress]# kubectl get rs -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;NAME                       DESIRED   CURRENT   READY   AGE   CONTAINERS   IMAGES                                                      SELECTOR
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; myapp-deploy1-5695bb5658   &lt;span&gt;3&lt;/span&gt;         &lt;span&gt;3&lt;/span&gt;         &lt;span&gt;3&lt;/span&gt;       30s   myapp        registry.cn-beijing.aliyuncs.com/google_registry/myapp:v1   app=myapp,pod-template-hash=5695bb5658,release=&lt;span&gt;v1
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; [root@k8s-master ingress]# kubectl get pod -o wide --show-&lt;span&gt;labels
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;NAME                             READY   STATUS    RESTARTS   AGE   IP             NODE         NOMINATED NODE   READINESS GATES   LABELS
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; myapp-deploy1-5695bb5658-n6548   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          36s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.144&lt;/span&gt;   k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;            app=myapp,&lt;span&gt;env&lt;/span&gt;=test,pod-template-hash=5695bb5658,release=&lt;span&gt;v1
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; myapp-deploy1-5695bb5658-rqcpb   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          36s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.143&lt;/span&gt;   k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;            app=myapp,&lt;span&gt;env&lt;/span&gt;=test,pod-template-hash=5695bb5658,release=&lt;span&gt;v1
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; myapp-deploy1-5695bb5658-vv6gm   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          36s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;3.200&lt;/span&gt;   k8s-node01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;            app=myapp,&lt;span&gt;env&lt;/span&gt;=test,pod-template-hash=5695bb5658,release=v1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;curl访问pod&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master ingress]# curl &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.144&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; Hello MyApp | Version: v1 | &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hostname.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Pod Name&amp;lt;/a&amp;gt;
&lt;span&gt; 3&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@k8s-master ingress]# curl &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.144&lt;/span&gt;/&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;.html
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; myapp-deploy1-5695bb5658-&lt;span&gt;n6548
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; [root@k8s-master ingress]# curl &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.143&lt;/span&gt;/&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;.html
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; myapp-deploy1-5695bb5658-&lt;span&gt;rqcpb
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; [root@k8s-master ingress]# curl &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;3.200&lt;/span&gt;/&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;.html
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; myapp-deploy1-5695bb5658-vv6gm
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;查看Service状态和信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@k8s-master ingress]# kubectl get svc -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; NAME               TYPE        CLUSTER-IP      EXTERNAL-&lt;span&gt;IP   PORT(S)   AGE     SELECTOR
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; kubernetes         ClusterIP   &lt;span&gt;10.96&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;       &amp;lt;none&amp;gt;        &lt;span&gt;443&lt;/span&gt;/TCP   19d     &amp;lt;none&amp;gt;
&lt;span&gt;4&lt;/span&gt; myapp-clusterip1   ClusterIP   &lt;span&gt;10.104&lt;/span&gt;.&lt;span&gt;146.14&lt;/span&gt;   &amp;lt;none&amp;gt;        &lt;span&gt;80&lt;/span&gt;/TCP    5m38s   app=myapp,release=v1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;curl访问svc&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master ingress]# curl &lt;span&gt;10.104&lt;/span&gt;.&lt;span&gt;146.14&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; Hello MyApp | Version: v1 | &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hostname.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Pod Name&amp;lt;/a&amp;gt;
&lt;span&gt; 3&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@k8s-master ingress]# curl &lt;span&gt;10.104&lt;/span&gt;.&lt;span&gt;146.14&lt;/span&gt;/&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;.html
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; myapp-deploy1-5695bb5658-&lt;span&gt;n6548
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; [root@k8s-master ingress]# curl &lt;span&gt;10.104&lt;/span&gt;.&lt;span&gt;146.14&lt;/span&gt;/&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;.html
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; myapp-deploy1-5695bb5658-&lt;span&gt;vv6gm
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; [root@k8s-master ingress]# curl &lt;span&gt;10.104&lt;/span&gt;.&lt;span&gt;146.14&lt;/span&gt;/&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;.html
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; myapp-deploy1-5695bb5658-rqcpb
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;deply-service2的yaml信息&quot;&gt;deply_service2的yaml信息&lt;/h2&gt;
&lt;p&gt;yaml文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/&lt;span&gt;ingress
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; deply_service2.yaml 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; apiVersion: apps/&lt;span&gt;v1
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;kind: Deployment
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   name: myapp-&lt;span&gt;deploy2
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;  namespace: default
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;   replicas: &lt;span&gt;3&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  selector:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    matchLabels:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;      app: myapp
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;      release: v2
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;  template:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    metadata:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;      labels:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        app: myapp
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        release: v2
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;env&lt;/span&gt;&lt;span&gt;: test
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    spec:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;      containers:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;       -&lt;span&gt; name: myapp
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         image: registry.cn-beijing.aliyuncs.com/google_registry/&lt;span&gt;myapp:v2
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        imagePullPolicy: IfNotPresent
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        ports:
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         -&lt;span&gt; name: http
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;           containerPort: &lt;span&gt;80&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; ---
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;kind: Service
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;   name: myapp-&lt;span&gt;clusterip2
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;  namespace: default
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;  type: ClusterIP  # 默认类型
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;  selector:
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    app: myapp
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    release: v2
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;  ports:
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;   -&lt;span&gt; name: http
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     port: &lt;span&gt;80&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;     targetPort: &lt;span&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动Deployment和Service&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@k8s-master ingress]# kubectl apply -&lt;span&gt;f deply_service2.yaml 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; deployment.apps/myapp-&lt;span&gt;deploy2 created
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; service/myapp-clusterip2 created
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;查看Deploy状态和信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master ingress]# kubectl get deploy myapp-deploy2 -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; NAME            READY   UP-TO-&lt;span&gt;DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                                                      SELECTOR
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; myapp-deploy2   &lt;span&gt;3&lt;/span&gt;/&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;3&lt;/span&gt;            &lt;span&gt;3&lt;/span&gt;           9s    myapp        registry.cn-beijing.aliyuncs.com/google_registry/myapp:v2   app=myapp,release=&lt;span&gt;v2
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; [root@k8s-master ingress]# kubectl get rs  -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;NAME                       DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES                                                      SELECTOR
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; myapp-deploy1-5695bb5658   &lt;span&gt;3&lt;/span&gt;         &lt;span&gt;3&lt;/span&gt;         &lt;span&gt;3&lt;/span&gt;       7m23s   myapp        registry.cn-beijing.aliyuncs.com/google_registry/myapp:v1   app=myapp,pod-template-hash=5695bb5658,release=&lt;span&gt;v1   # 之前创建的
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; myapp-deploy2-54f48f879b   &lt;span&gt;3&lt;/span&gt;         &lt;span&gt;3&lt;/span&gt;         &lt;span&gt;3&lt;/span&gt;       15s     myapp        registry.cn-beijing.aliyuncs.com/google_registry/myapp:v2   app=myapp,pod-template-hash=54f48f879b,release=&lt;span&gt;v2   # 当前deploy创建的
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; [root@k8s-master ingress]# kubectl get pod -o wide --show-labels -l &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;release=v2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;NAME                             READY   STATUS    RESTARTS   AGE   IP             NODE         NOMINATED NODE   READINESS GATES   LABELS
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; myapp-deploy2-54f48f879b-7pxwp   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          25s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;3.201&lt;/span&gt;   k8s-node01   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;            app=myapp,&lt;span&gt;env&lt;/span&gt;=test,pod-template-hash=54f48f879b,release=&lt;span&gt;v2
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; myapp-deploy2-54f48f879b-lqlh2   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          25s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.146&lt;/span&gt;   k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;            app=myapp,&lt;span&gt;env&lt;/span&gt;=test,pod-template-hash=54f48f879b,release=&lt;span&gt;v2
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; myapp-deploy2-54f48f879b-pfvnn   &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;          25s   &lt;span&gt;10.244&lt;/span&gt;.&lt;span&gt;2.145&lt;/span&gt;   k8s-node02   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;            app=myapp,&lt;span&gt;env&lt;/span&gt;=test,pod-template-hash=54f48f879b,release=v2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;查看Service状态和信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@k8s-master ingress]# kubectl get svc -&lt;span&gt;o wide  
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; NAME               TYPE        CLUSTER-IP      EXTERNAL-&lt;span&gt;IP   PORT(S)   AGE    SELECTOR
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; kubernetes         ClusterIP   &lt;span&gt;10.96&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;       &amp;lt;none&amp;gt;        &lt;span&gt;443&lt;/span&gt;/TCP   19d    &amp;lt;none&amp;gt;
&lt;span&gt;4&lt;/span&gt; myapp-clusterip1   ClusterIP   &lt;span&gt;10.104&lt;/span&gt;.&lt;span&gt;146.14&lt;/span&gt;   &amp;lt;none&amp;gt;        &lt;span&gt;80&lt;/span&gt;/TCP    8m9s   app=myapp,release=&lt;span&gt;v1
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; myapp-clusterip2   ClusterIP   &lt;span&gt;10.110&lt;/span&gt;.&lt;span&gt;181.62&lt;/span&gt;   &amp;lt;none&amp;gt;        &lt;span&gt;80&lt;/span&gt;/TCP    61s    app=myapp,release=v2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;curl访问svc&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master ingress]# curl &lt;span&gt;10.110&lt;/span&gt;.&lt;span&gt;181.62&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; Hello MyApp | Version: v2 | &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hostname.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Pod Name&amp;lt;/a&amp;gt;
&lt;span&gt; 3&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@k8s-master ingress]# curl &lt;span&gt;10.110&lt;/span&gt;.&lt;span&gt;181.62&lt;/span&gt;/&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;.html
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; myapp-deploy2-54f48f879b-&lt;span&gt;lqlh2
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; [root@k8s-master ingress]# curl &lt;span&gt;10.110&lt;/span&gt;.&lt;span&gt;181.62&lt;/span&gt;/&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;.html
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; myapp-deploy2-54f48f879b-&lt;span&gt;7pxwp
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; [root@k8s-master ingress]# curl &lt;span&gt;10.110&lt;/span&gt;.&lt;span&gt;181.62&lt;/span&gt;/&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;.html
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; myapp-deploy2-54f48f879b-pfvnn
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;Ingress-HTTP代理访问&quot;&gt;Ingress HTTP代理访问&lt;/h2&gt;
&lt;p&gt;yaml文件【由于自建的service在默认default名称空间，因此这里也是default名称空间】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/&lt;span&gt;ingress
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;cat&lt;/span&gt; ingress-&lt;span&gt;http.yaml
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; apiVersion: networking.k8s.io/&lt;span&gt;v1beta1
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;kind: Ingress
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   name: nginx-&lt;span&gt;http
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;  namespace: default
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  rules:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     -&lt;span&gt; host: www.zhangtest.com
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;      http:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        paths:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         - path: /
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;          backend:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             serviceName: myapp-&lt;span&gt;clusterip1
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             servicePort: &lt;span&gt;80&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     -&lt;span&gt; host: blog.zhangtest.com
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;      http:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        paths:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         - path: /
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;          backend:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             serviceName: myapp-&lt;span&gt;clusterip2
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             servicePort: &lt;span&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动ingress http并查看状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@k8s-master ingress]# kubectl apply -f ingress-&lt;span&gt;http.yaml 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; ingress.networking.k8s.io/nginx-&lt;span&gt;http created
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; [root@k8s-master ingress]# kubectl get ingress -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;NAME         HOSTS                                  ADDRESS   PORTS   AGE
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; nginx-http   www.zhangtest.com,blog.zhangtest.com             &lt;span&gt;80&lt;/span&gt;      9s
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;查看nginx配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@k8s-master ~]# kubectl get pod -A | &lt;span&gt;grep&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ingre&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; ingress-nginx          nginx-ingress-controller-rrbh9               &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;     Running   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;          27m
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; [root@k8s-master ~&lt;span&gt;]# 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; [root@k8s-master ~]# kubectl exec -it -n ingress-nginx nginx-ingress-controller-&lt;span&gt;rrbh9 bash
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; bash-&lt;span&gt;5.0&lt;/span&gt;$ &lt;span&gt;cat&lt;/span&gt; /etc/nginx/&lt;span&gt;nginx.conf
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;…………
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; ##### 可见server www.zhangtest.com 和 server blog.zhangtest.com的配置
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;浏览器访问&quot;&gt;浏览器访问&lt;/h3&gt;
&lt;p&gt;hosts文件修改，添加如下信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;文件位置：C:\WINDOWS\System32\drivers\etc\hosts
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;添加信息如下：
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;# K8S ingress学习
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.110&lt;/span&gt;  www.zhangtest.com  blog.zhangtest.com
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;浏览器访问&lt;a href=&quot;http://www.zhangtest.com/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;www.zhangtest.com&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.zhangtest.com/&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.zhangtest.com/hostname.html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202009/1395193-20200923213402277-142402959.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;浏览器访问blog.zhangtest.com&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;blog.zhangtest.com/&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;blog.zhangtest.com/hostname.html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202009/1395193-20200923213430406-1252674577.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当然：除了用浏览器访问外，也可以在Linux使用curl访问。前提是修改/etc/hosts文件，对上面的两个域名进行解析。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;Ingress-HTTPS代理访问&quot;&gt;Ingress HTTPS代理访问&lt;/h2&gt;
&lt;h3 id=&quot;SSL证书创建&quot;&gt;SSL证书创建&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master cert]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/ingress/&lt;span&gt;cert
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master cert]# openssl req -x509 -sha256 -nodes -days &lt;span&gt;365&lt;/span&gt; -newkey rsa:&lt;span&gt;2048&lt;/span&gt; -keyout tls.key -out tls.crt -subj &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/C=CN/ST=BJ/L=BeiJing/O=BTC/OU=MOST/CN=zhang/emailAddress=ca@test.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; Generating a &lt;span&gt;2048&lt;/span&gt;&lt;span&gt; bit RSA private key
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; ......................................................+++
&lt;span&gt; 6&lt;/span&gt; ........................+++
&lt;span&gt; 7&lt;/span&gt; writing new private key to &lt;span&gt;'&lt;/span&gt;&lt;span&gt;tls.key&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; -----
&lt;span&gt; 9&lt;/span&gt; [root@k8s-master cert]# kubectl create secret tls tls-secret --key tls.key --&lt;span&gt;cert tls.crt
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; secret/tls-secret created
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;创建ingress-https&quot;&gt;创建ingress https&lt;/h3&gt;
&lt;p&gt;yaml文件【由于自建的service在默认default名称空间，因此这里也是default名称空间】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/&lt;span&gt;ingress
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;cat&lt;/span&gt; ingress-&lt;span&gt;https.yaml 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; apiVersion: networking.k8s.io/&lt;span&gt;v1beta1
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;kind: Ingress
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   name: nginx-&lt;span&gt;https
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;  namespace: default
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  tls:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     -&lt;span&gt; hosts:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;       -&lt;span&gt; www.zhangtest.com
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;       -&lt;span&gt; blog.zhangtest.com
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;       secretName: tls-&lt;span&gt;secret
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;  rules:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     -&lt;span&gt; host: www.zhangtest.com
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;      http:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        paths:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         - path: /
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;          backend:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             serviceName: myapp-&lt;span&gt;clusterip1
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             servicePort: &lt;span&gt;80&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     -&lt;span&gt; host: blog.zhangtest.com
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;      http:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        paths:
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         - path: /
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;          backend:
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             serviceName: myapp-&lt;span&gt;clusterip2
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             servicePort: &lt;span&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动ingress https并查看状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@k8s-master ingress]# kubectl apply -f ingress-&lt;span&gt;https.yaml 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; ingress.networking.k8s.io/nginx-&lt;span&gt;https created
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; [root@k8s-master ingress]# kubectl get ingress -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;NAME          HOSTS                                  ADDRESS   PORTS     AGE
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; nginx-https   www.zhangtest.com,blog.zhangtest.com             &lt;span&gt;80&lt;/span&gt;, &lt;span&gt;443&lt;/span&gt;   8s
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;浏览器访问-1&quot;&gt;浏览器访问&lt;/h3&gt;
&lt;p&gt;hosts文件修改，添加如下信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;文件位置：C:\WINDOWS\System32\drivers\etc\hosts
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;添加信息如下：
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;# K8S ingress学习
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.110&lt;/span&gt;  www.zhangtest.com  blog.zhangtest.com
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;浏览器访问&lt;a href=&quot;http://www.zhangtest.com/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;www.zhangtest.com&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.zhangtest.com/&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.zhangtest.com/hostname.html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202009/1395193-20200923213604360-1004242733.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

&lt;p&gt;浏览器访问blog.zhangtest.com&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;blog.zhangtest.com/&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;blog.zhangtest.com/hostname.html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202009/1395193-20200923213630265-647749251.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt;官网地址：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;kubernetes.github.io/ingress-nginx/examples/auth/basic/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;准备工作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/&lt;span&gt;ingress
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; -&lt;span&gt;y httpd
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [root@k8s-master ingress]# htpasswd -&lt;span&gt;c auth foo
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;New password: #输入密码
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; Re-&lt;span&gt;type new password: #重复输入的密码
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; Adding password &lt;span&gt;for&lt;/span&gt;&lt;span&gt; user foo   ##### 此时会生成一个 auth文件
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; [root@k8s-master ingress]# kubectl create secret generic basic-auth --from-&lt;span&gt;file&lt;/span&gt;=&lt;span&gt;auth
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; secret/basic-&lt;span&gt;auth created
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; [root@k8s-master ingress]# kubectl get secret basic-auth -&lt;span&gt;o yaml
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;data:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;  auth: Zm9vOiRhcHIxJFpaSUJUMDZOJDVNZ3hxdkpFNWVRTi9NdnZCcVpHaC4K
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;kind: Secret
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;   creationTimestamp: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2020-08-17T09:42:04Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;   name: basic-&lt;span&gt;auth
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;  namespace: default
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;   resourceVersion: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;775573&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;   selfLink: /api/v1/namespaces/default/secrets/basic-&lt;span&gt;auth
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;   uid: eef0853b-a52b-&lt;span&gt;4684&lt;/span&gt;-922a-&lt;span&gt;817e4cd9e9ca
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; type: Opaque
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ingress yaml文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/&lt;span&gt;ingress
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; nginx_basicauth.yaml 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; apiVersion: networking.k8s.io/&lt;span&gt;v1beta1
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;kind: Ingress
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   name: ingress-with-&lt;span&gt;auth
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;  annotations:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    # type of authentication
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     nginx.ingress.kubernetes.io/auth-&lt;span&gt;type: basic
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     # name of the secret that contains the user/&lt;span&gt;password definitions
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     nginx.ingress.kubernetes.io/auth-secret: basic-&lt;span&gt;auth
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    # message to display with an appropriate context why the authentication is required
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     nginx.ingress.kubernetes.io/auth-realm: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Authentication Required - foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;  rules:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;   -&lt;span&gt; host: auth.zhangtest.com
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    http:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;      paths:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;       - path: /
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        backend:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;           serviceName: myapp-&lt;span&gt;clusterip1
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;           servicePort: &lt;span&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动ingress并查看状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@k8s-master ingress]# kubectl apply -&lt;span&gt;f nginx_basicauth.yaml 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; ingress.networking.k8s.io/ingress-with-&lt;span&gt;auth created
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; [root@k8s-master ingress]# kubectl get ingress -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;NAME                HOSTS                                  ADDRESS   PORTS     AGE
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; ingress-with-auth   auth.zhangtest.com                               &lt;span&gt;80&lt;/span&gt;        6s
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;浏览器访问-2&quot;&gt;浏览器访问&lt;/h2&gt;
&lt;p&gt;hosts文件修改，添加如下信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;文件位置：C:\WINDOWS\System32\drivers\etc\hosts
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;添加信息如下：
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;# K8S ingress学习
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.110&lt;/span&gt;  www.zhangtest.com  blog.zhangtest.com auth.zhangtest.com
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;浏览器访问auth.zhangtest.com&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;auth.zhangtest.com/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202009/1395193-20200923213803958-279999147.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;


&lt;p&gt;官网地址：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;kubernetes.github.io/ingress-nginx/examples/rewrite/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;重写可以使用以下&lt;span&gt;注解控制&lt;/span&gt;：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;10&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;nginx.ingress.kubernetes.io/rewrite-target&lt;/td&gt;
&lt;td&gt;必须重定向的目标URL&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;nginx.ingress.kubernetes.io/ssl-redirect&lt;/td&gt;
&lt;td&gt;指示位置部分是否只能由SSL访问(当Ingress包含证书时，默认为True)&lt;/td&gt;
&lt;td&gt;Bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;nginx.ingress.kubernetes.io/force-ssl-redirect&lt;/td&gt;
&lt;td&gt;即使Ingress没有启用TLS，也强制重定向到HTTPS&lt;/td&gt;
&lt;td&gt;Bool&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;nginx.ingress.kubernetes.io/app-root&lt;/td&gt;
&lt;td&gt;定义应用程序根目录，Controller在“/”上下文中必须重定向该根目录&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;nginx.ingress.kubernetes.io/use-regex&lt;/td&gt;
&lt;td&gt;指示Ingress上定义的路径是否使用正则表达式&lt;/td&gt;
&lt;td&gt;Bool&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;ingress yaml文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;pwd&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; /root/k8s_practice/&lt;span&gt;ingress
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; [root@k8s-master ingress]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; nginx_rewrite.yaml 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; apiVersion: networking.k8s.io/&lt;span&gt;v1beta1
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;kind: Ingress
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;metadata:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  annotations:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     nginx.ingress.kubernetes.io/rewrite-target: https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.baidu.com&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  name: rewrite
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  namespace: default
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;spec:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;  rules:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;   -&lt;span&gt; host: rewrite.zhangtest.com
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    http:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;      paths:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;       -&lt;span&gt; backend:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;           serviceName: myapp-&lt;span&gt;clusterip1
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;           servicePort: &lt;span&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动ingress并查看状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@k8s-master ingress]# kubectl apply -&lt;span&gt;f nginx_rewrite.yaml 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; ingress.networking.k8s.io/&lt;span&gt;rewrite created
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; [root@k8s-&lt;span&gt;master ingress]# 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; [root@k8s-master ingress]# kubectl get ingress -&lt;span&gt;o wide
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;NAME                HOSTS                   ADDRESS          PORTS     AGE
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; rewrite             rewrite.zhangtest.com                    &lt;span&gt;80&lt;/span&gt;        13s
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;浏览器访问-3&quot;&gt;浏览器访问&lt;/h2&gt;
&lt;p&gt;hosts文件修改，添加如下信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;文件位置：C:\WINDOWS\System32\drivers\etc\hosts
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;添加信息如下：
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;# K8S ingress学习
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.110&lt;/span&gt;  www.zhangtest.com  blog.zhangtest.com auth.zhangtest.com  rewrite.zhangtest.com
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;浏览器访问rewrite.zhangtest.com&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rewrite.zhangtest.com/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202009/1395193-20200923214020402-954120757.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之后，可见重定向到了&lt;a href=&quot;https://www.baidu.xn--com-vy2fl66hqi5b8tb/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://www.baidu.com 百度页面&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;1、&lt;a href=&quot;https://kubernetes.io/zh/docs/concepts/services-networking/ingress/&quot; target=&quot;_blank&quot;&gt;k8s 官方 Ingress&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;https://kubernetes.github.io/ingress-nginx/&quot; target=&quot;_blank&quot;&gt;Ingress-Nginx官网地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;a href=&quot;https://github.com/kubernetes/ingress-nginx&quot; target=&quot;_blank&quot;&gt;Ingress-Nginx GitHub地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;a href=&quot;https://kubernetes.github.io/ingress-nginx/examples/auth/basic/&quot; target=&quot;_blank&quot;&gt;Ingress-Nginx实现BasicAuth认证&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5、&lt;a href=&quot;https://kubernetes.github.io/ingress-nginx/examples/rewrite/&quot; target=&quot;_blank&quot;&gt;Ingress-Nginx实现Rewrite重写&lt;/a&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;———END———&lt;br/&gt;如果觉得不错就关注下呗 (-^O^-) ！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1395193/202009/1395193-20200923214138678-1723418619.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 23 Sep 2020 13:42:00 +0000</pubDate>
<dc:creator>踏歌行666</dc:creator>
<og:description>Kubernetes K8S之Ingress详解与示例</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/zhanglianghhh/p/13721288.html</dc:identifier>
</item>
</channel>
</rss>