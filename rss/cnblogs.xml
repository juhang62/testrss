<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>你会使用Go语言的TryCatch吗？ - 银河使者</title>
<link>http://www.cnblogs.com/nokiaguy/p/10891932.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nokiaguy/p/10891932.html</guid>
<description>&lt;p&gt;      有的同学看到Go和TryCatch一起出现，心里可能会说，难道Go语言升级了，加入了try...catch语句。哈哈，其实Go语言从创建之初就没打算加入try...catch语句，因为创建Go的那帮大爷认为try...catch挺烦人的，如果滥用，会造成程序混乱，所以就不打算加入try...catch（以后加不加入不好说）。&lt;/p&gt;
&lt;p&gt;      既然Go语言中并没有try...catch语句，那么为何文章标题说要使用TryCatch呢？其实Go语言中只是没有try...catch语句，并不是没有异常处理机制。Go语言中的异常处理机制就是著名的异常三剑客：panic、defer和recover。通过这3个家伙，是完全可以模拟出try...catch语句效果的，对了，后面还应该有个finally。在正式模拟try...catch语句之前，先来回顾下Go语言中的异常处理机制是如何玩的。&lt;/p&gt;
&lt;h2&gt;Go语言中的异常处理机制&lt;/h2&gt;
&lt;p&gt;在前面提到，Go语言通过panic、defer和recover来处理异常的，那么这3个东西是什么呢？&lt;/p&gt;
&lt;p&gt;不管是什么异常处理机制，核心的原理都是一样的，通常来讲，一个完善的异常处理机制需要由下面3部分组成。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;抛出异常&lt;/li&gt;
&lt;li&gt;处理异常的代码段&lt;/li&gt;
&lt;li&gt;获取异常信息&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面先用Java的异常处理机制来说明这一点。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
import java.io.IOException;

public class Main {

    public static void main(String[] args) {
        try
        {
            boolean ioException = false;
            if (ioException) {
                throw new IOException(&quot;ioexception&quot;);
            } else {
                throw new Exception(&quot;exception&quot;);
            }
        }
        catch (IOException e) {
            System.err.println(e);
        }
        catch (Exception e) {
            System.out.println(e);
        }
        finally
        {
            System.out.println(&quot;finally&quot;);
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;      上面的代码是标准的Java异常处理机制，try部分的throw用于抛出异常，而catch部分的代码段用于处理特定的异常，通过catch子句的参数e可以获取异常信息。所以对于Java来说，上述的3个异常重要的组成部分都有。&lt;/p&gt;
&lt;p&gt;      对于Go语言来说，panic、defer和recover也分别对应了这3部分。其中panic是一个函数，用于抛出异常，相当于Java中的throw函数。defer是一个关键字，用于修饰函数，用defer修饰的函数，在抛出异常时会自动调用。recover是一个函数，用于获取异常信息，通常在用defer修饰的函数中使用。&lt;/p&gt;
&lt;p&gt;     下面是一段用Go语言处理异常的代码。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:go;gutter:true;&quot;&gt;
package main

import &quot;fmt&quot;

func main(){
    //  处理异常的函数
    defer func(){
        fmt.Println(&quot;开始处理异常&quot;)
        // 获取异常信息
        if err:=recover();err!=nil{
            //  输出异常信息
            fmt.Println(&quot;error:&quot;,err)
        }
        fmt.Println(&quot;结束异常处理&quot;)
    }()
    exceptionFun()
}

func exceptionFun(){
    fmt.Println(&quot;exceptionFun开始执行&quot;)
    panic(&quot;异常信息&quot;)
    fmt.Println(&quot;exceptionFun执行结束&quot;)
}
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;实现Go版的TryCatch&lt;/h2&gt;
&lt;p&gt;现在已经了解了Go语言的异常处理机制，那么接下来使用异常处理机制来模拟try...catch...finally语句。&lt;/p&gt;
&lt;p&gt;现在来分析一下如果模拟。模拟的过程需要完成下面的工作。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;try、catch和finally这3部分都有各自的代码段，所以为了模拟try...catch...finally，需要用3个Go函数来分别模拟try、catch和finally部分的代码段。这3个Go函数是Try、Catch和Finally。&lt;/li&gt;
&lt;li&gt;要确定这3个函数在什么地方调用。Try是正常执行的代码，所以在要首先调用Try函数。而Catch函数只有在抛出异常时调用，所以应该在用defer修饰的函数中调用，而且需要在Catch函数中获取异常信息，所以应该在使用cover函数获取异常信息后再调用Catch函数，通常会将异常信息直接作为参数传递给Catch函数。不管是否抛出异常，Finally函数都必须调用，所以应该用defer修饰Finally函数，而且是第1个用defer修饰的函数。这样，在当前函数结束之前一定刚回调用Finally函数。&lt;/li&gt;
&lt;li&gt;触发异常，这就非常简单了，直接用panic函数即可。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面清楚地描述了用Go语言的异常处理机制模拟try...catch...finally语句的基本原理，下面给出完整的实现代码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:go;gutter:true;&quot;&gt;
package main
import (
&quot;fmt&quot;
)
type ExceptionStruct struct {
    Try     func()
    Catch   func(Exception)
    Finally func()
}
type Exception interface{}
func Throw(up Exception) {
    panic(up)
}
func (this ExceptionStruct) Do() {
    if this.Finally != nil {

        defer this.Finally()
    }
    if this.Catch != nil {
        defer func() {
            if e := recover(); e != nil {
                this.Catch(e)
            }
        }()
    }
    this.Try()
}

func main() {
    fmt.Println(&quot;开始执行...&quot;)
    ExceptionStruct{
        Try: func() {
            fmt.Println(&quot;try...&quot;)
            Throw(&quot;发生了错误&quot;)
        },
        Catch: func(e Exception) {
            fmt.Printf(&quot;exception %v\n&quot;, e)
        },
        Finally: func() {
            fmt.Println(&quot;Finally...&quot;)
        },
    }.Do()
    fmt.Println(&quot;结束运行&quot;)
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的代码将Try、Catch、Finally函数都封装在了ExceptionStruct结构体中。然后调用方式就与前面的描述的一致了。执行这段代码，会输出如下图的信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/32818/201905/32818-20190520070629049-1895400545.png&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;311&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;增强版的TryCatch&lt;/h2&gt;
&lt;p&gt;       到现在为止，其实已经完整地实现了try...catch...finally语句，但细心的同学会发现，这个实现有一点小问题。通常的try...catch...finally语句，try部分有且只有1个，finally部分是可选的，但最多只能有1个，而catch部分也是可选的，可以有0到n个，也就是catch部分可以有任意多个。但前面的实现，Catch函数只能指定一个，如果要指定任意多个应该如何做呢？其实很简单，用一个Catch函数集合保存所有指定的Catch函数即可。不过需要快速定位某一个Catch函数。在Java中，是通过异常类型（如IOException、Exception等）定位特定的catch子句的，我们也可以模拟这一过程，通过特定的异常来定位与该异常对应的Catch函数，为了方便，可以用int类型的异常代码。那么在调用Catch函数之前，就需要通过异常代码先定位到某一个Catch函数，然后再调用。下面就是完整的实现代码。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;46&quot;&gt;
&lt;pre class=&quot;brush:go;gutter:true;&quot;&gt;
package main

import (
    &quot;log&quot;
)

type Exception struct {
    Id int       // exception id
    Msg string   // exception msg
}

type TryStruct struct {
    catches map[int]ExceptionHandler
    try   func()
}

func Try(tryHandler func()) *TryStruct {
    tryStruct := TryStruct{
        catches: make(map[int]ExceptionHandler),
        try: tryHandler,
    }
    return &amp;amp;tryStruct
}


type ExceptionHandler func(Exception)

func (this *TryStruct) Catch(exceptionId int, catch func(Exception)) *TryStruct {
    this.catches[exceptionId] = catch
    return this
}

func (this *TryStruct) Finally(finally func()) {
    defer func() {
        if e := recover(); nil != e {

            exception := e.(Exception)

            if catch, ok := this.catches[exception.Id]; ok {            
                catch(exception)
            }
            
            finally()
        }
    }()
    
    this.try()
}

func Throw(id int, msg string) Exception {
    panic(Exception{id,msg})
}

func main() {

    exception.Try(func() {
        log.Println(&quot;try...&quot;)
               //  指定了异常代码为2，错误信息为error2
        exception.Throw(2,&quot;error2&quot;)
    }).Catch(1, func(e exception.Exception) {
        log.Println(e.Id,e.Msg)
    }).Catch(2, func(e exception.Exception) {
        log.Println(e.Id,e.Msg)
    }).Finally(func() {
        log.Println(&quot;finally&quot;)
    })
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　执行结果如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/32818/201905/32818-20190520070801992-880677746.png&quot; alt=&quot;&quot; width=&quot;716&quot; height=&quot;220&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这个实现与Java中的try...catch...finally的唯一区别就是必须要调用Finally函数，因为处理异常的代码都在Finally函数中。不过这并不影响使用，如果finally部分没什么需要处理的，那么就设置一个空函数即可。&lt;/p&gt;
&lt;p&gt;为了方便大家，我已经将该实现封装成了函数库，调用代码如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:go;gutter:true;&quot;&gt;
package main
import (
    &quot;exception&quot;
    &quot;log&quot;
)

func main() {

    exception.Try(func() {
        log.Println(&quot;try...&quot;)
        exception.Throw(2,&quot;error2&quot;)
    }).Catch(1, func(e exception.Exception) {
        log.Println(e.Id,e.Msg)
    }).Catch(2, func(e exception.Exception) {
        log.Println(e.Id,e.Msg)
    }).Finally(func() {
        log.Println(&quot;finally&quot;)
    })
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获得本文源代码，请关注”极客起源“或”欧瑞科技“公众号，并输入308178获得源代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/32818/201905/32818-20190520075819853-862092533.png&quot; alt=&quot;&quot; width=&quot;446&quot; height=&quot;547&quot;/&gt;&lt;/p&gt;



</description>
<pubDate>Sun, 19 May 2019 23:12:00 +0000</pubDate>
<dc:creator>银河使者</dc:creator>
<og:description>很多高级编程语言都有try...catch...finally或类似的语法，那么能不能Go语言中使用try...catch...finally呢？其实有时异常捕捉还是很有用的，就像swift语言在刚出</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nokiaguy/p/10891932.html</dc:identifier>
</item>
<item>
<title>520特篇：有一个人在默默的关注你 - 编程一生</title>
<link>http://www.cnblogs.com/xiexj/p/10891923.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiexj/p/10891923.html</guid>
<description>&lt;p&gt;也许有人会发出这样的感叹：找个合适的人太难了。其实有时候不是这样，有的人他们就在你身边，只是你没有看到。&lt;/p&gt;
&lt;p&gt;静儿在第一家公司的时候，我们同一届的同事经常举行各种活动。有次活动结束，我收到一条短信：“我叫XX，我在XX，我的爱好XX，我的联系方式是XX，很高兴认识大家。”我看了一眼这条貌似发给所有人的短信，心想这个人很爱交际，不是我的菜，然后就忘记了。&lt;/p&gt;
&lt;p&gt;静儿那时候每天比别人早起一个小时。因为就住在办公园区里，早上先去公司学习一会儿，再去吃早饭。有次吃早饭的时候，对面过来了上面提到的XX，跟他打了个照面。从此，每个工作日早上，同一时间同一地点都会跟他打个照面。我没往心里去，人家是这个点吃完饭，我就是这个点去吃饭，如此而已。&lt;/p&gt;
&lt;p&gt;有次公司里TB（团队建设，出去玩），我们去爬山。我自己边走边想着事情，不知不觉的走到了一个嵌在山崖边的大石头上。很高我下不来了，我就坐在石头上看着来往的人。很多很熟的同事走过，没有注意到我。那个XX又出现了，问我需不需要帮忙。我被他从石头上抱下来然后很随意的说了声谢谢就跑走了。&lt;/p&gt;
&lt;p&gt;过了段时间我去了日本出差，三个月后回来的第一天，收到他的电话，我没有接。当时觉得这是个很重要的电话，只是不是合适的时机。因为当时心里好多事情。&lt;/p&gt;
&lt;p&gt;然后我请了好长时间的假，到处旅行。相机的照片装不下了。我在QQ上问谁在。需要别人帮忙把照片传回去。因为正好他在线，我就一边把照片传给他，一边无意说了一句：端午节的时候可以一起出去玩。&lt;/p&gt;
&lt;p&gt;等我休完假回到公司，第一天他就找我说中午一起吃饭商量端午节一起出去玩的事情。我答应了。然后他就用这个借口每天中午和我一起吃饭。&lt;/p&gt;
&lt;p&gt;后来，我们熟了之后，我从他口中听到了我第一天上班，下了火车站上了公司的通勤车上时的穿戴。我听到了很多个周末，我以为自己是一个人在路上走时路过的地方。原来，我一直都不是一个人。&lt;/p&gt;
&lt;p&gt;再后来，他成了我老公，我才知道那条看似给所有人发的短信只有我一个人收到了。这就说的通了。因为那时候静儿还算是有人气，每次出去玩，周围很多人围着说话的，但是从来没有他。&lt;/p&gt;

&lt;p&gt;有些人明明就在你周围，只是你看不到。因为有可能不在同一个时间或者不在同一个空间。当有一天，你们都走到时空的交叉点。那个人就会突然出现在你面前。哦，原来你也在这里。&lt;/p&gt;
&lt;p&gt;不幸的是，除了时间和空间维度，还有一个维度也决定着对一个人的视而不见。这个维度叫“优秀”。当我遇见我老公的时候，我当时是公司里“传说中的人物”。而他并没有什么不好，只是略显普通。用词有点客气，实际上是很普通。&lt;/p&gt;
&lt;p&gt;我当初的决策过程是这样的：“我身上没有什么不好，我值得这世界上最好的东西。”而这世界上最好的东西是「真心」。我选择了真心，那剩下的就需要充分发挥自己的没有什么不好。我愿意和你一起去打拼我们的未来、我愿意包容你这么简单的道理也听不明白。我愿意把你的未来优先于自己，因为你就是我的未来。直到现在，我们携手并肩，一起往前走。&lt;/p&gt;
&lt;p&gt;我们刚在一起的时候，他提过很多次分手。他不是真的想分手，因为第一次提的时候他看到了我坚决的要和他在一起的表情。他发现无论谁对谁错，只要他提分手，我就服软。这一招太好使了。我每次都服软的理由很简单：心里上我是站在上风的。他想要在一起，但是内心深处有些许自卑。而更强大的一方应该是最需要低头的一方。&lt;/p&gt;
&lt;p&gt;结婚之后他也用离婚吓唬我。因为这一招太好使了。我花了大概4年的时间，除了照顾好我家小鲜肉，就是给他树立自信。终于有一天，我相信他自信心已经差不多了。我跟他说：离婚吧。他说好，带上小鲜肉，我们去吃最后的晚餐。吃完饭，他说带我们出去玩，决口不提离婚的事。并且以后再也没提过！&lt;/p&gt;
&lt;p&gt;后来我老用离婚吓唬他。并且写了很多张霸王条款。包括：“房子归我，一切都归我，你妈也归我，因为需要帮我照顾小鲜肉，我要上班。你收入的95%用来支付我的赡养费。”他都很干脆的签了字，说：“好的。只要在家里给我留个床位就行。”额，这叫哪门子离婚！&lt;/p&gt;
&lt;p&gt;之前我最想嫁的人是人猿泰山，因为在原始森林里，只有亚当夏娃，完全没有出轨的担心。后来发现自己多虑了，找个程序猿就可以了。虽然，他经常回家跟我说他的业绩，或者HR又评价他为颜值担当之类的。嗯，他算是比较优秀，我也没有什么不好，只是很普通。&lt;/p&gt;

&lt;p&gt;相关阅读&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484318&amp;amp;idx=1&amp;amp;sn=dae908f75fc3aebcec27f66547c35ddd&amp;amp;chksm=fafde930cd8a60263c71c50256124f2886f2e602791240a63324c3ad97f289ade39133ecc0f2&amp;amp;token=922475601&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;Kubernetes的DaemonSet（下篇）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484024&amp;amp;idx=1&amp;amp;sn=8ae8392eec5bad3effde01ead299e461&amp;amp;chksm=fafde8d6cd8a61c05d70ee38343f20d872d0213de2355e079973a3e61658d0d4d6fd0eff565a&amp;amp;token=1462278619&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;从技术渣到被要求改行到硅谷程序媛&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247483681&amp;amp;idx=1&amp;amp;sn=338890cb9f25abb05aa35fb7914a7b3b&amp;amp;chksm=fafdeb8fcd8a62998afded59df333fb7fb0f8d9670013d551afbf0bd4dbbe37a45014440fff6&amp;amp;token=1462278619&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;为什么要持续重构&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247483895&amp;amp;idx=2&amp;amp;sn=545e5fac19f1506779ab0f795f4ab365&amp;amp;chksm=fafdeb59cd8a624f002023af92b2b4d02af12c4fa7d85eedb490b544bcdb9c19f81af7eef061&amp;amp;token=1462278619&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;跑题时间：恭喜你，你赢了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247483895&amp;amp;idx=1&amp;amp;sn=729e25a6c995ad5eb969be5eb39cc432&amp;amp;chksm=fafdeb59cd8a624f1ff05227b938533aeac48de9e07749d220ad62bbe9ab24594423591812f6&amp;amp;token=1462278619&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;漫画：全面理解java.lang.IllegalArgumentException及其可用性设计&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247483841&amp;amp;idx=1&amp;amp;sn=c236d6829a2cce8ad56236bf75085bbf&amp;amp;chksm=fafdeb6fcd8a62794646fd34a37c0532c92bba41d7664badc4db18162b141d0c8285e5d29a52&amp;amp;token=1462278619&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;《两地书》--K8s基础知识&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484014&amp;amp;idx=1&amp;amp;sn=f7d86fd284ea13f0ab21de023e95ca1a&amp;amp;chksm=fafde8c0cd8a61d65528020765fca70a5e01198b3e0d3a8621b9d72cea531d518f5188ba643a&amp;amp;token=1462278619&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;JAVA日志的前世今生&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 19 May 2019 22:37:00 +0000</pubDate>
<dc:creator>编程一生</dc:creator>
<og:description>也许有人会发出这样的感叹：找个合适的人太难了。其实有时候不是这样，有的人他们就在你身边，只是你没有看到。 静儿在第一家公司的时候，我们同一届的同事经常举行各种活动。有次活动结束，我收到一条短信：“我叫</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiexj/p/10891923.html</dc:identifier>
</item>
<item>
<title>一个例子读懂 JS 异步编程： Callback / Promise / Generator / Async - 无退路只能勇往直前</title>
<link>http://www.cnblogs.com/webxu20180730/p/10891694.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/webxu20180730/p/10891694.html</guid>
<description>&lt;p&gt;回顾JS异步编程方法的发展，主要有以下几种方式：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Callback&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Promise&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generator&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Async&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;需求&quot;&gt;需求&lt;/h2&gt;
&lt;p&gt;显示购物车商品列表的页面，用户可以勾选想要删除商品（单选或多选），点击确认删除按钮后，将已勾选的商品清除购物车，页面显示剩余商品。&lt;/p&gt;
&lt;p&gt;为了便于本文内容阐述，假设后端没有提供一个批量删除商品的接口，所以对用户选择的商品列表，需要逐个调用删除接口。&lt;/p&gt;
&lt;p&gt;用一个定时器代表一次接口请求。那思路就是遍历存放用户已选择商品的id数组，逐个发起删除请求del，待全部删除完成后，调用获取购物车商品列表的接口get&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;实现&lt;/h2&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;let ids = [1, 2, 3] // 假设已选择三个商品
let len = ids.length
let count = 0

let start // 便于后面计算执行时间&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;callback&quot;&gt;1. &lt;strong&gt;callback&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;传统常规的写法，如果是多个继行任务就会陷入回调地狱。比如此例中&lt;code&gt;get&lt;/code&gt;作为&lt;code&gt;del&lt;/code&gt;的回调函数&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;let get = () =&amp;gt; {
    setTimeout(() =&amp;gt; {
        console.log(`get:${new Date() -start}ms`)
    }, 1000)
}

let del = (id, cb) =&amp;gt; {
    setTimeout(() =&amp;gt; {
        console.log(id)
        count++
        if (count === len) {
            cb()
        }
    }, 1000)
}

let confirmDel = () =&amp;gt; {
    start = new Date()
    for (id of ids) {
        del(id, get)
    }
    console.log(`done:${new Date() -start}ms`)
}

confirmDel()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意观察和对比done的打印顺序和get完成时间。&lt;br/&gt;setTimeout是异步执行的，没有阻塞主流程的执行，所以done最先打印。&lt;br/&gt;三个del任务是并行的，加上一个回调执行时间，所以整个点击删除按钮事件耗时2秒左右&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;done:1ms
1
2
3
get:2007ms&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;promise&quot;&gt;2. Promise&lt;/h3&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;let getP = () =&amp;gt; {
    return new Promise((resolve, reject) =&amp;gt; {
        setTimeout(() =&amp;gt; {
            console.log(`get:${new Date() -start}ms`)
            resolve()
        }, 1000)
    })
}

let delP = (id, cb) =&amp;gt; {
    return new Promise((resolve, reject) =&amp;gt; {
        setTimeout(() =&amp;gt; {
            console.log(id)
            count++
            if (count === len) {
                cb()
            }
            resolve()
        }, 1000)
    })
}

let confirmDelP = () =&amp;gt; {
    start = new Date()
    for (id of ids) {
        delP(id, getP)
    }
    console.log(`done:${new Date() -start}ms`)
}

confirmDelP()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;单纯常用Promise写法，看上去结构跟回调写法一样，而且运行时间也一样。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;done:2ms
1
2
3
get:2007ms&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是，如果使用Promise.all方法，就能很好将并发任务（三个del)和继发任务（get)区分开了，就是get不用嵌入回调中了。&lt;/p&gt;
&lt;h3 id=&quot;promise.all&quot;&gt;3. Promise.all&lt;/h3&gt;
&lt;p&gt;Promise对象then / catch / all / race / finally，以及resolve / reject更多内容请参阅&lt;code&gt;MDN&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;let delP_1 = (id) =&amp;gt; {
    return new Promise((resolve, reject) =&amp;gt; {
        setTimeout(() =&amp;gt; {
            console.log(id)
            resolve()
        }, 1000)
    })
}

let getP_1 = () =&amp;gt; {
    return new Promise((resolve, reject) =&amp;gt; {
        setTimeout(() =&amp;gt; {
            console.log(`get:${new Date() -start}ms`)
            resolve()
        }, 1000)
    })
}

let confirmDelP_all = () =&amp;gt; {
    start = new Date()
    let p_Arr = ids.map(id =&amp;gt; delP_1(id))

    Promise.all(p_Arr)
        .then(() =&amp;gt; {
            return getP_1()
        })
        .then(() =&amp;gt; {
            console.log(`done:${new Date() -start}ms`)
        })
}
confirmDelP_all()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在这里，代码的语义就很直观了，先并发三个删除&lt;code&gt;del&lt;/code&gt;，全部成功后执行&lt;code&gt;get&lt;/code&gt;，&lt;code&gt;get&lt;/code&gt;成功后&lt;code&gt;done&lt;/code&gt;。&lt;br/&gt;注意看&lt;code&gt;done&lt;/code&gt;的打印顺序&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;1
2
3
get:2008ms
done:2010ms&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;generator&quot;&gt;4. Generator&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Generator&lt;/code&gt;类型是一种特殊的函数，它拥有自己独特的语法和方法属性。比如函数名前加*，配合yield 返回异步回调结果， 通过next 传入函数、next返回特殊的包含value和done属性的对象等等，具体见&lt;code&gt;MDN&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Generator&lt;/code&gt;是一种&lt;strong&gt;惰性求值&lt;/strong&gt;函数，执行一次next()才开启一次执行，到yield又中断，等待下一次next()。所以本人更喜欢叫它&lt;strong&gt;步进函数&lt;/strong&gt;，非常适合执行继发任务&lt;/p&gt;
&lt;p&gt;假设现在每一个接口请求都是继发任务，就是说只有当上一个请求成功后，才开始下一个请求。在实际的场景中，通常是当前请求需要使用上一个请求返回的结果数据。此时使用&lt;code&gt;Generator&lt;/code&gt;函数是最好的方式。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;let generator

let getG = () =&amp;gt; {
    setTimeout(() =&amp;gt; {
        console.log(`get:${new Date() -start}ms`)
        generator.next()
    }, 1000)
}

let delG = (id) =&amp;gt; {
    setTimeout(() =&amp;gt; {
        console.log(id)
        generator.next()
    }, 1000)
}

function *confimrDelG () {
    start = new Date()
    for (id of ids) {
        yield delG(id)
    }
    yield getG()
    console.log(`done:${new Date() -start}ms`)
}

generator = confimrDelG()
generator.next()
console.log('会被阻塞吗？')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;观察打印的时间，四个异步任务4秒左右。&lt;br/&gt;注意&quot;阻塞“文字最先打印&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;会被阻塞吗？
1
2
3
get:4009ms
done:4011ms&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我理解&lt;code&gt;Generator&lt;/code&gt;就是一个用来装载异步继发任务的容器，不阻塞容器外部流程，但是容器内部任务用&lt;code&gt;yield&lt;/code&gt;设置断点，用&lt;code&gt;next&lt;/code&gt;步进执行，可以通过next向下一步任务传值，或者直接使用yield返回的上一任务结果。&lt;/p&gt;
&lt;h3 id=&quot;async-await&quot;&gt;5. async / await&lt;/h3&gt;
&lt;h4 id=&quot;async-函数&quot;&gt;async 函数&lt;/h4&gt;
&lt;p&gt;我们先看MDN上关于async function怎么说的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;When an async function is called, it returns a Promise. When the async function returns a value, the Promise will be resolved with the returned value. When the async function throws an exception or some value, the Promise will be rejected with the thrown value.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也就是说async函数会返回一个Promise对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果async函数中是return一个值，这个值就是Promise对象中resolve的值；&lt;/li&gt;
&lt;li&gt;如果async函数中是throw一个值，这个值就是Promise对象中reject的值。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例子显示下，我们先用&lt;code&gt;Promise&lt;/code&gt;写法&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function imPromise(num) {

  return new Promise(function (resolve, reject) {
    if (num &amp;gt; 0) {
      resolve(num);
    } else {
      reject(num);
    }
  })
}

imPromise(1).then(function (v) {
  console.log(v); // 1
})

imPromise(0).catch(function (v) {
  console.log(v); // 0
})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再用&lt;code&gt;Async&lt;/code&gt;写法&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;async function imAsync(num) {
  if (num &amp;gt; 0) {
    return num // 这里相当于resolve(num)
  } else {
    throw num // 这里相当于reject(num)
  }
}

imAsync(1).then(function (v) {
  console.log(v); // 1
});

// 注意这里是catch
imAsync(0).catch(function (v) {
  console.log(v); // 0
})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所以理解&lt;code&gt;Async&lt;/code&gt;为&lt;code&gt;new Promise&lt;/code&gt;的语法糖也是这个原因。但要注意一点的是上面&lt;code&gt;imPromise&lt;/code&gt;函数和&lt;code&gt;imAsync&lt;/code&gt;函数调用返回的结果区别。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; `new Promise`生成的是一个`pending`状态的`Promise`对象，而`async`返回的是一个`resolved`或`rejected`状态的`Promise`对象,就是一个已经终结状态的`promise`对象。理解这点，对下面的`await`理解很重要。&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;let p = imPromise(1)
console.log(p) // Promise { pending }
let a = imAsync(1)
console.log(a) // Promise { resolved }&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;await&quot;&gt;await&lt;/h4&gt;
&lt;p&gt;再来看看MDN对于await是怎么说的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; An async function can contain an await expression, that pauses the execution of the async function and watis for the passed Promise's resolution, and then resumes the async function's execution and returns the resolved value.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;await会暂停当前async函数的执行，等待后面的Promise的计算结果返回以后再继续执行当前的async函数&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;await 等待什么？？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;await等待一个Promise对象从pending状态到resoled或rejected状态的这段时间。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以如果要实现中断步进执行的效果，&lt;code&gt;await&lt;/code&gt;后面接的必须是一个&lt;code&gt;pedding&lt;/code&gt;状态的&lt;code&gt;promise&lt;/code&gt;对象，其它状态的&lt;code&gt;promise&lt;/code&gt;对象或非&lt;code&gt;promise&lt;/code&gt;对象一概不等待。&lt;br/&gt;这也是&lt;code&gt;await&lt;/code&gt;和&lt;code&gt;yield&lt;/code&gt;的区别（&lt;code&gt;yield&lt;/code&gt;不管后面是什么，执行完紧接着的表达式就中断）。&lt;/p&gt;
&lt;h4 id=&quot;async-await-解决了什么问题&quot;&gt;async / await 解决了什么问题&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt;解决&lt;code&gt;callback&lt;/code&gt;嵌套导致回调地狱的问题，但实际上并不彻底，还是在&lt;code&gt;then&lt;/code&gt;中使用了回调函数。而&lt;code&gt;async / await&lt;/code&gt;使得异步回调在写法上完成没有，就像同步写法一样。&lt;br/&gt;看个例子：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// callback
get((a) =&amp;gt; {
    (a,b) =&amp;gt; {
        (b,c) =&amp;gt; {
            (c,d) =&amp;gt; {
                (d,e) =&amp;gt; {
                    console.log(e)
                }
            }
        }
    }
})&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// promise
get()
    .then(a =&amp;gt; p1(a))
    .then(b =&amp;gt; p1(b))
    .then(c =&amp;gt; p1(c))
    .then(d =&amp;gt; p1(d))
    .then(e =&amp;gt; {console.log(e)})&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// async / await
(async (a) =&amp;gt; {
    const b = await A(a);
    const c = await A(b);
    const d = await A(c);
    const e = await A(d);
    console.log(e)

})()&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;async-await-实现继发任务&quot;&gt;async / await 实现继发任务&lt;/h4&gt;
&lt;p&gt;我们用&lt;code&gt;async / await&lt;/code&gt;改写上面&lt;code&gt;Generator&lt;/code&gt;的例子&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;let delP_1 = (id) =&amp;gt; {
    return new Promise((resolve, reject) =&amp;gt; {
        setTimeout(() =&amp;gt; {
            console.log(id)
            resolve()
        }, 1000)
    })
}

let getP_1 = () =&amp;gt; {
    return new Promise((resolve, reject) =&amp;gt; {
        setTimeout(() =&amp;gt; {
            console.log(`get:${new Date() -start}ms`)
            resolve()
        }, 1000)
    })
}

async function confimrDelAsync () {
    start = new Date()
    for (id of ids) {
        await delP_1(id)
    }
    await getP_1()
    console.log(`done:${new Date() -start}ms`)
}

confimrDelAsync()
console.log('被阻塞了吗？')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;打印结果基本跟&lt;code&gt;generator&lt;/code&gt;一样。但在语义上更明确。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;被阻塞了吗？
1
2
3
get:4014ms
done:4016ms&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;async-await-实现并发任务&quot;&gt;async / await 实现并发任务&lt;/h4&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;let delP_1 = (id) =&amp;gt; {
    setTimeout(() =&amp;gt; {
        console.log(id)
    }, 1000)
}

let getP_1 = () =&amp;gt; {
    setTimeout(() =&amp;gt; {
        console.log(`get:${new Date() -start}ms`)
    }, 1000)
}

async function confimrDelAsync () {
    start = new Date()
    for (id of ids) {
        await delP_1(id)
    }
    await getP_1()
    console.log(`done:${new Date() -start}ms`)
}

confimrDelAsync()
console.log('被阻塞了吗？')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不返回&lt;code&gt;Promise&lt;/code&gt;对象，或者使&lt;code&gt;promise&lt;/code&gt;对象处理&lt;code&gt;resoled&lt;/code&gt;状态，就可以不执行等待。但这样的写法跟直接用同步方式写一样，所以并不推荐，显得多此一举。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;done:4ms
1
2
3
get:1009ms&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;async-await-实现并发和继发的混合任务&quot;&gt;async / await 实现并发和继发的混合任务&lt;/h4&gt;
&lt;p&gt;如果事件函数中并发任务和继发任务都有，此时使用&lt;code&gt;async / await&lt;/code&gt;才是最好的解决方式。其中的并发任务用&lt;code&gt;promise.all&lt;/code&gt;实现，因为它返回的正是&lt;code&gt;await&lt;/code&gt;可用的&lt;code&gt;pending&lt;/code&gt;状态的&lt;code&gt;Promise&lt;/code&gt;对象。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;let delP_1 = (id) =&amp;gt; {
    setTimeout(() =&amp;gt; {
        console.log(id)
        resolve()
    }, 1000)
}

let getP_1 = () =&amp;gt; {
    setTimeout(() =&amp;gt; {
        console.log(`get:${new Date() -start}ms`)
        resolve()
    }, 1000)
}

async function confimrDelAsync_all () {
    start = new Date()

    let p_Arr = ids.map(id =&amp;gt; delP_1(id))

    await Promise.all(p_Arr)
    await getP_1()
    console.log(`done:${new Date() -start}ms`)
}
confimrDelAsync_all()
console.log('被阻塞了吗？')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;观察时间是继发任务的一半。且不阻塞主流程。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;被阻塞了吗？
1
2
3
get:2009ms
done:2010ms&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;所以说&lt;code&gt;async&lt;/code&gt;是&lt;code&gt;promise&lt;/code&gt;的语法糖，但是函数返回的&lt;code&gt;promise&lt;/code&gt;的状态是不一样的。说&lt;code&gt;await&lt;/code&gt;是&lt;code&gt;yield&lt;/code&gt;的语法糖，但是&lt;code&gt;await&lt;/code&gt;只能接受&lt;code&gt;pending&lt;/code&gt;状态的&lt;code&gt;promise&lt;/code&gt;对象&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;code&gt;async&lt;/code&gt;可以单独使用，&lt;code&gt;await&lt;/code&gt;不能单独使用，只能在&lt;code&gt;async&lt;/code&gt;函数体内使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以针对开头的需求：&lt;/p&gt;
&lt;p&gt;显示购物车商品列表的页面，用户可以勾选想要删除商品（单选或多选），点击确认删除按钮后，将已勾选的商品清除购物车，页面显示剩余商品。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;最好的解决方案是：
 `promise.all` 与 `async / await`结合

其次是：
 `promise.all`&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在实际项目中还应该加上捕获错误的代码。&lt;br/&gt;在&lt;code&gt;async / await&lt;/code&gt;中结合&lt;code&gt;try...catch&lt;/code&gt;&lt;br/&gt;在&lt;code&gt;promise&lt;/code&gt;中，因为错误具有冒泡以性质，所以在结尾加上&lt;code&gt;.catch&lt;/code&gt;即可。&lt;/p&gt;
&lt;h2 id=&quot;尾声&quot;&gt;尾声&lt;/h2&gt;
&lt;p&gt;文章只是自己的一个并发和继发混合需求引发的知识总结。但JS编程还有很多内容，包括异步事件、事件循环（浏览器和nodejs区别）、异步任务错误的捕获、promise/generator/async具体API细节等。还需要继续学习。&lt;/p&gt;
&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/ken_ding/article/details/81201248&quot; class=&quot;uri&quot;&gt;https://blog.csdn.net/ken_ding/article/details/81201248&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000009070711?from=timeline&amp;amp;isappinstalled=0#articleHeader5&quot; class=&quot;uri&quot;&gt;https://segmentfault.com/a/1190000009070711?from=timeline&amp;amp;isappinstalled=0#articleHeader5&lt;/a&gt;&lt;br/&gt;《Javascript ES6 函数式编程入门指南》 第10章 使用Generator&lt;/p&gt;
</description>
<pubDate>Sun, 19 May 2019 16:26:00 +0000</pubDate>
<dc:creator>无退路只能勇往直前</dc:creator>
<og:description>JS 异步编程实践理解： Callback / Promise / Generator / Async</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/webxu20180730/p/10891694.html</dc:identifier>
</item>
<item>
<title>SpringCloud之旅第一篇-微服务概念 - 茶底世界</title>
<link>http://www.cnblogs.com/yuanqinnan/p/10887808.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yuanqinnan/p/10887808.html</guid>
<description>&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;一、单体架构的问题&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;微服务为什么会出现？在学习Springboot的时候知道Springboot极大的简化了我们的开发，我们可以快速的进行业务开发，Springboot单体应用在项目的开发初期能够满足我们需求，这种单体架构优点非常的明显：&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;ol-list&quot; start=&quot;&quot; readability=&quot;1&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;容易测试：本地就可以起完整的系统，不需要外部依赖。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;容易开发：我们只需引入依赖，选择框架便可快速开发。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;易于部署：单体架构部署也较简单，直接打包即可。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;易于水平伸缩：这里的收缩时指当我们需要多个服务器时也比较方便&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;在项目刚开始的时候我们可以快速的开发，一个长寿的项目，需求不断增加，原先的模块也再不断优化，这个时候单体架构的缺点开始显现：&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;ol-list&quot; start=&quot;&quot; readability=&quot;5.5&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;2&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;代码膨胀，难以维护：代码越来越多，开发人员也就越来越多，一旦出现bug，定位、修复成本很高，而且人员太多，代码都放在一起，容易引起冲突，且由于业务集中在一起，业务复杂，很难全局把握，改一个bug可能会再多出两个bug。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;构建、部署成本大：项目太大，构建和部署就会非常慢，效率低下。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;上手困难：互联网企业人员更迭快，代码过于集中，导致业务非常复杂，新人想要上手变得非常困难。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;技术创新困难：代码过于集中，我们很难使用到新技术，因为改动实在太大，容易出现问题。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;可扩展性差：这里的可扩展性是指因为项目都必须部署在一台服务器中，那项目所要的资源会越来越大，这样我们只能扩展硬件（集群可以分散压力，但是单个应用所要的资源还是不能少的）。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 class=&quot;md-list-item&quot;&gt;二、微服务出现&lt;/h2&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;微服务的出现就是为了解决这些问题，看看是如何解决的，微服务将系统拆分成一个个小服务（一般是按照模块进行拆分，比如用户服务、支付服务、订单服务、出入库服务等），那么即使业务量增加，我们也可以通过新增服务的形式来解决，这样代码就不会膨胀，构建、部署也不是问题。由于服务不在一个框架中，那么我们可以很方便的对某一个服务进行技术创新，对一个服务的进行技术升级改动不会太大，而当我们有新技术产生时，我们就可以也可以应用到新服务中。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;微服务并没有明确的定义，下面是一种比较通用的理解：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;使用一套小服务来开发单个应用的方式，每个服务运行在&lt;span&gt;&lt;strong&gt;独立的进程&lt;/strong&gt;&lt;span&gt;里，一般采用&lt;span&gt;&lt;strong&gt;轻量级的通讯&lt;/strong&gt;&lt;span&gt;机制互联，并且它们可以通过&lt;span&gt;&lt;strong&gt;自动化&lt;/strong&gt;&lt;span&gt;方式部署。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;通过定义我们可以知道微服务的特征：&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;2&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;微服务是由一系列的小服务共同组成的。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;每个微服务都有自己独立的进程。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;每个服务都是独立的业务开发，单一原则&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;每个服务都能独立的部署（一般部署在容器中）。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;微服务之间通过轻量级通信机制进行通信&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;分布式的管理。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;三、微服务架构图&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;讲到这里，对微服务的概念应该有了一定的了解，下面画的一个比较简单的微服务架构图&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1113901/201905/1113901-20190519000828931-127521772.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;assets/1558168673806.png&quot;&gt;&lt;img src=&quot;file://e/mycode/docs/assets/1558168673806.png?lastModify=1558195656&quot; alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;图中可以看出每个微服务都有自己独立的数据库，每个服务都会暴露自己的REST API 给外部调用，服务之间会存在互相调用关系，而每个服务都有可能被客户端直接调用，另外我们看到还有一个API Gateway,这是统一个服务接口，它通常可以有以下作用：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt; 1. 提供统一服务入口，让微服务对前台透明&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt; 2. 聚合后台的服务，节省流量，提升性能&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt; 3. 提供安全，过滤，流控等API管理功能&lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;四、优缺点&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;凡是都有两面性，一个技术也不可能只有优点而没有缺点，微服务的优点很多，微服务的优点其实就是单体架构的缺点的反面，因为微服务本身就是来解决单体架构问题的&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;ol-list&quot; readability=&quot;3.5&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;2&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;独立性：微服务从构建、部署，扩容、缩容、甚至数据库都是独立的，服务只要管理好自己就可以，这样就极大的降低了系统的复杂性。服务完全独立独立之后，从构建到部署，到后期的扩容缩容都会变得简单，基本就解决单体架构上碰到的很多问题。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;敏捷性：敏捷性是针对开发人员来讲的，服务拆分之后，可以独立专一开发，开发人员可以通过API快速的了解本服务的业务，互相之间并不影响。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;技术栈灵活：微服务可以完全独立的拥有技术栈，只需要保证提供的服务API不变，内部使用何种技术栈很灵活。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;高效的团队：微服务的团队会比较小，那沟通就会变得更加高效。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;没有最好的架构，只有最适合的架构，既然有这么多优点，那缺点肯定也有不少&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;ol-list&quot; readability=&quot;4.5&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务的拆分：服务如何拆分其实是非常重要且复杂的，服务拆分的太大或太小都不合适，这需要我们有非常丰富的经验，而这个在单体中是不存在的。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;数据一致性：单体架构中只有一个数据库，我们可以通过事务解决多表之间数据的一致性，而在微服务中，每个服务中都有自己独立的数据库，要保证服务之间的数据一致性也是一个大的挑战。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务间通信成本：服务间互相通信也需要时间成本。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;测试复杂性提高：服务之间存在依赖，那么测试时就必须启动这些依赖，这就增加了复杂度。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;运维部署复杂性提高：微服务应用由大量服务组成，每个服务会起多个实例，要进行配置，部署，扩展和监控。此外，还需要实现服务发现机制&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;五、技术点&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block md-focus&quot;&gt;&lt;span&gt;要实现微服务，我们需要解决以下几个技术点：&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;4.5&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;客户端访问服务：这个上面架构图中已经给出，使用API Gateway。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;10&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务通信：服务与服务之间的通信有两种方式，&lt;span&gt;&lt;strong&gt;同步与异步&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;&lt;strong&gt;同步通信&lt;/strong&gt;&lt;span&gt;中又分为两种：Http与RPC，http访问很好理解，相信一般的系统也会调用外部的一些服务，这些基本都是使用http,因为http可以跨语言，跨客户端，相对使用较广，如http Client ,而RPC也有自己的优点，首先是效率更高，更安全可控，特别是内部服务互相调用时，用统一的RPC框架，服务的侵入性更低，调用服务甚至就像调用自己的服务一样简单,如dubbo（注：dubbo只能使用java语言）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;&lt;strong&gt;异步通信&lt;/strong&gt;&lt;span&gt;是通过消息队列来实现，异步通信的好处是可以降低服务之间的耦合，有削峰的好处，而且使用消息队列可以方便的实现数据的最终一致性。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;-0.5&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;2&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;服务治理：为了服务的高可用，微服务一般都有多个拷贝，做负载均衡，而这个时候就必须知道服务的状态，一个服务随时有可能下线，下线之后后续有可能重新启动，这些都需要我们一个服务治理功能，也即是服务的注册与发现。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;md-list-item&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;      &lt;img src=&quot;https://img2018.cnblogs.com/blog/1113901/201905/1113901-20190519232015249-99489015.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;        产品服务启动了三个，他们都会去注册中心进行注册，注册成功后，会通过心跳包告诉注册中心是否在线或者下线，而订单服务要去调用产品服务，会先去注册中心进行查询，查询出相应的地址然后再去调用产品服务。&lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;六、解决方案&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;以上都是微服务的一些概念，既然有天上飞的概念，就有落地的实现，现在主流的微服务架构有两套解决方案：&lt;span&gt;&lt;strong&gt;Dubbo+Zookeeper&lt;/strong&gt;&lt;span&gt;与&lt;span&gt;&lt;strong&gt;SpringCloud&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;我司现在两种方案都在用，总体来说两种方案都可以很方便的进行微服务开发，其中的区别在于SpringCloud组件多，功能完备，全家桶式，基本微服务中会遇到的问题都有相应的解决方案，在通信方面SpringCloud使用的是http。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;而Dubbo+Zookeeper使用的是RPC，组件较少，功能非完备（但是我们可以自己去找相应的解决方案），并且现在交由Apache进行孵化，后面应该会实现功能的完备。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;就个人来说，认为Dubbo+Zookeeper的侵入性更少，且调用过程更简单，更加类似服务之间的调用，两种方案后续就会进行学习。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 19 May 2019 15:21:00 +0000</pubDate>
<dc:creator>茶底世界</dc:creator>
<og:description>一、单体架构的问题 微服务为什么会出现？在学习Springboot的时候知道Springboot极大的简化了我们的开发，我们可以快速的进行业务开发，Springboot单体应用在项目的开发初期能够满足</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yuanqinnan/p/10887808.html</dc:identifier>
</item>
<item>
<title>死磕 java同步系列之volatile解析 - 彤哥读源码</title>
<link>http://www.cnblogs.com/tong-yuan/p/volatile.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tong-yuan/p/volatile.html</guid>
<description>&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;（1）volatile是如何保证可见性的？&lt;/p&gt;
&lt;p&gt;（2）volatile是如何禁止重排序的？&lt;/p&gt;
&lt;p&gt;（3）volatile的实现原理？&lt;/p&gt;
&lt;p&gt;（4）volatile的缺陷？&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;volatile可以说是Java虚拟机提供的最轻量级的同步机制了，但是它并不容易被正确地理解，以至于很多人不习惯使用它，遇到多线程问题一律使用synchronized或其它锁来解决。&lt;/p&gt;
&lt;p&gt;了解volatile的语义对理解多线程的特性具有很重要的意义，所以彤哥专门写了一篇文章来解释volatile的语义到底是什么。&lt;/p&gt;
&lt;h2 id=&quot;语义一可见性&quot;&gt;语义一：可见性&lt;/h2&gt;
&lt;p&gt;前面介绍Java内存模型的时候，我们说过可见性是指当一个线程修改了共享变量的值，其它线程能立即感知到这种变化。&lt;/p&gt;
&lt;p&gt;关于Java内存模型的讲解请参考【&lt;a href=&quot;https://mp.weixin.qq.com/s/jownTN--npu3o8B4c3sbeA&quot;&gt;死磕 java同步系列之JMM（Java Memory Model）&lt;/a&gt;】。&lt;/p&gt;
&lt;p&gt;而普通变量无法做到立即感知这一点，变量的值在线程之间的传递均需要通过主内存来完成，比如，线程A修改了一个普通变量的值，然后向主内存回写，另外一条线程B只有在线程A的回写完成之后再从主内存中读取变量的值，才能够读取到新变量的值，也就是新变量才能对线程B可见。&lt;/p&gt;
&lt;p&gt;在这期间可能会出现不一致的情况，比如：&lt;/p&gt;
&lt;p&gt;（1）线程A并不是修改完成后立即回写；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20java%E5%90%8C%E6%AD%A5%E7%B3%BB%E5%88%97/resource/volatile1.png&quot; alt=&quot;volatile&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（线路A修改了变量x的值为5，但是还没有回写，线程B从主内存读取到的还旧值0）&lt;/p&gt;
&lt;p&gt;（2）线程B还在用着自己工作内存中的值，而并不是立即从主内存读取值；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20java%E5%90%8C%E6%AD%A5%E7%B3%BB%E5%88%97/resource/volatile2.png&quot; alt=&quot;volatile&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（线程A回写了变量x的值为5到主内存中，但是线程B还没有读取主内存的值，依旧在使用旧值0在进行运算）&lt;/p&gt;
&lt;p&gt;基于以上两种情况，所以，普通变量都无法做到立即感知这一点。&lt;/p&gt;
&lt;p&gt;但是，volatile变量可以做到立即感知这一点，也就是volatile可以保证可见性。&lt;/p&gt;
&lt;p&gt;java内存模型规定，volatile变量的每次修改都必须立即回写到主内存中，volatile变量的每次使用都必须从主内存刷新最新的值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20java%E5%90%8C%E6%AD%A5%E7%B3%BB%E5%88%97/resource/volatile3.png&quot; alt=&quot;volatile&quot;/&gt;&lt;/p&gt;
&lt;p&gt;volatile的可见性可以通过下面的示例体现：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class VolatileTest {
    // public static int finished = 0;
    public static volatile int finished = 0;

    private static void checkFinished() {
        while (finished == 0) {
            // do nothing
        }
        System.out.println(&quot;finished&quot;);
    }

    private static void finish() {
        finished = 1;
    }

    public static void main(String[] args) throws InterruptedException {
        // 起一个线程检测是否结束
        new Thread(() -&amp;gt; checkFinished()).start();

        Thread.sleep(100);

        // 主线程将finished标志置为1
        finish();

        System.out.println(&quot;main finished&quot;);

    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面的代码中，针对finished变量，使用volatile修饰时这个程序可以正常结束，不使用volatile修饰时这个程序永远不会结束。&lt;/p&gt;
&lt;p&gt;因为不使用volatile修饰时，checkFinished()所在的线程每次都是读取的它自己工作内存中的变量的值，这个值一直为0，所以一直都不会跳出while循环。&lt;/p&gt;
&lt;p&gt;使用volatile修饰时，checkFinished()所在的线程每次都是从主内存中加载最新的值，当finished被主线程修改为1的时候，它会立即感知到，进而会跳出while循环。&lt;/p&gt;
&lt;h2 id=&quot;语义二禁止重排序&quot;&gt;语义二：禁止重排序&lt;/h2&gt;
&lt;p&gt;前面介绍Java内存模型的时候，我们说过Java中的有序性可以概括为一句话：如果在本线程中观察，所有的操作都是有序的；如果在另一个线程中观察，所有的操作都是无序的。&lt;/p&gt;
&lt;p&gt;前半句是指线程内表现为串行的语义，后半句是指“指令重排序”现象和“工作内存和主内存同步延迟”现象。&lt;/p&gt;
&lt;p&gt;关于Java内存模型的讲解请参考【&lt;a href=&quot;https://mp.weixin.qq.com/s/jownTN--npu3o8B4c3sbeA&quot;&gt;死磕 java同步系列之JMM（Java Memory Model）&lt;/a&gt;】。&lt;/p&gt;
&lt;p&gt;普通变量仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获得正确的结果，而不能保证变量赋值操作的顺序与程序代码中的执行顺序一致，因为一个线程的方法执行过程中无法感知到这点，这就是“线程内表现为串行的语义”。&lt;/p&gt;
&lt;p&gt;比如，下面的代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 两个操作在一个线程
int i = 0;
int j = 1;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面两句话没有依赖关系，JVM在执行的时候为了充分利用CPU的处理能力，可能会先执行&lt;code&gt;int j = 1;&lt;/code&gt;这句，也就是重排序了，但是在线程内是无法感知的。&lt;/p&gt;
&lt;p&gt;看似没有什么影响，但是如果是在多线程环境下呢？&lt;/p&gt;
&lt;p&gt;我们再看一个例子：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class VolatileTest3 {
    private static Config config = null;
    private static volatile boolean initialized = false;

    public static void main(String[] args) {
        // 线程1负责初始化配置信息
        new Thread(() -&amp;gt; {
            config = new Config();
            config.name = &quot;config&quot;;
            initialized = true;
        }).start();

        // 线程2检测到配置初始化完成后使用配置信息
        new Thread(() -&amp;gt; {
            while (!initialized) {
                LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(100));
            }

            // do sth with config
            String name = config.name;
        }).start();
    }
}

class Config {
    String name;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个例子很简单，线程1负责初始化配置，线程2检测到配置初始化完毕，使用配置来干一些事。&lt;/p&gt;
&lt;p&gt;在这个例子中，如果initialized不使用volatile来修饰，可能就会出现重排序，比如在初始化配置之前把initialized的值设置为了true，这样线程2读取到这个值为true了，就去使用配置了，这时候可能就会出现错误。&lt;/p&gt;
&lt;p&gt;（此处这个例子只是用于说明重排序，实际运行时很难出现。）&lt;/p&gt;
&lt;p&gt;通过这个例子，彤哥相信大家对“如果在本线程内观察，所有操作都是有序的；在另一个线程观察，所有操作都是无序的”有了更深刻的理解。&lt;/p&gt;
&lt;p&gt;所以，重排序是站在另一个线程的视角的，因为在本线程中，是无法感知到重排序的影响的。&lt;/p&gt;
&lt;p&gt;而volatile变量是禁止重排序的，它能保证程序实际运行是按代码顺序执行的。&lt;/p&gt;
&lt;h2 id=&quot;实现内存屏障&quot;&gt;实现：内存屏障&lt;/h2&gt;
&lt;p&gt;上面讲了volatile可以保证可见性和禁止重排序，那么它是怎么实现的呢？&lt;/p&gt;
&lt;p&gt;答案就是，内存屏障。&lt;/p&gt;
&lt;p&gt;内存屏障有两个作用：&lt;/p&gt;
&lt;p&gt;（1）阻止屏障两侧的指令重排序；&lt;/p&gt;
&lt;p&gt;（2）强制把写缓冲区/高速缓存中的数据回写到主内存，让缓存中相应的数据失效；&lt;/p&gt;
&lt;p&gt;关于“内存屏障”的知识点，各路大神的观点也不完全一致，所以这里彤哥也就不展开讲述了，感兴趣的可以看看下面的文章：&lt;/p&gt;
&lt;p&gt;（注意，公众号不允许外发链接，所以只能辛苦复制链接到浏览器中阅读了，而且还可能需要TECH上网）&lt;/p&gt;
&lt;p&gt;（1） Doug Lea的《The JSR-133 Cookbook for Compiler Writers》&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://g.oswego.edu/dl/jmm/cookbook.html&quot; class=&quot;uri&quot;&gt;http://g.oswego.edu/dl/jmm/cookbook.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Doug Lea 就是java并发包的作者，大牛！&lt;/p&gt;
&lt;p&gt;（2）Martin Thompson的《Memory Barriers/Fences》&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mechanical-sympathy.blogspot.com/2011/07/memory-barriersfences.html&quot; class=&quot;uri&quot;&gt;https://mechanical-sympathy.blogspot.com/2011/07/memory-barriersfences.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Martin Thompson 专注于把性能提升到极致，专注于从硬件层面思考问题，比如如何避免伪共享等，大牛！&lt;/p&gt;
&lt;p&gt;它的博客地址就是上面这个地址，里面有很多底层的知识，有兴趣的可以去看看。&lt;/p&gt;
&lt;p&gt;（3）Dennis Byrne的《Memory Barriers and JVM Concurrency》&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.infoq.com/articles/memory_barriers_jvm_concurrency&quot; class=&quot;uri&quot;&gt;https://www.infoq.com/articles/memory_barriers_jvm_concurrency&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是InfoQ英文站上面的一篇文章，我觉得写的挺好的，基本上综合了上面的两种观点，并从汇编层面分析了内存屏障的实现。&lt;/p&gt;
&lt;p&gt;目前国内市面上的关于内存屏障的讲解基本不会超过这三篇文章，包括相关书籍中的介绍。&lt;/p&gt;
&lt;p&gt;我们还是来看一个例子来理解内存屏障的影响：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class VolatileTest4 {
    // a不使用volatile修饰
    public static long a = 0;
    // 消除缓存行的影响
    public static long p1, p2, p3, p4, p5, p6, p7;
    // b使用volatile修饰
    public static volatile long b = 0;
    // 消除缓存行的影响
    public static long q1, q2, q3, q4, q5, q6, q7;
    // c不使用volatile修饰
    public static long c = 0;

    public static void main(String[] args) throws InterruptedException {
        new Thread(()-&amp;gt;{
            while (a == 0) {
                long x = b;
            }
            System.out.println(&quot;a=&quot; + a);
        }).start();

        new Thread(()-&amp;gt;{
            while (c == 0) {
                long x = b;
            }
            System.out.println(&quot;c=&quot; + c);
        }).start();

        Thread.sleep(100);

        a = 1;
        b = 1;
        c = 1;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这段代码中，a和c不使用volatile修饰，b使用volatile修饰，而且我们在a/b、b/c之间各加入7个long字段消除伪共享的影响。&lt;/p&gt;
&lt;p&gt;关于伪共享的相关知识，可以查看彤哥之前写的文章【&lt;a href=&quot;https://mp.weixin.qq.com/s/rd13SOSxhLA6TT13N9ni8Q&quot;&gt;杂谈 什么是伪共享（false sharing）？&lt;/a&gt;】。&lt;/p&gt;
&lt;p&gt;在a和c的两个线程的while循环中我们获取一下b，你猜怎样？如果把&lt;code&gt;long x = b;&lt;/code&gt;这行去掉呢？运行试试吧。&lt;/p&gt;
&lt;p&gt;彤哥这里直接说结论了：volatile变量的影响范围不仅仅只包含它自己，它会对其上下的变量值的读写都有影响。&lt;/p&gt;
&lt;h2 id=&quot;缺陷&quot;&gt;缺陷&lt;/h2&gt;
&lt;p&gt;上面我们介绍了volatile关键字的两大语义，那么，volatile关键字是不是就是万能的了呢？&lt;/p&gt;
&lt;p&gt;当然不是，忘了我们内存模型那章说的一致性包括的三大特性了么？&lt;/p&gt;
&lt;p&gt;一致性主要包含三大特性：原子性、可见性、有序性。&lt;/p&gt;
&lt;p&gt;volatile关键字可以保证可见性和有序性，那么volatile能保证原子性么？&lt;/p&gt;
&lt;p&gt;请看下面的例子：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class VolatileTest5 {
    public static volatile int counter = 0;

    public static void increment() {
        counter++;
    }

    public static void main(String[] args) throws InterruptedException {
        CountDownLatch countDownLatch = new CountDownLatch(100);
        IntStream.range(0, 100).forEach(i-&amp;gt;
                new Thread(()-&amp;gt; {
                    IntStream.range(0, 1000).forEach(j-&amp;gt;increment());
                    countDownLatch.countDown();
                }).start());

        countDownLatch.await();

        System.out.println(counter);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这段代码中，我们起了100个线程分别对counter自增1000次，一共应该是增加了100000，但是实际运行结果却永远不会达到100000。&lt;/p&gt;
&lt;p&gt;让我们来看看increment()方法的字节码（IDEA下载相关插件可以查看）：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;0 getstatic #2 &amp;lt;com/coolcoding/code/synchronize/VolatileTest5.counter&amp;gt;
3 iconst_1
4 iadd
5 putstatic #2 &amp;lt;com/coolcoding/code/synchronize/VolatileTest5.counter&amp;gt;
8 return&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到counter++被分解成了四条指令：&lt;/p&gt;
&lt;p&gt;（1）getstatic，获取counter当前的值并入栈&lt;/p&gt;
&lt;p&gt;（2）iconst_1，入栈int类型的值1&lt;/p&gt;
&lt;p&gt;（3）iadd，将栈顶的两个值相加&lt;/p&gt;
&lt;p&gt;（4）putstatic，将相加的结果写回到counter中&lt;/p&gt;
&lt;p&gt;由于counter是volatile修饰的，所以getstatic会从主内存刷新最新的值，putstatic也会把修改的值立即同步到主内存。&lt;/p&gt;
&lt;p&gt;但是中间的两步iconst_1和iadd在执行的过程中，可能counter的值已经被修改了，这时并没有重新读取主内存中的最新值，所以volatile在counter++这个场景中并不能保证其原子性。&lt;/p&gt;
&lt;p&gt;volatile关键字只能保证可见性和有序性，不能保证原子性，要解决原子性的问题，还是只能通过加锁或使用原子类的方式解决。&lt;/p&gt;
&lt;p&gt;进而，我们得出volatile关键字使用的场景：&lt;/p&gt;
&lt;p&gt;（1）运算的结果并不依赖于变量的当前值，或者能够确保只有单一的线程修改变量的值；&lt;/p&gt;
&lt;p&gt;（2）变量不需要与其他状态变量共同参与不变约束。&lt;/p&gt;
&lt;p&gt;说白了，就是volatile本身不保证原子性，那就要增加其它的约束条件来使其所在的场景本身就是原子的。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;private volatile int a = 0;

// 线程A
a = 1;

// 线程B
if (a == 1) {
    // do sth
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;a = 1;&lt;/code&gt;这个赋值操作本身就是原子的，所以可以使用volatile来修饰。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;（1）volatile关键字可以保证可见性；&lt;/p&gt;
&lt;p&gt;（2）volatile关键字可以保证有序性；&lt;/p&gt;
&lt;p&gt;（3）volatile关键字不可以保证原子性；&lt;/p&gt;
&lt;p&gt;（4）volatile关键字的底层主要是通过内存屏障来实现的；&lt;/p&gt;
&lt;p&gt;（5）volatile关键字的使用场景必须是场景本身就是原子的；&lt;/p&gt;
&lt;h2 id=&quot;彩蛋&quot;&gt;彩蛋&lt;/h2&gt;
&lt;p&gt;关于“内存屏障”的三篇文章，考虑到有的同学无法TECH上网，彤哥专门把这三篇下载下来整理了一下。&lt;/p&gt;
&lt;p&gt;关注我的公众号“彤哥读源码”，后台回复“volatile”，下载这三篇资料。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;欢迎关注我的公众号“彤哥读源码”，查看更多源码系列文章, 与彤哥一起畅游源码的海洋。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/alan-tang-tt/yuan/raw/master/%E6%AD%BB%E7%A3%95%20java%E9%9B%86%E5%90%88%E7%B3%BB%E5%88%97/resource/qrcode_ss.jpg&quot; alt=&quot;qrcode&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 19 May 2019 15:18:00 +0000</pubDate>
<dc:creator>彤哥读源码</dc:creator>
<og:description>volatile是如何保证可见性的？ volatile是如何禁止重排序的？ volatile的实现原理？ volatile的缺陷？</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tong-yuan/p/volatile.html</dc:identifier>
</item>
<item>
<title>前端之CSS2 - YifChan</title>
<link>http://www.cnblogs.com/yifchan/p/html-1-3.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yifchan/p/html-1-3.html</guid>
<description>&lt;h2&gt;CSS盒子模型&lt;/h2&gt;
&lt;h3&gt;CSS盒子模型介绍&lt;/h3&gt;
&lt;p&gt;盒子模型解释&lt;br/&gt;元素在页面中显示成一个方块，类似一个盒子，CSS盒子模型就是使用现实中盒子来做比喻，帮助我们设置元素对应的样式。&lt;/p&gt;
&lt;p&gt;盒子模型示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1618401/201905/1618401-20190519184533238-1659626513.png&quot; alt=&quot;盒子模型示意图&quot; width=&quot;453&quot; height=&quot;263&quot;/&gt;&lt;/p&gt;
&lt;p&gt;把元素叫做盒子，设置对应的样式分别为：盒子的边框(border)、盒子内的内容和边框之间的间距(padding)、盒子与盒子之间的间距(margin)。&lt;/p&gt;
&lt;h3&gt;设置边框&lt;/h3&gt;
&lt;p&gt;设置一边的边框，比如顶部边框，可以按如下设置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;border-top-color:red;   &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置顶部边框颜色为红色 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; 
border-top-width:10px;   &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置顶部边框粗细为10px &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; 
border-top-style:solid;   &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置顶部边框的线性为实线，常用的有：solid(实线) dashed(虚线) dotted(点线); &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面三句可以简写成一句：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;border-top:10px solid red; &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 顺序随意 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置其它三个边的方法和上面一样，把上面的'top'换成'left'就是设置左边，换成'right'就是设置右边，换成'bottom'就是设置底边。&lt;br/&gt;四个边如果设置一样，可以将四个边的设置合并成一句：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;border:10px solid red;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;设置内间距padding&lt;/h3&gt;
&lt;p&gt;设置盒子四边的内间距，可设置如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;padding-top：20px; &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置顶部内间距20px &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; 
padding-left:30px; &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置左边内间距30px &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; 
padding-right:40px; &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置右边内间距40px &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; 
padding-bottom:50px; &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置底部内间距50px &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;上面的设置可以简写如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;padding：20px 40px 50px 30px; &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 四个值按照顺时针方向，分别设置的是 上 右 下 左 四个方向(即顺时针)的内边距值。 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;padding后面还可以跟3个值，2个值和1个值，它们分别设置的项目如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;padding：20px 40px 50px; &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置顶部内边距为20px，左右内边距为40px，底部内边距为50px &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; 
padding：20px 40px; &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置上下内边距为20px，左右内边距为40px&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; 
padding：20px; &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置四边内边距为20px &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：当先设置好了盒子的宽高时，再添加padding，会给盒子增加宽高！&lt;/p&gt;

&lt;h3&gt;设置外间距margin&lt;/h3&gt;
&lt;p&gt;外边距的设置方法和padding的设置方法相同，将上面设置项中的'padding'换成'margin'就是外边距设置方法。&lt;/p&gt;

&lt;p&gt;CSS盒子模型示例&lt;/p&gt;
&lt;p&gt;盒子模型真实尺寸计算&lt;/p&gt;
&lt;p&gt;盒子模型的尺寸&lt;br/&gt;按照下面代码制作页面：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;盒子模型演练示例&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .box01&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;gold&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .box02&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;gold&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;50px
         solid #000&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .box03&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;gold&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;50px
         solid #000&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;box01&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;box02&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;box03&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上面的页面得出结论：盒子的width和height设置的是盒子内容的宽和高，不是盒子本身的宽和高。&lt;/p&gt;
&lt;p&gt;盒子的真实尺寸计算公式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;盒子宽度 = width + padding左右 + border左右
盒子高度 = height + padding上下 + border上下&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;margin相关技巧&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;设置元素水平居中： margin:x auto;&lt;/li&gt;
&lt;li&gt;margin负值让元素位移及边框合并。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;01：将一个盒子居中；&lt;br/&gt;auto只能用于宽度方向，不能用于高度方向；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ff5c09e0-1c7c-4741-919d-95b9be49b5db')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_ff5c09e0-1c7c-4741-919d-95b9be49b5db&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ff5c09e0-1c7c-4741-919d-95b9be49b5db&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ff5c09e0-1c7c-4741-919d-95b9be49b5db',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ff5c09e0-1c7c-4741-919d-95b9be49b5db&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;让盒子居中&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;margin: 50px 200px 100px 200px;  !* 不能让盒子居中 *!&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;将一个盒子居中&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;02：margin使用技巧之使用负值去除边框重叠&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('23853c0d-fa12-4869-b7d8-49730a2d189a')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_23853c0d-fa12-4869-b7d8-49730a2d189a&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_23853c0d-fa12-4869-b7d8-49730a2d189a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('23853c0d-fa12-4869-b7d8-49730a2d189a',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_23853c0d-fa12-4869-b7d8-49730a2d189a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;使用负值去除边框重叠&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        * &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 202px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 156px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1 div &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; yellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -1px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 使用这一句的效果相当于下面的两句 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;border-bottom: 0;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1 .last &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;border-bottom&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;last&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;margin使用技巧之使用负值去除边框重叠&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;去除文字默认的行高，可以将行高设置成和字体大小一致即可；&lt;/p&gt;

&lt;h3&gt;外边距合并问题&lt;/h3&gt;
&lt;p&gt;外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。&lt;br/&gt;解决方法如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;使用这种特性，即上下两边都设置margin，但其中一边取原本希望的两边之和；&lt;/li&gt;
&lt;li&gt;只设置一边的外边距，一般设置margin-top；&lt;/li&gt;
&lt;li&gt;将元素浮动或者定位。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;只是垂直方向的合并，左右不会合并；&lt;/strong&gt;&lt;br/&gt;外边距合并时W3C故意为之，而元素溢出则是W3C的一个bug。&lt;/p&gt;
&lt;p&gt;解决外边距合并示例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('187b0b11-9b9d-47a6-9f5d-3d3b42d09002')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_187b0b11-9b9d-47a6-9f5d-3d3b42d09002&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_187b0b11-9b9d-47a6-9f5d-3d3b42d09002&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('187b0b11-9b9d-47a6-9f5d-3d3b42d09002',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_187b0b11-9b9d-47a6-9f5d-3d3b42d09002&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;外边距合并&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 502px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1 div &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;margin-left: 20px;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;margin-right: 20px;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;margin-top: 20px;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;margin-bottom: 20px;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。
        合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。
        合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。
        合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。
        合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;解决外边距合并示例&lt;/span&gt;&lt;/div&gt;

&lt;h3&gt;margin-top 塌陷问题&lt;/h3&gt;
&lt;p&gt;margin-top 塌陷&lt;br/&gt;在两个盒子嵌套时候，内部的盒子设置的margin-top会加到外边的盒子上，导致内部的盒子margin-top设置失败。&lt;br/&gt;解决方法如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;外部盒子设置一个边框；&lt;/li&gt;
&lt;li&gt;外部盒子设置 overflow:hidden；(存在一定问题)&lt;/li&gt;
&lt;li&gt;使用伪元素类：.clearfix:before{content: '';display:table;}。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;注意：&lt;strong&gt;margin-top塌陷只会出现在垂直方向，不会出现在水平方向。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用margin-top出现问题的代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4fb63257-f5e9-41fd-99e4-cc031dc560f9')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_4fb63257-f5e9-41fd-99e4-cc031dc560f9&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4fb63257-f5e9-41fd-99e4-cc031dc560f9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4fb63257-f5e9-41fd-99e4-cc031dc560f9',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4fb63257-f5e9-41fd-99e4-cc031dc560f9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;margin-top塌陷&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d_body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;height: 200px;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; yellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;padding-top: 100px;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d_con &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; gray&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d_body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d_con&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;margin-top问题&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;解决margin-top的三种方法示例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b16254c0-5f13-4705-a1c8-0ebe2fb36526')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_b16254c0-5f13-4705-a1c8-0ebe2fb36526&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b16254c0-5f13-4705-a1c8-0ebe2fb36526&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b16254c0-5f13-4705-a1c8-0ebe2fb36526',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b16254c0-5f13-4705-a1c8-0ebe2fb36526&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;margin-top塌陷&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d_body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;height: 200px;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; yellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;padding-top: 100px;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;border: 1px solid #000;  !* 第一种解决margin-top的方法：给外部盒子设置一个边框 *!&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;overflow: hidden;   !/*第二种解决margin-top的方法：给外部盒子设置 overflow:hidden*!/  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .clearfix &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; table&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 第三种解决margin-top的方法：使用伪元素类 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        .d_con &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; gray&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d_body clearfix&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d_con&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;解决margin-top的三种方法&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;元素溢出&lt;/h2&gt;
&lt;p&gt;css元素溢出&lt;br/&gt;&lt;strong&gt;当子元素的尺寸超过父元素的尺寸时，就会出现元素溢出&lt;/strong&gt;，需要设置父元素显示溢出的子元素的方式，设置的方法是通过overflow属性来设置。&lt;/p&gt;
&lt;p&gt;overflow的设置项：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;visible 默认值。内容不会被修剪，会呈现在元素框之外。&lt;/li&gt;
&lt;li&gt;hidden 仅显示父元素尺寸内内容，超出的内容不可见；此属性还有清除浮动、清除margin-top塌陷的功能。&lt;/li&gt;
&lt;li&gt;scroll 不管元素是否溢出，都以滚动条的形式显示。&lt;/li&gt;
&lt;li&gt;auto 如果元素溢出，则以滚动条的形式显示。&lt;/li&gt;
&lt;li&gt;inherit 从父元素继承 overflow 属性的值，很少用。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5682536e-6fbe-4b34-9049-a704e1c0ecd1')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_5682536e-6fbe-4b34-9049-a704e1c0ecd1&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5682536e-6fbe-4b34-9049-a704e1c0ecd1&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5682536e-6fbe-4b34-9049-a704e1c0ecd1',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5682536e-6fbe-4b34-9049-a704e1c0ecd1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;元素溢出&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;margin: 50px auto 0;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;overflow: hidden;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    5.1图片
    1.gif图片：最大颜色数256，保存时采用无损压缩
    2.JPEG图片:可以包含1670万种颜色，保存时采用有损压缩，压缩率小的质量更高。
    为了避免图片因压缩率过高而导致的像素化，一般使用PS或Adobe
    Fireworks优化。 另一个优化的办法就是使用图片的缩小版本，成为缩略图，一般将缩略图配置成图片链接，点击可显示更大尺寸的图片
    3.PNG图片：“可移植网络图形”，结合了上面两者的优势，且支持无损压缩。
    4.WebP图片格式
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;元素溢出auto参数使用示例&lt;/span&gt;&lt;/div&gt;


&lt;h2&gt;块元素-内联元素-内联块元素&lt;/h2&gt;
&lt;p&gt;块元素、内联元素、内联块元素&lt;br/&gt;元素就是标签，布局中常用的有三种标签，块元素、内联元素、内联块元素，了解这三种元素的特性，才能熟练的进行页面布局。&lt;/p&gt;
&lt;h3&gt;块元素&lt;/h3&gt;
&lt;p&gt;块元素，也可以称为行元素，布局中常用的标签如：div、p、ul、li、h1~h6、dl、dt、dd 等等都是块元素。&lt;br/&gt;它在布局中的行为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;支持全部的样式&lt;/li&gt;
&lt;li&gt;如果没有设置宽度，默认的宽度为父级宽度100%&lt;/li&gt;
&lt;li&gt;盒子占据一行，即使设置了宽度；(这句话的理解是，即使设置了宽高，也独占一行，不会让其他的元素浮动过来共享一行)&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;内联元素&lt;/h3&gt;
&lt;p&gt;内联元素，也可以称为行内元素，布局中常用的标签如：a、span、em、b、strong、i等等都是内联元素。&lt;br/&gt;它们在布局中的行为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;支持部分样式（不支持宽、高、margin上下、padding上下）&lt;/li&gt;
&lt;li&gt;宽高由内容决定&lt;/li&gt;
&lt;li&gt;盒子并在一行&lt;/li&gt;
&lt;li&gt;代码换行，盒子之间会产生间距&lt;/li&gt;
&lt;li&gt;子元素是内联元素，父元素可以用text-align属性设置子元素水平对齐方式，用line-height属性值设置垂直对齐方式&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;解决内联元素间隙的方法&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;去掉内联元素之间的换行&lt;/li&gt;
&lt;li&gt;将内联元素的父级设置font-size为0，内联元素自身再设置font-size&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;内联块元素/行内元素&lt;/h3&gt;
&lt;p&gt;内联块元素，也叫行内块元素，是新增的元素类型，现有元素没有归于此类别的，img和input元素的行为类似这种元素，但是也归类于内联元素，&lt;br/&gt;我们可以用display属性将块元素或者内联元素转化成这种元素。&lt;br/&gt;它们在布局中表现的行为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;支持全部样式&lt;/li&gt;
&lt;li&gt;如果没有设置宽高，宽高由内容决定&lt;/li&gt;
&lt;li&gt;盒子并在一行&lt;/li&gt;
&lt;li&gt;代码换行，盒子会产生间距&lt;/li&gt;
&lt;li&gt;子元素是内联块元素，父元素可以用text-align属性设置子元素水平对齐方式，用line-height属性值设置子元素垂直对齐方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三种元素，可以通过display属性来相互转化，不过实际开发中，块元素用得比较多，所以我们经常把内联元素转化为块元素，&lt;br/&gt;少量转化为内联块，而要使用内联元素时，直接使用内联元素，而不用块元素转化了。&lt;/p&gt;

&lt;h3&gt;display属性&lt;/h3&gt;
&lt;p&gt;display属性是用来设置元素的类型及隐藏的，常用的属性有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;none 元素隐藏且不占位置&lt;/li&gt;
&lt;li&gt;block 元素以块元素显示&lt;/li&gt;
&lt;li&gt;inline 元素以内联元素显示&lt;/li&gt;
&lt;li&gt;inline-block 元素以内联块元素显示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;display=none的应用&lt;br/&gt;通过display=inline-block将div盒子放在一行；&lt;br/&gt;通过display=none实现鼠标移动到文字上显示图形，移开不显示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('658cb21d-335a-4f90-9514-b95a1a5c42c9')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_658cb21d-335a-4f90-9514-b95a1a5c42c9&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_658cb21d-335a-4f90-9514-b95a1a5c42c9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('658cb21d-335a-4f90-9514-b95a1a5c42c9',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_658cb21d-335a-4f90-9514-b95a1a5c42c9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;经过文字显示界面&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1_1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; yellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1:hover .d1_1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;数码产品&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;display=none实现鼠标移动到文字上显示图形，移开不显示&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;浮动&lt;/h2&gt;
&lt;h3&gt;文档流&lt;/h3&gt;
&lt;p&gt;文档流，是指盒子按照html标签编写的顺序依次从上到下，从左到右排列，块元素占一行，行内元素在一行之内从左到右排列，先写的先排列，后写的排在后面，每个盒子都占据自己的位置。&lt;/p&gt;
&lt;h3&gt;浮动特性&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;浮动元素有左浮动(float:left)和右浮动(float:right)两种&lt;/li&gt;
&lt;li&gt;浮动的元素会向左或向右浮动，碰到父元素边界、浮动元素、未浮动的元素才停下来&lt;/li&gt;
&lt;li&gt;相邻浮动的块元素可以并在一行，超出父级宽度就换行&lt;/li&gt;
&lt;li&gt;浮动让行内元素或块元素自动转化为行内块元素&lt;/li&gt;
&lt;li&gt;浮动元素后面没有浮动的元素会占据浮动元素的位置，没有浮动的元素内的文字会避开浮动的元素，形成文字饶图的效果&lt;/li&gt;
&lt;li&gt;父元素内整体浮动的元素无法撑开父元素，需要清除浮动&lt;/li&gt;
&lt;li&gt;浮动元素之间没有垂直margin的合并&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;浮动示例&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.利用浮动形成左右对峙的两个盒子&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d6f88162-ea3c-4585-8f5f-de567be81353')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_d6f88162-ea3c-4585-8f5f-de567be81353&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d6f88162-ea3c-4585-8f5f-de567be81353&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d6f88162-ea3c-4585-8f5f-de567be81353',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d6f88162-ea3c-4585-8f5f-de567be81353&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;浮动&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1 div &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; right&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;利用浮动形成左右对峙的两个盒子&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 对峙盒子效果图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1618401/201905/1618401-20190519194300908-440202583.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.上面盒子浮动，下面盒子不浮动&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('773186ed-f4db-4d05-a08f-e6db5863da05')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_773186ed-f4db-4d05-a08f-e6db5863da05&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_773186ed-f4db-4d05-a08f-e6db5863da05&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('773186ed-f4db-4d05-a08f-e6db5863da05',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_773186ed-f4db-4d05-a08f-e6db5863da05&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;文字饶图&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 450px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 210px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .pic &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .text &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 130px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;pic&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;上面盒子浮动，下面盒子不浮动&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;上面浮动下面不浮动效果图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1618401/201905/1618401-20190519194538696-112435993.png&quot; alt=&quot;&quot; width=&quot;465&quot; height=&quot;227&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本来两个盒子各占一行，我们将上面的红色盒子浮动后，蓝色盒子会和红色盒子重叠，且在最左上角部分，红色覆盖蓝色。&lt;br/&gt;如果未浮动的元素中有文字，我们将背景色去掉，就会形成文字饶图的情况；此外，我们也可以给浮动的块设置margin，控制文字离它的距离。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.文字饶图示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0a35ed3a-d6b2-4699-ba53-3db41fa681c5')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_0a35ed3a-d6b2-4699-ba53-3db41fa681c5&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0a35ed3a-d6b2-4699-ba53-3db41fa681c5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0a35ed3a-d6b2-4699-ba53-3db41fa681c5',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0a35ed3a-d6b2-4699-ba53-3db41fa681c5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;文字饶图&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 450px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 210px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .pic &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .text &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 130px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;float: left;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;pic&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        哪怕是水龙宗修行水法的看门修士，都无法发现有那一粒粒金光从诸多匾额当中掠出，飘落在地，如萤火攒聚，
        合拢成为一位高冠博带的少年，大步走入城门，看守城门的水龙宗修士便有些不知所措，
        这是千年未有的异象，便立即飞剑传讯北宗祖师堂。
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;文字饶图示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;文字饶图效果图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1618401/201905/1618401-20190519194902729-883599057.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.用列表制作菜单&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首页验收标准大概在3个像素之内，其余页面在5个像素之内即可。&lt;br/&gt;一般菜单都是用ul+li+a来制作的，而不是用div+a制作的；&lt;br/&gt;去掉列表的小圆点：list-style: none;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8eb65e43-c5b6-4bba-b37d-0c63e0ef154a')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_8eb65e43-c5b6-4bba-b37d-0c63e0ef154a&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8eb65e43-c5b6-4bba-b37d-0c63e0ef154a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8eb65e43-c5b6-4bba-b37d-0c63e0ef154a',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8eb65e43-c5b6-4bba-b37d-0c63e0ef154a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;菜单&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .menu &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 694px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;background-color: aqua;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 去掉无序列表的小圆点 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .menu li &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 98px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 48px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #000&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; gray&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;display: inline-block;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -1px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .menu li a &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;background-color: yellow;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 只需将a链接转换为块标签，再加上hover，就可以实现鼠标移到块上，就整体变色，原来是必须a标签上 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 98px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 48px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 将a标签里面的文字水平居中 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            line-height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 48px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 将a标签里面的文字垂直居中 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            text-decoration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 16px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-family&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;Microsoft YaHei&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .menu li a:hover &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;ul.menu&amp;gt;(li&amp;gt;a{公司简介})*7&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;menu&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;公司简介&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;公司简介&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;公司简介&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;公司简介&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;公司简介&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;公司简介&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;公司简介&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;用列表制作菜单&lt;/span&gt;&lt;/div&gt;

&lt;h3&gt;清除浮动&lt;/h3&gt;
&lt;p&gt;清除浮动的方法：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;父级上增加属性overflow：hidden&lt;/li&gt;
&lt;li&gt;在最后一个子元素的后面加一个空的div，给它样式属性 clear:both（不推荐）&lt;/li&gt;
&lt;li&gt;使用成熟的清浮动样式类，clearfix&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.clearfix:after,.clearfix:before&lt;/span&gt;{&lt;span&gt; content&lt;/span&gt;:&lt;span&gt; &quot;&quot;&lt;/span&gt;;&lt;span&gt;display&lt;/span&gt;:&lt;span&gt; table&lt;/span&gt;;}&lt;span&gt;
.clearfix:after&lt;/span&gt;{&lt;span&gt; clear&lt;/span&gt;:&lt;span&gt;both&lt;/span&gt;;}&lt;span&gt;
.clearfix&lt;/span&gt;{&lt;span&gt;zoom&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;;}&lt;span&gt;
清除浮动的使用方法：
.con2&lt;/span&gt;{&lt;span&gt;... overflow&lt;/span&gt;:&lt;span&gt;hidden&lt;/span&gt;}&lt;span&gt;
或者
&amp;lt;div class=&quot;con2 clearfix&quot;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;需要&lt;strong&gt;清除浮动的场景&lt;/strong&gt;：1.&lt;strong&gt;元素浮动&lt;/strong&gt;；2.&lt;strong&gt;父级元素未设置高度&lt;/strong&gt;。&lt;br/&gt;在一个div里面，设置边框且不设置高，全部放浮动的元素，会发现上下两条边会合在一起，这是因为浮动的元素撑不起盒子；&lt;/p&gt;
&lt;p&gt;.clearfix {zoom: 1;} /* 解决在ie浏览器中可能无法清除浮动的问题 */&lt;/p&gt;
&lt;p&gt;清除浮动的方法示例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2f2f6c16-3df7-4912-b7b9-4d084daac097')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_2f2f6c16-3df7-4912-b7b9-4d084daac097&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2f2f6c16-3df7-4912-b7b9-4d084daac097&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2f2f6c16-3df7-4912-b7b9-4d084daac097',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2f2f6c16-3df7-4912-b7b9-4d084daac097&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;清除浮动&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .list &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 210px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;overflow: hidden;  !* 第一种清除浮动的方法，有一定问题 *!&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .list li &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; gray&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!* 第三种清除浮动的标准方法，合并前 *!&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;.clearfix:after {  !* 清除浮动 *!&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;content: &quot;&quot;;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;display: table;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;clear: both;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;.clearfix:before {  !* 清除margin-top塌陷 *!&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;content: &quot;&quot;;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;display: table;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 第三种清除浮动的标准方法，给父级元素添加clearfix；
        类似于第二种方法；我们一般将清除浮动和解决margin-top合在一起 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        .clearfix:after, .clearfix:before &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; table&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .clearfix:after &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            clear&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; both&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .clearfix &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;zoom&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 解决在ie浏览器中可能无法清除浮动的问题 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;ul.list&amp;gt;li{$}*8&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list clearfix&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 第二种清除浮动的方法，以前使用的，现在不推荐使用 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;div style=&quot;clear: both&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;清除浮动的方法示例&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;定位&lt;/h2&gt;
&lt;h3&gt;关于定位&lt;/h3&gt;
&lt;p&gt;我们可以使用css的position属性来设置元素的定位类型，postion的设置项如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;relative 生成相对定位元素，元素所占据的文档流的位置不变，元素本身相对文档流的位置进行偏移&lt;/li&gt;
&lt;li&gt;absolute 生成绝对定位元素，元素脱离文档流，不占据文档流的位置，可以理解为漂浮在文档流的上方，相对于上一个设置了相对或者绝对或者固定定位的父级元素来进行定位，如果找不到，则相对于body元素进行定位。&lt;/li&gt;
&lt;li&gt;fixed 生成固定定位元素，元素脱离文档流，不占据文档流的位置，可以理解为漂浮在文档流的上方，相对于浏览器窗口进行定位。&lt;/li&gt;
&lt;li&gt;static 默认值，没有定位，元素出现在正常的文档流中，相当于取消定位属性或者不设置定位属性&lt;/li&gt;
&lt;li&gt;inherit 从父元素继承 position 属性的值&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;定位元素特性&lt;/h3&gt;
&lt;p&gt;绝对定位和固定定位的块元素和行内元素会自动转化为行内块元素&lt;/p&gt;
&lt;h3&gt;定位元素层级&lt;/h3&gt;
&lt;p&gt;定位元素是浮动的正常的文档流之上的，可以用z-index属性来设置元素的层级；层级最高，就浮动在最上面。&lt;br/&gt;关于层级，后写的标签默认会漂浮在先写的标签的上面，即后写的默认层级最高。&lt;/p&gt;
&lt;h3&gt;典型定位布局&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;固定在顶部的菜单&lt;/li&gt;
&lt;li&gt;水平垂直居中的弹框&lt;/li&gt;
&lt;li&gt;固定的侧边的工具栏&lt;/li&gt;
&lt;li&gt;固定在底部的按钮&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;应注意，相对定位后，元素所占据的文档流的位置不变，这句话可以理解为一个萝卜一个坑，而有一个萝卜飘起来了，但那个坑还是它占着。&lt;br/&gt;相对定位较少使用，一般是和绝对定位配合使用，用作绝对定位的父级定位标签；&lt;/p&gt;
&lt;p&gt;要使用绝对定位，先设置父级定位，如果父级不需要偏移，只需要设置一个相对定位 position: relative;即可。&lt;br/&gt;固定定位只相对于浏览器窗口进行定位，不因父级定位了而改变定位的地点。&lt;/p&gt;
&lt;p&gt;绝对定位示例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e9d74b2c-f561-4e8c-9248-afae9a17d161')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_e9d74b2c-f561-4e8c-9248-afae9a17d161&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e9d74b2c-f561-4e8c-9248-afae9a17d161&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e9d74b2c-f561-4e8c-9248-afae9a17d161',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e9d74b2c-f561-4e8c-9248-afae9a17d161&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;定位&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_1, .d1_2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;绝对定位示例&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;相对定位实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('cbc30420-6b81-48b4-bc78-219fcb3fb9df')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_cbc30420-6b81-48b4-bc78-219fcb3fb9df&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cbc30420-6b81-48b4-bc78-219fcb3fb9df&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('cbc30420-6b81-48b4-bc78-219fcb3fb9df',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cbc30420-6b81-48b4-bc78-219fcb3fb9df&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;定位&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_1, .d1_2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;固定定位实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a8be9b9d-b759-44ae-8122-c4f60d51b44c')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_a8be9b9d-b759-44ae-8122-c4f60d51b44c&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a8be9b9d-b759-44ae-8122-c4f60d51b44c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a8be9b9d-b759-44ae-8122-c4f60d51b44c',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a8be9b9d-b759-44ae-8122-c4f60d51b44c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;定位&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_1, .d1_2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; fixed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;定位元素的层级示例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d4dcbac0-56ce-4ded-a150-78ac4f73a593')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_d4dcbac0-56ce-4ded-a150-78ac4f73a593&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d4dcbac0-56ce-4ded-a150-78ac4f73a593&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d4dcbac0-56ce-4ded-a150-78ac4f73a593',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d4dcbac0-56ce-4ded-a150-78ac4f73a593&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;定位元素的层级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1 div &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; z-index&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_3 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; green&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60px&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_4 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; yellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;消息提示示例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5906e641-807f-4e66-9403-036f3c90117e')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_5906e641-807f-4e66-9403-036f3c90117e&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5906e641-807f-4e66-9403-036f3c90117e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5906e641-807f-4e66-9403-036f3c90117e',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5906e641-807f-4e66-9403-036f3c90117e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;消息提示&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; yellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 14px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 将方块盒子设置成方块圆角盒子 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 28px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 28px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; white&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            line-height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 28px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 86px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -14px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 14px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 将方块盒子设置成圆形盒子 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;


&lt;p&gt;02：定位实例-固定在顶部的菜单栏-丐版&lt;br/&gt;让浮动元素居中：用margin的auto没有用，先使用left=50%，再用margin-left= - 浮动元素宽度的一半；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c07e39b1-dff5-4895-b546-aacaecdb63bc')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_c07e39b1-dff5-4895-b546-aacaecdb63bc&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c07e39b1-dff5-4895-b546-aacaecdb63bc&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c07e39b1-dff5-4895-b546-aacaecdb63bc',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c07e39b1-dff5-4895-b546-aacaecdb63bc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;菜单置顶&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .menu &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; fixed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 960px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; gray&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 让菜单置顶 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -480px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 让菜单水平居中 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;menu&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;菜单文字&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;长文字&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;...&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;长文字&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;弹框-丐版的实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('43dda757-7f08-4553-a18c-ea964f3125f5')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_43dda757-7f08-4553-a18c-ea964f3125f5&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_43dda757-7f08-4553-a18c-ea964f3125f5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('43dda757-7f08-4553-a18c-ea964f3125f5',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_43dda757-7f08-4553-a18c-ea964f3125f5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;弹框&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1_1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 500px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; gray&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; white&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; fixed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -251px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 让丐版水平居中 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -151px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 让丐版垂直居中 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            z-index&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 999&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1_1 h2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .mask &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 作用是当丐版出现后将丐版以外的内容虚化从而突出丐版 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; fixed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0.3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置全屏透明度 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            z-index&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 998&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 控制丐版的出现与否 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1_1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;弹框标题&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mask&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;background属性&lt;/h2&gt;
&lt;h3&gt;属性解释&lt;/h3&gt;
&lt;p&gt;&lt;br/&gt;background属性是css中应用比较多，且比较重要的一个属性，它是负责给盒子设置背景图片和背景颜色的，background是一个复合属性。&lt;/p&gt;
&lt;p&gt;它可以分解成如下几个设置项：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;background-color 设置背景颜色&lt;/li&gt;
&lt;li&gt;background-image 设置背景图片地址&lt;/li&gt;
&lt;li&gt;background-repeat 设置背景图片如何重复平铺&lt;/li&gt;
&lt;li&gt;background-position 设置背景图片的位置&lt;/li&gt;
&lt;li&gt;background-attachment 设置背景图片是固定还是随着页面滚动条滚动&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;实际应用中，我们可以用background属性将上面所有的设置项放在一起，而且也建议这么做，这样做性能更高，而且兼容性更好，比如：“background: #00FF00 url(bgimage.gif) no-repeat left center fixed”，这里面的“#00ff00”是设置background-color；“url(bgimage.gif)”是设置background-image；“no-repeat”是设置background-repeat；“left center”是设置background-position；“fixed”是设置background-attachment，各个设置项用空格隔开，有的设置项不写也是可以的，它会使用默认值。&lt;/p&gt;
&lt;p&gt;背景属性示例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('56b3dd64-20a9-4b90-a2c1-34b096536c8d')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_56b3dd64-20a9-4b90-a2c1-34b096536c8d&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_56b3dd64-20a9-4b90-a2c1-34b096536c8d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('56b3dd64-20a9-4b90-a2c1-34b096536c8d',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_56b3dd64-20a9-4b90-a2c1-34b096536c8d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;background属性&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; url(../images/bg.jpg)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 默认直接平铺满整个屏幕 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; repeat-x 只铺满x轴；
            repeat-y 只铺满y轴；
            no-repeat 只平铺一次;
            repeat 平铺所有；
            &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            background-repeat&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; no-repeat&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 铺满x轴 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 在no-repeat的情况下，
             left top：平铺在左上角
             left center：平铺在左边的中间
             left bottom：平铺在左边的下面
             center top：平铺在水平方向中间的顶部；
             right center：平铺在右边的中间；
             所以组合起来共九种方式。
             &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;background-position: center center;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 除了用上中下之外，还能用数字类似于定位 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            background-position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -20px 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;background: url(../images/bg.jpg) -20px 10px no-repeat aqua;  !* background参数合并写法，可以只写一两个 *!&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;img src=&quot;../images/bg.jpg&quot; alt=&quot;html5图片&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;
    html5图片
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;大图放小框示例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c0645783-679c-43ba-b003-444bead67fd0')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_c0645783-679c-43ba-b003-444bead67fd0&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c0645783-679c-43ba-b003-444bead67fd0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c0645783-679c-43ba-b003-444bead67fd0',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c0645783-679c-43ba-b003-444bead67fd0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;大图放小框&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2px solid black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;

            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; url(../images/location_bg.jpg) -103px -150px no-repeat&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;在调试时，可以通过在浏览器上点击检查，点击右边的css样式，进入调试模式来确定合适的数值；&lt;/p&gt;

&lt;p&gt;雪碧图列表背景&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('985f63fc-b80b-4f53-bedf-f83e2631fc51')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_985f63fc-b80b-4f53-bedf-f83e2631fc51&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_985f63fc-b80b-4f53-bedf-f83e2631fc51&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('985f63fc-b80b-4f53-bedf-f83e2631fc51',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_985f63fc-b80b-4f53-bedf-f83e2631fc51&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;雪碧图列表的使用&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .list &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 305px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;background-color: aqua;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .list li &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border-bottom&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px dotted black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            line-height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            text-indent&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; url(../images/bg01.png) left 10px no-repeat&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .list .icon02 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background-position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left -71px&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .list .icon03 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background-position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left -153px&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .list .icon04 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background-position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left -235px&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .list .icon05 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background-position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left -317px&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;ul.list&amp;gt;li{美人鱼}*5&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;美人鱼&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;icon02&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;美人鱼&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;icon03&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;美人鱼&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;icon04&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;美人鱼&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;icon05&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;美人鱼&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;网页背景固定&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e6740f7e-73cb-4dd5-aec8-7a90e54a1d1f')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_e6740f7e-73cb-4dd5-aec8-7a90e54a1d1f&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e6740f7e-73cb-4dd5-aec8-7a90e54a1d1f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e6740f7e-73cb-4dd5-aec8-7a90e54a1d1f',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e6740f7e-73cb-4dd5-aec8-7a90e54a1d1f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;网页背景固定&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .d1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;background-attachment: fixed;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; url(../images/0022.jpg) no-repeat fixed 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        p &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;d1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;文字内容&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    ......
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;文字内容&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;文字内容&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 19 May 2019 15:15:00 +0000</pubDate>
<dc:creator>YifChan</dc:creator>
<og:description>前端之CSS2，内容包括 CSS盒子模型， 块元素-内联元素-内联块元素 ，浮动，定位，background属性。其中，CSS盒子模型 包括 CSS盒子模型介绍，设置边框，设置内间距padding，设</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yifchan/p/html-1-3.html</dc:identifier>
</item>
<item>
<title>GIL 已经被杀死了么？ - 豌豆花下猫</title>
<link>http://www.cnblogs.com/pythonista/p/10891419.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pythonista/p/10891419.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1g370mm4echj21g80x6wj7.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本文原创并首发于公众号【&lt;strong&gt;Python猫&lt;/strong&gt;】，未经授权，请勿转载。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://mp.weixin.qq.com/s/8KvQemz0SWq2hw-2aBPv2Q&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s/8KvQemz0SWq2hw-2aBPv2Q&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;花下猫语：&lt;/strong&gt; Python 中最广为人诟病的一点，大概就是它的 GIL 了。由于 GIL 的存在，Python 无法实现真正的多线程编程，因此很多人都把这视作 Python 最大的软肋。&lt;/p&gt;
&lt;p&gt;PEP-554 提出后（2017年9月），大伙似乎看到了一线改善的曙光。然而，GIL 真的可以被彻底杀死么，如果可以的话，它会怎么实现呢，为什么等了一年多还没实现，仍需要我们等待多长时间呢？&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;英文&lt;/strong&gt; | &lt;a href=&quot;https://hackernoon.com/has-the-python-gil-been-slain-9440d28fa93d&quot;&gt;Has the Python GIL been slain?&lt;/a&gt;【1】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt; | Anthony Shaw&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;译者&lt;/strong&gt; | 豌豆花下猫&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;声明&lt;/strong&gt; ：本文获得原作者授权翻译，转载请保留原文出处，请勿用于商业或非法用途。&lt;/p&gt;
&lt;p&gt;2003 年初，Intel 公司推出了全新的奔腾 4 “HT” 处理器，该处理器的主频（译注：CPU 内核工作的时钟频率）为 3 GHz，采用了“超线程”技术。&lt;/p&gt;
&lt;p&gt;在接下来的几年中，Intel 和 AMD 激烈竞争，通过提高总线速度、L2 缓存大小和减小芯片尺寸以最大限度地减少延迟，努力地实现最佳的台式机性能。3Ghz 的 HT 在 2004 年被“Prescott”的 580 型号取代，该型号的主频高达 4 GHz。&lt;/p&gt;
&lt;p&gt;似乎提升性能的最好方法就是提高处理器的主频，但 CPU 却受到高功耗和散热会影响全球变暖的困扰。&lt;/p&gt;
&lt;p&gt;你电脑上有 4Ghz 的 CPU 吗？不太可能，因为性能的前进方式是更高的总线速度和更多的内核。Intel 酷睿 2 代在 2006 年取代了奔腾 4 ，主频远低于此。&lt;/p&gt;
&lt;p&gt;除了发布消费级的多核 CPU，2006 年还发生了其它事情，Python 2.5 发布了！Python 2.5 带来了人见人爱的 with 语句的 beta 版本 。&lt;/p&gt;
&lt;p&gt;在使用 Intel 的酷睿 2 或 AMD 的 Athlon X2 时，Python 2.5 有一个重要的限制——&lt;strong&gt;GIL&lt;/strong&gt; 。&lt;/p&gt;
&lt;h2 id=&quot;什么是-gil&quot;&gt;什么是 GIL？&lt;/h2&gt;
&lt;p&gt;GIL 即全局解释器锁（Global Interpreter Lock），是 Python 解释器中的一个布尔值，受到互斥保护。这个锁被 CPython 中的核心字节码用来评估循环，并调节用来执行语句的当前线程。&lt;/p&gt;
&lt;p&gt;CPython 支持在单个解释器中使用多线程，但线程们必须获得 GIL 的使用权才能执行操作码（做低级操作）。这样做的好处是，Python 开发人员在编写异步代码或多线程代码时，完全不必操心如何获取变量上的锁，也不需担心进程因为死锁而崩溃。&lt;/p&gt;
&lt;p&gt;GIL 使 Python 中的多线程编程变得简单。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1g370ngdgvfg206203ekjl.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;GIL 还意味着虽然 CPython 可以是多线程的，但在任何给定的时间里只能执行 1 个线程。这意味着你的四核 CPU 会像上图一样工作 （减去蓝屏，但愿如此）。&lt;/p&gt;
&lt;p&gt;当前版本的 GIL &lt;a href=&quot;https://github.com/python/cpython/commit/074e5ed974be65fbcfe75a4c0529dbc53f13446f&quot;&gt;是在2009年编写的&lt;/a&gt; 【2】，用于支持异步功能，几乎没被改动地存活了下来，即使曾经多次试图删除它或减少对它的依赖。&lt;/p&gt;
&lt;p&gt;所有提议移除 GIL 的诉求是，它不应该降低单线程代码的性能。任何曾在 2003 年启用超线程（Hyper-Threading）的人都会明白为什么 &lt;a href=&quot;https://arstechnica.com/features/2002/10/hyperthreading&quot;&gt;这很重要&lt;/a&gt; 【3】。&lt;/p&gt;
&lt;h2 id=&quot;在-cpython-中避免使用-gil&quot;&gt;在 CPython 中避免使用 GIL&lt;/h2&gt;
&lt;p&gt;如果你想在 CPython 中使用真正的并发代码，则必须使用多进程。&lt;/p&gt;
&lt;p&gt;在 CPython 2.6 中，标准库里增加了 &lt;code&gt;multiprocessing&lt;/code&gt; 模块。multiprocessing 是 CPython 大量产生的进程的包装器（每个进程都有自己的GIL）——&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from multiprocessing import Process

def f(name):
    print 'hello', name

if __name__ == '__main__':
    p = Process(target=f, args=('bob',))
    p.start()
    p.join()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;进程可以从主进程中“孵出”，通过编译好的 Python 模块或函数发送命令，然后重新纳入主进程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;multiprocessing&lt;/code&gt; 模块还支持通过队列或管道共享变量。它有一个 Lock 对象，用于锁定主进程中的对象，以便其它进程能够写入。&lt;/p&gt;
&lt;p&gt;多进程有一个主要的缺陷：它在时间和内存使用方面的开销很大。CPython 的启动时间，即使没有非站点（no-site），也是 100-200ms（参见 &lt;a href=&quot;https://hackernoon.com/which-is-the-fastest-version-of-python-2ae7c61a6b2b&quot;&gt;这个链接&lt;/a&gt;【4】）。&lt;/p&gt;
&lt;p&gt;因此，你可以在 CPython 中使用并发代码，但是你必须仔细规划那些长时间运行的进程，这些进程之间极少共享对象。&lt;/p&gt;
&lt;p&gt;另一种替代方案是使用像 Twisted 这样的三方库。&lt;/p&gt;
&lt;h2 id=&quot;pep-554-与-gil-的死亡&quot;&gt;PEP-554 与 GIL 的死亡？&lt;/h2&gt;
&lt;p&gt;小结一下，CPython 中使用多线程很容易，但它并不是真正的并发，多进程虽然是并发的，但开销却极大。&lt;/p&gt;
&lt;p&gt;有没有更好的方案呢？&lt;/p&gt;
&lt;p&gt;绕过 GIL 的线索就在其名称中，全局 &lt;strong&gt;解释器&lt;/strong&gt; 锁是全局解释器状态的一部分。 CPython 的进程可以有多个解释器，因此可以有多个锁，但是此功能很少使用，因为它只通过 C-API 公开。&lt;/p&gt;
&lt;p&gt;在为 CPython 3.8 提出的特性中有个 PEP-554，提议实现子解释器（sub-interpreter），以及在标准库中提供一个新的带有 API 的 &lt;code&gt;interpreters&lt;/code&gt; 模块。&lt;/p&gt;
&lt;p&gt;这样就可以在 Python 的单个进程中创建出多个解释器。Python 3.8 的另一个改动是解释器都将拥有单独的 GIL ——&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1g36pomvthkj20qo0f03z1.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为解释器的状态包含内存分配竞技场（memory allocation arena），即所有指向 Python 对象（局地和全局）的指针的集合，所以 PEP-554 中的子解释器无法访问其它解释器的全局变量。&lt;/p&gt;
&lt;p&gt;与多进程类似，在解释器之间共享对象的方法是采用 IPC 的某种形式（网络、磁盘或共享内存）来做序列化。在 Python 中有许多方法可以序列化对象，例如 &lt;code&gt;marshal&lt;/code&gt; 模块、 &lt;code&gt;pickle&lt;/code&gt; 模块、以及像 &lt;code&gt;json&lt;/code&gt; 和 &lt;code&gt;simplexml&lt;/code&gt; 这样更标准化的方法 。这些方法褒贬不一，但无一例外会造成额外的开销。&lt;/p&gt;
&lt;p&gt;最佳方案是开辟一块共享的可变的内存空间，由主进程来控制。这样的话，对象可以从主解释器发送，并由其它解释器接收。这将是 PyObject 指针的内存管理空间，每个解释器都可以访问它，同时由主进程拥有对锁的控制权。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bgy1g36po4sjxqj20qo0f0aar.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样的 API 仍在制定中，但它可能如下所示：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import _xxsubinterpreters as interpreters
import threading
import textwrap as tw
import marshal

# Create a sub-interpreter
interpid = interpreters.create()

# If you had a function that generated some data
arry = list(range(0,100))

# Create a channel
channel_id = interpreters.channel_create()

# Pre-populate the interpreter with a module
interpreters.run_string(interpid, &quot;import marshal; import _xxsubinterpreters as interpreters&quot;)

# Define a
def run(interpid, channel_id):
    interpreters.run_string(interpid,
                            tw.dedent(&quot;&quot;&quot;
        arry_raw = interpreters.channel_recv(channel_id)
        arry = marshal.loads(arry_raw)
        result = [1,2,3,4,5] # where you would do some calculating
        result_raw = marshal.dumps(result)
        interpreters.channel_send(channel_id, result_raw)
        &quot;&quot;&quot;),
               shared=dict(
                   channel_id=channel_id
               ),
               )

inp = marshal.dumps(arry)
interpreters.channel_send(channel_id, inp)

# Run inside a thread
t = threading.Thread(target=run, args=(interpid, channel_id))
t.start()

# Sub interpreter will process. Feel free to do anything else now.
output = interpreters.channel_recv(channel_id)
interpreters.channel_release(channel_id)
output_arry = marshal.loads(output)

print(output_arry)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此示例使用了 numpy ，并通过使用 marshal 模块对其进行序列化来在通道上发送 numpy 数组 ，然后由子解释器来处理数据（在单独的 GIL 上），因此这会是一个计算密集型（CPU-bound）的并发问题，适合用子解释器来处理。&lt;/p&gt;
&lt;h2 id=&quot;这看起来效率低下&quot;&gt;这看起来效率低下&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;marshal&lt;/code&gt; 模块相当快，但仍不如直接从内存中共享对象那样快。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0574/&quot;&gt;PEP-574 提出了一种新的 pickle&lt;/a&gt; 【5】协议（v5），它支持将内存缓冲区与 pickle 流的其余部分分开处理。对于大型数据对象，将它们一次性序列化，再由子解释器反序列化，这会增加很多开销。&lt;/p&gt;
&lt;p&gt;新的 API 可以（ 假想 ，并没有合入）像这样提供接口：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import _xxsubinterpreters as interpreters
import threading
import textwrap as tw
import pickle

# Create a sub-interpreter
interpid = interpreters.create()

# If you had a function that generated a numpy array
arry = [5,4,3,2,1]

# Create a channel
channel_id = interpreters.channel_create()

# Pre-populate the interpreter with a module
interpreters.run_string(interpid, &quot;import pickle; import _xxsubinterpreters as interpreters&quot;)

buffers=[]

# Define a
def run(interpid, channel_id):
    interpreters.run_string(interpid,
                            tw.dedent(&quot;&quot;&quot;
        arry_raw = interpreters.channel_recv(channel_id)
        arry = pickle.loads(arry_raw)
        print(f&quot;Got: {arry}&quot;)
        result = arry[::-1]
        result_raw = pickle.dumps(result, protocol=5)
        interpreters.channel_send(channel_id, result_raw)
        &quot;&quot;&quot;),
                            shared=dict(
                                channel_id=channel_id,
                            ),
                            )

input = pickle.dumps(arry, protocol=5, buffer_callback=buffers.append)
interpreters.channel_send(channel_id, input)

# Run inside a thread
t = threading.Thread(target=run, args=(interpid, channel_id))
t.start()

# Sub interpreter will process. Feel free to do anything else now.
output = interpreters.channel_recv(channel_id)
interpreters.channel_release(channel_id)
output_arry = pickle.loads(output)

print(f&quot;Got back: {output_arry}&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;这看起来像极了很多样板&quot;&gt;这看起来像极了很多样板&lt;/h3&gt;
&lt;p&gt;确实，这个例子使用的是低级的子解释器 API。如果你使用了多进程库，你将会发现一些问题。它不像 &lt;code&gt;threading&lt;/code&gt; 那么简单，你不能想着在不同的解释器中使用同一串输入来运行同一个函数（目前还不行）。&lt;/p&gt;
&lt;p&gt;一旦合入了这个 PEP，我认为 PyPi 中的其它一些 API 也会采用它。&lt;/p&gt;
&lt;h2 id=&quot;子解释器需要多少开销&quot;&gt;子解释器需要多少开销？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;简版回答&lt;/strong&gt; ：大于一个线程，少于一个进程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;详版回答&lt;/strong&gt; ：解释器有自己的状态，因此虽然 PEP-554 可以使创建子解释器变得方便，但它还需要克隆并初始化以下内容：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在 &lt;strong&gt;main&lt;/strong&gt; 命名空间与 importlib 中的模块&lt;/li&gt;
&lt;li&gt;sys 字典的内容&lt;/li&gt;
&lt;li&gt;内置的方法（print、assert等等）&lt;/li&gt;
&lt;li&gt;线程&lt;/li&gt;
&lt;li&gt;核心配置&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;核心配置可以很容易地从内存克隆，但导入的模块并不那么简单。在 Python 中导入模块的速度很慢，因此，如果每次创建子解释器都意味着要将模块导入另一个命名空间，那么收益就会减少。&lt;/p&gt;
&lt;h3 id=&quot;那么-asyncio-呢&quot;&gt;那么 asyncio 呢？&lt;/h3&gt;
&lt;p&gt;标准库中 &lt;code&gt;asyncio&lt;/code&gt; 事件循环的当前实现是创建需要求值的帧（frame），但在主解释器中共享状态（因此共享 GIL）。&lt;/p&gt;
&lt;p&gt;在 PEP-554 被合入后，很可能是在 Python 3.9，事件循环的替代实现 &lt;strong&gt;可能&lt;/strong&gt; 是这样（尽管还没有人这样干）：在子解释器内运行 async 方法，因此会是并发的。&lt;/p&gt;
&lt;h2 id=&quot;听起来不错发货吧&quot;&gt;听起来不错，发货吧！&lt;/h2&gt;
&lt;p&gt;额，还不可以。&lt;/p&gt;
&lt;p&gt;因为 CPython 已经使用单解释器的实现方案很长时间了，所以代码库的许多地方都在使用“运行时状态”（Runtime State）而不是“解释器状态”（Interpreter State），所以假如要将当前的 PEP-554 合入的话，将会导致很多问题。&lt;/p&gt;
&lt;p&gt;例如，垃圾收集器（在 3.7 版本前）的状态就属于运行时。&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;PyCon sprint&lt;/strong&gt; 期间（译注：PyCon 是由 Python 社区举办的大型活动，作者指的是官方刚在美国举办的这场，时间是2019年5月1日至5月9日。sprint 是为期 1-4 天的活动，开发者们自愿加入某个项目，进行“冲刺”开发。该词被敏捷开发团队使用较多，含义与形式会略有不同），&lt;a href=&quot;https://github.com/python/cpython/pull/13219&quot;&gt;更改已经开始&lt;/a&gt; 【6】将垃圾收集器的状态转到解释器，因此每个子解释器将拥有它自己的 GC（本该如此）。&lt;/p&gt;
&lt;p&gt;另一个问题是在 CPython 代码库和许多 C 扩展中仍残存着一些“全局”变量。因此，当人们突然开始正确地编写并发代码时，我们可能会遭遇到一些问题。&lt;/p&gt;
&lt;p&gt;还有一个问题是文件句柄属于进程，因此当你在一个解释器中读写一个文件时，子解释器将无法访问该文件（不对 CPython 作进一步更改的话）。&lt;/p&gt;
&lt;p&gt;简而言之，还有许多其它事情需要解决。&lt;/p&gt;
&lt;h2 id=&quot;结论gil-死亡了吗&quot;&gt;结论：GIL 死亡了吗？&lt;/h2&gt;
&lt;p&gt;对于单线程的应用程序，GIL 仍然存活。因此，即便是合并了 PEP-554，如果你有单线程的代码，它也不会突然变成并发的。&lt;/p&gt;
&lt;p&gt;如果你想在 Python 3.8 中使用并发代码，那么你就会遇到计算密集型的并发问题，那么这可能是张入场券！&lt;/p&gt;
&lt;h2 id=&quot;什么时候&quot;&gt;什么时候？&lt;/h2&gt;
&lt;p&gt;Pickle v5 和用于多进程的共享内存可能是在 Python 3.8（2019 年 10 月）实现，子解释器将介于 3.8 和 3.9 之间。&lt;/p&gt;
&lt;p&gt;如果你现在想要使用我的示例，我已经构建了一个分支，其中包含所有 &lt;a href=&quot;https://github.com/tonybaloney/cpython/tree/subinterpreters&quot;&gt;必要的代码&lt;/a&gt;【7】&lt;/p&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;p&gt;[1] Has the Python GIL been slain? &lt;a href=&quot;https://hackernoon.com/has-the-python-gil-been-slain-9440d28fa93d&quot; class=&quot;uri&quot;&gt;https://hackernoon.com/has-the-python-gil-been-slain-9440d28fa93d&lt;/a&gt;&lt;br/&gt;[2] 是在2009年编写的: &lt;a href=&quot;https://github.com/python/cpython/commit/074e5ed974be65fbcfe75a4c0529dbc53f13446f&quot; class=&quot;uri&quot;&gt;https://github.com/python/cpython/commit/074e5ed974be65fbcfe75a4c0529dbc53f13446f&lt;/a&gt;&lt;br/&gt;[3] 这很重要: &lt;a href=&quot;https://arstechnica.com/features/2002/10/hyperthreading&quot; class=&quot;uri&quot;&gt;https://arstechnica.com/features/2002/10/hyperthreading&lt;/a&gt;&lt;br/&gt;[4] 这个链接 : &lt;a href=&quot;https://hackernoon.com/which-is-the-fastest-version-of-python-2ae7c61a6b2b&quot; class=&quot;uri&quot;&gt;https://hackernoon.com/which-is-the-fastest-version-of-python-2ae7c61a6b2b&lt;/a&gt;&lt;br/&gt;[5] PEP-574 提出了一种新的 pickle : &lt;a href=&quot;https://www.python.org/dev/peps/pep-0574/&quot; class=&quot;uri&quot;&gt;https://www.python.org/dev/peps/pep-0574/&lt;/a&gt;&lt;br/&gt;[6] 更改已经开始: &lt;a href=&quot;https://github.com/python/cpython/pull/13219&quot; class=&quot;uri&quot;&gt;https://github.com/python/cpython/pull/13219&lt;/a&gt;&lt;br/&gt;[7] 必要的代码 : &lt;a href=&quot;https://github.com/tonybaloney/cpython/tree/subinterpreters&quot; class=&quot;uri&quot;&gt;https://github.com/tonybaloney/cpython/tree/subinterpreters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/68b02e3bly1g2aiq1kpa8j21hc0nmgs4.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;公众号【&lt;strong&gt;Python猫&lt;/strong&gt;】， 本号连载优质的系列文章，有喵星哲学猫系列、Python进阶系列、好书推荐系列、技术写作、优质英文推荐与翻译等等，欢迎关注哦。后台回复“&lt;strong&gt;爱学习&lt;/strong&gt;”，免费获得一份学习大礼包。&lt;/p&gt;
</description>
<pubDate>Sun, 19 May 2019 15:08:00 +0000</pubDate>
<dc:creator>豌豆花下猫</dc:creator>
<og:description>GIL 已经被杀死了么？ 本文原创并首发于公众号【 Python猫 】，未经授权，请勿转载。 原文地址： 'https://mp.weixin.qq.com/s/8KvQemz0SWq2hw 2aBP</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pythonista/p/10891419.html</dc:identifier>
</item>
<item>
<title>.NET Core 3.0之深入源码理解Configuration(三) - 艾心❤</title>
<link>http://www.cnblogs.com/edison0621/p/10891365.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/edison0621/p/10891365.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/edison0621/p/10889325.html&quot;&gt;上一篇&lt;/a&gt;文章讨论了文件型配置的基本内容，本篇内容讨论JSON型配置的实现方式，理解了这一种配置类型的实现方式，那么其他类型的配置实现方式基本可以触类旁通。看过了&lt;a href=&quot;https://www.cnblogs.com/edison0621/p/10889325.html&quot;&gt;上一篇&lt;/a&gt;文章的朋友，应该看得出来似曾相识。此图主要表达了文件型配置的实现，当然其他配置，包括自定义配置，都会按照这样的方式去实现。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/533598/201905/533598-20190519225741492-2092328714.png&quot;&gt;&lt;img title=&quot;绘图3&quot; border=&quot;0&quot; alt=&quot;绘图3&quot; src=&quot;https://img2018.cnblogs.com/blog/533598/201905/533598-20190519225741777-1165816411.png&quot; width=&quot;1060&quot; height=&quot;541&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;该组件有四个类&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;JsonConfigurationExtensions&lt;/li&gt;
&lt;li&gt;JsonConfigurationSource&lt;/li&gt;
&lt;li&gt;JsonConfigurationFileParser&lt;/li&gt;
&lt;li&gt;JsonConfigurationProvider&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这四个类相互合作，职责明确，共同将JSON类型的配置加载到内存中，供相应的系统使用。&lt;/p&gt;
&lt;h2&gt;JsonConfigurationFileParser&lt;/h2&gt;
&lt;p&gt;该类是一个内部类，拥有一个私有的构造方法，意味着该类无法在其他地方进行实例化，只能在自己内部使用。它只有一个公共方法，并且是静态的，如下所示&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; IDictionary&amp;lt;&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;&amp;gt; Parse(Stream input) =&amp;gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; JsonConfigurationFileParser().ParseStream(input);
&lt;/pre&gt;
&lt;br/&gt;&lt;/div&gt;
&lt;p&gt;该方法通过读取输入数据流，将其转化为字典类型的配置数据，该字典类型是SortedDictionary类型的，并且不区分大小写，此处需要注意。这也呼应了之前所说的.NET Core Configuration对外使用的时候，都是以字典方式去提供给外界使用的。&lt;/p&gt;
&lt;p&gt;那么，这个类是如何将数据流转化为JSON的呢，我们继续阅读源码&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; IDictionary&amp;lt;&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;&amp;gt; ParseStream(Stream input)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    _data.Clear();
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; (var reader = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; StreamReader(input))
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; (JsonDocument doc = JsonDocument.Parse(reader.ReadToEnd(), &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; JsonReaderOptions { CommentHandling = JsonCommentHandling.Skip }))
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (doc.RootElement.Type != JsonValueType.Object)
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;        {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;            &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; FormatException(Resources.FormatError_UnsupportedJSONToken(doc.RootElement.Type));
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;        }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;        VisitElement(doc.RootElement);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; _data;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过源码，我们知道，此处使用了JsonDocument处理StreamReader数据，JsonDocument又是什么呢，通过命名空间我们知道，它位于System.Text.Json中，这是.NET Core原生的处理JSON的组件，有兴趣的朋友可以去翻翻MSDN或者GitHub查找相关资料。此处不做过多说明。&lt;/p&gt;
&lt;p&gt;VisitElement方法主要是遍历JsonElement.EnumerateObject()方法中的对象集合，此处采用Stack&amp;lt;string&amp;gt;实例进行数据安全方面的控制。其中VisitValue是一个在处理json时相当全面的方法，说它全面是因为它考虑到了JSON值的几乎所有类型：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;JsonValueType.Object&lt;/li&gt;
&lt;li&gt;JsonValueType.Array&lt;/li&gt;
&lt;li&gt;JsonValueType.Number&lt;/li&gt;
&lt;li&gt;JsonValueType.String&lt;/li&gt;
&lt;li&gt;JsonValueType.True&lt;/li&gt;
&lt;li&gt;JsonValueType.False&lt;/li&gt;
&lt;li&gt;JsonValueType.Null&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;当然，该方法，并不会很傻的处理每一种类型，主要是针对Object和Array类型进行了递归遍历，以便在诸如Number、String等的简单类型时跳出递归，并存放到字典中，需要再次强调的是，存放在字典中的值是以String类型存储的。&lt;/p&gt;
&lt;p&gt;至此，JsonConfigurationFileParser完成了从文件读取内容并转化为键值对的工作。&lt;/p&gt;
&lt;h2&gt;JsonConfigurationSource&lt;/h2&gt;
&lt;p&gt;这个类比较简单，因为继承自FileConfigurationSource，如前文所说，FileConfigurationSource类已经做了初步的实现，只提供了一个Build方法交给子类去重写。其返回值是JsonConfigurationProvider实例。&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// Represents a JSON file as an &amp;lt;see cref=&quot;IConfigurationSource&quot;/&amp;gt;.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; JsonConfigurationSource : FileConfigurationSource
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// Builds the &amp;lt;see cref=&quot;JsonConfigurationProvider&quot;/&amp;gt; for this source.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;builder&quot;&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt;.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;returns&amp;gt;A &amp;lt;see cref=&quot;JsonConfigurationProvider&quot;/&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; IConfigurationProvider Build(IConfigurationBuilder builder)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;        EnsureDefaults(builder);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; JsonConfigurationProvider(&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此处的EnsureDefaults()方法，主要是设置FileProvider实例以及指定加载类型的异常处理方式。&lt;/p&gt;
&lt;h2&gt;JsonConfigurationProvider&lt;/h2&gt;
&lt;p&gt;这个类也很简单，它继承于FileConfigurationProvider，FileConfigurationProvider本身也已经通用功能进行了抽象实现，先看一下这个类的源码&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;28&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// A JSON file based &amp;lt;see cref=&quot;FileConfigurationProvider&quot;/&amp;gt;.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; JsonConfigurationProvider : FileConfigurationProvider
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// Initializes a new instance with the specified source.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;source&quot;&amp;gt;The source settings.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; JsonConfigurationProvider(JsonConfigurationSource source) : &lt;span class=&quot;kwrd&quot;&gt;base&lt;/span&gt;(source) { }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// Loads the JSON data from a stream.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;stream&quot;&amp;gt;The stream to read.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Load(Stream stream)
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;try&lt;/span&gt; {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;            Data = JsonConfigurationFileParser.Parse(stream);
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;        } &lt;span class=&quot;kwrd&quot;&gt;catch&lt;/span&gt; (JsonReaderException e)
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;        {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;            &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; FormatException(Resources.Error_JSONParseError, e);
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;        }
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其构造函数的传入参数类型是JsonConfigurationSource，这和JsonConfigurationSource.Build()方法中的&lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; JsonConfigurationProvider(&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;)代码片段相呼应。&lt;/p&gt;
&lt;p&gt;JsonConfigurationProvider所重写的方法，调用的是JsonConfigurationFileParser.Parse(stream)方法，所以该类显得非常的轻量。&lt;/p&gt;
&lt;h2&gt;JsonConfigurationExtensions&lt;/h2&gt;
&lt;p&gt;这个方法，大家就更熟悉了，我们平时所使用的AddJsonFile()方法，就是在这个扩展类中进行扩展的，其返回值是IConfigurationBuilder类型，其核心方法源码如下所示&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;46&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// Adds a JSON configuration source to &amp;lt;paramref name=&quot;builder&quot;/&amp;gt;.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;builder&quot;&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt; to add to.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;provider&quot;&amp;gt;The &amp;lt;see cref=&quot;IFileProvider&quot;/&amp;gt; to use to access the file.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;path&quot;&amp;gt;Path relative to the base path stored in &lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;see cref=&quot;IConfigurationBuilder.Properties&quot;/&amp;gt; of &amp;lt;paramref name=&quot;builder&quot;/&amp;gt;.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;optional&quot;&amp;gt;Whether the file is optional.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;reloadOnChange&quot;&amp;gt;Whether the configuration should be reloaded if the file changes.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;returns&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt;.&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; IConfigurationBuilder AddJsonFile(&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt; IConfigurationBuilder builder, IFileProvider provider, &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; path, &lt;span class=&quot;kwrd&quot;&gt;bool&lt;/span&gt; optional, &lt;span class=&quot;kwrd&quot;&gt;bool&lt;/span&gt; reloadOnChange)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;{
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (builder == &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ArgumentNullException(nameof(builder));
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;.IsNullOrEmpty(path))
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ArgumentException(Resources.Error_InvalidFilePath, nameof(path));
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;    }
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; builder.AddJsonFile(s =&amp;gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;    {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;        s.FileProvider = provider;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;        s.Path = path;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;        s.Optional = optional;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;        s.ReloadOnChange = reloadOnChange;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  28:  &lt;/span&gt;        s.ResolveFileProvider();
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;  29:  &lt;/span&gt;    });
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;  30:  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过，大家不要看这个方法的代码行数很多，就认为，其他方法都重载与该方法，其实该方法重载自&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// Adds a JSON configuration source to &amp;lt;paramref name=&quot;builder&quot;/&amp;gt;.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;builder&quot;&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt; to add to.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;param name=&quot;configureSource&quot;&amp;gt;Configures the source.&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;/// &amp;lt;returns&amp;gt;The &amp;lt;see cref=&quot;IConfigurationBuilder&quot;/&amp;gt;.&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;
&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; IConfigurationBuilder AddJsonFile(&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt; IConfigurationBuilder builder, Action&amp;lt;JsonConfigurationSource&amp;gt; configureSource)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    =&amp;gt; builder.Add(configureSource);&lt;br/&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个方法最终调用的还是IConfigurationBuilder.Add()方法&lt;/p&gt;

&lt;p&gt;通过介绍以上JSON Configuration组件的四个类，我们知道了，该组件针对JSON格式的文件的处理方式，不过由于其实文件型配置，其抽象实现已经在文件型配置扩展实现。&lt;/p&gt;
&lt;p&gt;从这里，我们可以学习一下，如果有一天我们需要扩展远程配置，比如Consul、ZK等，我们也可以考虑并采用这种架构的设计方式。另外在JSON Configuration组件中，.NET Core将专有型功能方法的处理进行了聚合，并聚焦关注点的方式也值得我们学习。&lt;/p&gt;
&lt;p&gt;最后JsonConfigurationFileParser中给了我们一种关于Stream转换成JSON的实现，我们完全可以把这个类当成工具类去使用。&lt;/p&gt;
</description>
<pubDate>Sun, 19 May 2019 14:58:00 +0000</pubDate>
<dc:creator>艾心❤</dc:creator>
<og:description>写在前面 上一篇文章讨论了文件型配置的基本内容，本篇内容讨论JSON型配置的实现方式，理解了这一种配置类型的实现方式，那么其他类型的配置实现方式基本可以触类旁通。看过了上一篇文章的朋友，应该看得出来似</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/edison0621/p/10891365.html</dc:identifier>
</item>
<item>
<title>D3.js(v3)+react 制作 一个带坐标轴与比例尺的折线图 - 溢杨年华</title>
<link>http://www.cnblogs.com/littleSpill/p/10891161.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/littleSpill/p/10891161.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;&lt;span&gt;  1&lt;/span&gt; import React, { Component } from 'react'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; import * as d3 from 'd3'
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;class Line extends Component {
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;    constructor(props) {
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;        super(props);
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;    componentDidMount(){
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.oneMethod()
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;    oneMethod(){
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; width = 800;                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SVG绘制区域的宽度&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; height = 600;                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SVG绘制区域的高度&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt; 
&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; svg = d3.select(&quot;#body&quot;)            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择id为body的div&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;                     .append(&quot;svg&quot;)              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在div中添加&amp;lt;svg&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;                     .attr(&quot;width&quot;,width)        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定&amp;lt;svg&amp;gt;的宽度&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;                     .attr(&quot;height&quot;,height)      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定&amp;lt;svg&amp;gt;的高度&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; dataList =&lt;span&gt; [
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;                 coountry : &quot;china&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;                gdp : [
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;                     [2000,11920],[2001,13170],[2002,14550],[2003,16500],[2004,19440],[2005,22870&lt;span&gt;],
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;                     [2006,27930],[2007,35040],[2008,45470],[2009,51050],[2010,59490],[2011,73140&lt;span&gt;],
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;                     [2012,83860],[2013,103550&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;                ]
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;                 coountry : &quot;japan&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;                gdp : [
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;                     [2000,47310],[2001,41590],[2002,39800],[2003,43020],[2004,46500],[2005,45710&lt;span&gt;],
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;                     [2006,43560],[2007,43560],[2008,48490],[2009,50350],[2010,54950],[2011,59050&lt;span&gt;],
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;                     [2012,59370],[2013,48980&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;                ]
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;        ]
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; 
&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;外边框&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; padding = {top : 50 , right : 50 , bottom : 100 , left : 200&lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算GDP的最大值&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; gdpmax = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; dataList.length ; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; currGdp = d3.max(dataList[i].gdp,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(d){
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; d[1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(currGdp &amp;gt;&lt;span&gt; gdpmax){
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;                 gdpmax =&lt;span&gt; currGdp
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt;         
&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先选出年份的最小值与最大值&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; dataList.length ; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; min = d3.min(dataList[i].gdp,&lt;span&gt;function&lt;/span&gt;(d){&lt;span&gt;return&lt;/span&gt; d[0&lt;span&gt;]})
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; max = d3.max(dataList[i].gdp,&lt;span&gt;function&lt;/span&gt;(d){&lt;span&gt;return&lt;/span&gt; d[0&lt;span&gt;]})
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义比例尺,均为线性比例尺&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; xScale = d3.scale.linear()                                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个比例尺&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;                         .domain([min,max])                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定x轴的值域&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;                         .range([0,width-padding.left - padding.right])  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定x轴的定义域&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt; 
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; yScale = d3.scale.linear()                                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个比例尺&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;                         .domain([0,gdpmax*1.1])                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定y轴的值域&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;                         .range([height-padding.top-padding.bottom,0])   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定y轴的定义域&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个线段生成器&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; linePath = d3.svg.line()                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个线段生成器&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;                         .interpolate(&quot;basis&quot;)                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用basis插值模式&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;                         .x(&lt;span&gt;function&lt;/span&gt;(d){&lt;span&gt;return&lt;/span&gt; xScale(d[0])})            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置x坐标的访问器&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;                         .y(&lt;span&gt;function&lt;/span&gt;(d){&lt;span&gt;return&lt;/span&gt; yScale(d[1])})            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置y坐标的访问器&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt; 
&lt;span&gt; 77&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义两个颜色&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; colors = [d3.rgb(0,0,255),d3.rgb(0,255,0&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加路径&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;         svg.selectAll(&quot;path&quot;)                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择svg中所有的path&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;             .data(dataList)                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定数据&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;             .enter()                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取enter部分&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;             .append(&quot;path&quot;)                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加足够数量的&amp;lt;path&amp;gt;元素&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;             .attr(&quot;transform&quot;,&quot;translate(&quot;+padding.left + &quot;,&quot; + padding.top + &quot;)&quot;)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;平移&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;             .attr(&quot;d&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(d){
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; linePath(d.gdp)          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回线段生成器得到的路径&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             .attr(&quot;fill&quot;,&quot;none&quot;)                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充色为none&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;             .attr(&quot;stroke&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(d,i){
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; colors[i]                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置折线颜色&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;             .attr(&quot;stroke-width&quot;,&quot;3px&quot;)         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置折线的宽度&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt; 
&lt;span&gt; 95&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;坐标轴x轴&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; xAxis = d3.svg.axis()               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个新坐标轴&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;                     .scale(xScale)              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定x坐标轴的比例尺&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;                     .ticks(6)                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定x坐标轴的分隔数&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;                     .tickFormat(d3.format(&quot;d&quot;)) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;刻度的数组用字符串表示&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;                     .orient(&quot;bottom&quot;)           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定x坐标轴的方向&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;坐标轴y轴&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; yAxis = d3.svg.axis()               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个新坐标&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;                     .scale(yScale)              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定y坐标轴的比例尺&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;                     .orient(&quot;left&quot;)             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定y坐标轴的方向&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt; 
&lt;span&gt;106&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个&amp;lt;g&amp;gt;元素用于放x轴&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;         svg.append(&quot;g&quot;)                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个&amp;lt;g&amp;gt;元素&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;             .attr(&quot;class&quot;,&quot;axis&quot;)               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义class名&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;             .attr(&quot;transform&quot;,&quot;translate(&quot;+padding.left + &quot;,&quot; + (height-padding.bottom) + &quot;)&quot;)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;平移&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;             .call(xAxis)                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;call()应用&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt; 
&lt;span&gt;112&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个&amp;lt;g&amp;gt;元素用于放y轴&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;         svg.append(&quot;g&quot;)                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个&amp;lt;g&amp;gt;元素&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;             .attr(&quot;class&quot;,&quot;axis&quot;)               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义class名&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;             .attr(&quot;transform&quot;,&quot;translate(&quot;+ padding.left + &quot;,&quot; + padding.top + &quot;)&quot;)             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;平移&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;             .call(yAxis)                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;call()应用&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt; 
&lt;span&gt;118&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加两个矩形标记&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; g = svg.selectAll(&quot;rect&quot;)           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将选择集赋值给变量g&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;             .data(dataList)                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定数据&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;             .enter()                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取enter()部分&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt;             .append(&quot;g&quot;)                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加&amp;lt;g&amp;gt;元素&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt;         g.append(&quot;rect&quot;)                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在&amp;lt;g&amp;gt;元素里添加&amp;lt;rect&amp;gt;矩形&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;             .attr(&quot;fill&quot;,&lt;span&gt;function&lt;/span&gt;(d,i){         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定颜色&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; colors[i]
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;             .attr(&quot;transform&quot;,&lt;span&gt;function&lt;/span&gt;(d,i){    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;平移&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; x = padding.left + i*150
&lt;span&gt;129&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; y = height - padding.bottom + 50
&lt;span&gt;130&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &quot;translate(&quot; +x + &quot;,&quot; + y + &quot;)&quot;
&lt;span&gt;131&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;             .attr(&quot;width&quot;,20)                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定矩形的宽度&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;             .attr(&quot;height&quot;,20)                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定矩形的高度&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt; 
&lt;span&gt;135&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加注解&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt;         g.append(&quot;text&quot;)                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加文字&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt;             .attr(&quot;class&quot;,&quot;text&quot;)               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义class名&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt;             .attr(&quot;x&quot;,&lt;span&gt;function&lt;/span&gt;(d,i){            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定文字在x方向的位置&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; padding.left + i * 150 + 30
&lt;span&gt;140&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;             .attr(&quot;y&quot;,&lt;span&gt;function&lt;/span&gt;(d,i){            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定文字在y方向的位置&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; height - padding.bottom + 50 + 15
&lt;span&gt;143&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;             .text(&lt;span&gt;function&lt;/span&gt;(d){                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定文字的内容&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; d.coountry
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;             .attr(&quot;font-size&quot;,&quot;15px&quot;)           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定文字的大小&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt;             .attr(&quot;fill&quot;,&quot;black&quot;)               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定文字的颜色&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt;             
&lt;span&gt;150&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;     
&lt;span&gt;152&lt;/span&gt; &lt;span&gt;    render() {
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;             &amp;lt;div id=&quot;body&quot; &amp;gt;
&lt;span&gt;155&lt;/span&gt;                 
&lt;span&gt;156&lt;/span&gt;             &amp;lt;/div&amp;gt;
&lt;span&gt;157&lt;/span&gt; &lt;span&gt;        );
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt; 
&lt;span&gt;161&lt;/span&gt; export &lt;span&gt;default&lt;/span&gt; Line;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 19 May 2019 14:18:00 +0000</pubDate>
<dc:creator>溢杨年华</dc:creator>
<og:description>本章使用路径生成器来绘制一个折线图。以中国和日本的GDP数据为例： 1 //数据 2 var dataList = [ 3 { 4 coountry : &quot;china&quot;, 5 gd</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/littleSpill/p/10891161.html</dc:identifier>
</item>
<item>
<title>一个二线城市程序员-周末一天的生活 - 阿飞云</title>
<link>http://www.cnblogs.com/aflyun/p/10891008.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aflyun/p/10891008.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;做一个积极的人&lt;/p&gt;
&lt;p&gt;编码、改bug、提升自己&lt;/p&gt;
&lt;p&gt;我有一个乐园，面向编程，春暖花开&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;本文是记录我自己周末一天简单平凡的生活！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我是一个在二线城市工作和生活的程序员，在忙碌的了一周结束后，有短暂的周末得以休息和调整，做一些自己想做的事情，看一本书籍，听听音乐，抑或是刷一刷娱乐节目，放松放松。&lt;/p&gt;
&lt;h3 id=&quot;0&quot;&gt;0、早晨&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;AM：9:30&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一觉睡到自然醒的感觉是很爽的，九点半才起床，唉，是不是起点有点晚了！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AM：9:40~10:00&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单的锻炼身体，做了六组俯卧撑（100个），从4月份开始，坚持每天做俯卧撑，从刚开始一次只能做十几个，接着道四五十个，现在可以坚持做100个，还是有一点点进步。&lt;/p&gt;
&lt;p&gt;【开玩笑：三四月的时候996比较热，想着锻炼身体，是不是能够备战996！】&lt;/p&gt;
&lt;p&gt;&lt;span&gt;PS：我在19年的计划中写了自己要健身，但是考虑到如果报健身房的话，可能时间没有时间去。那就先坚持做俯卧撑了，后面天气好会去跑跑步爬爬山。如果你也想健身或者锻炼身体，从简单的事做起，比如一天做十个俯卧撑，做十个仰卧起坐等，小的积累，说不定会有大的改变呢！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AM: 10:00~12:30&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;锻炼结束，洗了个澡，整个人精神抖擞，想着周报还没写，就先写了个周报。&lt;/p&gt;
&lt;p&gt;然后打开网易云音乐，每日歌曲推荐随机播放歌曲。前几天笔记本卸载了用了七八年的酷狗，把之前所有下载到本地的歌全部删除了，想着要改变一下，导致一下子不知道要听什么歌曲了。索性就随机播放了。如果你有好歌推荐，欢迎留言分享给我，谢谢！&lt;/p&gt;
&lt;p&gt;打开一本技术相关的书，读了一章，在工作后，有一些技术，一直在使用，但是不知道其原理，所以在使用的基础上，继续深入一下，这也是这一年的计划。读书还是能够比较系统的了解一些东西，并且读书的时候也也去思考结合实际工作的经验。 读书我做的不好的一点是：工作后读的文学书籍还是太少了，要抽点时间出来。&lt;/p&gt;
&lt;p&gt;下午有个活动，早午饭一起吃，吃完饭，就出门了。今天长沙的天气下着一点雨，天气还算舒适，周末适当户外活动，还是不错的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AM: 12:30~PM :13:50&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;赶往活动的路上，做着地铁，周末地铁上的人也挺多的，没有座位，本来带了一本书准备读一读，觉得还是算了，拿了本书心里安慰了，就像读书的时候，周末有时候会带很多书回去，想着要如何如何，然而…..，一切都和自己想的不一样。&lt;/p&gt;
&lt;h3 id=&quot;1&quot;&gt;1、下午&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PM: 14:00~17:30&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;听了前端性能优化，一个大咖的演讲，分享一点我的收获：&lt;/p&gt;
&lt;p&gt;优化的一些思路其实很多是相似的，为什么要优化？将可以从哪些方面进行优化？&lt;/p&gt;
&lt;p&gt;》》》为什么要优化？&lt;/p&gt;
&lt;p&gt;两个方面：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用户：提高用户体验&lt;/li&gt;
&lt;li&gt;公司：减少网络资源和带宽占用&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;》》》可以从哪些方面进行优化？&lt;/p&gt;
&lt;p&gt;说大的思路： 减少http请求次数，压缩静态资源（css,js,图片等），优化页面渲染过程，优化前端代码（如html中最好不要写样式）、使用缓存，可视化加载、懒加载、预加载（游戏行业）等。&lt;/p&gt;
&lt;p&gt;还有其他的一些做法，可以用CDN等。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;： 根据实际的场景结合具体的优化策略进行，性能优化很多时候对当下所拥有资源的合理安排使得系统能够达到最优，并不是一味的追求性能数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;听了分享也和一些大咖进行沟通，咨询职业发展的一些经验，交流让自己思考，也拓展自己的视野。&lt;/p&gt;
&lt;p&gt;有些人可能会有疑问，我一个做后端的为什么要去听前端的活动。&lt;/p&gt;
&lt;p&gt;第一个原因是：我对这个活动中的这个前端性能优化&lt;strong&gt;感兴趣&lt;/strong&gt;，不管前端还是后端的性能优化，都值得学习。&lt;/p&gt;
&lt;p&gt;第二个原因是：我觉得一个后端的程序员，在某种情况下也是需要懂一些前端的东西，这样的小积累在以后可能会&lt;strong&gt;对工作有帮助&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PM: 17:30~20:30&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;回家吃饭，地铁上的依旧很多，还是没有座位，找了个可以靠的地方，玩了一会手机，感觉有点累了，靠着休息了一会。到家，吃饭。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PM: 20:30~21:10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开始回想这一天，然后写下上面的东西。&lt;span&gt;这个世界美好的东西总是不期而遇，可遇不可求的事情很多，所以只管去做！&lt;/span&gt; 人在做，天在看。这就是我这个周末一天的生活，这一天的生活也只在0和1之间，一个二线城市小小程序员的一天。简单的一天，也很充实！&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;最后在扯淡一下，周六看向往的生活，看明星在美丽的村庄体验生活，然后来反应这样的生活才是向往的生活。是的，我看了节目也觉得这样的生活真的很多，每天简简单单，做一些农活，每天又有几个好友拜访。不为生活的种种而感到压力，亲近自然，享受自然，享受生活，和住在一起的邻居闲聊，多惬意啊！&lt;/p&gt;
&lt;p&gt;但是这样的生活，是要建立是强大的物质基础上，也就是money上。我相信很多人和我一样是从农村出来，到城市打拼的人，打拼的程序员，我们的农村生活根本不是电视上那么轻松和惬意的，这也就是我们走出来的原因。&lt;/p&gt;
&lt;p&gt;明天周一，新的一周开始，努力工作，赚更多的钱，&lt;strong&gt;祝愿自己和每一个阅读文章的你，通过奋斗最后都能过上自己向往的生活！&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;谢谢你的阅读，如果您觉得这篇博文对你有帮助，请点赞或者喜欢，让更多的人看到！祝你每天开心愉快！&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;不管做什么，只要坚持下去就会看到不一样！在路上，不卑不亢!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://aflyun.blog.csdn.net/&quot;&gt; &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;愿你我在人生的路上能都变成最好的自己，能够成为一个独挡一面的人&lt;/strong&gt;&lt;img src=&quot;http://dufyun.gitee.io/images_bed/images/life/qrcode_javaCoder.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;© 每天都在变得更好的阿飞云&lt;/p&gt;
</description>
<pubDate>Sun, 19 May 2019 13:47:00 +0000</pubDate>
<dc:creator>阿飞云</dc:creator>
<og:description>一个在二线城市工作和生活的程序员，在周末做一些自己想做的事情，看一本书籍，听听音乐，抑或是刷一刷娱乐节目，放松放松。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aflyun/p/10891008.html</dc:identifier>
</item>
</channel>
</rss>