<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>MyBatis框架介绍及其实操 - 大佬不是一天练成的</title>
<link>http://www.cnblogs.com/YJzhiqianni/p/10671902.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/YJzhiqianni/p/10671902.html</guid>
<description>
&lt;p&gt;　&lt;span&gt;　一、&lt;strong&gt;基本概念和介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;数据持久化的概念&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;数据持久化是将内存中的数据模型转换为存储模型，以及将存储模型转换为内存中的数据模型的统称。例如，文件的存储、数据的读取等都是数据持久化操作。数据模型可以是任何数据结构或对象模型、XML、二进制流等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;/span&gt;&lt;span&gt;　当我们编写应用程序操作数据库，对表数据进行增删改查的操作的时候就是数据持久化的操作。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;Mybatis框架简介&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;span&gt;MyBatis框架是一个开源的数据持久层框架。它的内部封装了通过JDBC访问数据库的操作，支持普通的SQL查询、存储过程和高级映射，几乎消除了所有的JDBC代码和参数的手工设置以及结果集的检索。MyBatis作为持久层框架，其主要思想是将程序中的大量SQL语句剥离出来，配置在配置文件当中，实现SQL的灵活配置。这样做的好处是将SQL与程序代码分离，可以在不修改代码的情况下，直接在配置文件当中修改SQL。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;ORM&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　ORM（Object/Relational Mapping）即对象关系映射，是一种数据持久化技术。它在对象模型和关系型数据库直接建立起对应关系，并且提供一种机制，通过JavaBean对象去操作数据库表的数据，如下图。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513526/201904/1513526-20190408153721790-925378338.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;在我们实际的开发当中，我们使用对象的技术操作数据库，而当存储数据时，使用的却是关系型数据库，这样造成了很多的不便。ORM在对象模型和关系型数据库的表之间建立了一座桥梁。有了ORM，我们就不用再使用SQL语句操作数据库中的表，使用API直接操作JavaBean对象就可以实现数据的增删改查等的操作。MyBatis通过简单的XML或者注解的方式进行配置和原始映射，将实体类和SQL语句之间建立映射关系，是一种半自动（之所以说是半自动，因为我们要自己写SQL）的ORM实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;　　&lt;span&gt;二、&lt;/span&gt;&lt;strong&gt;&lt;span&gt;MyBatis框架的优缺点及其适用的场合&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　&lt;span&gt;MyBatis的优点&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;　　（&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1）与JDBC相比，减少了50%以上的代码量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（2）MyBatis是嘴加单的持久层框架，小巧并且简单易学。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（3）MyBatis相当灵活，不会对应用程序或者数据库的现有设计强加任何影响，SQL写在XML文件里，从程序代码中彻底分离，降低耦合度，便于统一的管理和优化，并可重用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（4）提供XML标签，支持编写动态的SQL，满足不同的业务需求。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（5）提供映射标签，支持对象与数据库的ORM字段关系映射。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　&lt;span&gt;MyBatis的缺点&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;（1）SQL语句的编写工作量较大，对开发人员编写SQL的能力有一定的要求。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（2）SQL语句依赖于数据库，导致数据库不具有好的移植性，不可以随便更换数据库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　&lt;span&gt;MyBatis框架的适用场合&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;MyBatis专注于SQL自身，是一个足够灵活的DAO层解决方案。对性能的要求很高，或者需求变化较多的项目，例如Web项目，那么MyBatis是不二的选择。&lt;/span&gt;&lt;/p&gt;


&lt;hr/&gt;&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、实操（简单例子）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　目的：通过MyBatis实现对我数据库中已经存在的表进行操作，包括向表中插入、修改、查询和删除数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;1.准备数据库和表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;31&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
create database if not exists my_test charset utf8;#创建数据库my_test
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
use my_test; #使用数据库
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
create table student(Id int primary key auto_increment,Name varchar(20),Age int,Gender char(10)); #创建表student
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;　　&lt;/em&gt;可以看到现在数据库中已经有表student了，但是表示空的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513526/201904/1513526-20190408170213198-722591033.png&quot; alt=&quot;&quot;/&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;2.下载MyBatis需要的jar文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;通过github下载，下载地址是 &lt;a href=&quot;https://github.com/mybatis/mybatis-3/releases&quot;&gt;https://github.com/mybatis/mybatis-3/releases&lt;/a&gt;，我选择的是3.4.5的版本，注意要根据自己的jdk来选择，可能高版本的不符合。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　下载mysql数据库驱动jar文件，下载地址是 &lt;a href=&quot;http://central.maven.org/maven2/mysql/mysql-connector-java&quot;&gt;http://central.maven.org/maven2/mysql/mysql-connector-java&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;3.在Eclipse中新建JavaWeb项目，在lib目录下导入下载好的jar&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513526/201904/1513526-20190409084733284-509919896.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;4.创建MyBatis的核心配置文件，mybatis-config.xml，内容如下。其中mysql.properties 文件是引入的，在该文件内配置的是数据库相关的信息，包括数据库驱动、链接数据库的url、数据库用户名和密码。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 引入外部mysql配置文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;mysql.properties&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;    
&lt;span&gt; 7&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置mybatis的log实现为log4j &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;logImpl&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;LOG4J&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;    
&lt;span&gt;12&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 为JAVA Bean起类别名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 别名方式，自动扫描，将JAVA类的类名作为类的类别名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;com.ydy.entiy&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;    
&lt;span&gt;18&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置mybatis运行环境 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environments &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;=&quot;development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environment &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; type=&quot;JDBC&quot; 代表使用JDBC的事务管理 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;transactionManager &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;JDBC&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; mybatis提供了3种数据源类型，分别是：POOLED,UNPOOLED,JNDI &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; POOLED 表示支持JDBC数据源连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; UNPOOLED 表示不支持数据源连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; JNDI 表示支持外部数据源连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataSource &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;POOLED&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driver&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${Driver}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${Url}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${Username}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${Password}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dataSource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environments&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 把studentMapper文件引入 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;com/ydy/mapper/studentMapper.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;span&gt;接着，配置 mysql.properties文件，内容如下&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;p&gt;Driver=com.mysql.jdbc.Driver&lt;br/&gt;Url=jdbc:mysql:///my_test?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8&amp;amp;useSSL=false&lt;br/&gt;Username=root&lt;br/&gt;Password=root&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　　&lt;em&gt;&lt;span&gt;&lt;strong&gt;5.定义实体类，这里的变量和数据库的字段是想对应的，以及生成有参构造方法&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ydy.entiy;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Student &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;     * 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 1L&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Id;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String Name;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Age;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String Gender;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Student(String name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age, String gender) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         Name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         Age =&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         Gender =&lt;span&gt; gender;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Student(&lt;span&gt;int&lt;/span&gt; id, String name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age, String gender) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         Id =&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         Name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         Age =&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         Gender =&lt;span&gt; gender;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;Student [Id=&quot; + Id + &quot;, Name=&quot; + Name + &quot;, Age=&quot; + Age + &quot;, Gender=&quot; + Gender + &quot;]&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getId() {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Id;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         Id =&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Name;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         Name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getAge() {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Age;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setAge(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; age) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         Age =&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getGender() {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Gender;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setGender(String gender) {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         Gender =&lt;span&gt; gender;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;     
&lt;span&gt;56&lt;/span&gt;     
&lt;span&gt;57&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;6.定义接口方法studentMapper.java&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;　&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ydy.mapper;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.ydy.entiy.Student;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; studentMapper {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;     * 定义四个方法，增删改查，其中的增删改成功的话会返回1，查询的是所有，故使用List来接收
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; student
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; insertStudent(Student student)&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; updateStudent(Student student)&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;Student&amp;gt; selectAllUser()&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;; 
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; deleteStudent(&lt;span&gt;int&lt;/span&gt; id)&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     
&lt;span&gt;23&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;7.创建SQL映射文件 studentMapper.xml&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;例如namespace=&quot;com.ydy.mapper.studentMapper&quot;就是com.ydy.mapper(包名)+studentMapper(studentMapper.xml文件去除后缀)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;com.ydy.mapper.studentMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 自定义返回结果集 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;studentMap&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;Id&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;Id&quot;&lt;/span&gt;&lt;span&gt; javaType&lt;/span&gt;&lt;span&gt;=&quot;java.lang.Integer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;Name&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;Name&quot;&lt;/span&gt;&lt;span&gt; javaType&lt;/span&gt;&lt;span&gt;=&quot;java.lang.String&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;Age&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;Age&quot;&lt;/span&gt;&lt;span&gt; javaType&lt;/span&gt;&lt;span&gt;=&quot;java.lang.Integer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;Gender&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;Gender&quot;&lt;/span&gt;&lt;span&gt; javaType&lt;/span&gt;&lt;span&gt;=&quot;java.lang.String&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 在各种标签中的id属性必须和接口中的方法名相同 ， id属性值必须是唯一的，不能够重复使用。parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;    
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;#{}中的内容，为占位符，当参数为某个JavaBean时，表示放置该Bean对象的属性值  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 向student表中插入记录 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;insertStudent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        insert into student (Name,Age,Gender) values (#{Name},#{Age},#{Gender})
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 更新student表中的记录 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;updateStudent&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;      update student set Name=#{Name},Age=#{Age},Gender=#{Gender} where Id=#{Id}
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;查询student表中的所有记录 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectAllStudent&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;studentMap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;     select * from student
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 根据id删除student表中的记录 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;delete &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;deleteStudent&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;     delete from student where Id=#{Id}  
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;     
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;span&gt;　接着，要在mybatis.config.xml里面把SQL映射文件引入&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 引入外部mysql配置文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;mysql.properties&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;    
&lt;span&gt; 7&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置mybatis的log实现为log4j &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;logImpl&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;LOG4J&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;    
&lt;span&gt;12&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 为JAVA Bean起类别名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 别名方式，自动扫描，将JAVA类的类名作为类的类别名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;com.ydy.entiy&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;    
&lt;span&gt;18&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置mybatis运行环境 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environments &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;=&quot;development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environment &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; type=&quot;JDBC&quot; 代表使用JDBC的事务管理 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;transactionManager &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;JDBC&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; mybatis提供了3种数据源类型，分别是：POOLED,UNPOOLED,JNDI &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; POOLED 表示支持JDBC数据源连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; UNPOOLED 表示不支持数据源连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; JNDI 表示支持外部数据源连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataSource &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;POOLED&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driver&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${Driver}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${Url}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${Username}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${Password}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dataSource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environments&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 把studentMapper文件引入 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;com/ydy/mapper/studentMapper.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;8.新建包tools,在里面新建类myBatisTool，使用mybatis提供的对象读取全局配置文件mybatis.config.xml文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; tools;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Reader;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.io.Resources;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSession;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactoryBuilder;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.sun.corba.se.spi.orbutil.fsm.State;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; myBatisTool {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; SqlSessionFactory sqlSessionFactory;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         
&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用MyBatis提供的Resources类加载mybatis的配置文件&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 Reader config=Resources.getResourceAsReader(&quot;mybatis.config.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造SqlSession的工厂&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(config);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             }&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                e.printStackTrace();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;////&lt;/span&gt;&lt;span&gt;创建能执行映射文件中sql的sqlSession对象&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; SqlSession getSession(){
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     
&lt;span&gt;31&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　9.新建包service，编写测试类studentService&lt;/span&gt;&lt;/strong&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;strong&gt;&lt;span&gt;　&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package service;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import org.apache.ibatis.session.SqlSession;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import com.ydy.entiy.Student;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import com.ydy.mapper.studentMapper;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import tools.myBatisTool;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public class studentService {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    public static void main(String[] args) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        insertStudent();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        //updateStudent();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        //selectAllStudent();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        //deleteStudent();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    /**
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;     * 新增学生记录
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;     */
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    private static void insertStudent() {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        //利用SqlSession对象来执行SQL语句
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        SqlSession session=myBatisTool.getSession();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        studentMapper mapper=session.getMapper(studentMapper.class);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        Student student=new Student(1,&quot;张三&quot;,21,&quot;男&quot;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        try{
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        mapper.insertStudent(student);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        System.out.println(student.toString());
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        session.commit();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        }catch (Exception e){
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }finally {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            session.close();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    /**
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;     * 查询学生记录
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;     */
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    private static void selectAllStudent() {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        // TODO Auto-generated method stub
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    /**
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;     * 更新学生记录
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;     */
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    private static void updateStudent() {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        // TODO Auto-generated method stub
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    /**
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;     * 删除学生记录
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;     */
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    private static void deleteStudent() {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;        // TODO Auto-generated method stub
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　控制台的结果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513526/201904/1513526-20190409152029499-391152829.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　数据库的结果&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513526/201904/1513526-20190409153403667-530735873.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;上述的是执行新增的结果，其他的功能也是类似。这里就不多说了。记录一下我遇到的问题吧。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（1）在mybatis-config.xml文件当中标签的顺序是有要求的，不能乱写。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（2）在mysql.properties文件当中记得加上编码方式，不然插入到数据库会乱码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　实践是检验真理的唯一标准，本人是一个小菜鸟，欢迎各位大神指出不足之处，万分感激。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　&lt;/span&gt;&lt;/p&gt;



</description>
<pubDate>Tue, 09 Apr 2019 07:55:00 +0000</pubDate>
<dc:creator>大佬不是一天练成的</dc:creator>
<og:description>一、基本概念和介绍 数据持久化的概念 数据持久化是将内存中的数据模型转换为存储模型，以及将存储模型转换为内存中的数据模型的统称。例如，文件的存储、数据的读取等都是数据持久化操作。数据模型可以是任何数据</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/YJzhiqianni/p/10671902.html</dc:identifier>
</item>
<item>
<title>[翻译]在Windows版或MacOS版的Microsoft Edge上安装一个谷歌浏览器拓展 - repeatedly</title>
<link>http://www.cnblogs.com/AlienXu/p/10677395.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/AlienXu/p/10677395.html</guid>
<description>&lt;p&gt;原文：&lt;a href=&quot;https://microsoftedgesupport.microsoft.com/hc/en-us/articles/360017581013&quot;&gt;Install a Chrome Web Store extension on Microsoft Edge for Windows and MacOS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;瞎翻译，原文不长，翻译的目的主要是加几个配图便于按步操作。&lt;/p&gt;
&lt;p&gt;如何在在Windows版或MacOS版的Microsoft Edge上安装一个谷歌浏览器拓展？&lt;/p&gt;
&lt;h2 id=&quot;安装拓展&quot;&gt;安装拓展&lt;/h2&gt;
&lt;h3 id=&quot;同意从其他拓展商店安装拓展&quot;&gt;同意从其他拓展商店安装拓展&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/960070/201904/960070-20190409154808953-802096033.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装拓展-1&quot;&gt;安装拓展&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;打开&lt;a href=&quot;https://chrome.google.com/webstore/&quot;&gt;Chrome Web Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;查找并选择要安装的扩展程序。&lt;/li&gt;
&lt;li&gt;点击 &lt;strong&gt;添加至Chrome&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;某些扩展程序会在需要某些权限或数据时提示你。如果同意启用，添加&lt;strong&gt;添加拓展&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/960070/201904/960070-20190409154823749-1128087676.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;撤销同意从其他拓展商店安装拓展&quot;&gt;撤销同意从其他拓展商店安装拓展&lt;/h3&gt;
&lt;p&gt;撤消同意后，将禁用从Chrome网上应用店安装的所有扩展程序。要重新启用它们，必须按照上述步骤再次同意从其他拓展商店安装拓展。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;打开Edge浏览器&lt;/li&gt;
&lt;li&gt;直接访问 &lt;strong&gt;edge://extensions&lt;/strong&gt; 或者 点击 &lt;strong&gt;Setting and more (…)&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Extensions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;取消勾选 &lt;strong&gt;Allow extension from other Stores&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;单击 &lt;strong&gt;OK&lt;/strong&gt; 确认&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/960070/201904/960070-20190409154834835-1137237653.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;卸载拓展&quot;&gt;卸载拓展&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;打开Edge浏览器&lt;/li&gt;
&lt;li&gt;直接访问 &lt;strong&gt;edge://extensions&lt;/strong&gt; 或者 点击 &lt;strong&gt;Setting and more (…)&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Extensions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;找到你想要卸载的拓展，点击&lt;strong&gt;Remove&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;再次点击&lt;strong&gt;Remove&lt;/strong&gt;确认卸载&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/960070/201904/960070-20190409154842206-536451337.gif&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 09 Apr 2019 07:50:00 +0000</pubDate>
<dc:creator>repeatedly</dc:creator>
<og:description>原文： 'Install a Chrome Web Store extension on Microsoft Edge for Windows and MacOS' 瞎翻译，原文不长，翻译的目的主要是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/AlienXu/p/10677395.html</dc:identifier>
</item>
<item>
<title>spring boot+自定义 AOP 实现全局校验 - 吃桃子的小松鼠</title>
<link>http://www.cnblogs.com/dream-sun/p/10677350.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dream-sun/p/10677350.html</guid>
<description>&lt;p&gt;最近公司重构项目，重构为最热的微服务框架 spring boot， 重构的时候遇到几个可以统一处理的问题，也是项目中经常遇到，列如：统一校验参数，统一捕获异常。。。&lt;/p&gt;
&lt;p&gt;仅凭代码 去控制参数的校验，有时候是冗余的，但通过框架支持的 去控制参数的校验，是对于开发者很友好，先看下面的例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('72685669-078c-4d41-b866-9ac3a74a3a4b')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_72685669-078c-4d41-b866-9ac3a74a3a4b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_72685669-078c-4d41-b866-9ac3a74a3a4b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('72685669-078c-4d41-b866-9ac3a74a3a4b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_72685669-078c-4d41-b866-9ac3a74a3a4b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     @NotEmpty(message=&quot;手机号不能为空&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     @Size(min=11,max=11,message=&quot;手机号码长度不正确&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     @Pattern(regexp=StringUtils.REGEXP_MOBILE,message=&quot;手机号格式不正确&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; String mobile;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;这是spring boot支持的 校验注解，然后我们在 contoller层 加上@Valid 注解 就可以达到校验的目的。这是一种框架自带的&lt;/p&gt;
&lt;p&gt;本章 就展示一种 自定义的 AOP 校验，首先 写一个注解，注解里面可以写上 我们需要校验的规则， 比如长度，正则。。。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('55df209c-9c33-4036-a407-4bedf6f525fe')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_55df209c-9c33-4036-a407-4bedf6f525fe&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_55df209c-9c33-4036-a407-4bedf6f525fe&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('55df209c-9c33-4036-a407-4bedf6f525fe',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_55df209c-9c33-4036-a407-4bedf6f525fe&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Documented
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;@Target({ElementType.FIELD,ElementType.METHOD})
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;@Retention(RetentionPolicy.RUNTIME)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ValidateParam {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; min() &lt;span&gt;default&lt;/span&gt; 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; max() &lt;span&gt;default&lt;/span&gt;&lt;span&gt; Integer.MAX_VALUE;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     
&lt;span&gt;10&lt;/span&gt;     String message() &lt;span&gt;default&lt;/span&gt; &quot;params is not null&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;      
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    String regexp();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     
&lt;span&gt;14&lt;/span&gt;     Class&amp;lt;?&amp;gt;[] groups() &lt;span&gt;default&lt;/span&gt;&lt;span&gt; { };
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;      Class&amp;lt;? &lt;span&gt;extends&lt;/span&gt; Payload&amp;gt;[] payload() &lt;span&gt;default&lt;/span&gt;&lt;span&gt; { };
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;      
&lt;span&gt;18&lt;/span&gt;      &lt;span&gt;boolean&lt;/span&gt; isNotNull() &lt;span&gt;default&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;然后定义一个AOP类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d969a1c5-52d7-4217-8cb5-620a8e36a6ea')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_d969a1c5-52d7-4217-8cb5-620a8e36a6ea&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d969a1c5-52d7-4217-8cb5-620a8e36a6ea&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d969a1c5-52d7-4217-8cb5-620a8e36a6ea',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d969a1c5-52d7-4217-8cb5-620a8e36a6ea&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.onecard.primecard.common.aop;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Field;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Method;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.ParameterizedType;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.regex.Pattern;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aspectj.lang.JoinPoint;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aspectj.lang.ProceedingJoinPoint;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aspectj.lang.annotation.Around;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aspectj.lang.annotation.Aspect;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aspectj.lang.annotation.Before;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aspectj.lang.annotation.Pointcut;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ApplicationContext;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.support.ClassPathXmlApplicationContext;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; 
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.jfcf.core.dto.ResultData;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.onecard.core.support.util.StringUtils;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.onecard.primecard.common.annotation.ValidateParam;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.onecard.primecard.common.utils.ResultDataUtil;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; 
&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt; 
&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt; &lt;span&gt; * 全局 切面类(校验参数)
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt; * 
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;@Aspect
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GobalHandlerAspect {
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;     
&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger logger = LoggerFactory.getLogger(GobalHandlerAspect.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;     
&lt;span&gt; 42&lt;/span&gt;     @Pointcut(&quot;execution(* 包名.controller..*.*(..)) &amp;amp;&amp;amp; execution(* 包名.controller..*.*(..))&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; checkAspect(){};
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;     
&lt;span&gt; 45&lt;/span&gt;     @Before(&quot;checkAspect()&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; befor(JoinPoint joinPoint) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;前置统一输出参数&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;         Object[] args =&lt;span&gt; joinPoint.getArgs();
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(args != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; args.length&amp;gt;0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             Object obj = args[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;             ParameterizedType pt =&lt;span&gt; (ParameterizedType)obj.getClass().getGenericSuperclass();
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;             Class&amp;lt;?&amp;gt; classzz = (Class&amp;lt;?&amp;gt;) pt.getActualTypeArguments()[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;             logger.info(&quot;【小X卡】-【请求实体入参】：&quot;+&lt;span&gt;classzz.newInstance().toString());
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;     
&lt;span&gt; 58&lt;/span&gt;     @Around(&quot;checkAspect()&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Object around(ProceedingJoinPoint joinPoint) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable{
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;校验参数&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;         Object[] args =&lt;span&gt; joinPoint.getArgs();
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;         Object obj = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(args != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; args.length &amp;gt; 0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;             obj = args[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;             Class classzz =&lt;span&gt; obj.getClass();
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有顺序和秩序的数组&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;             Field[] fieldArray =&lt;span&gt; classzz.getDeclaredFields();
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;             ArrayList&amp;lt;Field&amp;gt; fieldList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Field&amp;gt;&lt;span&gt;(Arrays.asList(fieldArray));
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;             String res =&lt;span&gt; checkParam(fieldList,obj);
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(StringUtils.isNotNull(res)){
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ResultDataUtil.result(ResultData.STATUS_PARAM_ERROR, res);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;         
&lt;span&gt; 75&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; joinPoint.proceed();
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; 
&lt;span&gt; 78&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; String checkParam(ArrayList&amp;lt;Field&amp;gt; fieldList, Object obj) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;         
&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(Field field : fieldList){
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;             ValidateParam validateParam = field.getAnnotation(ValidateParam.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;             logger.info(&quot;【小X卡】获取注解值：&quot;+validateParam.isNotNull()+&quot;min=&quot;+validateParam.min()+&quot;max=&quot;+&lt;span&gt;validateParam.max());
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;             Method method = obj.getClass().getMethod(&quot;get&quot;+&lt;span&gt;getMethodName(field.getName()));
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;             logger.info(&quot;【小X卡】入参实体方法名称：&quot;+&lt;span&gt;method.getName());
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(method != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                 Object val =&lt;span&gt; method.invoke(obj);
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;                 logger.info(&quot;【小x卡】回调方法：&quot;+&lt;span&gt;val);
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(validateParam != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; validateParam.isNotNull() == &lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt; == val || &quot;&quot;&lt;span&gt;.equals(val) ){
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt; field.getName()+&quot;必填参数为空&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(validateParam.min()==11 &amp;amp;&amp;amp; validateParam.max() == 11&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(val.toString().length() != 11&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt; field.getName()+&quot;请输入参数正确的长度&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(validateParam.regexp().equals(StringUtils.REGEXP_MOBILE)){
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;Pattern.matches(StringUtils.REGEXP_MOBILE, val.toString())){
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt; field.getName()+&quot;参数格式错误&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;     
&lt;span&gt;108&lt;/span&gt;     
&lt;span&gt;109&lt;/span&gt;      &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt; &lt;span&gt;     * 方法首字母大写
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; fieldName
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String getMethodName(String fieldName) {
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;         StringBuffer buffer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         String firstLetter = fieldName.substring(0, 1&lt;span&gt;).toUpperCase();
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; buffer.append(firstLetter).append(fieldName.substring(1&lt;span&gt;, fieldName.length())).toString();
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; 
&lt;span&gt;119&lt;/span&gt; &lt;span&gt;    }       
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;定义一个切点 @Pointcut， 用execution 表达式，去获取要校验的 某个类 和某个方法， 也就是连接点，然后 用定义一个通知，上面代码中有2个通知，一个前置通知@Before，一个环绕通知@Around，我们使用功能最强大的环绕通知。&lt;/p&gt;
&lt;p&gt;通过上面的代码可以看出  首先获取参数，然后通过反射机制 获取 入参对象中的全部字段， 再去获取 我们在字段中加 我们自定义注解的字段，通过反射方法的回调，获取字段值，对值做判断， 返回校验结果。&lt;/p&gt;

</description>
<pubDate>Tue, 09 Apr 2019 07:45:00 +0000</pubDate>
<dc:creator>吃桃子的小松鼠</dc:creator>
<og:description>最近公司重构项目，重构为最热的微服务框架 spring boot， 重构的时候遇到几个可以统一处理的问题，也是项目中经常遇到，列如：统一校验参数，统一捕获异常。。。 仅凭代码 去控制参数的校验，有时候</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dream-sun/p/10677350.html</dc:identifier>
</item>
<item>
<title>9.7 翻译系列：EF数据注解特性之--InverseProperty【EF 6 Code-First系列】 - 灰太狼的梦想</title>
<link>http://www.cnblogs.com/caofangsheng/p/10677235.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/caofangsheng/p/10677235.html</guid>
<description>&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;原文链接：&lt;a class=&quot;xsj_link xsj_manu_link&quot; href=&quot;https://www.entityframeworktutorial.net/code-first/inverseproperty-dataannotations-attribute-in-code-first.aspx&quot; target=&quot;_blank&quot;&gt;https://www.entityframeworktutorial.net/code-first/inverseproperty-dataannotations-attribute-in-code-first.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;当两个实体之间不止一种关系的时候，可以使用InverseProperty特性，为了理解InverseProperty特性我们来做一个例子：&lt;br/&gt;1.创建一个控制台应用程序，安装好EF：&lt;br/&gt;&lt;span class=&quot;story_inline_image&quot;&gt;&lt;img title=&quot;enter description here&quot; src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190409153255197-1387344351.png&quot; alt=&quot;enter description here&quot; name=&quot;images/1554791268173.png&quot; data-src=&quot;./images/1554791268173.png&quot;/&gt;&lt;/span&gt;&lt;br/&gt;2.创建Course类：&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs hljs&quot; data-info=&quot;cs&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Course&lt;/span&gt;
    {
        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; CourseId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; CourseName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; Description { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Teacher OnlineTeacher { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;3.创建Teacher类：&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs hljs&quot; data-info=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Teacher&lt;/span&gt;
    {
       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; TeacherId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; Name { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ICollection&amp;lt;Course&amp;gt; OnlineCourses { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;上面的代码例子中，Course和Teacher实体之间是一对多的关系，一个Teacher可以教很多的Online Course。&lt;br/&gt;3.创建上下文类：&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs hljs&quot; data-info=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;EFDbContext&lt;/span&gt;:&lt;span class=&quot;hljs-title&quot;&gt;DbContext&lt;/span&gt;
    {
        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;EFDbContext&lt;/span&gt;()
            : &lt;span class=&quot;hljs-title&quot;&gt;base&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;name=Constr&quot;&lt;/span&gt;&lt;/span&gt;)
        &lt;/span&gt;{ }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; DbSet&amp;lt;Course&amp;gt; Courses { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; DbSet&amp;lt;Teacher&amp;gt; Teachers { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;4.SQL链接字符串：&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-xml hljs&quot; data-info=&quot;xml&quot;&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;connectionStrings&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Constr&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;connectionString&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Server=.;Database=EFAnnotationInversePropertyDB;uid=sa;pwd=Password_1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;providerName&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;System.Data.SqlClient&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;connectionStrings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;5.测试代码：&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs hljs&quot; data-info=&quot;cs&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Program&lt;/span&gt;
    {
        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)
        &lt;/span&gt;{
            &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; db = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; EFDbContext())
            {
                List&amp;lt;Course&amp;gt; lstModel = db.Courses.ToList();
            }
            Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;success&quot;&lt;/span&gt;);
            Console.ReadKey();
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;6.运行程序：&lt;br/&gt;&lt;span class=&quot;story_inline_image&quot;&gt;&lt;img title=&quot;enter description here&quot; src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190409153255662-1520652868.png&quot; alt=&quot;enter description here&quot; name=&quot;images/1554792099913.png&quot; data-src=&quot;./images/1554792099913.png&quot;/&gt;&lt;/span&gt;&lt;br/&gt;可以看到，根据默认的约定，生成的数据库如下：&lt;br/&gt;&lt;span class=&quot;story_inline_image&quot;&gt;&lt;img title=&quot;enter description here&quot; src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190409153256234-89304425.png&quot; alt=&quot;enter description here&quot; name=&quot;images/1554792231778.png&quot; data-src=&quot;./images/1554792231778.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;现在假设Course和Teacher实体之间，还有一个一对多的关系：&lt;br/&gt;Course类：&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs hljs&quot; data-info=&quot;cs&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Course&lt;/span&gt;
    {
        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; CourseId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; CourseName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; Description { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Teacher OnlineTeacher { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Teacher ClassRoomTeacher { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;Teacher类：&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs hljs&quot; data-info=&quot;cs&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Teacher&lt;/span&gt;
    {
       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; TeacherId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; Name { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ICollection&amp;lt;Course&amp;gt; OnlineCourses { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ICollection&amp;lt;Course&amp;gt; ClassRoomCourses { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;在上面代码例子中，Course和Teacher实体有两个一对多的关系。一门课程可以被一个Online Teacher教，也可以被一个class-room Teacher教。同样一个教师可以教多个Online Course，也可以教多个class-room Course.&lt;br/&gt;删掉之前生成的数据库后，我们运行一下程序：&lt;br/&gt;&lt;span class=&quot;story_inline_image&quot;&gt;&lt;img title=&quot;enter description here&quot; src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190409153256715-1572962069.png&quot; alt=&quot;enter description here&quot; name=&quot;images/1554793416316.png&quot; data-src=&quot;./images/1554793416316.png&quot;/&gt;&lt;/span&gt;&lt;br/&gt;看看生成的数据库：&lt;br/&gt;&lt;span class=&quot;story_inline_image&quot;&gt;&lt;img title=&quot;enter description here&quot; src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190409153257248-1116323520.png&quot; alt=&quot;enter description here&quot; name=&quot;images/1554793473674.png&quot; data-src=&quot;./images/1554793473674.png&quot;/&gt;&lt;/span&gt;&lt;br/&gt;看到，EF为我们在Course表中，生成了4个外键。为了解决这个问题，我们使用InverseProperty特性。修改一下Teacher类的代码：&lt;br/&gt;Teacher类：&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs hljs&quot; data-info=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Teacher&lt;/span&gt;
    {
       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; TeacherId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; Name { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

       [InverseProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;OnlineTeacher&quot;&lt;/span&gt;)]
       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ICollection&amp;lt;Course&amp;gt; OnlineCourses { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

       [InverseProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ClassRoomTeacher&quot;&lt;/span&gt;)]
       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ICollection&amp;lt;Course&amp;gt; ClassRoomCourses { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;Course类：&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs hljs&quot; data-info=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Course&lt;/span&gt;
    {
        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; CourseId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; CourseName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; Description { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Teacher OnlineTeacher { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Teacher ClassRoomTeacher { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;在上面的例子中，InverseProperty特性应用在两个集合类型的导航属性OnlineCourses和ClassRoomCourses上，然后指定它们在Course实体中的相关联的导航属性，所以现在EF就能分辨出来相应的外键。EF 6将创建两个外键：&lt;code&gt;OnlineTeacher_TeacherId&lt;/code&gt;和&lt;code&gt;ClassRoomTeacher_TeacherId&lt;/code&gt;。对于EF Core将会创建&lt;code&gt;OnlineTeacherTeacherId&lt;/code&gt;和&lt;code&gt;ClassRoomTeacherTeacherId&lt;/code&gt;两个外键。&lt;br/&gt;然后在删除数据库，重新运行一下程序：&lt;br/&gt;&lt;span class=&quot;story_inline_image&quot;&gt;&lt;img title=&quot;enter description here&quot; src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190409153257753-775772158.png&quot; alt=&quot;enter description here&quot; name=&quot;images/1554794206152.png&quot; data-src=&quot;./images/1554794206152.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;看一下生成的数据库：&lt;br/&gt;&lt;span class=&quot;story_inline_image&quot;&gt;&lt;img title=&quot;enter description here&quot; src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190409153258410-204043782.png&quot; alt=&quot;enter description here&quot; name=&quot;images/1554794250389.png&quot; data-src=&quot;./images/1554794250389.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;可以看到现在生成的数据库就是正确的了。&lt;br/&gt;进一步配置，你可以使用ForeignKey特性来配置外键名称：&lt;br/&gt;Course类：&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs hljs&quot; data-info=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Course&lt;/span&gt;
    {
        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; CourseId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; CourseName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; Description { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        [ForeignKey(&lt;span class=&quot;hljs-string&quot;&gt;&quot;OnlineTeacher&quot;&lt;/span&gt;)]
        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; OnlineTeacherId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Teacher OnlineTeacher { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        [ForeignKey(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ClassRoomTeacher&quot;&lt;/span&gt;)]
        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; ClassRoomTeacherId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Teacher ClassRoomTeacher { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;Teacher类：&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs hljs&quot; data-info=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Teacher&lt;/span&gt;
    {
       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; TeacherId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; Name { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

       [InverseProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;OnlineTeacher&quot;&lt;/span&gt;)]
       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ICollection&amp;lt;Course&amp;gt; OnlineCourses { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

       [InverseProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ClassRoomTeacher&quot;&lt;/span&gt;)]
       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ICollection&amp;lt;Course&amp;gt; ClassRoomCourses { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;上面代码中，我们在Corse类中添加两个属性列，配置外键，现在删除数据库，重新运行一下：&lt;br/&gt;&lt;span class=&quot;story_inline_image&quot;&gt;&lt;img title=&quot;enter description here&quot; src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190409153258922-713001086.png&quot; alt=&quot;enter description here&quot; name=&quot;images/1554794623975.png&quot; data-src=&quot;./images/1554794623975.png&quot;/&gt;&lt;/span&gt;&lt;br/&gt;看到报错了，我们修改一下Course类：&lt;br/&gt;Course类最终代码：&lt;/p&gt;
&lt;div class=&quot;xiaoshujiang_code_container&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cs hljs&quot; data-info=&quot;cs&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Course&lt;/span&gt;
    {
        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; CourseId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; CourseName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; Description { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        [ForeignKey(&lt;span class=&quot;hljs-string&quot;&gt;&quot;OnlineTeacher&quot;&lt;/span&gt;)]
        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;? OnlineTeacherId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Teacher OnlineTeacher { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

        [ForeignKey(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ClassRoomTeacher&quot;&lt;/span&gt;)]
        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;? ClassRoomTeacherId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Teacher ClassRoomTeacher { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;重新运行程序：可以看到成功了。&lt;br/&gt;&lt;span class=&quot;story_inline_image&quot;&gt;&lt;img title=&quot;enter description here&quot; src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190409153259308-97367443.png&quot; alt=&quot;enter description here&quot; name=&quot;images/1554794757364.png&quot; data-src=&quot;./images/1554794757364.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;我们看看最终生成的数据库：&lt;br/&gt;&lt;span class=&quot;story_inline_image&quot;&gt;&lt;img title=&quot;enter description here&quot; src=&quot;https://img2018.cnblogs.com/blog/745221/201904/745221-20190409153259874-164034936.png&quot; alt=&quot;enter description here&quot; name=&quot;images/1554794810752.png&quot; data-src=&quot;./images/1554794810752.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;xsj_paragraph xsj_paragraph_level_0&quot;&gt;可以看到生成的外键列就是我们自己自定义的名称了。&lt;br/&gt;综上所述：当两个实体间有多个关系的时候，你可以使用InverseProperty 特性和ForeignKey 特性来配置实体。&lt;/p&gt;
</description>
<pubDate>Tue, 09 Apr 2019 07:33:00 +0000</pubDate>
<dc:creator>灰太狼的梦想</dc:creator>
<og:description>原文链接：https://www.entityframeworktutorial.net/code-first/inverseproperty-dataannotations-attribute-in</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/caofangsheng/p/10677235.html</dc:identifier>
</item>
<item>
<title>最大子数组的线性时间的算法 - acxilon</title>
<link>http://www.cnblogs.com/acxilon/p/10676702.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/acxilon/p/10676702.html</guid>
<description>
&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题来源：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1585434/201904/1585434-20190409134134663-1999210714.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这是真的牛批，没有答案，&lt;img src=&quot;https://img2018.cnblogs.com/blog/1585434/201904/1585434-20190409143014498-1222704902.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这是:MaxSubLinear.h头文件:定义了一个类，用于求给定数组的最大子数组，成员变量和成员函数的说明如下:&lt;/p&gt;
&lt;p&gt;成员变量:&lt;/p&gt;
&lt;p&gt;　　begin_index:最大子数组的起始索引;&lt;/p&gt;
&lt;p&gt;　　end_index:最大子数组的终止索引;&lt;/p&gt;
&lt;p&gt;成员函数:&lt;/p&gt;
&lt;p&gt;　　maxSubArray:给定一个数组和其长度,返回最大子数组的和,参数返回起始索引和终止索引;&lt;/p&gt;
&lt;p&gt;　　linearMaxSubArray:上面函数的改进版本,100%线性时间;&lt;/p&gt;
&lt;p&gt;　　getBeginIndex和getEndIndex用于获取起始索引和终止索引;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#pragma&lt;/span&gt; once
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; MaxSubLinear
{
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
    MaxSubLinear();
    &lt;/span&gt;~&lt;span&gt;MaxSubLinear();
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxSubArray(&lt;span&gt;int&lt;/span&gt;* arr, &lt;span&gt;int&lt;/span&gt; length, &lt;span&gt;int&lt;/span&gt;&amp;amp; begin_index = begin_index, &lt;span&gt;int&lt;/span&gt;&amp;amp; end_index =&lt;span&gt; end_index);
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; linearMaxSubArray(&lt;span&gt;int&lt;/span&gt;* arr, &lt;span&gt;int&lt;/span&gt; length, &lt;span&gt;int&lt;/span&gt;&amp;amp; begin_index = begin_index, &lt;span&gt;int&lt;/span&gt;&amp;amp; end_index =&lt;span&gt; end_index);
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; getBeginIndex() { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; begin_index; }
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; getEndIndex() { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; end_index; }
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; begin_index;
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; end_index;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在需要根据题目的提示,实现最大子数组的函数:&lt;/p&gt;
&lt;p&gt;　　由题目,假设我们已知 A[1...j] 的最大子数组,设该最大子数组为:max_sub_array,接下来要求 A[1... j + 1]的最大子数组,那么A[1...j+1]的最大子数组不外乎两种情况:&lt;/p&gt;
&lt;p&gt;　　　　1.A[1... j+1]的最大子数组还是原来A[1...j]的最大子数组max_sub_array;&lt;/p&gt;
&lt;p&gt;　　　　2.A[1...j+1]的最大子数组是A[i ... j+1],其中1 &amp;lt;= i &amp;lt;=j+1;&lt;/p&gt;
&lt;p&gt;　　算法的核心就是如何从A[1..j]的最大子数组求出A[1..j+1]的最大子数组;&lt;/p&gt;
&lt;p&gt;按照上面的分析,自然而然的可以想到如下的算法:&lt;/p&gt;
&lt;p&gt;　　INT_MIN 是 limits.h 中定义的一个常量,表示最小的int值,&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
int MaxSubLinear::maxSubArray(int* arr, int length, int&amp;amp; begin_index, int&amp;amp; end_index)
{
        int max_sub_sum = INT_MIN;
        int temp_sum = 0;
        for (int i = 0; i &amp;lt; length; i++) {
                for (int j = i; j &amp;gt;= 0; j--) {
                        temp_sum += arr[j];
                        if (temp_sum &amp;gt; max_sub_sum) {
                                max_sub_sum = temp_sum;
                                begin_index = j;
                                end_index = i;
                        }
                }
                temp_sum = 0;
        }
        return max_sub_sum;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　该算法基于如下思想:要从A[1...j]扩展到A[1...j+1],&lt;/p&gt;
&lt;p&gt;　　　　1.先求出A[1...j+1]包含j+1的子数组的最大值,记为temp_sum;&lt;/p&gt;
&lt;p&gt;　　　　2.将temp_sum和A[1...j]的最大子数组max_sub_sum进行比较,取其中的较大者为A[1...j+1]的最大子数组&lt;/p&gt;
&lt;p&gt;　　这个算法很好理解,上面内层的for循环就是求A[1...j+1]的包含j+1索引的最大子数组的过程;&lt;/p&gt;
&lt;p&gt;　　但遗憾的是这个算法并不是线性时间复杂度的,算法时间复杂度分析如下&lt;/p&gt;
&lt;p&gt;　　　　i = 0,内层循环1次&lt;/p&gt;
&lt;p&gt;　　　　i=1,内层循环2次&lt;/p&gt;
&lt;p&gt;　　　　...&lt;/p&gt;
&lt;p&gt;　　　　i=length - 1,内层循环length次&lt;/p&gt;
&lt;p&gt;　　很明显,这是一个等差数列求和公式&lt;img src=&quot;https://img2018.cnblogs.com/blog/1585434/201904/1585434-20190409140501664-208030806.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　所以还是一个&lt;img src=&quot;https://img2018.cnblogs.com/blog/1585434/201904/1585434-20190409140624626-320741064.png&quot; alt=&quot;&quot;/&gt; 复杂度的算法.&lt;/p&gt;
&lt;p&gt;　　当然该算法还可以优化:当arr[i] 为负数时,可以直接判断A[1...j+1]的最大子数组还是原来的A[1...j]的最大子数组,优化后的代码如下:&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; MaxSubLinear::maxSubArray(&lt;span&gt;int&lt;/span&gt;* arr, &lt;span&gt;int&lt;/span&gt; length, &lt;span&gt;int&lt;/span&gt;&amp;amp; begin_index, &lt;span&gt;int&lt;/span&gt;&amp;amp;&lt;span&gt; end_index)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; max_sub_sum =&lt;span&gt; INT_MIN;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; temp_sum = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; length; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (arr[i] &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i; j &amp;gt;= &lt;span&gt;0&lt;/span&gt;; j--&lt;span&gt;) {
            temp_sum &lt;/span&gt;+=&lt;span&gt; arr[j];
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (temp_sum &amp;gt;&lt;span&gt; max_sub_sum) {
                max_sub_sum &lt;/span&gt;=&lt;span&gt; temp_sum;
                begin_index &lt;/span&gt;=&lt;span&gt; j;
                end_index &lt;/span&gt;=&lt;span&gt; i;
            }
        }
        temp_sum &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; max_sub_sum;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到在内层循环开始前,先判断当前元素的正负,如果为负,可以断定,新的最大子数组还是原来的,直接开始下轮循环.但是,这种优化依然不能改变双重循环的事实,算法依然是&lt;img src=&quot;https://img2018.cnblogs.com/blog/1585434/201904/1585434-20190409140624626-320741064.png&quot; alt=&quot;&quot;/&gt; 的.&lt;/p&gt;
&lt;p&gt;正如牛顿说的,为什么他看的比别人远,因为他站在巨人的肩膀上,为达到真理所做的任何努力都不会白费的,当实现上述算法的时候,我们离线性时间复杂度仅一步之遥了.&lt;/p&gt;
&lt;p&gt;分析下上述算法的内层循环,内层循环的功能是求A[1...j+1]的包含j+1索引的最大子数组,只要能够不使用循环求出A[1...j+1]的包含j+1索引的最大子数组就能实现线性时间复杂度,&lt;img src=&quot;https://img2018.cnblogs.com/blog/1585434/201904/1585434-20190409143123147-1840861600.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　就像保存A[1...j]的最大子数组一样,我们可以添加一个变量用于保存A[1...j]的包含j索引的最大子数组;&lt;/p&gt;
&lt;p&gt;　　这样我们就能通过常数步骤实现包含最右边界的最大子数组的扩展.基于这种思想,线性时间复杂度算法如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxSubLinear::linearMaxSubArray(&lt;span&gt;int&lt;/span&gt;* arr, &lt;span&gt;int&lt;/span&gt; length, &lt;span&gt;int&lt;/span&gt;&amp;amp; begin_index, &lt;span&gt;int&lt;/span&gt;&amp;amp;&lt;span&gt; end_index)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; max_sub_sum =&lt;span&gt; INT_MIN;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     begin_index = end_index = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; max_sub_include_right = INT_MIN;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;包含最有边元素的最大子数组&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; maybe_begin_index = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; maybe_end_index = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先求出新的包含最右元素的新的最大子数组&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (max_sub_include_right+arr[i] &amp;gt;&lt;span&gt; arr[i]) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             max_sub_include_right +=&lt;span&gt; arr[i];
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             maybe_end_index =&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             max_sub_include_right =&lt;span&gt; arr[i];
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             maybe_begin_index =&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;取 包含最右元素的子数组 和 以前的最大子数组 中的最大者&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (max_sub_sum &amp;lt;&lt;span&gt; max_sub_include_right) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             max_sub_sum =&lt;span&gt; max_sub_include_right;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             end_index =&lt;span&gt; maybe_end_index;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             begin_index =&lt;span&gt; maybe_begin_index;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; max_sub_sum;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;变量max_sub_include_right保存了包含目前最右索引的最大子数组的和,&lt;br/&gt;maybe_begin_index和maybe_end_index分别是其左边界和右边界索引;&lt;/p&gt;
&lt;p&gt;当需要向右扩展max_sub_include_right的时候,通过和新的最右边界arr[i] 相加再和max_sub_include_right比较来重新给表示包含有边界的三个变量max_sub_include_right,maybe_begin_index和maybe_end_index赋值;&lt;/p&gt;
&lt;p&gt;最后再将包含右边界的最大子数组和原来的最大子数组比较来获得新的最大子数组.&lt;/p&gt;
&lt;p&gt;MaxSubLinear.cpp的完整实现如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MaxSubLinear.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;limits.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;MaxSubLinear::MaxSubLinear()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; MaxSubLinear::~&lt;span&gt;MaxSubLinear()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;静态成员变量在类外面必须初始化&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxSubLinear::begin_index = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxSubLinear::end_index = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxSubLinear::maxSubArray(&lt;span&gt;int&lt;/span&gt;* arr, &lt;span&gt;int&lt;/span&gt; length, &lt;span&gt;int&lt;/span&gt;&amp;amp; begin_index, &lt;span&gt;int&lt;/span&gt;&amp;amp;&lt;span&gt; end_index)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; max_sub_sum =&lt;span&gt; INT_MIN;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; temp_sum = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (arr[i] &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i; j &amp;gt;= &lt;span&gt;0&lt;/span&gt;; j--&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             temp_sum +=&lt;span&gt; arr[j];
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (temp_sum &amp;gt;&lt;span&gt; max_sub_sum) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 max_sub_sum =&lt;span&gt; temp_sum;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 begin_index =&lt;span&gt; j;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 end_index =&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         temp_sum = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; max_sub_sum;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxSubLinear::linearMaxSubArray(&lt;span&gt;int&lt;/span&gt;* arr, &lt;span&gt;int&lt;/span&gt; length, &lt;span&gt;int&lt;/span&gt;&amp;amp; begin_index, &lt;span&gt;int&lt;/span&gt;&amp;amp;&lt;span&gt; end_index)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; max_sub_sum =&lt;span&gt; INT_MIN;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     begin_index = end_index = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; max_sub_include_right = INT_MIN;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;包含最有边元素的最大子数组&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; maybe_begin_index = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; maybe_end_index = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先求出新的包含最右元素的新的最大子数组&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (max_sub_include_right+arr[i] &amp;gt;&lt;span&gt; arr[i]) {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             max_sub_include_right +=&lt;span&gt; arr[i];
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             maybe_end_index =&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;             max_sub_include_right =&lt;span&gt; arr[i];
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;             maybe_begin_index =&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;取 包含最右元素的子数组 和 以前的最大子数组 中的最大者&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (max_sub_sum &amp;lt;&lt;span&gt; max_sub_include_right) {
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;             max_sub_sum =&lt;span&gt; max_sub_include_right;
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;             end_index =&lt;span&gt; maybe_end_index;
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             begin_index =&lt;span&gt; maybe_begin_index;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; max_sub_sum;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对算法的测试代码如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                                    18,20,-7,12
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;             0  1  2  3  4   5   6  7  8  9  10  11  12 13 14 15&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; a[] = { &lt;span&gt;13&lt;/span&gt;,-&lt;span&gt;3&lt;/span&gt;,-&lt;span&gt;25&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;,-&lt;span&gt;3&lt;/span&gt;,-&lt;span&gt;16&lt;/span&gt;,-&lt;span&gt;23&lt;/span&gt;,&lt;span&gt;18&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;,-&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;12&lt;/span&gt;,-&lt;span&gt;5&lt;/span&gt;,-&lt;span&gt;22&lt;/span&gt;,&lt;span&gt;15&lt;/span&gt;,-&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;7&lt;/span&gt;&lt;span&gt; };
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; length = &lt;span&gt;sizeof&lt;/span&gt;(a) / &lt;span&gt;sizeof&lt;/span&gt;(a[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]);
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; begin_index = &lt;span&gt;0&lt;/span&gt;, end_index = &lt;span&gt;0&lt;/span&gt;, max_sum = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    max_sum &lt;/span&gt;=&lt;span&gt; MaxSubLinear::linearMaxSubArray(a, length);
    cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;最大子数组从:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; MaxSubLinear::getBeginIndex() &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 到 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; MaxSubLinear::getEndIndex() &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 最大子数组和是: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; max_sum &amp;lt;&amp;lt;&lt;span&gt; endl;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1585434/201904/1585434-20190409142807886-941567425.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 09 Apr 2019 06:33:00 +0000</pubDate>
<dc:creator>acxilon</dc:creator>
<og:description>问题来源： 这是真的牛批，没有答案， 这是:MaxSubLinear.h头文件:定义了一个类，用于求给定数组的最大子数组，成员变量和成员函数的说明如下: 成员变量: begin_index:最大子数组</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/acxilon/p/10676702.html</dc:identifier>
</item>
<item>
<title>axios（封装使用、拦截特定请求、判断所有请求加载完毕） - 筱月</title>
<link>http://www.cnblogs.com/ainyi/p/10676431.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ainyi/p/10676431.html</guid>
<description>&lt;p&gt;博客地址：&lt;a href=&quot;https://ainyi.com/71&quot; class=&quot;uri&quot;&gt;https://ainyi.com/71&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 Node.js 中使用&lt;/li&gt;
&lt;li&gt;vue2.0之后，就不再对 vue-resource 更新，而是推荐使用 axios，本项目也是使用 axios&lt;/li&gt;
&lt;li&gt;功能特性&lt;/li&gt;
&lt;li&gt;在浏览器中发送 XMLHttpRequests 请求&lt;/li&gt;
&lt;li&gt;在 node.js 中发送 http请求&lt;/li&gt;
&lt;li&gt;支持 Promise API&lt;/li&gt;
&lt;li&gt;拦截请求和响应&lt;/li&gt;
&lt;li&gt;转换请求和响应数据&lt;/li&gt;
&lt;li&gt;取消请求&lt;/li&gt;
&lt;li&gt;自动转换 JSON 数据&lt;/li&gt;
&lt;li&gt;客户端支持保护安全免受 CSRF/XSRF（跨站请求伪造） 攻击&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;封装使用&quot;&gt;封装使用&lt;/h2&gt;
&lt;p&gt;建议拆分三个文件&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;src&lt;br/&gt;-&amp;gt; service&lt;br/&gt;----&amp;gt;axios.js （axios 配置，拦截器、统一 url）&lt;br/&gt;----&amp;gt;index.js （接口方法，里面调用 api 方法，供页面级调用）&lt;br/&gt;----&amp;gt;api&lt;br/&gt;-------&amp;gt;index.js（api 方法，里面调用后端提供的接口，供接口方法调用）&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;axios.js-基本配置&quot;&gt;axios.js 基本配置&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;'use strict';
import axios from 'axios';

// 自动识别接口使用开发环境地址（开发环境地址做了 proxyTable 代理，故设置为空）或线上地址
axios.defaults.baseURL = process.env.NODE_ENV === 'production' ? process.env.API_ROOT : '';
// 开发环境直接打包测试
// axios.defaults.baseURL = '';

axios.interceptors.request.use(config =&amp;gt; {
  return config;
}, error =&amp;gt; {
  console.log(error);
  return Promise.reject(error);
});

axios.interceptors.response.use(res =&amp;gt; {
  const apiRes = res.data;
  return apiRes;
}, async error =&amp;gt; {
  console.dir(error);
  return Promise.reject(error);
});

export default axios;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;apiindex.js-调用后端提供的接口&quot;&gt;api/index.js 调用后端提供的接口&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;import Ax from '@/service/axios';
import qs from 'qs';

export default {
  fetchBlog (reqData) {
    return Ax.get('/krryblog/blog/getBlog', {params: reqData});
  },
  addBlog (reqData) {
    return Ax.post('/krryblog/blog/addBlog', qs.stringify(reqData));
  },
  updateBlog (reqData) {
    return Ax.post('/krryblog/blog/updateBlog', qs.stringify(reqData));
  },
  deleteBlogCover (id, reqData) {
    return Ax.post(`/krryblog/blog/deleteBlogCover/${id}`, qs.stringify(reqData));
  },
};&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;index.js-接口方法调用-api&quot;&gt;index.js 接口方法（调用 api）&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;import Api from './api';

export async function getBlog(reqData) {
  let res = await Api.fetchBlog(reqData);
  return res;
},
export async function addBlog (reqData) {
  let res = await Api.addBlog(reqData);
  return res;
},
export async function updateBlog (reqData) {
  let res = await Api.updateBlog(reqData);
  return res;
},
export async function deleteBlogCover (id, reqData) {
  let res = await Api.deleteBlogCover(id, reqData);
  return res;
},&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;页面调用&quot;&gt;页面调用&lt;/h3&gt;
&lt;p&gt;接下来就可以愉快地在页面调用了&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import { getBlog } from '@/service'
export default {
  data() {
    return {
      tableData: [],
      pageIndex: 1,
      pageSize: 9
    }
  },
  created() {
    this.getList();
  },
  methods: {
    async getList() {
      let { result } = await getBlog({
        pageIndex: this.pageIndex,
        pageSize: this.pageSize
      });
    this.tableData = result.data;
  },
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;axios-执行多个并发请求&quot;&gt;axios 执行多个并发请求&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;async getList() {
  let resArr = []
  for (let val of this.arrId) {
    // push 请求
    resArr.push(queryPropertyValue({ id: val }))
  }
  this.tableData = []
  Promise.all(resArr).then(res =&amp;gt; {
    for (let val of res) {
      let vals = val.result.propertyValues
      // 每个请求的结果 push 到 tableData
      vals.forEach(item =&amp;gt; this.tableData.push(item))
    }
  })
},&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或者直接在 axios 写 promise all&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 根据 id 获取某一条商品数据
let getDetail = (id)=&amp;gt;{
  return axios.get(`/detail?bid=${id}`);
}

// 检测登录的用户是否将此商品加入购物车
let detectCar = (shopId,userId)=&amp;gt;{
  return axios.get(`/detectCar?shopId=${shopId}&amp;amp;userId=${userId}`);
}

// 获取一条商品数据、并且检测是否加入购物车
let getDeAll = (shopId,userId)=&amp;gt;{
  axios.all([
    getDetail(shopId),
    detectCar(shopId,userId)
  ]).then(axios.spread((resDetail, resCar)=&amp;gt;{
    // 两个请求现已完成
    // 打印两个请求的响应值  
    console.log(resDetail);
    console.log(resCar);
  }));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;实例的方法&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;axios#request(config)
axios#get(url [,config])
axios#delete(url [,config])
axios#head(url [,config])
axios#post(url [,data [,config]])
axios#put(url [,data [,config]])
axios#patch(url [,data [,config]])&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;请求配置：只有url是必需的，如果未指定方法，请求将默认为GET&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;axios-拦截特定请求&quot;&gt;axios 拦截特定请求&lt;/h2&gt;
&lt;p&gt;业务上经常出现这个问题，需要拦截某些特定请求，在该特定请求，页面采取或不采取什么变化&lt;/p&gt;
&lt;p&gt;研究 axios 的 request 统一拦截方法：axios.interceptors.request.use(function (config) {})&lt;/p&gt;
&lt;p&gt;参数 config 如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Krryxa/WORK-LEARNING/master/images/p_70.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以发现 config.url 就是请求的接口的地址，那么 “/” 最后的 getClassify 就是该请求的方法，就可以通过取出该字符串来判断某些特定请求，从而做出怎样的变化&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;axios.interceptors.request.use(config =&amp;gt; {
  // 判断请求是否是 getClassify，如果是 getClassify，不加载 LoadingBar
  let url = config.url;
  if (url.split('/').pop() === 'getClassify') {
    flag = false;
  } else {
    iView.LoadingBar.start();
    flag = true;
  }
  return config;
}, error =&amp;gt; {
  console.log(error);
  return Promise.reject(error);
});&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;如何判断所有请求加载完毕&quot;&gt;如何判断所有请求加载完毕&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;let reqNum = 0
axios.interceptors.request.use(function (config) {
  // 在请求发出之前进行一些操作，每次发出请求就 reqNum++
  reqNum++
  _bus.$emit('showloading')
  return config
}

axios.interceptors.response.use(response =&amp;gt; {
  // 接受请求后 reqNum--，判断请求所有请求是否完成
  reqNum--
  if (reqNum &amp;lt;= 0) {
    _bus.$emit('closeLoading')
  } else {
    _bus.$emit('showloading')
  }
})&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;axios-的-post-请求-相关问题&quot;&gt;axios 的 post 请求 相关问题&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;如果遇到 post 请求跨域问题，在 webpack 配置文件可以设置 proxyTable 处理跨域问题&lt;/li&gt;
&lt;li&gt;传送门：&lt;a href=&quot;https://ainyi.com/27&quot; class=&quot;uri&quot;&gt;https://ainyi.com/27&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;post 请求携带参数，需要做一次序列化：qs.stringify(reqData)&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;saveNormalAds (reqData) {
  return Ax.post('/index.php?krry', qs.stringify(reqData));
},&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;博客地址：&lt;a href=&quot;https://ainyi.com/71&quot; class=&quot;uri&quot;&gt;https://ainyi.com/71&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 09 Apr 2019 05:49:00 +0000</pubDate>
<dc:creator>筱月</dc:creator>
<og:description>博客地址： 'https://ainyi.com/71' 基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 Node.js 中使用 vue2.0之后，就不再对 vue resource</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ainyi/p/10676431.html</dc:identifier>
</item>
<item>
<title>微信公众号实现扫码获取微信用户信息（网页授权） - 悦~</title>
<link>http://www.cnblogs.com/nuanai/p/10501946.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nuanai/p/10501946.html</guid>
<description>&lt;p&gt;刚开始接触微信的时候一头雾水，领导想要一个扫码获取微信用户信息的功能，而且是扫的别人的二维码，我是一阵忙活啊。&lt;/p&gt;
&lt;p&gt;经过努力和尝试，终于功夫不负有心人啊，赶紧记录一下，我用的是thinkphp编写的。&lt;span&gt;作者：悦~ 博客园地址：https://www.cnblogs.com/nuanai/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第一步：就是二维码的生成  &lt;span&gt;作者：悦~   网址：https://www.cnblogs.com/nuanai/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1.首先要确定第一个二维码，因为既然是扫码，肯定是要第一个二维码的，也就是第一人才可以。我将第一个二维码的唯一值(id)设置成零，然后开始我的编写&lt;/p&gt;
&lt;p&gt;2.既然是二维码，我用了phpqrcode二维码生成插件，二维码的生成可以在本地编写，查看效果后再上传服务器。&lt;/p&gt;
&lt;p&gt;(1)从网上下载下phpqrcode插件包，将它放到thinkphp的文件里，路径如下：ThinkPHP\Library\Vendor ，截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/748803/201903/748803-20190309161508430-127692476.png&quot; alt=&quot;&quot; width=&quot;496&quot; height=&quot;311&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(2)二维码的生成，在调用显示二维码的控制器的方法中调用这个插件包，然后设置下扫描后跳转的URL就好了，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
$url =&quot;http://www.baidu.com&quot;;
$level=3;
$size=4;
Vendor('phpqrcode.phpqrcode');  //引入插件
$errorCorrectionLevel = intval($level) ;//容错级别
$matrixPointSize = intval($size);//生成图片大小
//生成二维码图片
$object = new \QRcode();  
$path = &quot;Public/ER/1.png&quot;; //本地文件存储路径
$object-&amp;gt;png($url, $path, $errorCorrectionLevel, $matrixPointSize, 2);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这只是实现生成二维码并且可以进入二维码指定的网址，真正要实现的目的是扫带有参数的二维码，获取微信用户的信息&lt;/p&gt;
&lt;p&gt;下面就是怎么实现生成带有参数的二维码   &lt;span&gt; 作者：悦~   网址：https://www.cnblogs.com/nuanai/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3.（1）要用到微信的网页授权，就要用到公众号的几个参数：1是AppID 2是AppSecret  这是公众号申请成功后分配下来的&lt;/p&gt;
&lt;p&gt;（2）利用这两个参数，然后再配合获取access_token的值就可以了&lt;/p&gt;
&lt;p&gt;代码如下（扫描后跳转到getUserInfo方法，并且把唯一键值传过去）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
$tid = 0;  //传值的参数
$level=3;
$size=4;
Vendor('phpqrcode.phpqrcode');
$errorCorrectionLevel = intval($level) ;//容错级别
$matrixPointSize = intval($size);//生成图片大小
//生成二维码图片
$object = new \QRcode();
$path = &quot;Public/ER/&quot; . $tid . &quot;.png&quot;; //本地文件存储路径
$object-&amp;gt;png($url, $path, $errorCorrectionLevel, $matrixPointSize, 2);

$appid='******';  //公众号唯一标识
$redirect_uri = urlencode ( 'http://www.****.net/index.php/Admin/Sindex/getUserInfo?id='.$tid );  //这个是设置参数和授权后重定向的回调链接地址
//snsapi_userinfo弹出授权页面，可通过openid拿到昵称、性别、所在地   snsapi_base ，不弹出授权页面，直接跳转，只能获取用户openid　
$url =&quot;https://open.weixin.qq.com/connect/oauth2/authorize?appid=$appid&amp;amp;redirect_uri=$redirect_uri&amp;amp;response_type=code&amp;amp;scope=snsapi_userinfo&amp;amp;state=1#wechat_redirect&quot;;  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面是写跳转后的操作    &lt;span&gt;作者：悦~   网址：https://www.cnblogs.com/nuanai/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（1）接收传过来的值&lt;/p&gt;
&lt;p&gt;（2）取得openid&lt;/p&gt;
&lt;p&gt;（3）根据全局access_token和openid查询用户信息  &lt;/p&gt;
&lt;p&gt;（4）将信息写入数据库&lt;/p&gt;
&lt;p&gt;获取openid或者其他的东西，用到下面的方法，可以快速截取到需要的东西&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;44&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
function getJson($url){
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); 
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE); 
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $output = curl_exec($ch);
    curl_close($ch);
    return json_decode($output, true);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　接下来就是将上面的步骤逐一实现，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
public function getUserInfo()
{
    $appid = &quot;*****&quot;;  //公众号唯一标识
    $secret = &quot;*****&quot;;  //应用秘钥
                
    //$code是回调的时候地址上带的 只需要get方式接收就可以了
    $code = $_GET[&quot;code&quot;];  

    //获取传过来的值
    $htjid = $_GET[&quot;id&quot;];
                
    //第一步:取得openid
    $oauth2Url = &quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=$appid&amp;amp;secret=$secret&amp;amp;code=$code&amp;amp;grant_type=authorization_code&quot;;
    $oauth2 = $this-&amp;gt;getJson($oauth2Url);
                  
    //第二步:根据全局access_token和openid查询用户信息  
    $access_token = $oauth2[&quot;access_token&quot;];  
    $openid = $oauth2['openid'];  
    $get_user_info_url = &quot;https://api.weixin.qq.com/sns/userinfo?access_token=$access_token&amp;amp;openid=$openid&amp;amp;lang=zh_CN&quot;;
    $userinfo = $this-&amp;gt;getJson($get_user_info_url);
                
    //写入数据库微信用户
    M()-&amp;gt;startTrans();//开启事务
    $n = M(&quot;zp_user&quot;); //写入的表
                
    $openid = $data['openid'] = $userinfo['openid'];  //微信用户openid
    $data['sex'] = $userinfo['sex'];  //性别 
    $data['headimgurl'] = $userinfo['headimgurl'];  //头像
    $data['province'] = $userinfo['province'];  //地区sheng
    $data['city'] = $userinfo['city'];  //地区shi
    $data['subscribe_time'] = time();  //时间
    $data['qr_scene'] = $htjid;  //传过的值
    $data['nickname'] = $userinfo['nickname'];  //昵称
    $z = $n-&amp;gt;lock(true)-&amp;gt;add($data);
    if(!$z)
    {
        M()-&amp;gt;rollback();//回滚
        $this-&amp;gt;error('添加错误!');
    }else{
        M()-&amp;gt;commit();//事务提交
    }

}    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 到此，就可以实现扫描二维码获取用户信息了，并且将用户信息写入数据库&lt;/p&gt;
&lt;p&gt;这是第一个二维码，生成后，就可以将id的参数值换成前面传过来的值，也就是扫码的值 $tid = 0; //传值的参数&lt;/p&gt;
&lt;p&gt;如果想要自己的二维码页面好看的话，比如想要把自己的微信昵称和二维码合成一张图片的话，也是可以实现的，这就要用到图片的合成了，下次再说吧。&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 作者：悦~   网址：https://www.cnblogs.com/nuanai/&lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Tue, 09 Apr 2019 05:14:00 +0000</pubDate>
<dc:creator>悦~</dc:creator>
<og:description>刚开始接触微信的时候一头雾水，领导想要一个扫码获取微信用户信息的功能，而且是扫的别人的二维码，我是一阵忙活啊。 经过努力和尝试，终于功夫不负有心人啊，赶紧记录一下，我用的是thinkphp编写的。作者</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nuanai/p/10501946.html</dc:identifier>
</item>
<item>
<title>大数据技术 - MapReduce 作业的运行机制 - 渡码</title>
<link>http://www.cnblogs.com/duma/p/10666269.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/duma/p/10666269.html</guid>
<description>&lt;p&gt;&lt;span&gt;前几章我们介绍了 Hadoop 的 MapReduce 和 HDFS 两大组件，内容比较基础，看完后可以写简单的 MR 应用程序，也能够用命令行或 Java API 操作 HDFS。但要对 Hadoop 做深入的了解，显然不够用。因此本章就深入了解一下 MapReduce 应用的运行机制，从而学习 Hadoop 各个组件之间如何配合完成 MR 作业。本章是基于 Hadoop YARN 框架介绍，YARN（Yet Another Resource Negotiator）是 Hadoop 的集群资源管理器，也是 Hadoop2 的默认资源管理器。为什么要用 YARN 框架？ 简单来说 Hadoop1 的时候没有资源管理器，因此在 Hadoop1 集群只能运行 MR 作业。YARN 出现后统一管理集群的资源，因此 Spark、Storm 等其他分布式计算框架也能运行在 Hadoop 集群。同理，除了 YARN 还有其他的资源管理框架，目前比较火的是 k8s。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;运行机制&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;运行一个 MR 程序主要涉及以下 5 个部分：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;客户端： 提交 MR 作业，也就是我们运行 hadoop jar xxx 的命令后，启动的 Java 程序&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;YARN ResourceManager： YARN 集群主节点，负责协调集群上计算资源的分配&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;YARN NodeManager：YARN 集群从节点，负责启动和监视机器上的容器（container）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;MapReduce Application Master：负责协调  MR 作业，当然 Spark 作业也有对应的 application master&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;运行 MR 任务的工作原理如下图，本图摘自《Hadoop 权威指南（第四版）》：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1129006/201904/1129006-20190407182319051-644098649.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;步骤1 是我们在客户端节点（集群中的某台机器）执行 hadoop jar xxx 命令后，启动 MR 作业的流程，后续会涉及以下几个重要流程&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;作业的提交和初始化&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;任务的分配与执行&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;进度和状态的更新&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;下面会详细介绍每个流程。这里我们将编写的整个 MR 程序叫做作业，MR作业运行后的 map 或 reduce 任务统称为任务。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;任务的提交和初始化&lt;/h2&gt;
&lt;h3&gt;作业的提交&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;向 ResourceManager 申请一个新的应用 ID（步骤 2），之前的 MR 例子我们可以看到，应用 ID 的形式为：&lt;em&gt;application_1551593879638_0009&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;计算作业分片检查作业的输入输出，若输入文件不可分割或者输入路径不存在，报错返回；如果没有指定输出路径或者输出路径已存在，报错返回&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;将作业运行所需的资源（jar、配置文件和分片信息等）复制到共享文件系统中（步骤 3），默认为 HDFS 。目录名称以应用 ID 命名&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;调用 ResourceManager 的 submitApplication() 方法提交作业（步骤4）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;以上的流程均在客户端节点完成。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;作业的初始化&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;ResourceManager 收到调用它的 submitApplication() 方法后，会在 NodeManager 中分配一个 container （步骤 5a），在 container 中启动 application master（步骤 5b） 。MapReduce application master 的主类是 MRAppMaster。application master 完成初始化后（步骤 6），从共享文件系统（如：HDFS）获取分片信息（步骤 7）。对每个分片创建一个 map 任务和 reduce 任务，并分配任务 ID。如果 application master 判断该任务不是 uber 任务，那么接下来会进行任务分配。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;任务分配与运行&lt;/h2&gt;
&lt;h3&gt;任务分配&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;application master 会为 map 任务和 reduce 任务向 ResourceManager 申请分配资源。map 任务的优先级高于 reduce 任务，且直到 5% 的 map 任务完成时，reduce 任务请求才能发出。reduce 任务可以在集群的任意机器执行，但 map 任务有数据本地化的限制，理想情况下数据分片和 map 任务在同一节点运行，即数据本地化（data local），这样 map 任务直接读取本地的数据，不需要网络 IO。如果达不到理想情况，可以在数据节点同一机架上启动 map 任务，即机架本地化（rack local），这样 map 任务从同机架上其他节点将数据拷贝到自己的节点。最差的情况是分片和 map 任务不在同一机架，需要跨机架拷贝数据。application master 申请的资源包括内存和 CPU 核心数，申请的大小可以通过 4 个属性指定：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;mapreduce.map.memory.mb：map 任务内存， 单位：MB，默认：1024&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;mapreduce.map.cpu.vcores：map 任务 CPU 核心数，默认：1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;mapreduce.reduce.memory.mb：reduce 任务内存，单位：MB，默认：1024&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;mapreduce.reduce.cpu.vcores：reduce 任务 CPU 核心数，默认：1&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;任务执行&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;ResourceManager 为任务在某个 NodeManager 上分配容器后（步骤 9a），application master 会与该 NodeManager 通信来启动容器（步骤 9b）。该任务的主类为 YarnChild，该任务运行前会先将共享文件系统（如：HDFS）上的文件本地化（步骤 10），文件包括：配置文件、JAR包和分布式缓存文件。最后，运行 map 或 reduce 任务（步骤 11）。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;进度和状态更新&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;当用户成功提交并且作业成功运行后，用户希望能够看到作业的运行状态。一个作业和它的每个任务都有一个状态，包括：作业或任务的状态（比如，运行中、成功或失败），map 或 reduce 任务的进度以及计数器值等。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;当 map 或 reduce 任务运行时，通过接口向自己的 application master 上报进度和状态&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;作业的运行期间，客户端请求 application master 以获得最新的状态&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;流程图如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1129006/201904/1129006-20190407202517437-1192945495.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;作业的完成&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;application master 接到最后一个任务成功完成的通知后，便把作业置位成功得状态。可以端查询到任务成功完成后，从 waitCompletion() 方法返回。作业的统计信息和计数器值输出在控制台。最后，application master 会做一些清理工作，作业信息由 JobHistoryServer 存档，以便用户以后查询。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;本章主要介绍 MR 作业的运行机制，并且了解了 YARN 集群主从节点职责及其相互之间的配合。通过这篇文章的介绍希望读者对 MR 作业的运行机制有大致的了解。我们可以简单总结下本章介绍的相关组件的作用。&lt;/span&gt;&lt;span&gt;本文主要参考《Hadoop 权威指南（第四版）》和 Hadoop 官方文档，有兴趣的读者可以深入研究，一起探讨。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 09 Apr 2019 04:59:00 +0000</pubDate>
<dc:creator>渡码</dc:creator>
<og:description>前几章我们介绍了 Hadoop 的 MapReduce 和 HDFS 两大组件，内容比较基础，看完后可以写简单的 MR 应用程序，也能够用命令行或 Java API 操作 HDFS。但要对 Hadoo</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/duma/p/10666269.html</dc:identifier>
</item>
<item>
<title>基于STM8的GPIO操作 - 浩宇99✌</title>
<link>http://www.cnblogs.com/zhenghaoyu/p/10676192.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenghaoyu/p/10676192.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.综诉&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也许单片机在你看来是一件不太容易的事，但据我所知，单片机，无非就是控制它的GPIO口，所以可以看出，学会如何操作控制GPIO口很重要。&lt;/p&gt;
&lt;p&gt;在装载STM8的单片机中，I/O共有12种工作模式。实际上这里的概念也是和STM32等其他单片机，理解了这12种状态，也就基本上理解了大部分I/O口。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.库文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;打开库文件stm8s_gpio.h文件中可以找到，STM8全部的I\O模式。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; typedef &lt;span&gt;enum&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   GPIO_MODE_IN_FL_NO_IT      = (uint8_t)&lt;span&gt;0x00&lt;/span&gt;,  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&amp;lt; Input floating, no external interrupt &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;   GPIO_MODE_IN_PU_NO_IT      = (uint8_t)&lt;span&gt;0x40&lt;/span&gt;,  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&amp;lt; Input pull-up, no external interrupt &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;   GPIO_MODE_IN_FL_IT         = (uint8_t)&lt;span&gt;0x20&lt;/span&gt;,  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&amp;lt; Input floating, external interrupt &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;   GPIO_MODE_IN_PU_IT         = (uint8_t)&lt;span&gt;0x60&lt;/span&gt;,  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&amp;lt; Input pull-up, external interrupt &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;   GPIO_MODE_OUT_OD_LOW_FAST  = (uint8_t)&lt;span&gt;0xA0&lt;/span&gt;,  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&amp;lt; Output open-drain, low level, 10MHz &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   GPIO_MODE_OUT_PP_LOW_FAST  = (uint8_t)&lt;span&gt;0xE0&lt;/span&gt;,  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&amp;lt; Output push-pull, low level, 10MHz &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   GPIO_MODE_OUT_OD_LOW_SLOW  = (uint8_t)&lt;span&gt;0x80&lt;/span&gt;,  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&amp;lt; Output open-drain, low level, 2MHz &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;   GPIO_MODE_OUT_PP_LOW_SLOW  = (uint8_t)&lt;span&gt;0xC0&lt;/span&gt;,  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&amp;lt; Output push-pull, low level, 2MHz &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;   GPIO_MODE_OUT_OD_HIZ_FAST  = (uint8_t)&lt;span&gt;0xB0&lt;/span&gt;,  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&amp;lt; Output open-drain, high-impedance level,10MHz &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;   GPIO_MODE_OUT_PP_HIGH_FAST = (uint8_t)&lt;span&gt;0xF0&lt;/span&gt;,  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&amp;lt; Output push-pull, high level, 10MHz &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;   GPIO_MODE_OUT_OD_HIZ_SLOW  = (uint8_t)&lt;span&gt;0x90&lt;/span&gt;,  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&amp;lt; Output open-drain, high-impedance level, 2MHz &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;   GPIO_MODE_OUT_PP_HIGH_SLOW = (uint8_t)&lt;span&gt;0xD0&lt;/span&gt;   &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&amp;lt; Output push-pull, high level, 2MHz &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; }GPIO_Mode_TypeDef;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在芯片资料中我们可以看到，I/O口的基本结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545743/201904/1545743-20190409094253628-1195934776.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;由于我们使用库函数开发，因此本文就不再解释具体的位操作了，如想了解请察看STM8芯片的手册。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.模式介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.1 浮空输入（Input Floating）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　浮空输入在 I\O 模式中带有 IN_FL 字眼，如：GPIO_MODE_IN_FL_NO_IT 、GPIO_MODE_IN_FL_IT。&lt;/p&gt;
&lt;p&gt;　　浮空输入也叫悬浮输入，一般把浮空输入和上拉输入做类比学习。浮空输入的电平不确定的，即使外部的一个很小的输入信号都会使其发生改变。如果引脚设置为悬空的情况下，读取该端口的电平是不确定的。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 上拉输入（Input pull-up）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　上拉输入在 I\O 模式中带有 IN_PU 字眼，如：GPIO_MODE_IN_PU_NO_IT 、GPIO_MODE_IN_PU_IT。&lt;/p&gt;
&lt;p&gt;　　上拉输入的时候，引脚内部有一个上拉电阻通过开关连接到电源VDD， 当引脚没有和外部电路连接时，设置上拉输入方式的I/O引脚电平是确定的高电平。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.3 开漏输出（Output open-drain）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　开漏输入在 I\O 模式中带有 OUT_OD 字眼，如：GPIO_MODE_OUT_OD_LOW_FAST 、GPIO_MODE_OUT_OD_LOW_SLOW 、 GPIO_MODE_OUT_OD_HIZ_FAST 、 GPIO_MODE_OUT_OD_HIZ_SLOW。　　　　　　　　&lt;/p&gt;
&lt;p&gt;　　开漏输出就是不输出电压，低电平时接地，高电平时不接地。如果外接上拉电阻，则在输出高电平时电压会拉到上拉电阻的电源电压。这种方式适合在连接的外设电压比单片机电压低的时候。输出端出跟集电极开路十&lt;/p&gt;
&lt;p&gt;分相似，工作原理也是一样的。不同的是，开漏输出使用的场效应管，使用时要加上拉电阻。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.4 推挽输出（Output push-pull）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　推挽输入在 I\O 模式中带有 Output push-pull 字眼，如：GPIO_MODE_OUT_PP_LOW_FAST 、 GPIO_MODE_OUT_PP_LOW_SLOW 、 GPIO_MODE_OUT_PP_HIGH_FAST 、&lt;/p&gt;
&lt;p&gt;GPIO_MODE_OUT_PP_HIGH_SLOW。&lt;/p&gt;
&lt;p&gt;　　推挽输出可以输出高,低电平,连接数字器件; 推挽结构一般是指两个三极管分别受两互补信号的控制,总是在一个三极管导通的时候另一个截止。高低电平由IC的电源低定。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.5 中断和输出速度&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　中断在 I\O 模式中带有 IT 字眼。中断只存在输入中，因为在输出中设置中断也没有意义，中断的意思就是中止当前的工作，然后去执行另外的任务，执行完之后再回来执行原来的任务。&lt;/p&gt;
&lt;p&gt;　　输出速度也只存在输出中，计算出单片机最高的晶振可以调整 I\O 输出速度，如：low level,10MHz、low level,2MHz、high-impedance level,10MHz、high level,10MHz、high-impedance level, 2MHz、high level, 2MHz。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.例程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　在主函数调用MX_GPIO_Init()函数初始 I\O 的引角，再调用GPIO_TogglePin()函数对 I\O 进行一个翻转，直接将一个LED灯进行翻转的话则可以看到明显的变化。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;******************************************************************************
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;* Function Name  : MX_GPIO_Init
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;* Description    : GPIO_Init
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;* Input          : None
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;* Output         : None
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;* Return         : None
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;*******************************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; MX_GPIO_Init(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;LED                                    模式为推挽高速输出&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  GPIO_Init(Led_Opt_GPIO_Port,Led_Opt_Pin, GPIO_MODE_OUT_PP_HIGH_FAST);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;   
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;******************************************************************************
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;* Function Name  : GPIO_TogglePin
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;* Description    : None
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;* Input          : None
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;* Output         : None
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;* Return         : None
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;*******************************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; GPIO_TogglePin(GPIO_TypeDef*&lt;span&gt; GPIOx, GPIO_Pin_TypeDef GPIO_Pin)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;   
&lt;span&gt;26&lt;/span&gt;   GPIOx-&amp;gt;ODR ^=&lt;span&gt; GPIO_Pin;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;   
&lt;span&gt;28&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1545743/201904/1545743-20190409123413047-1329696491.jpg&quot; alt=&quot;&quot; width=&quot;425&quot; height=&quot;319&quot;/&gt;          &lt;img src=&quot;https://img2018.cnblogs.com/blog/1545743/201904/1545743-20190409123458835-1917955759.jpg&quot; alt=&quot;&quot; width=&quot;424&quot; height=&quot;318&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　 　　　　　LED灭　　　　　　　　　　　　　　　　　　　　　                　　　　    　LED亮&lt;/p&gt;
&lt;p&gt;对GPIO的说明到这里就结束，感谢你们的观看。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;作 者：浩宇99✌
出 处：https://www.cnblogs.com/zhenghaoyu/p/10676192.html&lt;br/&gt;版权声明：本文原创发表于 博客园，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则视为侵权。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 09 Apr 2019 04:42:00 +0000</pubDate>
<dc:creator>浩宇99✌</dc:creator>
<og:description>1.综诉 也许单片机在你看来是一件不太容易的事，但据我所知，单片机，无非就是控制它的GPIO口，所以可以看出，学会如何操作控制GPIO口很重要。 在装载STM8的单片机中，I/O共有12种工作模式。实</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenghaoyu/p/10676192.html</dc:identifier>
</item>
<item>
<title>利用Redis keyspace notification(键空间通知)实现过期提醒 - Martini</title>
<link>http://www.cnblogs.com/martini-d/p/10675945.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/martini-d/p/10675945.html</guid>
<description>&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;本文所说的定时任务或者说计划任务并不是很多人想象中的那样，比如说每天凌晨三点自动运行起来跑一个脚本。这种都已经烂大街了，随便一个 Crontab 就能搞定了。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;这里所说的定时任务可以说是计时器任务，比如说用户触发了某个动作，那么从这个点开始过二十四小时我们要对这个动作做点什么。那么如果有 1000 个用户触发了这个动作，就会有 1000 个定时任务。于是这就不是 Cron 范畴里面的内容了。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;举个最简单的例子，一个用户推荐了另一个用户，我们定一个二十四小时之后的任务，看看被推荐的用户有没有来注册，如果没注册就给他搞一条短信过去&lt;/span&gt;&lt;/p&gt;

&lt;ol class=&quot;ol-list&quot; readability=&quot;0&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;设置了生存时间的Key，在过期时能不能有所提示？&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;如果能对过期Key有个监听，如何对过期Key进行一个回调处理？&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;如何使用 Redis 来实现定时任务？&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-0.5&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;更具体需求：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;现在需要做一个拍卖活动，如何在拍卖结束那一刻，就执行任务进行相关逻辑；&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;如何在订单交易有效期时间结束的那一刻，进行相关逻辑&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;在 Redis 的 2.8.0 版本之后，其推出了一个新的特性——键空间消息（Redis Keyspace Notifications），它配合 2.0.0 版本之后的 SUBSCRIBE 就能完成这个定时任务&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;的操作了，不过定时的单位是秒。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;&lt;strong&gt;（1）Publish / Subscribe&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Redis 在 2.0.0 之后推出了 Pub / Sub 的指令，大致就是说一边给 Redis 的特定频道发送消息，另一边从 Redis 的特定频道取值——形成了一个简易的消息队列。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;&lt;strong&gt;（2）Redis Keyspace Notifications&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;在 Redis 里面有一些事件，比如键到期、键被删除等。然后我们可以通过配置一些东西来让 Redis 一旦触发这些事件的时候就往特定的 Channel 推一条消息。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;大致的流程就是我们给 Redis 的某一个 db 设置过期事件，使其键一旦过期就会往特定频道推消息，我在自己的客户端这边就一直消费这个频道就好了。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;以后一来一条定时任务，我们就把这个任务状态压缩成一个键，并且过期时间为距这个任务执行的时间差。那么当键一旦到期，就到了任务该执行的时间，Redis 自然会把过期消息推去，我们的客户端就能接收到了。这样一来就起到了定时任务的作用。&lt;/span&gt;&lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;配置&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;因为开启键空间通知功能需要消耗一些 CPU ， 所以在默认配置下， 该功能处于关闭状态。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;可以通过修改 &lt;span&gt;&lt;code&gt;redis.conf&lt;/code&gt; &lt;span&gt;文件， 或者直接使用 &lt;span&gt;&lt;code&gt;CONFIG SET&lt;/code&gt; &lt;span&gt;命令来开启或关闭键空间通知功能：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;&lt;code&gt;notify-keyspace-events&lt;/code&gt; &lt;span&gt;的参数可以是以下字符的任意组合， 它指定了服务器该发送哪些类型的通知：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;table class=&quot;md-table&quot;&gt;&lt;thead&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;th&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;字符&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;发送的通知&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;  K&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;键空间通知，所有通知以 &lt;span&gt;&lt;code&gt;__keyspace@&amp;lt;db&amp;gt;__&lt;/code&gt; &lt;span&gt;为前缀&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;  E&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;键事件通知，所有通知以 &lt;span&gt;&lt;code&gt;__keyevent@&amp;lt;db&amp;gt;__&lt;/code&gt; &lt;span&gt;为前缀&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;  g&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;DEL&lt;/code&gt; &lt;span&gt;、 &lt;span&gt;&lt;code&gt;EXPIRE&lt;/code&gt; &lt;span&gt;、 &lt;span&gt;&lt;code&gt;RENAME&lt;/code&gt; &lt;span&gt;等类型无关的通用命令的通知&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;  $&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;字符串命令的通知&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;  l&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;列表命令的通知&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;  s&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;集合命令的通知&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;  h&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;哈希命令的通知&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;  z&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;有序集合命令的通知&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;  x&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;过期事件：每当有过期键被删除时发送&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;  e&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;驱逐(evict)事件：每当有键因为 &lt;span&gt;&lt;code&gt;maxmemory&lt;/code&gt; &lt;span&gt;政策而被删除时发送&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;&lt;code&gt;  A&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;td-span&quot;&gt;&lt;span&gt;参数 &lt;span&gt;&lt;code&gt;g$lshzxe&lt;/code&gt; &lt;span&gt;的别名&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;输入的参数中至少要有一个 &lt;span&gt;&lt;code&gt;K&lt;/code&gt; &lt;span&gt;或者 &lt;span&gt;&lt;code&gt;E&lt;/code&gt; &lt;span&gt;， 否则的话， 不管其余的参数是什么， 都不会有任何通知被分发。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;举个例子， 如果只想订阅键空间中和列表相关的通知， 那么参数就应该设为 &lt;span&gt;&lt;code&gt;Kl&lt;/code&gt; &lt;span&gt;， 诸如此类。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;将参数设为字符串 &lt;span&gt;&lt;code&gt;&quot;AKE&quot;&lt;/code&gt; &lt;span&gt;表示发送所有类型的通知。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;监听过期事件需要设置Redis 配置文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
notify-keyspace-events &quot;Ex&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;命令产生的通知&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;以下列表记录了不同命令所产生的不同通知：&lt;/span&gt;&lt;/p&gt;
&lt;h2 class=&quot;md-end-block&quot;&gt;&lt;span&gt;Note&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;所有命令都只在键&lt;span&gt;&lt;strong&gt;真的&lt;/strong&gt;&lt;span&gt;被改动了之后，才会产生通知。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;比如说，当 [SREM key member &lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;http://redisdoc.com/set/srem.html#srem&quot;&gt;&lt;span&gt;member …&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; &lt;span&gt;试图删除不存在于集合的元素时，删除操作会执行失败，因为没有真正的改动键，所以这一操作不会发送通知。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;如果对命令所产生的通知有疑问， 最好还是使用以下命令， 自己来验证一下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
$ redis-cli config set notify-keyspace-&lt;span&gt;events KEA
$ redis&lt;/span&gt;-cli --csv psubscribe &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__key*__:*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
Reading messages... (press Ctrl&lt;/span&gt;-&lt;span&gt;C to quit)
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;psubscribe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__key*__:*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;然后， 只要在其他终端里用 Redis 客户端发送命令， 就可以看到产生的通知了：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pmessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__key*__:*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__keyspace@0__:foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pmessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__key*__:*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__keyevent@0__:set&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;过期通知的发送时间&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Redis 使用以下两种方式删除过期的键：&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;0&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;当一个键被访问时，程序会对这个键进行检查，如果键已经过期，那么该键将被删除。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;底层系统会在后台渐进地查找并删除那些过期的键，从而处理那些已经过期、但是不会被访问到的键。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;当过期键被以上两个程序的任意一个发现、 并且将键从数据库中删除时， Redis 会产生一个 &lt;span&gt;&lt;code&gt;expired&lt;/code&gt; &lt;span&gt;通知。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Redis 并不保证生存时间（TTL）变为 &lt;span&gt;&lt;code&gt;0&lt;/code&gt; &lt;span&gt;的键会立即被删除： 如果程序没有访问这个过期键， 或者带有生存时间的键非常多的话， 那么在键的生存时间变为 &lt;span&gt;&lt;code&gt;0&lt;/code&gt; &lt;span&gt;， 直到键真正被删除这中间， 可能会有一段比较显著的时间间隔。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;因此， Redis 产生 &lt;span&gt;&lt;code&gt;expired&lt;/code&gt; &lt;span&gt;通知的时间为过期键被删除的时候， 而不是键的生存时间变为 &lt;span&gt;&lt;code&gt;0&lt;/code&gt; &lt;span&gt;的时候。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;因为 Redis 目前的订阅与发布功能采取的是发送即忘（fire and forget）策略， 所以如果你的程序需要可靠事件通知（reliable notification of events）， 那么目前的键空间通知可能并不适合你：当订阅事件的客户端断线时， 它会丢失所有在断线期间分发给它的事件。并不能确保消息送达。未来有计划允许更可靠的事件传递，但可能这将在更一般的层面上解决，或者为Pub / Sub本身带来可靠性，或者允许Lua脚本拦截Pub / Sub消息来执行诸如推送将事件列入清单。&lt;/span&gt;&lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;事件类型&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;对于每个修改数据库的操作，键空间通知都会发送两种不同类型的事件消息：keyspace 和 keyevent。以 keyspace 为前缀的频道被称为键空间通知（key-space notification）， 而以 keyevent 为前缀的频道则被称为键事件通知（key-event notification）。&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block ty-contain-cm modeLoaded&quot;&gt;
&lt;span&gt;&lt;span class=&quot;cm-variable&quot;&gt;事件是用  &lt;span class=&quot;cm-variable&quot;&gt;__keyspace@DB__:&lt;span class=&quot;cm-variable&quot;&gt;KeyPattern &lt;span class=&quot;cm-variable&quot;&gt;或者  &lt;span class=&quot;cm-variable&quot;&gt;__keyevent@DB__:&lt;span class=&quot;cm-variable&quot;&gt;OpsType &lt;span class=&quot;cm-variable&quot;&gt;的格式来发布消息的。&lt;br/&gt;&lt;span&gt;&lt;span class=&quot;cm-variable&quot;&gt;DB表示在第几个库；KeyPattern则是表示需要监控的键模式（可以用通配符，如：__key&lt;span class=&quot;cm-operator&quot;&gt;*&lt;span class=&quot;cm-variable&quot;&gt;__:&lt;span class=&quot;cm-operator&quot;&gt;*&lt;span class=&quot;cm-variable&quot;&gt;）；OpsType则表示操作类型。因此，如果想要订阅特殊的Key上的事件，应该是订阅keyspace。&lt;br/&gt;&lt;span&gt;&lt;span class=&quot;cm-variable&quot;&gt;比如说，对 &lt;span class=&quot;cm-number&quot;&gt;0 &lt;span class=&quot;cm-variable&quot;&gt;号数据库的键 &lt;span class=&quot;cm-variable&quot;&gt;mykey &lt;span class=&quot;cm-variable&quot;&gt;执行 &lt;span class=&quot;cm-variable&quot;&gt;DEL &lt;span class=&quot;cm-variable&quot;&gt;命令时， &lt;span class=&quot;cm-variable&quot;&gt;系统将分发两条消息， &lt;span class=&quot;cm-variable&quot;&gt;相当于执行以下两个 &lt;span class=&quot;cm-variable&quot;&gt;PUBLISH &lt;span class=&quot;cm-variable&quot;&gt;命令：&lt;br/&gt;&lt;span&gt;&lt;span class=&quot;cm-variable&quot;&gt;PUBLISH &lt;span class=&quot;cm-variable&quot;&gt;__keyspace@0__:&lt;span class=&quot;cm-variable&quot;&gt;sampleKey &lt;span class=&quot;cm-variable&quot;&gt;del&lt;br/&gt;&lt;span&gt;&lt;span class=&quot;cm-variable&quot;&gt;PUBLISH &lt;span class=&quot;cm-variable&quot;&gt;__keyevent@0__:&lt;span class=&quot;cm-variable&quot;&gt;del &lt;span class=&quot;cm-variable&quot;&gt;sampleKey&lt;br/&gt;&lt;span&gt;&lt;span class=&quot;cm-variable&quot;&gt;订阅第一个频道 &lt;span class=&quot;cm-variable&quot;&gt;__keyspace@0__:&lt;span class=&quot;cm-variable&quot;&gt;mykey &lt;span class=&quot;cm-variable&quot;&gt;可以接收 &lt;span class=&quot;cm-number&quot;&gt;0 &lt;span class=&quot;cm-variable&quot;&gt;号数据库中所有修改键 &lt;span class=&quot;cm-variable&quot;&gt;mykey &lt;span class=&quot;cm-variable&quot;&gt;的事件， &lt;span class=&quot;cm-variable&quot;&gt;而订阅第二个频道 &lt;span class=&quot;cm-variable&quot;&gt;__keyevent@0__:&lt;span class=&quot;cm-variable&quot;&gt;del &lt;span class=&quot;cm-variable&quot;&gt;则可以接收 &lt;span class=&quot;cm-number&quot;&gt;0 &lt;span class=&quot;cm-variable&quot;&gt;号数据库中所有执行 &lt;span class=&quot;cm-variable&quot;&gt;del &lt;span class=&quot;cm-variable&quot;&gt;命令的键。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;为了高可用性，为了确保解决过期事件的执行，将 定时事件存入MySQL数据库。触发键过期事件后，再查询一次数据库，检查一下过期事件是否全部执行了。&lt;/span&gt;&lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;数据表结构&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `tb_time_limit_task` (
  `id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) unsigned &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
  `&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;` &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8 COLLATE utf8_bin &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Redis键&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `status` &lt;/span&gt;&lt;span&gt;tinyint&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;) unsigned &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;状态，0未处理，1已处理&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `start_time` &lt;/span&gt;&lt;span&gt;decimal&lt;/span&gt;(&lt;span&gt;13&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;) unsigned &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;开始时间(小数部分为毫秒)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `end_time` &lt;/span&gt;&lt;span&gt;decimal&lt;/span&gt;(&lt;span&gt;13&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;) unsigned &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;结束时间（小数部分为毫秒）&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`id`),
  &lt;/span&gt;&lt;span&gt;KEY&lt;/span&gt; `we` (`&lt;span&gt;key&lt;/span&gt;&lt;span&gt;`) USING BTREE
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;InnoDB &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;utf8 COMMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;这个表用于记录需要时间控制的任务Key，配合Redis、以及回调脚本使用&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
​
key存储规则是 类名&lt;/span&gt;&lt;span&gt;@方法名@参数&lt;/span&gt;...   (参数可为空，多个参数以&lt;span&gt;@分隔&lt;/span&gt;&lt;span&gt;) 
例子： PTCountdown&lt;/span&gt;&lt;span&gt;@countdown@218&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;实现思路：&lt;/span&gt;&lt;/h2&gt;
&lt;ol class=&quot;ol-list&quot; start=&quot;&quot; readability=&quot;0&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;2&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;（查询数据库）&lt;span&gt;&lt;strong&gt;任务状态检查&lt;/strong&gt;&lt;span&gt;，执行未正常执行的任务&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;&lt;strong&gt;任务状态检查&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;查询 ”结束时间 &amp;lt; 当前时间“ 的未处理的任务&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;如果存在，则执行任务，&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span class=&quot;md-tab&quot;&gt;&lt;span&gt;1.先解析key，类名@方法名@参数... &lt;span class=&quot;md-tab&quot;&gt;&lt;span class=&quot;md-softbreak&quot;&gt;&lt;span&gt;​ &lt;span class=&quot;md-tab&quot;&gt;&lt;span&gt;2.然后根据类名去执行相应方法&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;连接redis&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;2&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;生成订阅消息丢失控制键&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;向redis初始新增 10个有效期（900/1800/...）的键&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;pre class=&quot;md-fences md-end-block ty-contain-cm modeLoaded&quot;&gt;
&lt;span&gt;#SILCK`1 900&lt;br/&gt;&lt;span&gt;#SILCK`2 1800&lt;br/&gt;&lt;span&gt;#SILCK`3 2700&lt;br/&gt;&lt;span&gt;...&lt;br/&gt;&lt;span&gt;#SILCK`10 9000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;这一步的目的是 每900秒（15）分钟，查询数据库，检查任务执行情况&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;ol-list&quot; start=&quot;4&quot;&gt;&lt;li class=&quot;md-list-item&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;订阅过期事件&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;具体代码：&lt;/span&gt;&lt;/h2&gt;
&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;监听脚本&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;88&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Description:时间结点任务监听
 * Created by dong.cx
 * DateTime: 2019-03-15 10:58
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

namespace wladmin\cmd;

\think\Loader&lt;/span&gt;::addNamespace('wlmis', './wlmis/'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; wlmis\logic\timeLimitTask\base\TimeLimitTaskLogic;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; think\Config;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; think\console\Input;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; think\console\Output;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; think\console\Command;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt; think\&lt;span&gt;Log&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; wlmis\common\redis\Redis;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; wlmis\logic\timeLimitTask\base\LogRecord;

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; TimeLimitTask &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Command
{
    &lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; LogRecord;
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 订阅信息丢失控制键最大数量
     * @var int
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;$subscription_info_loss_control_key_max&lt;/span&gt; = 10&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 订阅信息丢失控制键最后执行的索引，键的索引从1开始，为0表示未执行过，这个变量用于控制订阅信息控制键自动生成
     * @var int
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;$subscription_info_loss_control_key_last&lt;/span&gt; = 0&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __construct(&lt;span&gt;$name&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
    {
        parent&lt;/span&gt;::__construct(&lt;span&gt;$name&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 日志记录初始化&lt;/span&gt;
        &lt;span&gt;Log&lt;/span&gt;::&lt;span&gt;init([
            &lt;/span&gt;'type' =&amp;gt; 'File',
            'path' =&amp;gt; RUNTIME_PATH . 'redis-logs/',
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; error和sql日志单独记录&lt;/span&gt;
            'apart_level' =&amp;gt; ['log', 'error', 'sql', 'debug', 'info', 'notice'],&lt;span&gt;
        ]);
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 运行方式 php tp5cornnew.php TimeLimitTask
     * @author dong.cx 2019-04-02 10:59
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; configure()
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;setName('TimeLimitTask')-&amp;gt;setDescription('Redis keyspace notification subscription script'&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; execute(Input &lt;span&gt;$input&lt;/span&gt;, Output &lt;span&gt;$output&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 配置断线重连&lt;/span&gt;
        Config::set('database.break_reconnect', &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;$config&lt;/span&gt; = Config::get('redis_db'&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;$reconnect_str&lt;/span&gt; = ''&lt;span&gt;;
        RedisReconnect&lt;/span&gt;:
        &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('info', &quot;ThinkPHP Version: &quot; .&lt;span&gt; THINK_VERSION);
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('info', &lt;span&gt;$reconnect_str&lt;/span&gt; . &quot;Redis host: &quot; . &lt;span&gt;$config&lt;/span&gt;['host'], &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 进行任务状态检查&lt;/span&gt;
            &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;taskStatusCheck();
            &lt;/span&gt;&lt;span&gt;$redis&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; Redis(&lt;span&gt;get_class&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;), &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$redis&lt;/span&gt;-&amp;gt;ping() == '+PONG'&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('info', 'Connection succeeded', &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查看在脚本未运行期间是否有部分任务未处理&lt;/span&gt;
                &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;taskStatusCheck();
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 生成订阅消息丢失控制键&lt;/span&gt;
            &lt;span&gt;$this&lt;/span&gt;-&amp;gt;subscription_info_loss_control(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('info', 'Start listening', &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 订阅消息&lt;/span&gt;
            &lt;span&gt;$redis&lt;/span&gt;-&amp;gt;psubscribe(&lt;span&gt;array&lt;/span&gt;&lt;span&gt;(
                &lt;/span&gt;'__keyevent@' . &lt;span&gt;$config&lt;/span&gt;['db'] . '__:expired'&lt;span&gt;
            )&lt;/span&gt;, &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$redis&lt;/span&gt;, &lt;span&gt;$pattern&lt;/span&gt;, &lt;span&gt;$channelName&lt;/span&gt;, &lt;span&gt;$message&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;$msg_split&lt;/span&gt; = &lt;span&gt;explode&lt;/span&gt;('`', &lt;span&gt;$message&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$msg_split&lt;/span&gt;) == 2 &amp;amp;&amp;amp; &lt;span&gt;$msg_split&lt;/span&gt;[0] == '#SILCK' &amp;amp;&amp;amp; &lt;span&gt;is_numeric&lt;/span&gt;(&lt;span&gt;$msg_split&lt;/span&gt;[1&lt;span&gt;])) {
                    &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;subscription_info_loss_control_key_last = &lt;span&gt;$msg_split&lt;/span&gt;[1&lt;span&gt;];
                    &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;taskStatusCheck();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$this&lt;/span&gt;-&amp;gt;subscription_info_loss_control_key_last &amp;gt; (&lt;span&gt;$this&lt;/span&gt;-&amp;gt;subscription_info_loss_control_key_max / 2&lt;span&gt;)) {
                        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;subscription_info_loss_control();
                        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;subscription_info_loss_control_key_last = 0&lt;span&gt;;
                    }
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里代表是Redis回调执行&lt;/span&gt;
                    &lt;span&gt;$this&lt;/span&gt;-&amp;gt;task(&lt;span&gt;$message&lt;/span&gt;&lt;span&gt;);
                }
            });
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (\RedisException &lt;span&gt;$redisThrow&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Redis抛出异常，一般的情况是失去连接，执行重新连接&lt;/span&gt;
            &lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('notice', &quot;Redis loses connection and is reconnecting...&quot;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;$redis&lt;/span&gt;-&amp;gt;&lt;span&gt;close();
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (\&lt;span&gt;Exception&lt;/span&gt; &lt;span&gt;$ee&lt;/span&gt;&lt;span&gt;) {
            }
            &lt;/span&gt;&lt;span&gt;sleep&lt;/span&gt;(10&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;$reconnect_str&lt;/span&gt; = 'Reconnect '&lt;span&gt;;
            goto RedisReconnect;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (\&lt;span&gt;Exception&lt;/span&gt; &lt;span&gt;$e&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 运行错误，这里抛出错误的原因为这个文件中的代码有误，其他任务执行代码抛出错误，不会导致运行中断 - 执行到这里运行中断&lt;/span&gt;
            &lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('error', 'Run-time error' . &lt;span&gt;PHP_EOL&lt;/span&gt; . 'File location: ' . &lt;span&gt;$e&lt;/span&gt;-&amp;gt;getFile() . &lt;span&gt;PHP_EOL&lt;/span&gt; . 'Line: ' . &lt;span&gt;$e&lt;/span&gt;-&amp;gt;getLine() . &lt;span&gt;PHP_EOL&lt;/span&gt; . 'Error Message: ' . &lt;span&gt;$e&lt;/span&gt;-&amp;gt;getMessage() . &lt;span&gt;PHP_EOL&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        }
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 任务执行
     * @param string $key 任务键名，记录于Redis中的键名
     *                         键名规则：类名@方法名@参数...(后续的多个参数都用@分隔)，在时间限制任务基类中有生成键的封装函数
     * @author: dong.cx
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; task(&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;$params&lt;/span&gt; = &lt;span&gt;explode&lt;/span&gt;('@', &lt;span&gt;$key&lt;/span&gt;, 3&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$params&lt;/span&gt;) &amp;lt; 2&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;$class&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; \ReflectionClass('wlmis\\logic\\timeLimitTask\\' . &lt;span&gt;$params&lt;/span&gt;[0&lt;span&gt;]);
            &lt;/span&gt;&lt;span&gt;$instance&lt;/span&gt; = &lt;span&gt;$class&lt;/span&gt;-&amp;gt;&lt;span&gt;newInstance();
            &lt;/span&gt;&lt;span&gt;$transfer&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$params&lt;/span&gt;) == 3&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;$transfer&lt;/span&gt; = &lt;span&gt;explode&lt;/span&gt;('@', &lt;span&gt;$params&lt;/span&gt;[2&lt;span&gt;]);
            }
            &lt;/span&gt;&lt;span&gt;$instance&lt;/span&gt;-&amp;gt;call_func(&lt;span&gt;$params&lt;/span&gt;[1], &lt;span&gt;$transfer&lt;/span&gt;&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (\&lt;span&gt;Exception&lt;/span&gt; &lt;span&gt;$e&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('notice', 'Task execution class or method not found! Or call the method to throw an error.'
                . &lt;span&gt;PHP_EOL&lt;/span&gt; . 'Pass Key Parameter: ' . &lt;span&gt;$key&lt;/span&gt; . &lt;span&gt;PHP_EOL&lt;/span&gt; . 'File location: ' . &lt;span&gt;get_class&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;. &lt;span&gt;PHP_EOL&lt;/span&gt; . 'Line: ' . &lt;span&gt;$e&lt;/span&gt;-&amp;gt;getLine() . &lt;span&gt;PHP_EOL&lt;/span&gt; . 'Error Message: ' . &lt;span&gt;$e&lt;/span&gt;-&amp;gt;getMessage() . &lt;span&gt;PHP_EOL&lt;/span&gt; . &lt;span&gt;PHP_EOL&lt;/span&gt;&lt;span&gt;);
        }
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 任务状态检查，执行未正常执行的任务
     * @author dong.cx 2019-04-02 10:57
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; taskStatusCheck()
    {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;$result&lt;/span&gt; = (&lt;span&gt;new&lt;/span&gt; TimeLimitTaskLogic())-&amp;gt;&lt;span&gt;getNotPerformedTask();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;empty&lt;/span&gt;(&lt;span&gt;$result&lt;/span&gt;&lt;span&gt;)) {
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('info', 'Find ' . &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$result&lt;/span&gt;) . ' unprocessed task：'&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;$result&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;task(&lt;span&gt;$value&lt;/span&gt;['key'&lt;span&gt;]);
                }
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (\&lt;span&gt;Exception&lt;/span&gt; &lt;span&gt;$e&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('notice', 'An exception occurred during task status checking.'&lt;span&gt;);
        }
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 生成订阅消息丢失控制键
     * @param boolean $always_output_screen 不管不否在调试模式都输出到屏幕
     *
     * @author dong.cx 2019-04-02 10:58
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; subscription_info_loss_control(&lt;span&gt;$always_output_screen&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('info', 'Generates subscription information loss control keys.', &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;$always_output_screen&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;$success&lt;/span&gt; = 0&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;$error&lt;/span&gt; = 0&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;$redis&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Redis();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;$i&lt;/span&gt; = 1; &lt;span&gt;$i&lt;/span&gt; &amp;lt;= &lt;span&gt;$this&lt;/span&gt;-&amp;gt;subscription_info_loss_control_key_max; &lt;span&gt;$i&lt;/span&gt;++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;$redis&lt;/span&gt;-&amp;gt;setex('#SILCK`' . &lt;span&gt;$i&lt;/span&gt;, &lt;span&gt;$i&lt;/span&gt; * 900, '') ? &lt;span&gt;$success&lt;/span&gt;++ : &lt;span&gt;$error&lt;/span&gt;++&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('info', 'Generates loss control keys: ' . &lt;span&gt;$this&lt;/span&gt;-&amp;gt;subscription_info_loss_control_key_max . ' total, ' . &lt;span&gt;$success&lt;/span&gt; . ' success, ' . &lt;span&gt;$error&lt;/span&gt; . ' error', &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;$always_output_screen&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;$redis&lt;/span&gt;-&amp;gt;&lt;span&gt;close();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (\&lt;span&gt;Exception&lt;/span&gt; &lt;span&gt;$e&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('notice', 'An exception occurs when the subscription information loss control key is created.', &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;$always_output_screen&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;键事件回调操作&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Description:拍卖倒计时操作
 * Created by dong.cx
 * DateTime: 2019-03-18 10:04
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

namespace wlmis\logic\timeLimitTask;


&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; think\Config;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt; think\&lt;span&gt;Exception&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; wlmis\common\redis\Redis;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; wlmis\dao\addons\auction\AuctionGoodsDao;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; wlmis\logic\oper\addons\auction\AuctionLogic;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; wlmis\logic\timeLimitTask\base\TimeLimitBaseLogic;

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; AuctionCutDownLogic &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; TimeLimitBaseLogic
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;$auctionGoodsDao&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __construct()
    {
        parent&lt;/span&gt;::&lt;span&gt;__construct();
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;auctionGoodsDao = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuctionGoodsDao();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 拍卖结束, 更新拍品表/保单表 操作
     * @param $params
     *
     * @author dong.cx 2019-03-18 18:39
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; auctionEndCutDown(&lt;span&gt;$params&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;$auctionId&lt;/span&gt; = &lt;span&gt;$params&lt;/span&gt;[0&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;$auctionLogic&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuctionLogic();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;$auctionId&lt;/span&gt; || !&lt;span&gt;is_numeric&lt;/span&gt;(&lt;span&gt;$auctionId&lt;/span&gt;)) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Exception&lt;/span&gt;('Params error'&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;$goodsInfo&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;auctionGoodsDao-&amp;gt;load(&lt;span&gt;$auctionId&lt;/span&gt;, 'final_end_time'&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;$goodsInfo&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('notice', 'tb_auction_goods主键:' . &lt;span&gt;$auctionId&lt;/span&gt; . '不存在'&lt;span&gt;);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                parent&lt;/span&gt;::&lt;span&gt;startTrans();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 拍卖结束&lt;/span&gt;
                &lt;span&gt;$result&lt;/span&gt; = &lt;span&gt;$auctionLogic&lt;/span&gt;-&amp;gt;auctionEnded(&lt;span&gt;$auctionId&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$result&lt;/span&gt;['code'] == 0&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('notice', &lt;span&gt;$result&lt;/span&gt;['msg'&lt;span&gt;]);
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 更改mysql中键的状态为已处理&lt;/span&gt;
                &lt;span&gt;$this&lt;/span&gt;-&amp;gt;recording_process_mysql(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;key_splice(&lt;span&gt;__FUNCTION__&lt;/span&gt;, [&lt;span&gt;$auctionId&lt;/span&gt;&lt;span&gt;]));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 删除 redis 当前价&lt;/span&gt;
                &lt;span&gt;$redis&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Redis();
                &lt;/span&gt;&lt;span&gt;$redis&lt;/span&gt;-&amp;gt;del('auction_gid@' . &lt;span&gt;$auctionId&lt;/span&gt; . '@current_bid'&lt;span&gt;);

                websocket_send(&lt;/span&gt;&lt;span&gt;$auctionId&lt;/span&gt; . 'bid/index', &lt;span&gt;true&lt;/span&gt;, 2, '拍卖结束'&lt;span&gt;);
            }
            parent&lt;/span&gt;::&lt;span&gt;commit();

        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (&lt;span&gt;Exception&lt;/span&gt; &lt;span&gt;$e&lt;/span&gt;&lt;span&gt;) {
            parent&lt;/span&gt;::&lt;span&gt;rollback();
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;throw_message(&lt;span&gt;__FUNCTION__&lt;/span&gt;, &lt;span&gt;$e&lt;/span&gt;&lt;span&gt;);
        }
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 拍卖交易结束
     *     无订单/未付款,不释放保证金
     * @param $params
     *
     * @author dong.cx 2019-03-18 20:15
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; dealCutDown(&lt;span&gt;$params&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;$auctionId&lt;/span&gt; = &lt;span&gt;$params&lt;/span&gt;[0&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;$auctionLogic&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuctionLogic();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            parent&lt;/span&gt;::&lt;span&gt;startTrans();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;$auctionId&lt;/span&gt; || !&lt;span&gt;is_numeric&lt;/span&gt;(&lt;span&gt;$auctionId&lt;/span&gt;)) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Exception&lt;/span&gt;('Params error'&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;$goodsInfo&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;auctionGoodsDao-&amp;gt;load(&lt;span&gt;$auctionId&lt;/span&gt;, 'final_end_time'&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;$goodsInfo&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('notice', 'tb_auction_goods主键:' . &lt;span&gt;$auctionId&lt;/span&gt; . '不存在'&lt;span&gt;);
            } &lt;/span&gt;&lt;span&gt;elseif&lt;/span&gt; (!&lt;span&gt;$goodsInfo&lt;/span&gt;['final_end_time'&lt;span&gt;]) {
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('notice', 'tb_auction_goods主键:' . &lt;span&gt;$auctionId&lt;/span&gt; . '的拍品还未结束或最终结束时间为空'&lt;span&gt;);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;$result&lt;/span&gt; = &lt;span&gt;$auctionLogic&lt;/span&gt;-&amp;gt;checkStatus(&lt;span&gt;$auctionId&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$result&lt;/span&gt;['code'] == 0) &lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('notice', &lt;span&gt;$result&lt;/span&gt;['msg'&lt;span&gt;]);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 更改mysql中键的状态为已处理&lt;/span&gt;
                &lt;span&gt;$this&lt;/span&gt;-&amp;gt;recording_process_mysql(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;key_splice(&lt;span&gt;__FUNCTION__&lt;/span&gt;, [&lt;span&gt;$auctionId&lt;/span&gt;&lt;span&gt;]));
            }
            parent&lt;/span&gt;::&lt;span&gt;commit();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (&lt;span&gt;Exception&lt;/span&gt; &lt;span&gt;$e&lt;/span&gt;&lt;span&gt;) {
            parent&lt;/span&gt;::&lt;span&gt;rollback();
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;throw_message(&lt;span&gt;__FUNCTION__&lt;/span&gt;, &lt;span&gt;$e&lt;/span&gt;&lt;span&gt;);
        }
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 创建拍卖结束倒计时任务
     * @param $auctionId
     * @param int $ttl
     *
     * @throws Exception
     * @author dong.cx 2019-04-01 09:49
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; auction_end_countdown_create(&lt;span&gt;$auctionId&lt;/span&gt;, &lt;span&gt;$ttl&lt;/span&gt;=0&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;create('auctionEndCutDown', &lt;span&gt;$ttl&lt;/span&gt;, [&lt;span&gt;$auctionId&lt;/span&gt;&lt;span&gt;]);
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 删除拍卖结束倒计时任务
     * @param int $auctionId 拍卖商品表主键
     *
     * @return bool|int
     * @throws Exception
     * @author dong.cx 2019-04-01 10:08:49
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; auction_end_countdown_delete(&lt;span&gt;$auctionId&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;del_key('auctionEndCutDown', [&lt;span&gt;$auctionId&lt;/span&gt;&lt;span&gt;]);
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 创建交易倒计时任务
     * @param int $auctionId 拍卖商品表主键
     * @param int $ttl 生存时间
     *
     * @throws Exception
     * 异常代码：
     * 500     redis操作失败
     * @author dong.cx 2019-03-22 15:36
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; deal_countdown_create(&lt;span&gt;$auctionId&lt;/span&gt;, &lt;span&gt;$ttl&lt;/span&gt;=0&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;create('dealCutDown', &lt;span&gt;$ttl&lt;/span&gt; + Config::get('auction_deal_limit_time'), [&lt;span&gt;$auctionId&lt;/span&gt;&lt;span&gt;]);
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 删除交易倒计时任务
     * @param int $auctionId 拍卖商品表主键
     *
     * @return bool|int
     * @throws Exception
     * @author dong.cx 2019-03-22 15:36
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; deal_countdown_delete(&lt;span&gt;$auctionId&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;del_key('countdown', [&lt;span&gt;$auctionId&lt;/span&gt;&lt;span&gt;]);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;任务基类&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;81&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by dong.cx
 * Date: 2019/3/27 17:13
 * Description: 时间限制任务基类
 *              每一个子类继承这个基类实现时间任务调度
 *              子类中开放给Redis调度的函数设置访问权限为protected，防止外部误触发
 *              子类中其他开放给内部调用的访问权限为public
 * ************************************************
 * 存储到Redis中的键名规则为：类名@方法名@参数...(参数可为空，多个参数则以@分隔) key_splice 函数可生成键
 * 所有的参数通过一个数组传入方法(一维索引数组，跟存储函数 create 传入参数时一样)
 * 类名、方法名，尽量精简，能节约带宽以及Redis查询速度
 * 参数设计也尽量精简，所有操作都在服务端内部完成，所以能用1个条件准确查询数据库的，不要用两个条件查询
 *
 * 存储键直接使用 create 方法，以秒为单位，会自动拼接键键
 * 如果以毫秒为单位则 create_ms 方法
 * ************************************************
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

namespace wlmis\logic\timeLimitTask\base;


&lt;/span&gt;&lt;span&gt;use&lt;/span&gt; think\&lt;span&gt;Exception&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; wlmis\common\redis\Redis;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; wlmis\model\sys\TimeLimitTaskModel;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; wlmis\logic\BaseLogic;

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; TimeLimitBaseLogic &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; BaseLogic
{
    &lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; LogRecord;

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * Redis连接实例
     * @var Redis
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;$redis&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * TimeLimitBaseLogic constructor.
     * @author dong.cx
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __construct()
    {
        parent&lt;/span&gt;::&lt;span&gt;__construct();
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;redis = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Redis();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 任务调度入口
     * @param string $funcName 调用方法名
     * @param array $params 传递参数
     * @author: dong.cx
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; call_func(&lt;span&gt;$funcName&lt;/span&gt;, &lt;span&gt;$params&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;())
    {
        &lt;/span&gt;&lt;span&gt;call_user_func&lt;/span&gt;(&lt;span&gt;array&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;, &lt;span&gt;$funcName&lt;/span&gt;), &lt;span&gt;$params&lt;/span&gt;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 键拼接
     * 键用 @ 符号作为分隔符，所以方法名、参数中不可出现
     * 键名规则中的类名会自动生成
     * @param string $funcName 方法名
     * @param array $params 参数（必须传入一维索引数组，请勿传入关联数组，按照顺序生成参数，关联数组不保证顺序）
     * @return string                  返回键
     * @author: dong.cx
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; key_splice(&lt;span&gt;$funcName&lt;/span&gt;, &lt;span&gt;$params&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;())
    {
        &lt;/span&gt;&lt;span&gt;$class&lt;/span&gt; = &lt;span&gt;explode&lt;/span&gt;('\\', &lt;span&gt;get_class&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;$paramsStr&lt;/span&gt; = ''&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;$params&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;$paramsStr&lt;/span&gt; .= '@' . &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$class&lt;/span&gt;[&lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$class&lt;/span&gt;) - 1] . '@' . &lt;span&gt;$funcName&lt;/span&gt; . &lt;span&gt;$paramsStr&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 向Redis存储键（延时单位秒）
     * 会自动将参数进行拼接，然后存入Redis
     * @param string $funcName 调用方法名
     * @param int $ttl 延时(秒)
     * @param array $params 参数（必须传入一维索引数组，请勿传入关联数组，按照顺序生成参数，关联数组不保证顺序）
     * @throws Exception
     * *********************
     * 异常代码：
     * 500     redis操作失败
     * *********************
     * @author: dong.cx
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; create(&lt;span&gt;$funcName&lt;/span&gt;, &lt;span&gt;$ttl&lt;/span&gt; = 0, &lt;span&gt;$params&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;())
    {
        &lt;/span&gt;&lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;key_splice(&lt;span&gt;$funcName&lt;/span&gt;, &lt;span&gt;$params&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;recording_mysql(&lt;span&gt;$key&lt;/span&gt;, &lt;span&gt;$ttl&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;redis-&amp;gt;setex(&lt;span&gt;$key&lt;/span&gt;, &lt;span&gt;$ttl&lt;/span&gt;, ''&lt;span&gt;))) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Exception&lt;/span&gt;('Redis存储失败', 500&lt;span&gt;);
        }
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 向Redis存储键（延时单位毫秒）
     * 会自动将参数进行拼接，然后存入Redis
     * @param string $funcName 调用方法名
     * @param int $ttl 延时(毫秒)
     * @param array $params 参数（必须传入一维索引数组，请勿传入关联数组，按照顺序生成参数，关联数组不保证顺序）
     * @throws Exception
     * *********************
     * 异常代码：
     * 500     redis操作失败
     * *********************
     * @author: dong.cx
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; create_ms(&lt;span&gt;$funcName&lt;/span&gt;, &lt;span&gt;$ttl&lt;/span&gt; = 0, &lt;span&gt;$params&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;())
    {
        &lt;/span&gt;&lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;key_splice(&lt;span&gt;$funcName&lt;/span&gt;, &lt;span&gt;$params&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;recording_mysql(&lt;span&gt;$key&lt;/span&gt;, &lt;span&gt;$ttl&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;redis-&amp;gt;psetex(&lt;span&gt;$key&lt;/span&gt;, &lt;span&gt;$ttl&lt;/span&gt;, ''&lt;span&gt;))) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Exception&lt;/span&gt;('Redis存储失败', 500&lt;span&gt;);
        }
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 获取指定键的剩余生存时间（秒）
     * @param string $funcName  任务方法名
     * @param array $params 任务参数
     * @return bool|int         如果为false，说明Redis连接失败
     *                          如果为-1，说明改键不是定时键
     *                          如果为-2，说明键不存在（已消失）
     *                          其他为剩余生存时间(秒)
     * @throws Exception
     * @author: dong.cx
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; getTTL(&lt;span&gt;$funcName&lt;/span&gt;, &lt;span&gt;$params&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;())
    {
        &lt;/span&gt;&lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;key_splice(&lt;span&gt;$funcName&lt;/span&gt;, &lt;span&gt;$params&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;redis-&amp;gt;ttl(&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 获取指定键的剩余生存时间（毫秒）
     * @param string $funcName  任务方法名
     * @param array $params 任务参数
     * @return bool|int         如果为false，说明Redis连接失败
     *                          如果为-1，说明改键不是定时键
     *                          如果为-2，说明键不存在（已消失）
     *                          其他为剩余生存时间(秒)
     * @throws Exception
     * @author: dong.cx
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; getPTTL(&lt;span&gt;$funcName&lt;/span&gt;, &lt;span&gt;$params&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;())
    {
        &lt;/span&gt;&lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;key_splice(&lt;span&gt;$funcName&lt;/span&gt;, &lt;span&gt;$params&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;redis-&amp;gt;pttl(&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 删除指定键
     * ***********************************************
     * 删除不会触发事件，用于无用记录的删除
     * 如生成支付订单二次提交时删除前面一个未处理任务。
     * 一般在设计任务处理流程时需要考虑到无用任务的触发，并进行规避，必要时进行主动删除任务可以减轻服务器负担
     * 任务处理流程应该做到无用记录的触发不会影响到系统正常运行
     * ***********************************************
     * @param $funcName
     * @param array $params
     * @return bool|int         返回false则Redis实例获取失败，连接不上，返回int则为影响的记录条数
     * @throws Exception
     * @author: dong.cx
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; del_key(&lt;span&gt;$funcName&lt;/span&gt;, &lt;span&gt;$params&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;())
    {
        &lt;/span&gt;&lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;key_splice(&lt;span&gt;$funcName&lt;/span&gt;, &lt;span&gt;$params&lt;/span&gt;&lt;span&gt;);
        TimeLimitTaskModel&lt;/span&gt;::where('key', &lt;span&gt;$key&lt;/span&gt;)-&amp;gt;&lt;span&gt;update([
            &lt;/span&gt;'sts' =&amp;gt; 1&lt;span&gt;
        ]);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;redis-&amp;gt;del(&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 记录键到mysql中，
     * @param string $key 键
     * @param int $ttl 触发时间
     * @param bool $mode 当为false时，触发时间为秒，当为true时，触发时间为毫秒
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @author: dong.cx
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; recording_mysql(&lt;span&gt;$key&lt;/span&gt;, &lt;span&gt;$ttl&lt;/span&gt;, &lt;span&gt;$mode&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$mode&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里说明 TTL 以毫秒为单位&lt;/span&gt;
            &lt;span&gt;$currentTime&lt;/span&gt; = &lt;span&gt;bcmul&lt;/span&gt;(&lt;span&gt;microtime&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;), '1', 3&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;$endTime&lt;/span&gt; = &lt;span&gt;bcadd&lt;/span&gt;(&lt;span&gt;$currentTime&lt;/span&gt;, &lt;span&gt;bcdiv&lt;/span&gt;(&lt;span&gt;$ttl&lt;/span&gt;, '1000', 3), 3&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里说明 TTL 以秒为单位&lt;/span&gt;
            &lt;span&gt;$currentTime&lt;/span&gt; = &lt;span&gt;time&lt;/span&gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;$endTime&lt;/span&gt; = &lt;span&gt;$currentTime&lt;/span&gt; + &lt;span&gt;$ttl&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (TimeLimitTaskModel::field('id')-&amp;gt;where('key', &lt;span&gt;$key&lt;/span&gt;)-&amp;gt;find() !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            TimeLimitTaskModel&lt;/span&gt;::where('key', &lt;span&gt;$key&lt;/span&gt;)-&amp;gt;&lt;span&gt;update([
                &lt;/span&gt;'status'     =&amp;gt; 0,
                'start_time' =&amp;gt; &lt;span&gt;$currentTime&lt;/span&gt;,
                'end_time'   =&amp;gt; &lt;span&gt;$endTime&lt;/span&gt;&lt;span&gt;
            ]);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            TimeLimitTaskModel&lt;/span&gt;::&lt;span&gt;create([
                &lt;/span&gt;'key'        =&amp;gt; &lt;span&gt;$key&lt;/span&gt;,
                'status'     =&amp;gt; 0,
                'start_time' =&amp;gt; &lt;span&gt;$currentTime&lt;/span&gt;,
                'end_time'   =&amp;gt; &lt;span&gt;$endTime&lt;/span&gt;,
                'sts'        =&amp;gt; 0&lt;span&gt;
            ]);
        }
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 更改键在mysql中的状态为已处理
     * @param $key
     * @author: dong.cx
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; recording_process_mysql(&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;$tlm&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TimeLimitTaskModel();
        &lt;/span&gt;&lt;span&gt;$tlm&lt;/span&gt;-&amp;gt;where('key', &lt;span&gt;$key&lt;/span&gt;)-&amp;gt;&lt;span&gt;update([
            &lt;/span&gt;'status' =&amp;gt; 1&lt;span&gt;
        ]);
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 抛出错误信息
     * @param string $funcName 出错方法名(__FUNCTION__)
     * @param \Exception $e 错误信息
     * @author: dong.cx
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; throw_message(&lt;span&gt;$funcName&lt;/span&gt;, \&lt;span&gt;Exception&lt;/span&gt; &lt;span&gt;$e&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;logRecord('error', 'The task logic has made an error:' . &lt;span&gt;PHP_EOL&lt;/span&gt; . 'Class：' . &lt;span&gt;get_class&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;. &lt;span&gt;PHP_EOL&lt;/span&gt; . 'Method name：' . &lt;span&gt;$funcName&lt;/span&gt; . &lt;span&gt;PHP_EOL&lt;/span&gt; . 'File：' . &lt;span&gt;$e&lt;/span&gt;-&amp;gt;getFile() . &lt;span&gt;PHP_EOL&lt;/span&gt; . 'Line: ' . &lt;span&gt;$e&lt;/span&gt;-&amp;gt;&lt;span&gt;getLine()
            &lt;/span&gt;. &lt;span&gt;PHP_EOL&lt;/span&gt; . 'Error Message：' . &lt;span&gt;$e&lt;/span&gt;-&amp;gt;getMessage() . &lt;span&gt;PHP_EOL&lt;/span&gt;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 析构函数
     * @author dong.cx
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __destruct()
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;redis-&amp;gt;&lt;span&gt;close();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;运行&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
 ✘  ~/Documents/&lt;span&gt;card253  php tp5cornnew.php TimeLimitTask
【&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;:&lt;span&gt;02&lt;/span&gt;】ThinkPHP Version: &lt;span&gt;5.0&lt;/span&gt;.&lt;span&gt;7&lt;/span&gt;&lt;span&gt;
【&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;:&lt;span&gt;02&lt;/span&gt;】Redis host: &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;
【&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;:&lt;span&gt;02&lt;/span&gt;&lt;span&gt;】Connection succeeded
【&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;:&lt;span&gt;02&lt;/span&gt;&lt;span&gt;】Generates subscription information loss control keys.
【&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;:&lt;span&gt;02&lt;/span&gt;】Generates loss control keys: &lt;span&gt;10&lt;/span&gt; total, &lt;span&gt;10&lt;/span&gt; success, &lt;span&gt;0&lt;/span&gt;&lt;span&gt; error
【&lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;:&lt;span&gt;02&lt;/span&gt;】Start listening
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;使用：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;只需要启动脚本，&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;在需要的时候，新增任务即可&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block&quot;&gt;参考资料：&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;a title=&quot;redis键空间&quot; href=&quot;http://redisdoc.com/topic/notification.html&quot; target=&quot;_blank&quot;&gt;redis键空间&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/tinywan/p/5903988.html&quot;&gt;Redis实践操作之—— keyspace notification（键空间通知）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Tue, 09 Apr 2019 04:34:00 +0000</pubDate>
<dc:creator>Martini</dc:creator>
<og:description>一、序言： 本文所说的定时任务或者说计划任务并不是很多人想象中的那样，比如说每天凌晨三点自动运行起来跑一个脚本。这种都已经烂大街了，随便一个 Crontab 就能搞定了。 这里所说的定时任务可以说是计</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/martini-d/p/10675945.html</dc:identifier>
</item>
</channel>
</rss>