<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【linux】系统编程-2-消息队列 - 李柱明</title>
<link>http://www.cnblogs.com/lizhuming/p/14204671.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lizhuming/p/14204671.html</guid>
<description>&lt;hr/&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;知识点
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;消息队列、信号量&lt;/strong&gt; 和 &lt;strong&gt;共享内存&lt;/strong&gt; 被统称为 &lt;strong&gt;system-V IPC&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;以上都是“持续性”资源，即它们被创建之后， 不会因为进程的退出而消失&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;4-消息队列&quot;&gt;4. 消息队列&lt;/h2&gt;
&lt;h3 id=&quot;41-概念&quot;&gt;4.1 概念&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;消息队列
&lt;ul&gt;&lt;li&gt;消息队列提供了一种从一个进程向另一个进程发送一个数据块的方法&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;42-对比&quot;&gt;4.2 对比&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;消息队列与信号之间的对比
&lt;ul&gt;&lt;li&gt;信号承载的信息量少，而消息队列可以承载大量自定义的数据&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;消息队列与管道之间的对比
&lt;ul&gt;&lt;li&gt;相同
&lt;ul&gt;&lt;li&gt;进程间通信都可以是不相关的进程&lt;/li&gt;
&lt;li&gt;都可以独立于发送和接收进程而存在&lt;/li&gt;
&lt;li&gt;在进程终止时，其内容并不会被删除&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;不同
&lt;ul&gt;&lt;li&gt;在命名管道中，发送数据用 &lt;strong&gt;write()&lt;/strong&gt;，接收数据用 &lt;strong&gt;read()&lt;/strong&gt;， 则在消息队列中，发送数据用 &lt;strong&gt;msgsnd()&lt;/strong&gt;，接收数据用 &lt;strong&gt;msgrcv()&lt;/strong&gt; ，消息队列对每个数据都有一个最大长度的限制&lt;/li&gt;
&lt;li&gt;管道只能承载无格式字节流，消息队列提供有格式的字节流&lt;/li&gt;
&lt;li&gt;消息队列是面向记录的，其中的消息具有特定的格式以及特定的优先级，接收程序可以通过消息类型有选择地接收数据， 而不是像命名管道中那样，只能默认地接收&lt;/li&gt;
&lt;li&gt;消息队列可以实现消息的随机查询，消息不一定要以先进先出的顺序接收，也可以按消息的类型接收&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;43-函数及使用流程&quot;&gt;4.3 函数及使用流程&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;使用流程：
&lt;ol&gt;&lt;li&gt;使用 &lt;strong&gt;msgget()&lt;/strong&gt; 来创建或打开消息队列&lt;/li&gt;
&lt;li&gt;使用 &lt;strong&gt;msgsnd()&lt;/strong&gt; 来发送消息到文末&lt;/li&gt;
&lt;li&gt;使用 &lt;strong&gt;msgrcv()&lt;/strong&gt; 来接收消息，可指定某一条消息&lt;/li&gt;
&lt;li&gt;使用 &lt;strong&gt;msgctl()&lt;/strong&gt; 来控制消息（&lt;em&gt;具体往下看&lt;/em&gt;）&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;431-msgget&quot;&gt;4.3.1 msgget()&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;使用 &lt;strong&gt;msgget()&lt;/strong&gt; 来创建或打开消息队列&lt;/li&gt;
&lt;li&gt;通过命令 &lt;strong&gt;man&lt;/strong&gt; 了解更多&lt;/li&gt;
&lt;li&gt;函数原型：&lt;strong&gt;&lt;code&gt;int msgget(key_t key, int msgflg);&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;key：消息队列的关键字值，多个进程可以通过它访问同一个消息队列&lt;/li&gt;
&lt;li&gt;msgflg：表示创建的消息队列的模式标志参数，主要有IPC_CREAT，IPC_EXCL和权限mode，如：
&lt;ul&gt;&lt;li&gt;IPC_CREAT：没有关键字 &lt;strong&gt;key&lt;/strong&gt; 的消息队列就新建一个，有就直接打开&lt;/li&gt;
&lt;li&gt;IPC_CREAT | IPC_EXCL：消息队列不存在，则新建一个，如果消息队列存在，则报错&lt;/li&gt;
&lt;li&gt;IPC_CREAT | 0666：（注：消息队列不在意执行权限）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;返回
&lt;ul&gt;&lt;li&gt;成功：返回消息队列标识值&lt;/li&gt;
&lt;li&gt;失败：返回-1
&lt;ul&gt;&lt;li&gt;返回的错误码，即是在变量 &lt;strong&gt;error&lt;/strong&gt; 中
&lt;ul&gt;&lt;li&gt;EACCES：消息队列存在，但进程没有访问权限&lt;/li&gt;
&lt;li&gt;EEXIST：msgflg 同时指定了 IPC_CREAT和IPC_EXCL，但是消息队列已经存在&lt;/li&gt;
&lt;li&gt;ENOENT：消息队列不存在，且没有指定 IPC_CREAT 标志&lt;/li&gt;
&lt;li&gt;ENOMEM：内存不足&lt;/li&gt;
&lt;li&gt;ENOSPC：消息队列个数达到系统的限制&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;432-msgsng&quot;&gt;4.3.2 msgsng()&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;使用 &lt;strong&gt;msgsnd()&lt;/strong&gt; 来发送消息到文末&lt;/li&gt;
&lt;li&gt;通过命令 &lt;strong&gt;man&lt;/strong&gt; 了解更多&lt;/li&gt;
&lt;li&gt;函数原型：&lt;strong&gt;&lt;code&gt;int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);&lt;/code&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;解除阻塞的三个条件：
&lt;ol&gt;&lt;li&gt;消息队列变为未满&lt;/li&gt;
&lt;li&gt;消息队列被删除&lt;/li&gt;
&lt;li&gt;调用 msgsnd() 的进程被信号中断&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;433-msgrcv&quot;&gt;4.3.3 msgrcv()&lt;/h4&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;使用 &lt;strong&gt;msgrcv()&lt;/strong&gt; 来发送消息到文末&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;通过命令 &lt;strong&gt;man&lt;/strong&gt; 了解更多&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;函数原型：&lt;strong&gt;&lt;code&gt;ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg);&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;msqid：消息队列标识符&lt;/li&gt;
&lt;li&gt;msgp：存放消息的结构体，结构体类型要与msgsnd()函数发送的类型相同&lt;/li&gt;
&lt;li&gt;msgsz：要接收消息的大小，不包含消息类型占用的4个字节&lt;/li&gt;
&lt;li&gt;msgtyp：
&lt;ul&gt;&lt;li&gt;&amp;gt; 0：表示接收类型等于msgtyp的第一个消息&lt;/li&gt;
&lt;li&gt;= 0：表示接收第一个消息&lt;/li&gt;
&lt;li&gt;&amp;lt; 0：表示接收类型等于或者小于msgtyp绝对值的第一个消息&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;msgflg：
&lt;ul&gt;&lt;li&gt;0：阻塞式接收消息，没有该类型的消息 msgrcv 函数一直阻塞等待&lt;/li&gt;
&lt;li&gt;IPC_NOWAIT：若在消息队列中并没有相应类型的消息可以接收，则函数立即返回，此时错误码为ENOMSG&lt;/li&gt;
&lt;li&gt;IPC_EXCEPT：与 msgtype 配合使用返回队列中第一个类型不为 msgtype 的消息&lt;/li&gt;
&lt;li&gt;IPC_NOERROR：如果队列中满足条件的消息内容大于所请求的 size 字节，则把该消息截断，截断部分将被丢弃&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;返回：
&lt;ul&gt;&lt;li&gt;成功：返回接收到的消息长度&lt;/li&gt;
&lt;li&gt;失败：返回 -1，错误原因存在于变量 &lt;strong&gt;error&lt;/strong&gt; 中：
&lt;ul&gt;&lt;li&gt;E2BIG：消息数据长度大于msgsz而msgflag没有设置IPC_NOERROR&lt;/li&gt;
&lt;li&gt;EIDRM：消息队列已被删除&lt;/li&gt;
&lt;li&gt;EACCESS：无权限读取该消息队列&lt;/li&gt;
&lt;li&gt;EFAULT：参数msgp指向无效的内存地址&lt;/li&gt;
&lt;li&gt;ENOMSG：参数msgflg设为IPC_NOWAIT，而消息队列中无消息可读&lt;/li&gt;
&lt;li&gt;EINTR：等待读取队列内的消息情况下被信号中断&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;解除阻塞的三个条件：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;消息队列中已有符合条件的消息&lt;/li&gt;
&lt;li&gt;消息队列被删除&lt;/li&gt;
&lt;li&gt;调用 msgrcv() 的进程被信号中断&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;434-msgctl&quot;&gt;4.3.4 msgctl()&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;使用 &lt;strong&gt;msgctl()&lt;/strong&gt; 来设置或者获取消息队列的相关属性等等&lt;/li&gt;
&lt;li&gt;通过命令 &lt;strong&gt;man&lt;/strong&gt; 了解更多&lt;/li&gt;
&lt;li&gt;函数原型：&lt;strong&gt;&lt;code&gt;int msgctl(int msqid, int cmd, struct msqid_ds *buf);&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;msqid：消息队列标识符&lt;/li&gt;
&lt;li&gt;cmd：操作命令
&lt;ul&gt;&lt;li&gt;IPC_STAT：获取该 MSG 信息并存到结构体 msqid_ds 类型的 buf 中&lt;/li&gt;
&lt;li&gt;IPC_SET：设置消息队列的属性，属性为 msqid_ds（msg_perm.uid、msg_perm.gid、msg_perm.mode以及msg_qbytes）&lt;/li&gt;
&lt;li&gt;IPC_RMID：立即删除该 MSG，并且唤醒所有阻塞在该 MSG上的进程，同时忽略第三个参数&lt;/li&gt;
&lt;li&gt;IPC_INFO：获得关于当前系统中 MSG 的限制值信息&lt;/li&gt;
&lt;li&gt;MSG_INFO：获得关于当前系统中 MSG 的相关资源消耗信息&lt;/li&gt;
&lt;li&gt;MSG_STAT：同 IPC_STAT，但 msgid 为该消息队列在内核中记录所有消息队列信息的数组的下标， 因此通过迭代所有的下标可以获得系统中所有消息队列的相关信息&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;buf：相关信息结构体缓冲区&lt;/li&gt;
&lt;li&gt;返回值
&lt;ul&gt;&lt;li&gt;成功：返回 0&lt;/li&gt;
&lt;li&gt;失败：返回 -1，错误原因存在 &lt;strong&gt;error&lt;/strong&gt; 中：
&lt;ul&gt;&lt;li&gt;EACCESS：参数cmd为IPC_STAT，却无权限读取该消息队列&lt;/li&gt;
&lt;li&gt;EFAULT：参数buf指向无效的内存地址&lt;/li&gt;
&lt;li&gt;EIDRM：标识符为msqid的消息队列已被删除&lt;/li&gt;
&lt;li&gt;EINVAL：无效的参数cmd或msqid&lt;/li&gt;
&lt;li&gt;EPERM：参数cmd为IPC_SET或IPC_RMID，却无执行权限&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;44-例程&quot;&gt;4.4 例程&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;发送进程&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/ipc.h&amp;gt;
#include &amp;lt;sys/msg.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

#define BUFFER_SIZE 512
/*定义消息结构体*/
struct message{
    long msg_type;
    char msg_text[BUFFER_SIZE];
};
int main()
{
    int qid;
    struct message msg;

    /*1. 创建消息队列*/    
    if ((qid = msgget((key_t)1234, IPC_CREAT|0666)) == -1)
    {
        perror(&quot;msgget\n&quot;);
        exit(1);
    }

    /*打印标识符*/
    printf(&quot;Open queue %d\n&quot;,qid);

    while(1)
    {
        printf(&quot;Enter some message to the queue:&quot;);
        if ((fgets(msg.msg_text, BUFFER_SIZE, stdin)) == NULL)
        {
            printf(&quot;\nGet message end.\n&quot;);
            exit(1);
        }
        /*赋值消息类型*/
        msg.msg_type = getpid();        
        /*2. 添加消息到消息队列*/        
        if ((msgsnd(qid, &amp;amp;msg, strlen(msg.msg_text), 0)) &amp;lt; 0)
        {
            perror(&quot;\nSend message error.\n&quot;);
            exit(1);
        }
        else
        {
            printf(&quot;Send message.\n&quot;);
        }        
        if (strncmp(msg.msg_text, &quot;quit&quot;, 4) == 0)
        {
            printf(&quot;\nQuit get message.\n&quot;);
            break;
        }
    }
    exit(0);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;接收进程&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/ipc.h&amp;gt;
#include &amp;lt;sys/msg.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

#define BUFFER_SIZE 512
/*定义消息结构体，与发送进程中的一样*/
struct message{
    long msg_type;
    char msg_text[BUFFER_SIZE];
};
int main()
{
    int qid;
    struct message msg;

    /*创建消息队列，键值和发送进程的一样*/    
    if ((qid = msgget((key_t)1234, IPC_CREAT|0666)) == -1)    
    {
        perror(&quot;msgget&quot;);
        exit(1);
    }
    /*打印标识符*/
    printf(&quot;Open queue %d\n&quot;, qid);
    do
    {
        /*读取消息队列*/
        memset(msg.msg_text, 0, BUFFER_SIZE);
        if (msgrcv(qid, (void*)&amp;amp;msg, BUFFER_SIZE, 0, 0) &amp;lt; 0)        
        {
            perror(&quot;msgrcv&quot;);
            exit(1);
        }
        printf(&quot;The message from process %ld : %s&quot;, msg.msg_type, msg.msg_text);
    } while(strncmp(msg.msg_text, &quot;quit&quot;, 4));

    /*从系统内核中删除消息队列*/    
    if ((msgctl(qid, IPC_RMID, NULL)) &amp;lt; 0)    
    {
        perror(&quot;msgctl&quot;);
        exit(1);
    }
    else
    {
        printf(&quot;Delete msg qid: %d.\n&quot;, qid);
    }
    exit(0);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;参考：&quot;&gt;参考：&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;* 野火&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 29 Dec 2020 00:48:00 +0000</pubDate>
<dc:creator>李柱明</dc:creator>
<og:description>前言 知识点 消息队列、信号量 和 共享内存 被统称为 system-V IPC 以上都是“持续性”资源，即它们被创建之后， 不会因为进程的退出而消失 4. 消息队列 4.1 概念 消息队列 消息队列</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/lizhuming/p/14204671.html</dc:identifier>
</item>
<item>
<title>Java网络编程：QQ邮件发送客户端程序设计 - Charzueus</title>
<link>http://www.cnblogs.com/chenzhenhong/p/14168140.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenzhenhong/p/14168140.html</guid>
<description>&lt;div id=&quot;cnblogs_post_description&quot; readability=&quot;35&quot;&gt;&lt;img src=&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2454235837,2759217674&amp;amp;fm=26&amp;amp;gp=0.jpg&quot; class=&quot;desc_img&quot;/&gt;这篇博文记录学习使用Java实现类似QQ发送邮件的客户端，打算分为上下两篇完成，上篇从零开始学习，认识计算机网络邮件传输协议（SMTP、POP3），并开通QQ邮箱的smtp/pop3服务，为之后程序设计做准备，自行实现简单的Java GUI，通过命令方式发送邮件；下篇基于前面的基础，实现基本完整功能的，类似我们平时QQ邮件发送的客户端，图形化界面简便了发送操作，另外增加了接收服务器反馈信息的功能，以后就可以使用自己写的邮件发送程序给其他人发邮件啦，更快更方便๑乛◡乛๑&lt;/div&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;126.69051928164&quot;&gt;
&lt;p id=&quot;main-toc&quot;&gt;&lt;strong&gt;&lt;span&gt;目录&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p id=&quot;&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/14168140.html#l1&quot;&gt;&lt;span&gt;一、目标介绍&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;&quot;&gt;&lt;span&gt;    &lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/14168140.html#l1&quot;&gt;1、认识SMTP（邮件传输协议）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p id=&quot;&quot;&gt;&lt;span&gt;    &lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/14168140.html#l1&quot;&gt;2、POP3（邮件接收协议）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p id=&quot;&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/14168140.html#l2&quot;&gt;&lt;span&gt;二、基于Base64编码邮箱及授权码&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;&quot;&gt;&lt;span&gt;    &lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/14168140.html#l2&quot;&gt;1、开通QQ邮箱SMTP/POP3服务&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p id=&quot;&quot;&gt;&lt;span&gt;    &lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/14168140.html#l2&quot;&gt;2、Java编写BASE64编码程序&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p id=&quot;&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/14168140.html#l3&quot;&gt;&lt;span&gt;三、telnet命令发送邮件&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/14168140.html#l4&quot;&gt;&lt;span&gt;四、Java图形界面进行SMTP交互发邮件&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;&quot;&gt;&lt;span&gt;    &lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/14168140.html#l4&quot;&gt;1、编写客户端类&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p id=&quot;&quot;&gt;&lt;span&gt;    &lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/14168140.html#l4&quot;&gt;2、创建QQ邮件发送图形界面 &lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p id=&quot;&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/14168140.html#l5&quot;&gt;&lt;span&gt;五、总结及下篇预告&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr id=&quot;hr-toc&quot;/&gt;
&lt;p&gt;&lt;span&gt;这篇博文记录学习使用Java实现类似QQ发送邮件的客户端，打算分为上下两篇完成，上篇从零开始学习，认识计算机网络邮件传输协议（SMTP、POP3），并开通QQ邮箱的smtp/pop3服务，为之后程序设计做准备，自行实现简单的Java GUI，通过命令方式发送邮件；下篇基于前面的基础，实现基本完整功能的，类似我们平时QQ邮件发送的客户端，图形化界面简便了发送操作，另外增加了接收服务器反馈信息的功能，以后就可以使用自己写的邮件发送程序给其他人发邮件啦，更快更方便๑乛◡乛๑&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;1%E3%80%81%E8%AE%A4%E8%AF%86SMTP%EF%BC%88%E9%82%AE%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%EF%BC%89&quot;&gt;1、认识SMTP（邮件传输协议）&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;SMTP（简单邮件传输协议，RFC821）是一种提供可靠且有效的电子邮件传输协议。SMTP是建立在FTP文件传输服务上的一种邮件服务，主要用于系统之间的邮件信息传递，并提供有关来信的通知。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%C2%A02%E3%80%81POP3%EF%BC%88%E9%82%AE%E4%BB%B6%E6%8E%A5%E6%94%B6%E5%8D%8F%E8%AE%AE%EF%BC%89&quot;&gt; 2、POP3（邮件接收协议）&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;POP3，全名为Post Office Protocol - Version 3，即邮局协议版本3。是TCP/IP协议族中的一员，由RFC1939 定义。本协议主要用于支持使用客户端远程管理在服务器上的电子邮件。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;服务邮件发送的服务器其端口为25，服务邮件接收的服务器端口为110。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;邮箱设置开启smtp/pop3服务，目前大部分邮箱开启服务时，需要设置第三方客户端使用的授权码，该授权码就是代替密码使用，目的是防止密码泄露。操作如下：&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;1%E3%80%81%E5%BC%80%E9%80%9AQQ%E9%82%AE%E7%AE%B1SMTP%2FPOP3%E6%9C%8D%E5%8A%A1&quot;&gt;&lt;span&gt;1、开通QQ邮箱SMTP/POP3服务&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;登录邮箱，点击设置----账户。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201209103011846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NoYXJ6b3Vz,size_16,color_000000,t_70&quot; alt=&quot;&quot; width=&quot;703&quot; height=&quot;333&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;往下拉，找到POP3/SMTP服务，点击开启，完成验证之后点击生成授权码，记得复制保存，后续用到哦！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020120910322840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NoYXJ6b3Vz,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot; width=&quot;918&quot; height=&quot;265&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;2%E3%80%81Java%E7%BC%96%E5%86%99BASE64%E7%BC%96%E7%A0%81%E7%A8%8B%E5%BA%8F&quot;&gt;2、Java编写BASE64编码程序&lt;/h2&gt;
&lt;p&gt;要成功地发送和接收邮件，用户名和密码（邮箱和授权码）需要BASE64编码后才能有效传输。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
 * BASE64.java
 * Copyright (c) 2020-12-21
 * author : Charzous
 * All right reserved.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
 
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sun.misc.BASE64Decoder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sun.misc.BASE64Encoder;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BASE64 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        String userName&lt;/span&gt;=&quot;你的邮箱&quot;&lt;span&gt;;
        String authCode&lt;/span&gt;=&quot;生成的授权码&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示邮箱名的base64编码结果&lt;/span&gt;
&lt;span&gt;        System.out.println(encode(userName));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示授权码的base64编码结果&lt;/span&gt;
&lt;span&gt;        System.out.println(encode(authCode));
 
    }
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String encode(String str){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BASE64Encoder().encode(str.getBytes());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后生成类似字符串：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Y3poX2NoYXJ6ZXVzQHFxLmNvbQ==
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;1、打开命令提示符，输入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
telnet smtp.qq.com 25
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2、按顺序输入，举例如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
HELO hostname   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;回车，hostname可以是IP或其他随意别名&lt;/span&gt;
AUTH LOGIN &lt;span&gt;//&lt;/span&gt;&lt;span&gt;回车后，先粘贴base64程序编码的完整邮箱名并回车；再粘贴base64编码的授权码并回车&lt;/span&gt;
&lt;span&gt; 
 
MAIL FROM:&lt;/span&gt;&amp;lt;czh_charzeus@qq.com&amp;gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在这里填写自己的邮箱地址，用于发送邮件（注意冒号后面别有空格）&lt;/span&gt;
RCPT TO:&amp;lt;czh_charzeus@qq.com&amp;gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;接收方的邮箱，在这里暂时填写和上面一样的邮箱地址，即自己发送邮件给自己，验证是否成功&lt;/span&gt;
DATA       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;回车，接下来开始发送邮件头相关内容&lt;/span&gt;
Subject: the simple mail     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 邮件的标题,回车  
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在这里再多发送一行空行，来分隔邮件内容，下面就是邮件正文内容&lt;/span&gt;
Hello，the mail content!&lt;span&gt;
测试发送邮件！   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;控制台中中文会变成?的乱码，但不影响接受者接收到中文内容&lt;/span&gt;
.   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在邮件正文发送完毕后，单独用一行输入一个小圆点，作为结束标志，然后回车&lt;/span&gt;
QUIT   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;结束通信（含4次握手断开）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发送成功结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201209110731193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NoYXJ6b3Vz,size_16,color_000000,t_70&quot; alt=&quot;&quot; width=&quot;510&quot; height=&quot;239&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;使用终端发送时，存在许多不方便的地方，比如输入错误，不能回退修改，只能回车输入，所以编写简单的Java界面来避免这些误操作带来的麻烦。用自己的程序代替telnet，来验证smtp发送给邮件的过程。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;1、编写客户端类&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_4a78ab65-5c81-4a1d-9419-38b1db205e64&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_4a78ab65-5c81-4a1d-9419-38b1db205e64&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4a78ab65-5c81-4a1d-9419-38b1db205e64&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
 * TCPMailClient.java
 * Copyright (c) 2020-12-09
 * author : Charzous
 * All right reserved.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
 
&lt;span&gt;import&lt;/span&gt; java.io.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.Socket;
 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TCPMailClient {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Socket socket;
 
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; PrintWriter pw;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; BufferedReader br;
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; ip
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; port
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Charzous
     * @date 2020/12/9 11:19
     *
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; TCPMailClient(String ip, String port) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主动向服务器发起连接，实现TCP三次握手
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不成功则抛出错误，由调用者处理错误&lt;/span&gt;
        socket =&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Socket(ip,Integer.parseInt(port));
 
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到网络流输出字节流地址，并封装成网络输出字符流&lt;/span&gt;
        OutputStream socketOut=&lt;span&gt;socket.getOutputStream();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数true表示自动flush数据&lt;/span&gt;
        pw=&lt;span&gt;new&lt;/span&gt; PrintWriter(&lt;span&gt;new&lt;/span&gt; OutputStreamWriter(socketOut,&quot;utf-8&quot;),&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
 
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到网络输入字节流地址，并封装成网络输入字符流&lt;/span&gt;
        InputStream socketIn=&lt;span&gt;socket.getInputStream();
        br&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; BufferedReader(&lt;span&gt;new&lt;/span&gt; InputStreamReader(socketIn,&quot;utf-8&quot;&lt;span&gt;));
 
    }
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; send(String msg){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出字符流，由socket调用系统底层函数，经网卡发送字节流&lt;/span&gt;
&lt;span&gt;        pw.println(msg);
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进行邮件交互，发送smtp指令之间应该暂停一段时间&lt;/span&gt;
            Thread.sleep(1000&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
            e.printStackTrace();
        }
    }
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String receive(){
        String msg&lt;/span&gt;=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从网络输入字符流中读取信息，每次只能接受一行信息
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不够一行时（无行结束符），该语句阻塞
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直到条件满足，程序往下运行&lt;/span&gt;
            msg=&lt;span&gt;br.readLine();
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e){
            e.printStackTrace();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; msg;
    }
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; close(){
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (socket!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                socket.close();
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e){
            e.printStackTrace();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2 id=&quot;2%E3%80%81%E5%88%9B%E5%BB%BAQQ%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%C2%A0&quot;&gt;2、创建QQ邮件发送图形界面 &lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201209111747512.gif&quot; alt=&quot;&quot; width=&quot;677&quot; height=&quot;463&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 这里很容易发现，与之前TCP通信类似，只需要连接到QQ邮件的发送服务器smtp.qq.com。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;界面的创建使用JavaFx，可参考我的文章自行实现，相对简单。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;1%E3%80%81%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%89%88%E6%9C%AC&quot;&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201209110952194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NoYXJ6b3Vz,size_16,color_000000,t_70&quot; alt=&quot;&quot; width=&quot;610&quot; height=&quot;411&quot;/&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;本篇详细记录了使用Java网络编程的技术思想，初步实现QQ邮件发送客户端。从零开始学习，认识计算机网络邮件传输协议（SMTP、POP3），并开通QQ邮箱的smtp/pop3服务，为之后程序设计做准备，自行实现简单的Java GUI，通过命令方式发送邮件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以发现，现在只能通过命令发送请求，向服务器发送信息，所以还是不太方便，所以下篇将实现非命令模式发送邮件，更好的用户体验，避免的繁琐的命令输入，等待下一篇的内容更新！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果觉得不错欢迎“一键三连”哦，点赞收藏关注，有问题直接评论，交流学习！&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我的博客园：&lt;a href=&quot;https://www.cnblogs.com/chenzhenhong/p/14168140.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/chenzhenhong/p/14168140.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我的CSDN博客：&lt;a href=&quot;https://blog.csdn.net/Charzous/article/details/110913974&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/Charzous/article/details/110913974&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Tue, 29 Dec 2020 00:45:00 +0000</pubDate>
<dc:creator>Charzueus</dc:creator>
<og:description>目录 一、目标介绍 1、认识SMTP（邮件传输协议） 2、POP3（邮件接收协议） 二、基于Base64编码邮箱及授权码 1、开通QQ邮箱SMTP/POP3服务 2、Java编写BASE64编码程序</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/chenzhenhong/p/14168140.html</dc:identifier>
</item>
<item>
<title>GitLab CI构建SpringBoot-2.3应用 - 程序员欣宸</title>
<link>http://www.cnblogs.com/bolingcavalry/p/14204614.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bolingcavalry/p/14204614.html</guid>
<description>&lt;h3 id=&quot;欢迎访问我的github&quot;&gt;欢迎访问我的GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zq2599/blog_demos&quot; target=&quot;_blank&quot;&gt;https://github.com/zq2599/blog_demos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内容：所有原创文章分类汇总及配套源码，涉及Java、Docker、Kubernetes、DevOPS等；&lt;/p&gt;
&lt;h3 id=&quot;关于gitlab-ci&quot;&gt;关于GitLab CI&lt;/h3&gt;
&lt;p&gt;在&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/106597358&quot; target=&quot;_blank&quot;&gt;《体验SpringBoot(2.3)应用制作Docker镜像(官方方案)》&lt;/a&gt;一文中，咱们掌握了SpringBoot官方推荐的镜像构建方案，接下来要体验的是GitLab的CI能力，它负责把代码变成私有仓库中的镜像，咱们可以专心编码了；&lt;/p&gt;
&lt;p&gt;GitLab CI的作用如下图，开发者提交代码到GitLab后，就会触发编译、构建、制作镜像、推送到仓库这些事情，然后K8S环境就能用上最新的镜像了：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074514729-825768717.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;本文内容&quot;&gt;本文内容&lt;/h3&gt;
&lt;p&gt;本文继续坚持实战的风格，和大家一起完成以下操作：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;准备一个SpringBoot-2.3应用；&lt;/li&gt;
&lt;li&gt;编写GitLab的pipeline脚本；&lt;/li&gt;
&lt;li&gt;提交代码触发pipeline脚本的工作；&lt;/li&gt;
&lt;li&gt;K8S环境使用最新镜像；&lt;/li&gt;
&lt;li&gt;体验GitLab如何将最新镜像自动部署到K8S环境；&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;环境信息&quot;&gt;环境信息&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;GitLab：Community Edition 13.0.6&lt;/li&gt;
&lt;li&gt;GilLab Runner：13.1.0&lt;/li&gt;
&lt;li&gt;kubernetes：1.15.3&lt;/li&gt;
&lt;li&gt;SpringBoot：2.3.0.RELEASE&lt;/li&gt;
&lt;li&gt;JDK：1.8.0_121&lt;/li&gt;
&lt;li&gt;Maven：3.3.9&lt;/li&gt;
&lt;li&gt;Docker：19.03.8&lt;/li&gt;
&lt;li&gt;操作系统：CentOS Linux release 7.8.2003&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;准备&quot;&gt;准备&lt;/h3&gt;
&lt;p&gt;实战前需要您准备好以下环境：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;GitLab，参考&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/106973743&quot; target=&quot;_blank&quot;&gt;《群晖DS218+部署GitLab》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;私有镜像仓库，参考&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/106962214&quot; target=&quot;_blank&quot;&gt;《群晖DS218+部署Harbor(1.10.3)》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitLab Runner，参考&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/106991576&quot; target=&quot;_blank&quot;&gt;《GitLab Runner部署(kubernetes环境)》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kubernetes，参考&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/103106314&quot; target=&quot;_blank&quot;&gt;《kubespray2.11安装kubernetes1.15》&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;springboot应用源码&quot;&gt;SpringBoot应用源码&lt;/h3&gt;
&lt;p&gt;本次实战用的是普通的SpringBoot工程，如果您不打算写代码，也可以从GitHub上下载本次实战的源码，地址和链接信息如下表所示：&lt;/p&gt;
&lt;p&gt;这个git项目中有多个文件夹，本章的应用在&lt;span&gt;dockerlayerdemo&lt;/span&gt;文件夹下，如下图所示：&lt;br/&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074514928-276225982.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;实战操作&quot;&gt;实战操作&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;创建名为&lt;span&gt;dockerlayerdemo&lt;/span&gt;的SpringBoot项目，SpringBoot版本号为&lt;span&gt;2.3.0.RELEASE&lt;/span&gt;，pom.xml内容如下：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
        &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
        &amp;lt;parent&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;2.3.0.RELEASE&amp;lt;/version&amp;gt;
                &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;
        &amp;lt;/parent&amp;gt;
        &amp;lt;groupId&amp;gt;com.bolingcavalry&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;dockerlayerdemo&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
        &amp;lt;name&amp;gt;dockerlayerdemo&amp;lt;/name&amp;gt;
        &amp;lt;description&amp;gt;Demo project for Spring Boot layer docker image&amp;lt;/description&amp;gt;

        &amp;lt;properties&amp;gt;
                &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
        &amp;lt;/properties&amp;gt;

        &amp;lt;dependencies&amp;gt;
                &amp;lt;dependency&amp;gt;
                        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                        &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
                &amp;lt;/dependency&amp;gt;

                &amp;lt;dependency&amp;gt;
                        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                        &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
                        &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
                        &amp;lt;exclusions&amp;gt;
                                &amp;lt;exclusion&amp;gt;
                                        &amp;lt;groupId&amp;gt;org.junit.vintage&amp;lt;/groupId&amp;gt;
                                        &amp;lt;artifactId&amp;gt;junit-vintage-engine&amp;lt;/artifactId&amp;gt;
                                &amp;lt;/exclusion&amp;gt;
                        &amp;lt;/exclusions&amp;gt;
                &amp;lt;/dependency&amp;gt;
        &amp;lt;/dependencies&amp;gt;

        &amp;lt;build&amp;gt;
                &amp;lt;plugins&amp;gt;
                        &amp;lt;plugin&amp;gt;
                                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
                                &amp;lt;version&amp;gt;2.3.0.RELEASE&amp;lt;/version&amp;gt;
                                &amp;lt;configuration&amp;gt;
                                        &amp;lt;layers&amp;gt;
                                                &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
                                        &amp;lt;/layers&amp;gt;
                                &amp;lt;/configuration&amp;gt;
                        &amp;lt;/plugin&amp;gt;
                &amp;lt;/plugins&amp;gt;
        &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;java代码并非重点，在application类中加了个http接口：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;package com.bolingcavalry.dockerlayerdemo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Date;

@SpringBootApplication
@RestController
public class DockerlayerdemoApplication {

        public static void main(String[] args) {
                SpringApplication.run(DockerlayerdemoApplication.class, args);
        }


        @RequestMapping(value = &quot;/hello&quot;)
        public String hello(){
                return &quot;hello &quot; + new Date();
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;pom.xml所在目录增加文件夹&lt;span&gt;.m2&lt;/span&gt;，里面放入&lt;span&gt;settings.xml&lt;/span&gt;，这是maven的配置文件，可以设置您的特殊的maven信息；&lt;/li&gt;
&lt;li&gt;pom.xml所在目录增加&lt;span&gt;Dockerfile&lt;/span&gt;文件，用于制作镜像：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;# 指定基础镜像，这是分阶段构建的前期阶段
FROM openjdk:8u212-jdk-stretch as builder
# 执行工作目录
WORKDIR application
# 配置参数
ARG JAR_FILE=target/*.jar
# 将编译构建得到的jar文件复制到镜像空间中
COPY ${JAR_FILE} application.jar
# 通过工具spring-boot-jarmode-layertools从application.jar中提取拆分后的构建结果
RUN java -Djarmode=layertools -jar application.jar extract

# 正式构建镜像
FROM openjdk:8u212-jdk-stretch
WORKDIR application
# 前一阶段从jar中提取除了多个文件，这里分别执行COPY命令复制到镜像空间中，每次COPY都是一个layer
COPY --from=builder application/dependencies/ ./
COPY --from=builder application/spring-boot-loader/ ./
COPY --from=builder application/snapshot-dependencies/ ./
COPY --from=builder application/application/ ./
ENTRYPOINT [&quot;java&quot;, &quot;org.springframework.boot.loader.JarLauncher&quot;]
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;&lt;li&gt;pom.xml所在目录增加&lt;span&gt;.gitlab-ci.yml&lt;/span&gt;文件，这就是CI时的pipeline脚本：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-yaml&quot;&gt;image: maven:3.6.3-jdk-8

variables:
  MAVEN_CLI_OPTS: &quot;-s .m2/settings.xml --batch-mode&quot;
  MAVEN_OPTS: &quot;-Dmaven.repo.local=.m2/repository&quot;

# 定义缓存
# 如果gitlab runner是shell或者docker，此缓存功能没有问题
# 如果是k8s环境，要确保已经设置了分布式文件服务作为缓存
cache:
  key: dockerlayerdemo-ci-cache
  paths:
  - .m2/repository/
  - target/*.jar

# 本次构建的阶段：build package
stages:
- package
- build

# 生产jar的job
make_jar:
  image: maven:3.6.3-jdk-8
  stage: package
  tags:
  - k8s
  script:
  - echo &quot;=============== 开始编译源码，在target目录生成jar文件 ===============&quot;
  - mvn $MAVEN_CLI_OPTS clean compile package -Dmaven.test.skip=true
  - echo &quot;target文件夹&quot; `ls target/`

# 生产镜像的job
make_image:
  image: docker:latest
  stage: build
  tags:
  - k8s
  script:
  - echo &quot;从缓存中恢复的target文件夹&quot; `ls target/`
  - echo &quot;=============== 登录Harbor  ===============&quot;
  - docker login 192.168.50.43:5888 -u admin -p Harbor12345
  - echo &quot;=============== 打包Docker镜像 ： &quot; gitlabci-java-demo:$CI_COMMIT_SHORT_SHA &quot;===============&quot;
  - docker build -t 192.168.50.43:5888/common/gitlabci-java-demo:$CI_COMMIT_SHORT_SHA .
  - echo &quot;=============== 推送到镜像仓库  ===============&quot;
  - docker push 192.168.50.43:5888/common/gitlabci-java-demo:$CI_COMMIT_SHORT_SHA
  - echo &quot;=============== 登出  ===============&quot;
  - docker logout
  - echo &quot;清理掉本次构建的jar文件&quot;
  - rm -rf target/*.jar
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关于以上pipeline脚本，有下面五点需要注意：&lt;/p&gt;
&lt;p&gt;第一：关于cache，如果您的gitlab runner是shell或者docker类型就无需关注，cache是直接生效的，&lt;span&gt;但如果您的gitlab runner是K8S那就要注意了&lt;/span&gt;，需要在gitlab runner中填写cache相关的配置，让分布式文件服务作为cache的底层实现；&lt;/p&gt;
&lt;p&gt;第二：一共定义了两个stage：package和build，顺序是先package再build，注意生成jar的job一定要是package，使用jar构建镜像的job要是build，这样在构建镜像的时候才能顺利从缓存中取得jar；&lt;/p&gt;
&lt;p&gt;第三：make_image这个job的脚本中，会执行登录私有镜像仓库的操作，为了操作方便，登录的账号密码都是直接写在脚本里面的，实际使用时请不要这样做，建议使用Harbor的机器人账号密码，并且&lt;span&gt;写入GitLab CI的环境变量配置页面，而不是直接写在pipeline脚本中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第四：&lt;span&gt;tags&lt;/span&gt;参数用来和已有的GitLab Runner匹配，请按照您自己的runner的情况设置；&lt;/p&gt;
&lt;p&gt;第五：生成docker镜像的tag等于&lt;span&gt;$CI_COMMIT_SHORT_SHA&lt;/span&gt;，这是本次提交的commit id，因此，每次提交都会导致镜像仓库中多一个镜像，其tag等于commit id；&lt;/p&gt;
&lt;ol start=&quot;6&quot;&gt;&lt;li&gt;最终整个工程的内容如下：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074515507-1213897953.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;至此，所有开发工作已经完成，接下来验证执行情况；&lt;/p&gt;
&lt;h3 id=&quot;验证ci&quot;&gt;验证CI&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;将所有内容提交到GitLab，如果CI环境配置OK的话会立即触发构建，下图是构建成功的效果：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074515884-487053192.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;2. 先来看make_jar的执行情况，如下图，SpringBoot工程成功构建出jar文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074516530-509632102.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;3. 再看make_image执行情况，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074519170-1770227671.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;4. 镜像制作成功后，开始推送到harbor：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074521652-1702345436.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;5. 最终完成推送，并且清理残留文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074522864-164238638.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;6. 最后看看pipeline的整体情况，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074523986-56790579.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;7. 从上图可知commit id是&lt;span&gt;02307851&lt;/span&gt;，因此Harbor中应该有tag等于02307851的镜像，登录Harbor查看，如下图红框：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074524442-1057790178.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;在k8s环境验证&quot;&gt;在K8S环境验证&lt;/h3&gt;
&lt;p&gt;接下来要在K8S环境验证之前的镜像可以正常运行：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;SSH登录K8S环境，执行以下命令，用最新的镜像创建deployment：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;kubectl create deployment dockerlayerdemo \
--image=192.168.50.43:5888/common/gitlabci-java-demo:02307851
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;执行以下命令创建NodePort类型的service：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;kubectl create service nodeport \
dockerlayerdemo --tcp 8080:8080
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;浏览器访问&lt;a href=&quot;http://192.168.50.135:31685/hello&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://192.168.50.135:31685/hello&lt;/span&gt;&lt;/a&gt; ，其中192.168.50.135是K8S宿主机的IP地址，如下图，可以正常访问SpringBoot服务：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074524781-377368137.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;gitlab-ci的价值&quot;&gt;GitLab CI的价值&lt;/h3&gt;
&lt;p&gt;文章看到这里，咱们pipeline脚本也写了，镜像有了，K8S上部署的服务也验证了，这就结束了吗？&lt;/p&gt;
&lt;p&gt;---还没有，咱们来感受一下从修改代码到K8S环境上生效的流程：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;修改java代码，如下图：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074525308-1124258653.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;提交代码：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074526568-691500791.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;顺利生成镜像：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074527033-1735669909.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;4. 在K8S环境执行以下命令即可完成镜像更新：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;kubectl set image deployment dockerlayerdemo \
gitlabci-java-demo=192.168.50.43:5888/common/gitlabci-java-demo:8735c78d
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;&lt;li&gt;上述命令中的&lt;span&gt;gitlabci-java-demo&lt;/span&gt;来自&lt;span&gt;kubectl describe deployment dockerlayerdemo&lt;/span&gt;结果中，显示的容器名称，如下图红框：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074527771-987498658.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ol start=&quot;6&quot;&gt;&lt;li&gt;系统提示更新成功：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074528638-1362833676.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ol start=&quot;7&quot;&gt;&lt;li&gt;再次用浏览器访问相同的地址，如下图红框，修改的代码已经生效：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074529498-1577252525.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可见借助GitLab CI，编码到部署之间的过程已被简化，可以更加专注的撸码了；&lt;/p&gt;
&lt;h3 id=&quot;体验cd？&quot;&gt;体验CD？&lt;/h3&gt;
&lt;p&gt;除了持续集成(CI)，还可以把持续部署(CD)也加入到pipeline脚本中，这样我们只需提交代码，对应的镜像会被自动部署到K8S环境；&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;打开&lt;span&gt;.gitlab-ci.yml&lt;/span&gt;，增加一个stage定义&lt;span&gt;deploy&lt;/span&gt;，如下所示，现在一共有三个stage了：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-yaml&quot;&gt;stages:
- package
- build
- deploy
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;再在尾部增加一个&lt;span&gt;job&lt;/span&gt;，如下所示，镜像名为&lt;span&gt;ictu/sshpass:latest&lt;/span&gt;，该镜像内置了&lt;span&gt;sshpass&lt;/span&gt;，可以ssh连接到K8S环境，执行&lt;span&gt;kubectl set image XXX&lt;/span&gt;命令更新镜像，&lt;span&gt;注意包裹kubectl set image命令的是双引号&lt;/span&gt;，这个很重要，只有用双引号时里面的$TAG才会被替换成对应的值：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;language-yaml&quot;&gt;# 生产镜像的job
deploy_k8s:
  # 禁用cache，避免上传、下载、压缩、解压缩带来的开销
  cache: {}
  image: ictu/sshpass:latest
  stage: deploy
  tags:
  - k8s
  script:
  - export TAG=$CI_COMMIT_SHORT_SHA
  - echo &quot;TAG is &quot;$TAG
  - sshpass -p 888888 ssh -o &quot;StrictHostKeyChecking no&quot; root@192.168.50.135 &quot;kubectl set image deployment dockerlayerdemo gitlabci-java-demo=192.168.50.43:5888/common/gitlabci-java-demo:$TAG&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;再次提醒，上面的脚本中，账号、IP和密码都应该放入GitLab的参数设置页面，而不该直接写入pipeline脚本中；&lt;/li&gt;
&lt;li&gt;如下图，再次修改java文件，将hello返回结果改为&lt;span&gt;abcdef&lt;/span&gt;：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074529824-569920634.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;br/&gt;5. 提交代码后，可以在CI页面观察新增job的执行过程；&lt;br/&gt;6. 脚本完成后，打开浏览器试试，果然已经更新：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/other/485422/202012/485422-20201229074530157-1794478463.png&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此，CI和CD都验证通过，可见GitLab的CI能力给我们的日常开发带来了不少便利，也希望本文能给您带来一些参考；&lt;/p&gt;
&lt;h3 id=&quot;你不孤单，欣宸原创一路相伴&quot;&gt;你不孤单，欣宸原创一路相伴&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/105068742&quot; target=&quot;_blank&quot;&gt;Java系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/105086498&quot; target=&quot;_blank&quot;&gt;Spring系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/105086732&quot; target=&quot;_blank&quot;&gt;Docker系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/105086794&quot; target=&quot;_blank&quot;&gt;kubernetes系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/105086850&quot; target=&quot;_blank&quot;&gt;数据库+中间件系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinchen.blog.csdn.net/article/details/105086920&quot; target=&quot;_blank&quot;&gt;DevOps系列&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;欢迎关注公众号：程序员欣宸&quot;&gt;欢迎关注公众号：程序员欣宸&lt;/h3&gt;
&lt;blockquote readability=&quot;4.258064516129&quot;&gt;
&lt;p&gt;微信搜索「程序员欣宸」，我是欣宸，期待与您一同畅游Java世界...&lt;br/&gt;&lt;a href=&quot;https://github.com/zq2599/blog_demos&quot; target=&quot;_blank&quot;&gt;https://github.com/zq2599/blog_demos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 28 Dec 2020 23:46:00 +0000</pubDate>
<dc:creator>程序员欣宸</dc:creator>
<og:description>欢迎访问我的GitHub https://github.com/zq2599/blog_demos 内容：所有原创文章分类汇总及配套源码，涉及Java、Docker、Kubernetes、DevOPS</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/bolingcavalry/p/14204614.html</dc:identifier>
</item>
<item>
<title>全链路压测落地和演进之路 - 老_张</title>
<link>http://www.cnblogs.com/imyalost/p/14204484.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imyalost/p/14204484.html</guid>
<description>&lt;h2 data-lake-id=&quot;7e08689353bbc6bc5227544feab168a2&quot;&gt;​前言&lt;/h2&gt;
&lt;p data-lake-id=&quot;41b2cf1584bd96b072239ff90fa5c7ee&quot;&gt;笔者所在的公司是一家快速发展的互联网电商公司，在保证业务快速稳定发展的同时，对于系统稳定性、可用性和扩展性的要求，也在不断提高。&lt;/p&gt;
&lt;p data-lake-id=&quot;41b2cf1584bd96b072239ff90fa5c7ee&quot;&gt;特别是互联网电商企业每年的两次大考:&lt;strong&gt;618&amp;amp;双11，&lt;/strong&gt;更是对服务的三大特性有更多的要求。在大促活动开启之前，无论是前期的核心业务梳理、线上流量评估、场景建模，&lt;/p&gt;
&lt;p data-lake-id=&quot;41b2cf1584bd96b072239ff90fa5c7ee&quot;&gt;还是测试实施阶段的监控分析、调优验证，乃至线上的容量规划，每个环节都需要做很多工作。且这些工作都需要运维、开发、测试、产品甚至数据分析团队的协同配合，才能保质高效的完成。&lt;/p&gt;
&lt;p data-lake-id=&quot;41b2cf1584bd96b072239ff90fa5c7ee&quot;&gt;全链路压测，作为电商大促的稳定性保障利器，也在不断的迭代演进。&lt;/p&gt;
&lt;p data-lake-id=&quot;41b2cf1584bd96b072239ff90fa5c7ee&quot;&gt;这篇文章，为大家介绍下全链路压测在我司的落地和实践演进史。&lt;/p&gt;
&lt;p data-lake-id=&quot;41b2cf1584bd96b072239ff90fa5c7ee&quot;&gt;&lt;span&gt;&lt;strong&gt;当然，其中的某些敏感部分已脱敏，请谅解（图片水印为本人微信公众号水印）&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;21db3d7414ad8875fbc106bdebb1ece4&quot;&gt; &lt;/p&gt;
&lt;h2 data-lake-id=&quot;8e2273066b57ac90c745eae2f5ecfd0f&quot;&gt;落地&lt;/h2&gt;
&lt;h3 data-lake-id=&quot;3426b8e1604e19a117a03a3e9d486907&quot;&gt;挑战&lt;/h3&gt;
&lt;p data-lake-id=&quot;27728b8f65ade212d9af71f713dcb1b5&quot;&gt;去年双十一，为了应对零点的峰值流量冲击，我们在八月下旬启动了第一次全链路压测。由于是从零开始，因此单独的搭建了一套和生产1:1的环境。&lt;/p&gt;
&lt;p data-lake-id=&quot;27728b8f65ade212d9af71f713dcb1b5&quot;&gt;2个月的时间，环境成本就高达几百万。从项目KO到双十一活动开始，第一次双十一大促，我们面临着下面几点挑战。&lt;/p&gt;
&lt;p data-lake-id=&quot;1c917007c4198cf5f2ff1e2feec4c960&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F403166%2F1608216553420-ea67a20e-d603-4595-bcd5-3fe1c3896402.png%22%2C%22originWidth%22%3A728%2C%22originHeight%22%3A274%2C%22name%22%3A%22image.png%22%2C%22size%22%3A35714%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A313.61557%2C%22y%22%3A5.7715707%2C%22width%22%3A98.89929000000001%2C%22height%22%3A32.483674300000004%2C%22text%22%3A%22%E6%8C%91%E6%88%98%22%7D%2C%7B%22x%22%3A584.76013%2C%22y%22%3A77.01832%2C%22width%22%3A121.96387000000004%2C%22height%22%3A23.119699999999995%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%E5%A4%9A%E7%BA%BF%E5%BC%80%E5%B1%95%22%7D%2C%7B%22x%22%3A398.6843%2C%22y%22%3A77.02745%2C%22width%22%3A121.55290000000002%2C%22height%22%3A23.440299999999993%2C%22text%22%3A%22%E6%B5%81%E9%87%8F%E8%AF%84%E4%BC%B0%E5%9B%B0%E9%9A%BE%22%7D%2C%7B%22x%22%3A208.5304%2C%22y%22%3A77.84117%2C%22width%22%3A121.3306%2C%22height%22%3A21.145073999999994%2C%22text%22%3A%22%E7%8E%AF%E5%A2%83%E6%88%90%E6%9C%AC%E9%AB%98%E6%98%82%22%7D%2C%7B%22x%22%3A21.15856%2C%22y%22%3A77.553474%2C%22width%22%3A121.37054%2C%22height%22%3A21.395346000000004%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%E9%93%BE%E8%B7%AF%E6%A2%B3%E7%90%86%22%7D%2C%7B%22x%22%3A392.98642%2C%22y%22%3A139.57983%2C%22width%22%3A130.87597999999997%2C%22height%22%3A19.34739000000002%2C%22text%22%3A%22%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E5%B7%A5%E5%85%B7%E7%BC%BA%E5%A4%B1%22%7D%2C%7B%22x%22%3A32.817646%2C%22y%22%3A140.29742%2C%22width%22%3A98.686124%2C%22height%22%3A17.71216000000001%2C%22text%22%3A%22%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E5%A4%8D%E6%9D%82%22%7D%2C%7B%22x%22%3A221.62717%2C%22y%22%3A140.75078%2C%22width%22%3A97.89700000000002%2C%22height%22%3A16.21147000000002%2C%22text%22%3A%22%E6%A8%A1%E6%8B%9F%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%22%7D%2C%7B%22x%22%3A593.8546%2C%22y%22%3A139.9821%2C%22width%22%3A102.02625999999998%2C%22height%22%3A17.760760000000005%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%26DB%E6%8B%86%E5%88%86%22%7D%2C%7B%22x%22%3A586.8479%2C%22y%22%3A179.49524%2C%22width%22%3A118.08794999999998%2C%22height%22%3A18.459959999999995%2C%22text%22%3A%22Redistkey%E6%B2%BB%E7%90%86%22%7D%2C%7B%22x%22%3A393.55426%2C%22y%22%3A180.54646%2C%22width%22%3A129.88124000000005%2C%22height%22%3A17.268010000000004%2C%22text%22%3A%22%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB%E8%A6%86%E7%9B%96%E4%B8%8D%E8%B6%B3%22%7D%2C%7B%22x%22%3A32.707653%2C%22y%22%3A180.83632%2C%22width%22%3A97.494327%2C%22height%22%3A16.984880000000004%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E4%BE%9D%E8%B5%96%E5%BA%A6%E9%AB%98%22%7D%2C%7B%22x%22%3A220.41196%2C%22y%22%3A181.26068%2C%22width%22%3A98.89718000000002%2C%22height%22%3A16.166059999999987%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87%E9%9A%BE%E5%BA%A6%22%7D%2C%7B%22x%22%3A578.6364%2C%22y%22%3A220.60263%2C%22width%22%3A131.4552%2C%22height%22%3A17.235889999999984%2C%22text%22%3A%22%E7%89%88%E6%9C%AC%E9%80%81%E4%BB%A3%E5%90%88%E5%B9%B6%E5%8F%91%E5%B8%83%22%7D%2C%7B%22x%22%3A215.88931%2C%22y%22%3A219.62228%2C%22width%22%3A108.75622999999999%2C%22height%22%3A18.13933%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E8%81%94%E8%B0%83block%22%7D%2C%7B%22x%22%3A32.91433%2C%22y%22%3A220.94914%2C%22width%22%3A98.31045%2C%22height%22%3A17.082539999999995%2C%22text%22%3A%22%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB%E5%A4%8D%E6%9D%82%22%7D%2C%7B%22x%22%3A393.75854%2C%22y%22%3A221.1044%2C%22width%22%3A129.64126000000005%2C%22height%22%3A15.678820000000002%2C%22text%22%3A%22%E7%BC%BA%E4%B9%8F%E6%9C%89%E7%BB%8F%E9%AA%8C%E7%9A%84%E5%90%8C%E5%AD%A6%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%8C%91%E6%88%98%20%E4%BB%BB%E5%8A%A1%E5%A4%9A%E7%BA%BF%E5%BC%80%E5%B1%95%20%E6%B5%81%E9%87%8F%E8%AF%84%E4%BC%B0%E5%9B%B0%E9%9A%BE%20%E7%8E%AF%E5%A2%83%E6%88%90%E6%9C%AC%E9%AB%98%E6%98%82%20%E6%A0%B8%E5%BF%83%E9%93%BE%E8%B7%AF%E6%A2%B3%E7%90%86%20%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E5%B7%A5%E5%85%B7%E7%BC%BA%E5%A4%B1%20%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E5%A4%8D%E6%9D%82%20%E6%A8%A1%E6%8B%9F%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%20%E6%9C%8D%E5%8A%A1%26DB%E6%8B%86%E5%88%86%20Redistkey%E6%B2%BB%E7%90%86%20%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB%E8%A6%86%E7%9B%96%E4%B8%8D%E8%B6%B3%20%E6%9C%8D%E5%8A%A1%E4%BE%9D%E8%B5%96%E5%BA%A6%E9%AB%98%20%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87%E9%9A%BE%E5%BA%A6%20%E7%89%88%E6%9C%AC%E9%80%81%E4%BB%A3%E5%90%88%E5%B9%B6%E5%8F%91%E5%B8%83%20%E6%9C%8D%E5%8A%A1%E8%81%94%E8%B0%83block%20%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB%E5%A4%8D%E6%9D%82%20%E7%BC%BA%E4%B9%8F%E6%9C%89%E7%BB%8F%E9%AA%8C%E7%9A%84%E5%90%8C%E5%AD%A6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A728%2C%22height%22%3A274%7D&quot;&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWgibRfIR9MBy3eGiasmo0gLSKbuIdCCv6p3HJAvFvaDvicdl7WUiaNGuvdQItRwfXcMehBbwFFbAUnBNA/640?wx_fmt=png&quot; title=&quot;image.png&quot; data-height=&quot;274px&quot; data-ratio=&quot;0.37637362637362637&quot; data-type=&quot;png&quot; data-w=&quot;728&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 data-lake-id=&quot;c80285924b4e80c7c0117eb9fcf22725&quot;&gt;核心链路梳理&lt;/h4&gt;
&lt;p data-lake-id=&quot;243cd62cd73ca949d99397ba497d514c&quot;&gt;电商业务本身比较复杂，且当前阶段我们微服务架构下，各个服务间依赖高，调用关系复杂，且没有较为清晰的链路梳理。&lt;/p&gt;
&lt;p data-lake-id=&quot;243cd62cd73ca949d99397ba497d514c&quot;&gt;所以，面临的第一个挑战，就是从错综复杂的系统中梳理出核心业务链路。&lt;/p&gt;
&lt;p data-lake-id=&quot;5ddcc1010b8cbbb16f168430e1e60ffe&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F403166%2F1606116645015-f2b02120-9e71-41d2-8d26-58bb3c328e61.png%22%2C%22originWidth%22%3A594%2C%22originHeight%22%3A309%2C%22name%22%3A%22image.png%22%2C%22size%22%3A27470%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A425.50107%2C%22y%22%3A17.327744%2C%22width%22%3A143.09372999999994%2C%22height%22%3A22.710773%2C%22text%22%3A%22%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%A2%B3%E7%90%86%E5%AE%83%22%7D%2C%7B%22x%22%3A21.64924%2C%22y%22%3A17.310087%2C%22width%22%3A141.39352%2C%22height%22%3A23.398543%2C%22text%22%3A%22%E6%88%91%E4%BB%AC%E5%9C%A8%E6%A2%B3%E7%90%86%E4%BB%80%E4%B9%88%22%7D%2C%7B%22x%22%3A225.39006%2C%22y%22%3A17.990992%2C%22width%22%3A142.50263999999999%2C%22height%22%3A23.922144000000003%2C%22text%22%3A%22%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%B8%E5%BF%83%E9%93%BE%E8%B7%AF%22%7D%2C%7B%22x%22%3A231.66992%2C%22y%22%3A128.83162%2C%22width%22%3A128.33066000000002%2C%22height%22%3A22.87238000000002%2C%22text%22%3A%22%E7%89%B5%E4%B8%80%E5%8F%91%E8%80%8C%E5%8A%A8%E5%85%A8%E8%BA%AB%22%7D%2C%7B%22x%22%3A56.331905%2C%22y%22%3A130.36647%2C%22width%22%3A74.044975%2C%22height%22%3A20.685550000000006%2C%22text%22%3A%22%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%22%7D%2C%7B%22x%22%3A452.5404%2C%22y%22%3A131.01845%2C%22width%22%3A90.85860000000002%2C%22height%22%3A19.02394000000001%2C%22text%22%3A%22%E8%B0%81%E4%BC%9A%E5%BD%B1%E5%93%8D%E6%88%91%22%7D%2C%7B%22x%22%3A452.202%2C%22y%22%3A182.47615%2C%22width%22%3A91.03179999999998%2C%22height%22%3A18.670950000000005%2C%22text%22%3A%22%E6%88%91%E4%BC%9A%E5%BD%B1%E5%93%8D%E8%B0%81%22%7D%2C%7B%22x%22%3A56.436665%2C%22y%22%3A182.45636%2C%22width%22%3A72.724695%2C%22height%22%3A19.592039999999997%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E5%9C%BA%E6%99%AF%22%7D%2C%7B%22x%22%3A223.13513%2C%22y%22%3A182.59276%2C%22width%22%3A144.48586999999998%2C%22height%22%3A18.878420000000006%2C%22text%22%3A%22%E5%BD%B1%E5%93%8D%E5%AF%BC%E8%B4%AD%E4%B8%8B%E5%8D%95%E6%94%AF%E4%BB%98%22%7D%2C%7B%22x%22%3A56.483044%2C%22y%22%3A235.67786%2C%22width%22%3A73.50644599999998%2C%22height%22%3A19.875609999999995%2C%22text%22%3A%22%E9%80%BB%E8%BE%91%E5%9C%BA%E6%99%AF%22%7D%2C%7B%22x%22%3A452.702%2C%22y%22%3A236.38704%2C%22width%22%3A90.39047000000005%2C%22height%22%3A18.875699999999995%2C%22text%22%3A%22%E5%93%AA%E9%87%8C%E6%9C%89%E9%A3%8E%E9%99%A9%22%7D%2C%7B%22x%22%3A223.31511%2C%22y%22%3A236.45569%2C%22width%22%3A146.14641%2C%22height%22%3A18.197460000000007%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%E4%B8%9A%E5%8A%A1%E8%81%9A%E9%9B%86%E5%8C%BA%E5%9F%9F%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%A2%B3%E7%90%86%E5%AE%83%20%E6%88%91%E4%BB%AC%E5%9C%A8%E6%A2%B3%E7%90%86%E4%BB%80%E4%B9%88%20%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%B8%E5%BF%83%E9%93%BE%E8%B7%AF%20%E7%89%B5%E4%B8%80%E5%8F%91%E8%80%8C%E5%8A%A8%E5%85%A8%E8%BA%AB%20%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%20%E8%B0%81%E4%BC%9A%E5%BD%B1%E5%93%8D%E6%88%91%20%E6%88%91%E4%BC%9A%E5%BD%B1%E5%93%8D%E8%B0%81%20%E6%95%B0%E6%8D%AE%E5%9C%BA%E6%99%AF%20%E5%BD%B1%E5%93%8D%E5%AF%BC%E8%B4%AD%E4%B8%8B%E5%8D%95%E6%94%AF%E4%BB%98%20%E9%80%BB%E8%BE%91%E5%9C%BA%E6%99%AF%20%E5%93%AA%E9%87%8C%E6%9C%89%E9%A3%8E%E9%99%A9%20%E6%A0%B8%E5%BF%83%E4%B8%9A%E5%8A%A1%E8%81%9A%E9%9B%86%E5%8C%BA%E5%9F%9F%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A575%2C%22height%22%3A299%7D&quot;&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWgibRfIR9MBy3eGiasmo0gLSK7PIrIPDlOFjXgWXnB5F7uHNO8DYBCOibMJlmcVvuCYQOoEO2ptiaDnoA/640?wx_fmt=png&quot; title=&quot;image.png&quot; data-height=&quot;299px&quot; data-ratio=&quot;0.5202020202020202&quot; data-type=&quot;png&quot; data-w=&quot;594&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;171fbc3b9b5e2815ef27ec6563d316cf&quot;&gt;如上图所示，梳理核心链路前一定要考虑清楚上面三个问题：&lt;/p&gt;
&lt;p data-lake-id=&quot;e7eef55fe4e3285e6c6551e74699c834&quot;&gt;&lt;strong&gt;1）我们在梳理什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;daa1afd78a0c6e1dd78fb1fd2990de2c&quot;&gt;梳理核心链路，实际上是对我们的业务场景、数据场景和逻辑场景的梳理。&lt;/p&gt;
&lt;p data-lake-id=&quot;18eb281cd1acd9973ff99928142bc04d&quot;&gt;&lt;strong&gt;2）什么是核心链路？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;62f8a14eb45a7bbc7d6e5651c936cdc3&quot;&gt;从实践来说，核心链路主要有这几个特点：它是核心业务聚集区域、牵一发而动全身、影响导购下单支付。&lt;/p&gt;
&lt;p data-lake-id=&quot;b394413e01990793d12456a2b5f24cd7&quot;&gt;&lt;strong&gt;3）为什么要梳理它？&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;085fdd6370cf124a791dbab03d50dede&quot;&gt;梳理核心链路最重要的目的是让团队的每个人都清晰的知道：谁会影响我的服务，我会影响谁的服务，以及梳理过程中发现潜在的风险。&lt;/p&gt;
&lt;p data-lake-id=&quot;f96d4a54317ffa0627133edf55dd7b23&quot;&gt; &lt;/p&gt;
&lt;h4 data-lake-id=&quot;fc78107b58e2fc8d17e358ff6d473ed8&quot;&gt;环境成本高昂&lt;/h4&gt;
&lt;p data-lake-id=&quot;33bb65a0d03496e183b36fafb7deb4ed&quot;&gt;按照业内的实践经验和方案，全链路压测都是在生产环境进行，这样测试的结果才能更贴近实际的生产场景。&lt;/p&gt;
&lt;p data-lake-id=&quot;33bb65a0d03496e183b36fafb7deb4ed&quot;&gt;但由于我们是第一次进行全链路压测，因此只能选择折中方案——&lt;strong&gt;按照生产环境当前的配置，搭建一套等配镜像环境&lt;/strong&gt;。&lt;/p&gt;
&lt;p data-lake-id=&quot;33bb65a0d03496e183b36fafb7deb4ed&quot;&gt;镜像环境从资源准备到服务部署联调都比较耗时，且成本高昂，这逼迫我们必须拿到更好的结果，才能提高ROI。&lt;/p&gt;
&lt;p data-lake-id=&quot;b540a58bc08a07be7836259be19af9f0&quot;&gt; &lt;/p&gt;
&lt;h4 data-lake-id=&quot;736988f3bf110142caced898ef586430&quot;&gt;流量评估困难&lt;/h4&gt;
&lt;p data-lake-id=&quot;bc9f1ac11e64277a10471836b305b54d&quot;&gt;为了尽可能使压测场景更贴近真实的生产场景，需要对核心链路的流量模型进行比较准确的评估和模型确认。&lt;/p&gt;
&lt;p data-lake-id=&quot;bc9f1ac11e64277a10471836b305b54d&quot;&gt;由于各服务间依赖较高，且调用关系复杂，这对我们提出了新的挑战——如何评估出更接近真实场景的流量模型。&lt;/p&gt;
&lt;p data-lake-id=&quot;958d170ed8ed4e725965ad3deeaa6b2b&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F403166%2F1608216482954-a148d53b-c5cb-41f6-a9f1-30dfca12a224.png%22%2C%22originWidth%22%3A562%2C%22originHeight%22%3A300%2C%22name%22%3A%22image.png%22%2C%22size%22%3A18150%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A253.2907%2C%22y%22%3A14.123833%2C%22width%22%3A65.45732000000001%2C%22height%22%3A19.103257%2C%22text%22%3A%22%E6%B5%81%E9%87%8F%E6%A8%A1%E5%9E%8B%22%7D%2C%7B%22x%22%3A49.895428%2C%22y%22%3A15.096664%2C%22width%22%3A66.18450200000001%2C%22height%22%3A18.143266%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E8%AF%84%E4%BC%B0%22%7D%2C%7B%22x%22%3A449.42416%2C%22y%22%3A15.083348%2C%22width%22%3A65.84974000000005%2C%22height%22%3A18.642158000000002%2C%22text%22%3A%22%E5%AE%89%E5%85%A8%E6%B0%B4%E4%BD%8D%22%7D%2C%7B%22x%22%3A436.12744%2C%22y%22%3A122.53817%2C%22width%22%3A90.52956000000006%2C%22height%22%3A15.644649999999999%2C%22text%22%3A%22%E6%9C%80%E5%A4%A7%E5%A4%84%E7%90%86%E8%83%BD%E5%8A%9B%22%7D%2C%7B%22x%22%3A34.680073%2C%22y%22%3A122.000175%2C%22width%22%3A97.377747%2C%22height%22%3A16.557705000000013%2C%22text%22%3A%22%E6%A0%B8%E5%BF%83%E9%93%BE%E8%B7%AF%E6%A2%B3%E7%90%86%22%7D%2C%7B%22x%22%3A257.71396%2C%22y%22%3A122.61796%2C%22width%22%3A60.34448000000003%2C%22height%22%3A15.900030000000001%2C%22text%22%3A%22%E5%85%A5%E5%8F%A3%E6%B5%81%E9%87%8F%22%7D%2C%7B%22x%22%3A37.71552%2C%22y%22%3A174.50447%2C%22width%22%3A91.11711%2C%22height%22%3A15.479369999999989%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E8%B0%83%E7%94%A8%E7%9B%91%E6%8E%A7%22%7D%2C%7B%22x%22%3A255.55452%2C%22y%22%3A174.4532%2C%22width%22%3A61.89718000000002%2C%22height%22%3A15.736989999999992%2C%22text%22%3A%22%E5%86%85%E9%83%A8%E6%B5%81%E9%87%8F%22%7D%2C%7B%22x%22%3A436.2754%2C%22y%22%3A175.49316%2C%22width%22%3A90.56240000000003%2C%22height%22%3A14.711630000000014%2C%22text%22%3A%22%E7%A8%B3%E5%AE%9A%E5%A4%84%E7%90%86%E8%83%BD%E5%8A%9B%22%7D%2C%7B%22x%22%3A255.66296%2C%22y%22%3A227.18108%2C%22width%22%3A61.83749999999998%2C%22height%22%3A15.886470000000003%2C%22text%22%3A%22%E5%87%BA%E5%8F%A3%E6%B5%81%E9%87%8F%22%7D%2C%7B%22x%22%3A31.971376%2C%22y%22%3A227.44719%2C%22width%22%3A104.13780400000002%2C%22height%22%3A15.048339999999996%2C%22text%22%3A%22%E4%B8%8A%E4%B8%8B%E6%B8%B8%E4%BE%9D%E8%B5%96%E5%88%86%E6%9E%90%22%7D%2C%7B%22x%22%3A405.9733%2C%22y%22%3A227.32237%2C%22width%22%3A150.32803%2C%22height%22%3A16.026369999999986%2C%22text%22%3A%22%E6%B0%B4%E5%B9%B3%E6%89%A9%E5%AE%B9%E8%83%BD%E5%90%A6%E6%8F%90%E9%AB%98%E8%83%BD%E5%8A%9B%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%B5%81%E9%87%8F%E6%A8%A1%E5%9E%8B%20%E5%A6%82%E4%BD%95%E8%AF%84%E4%BC%B0%20%E5%AE%89%E5%85%A8%E6%B0%B4%E4%BD%8D%20%E6%9C%80%E5%A4%A7%E5%A4%84%E7%90%86%E8%83%BD%E5%8A%9B%20%E6%A0%B8%E5%BF%83%E9%93%BE%E8%B7%AF%E6%A2%B3%E7%90%86%20%E5%85%A5%E5%8F%A3%E6%B5%81%E9%87%8F%20%E8%AF%B7%E6%B1%82%E8%B0%83%E7%94%A8%E7%9B%91%E6%8E%A7%20%E5%86%85%E9%83%A8%E6%B5%81%E9%87%8F%20%E7%A8%B3%E5%AE%9A%E5%A4%84%E7%90%86%E8%83%BD%E5%8A%9B%20%E5%87%BA%E5%8F%A3%E6%B5%81%E9%87%8F%20%E4%B8%8A%E4%B8%8B%E6%B8%B8%E4%BE%9D%E8%B5%96%E5%88%86%E6%9E%90%20%E6%B0%B4%E5%B9%B3%E6%89%A9%E5%AE%B9%E8%83%BD%E5%90%A6%E6%8F%90%E9%AB%98%E8%83%BD%E5%8A%9B%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A562%2C%22height%22%3A300%7D&quot;&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWgibRfIR9MBy3eGiasmo0gLSKghEMNX7k05UibAArYyoxSRITVJhCg9gPFicnI8yBm9RviarUmMobnjALg/640?wx_fmt=png&quot; title=&quot;image.png&quot; data-height=&quot;300px&quot; data-ratio=&quot;0.5338078291814946&quot; data-type=&quot;png&quot; data-w=&quot;562&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;bb0c410d6c414dc7d4ee777774c744df&quot;&gt;流量评估从我个人角度来说，最大的难点实际上在于找到切入点。&lt;/p&gt;
&lt;p data-lake-id=&quot;bb0c410d6c414dc7d4ee777774c744df&quot;&gt;而最好的切入点，除了前面讲到的核心链路梳理，其次就在于完善的监控体系。其中，核心链路梳理是前置项，而监控工具则是流量评估的提效工具。&lt;/p&gt;
&lt;p data-lake-id=&quot;1a19b8edffc0c86dd3db9f17d0aee544&quot;&gt;&lt;strong&gt;1）评估流量&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;085ee2100ad0318ab02a0b033ce47a23&quot;&gt;完成核心链路梳理后，可以依据核心链路的请求调用关系进行上下游分析。相关工具的话，开源的有jaeger、skywalking、pinpoint等。&lt;/p&gt;
&lt;p data-lake-id=&quot;8957f9b9c656a39a9c64d7ae358c8da1&quot;&gt;&lt;strong&gt;2）模型分析&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;8d75fa5365da86c3b848c326b82822c1&quot;&gt;模型分析主要关注三点：&lt;strong&gt;入口流量、内部流量和出口流量&lt;/strong&gt;。它们各自的区别如下：&lt;/p&gt;
&lt;div class=&quot; list-paddingleft-2&quot; data-lake-id=&quot;69b48068301e81a5ddae6bc78e297d1d&quot;&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; data-lake-id=&quot;f3c74b0ac53e9cd80595c3c9c9747694&quot; readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;入口流量：主要指到达网关入口的预估峰值流量；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;内部流量：微服务架构下，内部服务间调用会出现单个接口被多次调用的情况，这是需要重点关注的；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;出口流量：这里指的是核心链路之外的下游调用以及一些外部调用；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p data-lake-id=&quot;fc19848c0ceac2bb04ae8eff26552b10&quot;&gt;&lt;strong&gt;3）安全水位&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;65db162f0f50d7911df79034e0106552&quot;&gt;所谓的安全水位，即&lt;strong&gt;服务能在保证自身比较稳定的情况下支撑业务的能力&lt;/strong&gt;，一般以CPU%为基准。业内目前的安全水位，大多以40%——50%为安全水位。当然，安全水位的设定需要明确如下三点：&lt;/p&gt;
&lt;div class=&quot; list-paddingleft-2&quot; data-lake-id=&quot;6fded40a563af1484b692131830bf761&quot;&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; data-lake-id=&quot;a7ab9ec8c9c55d0f4e84fbb65f2f306e&quot; readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;最大处理能力：即服务器资源耗用达到超过90%时的处理能力；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;稳定处理能力：服务在安全水位线时候的处理能力；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;水平扩容能否提高能力：服务集群能否通过快速的水平扩容来提高处理能力；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p data-lake-id=&quot;c16cc1ff1c745d1aea2b182a6b3124e6&quot;&gt; &lt;/p&gt;
&lt;h4 data-lake-id=&quot;810150b74bd3207054206c64a7ac1f95&quot;&gt;任务多线开展&lt;/h4&gt;
&lt;p data-lake-id=&quot;10cdaa1337d711a0b3e79ed3e4486c32&quot;&gt;在双十一启动到活动开始这段时间，需要同时开展的任务较多。比如服务拆分、小红点迁移、DB&amp;amp;Redis垂直拆分、全链路压测及性能优化，以及新的业务线不断拓展，这些都是我们需要面对并且克服的困难。&lt;/p&gt;
&lt;p data-lake-id=&quot;992f4679fbedb79998d70a01fb3c3f76&quot;&gt; &lt;/p&gt;
&lt;h3 data-lake-id=&quot;74ee50c7bb11f9e305309c8e9c27194d&quot;&gt;过程&lt;/h3&gt;
&lt;p data-lake-id=&quot;839625593c9286a26fcae944e53e0156&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F403166%2F1606116831453-b32e7ec8-5643-4bdc-bd5d-82b6ed1a6f70.png%22%2C%22originWidth%22%3A776%2C%22originHeight%22%3A697%2C%22name%22%3A%22image.png%22%2C%22size%22%3A68604%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A298.70908%2C%22y%22%3A9.576991%2C%22width%22%3A176.81582000000003%2C%22height%22%3A40.770314%2C%22text%22%3A%22%E8%BF%87%E7%A8%8B%22%7D%2C%7B%22x%22%3A360.81195%2C%22y%22%3A73.576965%2C%22width%22%3A306.83015%2C%22height%22%3A22.578765000000004%2C%22text%22%3A%22%E4%BB%BB%E5%8A%A1%E6%8B%86%E5%88%86%3A%E5%89%8D%E7%AB%AF%2C%E5%90%8E%E7%AB%AF%2C%E6%B5%8B%E8%AF%95%2C%E5%9F%BA%E6%9E%B6%2C%E6%8A%80%E4%BF%9D%22%7D%2C%7B%22x%22%3A37.430447%2C%22y%22%3A93.83496%2C%22width%22%3A90.582353%2C%22height%22%3A23.31487%2C%22text%22%3A%22%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%22%7D%2C%7B%22x%22%3A359.08868%2C%22y%22%3A114.05673%2C%22width%22%3A307.92352%2C%22height%22%3A20.757109999999997%2C%22text%22%3A%22%E4%BC%B0%E6%97%B6%E6%8E%92%E6%9C%9F%3A%E5%90%AF%E5%8A%A8%2C%E5%87%86%E5%A4%87%2C%E5%8E%8B%E6%B5%8B%2C%E5%A4%87%E6%88%98%2C%E5%8F%8C11%22%7D%2C%7B%22x%22%3A399.76758%2C%22y%22%3A153.08553%2C%22width%22%3A226.52838000000003%2C%22height%22%3A17.868689999999987%2C%22text%22%3A%22%E7%8E%AF%E5%A2%83%3A%E9%95%9C%E5%83%8F%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%2C%E6%9C%8D%E5%8A%A1%E8%81%94%E8%B0%83%22%7D%2C%7B%22x%22%3A400.1538%2C%22y%22%3A193.89642%2C%22width%22%3A227.13090000000005%2C%22height%22%3A16.495149999999995%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%3A%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E9%A2%84%E5%9F%8B%2C%E8%84%B1%E6%95%8F%E5%A4%84%E7%90%86%22%7D%2C%7B%22x%22%3A401.3468%2C%22y%22%3A232.84508%2C%22width%22%3A224.93964%2C%22height%22%3A17.93341000000001%2C%22text%22%3A%22%E6%A8%A1%E5%9E%8B%3A%E4%B8%9A%E5%8A%A1%E6%A8%A1%E5%9E%8B%E6%A2%B3%E7%90%86%2C%E5%8E%8B%E6%B5%8B%E6%A8%A1%E5%9E%8B%22%7D%2C%7B%22x%22%3A37.51032%2C%22y%22%3A270.6543%2C%22width%22%3A89.75889000000001%2C%22height%22%3A23.826440000000048%2C%22text%22%3A%22%E5%87%86%E5%A4%87%E9%98%B6%E6%AE%B5%22%7D%2C%7B%22x%22%3A412.909%2C%22y%22%3A273.17822%2C%22width%22%3A202.59889999999996%2C%22height%22%3A16.77157999999997%2C%22text%22%3A%22%E8%B5%84%E6%BA%90%3AECS%26RDS%26DB%26MQ%22%7D%2C%7B%22x%22%3A416.86588%2C%22y%22%3A312.79828%2C%22width%22%3A194.30181999999996%2C%22height%22%3A18.464170000000024%2C%22text%22%3A%22%E6%96%B9%E6%A1%88%3A%E5%8E%8B%E6%B5%8B%E6%96%B9%E6%A1%88%2C%E5%AE%B9%E7%81%BE%E6%96%B9%E6%A1%88%22%7D%2C%7B%22x%22%3A416.50153%2C%22y%22%3A353.5993%2C%22width%22%3A194.13586999999995%2C%22height%22%3A16.918519999999944%2C%22text%22%3A%22%E7%9B%91%E6%8E%A7%3A%E5%9F%BA%E7%A1%80%E7%9B%91%E6%8E%A7%2C%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%22%7D%2C%7B%22x%22%3A415.74582%2C%22y%22%3A393.6191%2C%22width%22%3A194.62252999999998%2C%22height%22%3A17.14918%2C%22text%22%3A%22%E9%A2%84%E6%A1%88%3A%E9%99%90%E6%B5%81%E7%86%94%E6%96%AD%2C%E9%99%8D%E7%BA%A7%E9%A2%84%E6%A1%88%22%7D%2C%7B%22x%22%3A424.46066%2C%22y%22%3A431.21402%2C%22width%22%3A177.45944000000003%2C%22height%22%3A16.475919999999974%2C%22text%22%3A%22%E5%8D%95%E6%9C%BA%E5%8D%95%E9%93%BE%E8%B7%AF%3A%E4%B8%80%E6%8E%A5%E5%8F%A3%E7%BA%A7%E5%88%AB%22%7D%2C%7B%22x%22%3A416.69162%2C%22y%22%3A471.23096%2C%22width%22%3A193.09463%2C%22height%22%3A17.898889999999994%2C%22text%22%3A%22%E5%8D%95%E6%9C%BA%E6%B7%B7%E5%90%88%E5%9C%BA%E6%99%AF%3A%E4%B8%80%E6%9C%8D%E5%8A%A1%E7%BA%A7%E5%88%AB%22%7D%2C%7B%22x%22%3A38.449764%2C%22y%22%3A489.2677%2C%22width%22%3A89.35277599999999%2C%22height%22%3A22.188320000000033%2C%22text%22%3A%22%E5%8E%8B%E6%B5%8B%E9%98%B6%E6%AE%B5%22%7D%2C%7B%22x%22%3A409.27075%2C%22y%22%3A511.4607%2C%22width%22%3A209.08758999999998%2C%22height%22%3A16.83960000000002%2C%22text%22%3A%22%E5%85%A8%E9%93%BE%E8%B7%AF%E5%8E%8B%E6%B5%8B%E5%9C%BA%E6%99%AF%3A%E4%B8%80%E6%9C%8D%E5%8A%A1%E9%9B%86%E7%BE%A4%22%7D%2C%7B%22x%22%3A369.71848%2C%22y%22%3A550.6671%2C%22width%22%3A288.59317%2C%22height%22%3A18.464500000000044%2C%22text%22%3A%22%E9%A2%84%E6%A1%88%E6%BC%94%E7%BB%83%E5%9C%BA%E6%99%AF%3A%E6%AD%A3%E7%A1%AE%E6%80%A7%26%E5%8F%AF%E7%94%A8%E6%80%A7%26%E6%89%A9%E5%B1%95%E6%80%A7%22%7D%2C%7B%22x%22%3A336.13705%2C%22y%22%3A594.7494%2C%22width%22%3A355.38669%2C%22height%22%3A17.745349999999917%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E6%89%A9%E5%AE%B9%3A%E6%8C%89%E7%85%A7%E5%8E%8B%E6%B5%8B%E6%96%B9%E6%A1%88%E7%AD%96%E7%95%A5%2C%E8%BF%9B%E8%A1%8C%E7%94%9F%E4%BA%A7%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%22%7D%2C%7B%22x%22%3A37.77802%2C%22y%22%3A631.7915%2C%22width%22%3A89.92516%2C%22height%22%3A22.99479999999994%2C%22text%22%3A%22%E5%A4%87%E6%88%98%E9%98%B6%E6%AE%B5%22%7D%2C%7B%22x%22%3A331.92572%2C%22y%22%3A633.7508%2C%22width%22%3A365.59138%2C%22height%22%3A17.46496000000002%2C%22text%22%3A%22%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD%3A%E7%83%AD%E7%82%B9%E5%95%86%E5%93%81%26%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%26%E4%BC%98%E6%83%A0%E6%B4%A5%E8%B4%B4%E6%8F%90%E5%89%8D%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A329.9149%2C%22y%22%3A673.744%2C%22width%22%3A367.94875%2C%22height%22%3A19.08069999999998%2C%22text%22%3A%22%E9%A2%84%E6%A1%88check%3A%E9%99%90%E6%B5%81%2C%E7%86%94%E6%96%AD%2C%E9%99%8D%E7%BA%A7%2C%E6%89%A9%E5%AE%B9%E9%A2%84%E6%A1%88%E6%A3%80%E6%9F%A5%E6%BC%94%E7%BB%83%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E8%BF%87%E7%A8%8B%20%E4%BB%BB%E5%8A%A1%E6%8B%86%E5%88%86%3A%E5%89%8D%E7%AB%AF%2C%E5%90%8E%E7%AB%AF%2C%E6%B5%8B%E8%AF%95%2C%E5%9F%BA%E6%9E%B6%2C%E6%8A%80%E4%BF%9D%20%E5%90%AF%E5%8A%A8%E9%98%B6%E6%AE%B5%20%E4%BC%B0%E6%97%B6%E6%8E%92%E6%9C%9F%3A%E5%90%AF%E5%8A%A8%2C%E5%87%86%E5%A4%87%2C%E5%8E%8B%E6%B5%8B%2C%E5%A4%87%E6%88%98%2C%E5%8F%8C11%20%E7%8E%AF%E5%A2%83%3A%E9%95%9C%E5%83%8F%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%2C%E6%9C%8D%E5%8A%A1%E8%81%94%E8%B0%83%20%E6%95%B0%E6%8D%AE%3A%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E9%A2%84%E5%9F%8B%2C%E8%84%B1%E6%95%8F%E5%A4%84%E7%90%86%20%E6%A8%A1%E5%9E%8B%3A%E4%B8%9A%E5%8A%A1%E6%A8%A1%E5%9E%8B%E6%A2%B3%E7%90%86%2C%E5%8E%8B%E6%B5%8B%E6%A8%A1%E5%9E%8B%20%E5%87%86%E5%A4%87%E9%98%B6%E6%AE%B5%20%E8%B5%84%E6%BA%90%3AECS%26RDS%26DB%26MQ%20%E6%96%B9%E6%A1%88%3A%E5%8E%8B%E6%B5%8B%E6%96%B9%E6%A1%88%2C%E5%AE%B9%E7%81%BE%E6%96%B9%E6%A1%88%20%E7%9B%91%E6%8E%A7%3A%E5%9F%BA%E7%A1%80%E7%9B%91%E6%8E%A7%2C%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%20%E9%A2%84%E6%A1%88%3A%E9%99%90%E6%B5%81%E7%86%94%E6%96%AD%2C%E9%99%8D%E7%BA%A7%E9%A2%84%E6%A1%88%20%E5%8D%95%E6%9C%BA%E5%8D%95%E9%93%BE%E8%B7%AF%3A%E4%B8%80%E6%8E%A5%E5%8F%A3%E7%BA%A7%E5%88%AB%20%E5%8D%95%E6%9C%BA%E6%B7%B7%E5%90%88%E5%9C%BA%E6%99%AF%3A%E4%B8%80%E6%9C%8D%E5%8A%A1%E7%BA%A7%E5%88%AB%20%E5%8E%8B%E6%B5%8B%E9%98%B6%E6%AE%B5%20%E5%85%A8%E9%93%BE%E8%B7%AF%E5%8E%8B%E6%B5%8B%E5%9C%BA%E6%99%AF%3A%E4%B8%80%E6%9C%8D%E5%8A%A1%E9%9B%86%E7%BE%A4%20%E9%A2%84%E6%A1%88%E6%BC%94%E7%BB%83%E5%9C%BA%E6%99%AF%3A%E6%AD%A3%E7%A1%AE%E6%80%A7%26%E5%8F%AF%E7%94%A8%E6%80%A7%26%E6%89%A9%E5%B1%95%E6%80%A7%20%E6%9C%8D%E5%8A%A1%E6%89%A9%E5%AE%B9%3A%E6%8C%89%E7%85%A7%E5%8E%8B%E6%B5%8B%E6%96%B9%E6%A1%88%E7%AD%96%E7%95%A5%2C%E8%BF%9B%E8%A1%8C%E7%94%9F%E4%BA%A7%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%20%E5%A4%87%E6%88%98%E9%98%B6%E6%AE%B5%20%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD%3A%E7%83%AD%E7%82%B9%E5%95%86%E5%93%81%26%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%26%E4%BC%98%E6%83%A0%E6%B4%A5%E8%B4%B4%E6%8F%90%E5%89%8D%E7%BC%93%E5%AD%98%20%E9%A2%84%E6%A1%88check%3A%E9%99%90%E6%B5%81%2C%E7%86%94%E6%96%AD%2C%E9%99%8D%E7%BA%A7%2C%E6%89%A9%E5%AE%B9%E9%A2%84%E6%A1%88%E6%A3%80%E6%9F%A5%E6%BC%94%E7%BB%83%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A776%2C%22height%22%3A697%7D&quot;&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWgibRfIR9MBy3eGiasmo0gLSKM28Lcrn0N4OtApp4tibzLCYYrcjrgKzC6uVnoPI3UPib8RWzx0kZqhhg/640?wx_fmt=png&quot; title=&quot;image.png&quot; data-height=&quot;697px&quot; data-ratio=&quot;0.8981958762886598&quot; data-type=&quot;png&quot; data-w=&quot;776&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 data-lake-id=&quot;f4711d6406d076d444105e3392bc61cc&quot;&gt;启动阶段&lt;/h4&gt;
&lt;p data-lake-id=&quot;7ab6c724a4021fe33813a5a407b82323&quot;&gt;&lt;strong&gt;任务拆分&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;f3e70f6952f1994c85d3cc3484b9945e&quot;&gt;项目kickoff后，在负责人牵头下确定了本次双11的TODO项。主要是如下几项：&lt;/p&gt;
&lt;p data-lake-id=&quot;5b324b4099f8d2798bc5e8ccaec30e29&quot;&gt;&lt;strong&gt;前端&lt;/strong&gt;：降级点确认、容错保护、监控数据接入；&lt;/p&gt;
&lt;p data-lake-id=&quot;66d82c7b092ce177e01cfac853393df8&quot;&gt;&lt;strong&gt;后端&lt;/strong&gt;：核心链路梳理、监控&amp;amp;服务保护接入、专项预案、&lt;/p&gt;
&lt;p data-lake-id=&quot;fa5584a883f67987be0640d8ef5ddde9&quot;&gt;&lt;strong&gt;测试&lt;/strong&gt;：资源准备、压测模型梳理、压测方案、预案演练、线上功能验证；&lt;/p&gt;
&lt;p data-lake-id=&quot;c8dd8c7fa4d00c1668b7d1fc144f3e79&quot;&gt;&lt;strong&gt;基础架构&lt;/strong&gt;：架构优化、DB垂直拆分、基础设施接入（链路追踪、监控、报警......）；&lt;/p&gt;
&lt;p data-lake-id=&quot;d84f8b0bc24c278d15072491ee1683ca&quot;&gt;&lt;strong&gt;资源保障&lt;/strong&gt;：容量规划、镜像环境搭建、服务部署联调、线上扩容；&lt;/p&gt;
&lt;p data-lake-id=&quot;19a071216baa05abfca7ced89523fa7c&quot;&gt; &lt;/p&gt;
&lt;h4 data-lake-id=&quot;460f516f94ed5a83ab8c87f142b8f9e3&quot;&gt;准备阶段&lt;/h4&gt;
&lt;p data-lake-id=&quot;a626e23e3628d960e43b0d268b21371f&quot;&gt;在准备阶段，按照任务规划拆解出来的细化任务进行同步开展，下面是准备阶段我们开展的主要事项。&lt;/p&gt;
&lt;p data-lake-id=&quot;247193aa5f79ac361184974ad558c6f6&quot;&gt;&lt;strong&gt;核心链路梳理&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;d45d35756b4f8f1b74ebfe680ffe0479&quot;&gt;各业务研发团队的owner对我们目前的核心业务链路进行了梳理，主要包括：首页、商品、订单、支付、用户、风控、优惠券、大促活动、基础服务等。&lt;/p&gt;
&lt;p data-lake-id=&quot;79fe341a08e1c6d8c684b6b99db1e02a&quot;&gt;&lt;strong&gt;流量模型梳理&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;ec16fc9a26339b3450e1034d6cd7cb3f&quot;&gt;梳理了首页、商品、交易、支付等关键场景的下游依赖。将商品+交易+支付绘制了对应的依赖大图，并粗估双十一峰值数据，作为接下来压测、性能优化的技术目标。&lt;/p&gt;
&lt;p data-lake-id=&quot;f1826edb22f0132fc5631be9f4dd8855&quot;&gt;&lt;strong&gt;镜像环境准备&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;4f5859b7ed5e1563ed289a8f9faf52d8&quot;&gt;由于本次全链路压测是在和生产等配的镜像环境进行，相当于一切从零开始搭建一套环境，无论是资源准备、服务部署还是服务联调验证，都耗费了较多的时间。&lt;/p&gt;
&lt;p data-lake-id=&quot;4f5859b7ed5e1563ed289a8f9faf52d8&quot;&gt;运维同学投入了很大的精力做support，从中也发现了我们之前的一些不足，累积了很多经验。&lt;/p&gt;
&lt;p data-lake-id=&quot;327260cfbd4b6fa62e16b654002c30d1&quot;&gt;&lt;strong&gt;压测数据准备&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;891f7defb960176ccf514f91a5ea4c3f&quot;&gt;为了尽可能保证压测数据的真实性，我们的解决方案是复制生产库的数据，进行脱敏和可用性验证，用来做压测的基础数据。&lt;/p&gt;
&lt;p data-lake-id=&quot;891f7defb960176ccf514f91a5ea4c3f&quot;&gt;在数据脱敏和可用性验证这点，安全团队、DBA以及功能测试的同学给予了很大支持。&lt;/p&gt;
&lt;p data-lake-id=&quot;9e609d76c1992d99573de02c94728df2&quot;&gt;&lt;strong&gt;专项预案沟通&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;a23fdf95bcb51b8c74f93290f6ad4034&quot;&gt;专项预案主要包括如下几项：限流、降级、熔断、脉冲、资损五种场景。&lt;/p&gt;
&lt;p data-lake-id=&quot;c67f517724caa21c0af5fdf4ba5881a7&quot;&gt;&lt;strong&gt;大促指标沟通&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;60b5a6d2be9cd882ef8e3eb4752b1430&quot;&gt;为保证压测流量和生产预估流量对齐，和运营产品同学进行了多次沟通，确认了本次双十一大促活动相关的活动场次、时间段、优惠券投放量、预估DAU等相关关键指标。&lt;/p&gt;
&lt;p data-lake-id=&quot;8e055ee241b9af238dce0bc95939db40&quot;&gt;&lt;strong&gt;线上链路监控&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;540fab828fffc56b890e4b9d01daf22e&quot;&gt;监控就是我们的眼睛，有了监控，才能快速发现问题并定位修复问题。这一点，基础架构的同学为此做了很多工作。比如：链路追踪监控的Cat、可视化监控大盘-Grafana以及更多的监控组件。&lt;/p&gt;
&lt;p data-lake-id=&quot;d712e64972aab195faf8957a8a70540b&quot;&gt; &lt;/p&gt;
&lt;h4 data-lake-id=&quot;7bca6e825184ed90d9357630694ac470&quot;&gt;实施阶段&lt;/h4&gt;
&lt;p data-lake-id=&quot;d6a5f613f1e2ccfea36fc51a89228334&quot;&gt;在全链路压测实施阶段，根据测试场景和测试策略，我们主要进行了如下工作：&lt;/p&gt;
&lt;p data-lake-id=&quot;5daf9a812d7dcec900ec7f66c31f6a98&quot;&gt;&lt;strong&gt;单机单链路基准测试&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;d4b2145296db73d17a4cedc4f1646f4a&quot;&gt;在微服务架构下，整体链路的性能瓶颈，取决于短板（木桶原理）。因此，单机单链路基准测试的目的，是在全链路压测开始前进行性能摸底，定位排查链路瓶颈。&lt;/p&gt;
&lt;p data-lake-id=&quot;a90dfd2794f0fc9b09db535897a48240&quot;&gt;&lt;strong&gt;单机混合链路水位验证&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;8150293ca9e95a9cb444d02b4ec0cb1d&quot;&gt;单机混合链路压测的目的，是排查上下游调用依赖的瓶颈，并以此测试结果作为限流预案的基准值。&lt;/p&gt;
&lt;p data-lake-id=&quot;df54fedb3dac6704188943518b1af2e1&quot;&gt;&lt;strong&gt;全链路压测演练&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;685dd159f0af970948c92134c95813fb&quot;&gt;全链路压测是大促的保障。在整个实施阶段，需要不断的压测、排查定位分析问题并进行优化，最终拿到结果。&lt;/p&gt;
&lt;p data-lake-id=&quot;efb7504aa17d9c069aeb125033494966&quot;&gt;&lt;strong&gt;专项演练&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;c71940aaef839fd037d471e425669e76&quot;&gt;专项演练主要是针对服务限流降级熔断以及高可用、服务扩容进行验证。进行演练的目的主要有如下几项：&lt;/p&gt;
&lt;div class=&quot; list-paddingleft-2&quot; data-lake-id=&quot;21f5ebbaf23a8af4fcab7ae7a725978f&quot;&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; data-lake-id=&quot;dd21aa1ab370c2346725af88c0263991&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;验证预案是否生效；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;针对预案设定阈值进行测试调优；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;验证预案生效时服务本身的稳定性；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p data-lake-id=&quot;ee1c5031959f4dc8bdea4118f205272d&quot;&gt;&lt;strong&gt;稳定性测试&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;c5c159b64db1b2e8d7014f0cf14ecb22&quot;&gt;稳定性测试的目的，是验证系统处于负载情况下，能否长时间提供稳定的服务能力。&lt;/p&gt;
&lt;p data-lake-id=&quot;22e7ceaf5cf35033f91e080e629834f8&quot;&gt;&lt;strong&gt;每日问题复盘&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;541b340dc704e5a3d39fa84d0af1fb6f&quot;&gt;在双十一期间，会针对每天压测发现的问题进行复盘，尽可能让性能问题及时解决。&lt;/p&gt;
&lt;p data-lake-id=&quot;fd219c2ef1c6f27d9be63cb25890a4d9&quot;&gt; &lt;/p&gt;
&lt;h4 data-lake-id=&quot;df2b1845a484172ee9f20159dc0d9e46&quot;&gt;发布阶段&lt;/h4&gt;
&lt;p data-lake-id=&quot;53234a60a18524efa7c8d99f6fcacba0&quot;&gt;经过闭关作战半个月，针对我们的核心业务链路，进行了多轮的压测和性能优化，各系统qps已经基本达到了预定的目标（等比例）。&lt;/p&gt;
&lt;p data-lake-id=&quot;53234a60a18524efa7c8d99f6fcacba0&quot;&gt; &lt;/p&gt;
&lt;h2 data-lake-id=&quot;40a4118c750ec79094516908be3ecaf7&quot;&gt;演进&lt;/h2&gt;
&lt;p data-lake-id=&quot;f58a2657c8834888f1fb66a510c04749&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F403166%2F1606117221866-7ab3bfa2-c9d3-418f-9767-df8af4d33a1c.png%22%2C%22originWidth%22%3A971%2C%22originHeight%22%3A326%2C%22name%22%3A%22image.png%22%2C%22size%22%3A50483%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A79.276764%2C%22y%22%3A21.044748%2C%22width%22%3A40.148135999999994%2C%22height%22%3A19.495332000000005%2C%22text%22%3A%2219.11%22%7D%2C%7B%22x%22%3A853.0289%2C%22y%22%3A21.403805%2C%22width%22%3A41.332059999999956%2C%22height%22%3A19.135231000000005%2C%22text%22%3A%2220.11%22%7D%2C%7B%22x%22%3A655.4654%2C%22y%22%3A22.289%2C%22width%22%3A45.442499999999995%2C%22height%22%3A17.749739999999996%2C%22text%22%3A%2220.09%22%7D%2C%7B%22x%22%3A265.48444%2C%22y%22%3A22.351074%2C%22width%22%3A48.12799000000001%2C%22height%22%3A18.148695999999997%2C%22text%22%3A%2220.03%22%7D%2C%7B%22x%22%3A459.27173%2C%22y%22%3A22.450096%2C%22width%22%3A47.61180999999999%2C%22height%22%3A18.231346%2C%22text%22%3A%2220.06%22%7D%2C%7B%22x%22%3A244.74924%2C%22y%22%3A125.591064%2C%22width%22%3A90.52768000000003%2C%22height%22%3A19.927905999999993%2C%22text%22%3A%222020%E4%BA%94%E5%BD%A9%E7%9F%B3%22%7D%2C%7B%22x%22%3A58.17199%2C%22y%22%3A126.65981%2C%22width%22%3A75.08488%2C%22height%22%3A14.943489999999997%2C%22text%22%3A%222019%E5%B9%B4%E5%8F%8C11%22%7D%2C%7B%22x%22%3A633.7327%2C%22y%22%3A128.31735%2C%22width%22%3A89.01895000000002%2C%22height%22%3A18.075259999999986%2C%22text%22%3A%222020%E4%BA%94%E5%91%A8%E5%B9%B4%22%7D%2C%7B%22x%22%3A441.9412%2C%22y%22%3A128.64288%2C%22width%22%3A84.72789999999998%2C%22height%22%3A14.983339999999998%2C%22text%22%3A%222020%E5%B9%B4618%22%7D%2C%7B%22x%22%3A835.4216%2C%22y%22%3A128.87871%2C%22width%22%3A73.89455999999996%2C%22height%22%3A16.89400999999998%2C%22text%22%3A%222020%E5%8F%8C11%22%7D%2C%7B%22x%22%3A263.37402%2C%22y%22%3A167.76004%2C%22width%22%3A53.65583000000004%2C%22height%22%3A16.39148%2C%22text%22%3A%22%E6%B7%B7%E9%83%A8%E7%8E%AF%E5%A2%83%22%7D%2C%7B%22x%22%3A456.6307%2C%22y%22%3A167.71478%2C%22width%22%3A53.83879999999999%2C%22height%22%3A15.290680000000009%2C%22text%22%3A%22%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%22%7D%2C%7B%22x%22%3A651.453%2C%22y%22%3A168.55072%2C%22width%22%3A53.69420000000002%2C%22height%22%3A15.20953%2C%22text%22%3A%22%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%22%7D%2C%7B%22x%22%3A845.9587%2C%22y%22%3A168.85718%2C%22width%22%3A53.96006%2C%22height%22%3A15.040690000000012%2C%22text%22%3A%22%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%22%7D%2C%7B%22x%22%3A69.45056%2C%22y%22%3A171.32771%2C%22width%22%3A52.89903000000001%2C%22height%22%3A13.56993%2C%22text%22%3A%22%E9%95%9C%E5%83%8F%E7%8E%AF%E5%A2%83%22%7D%2C%7B%22x%22%3A424.4705%2C%22y%22%3A197.90186%2C%22width%22%3A117.31200000000001%2C%22height%22%3A17.670019999999994%2C%22text%22%3A%22%E7%94%A8%E6%88%B7%E5%9B%BD%E6%8B%9F%26%E7%9C%9F%E5%AE%9E%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A620.7036%2C%22y%22%3A198.47556%2C%22width%22%3A115.73169999999993%2C%22height%22%3A15.66261%2C%22text%22%3A%22%E7%94%A8%E6%88%B7%E5%B2%B8%E6%8B%9F%26%E7%9C%9F%E5%AE%9E%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A232.44873%2C%22y%22%3A198.96808%2C%22width%22%3A117.04210999999998%2C%22height%22%3A15.975900000000024%2C%22text%22%3A%22%E7%94%9F%E4%BA%A7%E5%90%8C%E6%AD%A5%26%E6%AC%BE%E6%8D%AE%E6%B8%85%E6%B4%97%22%7D%2C%7B%22x%22%3A816.2275%2C%22y%22%3A199.3476%2C%22width%22%3A115.6703%2C%22height%22%3A15.721830000000011%2C%22text%22%3A%22%E7%94%A8%E6%88%B7%E8%99%90%E6%8B%9F%26%E7%9C%9F%E5%AE%9E%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A34.319294%2C%22y%22%3A201.73338%2C%22width%22%3A121.85282600000001%2C%22height%22%3A16.1704%2C%22text%22%3A%22copy%E7%94%9F%E4%BA%A7%26%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%99%22%7D%2C%7B%22x%22%3A245.98976%2C%22y%22%3A232.5013%2C%22width%22%3A88.05874%2C%22height%22%3A15.513380000000012%2C%22text%22%3A%22%E5%87%86%E5%A4%87%E6%97%B6%E9%95%BF-24%E5%A4%A9%22%7D%2C%7B%22x%22%3A51.29531%2C%22y%22%3A233.7263%2C%22width%22%3A88.02125000000001%2C%22height%22%3A14.960309999999993%2C%22text%22%3A%22%E5%87%86%E5%A4%87%E6%97%B6%E9%95%BF-34%E5%A4%A9%22%7D%2C%7B%22x%22%3A439.686%2C%22y%22%3A233.95605%2C%22width%22%3A88.07470000000006%2C%22height%22%3A15.285969999999992%2C%22text%22%3A%22%E5%87%86%E5%A4%87%E6%97%B6%E9%95%BF-15%E5%A4%A9%22%7D%2C%7B%22x%22%3A828.6426%2C%22y%22%3A234.59377%2C%22width%22%3A88.80920000000003%2C%22height%22%3A15.580099999999987%2C%22text%22%3A%22%E5%87%86%E5%A4%87%E6%97%B6%E9%95%BF-15%E5%A4%A9%22%7D%2C%7B%22x%22%3A638.6177%2C%22y%22%3A234.8812%2C%22width%22%3A80.10789999999997%2C%22height%22%3A15.337439999999987%2C%22text%22%3A%22%E5%87%86%E5%A4%87%E6%97%B6%E9%95%BF-3%E5%A4%A9%22%7D%2C%7B%22x%22%3A626.02313%2C%22y%22%3A263.93777%2C%22width%22%3A105.33526999999992%2C%22height%22%3A16.978729999999985%2C%22text%22%3A%22%E6%96%B9%E6%B3%95%E8%AE%BA%3A%E5%BF%AB%E9%80%9F%E5%A4%8D%E7%94%A8%22%7D%2C%7B%22x%22%3A820.0873%2C%22y%22%3A263.79358%2C%22width%22%3A105.27573999999993%2C%22height%22%3A15.909089999999992%2C%22text%22%3A%22%E6%96%B9%E6%B3%95%E8%AE%BA%3A%E4%BB%8E%E4%B8%80%E5%88%B0%E5%8D%81%22%7D%2C%7B%22x%22%3A237.8606%2C%22y%22%3A264.0977%2C%22width%22%3A105.72664999999998%2C%22height%22%3A16.397000000000048%2C%22text%22%3A%22%E6%96%B9%E6%B3%95%E8%AE%BA%3A%E9%87%8D%E6%96%B0%E5%AE%9E%E7%BA%BF%22%7D%2C%7B%22x%22%3A430.89584%2C%22y%22%3A264.31277%2C%22width%22%3A104.05156%2C%22height%22%3A16.069950000000006%2C%22text%22%3A%22%E6%96%B9%E6%B3%95%E8%AE%BA%3A%E8%90%BD%E5%9C%B0%E6%88%90%E5%9E%8B%22%7D%2C%7B%22x%22%3A42.953102%2C%22y%22%3A264.91174%2C%22width%22%3A104.66569799999999%2C%22height%22%3A15.866179999999986%2C%22text%22%3A%22%E6%96%B9%E6%B3%95%E8%AE%BA%3A%E5%87%A0%E4%B9%8E%E6%B2%A1%E6%9C%89%22%7D%2C%7B%22x%22%3A615.1593%2C%22y%22%3A298.838%2C%22width%22%3A128.33280000000002%2C%22height%22%3A17.574839999999995%2C%22text%22%3A%22%E4%BA%A4%E6%98%93%2B%E6%90%9C%E7%B4%A2%2B%E6%97%A0%E7%BA%BF%E5%B9%B3%E5%8F%B0%22%7D%2C%7B%22x%22%3A791.52783%2C%22y%22%3A298.64774%2C%22width%22%3A163.77002000000005%2C%22height%22%3A16.919579999999996%2C%22text%22%3A%22%E4%BA%A4%E6%98%93%2B%E6%90%9C%E7%B4%A0%2B%E6%97%A0%E7%BA%BF%E5%B9%B3%E5%8F%B0%2B%E9%A3%8E%E6%8E%A7%22%7D%2C%7B%22x%22%3A409.60806%2C%22y%22%3A299.38635%2C%22width%22%3A148.89890000000003%2C%22height%22%3A15.86345%2C%22text%22%3A%22%E4%BA%A4%E6%98%93%2B%E6%90%9C%E7%B4%A0%2B%E7%A4%BE%E5%8C%BA%2B%E5%B9%B8%E6%88%B7%E7%AB%AF%22%7D%2C%7B%22x%22%3A237.94644%2C%22y%22%3A299.39587%2C%22width%22%3A106.32153%2C%22height%22%3A17.619629999999972%2C%22text%22%3A%22%E8%8C%83%E5%9B%B4%3A%E4%BA%A4%E6%98%93%2B%E6%90%9C%E7%B4%A2%22%7D%2C%7B%22x%22%3A43.79562%2C%22y%22%3A300.01105%2C%22width%22%3A104.67614999999999%2C%22height%22%3A16.077819999999974%2C%22text%22%3A%22%E8%8C%83%E7%8E%8B%3A%E4%BA%A4%E6%98%93%2B%E6%91%B8%E7%B4%A0%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%2219.11%2020.11%2020.09%2020.03%2020.06%202020%E4%BA%94%E5%BD%A9%E7%9F%B3%202019%E5%B9%B4%E5%8F%8C11%202020%E4%BA%94%E5%91%A8%E5%B9%B4%202020%E5%B9%B4618%202020%E5%8F%8C11%20%E6%B7%B7%E9%83%A8%E7%8E%AF%E5%A2%83%20%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%20%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%20%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%20%E9%95%9C%E5%83%8F%E7%8E%AF%E5%A2%83%20%E7%94%A8%E6%88%B7%E5%9B%BD%E6%8B%9F%26%E7%9C%9F%E5%AE%9E%E6%95%B0%E6%8D%AE%20%E7%94%A8%E6%88%B7%E5%B2%B8%E6%8B%9F%26%E7%9C%9F%E5%AE%9E%E6%95%B0%E6%8D%AE%20%E7%94%9F%E4%BA%A7%E5%90%8C%E6%AD%A5%26%E6%AC%BE%E6%8D%AE%E6%B8%85%E6%B4%97%20%E7%94%A8%E6%88%B7%E8%99%90%E6%8B%9F%26%E7%9C%9F%E5%AE%9E%E6%95%B0%E6%8D%AE%20copy%E7%94%9F%E4%BA%A7%26%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%99%20%E5%87%86%E5%A4%87%E6%97%B6%E9%95%BF-24%E5%A4%A9%20%E5%87%86%E5%A4%87%E6%97%B6%E9%95%BF-34%E5%A4%A9%20%E5%87%86%E5%A4%87%E6%97%B6%E9%95%BF-15%E5%A4%A9%20%E5%87%86%E5%A4%87%E6%97%B6%E9%95%BF-15%E5%A4%A9%20%E5%87%86%E5%A4%87%E6%97%B6%E9%95%BF-3%E5%A4%A9%20%E6%96%B9%E6%B3%95%E8%AE%BA%3A%E5%BF%AB%E9%80%9F%E5%A4%8D%E7%94%A8%20%E6%96%B9%E6%B3%95%E8%AE%BA%3A%E4%BB%8E%E4%B8%80%E5%88%B0%E5%8D%81%20%E6%96%B9%E6%B3%95%E8%AE%BA%3A%E9%87%8D%E6%96%B0%E5%AE%9E%E7%BA%BF%20%E6%96%B9%E6%B3%95%E8%AE%BA%3A%E8%90%BD%E5%9C%B0%E6%88%90%E5%9E%8B%20%E6%96%B9%E6%B3%95%E8%AE%BA%3A%E5%87%A0%E4%B9%8E%E6%B2%A1%E6%9C%89%20%E4%BA%A4%E6%98%93%2B%E6%90%9C%E7%B4%A2%2B%E6%97%A0%E7%BA%BF%E5%B9%B3%E5%8F%B0%20%E4%BA%A4%E6%98%93%2B%E6%90%9C%E7%B4%A0%2B%E6%97%A0%E7%BA%BF%E5%B9%B3%E5%8F%B0%2B%E9%A3%8E%E6%8E%A7%20%E4%BA%A4%E6%98%93%2B%E6%90%9C%E7%B4%A0%2B%E7%A4%BE%E5%8C%BA%2B%E5%B9%B8%E6%88%B7%E7%AB%AF%20%E8%8C%83%E5%9B%B4%3A%E4%BA%A4%E6%98%93%2B%E6%90%9C%E7%B4%A2%20%E8%8C%83%E7%8E%8B%3A%E4%BA%A4%E6%98%93%2B%E6%91%B8%E7%B4%A0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A971%2C%22height%22%3A326%7D&quot;&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWgibRfIR9MBy3eGiasmo0gLSKkibK3Olczuf9xBhWAxTuFOq0Uh3l19hrfhPx0cl5a2dNFLZrY1XjkqQ/640?wx_fmt=png&quot; title=&quot;image.png&quot; data-height=&quot;326px&quot; data-ratio=&quot;0.3357363542739444&quot; data-type=&quot;png&quot; data-w=&quot;971&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;a55c7acfee18f24ac808437d3da8d8b5&quot;&gt;从19年双十一，到今年双十一及双十二，全链路压测在我司的演进，总体可以从如下几个阶段来介绍，这几个阶段分别有大事件发生，也正好推动了全链路压测的迭代演进。&lt;/p&gt;
&lt;h3 data-lake-id=&quot;aca795afb057267c195e3b5d0aa18bb0&quot;&gt;五彩石&lt;/h3&gt;
&lt;p data-lake-id=&quot;1445b9de69023b098c84ee602c943ab8&quot;&gt;&lt;strong&gt;时间&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p data-lake-id=&quot;cd36456b663a4f23365750cdc8ba0a2d&quot;&gt;2020年3月&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;5ae4ec813d2ef96e1bcf3ce93e36e49c&quot;&gt;&lt;strong&gt;环境准备&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p data-lake-id=&quot;7b911c395231ce08911899c7cae7058a&quot;&gt;混部环境（测试+预发+生产）：特殊的环境导致了19年双11沉淀的一些经验几乎无法复用，环境问题也是五彩石全链路压测过程中，最大的难点和挑战。&lt;/p&gt;
&lt;p data-lake-id=&quot;6c700add14d9449db57e4820b25e3898&quot;&gt;最终的解决方案是&lt;strong&gt;接入流量标框架fusion+生产部分服务mock+生产DB创建影子库表&lt;/strong&gt;的方式来解决了这个问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;6b95f6fa5be9aee72c0902b565591f87&quot;&gt;&lt;strong&gt;数据准备&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p data-lake-id=&quot;0da00189dc7f94e23b77b24c8110d8c1&quot;&gt;通过生产数据定时同步到影子库+数据清洗的方式，准备了千万量级的压测相关数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;1a97a1b11a17eb5ebf63ce4103fd0f71&quot;&gt;&lt;strong&gt;整体耗时&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p data-lake-id=&quot;1264eab6cf6851b30ab25727668306b5&quot;&gt;从前期链路梳理到框架接入、影子库表创建、可用性验证、以及压测优化完成，共耗时24个自然日。&lt;/p&gt;
&lt;p data-lake-id=&quot;1264eab6cf6851b30ab25727668306b5&quot;&gt;当然，由于当时整个环境是业务测试+产品验收+数据迁移+压测共用，实际耗时其实是很少的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;915d8b688aaa7e2a530b014da854bec8&quot;&gt;&lt;strong&gt;方法论&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p data-lake-id=&quot;2fcc0a8215face978efd29d2bb3ec51d&quot;&gt;19年双11沉淀的没法复用，业内也没有这种特殊环境下的压测方法论，对压测团队而言，是一次&lt;strong&gt;重新探索实践&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;b484d4c2f1ac23bf815101c4fc56fb5c&quot;&gt;&lt;strong&gt;覆盖范围&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p data-lake-id=&quot;43a940661bb9e1b862eb967d5edc53db&quot;&gt;由于五彩石项目主要是交易体系重构，当时全链路压测的覆盖范围也仅限于核心交易+搜索链路。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;212e3ccbaa73dcc8ad2c1916deead577&quot;&gt; &lt;/p&gt;
&lt;h3 data-lake-id=&quot;212e3ccbaa73dcc8ad2c1916deead577&quot;&gt;618大促&lt;/h3&gt;
&lt;p data-lake-id=&quot;0ed765d02f3e0edbab88db2a98240a01&quot;&gt;&lt;strong&gt;时间&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p data-lake-id=&quot;738bc8b94851f06d22660154f4ffb1c7&quot;&gt;2020年5月&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;3a0f2ad3ac278065b52c9cca25f1779f&quot;&gt;&lt;strong&gt;环境准备&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p data-lake-id=&quot;7bf580492c2bec26f0d8b20c7ad6850b&quot;&gt;从今年618开始，我们的全链路压测开始在生产环境开展。关于环境的前置准备，主要是表结构同步检查+ECS规格巡检以及其他比如SLB、CDN、带宽的资源的日常巡检。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;f68c55b714fc22f1e245c30aa7850fe7&quot;&gt;&lt;strong&gt;数据准备&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p data-lake-id=&quot;cd521b422556410ff350fb83b045f9a5&quot;&gt;数据准备主要分两个方面：&lt;/p&gt;
&lt;p data-lake-id=&quot;83b9a1abfd074ad312f3c3756f3bf3d7&quot;&gt;用户数据：专门准备了100W的虚拟用户数据，通过逻辑身份绑定和替换的方式，按序打通整体用户数据可用性。&lt;/p&gt;
&lt;p data-lake-id=&quot;7596cc65de96c87155651a3d66e8c59f&quot;&gt;业务测试数据：同步生产真实数据，针对敏感数据进行脱敏处理，然后业务数据绑定虚拟用户数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;15b66f451109dd332b267bbe54b4a561&quot;&gt;&lt;strong&gt;整体耗时&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p data-lake-id=&quot;beb04916f1f58e1f1d6e95f04cbc21a2&quot;&gt;618阶段相比于五彩石，环境相对来说没那么复杂，且五彩石本身有一定的适合我们自己的技术沉淀，因此整个压测全阶段的耗时，相比五彩石少了不少，耗时为15天。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;a4a78bf07a2f65ab1893679cfa3b4379&quot;&gt;&lt;strong&gt;方法论&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p data-lake-id=&quot;9b977d7f52860b3fa456918af9fb460d&quot;&gt;由于五彩石已有了一定的探索实践经验，在618全链路压测阶段，进行了补充完善。&lt;/p&gt;
&lt;p data-lake-id=&quot;ac6b0060a450f8edf8918a288099aac9&quot;&gt;&lt;strong&gt;20年618的全链路压测，可以说是我们全链路压测方法论从0到1落地的重要实践&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;dd9cc4cab1c189c32317f2fc663af6d6&quot;&gt;&lt;strong&gt;覆盖范围&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p data-lake-id=&quot;1e6612bc2fc40cb8af2bd46712e96486&quot;&gt;618相比于五彩石，压测的核心链路覆盖范围扩大了不少，主要包括交易+搜索+社区+客户端部分核心链路。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;f13db7e334a788c569930cfe650d3e82&quot;&gt; &lt;/p&gt;
&lt;h3 data-lake-id=&quot;3a63b3c9f4a614540019f5ffe4d54764&quot;&gt;五周年活动&lt;/h3&gt;
&lt;p data-lake-id=&quot;a13211e2cbae7d2911bb79df045fbf18&quot;&gt;&lt;strong&gt;时间&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p data-lake-id=&quot;0d49f00a3a62873591b9eee110292cad&quot;&gt;2020年9月&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;5acb13c49626f0ab9c23469af5a37af4&quot;&gt;&lt;strong&gt;环境准备&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p data-lake-id=&quot;a8e97c735d4fbfc31481462dbb5ec352&quot;&gt;生产环境：表结构同步检查+ECS规格巡检以及其他比如SLB、CDN、MQ、带宽等资源的日常巡检。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;141487cf062187a9826a682ad8fee1a6&quot;&gt;&lt;strong&gt;数据准备&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p data-lake-id=&quot;456e34def29d1a2e668e319ec3b0ae99&quot;&gt;数据准备策略基本和618保持一致，虚拟用户数据保持不变，由于版本迭代的原因，只变更了部分业务测试数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;490a14730331c053cc80ef4c1a25273a&quot;&gt;&lt;strong&gt;整体耗时&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p data-lake-id=&quot;944c238dd3f779644d91191f86517c3c&quot;&gt;从需求提出到开始压测，耗时仅用三天！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;053647a8117906320709ae3c6887629e&quot;&gt;&lt;strong&gt;方法论&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p data-lake-id=&quot;05ba923325dc19b2cd8e9c6cc553bee6&quot;&gt;基本参照了618沉淀的技术文档以及一些实践经验，做到了&lt;strong&gt;快速复用&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;e4d5bc44fd76117018de846c42ea24dd&quot;&gt;&lt;strong&gt;覆盖范围&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p data-lake-id=&quot;0bab364a81ea30ff4f3688ad01bab0ac&quot;&gt;由于五周年活动主要是一些营销相关的玩法，本次覆盖范围为交易+搜索+无线平台部分核心链路。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;2fcc394774d96d490fae5eaee16c80c3&quot;&gt; &lt;/p&gt;
&lt;h3 data-lake-id=&quot;58a6f81ed5fe984884d48675bcef35f4&quot;&gt;双十一大促&lt;/h3&gt;
&lt;p data-lake-id=&quot;f5b37ceac0e751ac0761ec19c8e9287c&quot;&gt;&lt;strong&gt;时间&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p data-lake-id=&quot;34ed55ea5bd8540c122e9135bd62164c&quot;&gt;2020年10月&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;991391668bf1a7599e6516b877fc69c1&quot;&gt;&lt;strong&gt;环境准备&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p data-lake-id=&quot;e19da26f6fad6ce866e840593a4646dc&quot;&gt;到今年双十一，生产环境已经成了全链路压测的标配环境。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;6f2b4119beb212dafca86b62a0030813&quot;&gt;&lt;strong&gt;数据准备&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p data-lake-id=&quot;e13084d527c87faccf8ad5e5c6f33af4&quot;&gt;用户数据：由于业务快速增长，考虑到数据分布和业务逻辑缓存的问题，这次虚拟用户从100W增加到了700W；&lt;/p&gt;
&lt;p data-lake-id=&quot;4ecc14d6b4e1f4305bd834441aad64e5&quot;&gt;业务测试数据：重新将生产环境的数据同步到影子库，针对性进行脱敏处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;9a3f87030c99392d03f81a5dced968b4&quot;&gt;&lt;strong&gt;整体耗时&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p data-lake-id=&quot;9d4ca83f79c32ee58b6d5ff85b2ff6b4&quot;&gt;由于版本迭代和业务逻辑的不断变化，在准备阶段，&lt;strong&gt;重新梳理了核心链路以及强弱依赖，对流量模型进行了重构。迭代优化了主动/紧急预案、新增了缓存预热+客户端限流浮层。&lt;/strong&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;9d4ca83f79c32ee58b6d5ff85b2ff6b4&quot;&gt;&lt;strong&gt;容量巡检方面，新增了ToB的慢SQL梳理、MQ堆积告警等事项&lt;/strong&gt;。且在今年双十一，我们接入了Zeus压测平台，对整个压测过程进行了规范提效。&lt;/p&gt;
&lt;p data-lake-id=&quot;49fb72d829cb9e7909f2ed06638bef6b&quot;&gt;整个准备阶段耗时15天，通过6次通宵压测，完美的达到了预期指标并留有一定冗余空间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;00455d60c7e7c407041a7649158726bf&quot;&gt;&lt;strong&gt;方法论&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p data-lake-id=&quot;e31d7b615a9622f3dd8ed273d3546465&quot;&gt;&lt;strong&gt;如果说19年双十一是从零开始，五彩石是重新探索触发，618是从零到一落地，五周年是快速复用，那么20年双十一的全链路压测，可以用从一到十来概括。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;38553b61709dc7e99738de94d0d4c62c&quot;&gt;&lt;strong&gt;覆盖范围&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p data-lake-id=&quot;c56193a4d83c2c63ef84f6225a9dba84&quot;&gt;相比于之前，本次双十一打通了风控链路。风控研发团队通过接入fusion框架+dubbo改造，让我们整体的压测流量能一直透传到风控服务，这样对整体的稳定性来说，提升是潜移默化并且巨大的。&lt;/p&gt;
&lt;p data-lake-id=&quot;b0b5b799f202887615c348bb6a4c02a7&quot;&gt;覆盖范围：交易+搜索+无线平台（社区+客户端+增长）+风控。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p data-lake-id=&quot;34732df4dbd0f9554151b91366ec3acc&quot;&gt; &lt;/p&gt;
&lt;h3 data-lake-id=&quot;c1061b6b580347b7277199b46adc6ac6&quot;&gt;大促方法论&lt;/h3&gt;
&lt;p data-lake-id=&quot;198ec500e268f8fd51c2349373afa416&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F403166%2F1606117191499-0fe32230-ecf9-40b5-9aba-2059162d52f2.png%22%2C%22originWidth%22%3A792%2C%22originHeight%22%3A525%2C%22name%22%3A%22image.png%22%2C%22size%22%3A56936%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A624.1797%2C%22y%22%3A106.97387%2C%22width%22%3A85.77982999999995%2C%22height%22%3A22.69872000000001%2C%22text%22%3A%22%E4%BB%8E%E4%B8%80%E5%88%B0%E5%8D%81%22%7D%2C%7B%22x%22%3A475.87604%2C%22y%22%3A159.71695%2C%22width%22%3A83.61396000000002%2C%22height%22%3A21.068450000000013%2C%22text%22%3A%22%E6%88%91%E5%9C%A8%E5%93%AA%E9%87%8C%22%7D%2C%7B%22x%22%3A647.54724%2C%22y%22%3A165.33444%2C%22width%22%3A39.38486%2C%22height%22%3A20.426439999999985%2C%22text%22%3A%22%E6%BC%94%E8%BF%9B%22%7D%2C%7B%22x%22%3A328.43787%2C%22y%22%3A209.77731%2C%22width%22%3A89.99123000000003%2C%22height%22%3A21.986619999999988%2C%22text%22%3A%22%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%22%7D%2C%7B%22x%22%3A499.4819%2C%22y%22%3A215.7922%2C%22width%22%3A40.28530000000001%2C%22height%22%3A22.23728%2C%22text%22%3A%22%E6%80%9D%E8%80%83%22%7D%2C%7B%22x%22%3A180.91115%2C%22y%22%3A261.2805%2C%22width%22%3A82.83105000000003%2C%22height%22%3A21.15382999999997%2C%22text%22%3A%22%E9%87%8D%E6%96%B0%E5%87%BA%E5%8F%91%22%7D%2C%7B%22x%22%3A353.36777%2C%22y%22%3A268.07144%2C%22width%22%3A38.459900000000005%2C%22height%22%3A18.525179999999978%2C%22text%22%3A%22%E5%AE%9E%E8%B7%B5%22%7D%2C%7B%22x%22%3A34.53712%2C%22y%22%3A312.14276%2C%22width%22%3A82.30557999999999%2C%22height%22%3A21.507169999999974%2C%22text%22%3A%22%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%22%7D%2C%7B%22x%22%3A205.97392%2C%22y%22%3A316.75726%2C%22width%22%3A39.33240000000001%2C%22height%22%3A20.96216000000004%2C%22text%22%3A%22%E5%B0%9D%E8%AF%95%22%7D%2C%7B%22x%22%3A58.681812%2C%22y%22%3A369.29584%2C%22width%22%3A37.387108000000005%2C%22height%22%3A20.436399999999992%2C%22text%22%3A%22%E5%AD%A6%E4%B9%A0%22%7D%2C%7B%22x%22%3A646.24426%2C%22y%22%3A488.8732%2C%22width%22%3A89.98133999999993%2C%22height%22%3A27.826599999999985%2C%22text%22%3A%2220%E5%8F%8C11%22%7D%2C%7B%22x%22%3A192.2754%2C%22y%22%3A489.96826%2C%22width%22%3A112.10450000000003%2C%22height%22%3A27.871340000000032%2C%22text%22%3A%2220%E4%BA%94%E5%BD%A9%E7%9F%B3%22%7D%2C%7B%22x%22%3A488.42456%2C%22y%22%3A490.06232%2C%22width%22%3A109.68378000000001%2C%22height%22%3A26.34857999999997%2C%22text%22%3A%2220%E4%BA%94%E5%91%A8%E5%B9%B4%22%7D%2C%7B%22x%22%3A56.36484%2C%22y%22%3A490.30548%2C%22width%22%3A88.61136%2C%22height%22%3A27.174620000000004%2C%22text%22%3A%2219%E5%8F%8C11%22%7D%2C%7B%22x%22%3A349.4535%2C%22y%22%3A490.8283%2C%22width%22%3A95.33046999999999%2C%22height%22%3A25.995739999999955%2C%22text%22%3A%2220-618%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%BB%8E%E4%B8%80%E5%88%B0%E5%8D%81%20%E6%88%91%E5%9C%A8%E5%93%AA%E9%87%8C%20%E6%BC%94%E8%BF%9B%20%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%20%E6%80%9D%E8%80%83%20%E9%87%8D%E6%96%B0%E5%87%BA%E5%8F%91%20%E5%AE%9E%E8%B7%B5%20%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%20%E5%B0%9D%E8%AF%95%20%E5%AD%A6%E4%B9%A0%2020%E5%8F%8C11%2020%E4%BA%94%E5%BD%A9%E7%9F%B3%2020%E4%BA%94%E5%91%A8%E5%B9%B4%2019%E5%8F%8C11%2020-618%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A792%2C%22height%22%3A525%7D&quot;&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWgibRfIR9MBy3eGiasmo0gLSKsfryDBDTPLFVHo7smFlaOxcmEjvYlAg0vibxsp4iarb1FcOUIT54OBuw/640?wx_fmt=png&quot; title=&quot;image.png&quot; data-height=&quot;525px&quot; data-ratio=&quot;0.6628787878787878&quot; data-type=&quot;png&quot; data-w=&quot;792&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-lake-id=&quot;9b914c9e9628b54cd123f912b64b0e36&quot;&gt;通过这几次大的技术项目，全链路压测，从零开始探索实践，到从零到一的能快速复用的方法论，以及从一到十的完善优化，我们也渐渐找到了适用于我们得物的全链路压测方法论。&lt;/p&gt;
&lt;p data-lake-id=&quot;29a193076e0896d8e5e2190126d684b1&quot;&gt; &lt;/p&gt;
&lt;h3 data-lake-id=&quot;78902d96be2c320fdf11b04c49ce7dfb&quot;&gt;性能指标提升&lt;/h3&gt;
&lt;p data-lake-id=&quot;2c4dd0f57326f8c2f756c28d42fc65ff&quot;&gt;全链路压测在我司的不断演进，对应的是我们核心链路的性能不断突破新的领域。相信明年的618和双十一，我们的服务稳定性和性能表现，会达到一个更高的高度，不断超越自己。&lt;/p&gt;
&lt;p data-lake-id=&quot;3c6973de8ac4b1c1f6d223133c504b43&quot;&gt; &lt;/p&gt;
&lt;h2 data-lake-id=&quot;1dc5282a48a104a56890969c8a9f06c5&quot;&gt;未来&lt;/h2&gt;
&lt;p data-lake-id=&quot;f2822cce6f9ffcffd0d30cfabdfe3261&quot;&gt;关于未来的工作规划，实际上还有很多方向等待我们去探索实践。比如：&lt;/p&gt;
&lt;p data-lake-id=&quot;326c14065dac40fcf546d969674f9e2c&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F403166%2F1606117150019-83a3612a-c614-4a64-8bca-cc785989b12b.png%22%2C%22originWidth%22%3A774%2C%22originHeight%22%3A364%2C%22name%22%3A%22image.png%22%2C%22size%22%3A41962%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A45.89094%2C%22y%22%3A12.94367%2C%22width%22%3A119.10569000000001%2C%22height%22%3A32.599000000000004%2C%22text%22%3A%22%E6%8A%80%E6%9C%AF%E4%BC%98%E5%8C%96%22%7D%2C%7B%22x%22%3A234.35104%2C%22y%22%3A14.20263%2C%22width%22%3A120.12806%2C%22height%22%3A32.92269%2C%22text%22%3A%22%E5%9C%BA%E6%99%AF%E8%A6%86%E7%9B%96%22%7D%2C%7B%22x%22%3A611.38586%2C%22y%22%3A13.970817%2C%22width%22%3A120.61694%2C%22height%22%3A34.293865999999994%2C%22text%22%3A%22%E6%B5%81%E7%A8%8B%E6%8F%90%E6%95%88%22%7D%2C%7B%22x%22%3A423.9013%2C%22y%22%3A15.520638%2C%22width%22%3A116.69916%2C%22height%22%3A29.759822%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E9%A2%84%E5%9F%8B%22%7D%2C%7B%22x%22%3A638.56024%2C%22y%22%3A98.76243%2C%22width%22%3A62.66545999999994%2C%22height%22%3A21.256740000000008%2C%22text%22%3A%22%E6%A0%87%E5%87%86%E5%8C%96%22%7D%2C%7B%22x%22%3A271.01254%2C%22y%22%3A98.81618%2C%22width%22%3A45.12556000000001%2C%22height%22%3A22.177059999999997%2C%22text%22%3A%22%E5%B9%BF%E5%BA%A6%22%7D%2C%7B%22x%22%3A442.02972%2C%22y%22%3A99.07054%2C%22width%22%3A80.10458000000006%2C%22height%22%3A21.191225000000003%2C%22text%22%3A%22%E8%87%AA%E5%8A%A8%E9%A2%84%E5%9F%8B%22%7D%2C%7B%22x%22%3A55.100616%2C%22y%22%3A100.14669%2C%22width%22%3A101.33889400000001%2C%22height%22%3A21.08055999999999%2C%22text%22%3A%22%E5%A4%9A%E5%8D%8F%E8%AE%AE%E6%94%AF%E6%8C%81%22%7D%2C%7B%22x%22%3A86.23993%2C%22y%22%3A189.13866%2C%22width%22%3A40.58288%2C%22height%22%3A19.11638000000002%2C%22text%22%3A%22%E6%B5%81%E9%87%8F%22%7D%2C%7B%22x%22%3A639.5713%2C%22y%22%3A199.09412%2C%22width%22%3A61.81316000000004%2C%22height%22%3A21.37906000000001%2C%22text%22%3A%22%E8%87%AA%E5%8A%A8%E5%8C%96%22%7D%2C%7B%22x%22%3A270.80753%2C%22y%22%3A199.1479%2C%22width%22%3A45.45097000000004%2C%22height%22%3A21.094970000000018%2C%22text%22%3A%22%E6%B7%B1%E5%BA%A6%22%7D%2C%7B%22x%22%3A441.23767%2C%22y%22%3A199.2819%2C%22width%22%3A82.44103000000007%2C%22height%22%3A21.228229999999996%2C%22text%22%3A%22%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD%22%7D%2C%7B%22x%22%3A64.99448%2C%22y%22%3A213.23753%2C%22width%22%3A83.24873000000001%2C%22height%22%3A20.302840000000003%2C%22text%22%3A%22%E5%BD%95%E5%88%B6%E5%9B%9E%E6%94%BE%22%7D%2C%7B%22x%22%3A56.879826%2C%22y%22%3A296.0123%2C%22width%22%3A99.81509399999999%2C%22height%22%3A21.810640000000035%2C%22text%22%3A%22%E5%85%A8%E9%93%BE%E8%B7%AF%E5%8E%8B%E6%B5%8B%22%7D%2C%7B%22x%22%3A439.86044%2C%22y%22%3A307.74078%2C%22width%22%3A82.87385999999998%2C%22height%22%3A21.356820000000027%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E6%9E%84%E9%80%A0%22%7D%2C%7B%22x%22%3A637.87384%2C%22y%22%3A308.0837%2C%22width%22%3A63.76656000000003%2C%22height%22%3A21.344679999999983%2C%22text%22%3A%22%E5%B8%B8%E6%80%81%E5%8C%96%22%7D%2C%7B%22x%22%3A253.72816%2C%22y%22%3A308.3033%2C%22width%22%3A81.85316999999998%2C%22height%22%3A21.016549999999995%2C%22text%22%3A%22%E7%BB%84%E5%90%88%E5%9C%BA%E6%99%AF%22%7D%2C%7B%22x%22%3A85.7946%2C%22y%22%3A322.8697%2C%22width%22%3A39.400673999999995%2C%22height%22%3A17.72276999999997%2C%22text%22%3A%22SOP%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%8A%80%E6%9C%AF%E4%BC%98%E5%8C%96%20%E5%9C%BA%E6%99%AF%E8%A6%86%E7%9B%96%20%E6%B5%81%E7%A8%8B%E6%8F%90%E6%95%88%20%E6%95%B0%E6%8D%AE%E9%A2%84%E5%9F%8B%20%E6%A0%87%E5%87%86%E5%8C%96%20%E5%B9%BF%E5%BA%A6%20%E8%87%AA%E5%8A%A8%E9%A2%84%E5%9F%8B%20%E5%A4%9A%E5%8D%8F%E8%AE%AE%E6%94%AF%E6%8C%81%20%E6%B5%81%E9%87%8F%20%E8%87%AA%E5%8A%A8%E5%8C%96%20%E6%B7%B1%E5%BA%A6%20%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD%20%E5%BD%95%E5%88%B6%E5%9B%9E%E6%94%BE%20%E5%85%A8%E9%93%BE%E8%B7%AF%E5%8E%8B%E6%B5%8B%20%E6%95%B0%E6%8D%AE%E6%9E%84%E9%80%A0%20%E5%B8%B8%E6%80%81%E5%8C%96%20%E7%BB%84%E5%90%88%E5%9C%BA%E6%99%AF%20SOP%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A774%2C%22height%22%3A364%7D&quot;&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWgibRfIR9MBy3eGiasmo0gLSKNZysRvcicYGX3qOlibDRVZBqmYH4Ie5X2v52CW4kgEcX6A56icNXqK9Cw/640?wx_fmt=png&quot; title=&quot;image.png&quot; data-height=&quot;364px&quot; data-ratio=&quot;0.4702842377260982&quot; data-type=&quot;png&quot; data-w=&quot;774&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 data-lake-id=&quot;9e2f86279fce8f4e05db3c334295e0dc&quot;&gt;技术优化&lt;/h3&gt;
&lt;p data-lake-id=&quot;afccb1448efd7b957fbf26b64b2f3032&quot;&gt;在技术优化规划方面，我们主要集中在针对Dubbo、gRPC等协议的压测组件扩展支持，流量录制回放，全链路压测SOP等方面。其中全链路压测SOP、多协议压测组件支持，已经在路上。&lt;/p&gt;
&lt;h3 data-lake-id=&quot;c4dc66bb9c98f28e835d75b3891d3e56&quot;&gt;场景覆盖&lt;/h3&gt;
&lt;p data-lake-id=&quot;d10a419b6dc2f93965797d304235f63d&quot;&gt;场景覆盖方面，考虑到后续业务场景的越发复杂，以及大促营销玩法的不断变化，我们会不断拓展核心链路的覆盖范围，探索深度组合场景在全链路压测中的实践，尽可能贴近真实的业务场景。&lt;/p&gt;
&lt;h3 data-lake-id=&quot;ae69a7c3e0ae162975f3506f0846eacf&quot;&gt;数据预埋&lt;/h3&gt;
&lt;p data-lake-id=&quot;d5a9c0c86bb9c90a033099439f93251d&quot;&gt;目前的数据预埋方式相对来说效率还是比较低的，后续规划中，会尝试自动化数据预埋的方案接入，以及缓存预热的方案梳理以及在针对深度组合场景的数据构造方面，有新的探索和实践。&lt;/p&gt;
&lt;h3 data-lake-id=&quot;81f6f5f116d89b40da5b7a73e1e2a28c&quot;&gt;流程提效&lt;/h3&gt;
&lt;p data-lake-id=&quot;724cdfa94e700a8b1f75b9812e1a0e6c&quot;&gt;通过不断实践和团队的大量演练，后续的大促保障和生产全链路压测，我们希望通过SOP的方式，使其标准化，从经验复用过度到有法可循。&lt;/p&gt;
&lt;p data-lake-id=&quot;25ce43306058b088dc1591e482665b9d&quot;&gt;自动化和常态化方面，更多的是技术上的不断创新和落地实践，相信在不久的将来，我们能将这些一一落地，对生产稳定性保障，大促全链路压测，有更好的支持。&lt;/p&gt;
&lt;p data-lake-id=&quot;25ce43306058b088dc1591e482665b9d&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Mon, 28 Dec 2020 16:36:00 +0000</pubDate>
<dc:creator>老_张</dc:creator>
<og:description>​前言 笔者所在的公司是一家快速发展的互联网电商公司，在保证业务快速稳定发展的同时，对于系统稳定性、可用性和扩展性的要求，也在不断提高。 特别是互联网电商企业每年的两次大考:618&amp;amp;双11，更</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/imyalost/p/14204484.html</dc:identifier>
</item>
<item>
<title>Java学习_注解 - 桐君过客</title>
<link>http://www.cnblogs.com/fjnuczq/p/14200945.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fjnuczq/p/14200945.html</guid>
<description>&lt;ul&gt;&lt;li&gt;使用注解
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;注解是放在Java源码的类、方法、字段、参数前的一种特殊“注释”。　
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; this is a component:&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; @Resource(&quot;hello&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Hello {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    @Inject
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    @PostConstruct
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; hello(@Param String name) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        System.out.println(name);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;Hello&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注释会被编译器直接忽略，注解则可以被编译器打包进入class文件，因此，注解是一种用作标注的“元数据”。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;从JVM的角度看，注解本身对代码逻辑没有任何影响，如何使用注解完全由工具决定。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Java的注解可以分为三类：&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;定义一个注解时，还可以定义配置参数。配置参数可以包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;所有基本类型；&lt;/li&gt;
&lt;li&gt;String；&lt;/li&gt;
&lt;li&gt;枚举类型；&lt;/li&gt;
&lt;li&gt;基本类型、String、Class以及枚举的数组。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;因为配置参数必须是常量，所以，上述限制保证了注解在定义时就已经确定了每个参数的值。&lt;/li&gt;
&lt;li readability=&quot;-0.5&quot;&gt;注解的配置参数可以有默认值，缺少某个配置参数时将使用默认值。此外，大部分注解会有一个名为&lt;code&gt;value&lt;/code&gt;的配置参数，对此参数赋值，可以只写常量，相当于省略了value参数。如果只写注解，相当于全部使用默认值。
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Hello {
    @Check(min&lt;/span&gt;=0, max=100, value=55&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;

    @Check(value&lt;/span&gt;=99&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; p;

    @Check(&lt;/span&gt;99) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; @Check(value=99)&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; x;

    @Check
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; y;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;定义注解
&lt;ul readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;1.5&quot;&gt;Java语言使用&lt;code&gt;@interface&lt;/code&gt;语法来定义注解（&lt;code&gt;Annotation&lt;/code&gt;），它的格式为：
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Report {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; type() &lt;span&gt;default&lt;/span&gt; 0&lt;span&gt;;
    String level() &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &quot;info&quot;&lt;span&gt;;
    String value() &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &quot;&quot;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注解的参数类似无参数方法，可以用&lt;code&gt;default&lt;/code&gt;设定一个默认值（强烈推荐）。最常用的参数应当命名为&lt;code&gt;value&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;有一些注解可以修饰其他注解，这些注解就称为&lt;span&gt;元注解&lt;/span&gt;（meta annotation）。Java标准库已经定义了一些元注解，我们只需要使用元注解，通常不需要自己去编写元注解。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;最常用的元注解是&lt;span&gt;&lt;code&gt;@Target&lt;/code&gt;&lt;/span&gt;。使用&lt;code&gt;@Target&lt;/code&gt;可以定义&lt;code&gt;Annotation&lt;/code&gt;能够被应用于源码的哪些位置。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;类或接口：&lt;code&gt;ElementType.TYPE&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;字段：&lt;code&gt;ElementType.FIELD&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;方法：&lt;code&gt;ElementType.METHOD&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;构造方法：&lt;code&gt;ElementType.CONSTRUCTOR&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;方法参数：&lt;code&gt;ElementType.PARAMETER&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;例如，定义注解&lt;code&gt;@Report&lt;/code&gt;可用在方法上，我们必须添加一个&lt;code&gt;@Target(ElementType.METHOD)&lt;/code&gt;。定义注解&lt;code&gt;@Report&lt;/code&gt;可用在方法或字段上，可以把&lt;code&gt;@Target&lt;/code&gt;注解参数变为数组&lt;code&gt;{ ElementType.METHOD, ElementType.FIELD }&lt;/code&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Target(ElementType.METHOD)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Report {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; type() &lt;span&gt;default&lt;/span&gt; 0&lt;span&gt;;
    String level() &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &quot;info&quot;&lt;span&gt;;
    String value() &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &quot;&quot;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Target({
    ElementType.METHOD,
    ElementType.FIELD
})
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Report {
    ...
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实际上&lt;code&gt;@Target&lt;/code&gt;定义的&lt;code&gt;value&lt;/code&gt;是&lt;code&gt;ElementType[]&lt;/code&gt;数组，只有一个元素时，可以省略数组的写法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;另一个重要的元注解&lt;span&gt;&lt;code&gt;@Retention&lt;/code&gt;&lt;/span&gt;定义了&lt;code&gt;Annotation&lt;/code&gt;的生命周期。
&lt;ul&gt;&lt;li&gt;仅编译期：&lt;code&gt;RetentionPolicy.SOURCE&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;仅class文件：&lt;code&gt;RetentionPolicy.CLASS&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;运行期：&lt;code&gt;RetentionPolicy.RUNTIME&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;                    如果&lt;code&gt;@Retention&lt;/code&gt;不存在，则该&lt;code&gt;Annotation&lt;/code&gt;默认为&lt;code&gt;CLASS&lt;/code&gt;。因为通常我们自定义的&lt;code&gt;Annotation&lt;/code&gt;都是&lt;code&gt;RUNTIME&lt;/code&gt;，所以，务必要加上&lt;code&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/code&gt;这个元注解。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;处理注解&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　　　  使用反射API读取Annotation：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Class.getAnnotation(Class)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Field.getAnnotation(Class)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Method.getAnnotation(Class)&lt;/code&gt;&lt;/li&gt;
&lt;li readability=&quot;-1.5&quot;&gt;&lt;code&gt;&lt;code&gt;Constructor.getAnnotation(Class)&lt;/code&gt;&lt;/code&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取Person定义的@Report注解:&lt;/span&gt;
Report report = Person.&lt;span&gt;class&lt;/span&gt;.getAnnotation(Report.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; type =&lt;span&gt; report.type();
String level &lt;/span&gt;= report.level();
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1.5&quot;&gt;使用反射API读取&lt;code&gt;Annotation&lt;/code&gt;有两种方法。方法一是先判断&lt;code&gt;Annotation&lt;/code&gt;是否存在，如果存在，就直接读取。　
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Class cls = Person.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cls.isAnnotationPresent(Report.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)) {
    Report report &lt;/span&gt;= cls.getAnnotation(Report.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
    ...
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.5&quot;&gt;
&lt;p&gt;第二种方法是直接读取&lt;code&gt;Annotation&lt;/code&gt;，如果&lt;code&gt;Annotation&lt;/code&gt;不存在，将返回&lt;code&gt;null。&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Class cls = Person.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;;
Report report &lt;/span&gt;= cls.getAnnotation(Report.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (report != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
   ...
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;读取&lt;span&gt;方法&lt;/span&gt;、字段和构造方法的&lt;code&gt;Annotation&lt;/code&gt;和Class类似。但要读取&lt;span&gt;方法参数&lt;/span&gt;的&lt;code&gt;Annotation&lt;/code&gt;就比较麻烦一点，因为方法参数本身可以看成一个数组，而每个参数又可以定义多个注解，所以，一次获取方法参数的所有注解就必须用一个二维数组来表示。例如，对于以下方法定义的注解。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; hello(@NotNull @Range(max=5&lt;span&gt;) String name, @NotNull String prefix) {
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要读取方法参数的注解，我们先用反射获取&lt;code&gt;Method&lt;/code&gt;实例，然后读取方法参数的所有注解。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取Method实例:&lt;/span&gt;
Method m =&lt;span&gt; ...
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取所有参数的Annotation:&lt;/span&gt;
Annotation[][] annos =&lt;span&gt; m.getParameterAnnotations();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一个参数（索引为0）的所有Annotation:&lt;/span&gt;
Annotation[] annosOfName = annos[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Annotation anno : annosOfName) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (anno &lt;span&gt;instanceof&lt;/span&gt; Range) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; @Range注解&lt;/span&gt;
        Range r =&lt;span&gt; (Range) anno;
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (anno &lt;span&gt;instanceof&lt;/span&gt; NotNull) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; @NotNull注解&lt;/span&gt;
        NotNull n =&lt;span&gt; (NotNull) anno;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;使用注解&lt;/h3&gt;
&lt;ul readability=&quot;5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;注解如何使用，完全由程序自己决定。例如，JUnit是一个测试框架，它会自动运行所有标记为&lt;code&gt;@Test&lt;/code&gt;的方法。　&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;16.5&quot;&gt;
&lt;p&gt;来看一个&lt;code&gt;@Range&lt;/code&gt;注解，我们希望用它来定义一个&lt;code&gt;String&lt;/code&gt;字段的规则：字段长度满足&lt;code&gt;@Range&lt;/code&gt;的参数定义。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Range {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; min() &lt;span&gt;default&lt;/span&gt; 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; max() &lt;span&gt;default&lt;/span&gt; 255&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在某个JavaBean中，我们可以使用该注解：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {
    @Range(min&lt;/span&gt;=1, max=20&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String name;

    @Range(max&lt;/span&gt;=10&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String city;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是，定义了注解，本身对程序逻辑没有任何影响。我们必须自己编写代码来使用注解。这里，我们编写一个&lt;code&gt;Person&lt;/code&gt;实例的检查方法，它可以检查&lt;code&gt;Person&lt;/code&gt;实例的&lt;code&gt;String&lt;/code&gt;字段长度是否满足&lt;code&gt;@Range&lt;/code&gt;的定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; check(Person person) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IllegalArgumentException, ReflectiveOperationException {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历所有Field:&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Field field : person.getClass().getFields()) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取Field定义的@Range:&lt;/span&gt;
        Range range = field.getAnnotation(Range.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果@Range存在:&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (range != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取Field的值:&lt;/span&gt;
            Object value =&lt;span&gt; field.get(person);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果值是String:&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; String) {
                String s &lt;/span&gt;=&lt;span&gt; (String) value;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断值是否满足@Range的min/max:&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (s.length() &amp;lt; range.min() || s.length() &amp;gt;&lt;span&gt; range.max()) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Invalid field: &quot; +&lt;span&gt; field.getName());
                }
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样一来，我们通过&lt;code&gt;@Range&lt;/code&gt;注解，配合&lt;code&gt;check()&lt;/code&gt;方法，就可以完成&lt;code&gt;Person&lt;/code&gt;实例的检查。注意检查逻辑完全是我们自己编写的，JVM不会自动给注解添加任何额外的逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Mon, 28 Dec 2020 16:09:00 +0000</pubDate>
<dc:creator>桐君过客</dc:creator>
<og:description>使用注解 注解是放在Java源码的类、方法、字段、参数前的一种特殊“注释”。 1 // this is a component: 2 @Resource(&amp;quot;hello&amp;quot;) 3 pu</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/fjnuczq/p/14200945.html</dc:identifier>
</item>
<item>
<title>CSS系列 (04)：盒模型详解 - 柏成</title>
<link>http://www.cnblogs.com/burc/p/14204375.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/burc/p/14204375.html</guid>
<description>&lt;div id=&quot;cnblogs_post_description&quot; readability=&quot;34&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2180164/202012/2180164-20201212143915330-657262008.png&quot; class=&quot;desc_img&quot;/&gt; BFC 全称为块格式化上下文 (Block Formatting Context) 。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用 ...&lt;/div&gt;&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;78.431339977852&quot;&gt;

&lt;p&gt;&lt;strong&gt;CSS盒模型分成W3C标准盒模型和IE模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;盒子模型布局稳定性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们根据稳定性来分，建议如下：&lt;/p&gt;
&lt;p&gt;按照 优先使用宽度，其次使用内边距，再次外边距。 即：&lt;code&gt;width &amp;gt; padding &amp;gt; margin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;p&gt;（1）&lt;code&gt;margin&lt;/code&gt; 会有外边距合并&lt;br/&gt;（2）&lt;code&gt;padding&lt;/code&gt; 会影响盒子大小，需要进行加减计算（麻烦） 其次使用&lt;br/&gt;（3）&lt;code&gt;width&lt;/code&gt; 没有问题我们经常使用宽度剩余法来做&lt;/p&gt;

&lt;p&gt;当&lt;code&gt;margin&lt;/code&gt;和&lt;code&gt;padding&lt;/code&gt;的值设置为百分比时，是&lt;strong&gt;相对于最近的块级或内联块父元素&lt;code&gt;width&lt;/code&gt;（非总宽度）&lt;/strong&gt;的相应百分比的值。&lt;/p&gt;
&lt;p&gt;即使是&lt;code&gt;margin-top&lt;/code&gt;、&lt;code&gt;margin-bottom&lt;/code&gt;、&lt;code&gt;padding-top&lt;/code&gt;、&lt;code&gt;padding-bottom&lt;/code&gt;，设置为百分比时也是以最近块级父元素的&lt;code&gt;width&lt;/code&gt;（非总宽度）为基准，而非&lt;code&gt;height&lt;/code&gt;。&lt;/p&gt;

&lt;ul readability=&quot;4&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;相邻块元素垂直外边距的合并&lt;/p&gt;
&lt;p&gt;当上下相邻的两个块元素相遇时，如果上面的元素有下外边距&lt;code&gt;margin-bottom&lt;/code&gt;，下面的元素有上外边距&lt;code&gt;margin-top&lt;/code&gt;，则他们之间的垂直间距不是&lt;code&gt;margin-bottom&lt;/code&gt;与&lt;code&gt;margin-top&lt;/code&gt;之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;将其放在不同的 BFC 父容器中&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;
    &amp;lt;div class=&quot;child&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&quot;container&quot;&amp;gt;
    &amp;lt;div class=&quot;child&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

.container {
    overflow: hidden;
}
.child {
    width: 100px;
    height: 100px;
    background: #f0;
    margin: 100px;
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;嵌套块元素垂直外边距的合并&lt;/p&gt;
&lt;p&gt;对于两个嵌套关系的块元素，必须是&lt;code&gt;block&lt;/code&gt;元素。如果父元素没有上内边距&lt;code&gt;padding&lt;/code&gt;、没有上边框&lt;code&gt;border&lt;/code&gt;、没有内容，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距取其较大者。即使父元素的上外边距为0，也会发生合并。&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;给父元素加 &lt;code&gt;overflow：hidden&lt;/code&gt;，相当于给父元素添加了一个BFC&lt;/li&gt;
&lt;li&gt;给父元素加上内边距 或 上边框&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;BFC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;BFC 全称为块格式化上下文 (Block Formatting Context) 。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用&lt;/p&gt;
&lt;p&gt;BFC触发条件：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;overflow&lt;/code&gt;：除 &lt;code&gt;visible&lt;/code&gt; 以外的值 (&lt;code&gt;hidden&lt;/code&gt;、&lt;code&gt;auto&lt;/code&gt;、&lt;code&gt;scroll&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;：除 &lt;code&gt;none&lt;/code&gt; 以外的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display&lt;/code&gt;： &lt;code&gt;inline-block&lt;/code&gt;、&lt;code&gt;flex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt;：&lt;code&gt;absolute&lt;/code&gt;、&lt;code&gt;fixed&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;BFC作用：&lt;/p&gt;
&lt;ol readability=&quot;5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;BFC解决&lt;code&gt;margin&lt;/code&gt;塌陷问题&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;BFC解决浮动元素引起父元素高度塌陷问题&lt;/p&gt;
&lt;p&gt;在通常情况下父元素的高度会被子元素撑开，而如果父元素没有设置高度，其子元素均为浮动元素，此时父元素会发生了高度坍塌，上下边界重合，即浮动元素无法撑起父元素。这时就可以用BFC来清除浮动了，将父元素整体设置为BFC环境&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;BFC解决元素被浮动元素覆盖问题&lt;/p&gt;
&lt;p&gt;如果有两个相邻元素，第一个元素左浮动，第二个元素不设置浮动，这时候第二个元素会有部分被浮动元素所覆盖(但是文本信息不会被浮动元素所覆盖)。 如果想避免元素被覆盖，可触发第二个元素的 BFC 特性，在第二个元素中加入 &lt;code&gt;overflow: hidden&lt;/code&gt;即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25321647&quot; target=&quot;_blank&quot;&gt;10 分钟理解 BFC 原理&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Mon, 28 Dec 2020 15:49:00 +0000</pubDate>
<dc:creator>柏成</dc:creator>
<og:description>盒模型 CSS盒模型分成W3C标准盒模型和IE模型 W3C标准盒模型(默认)：box-sizing: content-box padding和border都会撑开盒子，改变盒子的宽度高度 总宽度：wi</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/burc/p/14204375.html</dc:identifier>
</item>
<item>
<title>容器编排系统K8s之StatefulSet控制器 - Linux-1874</title>
<link>http://www.cnblogs.com/qiuhom-1874/p/14201103.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiuhom-1874/p/14201103.html</guid>
<description>&lt;p&gt;　　前文我们聊到了k8s的configmap和secret资源的说明和相关使用示例，回顾请参考：&lt;a href=&quot;https://www.cnblogs.com/qiuhom-1874/p/14194944.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/qiuhom-1874/p/14194944.html&lt;/a&gt;；今天我们来了解下k8s上的statefulSet控制器的相关话题；&lt;/p&gt;
&lt;p&gt;　　1、statefulset控制器的作用&lt;/p&gt;
&lt;p&gt;　　简单讲statefulset控制器主要用来在k8s上管理有状态应用pod；我们经常运维的一些应用主要可以分为4类，分别从是否有状态和是否有存储两个维度去描述，我们可以将应用分为有状态无存储，有状态有存储，无状态无存储和无状态有存储这四种；大部份应用都是有状态有存储或无状态无存储的应用，只有少数应用是有状态无存储或无状态有存储；比如mysql的主从复制集群就是一个有状态有存储的应用；又比如一些http服务，如nginx,apache这些服务它就是无状态无存储（没有用户上传数据）；有状态和无状态的最本质区别是有状态应用用户的每次请求对应状态都不一样，状态是随时发生变化的，这种应用如果运行在k8s上，一旦对应pod崩溃，此时重建一个pod来替代之前的pod就必须满足，重建的pod必须和之前的pod上的数据保持一致，其次重建的pod要和现有集群的框架适配；比如mysql主从复制集群，当一个从发生故障，重建的pod必须满足能够正常挂在之前pod的pvc存储卷，以保证两者数据的一致；其次就是新建的pod要适配到当前mysql主从复制的架构；从上述描述来看，在k8s上托管有状态服务我们必须解决上述问题才能够让一个有状态服务在k8s上正常跑起来为用户提供服务；为此k8s专门弄了一个statefulset控制器来管理有状态pod，但是k8s上的statefulset控制器它不是帮我们把上述的问题全部解决，它只负责帮我启动对应数量的pod，并且把每个pod的名称序列化，如果对应pod崩溃，重建后的pod名称和原来的pod名称是一样的；所谓序列化是指pod名称不再是pod控制名称加随机生成的字符串，而是pod控制器名称加一个顺序的数字；比如statefulset控制器的名称为web-demo，那么对应控制器启动的pod就是web-demo-0、web-demo-1类似这样的逻辑命名；其次statefulset它还会把之前pod的pvc存储卷自动挂载到重建后的pod上（这取决pvc回收策略必须为Retain，即删除对应pod后端pvc存储卷保持不变），从而实现新建pod持有数据和之前的pod相同；简单讲statefulset控制器只是帮助我们在k8s上启动对应数量的pod，每个pod分配一个固定不变的名称，不管pod怎么调度，对应pod的名称是一直不变的；即便把对应pod删除再重建，重建后的pod的名称还是和之前的pod名称一样；其次就是自动帮我们把对应pod的pvc挂载到重建后的pod上，以保证两者数据的相同；statefulset控制器只帮我们做这些事，至于pod内部跑的容器应用怎么去适配对应的集群架构，类似业务逻辑的问题需要我们用户手动去写代码解决，因为对于不同的应用其集群逻辑架构和组织方式都不同，statefulset控制器不能做到以某种机制去适配所有的有状态应用的逻辑架构和组织方式；&lt;/p&gt;
&lt;p&gt;　　2、statefulset控制器示意图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201228163228984-652570352.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：statefulset控制器主要由pod模版和pvc模版组成；其中pod模版主要定义pod相关属性信息，对应pvc模版主要用来为对应pod提供存储卷，该存储卷可以使用sc资源来动态创建并关联pv，也可以管理员手动创建并关联对应的pv；&lt;/p&gt;
&lt;p&gt;　　3、statefulset控制器的创建和使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# cat statefulset-demo.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None
  selector:
    app: nginx
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  selector:
    matchLabels:
      app: nginx 
  serviceName: nginx
  replicas: 3 
  template:
    metadata:
      labels:
        app: nginx 
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: nginx
        image: nginx:1.14-alpine
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ &quot;ReadWriteOnce&quot; ]
      resources:
        requests:
          storage: 1Gi
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：statefulset控制器依赖handless类型service来管理pod的访问；statefulset控制器会根据定义的副本数量和定义的pod模板和pvc模板来启动pod，并给每个pod分配一个固定不变的名称，一般这个名称都是statefulset名称加上一个索引id，如上述清单，它会创建3个pod，这三个pod的名称分别是web-0、web-1、web-2；pod名称会结合handless service为其每个pod分配一个dns子域，访问对应pod就可以直接用这个子域名访问即可；子域名格式为$(pod_name).$(service_name).namespace_name.svc.集群域名（如果在初始化为指定默认集群域名为cluster.local）;上述清单定义了一个handless服务，以及一个statefulset控制器，对应控制器下定义了一个pod模板，和一个pvc模板；其中在pod模板中的terminationGracePeriodSeconds字段用来指定终止容器的宽限期时长，默认不指定为30秒；定义pvc模板需要用到volumeClaimTemplates字段，该字段的值为一个对象列表；其内部我们可以定义pvc模板；如果后端存储支持动态供给pv，还可以在此模板中直接调用对应的sc资源；&lt;/p&gt;
&lt;p&gt;　　在nfs服务器上导出共享目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@docker_registry ~]# cat /etc/exports
/data/v1 192.168.0.0/24(rw,no_root_squash)
/data/v2 192.168.0.0/24(rw,no_root_squash)
/data/v3 192.168.0.0/24(rw,no_root_squash)
[root@docker_registry ~]# ll /data/v*     
/data/v1:
total 0

/data/v2:
total 0

/data/v3:
total 0
[root@docker_registry ~]# exportfs -av
exporting 192.168.0.0/24:/data/v3
exporting 192.168.0.0/24:/data/v2
exporting 192.168.0.0/24:/data/v1
[root@docker_registry ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　手动创建pv&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# cat pv-demo.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-pv-v1
  labels:
    storsystem: nfs
    rel: stable
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes: [&quot;ReadWriteOnce&quot;,&quot;ReadWriteMany&quot;,&quot;ReadOnlyMany&quot;]
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
  - hard
  - nfsvers=4.1
  nfs:
    path: /data/v1
    server: 192.168.0.99
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-pv-v2
  labels:
    storsystem: nfs
    rel: stable
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes: [&quot;ReadWriteOnce&quot;,&quot;ReadWriteMany&quot;,&quot;ReadOnlyMany&quot;]
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
  - hard
  - nfsvers=4.1
  nfs:
    path: /data/v2
    server: 192.168.0.99
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-pv-v3
  labels:
    storsystem: nfs
    rel: stable
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes: [&quot;ReadWriteOnce&quot;,&quot;ReadWriteMany&quot;,&quot;ReadOnlyMany&quot;]
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
  - hard
  - nfsvers=4.1
  nfs:
    path: /data/v3
    server: 192.168.0.99
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：手动创建pv需要将其pv回收策略设置为Retain，以免对应pod删除以后，对应pv变成release状态而导致不可用；&lt;/p&gt;
&lt;p&gt;　　应用配置清单&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl apply -f pv-demo.yaml
persistentvolume/nfs-pv-v1 created
persistentvolume/nfs-pv-v2 created
persistentvolume/nfs-pv-v3 created
[root@master01 ~]# kubectl get pv
NAME        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE
nfs-pv-v1   1Gi        RWO,ROX,RWX    Retain           Available                                   3s
nfs-pv-v2   1Gi        RWO,ROX,RWX    Retain           Available                                   3s
nfs-pv-v3   1Gi        RWO,ROX,RWX    Retain           Available                                   3s
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：如果后端存储支持动态供给pv，此步骤可以省略；直接创建sc资源对象，然后在statefulset资源清单中的pvc模板中引用对应的sc对象名称就可以实现动态供给pv并绑定对应的pvc；&lt;/p&gt;
&lt;p&gt;　　应用statefulset资源清单&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl apply -f statefulset-demo.yaml 
service/nginx created
statefulset.apps/web created
[root@master01 ~]# kubectl get pv
NAME        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM               STORAGECLASS   REASON   AGE
nfs-pv-v1   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-0                           4m7s
nfs-pv-v2   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-1                           4m7s
nfs-pv-v3   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-2                           4m7s
[root@master01 ~]# kubectl get pvc
NAME        STATUS   VOLUME      CAPACITY   ACCESS MODES   STORAGECLASS   AGE
www-web-0   Bound    nfs-pv-v1   1Gi        RWO,ROX,RWX                   14s
www-web-1   Bound    nfs-pv-v2   1Gi        RWO,ROX,RWX                   12s
www-web-2   Bound    nfs-pv-v3   1Gi        RWO,ROX,RWX                   7s
[root@master01 ~]# kubectl get sts
NAME   READY   AGE
web    3/3     27s
[root@master01 ~]# kubectl get pods
NAME    READY   STATUS    RESTARTS   AGE
web-0   1/1     Running   0          38s
web-1   1/1     Running   0          36s
web-2   1/1     Running   0          31s
[root@master01 ~]# kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    &amp;lt;none&amp;gt;        443/TCP   48m
nginx        ClusterIP   None         &amp;lt;none&amp;gt;        80/TCP    41s
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到应用statefulset资源清单以后，对应的pv从available状态变为了bound状态，并且自动创建了3个pvc，对应pod的名称不再是控制器名称加一串随机字符串，而是statefulset控制器名称加一个有序的数字；通常这个数字从0开始，依次向上加，我们把这个数字叫做对应pod的索引；&lt;/p&gt;
&lt;p&gt;　　查看statefulset控制器详细信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl describe sts web
Name:               web
Namespace:          default
CreationTimestamp:  Mon, 28 Dec 2020 19:34:11 +0800
Selector:           app=nginx
Labels:             &amp;lt;none&amp;gt;
Annotations:        &amp;lt;none&amp;gt;
Replicas:           3 desired | 3 total
Update Strategy:    RollingUpdate
  Partition:        0
Pods Status:        3 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:  app=nginx
  Containers:
   nginx:
    Image:        nginx:1.14-alpine
    Port:         80/TCP
    Host Port:    0/TCP
    Environment:  &amp;lt;none&amp;gt;
    Mounts:
      /usr/share/nginx/html from www (rw)
  Volumes:  &amp;lt;none&amp;gt;
Volume Claims:
  Name:          www
  StorageClass:  
  Labels:        &amp;lt;none&amp;gt;
  Annotations:   &amp;lt;none&amp;gt;
  Capacity:      1Gi
  Access Modes:  [ReadWriteOnce]
Events:
  Type    Reason            Age    From                    Message
  ----    ------            ----   ----                    -------
  Normal  SuccessfulCreate  5m59s  statefulset-controller  create Claim www-web-0 Pod web-0 in StatefulSet web success
  Normal  SuccessfulCreate  5m59s  statefulset-controller  create Pod web-0 in StatefulSet web successful
  Normal  SuccessfulCreate  5m57s  statefulset-controller  create Claim www-web-1 Pod web-1 in StatefulSet web success
  Normal  SuccessfulCreate  5m57s  statefulset-controller  create Pod web-1 in StatefulSet web successful
  Normal  SuccessfulCreate  5m52s  statefulset-controller  create Claim www-web-2 Pod web-2 in StatefulSet web success
  Normal  SuccessfulCreate  5m52s  statefulset-controller  create Pod web-2 in StatefulSet web successful
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：从上面的详细信息中可以了解到，对应statefulset控制器是创建一个pvc，然后在创建一个pod；只有当第一个pod和pvc都成功并就绪以后，对应才会进行下一个pvc和pod的创建和挂载；简单讲它里面是有序串行进行的；&lt;/p&gt;
&lt;p&gt;　　验证：在k8s集群上任意节点查看对应nginx服务名称，看看是否能够查到对应服务名称域名下的pod记录&lt;/p&gt;
&lt;p&gt;　　安装dns工具包&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# yum install -y bind-utils
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　用dig工具查看对应nginx.default.cluster.local域名在coredns上的解析记录&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    &amp;lt;none&amp;gt;        443/TCP   64m
nginx        ClusterIP   None         &amp;lt;none&amp;gt;        80/TCP    20m
[root@master01 ~]# kubectl get svc -n kube-system                 
NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE
kube-dns   ClusterIP   10.96.0.10   &amp;lt;none&amp;gt;        53/UDP,53/TCP,9153/TCP   20d
[root@master01 ~]# dig nginx.default.svc.cluster.local @10.96.0.10

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; nginx.default.svc.cluster.local @10.96.0.10
;; global options: +cmd
;; Got answer:
;; WARNING: .local is reserved for Multicast DNS
;; You are currently testing what happens when an mDNS query is leaked to DNS
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 61539
;; flags: qr aa rd; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1
;; WARNING: recursion requested but not available

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;nginx.default.svc.cluster.local. IN    A

;; ANSWER SECTION:
nginx.default.svc.cluster.local. 30 IN  A       10.244.2.109
nginx.default.svc.cluster.local. 30 IN  A       10.244.4.27
nginx.default.svc.cluster.local. 30 IN  A       10.244.3.108

;; Query time: 0 msec
;; SERVER: 10.96.0.10#53(10.96.0.10)
;; WHEN: Mon Dec 28 19:54:34 CST 2020
;; MSG SIZE  rcvd: 201

[root@master01 ~]# kubectl get pods -o wide
NAME    READY   STATUS    RESTARTS   AGE   IP             NODE             NOMINATED NODE   READINESS GATES
web-0   1/1     Running   0          22m   10.244.4.27    node04.k8s.org   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
web-1   1/1     Running   0          22m   10.244.2.109   node02.k8s.org   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
web-2   1/1     Running   0          22m   10.244.3.108   node03.k8s.org   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：从上面的查询结果可以看到，对应default名称空间下nginx服务名称，对应在coredns上的记录有3条；并且对应的解析记录就是对应服务后端的podip地址；&lt;/p&gt;
&lt;p&gt;　　验证：查询web-0的记录是否是对应的web-0这个pod的ip地址呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl get pods web-0 -o wide
NAME    READY   STATUS    RESTARTS   AGE   IP            NODE             NOMINATED NODE   READINESS GATES
web-0   1/1     Running   0          24m   10.244.4.27   node04.k8s.org   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
[root@master01 ~]# dig web-0.nginx.default.svc.cluster.local @10.96.0.10

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; web-0.nginx.default.svc.cluster.local @10.96.0.10
;; global options: +cmd
;; Got answer:
;; WARNING: .local is reserved for Multicast DNS
;; You are currently testing what happens when an mDNS query is leaked to DNS
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 13000
;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1
;; WARNING: recursion requested but not available

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;web-0.nginx.default.svc.cluster.local. IN A

;; ANSWER SECTION:
web-0.nginx.default.svc.cluster.local. 30 IN A  10.244.4.27

;; Query time: 0 msec
;; SERVER: 10.96.0.10#53(10.96.0.10)
;; WHEN: Mon Dec 28 19:58:58 CST 2020
;; MSG SIZE  rcvd: 119

[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到在对应查询服务名称域名前加上对应的pod名称，在coredns上能够查询到对应pod的ip记录，这说明，后续访问我们可以直接通过pod名称加服务名称直接访问到对应pod；&lt;/p&gt;
&lt;p&gt;　　验证：把集群节点的dns服务器更改为coredns服务ip，然后使用pod名称加服务名称域名的方式访问pod，看看是否能够访问到pod?&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# cat /etc/resolv.conf
# Generated by NetworkManager
search k8s.org
nameserver 10.96.0.10
[root@master01 ~]# curl web-0.nginx.default.svc.cluster.local
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;403 Forbidden&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body bgcolor=&quot;white&quot;&amp;gt;
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;403 Forbidden&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.14.2&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：这里能够响应403，说明pod能够正常访问，只不过对应pod没有主页，所以提示403；&lt;/p&gt;
&lt;p&gt;　　验证：进入对应pod里面，提供主页页面，再次访问，看看是否能够访问到对应的页面内容呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl exec -it web-0 -- /bin/sh
/ # cd /usr/share/nginx/html/
/usr/share/nginx/html # ls
/usr/share/nginx/html # echo &quot;this web-0 pod index&quot; &amp;gt; index.html
/usr/share/nginx/html # ls
index.html
/usr/share/nginx/html # cat index.html 
this web-0 pod index
/usr/share/nginx/html # exit
[root@master01 ~]# curl web-0.nginx.default.svc.cluster.local
this web-0 pod index
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到对应pod能够被访问到；&lt;/p&gt;
&lt;p&gt;　　删除web-0，看看对应pod是否自动重建？&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl get pods -o wide
NAME    READY   STATUS    RESTARTS   AGE   IP             NODE             NOMINATED NODE   READINESS GATES
web-0   1/1     Running   0          33m   10.244.4.27    node04.k8s.org   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
web-1   1/1     Running   0          33m   10.244.2.109   node02.k8s.org   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
web-2   1/1     Running   0          33m   10.244.3.108   node03.k8s.org   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
[root@master01 ~]# kubectl delete pod web-0
pod &quot;web-0&quot; deleted
[root@master01 ~]# kubectl get pods -o wide
NAME    READY   STATUS    RESTARTS   AGE   IP             NODE             NOMINATED NODE   READINESS GATES
web-0   1/1     Running   0          7s    10.244.4.28    node04.k8s.org   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
web-1   1/1     Running   0          33m   10.244.2.109   node02.k8s.org   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
web-2   1/1     Running   0          33m   10.244.3.108   node03.k8s.org   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到手动删除web-0以后，对应控制器会自动根据pod模板，重建一个名称为web-0的pod运行起来；&lt;/p&gt;
&lt;p&gt;　　验证：访问新建后的pod，看看是否能够访问到对应的主页呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# curl web-0.nginx.default.svc.cluster.local
this web-0 pod index
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到使用pod名称加服务名称域名，能够正常访问到对应pod的主页，这意味着新建的pod能够自动将之前删除的pod的pvc存储卷挂载到自己对一个的目录下；&lt;/p&gt;
&lt;p&gt;　　扩展pod副本&lt;/p&gt;
&lt;p&gt;　　在nfs服务器上创建共享目录，并导出对应的目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;46&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@docker_registry ~]# mkdir -pv /data/v{4,5,6}
mkdir: created directory ‘/data/v4’
mkdir: created directory ‘/data/v5’
mkdir: created directory ‘/data/v6’
[root@docker_registry ~]# echo &quot;/data/v4 192.168.0.0/24(rw,no_root_squash)&quot; &amp;gt;&amp;gt; /etc/exports
[root@docker_registry ~]# echo &quot;/data/v5 192.168.0.0/24(rw,no_root_squash)&quot; &amp;gt;&amp;gt; /etc/exports 
[root@docker_registry ~]# echo &quot;/data/v6 192.168.0.0/24(rw,no_root_squash)&quot; &amp;gt;&amp;gt; /etc/exports 
[root@docker_registry ~]# cat /etc/exports
/data/v1 192.168.0.0/24(rw,no_root_squash)
/data/v2 192.168.0.0/24(rw,no_root_squash)
/data/v3 192.168.0.0/24(rw,no_root_squash)
/data/v4 192.168.0.0/24(rw,no_root_squash)
/data/v5 192.168.0.0/24(rw,no_root_squash)
/data/v6 192.168.0.0/24(rw,no_root_squash)
[root@docker_registry ~]# exportfs -av
exporting 192.168.0.0/24:/data/v6
exporting 192.168.0.0/24:/data/v5
exporting 192.168.0.0/24:/data/v4
exporting 192.168.0.0/24:/data/v3
exporting 192.168.0.0/24:/data/v2
exporting 192.168.0.0/24:/data/v1
[root@docker_registry ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　复制创建pv的资源清单，更改为要创建pv对应的配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# cat pv-demo2.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-pv-v4
  labels:
    storsystem: nfs
    rel: stable
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes: [&quot;ReadWriteOnce&quot;,&quot;ReadWriteMany&quot;,&quot;ReadOnlyMany&quot;]
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
  - hard
  - nfsvers=4.1
  nfs:
    path: /data/v4
    server: 192.168.0.99
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-pv-v5
  labels:
    storsystem: nfs
    rel: stable
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes: [&quot;ReadWriteOnce&quot;,&quot;ReadWriteMany&quot;,&quot;ReadOnlyMany&quot;]
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
  - hard
  - nfsvers=4.1
  nfs:
    path: /data/v5
    server: 192.168.0.99
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-pv-v6
  labels:
    storsystem: nfs
    rel: stable
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes: [&quot;ReadWriteOnce&quot;,&quot;ReadWriteMany&quot;,&quot;ReadOnlyMany&quot;]
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
  - hard
  - nfsvers=4.1
  nfs:
    path: /data/v6
    server: 192.168.0.99
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　应用配置清单，创建pv&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl apply -f pv-demo2.yaml
persistentvolume/nfs-pv-v4 created
persistentvolume/nfs-pv-v5 created
persistentvolume/nfs-pv-v6 created
[root@master01 ~]# kubectl get pv
NAME        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM               STORAGECLASS   REASON   AGE
nfs-pv-v1   1Gi        RWO,ROX,RWX    Retain           Bound       default/www-web-0                           55m
nfs-pv-v2   1Gi        RWO,ROX,RWX    Retain           Bound       default/www-web-1                           55m
nfs-pv-v3   1Gi        RWO,ROX,RWX    Retain           Bound       default/www-web-2                           55m
nfs-pv-v4   1Gi        RWO,ROX,RWX    Retain           Available                                               4s
nfs-pv-v5   1Gi        RWO,ROX,RWX    Retain           Available                                               4s
nfs-pv-v6   1Gi        RWO,ROX,RWX    Retain           Available                                               4s
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　扩展sts副本数为6个&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl get sts
NAME   READY   AGE
web    3/3     53m
[root@master01 ~]# kubectl scale sts web --replicas=6
statefulset.apps/web scaled
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　查看对应的pod扩展过程&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl get pod -w
NAME    READY   STATUS    RESTARTS   AGE
web-0   1/1     Running   0          19m
web-1   1/1     Running   0          53m
web-2   1/1     Running   0          53m
web-3   0/1     Pending   0          0s
web-3   0/1     Pending   0          0s
web-3   0/1     Pending   0          0s
web-3   0/1     ContainerCreating   0          0s
web-3   1/1     Running             0          2s
web-4   0/1     Pending             0          0s
web-4   0/1     Pending             0          0s
web-4   0/1     Pending             0          2s
web-4   0/1     ContainerCreating   0          2s
web-4   1/1     Running             0          4s
web-5   0/1     Pending             0          0s
web-5   0/1     Pending             0          0s
web-5   0/1     Pending             0          2s
web-5   0/1     ContainerCreating   0          2s
web-5   1/1     Running             0          4s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：从上面的扩展过程可以看到对应pod是串行扩展，当web-3就绪running以后，才会进行web-4，依次类推；&lt;/p&gt;
&lt;p&gt;　　查看pv和pvc&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;59&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl get pv
NAME        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM               STORAGECLASS   REASON   AGE
nfs-pv-v1   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-0                           60m
nfs-pv-v2   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-1                           60m
nfs-pv-v3   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-2                           60m
nfs-pv-v4   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-4                           5m6s
nfs-pv-v5   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-3                           5m6s
nfs-pv-v6   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-5                           5m6s
[root@master01 ~]# kubectl get pvc
NAME        STATUS   VOLUME      CAPACITY   ACCESS MODES   STORAGECLASS   AGE
www-web-0   Bound    nfs-pv-v1   1Gi        RWO,ROX,RWX                   57m
www-web-1   Bound    nfs-pv-v2   1Gi        RWO,ROX,RWX                   57m
www-web-2   Bound    nfs-pv-v3   1Gi        RWO,ROX,RWX                   57m
www-web-3   Bound    nfs-pv-v5   1Gi        RWO,ROX,RWX                   3m31s
www-web-4   Bound    nfs-pv-v4   1Gi        RWO,ROX,RWX                   3m29s
www-web-5   Bound    nfs-pv-v6   1Gi        RWO,ROX,RWX                   3m25s
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：从上面的结果可以看到pv和pvc都处于bound状态；&lt;/p&gt;
&lt;p&gt;　　缩减pod数量为4个&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;59&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl scale sts web --replicas=4
statefulset.apps/web scaled
[root@master01 ~]# kubectl get pods
NAME    READY   STATUS        RESTARTS   AGE
web-0   1/1     Running       0          28m
web-1   1/1     Running       0          61m
web-2   1/1     Running       0          61m
web-3   1/1     Running       0          7m46s
web-4   1/1     Running       0          7m44s
web-5   0/1     Terminating   0          7m40s
[root@master01 ~]# kubectl get pods
NAME    READY   STATUS    RESTARTS   AGE
web-0   1/1     Running   0          28m
web-1   1/1     Running   0          62m
web-2   1/1     Running   0          62m
web-3   1/1     Running   0          8m4s
[root@master01 ~]# kubectl get pv
NAME        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM               STORAGECLASS   REASON   AGE
nfs-pv-v1   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-0                           66m
nfs-pv-v2   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-1                           66m
nfs-pv-v3   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-2                           66m
nfs-pv-v4   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-4                           10m
nfs-pv-v5   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-3                           10m
nfs-pv-v6   1Gi        RWO,ROX,RWX    Retain           Bound    default/www-web-5                           10m
[root@master01 ~]# kubectl get pvc
NAME        STATUS   VOLUME      CAPACITY   ACCESS MODES   STORAGECLASS   AGE
www-web-0   Bound    nfs-pv-v1   1Gi        RWO,ROX,RWX                   62m
www-web-1   Bound    nfs-pv-v2   1Gi        RWO,ROX,RWX                   62m
www-web-2   Bound    nfs-pv-v3   1Gi        RWO,ROX,RWX                   62m
www-web-3   Bound    nfs-pv-v5   1Gi        RWO,ROX,RWX                   8m13s
www-web-4   Bound    nfs-pv-v4   1Gi        RWO,ROX,RWX                   8m11s
www-web-5   Bound    nfs-pv-v6   1Gi        RWO,ROX,RWX                   8m7s
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：可以看到缩减pod它会从索引号最大的pod逆序缩减，缩减以后对应pv和pvc的状态依旧是bound状态；扩缩减pod副本过程如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201228210844954-2142408088.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：上图主要描述了sts控制器上的pod缩减--&amp;gt;扩展pod副本的过程；缩减pod副本数量，对应后端的pvc和pv的状态都是不变的，后续再增加pod副本数量，对应pvc能够根据pod名称自动的关联到对应的pod上，使得扩展后对应名称的pod和之前缩减pod的数据保存一致；&lt;/p&gt;
&lt;p&gt;　　滚动更新pod版本&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl set image sts web nginx=nginx:1.16-alpine
statefulset.apps/web image updated
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　查看更新过程&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl get pod -w
NAME    READY   STATUS    RESTARTS   AGE
web-0   1/1     Running   0          38m
web-1   1/1     Running   0          71m
web-2   1/1     Running   0          71m
web-3   1/1     Running   0          17m
web-3   1/1     Terminating   0          20m
web-3   0/1     Terminating   0          20m
web-3   0/1     Terminating   0          20m
web-3   0/1     Terminating   0          20m
web-3   0/1     Pending       0          0s
web-3   0/1     Pending       0          0s
web-3   0/1     ContainerCreating   0          0s
web-3   1/1     Running             0          1s
web-2   1/1     Terminating         0          74m
web-2   0/1     Terminating         0          74m
web-2   0/1     Terminating         0          74m
web-2   0/1     Terminating         0          74m
web-2   0/1     Pending             0          0s
web-2   0/1     Pending             0          0s
web-2   0/1     ContainerCreating   0          0s
web-2   1/1     Running             0          2s
web-1   1/1     Terminating         0          74m
web-1   0/1     Terminating         0          74m
web-1   0/1     Terminating         0          75m
web-1   0/1     Terminating         0          75m
web-1   0/1     Pending             0          0s
web-1   0/1     Pending             0          0s
web-1   0/1     ContainerCreating   0          0s
web-1   1/1     Running             0          2s
web-0   1/1     Terminating         0          41m
web-0   0/1     Terminating         0          41m
web-0   0/1     Terminating         0          41m
web-0   0/1     Terminating         0          41m
web-0   0/1     Pending             0          0s
web-0   0/1     Pending             0          0s
web-0   0/1     ContainerCreating   0          0s
web-0   1/1     Running             0          1s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：从上面更新过程来看，statefulset控制器滚动更新是从索引号最大的pod开始更新，并且它一次更新一个pod，只有等到上一个pod更新完毕，并且其状态为running以后，才开始更新第二个，依次类推；&lt;/p&gt;
&lt;p&gt;　　验证：查看对应sts信息，看看对应版本是否更新为我们指定的镜像版本？&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl get sts -o wide
NAME   READY   AGE   CONTAINERS   IMAGES
web    4/4     79m   nginx        nginx:1.16-alpine
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　回滚pod版本为上一个版本&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl get sts -o wide
NAME   READY   AGE   CONTAINERS   IMAGES
web    4/4     80m   nginx        nginx:1.16-alpine
[root@master01 ~]# kubectl rollout undo sts/web
statefulset.apps/web rolled back
[root@master01 ~]# kubectl get pods
NAME    READY   STATUS              RESTARTS   AGE
web-0   1/1     Running             0          6m6s
web-1   1/1     Running             0          6m13s
web-2   0/1     ContainerCreating   0          1s
web-3   1/1     Running             0          12s
[root@master01 ~]# kubectl get pods
NAME    READY   STATUS              RESTARTS   AGE
web-0   1/1     Running             0          6m14s
web-1   0/1     ContainerCreating   0          1s
web-2   1/1     Running             0          9s
web-3   1/1     Running             0          20s
[root@master01 ~]# kubectl get pods
NAME    READY   STATUS    RESTARTS   AGE
web-0   1/1     Running   0          1s
web-1   1/1     Running   0          8s
web-2   1/1     Running   0          16s
web-3   1/1     Running   0          27s
[root@master01 ~]# kubectl get sts -o wide     
NAME   READY   AGE   CONTAINERS   IMAGES
web    4/4     81m   nginx        nginx:1.14-alpine
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　使用partition字段控制更新pod数量，实现金丝雀效果更新pod版本&lt;/p&gt;
&lt;p&gt;　　sts控制器默认的更新策略是依次从索引最大的pod开始逆序更新，先删除一个pod等待对应pod更新完毕以后，状态处于running以后，接着更新第二个依次更新完所有的pod，要想实现金丝雀更新pod版本的效果，我们需要告诉sts更新在那个位置；在deploy控制器中我们使用的是kubectl rollout pause命令来暂停更新，从而实现金丝雀更新pod版本的效果，当然在sts中也可以；除此之外，sts还支持通过sts.spec.updateStrategy.rollingUpdate.partition字段的值来控制器更新数量；默认partition的值为0，表示更新到索引大于0的pod位置，即全部更新；如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201228214522813-564595989.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：在sts控制器中更新pod模板的镜像版本，可以使用partition这个字段来控制更新到那个位置，partition=3表示更新索引大于等于3的pod，小于3的pod就不更新；partition=0表示全部更新；&lt;/p&gt;
&lt;p&gt;　　示例：在线更改sts控制器的partition字段的值为3&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201228215104907-679505294.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：在线修改sts的配置，使用kubectl edit命令指定类型和对应控制器实例，就可以进入编辑对应配置文件的界面，找到updateStrategy字段下的rollingUpdate字段下的partition字段，把原有的0更改为3，保存退出即可生效；当然我们也可以直接更改配置清单，然后再重新应用一下也行；如果配置清单中没有定义，可以加上对应的字段即可；&lt;/p&gt;
&lt;p&gt;　　再次更新pod版本，看看它是否只更新索引于等3的pod呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl get sts -o wide
NAME   READY   AGE    CONTAINERS   IMAGES
web    4/4     146m   nginx        nginx:1.14-alpine
[root@master01 ~]# kubectl set image sts web nginx=nginx:1.16-alpine
statefulset.apps/web image updated
[root@master01 ~]# kubectl get sts -o wide                          
NAME   READY   AGE    CONTAINERS   IMAGES
web    3/4     146m   nginx        nginx:1.16-alpine
[root@master01 ~]#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　查看更新过程&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@master01 ~]# kubectl get pods -w
NAME    READY   STATUS    RESTARTS   AGE
web-0   1/1     Running   0          64m
web-1   1/1     Running   0          64m
web-2   1/1     Running   0          64m
web-3   1/1     Running   0          64m
web-3   1/1     Terminating   0          51s
web-3   0/1     Terminating   0          51s
web-3   0/1     Terminating   0          60s
web-3   0/1     Terminating   0          60s
web-3   0/1     Pending       0          0s
web-3   0/1     Pending       0          0s
web-3   0/1     ContainerCreating   0          0s
web-3   1/1     Running             0          1s
^C[root@master01 ~]# kubectl get pods 
NAME    READY   STATUS    RESTARTS   AGE
web-0   1/1     Running   0          65m
web-1   1/1     Running   0          65m
web-2   1/1     Running   0          65m
web-3   1/1     Running   0          50s
[root@master01 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示：从上面的更新过程可以看到，对应sts控制器此时更新只是更新了web-3，其余索引小于3的pod并没有发生更新操作；&lt;/p&gt;
&lt;p&gt;　　恢复全部更新&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1503305/202012/1503305-20201228220713658-1964081026.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提示：从上面的演示来看，我们把对应的控制器中的partition字段的值从3更改为0以后，对应更新操作就理解开始执行；&lt;/p&gt;
&lt;p&gt;　　以上就是sts控制器的相关使用说明，其实我上面使用nginx来演示sts控制器的相关操作，在生产环境中我们部署的是一个真正有状态的服务，还要考虑怎么去适配对应的集群，每个pod怎么加入到集群，扩缩容怎么做等等一系列运维操作都需要在pod模板中定义出来；&lt;/p&gt;
&lt;p&gt;　　示例：在k8s上使用sts控制器部署zk集群&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_53849e8d-a090-4b80-91b2-6de060961215&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_53849e8d-a090-4b80-91b2-6de060961215&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_53849e8d-a090-4b80-91b2-6de060961215&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;apiVersion: v1
kind: Service
metadata:
  name: zk&lt;/span&gt;-&lt;span&gt;hs
  labels:
    app: zk
spec:
  ports:
  &lt;/span&gt;- port: &lt;span&gt;2888&lt;/span&gt;&lt;span&gt;
    name: server
  &lt;/span&gt;- port: &lt;span&gt;3888&lt;/span&gt;&lt;span&gt;
    name: leader&lt;/span&gt;-&lt;span&gt;election
  clusterIP: None
  selector:
    app: zk
&lt;/span&gt;---&lt;span&gt;
apiVersion: v1
kind: Service
metadata:
  name: zk&lt;/span&gt;-&lt;span&gt;cs
  labels:
    app: zk
spec:
  ports:
  &lt;/span&gt;- port: &lt;span&gt;2181&lt;/span&gt;&lt;span&gt;
    name: client
  selector:
    app: zk
&lt;/span&gt;---&lt;span&gt;
apiVersion: policy&lt;/span&gt;/&lt;span&gt;v1beta1
kind: PodDisruptionBudget
metadata:
  name: zk&lt;/span&gt;-&lt;span&gt;pdb
spec:
  selector:
    matchLabels:
      app: zk
  maxUnavailable: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
---&lt;span&gt;
apiVersion: apps&lt;/span&gt;/&lt;span&gt;v1
kind: StatefulSet
metadata:
  name: zk
spec:
  selector:
    matchLabels:
      app: zk
  serviceName: zk&lt;/span&gt;-&lt;span&gt;hs
  replicas: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: zk
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            &lt;/span&gt;-&lt;span&gt; labelSelector:
                matchExpressions:
                  &lt;/span&gt;- key: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    operator: In
                    values:
                    &lt;/span&gt;- zk-&lt;span&gt;hs
              topologyKey: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;kubernetes.io/hostname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      containers:
      &lt;/span&gt;- name: kubernetes-&lt;span&gt;zookeeper
        image: gcr.io&lt;/span&gt;/google-containers/kubernetes-zookeeper:&lt;span&gt;1.0&lt;/span&gt;-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
        resources:
          requests:
            memory: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1Gi&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            cpu: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        ports:
        &lt;/span&gt;- containerPort: &lt;span&gt;2181&lt;/span&gt;&lt;span&gt;
          name: client
        &lt;/span&gt;- containerPort: &lt;span&gt;2888&lt;/span&gt;&lt;span&gt;
          name: server
        &lt;/span&gt;- containerPort: &lt;span&gt;3888&lt;/span&gt;&lt;span&gt;
          name: leader&lt;/span&gt;-&lt;span&gt;election
        command:
        &lt;/span&gt;- &lt;span&gt;sh&lt;/span&gt;
        - -&lt;span&gt;c
        &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start-zookeeper \&lt;/span&gt;
          --servers=&lt;span&gt;3&lt;/span&gt;&lt;span&gt; \
          &lt;/span&gt;--data_dir=/var/lib/zookeeper/&lt;span&gt;data \
          &lt;/span&gt;--data_log_dir=/var/lib/zookeeper/data/&lt;span&gt;log \
          &lt;/span&gt;--conf_dir=/opt/zookeeper/&lt;span&gt;conf \
          &lt;/span&gt;--client_port=&lt;span&gt;2181&lt;/span&gt;&lt;span&gt; \
          &lt;/span&gt;--election_port=&lt;span&gt;3888&lt;/span&gt;&lt;span&gt; \
          &lt;/span&gt;--server_port=&lt;span&gt;2888&lt;/span&gt;&lt;span&gt; \
          &lt;/span&gt;--tick_time=&lt;span&gt;2000&lt;/span&gt;&lt;span&gt; \
          &lt;/span&gt;--init_limit=&lt;span&gt;10&lt;/span&gt;&lt;span&gt; \
          &lt;/span&gt;--sync_limit=&lt;span&gt;5&lt;/span&gt;&lt;span&gt; \
          &lt;/span&gt;--heap=&lt;span&gt;512M \
          &lt;/span&gt;--max_client_cnxns=&lt;span&gt;60&lt;/span&gt;&lt;span&gt; \
          &lt;/span&gt;--snap_retain_count=&lt;span&gt;3&lt;/span&gt;&lt;span&gt; \
          &lt;/span&gt;--purge_interval=&lt;span&gt;12&lt;/span&gt;&lt;span&gt; \
          &lt;/span&gt;--max_session_timeout=&lt;span&gt;40000&lt;/span&gt;&lt;span&gt; \
          &lt;/span&gt;--min_session_timeout=&lt;span&gt;4000&lt;/span&gt;&lt;span&gt; \
          &lt;/span&gt;--log_level=INFO&lt;span&gt;&quot;
&lt;/span&gt;&lt;span&gt;        readinessProbe:
          exec:
            command:
            &lt;/span&gt;- &lt;span&gt;sh&lt;/span&gt;
            - -&lt;span&gt;c
            &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zookeeper-ready 2181&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
          initialDelaySeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
          timeoutSeconds: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;
        livenessProbe:
          exec:
            command:
            &lt;/span&gt;- &lt;span&gt;sh&lt;/span&gt;
            - -&lt;span&gt;c
            &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zookeeper-ready 2181&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
          initialDelaySeconds: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
          timeoutSeconds: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;
        volumeMounts:
        &lt;/span&gt;-&lt;span&gt; name: data
          mountPath: &lt;/span&gt;/var/lib/&lt;span&gt;zookeeper
      securityContext:
        runAsUser: &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
        fsGroup: &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
  volumeClaimTemplates:
  &lt;/span&gt;-&lt;span&gt; metadata:
      name: data
    spec:
      accessModes: [ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReadWriteOnce&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]
      storageClassName: gluster&lt;/span&gt;-&lt;span&gt;dynamic
      resources:
        requests:
          storage: 5Gi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　示例：在k8s上使用sts控制器部署etcd集群&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; id=&quot;code_img_closed_76777f95-7ca2-45f4-94c6-dfca002265a1&quot; class=&quot;code_img_closed&quot;/&gt;&lt;img src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; id=&quot;code_img_opened_76777f95-7ca2-45f4-94c6-dfca002265a1&quot; class=&quot;code_img_opened&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_76777f95-7ca2-45f4-94c6-dfca002265a1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;apiVersion: v1
kind: Service
metadata:
  name: etcd
  labels:
    app: etcd
  annotations:
    # Create endpoints also &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; the related pod isn&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t ready&lt;/span&gt;
    service.alpha.kubernetes.io/tolerate-unready-endpoints: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
spec:
  ports:
  &lt;/span&gt;- port: &lt;span&gt;2379&lt;/span&gt;&lt;span&gt;
    name: client
  &lt;/span&gt;- port: &lt;span&gt;2380&lt;/span&gt;&lt;span&gt;
    name: peer
  clusterIP: None
  selector:
    app: etcd&lt;/span&gt;-&lt;span&gt;member
&lt;/span&gt;---&lt;span&gt;
apiVersion: v1
kind: Service
metadata:
  name: etcd&lt;/span&gt;-&lt;span&gt;client
  labels:
    app: etcd
spec:
  ports:
  &lt;/span&gt;- name: etcd-&lt;span&gt;client
    port: &lt;/span&gt;&lt;span&gt;2379&lt;/span&gt;&lt;span&gt;
    protocol: TCP
    targetPort: &lt;/span&gt;&lt;span&gt;2379&lt;/span&gt;&lt;span&gt;
  selector:
    app: etcd&lt;/span&gt;-&lt;span&gt;member
  type: NodePort
&lt;/span&gt;---&lt;span&gt;
apiVersion: apps&lt;/span&gt;/&lt;span&gt;v1
kind: StatefulSet
metadata:
  name: etcd
  labels:
    app: etcd
spec:
  serviceName: etcd
  # changing replicas value will require a manual etcdctl member remove&lt;/span&gt;/&lt;span&gt;add
  #   # command (remove before decreasing and add after increasing)
  replicas: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
  selector:
    matchLabels:
      app: etcd&lt;/span&gt;-&lt;span&gt;member
  template:
    metadata:
      name: etcd
      labels:
        app: etcd&lt;/span&gt;-&lt;span&gt;member
    spec:
      containers:
      &lt;/span&gt;-&lt;span&gt; name: etcd
        image: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quay.io/coreos/etcd:v3.2.16&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        ports:
        &lt;/span&gt;- containerPort: &lt;span&gt;2379&lt;/span&gt;&lt;span&gt;
          name: client
        &lt;/span&gt;- containerPort: &lt;span&gt;2380&lt;/span&gt;&lt;span&gt;
          name: peer
        &lt;/span&gt;&lt;span&gt;env&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;-&lt;span&gt; name: CLUSTER_SIZE
          value: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        -&lt;span&gt; name: SET_NAME
          value: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        volumeMounts:
        &lt;/span&gt;-&lt;span&gt; name: data
          mountPath: &lt;/span&gt;/var/run/&lt;span&gt;etcd
        command:
          &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/bin/sh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
          - &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-ecx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
          - |&lt;span&gt;
            IP&lt;/span&gt;=$(&lt;span&gt;hostname&lt;/span&gt; -&lt;span&gt;i)
            PEERS&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; $(&lt;span&gt;seq&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; $((${CLUSTER_SIZE} - &lt;span&gt;1&lt;/span&gt;))); &lt;span&gt;do&lt;/span&gt;&lt;span&gt;
                PEERS&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${PEERS}${PEERS:+,}${SET_NAME}-${i}=http://${SET_NAME}-${i}.${SET_NAME}:2380&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;done&lt;/span&gt;&lt;span&gt;
            # start etcd. If cluster is already initialized the `&lt;/span&gt;--initial-*&lt;span&gt;` options will be ignored.
            exec etcd &lt;/span&gt;--&lt;span&gt;name ${HOSTNAME} \
              &lt;/span&gt;--listen-peer-urls http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;${IP}:2380 \&lt;/span&gt;
              --listen-client-urls http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;${IP}:2379,&lt;/span&gt;&lt;span&gt;http://127.0.0.1&lt;/span&gt;&lt;span&gt;:2379 \&lt;/span&gt;
              --advertise-client-urls http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;${HOSTNAME}.${SET_NAME}:2379 \&lt;/span&gt;
              --initial-advertise-peer-urls http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;${HOSTNAME}.${SET_NAME}:2380 \&lt;/span&gt;
              --initial-cluster-token etcd-cluster-&lt;span&gt;1&lt;/span&gt;&lt;span&gt; \
              &lt;/span&gt;--initial-&lt;span&gt;cluster ${PEERS} \
              &lt;/span&gt;--initial-cluster-&lt;span&gt;state new \
              &lt;/span&gt;--data-&lt;span&gt;dir&lt;/span&gt; /var/run/etcd/&lt;span&gt;default.etcd
  volumeClaimTemplates:
  &lt;/span&gt;-&lt;span&gt; metadata:
      name: data
    spec:
      storageClassName: gluster&lt;/span&gt;-&lt;span&gt;dynamic
      accessModes:
        &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReadWriteOnce&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      resources:
        requests:
          storage: 1Gi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　提示：以上示例都是使用的sc资源对象自动创建pv并关联pvc，在运行前请先准备好对应的存储和创建好sc对象；如果不使用pv自动供给，可以先创建pv在应用资源清单（手动创建pv需要将其pvc模板中的storageClassName字段删除）；&lt;/p&gt;
&lt;p&gt;　　最后再来说一下k8s operator&lt;/p&gt;
&lt;p&gt;　　从上述sts示例来看，我们要在k8s上部署一个真正意思上的有状态服务，最重要的就是定义好pod模板，这个模板通常就是指定对应的镜像内部怎么加入集群，对应pod扩缩容怎么处理等等；根据不同的服务逻辑定义的方式各有不同，这样一来使得在k8s上跑有状态的服务就显得格外的吃力；为此coreos想了个办法，它把在k8s上跑有状态应用的绝大部分运维操作，做成了一个sdk，这个sdk叫operator，用户只需要针对这个sdk来开发一些适合自己业务需要用到的对应服务的运维操作程序；然后把此程序跑到k8s上；这样一来针对专有服务就有专有的operator，用户如果要在k8s上跑对应服务，只需要告诉对应的operator跑一个某某服务即可；简单讲operator就是一个针对某有状态服务的全能运维，用户需要在k8s上创建一个对应服务的集群，就告诉对应的“运维”创建一个集群，需要扩展/缩减集群pod数量，告诉运维“扩展/缩减集群”即可；至于该”运维“有哪些能力，取决开发此程序的程序员赋予了该operator哪些能力；这样一来我们在k8s上跑有状态的应用程序，只需要把对应的operator部署到k8s集群，然后根据此operator来编写对应的资源配置清单应用即可；在哪里找operator呢？&lt;a href=&quot;https://github.com/operator-framework/awesome-operators&quot; target=&quot;_blank&quot;&gt;https://github.com/operator-framework/awesome-operators&lt;/a&gt;；该地址是一个operator的列表，里面有很多服务的operator的网站地址；可以找到对应的服务，进入到对应网站查看相关文档部署使用即可；&lt;/p&gt;
</description>
<pubDate>Mon, 28 Dec 2020 15:48:00 +0000</pubDate>
<dc:creator>Linux-1874</dc:creator>
<og:description>前文我们聊到了k8s的configmap和secret资源的说明和相关使用示例，回顾请参考：https://www.cnblogs.com/qiuhom-1874/p/14194944.html；今天</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/qiuhom-1874/p/14201103.html</dc:identifier>
</item>
<item>
<title>C# 9 新特性 —— 增强的 foreach - WeihanLi</title>
<link>http://www.cnblogs.com/weihanli/p/14204347.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/weihanli/p/14204347.html</guid>
<description>&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;在 C# 9 中增强了 &lt;code&gt;foreach&lt;/code&gt; 的使用，使得一切对象都有 &lt;code&gt;foreach&lt;/code&gt; 的可能&lt;/p&gt;
&lt;p&gt;我们来看一段代码，这里我们试图遍历一个 &lt;code&gt;int&lt;/code&gt; 类型的值&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/489462/202012/489462-20201228233628043-498856471.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;思考一下，我们可以怎么做使得上面的代码编译通过呢？&lt;/p&gt;
&lt;h2 id=&quot;迭代器模式&quot;&gt;迭代器模式&lt;/h2&gt;
&lt;p&gt;迭代器模式，提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。&lt;/p&gt;
&lt;p&gt;迭代器模式是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可以让外部代码透明地访问集合内部的数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;foreach&lt;/code&gt; 其实是一个迭代器模式的语法糖，用来遍历一个集合中的数据，&lt;code&gt;foreach&lt;/code&gt; 可以使用 &lt;code&gt;while&lt;/code&gt; 来实现，比如下面这个示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-csharp&quot;&gt;var enumerable = Enumerable.Range(1, 10).ToArray();
foreach (var i in enumerable)
{
    Console.WriteLine(i);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用 &lt;code&gt;while&lt;/code&gt; 重写之后类似下面这样的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-csharp&quot;&gt;var enumerator = enumerable.GetEnumerator();
while (enumerator.MoveNext())
{
    Console.WriteLine(enumerator.Current);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;c# 中的集合基本都实现了迭代器模式，可以直接使用 &lt;code&gt;foreach&lt;/code&gt; 来遍历，对于自定义的类型想要支持 &lt;code&gt;foreach&lt;/code&gt; 可以实现 &lt;code&gt;IEnumerable&lt;/code&gt; 或 &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;，对于没有实现迭代器的代码，是不是可以用 &lt;code&gt;foreach&lt;/code&gt; 呢&lt;/p&gt;
&lt;h2 id=&quot;enumerator&quot;&gt;Enumerator&lt;/h2&gt;
&lt;p&gt;我们再来看开篇提到的问题，怎么实现支持 &lt;code&gt;foreach&lt;/code&gt; 呢&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/489462/202012/489462-20201228233850498-556193090.png&quot; alt=&quot;vs tips&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上面 VS 的提示我们可以看得出来，如果一个类型想要支持 &lt;code&gt;foreach&lt;/code&gt;，有三种方式可以实现：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;实现 &lt;code&gt;IEnumerable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;实现 &lt;code&gt;IEnmuerable&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加 &lt;code&gt;GetEnumerator&lt;/code&gt; 方法，方法返回值类型需要有 &lt;code&gt;Current&lt;/code&gt; 属性和 &lt;code&gt;MoveNext&lt;/code&gt; 方法，可以参考这个 &lt;code&gt;IEnumerator&lt;/code&gt;，返回类型可以直接实现 &lt;code&gt;IEnumerator&lt;/code&gt; 或 &lt;code&gt;IEnumerator&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;那么如果是一个别人封装的类型，能否支持 &lt;code&gt;foreach&lt;/code&gt; 呢，从 C# 9 之后就可以了，可以添加一个 &lt;code&gt;GetEnumerator&lt;/code&gt; 的扩展方法，类似于下面&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-csharp&quot;&gt;public static class ForEachExtensions
{
    public static IEnumerator&amp;lt;char&amp;gt; GetEnumerator(this int num)
    {
        return num.ToString().GetEnumerator();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时如果是使用 C# 9 就可以编译通过了，如果手动设置了 &lt;code&gt;LangVersion&lt;/code&gt;，需要修改为 9，否则会得到类似下面这样的错误&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/489462/202012/489462-20201228233928345-932533576.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;添加使用扩展方法，并启用 C# 9 语法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/489462/202012/489462-20201228233957106-991315011.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/489462/202012/489462-20201228234013594-1497313298.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;more&quot;&gt;More&lt;/h2&gt;
&lt;p&gt;有了这个功能之后，一切类型都是可以 &lt;code&gt;foreach&lt;/code&gt; 的，没有实现迭代器模式的类型，只需要实现一个扩展方法就可以了&lt;/p&gt;
&lt;p&gt;迎接 C# 9 ，万物皆可 &lt;code&gt;foreach&lt;/code&gt; ~~&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
</description>
<pubDate>Mon, 28 Dec 2020 15:41:00 +0000</pubDate>
<dc:creator>WeihanLi</dc:creator>
<og:description>增加的 foreach</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/weihanli/p/14204347.html</dc:identifier>
</item>
<item>
<title>Angular实战之使用NG-ZORRO创建一个企业级中后台框架（进阶篇） - 追逐时光者</title>
<link>http://www.cnblogs.com/Can-daydayup/p/14176386.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Can-daydayup/p/14176386.html</guid>
<description>&lt;h2&gt;前言：&lt;/h2&gt;
&lt;p&gt;　　上一篇文章我们讲了如何在创建的Angular项目中快速引入ng-zorro-antd企业中台组件库，并且快速构建后台管理页面框架模板。这一章主要介绍的是如何在创建好的后台管理页面框架的快速生成NG-ZORRO相关的组件，并且介绍Angular相关目录结构、生命周期函数，路由配置和使用相关知识点，以及如何使用Angular CLI使用一行代码快速添加Angular应用的新功能。让你快熟的构建一个属于自己的NG-ZORRO后台管理框架，注意我们的前端代码的编写全部都是在VS Code上面编写。&lt;/p&gt;
&lt;h2&gt;Angular项目目录介绍（重要）：&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202012/1336199-20201226165120794-1776498248.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;8652-1592500311963&quot;&gt;app.module.ts（根模块）：&lt;/h3&gt;
&lt;blockquote readability=&quot;6.7358490566038&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;a class=&quot;code-anchor&quot; href=&quot;https://angular.cn/api/core/NgModule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 用于描述应用的各个部分如何组织在一起。 每个应用有至少一个 Angular 模块，根模块就是你用来启动此应用的模块。 按照惯例，它通常命名为 &lt;code&gt;AppModule&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div readability=&quot;10.5&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202012/1336199-20201228011451676-784046754.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;h3&gt;模块和组件关系：&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：一个模块可以有多个组件，一个组件也可以有多个样式表,但只有一个HTML模板。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
|--app.module.ts(模块)
 |--app.component.ts(组件)
 |--app.component.html(HTML模板)
 |--app.component.css(CSS样式表)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;目录结构描述：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
## 说明
```javascript
|-- 文件名 // 说明
|-- 首层目录
|-- e2e // 自动化集成测试目录
|-- node_modules // npm/cnpm第三方依赖包存放目录
|-- src // 应用源代码目录
|-- .editorconfig // 不同编译器统一代码风格
|-- .gitignore // git中的忽略文件列表
|-- angular.json // Angular的配置文件
|-- browserslist // 配置浏览器兼容性的文件
|-- karma.conf.js // 自动化测试框架Karma的配置文件
|-- package-lock.json // 依赖包版本锁定文件
|-- package.json // 标准的npm工具的配置文件
|-- README.md // 项目说明的MakeDown文件
|-- tsconfig.app.json // app项目的TypeScript的配置文件
|-- tsconfig.json // 整个工作区的TypeScript配置文件
|-- tsconfig.spec.json // 用于测试的TypeScript配置文件
|-- tslint.json // TypeScript的代码静态扫描配置

|-- src目录
|-- app // 工程源码目录
|-- assets // 资源目录
|-- environments // 环境配置目录
|-- favicon.ico // header里的icon
|-- index.html // 单页应用的宿主HTML
|-- main.ts // 入口ts文件
|-- polyfills.ts // 不同浏览器兼容脚本加载
|-- karma.conf.js // 自动化测试框架Karma的配置文件
|-- style.css // 整个项目的全局css
|-- test.ts // 测试入口

|-- app目录
|-- app-routing.module.ts // app路由
|-- app.component.css // app的css
|-- app.component.html // app的html
|-- app.component.spec.ts // app的测试
|-- app.component.ts // app的组件
|-- app.module.ts // app的模块
|-- environments目录
|-- environments.prod.ts // 生产环境
|-- environments.ts // 开发环境
```　
&lt;/pre&gt;&lt;/div&gt;
&lt;div readability=&quot;16.390889449046&quot;&gt;
&lt;h3&gt;详细目录详细介绍可查阅：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/nightnight/p/11186387.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/nightnight/p/11186387.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/yuzhiqiang_1993/article/details/71191873&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/yuzhiqiang_1993/article/details/71191873&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;6935-1592586472981&quot;&gt;Angular中的组件生命周期函数：&lt;/h2&gt;
&lt;h3 id=&quot;4656-1592586493616&quot;&gt;&lt;strong&gt;什么是生命周期函数？&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;通俗的来说，声明周期函数就是组件创建，组件更新，组件销毁是会触发的一系列方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当 Angular 使用构造函数新建一个组件或指令后，就会按下面的顺序在特定时刻调用这些生命周期钩子方法：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注意：constructor 构造函数（依赖注入，起到对应局部变量值初始化作用）： 除了使用简单的值对局部变量进行初始化之外，什么都不应该做！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;12.888742593812&quot;&gt;&lt;tr&gt;&lt;td data-cell-id=&quot;1118-1592587120965-cell-0-0&quot;&gt;
&lt;p&gt;钩子&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;1118-1592587120965-cell-0-1&quot;&gt;
&lt;p&gt;用途及时机&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5.214&quot;&gt;&lt;td data-cell-id=&quot;1118-1592587120965-cell-1-0&quot;&gt;
&lt;p&gt;ngOnChanges()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;1118-1592587120965-cell-1-1&quot; readability=&quot;7.0868644067797&quot;&gt;
&lt;div class=&quot;table-cell-line&quot; readability=&quot;7.206106870229&quot;&gt;当 Angular（重新）设置数据绑定输入属性时响应。 该方法接受当前和上一属性值的 &lt;a href=&quot;https://angular.cn/api/core/SimpleChanges&quot;&gt;SimpleChanges&lt;/a&gt; 对象&lt;/div&gt;
&lt;p&gt;在 ngOnInit() 之前以及所绑定的一个或多个输入属性的值发生变化时都会调用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6.5&quot;&gt;&lt;td data-cell-id=&quot;1118-1592587120965-cell-2-0&quot;&gt;
&lt;p&gt;ngOnInit()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;1118-1592587120965-cell-2-1&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;在 Angular 第一次显示数据绑定和设置指令/组件的输入属性之后，初始化指令/组件。&lt;/p&gt;
&lt;p&gt;在第一轮 ngOnChanges() 完成之后调用，只调用一次。[请求数据时使用]&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td data-cell-id=&quot;1118-1592587120965-cell-3-0&quot;&gt;
&lt;p&gt;ngDoCheck()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;1118-1592587120965-cell-3-1&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应。&lt;/p&gt;
&lt;p&gt;在每个变更检测周期中，紧跟在 ngOnChanges() 和 ngOnInit() 后面调用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td data-cell-id=&quot;1118-1592587120965-cell-4-0&quot;&gt;
&lt;p&gt;ngAfterContentInit()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;1118-1592587120965-cell-4-1&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;当 Angular 把外部内容投影进组件/指令的视图之后调用。&lt;/p&gt;
&lt;p&gt;第一次 ngDoCheck() 之后调用，只调用一次。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td data-cell-id=&quot;1118-1592587120965-cell-5-0&quot;&gt;
&lt;p&gt;ngAfterContentChecked()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;1118-1592587120965-cell-5-1&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;每当 Angular 完成被投影组件内容的变更检测之后调用。&lt;/p&gt;
&lt;p&gt;ngAfterContentInit() 和每次 ngDoCheck() 之后调用&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td data-cell-id=&quot;1118-1592587120965-cell-6-0&quot;&gt;
&lt;p&gt;ngAfterViewInit()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;1118-1592587120965-cell-6-1&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;当 Angular 初始化完组件视图及其子视图之后调用。&lt;/p&gt;
&lt;p&gt;第一次 ngAfterContentChecked() 之后调用，只调用一次。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td data-cell-id=&quot;1118-1592587120965-cell-7-0&quot;&gt;
&lt;p&gt;ngAfterViewChecked()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;1118-1592587120965-cell-7-1&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;每当 Angular 做完组件视图和子视图的变更检测之后调用。&lt;/p&gt;
&lt;p&gt;ngAfterViewInit() 和每次 ngAfterContentChecked() 之后调用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5.5&quot;&gt;&lt;td data-cell-id=&quot;1118-1592587120965-cell-8-0&quot;&gt;
&lt;p&gt;ngOnDestroy()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;1118-1592587120965-cell-8-1&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;每当 Angular 每次销毁指令/组件之前调用并清扫。 在这儿反订阅可观察对象和分离事件处理器，以防内存泄漏。&lt;/p&gt;
&lt;p&gt;在 Angular 销毁指令/组件之前调用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;使用Angular CLI快速添加功能到现有的Angular应用程序：&lt;/h2&gt;
&lt;h3&gt;Angular CLI介绍：&lt;/h3&gt;
&lt;blockquote readability=&quot;5.8432304038005&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/angular/angular-cli&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;Angular CLI&lt;/a&gt; 是一个命令行接口(Command Line Interface)，用于实现自动化开发工作流程。它允许你做以下这些事情：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建一个新的 Angular 应用程序&lt;/li&gt;
&lt;li&gt;运行带有 &lt;code&gt;LiveReload&lt;/code&gt; 支持的开发服务器，以便在开发过程中预览应用程序&lt;/li&gt;
&lt;li&gt;添加功能到现有的 Angular 应用程序&lt;/li&gt;
&lt;li&gt;运行应用程序的单元测试&lt;/li&gt;
&lt;li&gt;运行应用程序的端到端 (E2E) 测试&lt;/li&gt;
&lt;li&gt;构建应用程序&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;7E06469984C24E08B96238EB8B53328E&quot;/&gt;使用命令添加功能到现有的 Angular 应用程序：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;可以使用 &lt;code&gt;ng generate&lt;/code&gt; 命令，为已有的 Angular 应用程序添加新的功能：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
ng generate class my-new-class: 新建 class
ng generate component my-new-component: 新建组件
ng generate directive my-new-directive: 新建指令
ng generate enum my-new-enum: 新建枚举
ng generate module my-new-module: 新建模块
ng generate pipe my-new-pipe: 新建管道
ng generate service my-new-service: 新建服务
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ng generate&lt;/code&gt; 命令与其它的子命令一样，也有快捷键，具体如下：　&lt;/strong&gt;　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
ng g cl my-new-class: 新建 class
ng g c my-new-component: 新建组件
ng g d my-new-directive: 新建指令
ng g e my-new-enum: 新建枚举
ng g m my-new-module: 新建模块
ng g p my-new-pipe: 新建管道
ng g s my-new-service: 新建服务
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;在app/pages目录下创建我们的博客项目模块（带路由配置模块）：&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;　　我们在开发一个项目可能会存在多个模块，比如说一个商城。存在商品模块，订单模块，广告模块，销售管理等多个模块。那么这个时候我们需要把这些模块单独分离出来，按照模块化开发。接下来我将会通过开发一个简单的博客系统，主要分博客管理和用户管理两个模块。带领大家一步一步完善自己的项目模块页面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
ng generate module /pages/MyBlog  --routing
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202012/1336199-20201228173135273-1973453426.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;修改项目默认调转页面，Angular应用多模块路由配置：&lt;/h2&gt;
&lt;p&gt;找到app-routing.module.ts文件，在【routes】对象中声明新模块路由，以及项目默认调转页面地址修改。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202012/1336199-20201228222617143-771141679.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;在my-blog项目中创建博客后台页面首页组件，配置路由（多模块路由配置），声明运行组件：&lt;/h2&gt;
&lt;h3&gt;1、创建首页组件：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
ng generate component /pages/my-blog/index
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202012/1336199-20201228165710424-2072606746.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2、配置首页组件路由（多模块路由完美解决）：&lt;/h3&gt;
&lt;p&gt;首先，我们的博客项目存在博客管理和用户管理两个核心模块，我们创建了两个模块，那么我们如何在【app-routing.module.ts】应用路由文件中配置多个模块的路由，我们可以通过延迟加载子路由的方式来加载相关模块的子路由。如下所示&lt;/p&gt;
&lt;p&gt;前往【my-blog-routing.module.ts】文件中配置上新创建的首页组件的路由。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202012/1336199-20201228221609393-1077386245.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3、前往根模块【my-blog.module.ts】声明首页组件：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202012/1336199-20201228192828180-2130558674.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;自定义页面Layout&lt;span class=&quot;subtitle&quot;&gt;布局（动态菜单栏配置）：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;subtitle&quot;&gt;一般情况下我们的页面动态菜单都是从后台读取，然后遍历绑定在【app.component.html】页面中的，我们这里没有展示没有涉及到后台就是用固定式的路由。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;subtitle&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202012/1336199-20201228222808154-1319938378.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;项目样式效果：&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/1336199/202012/1336199-20201228233619957-1980848423.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;项目开源地址：&lt;/h2&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/YSGStudyHards/YyFlight-NG-ZORRO&quot; target=&quot;_blank&quot;&gt;https://github.com/YSGStudyHards/YyFlight-NG-ZORRO&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 28 Dec 2020 15:37:00 +0000</pubDate>
<dc:creator>追逐时光者</dc:creator>
<og:description>前言： 上一篇文章我们讲了如何在创建的Angular项目中快速引入ng-zorro-antd企业中台组件库，并且快速构建后台管理页面框架模板。这一章主要介绍的是如何在创建好的后台管理页面框架的快速生成</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/Can-daydayup/p/14176386.html</dc:identifier>
</item>
<item>
<title>某电研究生自救破局的关键一年 | 我的2020 - 努力的老刘</title>
<link>http://www.cnblogs.com/bigdatalaoliu/p/14204284.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bigdatalaoliu/p/14204284.html</guid>
<description>&lt;p class=&quot;md-end-block md-p md-focus&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;2020年对老刘来说是非常关键的一年，从2019年的迷茫到2020年的坚定，老刘很庆幸自己看清了某个人的自私自利，主动寻求自救破局的办法，坚持自学java大数据一年，成为一名准程序员。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;老刘把自己的经历分享出来，希望能给众多读研遇坑的同学提供帮助，让你们找到自己的自救破局办法！&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2214826/202012/2214826-20201228232205394-1731204095.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;1.1 背景&lt;/h2&gt;
&lt;p&gt;老刘在2019年考上某电研究生，雄心壮志，立志发几篇厉害的文章。可是在半年读研期间，发现某个人永远是为了自己的利益，压根不管我们的未来。老刘在19年年底也明白了自己研究的内容压根不能发文章也找不到工作，于是开始主动寻求自救破局的办法。&lt;/p&gt;
&lt;p&gt;“我是去自学编程呢？还是考公务员、选调生、军队文职、教资成为数学老师呢？”这个问题让老刘考虑了很久很久，最后还是选择了自学java大数据，成为一名程序员。在这里解释下为什么选择自学编程而不选择考公务员、选调生、军队文职、教资成为数学老师，给同样迷茫的大学生提供一些经验！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2214826/202012/2214826-20201228232309716-718083951.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先说下老刘的家庭情况，家境普通，在18线小城市的农村能勉勉强强生活下去。小时候，村里大多数小孩会在小学6年级或者初一选择不读书去广州打工做衣服，老刘到现在也没搞明白为什么当初爸妈没有让我辍学做衣服。&lt;/p&gt;
&lt;p&gt;老刘现在也在想如果当初去广州做衣服会不会比现在过得好！老刘读研的目的也很简单，就是想有个好平台，多挣点钱回报自己的爸妈，让他们过得好一点。&lt;/p&gt;
&lt;h3&gt;那为什么要学java大数据？&lt;/h3&gt;
&lt;p&gt;老刘大学四年学的是通信工程，有一些编程基础，现在程序员工资也相对高一点，所以就选择自学编程，并且发现师兄师姐们都是自学java或C++，而自己对数据相关的方向挺感兴趣的，于是特别想从事Java大数据开发的工作，读书生涯终于确定了一个明确的目标！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2214826/202012/2214826-20201228232329280-252775405.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-plain md-expand&quot;&gt;1.2 如何自学java大数据&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;接下里讲述老刘是如何自学java大数据的，以下内容对同样想自学大数据开发的同学非常有用！(老刘学知识的要求是对每个知识点都有自己的理解，能用自己的话解释出来)&lt;/p&gt;
&lt;p&gt;2020年年初，由于疫情，只能待在家里，很多科研任务压根进行不下去，所以很多时间就留给自己自学java大数据。首先是学习java基础知识，由于网上资源挺多，在这块内容花的时间并不多。 (这里推荐大家看毕向东的java基础视频)&lt;/p&gt;
&lt;p&gt;2020年暑假期间返校，虽然要继续进行科研项目，但是依然利用课余时间自学编程，学完java基础、数据库基础、Linux基础后，就开始学习大数据开发涉及到的框架。这块内容老刘推荐去b站看看尚硅谷的相关大数据视频，但是给个建议，网上很多机构的资料以及各种技术博客都有一个共同的缺点，它们对一些知识点解释的逻辑有点错误，需要自己重新组织话语！&lt;/p&gt;
&lt;p&gt;在刚开始学习hadoop框架的期间，由于笔记本8g的内存真的难以支持hadoop框架，老刘忍痛花了好几百给电脑进行升级，hadoop的搭建真的非常麻烦，对当时新手的我造成了极大的困难，总是出现各种错误，好在自己坚持下来，翻阅了无数博客，看无数免费的hadoop视频，终于将hadoop框架拿下，太不容易了！这里老刘想说大数据框架中hadoop确实有点难搞，因为才开始学，没经验，遇到困难容易丧失信心，大家一定要顶住，后面就轻松了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2214826/202012/2214826-20201228232409563-1432872102.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由于在一个完整的离线大数据处理系统中，除了hdfs+mapreduce+hive组成分析系统的核心之外，还需要数据采集、结果数据导出、任务调度等不可或缺的辅助系统，而这些辅助工具在hadoop生态体系中都有便捷的开源框架。于是接下来就学了ZooKeeper、kafka、hive、hbase、flume、sqoop、azkaban。&lt;/p&gt;
&lt;p&gt;学完这么多后，当时就根据这些技术学习了如何搭建离线数据仓库，里面也遇到很多bug，学习资料上真的太多错误了，如果只看视频不进行实践，真的等于没学，这是老刘最良心的话。&lt;/p&gt;
&lt;p&gt;在初步掌握构建数据仓库的各个部分后，赶紧接触了内存计算框架spark，按照学习步骤：是什么、有什么用、架构原理、相关应用，老刘能用自己的理解把这些知识点解释出来后，又学了特别受欢迎的实时计算框架flink。&lt;/p&gt;
&lt;p&gt;在自学spark和flink过程中，老刘犯了一个自学编程的人都会犯的错误，心太急了恨不得一个星期学完，忽略了很多细节，这是非常不好的情况，老刘用自己的亲身经历提醒同样自学的同学，一定要注意细节！&lt;/p&gt;
&lt;p&gt;学完java大数据内容的时间刚好是2020年12月份，不敢说学的多好，但是基本概念、原理大多能用自己的理解说出来。现在老刘做的就是把知识点全部巩固一遍，既然没有项目经历，就努力打基础。&lt;/p&gt;

&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;老刘讲述了自己2020年的自救破局经历，希望能给自学java大数据的同学带来帮助。虽然老刘文采不好，但绝对是用真诚的话写出来的！&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;2021年即将到来，老刘对2020年还是挺满意的，因为找到了自救破局的办法，把时间花在了该花的地方，没有对不起自己。在新的一年，希望自己能学好java大数据，找到一个满意的工作，给自己的一个满意的答复！Happy Coding Happy Life！&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p md-focus&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;如果有小伙伴想和我一起讨论大数据开发，可以联系公众号：努力的老刘。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-p md-focus&quot;&gt;&lt;span class=&quot;md-plain&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2214826/202012/2214826-20201228232551853-25916356.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 28 Dec 2020 15:27:00 +0000</pubDate>
<dc:creator>努力的老刘</dc:creator>
<og:description>2020年对老刘来说是非常关键的一年，从2019年的迷茫到2020年的坚定，老刘很庆幸自己看清了某个人的自私自利，主动寻求自救破局的办法，坚持自学java大数据一年，成为一名准程序员。 老刘把自己的经</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/bigdatalaoliu/p/14204284.html</dc:identifier>
</item>
</channel>
</rss>