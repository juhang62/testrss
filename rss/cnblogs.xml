<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Mybatis关系映射 - 风沙迷了眼</title>
<link>http://www.cnblogs.com/fsmly/p/10339619.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fsmly/p/10339619.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、一对一关系映射&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;使用resultType+包装类实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;1、假设问题背景是要求在某一个购物平台的后台程序中添加一个这样的功能：查询某个订单的信息和下该订单的用户信息。首先我们可以知道，一般这样的平台上面，某一笔订单只属于某一个用户，从这个角度来看，可以作为一对一的参考模型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　①首先创建数据表user（用户表）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; `&lt;span&gt;user&lt;/span&gt;&lt;span&gt;` (
  `uid` &lt;/span&gt;&lt;span&gt;INT&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
  `username` &lt;/span&gt;&lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `password` &lt;/span&gt;&lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `sex` &lt;/span&gt;&lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`uid`)
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;INNODB AUTO_INCREMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;utf8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　创建orders表（所用的订单表）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `orders` (
  `oid` &lt;/span&gt;&lt;span&gt;INT&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
  `total` &lt;/span&gt;&lt;span&gt;DOUBLE&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `ordertime` &lt;/span&gt;&lt;span&gt;DATETIME&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `name` &lt;/span&gt;&lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `uid` &lt;/span&gt;&lt;span&gt;INT&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`oid`),
  &lt;/span&gt;&lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; `FKC3DF62E5AA3D9C7` (`uid`),
  &lt;/span&gt;&lt;span&gt;CONSTRAINT&lt;/span&gt; `FKC3DF62E5AA3D9C7` &lt;span&gt;FOREIGN&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt; (`uid`) &lt;span&gt;REFERENCES&lt;/span&gt; `&lt;span&gt;user&lt;/span&gt;&lt;span&gt;` (`uid`)
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;INNODB AUTO_INCREMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;9004&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;utf8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190130152941469-1362209365.png&quot; alt=&quot;&quot; width=&quot;397&quot; height=&quot;180&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　②创建User和Order的实体类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_c944adf9-b9a8-4331-b6ff-d8b11f57057a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c944adf9-b9a8-4331-b6ff-d8b11f57057a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c944adf9-b9a8-4331-b6ff-d8b11f57057a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.po;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; uid;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String username;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String address;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String sex;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getUid() {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; uid;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setUid(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; uid) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.uid =&lt;span&gt; uid;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUsername() {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPassword() {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getAddress() {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; address;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getSex() {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sex;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUsername(String username) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAddress(String address) {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.address =&lt;span&gt; address;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setSex(String sex) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.sex =&lt;span&gt; sex;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User(String username, String password, String address, String sex) {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.address =&lt;span&gt; address;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.sex =&lt;span&gt; sex;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; 
&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User() {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;User{&quot; +
&lt;span&gt;63&lt;/span&gt;                 &quot;uid=&quot; + uid +
&lt;span&gt;64&lt;/span&gt;                 &quot;, username='&quot; + username + '\'' +
&lt;span&gt;65&lt;/span&gt;                 &quot;, password='&quot; + password + '\'' +
&lt;span&gt;66&lt;/span&gt;                 &quot;, address='&quot; + address + '\'' +
&lt;span&gt;67&lt;/span&gt;                 &quot;, sex='&quot; + sex + '\'' +
&lt;span&gt;68&lt;/span&gt;                 '}'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;User类&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_56c257cb-635b-418a-90fe-e5f10520e773&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_56c257cb-635b-418a-90fe-e5f10520e773&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_56c257cb-635b-418a-90fe-e5f10520e773&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.po;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Order {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; oid;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; total;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date ordettime;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getOid() {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; oid;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setOid(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; oid) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.oid =&lt;span&gt; oid;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; getTotal() {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; total;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setTotal(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; total) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.total =&lt;span&gt; total;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Date getOrdettime() {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ordettime;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setOrdettime(Date ordettime) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.ordettime =&lt;span&gt; ordettime;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;Order{&quot; +
&lt;span&gt;47&lt;/span&gt;                 &quot;oid=&quot; + oid +
&lt;span&gt;48&lt;/span&gt;                 &quot;, total=&quot; + total +
&lt;span&gt;49&lt;/span&gt;                 &quot;, ordettime=&quot; + ordettime +
&lt;span&gt;50&lt;/span&gt;                 &quot;, name='&quot; + name + '\'' +
&lt;span&gt;51&lt;/span&gt;                 '}'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Order类&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　③用于需要同时查询User和Order的信息，所以需要用到&lt;a href=&quot;https://www.cnblogs.com/fsmly/p/10335456.html&quot; target=&quot;_blank&quot;&gt;上一篇&lt;/a&gt;中讲到的POJO输出映射类型。具体来说就是，需要自定义一个OrderPoJo，其中包含我们要查询的Order和User信息，定义的OrderPoJo类型如下（这里我们可以使用继承的方式，如果我们查询结果中哪一个类的要查询结果多就继承该类，可以简便包装类的编写）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.po;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OrderPoJo &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Order{
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String username;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String address;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String sex;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUsername() {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUsername(String username) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getAddress() {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; address;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAddress(String address) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.address =&lt;span&gt; address;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getSex() {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sex;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setSex(String sex) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.sex =&lt;span&gt; sex;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;OrderPoJo{&quot; +
&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;super&lt;/span&gt;.toString() +
&lt;span&gt;37&lt;/span&gt;                 &quot;username='&quot; + username + '\'' +
&lt;span&gt;38&lt;/span&gt;                 &quot;, address='&quot; + address + '\'' +
&lt;span&gt;39&lt;/span&gt;                 &quot;, sex='&quot; + sex + '\'' +
&lt;span&gt;40&lt;/span&gt;                 '}'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　④编写好对应的实体类和包装类之后就开始写，mapper配置文件和mapper.java。mapper配置文件中我们只需要根据问题背景写好相应的Sql语句就好&lt;/p&gt;
&lt;p&gt; 　　这是编写好Sql的Mapper配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;mapper为根元素，namespace指定了命名空间&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.mapper.OrderMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findOrderAndUser&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;orderPoJo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        SELECT orders.*,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                user.username,user.sex,user.address
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                FROM orders,USER
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                WHERE oid = #{id} AND user.uid = orders.uid
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面是mapper接口中的一个方法，由于我们只需要完成这一个问题，所以OrderMapper接口也比较简单&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190130170242403-2043618825.png&quot; alt=&quot;&quot; width=&quot;384&quot; height=&quot;47&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　⑤编写好所有的文件后，使用Junit来测试文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.mapper;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.po.OrderPoJo;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.io.Resources;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSession;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactoryBuilder;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Before;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderMapperTest {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SqlSessionFactory sqlSessionFactory;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    @Before
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setUp() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testFindOrderAndUser() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         OrderMapper orderMapper = sqlSession.getMapper(OrderMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         OrderPoJo orderPoJo = orderMapper.findOrderAndUser(3&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        System.out.println(orderPoJo);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        sqlSession.close();
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　⑥我们来通过日志分析一下结果：最终能够按照既定的Sql查询出响应的结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190130170517645-1227149195.png&quot; alt=&quot;&quot; width=&quot;848&quot; height=&quot;191&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;使用resultMap在配置文件中实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　1、我们使用resultMap来进行测试的时候，首先需要注意的是，由于没有自定义包装类型，所以需要在原始的Order中添加User类型的属性，保证可以在Mapper配置文件中将查询到的User属性配置到user中，从而得到关联查询结果&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.po;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Order {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; oid;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; total;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date ordertime;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; User user;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getOid() {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; oid;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setOid(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; oid) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.oid =&lt;span&gt; oid;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; getTotal() {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; total;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setTotal(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; total) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.total =&lt;span&gt; total;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Date getOrdertime() {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ordertime;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setOrdertime(Date ordertime) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.ordertime =&lt;span&gt; ordertime;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User getUser() {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUser(User user) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.user =&lt;span&gt; user;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;Order{&quot; +
&lt;span&gt;56&lt;/span&gt;                 &quot;oid=&quot; + oid +
&lt;span&gt;57&lt;/span&gt;                 &quot;, total=&quot; + total +
&lt;span&gt;58&lt;/span&gt;                 &quot;, ordertime=&quot; + ordertime +
&lt;span&gt;59&lt;/span&gt;                 &quot;, name='&quot; + name + '\'' +
&lt;span&gt;60&lt;/span&gt;                 &quot;, user=&quot; + user +
&lt;span&gt;61&lt;/span&gt;                 '}'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、相关类和上面的内容一样，我们使用resultMap来实现，显然需要在Mapper中配置resultMap&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        订单关联User的查询resultMap
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        将查询的结果全部映射到Order类中
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;OrderResultMap&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.Order&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置映射订单&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;oid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;oid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;total&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;total&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;ordertime&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;ordertime&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置关联用户信息&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            association:用于映射关联查询单个对象的信息
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            property:用于设置将关联信息映射到Order的哪个属性中
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;association &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt; javaType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.User&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;uid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;uid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;address&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;address&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;association&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、然后在Mapper配置文件中使用resultMap类型的statment&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findOrderAndUserByResultMap&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;OrderResultMap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT orders.*,
                user.username,user.sex,user.address
                FROM orders,USER
                WHERE oid = #{id} AND user.uid = orders.uid
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4、结果同使用resultType的结果一样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190130190145143-1055493964.png&quot; alt=&quot;&quot; width=&quot;658&quot; height=&quot;111&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、一对多关系映射&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　 1、我们先分析一下orderitem和orders两张数据表的关系，我们能够想到一条订单中包含许多详细的订单条目信息，所以简单的得到下面的关系&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190130191736439-791146128.png&quot; alt=&quot;&quot; width=&quot;339&quot; height=&quot;164&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2、在上面的基础上，我们再创建一张orderitem数据表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `orderitem` (
  `itemid` &lt;/span&gt;&lt;span&gt;INT&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
  `&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;` &lt;span&gt;INT&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `subtotal` &lt;/span&gt;&lt;span&gt;DOUBLE&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `pid` &lt;/span&gt;&lt;span&gt;INT&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `oid` &lt;/span&gt;&lt;span&gt;INT&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`itemid`),
  &lt;/span&gt;&lt;span&gt;KEY&lt;/span&gt;&lt;span&gt;  (`oid`),
  &lt;/span&gt;&lt;span&gt;KEY&lt;/span&gt;&lt;span&gt;  (`pid`),
  &lt;/span&gt;&lt;span&gt;KEY&lt;/span&gt;&lt;span&gt;  (`oid`),
  &lt;/span&gt;&lt;span&gt;FOREIGN&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt; (`oid`) &lt;span&gt;REFERENCES&lt;/span&gt;&lt;span&gt; `orders` (`oid`),
  &lt;/span&gt;&lt;span&gt;FOREIGN&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt; (`pid`) &lt;span&gt;REFERENCES&lt;/span&gt;&lt;span&gt; `product` (`pid`)
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;INNODB AUTO_INCREMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;utf8
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　3、我们再创建相应的实体类orderitem&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_b475cc68-093b-4dfc-ba9a-1a3c066ba276&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b475cc68-093b-4dfc-ba9a-1a3c066ba276&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b475cc68-093b-4dfc-ba9a-1a3c066ba276&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.po;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderItem {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; itemid;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; count;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; subtotal;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pid;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getItemid() {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; itemid;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setItemid(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; itemid) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.itemid =&lt;span&gt; itemid;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getCount() {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; count;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setCount(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; count) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.count =&lt;span&gt; count;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; getSubtotal() {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; subtotal;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setSubtotal(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; subtotal) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.subtotal =&lt;span&gt; subtotal;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getPid() {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; pid;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setPid(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; pid) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.pid =&lt;span&gt; pid;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;OrderItem{&quot; +
&lt;span&gt;45&lt;/span&gt;                 &quot;itemid=&quot; + itemid +
&lt;span&gt;46&lt;/span&gt;                 &quot;, count=&quot; + count +
&lt;span&gt;47&lt;/span&gt;                 &quot;, subtotal=&quot; + subtotal +
&lt;span&gt;48&lt;/span&gt;                 &quot;, pid=&quot; + pid +
&lt;span&gt;49&lt;/span&gt;                 '}'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;orderitem实体类&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　4、类似于上面讲到的使用resultMap的方式，我们在Order中添加上orderitem这一属性，作用就是维护Order和Orderitem的关联关系&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_6e1b9ffe-158f-417a-be28-d22c1389c31c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6e1b9ffe-158f-417a-be28-d22c1389c31c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6e1b9ffe-158f-417a-be28-d22c1389c31c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.po;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Order {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; oid;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; total;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date ordertime;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; User user;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; List&amp;lt;OrderItem&amp;gt;&lt;span&gt; orderItems;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getOid() {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; oid;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setOid(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; oid) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.oid =&lt;span&gt; oid;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; getTotal() {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; total;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setTotal(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; total) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.total =&lt;span&gt; total;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Date getOrdertime() {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ordertime;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setOrdertime(Date ordertime) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.ordertime =&lt;span&gt; ordertime;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User getUser() {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUser(User user) {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.user =&lt;span&gt; user;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;OrderItem&amp;gt;&lt;span&gt; getOrderItems() {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; orderItems;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setOrderItems(List&amp;lt;OrderItem&amp;gt;&lt;span&gt; orderItems) {
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.orderItems =&lt;span&gt; orderItems;
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;Order{&quot; +
&lt;span&gt;67&lt;/span&gt;                 &quot;oid=&quot; + oid +
&lt;span&gt;68&lt;/span&gt;                 &quot;, total=&quot; + total +
&lt;span&gt;69&lt;/span&gt;                 &quot;, ordertime=&quot; + ordertime +
&lt;span&gt;70&lt;/span&gt;                 &quot;, name='&quot; + name + '\'' +
&lt;span&gt;71&lt;/span&gt;                 &quot;, user=&quot; + user +
&lt;span&gt;72&lt;/span&gt;                 &quot;, orderItems=&quot; + orderItems +
&lt;span&gt;73&lt;/span&gt;                 '}'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;修改后的Order类&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　5、我们先配置Mapper文件。使用collection配置实体类中的List属性（List&amp;lt;OrderItem&amp;gt;）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;查询Order和OrderItem的配置（一对多关系查询配置）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;OrderAndOrderItemByResultMap&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.Order&quot;&lt;/span&gt;&lt;span&gt; extends&lt;/span&gt;&lt;span&gt;=&quot;OrderResultMap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;使用extends，可以将某一段resultMap继承过来&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;OrderItem信息&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;collections:将查询到的多条信息映射到集合中
            property：将查询到的多条记录映射到Order中的相应属性中（orderItems）
            ofType：指的是要映射的集合中的JavaType&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;collection &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;orderItems&quot;&lt;/span&gt;&lt;span&gt; ofType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.OrderItem&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;itemid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;itemid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;count&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;count&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;subtotal&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;subtotal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;collection&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　6、然后将上面配置的resultMap加入到statment中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findOrderAndOrderItemByResultMap&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;OrderAndOrderItemByResultMap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT orders.*,
            user.username,
            user.sex,
            user.address,
            orderitem.itemid,
            orderitem.count,
            orderitem.subtotal
            FROM
            orders,
            USER,
            orderitem
            WHERE orders.oid = #{id} AND user.uid = orders.uid AND orderitem.oid = orders.oid
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　7、然后在Mapper接口中添加测试方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;一对多关系测试&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; Order findOrderAndOrderItemByResultMap(&lt;span&gt;int&lt;/span&gt; id) &lt;span&gt;throws&lt;/span&gt; Exception;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　8、将查询的结果进行输出可以发现能够正常查询出想要的结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
Order{oid=2, total=32.0, ordertime=Thu Dec 26 21:47:04 CST 2019, name='Lucy', user=User{uid=2, username='Rose', password='null', address='武汉市', sex='women'}, orderItems=[OrderItem{itemid=2, count=21, subtotal=32.0, pid=0}, OrderItem{itemid=4, count=32, subtotal=54.0, pid=0}]}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; 三、多对多关系映射&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1、问题背景就是查询User所购买的商品详细信息，即查询结果包括User信息和Product信息。我们先分析一下整个数据表之间的关系如下图所示&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190131115343387-600341051.png&quot; alt=&quot;&quot; width=&quot;612&quot; height=&quot;320&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2、在上面分析的基础上，我们创建Product数据表的对应的Product实体类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `product` (
  `pid` &lt;/span&gt;&lt;span&gt;INT&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
  `pname` &lt;/span&gt;&lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `shop_price` &lt;/span&gt;&lt;span&gt;DOUBLE&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`pid`)
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;INNODB AUTO_INCREMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;utf8
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_38e4ecf0-ec0f-4503-a4c8-ae4343ae8f99&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_38e4ecf0-ec0f-4503-a4c8-ae4343ae8f99&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_38e4ecf0-ec0f-4503-a4c8-ae4343ae8f99&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.po;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Product {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pid;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String pname;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; shop_price;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getPid() {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; pid;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setPid(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; pid) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.pid =&lt;span&gt; pid;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPname() {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; pname;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPname(String pname) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.pname =&lt;span&gt; pname;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; getShop_price() {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; shop_price;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setShop_price(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; shop_price) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.shop_price =&lt;span&gt; shop_price;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;Product{&quot; +
&lt;span&gt;35&lt;/span&gt;                 &quot;pid=&quot; + pid +
&lt;span&gt;36&lt;/span&gt;                 &quot;, pname='&quot; + pname + '\'' +
&lt;span&gt;37&lt;/span&gt;                 &quot;, shop_price=&quot; + shop_price +
&lt;span&gt;38&lt;/span&gt;                 '}'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Product实体类&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　3、一般编写Mapper配置文件可以使用resultMap或者resultType(+自定义扩展类型)来实现，这里，我们使用resultMap在Mapper配置文件中进行，所以需要在OrderItem类中添加Product类型的属性，修改后的OrderItem类如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_e88a1509-c154-4690-a5f6-562c6be52090&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e88a1509-c154-4690-a5f6-562c6be52090&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e88a1509-c154-4690-a5f6-562c6be52090&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.po;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderItem {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; itemid;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; count;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; subtotal;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Product product;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getItemid() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; itemid;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setItemid(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; itemid) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.itemid =&lt;span&gt; itemid;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getCount() {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; count;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setCount(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; count) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.count =&lt;span&gt; count;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; getSubtotal() {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; subtotal;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setSubtotal(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; subtotal) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.subtotal =&lt;span&gt; subtotal;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Product getProduct() {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; product;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setProduct(Product product) {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.product =&lt;span&gt; product;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;OrderItem{&quot; +
&lt;span&gt;46&lt;/span&gt;                 &quot;itemid=&quot; + itemid +
&lt;span&gt;47&lt;/span&gt;                 &quot;, count=&quot; + count +
&lt;span&gt;48&lt;/span&gt;                 &quot;, subtotal=&quot; + subtotal +
&lt;span&gt;49&lt;/span&gt;                 &quot;, product=&quot; + product +
&lt;span&gt;50&lt;/span&gt;                 '}'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;修改的OrderItem类&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　4、修改相应的实体类后，可以再Mapper配置文件中配置查询结果User信息以及关联的Order、OrderItem和所要的Product信息，配置如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;查询User和Product关系结果（多对多关系）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;UserAndProductResultMap&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.User&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;User信息&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;uid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;uid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;address&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;address&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;Order信息&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;collection &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;orders&quot;&lt;/span&gt;&lt;span&gt; ofType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.Order&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;oid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;oid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;total&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;total&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;ordertime&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;ordertime&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;OrderItem信息&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;collection &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;orderItems&quot;&lt;/span&gt;&lt;span&gt; ofType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.OrderItem&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;itemid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;itemid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;count&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;count&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;subtotal&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;subtotal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;association &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;product&quot;&lt;/span&gt;&lt;span&gt; javaType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;pid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;pid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;pname&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;pname&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;shop_price&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;shop_price&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;association&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;collection&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;collection&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　5、然后编写响应的Sql，并添加到Mapper中的statment中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findUsersAndProduct&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;UserAndProductResultMap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT orders.*,
            user.username,
            user.sex,
            user.address,
            orderitem.itemid,
            orderitem.count,
            orderitem.subtotal,
            product.pid,
            product.pname,
            product.shop_price
            FROM
            orders,
            USER,
            orderitem,
            product
            WHERE user.uid = orders.uid AND orderitem.oid = orders.oid
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　6、在Mapper.java中添加响应的方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt; findUsersAndProduct() &lt;span&gt;throws&lt;/span&gt; Exception;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　7、最后使用Junit测试结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190131113456883-1389772751.png&quot; alt=&quot;&quot; width=&quot;832&quot; height=&quot;94&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 04 Feb 2019 07:48:00 +0000</pubDate>
<dc:creator>风沙迷了眼</dc:creator>
<og:description>一、一对一关系映射 使用resultType+包装类实现 1、假设问题背景是要求在某一个购物平台的后台程序中添加一个这样的功能：查询某个订单的信息和下该订单的用户信息。首先我们可以知道，一般这样的平台</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fsmly/p/10339619.html</dc:identifier>
</item>
<item>
<title>SpringBoot基础系列-SpringCache使用 - 唯一浩哥</title>
<link>http://www.cnblogs.com/V1haoge/p/10351734.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/V1haoge/p/10351734.html</guid>
<description>&lt;p&gt;&lt;strong&gt;原创文章，转载请标注出处：&lt;a href=&quot;https://www.cnblogs.com/V1haoge/p/10351734.html&quot;&gt;《SpringBoot基础系列-SpringCache使用》&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;一概述&quot;&gt;一、概述&lt;/h2&gt;
&lt;p&gt;SpringCache本身是一个缓存体系的抽象实现，并没有具体的缓存能力，要使用SpringCache还需要配合具体的缓存实现来完成。&lt;/p&gt;
&lt;p&gt;虽然如此，但是SpringCache是所有Spring支持的缓存结构的基础，而且所有的缓存的使用最后都要归结于SpringCache，那么一来，要想使用SpringCache，还是要仔细研究一下的。&lt;/p&gt;
&lt;h2 id=&quot;二缓存注解&quot;&gt;二、缓存注解&lt;/h2&gt;
&lt;p&gt;SpringCache缓存功能的实现是依靠下面的这几个注解完成的。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@EnableCaching
@Configuration
public class CacheConfig {
    @Bean
    public CacheManager cacheManager() {
        SimpleCacheManager cacheManager = new SimpleCacheManager();
        cacheManager.setCaches(Arrays.asList(new ConcurrentMapCache(&quot;default&quot;)));
        return cacheManager;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;注意：在SpringBoot中使用SpringCache可以由自动配置功能来完成CacheManager的注册，SpringBoot会自动发现项目中拥有的缓存系统，而注册对应的缓存管理器，当然我们也可以手动指定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用该注解和如下XML配置具有一样的效果：&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;beans&amp;gt;
    &amp;lt;cache:annotation-driven/&amp;gt;
    &amp;lt;bean id=&quot;cacheManager&quot; class=&quot;org.springframework.cache.support.SimpleCacheManager&amp;gt;
        &amp;lt;property name=&quot;caches&quot;&amp;gt;
            &amp;lt;set&amp;gt;
                &amp;lt;bean class=&quot;org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean&amp;gt;
                    &amp;lt;property name=&quot;name&quot; value=&quot;default&quot;/&amp;gt;
                &amp;lt;/bean&amp;gt;
            &amp;lt;/set&amp;gt;
        &amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面来看看@EnableCaching的源码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Import(CachingConfigurationSelector.class)
public @interface EnableCaching {
    // 用于设置使用哪种代理方式，默认为基于接口的JDK动态代理（false），
    // 设置为true，则使用基于继承的CGLIB动态代理
    boolean proxyTargetClass() default false;
    // 用于设置切面织入方式(设置面向切面编程的实现方式)，
    // 默认为使用动态代理的方式织入，当然也可以设置为ASPECTJ的方式来实现AOP
    AdviceMode mode() default AdviceMode.PROXY;
    // 用于设置在一个切点存在多个通知的时候各个通知的执行顺序，默认为最低优先级，
    // 其中数字却大优先级越低，这里默认为最低优先级，int LOWEST_PRECEDENCE =
    // Integer.MAX_VALUE;，却是整数的最大值
    int order() default Ordered.LOWEST_PRECEDENCE;
}
public enum AdviceMode {
    PROXY,
    ASPECTJ
}
public interface Ordered {
    int HIGHEST_PRECEDENCE = Integer.MIN_VALUE;
    int LOWEST_PRECEDENCE = Integer.MAX_VALUE;
    int getOrder();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由上面的源码可以看出，缓存功能是依靠AOP来实现的。&lt;/p&gt;
&lt;h3 id=&quot;cacheable&quot;&gt;2.2 @Cacheable&lt;/h3&gt;
&lt;p&gt;该注解用于标注于方法之上用于标识该方法的返回结果需要被缓存起来，标注于类之上标识该类中所有方法均需要将结果缓存起来。&lt;/p&gt;
&lt;p&gt;该注解标注的方法每次被调用前都会触发缓存校验，校验指定参数的缓存是否已存在（已发生过相同参数的调用），若存在，直接返回缓存结果，否则执行方法内容，最后将方法执行结果保存到缓存中。&lt;/p&gt;
&lt;h4 id=&quot;使用&quot;&gt;2.2.1 使用&lt;/h4&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Service
@Log4j2
public class AnimalService {
    @Autowired
    private AnimalRepository animalRepository;
    //...
//    @Cacheable(&quot;animalById&quot;)
    @Cacheable(value = &quot;animalById&quot;, key = &quot;#id&quot;)
    public ResponseEntity&amp;lt;Animal&amp;gt; getAnimalById(final int id){
        return ResponseEntity.ok(animalRepository.selectById(id));
    }
    //...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的实例中两个@Cacheable配置效果其实是一样的，其中value指定的缓存的名称，它和另一个方法cacheName效果一样，一般来说这个缓存名称必须要有，因为这个是区别于其他方法的缓存的唯一方法。&lt;/p&gt;
&lt;p&gt;这里我们介绍一下缓存的简单结构，在缓存中，每个这样的缓存名称的名下都会存在着多个缓存条目，这些缓存条目对应在使用不同的参数调用当前方法时生成的缓存，所有一个缓存名称并不是一个缓存，而是一系列缓存。&lt;/p&gt;
&lt;p&gt;另一个key用于指定当前方法的缓存保存时的键的组合方式，默认的情况下使用所有的参数组合而成，这样可以有效区分不同参数的缓存。当然我们也可以手动指定，指定的方法是使用SPEL表达式。&lt;/p&gt;
&lt;p&gt;这里我么来简单看看其源码，了解下其他几个方法的作用：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface Cacheable {
    // 用于指定缓存名称，与cacheNames()方法效果一致
    @AliasFor(&quot;cacheNames&quot;)
    String[] value() default {};
    // 用于指定缓存名称，与value()方法效果一致
    @AliasFor(&quot;value&quot;)
    String[] cacheNames() default {};
    // 用于使用SPEL手动指定缓存键的组合方式，默认情况使用所有的参数来组合成键，除非自定义了keyGenerator。
    // 使用SPEL表达式可以根据上下文环境来获取到指定的数据：
    // #root.method：用于获取当前方法的Method实例
    // #root.target：用于获取当前方法的target实例
    // #root.caches：用于获取当前方法关联的缓存
    // #root.methodName：用于获取当前方法的名称
    // #root.targetClass：用于获取目标类类型
    // #root.args[1]：获取当前方法的第二个参数，等同于：#p1和#a1和#argumentName
    String key() default &quot;&quot;;
    // 自定义键生成器，定义了该方法之后，上面的key方法自动失效，这个键生成器是：
    // org.springframework.cache.interceptor.KeyGenerator，这是一个函数式接口，
    // 只有一个generate方法，我们可以通过自定义的逻辑来实现自定义的key生成策略。
    String keyGenerator() default &quot;&quot;;
    // 用于设置自定义的cacheManager(缓存管理器),可以自动生成一个cacheResolver
    // （缓存解析器），这一下面的cacheResolver()方法设置互斥
    String cacheManager() default &quot;&quot;;
    // 用于设置一个自定义的缓存解析器
    String cacheResolver() default &quot;&quot;;
    // 用于设置执行缓存的条件，如果条件不满足，方法返回的结果就不会被缓存，默认无条件全部缓存。
    // 同样使用SPEL来定义条件，可以使用的获取方式同key方法。
    String condition() default &quot;&quot;;
    // 这个用于禁止缓存功能，如果设置的条件满足，就不执行缓存结果，与上面的condition不同之处在于，
    // 该方法执行在当前方法调用结束，结果出来之后，因此，它除了可以使用上面condition所能使用的SPEL
    // 表达式之外，还可以使用#result来获取方法的执行结果，亦即可以根据结果的不同来决定是否缓存。
    String unless() default &quot;&quot;;
    // 设置是否对多个针对同一key执行缓存加载的操作的线程进行同步，默认不同步。这个功能需要明确确定所
    // 使用的缓存工具支持该功能，否则不要滥用。
    boolean sync() default false;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如何自定义一个KeyGenerator呢？&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class AnimalKeyGenerator implements KeyGenerator {
    @Override
    public Object generate(Object target, Method method, Object... params) {
        StringBuilder sb = new StringBuilder(&quot;animal-&quot;);
        sb.append(target.getClass().getSimpleName()).append(&quot;-&quot;).append(method.getName()).append(&quot;-&quot;);
        for (Object o : params) {
            String s = o.toString();
            sb.append(s).append(&quot;-&quot;);
        }
        return sb.deleteCharAt(sb.lastIndexOf(&quot;-&quot;)).toString();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;cacheput&quot;&gt;2.3 @CachePut&lt;/h3&gt;
&lt;p&gt;该注解用于更新缓存，无论结果是否已经缓存，都会在方法执行结束插入缓存，相当于更新缓存。一般用于更新方法之上。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Service
@Log4j2
public class AnimalService {
    @Autowired
    private AnimalRepository animalRepository;
    //...
    @CachePut(value = &quot;animalById&quot;, key = &quot;#animal.id&quot;)
    public ResponseEntity&amp;lt;Animal&amp;gt; updateAnimal(final Animal animal){
        Wrapper&amp;lt;Animal&amp;gt; animalWrapper = new UpdateWrapper&amp;lt;&amp;gt;();
        ((UpdateWrapper&amp;lt;Animal&amp;gt;) animalWrapper).eq(&quot;id&quot;,animal.getId());
        animalRepository.update(animal, animalWrapper);
        return ResponseEntity.ok(this.getAnimalById(animal.getId()));
    }
    //...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里指定更新缓存，value同样还是缓存名称，这里更新的是上面查询操作的同一缓存，而且key设置为id也与上面的key设置对应。&lt;/p&gt;
&lt;p&gt;如此设置之后，每次执行update方法时都会直接执行方法内容，然后将返回的结果保存到缓存中，如果存在相同的key,直接替换缓存内容执行缓存更新。&lt;/p&gt;
&lt;p&gt;下面来看看源码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface CachePut {
    // 同上
    @AliasFor(&quot;cacheNames&quot;)
    String[] value() default {};
    // 同上
    @AliasFor(&quot;value&quot;)
    String[] cacheNames() default {};
    // 同上
    String key() default &quot;&quot;;
    // 同上
    String keyGenerator() default &quot;&quot;;
    // 同上
    String cacheManager() default &quot;&quot;;
    // 同上
    String cacheResolver() default &quot;&quot;;
    // 同上
    String condition() default &quot;&quot;;
    // 同上
    String unless() default &quot;&quot;;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;只有一点要注意：这里的设置一定要和执行缓存保存的方法的@Cacheable的设置一致，否则无法准确更新。&lt;/p&gt;
&lt;h3 id=&quot;cacheevict&quot;&gt;2.4 @CacheEvict&lt;/h3&gt;
&lt;p&gt;该注解主要用于删除缓存操作。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Service
@Log4j2
public class AnimalService {
    @Autowired
    private AnimalRepository animalRepository;
    //...
    @CacheEvict(value = &quot;animalById&quot;, key = &quot;#id&quot;)
    public ResponseEntity&amp;lt;Integer&amp;gt; deleteAnimalById(final int id){
        return ResponseEntity.ok(animalRepository.deleteById(id));
    }
    //...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;简单明了，看看源码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface CacheEvict {
    // 同上
    @AliasFor(&quot;cacheNames&quot;)
    String[] value() default {};
    // 同上
    @AliasFor(&quot;value&quot;)
    String[] cacheNames() default {};
    // 同上
    String key() default &quot;&quot;;
    // 同上
    String keyGenerator() default &quot;&quot;;
    // 同上
    String cacheManager() default &quot;&quot;;
    // 同上
    String cacheResolver() default &quot;&quot;;
    // 同上
    String condition() default &quot;&quot;;
    // 这个设置用于指定当前缓存名称名下的所有缓存是否全部删除，默认false。
    boolean allEntries() default false;
    // 这个用于指定删除缓存的操作是否在方法调用之前完成，默认为false，表示先调用方法，在执行缓存删除。
    boolean beforeInvocation() default false;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;caching&quot;&gt;2.5 @Caching&lt;/h3&gt;
&lt;p&gt;这个注解用于组个多个缓存操作，包括针对不用缓存名称的相同操作等，源码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface Caching {
    // 用于指定多个缓存设置操作
    Cacheable[] cacheable() default {};
    // 用于指定多个缓存更新操作
    CachePut[] put() default {};
    // 用于指定多个缓存失效操作
    CacheEvict[] evict() default {};
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;简单用法：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Service
@Log4j2
public class AnimalService {
    @Autowired
    private AnimalRepository animalRepository;
    //...
    @Caching(
        evict = {
            @CacheEvict(value = &quot;animalById&quot;, key = &quot;#id&quot;),
            @CacheEvict(value = &quot;animals&quot;, allEntries = true, beforeInvocation = true)
        }
    )
    public ResponseEntity&amp;lt;Integer&amp;gt; deleteAnimalById(final int id){
        return ResponseEntity.ok(animalRepository.deleteById(id));
    }
    @Cacheable(&quot;animals&quot;)
    public ResponseEntity&amp;lt;Page&amp;lt;Animal&amp;gt;&amp;gt; getAnimalPage(final Animal animal, final int pageId, final int pageSize){
        Page&amp;lt;Animal&amp;gt; page = new Page&amp;lt;&amp;gt;();
        page.setCurrent(pageId);
        page.setSize(pageSize);
        return ResponseEntity.ok((Page&amp;lt;Animal&amp;gt;) animalRepository.selectPage(page,packWrapper(animal, WrapperType.QUERY)));
    }
    //...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;cacheconfig&quot;&gt;2.6 @CacheConfig&lt;/h3&gt;
&lt;p&gt;该注解标注于类之上，用于进行一些公共的缓存相关配置。源码为：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface CacheConfig {
    // 设置统一的缓存名，适用于整个类中的方法全部是针对同一缓存名操作的情况
    String[] cacheNames() default {};
    // 设置统一个键生成器，免去了每个缓存设置中单独设置
    String keyGenerator() default &quot;&quot;;
    // 设置统一个自定义缓存管理器
    String cacheManager() default &quot;&quot;;
    // 设置统一个自定义缓存解析器
    String cacheResolver() default &quot;&quot;;
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 04 Feb 2019 06:33:00 +0000</pubDate>
<dc:creator>唯一浩哥</dc:creator>
<og:description>原创文章，转载请标注出处： '《SpringBoot基础系列 SpringCache使用》' 一、概述 SpringCache本身是一个缓存体系的抽象实现，并没有具体的缓存能力，要使用SpringCa</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/V1haoge/p/10351734.html</dc:identifier>
</item>
<item>
<title>java 11 ZGC(可伸缩，低延迟的gc) - 西北野狼</title>
<link>http://www.cnblogs.com/androidsuperman/p/10351728.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/androidsuperman/p/10351728.html</guid>
<description>&lt;p&gt;ZGC, A Scalable Low-Latency Garbage Collector(Experimental)&lt;/p&gt;
&lt;p&gt;可伸缩，低延迟的gc&lt;/p&gt;
&lt;p&gt;ZGC, 这应该是JDK11最为瞩目的特性, 没有之一. 但是后面带了Experimental, 说明这还不建议用到生产环境.&lt;/p&gt;
&lt;p&gt;GC暂停时间不会超过10ms&lt;/p&gt;
&lt;p&gt;既能处理几百兆的小堆, 也能处理几个T的大堆(OMG)&lt;/p&gt;
&lt;p&gt;和G1相比, 应用吞吐能力不会下降超过15%&lt;/p&gt;
&lt;p&gt;为未来的GC功能和利用colord指针以及Load barriers优化奠定基础&lt;/p&gt;
&lt;p&gt;初始只支持64位系统&lt;/p&gt;
&lt;p&gt;ZGC的设计目标是：支持TB级内存容量，暂停时间低（&amp;lt;10ms），对整个程序吞吐量的影响小于15%。 将来还可以扩展实现机制，以支持不少令人兴奋的功能，例如多层堆（即热对象置于DRAM和冷对象置于NVMe闪存），或压缩堆。&lt;/p&gt;
&lt;p&gt;GC是java主要优势之一. 然而, 当GC停顿太长, 就会开始影响应用的响应时间.消除或者减少GC停顿时长, java将对更广泛的应用场景是一个更有吸引力的平台. 此外, 现代系统中可用内存不断增长,用户和程序员希望JVM能够以高效的方式充分利用这些内存, 并且无需长时间的GC暂停时间.&lt;/p&gt;
&lt;p&gt;STW – stop the world&lt;/p&gt;
&lt;p&gt;ZGC是一个并发, 基于region, 压缩型的垃圾收集器, 只有root扫描阶段会STW, 因此GC停顿时间不会随着堆的增长和存活对象的增长而变长.&lt;/p&gt;
&lt;p&gt;ZGC : avg 1.091ms max:1.681&lt;/p&gt;
&lt;p&gt;G1 : avg 156.806 max:543.846&lt;/p&gt;
&lt;p&gt;用法 : -XX:+UnlockExperimentalVMOptions –XX:+UseZGC, 因为ZGC还处于实验阶段, 所以需要通过JVM参数来解锁这个特性&lt;/p&gt;
</description>
<pubDate>Mon, 04 Feb 2019 06:24:00 +0000</pubDate>
<dc:creator>西北野狼</dc:creator>
<og:description>ZGC, A Scalable Low Latency Garbage Collector(Experimental) 可伸缩，低延迟的gc ZGC, 这应该是JDK11最为瞩目的特性, 没有之一.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/androidsuperman/p/10351728.html</dc:identifier>
</item>
<item>
<title>基于 Webpack 4 和 React hooks 搭建项目 - Jeff.Zhong</title>
<link>http://www.cnblogs.com/edwardloveyou/p/10351697.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/edwardloveyou/p/10351697.html</guid>
<description>&lt;p&gt;面对日新月异的前端，我表示快学不动了😂。 &lt;strong&gt;Webpack&lt;/strong&gt; 老早就已经更新到了 V4.x，前段时间 &lt;strong&gt;React&lt;/strong&gt; 又推出了 &lt;strong&gt;hooks&lt;/strong&gt; API。刚好春节在家里休假，时间比较空闲，还是赶紧把 &lt;strong&gt;React&lt;/strong&gt;技术栈这块补上。&lt;/p&gt;
&lt;p&gt;网上有很多介绍 &lt;strong&gt;hooks&lt;/strong&gt; 知识点的文章，但都比较零碎，基本只能写一些小 &lt;strong&gt;Demo&lt;/strong&gt;。还没有比较系统的，全新的基于 &lt;strong&gt;hooks&lt;/strong&gt; 进行搭建实际项目的讲解。所以这里就从开发实际项目的角度，搭建起单页面 &lt;strong&gt;Web App&lt;/strong&gt;项目的基本脚手架，并基于 &lt;strong&gt;hooks&lt;/strong&gt; API 实现一个 &lt;strong&gt;react&lt;/strong&gt; 项目模版。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hooks&lt;/strong&gt; 最吸引人的地方就是用 &lt;strong&gt;函数式组件&lt;/strong&gt; 代替面向对象的 &lt;strong&gt;类组件&lt;/strong&gt;。此前的 &lt;strong&gt;react&lt;/strong&gt; 如果涉及到状态，解决方案通常只能使用 &lt;strong&gt;类组件&lt;/strong&gt;，业务逻辑一复杂就容易导致组件臃肿，模块的解藕也是个问题。而使用基于 &lt;strong&gt;hooks&lt;/strong&gt; 的 &lt;strong&gt;函数组件&lt;/strong&gt; 后，代码不仅更加简洁，写起来更爽，而且模块复用也方便得多，非常看好它的未来。&lt;br/&gt;&lt;/p&gt;
&lt;h2 id=&quot;webpack-4-的配置&quot;&gt;webpack 4 的配置&lt;/h2&gt;
&lt;p&gt;没有使用 &lt;strong&gt;create-react-app&lt;/strong&gt; 这个脚手架，而是从头开始配置开发环境，因为这样自定义配置某些功能会更方便些。下面这个是通用的配置 &lt;strong&gt;webpack.common.js&lt;/strong&gt; 文件。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;const { resolve } = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CleanWebpackPlugin = require('clean-webpack-plugin');
const { HotModuleReplacementPlugin } = require('webpack');

module.exports = {
    entry: './src/index.js',//单入口
    output: {
        path: resolve(__dirname, 'dist'),
        filename: '[name].[hash].js'//输出文件添加hash
    },
    optimization: { // 代替commonchunk, 代码分割
        runtimeChunk: 'single',
        splitChunks: {
            cacheGroups: {
                vendor: {
                    test: /[\\/]node_modules[\\/]/,
                    name: 'vendors',
                    chunks: 'all'
                }
            }
        }
    },
    module: {
        rules: [
            {
                test: /\.jsx?$/,
                exclude: /node_modules/,
                use: ['babel-loader']
            },
            {
                test: /\.css$/,
                use: ['style-loader', 'css-loader']
            },
            {
                test: /\.scss$/,
                use: ['style-loader',
                    {
                        loader: 'css-loader',
                        options: {
                            importLoaders: 1,
                            modules: true,//css modules
                            localIdentName: '[name]___[local]___[hash:base64:5]'
                        },
                    },
                    'postcss-loader', 'sass-loader']
            },
            {   /* 
                当文件体积小于 limit 时，url-loader 把文件转为 Data URI 的格式内联到引用的地方
                当文件大于 limit 时，url-loader 会调用 file-loader, 把文件储存到输出目录，并把引用的文件路径改写成输出后的路径 
                */
                test: /\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\?.+)?$/,
                use: [{
                    loader: 'url-loader',
                    options: {
                        limit: 1000
                    }
                }]
            }
        ]
    },
    plugins: [
        new CleanWebpackPlugin(['dist']),//生成新文件时，清空生出目录
        new HtmlWebpackPlugin({
            template: './public/index.html',//模版路径
            favicon: './public/favicon.png',
            minify: { //压缩
                removeAttributeQuotes:true,
                removeComments: true,
                collapseWhitespace: true,
                removeScriptTypeAttributes:true,
                removeStyleLinkTypeAttributes:true
             },
        }),
        new HotModuleReplacementPlugin()//HMR
    ]
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接着基于 &lt;strong&gt;webpack.common.js&lt;/strong&gt; 文件，配置出开发环境的 &lt;strong&gt;webpack.dev.js&lt;/strong&gt; 文件，主要就是启动开发服务器。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;const merge = require('webpack-merge');
const common = require('./webpack.common.js');

module.exports = merge(common, {
    mode: 'development',
    devtool: 'inline-source-map',
    devServer: {
        contentBase: './dist',
        port: 4001,
        hot: true
    }
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;生成模式的 &lt;strong&gt;webpack.prod.js&lt;/strong&gt; 文件，只要定义了 &lt;strong&gt;mode:'production'&lt;/strong&gt;， &lt;strong&gt;webpack 4&lt;/strong&gt; 打包时就会自动压缩优化代码。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;const merge = require('webpack-merge');
const common = require('./webpack.common.js');

module.exports = merge(common, {
  mode: 'production',
  devtool: 'source-map'
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置 &lt;strong&gt;package.js&lt;/strong&gt; 中的 &lt;strong&gt;scripts&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
  &quot;scripts&quot;: {
     &quot;start&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,
     &quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;babel-的配置&quot;&gt;Babel 的配置&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;babel&lt;/strong&gt; 的 &lt;strong&gt;.babelrc&lt;/strong&gt; 文件， &lt;strong&gt;css module&lt;/strong&gt; 包这里推荐 &lt;em&gt;&lt;a href=&quot;https://github.com/gajus/babel-plugin-react-css-modules&quot;&gt;babel-plugin-react-css-modules&lt;/a&gt;&lt;/em&gt;。&lt;br/&gt;&lt;strong&gt;react-css-modules&lt;/strong&gt; 既支持全局的css(默认 &lt;strong&gt;className&lt;/strong&gt; 属性)，同时也支持局部css module( &lt;strong&gt;styleName&lt;/strong&gt; 属性)，还支持css预编译器，这里使用的是 &lt;strong&gt;scss&lt;/strong&gt;。&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
    &quot;presets&quot;: [
        &quot;@babel/preset-env&quot;,
        &quot;@babel/preset-react&quot;
    ],
    &quot;plugins&quot;: [
        &quot;@babel/plugin-proposal-class-properties&quot;,
        &quot;@babel/plugin-transform-runtime&quot;,
        [
            &quot;react-css-modules&quot;,
            {
                &quot;exclude&quot;: &quot;node_modules&quot;,
                &quot;filetypes&quot;: {
                    &quot;.scss&quot;: {
                        &quot;syntax&quot;: &quot;postcss-scss&quot;
                    }
                },
                &quot;generateScopedName&quot;: &quot;[name]___[local]___[hash:base64:5]&quot;
            }
        ]
    ]
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;react-项目&quot;&gt;React 项目&lt;/h2&gt;
&lt;p&gt;下面是项目基本的目录树结构，接着从入口开始一步步细化整个项目。&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;├ package.json
├ src
│ ├ component // 组件目录
│ ├ reducer   // reducer目录
│ ├ action.js
│ ├ constants.js
│ ├ context.js
│ └ index.js
├ public // 静态文件目录
│ ├ css
│ └ index.html
├ .babelrc
├ webpack.common.js
├ webpack.dev.js
└ webpack.prod.js&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;状态管理组件使用 &lt;strong&gt;redux&lt;/strong&gt;， &lt;strong&gt;react-router&lt;/strong&gt; 用于构建单页面的项目，因为使用了 &lt;strong&gt;hooks&lt;/strong&gt; API，所以不再需要 &lt;strong&gt;react-redux&lt;/strong&gt; 连接状态 &lt;strong&gt;state&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;入口文件 &lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;// index.js
import React, { useReducer } from 'react'
import { render } from 'react-dom'
import { HashRouter as Router, Route, Redirect, Switch } from 'react-router-dom'
import Context from './context.js'
import Home from './component/home.js'
import List from './component/list.js'
import rootReducer from './reducer'
import '../public/css/index.css'

const Root = () =&amp;gt; {
    const initState = {
        list: [
            { id: 0, txt: 'webpack 4' },
            { id: 1, txt: 'react' },
            { id: 2, txt: 'redux' },
        ]
    };
    // useReducer映射出state，dispatch
    const [state, dispatch] = useReducer(rootReducer, initState);
    // &amp;lt;Context.Provider value={{ state, dispatch }}&amp;gt; 基本代替了 react-redux 的 &amp;lt;Provider store={store}&amp;gt;
    return &amp;lt;Context.Provider value={{ state, dispatch }}&amp;gt;
        &amp;lt;Router&amp;gt;
            &amp;lt;Switch&amp;gt;
                &amp;lt;Route exact path=&quot;/&quot; component={Home} /&amp;gt;
                &amp;lt;Route exact path=&quot;/list&quot; component={List} /&amp;gt;
                &amp;lt;Route render={() =&amp;gt; (&amp;lt;Redirect to=&quot;/&quot; /&amp;gt;)} /&amp;gt;
            &amp;lt;/Switch&amp;gt;
        &amp;lt;/Router&amp;gt;
    &amp;lt;/Context.Provider&amp;gt;
}
render(
    &amp;lt;Root /&amp;gt;,
    document.getElementById('root')
)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;constants.js&lt;/strong&gt; ， &lt;strong&gt;action.js&lt;/strong&gt; 和 &lt;strong&gt;reducer.js&lt;/strong&gt; 与之前的写法是一致的。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;// constants.js
export const ADD_COMMENT = 'ADD_COMMENT'
export const REMOVE_COMMENT = 'REMOVE_COMMENT'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;action.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;// action.js
import { ADD_COMMENT, REMOVE_COMMENT } from './constants'

export function addComment(comment) {
  return {
    type: ADD_COMMENT,
    comment
  }
}

export function removeComment(id) {
  return {
    type: REMOVE_COMMENT,
    id
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;list.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;//list.js
import { ADD_COMMENT, REMOVE_COMMENT } from '../constants.js'

const list = (state = [], payload) =&amp;gt; {
    switch (payload.type) {
        case ADD_COMMENT:
            if (Array.isArray(payload.comment)) {
                return [...state, ...payload.comment];
            } else {
                return [...state, payload.comment];
            }
        case REMOVE_COMMENT:
            return state.filter(i =&amp;gt; i.id != payload.id);
        default: return state;
    }
};
export default list&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;reducer.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;//reducer.js
import { combineReducers } from 'redux'
import list from './list.js'
import user from './user.js'

const rootReducer = combineReducers({
  list,
  user
});

export default rootReducer&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最大区别的地方就是 &lt;strong&gt;component&lt;/strong&gt; 组件，基于 &lt;strong&gt;函数式&lt;/strong&gt;，内部的表达式就像是即插即用的插槽，可以很方便的抽取出通用的组件，然后从外部引用。相比之前的 &lt;strong&gt;面向对象&lt;/strong&gt; 方式，我觉得 &lt;strong&gt;函数表达式&lt;/strong&gt; 更受前端开发者欢迎。&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li&gt;&lt;strong&gt;useContext&lt;/strong&gt; 获取全局的 &lt;strong&gt;state&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;useRef&lt;/strong&gt; 代替之前的 &lt;strong&gt;ref&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;useState&lt;/strong&gt; 代替之前的 &lt;strong&gt;state&lt;/strong&gt;&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;useEffect&lt;/strong&gt; 则可以代替生命周期钩子函数&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;//监控数组中的参数，一旦变化就执行
useEffect(() =&amp;gt; { updateData(); },[id]);

//不传第二个参数的话，它就等价于每次componentDidMount和componentDidUpdate时执行
useEffect(() =&amp;gt; { updateData(); });

//第二个参数传空数组，等价于只在componentDidMount和componentWillUnMount时执行， 
//第一个参数中的返回函数用于执行清理功能
useEffect(() =&amp;gt; { 
    initData(); 
    reutrn () =&amp;gt; console.log('componentWillUnMount cleanup...'); 
}, []);&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最后就是实现具体界面和业务逻辑的组件了，下面是其中的List组件&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;// list.js
import React, { useRef, useState, useContext } from 'react'
import { bindActionCreators } from 'redux'
import { Link } from 'react-router-dom'
import Context from '../context.js'
import * as actions from '../action.js'
import Dialog from './dialog.js'
import './list.scss'

const List = () =&amp;gt; {
    const ctx = useContext(Context);//获取全局状态state
    const { user, list } = ctx.state;
    const [visible, setVisible] = useState(false);
    const [rid, setRid] = useState('');
    const inputRef = useRef(null);
    const { removeComment, addComment } = bindActionCreators(actions, ctx.dispatch);

    const confirmHandle = () =&amp;gt; {
        setVisible(false);
        removeComment(rid);
    }

    const cancelHandle = () =&amp;gt; {
        setVisible(false);
    }

    const add = () =&amp;gt; {
        const input = inputRef.current,
            val = input.value.trim();
        if (!val) return;
        addComment({
            id: Math.round(Math.random() * 1000000),
            txt: val
        });
        input.value = '';
    }

    return &amp;lt;&amp;gt;
        &amp;lt;div styleName=&quot;form&quot;&amp;gt;
            &amp;lt;h3 styleName=&quot;sub-title&quot;&amp;gt;This is list page&amp;lt;/h3&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;p&amp;gt;hello, {user.name} !&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;your email is {user.email} !&amp;lt;/p&amp;gt;
                &amp;lt;p styleName=&quot;tip&quot;&amp;gt;please add and remove the list item !!&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;ul&amp;gt; {
                list.map(l =&amp;gt; &amp;lt;li key={l.id}&amp;gt;{l.txt}&amp;lt;i className=&quot;icon-minus&quot; title=&quot;remove item&quot; onClick={() =&amp;gt; {
                    setVisible(true);
                    setRid(l.id);
                }}&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt;)
            } &amp;lt;/ul&amp;gt;
            &amp;lt;input ref={inputRef} type=&quot;text&quot; /&amp;gt;
            &amp;lt;button onClick={add} title=&quot;add item&quot;&amp;gt;Add Item&amp;lt;/button&amp;gt;
            &amp;lt;Link styleName=&quot;link&quot; to=&quot;/&quot;&amp;gt;redirect to home&amp;lt;/Link&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;Dialog visible={visible} confirm={confirmHandle} cancel={cancelHandle}&amp;gt;remove this item ?&amp;lt;/Dialog&amp;gt;
    &amp;lt;/&amp;gt;
}

export default List;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;项目代码&quot;&gt;项目代码&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/edwardzhong/webpack_react&quot; class=&quot;uri&quot;&gt;https://github.com/edwardzhong/webpack_react&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 04 Feb 2019 05:54:00 +0000</pubDate>
<dc:creator>Jeff.Zhong</dc:creator>
<og:description>面对日新月异的前端，我表示快学不动了😂。 Webpack 老早就已经更新到了 V4.x，前段时间 React 又推出了 hooks API。刚好春节在家里休假，时间比较空闲，还是赶紧把 React</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/edwardloveyou/p/10351697.html</dc:identifier>
</item>
<item>
<title>最简单的设计模式——单例模式的演进和推荐写法（Java 版） - dashuai的博客</title>
<link>http://www.cnblogs.com/kubixuesheng/p/10344533.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kubixuesheng/p/10344533.html</guid>
<description>&lt;p&gt;如下是之前总结的 C++ 版的；&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/kubixuesheng/p/4355055.html&quot;&gt;软件开发常用设计模式—单例模式总结（c++版）&lt;/a&gt;，对比发现 Java 实现的单例模式和 C++ 的在线程安全上还是有些区别的。&lt;/p&gt;
&lt;p&gt;概念不多说，没意思，我自己总结就是：&lt;/p&gt;
&lt;p&gt;有这样一个类，该类在生命周期内有且只能有一个实例，该类必须自己创建自己的这个唯一实例，该类必须给所有其他对象提供这一实例（提供全局访问点），这样的类就叫单例类。&lt;/p&gt;
&lt;p&gt;简单的说就是满足三个条件：&lt;/p&gt;
&lt;p&gt;1、生命周期内有且只能有一个实例&lt;/p&gt;
&lt;p&gt;2、自己提供这个独一无二的实例&lt;/p&gt;
&lt;p&gt;3、该实例必须是能全局访问的&lt;/p&gt;

&lt;p&gt;进一步，单例类，最好能实现懒加载，随用随生成，而不是初始化的时候就生成，提高启动速度和优化内存。&lt;/p&gt;
&lt;p&gt;还有应该考虑并发环境下的场景，多线程的单例模式实现有什么难点，回答这个问题，必须先知道Java的内存模型，参考：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/kubixuesheng/p/5202556.html&quot;&gt;JVM学习（3）——总结Java内存模型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑黑客会做反序列化的攻击&lt;/p&gt;
&lt;p&gt;考虑黑客会做反射的攻击，因为反射可以访问私有方法&lt;/p&gt;
&lt;p&gt;。。。&lt;/p&gt;

&lt;p&gt;如果程序确认没有多线程的使用场景，完全可以简单一些写。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; NoThreadSafeLazySingleton {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; NoThreadSafeLazySingleton lazySingleton = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; NoThreadSafeLazySingleton() {
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; NoThreadSafeLazySingleton getLazySingleton() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (lazySingleton == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            lazySingleton &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NoThreadSafeLazySingleton();
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lazySingleton;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很简单，但是只适用于单线程环境&lt;/p&gt;

&lt;p&gt;原理也很简单，没什么可说的，如下示例代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ThreadSafeLazySingleton {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; ThreadSafeLazySingleton lazySingleton = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ThreadSafeLazySingleton() {
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; ThreadSafeLazySingleton getLazySingleton() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (lazySingleton == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; (ThreadSafeLazySingleton.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (lazySingleton == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    lazySingleton &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ThreadSafeLazySingleton();
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lazySingleton;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主要是注意 volatile 关键字的使用，否则这种所谓双重检查的线程安全的单例是有 bug 的。参考：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/kubixuesheng/p/5202556.html&quot;&gt;JVM学习（3）——总结Java内存模型&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在某些情况中，JVM 隐含了同步操作，这些情况下就不用自己再来进行同步控制了。这些情况包括：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;由静态初始化器（在静态字段上或static{}块中的初始化器）初始化数据时&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问final字段时&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在创建线程之前创建对象时&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;线程可以看见它将要处理的对象时&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在静态内部类里去创建本类（外部类）的对象，这样只要不使用这个静态内部类，那就不创建对象实例，从而同时实现延迟加载和线程安全。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer age;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Person() {
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Person(String name, Integer age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在静态内部类里去创建本类（外部类）的对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Person getInstance() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Holder.instatnce;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 静态内部类相当于外部类 Person 的 static 域，它的对象与外部类对象间不存在依赖关系，因此可直接创建。
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 因为静态内部类相当于其外部类 Person 的静态成员，所以在第一次被使用的时候才被会装载，且只装载一次。&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Holder {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 内部类的对象实例 instatnce ，是绑定在外部 Person 对象实例中的
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 静态内部类中可以定义静态方法，在静态方法中只能够引用外部类中的静态成员方法或者成员变量，比如 new Person
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用静态初始化器来实现线程安全的单例类，它由 JVM 来保证线程安全性。&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Person instatnce = &lt;span&gt;new&lt;/span&gt; Person(&quot;John&quot;, 31&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;静态内部类相当于外部类 Person 的 static 域（静态成员），它的对象与外部类对象间不存在依赖关系，因此可直接创建。&lt;/p&gt;
&lt;p&gt;既然，静态内部类相当于其外部类 Person 的静态成员，所以在第一次被使用的时候才被会装载，且只装载一次，实现了懒加载和单例。&lt;/p&gt;
&lt;p&gt;而且，使用静态初始化器来实现单例类，是线程安全的，因为由 JVM 来保证线程安全性&lt;/p&gt;
&lt;p&gt;客户端调用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    Person person = Person.getInstance();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该方案实现了，线程安全的单例 + 懒加载的单例，但是并不能防反序列化攻击，需要额外的加以约束。&lt;/p&gt;

&lt;p&gt;其实这个 case 没必要说太多，知道就行，因为哪里就这么巧，一个能序列化的类（实现了Serializable/Externalizable接口的类），就恰恰是单例的呢？&lt;/p&gt;
&lt;p&gt;看下面例子，把 Person 类改造为能序列化的类，然后用反序列攻击单例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SerializationTest {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException, ClassNotFoundException {
        Person person &lt;/span&gt;=&lt;span&gt; Person.getInstance();
        ObjectOutputStream objectOutputStream &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ObjectOutputStream(&lt;span&gt;new&lt;/span&gt; FileOutputStream(&quot;person&quot;&lt;span&gt;));
        objectOutputStream.writeObject(person);

        ObjectInputStream objectInputStream &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ObjectInputStream(&lt;span&gt;new&lt;/span&gt; FileInputStream(&quot;person&quot;&lt;span&gt;));
        Person person1 &lt;/span&gt;=&lt;span&gt; (Person) objectInputStream.readObject();

        System.out.println(person &lt;/span&gt;== person1); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比较两个 person 实例地址，是 false，说明生成了两个对象，违背了单例类的初衷，那么为了能在序列化过程仍能保持单例的特性，可以在Person类中添加一个readResolve()方法，在该方法中直接返回Person的单例对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object readResolve() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Holder.instatnce;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;原理是当从 I/O 流中读取对象时，ObjectInputStream 类里有 readResolve() 方法，该方法会被自动调用，期间经过种种逻辑，最后会调用到可序列化类里的 readResolve()方法，这样可以用 readResolve() 中返回的单例对象直接替换在反序列化过程中创建的对象，实现单例特性。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;也就是说，无论如何，反序列化都会额外创建对象，只不过使用 readResolve() 方法可以替换之。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt;具体有关Java 对象的序列化可以参考笔记：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/kubixuesheng/p/10350523.html&quot;&gt;深入理解Java对象序列化&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;直接看例子，做法很简单，通过 Java 的反射机制，看看能不能拿到单例类的私有构造器，并且改变构造器的访问属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ReflectTest {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException {
        Person person &lt;/span&gt;=&lt;span&gt; Person.getInstance();

        Class clazz &lt;/span&gt;= Class.forName(&quot;com.dashuai.D13Singleton.Person&quot;&lt;span&gt;);
        Constructor constructor &lt;/span&gt;=&lt;span&gt; clazz.getDeclaredConstructor();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        constructor.setAccessible(true);&lt;/span&gt;
        Person person1 =&lt;span&gt; (Person) constructor.newInstance();

        System.out.println(person &lt;/span&gt;== person1); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行抛出了异常：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/682679/201902/682679-20190204004404503-618213571.png&quot; alt=&quot;&quot; width=&quot;691&quot; height=&quot;84&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是，如果把注释的行打开，就不会出错，且打印 false。&lt;/p&gt;
&lt;p&gt;网上有一些解决方案，比如在构造器里加判断，如果二次调用就抛出异常，其实也没从根本上解决问题。&lt;/p&gt;

&lt;p&gt;目前公认的最佳方案，代码极少，线程安全，防止反射和序列化攻击&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; EnumSingleton {
    ENUM_SINGLETON;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
}
&lt;/span&gt;&lt;span&gt;////////////////////////&lt;/span&gt;&lt;span&gt;调用&lt;/span&gt;
EnumSingleton.ENUM_SINGLETON.setName(&quot;dashuai&quot;&lt;span&gt;);
System.out.println(EnumSingleton.ENUM_SINGLETON.getName());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所有的变量都是单例的。至于为什么，可以通过反编译工具查看枚举的源码。可以安装 idea 的 jad 插件，会发现就是按照单例模式设计的。&lt;/p&gt;

&lt;p&gt;享元模式是对象级别的, 也就是说在多个使用到这个对象的地方都只需要使用这一个对象即可满足要求。&lt;/p&gt;
&lt;p&gt;单例模式是类级别的, 就是说这个类必须只能实例化出来一个对象。&lt;/p&gt;
&lt;p&gt;可以这么说, 单例是享元的一种特例, 设计模式不用拘泥于具体代码, 代码实现可能有n多种方式, 而单例可以看做是享元的实现方式中的一种, 他比享元模式更加严格的控制了对象的唯一性&lt;/p&gt;

&lt;p&gt;1、单例类只能有一个实例。&lt;/p&gt;
&lt;p&gt;2、单例类必须自己创建自己的唯一实例。&lt;/p&gt;
&lt;p&gt;3、单例类必须给所有其他对象提供这一实例。&lt;/p&gt;

&lt;p&gt;java.lang.runtime getRuntime，代码也很简单。 &lt;/p&gt;
</description>
<pubDate>Mon, 04 Feb 2019 03:11:00 +0000</pubDate>
<dc:creator>dashuai的博客</dc:creator>
<og:description>前言 如下是之前总结的 C++ 版的；软件开发常用设计模式—单例模式总结（c++版），对比发现 Java 实现的单例模式和 C++ 的在线程安全上还是有些区别的。 概念不多说，没意思，我自己总结就是：</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kubixuesheng/p/10344533.html</dc:identifier>
</item>
<item>
<title>ES6躬行记（7）——代码模块化 - 咖啡机（K.F.J）</title>
<link>http://www.cnblogs.com/strick/p/10173976.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/strick/p/10173976.html</guid>
<description>&lt;p&gt;　　在ES6之前，由于ECMAScript不具备模块化管理的能力，因此往往需要借助第三方类库（例如遵守AMD规范的RequireJS或遵循CMD规范的SeaJS等）才能实现模块加载。而自从ES6引入了模块化标准后，就不需要再特地加载一次外部脚本了。模块化的语法不仅让JavaScript代码的组织变得更有条理，还包含封装、按需导出或导入等实用功能，可轻松应对日益复杂和庞大的前端工程。但有一点要注意，模块中的代码默认运行在严格模式中。&lt;/p&gt;

&lt;p&gt;　　一个模块就是一个独立的JavaScript文件，如果要读取文件内的变量、函数或类（ES6新增的概念），那么必须先将它们用export关键字导出，因为它们默认都是私有的。导出的方式有多种，下面会依依列举。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1）第一种&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　将export关键字放在变量、函数等声明之前，常被称为命名导出（named export），如下所示。注意，命名导出的变量或函数都需要有名称，否则会抛出语法错误。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
export let name = &quot;strick&quot;&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getName() {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;strick&quot;&lt;span&gt;;
}
export class people {
  getName() {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;strick&quot;&lt;span&gt;;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　以上述代码中的name变量为例，本质上，export导出的是变量本身的引用，也就是为该变量在两个模块之间建立一种关联（即绑定）。如果变量在模块内部实时更新了，那么导出的变量的值也会随之改变。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）第二种&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　第二种也叫命名导出，只是形式不同，声明和导出会分成两步，要导出的标识符会用花括号包裹起来，如下代码所示。此时，还能通过as关键字为导出的变量、函数等设置别名。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
let age = 28&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getAge() {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 28&lt;span&gt;;
}
export { age, getAge };
export { age as myAge, getAge as getMyAge };        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置别名&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3）第三种&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　第三种用于导出模块的全部或部分成员（例如变量、函数或类等），此时需要包含四部分，分别是导出标识符、模块路径（也叫模块说明符，module specifier）以及两个关键字：export和from。如果要导出全部，那么导出标识符得用星号（*）表示；而如果只要导出部分，那么导出标识符可以像第二种命名导出那么写，具体如下代码所示。注意，模块路径不能简写，需要以“/”、“./”或“../”开头，千万不要因为文件在同级就省略相应的字符。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
export * from &quot;./1.js&quot;;                    　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;导出全部&lt;/span&gt;
export { name, age } from &quot;./1.js&quot;;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;导出部分&lt;/span&gt;
export { getAge as getMyAge } from &quot;./1.js&quot;;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;导出部分并设置别名&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面代码的第二条导出语句，其实可以分解成下面两条语句，第三条也有类似的分解。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
import { name, age } from &quot;./1.js&quot;&lt;span&gt;;
export { name, age };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　如果想导入某个模块的成员，可以使用import关键字。它的语法与前面第三种导出方式类似，也包含四个部分，分别是导入标识符、模块路径以及两个关键字：import和from，其中模块路径也不能简写，如下代码所示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
import * as people from &quot;./1.js&quot;;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;导入全部&lt;/span&gt;
import { name, age } from &quot;./1.js&quot;;              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;导入部分&lt;/span&gt;
import { getAge as getMyAge } from &quot;./1.js&quot;;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;导入部分并设置别名&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意上面的第一行代码，使用了命名空间导入（Namespace Import）。与导出模块的全部成员不同，在导入时，除了要与星号组合之外，还必须为其设置别名。这是由于加载的整个模块会被当成一个对象，而此对象需要一个名称，它的属性就是该模块所有的导出。另外两行使用了命名导入（Named Import），花括号内的导入标识符要与模块的导出标识符一一对应。&lt;/p&gt;
&lt;p&gt;　　import语句在内部实现了单例模式，尽管上面代码对同一个模块执行了三次导入，但该模块只会被实例化一次。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1）只读变量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　用import导入的变量都是只读的，相当于为它添加了const限制，如果在模块中为其重新赋值，那么必会引起类型错误。想要更新导入的变量的值，有一种间接的实现办法，如下代码所示，先在要导出的1.js模块内定义name变量和setName()函数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
export let name = &quot;strick&quot;&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; setName(str) {
  name &lt;/span&gt;=&lt;span&gt; str;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后在另一个模块中导入刚刚的两个成员，接着将新的name值通过setName()函数传入到1.js模块内部进行更新，如下代码所示，name变量最终输出的结果正是那个新值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
import { name, setName } from &quot;./1.js&quot;&lt;span&gt;;
console.log(name);        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;strick&quot;&lt;/span&gt;
setName(&quot;freedom&quot;&lt;span&gt;);
console.log(name);        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;freedom&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2）成员提升&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　从模块中导入的成员默认都会被提升至当前模块作用域的顶部，类似于声明提升。因此，像下面这样的写法都是正确的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;console.log(age);
getAge();
import { age, getAge } from &lt;/span&gt;&quot;./1.js&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3）简洁导入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　import语句中的导入标识符和from关键字都是可选的，但要注意，只有当两者一起省略时，语句才能被正确执行，如下所示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
import &quot;./jquery.js&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　由于import加载的模块都会被执行一次，因此可以用上面这种简洁导入来实现脚本的预加载。而这些脚本既可以是自己封装的代码段，也可以是jQuery、Zepto等第三方类库。&lt;/p&gt;

&lt;p&gt;　　ES6中的default关键字可指定模块的默认值（例如变量、函数或类等），即为模块指定默认的导出和导入。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1）默认导出&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　一个模块只能存在一个默认导出，下面会列出默认导出的四种写法，为了便于比较，将它们放在了一起。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
let name = &quot;strick&quot;&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; name;                　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;写法一&lt;/span&gt;
export &lt;span&gt;default&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; getName() {    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;写法二&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; &quot;strick&quot;&lt;span&gt;;
}
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;() {            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;写法三&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; &quot;strick&quot;&lt;span&gt;;
}
export { name as &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; };            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;写法四&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　export语句中的default其实就是要导出的模块成员，它的名称就叫default，而default后面能够跟一个表达式、命名函数或匿名函数，注意观察上面代码的前三种写法。第四种写法比较特殊，是在命名导出时，将标识符重命名成default。&lt;/p&gt;
&lt;p&gt;　　默认导出可以简单的理解为给default赋值，因此下面的前两条语句都能被正确执行，而第三条语句由于包含了声明变量的关键字（let），所以会引起语法错误。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
export &lt;span&gt;default&lt;/span&gt; name = &quot;strick&quot;&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &quot;strick&quot;&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; let name = &quot;strick&quot;;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;语法错误&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2）默认导入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　如果要导入模块的默认值，那么可以像下面这样写，同样，为了便于比较，将它们放在了一起。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
import name from &quot;./1.js&quot;;                　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;写法一&lt;/span&gt;
import name, { age } from &quot;./1.js&quot;;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;写法二&lt;/span&gt;
import name, * as people from &quot;./1.js&quot;;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;写法三&lt;/span&gt;
import { &lt;span&gt;default&lt;/span&gt; as myName } from &quot;./1.js&quot;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;写法四&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　因为模块只能有一个默认导出，所以对应的导入标识符可以不用花括号包裹（注意观察前三种写法），不仅如此，还能像第四种写法那样通过default关键字为其重命名。但有一点要注意，当同时使用默认和非默认的导入标识符时，必须把默认的写在前面。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;1）模块路径&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　由于ES6中的模块被设计成了静态的，因此需要在编译阶段就明确模块之间的依赖关系，而不是在运行过程中动态计算，像下面这样将模块路径设为变量或表达式都是错误的写法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
let path = &quot;./1.js&quot;&lt;span&gt;;
export &lt;/span&gt;* from path;                　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;变量&lt;/span&gt;
export * from &quot;./&quot; + &quot;1.js&quot;;            　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;表达式&lt;/span&gt;
import * as people from path;        　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;变量&lt;/span&gt;
import * as people from &quot;./&quot; + &quot;1.js&quot;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;表达式&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2）作用域&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　export和import语句都是静态的，无法动态导出和导入。因此只能出现在模块的顶层作用域中，而不能出现在块级或函数作用域中，下面的写法都会引起语法错误。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;函数作用域&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getName() {
  export &lt;/span&gt;* from &quot;./1.js&quot;&lt;span&gt;;
  import &lt;/span&gt;* as people from &quot;./1.js&quot;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;块级作用域&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
  export &lt;/span&gt;* from &quot;./1.js&quot;&lt;span&gt;;
  import &lt;/span&gt;* as people from &quot;./1.js&quot;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3）标识符&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　导出和导入语句中的标识符如果重复，那么也会引起语法错误，如下所示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
export { name, name } from &quot;./1.js&quot;&lt;span&gt;;
import { name, name } from &lt;/span&gt;&quot;./1.js&quot;;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　在浏览器中，无论是以外部还是内联的方式嵌入模块文件，都需要将它的type属性设为“module”，如下代码所示。并且在加载模块时为了避免脚本阻塞，会自动应用布尔属性defer，即HTML文档的解析和模块文件的下载是同时进行的，待到解析完后才会执行模块。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;1.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;module&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;module&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  import { name } from &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;./1.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;; 
  console.log(name);
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;2.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;module&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面代码会被依次执行，先执行第一个外部模块，再执行内联模块，最后执行第二个外部模块。注意，在每个模块中用import导入的其它模块也会被解析和下载，并且同一个模块每次只能被加载一次。&lt;/p&gt;

</description>
<pubDate>Mon, 04 Feb 2019 01:47:00 +0000</pubDate>
<dc:creator>咖啡机（K.F.J）</dc:creator>
<og:description>在ES6之前，由于ECMAScript不具备模块化管理的能力，因此往往需要借助第三方类库（例如遵守AMD规范的RequireJS或遵循CMD规范的SeaJS等）才能实现模块加载。而自从ES6引入了模块</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/strick/p/10173976.html</dc:identifier>
</item>
<item>
<title>进行概念详解 多线程上篇（二） - noteless</title>
<link>http://www.cnblogs.com/noteless/p/10350186.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/noteless/p/10350186.html</guid>
<description>&lt;p&gt;&lt;span&gt;操作系统是程序与硬件交互的中间层，现代操作系统将程序的一次执行抽象为进程和线程的概念。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;进程作为资源分配的基本单位，线程作为执行的基本单位。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;进程和线程其实就是操作系统程序本身实现控制一个程序运行的数据项描述&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;所有的程序都是面向语言进行开发的，而语言本身是面向操作系统的，线程是操作系统对程序一次运行的抽象&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以，所有的多线程编程模型，必然遵从操作系统的大逻辑，必然是符合操作系统的对线程的抽象概念，操作系统在抽象之上提供了API供应用程序调用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;简言之，应用程序的底层是借助于操作系统来完成多线程编程模型的，所以怎么可能逾越系统这一根本？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本篇对操作系统中线程进程相关概念进行简单介绍&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;进程&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在很久很久之前的串行执行时，程序按顺序加载到计算机中并运行，程序独占计算机的所有资源&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;程序具有顺序性，封闭性和可重现性&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;多道程序出现之后，程序需要并发的执行，计算机的资源是共享的，而不再是某一程序运行后独享&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;所以不再是顺序的，而是间断的，也不再是封闭，也不再具有可重现性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125847889-1420880069.png&quot;&gt;&lt;img title=&quot;image_5c56750f_433&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125848409-1166457291.png&quot; alt=&quot;image_5c56750f_433&quot; width=&quot;909&quot; height=&quot;606&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;还是以做饭为例，当只有你一个人使用厨房时，你可以随便；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是当多个人共享时，如果你还把你自己切了一半的菜扔到那边，可能会被扔掉，可能会被用掉，当然也可能没事。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了解决程序并发执行的问题，进程的概念被抽象出来，其实就相当于“一个厨房使用规章”被制定出来&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以说进程和线程就是操作系统用来管理维护一个程序的运行于切换而设计出来的一个概念，然后通过各种数据结构以及值等实现描绘出来&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;进程实体&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一个程序的运行主要下面几个部分的数据&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;进程本身的信息（现在谁在用厨房？现在盆盆罐罐都被你放了什么？）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可执行的代码是哪些？（菜谱步骤是什么？）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;程序运行所需要的数据是什么？（食材是什么？佐料又是什么？）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;程序段、数据段、PCB（Process Control Block）三部分构成了进程实体&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125848727-607533876.png&quot;&gt;&lt;img title=&quot;image_5c567510_705&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125849136-1507469912.png&quot; alt=&quot;image_5c567510_705&quot; width=&quot;533&quot; height=&quot;340&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;进程特征&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;程序的并发运行与之前的串行顺序运行有了很大的变化，主要有下面几个特征&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;动态性&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;并发性&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;独立性&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;异步性&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125849712-1622855433.png&quot;&gt;&lt;img title=&quot;image_5c567510_5e4b&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125851198-1914655961.png&quot; alt=&quot;image_5c567510_5e4b&quot; width=&quot;693&quot; height=&quot;426&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;进程状态&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;基本状态&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;多人轮流使用厨房时，某一时刻的你到底是做完饭了？还是还在排队？还是正在做？你会有一个状态用来表述你现在的这种情况&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于进程也有状态的概念&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最基本的状态包括：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;创建&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;就绪&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;执行&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;阻塞&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;终止&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;其中核心是：就绪、执行、阻塞&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125852535-1590961683.png&quot;&gt;&lt;img title=&quot;image_5c567510_26b3&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125854495-1032746872.png&quot; alt=&quot;image_5c567510_26b3&quot; width=&quot;876&quot; height=&quot;517&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;基本的状态切换如下&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125855520-1315833933.png&quot;&gt;&lt;img title=&quot;image_5c567510_5a7d&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125857162-1974986263.png&quot; alt=&quot;image_5c567510_5a7d&quot; width=&quot;634&quot; height=&quot;366&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;状态转变简介：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程创建后，会创建PCB，以及相关的必须信息，然后就进入就绪状态，等待CPU的调度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一旦CPU对该进程调度执行，也就是该进程获得了时间片，那么就会进行执行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当时间片用完之后，如果任务还没有结束，那么就需要继续等待（比如你做饭需要5小时，然而每个人只允许2小时，如果2小时你做不完，你必须让别人先做，你重新排队来）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果一个正在执行的程序遇到了IO请求，这通常是比较耗时的，进程会进入阻塞状态&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进入阻塞状态的进程一旦获得了想要的结果，比如IO完成，那么就再次进入就绪状态，等待CPU的临幸&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;挂起状态&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;有些系统中，还会有挂起状态，可能系统需要让正在执行的程序暂停下来，也可能是资源不足了，将某些不重要的进程暂停。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;挂起是更彻底的暂停，可以认为挂起是“暂时被淘汰出内存的进程”&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;阻塞状态获得资源后会进入就绪状态，而一旦挂起，除非解除这个状态，否则他将一直暂停，被抛出运行之外&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;阻塞是因为某些原因暂时不能被执行，挂起是直接将你暂停&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当你做饭时等待水烧开，这就是阻塞，而如果是老大说我们几个人先来，于是他们几个轮流使用，然后你站门口看着，这就是挂起&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125859618-1318349754.png&quot;&gt;&lt;img title=&quot;image_5c567510_710c&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125904983-1891994769.png&quot; alt=&quot;image_5c567510_710c&quot; width=&quot;660&quot; height=&quot;536&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;包含挂起状态的系统基本情况如上图所示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就绪状态挂起后称之为静态就绪，阻塞状态挂起后称之为静态阻塞，挂起后的状态不能够直接转换到执行状态&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;活动状态经过挂起转换为静止状态，静止状态经过激活转换为活动状态&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;活动就绪与静止就绪通过挂起和激活转换；活动阻塞与静止阻塞通过挂起和激活转换；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;活动就绪的状态经过进程调度获得CPU时间片，进入执行状态，执行状态遇到请求IO等阻塞操作进入活动阻塞状态，活动阻塞状态IO完成将会进入活动就绪状态，继续等待被CPU临幸，如上图蓝色三角区域&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;看起来复杂其实也很好理解，前提是要理解挂起的含义&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;比如资源不充足时，将一些不重要的进程暂时挂起，挂起是真正的暂停执行，是一种主动式的管理，阻塞则是被动的，挂起也意味着置换到外存中，而不是内存中&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不管是活动阻塞还是活动就绪，他们都在内存中，具备了相关条件，IO完成或者获得CPU时间片，就可以进行执行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;挂起（静止）状态，静止阻塞还是静止就绪，他们都是外存中，并不能够执行，他们还需要一个载入到内存的过程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一个静止阻塞的状态就相当于在外存中等待一个事件的完成，事件完成后，进入静止就绪状态，他此时还是不会得到CPU的调度，激活后才有机会得到CPU临幸&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;存在挂起状态的系统，经过创建后，可能进入活动就绪，也可能进入静止就绪，并不是一定进入活动就绪，然后再被挂起&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span&gt;在当前系统的性能和内存的容量均允许的情况下，完成对进程创建的必要操作后，相应的系统进程将进程的状态转换为活动就绪状态&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span&gt;考虑到系统当前资源状况和性能要求，并不分配给新建进程所需资源，主要是主存资源，相应的系统进程将进程状态转为静止就绪状态&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;终止状态的转换&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;终止状态通常是从执行状态进行转换，一般情况下不管一个什么状态的线程，他只有被执行时，才会可能进入终止状态&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是，在某些系统中，父进程有权利终止一个子进程，所以说这种情况下，就可能从阻塞或者就绪直接转换为终止状态&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;进程控制块&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;进程是对于程序执行的抽象描述，那么进程控制块，这个对进程的描述，就相当于进程的元数据，用于描述进程本身&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;尽管实现很复杂，但是我们应该想象得到，操作系统内核都是C/C++，毕竟也只是一种编程语言，编程语言对于抽象概念的描述也只能是通过语言本身&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;所以说，他就是一个数据结构，记录了用于控制管理进程的各个数据项。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;20.5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;“PCB 中记录了操作系统所需的、用于描述进程的当前情况以及控制进程运行的全部信息。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;进程控制块的作用是使一个在多道程序环境下不能独立运行的程序(含数据)，成为一个能独立运行的基本单位，一个能与其它进程并发执行的进程。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;或者说&lt;/span&gt;，&lt;span&gt;&lt;strong&gt;OS是根据 PCB来对并发执行的进程进行控制和管理的&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;21&quot;&gt;
&lt;p&gt;&lt;span&gt;例如，当OS要调度某进程执行时，要从该进程的 PCB&lt;span&gt;中查出其现行状态及优先级；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;在调度到某进程后，要根据其 PCB 中所保存的处理机状态信&lt;/span&gt;&lt;span&gt;息，设置该进程恢复运行的现场，并根据其 PCB 中的程序和数据的内存始址，找到其程序&lt;/span&gt;&lt;span&gt;和数据；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;进程在执行过程中，当需要和与之合作的进程实现同步、通信或访问文件时，也&lt;/span&gt;&lt;span&gt;都需要访问 PCB；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;当进程由于某种原因而暂停执行时，又须将其断点的处理机环境保存在&lt;/span&gt;&lt;span&gt;PCB中。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;可见，在进程的整个生命期中，系统总是通过 PCB对进程进行控制的，亦即，系&lt;/span&gt;&lt;span&gt;统是根据进程的PCB而不是任何别的什么而感知到该进程的存在的。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;所以说，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;PCB是进程&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;存在的惟一标志&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;”《计算机操作系统 第三版》&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125906994-547184057.png&quot;&gt;&lt;img title=&quot;image_5c567510_4ccc&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125907476-643470710.png&quot; alt=&quot;image_5c567510_4ccc&quot; width=&quot;948&quot; height=&quot;932&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;进程控制块主要包括:&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;进程标识符&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;计算机状态&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;进程调度信息&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;进程控制信息&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;进程用来管理程序运行，对于一个运行中的程序总归要有个名字，这就是进程标识符；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;计算机运行时各个硬件设备寄存器保存的值就是计算机的状态（如同做饭时厨房盆盆罐罐里面的东西）；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程有状态，这些状态信息主要用来进行调度，也就是安排任务需要的信息（可能你长得好看，就能多一次机会使用厨房）；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另外还有一些对进程的控制，比如进程（线程）同步数据、程序地址等&lt;/span&gt;&lt;/p&gt;

&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;在一个系统中，通常可拥有数十个、 数百个乃至数千个 PCB。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;为了能对它们加以有效的管理，应该用适当的方式将这些PCB组织起来。目前常用的组织方式有以下两种。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125909595-588618957.png&quot;&gt;&lt;img title=&quot;image_5c567510_7bb2&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125910905-1765764387.png&quot; alt=&quot;image_5c567510_7bb2&quot; width=&quot;623&quot; height=&quot;302&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;三座大山&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;进程作为操作系统对程序一次运行的抽象描述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程的基本信息相当于元数据，就好像表结构一样以及一些必备的数据结构&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于进程的掌控主要有三座大山：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;进程控制、进程同步、进程通信&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;进程控制：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一个进程从无到有，需要创建，创建之后因为调度而运行，因为撤销而消亡，需要有人管理他们，进程基本信息比如PCB从哪里来？都需要有人去做，这部分工作被称为进程控制&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;进程同步：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;多进程并发执行，必然可能会出现竟态，比如同时访问某个共享资源，一个打印机不能同时打印语文和数学，所以必须做好顺序的调度，这部分的工作被称之为进程同步&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;进程通信：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;多进程并发运行，如何进行进程间的联系，如何传递数据？不同计算机中的两个进程又是如何进行数据交互？这部分工作被称之为进程通信&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果一个员工是一个进程，进程控制相当于人事、财务部门，负责招聘薪资考勤等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程同步相当于项目经理，负责项目中各人员的任务分配调度。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程通信就相当于一种工作方式、沟通形式，比如你给我一个SVN标签号并且告知我意图，我去库中检索指定标签修改的指定内容，就完成了一个任务的协作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比喻或许不足够恰当，仅供个人理解。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;进程作为操作系统对程序执行的抽象，那么就使用了足够多的数据项对进程进行描述，所有的信息都是为了进程的管理、维护、调度、切换等&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就比如你用一个数组以及一个栈顶标记来描述一个堆栈，如下图所示&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125911461-133691195.png&quot;&gt;&lt;img title=&quot;image_5c567510_739&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201902/897393-20190203125911988-836058426.png&quot; alt=&quot;image_5c567510_739&quot; width=&quot;493&quot; height=&quot;403&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;数组a[]以及变量top就是使用数组对栈这种数据结构进行抽象描述的数据项，对于数据元素操作访问（入栈、出栈）限制就是规则&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;进程看似复杂，原理也是如此，操作系统使用多个数据项（数据结构）对程序的执行进行描述，然后定义了一整套的操作逻辑与规则&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这就是我们现在学习的进程的运行原理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过编码将设计思路以及运行规则从抽象到具体数据结构以及编码的实现就完成了进程的实现。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;操作系统想要管理程序的运行，需要指定一个唯一的标识符，既然放一群羊，还想对羊进行合理的管理识别，最简单的办法就是每只羊挂个项圈写上序号。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程有状态信息，操作系统负责管理状态的切换，那么必然需要记录进程的状态信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;既然是轮流分配时间片，就好像去办理业务，排队等待一样，但是无数个场景下都有VIP的存在，进程也是，也有优先级的概念&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;计算机的程序最终会转换为一条条的指令，每一条指令的执行都需要借助于程序计数器，程序计数器是用于存放下一条指令所在单元的地址的地方，所以想要知道并且记住程序执行的进度位置，还需要掌握程序计数器的值&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们熟悉的x86和arm指令大多都是基于寄存器的（虚拟机VM是基于栈）基于寄存器的架构最明显的特征就在于指令的执行要依赖寄存器，如同厨房的盆盆罐罐，里面装着运行时的状态数据、值（好比计算1+2+3+4，1放到a寄存器，2放到b寄存器，add a，b 计算中间结果，这句纯属为了说明，具体不要较真）   &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;想要更好地管理进程，那么必然还会有一些统计信息，比如某进程运行了多久等记录统计信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这些重要的信息都保存在进程的PCB中，所以说PCB是进程概念的核心，有了PCB程序才有并发执行的能力，通常，通常情况下，创建进程指的就是创建PCB&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;简言之，操作系统对进程的抽象就是对于一组数据结构以及操作这些数据结构的规则逻辑的实现。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程的核心状态有执行、就绪、阻塞。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就绪就是一切准备妥当，可以被执行，就差CPU时间片了，在执行过程中如果时间片用完，那么仍旧是转换为就绪状态，他什么都不差，只是被剥夺了时间片&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;执行状态下，如果执行不下去了，比如需要等待IO，就会进入阻塞，阻塞必须要等到要等的事情发生才会解除阻塞，因为他差一个事件的发生和时间片，事件到达就解除阻塞，所以就差时间片了，所以转换为就绪状态&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如你去银行办业务，人家手续都带好了在那边排队就是就绪，你身份证没复印好，就得先复印好身份证再过来排队，否则即使到你了，你也办不成&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就绪涉及到很多事情要处理，所以为了更加安全合理，有了创建的状态，创建就是为了保障就绪是真的就绪了，也就是检查你的确各种资料都带齐全了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;终止状态也是类似为了更合理安排管理，结束后也有一些事情需要做，比如你把你的资料状态或者还可能要排队领取个什么别的东西，这些都不需要在柜台了，在大厅自助或者找大堂经理就好了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程涉及到各种数据结构，各种规则处理，所以进程很复杂，但是进程又很简单，就好比单例模式的实现有多种方式有些比较复杂，但是逻辑上却又很清晰，保证唯一&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 04 Feb 2019 00:58:00 +0000</pubDate>
<dc:creator>noteless</dc:creator>
<og:description>多并发的概念本身就是来自于计算机操作系统的进程的概念，本文对进程的相关概念进行讲解，对进程进行了介绍，只有了解了最根本最核心的内容才能够对后续多线程以及Java的并发有很好的掌握</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/noteless/p/10350186.html</dc:identifier>
</item>
<item>
<title>Mybatis简单入门 - 风沙迷了眼</title>
<link>http://www.cnblogs.com/fsmly/p/10324491.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fsmly/p/10324491.html</guid>
<description>
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、Mybatis概述&lt;/span&gt;&lt;/strong&gt;　　&lt;/p&gt;
&lt;p&gt;　　MyBatis 是支持普通 SQL 查询（相比较于Hibernate的封装，Mybatis是半自动化的JDBC封装，一个特点就是Mybatis执行的SQL查询语句需要自己在配置文件中写），存储过程和高级映射的优秀持久层框架。MyBatis 消除了几乎所有的 JDBC 代码和参数的手工设置以及对结果集的检索。MyBatis 可以使用简单的XML 或注解用于配置和原始映射，将接口和 Java 的 POJO（Plain Old Java Objects，普通的Java 对象）映射成数据库中的记录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、Mybatis原理解析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　&lt;span&gt;下面以Mybatis简单的执行流程&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190126100834916-1243928277.png&quot; alt=&quot;&quot; width=&quot;597&quot; height=&quot;323&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　1、加载mybatis全局配置文件（数据源、mapper映射文件等），解析配置文件，MyBatis基于XML配置文件生成Configuration，和一个个MappedStatement（包括了参数映射配置、动态SQL语句、结果映射配置），其对应着&amp;lt;select | update | delete | insert&amp;gt;标签项。&lt;/p&gt;
&lt;p&gt;　　2、SqlSessionFactoryBuilder通过Configuration对象生成SqlSessionFactory，用来开启SqlSession。&lt;/p&gt;
&lt;p&gt;　　3、SqlSession对象完成和数据库的交互：&lt;/p&gt;
&lt;p&gt;　　a、用户程序调用mybatis接口层api（即Mapper接口中的方法）&lt;/p&gt;
&lt;p&gt;　　b、SqlSession通过调用api的Statement ID找到对应的MappedStatement对象&lt;/p&gt;
&lt;p&gt;　　c、通过Executor（负责动态SQL的生成和查询缓存的维护）将MappedStatement对象进行解析，sql参数转化、动态sql拼接，生成jdbc Statement对象&lt;/p&gt;
&lt;p&gt;　　d、JDBC执行sql。&lt;/p&gt;
&lt;p&gt;　　e、借助MappedStatement中的结果映射关系，将返回结果转化成HashMap、JavaBean等存储结构并返回。&lt;/p&gt;
&lt;p&gt; 　　&lt;strong&gt;&lt;span&gt;下面是Mybatis的框架原理图&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　 &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190126102125995-2121531265.png&quot; alt=&quot;&quot; width=&quot;544&quot; height=&quot;302&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、Mybatis简单实例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　（1）导入相关jar包以及Mybatis运行环境核心jar包和连接数据库的包&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190126102722635-1659459830.png&quot; alt=&quot;&quot; width=&quot;243&quot; height=&quot;238&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（2）创建一张简单的数据表&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190126173413800-627841428.png&quot; alt=&quot;&quot; width=&quot;303&quot; height=&quot;77&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（3）创建Java对象（PO类型）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_b4c49b0f-648e-4613-8594-db645748f5f9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b4c49b0f-648e-4613-8594-db645748f5f9&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b4c49b0f-648e-4613-8594-db645748f5f9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.po;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String username;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String address;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String sex;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getId() {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUsername() {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPassword() {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getAddress() {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; address;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getSex() {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sex;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUsername(String username) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAddress(String address) {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.address =&lt;span&gt; address;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setSex(String sex) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.sex =&lt;span&gt; sex;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;User{&quot; +
&lt;span&gt;53&lt;/span&gt;                 &quot;id=&quot; + id +
&lt;span&gt;54&lt;/span&gt;                 &quot;, username='&quot; + username + '\'' +
&lt;span&gt;55&lt;/span&gt;                 &quot;, password='&quot; + password + '\'' +
&lt;span&gt;56&lt;/span&gt;                 &quot;, address='&quot; + address + '\'' +
&lt;span&gt;57&lt;/span&gt;                 &quot;, sex='&quot; + sex + '\'' +
&lt;span&gt;58&lt;/span&gt;                 '}'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;User实体类&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　　（4）创建Mybatis核心配置文件（SqlMapConfig.xml）&lt;/p&gt;
&lt;p&gt;　　在核心配置文件配置连接数据库的相关信息，（如果是和Spring整合，则可以放在Spring配置文件中进行对数据库的配置）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f5541aa1-66e7-4ca7-901e-963e1e386f1d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f5541aa1-66e7-4ca7-901e-963e1e386f1d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f5541aa1-66e7-4ca7-901e-963e1e386f1d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE configuration
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;加载资源文件&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;    &amp;lt;properties resource=&quot;jdbc.properties&quot;&amp;gt;&amp;lt;/properties&amp;gt;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    &amp;amp;lt;!&amp;amp;ndash;settings配置LOG4J输出日志 &amp;amp;ndash;&amp;amp;gt;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    &amp;lt;settings&amp;gt;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        &amp;lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&amp;gt;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    &amp;lt;/settings&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;typeAliases配置包的别名&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;environments配置了数据库连接，配置了driver、url、username、password属性&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environments &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;=&quot;development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environment &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;transactionManager &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;JDBC&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;property name=&quot;&quot; value=&quot;&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;transactionManager&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataSource &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;POOLED&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driver&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;jdbc:mysql:///mybatis01&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;123&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dataSource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environments&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置一个SQL语句和映射的配置文件&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;UserMapper.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Mybatis核心配置文件&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　　（5）创建一个Mapper.xml文件，对应编写所需要的Sql查询操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f62f4edf-786b-4281-bd0d-85f02aaa7a73&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f62f4edf-786b-4281-bd0d-85f02aaa7a73&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f62f4edf-786b-4281-bd0d-85f02aaa7a73&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;mapper为根元素，namespace指定了命名空间&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;定义一个SELECT查询&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;parameterType:指定输入参数的类型&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;#{}表示占位符&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;#{id}：其中的id表示的就是接受的输入参数，
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                参数名称就是id，
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        这里指出：如果输入参数是简单类型，#{}中的参数名可以任意设置（value或者其他名称）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;resultType：指定输出类型(即指定输出结果所映射的Java对象类型)&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findUserById&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.User&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        SELECT * FROM t_user WHERE id = #{id}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserMapper配置文件&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　　（7）创建测试程序，对刚刚编写的select查询进行测试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_1910f463-dabd-43e4-8117-eb4c4ddd53c7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1910f463-dabd-43e4-8117-eb4c4ddd53c7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1910f463-dabd-43e4-8117-eb4c4ddd53c7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.first;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.po.User;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.io.Resources;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSession;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactoryBuilder;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; User findUserById() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到mybatis配置文件&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         String resource = &quot;SqlMapConfig.xml&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到配置文件的文件流信息&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         InputStream inputStream =&lt;span&gt; Resources.getResourceAsStream(resource);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建会话工厂 传入mybatis的配置文件信息&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         SqlSessionFactory sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过会话工厂得到SqlSession&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过sqlSession来操作数据库
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数就是映射文件中statment的id：namespace +statment的id
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二个参数就是制定映射文件中的parameterType类型的参数&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         User user = sqlSession.selectOne(&quot;test.findUserById&quot;,1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(user);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放会话资源&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            sqlSession.close();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         Test test = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Test();
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            System.out.println(test.findUserById());
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Test测试程序&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　　（8）加入Log4j日志文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_23f91360-85f0-4cfe-b0bf-9e7a680c5a39&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_23f91360-85f0-4cfe-b0bf-9e7a680c5a39&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_23f91360-85f0-4cfe-b0bf-9e7a680c5a39&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;### direct log messages to stdout ###
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; log4j.rootLogger=&lt;span&gt;DEBUG, stdout
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; log4j.appender.stdout=&lt;span&gt;org.apache.log4j.ConsoleAppender
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; log4j.appender.stdout.layout=&lt;span&gt;org.apache.log4j.PatternLayout
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Log4j.properties&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　　（9）测试结果&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190126174215171-1736790324.png&quot; alt=&quot;&quot; width=&quot;481&quot; height=&quot;222&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 4.其他CRUD操作&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　（1）insert操作&lt;/p&gt;
&lt;p&gt;　　在Mapper文件中添加响应的SQL配置，以及使用MySQL中的LAST_INSERT_ID()函数得到增加的数据的主键值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;addUser&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.User&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
        现在需要得到刚刚插入的记录中的主键值,只适用于自增主键的情况
        LAST_INSERT_ID()
        keyProperty：将查询到的主键值设置到parameterType指定对象中的那个属性
        order：指定相对于insert的顺序
        resultType：指定映射结果的结果类型
        &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;selectKey &lt;/span&gt;&lt;span&gt;keyProperty&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt; order&lt;/span&gt;&lt;span&gt;=&quot;AFTER&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;java.lang.Integer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            SELECT LAST_INSERT_ID()
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;selectKey&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        INSERT INTO t_user(id,username,password,address,sex) VALUES(#{id},#{username},#{password},#{address}, #{sex});
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　插入数据的日志信息，没有使用sqlSession.commit();之前的日志情况&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190128144410629-701326141.png&quot; alt=&quot;&quot; width=&quot;464&quot; height=&quot;268&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从上面的图中可以看出，没有添加commit的时候，事务进行了回滚，所以要想添加数据，需要自己手动提交（在没有整合Spring之前）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190128151331627-1363470053.png&quot; alt=&quot;&quot; width=&quot;543&quot; height=&quot;172&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　附上insertUser的函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_a504dd77-7aed-4fed-945e-f967945555a8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a504dd77-7aed-4fed-945e-f967945555a8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a504dd77-7aed-4fed-945e-f967945555a8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; inserUser()  &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到配置文件的文件流信息&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         SqlSessionFactory sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         User user = &lt;span&gt;new&lt;/span&gt; User(&quot;World&quot;,&quot;1234&quot;,&quot;武汉市&quot;,&quot;男&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         sqlSession.insert(&quot;test.addUser&quot;&lt;span&gt;,user);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        System.out.println(user.getId());
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        sqlSession.commit();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放会话资源&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            sqlSession.close();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;inserUser函数&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　（2）模糊查询&lt;/p&gt;
&lt;p&gt;　　首先配置Mapper文件，${}和#{}的简单区别如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        模糊查询可能会查询多条记录
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        resultType:指定的就是查询结果对应的单条记录类型
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        ${}:表示将输入的参数不加任何的修饰，直接作为字符串拼接在SQL中
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        但是这样直接拼接，容易导致SQL注入的隐患
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        ${value}中的value表示接受的输入参数，注意如果输入参数是简单类型，其中的形参只能用value
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findUserByUsername&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;java.lang.String&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.User&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        SELECT * FROM t_user WHERE username LIKE '%${value}%'
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190128150245687-1531827441.png&quot; alt=&quot;&quot; width=&quot;853&quot; height=&quot;210&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　使用查询的时候碰到一个小错误，由于之前测试的insert方法，其中在User实体类中添加了有参构造函数，所以出现了下面的错误，分析原因就是：使用Mybatis查询的时候需要在实体类中加入无参构造方法（当然如果实体类本身没有构造函数，就会是默认的无参构造函数）&lt;/p&gt;
&lt;p&gt;　　 &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190128145337663-1055648319.png&quot; alt=&quot;&quot; width=&quot;656&quot; height=&quot;21&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　附上findByUsername的函数实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_e43b4f53-64bb-4628-aae6-5b4cece2993d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e43b4f53-64bb-4628-aae6-5b4cece2993d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e43b4f53-64bb-4628-aae6-5b4cece2993d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; findUserByUsername()  &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到配置文件的文件流信息&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         SqlSessionFactory sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         List&amp;lt;User&amp;gt; userList = sqlSession.selectList(&quot;test.findUserByUsername&quot;,&quot;u&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        System.out.println(userList);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放会话资源&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            sqlSession.close();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;findByUsername函数实现&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　　（3）删除操作&lt;/p&gt;
&lt;p&gt;　　首先在Mapper中配置删除的操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;delete &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;deleteUser&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;java.lang.Integer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        DELETE FROM t_user WHERE id = #{value}
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行测试程序，同insert中一样，需要手动提交事务，如下面所示&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190128153721634-996229795.png&quot; alt=&quot;&quot; width=&quot;555&quot; height=&quot;252&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　最终结果：&lt;/p&gt;
&lt;p&gt;　　数据表中删除了编号为10的数据记录&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190128154246639-540601135.png&quot; alt=&quot;&quot; width=&quot;714&quot; height=&quot;88&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190128154137617-1087686636.png&quot; alt=&quot;&quot; width=&quot;312&quot; height=&quot;96&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.细节整理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　（1）关于示例程序中一些相关类的理解&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　&lt;/strong&gt;a）SqlSessionFactoryBuilder&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　用来创建SqlSessionFactory。因为SqlSessionFactory使用了单例模式，所以不需要使用单例模式来管理SqlSessionFactoryBuilder，只需要在创建SqlSessionFactory时　候使用一次就可以&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　b）SqlSessionFactory&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　会话工厂，用来创建SqlSession。可以使用单例模式来管理SqlSessionFactory这个会话工厂，工厂创建之后，就一直使用一个实例。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　c）SqlSession&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　面向程序员的接口，提供了操作数据库的方法。SqlSession是线程不安全的（原因：在SqlSession实现类中除了接口中的操作数据库的方法之外，还有数据域的属性，比如说一些提交的数据等等，所以在多线程并发请求的时候，会导致线程不安全），所以我们可以将SqlSession使用在方法体里面，这样每个线程都有自己的方法，就不会冲突&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;（2）Mybatis中mapper映射文件&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;如同解释Mybatis执行原理的时候一样，Mapper映射文件中配置的Sql语句，实际上在执行的时候都被封装称为一个个MapperStatment对象，即Mapper映射文件是按照statment来管理不同的Sql。在编写程序的时候，我们在使用SqlSession其中的操作数据库的方法（selectOne，selectList等等）的时候，传入的参数除了实参（id，模糊查询的字符串等等）之外，还需要传入的就是相应的Sql位置，而Sql是被Statment管理，所以就是传入namespace+statmentId&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;（3）占位符&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;#{id}：其中的id表示的就是接受的输入参数，&lt;/span&gt;&lt;span&gt;参数名称就是id，&lt;/span&gt;&lt;span&gt;这里指出：如果输入参数是简单类型，#{}中的参数名可以任意设置（value或者其他名称）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;/span&gt;${value}：表示将输入的参数不加任何的修饰，直接作为字符串拼接在SQL中但是这样直接拼接，容易导致SQL注入的隐患${value}中的value表示接受的输入参数，注意如果输入参数是简单类型，其中的形参只能用value&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（4）别名定义&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　  ①单个别名的定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;针对单个别名的定义&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAlias &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.User&quot;&lt;/span&gt;&lt;span&gt; alias&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAlias&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　  定义别名后的使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findUserByIdTest&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM t_user WHERE id = #{id}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　  ②批量别名的定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;批量别名定义：Mybatis在定义别名的时候会自动扫描包中的po类，自动的将别名定义为类名（首字母大写或者小写都可以）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　（5）在SqlMapConfig.xml中加载Mapper映射文件的时候，除了通过resource的方式，还可以使用mapper接口加载的方式来实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　  ①首先先注意一点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　  在配置mybatis-config.xml时，其中的节点是有顺序的，配置顺序依次为：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
properties/settings/typeAliases/typeHandlers/objectFactory/objectWrapperFactory/plugins/environments/databaseIdProvider/mappers
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　  ②使用mapper加载的方式，要将mapper接口和mapper配置文件放在同一目录下面，并且文件名称一致，而且要遵循mapper代理的方式进行开发&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.mapper.UserMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　  &lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129163010976-1394718505.png&quot; alt=&quot;&quot; width=&quot;167&quot; height=&quot;52&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;6.Mybatis开发dao方法简介&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　（1）使用dao接口+实现类的方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;　a）首先编写接口，如同一般编写模式方式进行编写&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_613c62f8-0bb5-4408-94af-cf09e0391c7c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_613c62f8-0bb5-4408-94af-cf09e0391c7c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_613c62f8-0bb5-4408-94af-cf09e0391c7c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.dao;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.po.User;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * 原始Dao方式开发：dao接口+dao实现类的方式
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; UserDao {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据id查询信息&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; User findUserById(&lt;span&gt;int&lt;/span&gt; id) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加信息&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; insertUser(User user) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除信息&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; deleteUser(&lt;span&gt;int&lt;/span&gt; id) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;dao接口&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　b）然后编写接口实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_56d32ff5-9863-4c75-906c-580f8b2ccbb1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_56d32ff5-9863-4c75-906c-580f8b2ccbb1&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_56d32ff5-9863-4c75-906c-580f8b2ccbb1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.dao.daoImpl;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.dao.UserDao;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.po.User;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSession;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserDaoImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; UserDao {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用构造方法注入SqlSessionFactory&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SqlSessionFactory sqlSessionFactory;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserDaoImpl(SqlSessionFactory sqlSessionFactory) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.sqlSessionFactory =&lt;span&gt; sqlSessionFactory;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; User findUserById(&lt;span&gt;int&lt;/span&gt; id) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;         User user = sqlSession.selectOne(&quot;test.findUserById&quot;&lt;span&gt;,id);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        sqlSession.close();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; insertUser(User user) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        User user1 = new User(&quot;test1&quot;,&quot;123&quot;,&quot;洪山区&quot;,&quot;男&quot;);&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         sqlSession.insert(&quot;test.findUserById&quot;&lt;span&gt;,user);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        sqlSession.commit();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        sqlSession.close();
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; deleteUser(&lt;span&gt;int&lt;/span&gt; id) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;         sqlSession.delete(&quot;test.findUserById&quot;&lt;span&gt;,id);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        sqlSession.commit();
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        sqlSession.close();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;dao接口实现类&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　&lt;/strong&gt;c）Mapper配置文件和SqlConfig配置文件不变&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　d）使用Junit进行测试&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_b1a1c5c6-6788-4070-a7f6-76bdfb2e7740&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b1a1c5c6-6788-4070-a7f6-76bdfb2e7740&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b1a1c5c6-6788-4070-a7f6-76bdfb2e7740&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.testdao;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.dao.UserDao;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.dao.daoImpl.UserDaoImpl;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.po.User;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.io.Resources;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactoryBuilder;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.After;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Before;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserDaoImplTest {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SqlSessionFactory sqlSessionFactory;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    @Before
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setUp() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testFindUserById() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建UserDao的对象&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         UserDao userDao = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserDaoImpl(sqlSessionFactory);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用UserDao的方法&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         User user = userDao.findUserById(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        System.out.println(user );
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Junit测试&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 　　   e）测试结果&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129123005266-661594076.png&quot; alt=&quot;&quot; width=&quot;409&quot; height=&quot;196&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　f）原始dao方法的问题&lt;/p&gt;
&lt;p&gt;　　　　①dao接口实现中存在大量的模板方法（即很多重复性的代码 ）&lt;/p&gt;
&lt;p&gt;　　　　②调用SqlSession方法的时候将statmentid硬编码了&lt;/p&gt;
&lt;p&gt;　　　　③条用SqlSession方法的时候传入的参数，由于使用泛型，所以在编译阶段不会报错（即使传入参数错误）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　（2）使用Mapper代理的方法（即只需要Mapper接口）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　（a）使用mapper方式的规范&lt;/p&gt;
&lt;p&gt;　　　　①在使用mapper代理的方式中，namespace的值应该是mapper接口的路径&lt;/p&gt;
&lt;p&gt;　　　　②在mapper.java接口文件中的接口方法名称和mapper.xml中的statment的id一致&lt;/p&gt;
&lt;p&gt;　　　　③在mapper.java接口文件中的接口方法的输入参数和mapper.xml中的statment的parameterType一致&lt;/p&gt;
&lt;p&gt;　　　　④在mapper.java接口文件中的接口方法的返回值类型和mapper.xml中的statment的resultType一致&lt;/p&gt;
&lt;p&gt;　　（b）查询、删除操作实例&lt;/p&gt;
&lt;p&gt;　　　　①编写mapper.xml配置文件，其中包含select和delete的sql配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_4aa44906-ee22-4aaf-bf63-ecf66aaa14a1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4aa44906-ee22-4aaf-bf63-ecf66aaa14a1&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4aa44906-ee22-4aaf-bf63-ecf66aaa14a1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;mapper为根元素，namespace指定了命名空间&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;在使用mapper代理的方式中，namespace的值应该是mapper接口的路径&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.mapper.UserMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findUserById&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;cn.mybatis.po.User&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM t_user WHERE id = #{id}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;delete &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;deleteUser&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;java.lang.Integer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        DELETE FROM t_user WHERE id = #{value}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;mapper.xml配置文件&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　②编写mapper接口，按照mapper代理的方式开发规范来编写mapper的接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_6d0ba45b-2d27-4b4d-b59d-2285dec380b6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6d0ba45b-2d27-4b4d-b59d-2285dec380b6&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6d0ba45b-2d27-4b4d-b59d-2285dec380b6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.testmapper;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.mapper.UserMapper;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.po.User;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.io.Resources;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSession;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactoryBuilder;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.After;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Before;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserMapperTest {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SqlSessionFactory sqlSessionFactory;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    @Before
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setUp() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testFindUserById() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到UserMapper的代理对象&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         UserMapper userMapper = sqlSession.getMapper(UserMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         User user = userMapper.findUserById(9&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        System.out.println(user);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testDeleteUser() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         UserMapper userMapper = sqlSession.getMapper(UserMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         userMapper.deleteUser(9&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        sqlSession.commit();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    @After
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; tearDown() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;mapper接口&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　③Junit测试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_dc95b396-6de4-430e-af4b-42fb4d9b366f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dc95b396-6de4-430e-af4b-42fb4d9b366f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dc95b396-6de4-430e-af4b-42fb4d9b366f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.mybatis.testmapper;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.mapper.UserMapper;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.mybatis.po.User;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.io.Resources;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSession;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactoryBuilder;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.After;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Before;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserMapperTest {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SqlSessionFactory sqlSessionFactory;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    @Before
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setUp() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         sqlSessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testFindUserById() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到UserMapper的代理对象&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         UserMapper userMapper = sqlSession.getMapper(UserMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         User user = userMapper.findUserById(8&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        System.out.println(user);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testDeleteUser() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; sqlSessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         UserMapper userMapper = sqlSession.getMapper(UserMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         userMapper.deleteUser(8&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    @After
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; tearDown() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Junit测试&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　④查询结果展示&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129144241598-1038656848.png&quot; alt=&quot;&quot; width=&quot;422&quot; height=&quot;169&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　⑤删除结果展示&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1368768/201901/1368768-20190129144617946-358333043.png&quot; alt=&quot;&quot; width=&quot;464&quot; height=&quot;168&quot;/&gt;&lt;/p&gt;


</description>
<pubDate>Sun, 03 Feb 2019 22:51:00 +0000</pubDate>
<dc:creator>风沙迷了眼</dc:creator>
<og:description>1、Mybatis概述 MyBatis 是支持普通 SQL 查询（相比较于Hibernate的封装，Mybatis是半自动化的JDBC封装，一个特点就是Mybatis执行的SQL查询语句需要自己在配置</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fsmly/p/10324491.html</dc:identifier>
</item>
<item>
<title>多媒体文件格式（二）：FLV 格式 - 灰色飘零</title>
<link>http://www.cnblogs.com/renhui/p/10348629.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/renhui/p/10348629.html</guid>
<description>&lt;p&gt;在网络的直播与点播场景中，FLV也是一种常见的格式，FLV是Adobe发布的一种可以作为直播也可以作为点播的封装格式，其封装格式非常简单，均以FLVTAG的形式存在，并且每一个TAG都是独立存在的，接下来就详细介绍一下FLV标准。&lt;/p&gt;

&lt;p&gt;FLV包括文件头（File Header）和文件体（File Body）两部分，其中文件体由一系列的Tag组成。FLV文件的结构如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/682616/201902/682616-20190202192253797-739598791.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;1. 文件头 Header&lt;/h3&gt;
&lt;p&gt;Header 部分记录了FLV的类型、版本等信息，是FLV的开头。一般差不多占9bytes。具体格式如下：&lt;/p&gt;
&lt;p&gt;1. 文件标识（3B）：总是为”FLV”, 0x46 0x4c 0x56&lt;/p&gt;
&lt;p&gt;2. 版本（1B）：目前为0x01&lt;/p&gt;
&lt;p&gt;3. 流信息（1B）：文件的标志位说明。前5位保留，必须为0；第6位为音频Tag：1表示有音频；第七位保留，为0； 第8位为视频Tag：1表示有视频&lt;/p&gt;
&lt;p&gt;4. Header长度（4B）：整个Header的长度，一般为9（版本为0x01时）；大于9表示下面还有扩展信息。即0x00000009。&lt;/p&gt;
&lt;p&gt;下图是使用工具FlvAnalyzer获取到的FLV的Header的详细信息：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/682616/201902/682616-20190203213848012-650203367.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2. 文件体 FLV Body&lt;/h3&gt;
&lt;p&gt;文件体由一系列的Tag组成。&lt;/p&gt;
&lt;p&gt;其中，每个Tag前面还包含了Previous Tag Size字段，表示前面一个Tag的大小。Tag的类型可以是视频、音频和Script，每个Tag只能包含以上三种类型的数据中的一种。&lt;/p&gt;
&lt;p&gt;下图是使用FlvAnalyzer获取到的Body信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/682616/201902/682616-20190203214313883-27152075.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3. Tag&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;每个Tag由也是由两部分组成的：Tag Header和Tag Data。Tag Header里存放的是当前Tag的类型、数据区（Tag Data）长度等信息，具体如下：&lt;/p&gt;
&lt;p&gt;Tag类型（1）：0x08：音频;     0x09：视频;      0x12：脚本;     其他：保留&lt;/p&gt;
&lt;p&gt;数据区长度（3）：数据区的长度&lt;/p&gt;
&lt;p&gt;时间戳（3）：整数，单位是毫秒。对于脚本型的tag总是0 （CTS）&lt;/p&gt;
&lt;p&gt;时间戳扩展（1）：将时间戳扩展为4bytes，代表高8位。很少用到&lt;/p&gt;
&lt;p&gt;StreamsID（3）：总是0&lt;/p&gt;
&lt;p&gt;数据区（由数据区长度决定）：数据实体&lt;/p&gt;
&lt;p&gt;下面是三个Tag类型说明：&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Audio Tag Data结构（音频类型） ：音频Tag Data区域开始的第一个字节包含了音频数据的参数信息，从第二个字节开始为音频流数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;video Tag Data结构(视频类型)：视频Tag Data开始的第一个字节包含视频数据的参数信息，从第二个字节开始为视频流数据。&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Script Tag Data结构（脚本类型、帧类型）：该类型Tag又被称为MetaData Tag,存放一些关于FLV视频和音频的元信息，比如：duration、width、height等。通常该类型Tag会作为FLV文件的第一个tag，并且只有一个，跟在File Header后。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在上节的内容中，我们介绍了FLV的格式信息，同时也提到了FlvAnalyzer工具，下面我们就介绍两个工具，帮助大家整理和学习FLV相关知识：&lt;/p&gt;
&lt;h3&gt;1. FlvAnalyzer&lt;/h3&gt;
&lt;p&gt;通过FlvAnalyzer可以很清晰的看到FLV文件的基本结构，这样能够结合上面了解的FLV的知识，更清晰的查看FLV的格式及结构。&lt;/p&gt;
&lt;p&gt;工具地址：&lt;a href=&quot;https://github.com/renhui/Thinking-in-AV/blob/master/%E5%A4%9A%E5%AA%92%E4%BD%93%E6%A0%BC%E5%BC%8F/FLV/FlvAnalyzer.exe&quot; target=&quot;_blank&quot;&gt;https://github.com/renhui/Thinking-in-AV/blob/master/多媒体格式/FLV/FlvAnalyzer.exe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;工具使用如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/682616/201902/682616-20190203210649720-1097359176.png&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;左侧树状结构显示flv的信息，可以清楚了解flv文件的结构；&lt;/p&gt;
&lt;p&gt;点击左侧节点，右侧显示对应hex与ascii信息，这样就不必打开二进制编辑器了;&lt;/p&gt;
&lt;p&gt;通过此工具可以查看audio tag与video tag各个字节（精确到bit）的详细信息，了解每个tag是如何构造的，同时右下角黑色输出框显示某个值的意义;&lt;/p&gt;
&lt;h3&gt;2. FLV Format Analysis 工具&lt;/h3&gt;
&lt;p&gt;此工具是雷霄骅整理flvparse的开源代码，制作的flvformatanalysis工具，此工具可以用来帮助学习FLV封装格式结构。此外它还支持分离FLV中的视频流和音频流。&lt;/p&gt;
&lt;p&gt;工具地址：&lt;a href=&quot;https://github.com/renhui/Thinking-in-AV/blob/master/%E5%A4%9A%E5%AA%92%E4%BD%93%E6%A0%BC%E5%BC%8F/FLV/SpecialFFLV.exe&quot; target=&quot;_blank&quot;&gt;https://github.com/renhui/Thinking-in-AV/blob/master/多媒体格式/FLV/SpecialFFLV.exe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;工具使用如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/682616/201902/682616-20190203211948716-676353218.png&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;1. 使用FFmpeg生成带关键索引信息的FLV&lt;/h3&gt;
&lt;p&gt;在网络视频点播文件为FLV格式文件时，人们经常用工具先对FLV文件进行一次转换，主要是将FLV文件中的关键帧建立一个索引，并将索引写到Metadata头中，这个步骤用FFmpeg同样也可以实现，使用参数&lt;span class=&quot;s1&quot;&gt;add_keyframe_index即可：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ffmpeg -i 好汉歌.mp4 -c copy -f flv -flvflags add_keyframe_index out.flv 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成FLV包含了关键帧索引信息，这些关键帧索引信息并不是FLV的标准字段，但是由于其被广泛使用，已经成为常用的字段，所以FFmpeg也同样支持了这个功能。&lt;/p&gt;
&lt;h3&gt;2. 使用ffprobe查看FLV关键帧索引相关信息&lt;/h3&gt;
&lt;p&gt;除了在第二节介绍的两个工具，我们也可以使用ffprobe来解析FLV文件，并且还能将关键帧索引的相关信息打印出来，命令如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ffprobe -v trace -i out.flv 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;88&quot;&gt;
&lt;pre&gt;
[NULL @ &lt;span&gt;0x7fc669002a00&lt;/span&gt;] Opening &lt;span&gt;'&lt;/span&gt;&lt;span&gt;out.flv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; reading
[&lt;/span&gt;&lt;span&gt;file&lt;/span&gt; @ &lt;span&gt;0x7fc667f00480&lt;/span&gt;] Setting default whitelist &lt;span&gt;'&lt;/span&gt;&lt;span&gt;file,crypto&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
Probing flv score:&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; size:&lt;span&gt;2048&lt;/span&gt;&lt;span&gt;
Probing mp3 score:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; size:&lt;span&gt;2048&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] Format flv probed with size=&lt;span&gt;2048&lt;/span&gt; and score=&lt;span&gt;100&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] Before avformat_find_stream_info() pos: &lt;span&gt;13&lt;/span&gt; bytes read:&lt;span&gt;32768&lt;/span&gt; seeks:&lt;span&gt;0&lt;/span&gt; nb_streams:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;18&lt;/span&gt;, size:&lt;span&gt;1184&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;0&lt;/span&gt; pos:&lt;span&gt;21&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe stream hasn&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t been created&lt;/span&gt;
[flv @ &lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;45&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;0&lt;/span&gt; pos:&lt;span&gt;1220&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;1296&lt;/span&gt; times = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;159283&lt;/span&gt; times = &lt;span&gt;3000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;258004&lt;/span&gt; times = &lt;span&gt;4000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;272776&lt;/span&gt; times = &lt;span&gt;4000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;405340&lt;/span&gt; times = &lt;span&gt;6000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;1215104&lt;/span&gt; times = &lt;span&gt;16000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;2529035&lt;/span&gt; times = &lt;span&gt;26000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;3198814&lt;/span&gt; times = &lt;span&gt;36000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;3623757&lt;/span&gt; times = &lt;span&gt;41000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;4882191&lt;/span&gt; times = &lt;span&gt;51000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;5951597&lt;/span&gt; times = &lt;span&gt;61000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;6256906&lt;/span&gt; times = &lt;span&gt;63000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;7235927&lt;/span&gt; times = &lt;span&gt;73000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;8175324&lt;/span&gt; times = &lt;span&gt;83000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;9203399&lt;/span&gt; times = &lt;span&gt;93000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;9936528&lt;/span&gt; times = &lt;span&gt;103000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;11056393&lt;/span&gt; times = &lt;span&gt;113000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;12183978&lt;/span&gt; times = &lt;span&gt;123000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;13014068&lt;/span&gt; times = &lt;span&gt;133000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;13610750&lt;/span&gt; times = &lt;span&gt;143000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;14628601&lt;/span&gt; times = &lt;span&gt;153000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;15873046&lt;/span&gt; times = &lt;span&gt;163000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;17112198&lt;/span&gt; times = &lt;span&gt;173000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;18301365&lt;/span&gt; times = &lt;span&gt;182000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] keyframe filepositions = &lt;span&gt;18604436&lt;/span&gt; times = &lt;span&gt;186000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;17&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;8&lt;/span&gt;, size:&lt;span&gt;9&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;0&lt;/span&gt; pos:&lt;span&gt;1280&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;2117&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;0&lt;/span&gt; pos:&lt;span&gt;1304&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;17&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[NULL @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] nal_unit_type: &lt;span&gt;7&lt;/span&gt;, nal_ref_idc: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[NULL @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] nal_unit_type: &lt;span&gt;8&lt;/span&gt;, nal_ref_idc: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[NULL @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] user data:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x264 - core 142 r2 dd79a61 - H.264/MPEG-4 AVC codec - Copyleft 2003-2014 - http://www.videolan.org/x264.html - options: cabac=1 ref=8 deblock=1:-1:-1 analyse=0x1:0x131 me=umh subme=9 psy=1 psy_rd=1.00:0.15 mixed_ref=1 me_range=24 chroma_me=1 trellis=2 8x8dct=0 cqm=0 deadzone=21,11 fast_pskip=0 chroma_qp_offset=-3 threads=24 lookahead_threads=2 sliced_threads=0 nr=0 decimate=1 interlaced=0 bluray_compat=0 stitchable=1 constrained_intra=0 bframes=3 b_pyramid=2 b_adapt=2 b_bias=0 direct=3 weightb=1 open_gop=0 weightp=2 keyint=250 keyint_min=25 scenecut=40 intra_refresh=0 rc_lookahead=60 rc=2pass mbtree=1 bitrate=680 ratetol=1.0 qcomp=0.60 qpmin=0 qpmax=69 qpstep=4 cplxblur=20.0 qblur=0.5 ip_ratio=1.40 aq=1:1.00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] nal_unit_type: &lt;span&gt;7&lt;/span&gt;, nal_ref_idc: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] nal_unit_type: &lt;span&gt;8&lt;/span&gt;, nal_ref_idc: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] nal_unit_type: &lt;span&gt;6&lt;/span&gt;, nal_ref_idc: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] nal_unit_type: &lt;span&gt;5&lt;/span&gt;, nal_ref_idc: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;] user data:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x264 - core 142 r2 dd79a61 - H.264/MPEG-4 AVC codec - Copyleft 2003-2014 - http://www.videolan.org/x264.html - options: cabac=1 ref=8 deblock=1:-1:-1 analyse=0x1:0x131 me=umh subme=9 psy=1 psy_rd=1.00:0.15 mixed_ref=1 me_range=24 chroma_me=1 trellis=2 8x8dct=0 cqm=0 deadzone=21,11 fast_pskip=0 chroma_qp_offset=-3 threads=24 lookahead_threads=2 sliced_threads=0 nr=0 decimate=1 interlaced=0 bluray_compat=0 stitchable=1 constrained_intra=0 bframes=3 b_pyramid=2 b_adapt=2 b_bias=0 direct=3 weightb=1 open_gop=0 weightp=2 keyint=250 keyint_min=25 scenecut=40 intra_refresh=0 rc_lookahead=60 rc=2pass mbtree=1 bitrate=680 ratetol=1.0 qcomp=0.60 qpmin=0 qpmax=69 qpstep=4 cplxblur=20.0 qblur=0.5 ip_ratio=1.40 aq=1:1.00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;&lt;span&gt;] Reinit context to 576x432, pix_fmt: yuv420p
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668809e00&lt;/span&gt;&lt;span&gt;] no picture 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;1653&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;40&lt;/span&gt; pos:&lt;span&gt;3436&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;br/&gt;&lt;/span&gt;&lt;span&gt;（省略......）
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; AF &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] type:&lt;span&gt;9&lt;/span&gt;, size:&lt;span&gt;88&lt;/span&gt;, &lt;span&gt;last&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;, dts:&lt;span&gt;1600&lt;/span&gt; pos:&lt;span&gt;31870&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] &lt;span&gt;0&lt;/span&gt; &lt;span&gt;27&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] All &lt;span&gt;info&lt;/span&gt;&lt;span&gt; found
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] stream &lt;span&gt;0&lt;/span&gt;: start_time: &lt;span&gt;0.080&lt;/span&gt; duration: -&lt;span&gt;9223372036854776.000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] stream &lt;span&gt;1&lt;/span&gt;: start_time: &lt;span&gt;0.080&lt;/span&gt; duration: -&lt;span&gt;9223372036854776.000&lt;/span&gt;&lt;span&gt;
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] format: start_time: &lt;span&gt;0.080&lt;/span&gt; duration: &lt;span&gt;189.440&lt;/span&gt; bitrate=&lt;span&gt;787&lt;/span&gt; kb/&lt;span&gt;s
[flv @ &lt;/span&gt;&lt;span&gt;0x7fc669002a00&lt;/span&gt;] After avformat_find_stream_info() pos: &lt;span&gt;31965&lt;/span&gt; bytes read:&lt;span&gt;32768&lt;/span&gt; seeks:&lt;span&gt;0&lt;/span&gt; frames:&lt;span&gt;74&lt;/span&gt;&lt;span&gt;
Input #&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, flv, from &lt;span&gt;'&lt;/span&gt;&lt;span&gt;out.flv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
  Metadata:
    major_brand     : isom
    minor_version   : &lt;/span&gt;&lt;span&gt;512&lt;/span&gt;&lt;span&gt;
    compatible_brands: isomiso2avc1mp41
    artist          : yinyuetai.com
    album           : Yinyuetai
    &lt;/span&gt;&lt;span&gt;date&lt;/span&gt;            : &lt;span&gt;04&lt;/span&gt;/&lt;span&gt;01&lt;/span&gt;/&lt;span&gt;15&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;51&lt;/span&gt;:&lt;span&gt;32&lt;/span&gt;&lt;span&gt;
    comment         : Yinyuetai&lt;/span&gt;-&lt;span&gt;1TR1026
    encoder         : Lavf57.&lt;/span&gt;&lt;span&gt;83.100&lt;/span&gt;&lt;span&gt;
    hasVideo        : &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    hasKeyframes    : &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    hasAudio        : &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    hasMetadata     : &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    canSeekToEnd    : &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    datasize        : &lt;/span&gt;&lt;span&gt;18639072&lt;/span&gt;&lt;span&gt;
    videosize       : &lt;/span&gt;&lt;span&gt;16303552&lt;/span&gt;&lt;span&gt;
    audiosize       : &lt;/span&gt;&lt;span&gt;2335015&lt;/span&gt;&lt;span&gt;
    lasttimestamp   : &lt;/span&gt;&lt;span&gt;189&lt;/span&gt;&lt;span&gt;
    lastkeyframetimestamp: &lt;/span&gt;&lt;span&gt;187&lt;/span&gt;&lt;span&gt;
    lastkeyframelocation: &lt;/span&gt;&lt;span&gt;18603951&lt;/span&gt;&lt;span&gt;
  Duration: &lt;/span&gt;&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;03&lt;/span&gt;:&lt;span&gt;09.44&lt;/span&gt;, start: &lt;span&gt;0.080000&lt;/span&gt;, bitrate: &lt;span&gt;787&lt;/span&gt; kb/&lt;span&gt;s
    Stream #&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;41&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1000&lt;/span&gt;: Video: h264 (Main), &lt;span&gt;1&lt;/span&gt; reference frame, yuv420p(progressive, left), 576x432, &lt;span&gt;0&lt;/span&gt;/&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;684&lt;/span&gt; kb/s, &lt;span&gt;25&lt;/span&gt; fps, &lt;span&gt;25&lt;/span&gt; tbr, 1k tbn, &lt;span&gt;50&lt;/span&gt;&lt;span&gt; tbc
    Stream #&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;33&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;/&lt;span&gt;1000&lt;/span&gt;: Audio: aac (HE-AAC), &lt;span&gt;44100&lt;/span&gt; Hz, stereo, fltp, &lt;span&gt;95&lt;/span&gt; kb/&lt;span&gt;s
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668824400&lt;/span&gt;] nal_unit_type: &lt;span&gt;7&lt;/span&gt;, nal_ref_idc: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[h264 @ &lt;/span&gt;&lt;span&gt;0x7fc668824400&lt;/span&gt;] nal_unit_type: &lt;span&gt;8&lt;/span&gt;, nal_ref_idc: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[AVIOContext @ &lt;/span&gt;&lt;span&gt;0x7fc667f005c0&lt;/span&gt;] Statistics: &lt;span&gt;32768&lt;/span&gt; bytes read, &lt;span&gt;0&lt;/span&gt; seeks
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从以上内容可以看到，输出信息包含了keyframe关键帧存储在文件中的偏移位置及时间戳。&lt;/p&gt;
</description>
<pubDate>Sun, 03 Feb 2019 14:21:00 +0000</pubDate>
<dc:creator>灰色飘零</dc:creator>
<og:description>在网络的直播与点播场景中，FLV也是一种常见的格式，FLV是Adobe发布的一种可以作为直播也可以作为点播的封装格式，其封装格式非常简单，均以FLVTAG的形式存在，并且每一个TAG都是独立存在的，接</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/renhui/p/10348629.html</dc:identifier>
</item>
<item>
<title>EF6学习笔记二十七：并发冲突（一） - 张四海</title>
<link>http://www.cnblogs.com/jinshan-go/p/10351135.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jinshan-go/p/10351135.html</guid>
<description>&lt;h3&gt;&lt;span&gt;要专业系统地学习EF推荐《你必须掌握的Entity Framework 6.x与Core 2.0》。这本书作者（汪鹏，Jeffcky）的博客：https://www.cnblogs.com/CreateMyself/&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; 来到并发这里了，我自己得先承认，并发对我来说完全是一个熟悉又真正陌生的东西，总的来说，我对并发一无所知。&lt;/p&gt;
&lt;p&gt;那么不管是怎么回事，我也要说一下。之前看过零星的一些讲硬件的东西，说的是，很多个应用你看似同时开启，同时运行的，其实只是，CPU速度太快，让你察觉不了。&lt;/p&gt;
&lt;p&gt;所以不可能存在两个任务同时进行，这只是错觉。所以我现在给自己一些自信，我断定！不存在，就像一个啤酒瓶，口就那么大，一次只容许一颗珠子进去，不可能两个同时进去，都是错觉！&lt;/p&gt;
&lt;p&gt;来看EF中的并发。&lt;/p&gt;
&lt;p&gt;我们在使用EF上下文时，遵循的是一个请求对应一个上下文，对事务也是这个态度，不要事务那么长，越短越好。&lt;/p&gt;
&lt;p&gt;一个请求对应一个上下文，那么服务器同时接受到了多个请求，构造出多个上下文对象，针对同一资源操作，问题就出来这里。&lt;/p&gt;
&lt;p&gt;因为不同的上下文中查询出的实体都是各自的，并不是同一个引用。&lt;/p&gt;
&lt;p&gt;这里有两个上下文，都得到了名叫“张三”的学生实体，第一个上下文修改为“李四”，第二个上下文修改为“张三”，那么最终的结果应该是“张三”，但是看看下面的代码，其实最终数据库的结果是“李四”&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu1 =&lt;span&gt; ctx1.Students.FirstOrDefault();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu2 =&lt;span&gt; ctx2.Students.FirstOrDefault();
    stu1.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    stu2.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    ctx1.SaveChanges();
    ctx2.SaveChanges();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;你觉得应该是第一个上文查询修改完，再第二个上下文接着查询修改就行了。但是高并发的情况下是无法保证的。&lt;/p&gt;
&lt;p&gt;那么我们看下一个上下文中查询相同的两个实体。引用是相等的。所以整个解决方案就使用一个上下文是不是就行了？我觉得是，但是这是不科学的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu1 =&lt;span&gt; ctx.Students.FirstOrDefault();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu2 =&lt;span&gt; ctx.Students.FirstOrDefault();
                Console.WriteLine(ReferenceEquals(stu1, stu2));  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  True&lt;/span&gt;
                Console.WriteLine($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stu1.Name:{stu1.Name},stu2.Name:{stu2.Name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  stu1.Name:小新77,stu2.Name:小新77&lt;/span&gt;
            }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并发冲突做个分初级、中级和高级来讲，我这篇笔记主要记录初级内容的学习心得。&lt;/p&gt;
&lt;p&gt;现在来认识一下悲观并发和乐观并发，这是两种并发的控制方法&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;悲观并发：当更新特定记录时，同一记录上的所有其他并发更新将被阻塞，直到当前操作完成或者放弃，其他并发操作才可以继续。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;乐观并发：当更新特定记录时，同一记录上的所有其他并发将导致最后一条记录被保存（获胜）。假设由于并发访问共享资源而导致资源冲突并不是不可能过的，而是不可用的，此时将采取一定手段来解决并发冲突。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;上面的张三李四就是属于乐观并发，就是我就随他去了，它自己修改到哪里就是哪里，我也不关心过程。&lt;/p&gt;
&lt;p&gt;那么如何解决上面的问题，上面是什么问题？就是我第二个上下文查询出实体不是最新的，应该将这种情况看做是一种异常，但是如果你用Try/catch来捕获是捕获不到的。&lt;/p&gt;
&lt;p&gt;因为捕获并发冲突需要特殊配置，EF就为我们提供了两种方式：&lt;em&gt;&lt;strong&gt;并发Token、行版本（RowVersion）&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果我们对student的Name属性这是并发Token,需要将属性进行如下配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
modelBuilder.Entity&amp;lt;Student&amp;gt;().Property(x =&amp;gt; x.Name).IsConcurrencyToken();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;现在来用try/catch就可以捕获了&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;System.Data.Entity.Infrastructure.DbUpdateConcurrencyException: Store update, insert, or delete statement affected an unexpected number of rows (0).&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;Entities may have been modified or deleted since entities were loaded. See http://go.microsoft.com/fwlink/?LinkId=472540 for information on understanding and handling optimistic concurrency exceptions.&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;---&amp;gt; System.Data.Entity.Core.OptimisticConcurrencyException: Store update, insert, or delete statement affected an unexpected number of rows (0).&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;Entities may have been modified or deleted since entities were loaded. See http://go.microsoft.com/fwlink/?LinkId=472540 for information on understanding and handling optimistic concurrency exceptions.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个异常我之前没有学到这里来的时候碰到过，没有记录下来当时是写的什么代码，真可惜！&lt;/p&gt;
&lt;p&gt;来看看行版本的方式。这就需要为实体添加一个字节数组类型的属性，并且该属性需要配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] RowVersion { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
modelBuilder.Entity&amp;lt;Student&amp;gt;().Property(x =&amp;gt; x.RowVersion).IsRowVersion();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在数据库中就是这样的，每次数据更新时，数据库中的RowVersion也会如时间戳一样得到更新，从而检测数据库中所存储的值与实体中的值是否一致来检测并发冲突。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/819807/201902/819807-20190203213438432-1656803985.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么接下来我们就开始在异常处理中进行操作，他不是数据不是最新的吗？那么我就让他得到最新的。因为EF中有针对并发异常的类（DbUpdateConcurrencyException）。&lt;/p&gt;
&lt;p&gt;DbUpdateConcurrencyException中具有Entries属性,该属性返回一系列DbEntityEntry对象，表示冲突实体的跟踪信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu1 =&lt;span&gt; ctx1.Students.FirstOrDefault();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu2 =&lt;span&gt; ctx2.Students.FirstOrDefault();
    stu1.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小新111&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    ctx1.SaveChanges();
    stu2.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小新222&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
    {
        ctx2.SaveChanges();
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (DbUpdateConcurrencyException ex)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; s =&lt;span&gt; ex.Entries.Single();
        s.Reload();
        Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stu2.Name:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + stu2.Name);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  小新11&lt;/span&gt;
        stu2.Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小新222&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        ctx2.SaveChanges();
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;调用Reload方法来刷新数据库中的最新值到当前内存中的值，就是造成并发冲突的这个对象，更新它。&lt;/p&gt;
&lt;p&gt; 如果说不用Relod，也有另外一种方式来实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ctx1.Database.Log = msg =&amp;gt; Console.WriteLine(&quot;ctx11111111111111:&quot; + msg);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ctx2.Database.Log = msg =&amp;gt; Console.WriteLine(&quot;ctx22222222222222:&quot; + msg);&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; stu1 =&lt;span&gt; ctx1.Students.FirstOrDefault();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu2 =&lt;span&gt; ctx2.Students.FirstOrDefault();

    stu1.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小新11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    ctx1.SaveChanges();
    stu2.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小新22&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
    {
        ctx2.SaveChanges();
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (DbUpdateConcurrencyException ex)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  获取并发异常被追踪的实体&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; tracking =&lt;span&gt; ex.Entries.Single();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  获取数据库原始值对象，数据库中没被修改之前的值&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; original = (Student)tracking.OriginalValues.ToObject(); Console.WriteLine(original.Name);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   小新
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  获取更新后数据库最新的值对象,就是数据库中目前的值，这一句会发起查询&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; database = (Student)tracking.GetDatabaseValues().ToObject(); Console.WriteLine(database.Name);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  小新11
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  获取当前内存的值，就是造成并发异常的值&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; current = (Student)tracking.CurrentValues.ToObject(); Console.WriteLine(current.Name);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  小新22&lt;/span&gt;
&lt;span&gt;        tracking.OriginalValues.SetValues(database);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tracking.GetDatabaseValues().SetValues(current);  &lt;/span&gt;
        ctx2.SaveChanges();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  需要调用savechanges方法&lt;/span&gt;

        &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 这里有一个疑问，照我的理解应该是将current的值赋值给当前数据库中的值，也就是tracking.GetDatabaseValues().SetValues(current);&lt;/p&gt;
&lt;p&gt;但是这样写报错，虽然作者也专门解释了，但是我还是懵的……&lt;/p&gt;
&lt;p&gt;行吧，这个还是必要自己去动手弄一下，体会一下。初级版的并发冲突解决方案就到这里了。&lt;/p&gt;
&lt;p&gt;后面还是不得不说一下，我也是今天才知道多个using可以这个很简单的堆叠起来写，很优雅啊。&lt;/p&gt;
&lt;p&gt;然后利用上下文的日志打印真的很有用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (DB1_Context ctx2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DB1_Context())
{
    ctx1.Database.Log &lt;/span&gt;= msg =&amp;gt; Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctx111111111111111:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; msg);
    ctx2.Database.Log &lt;/span&gt;= msg =&amp;gt; Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctx222222222222222:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; msg);

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu1 =&lt;span&gt; ctx1.Students.FirstOrDefault();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stu2 =&lt;span&gt; ctx2.Students.FirstOrDefault();
    stu1.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小新11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    stu2.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小新22&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    ctx1.SaveChanges();
    ctx2.SaveChanges();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/819807/201902/819807-20190203220234449-593977741.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从打印的结果可以看到，关于数据库初始化的任务全部是由ctx1去执行的，就是这些什么Migration这些东西&lt;/p&gt;
&lt;p&gt;难道是我ctx1对象先构造的问题？或者ctx1的log先打印的问题，于是我改成ctx2先构造，然后ctx2的log也先执行，发现还是上面打印的结果，还是ctx1去执行数据库初始化的工作。&lt;/p&gt;
&lt;p&gt;直到我将ctx2先查询出student对象才变成ctx2先执行这些操作。所以是不是就认识到，多个上下文到底是谁来负责数据库初始化的任务呢？那就看看是谁先与数据库交互了，现在构造上下文对象这里并没有与数据库发生交互。&lt;/p&gt;
&lt;p&gt;行吧，就这了，后面还会继续学习。&lt;/p&gt;

</description>
<pubDate>Sun, 03 Feb 2019 14:09:00 +0000</pubDate>
<dc:creator>张四海</dc:creator>
<og:description>要专业系统地学习EF推荐《你必须掌握的Entity Framework 6.x与Core 2.0》。这本书作者（汪鹏，Jeffcky）的博客：https://www.cnblogs.com/Creat</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jinshan-go/p/10351135.html</dc:identifier>
</item>
</channel>
</rss>