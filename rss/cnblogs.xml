<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>FreeSql 新的八大骚功能，.NETCore 你必须晓得的 ORM - nicye</title>
<link>http://www.cnblogs.com/kellynic/p/10777510.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kellynic/p/10777510.html</guid>
<description>&lt;p&gt;FreeSql 目前版本号 0.5.5，预计明年元旦发布 1.0.0，切莫小看了版本号，目前单元测试方法1350+，并且每个方法内的涵盖面又比较广（不信的话见下图），每一次版本发布都作了较多的测试工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/31407/201904/31407-20190427021604573-1336855696.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最近的一段时间，关注我们的人时不时会看见扩展包发布，今天振奋人心的功能主要是核心部分实现（扩展包今天当配角）。就不多啰嗦了，咱们直接入主题。&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;使用 codefirst 时序列化 json 或 jsonb 数据类型报错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;使用 postgresql + ef 配置数据映射关系，使用 FreeSql 的映射扩展时，对于json类型的数据映射出错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是来自 github 上的某个 issue，原因是用户的实体定义了 string，数据库类型为 json。FreeSql 本身支持了丰富的类型，不限于 json，但是限定了类型的映射，比如 JToken/JObject/JArray 的实体类型才可以映射至 PostgreSQL 数据库的 json 类型。另外虽然有 DbType 特性可以设置，但使用范围有限，不可跨越类型（如使用 string 可使用 DbType=&quot;char(100)&quot;）。&lt;/p&gt;
&lt;p&gt;还有类似的，如：将 enum 映射到数据库 varchar 的请求。。。。&lt;/p&gt;
&lt;p&gt;到现在，我们已经彻底突破了这个障碍，基本可以做到随意映射类型。作为新项目开发，我们提供本身的默认类型映射已经非常人性化，提这些需求的人主要还是历史原因，咱们做程序维护工作的人员还是占比很高，千怪万怪只能怪 FreeSql 来得太迟。。。。&lt;/p&gt;
&lt;p&gt;目前为 MapType 功能增加了大约 400 个单元测试方法。贴一段 demo 配置方法：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;class EnumTestMap {
    public Guid id { get; set; }

    [Column(MapType = typeof(string))]
    public ToStringMapEnum enum_to_string { get; set; }
    [Column(MapType = typeof(string))]
    public ToStringMapEnum? enumnullable_to_string { get; set; }

    [Column(MapType = typeof(int))]
    public ToStringMapEnum enum_to_int { get; set; }
    [Column(MapType = typeof(int?))]
    public ToStringMapEnum? enumnullable_to_int { get; set; }

    [Column(MapType = typeof(string))]
    public BigInteger biginteger_to_string { get; set; }
    [Column(MapType = typeof(string))]
    public BigInteger? bigintegernullable_to_string { get; set; }
}
public enum ToStringMapEnum { 中国人, abc, 香港 }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;应该不需要解释了吧？&lt;/p&gt;
&lt;p&gt;细看一下，实体内有 BigInteger 类型，这可是数据库无法表示的类型，现在就是可以使用（没辙）。但请注意：BigInteger 仅仅是 CURD 方便， Equals == 判断可以使用，无法使用 + - * / &amp;lt; &amp;gt; 等操作；&lt;/p&gt;
&lt;h2 id=&quot;默认映射&quot;&gt;默认映射&lt;/h2&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;14.5&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;bool, bool?&lt;/td&gt;
&lt;td&gt;bit(1)&lt;/td&gt;
&lt;td&gt;bit&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;number(1)&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;sbyte, sbyte?&lt;/td&gt;
&lt;td&gt;tinyint(3)&lt;/td&gt;
&lt;td&gt;smallint&lt;/td&gt;
&lt;td&gt;int2&lt;/td&gt;
&lt;td&gt;number(4)&lt;/td&gt;
&lt;td&gt;smallint&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;short, short?&lt;/td&gt;
&lt;td&gt;smallint(6)&lt;/td&gt;
&lt;td&gt;smallint&lt;/td&gt;
&lt;td&gt;int2&lt;/td&gt;
&lt;td&gt;number(6)&lt;/td&gt;
&lt;td&gt;smallint&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;int, int?&lt;/td&gt;
&lt;td&gt;int(11)&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;int4&lt;/td&gt;
&lt;td&gt;number(11)&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;long, long?&lt;/td&gt;
&lt;td&gt;bigint(20)&lt;/td&gt;
&lt;td&gt;bigint&lt;/td&gt;
&lt;td&gt;int8&lt;/td&gt;
&lt;td&gt;number(21)&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;byte, byte?&lt;/td&gt;
&lt;td&gt;tinyint(3) unsigned&lt;/td&gt;
&lt;td&gt;tinyint&lt;/td&gt;
&lt;td&gt;int2&lt;/td&gt;
&lt;td&gt;number(3)&lt;/td&gt;
&lt;td&gt;int2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;ushort, ushort?&lt;/td&gt;
&lt;td&gt;smallint(5) unsigned&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;int4&lt;/td&gt;
&lt;td&gt;number(5)&lt;/td&gt;
&lt;td&gt;unsigned&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;uint, uint?&lt;/td&gt;
&lt;td&gt;int(10) unsigned&lt;/td&gt;
&lt;td&gt;bigint&lt;/td&gt;
&lt;td&gt;int8&lt;/td&gt;
&lt;td&gt;number(10)&lt;/td&gt;
&lt;td&gt;decimal(10,0)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;ulong, ulong?&lt;/td&gt;
&lt;td&gt;bigint(20) unsigned&lt;/td&gt;
&lt;td&gt;decimal(20,0)&lt;/td&gt;
&lt;td&gt;numeric(20,0)&lt;/td&gt;
&lt;td&gt;number(20)&lt;/td&gt;
&lt;td&gt;decimal(21,0)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;double, double?&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;float8&lt;/td&gt;
&lt;td&gt;float(126)&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;float, float?&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;real&lt;/td&gt;
&lt;td&gt;float4&lt;/td&gt;
&lt;td&gt;float(63)&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;decimal, decimal?&lt;/td&gt;
&lt;td&gt;decimal(10,2)&lt;/td&gt;
&lt;td&gt;decimal(10,2)&lt;/td&gt;
&lt;td&gt;numeric(10,2)&lt;/td&gt;
&lt;td&gt;number(10,2)&lt;/td&gt;
&lt;td&gt;decimal(10,2)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Guid, Guid?&lt;/td&gt;
&lt;td&gt;char(36)&lt;/td&gt;
&lt;td&gt;uniqueidentifier&lt;/td&gt;
&lt;td&gt;uuid&lt;/td&gt;
&lt;td&gt;char(36 CHAR)&lt;/td&gt;
&lt;td&gt;character(36)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;TimeSpan, TimeSpan?&lt;/td&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;interval day(2) to second(6)&lt;/td&gt;
&lt;td&gt;bigint&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;DateTime, DateTime?&lt;/td&gt;
&lt;td&gt;datetime&lt;/td&gt;
&lt;td&gt;datetime&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;timestamp(6)&lt;/td&gt;
&lt;td&gt;datetime&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;DateTimeOffset&lt;br/&gt;DateTimeOffset?&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;datetimeoffset&lt;/td&gt;
&lt;td&gt;timestamp(6) with local time zone&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Enum, Enum?&lt;/td&gt;
&lt;td&gt;enum&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;int4&lt;/td&gt;
&lt;td&gt;number(16)&lt;/td&gt;
&lt;td&gt;mediumint&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;FlagsEnum, FlagsEnum?&lt;/td&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;bigint&lt;/td&gt;
&lt;td&gt;int8&lt;/td&gt;
&lt;td&gt;number(32)&lt;/td&gt;
&lt;td&gt;bigint&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;byte[]&lt;/td&gt;
&lt;td&gt;varbinary(255)&lt;/td&gt;
&lt;td&gt;varbinary(255)&lt;/td&gt;
&lt;td&gt;bytea&lt;/td&gt;
&lt;td&gt;blob&lt;/td&gt;
&lt;td&gt;blob&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;varchar(255)&lt;/td&gt;
&lt;td&gt;nvarchar(255)&lt;/td&gt;
&lt;td&gt;varchar(255)&lt;/td&gt;
&lt;td&gt;nvarchar2(255)&lt;/td&gt;
&lt;td&gt;nvarchar(255)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;MygisPoint&lt;/td&gt;
&lt;td&gt;point&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;MygisLineString&lt;/td&gt;
&lt;td&gt;linestring&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;MygisPolygon&lt;/td&gt;
&lt;td&gt;polygon&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;MygisMultiPoint&lt;/td&gt;
&lt;td&gt;multipoint&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;MygisMultiLineString&lt;/td&gt;
&lt;td&gt;multilinestring&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;MygisMultiPolygon&lt;/td&gt;
&lt;td&gt;multipolygon&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;BitArray&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;varbit(64)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;NpgsqlPoint&lt;br/&gt;NpgsqlPoint?&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;point&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;NpgsqlLine&lt;br/&gt;NpgsqlLine?&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;line&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;NpgsqlLSeg&lt;br/&gt;NpgsqlLSeg?&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;lseg&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;NpgsqlBox&lt;br/&gt;NpgsqlBox?&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;box&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;NpgsqlPath&lt;br/&gt;NpgsqlPath?&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;NpgsqlPolygon&lt;br/&gt;NpgsqlPolygon?&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;polygon&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;NpgsqlCircle&lt;br/&gt;NpgsqlCircle?&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;circle&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;(IPAddress, int)&lt;br/&gt;(IPAddress, int)?&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;cidr&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;IPAddress&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;inet&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;PhysicalAddress&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;macaddr&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;NpgsqlRange&amp;lt;int&amp;gt;&lt;br/&gt;NpgsqlRange&amp;lt;int&amp;gt;?&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;int4range&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;NpgsqlRange&amp;lt;long&amp;gt;&lt;br/&gt;NpgsqlRange&amp;lt;long&amp;gt;?&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;int8range&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;NpgsqlRange&amp;lt;decimal&amp;gt;&lt;br/&gt;NpgsqlRange&amp;lt;decimal&amp;gt;?&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;numrange&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;NpgsqlRange&amp;lt;DateTime&amp;gt;&lt;br/&gt;NpgsqlRange&amp;lt;DateTime&amp;gt;?&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;tsrange&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;PostgisPoint&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;geometry&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;PostgisLineString&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;geometry&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;PostgisPolygon&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;geometry&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;PostgisMultiPoint&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;geometry&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;PostgisMultiLineString&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;geometry&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;PostgisMultiPolygon&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;geometry&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;PostgisGeometry&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;geometry&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;PostgisGeometryCollection&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;geometry&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Dictionary&amp;lt;string, string&amp;gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;hstore&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;JToken&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;jsonb&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;JObject&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;jsonb&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;JArray&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;jsonb&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;数组&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;以上所有类型都支持&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;以上类型和长度是默认值，可手工设置，如 string 属性可指定 [Column(DbType = &quot;varchar(max)&quot;)]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;class AddUniquesInfo {

    public Guid id { get; set; }
    [Column(Unique = &quot;uk_phone&quot;)]
    public string phone { get; set; }

    [Column(Unique = &quot;uk_group_index&quot;)]
    public string group { get; set; }
    [Column(Unique = &quot;uk_group_index&quot;)]
    public int index { get; set; }

    [Column(Unique = &quot;uk_group_index222&quot;)]
    public string index22 { get; set; }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Unique 指定相同的标识，代表联合唯一键，现已支持迁移。&lt;/p&gt;

&lt;p&gt;之前在操作实体时，必须传统泛型参数，现在可以实现弱类型实体的操作。以 Repository 为例：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;var repos = fsql.GetGuidRepository&amp;lt;object&amp;gt;();
repos.AsType(typeof(AddUpdateInfo));

var item = new AddUpdateInfo();
repos.Insert(item);

item.Clicks += 1;
repos.InsertOrUpdate(item);

var item2 = repos.Find(item.Id) as AddUpdateInfo;
Assert.Equal(item.Clicks, item2.Clicks);

repos.DataFilter.Apply(&quot;xxx&quot;, a =&amp;gt; (a as AddUpdateInfo).Clicks == 11);
Assert.Null(repos.Find(item.Id));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后呢，DbContext 也支持同样的操作。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;dotnet add package FreeSql.DbContext&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在支持 ToList(a =&amp;gt; new Dto()) 这样的简单数据映射。&lt;/p&gt;
&lt;p&gt;什么意思？即 Dto 只要有属性名与实体属性相同，就会根据匹配到的字段查询（不是查询所有字段回来再映射）。&lt;/p&gt;
&lt;p&gt;然后这个骚操作，还支持多表查询的映射，怎么解决多表存在相同名字的字段问题呢？优先级规则，它会依次序匹配 LeftJoin/InnerJoin/RightJoin 的实体。&lt;/p&gt;

&lt;p&gt;以前 .ToList() 会加载两级Join对象；&lt;/p&gt;
&lt;p&gt;现在 ISelect.ToList(includeNestedMembers: true) 贪婪加载所有 LeftJoin/InnerJoin/RightJoin 导航数据，不论对象的层级；&lt;/p&gt;

&lt;p&gt;支持传入动态对象如：主键值 | new[]{主键值1,主键值2} | TEntity1 | new[]{TEntity1,TEntity2} | new{id=1}。&lt;/p&gt;
&lt;p&gt;也就是说 WhereDynaimc 方法输入类型为 object，是不是很方便？还支持联合主键呢。&lt;/p&gt;

&lt;p&gt;var result = fsql.Ado.Query&amp;lt;T1, T2&amp;gt;(&quot;select * from t1; select * from t2&quot;);&lt;/p&gt;

&lt;p&gt;大约是前一段时间的某一天（废话），因为使用 FreeSql 的某项目需要做一个简单的后台功能，以便录入或管理数据。在实施的过程中好怀念当初 dotnetGen 生成器的味道，用它产生 curd 基本功能几乎是秒做；&lt;/p&gt;
&lt;p&gt;FreeSql.AdminLTE，是的就是它，前段时间发布过一次。&lt;/p&gt;
&lt;p&gt;它是 FreeSql 衍生出来的 .NETCore MVC 中间件、中间件、中间件（重复三遍）扩展包，基于 AdminLTE 前端框架动态产生实体的增删查改界面；&lt;/p&gt;
&lt;p&gt;输入：实体1、实体2、实体3&lt;/p&gt;
&lt;p&gt;输出：后台管理的功能&lt;/p&gt;
&lt;p&gt;只需要传入实体，就可以形成 curd 的管理功能，是不是有些骚啊~~~&lt;/p&gt;
&lt;p&gt;先发一张运行后的图片尝个鲜：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/31407/201904/31407-20190418162253103-1715563428.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是根据实体产生 curd 界面的 mvc 中间件，开发时预览数据好方便啊。看完预览图不由得再感叹一次 FreeSql 的易用性，那句口号：做 .NETCore 最方便的 ORM！ 没有说错。。。作者多次提及：“我们是日式简约风格，没那么复杂的用法”，也验证了这一点。。&lt;/p&gt;
&lt;h2 id=&quot;添加修改&quot;&gt;添加/修改&lt;/h2&gt;
&lt;p&gt;中件间产生的界面包括添加、修改数据的功能，普通实体的根据属性的类型与 Html5 UI 一一映射；&lt;/p&gt;
&lt;p&gt;比较特殊的映射规则：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;布尔&lt;/td&gt;
&lt;td&gt;复选框&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;枚举&lt;/td&gt;
&lt;td&gt;下拉选择&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;日期&lt;/td&gt;
&lt;td&gt;日期控件&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;ManyToOne 导航属性&lt;/td&gt;
&lt;td&gt;下拉选择&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;ManyToMany 导航属性&lt;/td&gt;
&lt;td&gt;多选器&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;等等。。。&lt;/p&gt;
&lt;p&gt;什么情况会产生【上传文件】控件？&lt;br/&gt;有兴趣的可以了解源码，目前没有开放在外部配置。&lt;/p&gt;
&lt;h2 id=&quot;查询过滤&quot;&gt;查询/过滤&lt;/h2&gt;
&lt;p&gt;中件间为每个实体提供了分页列表查询，每页为20条数据；&lt;/p&gt;
&lt;p&gt;除此外，还提供了过滤条件的支持，规则是根据导航属性（ManyToOne、ManyToMany）。比如【文章实体】，内含有【分类id】+【分类对象】，则【文章】列表页会出现按【分类】筛选的UI，详见上面的 demo 示意图，或者下载对应的 demo 版本运行；&lt;/p&gt;
&lt;h2 id=&quot;删除&quot;&gt;删除&lt;/h2&gt;
&lt;p&gt;中件间为每个实体提供了批量删除的功能；&lt;/p&gt;
&lt;h2 id=&quot;测试-demo&quot;&gt;测试 demo&lt;/h2&gt;
&lt;p&gt;我们习惯用 sqlite 做测试库，测试完毕直接删除目录，不留垃圾数据，所以下面的 demo 不需要修改任何地方，运行时自动建库、建表；&lt;/p&gt;
&lt;p&gt;提供 .net core 2.1、2.2 两种环境的测试 demo 下载：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/2881099/FreeSql.AdminLTE/files/3094470/Demo.for.dotnet.2.1.zip&quot;&gt;Demo for dotnet 2.1.zip&lt;/a&gt;、&lt;a href=&quot;https://github.com/2881099/FreeSql.AdminLTE/files/3094471/Demo.for.dotnet.2.2.zip&quot;&gt;Demo for dotnet 2.2.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16286519/56343089-61a6ac80-61ec-11e9-9a77-2e97cff500be.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第一步：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dotnet restore&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二步：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dotnet run&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;思考&quot;&gt;思考&lt;/h2&gt;
&lt;p&gt;一番惊喜过后，你应该会考虑实用性，这样做有什么价值，可用于什么样的场景？&lt;/p&gt;
&lt;p&gt;这个扩展包简单的输入，产生巨量的功能反馈。目前来说它是死板的，对外提供的扩展性几乎为零，这样也就限定了它的应用场景。&lt;/p&gt;
&lt;h3 id=&quot;不合适的场景&quot;&gt;不合适的场景&lt;/h3&gt;
&lt;p&gt;1、它不可替代我们自身开发的后台管理系统；&lt;/p&gt;
&lt;p&gt;2、它不适合摆放在公网正式环境，存在数据安全问题；&lt;/p&gt;
&lt;p&gt;3、欢迎补充。。。；&lt;/p&gt;
&lt;h3 id=&quot;谈谈定位&quot;&gt;谈谈定位&lt;/h3&gt;
&lt;p&gt;目前的定位是这样的，在开发环境中使用，查阅预览实体数据，同时也比较方便的管理测试数据。&lt;/p&gt;
&lt;p&gt;一段拥有无比力量的小段代码，也是中间件界面的功能开启：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;//可以配置子目录访问，如：/testadmin/
app.UseFreeAdminLTE(&quot;/&quot;,
    typeof(Entities.Song),
    typeof(Entities.Tag));&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;我们一直在发布纯技术干货的分享文章，FreeSql 已经基本完成 .NETCore 最方便的 ORM 使命，我们正在筹备生态的建立，比如 ABP 中如何使用 FreeSql 的实现，需要各种各样的扩展包，好多好多工作量。有没有大神愿意无偿参与做这件事情，好吧。。应该没有人！！如果你回心转意了，欢迎联系我们。&lt;/p&gt;
&lt;p&gt;欢迎持续关注我们，做 .NETCore 最方便的 ORM ！&lt;/p&gt;
&lt;p&gt;（QQ群：4336577）&lt;/p&gt;
&lt;p&gt;github： &lt;a href=&quot;https://github.com/2881099/FreeSql&quot; class=&quot;uri&quot;&gt;https://github.com/2881099/FreeSql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说好的抽奖呢？？？&lt;/p&gt;
</description>
<pubDate>Fri, 26 Apr 2019 18:45:00 +0000</pubDate>
<dc:creator>nicye</dc:creator>
<og:description>前言 FreeSql 目前版本号 0.5.5，预计明年元旦发布 1.0.0，切莫小看了版本号，目前单元测试方法1350+，并且每个方法内的涵盖面又比较广（不信的话见下图），每一次版本发布都作了较多的测</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kellynic/p/10777510.html</dc:identifier>
</item>
<item>
<title>linux系统ansible一键完成三大服务器基本配置 - linux_王龙龙</title>
<link>http://www.cnblogs.com/wanglonglong/p/10777410.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wanglonglong/p/10777410.html</guid>
<description>&lt;p&gt;准备：&lt;/p&gt;
&lt;p&gt;五台服务器：一台管理服务器m01:172.16.1.61、两台应用服务器web01:172.16.1.7、web02:172.16.1.8、一台存储服务器nfs:172.16.1.31、一台备份服务器rsync:172.16.1.41&lt;/p&gt;
&lt;p&gt;实现：通过m01管理机，实现nfs服务器共享目录/data给两台web服务器&lt;/p&gt;
&lt;p&gt;           实现nfs服务器/data目录实时同步到rsync服务器/backup&lt;/p&gt;
&lt;p&gt;           实现两台web服务器，nfs服务器重要文件可以定时备份到rsync服务器&lt;/p&gt;
&lt;p&gt;开始实战：&lt;/p&gt;
&lt;p&gt;一、部署管理机m01环境：&lt;/p&gt;
&lt;p&gt;1.下载软件&lt;/p&gt;
&lt;p&gt;vim /server/scripts/benjibushu.sh&lt;/p&gt;
&lt;p&gt;#!/bin/sh&lt;/p&gt;
&lt;p&gt;#安装必要软件到本机&lt;/p&gt;
&lt;p&gt;yum install oppenssh oppenssl -y&lt;/p&gt;
&lt;p&gt;systemctl restart sshd&lt;/p&gt;
&lt;p&gt;systemctl enable sshd&lt;/p&gt;
&lt;p&gt;yum install epel-release -y&lt;/p&gt;
&lt;p&gt;yum install exportfs -y&lt;/p&gt;
&lt;p&gt;yum install libselinux-python&lt;/p&gt;
&lt;p&gt;2.备份ansible配置文件&lt;/p&gt;
&lt;p&gt;cp /etc/ansible/hosts{,.ori}&lt;/p&gt;
&lt;p&gt;3.编辑主机列表模块&lt;/p&gt;
&lt;p&gt;cat &amp;gt;/etc/ansible/hosts&amp;lt;&amp;lt;EOF&lt;/p&gt;
&lt;p&gt;#1代表服务端，2代表客户端&lt;/p&gt;
&lt;p&gt;[oldboy]&lt;/p&gt;
&lt;p&gt;172.16.1.7&lt;/p&gt;
&lt;p&gt;172.16.1.8&lt;/p&gt;
&lt;p&gt;172.16.1.31&lt;/p&gt;
&lt;p&gt;172.16.1.41&lt;/p&gt;

&lt;p&gt;[rsync1]&lt;/p&gt;
&lt;p&gt;172.16.1.41&lt;/p&gt;

&lt;p&gt;[rsync2]&lt;/p&gt;
&lt;p&gt;172.16.1.7&lt;/p&gt;
&lt;p&gt;172.16.1.8&lt;/p&gt;
&lt;p&gt;172.16.1.31&lt;/p&gt;

&lt;p&gt;[nfs1]&lt;/p&gt;
&lt;p&gt;172.16.1.31&lt;/p&gt;

&lt;p&gt;[nfs2]&lt;/p&gt;
&lt;p&gt;172.16.1.7&lt;/p&gt;
&lt;p&gt;172.16.1.8&lt;/p&gt;

&lt;p&gt;[sersync]&lt;/p&gt;
&lt;p&gt;172.16.1.31&lt;/p&gt;
&lt;p&gt;EOF&lt;/p&gt;
&lt;p&gt;4.编辑脚本，生成并分发密钥&lt;/p&gt;
&lt;p&gt;vim /server/scripts/fenfa.sh&lt;/p&gt;
&lt;p&gt;#/bin/sh&lt;/p&gt;
&lt;p&gt;yum install sshpass -y&lt;/p&gt;
&lt;p&gt;#创建密钥&lt;/p&gt;
&lt;p&gt;ssh-keygen -f ~/.ssh/id_rsa -P '' -q&lt;/p&gt;
&lt;p&gt;#for循环，发送公钥给四台服务器&lt;/p&gt;
&lt;p&gt;for ip in 7 8 31 41&lt;/p&gt;
&lt;p&gt;do &lt;/p&gt;
&lt;p&gt;   sshpass -p123456 ssh-copy id  -i ~/.ssh/id_rsa.pub &quot;-o StricHostKeyChecking=no&quot; 172.16.1.$ip&lt;/p&gt;
&lt;p&gt;done&lt;/p&gt;
&lt;p&gt;5.编辑ansible配置文件，取消71行注释 （免密连接，已经发送公钥，此处也可省略）&lt;/p&gt;

&lt;p&gt;6.执行/server/scripts/fenfa.sh发送公钥&lt;/p&gt;
&lt;p&gt;sh /server/scripts/fenfa.sh&lt;/p&gt;

&lt;p&gt;7.测试远程连接&lt;/p&gt;
&lt;p&gt;ansible oldboy -m command -a &quot;ifconfig&quot;&lt;/p&gt;

&lt;p&gt;8.可以相对优化一下ssh，此处先省略&lt;/p&gt;

&lt;p&gt;二、编写nfs共享目录的服务端nfs1.sh&lt;/p&gt;
&lt;p&gt;cd /server/scripts&lt;/p&gt;
&lt;p&gt;切换到/server/scripts目录，下边全部在这个目录下执行，也就不在写全路径。。。&lt;/p&gt;
&lt;p&gt;vim nfs1.sh&lt;/p&gt;
&lt;p&gt;#!/bin/sh&lt;/p&gt;
&lt;p&gt;yum install nfs-utils rpcbind -y &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;systemctl start rpcbind.service &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;systemctl enable rpcbind.service &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;#先启动rpcbind服务，再启动nfs服务，相信不用注释，读者也明白吧&lt;/p&gt;
&lt;p&gt;systemctl start nfs &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;systemctl enable nfs &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;#添加共享目录/data，这里不指定创建虚拟用户，使用默认的nfsnobodu用户&lt;/p&gt;
&lt;p&gt;cat &amp;gt;/etc/exportfs&amp;lt;&amp;lt;EOF&lt;/p&gt;
&lt;p&gt;/data 172.16.1.0/24(rw,sync,all_squash)&lt;/p&gt;
&lt;p&gt;EOF&lt;/p&gt;
&lt;p&gt;mkdir -p /data &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;chown -R nfsnobody.nfsnobody /data &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;exportfs -r&lt;/p&gt;
&lt;p&gt;编写nfs客户端脚本&lt;/p&gt;
&lt;p&gt;vim nfs2.sh&lt;/p&gt;
&lt;p&gt;#!/bin/sh&lt;/p&gt;
&lt;p&gt;yum install nfs-utils rpcbind -y &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;systemctl start rpcbind.service &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;systemctl enable rpcbind.service &amp;amp;&amp;amp;&lt;/p&gt;
&lt;p&gt;systemctl start nfs &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;systemctl enable nfs &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;mount -t nfs 172.16.1.31:/data /mnt&lt;/p&gt;
&lt;p&gt;#在此没有添加开机自动挂载，需要者把改在命令写在fstab即可。。。&lt;/p&gt;
&lt;p&gt;三、编写rsync服务端&lt;/p&gt;
&lt;p&gt;vim rsync1.sh&lt;/p&gt;
&lt;p&gt;yum install rsync -y &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;cp /etc/rsyncd.conf{,.ori} &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;cat &amp;gt;/etc/rsyncd.conf&amp;lt;&amp;lt;EOF&lt;/p&gt;
&lt;p&gt;uid = rsync&lt;/p&gt;
&lt;p&gt;gid = rsync&lt;/p&gt;
&lt;p&gt;use chroot = no&lt;/p&gt;
&lt;p&gt;fask super =yes&lt;/p&gt;
&lt;p&gt;max connections = 200&lt;/p&gt;
&lt;p&gt;timeout = 600&lt;/p&gt;
&lt;p&gt;pid file = /var/run/rsyncd.pid&lt;/p&gt;
&lt;p&gt;lock file = /var/lock/rsyncd.lock&lt;/p&gt;
&lt;p&gt;log file = /var/log/rsyncd.log&lt;/p&gt;
&lt;p&gt;ignore errors&lt;/p&gt;
&lt;p&gt;read only = false&lt;/p&gt;
&lt;p&gt;list = false&lt;/p&gt;
&lt;p&gt;hosts allow =172.16.1.0/24&lt;/p&gt;
&lt;p&gt;auth users =rsync_backup&lt;/p&gt;
&lt;p&gt;secrets file = /etc/rsync.password&lt;/p&gt;
&lt;p&gt;[backup]&lt;/p&gt;
&lt;p&gt;comment = welcome to oldboy backup!&lt;/p&gt;
&lt;p&gt;path = /backup/&lt;/p&gt;
&lt;p&gt;EOF&lt;/p&gt;
&lt;p&gt;useradd -M -s /usr/bin/nologin rsync &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;mkdir -p /backup &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;chown -R rsync.rsync /backup/ &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;echo &quot;rsync_backup:123456&quot; &amp;gt;/etc/rsync.password &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;chown 600 /etc/rsync.password&lt;/p&gt;
&lt;p&gt;systemctl start rsyncd &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;systemctl enable rsyncd&lt;/p&gt;

&lt;p&gt;编写rsync客户端&lt;/p&gt;
&lt;p&gt;vim rsync2.sh&lt;/p&gt;
&lt;p&gt;#!/bin/sh&lt;/p&gt;
&lt;p&gt;yum install rsync -y&lt;/p&gt;
&lt;p&gt;echo &quot;123456&quot; &amp;gt;/etc/rsync.password &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;chmod 600 /etc/rsync.password &amp;amp;&amp;amp;&lt;/p&gt;
&lt;p&gt;systemctl rsetart rsyncd &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;systemctl enable rsyncd &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;echo &quot;exportfs RSYNC_PASSWORD=123456&quot; &amp;gt;&amp;gt;/etc/bashrc &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;exportfs -r&lt;/p&gt;
&lt;p&gt;四、编辑sersync实现实时同步&lt;/p&gt;
&lt;p&gt;vim sersync.sh&lt;/p&gt;
&lt;p&gt;#!/bin/sh&lt;/p&gt;
&lt;p&gt;echo &quot;exportfs RSYNC_PASSWORD=123456&quot;  &amp;gt;&amp;gt;/etc/bashrc &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;source /etc/bashrc &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;yum install inotify-tools -y &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;touch monitor,sh &amp;amp;&amp;amp;\&lt;/p&gt;
&lt;p&gt;cat &amp;gt;/server/scripts/monitor.sh&amp;lt;&amp;lt;EOF&lt;/p&gt;
&lt;p&gt;#!/bin/sh/&lt;/p&gt;
&lt;p&gt;/usr/bin/inotifywait -mrq --format '%w%f' -e close_write,delete /data|while read line&lt;/p&gt;
&lt;p&gt;do&lt;/p&gt;
&lt;p&gt;  cd /data &amp;amp;&amp;amp; rsync -az --delete ./ rsync-backup@172.16.1.41:;backup&lt;/p&gt;
&lt;p&gt;done&lt;/p&gt;
&lt;p&gt;EOF&lt;/p&gt;

&lt;p&gt;五、我是个粗人，现在把所有推送执行命令脚本放在一个脚本里&lt;/p&gt;
&lt;p&gt;vim one.ok.sh&lt;/p&gt;
&lt;p&gt;#!/bin/sh&lt;/p&gt;
&lt;p&gt;ansible rsync1 -m script -a &quot;/server/scripts/rsync1.sh&quot;&lt;/p&gt;
&lt;p&gt;ansible rsync2 -m script -a &quot;/server/scripts/rsync2.sh&quot;&lt;/p&gt;
&lt;p&gt;ansible nfs1 -m script -a &quot;/server/scripts/nfs1.sh&quot;&lt;/p&gt;
&lt;p&gt;ansible nfs2 -m script -a &quot;/servet/scripts/nfs2.sh&quot;&lt;/p&gt;
&lt;p&gt;ansible sersync -m &quot;/server/scripts/sersync.sh&quot;&lt;/p&gt;

&lt;p&gt;sh one.ok.sh&lt;/p&gt;
&lt;p&gt;执行这个脚本，即可一键完成部署四台服务器基础配置，前提是前边测试免密远程管理成功，纯手撸代码，没用脚，倘若哪里执行失败，请仔细核对，若果发现我的脚本有命令出错的地方，希望可以得到读者的反馈，第一时间改正，以免影响更多的读者。 &lt;/p&gt;
</description>
<pubDate>Fri, 26 Apr 2019 17:02:00 +0000</pubDate>
<dc:creator>linux_王龙龙</dc:creator>
<og:description>准备： 五台服务器：一台管理服务器m01:172.16.1.61、两台应用服务器web01:172.16.1.7、web02:172.16.1.8、一台存储服务器nfs:172.16.1.31、一台备</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wanglonglong/p/10777410.html</dc:identifier>
</item>
<item>
<title>python设计模式-观察者 - zzt小怪兽</title>
<link>http://www.cnblogs.com/zztxiaodeng/p/10777331.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zztxiaodeng/p/10777331.html</guid>
<description>&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖的对象都会得到通知并被自动更新。&lt;/p&gt;
&lt;p&gt;　　观察者模式是对象的行为模式，又叫发布-订阅（pubish/subscribe）模式，模型-视图（Model/View模式），源-监听器（Source/Listener）模式或从属者（Dependents）模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;角色：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;抽象主题，具体主题（发布者）， 抽象观察者，具体观察者（订阅者）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;适用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　当一个抽象模型有两个方面,其中一个方面依赖于另一个方面.将两者封装在独立的对象中以使它们各自独立的改变和复用&lt;/p&gt;
&lt;p&gt;               当一个对象的改变需要同时改变其他对象,而且不知道具体有多少对象以待改变&lt;/p&gt;
&lt;p&gt;               当一个对象必须通知其他对象,而又不知道其他对象是谁,即这些对象之间是解耦的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;目标与观察者之间的耦合最小&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;多个观察者之间互不知道对方的存在，因此一个观察者对主题的修改可能造成错误的更新&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;好， 概念说完来实际场景，以我目前公司业务为背景，产品上线后经常会收到用户反馈bug。那么通常由运营同事收集bug-》开发修复bug-》测试验证bug-》运维发布新版本到线上&lt;/p&gt;
&lt;p&gt;直接上代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; OBperson():
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;抽象观察者&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; updata(self):
        &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestOB(OBperson):
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;具体观察者&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; updata(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;I am tester, Verification bug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Devob(OBperson):
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;具体观察者&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; updata(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i am developing , Fix bug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Announcerob(OBperson):
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;具体观察者&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; updata(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i am announcer, release new version&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; OBperation():
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;具体发布者&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
        self.&lt;/span&gt;&lt;span&gt;__observers&lt;/span&gt; =&lt;span&gt; []

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; collect_bug(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Number of bugs collected : &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        self.notifyObserver()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; addOBserver(self, observer):
        self.&lt;/span&gt;&lt;span&gt;__observers&lt;/span&gt;&lt;span&gt;.append(observer)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; removeOBserver(self, observer):
        self.&lt;/span&gt;&lt;span&gt;__observers&lt;/span&gt;&lt;span&gt;.remove(observer)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; notifyObserver(self):
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ob &lt;span&gt;in&lt;/span&gt; self.&lt;span&gt;__observers&lt;/span&gt;&lt;span&gt;:
            ob.updata()

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    p &lt;/span&gt;=&lt;span&gt; OBperation()
    p.addOBserver(Devob())
    p.addOBserver(TestOB())
    p.addOBserver(Announcerob())
    p.collect_bug()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1011845/201904/1011845-20190427000125968-1139527743.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 设计要点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;被观察者至少需要有三个方法：添加监听者， 移除监听者， 通知OBserver的方法，观察者至少要有一个方法：更新方法，更新当前内容，&lt;/p&gt;
&lt;p&gt;并作出相应处理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推模型和拉模型：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;观察者模式根据其侧重的功能还可以分为推模型和拉模型。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;推模型：&lt;/strong&gt;被观察者对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。一般这种模型的实现中，会把被观察者对象中的全部或部分信息通过 update 的参数传递给观察者 [update(Object obj) ，通过 obj 参数传递]。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;拉模型：&lt;/strong&gt;被观察者在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到被观察者对象中获取，相当于是观察者从被观察者对象中拉数据。一般这种模型的实现中，会把被观察者对象自身通过 update 方法传递给观察者 [update(Observable observable )，通过 observable 参数传递 ]，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。&lt;/p&gt;

</description>
<pubDate>Fri, 26 Apr 2019 16:19:00 +0000</pubDate>
<dc:creator>zzt小怪兽</dc:creator>
<og:description>定义： 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖的对象都会得到通知并被自动更新。 观察者模式是对象的行为模式，又叫发布-订阅（pubish/subscribe）模式，模型</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zztxiaodeng/p/10777331.html</dc:identifier>
</item>
<item>
<title>Java相关面试题总结 - akon07</title>
<link>http://www.cnblogs.com/tangjian07/p/10759854.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tangjian07/p/10759854.html</guid>
<description>&lt;p&gt;本文分为十九个模块，分别是：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label1&quot;&gt;Java 基础&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label2&quot;&gt;容器&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label3&quot;&gt;多线程&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label4&quot;&gt;反射&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label5&quot;&gt;对象拷贝&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label6&quot;&gt;Java Web&lt;/a&gt; 、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label7&quot;&gt;异常&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label8&quot;&gt;网络&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label9&quot;&gt;设计模式&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label10&quot;&gt;Spring/Spring MVC&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label11&quot;&gt;Spring Boot/Spring Cloud&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label12&quot;&gt;Hibernate&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label13&quot;&gt;MyBatis&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label14&quot;&gt;RabbitMQ&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label15&quot;&gt;Kafka&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label16&quot;&gt;Zookeeper&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label17&quot;&gt;MySQL&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label18&quot;&gt;Redis&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/tangjian07/p/10759854.html#label19&quot;&gt;JVM&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; ，如下图所示：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1588033/201904/1588033-20190423232724079-1729621702.png&quot; alt=&quot;&quot; width=&quot;534&quot; height=&quot;567&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【Java基础】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;1. JDK 和 JRE 有什么区别？&lt;br/&gt;2. == 和 equals 的区别是什么？&lt;br/&gt;3. 两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？&lt;br/&gt;4. final 在 Java 中有什么作用？&lt;br/&gt;5. Java 中的 Math. round(-1. 5) 等于多少？&lt;br/&gt;6. String 属于基础的数据类型吗？&lt;br/&gt;7. Java 中操作字符串都有哪些类？它们之间有什么区别？&lt;br/&gt;8. String str=&quot;i&quot;与 String str=new String(&quot;i&quot;)一样吗？&lt;br/&gt;9. 如何将字符串反转&lt;br/&gt;10. String 类的常用方法都有那些？&lt;br/&gt;11. 抽象类必须要有抽象方法吗？&lt;br/&gt;12. 普通类和抽象类有哪些区别？&lt;br/&gt;13. 抽象类能使用 final 修饰吗？&lt;br/&gt;14. 接口和抽象类有什么区别？&lt;br/&gt;15. Java 中 IO 流分为几种？&lt;br/&gt;16. BIO、NIO、AIO 有什么区别？&lt;br/&gt;17. Files的常用方法都有哪些？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【容器】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;18. Java 容器都有哪些？&lt;br/&gt;19. Collection 和 Collections 有什么区别？&lt;br/&gt;20. List、Set、Map 之间的区别是什么？&lt;br/&gt;21. HashMap 和 Hashtable 有什么区别？&lt;br/&gt;22. 如何决定使用 HashMap 还是 TreeMap？&lt;br/&gt;23. 说一下 HashMap 的实现原理？&lt;br/&gt;24. 说一下 HashSet 的实现原理？&lt;br/&gt;25. ArrayList 和 LinkedList 的区别是什么？&lt;br/&gt;26. 如何实现数组和 List 之间的转换？&lt;br/&gt;27. ArrayList 和 Vector 的区别是什么？&lt;br/&gt;28. Array 和 ArrayList 有何区别？&lt;br/&gt;29. 在 Queue 中 poll()和 remove()有什么区别？&lt;br/&gt;30. 哪些集合类是线程安全的？&lt;br/&gt;31. 迭代器 Iterator 是什么？&lt;br/&gt;32. Iterator 怎么使用？有什么特点？&lt;br/&gt;33. Iterator 和 ListIterator 有什么区别？&lt;br/&gt;34. 怎么确保一个集合不能被修改？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【多线程】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;35. 并行和并发有什么区别？&lt;br/&gt;36. 线程和进程的区别？&lt;br/&gt;37. 守护线程是什么？&lt;br/&gt;38. 创建线程有哪几种方式？&lt;br/&gt;39. 说一下 runnable 和 callable 有什么区别？&lt;br/&gt;40. 线程有哪些状态？&lt;br/&gt;41. sleep() 和 wait() 有什么区别？&lt;br/&gt;42. notify()和 notifyAll()有什么区别？&lt;br/&gt;43. 线程的 run() 和 start() 有什么区别？&lt;br/&gt;44. 创建线程池有哪几种方式？&lt;br/&gt;45. 线程池都有哪些状态？&lt;br/&gt;46. 线程池中 submit() 和 execute() 方法有什么区别？&lt;br/&gt;47. 在 Java 程序中怎么保证多线程的运行安全？&lt;br/&gt;48. 多线程中 synchronized 锁升级的原理是什么？&lt;br/&gt;49. 什么是死锁？&lt;br/&gt;50. 怎么防止死锁？&lt;br/&gt;51. ThreadLocal 是什么？有哪些使用场景？&lt;br/&gt;52. 说一下 synchronized 底层实现原理？&lt;br/&gt;53. synchronized 和 volatile 的区别是什么？&lt;br/&gt;54. synchronized 和 Lock 有什么区别？&lt;br/&gt;55. synchronized 和 ReentrantLock 区别是什么？&lt;br/&gt;56. 说一下 atomic 的原理&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【反射】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;57. 什么是反射？&lt;br/&gt;58. 什么是 Java 序列化？什么情况下需要序列化？&lt;br/&gt;59. 动态代理是什么？有哪些应用？&lt;br/&gt;60. 怎么实现动态代理？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【对象拷贝】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;61. 为什么要使用克隆？&lt;br/&gt;62. 如何实现对象克隆？&lt;br/&gt;63. 深拷贝和浅拷贝区别是什么？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【Java Web】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;64. JSP 和 servlet 有什么区别？&lt;br/&gt;65. JSP 有哪些内置对象？作用分别是什么？&lt;br/&gt;66. 说一下 JSP 的 4 种作用域？&lt;br/&gt;67. session 和 cookie 有什么区别？&lt;br/&gt;68. 说一下 session 的工作原理？&lt;br/&gt;69. 如果客户端禁止 cookie 的实现 session 还能用吗？&lt;br/&gt;70. spring mvc 和 struts 的区别是什么？&lt;br/&gt;71. 如何避免 SQL 注入？&lt;br/&gt;72. 什么是 XSS 攻击，如何避免？&lt;br/&gt;73. 什么是 CSRF 攻击，如何避免？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【异常】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;74. throw 和 throws 的区别？&lt;br/&gt;75. final、finally、finalize 有什么区别？&lt;br/&gt;76. try-catch-finally 中哪个部分可以省略？&lt;br/&gt;77. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？&lt;br/&gt;78. 常见的异常类有哪些？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【网络】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;79. http 响应码 301 和 302 代表的是什么？有什么区别？&lt;br/&gt;80. forward 和 redirect 的区别？&lt;br/&gt;81. 简述 tcp 和 udp的区别？&lt;br/&gt;82. tcp 为什么要三次握手，两次不行吗？为什么？&lt;br/&gt;83. 说一下 tcp 粘包是怎么产生的？&lt;br/&gt;84. OSI 的七层模型都有哪些？&lt;br/&gt;85. get 和 post 请求有哪些区别？&lt;br/&gt;86. 如何实现跨域？&lt;br/&gt;87. 说一下 JSONP 实现原理？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【设计模式】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;88. 说一下你熟悉的设计模式？&lt;br/&gt;89. 简单工厂和抽象工厂有什么区别？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【Spring/Spring MVC】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;90. 为什么要使用 spring？&lt;br/&gt;91. 解释一下什么是 aop？&lt;br/&gt;92. 解释一下什么是 ioc？&lt;br/&gt;93. spring 有哪些主要模块？&lt;br/&gt;94. spring 常用的注入方式有哪些？&lt;br/&gt;95. spring 中的 bean 是线程安全的吗？&lt;br/&gt;96. spring 支持几种 bean 的作用域？&lt;br/&gt;97. spring 自动装配 bean 有哪些方式？&lt;br/&gt;98. spring 事务实现方式有哪些？&lt;br/&gt;99. 说一下 spring 的事务隔离？&lt;br/&gt;100. 说一下 spring mvc 运行流程？&lt;br/&gt;101. spring mvc 有哪些组件？&lt;br/&gt;102. @RequestMapping 的作用是什么？&lt;br/&gt;103. @Autowired 的作用是什么？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【Spring Boot/Spring Cloud】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;104. 什么是 spring boot？&lt;br/&gt;105. 为什么要用 spring boot？&lt;br/&gt;106. spring boot 核心配置文件是什么？&lt;br/&gt;107. spring boot 配置文件有哪几种类型？它们有什么区别？&lt;br/&gt;108. spring boot 有哪些方式可以实现热部署？&lt;br/&gt;109. jpa 和 hibernate 有什么区别？&lt;br/&gt;110. 什么是 spring cloud？&lt;br/&gt;111. spring cloud 断路器的作用是什么？&lt;br/&gt;112. spring cloud 的核心组件有哪些？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【Hibernate】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;113. 为什么要使用 hibernate？&lt;br/&gt;114. 什么是 ORM 框架？&lt;br/&gt;115. hibernate 中如何在控制台查看打印的 SQL 语句？&lt;br/&gt;116. hibernate 有几种查询方式？&lt;br/&gt;117. hibernate 实体类可以被定义为 final 吗？&lt;br/&gt;118. 在 hibernate 中使用 Integer 和 int 做映射有什么区别？&lt;br/&gt;119. hibernate 是如何工作的？&lt;br/&gt;120. get()和 load()的区别？&lt;br/&gt;121. 说一下 hibernate 的缓存机制？&lt;br/&gt;122. hibernate 对象有哪些状态？&lt;br/&gt;123. 在 hibernate 中 getCurrentSession 和 openSession 的区别是什么？&lt;br/&gt;124. hibernate 实体类必须要有无参构造函数吗？为什么？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【MyBatis】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;125. MyBatis 中 #{}和 ${}的区别是什么？&lt;br/&gt;126. MyBatis 有几种分页方式？&lt;br/&gt;127. RowBounds 是一次性查询全部结果吗？为什么？&lt;br/&gt;128. MyBatis 逻辑分页和物理分页的区别是什么？&lt;br/&gt;129. MyBatis 是否支持延迟加载？延迟加载的原理是什么？&lt;br/&gt;130. 说一下 MyBatis 的一级缓存和二级缓存？&lt;br/&gt;131. MyBatis 和 hibernate 的区别有哪些？&lt;br/&gt;132. MyBatis 有哪些执行器（Executor）？&lt;br/&gt;133. MyBatis 分页插件的实现原理是什么？&lt;br/&gt;134. MyBatis 如何编写一个自定义插件？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【RabbitMQ】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;135. RabbitMQ 的使用场景有哪些？&lt;br/&gt;136. RabbitMQ 有哪些重要的角色？&lt;br/&gt;137. RabbitMQ 有哪些重要的组件？&lt;br/&gt;138. RabbitMQ 中 vhost 的作用是什么？&lt;br/&gt;139. RabbitMQ 的消息是怎么发送的？&lt;br/&gt;140. RabbitMQ 怎么保证消息的稳定性？&lt;br/&gt;141. RabbitMQ 怎么避免消息丢失？&lt;br/&gt;142. 要保证消息持久化成功的条件有哪些？&lt;br/&gt;143. RabbitMQ 持久化有什么缺点？&lt;br/&gt;144. RabbitMQ 有几种广播类型？&lt;br/&gt;145. RabbitMQ 怎么实现延迟消息队列？&lt;br/&gt;146. RabbitMQ 集群有什么用？&lt;br/&gt;147. RabbitMQ 节点的类型有哪些？&lt;br/&gt;148. RabbitMQ 集群搭建需要注意哪些问题？&lt;br/&gt;149. RabbitMQ 每个节点是其他节点的完整拷贝吗？为什么？&lt;br/&gt;150. RabbitMQ 集群中唯一一个磁盘节点崩溃了会发生什么情况？&lt;br/&gt;151. RabbitMQ 对集群节点停止顺序有要求吗？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【Kafka】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;152. kafka 可以脱离 zookeeper 单独使用吗？为什么？&lt;br/&gt;153. kafka 有几种数据保留的策略？&lt;br/&gt;154. kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？&lt;br/&gt;155. 什么情况会导致 kafka 运行变慢？&lt;br/&gt;156. 使用 kafka 集群需要注意什么？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【Zookeeper】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;157. zookeeper 是什么？&lt;br/&gt;158. zookeeper 都有哪些功能？&lt;br/&gt;159. zookeeper 有几种部署模式？&lt;br/&gt;160. zookeeper 怎么保证主从节点的状态同步？&lt;br/&gt;161. 集群中为什么要有主节点？&lt;br/&gt;162. 集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？&lt;br/&gt;163. 说一下 zookeeper 的通知机制？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【MySQL】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;164. 数据库的三范式是什么？&lt;br/&gt;165. 一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 MySQL 数据库，又插入了一条数据，此时 id 是几？&lt;br/&gt;166. 如何获取当前数据库版本？&lt;br/&gt;167. 说一下 ACID 是什么？&lt;br/&gt;168. char 和 varchar 的区别是什么？&lt;br/&gt;169. float 和 double 的区别是什么？&lt;br/&gt;170. MySQL 的内连接、左连接、右连接有什么区别？&lt;br/&gt;171. MySQL 索引是怎么实现的？&lt;br/&gt;172. 怎么验证 MySQL 的索引是否满足需求？&lt;br/&gt;173. 说一下数据库的事务隔离？&lt;br/&gt;174. 说一下 MySQL 常用的引擎？&lt;br/&gt;175. 说一下 MySQL 的行锁和表锁？&lt;br/&gt;176. 说一下乐观锁和悲观锁？&lt;br/&gt;177. MySQL 问题排查都有哪些手段？&lt;br/&gt;178. 如何做 MySQL 的性能优化？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【Redis】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;179. Redis 是什么？都有哪些使用场景？&lt;br/&gt;180. Redis 有哪些功能？&lt;br/&gt;181. Redis 和 memcache 有什么区别？&lt;br/&gt;182. Redis 为什么是单线程的？&lt;br/&gt;183. 什么是缓存穿透？怎么解决？&lt;br/&gt;184. Redis 支持的数据类型有哪些？&lt;br/&gt;185. Redis 支持的 Java 客户端都有哪些？&lt;br/&gt;186. jedis 和 Redisson 有哪些区别？&lt;br/&gt;187. 怎么保证缓存和数据库数据的一致性？&lt;br/&gt;188. Redis 持久化有几种方式？&lt;br/&gt;189. Redis 怎么实现分布式锁？&lt;br/&gt;190. Redis 分布式锁有什么缺陷？&lt;br/&gt;191. Redis 如何做内存优化？&lt;br/&gt;192. Redis 淘汰策略有哪些？&lt;br/&gt;193. Redis 常见的性能问题有哪些？该如何解决？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【JVM】&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;194. 说一下 JVM 的主要组成部分？及其作用？&lt;br/&gt;195. 说一下 JVM 运行时数据区？&lt;br/&gt;196. 说一下堆栈的区别？&lt;br/&gt;197. 队列和栈是什么？有什么区别？&lt;br/&gt;198. 什么是双亲委派模型？&lt;br/&gt;199. 说一下类装载的执行过程？&lt;br/&gt;200. 怎么判断对象是否可以被回收？&lt;br/&gt;201. Java 中都有哪些引用类型？&lt;br/&gt;202. 说一下 JVM 有哪些垃圾回收算法？&lt;br/&gt;203. 说一下 JVM 有哪些垃圾回收器？&lt;br/&gt;204. 详细介绍一下 CMS 垃圾回收器？&lt;br/&gt;205. 新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？&lt;br/&gt;206. 简述分代垃圾回收器是怎么工作的？&lt;br/&gt;207. 说一下 JVM 调优的工具？&lt;br/&gt;208. 常用的 JVM 调优的参数都有哪些？&lt;/p&gt;

&lt;p&gt;答案后续更新中...&lt;/p&gt;
</description>
<pubDate>Fri, 26 Apr 2019 15:54:00 +0000</pubDate>
<dc:creator>akon07</dc:creator>
<og:description>本文分为十九个模块，分别是： Java 基础、容器、多线程、反射、对象拷贝、Java Web 、异常、网络、设计模式、Spring/Spring MVC、Spring Boot/Spring</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tangjian07/p/10759854.html</dc:identifier>
</item>
<item>
<title>Java对字符串加密并返回星号※ - 涛姐涛哥</title>
<link>http://www.cnblogs.com/taojietaoge/p/10773455.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/taojietaoge/p/10773455.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt; If you don't look back, you'll never know I waiting for you behind you.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Java对字符串加密并返回星号※&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;PasswordUtils这个加密工具类是在Ranger项目的源码中发现的，它是一个安全管理框架，普通的加密需求应该用它的加密工具类就OK了；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先，用户输入密码，前端先用type为password把密码显示为※，但是这时通过F12查看，浏览器仍然可以看到密码信息，但是这是用户自己输入的，第一把看见也ok；一旦请求提交立刻返回经加密后的密码，此处并非返回加密后的密码，而是直接返回一个※密码如“******”，并把转换加密后的密码存入数据库，之后每次请求也都返回“******”；然后在后台需要用到密码的地方就自己解密咯。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;加密工具类PasswordUtils：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.apache.ranger.plugin.util;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.crypto.Cipher;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.crypto.SecretKey;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.crypto.SecretKeyFactory;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.crypto.spec.PBEKeySpec;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.crypto.spec.PBEParameterSpec;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.lang.StringUtils;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; 
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.sun.jersey.core.util.Base64;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PasswordUtils {
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; 
&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger LOG = LoggerFactory.getLogger(PasswordUtils.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String CRYPT_ALGO;
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;&lt;span&gt;[] ENCRYPT_KEY;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] SALT;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; ITERATION_COUNT;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;&lt;span&gt;[] encryptKey;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] salt;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String LEN_SEPARATOR_STR = &quot;:&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DEFAULT_CRYPT_ALGO = &quot;PBEWithMD5AndDES&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DEFAULT_ENCRYPT_KEY = &quot;tzL1AKl5uc4NKYaoQ4P3WLGIBFPXWPWdu1fRm9004jtQiV&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DEFAULT_SALT = &quot;f77aLYLo&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; DEFAULT_ITERATION_COUNT = 17&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; 
&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String encryptPassword(String aPassword) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PasswordUtils(aPassword).encrypt();
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; 
&lt;span&gt; 39&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; String encrypt() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         String ret = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;         String strToEncrypt = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;        
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (password == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;             strToEncrypt = &quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;             strToEncrypt = password.length() + LEN_SEPARATOR_STR +&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;             Cipher engine =&lt;span&gt; Cipher.getInstance(CRYPT_ALGO);
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;             PBEKeySpec keySpec = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PBEKeySpec(encryptKey);
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             SecretKeyFactory skf =&lt;span&gt; SecretKeyFactory.getInstance(CRYPT_ALGO);
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;             SecretKey key =&lt;span&gt; skf.generateSecret(keySpec);
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;             engine.init(Cipher.ENCRYPT_MODE, key, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PBEParameterSpec(salt, ITERATION_COUNT));
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] encryptedStr =&lt;span&gt; engine.doFinal(strToEncrypt.getBytes());
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;             ret = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(Base64.encode(encryptedStr));
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Throwable t) {
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;             LOG.error(&quot;Unable to encrypt password due to error&quot;&lt;span&gt;, t);
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IOException(&quot;Unable to encrypt password due to error&quot;&lt;span&gt;, t);
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; 
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;        PasswordUtils(String aPassword) {
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;             String[] crypt_algo_array = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; count = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (aPassword != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; aPassword.contains(&quot;,&quot;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;                 count = StringUtils.countMatches(aPassword, &quot;,&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;                 crypt_algo_array = aPassword.split(&quot;,&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (crypt_algo_array != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; crypt_algo_array.length &amp;gt; 4&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                 CRYPT_ALGO = crypt_algo_array[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;                 ENCRYPT_KEY = crypt_algo_array[1&lt;span&gt;].toCharArray();
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;                 SALT = crypt_algo_array[2&lt;span&gt;].getBytes();
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;                 ITERATION_COUNT = Integer.parseInt(crypt_algo_array[3&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;                 password = crypt_algo_array[4&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (count &amp;gt; 4&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 5 ; i&amp;lt;=count ; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;                         password = password + &quot;,&quot; +&lt;span&gt; crypt_algo_array[i];
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;                     CRYPT_ALGO =&lt;span&gt; DEFAULT_CRYPT_ALGO;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                     ENCRYPT_KEY =&lt;span&gt; DEFAULT_ENCRYPT_KEY.toCharArray();
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;                     SALT =&lt;span&gt; DEFAULT_SALT.getBytes();
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                     ITERATION_COUNT =&lt;span&gt; DEFAULT_ITERATION_COUNT;
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                     password =&lt;span&gt; aPassword;
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;             Map&amp;lt;String, String&amp;gt; env =&lt;span&gt; System.getenv();
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             String encryptKeyStr = env.get(&quot;ENCRYPT_KEY&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (encryptKeyStr == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;                 encryptKey=&lt;span&gt;ENCRYPT_KEY;
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;                 encryptKey=&lt;span&gt;encryptKeyStr.toCharArray();
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;             String saltStr = env.get(&quot;ENCRYPT_SALT&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (saltStr == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;                 salt =&lt;span&gt; SALT;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;                 salt=&lt;span&gt;saltStr.getBytes();
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String decryptPassword(String aPassword) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PasswordUtils(aPassword).decrypt();
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; String decrypt() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;         String ret = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] decodedPassword =&lt;span&gt; Base64.decode(password);
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;             Cipher engine =&lt;span&gt; Cipher.getInstance(CRYPT_ALGO);
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;             PBEKeySpec keySpec = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PBEKeySpec(encryptKey);
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;             SecretKeyFactory skf =&lt;span&gt; SecretKeyFactory.getInstance(CRYPT_ALGO);
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;             SecretKey key =&lt;span&gt; skf.generateSecret(keySpec);
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;             engine.init(Cipher.DECRYPT_MODE, key,&lt;span&gt;new&lt;/span&gt;&lt;span&gt; PBEParameterSpec(salt, ITERATION_COUNT));
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;             String decrypted = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(engine.doFinal(decodedPassword));
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; foundAt =&lt;span&gt; decrypted.indexOf(LEN_SEPARATOR_STR);
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (foundAt &amp;gt; -1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (decrypted.length() &amp;gt;&lt;span&gt; foundAt) {
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;                     ret = decrypted.substring(foundAt+1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;                     ret = &quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;                 ret = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;         &lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Throwable t) {
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;             LOG.error(&quot;Unable to decrypt password due to error&quot;&lt;span&gt;, t);
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IOException(&quot;Unable to decrypt password due to error&quot;&lt;span&gt;, t);
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; 
&lt;span&gt;137&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String getDecryptPassword(String password) {
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;         String decryptedPwd = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;             decryptedPwd =&lt;span&gt; decryptPassword(password);
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex) {
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;             LOG.warn(&quot;Password decryption failed, trying original password string.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;             decryptedPwd = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;         } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (decryptedPwd == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;                 decryptedPwd =&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; decryptedPwd;
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试加密/解密执行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.xinyan.springcloud.tjt;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestDecryptEncrypt {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         String password = &quot;taojietaoge&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加密：&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         String encryptPassword =&lt;span&gt; PasswordUtils.encryptPassword(password);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         System.out.println(&quot;加密后：&quot;+&lt;span&gt; encryptPassword);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;解密：&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         String decryptPassword =&lt;span&gt; PasswordUtils.decryptPassword(encryptPassword);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         System.out.println(&quot;解密后：&quot;+&lt;span&gt; decryptPassword);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;执行结果如下：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1580332/201904/1580332-20190426235001137-383691075.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 26 Apr 2019 15:51:00 +0000</pubDate>
<dc:creator>涛姐涛哥</dc:creator>
<og:description>If you don't look back, you'll never know I waiting for you behind you. Java对字符串加密并返回星号※ Pas</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/taojietaoge/p/10773455.html</dc:identifier>
</item>
<item>
<title>Node.js + MySQL 实现数据的增删改查 - 刘哇勇</title>
<link>http://www.cnblogs.com/Wayou/p/nodejs_crud.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Wayou/p/nodejs_crud.html</guid>
<description>&lt;p&gt;通过完成一个 todo 应用展示 Node.js + MySQL 增删改查的功能。这里后台使用 &lt;a href=&quot;https://koajs.com&quot; rel=&quot;nofollow&quot;&gt;Koa&lt;/a&gt; 及其相应的一些中间件作为 server 提供服务。&lt;/p&gt;
&lt;h2&gt;初始化项目&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ mkdir node-crud &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;$_&lt;/span&gt;
$ yarn init -y &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npx gitignore node
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的命令创建了一个空文件夹 &lt;code&gt;node-crud&lt;/code&gt;，进入之后初始化一个 &lt;code&gt;package.json&lt;/code&gt; 以及创建 &lt;code&gt;.gitignore&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;安装 Koa 并创建 &lt;code&gt;app.js&lt;/code&gt; 以启动一个简单的 server：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ yarn add koa
$ touch app.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;app.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Koa&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;koa&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Koa&lt;/span&gt;();

&lt;span class=&quot;pl-smi&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hello world!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
});

&lt;span class=&quot;pl-smi&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;listen&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;3000&lt;/span&gt;);
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;server started at http://localhost:3000&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 node 启动服务后即可通过访问 &lt;a rel=&quot;nofollow&quot; href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt; 查看到页面。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ node app.js
server started at http://localhost:3000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将启动服务的命令添加到 &lt;code&gt;package.json&lt;/code&gt; 的 &lt;code&gt;scripts&lt;/code&gt; 后，可通过 yarn 方便地调用。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;package.json&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;scripts&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;start&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;node app.js&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  },
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就可以这样来启动服务：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ yarn start
server started at http://localhost:3000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/3783096/56812291-29970d80-686d-11e9-9482-00ab31d2effe.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3783096/56812291-29970d80-686d-11e9-9482-00ab31d2effe.png&quot; alt=&quot;hello world 页面&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;hello world 页面&lt;/p&gt;
&lt;h2&gt;添加视图&lt;/h2&gt;
&lt;p&gt;现在页面还只能呈现简单的文本，通过让请求返回 HTML 文件，可渲染更加复杂的页面。比如：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;h1&amp;gt;hello world!&amp;lt;/h1&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但手动拼接 HTML 不是很方便，可通添加相应 Koa 中间件使得请求可从预先写好的模板文件返回 HTML 到页面。&lt;/p&gt;
&lt;p&gt;安装 &lt;a href=&quot;https://github.com/queckezz/koa-views#readme&quot;&gt;koa-views&lt;/a&gt; 并使用它来返回视图（view）。&lt;code&gt;koa-views&lt;/code&gt; 需要配合另外的模板引擎来展示数据，这里使用 &lt;a href=&quot;https://github.com/mozilla/nunjucks#readme&quot;&gt;&lt;code&gt;nunjucks&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ yarn add koa-views nunjucks
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在代码中使用上面两个 npm 模块来返回页面：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; 配置模板路径及所使用的模板引擎&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;use&lt;/span&gt;(
  &lt;span class=&quot;pl-en&quot;&gt;views&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/views&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, {
    map&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      html&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;nunjucks&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
  })
);

&lt;span class=&quot;pl-smi&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;form&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, {
    todo&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {}
  });
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后创建 &lt;code&gt;views&lt;/code&gt; 目录并在其中放置视图文件，比如创建一个 &lt;code&gt;form.html&lt;/code&gt; 并在其中编辑一个 HTML 表单，后续使用它来提交数据。&lt;/p&gt;
&lt;details readability=&quot;3&quot;&gt;views/form.html
&lt;div class=&quot;highlight highlight-text-html-basic&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;UTF-8&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; /&amp;gt;
    &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;viewport&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;width=device-width, initial-scale=1.0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; /&amp;gt;
    &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;X-UA-Compatible&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;ie=edge&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; /&amp;gt;
    &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;title&lt;/span&gt;&amp;gt;todo crud - add todo&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;title&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;head&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/edit&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;POST&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;fieldset&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;legend&lt;/span&gt;&amp;gt;add todo&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;legend&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;text&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;{{ todo.id }}&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; /&amp;gt;
        &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;form-row&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;
          &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;content&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;
            todo content: &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;content&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;text&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;placeholder&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;todo content...&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;content&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;{{ todo.content }}&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
            /&amp;gt;
          &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;label&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;form-row&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;
          &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;is_done&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;
            is complete:
            &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;input&lt;/span&gt;
              &lt;span class=&quot;pl-e&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;is_done&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span class=&quot;pl-e&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;checkbox&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span class=&quot;pl-e&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;is_done&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span class=&quot;pl-e&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span class=&quot;pl-e&quot;&gt;{%if&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;todo.is_done&lt;/span&gt;==&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;0&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-e&quot;&gt;%}checked{%endif%}&lt;/span&gt;
            /&amp;gt;
          &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;label&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;submit&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;submit&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;button&lt;/span&gt;&amp;gt;
      &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;fieldset&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;form&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;html&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;&lt;p&gt;其中 &lt;code&gt;{%...%}&lt;/code&gt; 为 nunjucks 的模板语法，更多可查看其&lt;a href=&quot;https://mozilla.github.io/nunjucks/&quot; rel=&quot;nofollow&quot;&gt;文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;再次启动服务器后，可看到如下的页面，包含一个表单以&lt;strong&gt;创建&lt;/strong&gt;一个 todo。同时如果我们在渲染这个页面时，提供了 todo 数据，相应的数据会自动填充到表单中，此时该表单可用来&lt;strong&gt;编辑&lt;/strong&gt;一个 todo。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/3783096/56812330-3a478380-686d-11e9-86f7-152bbf9e5972.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3783096/56812330-3a478380-686d-11e9-86f7-152bbf9e5972.png&quot; alt=&quot;表单页面&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;表单页面&lt;/p&gt;
&lt;h2&gt;添加路由&lt;/h2&gt;
&lt;p&gt;除了这个表单页，应用中还会有一个展示所有 todo 的列表页。需要添加路由来分别展示这两个页面。同样是通过相应的 Koa 中间件来实现。这里不需要太复杂的功能，所以使用 &lt;a href=&quot;https://github.com/koajs/route#readme&quot;&gt;&lt;code&gt;koa-route&lt;/code&gt;&lt;/a&gt; 就能满足需求。&lt;/p&gt;
&lt;p&gt;安装 &lt;code&gt;koa-route&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
$ yarn add koa&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;route
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 views 目录下再创建一个 HTML 文件并写入列表页的代码：&lt;/p&gt;
&lt;details readability=&quot;3&quot;&gt;views/list.html
&lt;div class=&quot;highlight highlight-text-html-basic&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;UTF-8&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; /&amp;gt;
    &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;viewport&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;width=device-width, initial-scale=1.0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; /&amp;gt;
    &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;X-UA-Compatible&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;ie=edge&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; /&amp;gt;
    &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;title&lt;/span&gt;&amp;gt;todo crud - todo list&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;title&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;style&lt;/span&gt;&amp;gt;
&lt;span class=&quot;pl-s1&quot;&gt;      &lt;span class=&quot;pl-ent&quot;&gt;li&lt;/span&gt;{&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;        &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;padding&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;5&lt;span class=&quot;pl-k&quot;&gt;px&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;      }&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;    &lt;/span&gt;&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;style&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;head&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/add&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;add&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;a&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;ul&lt;/span&gt;&amp;gt;
      {% for item in list%}
      &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;li&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;todo-item&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;
          &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;content&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;#{{ loop.index }}[{%if item.is_done==0%}⏳{%else%}✅{%endif%}] {{ item.content }}&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt;&amp;gt;
      &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;li&lt;/span&gt;&amp;gt;
      {% else %}
      &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;li&lt;/span&gt;&amp;gt;nothing yet. &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/add&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;add&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;a&lt;/span&gt;&amp;gt; some.&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;li&lt;/span&gt;&amp;gt;
      {%endfor%}
    &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;ul&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/add&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;add&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;a&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;html&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;&lt;p&gt;列表页中，通过 nunjucks 的 &lt;code&gt;{% for item in list%}&lt;/code&gt; 语句遍历数据生成列表，需要展示的列表数据会在页面渲染时通过前面添加的 &lt;code&gt;koa-view&lt;/code&gt; 来传递。&lt;/p&gt;
&lt;p&gt;然后更新 app.js，添加路由逻辑以展示列表页和表单页。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;15&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;koa-route&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-smi&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;use&lt;/span&gt;(
  &lt;span class=&quot;pl-en&quot;&gt;views&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/views&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, {
    map&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      html&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;nunjucks&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
  })
);

&lt;span class=&quot;pl-smi&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;use&lt;/span&gt;(
  &lt;span class=&quot;pl-smi&quot;&gt;_&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;) {
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;todos&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;db&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;getAll&lt;/span&gt;();
    &lt;span class=&quot;pl-k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;list&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, {
      list&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; todos
    });
  })
);

&lt;span class=&quot;pl-smi&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;use&lt;/span&gt;(
  &lt;span class=&quot;pl-smi&quot;&gt;_&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/add&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;) {
    &lt;span class=&quot;pl-k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;form&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, { todo&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {} });
  })
);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为 Koa 中间件是有顺序的。其中 views 的配置需要在路由之前，即 &lt;code&gt;_.get&lt;/code&gt; 部分，这样后续中间件在路由分发时才能正确地设置上视图。&lt;/p&gt;
&lt;p&gt;重新启动服务器，访问 &lt;a rel=&quot;nofollow&quot; href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt; 便能看到列表页。点击页面中 &lt;code&gt;add&lt;/code&gt; 链接跳转到表单页以添加或编辑 todo。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/3783096/56812350-49c6cc80-686d-11e9-9dc1-966cb24c23a4.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3783096/56812350-49c6cc80-686d-11e9-9dc1-966cb24c23a4.png&quot; alt=&quot;列表页&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;列表页&lt;/p&gt;
&lt;p&gt;现在我们有了可以提交数据的表单，也有了可以展示数据的列表页。接下来就是实现接收表单提交过来的数据并存入数据库。&lt;/p&gt;
&lt;h2&gt;表单数据的接收&lt;/h2&gt;
&lt;p&gt;通过添加相应的 Koa 中间件，以在代码中获取到页面提交过来的表单数据。&lt;/p&gt;
&lt;p&gt;安装 &lt;a href=&quot;https://github.com/koajs/body-parser&quot;&gt;&lt;code&gt;koa-bodyparser&lt;/code&gt;&lt;/a&gt; 并在代码中启用。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ yarn add koa-bodyparser
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;app.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;bodyParser&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;koa-bodyparser&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-smi&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;pl-en&quot;&gt;bodyParser&lt;/span&gt;());
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;form 表单中，表单元素的 &lt;code&gt;name&lt;/code&gt; 属性在数据提交时便是后端拿到的字段名，元素身上的 &lt;code&gt;value&lt;/code&gt; 属性便是该字段的值。比如上面表单中 &lt;code&gt;&amp;lt;input name=&quot;content&quot; type=&quot;text&quot; placeholder=&quot;todo content...&quot; id=&quot;content&quot; value=&quot;{{ todo.content }}&quot;/&amp;gt;&lt;/code&gt; 在提交后会得到 &lt;code&gt;{content:'...'}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加新的路由以提供 POST 类型的接口来接收表单数据，因为该接口接收来的表单数据有可能是创建，有可能是编辑，这里取名 &lt;code&gt;/edit&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;use&lt;/span&gt;(
  &lt;span class=&quot;pl-smi&quot;&gt;_&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;post&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/edit&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;) {
    &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;todo&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;body&lt;/span&gt;;
      &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; TODO: 保存到数据库&lt;/span&gt;
      &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;redirect&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
    } &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (error) {
      &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;stack&lt;/span&gt;;
    }
  })
);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里 &lt;code&gt;ctx.request.body&lt;/code&gt; 便是 &lt;code&gt;koa-bodyparser&lt;/code&gt; 中间件解析数据后添加到 &lt;code&gt;ctx.request&lt;/code&gt; 上的表单数据，等待被保存到数据库。&lt;/p&gt;
&lt;p&gt;接下来便是数据库部分。&lt;/p&gt;
&lt;h2&gt;准备数据库&lt;/h2&gt;
&lt;p&gt;假设本地已经安装并正确配置了 MySQL，如果没有，可参考 &lt;a href=&quot;https://www.cnblogs.com/Wayou/p/quick_start_for_mysql.html&quot; rel=&quot;nofollow&quot;&gt;MySQL 上手教程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;登录 MySQL 创建名为 &lt;code&gt;todo&lt;/code&gt; 的数据库：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ mysql -u wayou -p
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; 输入密码...&lt;/span&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; CREATE DATABASE todo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;切换到刚刚创建的数据库：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; use todo&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过以下脚本创建名为 todo 的表：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
CREATE TABLE &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;todo&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; (
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; int(10) unsigned NOT NULL AUTO_INCREMENT,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;content&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; varchar(500) COLLATE utf8mb4_general_ci DEFAULT NULL,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;is_done&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; int(11) DEFAULT &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;0&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;date&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; date NOT NULL,
  PRIMARY KEY (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;)
)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;数据库连接&lt;/h2&gt;
&lt;p&gt;在服务端代码中，同样，这里需要一个相应的 Koa 中间件来连接到数据库以进行相应的操作。&lt;/p&gt;
&lt;p&gt;正常来讲，使用 &lt;a href=&quot;https://www.npmjs.com/package/mysql&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;mysql&lt;/code&gt;&lt;/a&gt; 即可，但它不提供 Promise 方式的接口调用，还是 callback 的方式，写起来有点不方便。所以这里使用另外一个 npm 模块 &lt;a href=&quot;https://github.com/lukeb-uk/node-promise-mysql#readme&quot;&gt;promise-mysql&lt;/a&gt;，是对它的 Promise 改装。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ yarn add promise-mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就可以愉快地使用 &lt;code&gt;async/await&lt;/code&gt; 进行相关调用了。&lt;/p&gt;
&lt;p&gt;创建 &lt;code&gt;db.js&lt;/code&gt; 文件来专门处理数据库相关的操作，比如连接，数据的增删等，这样 app.js 中路由对应的 controller 只需要调用即可，不用掺杂数据库相关的逻辑。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;db.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;promise-mysql&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;sql&lt;/span&gt;) {
  &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;mysql&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;createConnection&lt;/span&gt;({
    host&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    user&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wayou&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    password&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;xxx&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    database&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;todo&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  });
  &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;connection&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;query&lt;/span&gt;(sql);
    &lt;span class=&quot;pl-smi&quot;&gt;connection&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;end&lt;/span&gt;();
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; result;
  } &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (error) {
    &lt;span class=&quot;pl-k&quot;&gt;throw&lt;/span&gt; error;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面代码创建了一个接收 SQL 语句的方法，执行并返回结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小贴士&lt;/strong&gt;：如果上面代码在后续测试执行时发现报如下的错误：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt; consider upgrading MySQL client
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多半是用来连接的帐户没有相应从程序进行连接的权限，可通过如下命令来配置 MySQL。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ALTER USER &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wayou&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;@&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; IDENTIFIED WITH mysql_native_password BY &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;your_new_password&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
Query OK, 0 rows affected (0.01 sec)
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; FLUSH PRIVILEGES&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于 &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.5/en/native-pluggable-authentication.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;mysql_native_password&lt;/code&gt;&lt;/a&gt; 可到&lt;a href=&quot;https://dba.stackexchange.com/questions/209514/what-is-mysql-native-password?newreg=862807d825ce4a878805620eca2ea85e&quot; rel=&quot;nofollow&quot;&gt;这里&lt;/a&gt;了解更多。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FLUSH PRIVILEGES&lt;/code&gt; 用于刷新配置使其立即生效。&lt;/p&gt;
&lt;h2&gt;记录的插入&lt;/h2&gt;
&lt;p&gt;数据库连接准备好之后，就可以将接收到的表单数据插入到数据库中了。&lt;/p&gt;
&lt;p&gt;在 db.js 中添加插入数据的方法：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;db.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;17&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;update&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;) {
  &lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;is_done&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;is_done&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;is_done&lt;/span&gt;;

  &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;) {
    &lt;span class=&quot;pl-c1&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;assign&lt;/span&gt;(&lt;span class=&quot;pl-en&quot;&gt;getTodoById&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;), todo);
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    UPDATE todo&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    SET content='&lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt;',is_done='&lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;is_done&lt;/span&gt;&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt;'&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    WHERE todo.id=&lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    &lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;);
  } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Date&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;toJSON&lt;/span&gt;().&lt;span class=&quot;pl-c1&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    INSERT INTO todo (content,date,is_done) &lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    VALUES ('&lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt;','&lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt;','&lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;is_done&lt;/span&gt;&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt;')&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    &lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该方法用于更新已有的记录或添加新的记录，这一点是通过判断传来的表单数据中是否有 id 字段，如果有，说明是编辑已有的数据，那么执行更新操作，如果没有 id 字段，则说明是新增一个 todo。&lt;/p&gt;
&lt;p&gt;这里的 id 字段在 form 表单中是不展示的，参见上面表单页面的代码，但为了在表单提交时能够带上 id 字段，所以在表单中放置了一个隐藏的 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 来标识。&lt;/p&gt;
&lt;p&gt;需要注意的是，HTML 中 form 表单中的 checkbox，其只在被勾选时才会被提交，未勾选时不会被提交到后台。所以这里对 &lt;code&gt;is_done&lt;/code&gt; 进行一下兼容处理。&lt;/p&gt;
&lt;p&gt;更新路由部分的代码，调用这里的 &lt;code&gt;update&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;app.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt; const db = require(&quot;./db&quot;);&lt;/span&gt;

app.use(
  _.post(&quot;/edit&quot;, async function(ctx) {
    try {
      const todo = ctx.request.body;
&lt;span class=&quot;pl-md&quot;&gt;&lt;span class=&quot;pl-md&quot;&gt;-&lt;/span&gt;     // TODO: 保存到数据库&lt;/span&gt;
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;     await db.update(todo);&lt;/span&gt;
      ctx.redirect(&quot;/&quot;);
    } catch (error) {
      ctx.body = error.stack;
    }
  })
);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启服务器访问 &lt;a rel=&quot;nofollow&quot; href=&quot;http://localhost:3000/add&quot;&gt;http://localhost:3000/add&lt;/a&gt; 以提交表单来创建一条数据到数据库。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/3783096/56812394-5e0ac980-686d-11e9-8711-43c1fd1e31aa.gif&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3783096/56812394-5e0ac980-686d-11e9-8711-43c1fd1e31aa.gif&quot; alt=&quot;提交表单创建一条 todo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;提交表单创建一条 todo&lt;/p&gt;
&lt;p&gt;因为我们还没有将数据库中的列表展示到首页，所以这里提交成功后，跳回到首页时，数据没展现。不过我们可以去数据库查询刚刚创建的结果。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
mysql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SELECT &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; FROM todo&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;
+----+---------+---------+------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; id &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; content &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; is_done &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; date       &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+----+---------+---------+------------+
&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;  1 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; 买菜    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;       0 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; 2019-04-26 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;
+----+---------+---------+------------+
1 row &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;查询并展示数据到页面&lt;/h2&gt;
&lt;p&gt;刚刚已经写入了一条数据到数据库，现在可以通过 &lt;code&gt;SELECT&lt;/code&gt; 语句将它查询出来并展示到首页的列表中。&lt;/p&gt;
&lt;p&gt;添加相应的查询方法到 &lt;code&gt;db.js&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;db.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;getAll&lt;/span&gt;() {
  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;select * from todo&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后更新列表页的 controller，调用该方法获取数据并返回到页面。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;app.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
app.use(
  _.get(&quot;/&quot;, async function(ctx) {
&lt;span class=&quot;pl-md&quot;&gt;&lt;span class=&quot;pl-md&quot;&gt;-&lt;/span&gt;   // TODO: 从数据库获取数据&lt;/span&gt;
&lt;span class=&quot;pl-md&quot;&gt;&lt;span class=&quot;pl-md&quot;&gt;-&lt;/span&gt;   const todos = [];&lt;/span&gt;
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;   const todos = await db.getAll();&lt;/span&gt;
    await ctx.render(&quot;list&quot;, {
      list: todos
    });
  })
);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重新启动服务后，如果一切顺利，访问首页可看到刚刚添加的 todo 展示了出来。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/3783096/56812429-711d9980-686d-11e9-8363-8e7f593aa74f.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3783096/56812429-711d9980-686d-11e9-8363-8e7f593aa74f.png&quot; alt=&quot;列表中展示来自数据库的数据&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;列表中展示来自数据库的数据&lt;/p&gt;
&lt;h2&gt;数据更新&lt;/h2&gt;
&lt;p&gt;下面为列表页中每条 todo 添加一个编辑按钮，点击后可跳转编辑页，同时跳转时连接上带上 todo 的 id。这样编辑页可从 url 中获取 id 并从数据库中将该 id 对应的数据取出来渲染到编辑页。&lt;/p&gt;
&lt;p&gt;还需要添加一个新路由 &lt;code&gt;/edit&lt;/code&gt; 展示和前面创建时一样的表单页，将根据 id 获取到的数据塞入表单提供编辑。&lt;/p&gt;
&lt;p&gt;更新列表页 HTML 添加编辑按钮：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;views/list.html&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&amp;lt;div class=&quot;todo-item&quot;&amp;gt;
  &amp;lt;div class=&quot;content&quot;&amp;gt;#{{ loop.index }}[{%if item.is_done==0%}⏳{%else%}✅{%endif%}] {{ item.content }}&amp;lt;/div&amp;gt;
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;  &amp;lt;div class=&quot;action&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;    &amp;lt;a href=&quot;/edit?id={{ item.id }}&quot;&amp;gt;edit&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加编辑页的路由并返回这个表单：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;app.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;use&lt;/span&gt;(
  &lt;span class=&quot;pl-smi&quot;&gt;_&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/edit&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;) {
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;query&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;id) {
      &lt;span class=&quot;pl-k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;id is missing&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
    }
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;todo&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;db&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;getTodoById&lt;/span&gt;(id);
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;todo) {
      &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;item not found!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
    } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;pl-k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;form&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, {
        todo
      });
    }
  })
);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为参数是通过拼接到 url 传递而来，所以这里通过 query 部分来获取这个 id 参数。拿到之后调用了一个方法根据 id 获取数据。&lt;/p&gt;
&lt;p&gt;更新 &lt;code&gt;db.js&lt;/code&gt; 添加这个获取数据的方法：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;db.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;getTodoById&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;id&lt;/span&gt;) {
  &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;SELECT * FROM todo WHERE todo.id='&lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;id&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt;'&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;);
  &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (result[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]) {
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; result[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;];
  }
  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启后打开首页，可以看到新增的编辑按钮，点击后跳转到了新增的编辑页面，在这里可以对已经添加的条目进行更新。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/3783096/56812459-81357900-686d-11e9-8689-e8a9013d30b5.gif&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3783096/56812459-81357900-686d-11e9-8689-e8a9013d30b5.gif&quot; alt=&quot;数据的更新&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;数据的更新&lt;/p&gt;
&lt;h2&gt;记录的删除&lt;/h2&gt;
&lt;p&gt;添加新的路由 '/remove' 提供删除操作的接口。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;app.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;use&lt;/span&gt;(
  &lt;span class=&quot;pl-smi&quot;&gt;_&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;post&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/remove&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;) {
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;remove entry &lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;id&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;);
      &lt;span class=&quot;pl-k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;db&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;remove&lt;/span&gt;(id);
      &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
        status&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;,
        error_message&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      };
    } &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (error) {
      &lt;span class=&quot;pl-smi&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;stack&lt;/span&gt;;
    }
  })
);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里 &lt;code&gt;/remove&lt;/code&gt; 是个 POST 类型的接口，前台页面会将需要删除的条目 id 通过异步调用该接口传递过来。这里 POST 数据的获取也通过 &lt;code&gt;koa-bodyparser&lt;/code&gt; 来获取，即 &lt;code&gt;ctx.request.body&lt;/code&gt; 上面。&lt;/p&gt;
&lt;p&gt;更新 &lt;code&gt;db,js&lt;/code&gt; 添加从数据库删除条目的方法：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;db.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;remove&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;id&lt;/span&gt;) {
  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;DELETE FROM todo WHERE todo.id='&lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;id&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt;'&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;万事具备，只差前台页面了。&lt;/p&gt;
&lt;p&gt;更新列表页的模板，在刚刚添加编辑按钮的地方，添加一个删除按钮。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;views/list.html&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-diff&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&amp;lt;div class=&quot;todo-item&quot;&amp;gt;
  &amp;lt;div class=&quot;content&quot;&amp;gt;#{{ loop.index }}[{%if item.is_done==0%}⏳{%else%}✅{%endif%}] {{ item.content }}&amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;action&quot;&amp;gt;
&lt;span class=&quot;pl-mi1&quot;&gt;&lt;span class=&quot;pl-mi1&quot;&gt;+&lt;/span&gt;    &amp;lt;button onclick=&quot;remove({{ item.id }})&quot;&amp;gt;remove&amp;lt;/button&amp;gt;&lt;/span&gt;
    &amp;lt;a href=&quot;/edit?id={{ item.id }}&quot;&amp;gt;edit&amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时添加相应 JavaScript 代码发起删除的请求，调用上面添加的 POST 接口。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;views/list.html&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-html-basic&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt;&amp;gt;
&lt;span class=&quot;pl-s1&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;remove&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;id&lt;/span&gt;) {&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;    &lt;span class=&quot;pl-en&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/remove&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, {&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;      method&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;post&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;      headers&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt;{&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;        &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Content-Type&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;application/json&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;      },&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;      body&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;stringify&lt;/span&gt;({ id })&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;    })&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;      .&lt;span class=&quot;pl-c1&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;response&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;json&lt;/span&gt;())&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;      .&lt;span class=&quot;pl-c1&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;status&lt;/span&gt;) {&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;          &lt;span class=&quot;pl-en&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;error_message&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;        } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;          &lt;span class=&quot;pl-en&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;removed succussfully!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;          &lt;span class=&quot;pl-smi&quot;&gt;location&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;reload&lt;/span&gt;();&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;        }&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;      })&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;      .&lt;span class=&quot;pl-c1&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;alert&lt;/span&gt;(error));&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;  }&lt;/span&gt;
&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前台在使用 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/Fetch_API&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt; PSOT 数据时，需要指定正确的 &lt;code&gt;Content-Type&lt;/code&gt;，否则后台 &lt;a href=&quot;https://github.com/koajs/bodyparser&quot;&gt;&lt;code&gt;koa-bodyparser&lt;/code&gt;&lt;/a&gt; 无法解析。&lt;/p&gt;
&lt;p&gt;重启后即可进行删除操作，成功后会提示并刷新页面。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/3783096/56812484-90b4c200-686d-11e9-841a-62b98386fd8f.gif&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3783096/56812484-90b4c200-686d-11e9-841a-62b98386fd8f.gif&quot; alt=&quot;remove&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;数据的删除操作&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;完成本文的流程，实现了数据的增删改查等基本操作。其中包含表单数据的提交与接收，Koa 中间件的使用以及数据库连接，还有 SQL 语句的执行等。&lt;/p&gt;
&lt;p&gt;本文中完整的示例代码可在 &lt;a href=&quot;https://github.com/wayou/node-crud&quot;&gt;wayou/node-crud&lt;/a&gt; 仓库中找到。&lt;/p&gt;
&lt;h2&gt;相关资源&lt;/h2&gt;
</description>
<pubDate>Fri, 26 Apr 2019 15:20:00 +0000</pubDate>
<dc:creator>刘哇勇</dc:creator>
<og:description>通过完成一个 todo 应用展示 Node.js + MySQL 增删改查的功能。这里后台使用 Koa 及其相应的一些中间件作为 server 提供服务。 初始化项目 $ mkdir node cru</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Wayou/p/nodejs_crud.html</dc:identifier>
</item>
<item>
<title>WebGL three.js学习笔记 使用粒子系统模拟时空隧道（虫洞） - nsytsqdtn</title>
<link>http://www.cnblogs.com/nsytsqdtn/p/10777195.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nsytsqdtn/p/10777195.html</guid>
<description>&lt;h2 id=&quot;webgl-three.js学习笔记-使用粒子系统模拟时空隧道&quot;&gt;WebGL three.js学习笔记 使用粒子系统模拟时空隧道&lt;/h2&gt;
&lt;p&gt;本例的运行结果如图：&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190426222855492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25zeXRzcWR0bg==,size_16,color_FFFFFF,t_70&quot; alt=&quot;时空隧道&quot;/&gt;&lt;/p&gt;


&lt;h2 id=&quot;three.js的粒子系统&quot;&gt;three.js的粒子系统&lt;/h2&gt;
&lt;p&gt;three.js的粒子系统主要是依靠精灵体来创建的，要实现three.js中的粒子系统创建，一般有两种方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一种&lt;/strong&gt;是在场景中使用很多歌THREE.Sprite创建单个的精灵，这样创建的每一个精灵体，我们都可以单独对它们进行操作，同时我们也可以用一个THREE.Group把他们放在一起，整合起来一起操作。具有很高的自主性。但同时也是需要大量的性能支持与开发上的不便利性，所以这里我选择了第二种方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二种&lt;/strong&gt;创建粒子系统是依靠点云的方式，点云就是很多很多点组成的一个东西，点云里面的每一个顶点都可以看做一个粒子，而这个粒子我们就可以使用纹理去对它美化,或者是使用坐标变化来变化出好看的粒子系统，这种创建方式的缺点是不能对每一个粒子单独进行操作，但是相比第一种却给我们提供了更多的方便。&lt;/p&gt;
&lt;h2 id=&quot;搭建场景&quot;&gt;搭建场景&lt;/h2&gt;
&lt;p&gt;点云的创建方法和普通的几何体差不多，首先需要一个材质THREE.PointsMaterial，可以设置每个粒子的大小size，颜色color，透明transparent等等属性。然后再用THREE.Points(geometry, material)这个方法就可以创建出点云了。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;let cloud = new THREE.Points(geom, material);//创建点云&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果我们给了Points()，geometry这个参数，这个点云会按照我们定义好的几何体的顶点去创建粒子。&lt;br/&gt;,比如geometry是一个Box，那么这个点云就会有8粒子，分别分布在正方体的8个顶点上。如果我们不用geometry，我们就需要手动给点云创建很多的顶点，包括定义它们的坐标，这里我们也是用一个定义好的几何体去创建粒子。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;//创建点云
    function createPointCloud(geom,color) {
        let material = new THREE.PointsMaterial({
            color: color,
            size: 3,
            transparent: true,
            blending: THREE.AdditiveBlending,//混合的模式，可以让很多的粒子的背景得到很好的融合，而不是互相干扰
            map: generateSprite()//取得渐变的canvas纹理
        });
        let cloud = new THREE.Points(geom, material);//创建点云
        cloud.sortParticles = true;//可以让所有粒子的Z轴得到正确摆放，不会互相遮挡
        return cloud;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;函数形参传过来的geom，我们使用的一个类似于管道的几何体TorusGeometry&lt;br/&gt;TorusGeometry的构造函数如下：&lt;br/&gt;THREE.TorusGeometry(radius, tube, radialSegments, tubularSegments, arc)&lt;br/&gt;　　　　&lt;strong&gt;radius：圆环半径&lt;br/&gt;　　　　tube：管道半径&lt;br/&gt;　　　　radialSegments：径向的分段数&lt;br/&gt;　　　　tubularSegments：管的分段数&lt;br/&gt;　　　　arc：圆环面的弧度，缺省值为Math.PI * 2&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;let geom = new THREE.TorusGeometry(
controls.radius, controls.tube,
 Math.round(controls.radialSegments), 
 Math.round(controls.tubularSegments)
 );//TorusGeometry几何体，管道状的几何体，里面的参数设置都是菜单面板上面的参数&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的参数主要就是我们要在菜单面板中去更改的值，&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;controls = new function () {
            this.radius = 100;//整个大圆隧道的半径
            this.tube = 10;//管道的半径
            this.radialSegments = 40;//管道的段数，值越大，创造的物体更精细，也更消耗性能
            this.tubularSegments = 200;//整个大圆隧道的段数，值越大，创造的物体更精细，也更消耗性能
            this.useParticle = true;//是否使用粒子系统创造几何体
            this.rotationSpeed = 0.003;//摄像机的速度
            this.color = 0xffffff;//此颜色会与材质中纹理本身的颜色做乘法，最后的结果就是渲染出来的颜色
            }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果我们要想创建一个好看的时空隧道还需要它的map属性，去赋给它一个纹理，这样每一个粒子都会比纯色更美观。纹理的话使用图片也是可以的，在这里我选择了制作一个渐变的画布来当做纹理，即generateSprite()这个函数的返回值。&lt;br/&gt;generateSprite函数代码（主要用到的是canvas的绘图函数，js的基础部分）：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;function generateSprite() {
        let canvas = document.createElement(&quot;canvas&quot;);
        canvas.width = 16;
        canvas.height = 16;
        let context = canvas.getContext(&quot;2d&quot;);//得到canvas的绘图上下文
        let gradient = context.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width / 2);//颜色渐变图形
        gradient.addColorStop(0, 'rgba(255,255,255,1)');//从内向外的第一渐变颜色，设置为白色
        gradient.addColorStop(0.2, 'rgba(0,125,125,1)');//从内向外的第二渐变颜色，设置为浅蓝色
        gradient.addColorStop(0.5, 'rgba(0,64,0,1)');//从内向外的第三渐变颜色，设置为绿色
        gradient.addColorStop(1, 'rgba(0,0,0,0.1)');//最外层的渐变颜色，为背景色
        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);

        let texture = new THREE.Texture(canvas);//将得到的画好的canvas作为纹理图片
        texture.needsUpdate = true;//需要设置更新，否则会没有效果
        return texture;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意texture.needsUpdate = true这句话，否则是渲染不出来的。&lt;/strong&gt;&lt;br/&gt;到此，我们就可以开始绘制场景&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;this.draw = function () {
                cameraInit = true;//调用此函数后，对摄像机进行一次初始化
                if (obj) scene.remove(obj);//如果场景的隧道已经存在，先移除
                let geom = new THREE.TorusGeometry(controls.radius, controls.tube, Math.round(controls.radialSegments), Math.round(controls.tubularSegments));//TorusGeometry几何体，管道状的几何体，里面的参数设置都是菜单面板上面的参数
                //使用粒子系统渲染几何体
                if (controls.useParticle) {
                    obj = createPointCloud(geom,controls.color);
                    obj.rotation.x = Math.PI/2;//旋转90度以后，更加方便观测
                } else {//使用普通材质系统渲染几何体
                    obj = createMesh(geom);
                    obj.rotation.x = Math.PI/2;
                }
                scene.add(obj);
            }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;场景有了以后，摄像机还是不会动，没有一种在时空隧道的感觉，所以这里想办法让摄像机在这个隧道的中间，沿着这个几何体的形状去移动。&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190426231210715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25zeXRzcWR0bg==,size_16,color_FFFFFF,t_70&quot; alt=&quot;圆&quot;/&gt;&lt;br/&gt;因为管道不看y轴的话，其实还是一个圆形，所以可以使用圆形的参数方程来让摄像机沿着这个函数去运动。让y轴始终不变就可以。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;let angle = 0;//初始角度
angle = angle + controls.rotationSpeed;//相机移动的速度
camera.position.set(controls.radius*Math.sin(angle),0,
controls.radius*Math.cos(angle));//让相机按照一个圆形轨迹运动
//可以理解为圆形的参数方程x=rsinα，y=rcosα，&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;即设置相机的x为rsinα，z为rcosα，y轴是一直都为0的。这里的r为整个隧道的半径，α就是当前移动的角度。&lt;/strong&gt;&lt;br/&gt;虽然这样可以让相机开始移动了，但是相机的目标我们还没有设置，我们需要让相机在移动的过程中，始终看向前方，这样才有一种在时空隧道中漫游的感觉。但是three.js的相机运动轨迹插件似乎在这里不好用，所以就想到了用其他方式实现。&lt;/p&gt;
&lt;p&gt;我们既然已经用相机运动的圆的轨迹方程，也能很容易想到相机lookAt的方向其实就是沿着圆运动的切线方向。所以只需要求摄像机运动的当前位置的切线就可以了。&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190426230335701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25zeXRzcWR0bg==,size_16,color_FFFFFF,t_70&quot; alt=&quot;向量&quot;/&gt;&lt;br/&gt;这里用到的是向量的点乘，坐标的&lt;strong&gt;点乘公式x1&lt;em&gt;y2+x2&lt;/em&gt;y1&lt;/strong&gt;，如果结果为0，就可以得到这个向量的垂直向量，我们要求的切线肯定就是垂直于半径的。因为我们的y轴一直不变的，所以点乘公式的y我们变为z。我们首先是让相机的位置减去隧道的中心（0，0，0），得到指向中心的向量，也就是半径，然后再用一个向量与它点乘为0，这个向量方向就是垂直于半径的了，也就是切线的方向。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;function look(){
        let view = new THREE.Vector3(camera.position.x, 
        camera.position.y, 
        camera.position.z);//计算当前摄像机位置点到世界中心点的向量
        let vertical = (new THREE.Vector3(view.z, 0, 
        -1.0 * view.x)).normalize();
        //两个向量的点积如果为0，则两个向量垂直，公式为x1*y2+x2*y1=0，
        //这里的Y轴用Z轴代替。计算出垂直向量以后用normalize（）化成单位向量
        camera.lookAt(camera.position.x+vertical.x,0,
        camera.position.z+vertical.z);//camera.lookAt的值设置为 刚刚的单位向量加在当前摄像机的位置
        //这样就实现了在摄像机在旋转时，一直朝前看。

    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后得到的这个单位向量我们再加上当前相机的位置，就可以设置为相机lookAt的值。&lt;br/&gt;&lt;strong&gt;注意我们在每次渲染的时候都要去改变这个值，因为相机的位置一直都在变化的&lt;/strong&gt;，所以我们要把它封装成一个函数，方便在渲染的时候调用。&lt;/p&gt;
&lt;p&gt;其他的，相机，场景的初始化代码：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;function initThree() {
        //渲染器初始化
        renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setClearColor(0x000000);
        document.getElementById(&quot;WebGL-output&quot;).appendChild(renderer.domElement);//将渲染添加到div中
        //初始化摄像机，这里使用透视投影摄像机
        camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.up.x = 0;//设置摄像机的上方向为哪个方向，这里定义摄像的上方为Y轴正方向
        camera.up.y = 1;
        camera.up.z = 0;
        look();//计算摄像机在当前位置应该对准的目标点，即camera.lookAt的设置

        //初始化场景
        scene = new THREE.Scene();

    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，场景基本已经构建完成了。&lt;/p&gt;
&lt;h2 id=&quot;完整的代码如下&quot;&gt;完整的代码如下：&lt;/h2&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Sprite Tunnel&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;../../import/three.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;../../import/stats.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;../../import/Setting.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;../../import/dat.gui.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
        div#WebGL-output {
            border: none;
            cursor: pointer;
            width: 100%;
            height: 850px;
            background-color: #000000;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body onload=&quot;Start()&quot;&amp;gt;
&amp;lt;div id=&quot;WebGL-output&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
    let camera, renderer, scene;
    let controls;

    function initThree() {
        //渲染器初始化
        renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setClearColor(0x000000);
        document.getElementById(&quot;WebGL-output&quot;).appendChild(renderer.domElement);//将渲染添加到div中
        //初始化摄像机，这里使用透视投影摄像机
        camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.up.x = 0;//设置摄像机的上方向为哪个方向，这里定义摄像的上方为Y轴正方向
        camera.up.y = 1;
        camera.up.z = 0;
        look();//计算摄像机在当前位置应该对准的目标点，即camera.lookAt的设置

        //初始化场景
        scene = new THREE.Scene();

    }
    //计算摄像机在当前位置应该对准的目标点
    function look(){
        let view = new THREE.Vector3(camera.position.x, camera.position.y, camera.position.z);//计算当前摄像机位置点到世界中心点的向量
        let vertical = (new THREE.Vector3(view.z, 0, -1.0 * view.x)).normalize();//两个向量的点积如果为0，则两个向量垂直，公式为x1*y2+x2*y1=0，这里的Y轴用Z轴代替。计算出垂直向量以后用normalize（）化成单位向量
        camera.lookAt(camera.position.x+vertical.x,0,camera.position.z+vertical.z);//camera.lookAt的值设置为 刚刚的单位向量加在当前摄像机的位置，这样就实现了在摄像机在旋转时，一直朝前看。

    }
    //
    let obj;
    let cameraInit = false;//改动隧道的半径后，需要让摄像机重新初始化，当cameraInit为true时进行初始化，先定义为false
    //初始化菜单面板
    function initDatGUI() {
        //设置菜单中需要的参数
        controls = new function () {
            this.radius = 100;//整个大圆隧道的半径
            this.tube = 10;//管道的半径
            this.radialSegments = 40;//管道的段数，值越大，创造的物体更精细，也更消耗性能
            this.tubularSegments = 200;//整个大圆隧道的段数，值越大，创造的物体更精细，也更消耗性能
            this.useParticle = true;//是否使用粒子系统创造几何体
            this.rotationSpeed = 0.003;//摄像机的速度
            this.color = 0xffffff;//此颜色会与材质中纹理本身的颜色做乘法，最后的结果就是渲染出来的颜色
            //初始化渲染场景中的隧道以及粒子系统的函数
            this.draw = function () {
                cameraInit = true;//调用此函数后，对摄像机进行一次初始化
                if (obj) scene.remove(obj);//如果场景的隧道已经存在，先移除
                let geom = new THREE.TorusGeometry(controls.radius, controls.tube, Math.round(controls.radialSegments), Math.round(controls.tubularSegments));//TorusGeometry几何体，管道状的几何体，里面的参数设置都是菜单面板上面的参数
                //使用粒子系统渲染几何体
                if (controls.useParticle) {
                    obj = createPointCloud(geom,controls.color);
                    obj.rotation.x = Math.PI/2;//旋转90度以后，更加方便观测
                } else {//使用普通材质系统渲染几何体
                    obj = createMesh(geom);
                    obj.rotation.x = Math.PI/2;
                }
                scene.add(obj);
            }
        };
        let gui = new dat.GUI();
        //将刚刚设置的参数添加到菜单中
        gui.add(controls, &quot;radius&quot;, 50, 200).onChange(controls.draw);
        gui.add(controls, &quot;rotationSpeed&quot;, 0, 0.02);
        gui.add(controls, &quot;tube&quot;, 5, 30).onChange(controls.draw);
        gui.add(controls, &quot;radialSegments&quot;, 20, 100).step(1).onChange(controls.draw);
        gui.add(controls, &quot;tubularSegments&quot;, 50, 300).step(1).onChange(controls.draw);
        gui.addColor(controls, &quot;color&quot;).onChange(controls.draw);
        gui.add(controls, &quot;useParticle&quot;).onChange(controls.draw);

        //这里需要先调用一次draw()函数，否则刚开始的时候会没有东西背渲染出来
        controls.draw();
    }
    //精灵贴图的制作，场景的粒子系统的每一个粒子都用这里制作的贴图来模拟
    function generateSprite() {
        let canvas = document.createElement(&quot;canvas&quot;);
        canvas.width = 16;
        canvas.height = 16;
        let context = canvas.getContext(&quot;2d&quot;);//得到canvas的绘图上下文
        let gradient = context.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width / 2);//颜色渐变图形
        gradient.addColorStop(0, 'rgba(255,255,255,1)');//从内向外的第一渐变颜色，设置为白色
        gradient.addColorStop(0.2, 'rgba(0,125,125,1)');//从内向外的第二渐变颜色，设置为浅蓝色
        gradient.addColorStop(0.5, 'rgba(0,64,0,1)');//从内向外的第三渐变颜色，设置为绿色
        gradient.addColorStop(1, 'rgba(0,0,0,0.1)');//最外层的渐变颜色，为背景色
        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);

        let texture = new THREE.Texture(canvas);//将得到的画好的canvas作为纹理图片
        texture.needsUpdate = true;//需要设置更新，否则会没有效果
        return texture;
    }
    //创建点云
    function createPointCloud(geom,color) {
        let material = new THREE.PointsMaterial({
            color: color,
            size: 3,
            transparent: true,
            blending: THREE.AdditiveBlending,//混合的模式，可以让很多的粒子的背景得到很好的融合，而不是互相干扰
            map: generateSprite()//取得渐变的canvas纹理
        });
        let cloud = new THREE.Points(geom, material);//创建点云
        cloud.sortParticles = true;//可以让所有粒子的Z轴得到正确摆放，不会互相遮挡
        return cloud;
    }
    //创建普通的管道几何体
    function createMesh(geom) {
        let material = new THREE.MeshNormalMaterial();
        material.side = THREE.DoubleSide;//双边渲染
        let mesh = new THREE.Mesh(geom, material);
        return mesh;
    }

    let angle = 0;//初始角度
    //渲染函数
    function render() {
        if(cameraInit){//每次重新渲染场景的时候，重新设置相机的位置与角度
            angle = 0;
            camera.position.set(controls.radius,0,0);
            cameraInit=false;
        }
        angle = angle + controls.rotationSpeed;//相机移动的速度
        camera.position.set(controls.radius*Math.sin(angle),0,controls.radius*Math.cos(angle));//让相机按照一个圆形轨迹运动，可以理解为圆形的参数方程x=rsinα，y=rcosα，
        look();
        stats.update();
        renderer.clear();
        requestAnimationFrame(render);
        renderer.render(scene, camera);
    }

    //功能函数
    function setting() {
        loadFullScreen();
        loadAutoScreen(camera, renderer);
        loadStats();
    }

    //运行主函数
    function Start() {
        initThree();
        initDatGUI();
        setting();
        render();
    }
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 26 Apr 2019 15:17:00 +0000</pubDate>
<dc:creator>nsytsqdtn</dc:creator>
<og:description>WebGL three.js学习笔记 使用粒子系统模拟时空隧道（虫洞）</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nsytsqdtn/p/10777195.html</dc:identifier>
</item>
<item>
<title>深度探索C++对象模型 - coding-for-self</title>
<link>http://www.cnblogs.com/longjiang-uestc/p/10777128.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/longjiang-uestc/p/10777128.html</guid>
<description>[unable to retrieve full-text content]深度探索C++对象模型 什么是C++对象模型: 语言中直接支持面向对象程序设计的部分. 对于各个支持的底层实现机制. 抽象性与实际性之间找出平衡点, 需要知识, 经验以及许多思考. 导读 这本书是C++第一套编译器cfront的设计者所写. 了解C++对象模型, 有助于在语言本身以及面向对象观念两方</description>
<pubDate>Fri, 26 Apr 2019 14:56:00 +0000</pubDate>
<dc:creator>coding-for-self</dc:creator>
<og:description>深度探索C++对象模型 什么是C++对象模型: 语言中直接支持面向对象程序设计的部分. 对于各个支持的底层实现机制. 抽象性与实际性之间找出平衡点, 需要知识, 经验以及许多思考. 导读 这本书是C+</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/longjiang-uestc/p/10777128.html</dc:identifier>
</item>
<item>
<title>DDD「领域驱动设计」分层架构初探 - AMortal</title>
<link>http://www.cnblogs.com/AMortal/p/10777050.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/AMortal/p/10777050.html</guid>
<description>&lt;hr/&gt;
&lt;p&gt;基于 DDD 传统分层架构实现。 项目 github地址：&lt;a href=&quot;https://github.com/WuMortal/DDDSample&quot; target=&quot;_blank&quot;&gt;https://github.com/WuMortal/DDDSamp&lt;/a&gt;le&lt;/p&gt;
&lt;p&gt;这个分层架构是工作中项目正在使用的分层架构，使用了一段时间发现受益匪浅，所以整理好我对该分层架构的一些理解分享给大家，我对于该分层架构还处于学习阶段理解有误的地方请指出。本次会以一个案例来说明各个分层的作用以及他们之间的调用关系，还有本次的重点不在于&lt;code&gt;DDD&lt;/code&gt;，因为这个我还未能完全理解，当然避免不了中间会涉及&lt;code&gt;DDD&lt;/code&gt;的一些概念。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DDD&lt;/code&gt; 什么？为什么使用 &lt;code&gt;DDD&lt;/code&gt; ？&lt;/p&gt;
&lt;p&gt;关于这个问题有兴趣的可以自行百度，我相信网络上已经有大量的文章来说明这几个问题。我目前的理解是“业务”，是为了应对现在复杂和多变的业务，是一种开发理念。&lt;/p&gt;
&lt;p&gt;这里我就以一个小故事描述吧，有一天你接到任务要实现一个修改用户的功能，非常简单。使用传统三层架构我们会怎么写？&lt;/p&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;先在 &lt;code&gt;DAL&lt;/code&gt; 层添加 &lt;code&gt;UserDAL&lt;/code&gt; 然后实现一个 &lt;code&gt;Update(UserEntity user)&lt;/code&gt; 方法&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;接着在 &lt;code&gt;BLL&lt;/code&gt; 中添加一个 &lt;code&gt;UserBLL&lt;/code&gt; 在实现一个 &lt;code&gt;Update(string email,string pwd ...)&lt;/code&gt; 方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;UI&lt;/code&gt; 层在调用，OK 完成任务下班回家。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;接着你接到一个新的需求就是：需要增加用户修改信息的记录。&lt;/p&gt;
&lt;p&gt;你立马在 &lt;code&gt;BLL&lt;/code&gt;的 &lt;code&gt;Update&lt;/code&gt; 的方法里增加的用户修改信息的操作记录，完成需求。&lt;/p&gt;
&lt;p&gt;过了一段时间又来了一个需求：用户改了信息需要通知到管理员，并且用户每天只能修改 3 次信息。&lt;/p&gt;
&lt;p&gt;好了之后又经历了几波需求，你的代码也在不断的增加和变化，有一天你接收新的项目或者离开了，那么接收你项目的人完全不清楚这里的业务情况。因为 &lt;code&gt;Update&lt;/code&gt; 方法并没有直接的反应出里的业务情况，代码目的不明确。代码变得难以维护。&lt;/p&gt;
&lt;p&gt;那么在 &lt;code&gt;DDD&lt;/code&gt; 里这些应该怎么做呢？&lt;/p&gt;
&lt;ol readability=&quot;2&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;首先在方法的命名上做出更改既然业务是修改信息那么命名应该是 &lt;code&gt;Modify(string email,string pwd ...)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;将用户修改信息的记录代码放在 &lt;code&gt;DomainService&lt;/code&gt;（领域服务） 中，当然这里的类、方法命名要直接的反应出业务情况，如：&lt;code&gt;RecordUserModifyDomainService&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;对应的通知管理员的代码也应该放入 &lt;code&gt;DomainService&lt;/code&gt; 中，&lt;code&gt;DomainService&lt;/code&gt; 应该尽量简单一般只做一件事情。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/WuMortal/DDDSamp/master/doc/images/DDD_1.png&quot; alt=&quot;DDD 流程图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面是关于 DDD 分层的一些描述，摘抄至之前看过的一片文章。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul readability=&quot;5.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Presentation 为表示层，负责向用户显示信息和解释用户命令。这里指的用户可以是另一个计算机系统，不一定是使用用户界面的人。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Application 为应用层，定义软件要完成的任务，并且指挥表达领域概念的对象来解决问题。这一层所负责的工作对业务来说意义重大，也是与其它系统的应用层进行交互的必要渠道。应用层要尽量简单，不包含业务规则或者知识，而只为下一层中的领域对象协调任务，分配工作，使它们互相协作。它没有反映业务情况的状态，但是却可以具有另外一种状态，为用户或程序显示某个任务的进度。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Domain 为领域层（或模型层），负责表达业务概念，业务状态信息以及业务规则。尽管保存业务状态的技术细节是由基础设施层实现的，但是反映业务情况的状态是由本层控制并且使用的。领域层是业务软件的核心，领域模型位于这一层。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Infrastructure 层为基础实施层，向其他层提供通用的技术能力：为应用层传递消息，为领域层提供持久化机制，为用户界面层绘制屏幕组件，等等。基础设施层还能够通过架构框架来支持四个层次间的交互模式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;

&lt;p&gt;如上图每个层中其实对应着具体的项，下面将对每个项进行说明。&lt;/p&gt;
&lt;ol readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;Domain&lt;/code&gt; 层分为：&lt;code&gt;Domain&lt;/code&gt; 、&lt;code&gt;DomainService&lt;/code&gt; 和 &lt;code&gt;IDomainService&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先 &lt;code&gt;Domain&lt;/code&gt; 中包含有 &lt;code&gt;Entity&lt;/code&gt; 和 &lt;code&gt;IRepository&lt;/code&gt; ，&lt;code&gt;Entity&lt;/code&gt; 是你的实体一般对于数据库表但是在某些情况下你也可以冗余一些字段。&lt;code&gt;IRepository&lt;/code&gt; 仓储的方法的定义，该层不会有具体的实现。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DomainService&lt;/code&gt; 和 &lt;code&gt;IDomainService&lt;/code&gt;，&lt;code&gt;IDomainService&lt;/code&gt; 只是负责表达业务的概念，&lt;code&gt;DomainService&lt;/code&gt; 里才是具体业务逻辑代码。在这一层的代码命名上需要注意，我们的命名一般要能直接描述出该代码业务的功能。这里可以参考 &lt;code&gt;DDD&lt;/code&gt; 的几个概念：通用语言、领域。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;Infrastructure&lt;/code&gt; 层分为：&lt;code&gt;Repository&lt;/code&gt; 和 &lt;code&gt;CrossCutting&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Repository&lt;/code&gt; 里面就是 &lt;code&gt;Domain&lt;/code&gt; 里 &lt;code&gt;IRepository&lt;/code&gt; 的具体实现。项目中 RepositoryExtensions.cs 是一个扩展类，将所有的仓储注入容器中，方便我们在项目中使用 &lt;code&gt;DI&lt;/code&gt;（依赖注入）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CrossCutting&lt;/code&gt; 主要是提供一些各个层通用的东西，如一些枚举、扩展方法、工具类等等。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;Application&lt;/code&gt; 层分为：&lt;code&gt;Application&lt;/code&gt; 和 &lt;code&gt;ApplicationContract&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;ApplicationContract&lt;/code&gt; 里主要包含 &lt;code&gt;DTO&lt;/code&gt;、&lt;code&gt;ViewModel&lt;/code&gt;、&lt;code&gt;IXXXService&lt;/code&gt;。&lt;code&gt;DTO&lt;/code&gt; 是数据传输对象，主要负责给展现层提供展示数据，&lt;code&gt;DTO&lt;/code&gt; 里应该只有值类型存在，当然根据具体情况也可存在其他的 &lt;code&gt;DTO&lt;/code&gt; 。&lt;code&gt;ViewModel&lt;/code&gt; 用于展现层传入的模型，简单的说 &lt;code&gt;DTO&lt;/code&gt; 输出，&lt;code&gt;ViewModel&lt;/code&gt; 输入。&lt;code&gt;IXXXService&lt;/code&gt; 就是应用层的方法定义。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Application&lt;/code&gt; 里面主要是用于 实现 &lt;code&gt;ApplicationContract&lt;/code&gt; 里的 &lt;code&gt;IXXXService&lt;/code&gt;，还有 &lt;code&gt;Entity&lt;/code&gt; 和 &lt;code&gt;DTO&lt;/code&gt; 的映射也属于该层的工作。ApplicationExtensions.cs 扩展方法是用于实现 &lt;code&gt;DI&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;Presentation&lt;/code&gt; 层里目前只有一个 WebAPI。展现层的代码一般有：对传入模型的校验。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本次以一个用户注册的流程为案例，来简单说明如何使用该分层架构进行项目开发。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先在 &lt;code&gt;Domain&lt;/code&gt; 中建一个 UserEntity，有 Id、Mobile、Name、Age、RegisterDateTime 属性。接着建立 IUserRepository，编写需要定义的方法，这里我定义了一个 GetByMobile(string mobile) 方法。&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  [Table(Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)] 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserEntity 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;{ 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [Column(IsIdentity = &lt;span&gt;true&lt;/span&gt;)] &lt;span&gt;public&lt;/span&gt; Guid Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Mobile { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; DateTime RegisterDateTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } =&lt;span&gt; DateTime.Now;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; IUserRepository : IBasicRepository&amp;lt;UserEntity, Guid&amp;gt; { Task GetByMobileAsync(&lt;span&gt;string&lt;/span&gt; mobile); }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;IBasicRepository 是使用了 &lt;a href=&quot;https://github.com/2881099/FreeSql&quot;&gt;FreeSql&lt;/a&gt;，你们可以自己实现。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;然后在 Repository 中建 UserRepository 类，该类继承 IUserRepository 并且实现该接口的所有方法。&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserRepository : GuidRepository, IUserRepository { &lt;span&gt;public&lt;/span&gt; UserRepository(IFreeSql freeSql) : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(freeSql) { }

&lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; Implementation of IUserRepository

&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;UserEntity&amp;gt; GetByMobileAsync(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; mobile)
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.Where(u =&amp;gt; u.Mobile ==&lt;span&gt; mobile).FirstAsync();
}

&lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;&lt;li&gt;仓储基本好了后就是 &lt;code&gt;Application&lt;/code&gt; ，首先需要在 ApplicationContract 中建 UsesDTO，根据业务情况你也可以建 UserSimpleDTO 、UserDetailDTO。&lt;code&gt;DTO&lt;/code&gt; 里包含你需要返回的数据，我这里有 Id、Name、Mobile、Age、ProfilePhotoSrc（头像地址根据 Id 拼接，这里我用 imgage/Id.png 的格式）。&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserDTO { 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Guid Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Mobile { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ProfilePhotoSrc { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;&lt;li&gt;添加好 UserDTO 后，然后添加 IUserService.cs 接口，接着在 Application 的 Service 中添加对应的 UserService，并且 UserService 继承 IUserService。&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IUserService

{

&lt;/span&gt;&lt;span&gt;///&lt;/span&gt;

&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户注册 &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;

&lt;span&gt;///&lt;/span&gt;&lt;span&gt;用户名

&lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;手机号

&lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;年龄 &lt;/span&gt;&lt;span&gt;///
&lt;/span&gt;&lt;span&gt;
Task Register(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; userName, &lt;span&gt;string&lt;/span&gt; mobile, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age);

List&lt;/span&gt;&amp;lt;UserDTO&amp;gt;&lt;span&gt; GetList();
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserService : IUserService { &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IUserRepository _userRepository;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserService(IUserRepository userRepository)
{
    _userRepository &lt;/span&gt;=&lt;span&gt; userRepository;
}

&lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; Implementation of IUserService

&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户注册
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;userName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;用户名&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;mobile&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;手机&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;age&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt; Register(&lt;span&gt;string&lt;/span&gt; userName, &lt;span&gt;string&lt;/span&gt; mobile, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userEnity = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userRepository.GetByMobileAsync(mobile);

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (userEnity != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; addUserEntity = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserEntity
    {
        Id &lt;/span&gt;=&lt;span&gt; Guid.NewGuid(),
        Age &lt;/span&gt;=&lt;span&gt; age,
        Name &lt;/span&gt;=&lt;span&gt; userName,
        Mobile &lt;/span&gt;=&lt;span&gt; mobile
    };

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; _userRepository.InsertAsync(addUserEntity) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;UserDTO&amp;gt;&lt;span&gt; GetList()
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _userRepository.Select
        .ToList().ToDTOList();
}

&lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ol readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;UserServcie 是对应展现层的控制器 UserController ---&amp;gt; IUserService。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;最后展现层的 WebAPI 只需要注入 IUserService，就可以开心的使用了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[HttpPost] &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task Post() 
{ 
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; second = DateTime.Now.Second.ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); &lt;span&gt;bool&lt;/span&gt; isSuccess = &lt;span&gt;await&lt;/span&gt; _userService.Register(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Wigor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;188888888{second}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;22&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Ok(isSuccess);
} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;就这样这个简单的案例就完成了，你可以参考着上面 说明 对比着去看看，当然这里有一些东西并没有体现，如 DomainServie，如果按照 DDD 来说还有 值对象、聚合、通用语言……，对于「通用语言」的话其实上面的小故事就体现出了一点。&lt;/p&gt;

&lt;p&gt;就 DDD 而言我这里还有很多东西都没有交代，今后有时间的话会慢慢的写出来。还有我也是在学习 DDD 所以有错的地方请指出，望多多包涵。&lt;/p&gt;
&lt;p&gt;在使用这套分层架构的时候碰到了许多问题，这里还要感谢老大的指导，为我解答疑问。&lt;/p&gt;
&lt;p&gt;最后附上&lt;a href=&quot;https://book.douban.com/subject/25844633/&quot;&gt;《实现领域驱动设计》&lt;/a&gt;中的一句话：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;我认为不管使用什么技术，我们的目的都是提供业务价值。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 26 Apr 2019 14:34:00 +0000</pubDate>
<dc:creator>AMortal</dc:creator>
<og:description>前言 基于 DDD 传统分层架构实现。 项目 github地址：https://github.com/WuMortal/DDDSample 这个分层架构是工作中项目正在使用的分层架构，使用了一段时间发</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/AMortal/p/10777050.html</dc:identifier>
</item>
<item>
<title>golang从简单的即时聊天来看架构演变 - LinkinStar</title>
<link>http://www.cnblogs.com/linkstar/p/10776994.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linkstar/p/10776994.html</guid>
<description>&lt;h2 id=&quot;toc_0&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;俗话说的好，架构从来都不是一蹴而就的，没有什么架构一开始设计就是最终版本，其中需要经过很多步骤的变化，今天我们就从一个最简单的例子来看看，究竟架构这个东西是怎么变的。&lt;br/&gt;我将从一个最简单的聊天室的功能来实现，看看这样一个说起来好像很简单但的功能，我们需要考虑哪些问题。&lt;/p&gt;
&lt;p&gt;我使用golang实现，从0开始实现，需要借助的是websocket来实现即时，基础知识自己补一下，这里不做过多赘述。&lt;/p&gt;

&lt;h2 id=&quot;toc_1&quot;&gt;功能描述&lt;/h2&gt;
&lt;p&gt;即时聊天室包含功能（这里写出的功能假设就是产品经理告诉我们的）：&lt;br/&gt;1、所用用户能连接聊天室&lt;br/&gt;2、连接成功的用户能向聊天室发送消息&lt;br/&gt;3、所有成功连接的用户能收到聊天室的消息&lt;/p&gt;
&lt;p&gt;为了简化，我们暂定只有一个房间，因为即使要求需要多个房间和一个房间差不多；然后我们简化消息存储，我们默认也不持久化消息，因为消息的持久化就会涉及各种数据库操作还有分页查询，这里暂时不做考虑。&lt;/p&gt;
&lt;p&gt;那么你一定奇怪了，这些都没了，那整个实现还有啥难度？你大可以自己先想一想如果是你，你会怎么样去实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下文中我会用C代表客户端，S代表服务端&lt;/strong&gt;&lt;br/&gt;（本文为了展示架构的演变，如果你能想到更好的架构或者一开始就直接想到最终版本，那么证明你已经有很多的经验积累了，给大佬递茶）&lt;/p&gt;

&lt;p&gt;各个版本和测试客户端所有的代码都已经上传github，如果有需要请查看，&lt;a href=&quot;https://github.com/LinkinStars/simple-chatroom&quot; target=&quot;_blank&quot;&gt;https://github.com/LinkinStars/simple-chatroom&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;toc_2&quot;&gt;版本1&lt;/h2&gt;
&lt;p&gt;第一个版本肯定是最简单的版本，我们就笔直朝着目标走。&lt;br/&gt;我们知道websocket能实现最基本的通信。&lt;br/&gt;客户端发送消息，服务端接收消息，C -&amp;gt; S&lt;br/&gt;服务端发送消息，客户端接收消息，S -&amp;gt; C&lt;/p&gt;
&lt;p&gt;那么聊天室就是：很多C发消息给S&lt;br/&gt;S将所有收到的消息发给&lt;strong&gt;每一个&lt;/strong&gt;C&lt;br/&gt;那么我们的第一个架构就很容易想到是这样子的：&lt;/p&gt;
&lt;p&gt;我们在服务端维护一个连接池，连接池中保存了连接的用户，每当服务端收到一个消息之后，就遍历一遍连接池，将这个消息发送给所有连接池中的人。流程图如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222239460-1573879184.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;那么下面，我们用代码来实现一下&lt;br/&gt;首先定义Room里面有一个连接池&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222239483-1682285957.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;然后我们写一个处理websocket的方法&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222239469-1800626398.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;最后写一个群发消息，遍历连接池，发送消息&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222239464-1461429055.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;补全其他部分，就完成了，这就是我们第一个版本，然后我们用一个测试的html测试一下&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222239507-694475520.jpg&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;334&quot;/&gt;￼&lt;br/&gt;嗯，完成啦~我真棒，真简单&lt;/p&gt;
&lt;p&gt;当然不可能那么简单！！！还有很多问题！&lt;br/&gt;针对于第一个版本，那么存在的问题还有&lt;br/&gt;1、我们发现，当用户断开连接的时候，连接池里面这个连接没有被移除，所以消息发送的时候会报错，而且连接池会一直变大。&lt;br/&gt;2、用户很多，遍历发送消息是一个耗时的操作，不应该被阻塞&lt;/p&gt;
&lt;p&gt;针对这两个问题改动如下：&lt;br/&gt;1、当发送消息失败，证明连接已经断开，所以从连接池中移除连接&lt;br/&gt;2、群发消息改为gorutinue&lt;/p&gt;

&lt;h2 id=&quot;toc_3&quot;&gt;版本1.1&lt;/h2&gt;
&lt;p&gt;所以V1.1修改如下&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222239487-261955423.jpg&quot; alt=&quot;&quot; width=&quot;645&quot; height=&quot;185&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222239766-258414409.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;到此为止，第一个版本就到这里了，因为聪明的你应该已经发现这样设计的架构存在一个巨大的问题...&lt;/p&gt;

&lt;h2 id=&quot;toc_4&quot;&gt;版本2&lt;/h2&gt;
&lt;p&gt;如果你有一定的并发编程的经验就会发现，上面版本有一个很危险的并发操作，那就是连接池。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;连接池的并发操作： 新的用户进来需要添加入连接池 如果用户断开连接需要移出连接池 每次发送消息需要遍历连接池&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们假设一种情况，当一个协程正在遍历连接池发送消息的时候，另外一个协程把其中一些连接删除了，还有一个协程把新的连接加进去了，这样的操作就是传说中的并发问题。&lt;/p&gt;
&lt;p&gt;而且对于websocket来说还有一个问题，就是如果并发去对同一个连接发送消息的话就会出现panic: concurrent write to websocket connection这样的异常，因为是panic所以问题就非常大了。&lt;/p&gt;
&lt;p&gt;并发问题怎么解决？很多人会说，简单，加锁就完事了&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222239797-1463541695.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222239796-1930513782.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222239823-561461111.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;br/&gt;加完了，搞定，这下没问题了吧。这就是版本2。因为加入了锁机制，所以并发安全保证了，但是&lt;/p&gt;
&lt;p&gt;新的问题又出现了，我们如果我们在发送消息的方法中加入延时，模拟出发送消息网络不正常的情况&lt;br/&gt;time.Sleep(time.Second * 2)&lt;br/&gt;那么你就会发现，当新的用户加入的时候，因为当前还有消息正在发送，所以导致新加入的用户没有办法获取到锁，也就无法发送消息&lt;br/&gt;那怎么办呢？&lt;/p&gt;
&lt;p&gt;然后顺便说一下，因为锁的是room在一定并发的程度上还是有可能出现异常&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222239890-207689074.jpg&quot; alt=&quot;&quot; width=&quot;732&quot; height=&quot;167&quot;/&gt;&lt;/p&gt;
&lt;p&gt;￼&lt;/p&gt;
&lt;h2 id=&quot;toc_5&quot;&gt;版本3&lt;/h2&gt;
&lt;p&gt;我在开发golang的时候有这样一个信念，有锁的地方一定能用channel优化，从而面向并发编程，虽然并非绝对，但是golang提供的channel很多情况下都能将锁给替换掉，从而换取出性能的提升，具体怎么做呢？&lt;br/&gt;首先我们想一下有哪些地方可以利用channel进行解耦&lt;br/&gt;1、第一次连接，我们将连接扔进一个信道中去&lt;br/&gt;2、断开连接，我们将要删除的连接扔进一个信道中去&lt;br/&gt;3、发送消息，我们每个连接对象都有一个信道，只需要将消息写入这个信道就能发送消息&lt;/p&gt;
&lt;p&gt;所以我们重新调整一下架构，图如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222239871-188431433.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;然后我们看看代码上面如何实现：&lt;/p&gt;
&lt;p&gt;首先定义一个客户端&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222239955-323723321.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;br/&gt;包含一个连接和一个发送消息的专用信道&lt;br/&gt;然后定义客户端的两个方法&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222240035-1684591778.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;当从websocket中获取到信息的时候，将消息丢到chatRoom的总发送信道中去，由chatRoom去群发。&lt;br/&gt;当自己的send信道中有消息时，将消息通过websocket发送给客户端。&lt;br/&gt;同时当发送或者接收消息出现异常，将自己发送给取消注册的信道，由chatRoom去移除注册信息。&lt;/p&gt;
&lt;p&gt;然后定义聊天室&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222240047-466235799.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;br/&gt;register用于处理注册&lt;br/&gt;unregister用于处理移除注册&lt;br/&gt;clientsPool这里更换为map，方便移除&lt;br/&gt;send是总发送消息信道，用于群发消息&lt;/p&gt;
&lt;p&gt;然后定义处理websocket方法&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222240027-440796033.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;br/&gt;当前第一次来的时候就创建客户端，然后启动客户端的读取和发送方法，并且将自己发给注册信道&lt;/p&gt;
&lt;p&gt;最后最重要的就是如何去调度处理chatRoom中所有的管道，我们使用select&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222240137-1368072579.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;当有注册的时候就注册，当有离开的时候就删除，当需要发送消息的时候，消息会发送给每一个client各自的send信道由它们自己发送。&lt;br/&gt;这样就成功实现了使用channel代替了原来的锁&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222240162-218201191.jpg&quot; alt=&quot;&quot; width=&quot;1005&quot; height=&quot;377&quot;/&gt;￼&lt;br/&gt;当前群发消息和客户的加入退出就基本不受到影响了，随时可以加入和退出，一旦加入就会收到消息。&lt;br/&gt;一切看似很完美吧，其实还有些bug，我们创建一些客户端进行压测试试看。&lt;/p&gt;

&lt;h2 id=&quot;toc_6&quot;&gt;版本3.1&lt;/h2&gt;
&lt;p&gt;编写压测代码如下，因为压测就是创建很多客户端发送消息，这里就不多做赘述了&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222240231-220114762.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222240214-1172306722.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;然后会发现，测试的过程中，如果你启动一个网页版本的客户端发现，你的消息发不出去了。这是为什么呢？&lt;br/&gt;原来我们之前在处理所有管道中任务的时候当处理发送消息的时候有问题，虽然send是一个有缓冲的通道，但是当缓冲满的时候，那么就会阻塞，无法向里面再发送消息，需要等待send里面的消息被消费，但是如果send里面的消息要被消费，前提就是要轮到这个消息被发送，于是造成了循环等待，一定意义上的死锁。（有点绕，你需要理一理）&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222240267-770877270.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;br/&gt;所以我们需要修改一下代码，修复这个bug，当消息无法写入send信道的时候，那就直接将这个消息抛弃（虽然这样处理好像不太科学），因为要不就是这个用户已经断开连接，要不就是这个用户的缓冲信道已经占满了。如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222240253-279504137.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;

&lt;h2 id=&quot;toc_7&quot;&gt;版本3.2&lt;/h2&gt;
&lt;p&gt;其实在做的过程中就发现了一些问题，一个问题同一个用户如果不停的发送消息，那么一方面是会对服务器造成压力，另一方面对于别的用户来说这是一种骚扰，所以我们需要限制用户发送消息的频率。这里为了测试方便，针对于同一个用户1秒内只能发送一条消息，这样从一定程度上也减少了并发问题的出现。&lt;/p&gt;
&lt;p&gt;改动非常简单，如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/899548/201904/899548-20190426222240398-1582676274.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;我们启动多个客户端定时的发送一些消息进行测试，5个客户端下每1ms发送一条消息，本机测试下来没有问题。（当然这个版本）&lt;/p&gt;

&lt;h2 id=&quot;toc_8&quot;&gt;后续版本&lt;/h2&gt;
&lt;p&gt;那么到现在我们已经实际了聊天室的基本功能，对于一个最简单的聊天来说已经足够了，但是因为我们简化了很多细节，所以存在很多优化的地方，下面列举几个地方可以做后续的优化和升级。&lt;/p&gt;
&lt;p&gt;1、消息持久化，当前消息发送之后如果当时用户不在线就无法收到，这样对于用户来说其实是很难受的，所以消息需要进行持久化，而持久化就会有很多方案，保存消息的方式，以及保存消息的时间，不能因为保存消息而影响即时性。以及用户再次登录之后需要将之后保存的消息返回给用户。&lt;/p&gt;
&lt;p&gt;2、消息id，我们现在发送消息的时候是不带消息id的，但是其实作为消息本身，消息的发送需要保证幂等性，相同的消息（消息id相同）不应该发送多次，所以消息id的生成，如何保证消息不重复也是需要考虑的。&lt;/p&gt;
&lt;p&gt;3、消息不丢失，消息持久化，网络异常都有可能导致消息丢失，如何保证消息不丢失呢？&lt;/p&gt;
&lt;p&gt;4、密集型消息分发，当用户人数很多，当前会创建很多的协程去分发消息，人一多肯定就不行了，而且人一多，一台机器肯定不够，那么分布式维护连接池等等架构的调整就需要进行了。&lt;/p&gt;
&lt;p&gt;5、心跳保活，连接一段时间之后，由于网络的原因或者别的原因，可能会导致连接中断的情况出现，所以经过一段时间就需要发送一些消息保持连接。类似PING\PONG&lt;/p&gt;
&lt;p&gt;6、鉴权，这个简单，当前任何用户连上就能发送消息，理论上来说，其实需要经过鉴权之后才能发送消息。&lt;/p&gt;
&lt;p&gt;7、消息加密，现在消息都是明文传输的，这样传递消息其实是不安全的，所以加密传输消息也是后期可以考虑的，同时消息的压缩也是。&lt;/p&gt;
&lt;p&gt;这些后续的扩展就要你来思考一下了，如何去实现。设计的时候你也可以参考很多现实中已经存在的一些例子来帮助你思考。在我们实现的时候也没有借助任何的中间件，所以你可以后期考虑使用一些中间件来完成分布式等要求，如mq等。&lt;/p&gt;
&lt;p&gt;是不是看到这里发现只是简单的一个即时聊天后面的架构扩展都是非常可怕的，如果真的要做到像微信或者qq那样随意的单聊和群聊，并且解决各种并发问题还有很多路要走。&lt;/p&gt;
&lt;p&gt;如果你有一些自己的想法，也欢迎在下面留言讨论。&lt;/p&gt;

&lt;h2 id=&quot;toc_9&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;这里其实想说明的并不是如何去设计一个IM，想要真正说明的是一个架构师如何进行演变的，其中需要考虑到哪些问题，这些问题又是如何被解决的。其中需要经历不断的测试，调整，测试，调整。还想说明的是，架构没有好和坏，只有适合与否，对于一个小的项目来说就没有必要用大架构，合适的才是最好的。&lt;/p&gt;
&lt;p&gt;最后，也肯定有人想了解一些大型的聊天im的架构，这里有几篇博客我认为写的很不错，可以参考一下。&lt;/p&gt;
&lt;p&gt;下面这两篇是对一些大型架构的说明&lt;br/&gt;&lt;a href=&quot;https://alexstocks.github.io/html/pubsub.html&quot; target=&quot;_blank&quot;&gt;https://alexstocks.github.io/html/pubsub.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://alexstocks.github.io/html/im.html&quot; target=&quot;_blank&quot;&gt;https://alexstocks.github.io/html/im.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面是一些github上的项目&lt;br/&gt;&lt;a href=&quot;https://github.com/alberliu/goim&quot; target=&quot;_blank&quot;&gt;https://github.com/alberliu/goim&lt;/a&gt;&lt;br/&gt;这个项目比较简单，容易理解，文档介绍详细解释了很多概念，具体使用nsq来实现消息的转发&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Terry-Mao/goim&quot; target=&quot;_blank&quot;&gt;https://github.com/Terry-Mao/goim&lt;/a&gt;&lt;br/&gt;这个项目相对复杂，运用到的东西就比较多，需要一定的理解，同时扩展性就相对不错&lt;/p&gt;


&lt;p&gt;作者：LinkinStar&lt;/p&gt;
&lt;p&gt;转载请注明出处：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: golang从简单的即时聊天来看架构演变&quot; href=&quot;https://www.cnblogs.com/linkstar/p/10776994.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/linkstar/p/10776994.html&lt;/a&gt; &lt;/p&gt;
</description>
<pubDate>Fri, 26 Apr 2019 14:23:00 +0000</pubDate>
<dc:creator>LinkinStar</dc:creator>
<og:description>前言 俗话说的好，架构从来都不是一蹴而就的，没有什么架构一开始设计就是最终版本，其中需要经过很多步骤的变化，今天我们就从一个最简单的例子来看看，究竟架构这个东西是怎么变的。 我将从一个最简单的聊天室的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/linkstar/p/10776994.html</dc:identifier>
</item>
</channel>
</rss>